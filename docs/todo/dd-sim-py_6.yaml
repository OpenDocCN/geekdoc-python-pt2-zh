- en: A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Special Attributes and Methods
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This appendix is a categorized list of all the special attributes and methods
    in the Python language. If you’re looking for a particular special method by name,
    see the index instead.
  prefs: []
  type: TYPE_NORMAL
- en: Complete documentation can be found at [https://docs.python.org/3/reference/datamodel.html](https://docs.python.org/3/reference/datamodel.html).
  prefs: []
  type: TYPE_NORMAL
- en: Special Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These methods are declared on a class to add support for various Python operators,
    built-in functions, and compound statements. These are all typically declared
    as instance methods, unless otherwise indicated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table A-1: Conversion and Coercion'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** | **Invocation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__bool__(self)` | Returns a boolean: `True` or `False`. | `bool(obj)`
    `if obj: pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__int__(self)` | Returns an integer. | `int(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__trunc__(self)` | Returns an integer by truncating the decimal part.
    | `trunc(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__floor__(self)` | Returns an integer by rounding down. | `floor(obj)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ceil__(self)` | Returns an integer by rounding up. | `ceil(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__index__(self)` | Returns an integer, converted losslessly (without
    omitting part of the data). *Indicates* `obj` *is* *the* *integer type.* | `operator.index(obj)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__float__(self)` | Returns a floating-point number. | `float(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__complex__(self)` | Returns a complex number. | `complex(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__round__(self, ndigits=None)` | Returns a floating-point number, rounded
    to `ndigits` precision. Returns an integer by rounding if `ndigits` is `None`.
    | `float(obj)` `float(obj,` `ndigits``)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__bytes__(self)` | Returns a `bytes` object. | `bytes(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__repr__(self)` | Returns a canonical representation as a string. |
    `repr(obj)` `f"{obj!r}"` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__str__(self)` | Returns a string. | `str(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__format__(self, format_spec="")` | Returns a string, formatted according
    to `format_spec`. | `format(obj,` `format_spec``)` |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-2: Capabilities and Traits'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** | **Invocation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__index__(self)` | Returns an integer, created losslessly. Indicates
    an object is an integer. | `operator.index(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__call__(self)` | Implementing makes `obj` callable. | `obj()` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__iter__(self)` | Returns an iterator corresponding to `obj`. | `iter(obj)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__next__(self)` | Returns the next value, according to the iterator
    `obj`. | `next(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__enter__(self)` | Enters the runtime context related to the context
    manager `obj`. | `with obj:` `pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__exit__(self)` | Exits the runtime context related to the context manager
    `obj`. | `with obj:` `pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__len__(self)` | Returns the length of `obj`, such as the number of
    items in a collection. | `len(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__length_hint__(self)` | Returns the estimated length for `obj` as a
    non-negative integer. Optional. | `operator.length_hint(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__getitem__(self, key)` | Returns an item in `obj` at `key`. Ideally,
    it should be valid to pass a slice to `key`. | `obj[``key``]` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__setitem__(self, key, value)` | Sets the value in `obj` of `key` to
    `value`. | `obj[``key``] =` `value` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__delitem__(self, key)` | Deletes the value in `obj` of `key`. | `del
    obj[``key``]` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__missing__(self)` | Called by `__getitem__()` method of `dict` subclasses
    when `key` is not in the dictionary. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__reversed__(self)` | Returns a new iterator object that iterates over
    objects in the container, in reverse order. Should only be provided if implementation
    is faster than using `__len__()` and `__getitem__()` to iterate in reverse. |
    `reversed(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__contains__(self, item)` | Checks if `item` is contained in obj, then
    returns a boolean. | `item` `in obj` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__hash__(self)` | Returns hash of `obj`. | `hash(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__get__(self, instance)` | Getter for a descriptor. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__set__(self, instance, value)` | Setter for a descriptor. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__delete__(self, instance)` | Deleter for a descriptor. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__set_name__(self, owner, name)` | Initializer for a descriptor. Called
    when the owning class `owner` is created. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__await__(self)` | Makes `obj` awaitable. Returns an iterator. | `await
    obj` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__aiter__(self)` | Returns an asynchronous iterator object. | `async
    for i in obj:` `pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__anext__(self)` | Returns an awaitable that yields the next value of
    the asynchronous iterator. | `async for i in obj:` `pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__aenter__(self)` | Same as `__enter__()` but returns an awaitable.
    | `async with obj:` `pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__aexit__(self)` | Same as `__exit__()` but returns an awaitable. |
    `async with obj:` `pass` |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-3: Comparison Operations'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** | **Invocation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__lt__(self, other)` | Returns `True` if `self < other`; or else, returns
    `False`. | `self < other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__le__(self, other)` | Returns `True` if `self <= other`; or else, returns
    `False`. | `self <= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__eq__(self, other)` | Returns `True` if `self == other`; or else, returns
    `False`. | `self == other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ne__(self, other)` | Returns `True` if `self != other`; or else, returns
    `False`. | `self != other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__gt__(self, other)` | Returns `True` if `self > other`; or else, returns
    `False`. | `self > other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ge__(self, other)` | Returns `True` if `self >= other`; or else, returns
    `False`. | `self >= other` |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-4: Arithmetic Operations'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** | **Invocation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__add__(self, other)` | Returns the sum of `obj` and `other` or concatenates
    `obj` and `other`. | `obj + other` `operator.add(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__sub__(self, other)` | Returns the difference of `obj` and `other`.
    | `obj – other` `operator.sub(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__mul_(self, other)` | Returns the product of `obj` and `other`. | `obj
    * other` `operator.mul(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__matmul__(self, other)` | Performs matrix multiplication of `obj` and
    `other`. | `obj @ other` `operator.matmul(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__truediv__(self, other)` | Performs true division of `obj` and `other`.
    | `obj / other` `operator.truediv(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__floordiv__(self, other)` | Performs floor division (integer division)
    of `obj` and `other`. | `obj // other` `operator.floordiv(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__mod__(self, other)` | Returns the remainder of division of `obj` and
    `other`. | `obj % other` `operator.mod(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__divmod__(self, other)` | Performs both floor division and modulo,
    then returns results in a tuple. Same as `(obj //` `other``, obj %` `other``)`.
    | `divmod(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__pow__(self, other, mod=None)` | Raises `obj` to the power `other`.
    If a mod is provided, the result is the same as `pow(obj,` `other``) %` `mod,`
    but calculated more efficiently. | `obj ** other` `pow(obj, other)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pow(obj, other,` `mod``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`operator.pow(obj, other)` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `obj.__neg__(self)` | Negation. | `-obj` `operator.neg(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__pos__(self)` | Ordinarily, just returns `self`. | `+obj` `operator.pos(obj,
    other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__abs__(self, other)` | Absolute value. | `abs(obj)` `operator.abs(obj,
    other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__radd__(self, other)` | Returns the sum of `other` and `obj`. Reflected
    operators are only called if `other` does not support the operation. | `other
    + obj` `operator.pos(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rsub__(self, other)` | Returns the difference of `other` and `obj`.
    (Reflected) | `other – obj` `operator.sub(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rmul__(self, other)` | Returns the product of `other` and `obj`. (Reflected)
    | `other * obj` `operator.mul(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rmatmul__(self, other)` | Returns the result of matrix multiplication
    of `other` and `obj`. (Reflected) | `other @ obj` `operator.matmul(other, obj)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rtruediv__(self, other)` | Returns the quotient of true division of
    `other` and `obj`. (Reflected) | `other / obj` `operator.truediv(other, obj)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rfloordiv__(self, other)` | Returns the quotient of floor division
    (integer division) of `other` and `obj`. (Reflected) | `other // obj` `operator.floordiv(other,
    obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rmod__(self, other)` | Returns the remainder of division of `other`
    and `obj`. (Reflected) | `other % obj` `operator.mod(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rdivmod__(self, other)` | Performs both floor division and modulo,
    then returns results in a tuple. Same as `(``other` `// obj,` `other` `% obj)`.
    (Reflected) | `divmod(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rpow__(self, other, mod=None)` | Raises `other` to the power `obj`.
    If a mod is provided, the result is the same as `pow(``other``, obj) %` `mod,`
    but calculated more efficiently. | `other ** obj` `pow(other, obj)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pow(other, obj,` `mod``)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`operator.pow(other, obj)` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `obj.__iadd__(self, other)` | Stores the sum of `obj` and `other` in `obj`.
    | `obj += other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__isub__(self, other)` | Stores the difference of `obj` and `other`
    in `obj`. | `obj -= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__imul__(self, other)` | Stores the product of `obj` and `other` in
    `obj`. | `obj *= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__imatmul__(self, other)` | Stores the result of matrix multiplication
    of `obj` and `other` in `obj`. | `obj @= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__itruediv__(self, other)` | Stores the quotient of true division of
    `obj` and `other` in `obj`. | `obj /= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ifloordiv__(self, other)` | Stores the quotient of floor division
    (integer division) of `obj` and `other` in `obj`. | `obj //= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__imod__(self, other)` | Stores the remainder of division of `obj` and
    `other` in `obj`. | `obj %= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ipow__(self, other)` | Stores the result of `obj`, raised to the power
    `other` in `obj`. | `obj **= other` |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-5: Bitwise Operations'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** | **Invocation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__invert__(self)` | Returns the bitwise inversion of `obj`. | `~obj`
    `operator.invert(obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__and__(self, other)` | Returns the bitwise AND of `obj` and `other`.
    | `obj & other` `operator.and(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__or__(self, other)` | Returns the bitwise OR of `obj` and `other`.
    | `obj &#124; other` `operator.or(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__xor__(self, other)` | Returns the bitwise XOR of `obj` and `other`.
    | `obj ^ other` `operator.xor(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__lshift__(self, other)` | Returns the bitwise left shift of `obj` and
    `other`. | `obj << other` `operator.lshift(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rshift__(self, other)` | Returns the bitwise right shift of `obj`
    and `other`. | `obj >> other` `operator.rshift(obj, other)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rand__(self, other)` | Returns the bitwise AND of `other` and `obj`.
    Reflected operators are only called if `other` does not support the operation.
    | `other & obj` `operator.and(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ror__(self, other)` | Returns the bitwise OR of `other` and `obj`.
    (Reflected) | `other &#124; obj` `operator.or(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rxor__(self, other)` | Returns the bitwise XOR of `other` and `obj`.
    (Reflected) | `other ^ obj` `operator.xor(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rlshift__(self, other)` | Returns the bitwise left shift of `other`
    and `obj`. (Reflected) | `other <<= obj` `operator.lshift(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__rrshift__(self, other)` | Returns the bitwise right shift of `other`
    and `obj`. (Reflected) | `other >> obj` `operator.rshift(other, obj)` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__iand__(self, other)` | Stores the result of the bitwise AND of `obj`
    and `other` in `obj`. | `obj &= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ior__(self, other)` | Stores the result of the bitwise OR of `obj`
    and `other` in `obj`. | `obj &#124;= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ixor__(self, other)` | Stores the result of the bitwise XOR of `obj`
    and `other` in `obj`. | `obj ^= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__ilshift__(self, other)` | Stores the result of the bitwise left shift
    of `obj` and `other` in `obj`. | `obj <<= other` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__irshift__(self, other)` | Stores the result of the bitwise right shift
    of `obj` and `other` in `obj`. | `obj >>= other` |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-6: Objects, Classes, and Metaclasses'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** | **Invocation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__new__(cls, ...)` | Returns a new instance of `cls`. | `obj = cls()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__init__(self, ...)` | Initializer for the object `obj`. | `obj = cls()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__del__(self)` | Finalizer for the object `obj`. | `del obj # indirect
    only` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__import__(self, ...)` | DO NOT IMPLEMENT! |  |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__getattr__(self, name)` | Returns an attribute `name` on `obj`. | `obj.name`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__setattr__(self, name, value)` | Assigns a value `value` to an attribute
    `name` on `obj`. | `obj.name = value` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__delattr__(self, name)` | Deletes an attribute `name` on `obj`. | `del
    obj.name` |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__dir__(self)` | Returns a list of valid attributes on `obj`. | `dir(obj)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `@classmethod` `obj.__init_subclass__(cls)` | Called when `cls` is subclassed.
    Returns nothing. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__instancecheck__(self, instance)` | Returns `True` if `instance` is
    an instance of `cls` or an instance of one of its subclasses; or else, returns
    `False`. | `isinstance(instance, cls)` |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__subclasscheck__(self, subclass)` | Returns `True` if `subclass` is
    a subclass of `cls` or one of its subclasses; or else, returns `False`. | `issubclass(instance,
    subclass)` |'
  prefs: []
  type: TYPE_TB
- en: '| `@classmethod` `obj.__subclasshook__(cls, subclass)` | Returns `True` if
    `subclass` should be considered a subclass of `cls`; or else, returns `False`.
    | `issubclass(instance, subclass)` |'
  prefs: []
  type: TYPE_TB
- en: '| `@classmethod` `obj.__class_getitem__(cls, key)` | Returns an object that
    is the specialization of a generic class `cls`. Mainly used with generic types.
    See PEP 484 and PEP 560. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `meta.__new__(self, name, bases, namespace)` | Returns a new class instantiated
    from the metaclass `meta`. | `cls = meta()` |'
  prefs: []
  type: TYPE_TB
- en: '| `@classmethod` `meta.__prepare__(cls, name, bases, ...)` | Creates and returns
    the dictionary storing all the methods and class attributes for the class being
    created. |  |'
  prefs: []
  type: TYPE_TB
- en: Special Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some special attributes that are only interesting or useful to the language’s
    internals are omitted here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table A-7: Special Attributes on Modules'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `__doc__` | The docstring on the module. If no docstring is defined, this
    has the value `None`. |'
  prefs: []
  type: TYPE_TB
- en: '| `__name__` | The name of the module. |'
  prefs: []
  type: TYPE_TB
- en: '| `__loader__` | The loader that loaded the module. Used by the import system.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `__package__` | The package containing the module. If the module is a package,
    this is the same as `__name__`. Used by the import system. |'
  prefs: []
  type: TYPE_TB
- en: '| `__file__` | The path to the module file. May be `None` in some cases. Used
    by the import system. |'
  prefs: []
  type: TYPE_TB
- en: '| `__path__` | The path to the package. Only defined on packages. Used by the
    import system. |'
  prefs: []
  type: TYPE_TB
- en: '| `__cached__` | The path to the compiled Python bytecode representation of
    the module. |'
  prefs: []
  type: TYPE_TB
- en: '| `__spec__` | The module’s corresponding `ModuleSpec` object. This is a technical
    detail used by the import system. The object contains much of the same data as
    the other special attributes on the module. |'
  prefs: []
  type: TYPE_TB
- en: '| `__builtins__` | The module containing all of Python’s built-in functions,
    objects, and attributes (everything you never have to import). |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-8: Special Attributes on Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__annotations__` | A dictionary of type annotations for parameters.
    The key `''return''` is associated with the type annotation for the return value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__closure__` | A read-only tuple of *cells*, special objects containing
    bindings to values in memory, for all closure variables. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__code__` | A string representation of the function’s compiled code.
    (If you want the string representation of the function’s code instead, use `inspect.getsource()`.)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__defaults__` | A tuple containing default arguments. The value is
    simply `None` if there are no default arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__dict__` | A dictionary containing all function attributes. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__doc__` | The docstring on the function. If no docstring is defined,
    this has the value `None`. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__globals__` | A read-only reference to the dictionary of global variables.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__kwdefaults__` | A dictionary of default arguments for keyword-only
    parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__module__` | The name of the module where the function was defined,
    or `None` if not applicable. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__name__` | The name of the module, callable, object, or class. |'
  prefs: []
  type: TYPE_TB
- en: '| `func.__qualname__` | The fully qualified name of the object. |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-9: Special Attributes on Instances (Objects)'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__class__` | The instance’s class. |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__dict__` | The dictionary of instance attributes. |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__doc__` | The instance’s docstring. |'
  prefs: []
  type: TYPE_TB
- en: '| `obj.__module__` | The name of the module where the instance was defined,
    or `None` if not applicable. |'
  prefs: []
  type: TYPE_TB
- en: 'Table A-10: Special Attributes on Classes'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Typical purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__bases__` | The tuple of base classes for the class, in the order specified
    in the inheritance list when the class was defined. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__dict__` | The dictionary containing the class attributes and instance
    methods. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__doc__` | The docstring on the module. If no docstring is defined,
    this has the value `None`. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__module__` | The name of the module where the class was defined, or
    `None` if not applicable. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__mro__` | The method resolution order of the class, represented as
    a tuple of classes. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__name__` | The name of the class. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__qualname__` | The fully qualified name of the class. |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__slots__` | A sequence of variable names as strings that should be
    reserved. When defined, this prevents the automatic creation of the `__dict__`
    and `__weakref__` attributes, unless these names are specified in `__slots__`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cls.__weakref__` | An object that references all weak references to the
    current object. You should never have to work with this attribute directly, but
    it’s good to be aware of its purpose when working with `cls.__slots__` (see that
    entry). |'
  prefs: []
  type: TYPE_TB
