- en: '**APPENDIX'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ANSWERS TO THE “TEST YOUR KNOWLEDGE” CHALLENGES**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Chapter 7**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  False
  prefs: []
  type: TYPE_NORMAL
- en: 2.  c
  prefs: []
  type: TYPE_NORMAL
- en: 3.  c
  prefs: []
  type: TYPE_NORMAL
- en: '4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [22]: (42**0.5)**4'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[22]: 1764.0000000000002'
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: 42 **= 2'
  prefs: []
  type: TYPE_NORMAL
- en: File "C:\Users\hanna\Local\Temp/ipykernel_24188/3589881457.py", line 1
  prefs: []
  type: TYPE_NORMAL
- en: 42 **= 2
  prefs: []
  type: TYPE_NORMAL
- en: ^
  prefs: []
  type: TYPE_NORMAL
- en: 'SyntaxError: cannot assign to literal'
  prefs: []
  type: TYPE_NORMAL
- en: 6.  a
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import math'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: round(math.pi, 5)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: 3.14159'
  prefs: []
  type: TYPE_NORMAL
- en: '8.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: type((1, 2, 3))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[1]: tuple'
  prefs: []
  type: TYPE_NORMAL
- en: 9.  False
  prefs: []
  type: TYPE_NORMAL
- en: 10.  String
  prefs: []
  type: TYPE_NORMAL
- en: 11.  a
  prefs: []
  type: TYPE_NORMAL
- en: '12.'
  prefs: []
  type: TYPE_NORMAL
- en: print (
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: ^-------^
  prefs: []
  type: TYPE_NORMAL
- en: '|  >   <  |'
  prefs: []
  type: TYPE_NORMAL
- en: '|   V   |'
  prefs: []
  type: TYPE_NORMAL
- en: \     /
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: Hooty Hoot!
  prefs: []
  type: TYPE_NORMAL
- en: '""")'
  prefs: []
  type: TYPE_NORMAL
- en: '13.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [35]: secs = 1824'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [36]: minutes, seconds = ((int(secs / 60)), (int(secs % 60)))'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [37]: print(f''{secs} seconds = {minutes} minutes, {seconds} seconds'')'
  prefs: []
  type: TYPE_NORMAL
- en: 1824 seconds = 30 minutes, 24 seconds
  prefs: []
  type: TYPE_NORMAL
- en: 14.  b (supposedly the longest continuous string of consonants in English)
  prefs: []
  type: TYPE_NORMAL
- en: 15.  d
  prefs: []
  type: TYPE_NORMAL
- en: 16.  c
  prefs: []
  type: TYPE_NORMAL
- en: '17.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: from string import punctuation'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: punc = punctuation.replace(''-'','''')'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: caesar_said = ''Tee-hee, Brutus.'''
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: hyph_only = caesar_said.translate(str.maketrans('''', '''',punc))'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [5]: hyph_only'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[5]: ''Tee-hee Brutus'''
  prefs: []
  type: TYPE_NORMAL
- en: '18.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: ''impractical python projects''.title()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[1]: ''Impractical Python Projects'''
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 8**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  a, b, d
  prefs: []
  type: TYPE_NORMAL
- en: 2.  b
  prefs: []
  type: TYPE_NORMAL
- en: 3.  c
  prefs: []
  type: TYPE_NORMAL
- en: 4.  Change its name
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: x = 42'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: del x'
  prefs: []
  type: TYPE_NORMAL
- en: 6.  False
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: print(input("Enter your first name: ")[::-1])'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter your first name: Lee'
  prefs: []
  type: TYPE_NORMAL
- en: eeL
  prefs: []
  type: TYPE_NORMAL
- en: '8.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: john == ''Harry'''
  prefs: []
  type: TYPE_NORMAL
- en: 'Traceback (most recent call last):'
  prefs: []
  type: TYPE_NORMAL
- en: File "<ipython-input-112-97bd679db026>", line 1, in <module>
  prefs: []
  type: TYPE_NORMAL
- en: john == 'Harry'
  prefs: []
  type: TYPE_NORMAL
- en: 'NameError: name ''john'' is not defined'
  prefs: []
  type: TYPE_NORMAL
- en: '9.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: a = ''Alice'''
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: b = 42'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: c = a / b'
  prefs: []
  type: TYPE_NORMAL
- en: 'Traceback (most recent call last):'
  prefs: []
  type: TYPE_NORMAL
- en: File "C:\Users\hanna\AppData\Local\Temp/ipykernel_24188/2258966649.py",
  prefs: []
  type: TYPE_NORMAL
- en: line 1, in <module>
  prefs: []
  type: TYPE_NORMAL
- en: c = a / b
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeError: unsupported operand type(s) for /: ''int'' and ''str'''
  prefs: []
  type: TYPE_NORMAL
- en: 10.  a
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 9**'
  prefs: []
  type: TYPE_NORMAL
- en: '1.  `IndexError: tuple index out of range`'
  prefs: []
  type: TYPE_NORMAL
- en: 2.  `'!'`
  prefs: []
  type: TYPE_NORMAL
- en: '3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: tup = (''Rust'', ''R'', ''Go'', ''Julia''), (''Python'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: tup[1][1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: ''y'''
  prefs: []
  type: TYPE_NORMAL
- en: 4.  a, b, c
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: field_trip = ''pith helmet'','
  prefs: []
  type: TYPE_NORMAL
- en: '...:            ''rock hammer'','
  prefs: []
  type: TYPE_NORMAL
- en: '...:            ''hand lens'','
  prefs: []
  type: TYPE_NORMAL
- en: '...:            ''hiking boots'','
  prefs: []
  type: TYPE_NORMAL
- en: '...:            ''sunglasses'' In [2]: field_trip'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: (''pith helmet'', ''rock hammer'', ''hand lens'', ''hiking boots'','
  prefs: []
  type: TYPE_NORMAL
- en: '''sunglasses'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: field_trip = field_trip[1:]'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: field_trip'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[4]: (''rock hammer'', ''hand lens'', ''hiking boots'', ''sunglasses'')'
  prefs: []
  type: TYPE_NORMAL
- en: '6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: patroni = []'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: patroni.extend([''tiger'', ''shark'', ''weasel''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: patroni'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]: [''tiger'', ''shark'', ''weasel'']'
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: patroni.clear()'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: patroni'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: []'
  prefs: []
  type: TYPE_NORMAL
- en: 8.  c
  prefs: []
  type: TYPE_NORMAL
- en: 9.  c
  prefs: []
  type: TYPE_NORMAL
- en: 10.  c
  prefs: []
  type: TYPE_NORMAL
- en: 11.  Sets remove duplicate values in a dataset; each unique value will occur
    only once.
  prefs: []
  type: TYPE_NORMAL
- en: 12.  c
  prefs: []
  type: TYPE_NORMAL
- en: 13.  True
  prefs: []
  type: TYPE_NORMAL
- en: 14.  c
  prefs: []
  type: TYPE_NORMAL
- en: 15.  a
  prefs: []
  type: TYPE_NORMAL
- en: 16.  b
  prefs: []
  type: TYPE_NORMAL
- en: '17.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: jokes = {"Did you hear about the kidnapping?":'
  prefs: []
  type: TYPE_NORMAL
- en: '...:          "He slept for 4 hours!",'
  prefs: []
  type: TYPE_NORMAL
- en: '...:          "You shot your dog? Was he mad?":'
  prefs: []
  type: TYPE_NORMAL
- en: '...:          "He wasn''t too happy about it!"}'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: jokes["Did you hear about the kidnapping?"]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: ''He slept for 4 hours!'''
  prefs: []
  type: TYPE_NORMAL
- en: 18.  c
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 10**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  Four spaces
  prefs: []
  type: TYPE_NORMAL
- en: 2.  False
  prefs: []
  type: TYPE_NORMAL
- en: '3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: while True:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:     print(''Heeelllllppppppp!!!!'')'
  prefs: []
  type: TYPE_NORMAL
- en: 4.  a, b
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: print('English to Pig Latin Translator')
  prefs: []
  type: TYPE_NORMAL
- en: VOWELS = 'aeiouy'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'word = input("Enter a word else enter ''0'' to stop: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'if word == ''0'':'
  prefs: []
  type: TYPE_NORMAL
- en: break
  prefs: []
  type: TYPE_NORMAL
- en: 'if word[0] in VOWELS:'
  prefs: []
  type: TYPE_NORMAL
- en: pig_latin = word + 'way'
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: pig_latin = word[1:] + word[0] + 'ay'
  prefs: []
  type: TYPE_NORMAL
- en: print(f'\n{pig_latin}')
  prefs: []
  type: TYPE_NORMAL
- en: '6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: while True:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      name = input(''Enter your username: '')'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      if name != ''Alice'':'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           continue'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      while True:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           pwd = input(''Enter your password: '')'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           if pwd == ''Star Lord'':'
  prefs: []
  type: TYPE_NORMAL
- en: '...:                break'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           else:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:                print(''That password is incorrect'')'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      break'
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: count = 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: while count < 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(''Python'')'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      count += 1'
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs: []
  type: TYPE_NORMAL
- en: '8.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: print([i for i in range(1, 10) if i % 2 == 0])'
  prefs: []
  type: TYPE_NORMAL
- en: '[2, 4, 6, 8]'
  prefs: []
  type: TYPE_NORMAL
- en: '9.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: for i in range(10, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(i)'
  prefs: []
  type: TYPE_NORMAL
- en: '...:'
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: '0'
  prefs: []
  type: TYPE_NORMAL
- en: '10.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: words = [''age'', ''moody'', ''knock'', ''adder'', ''project'', ''stoop'','
  prefs: []
  type: TYPE_NORMAL
- en: '''blubber'']'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: for word in words:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      middle = int(len(word) / 2)'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(word[middle])'
  prefs: []
  type: TYPE_NORMAL
- en: g
  prefs: []
  type: TYPE_NORMAL
- en: o
  prefs: []
  type: TYPE_NORMAL
- en: o
  prefs: []
  type: TYPE_NORMAL
- en: d
  prefs: []
  type: TYPE_NORMAL
- en: j
  prefs: []
  type: TYPE_NORMAL
- en: o
  prefs: []
  type: TYPE_NORMAL
- en: b
  prefs: []
  type: TYPE_NORMAL
- en: '11.'
  prefs: []
  type: TYPE_NORMAL
- en: import random
  prefs: []
  type: TYPE_NORMAL
- en: answer = random.randint(1, 100)
  prefs: []
  type: TYPE_NORMAL
- en: 'guess = int(input(''Guess a number between 1 and 100: ''))'
  prefs: []
  type: TYPE_NORMAL
- en: attempts = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while guess != answer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if guess > answer:'
  prefs: []
  type: TYPE_NORMAL
- en: print('You guessed too high.')
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print('You guessed too low.')
  prefs: []
  type: TYPE_NORMAL
- en: 'guess = int(input(''Guess again: ''))'
  prefs: []
  type: TYPE_NORMAL
- en: attempts += 1
  prefs: []
  type: TYPE_NORMAL
- en: print('\nYou got it!')
  prefs: []
  type: TYPE_NORMAL
- en: print(f'It only took you {attempts} tries.')
  prefs: []
  type: TYPE_NORMAL
- en: '12.'
  prefs: []
  type: TYPE_NORMAL
- en: import random
  prefs: []
  type: TYPE_NORMAL
- en: fortunes = ['Dogogone it, people LIKE you!',
  prefs: []
  type: TYPE_NORMAL
- en: '''You will learn a new coding skill today.'','
  prefs: []
  type: TYPE_NORMAL
- en: '''You are a quick learner!'','
  prefs: []
  type: TYPE_NORMAL
- en: '''Your wisdom makes you superior to others.'']'
  prefs: []
  type: TYPE_NORMAL
- en: misfortunes = ['Your eyes are like pools. Cesspools.',
  prefs: []
  type: TYPE_NORMAL
- en: '''Your ears are like flowers. Cauliflowers.'','
  prefs: []
  type: TYPE_NORMAL
- en: '''Your breath would kill a thousand camels.'','
  prefs: []
  type: TYPE_NORMAL
- en: '''Run up an alley and holler fish!'']'
  prefs: []
  type: TYPE_NORMAL
- en: print("""
  prefs: []
  type: TYPE_NORMAL
- en: 0 - Quit
  prefs: []
  type: TYPE_NORMAL
- en: 1 - A fortune cookie
  prefs: []
  type: TYPE_NORMAL
- en: 2 - A misfortune cookie
  prefs: []
  type: TYPE_NORMAL
- en: '""")'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = input(''Choose a number from the menu: '')'
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice.isdigit():'
  prefs: []
  type: TYPE_NORMAL
- en: choice = int(choice)
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print('Thanks for playing!')
  prefs: []
  type: TYPE_NORMAL
- en: break
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print(random.choice(fortunes))
  prefs: []
  type: TYPE_NORMAL
- en: 'elif choice == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: print(random.choice(misfortunes))
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print('Choose from the menu options.')
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 11**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  c
  prefs: []
  type: TYPE_NORMAL
- en: 2.  c
  prefs: []
  type: TYPE_NORMAL
- en: 3.  b
  prefs: []
  type: TYPE_NORMAL
- en: '4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: def vowel_voider():'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      name = input("Enter your last name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      new_name = '''''
  prefs: []
  type: TYPE_NORMAL
- en: '...:      vowels = ''aeiouy'''
  prefs: []
  type: TYPE_NORMAL
- en: '...:      for char in name:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           if char not in vowels:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:                new_name += char'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           else:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:               continue'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      return new_name'
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: def calc_momentum(*, mass, velocity):'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      return mass * velocity'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: calc_momentum(mass=10, velocity=50)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: 500'
  prefs: []
  type: TYPE_NORMAL
- en: 6.  c
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: from random import uniform'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: samples = [round(uniform(0, 50), 1) for x in range(10)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: samples'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]: [42.7, 37.8, 30.2, 35.0, 0.4, 35.1, 22.4, 9.8, 23.4, 30.0]'
  prefs: []
  type: TYPE_NORMAL
- en: '8.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: nums = [3, 10, 16, 25, 88, 75]'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: filtered = filter(lambda x: x % 5 == 0, nums)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: print(list(filtered))'
  prefs: []
  type: TYPE_NORMAL
- en: '[10, 25, 75]'
  prefs: []
  type: TYPE_NORMAL
- en: 9.  False. Calling `main()` at the end grants it access.
  prefs: []
  type: TYPE_NORMAL
- en: 10.  c
  prefs: []
  type: TYPE_NORMAL
- en: '11.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: G = 0.0000000000667'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: def calc_force_gravity(mass1, mass2, radius):'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      global G'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      f = (G * mass1 * mass2) / radius**2'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      return f'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can also use G = 6.67e-11.*'
  prefs: []
  type: TYPE_NORMAL
- en: '12.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import math'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: dir(math)'
  prefs: []
  type: TYPE_NORMAL
- en: 13.  b
  prefs: []
  type: TYPE_NORMAL
- en: 14.  d
  prefs: []
  type: TYPE_NORMAL
- en: '15.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: x = 25'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: def use_x(x):'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(x**2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: use_x(x)'
  prefs: []
  type: TYPE_NORMAL
- en: '625'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: def use_x():'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      global x'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(x**2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [5]: use_x()'
  prefs: []
  type: TYPE_NORMAL
- en: '625'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 12**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  c
  prefs: []
  type: TYPE_NORMAL
- en: 2.  d
  prefs: []
  type: TYPE_NORMAL
- en: 3.  False
  prefs: []
  type: TYPE_NORMAL
- en: 4.  c
  prefs: []
  type: TYPE_NORMAL
- en: 5.  Objects
  prefs: []
  type: TYPE_NORMAL
- en: 6.  e
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: from pathlib import Path'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: p = Path(''.\\test1\\another_haiku.txt'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: p.rename(''.\\test1\\haiku_2.txt'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]: WindowsPath(''test1/haiku_2.txt'')'
  prefs: []
  type: TYPE_NORMAL
- en: '8.  Remember, Python starts counting at 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [93]: with open(''haiku.txt'') as f:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      f.seek(14)'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(f.read())'
  prefs: []
  type: TYPE_NORMAL
- en: Contemplating cherry trees
  prefs: []
  type: TYPE_NORMAL
- en: Strangers are like friends
  prefs: []
  type: TYPE_NORMAL
- en: --Issa
  prefs: []
  type: TYPE_NORMAL
- en: 9.  c
  prefs: []
  type: TYPE_NORMAL
- en: 10.  True
  prefs: []
  type: TYPE_NORMAL
- en: 11.  True
  prefs: []
  type: TYPE_NORMAL
- en: 12.  c
  prefs: []
  type: TYPE_NORMAL
- en: '13.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import json'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: crew = dict(Mercury=1, Gemini=2, Apollo=3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: capsules_data = json.dumps(crew)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: with open(''capsules_data.json'', ''w'') as f:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      f.write(capsules_data)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [5]: with open(''capsules_data.json'', ''r'') as f:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      crew = json.load(f)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [6]: for key in crew:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:      if crew[key] == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           seat = ''seat'''
  prefs: []
  type: TYPE_NORMAL
- en: '...:      else:'
  prefs: []
  type: TYPE_NORMAL
- en: '...:           seat = ''seats'''
  prefs: []
  type: TYPE_NORMAL
- en: '...:      print(f"The {key} capsule had {crew[key]} {seat}.")'
  prefs: []
  type: TYPE_NORMAL
- en: The Mercury capsule had 1 seat.
  prefs: []
  type: TYPE_NORMAL
- en: The Gemini capsule had 2 seats.
  prefs: []
  type: TYPE_NORMAL
- en: The Apollo capsule had 3 seats.
  prefs: []
  type: TYPE_NORMAL
- en: '14.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: test = ["don''t", "do"]'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: test_json = json.dumps(test)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: test_json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]: ''["don\''t", "do"]'''
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: test = [''don\''t'', ''do'']'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [5]: test'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[5]: ["don''t", ''do'']'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [6]: test_json = json.dumps(test)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [7]: test_json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[7]: ''["don\''t", "do"]'''
  prefs: []
  type: TYPE_NORMAL
- en: 15.  d
  prefs: []
  type: TYPE_NORMAL
- en: '16.  Assumes that cwd is `file_play`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import shutil'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: shutil.move(''lines.txt'', ''test1'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[2]: ''test1\\lines.txt'''
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: shutil.make_archive(''.\\test1\\lines.txt'', ''zip'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]: ''.\\test1\\lines.txt.zip'''
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 13**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  b
  prefs: []
  type: TYPE_NORMAL
- en: 2.  c
  prefs: []
  type: TYPE_NORMAL
- en: 3.  True
  prefs: []
  type: TYPE_NORMAL
- en: 4.  c
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Parrot():'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, name, color, age):'
  prefs: []
  type: TYPE_NORMAL
- en: self.name = name
  prefs: []
  type: TYPE_NORMAL
- en: self.color = color
  prefs: []
  type: TYPE_NORMAL
- en: self.age = age
  prefs: []
  type: TYPE_NORMAL
- en: 'def squawk(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("\nSQUAWK!\n")
  prefs: []
  type: TYPE_NORMAL
- en: 'def parroting(self):'
  prefs: []
  type: TYPE_NORMAL
- en: 'phrase = input("Enter something for parrot to repeat: ")'
  prefs: []
  type: TYPE_NORMAL
- en: print(f"\nSquawk! {phrase} Squawk!")
  prefs: []
  type: TYPE_NORMAL
- en: polly = Parrot('Polly', 'green', 80)
  prefs: []
  type: TYPE_NORMAL
- en: polly.squawk()
  prefs: []
  type: TYPE_NORMAL
- en: polly.parroting()
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: SQUAWK!
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter something for parrot to repeat: Polly wants a cracker!'
  prefs: []
  type: TYPE_NORMAL
- en: Squawk! Polly wants a cracker! Squawk!
  prefs: []
  type: TYPE_NORMAL
- en: 6.  c
  prefs: []
  type: TYPE_NORMAL
- en: 7.  e
  prefs: []
  type: TYPE_NORMAL
- en: 8.  b
  prefs: []
  type: TYPE_NORMAL
- en: 9.  True
  prefs: []
  type: TYPE_NORMAL
- en: 10.  b
  prefs: []
  type: TYPE_NORMAL
- en: 11.  d
  prefs: []
  type: TYPE_NORMAL
- en: '12.  New code in the *ship_display.py* program is highlighted in gray:'
  prefs: []
  type: TYPE_NORMAL
- en: from math import dist
  prefs: []
  type: TYPE_NORMAL
- en: from dataclasses import dataclass
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: '@dataclass'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Ship:'
  prefs: []
  type: TYPE_NORMAL
- en: '''''''Object for tracking a ship on a grid.'''''''
  prefs: []
  type: TYPE_NORMAL
- en: 'name: str'
  prefs: []
  type: TYPE_NORMAL
- en: 'classification: str'
  prefs: []
  type: TYPE_NORMAL
- en: 'registry: str'
  prefs: []
  type: TYPE_NORMAL
- en: 'location: tuple'
  prefs: []
  type: TYPE_NORMAL
- en: obj_type = 'ship'
  prefs: []
  type: TYPE_NORMAL
- en: obj_color = 'black'
  prefs: []
  type: TYPE_NORMAL
- en: 'def distance_to(self, other):'
  prefs: []
  type: TYPE_NORMAL
- en: distance = round(dist(self.location, other.location), 2)
  prefs: []
  type: TYPE_NORMAL
- en: return str(distance) + ' ' + 'km'
  prefs: []
  type: TYPE_NORMAL
- en: garcia = Ship('Garcia', 'frigate', 'USA', (20, 15))
  prefs: []
  type: TYPE_NORMAL
- en: ticonderoga = Ship('Ticonderoga', 'destroyer', 'USA', (5, 10))
  prefs: []
  type: TYPE_NORMAL
- en: kobayashi = Ship('Kobayashi', 'maru', 'Federation', (10, 22))
  prefs: []
  type: TYPE_NORMAL
- en: VISIBLE_SHIPS = [garcia, ticonderoga, kobayashi]
  prefs: []
  type: TYPE_NORMAL
- en: 'def plot_ship_dist(ship1, ship2):'
  prefs: []
  type: TYPE_NORMAL
- en: sep = ship1.distance_to(ship2)
  prefs: []
  type: TYPE_NORMAL
- en: 'for ship in VISIBLE_SHIPS:'
  prefs: []
  type: TYPE_NORMAL
- en: plt.scatter(ship.location[0], ship.location[1],
  prefs: []
  type: TYPE_NORMAL
- en: marker='d',
  prefs: []
  type: TYPE_NORMAL
- en: color=ship.obj_color)
  prefs: []
  type: TYPE_NORMAL
- en: plt.text(ship.location[0], ship.location[1], ship.name)
  prefs: []
  type: TYPE_NORMAL
- en: plt.plot([ship1.location[0], ship2.location[0]],
  prefs: []
  type: TYPE_NORMAL
- en: '[ship1.location[1], ship2.location[1]],'
  prefs: []
  type: TYPE_NORMAL
- en: color='gray',
  prefs: []
  type: TYPE_NORMAL
- en: linestyle="--")
  prefs: []
  type: TYPE_NORMAL
- en: plt.text((ship2.location[0]), (ship2.location[1] - 2), sep, c='gray')
  prefs: []
  type: TYPE_NORMAL
- en: plt.xlim(0, 30)
  prefs: []
  type: TYPE_NORMAL
- en: plt.ylim([0, 30])
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(30):'
  prefs: []
  type: TYPE_NORMAL
- en: garcia.location = (20, i)
  prefs: []
  type: TYPE_NORMAL
- en: plot_ship_dist(kobayashi, garcia)i)
  prefs: []
  type: TYPE_NORMAL
- en: Before running the script in Spyder, go to the Plots pane and select **Mute
    inline plotting** ([Figure A-1](app01.xhtml#ch0afig1)). This will force plots
    to appear in the Plots pane rather than inline within the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/Afig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-1: Selecting Mute inline plotting from the Plots pane in Spyder*'
  prefs: []
  type: TYPE_NORMAL
- en: To close all the plots, click the large **X** icon on the Plots pane toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: As a challenge, see if you can make the Garcia move diagonally across the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 14**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  b
  prefs: []
  type: TYPE_NORMAL
- en: 2.  True
  prefs: []
  type: TYPE_NORMAL
- en: 3.  a, c
  prefs: []
  type: TYPE_NORMAL
- en: 4.  c
  prefs: []
  type: TYPE_NORMAL
- en: 5.  d
  prefs: []
  type: TYPE_NORMAL
- en: '6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import itertools'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: help(itertools.product)'
  prefs: []
  type: TYPE_NORMAL
- en: 7.  b, d
  prefs: []
  type: TYPE_NORMAL
- en: 8.  a, c
  prefs: []
  type: TYPE_NORMAL
- en: 9.  d
  prefs: []
  type: TYPE_NORMAL
- en: '10.'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Frigate():'
  prefs: []
  type: TYPE_NORMAL
- en: '"""A frigate class warship for use in a war game simulation.'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: 'name (str): Name of the ship without a designation/registry.'
  prefs: []
  type: TYPE_NORMAL
- en: 'crew (int): Number of crew members.'
  prefs: []
  type: TYPE_NORMAL
- en: 'length_ft(int): Length of the ship in feet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'tonnage (int): Weight of the ship in short tons (US).'
  prefs: []
  type: TYPE_NORMAL
- en: 'fuel_gals(int): Fuel tank capacity in US gallons.'
  prefs: []
  type: TYPE_NORMAL
- en: 'guns (int): Number of big guns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'ammo (int): Number of rounds of ammo available. heading (int): The compass
    direction in which the bow is pointed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'max_speed (float): Maximum speed of ship in knots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'speed (float): Current speed of ship in knots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: __init__(self, name)
  prefs: []
  type: TYPE_NORMAL
- en: Constructs all the necessary attributes for the ship object.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'name (str):'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the ship without a designation/registry.
  prefs: []
  type: TYPE_NORMAL
- en: helm(self, heading, speed)
  prefs: []
  type: TYPE_NORMAL
- en: Sets and displays ship's current heading and speed.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'heading (int):'
  prefs: []
  type: TYPE_NORMAL
- en: The compass direction the bow is pointed.
  prefs: []
  type: TYPE_NORMAL
- en: 'speed (float):'
  prefs: []
  type: TYPE_NORMAL
- en: The current speed of the ship in knots.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: fire_guns(self)
  prefs: []
  type: TYPE_NORMAL
- en: Prints "BOOM!" and decrements and prints remaining ammo.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 18**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  c (arrays can hold any number of dimensions)
  prefs: []
  type: TYPE_NORMAL
- en: 2.  d
  prefs: []
  type: TYPE_NORMAL
- en: 3.  b
  prefs: []
  type: TYPE_NORMAL
- en: 4.  e
  prefs: []
  type: TYPE_NORMAL
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import numpy as np'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: np.zeros((10, 10))'
  prefs: []
  type: TYPE_NORMAL
- en: '6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import numpy as np'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: arr2d = np.arange(30).reshape(5, 6)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: arr2d[::2]'
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: arr2d[1::2, 1::2]'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [5]: # also:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [6]: arr2d[1:5:2, 1:6:2]'
  prefs: []
  type: TYPE_NORMAL
- en: 8.  c
  prefs: []
  type: TYPE_NORMAL
- en: 9.  b
  prefs: []
  type: TYPE_NORMAL
- en: 10.  4
  prefs: []
  type: TYPE_NORMAL
- en: 11.  Because the byte size for each element is set by the largest element (–10000)
  prefs: []
  type: TYPE_NORMAL
- en: 12.  c
  prefs: []
  type: TYPE_NORMAL
- en: 13.  b
  prefs: []
  type: TYPE_NORMAL
- en: 14.  c
  prefs: []
  type: TYPE_NORMAL
- en: 15.  c
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 19**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  c
  prefs: []
  type: TYPE_NORMAL
- en: 2.  True
  prefs: []
  type: TYPE_NORMAL
- en: 3.  d
  prefs: []
  type: TYPE_NORMAL
- en: 4.  c
  prefs: []
  type: TYPE_NORMAL
- en: '5.  Note: This solution uses the `pyplot` approach.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: rockets = {''Atlas'': 57, ''Falcon9'': 70, ''SaturnV'': 111, ''Starship'':'
  prefs: []
  type: TYPE_NORMAL
- en: 120}
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: plt.ylabel(''Height (m)'')'
  prefs: []
  type: TYPE_NORMAL
- en: '...: plt.bar(rockets.keys(), rockets.values(), width=0.3);'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0678-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 6.  False
  prefs: []
  type: TYPE_NORMAL
- en: '7.  Use the `suptitle()` method, like so, for the `pyplot` approach:'
  prefs: []
  type: TYPE_NORMAL
- en: plt.suptitle('Martian Goethite, Hematite, and Jarosite Distributions')
  prefs: []
  type: TYPE_NORMAL
- en: 'and like this for the object-oriented style:'
  prefs: []
  type: TYPE_NORMAL
- en: fig.suptitle('Martian Goethite, Hematite, and Jarosite Distributions')
  prefs: []
  type: TYPE_NORMAL
- en: '8.  This solution uses the object-oriented style:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [64]: # Create dummy datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: x = np.random.normal(0, 1, 50).cumsum()'
  prefs: []
  type: TYPE_NORMAL
- en: '...: y = np.random.normal(0, 1, 50).cumsum()'
  prefs: []
  type: TYPE_NORMAL
- en: '...: z = np.random.normal(0, 1, 50).cumsum()'
  prefs: []
  type: TYPE_NORMAL
- en: '...:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: # Make list of datasets and titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: data = [x, y, z]'
  prefs: []
  type: TYPE_NORMAL
- en: '...: titles = [''Data X'', ''Data Y'', ''Data Z'']'
  prefs: []
  type: TYPE_NORMAL
- en: '...:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: # Create subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: fig, axs = plt.subplots(1, 3)'
  prefs: []
  type: TYPE_NORMAL
- en: '...: fig.tight_layout()'
  prefs: []
  type: TYPE_NORMAL
- en: '...:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: # Loop through subplots and plot data using black crosses:'
  prefs: []
  type: TYPE_NORMAL
- en: '...: for i, ax in enumerate(axs):'
  prefs: []
  type: TYPE_NORMAL
- en: '...:     ax.set_title(titles[i])'
  prefs: []
  type: TYPE_NORMAL
- en: '...:     ax.plot(data[i], ''k+'')'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0679-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Your plot will look different because the data is randomly generated.*'
  prefs: []
  type: TYPE_NORMAL
- en: '9.  This solution uses the object-oriented style:'
  prefs: []
  type: TYPE_NORMAL
- en: import numpy as np
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: '%matplotlib notebook'
  prefs: []
  type: TYPE_NORMAL
- en: fig, ax = plt.subplots()
  prefs: []
  type: TYPE_NORMAL
- en: 'for _ in range(30): data = np.random.rand(4, 4)'
  prefs: []
  type: TYPE_NORMAL
- en: heat = ax.imshow(data)
  prefs: []
  type: TYPE_NORMAL
- en: fig.canvas.draw()
  prefs: []
  type: TYPE_NORMAL
- en: fig.canvas.flush_events()
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0680-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Your plot will look different because the data is randomly generated.*'
  prefs: []
  type: TYPE_NORMAL
- en: '10.  This solution uses the object-oriented style:'
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: '%matplotlib inline'
  prefs: []
  type: TYPE_NORMAL
- en: 'def calc_data(t, pos, vel, dt):'
  prefs: []
  type: TYPE_NORMAL
- en: '"""Return time, position, and velocity of object falling in a vacuum."""'
  prefs: []
  type: TYPE_NORMAL
- en: time = []  # seconds
  prefs: []
  type: TYPE_NORMAL
- en: position = []  # meters
  prefs: []
  type: TYPE_NORMAL
- en: velocity = []  # meters per second
  prefs: []
  type: TYPE_NORMAL
- en: for _ in range(15):  # Duration of fall in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: pos = pos + vel * dt
  prefs: []
  type: TYPE_NORMAL
- en: vel = vel + -9.81 * dt  # 9.81 m/s**2 for Earth gravity.
  prefs: []
  type: TYPE_NORMAL
- en: t += dt
  prefs: []
  type: TYPE_NORMAL
- en: position.append(pos)
  prefs: []
  type: TYPE_NORMAL
- en: velocity.append(abs(vel))  # Convert to absolute value.
  prefs: []
  type: TYPE_NORMAL
- en: time.append(t)
  prefs: []
  type: TYPE_NORMAL
- en: return time, position, velocity
  prefs: []
  type: TYPE_NORMAL
- en: time, position, velocity = calc_data(t=0, pos=0, vel=0, dt=1)
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up plot:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: fig, ax1 = plt.subplots()
  prefs: []
  type: TYPE_NORMAL
- en: ax2 = ax1.twinx()  # Share the x-axis with ax.
  prefs: []
  type: TYPE_NORMAL
- en: ax1.set_xlabel('Time (sec)')
  prefs: []
  type: TYPE_NORMAL
- en: ax1.set_ylabel('Distance (m)', color='green')
  prefs: []
  type: TYPE_NORMAL
- en: ax2.set_ylabel('Velocity (m/s)', color='red') ax2.invert_yaxis()  # So larger
    numbers plot toward bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot data:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax1.plot(time, position, 'go', label='Position')
  prefs: []
  type: TYPE_NORMAL
- en: ax1.legend()
  prefs: []
  type: TYPE_NORMAL
- en: ax2.plot(time, velocity, 'red', label='Velocity')
  prefs: []
  type: TYPE_NORMAL
- en: ax2.legend(loc='lower left');
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0681-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Chapter 20**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  a, b, d
  prefs: []
  type: TYPE_NORMAL
- en: 2.  False
  prefs: []
  type: TYPE_NORMAL
- en: '3.'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: 'animals = {''canines'': [''husky'', ''poodle'', ''bulldog''],'
  prefs: []
  type: TYPE_NORMAL
- en: '''felines'': [''Siamese'', ''Persian'', ''Maine Coon''],'
  prefs: []
  type: TYPE_NORMAL
- en: '''cetaceans'': [''humpback'', ''sperm'', ''right'']}'
  prefs: []
  type: TYPE_NORMAL
- en: df = pd.DataFrame(animals)
  prefs: []
  type: TYPE_NORMAL
- en: 'df.rename(columns={''cetaceans'': ''whales''}, inplace=True)'
  prefs: []
  type: TYPE_NORMAL
- en: df.head()
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **canines** | **felines** | **whales** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | husky | Siamese | humpback |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | poodle | Persian | sperm |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | bulldog | Maine Coon | right |'
  prefs: []
  type: TYPE_TB
- en: '4.'
  prefs: []
  type: TYPE_NORMAL
- en: df.head(1)
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **canines** | **felines** | **whales** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | husky | Siamese | humpback |'
  prefs: []
  type: TYPE_TB
- en: '5.'
  prefs: []
  type: TYPE_NORMAL
- en: df_t = df.T
  prefs: []
  type: TYPE_NORMAL
- en: df_t
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **0** | **1** | **2** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| canines | husky | poodle | bulldog |'
  prefs: []
  type: TYPE_TB
- en: '| felines | Siamese | Persian | Maine Coon |'
  prefs: []
  type: TYPE_TB
- en: '| whales | humpback | sperm | right |'
  prefs: []
  type: TYPE_TB
- en: 6.  b and c
  prefs: []
  type: TYPE_NORMAL
- en: 7.  c
  prefs: []
  type: TYPE_NORMAL
- en: 8.  c
  prefs: []
  type: TYPE_NORMAL
- en: 9.  c
  prefs: []
  type: TYPE_NORMAL
- en: 10.  b and d
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 21**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  b
  prefs: []
  type: TYPE_NORMAL
- en: 2.  c and d
  prefs: []
  type: TYPE_NORMAL
- en: 3.  c
  prefs: []
  type: TYPE_NORMAL
- en: 4.  c
  prefs: []
  type: TYPE_NORMAL
- en: 5.  d
  prefs: []
  type: TYPE_NORMAL
- en: 6.  d
  prefs: []
  type: TYPE_NORMAL
- en: '7.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import pandas as pd'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: date = ''2021-2-23 00:00:00'''
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: dt = pd.to_datetime(date)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [4]: dt'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[4]: Timestamp(''2021-02-23 00:00:00'')'
  prefs: []
  type: TYPE_NORMAL
- en: '8.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import pandas as pd'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: dt_warsaw = dt.tz_localize(''Europe/Warsaw'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: dt_warsaw'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]: Timestamp(''2021-02-23 00:00:00+0100'', tz=''Europe/Warsaw'')'
  prefs: []
  type: TYPE_NORMAL
- en: '9.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [1]: import pandas as pd'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [2]: hours = pd.period_range(start=''2021-5-1'','
  prefs: []
  type: TYPE_NORMAL
- en: '...:                               periods=24,'
  prefs: []
  type: TYPE_NORMAL
- en: '...:                               freq=''H'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [3]: hours'
  prefs: []
  type: TYPE_NORMAL
- en: 'Out[3]:'
  prefs: []
  type: TYPE_NORMAL
- en: PeriodIndex(['2021-05-01 00:00', '2021-05-01 01:00', '2021-05-01 02:00', '2021-05-01
    03:00', '2021-05-01 04:00', '2021-05-01 05:00',
  prefs: []
  type: TYPE_NORMAL
- en: '''2021-05-01 06:00'', ''2021-05-01 07:00'', ''2021-05-01 08:00'','
  prefs: []
  type: TYPE_NORMAL
- en: '''2021-05-01 09:00'', ''2021-05-01 10:00'', ''2021-05-01 11:00'','
  prefs: []
  type: TYPE_NORMAL
- en: '''2021-05-01 12:00'', ''2021-05-01 13:00'', ''2021-05-01 14:00'','
  prefs: []
  type: TYPE_NORMAL
- en: '''2021-05-01 15:00'', ''2021-05-01 16:00'', ''2021-05-01 17:00'','
  prefs: []
  type: TYPE_NORMAL
- en: '''2021-05-01 18:00'', ''2021-05-01 19:00'', ''2021-05-01 20:00'','
  prefs: []
  type: TYPE_NORMAL
- en: '''2021-05-01 21:00'', ''2021-05-01 22:00'', ''2021-05-01 23:00''],'
  prefs: []
  type: TYPE_NORMAL
- en: dtype='period[H]')
  prefs: []
  type: TYPE_NORMAL
- en: 10.  b and d
  prefs: []
  type: TYPE_NORMAL
