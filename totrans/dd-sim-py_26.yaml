- en: '21'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Parting of the Ways
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You’ve reached an important milestone on your programming journey: you now
    know Python! You’ve become familiar with the syntax and patterns, and you’ve learned
    how to structure, design, and ship production-quality software in the Python language.
    Equipped with this foundational knowledge, you’ll be able to understand the official
    documentation and even participate in the pedantic discussions so common among
    Python developers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there is a profound difference between knowing a language and mastering
    it. Only by writing real-world code can you truly *think* in Python. If you’ve
    been working on an actual project while reading this book, you may already have
    reached this milestone. Otherwise, your next step is quite simple and yet incredibly
    complicated: go build something!'
  prefs: []
  type: TYPE_NORMAL
- en: “Yes, but what?” you might say. “I know how Python works now, but what can I
    really make with it?”
  prefs: []
  type: TYPE_NORMAL
- en: You’re at a crossroads. From here, you can go in many directions. In this chapter,
    I’ll point out several of the best-traveled roads and suggest further resources
    for the next leg of your journey, whatever that may be. Finally, I’ll show you
    how to get plugged into the Python community as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: About the Future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is under perpetual development. Each version brings new features, and
    each new feature typically starts life as a PEP, which can stem from conversations
    anywhere in the community. From there, the PEP may be debated, adjusted, reworked,
    and ultimately either accepted or rejected.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the nature of software development, not all changes to the language are
    smooth. When a package is under consideration for addition to the standard library,
    it may be marked as a *provisional package* or *provisional API*, meaning it may
    change at any time, without regard to backward compatibility. The documentation
    will warn you of provisional packages, according to the rules outlined in PEP
    411.
  prefs: []
  type: TYPE_NORMAL
- en: 'On occasion, when a feature is slated to be released in a later version of
    Python but the core developers want to allow users of the language to test a preview
    version in live code in advance, the feature will be added to a special module
    called `__future__`. The upcoming feature can be imported from that module and
    used as if it had already been made part of the language. As of the date of this
    writing, there’s only one upcoming feature in `__future__`: postponed evaluation
    of annotations (PEP 563), which is a feature of Python 3.10.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want an insider’s view of possible new features and the future of the
    language, sign up for the official forums at [https://discuss.python.org/](https://discuss.python.org/)
    and subscribe to the `python-dev` mailing list at [https://mail.python.org/mailman3/lists/python-dev.python.org/](https://mail.python.org/mailman3/lists/python-dev.python.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Where Do You Go from Here?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python’s versatility is a key reason it remains one of the most popular programming
    languages. Yet it’s essential to remember: you cannot learn everything, nor should
    you attempt it! Programming is not like riding a bike. Knowledge, once gained,
    must be regularly practiced or it will be lost.'
  prefs: []
  type: TYPE_NORMAL
- en: The better route is to find a problem that you care about solving and build
    a solution for it. The purpose of this section is to give you a sampling of the
    sorts of problems Python is commonly used to solve.
  prefs: []
  type: TYPE_NORMAL
- en: The future is in your hands. What will you build?
  prefs: []
  type: TYPE_NORMAL
- en: Application Development in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I personally enjoy building GUI-based user applications in Python. Whether you’re
    developing for the desktop or mobile, Python is a great language for application
    development because of its intuitive syntax and wide selection of frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Even in this internet age, desktop and mobile applications still have a firm
    place in the market. Services like Spotify and Dropbox provide client applications
    (both written in Python!) with additional device integration. Desktop applications
    are still reliable workhorses in many fields and workflows, from graphics design
    to data visualization. They are also in a position to fully utilize system resources
    and hardware in ways that may be more challenging in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of GUI frameworks available for Python, including *Tkinter*,
    the Python binding for the Tk framework. It’s one of the easiest GUI frameworks
    to pick up, but its default graphics style is noticeably outdated. Tkinter is
    included in the Python standard library, although some Linux distributions distribute
    it as a separate package.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most prominent GUI frameworks is Qt (officially pronounced “cute”),
    which provides everything you need to build clean, modern applications across
    a spectacular array of environments and devices. There are two Python bindings
    for the Qt framework: *PySide2* (Qt 5) and *PySide6* (Qt 6), the official bindings
    maintained by The Qt Company; and *PyQt5* or *PyQt6*, which are maintained by
    Riverbank Computing.'
  prefs: []
  type: TYPE_NORMAL
- en: Another popular GUI framework is *GTK*, a mature and robust framework that is
    particularly prominent on Linux. *PyGObject* is the Python binding for GTK3 and
    GTK4.
  prefs: []
  type: TYPE_NORMAL
- en: '*Kivy* is a GUI toolkit that works across major desktop and mobile operating
    systems. It’s especially geared toward touch screen devices (although it supports
    keyboard and mouse) and is particularly well-suited for game development. As of
    this writing, it’s particularly difficult (and not fully supported) to package
    a Kivy application for Linux. Some improvements made in Kivy 2.0 are promising
    on this front, but I still strongly recommend that you figure out your packaging
    *before* you start building.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are quite a few more GUI frameworks, such as *wxPython* and *Flexx*,
    but there are far too many to enumerate here. You can find a fairly up-to-date
    list here: [https://wiki.python.org/moin/GuiProgramming](https://wiki.python.org/moin/GuiProgramming).'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t know where to start with GUI applications, I recommend you start
    with Qt. If you prefer a guided approach, check out *Create GUI Applications with
    Python & Qt5* by Martin Fitzpatrick. He has editions of the book for both PySide2
    and PyQt5\. Visit his website at [https://www.learnpyqt.com/](https://www.learnpyqt.com/)
    for more information, plus tutorials and examples.
  prefs: []
  type: TYPE_NORMAL
- en: Game Development in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it’s not as robust as many game engines, Python lends itself to fairly
    streamlined game development. Prominent games like *Civilization IV*, *EVE Online*,
    *Frets on Fire*, and *Toontown Online* were all built with Python. Depending on
    the game, you may be able to get by with one of the general-purpose GUI frameworks,
    but for best results, you’ll often want to pick up a dedicated game development
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '*PyGame* is one of the oldest and most frequently cited Python game development
    libraries. It’s primarily a wrapper around the *Simple DirectMedia Layer (SDL2)*,
    which provides cross-platform access to the hardware for working with graphics,
    sound, and devices. It also interfaces with other graphics APIs, like *OpenGL*,
    *Direct3D*, and *Vulkan*.'
  prefs: []
  type: TYPE_NORMAL
- en: There are more options beyond PyGame, depending on the sort of game you want
    to build. *Wasabi2D* and *pyglet* both work with OpenGL, which is the underpinning
    of most major game engines. *Panda3D* and *Ogre* are two popular options for creating
    real-time 3D games. There are many other libraries besides.
  prefs: []
  type: TYPE_NORMAL
- en: Whichever game development framework you want to use, its documentation is the
    best place to start. Alternatively, if you’d prefer a shallow learning curve with
    plenty of guided examples, check out Al Sweigart’s *Invent Your Own Computer Games
    with Python,* 4th Edition (No Starch Press, 2016), which will get you acclimated
    to PyGame and, more importantly, the different concepts associated with game development.
  prefs: []
  type: TYPE_NORMAL
- en: Web Development in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python excels as a server-side language, especially for rapidly developing
    web applications and APIs. There are three libraries in the spotlight at present
    for this: *Django*, *Flask*, and *FastAPI*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Django* is the batteries-included option. It employs a Model View Template
    (MVT) architecture, and it includes database integration, an object-relational
    mapper (ORM), and just about everything you could need to build a web application
    or API in Python. Django is used by BitBucket, Instagram, the Public Broadcasting
    Service (PBS), and the *Washington Times,* among others. To get started with Django,
    visit their website at [https://www.djangoproject.com/](https://www.djangoproject.com/).
    Django Girls also has a particularly excellent tutorial at [https://tutorial.djangogirls.org/](https://tutorial.djangogirls.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Flask*, by contrast, is the minimalist option. It’s lightweight, providing
    the bare-minimum framework and leaving it to the developer to choose what tools
    and components to use. The Flask community provides a wide variety of extensions
    for adding functionality on par with Django, all of which are selected and installed
    separately. Flask emphasizes leaving as much control in the hands of the developer
    as possible. Websites like Pinterest and LinkedIn are built in Flask. If you want
    to learn Flask, their documentation will guide you through the entire process
    of setting up, getting started, and working with every part of the framework:
    [https://flask.palletsprojects.com/](https://flask.palletsprojects.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*FastAPI* is a framework aimed at web API design specifically. It is designed
    for performance and stability, and it is fully compliant with the OpenAPI (Swagger)
    and JSON Schema. See the documentation at [https://fastapi.tiangolo.com/](https://fastapi.tiangolo.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Client-Side Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may wonder if it is possible to run Python in the browser, client-side.
    At present, there are a few implementations of Python attempting exactly that.
    Here are just a few.
  prefs: []
  type: TYPE_NORMAL
- en: '*Brython*, which is short for *Browser Python*, is the more mature of the two
    options. It works by transpiling Python to JavaScript. Brython is designed to
    work with the W3C Document Object Model (DOM). More information and full documentation
    are available at [https://www.brython.info/](https://www.brython.info/) and on
    the project’s GitHub at [https://github.com/brython-dev/brython](https://github.com/brython-dev/brython).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Skulpt* is a newer solution; it’s intended to be a complete implementation
    of the Python language in JavaScript, as opposed to a transpiler. As of this writing,
    Skulpt is still missing a lot of core language features. More information is at
    [https://skulpt.org/](https://skulpt.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pyodide* is a third option. It’s a port of CPython to WebAssembly and Emscripten,
    and has support for many C extensions. More information and documentation can
    be found at [https://pyodide.org/en/stable/](https://pyodide.org/en/stable/).'
  prefs: []
  type: TYPE_NORMAL
- en: Data Science in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is one of the leading languages in the field of *data science*, which
    focuses on gaining insights and extracting information by aggregating and analyzing
    data. Data science is considered applied statistics and related to but distinct
    from computer science. The task of distilling information out of a data set is
    sometimes referred to as *data mining*. The term *big data* refers to work with
    particularly large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: There is a vast ecosystem geared especially toward data science, although many
    of these tools are also useful in software development.
  prefs: []
  type: TYPE_NORMAL
- en: The Data Science Environment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Jupyter Notebook* is perhaps the single most important tool in the data science
    ecosystem. It is a complete interactive-development environment and is particularly
    well-suited to data science and scientific computing, as it combines executable
    Python code with Markdown-formatted text, mathematics equations, live charts and
    graphs, and other rich media. A *notebook document* is a single Jupyter Notebook
    file, ending in the file extension *.ipynb* (for IPython Notebook, the former
    name of Jupyter Notebook). In addition to supporting Python, Jupyter works with
    the other two most popular languages in data science, namely *Julia* and *R*.
    You can learn more about Jupyter Notebook and its related projects at [https://jupyter.org/](https://jupyter.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Anaconda* is a distinct Python distribution geared specifically toward data
    science and scientific computing. It ships with over 250 of the most common data
    science libraries and tools preinstalled, including Jupyter Notebook. It also
    comes with its own integrated development environment, *Anaconda Navigator*, and
    a dedicated package manager, *conda*. In addition to all this, Anaconda offers
    a data science–oriented cloud service with both free and paid plans. More information
    can be found at [https://anaconda.org/](https://anaconda.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Data Science Packages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are hundreds of packages for data science in Python, but there are a
    handful of particularly notable ones, many of which consistently lead the pack:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pandas* is considered essential for processing data. It supplies *dataframes*,
    which allow you to select, merge, reshape, and process data from databases, spreadsheets,
    tables, CSV files, and more, similar to the R language. Learn more at [https://pandas.pydata.org/](https://pandas.pydata.org/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*NumPy* is the leading package for handling numeric computing, everything from
    mathematics to statistical analysis, and even performing advanced processing of
    lists and arrays. Learn more at [https://numpy.org/about](https://numpy.org/about)*/*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*SciPy* (the library) expands on NumPy, offering additional numeric routines
    for scientific computing, including linear algebra and numerical optimization.
    It is part of the *SciPy ecosystem*, along with NumPy, pandas, and several other
    tenants of this list. Learn more at [https://scipy.org/](https://scipy.org/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Matplotlib* is one of the most popular libraries for generating plots, charts,
    graphs, and other data visualizations. Learn more at [https://matplotlib.org/.](https://matplotlib.org/.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Seaborn* expands on Matplotlib and is integrated with pandas, to provide more
    advanced data visualization tools (with all the pretty colors!) Learn more at
    [https://seaborn.pydata.org/.](https://seaborn.pydata.org/.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Bokeh* is another popular visualization library, independent of Matplotlib,
    that allows you to create interactive data visualizations that can be embedded
    in web pages and Jupyter notebooks. Learn more at [https://bokeh.org/.](https://bokeh.org/.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Dask* is a Python parallelism library that is built specifically for working
    with major packages in data science and related fields. It allows you to speed
    up the execution time, especially when working with large data sets or CPU-intensive
    analysis. Learn more at [https://dask.org/.](https://dask.org/.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Kedro* is relatively new to the party, but it fulfills an important role in
    data science: the need for a framework to keep data pipelines scalable, easily
    maintainable, and production ready. Learn more at [https://kedro.readthedocs.io/.](https://kedro.readthedocs.io/.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are plenty of subtopics in the realm of data science, including *geographic
    information systems (GIS)* and the many branches of *scientific computing*. These
    fields often have their own common libraries and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Also worth a mention is *Numba*, a just-in-time (JIT) compiler for Python and
    NumPy, which allows you to compile specific, selected parts of your Python program
    to machine code.
  prefs: []
  type: TYPE_NORMAL
- en: One way to learn more about the Anaconda ecosystem, including many of the libraries
    listed here, is to read *Doing Science with Python* by Lee Vaughan (No Starch
    Press, 2022).
  prefs: []
  type: TYPE_NORMAL
- en: Machine Learning in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another popular topic in Python is *machine learning*, which is at the heart
    of artificial intelligence. Machine learning is the process by which an algorithm
    can be made to improve automatically over time, based on data and feedback provided
    to it. This is a process known as *training*. For example, your smartphone uses
    machine learning to improve its autocompletion suggestions while you type. The
    more you use your smartphone, the better that algorithm gets at suggesting the
    word you’re typing.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning works using *neural networks*, which are data structures that
    replicate the structure and behavior of biological neural networks, such as the
    brain you are using right now. When you layer neural networks together, you get
    into the topic of *deep learning*.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of a neural network isn’t particularly difficult to comprehend,
    but there is a fair bit of advanced mathematics involved, including linear algebra,
    multivariate calculus, and probability. If you’re interested in machine learning,
    invest some time in understanding this math well. Don’t worry about doing the
    math on paper; focus on mastering the concepts and let the computer do the number
    crunching for you.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning is often closely associated with data science. (The data used
    to train the neural network has to come from somewhere!) Therefore, you’ll find
    many of the same packages used across both specialties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the five most popular machine learning packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '*TensorFlow* is a C++ and Python symbolic math library behind some of today’s
    larger machine learning projects, including artificial intelligence work at Google,
    where it got its start. It’s harder to learn than many of the other options, but
    it’s widely used, especially due to its speed. Learn more at [https://www.tensorflow.org/](https://www.tensorflow.org/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Keras* is a deep- learning API that expands on TensorFlow, and it is generally
    considered easier to use besides. If you’re looking for a place to start, this
    is an excellent option. Learn more at [https://keras.io/](https://keras.io/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Scikit-learn* is a simpler machine learning library built atop NumPy. It is
    particularly useful for predictive data analysis and other data science applications.
    Learn more at [https://scikit-learn.org/](https://scikit-learn.org/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*PyTorch* is based on Facebook’s Torch framework. It independently brings the
    same functionality you’d get out of NumPy, SciPy, and Scikit-learn. PyTorch offers
    acceleration via the GPU, and it can work with deep neural networks. Learn more
    at [https://pytorch.org/](https://pytorch.org/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Aesera* is a Python-only machine learning library that tightly integrates
    with NumPy and focuses primarily on some of the mathematics involved. Although
    it can be used by itself, it’s most often employed alongside other options, like
    Keras. Aesera is a continuation of the *Theano* library. Learn more at [https://aesara.readthedocs.io/en/latest/](https://aesara.readthedocs.io/en/latest/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the arena of machine learning are a number of other specialties, including
    natural language processing and computer vision. Once you understand the basics
    of machine learning, you can branch out into whatever subtopics you find interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re interested in this field, two books to get you started are *Deep
    Learning: A Visual Approach* by Andrew Glassner (No Starch Press, 2021) and *Practical
    Deep Learning* by Ronald T. Kneusel (No Starch Press, 2021). If you prefer to
    learn as you go, start with Keras or Scikit-learn.'
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is increasingly popular in the field of *information security*, or *infosec*,
    which focuses on ensuring data, software, and computer systems are safe and secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word of caution is prudent here. The techniques used to find flaws in security
    that need to be shored up are the same techniques used to exploit those flaws.
    The entire field of infosec operates on a fine legal and ethical line, which separates
    ethical (“white hat”) hackers from criminal (“black hat”) hackers. Both sides
    know how to construct and deploy malware, reverse engineer software, and hack
    into systems: the difference is that the ethical hackers use these techniques
    to find and report or close security holes before criminal hackers can exploit
    them. For example, the infamous Heartbleed and Spectre bugs were discovered and
    reported by ethical hackers before they could be exploited.'
  prefs: []
  type: TYPE_NORMAL
- en: Two of the best books about Python and infosec are *Black Hat Python*, 2nd Edition,
    by Justin Seitz and Tim Arnold (No Starch Press, 2021) and *Gray Hat Python*,
    also by Justin Seitz (No Starch Press, 2009). (The titles are deliberately ironic.)
    If you’re interested in this field, those books provide the best place to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'But once again, let me remind you: it is your responsibility to use your powers
    for good. Using computers to commit crimes or cause trouble is *never* okay, and
    doing so will earn you the derision of the entire Python community. Keep your
    hacking ethical.'
  prefs: []
  type: TYPE_NORMAL
- en: Embedded Development in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If maker culture is more your speed, you’ll be pleased to know that Python is
    currently the fastest-growing language in *embedded development*, wherein code
    is shipped directly on the hardware it controls. This means you can use Python
    for robotics, Internet-of-Things devices, and many other hardware projects.
  prefs: []
  type: TYPE_NORMAL
- en: Python works with Raspberry Pi, which comes with the *Thonny* Python IDE preinstalled.
    More information can be found at [https://www.raspberrypi.com/documentation/computers/os.xhtml](https://www.raspberrypi.com/documentation/computers/os.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Python can be used to program the *Arduino* microcontroller via *pyserial*:
    [https://pythonhosted.org/pyserial/](https://pythonhosted.org/pyserial/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*MicroPython* is a separate implementation of Python that is geared specifically
    toward embedded development. It works best with the *pyboard* microcontroller.
    You can learn more about MicroPython and pyboard at [https://micropython.org/](https://micropython.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*CircuitPython* is another Python implementation. It is based on MicroPython
    but geared primarily toward *Adafruit* microcontrollers. It can also be used on
    a number of Raspberry Pi and Ardunio microcontrollers, as well as hardware from
    many other brands. Device-specific downloads and links to documentation, tutorials,
    and guides can be found at [https://circuitpython.org/](https://circuitpython.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Scripting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With all these vast and impressive uses of Python, it’s easy to forget that
    one of the reasons this language exists is to facilitate automation and scripting.
    Countless libraries exist to allow Python to interact with all sorts of software,
    operating systems, and hardware. If you have a repetitive task that needs a clean
    solution, there’s a good chance that Python can help with that.
  prefs: []
  type: TYPE_NORMAL
- en: Two excellent books for learning how to automate with Python are *Real-World
    Python* by Lee Vaughan (No Starch Press, 2020) and *Automate the Boring Stuff*
    *with Python*, 2nd Edition, by Al Sweigart (No Starch Press, 2019).
  prefs: []
  type: TYPE_NORMAL
- en: Python Flavors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you’ve probably gathered, the default implementation of Python, known formally
    as *CPython*, isn’t the only implementation out there. Quite a few others exist,
    most of them with special uses.
  prefs: []
  type: TYPE_NORMAL
- en: I have to start by mentioning a highly specialized implementation, *RPython*,
    which is geared toward building interpreted languages. It’s a restricted subset
    of the Python language with a *just-in-time (JIT) compiler*, meaning the language
    is built to machine code immediately before execution, instead of being interpreted
    during execution by an interpreter. RPython is extensively documented at [https://rpython.readthedocs.io/](https://rpython.readthedocs.io/).
  prefs: []
  type: TYPE_NORMAL
- en: '*PyPy* is another implementation, and it is notable for being quite a bit faster
    than CPython. It is implemented on RPython, instead of C. It owes its speed to
    the fact that it is JIT compiled, instead of interpreted, allowing it to reach
    performance comparable to C++ or Java. PyPy is always several versions behind
    CPython—as of this writing, it is up to Python 3.6—but for projects where performance
    matters, this is an acceptable compromise. Additionally, because PyPy does not
    rely on C, it typically doesn’t work with binary extensions, except for some built
    to that purpose in CFFI.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Stackless Python* is another peculiar implementation of Python that offers
    some unique tools for improved concurrency and code structure. Stackless is its
    own beast in many ways, and it must be learned as such. The best place to start
    is with its wiki, which has links to further reading and resources: [https://github.com/stackless-dev/stackless/wiki](https://github.com/stackless-dev/stackless/wiki).'
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, I mentioned *Brython* ([https://www.brython.info/](https://www.brython.info/)),
    *Skulpt* ([https://skulpt.org/](https://skulpt.org/)), and *Pyodide* ([https://pyodide.org/en/stable/](https://pyodide.org/en/stable/)),
    which are in-browser implementations of Python geared toward web development.
    I also mentioned *MicroPython* ([https://micropython.org/](https://micropython.org/))
    and *CircuitPython* ([https://circuitpython.org/](https://circuitpython.org/)),
    which are implementations for embedded development.
  prefs: []
  type: TYPE_NORMAL
- en: Besides these, there are a handful of implementations of the Python interpreter
    built in different languages. The four most notable of these are RustPython, implemented
    in Rust; IronPython and *Python.NET*, both of which integrate tightly with the
    .NET framework; and *Jython*, which is written in Java for integration with the
    *Java Virtual Machine (JVM)*. As of this writing, RustPython supports up to Python
    3.9, and Python.NET supports up to Python 3.8, while IronPython is only on Python
    3.4, and Jython is still in line with Python 2.7\. You can learn more about RustPython
    at [https://rustpython.github.io/](https://rustpython.github.io/), IronPython
    at [https://ironpython.net/](https://ironpython.net/), Python.NET at [https://pythonnet.github.io/](https://pythonnet.github.io/),
    and Jython at [https://www.jython.org/](https://www.jython.org/).
  prefs: []
  type: TYPE_NORMAL
- en: No matter what implementation you use, remember that the official implementation,
    CPython, serves as the baseline for all of them. Even if you plan to spend most
    of your time in another implementation, it’s important to know how to use CPython
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python ecosystem itself is maintained by thousands of developers around
    the world. Some write libraries to answer specific needs, while others extend
    and improve the Python language in all its different implementations.
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to become involved in the development of Python, it would be helpful
    for you to have some experience or interest in other branches of development,
    so you’ll understand what needs exist and how to best address them. Very few developers
    set out to work on Python; rather, they drift into it after recognizing an area
    of need in their own work. Even so, when you’re able to contribute to the Python
    ecosystem, it’s a great feeling indeed.
  prefs: []
  type: TYPE_NORMAL
- en: Developing Python Packages and Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The techniques you’ve learned in this book have fully prepared you to build
    and ship production-quality packages, libraries, and development tools. Maybe
    you have some ideas already, or maybe you’re still pondering what you could build.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, I strongly recommend learning more about the existing tools
    and packages you use on a regular basis. A large majority of projects are maintained
    by a handful of volunteers, often thanklessly, and issues sometimes come in faster
    than the volunteers can resolve them. Before you set out to build a brand-new
    thing, consider if you could instead improve an existing solution. Contributing
    to open source projects is an incredible way to build your skills and make new
    professional connections. Your contributions don’t even have to be massive. Whether
    you’re performing code reviews on backlogged pull requests, fixing minor bugs,
    doing small “housekeeping” tasks, tidying up the documentation, or polishing the
    packaging, it all helps!
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of projects that are abandoned or otherwise unmaintained
    and are in need of a new maintainer to step up and take over. When you adopt an
    abandoned project, you get the benefits of a working code base (for some definitions
    of “working”) and an existing user base. Often, projects are abandoned because
    they need to be ported to Python 3\. Also, working with legacy code can be a very
    rewarding experience.
  prefs: []
  type: TYPE_NORMAL
- en: Nearly all packages on the Python Package Index (PyPI) have links to the official
    website, source code, and issue tracker. Other packages list an email address
    for the present maintainer. When you find a package that you use regularly, you
    should seriously consider getting involved in its development and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: As for new projects, if you find yourself building a tool or library for solving
    a problem you’re having in your development efforts, consider publishing it for
    the rest of the world to use!
  prefs: []
  type: TYPE_NORMAL
- en: Developing Python Extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Binary extension modules*, often just called *extension modules* or *extensions*,
    add new functionality atop the CPython interpreter and allow you to integrate
    CPython with C and C++ code.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Wrapper modules* expose C libraries to Python. PyGObject is an example of
    this, as it wraps the GTK C library and several others besides, and it makes them
    available to Python. Extensions can also wrap C++ and FORTRAN libraries, among
    others.'
  prefs: []
  type: TYPE_NORMAL
- en: Another common use case for extensions is to provide low-level access to the
    operating system, hardware, or the CPython runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '*Accelerator modules* offer equivalent behavior to a pure Python module, but
    they are actually written in C. One particular advantage of accelerator modules
    is that they can be written to bypass the Global Interpreter Lock, since they
    run as compiled machine code. These modules should provide a pure Python fallback
    module for situations where the extension may not work.'
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few ways to develop extensions. Traditionally, you can include
    the *Python.h* header file in your C code and build from there. Details and documentation
    about this can be found at [https://docs.python.org/3/extending/index.xhtml](https://docs.python.org/3/extending/index.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: However, working directly with *Python.h* is no longer considered the best approach.
    Aside from this technique being quite clunky and error-prone, extensions built
    this way often have significant difficulty working with PyPy and other implementations
    of Python. Instead, there are a number of third-party tools for building extensions,
    which are far simpler and more obvious in their usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *C Foreign Function Interface* (*CFFI*) is one of the more popular options.
    Unlike some other tools, CFFI doesn’t require you to learn an additional specialty
    language. Instead, it uses purely C and Python. It works with both CPython and
    PyPy. You can learn more about CFFI from its extensive official documentation:
    [https://cffi.readthedocs.io/](https://cffi.readthedocs.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: CFFI does not work with C++, so if you need C++ and Python interoperability,
    check out *cppyy*. Official documentation lives at [https://cppyy.readthedocs.io/](https://cppyy.readthedocs.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Cython is a separate programming language that is a superset of Python and provides
    direct access to C and C++. You compile your Cython code up front, as you would
    with C. More information and official documentation can be found at [https://cython.org/](https://cython.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '*Simplified Wrapper and Interface Generator (SWIG)* is a tool for interoperability
    between over a dozen programming languages, including Python, C, C++, Java, C#,
    Perl, JavaScript, and Ruby. It can be used to create Python binary extensions.
    Information, documentation, and tutorials can be found on its official website
    at [http://www.swig.org/](http://www.swig.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Development of Python binary extensions is a particularly deep topic, especially
    as it involves the C language. The Python Packaging Authority has an excellent
    guide that explores binary extension development, particularly from a packaging
    standpoint: [https://packaging.python.org/guides/packaging-binary-extensions/](https://packaging.python.org/guides/packaging-binary-extensions/).'
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is an open source project with a rich community and a well-maintained
    development pipeline. If you’re passionate about Python, the language itself always
    welcomes new contributors! Your contributions could include fixing bugs, testing
    patches, implementing new features, and updating documentation. Even if you don’t
    have incredible C-coding skills, there’s plenty for you to do. If you want to
    get started contributing to Python, read through the official Python Developer’s
    Guide at [https://devguide.python.org/](https://devguide.python.org/).
  prefs: []
  type: TYPE_NORMAL
- en: If Java or .NET is more your speed, or if you’re fascinated with RPython, you
    can instead contribute to Jython, RustPython, Python.NET, IronPython, or PyPy.
    These are all considered important implementations in the Python ecosystem, and
    there’s always more to do.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Language
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because Python is built by the community, you can propose changes to the Python
    language or its standard library. This will involve a considerable amount of work
    on your part, along with quite a bit of discussion, diplomacy, debate, and testing.
    Somewhere along the way, you will need to create a PEP outlining your proposed
    changes and all the discussion that’s gone into it so far.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t embark on this process lightly! Even if your idea seems obvious to you,
    you are likely underestimating the depth or merit of other viewpoints. We all
    want Python to be the best it can be, and that means factoring in the wildly divergent
    needs and perspectives of our diverse user base. That’s why proposing a PEP is
    a significant time investment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re certain you’re up for the challenge, see the official guides: [https://devguide.python.org/langchanges/](https://devguide.python.org/langchanges/)
    for language changes and [https://devguide.python.org/stdlibchanges/](https://devguide.python.org/stdlibchanges/)
    for standard library changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a Core Developer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you’ve been making quality contributions to CPython for some time, you
    can apply to become a *core developer*, which brings with it additional authority
    and responsibility. Core developers are involved in leading Python development,
    and their opinions regarding language direction and proposed changes bear much
    weight.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to become a Python core developer, start by contributing *patches*,
    which consist of code fixing a bug or implementing an approved feature, to CPython.
    Keep at this until a core developer offers you commit privileges. They’ll keep
    an eye on your work after that and help mentor you in the Python development process.
    Eventually, if you do this well, you may be offered an official opportunity to
    become a core developer.
  prefs: []
  type: TYPE_NORMAL
- en: The entire process and all the responsibilities and steps involved are outlined
    in the guide at [https://devguide.python.org/coredev/](https://devguide.python.org/coredev/),
    which itself is based on the Python Language Governance policies outlined in PEP
    13.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Involved with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wherever you go from here, I strongly recommend getting involved in the Python
    community! You will learn a lot from your fellow Python developers, and you can
    greatly benefit from helping and mentoring others. There are a number of official
    and unofficial communities around the internet, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The DEV Community: [https://dev.to/t/python](https://dev.to/t/python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Discord: [https://pythondiscord.com/](https://pythondiscord.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forums (Official): [https://www.python.org/community/forums/](https://www.python.org/community/forums/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Libera.Chat IRC (Official): [https://www.python.org/community/irc/](https://www.python.org/community/irc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mailing Lists/Newsgroups (Official): [https://www.python.org/community/lists/](https://www.python.org/community/lists/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reddit: [https://www.reddit.com/r/learnpython/](https://www.reddit.com/r/learnpython/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Slack: [https://pyslackers.com/web](https://pyslackers.com/web)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of the ones on this list, my personal favorites are DEV, where this book got
    its start, and Libera.Chat IRC, where I met most of my technical editors.
  prefs: []
  type: TYPE_NORMAL
- en: Asking Questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The primary reason developers first join a community is to ask questions. This
    can feel intimidating at first, no matter what platform you’re on! Here are a
    few principles for asking questions and getting help in the Python community.
    These guidelines are true across most programming communities, but especially
    in Python!
  prefs: []
  type: TYPE_NORMAL
- en: First, do some research and experimentation yourself. *Read the documentation*.
    Try out some possible solutions and take note of what doesn’t work. We in the
    Python community are happy to help you, but we want to see you bring your own
    efforts to the table, too.
  prefs: []
  type: TYPE_NORMAL
- en: Second, be specific. The more information you can provide, the better we can
    help you. When possible, give us code we can inspect and run, the exact text of
    error messages or wrong output, details about your environment (operating system,
    Python version, and library versions), and insight into the outcomes of your own
    experimentation. When providing all this information, be careful to follow community
    rules regarding large pastes. Many platforms, including Libera.Chat IRC, ask that
    you use a paste-sharing tool like *bpaste.net*, instead of dumping pastes into
    chat, where they will clog up the backlog. Never paste multiple lines of code
    or output directly into chat!
  prefs: []
  type: TYPE_NORMAL
- en: Third, be prepared for unexpected threads of feedback. If a bug is precipitating
    from poor design, incorrect assumptions, or nonidiomatic practice, we’d much rather
    help you fix the design than the bug. We aren’t interested in *working* code,
    so much as *idiomatic* code. You will likely be asked things like “What is your
    goal, why are you doing it this way, and is there a reason you aren’t doing X?”
    Stay calm and work with us.
  prefs: []
  type: TYPE_NORMAL
- en: Fourth, be polite and patient. All the online communities I’ve mentioned are
    staffed by volunteers who give freely of their time and effort to help others.
    It may take time to get an answer. Just ask your question outright in the public
    space—never “ask to ask” or inquire after an expert in such and such, as it only
    wastes people’s time—and then wait for someone to respond. In the case of IRC,
    *stay logged in* or you’ll miss our response! In any chat-based medium, if your
    message gets completely buried in backlog (I’m talking three or more desktop screen
    pages), calmly repost it. On forum-like platforms, resist the temptation to “bump”
    the thread.
  prefs: []
  type: TYPE_NORMAL
- en: When you get a response, read it thoroughly and answer thoughtfully. We will
    probably have many more questions for you as we try to home in on the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Answering Questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having made it through *Dead Simple Python*, you now know quite a lot about
    Python! As a result, you will encounter questions from other community members
    that you may be able to answer. This is a great way to give back to the community
    and build relationships with other developers. You’ll learn quite a bit in the
    process, too. Even so, when you’re getting started, it can feel intimidating.
    Here are a few tips.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, don’t be afraid of making mistakes. If you feel like you can answer
    a question, give it your best shot. This is a benefit of answering questions in
    the community: if you get something wrong, someone else will often be there to
    correct you. Python developers love pedantic correctness! (Seriously; you should
    see some comments I’ve gotten from my technical editors.) In the worst-case scenario,
    you’ll walk away from the encounter having learned something. No one worthwhile
    will think less of you for it, I promise.'
  prefs: []
  type: TYPE_NORMAL
- en: Second, more than half of the process of answering a question is *asking more
    questions*. Like The Zen of Python says, “In the face of ambiguity, refuse the
    temptation to guess.” Ultimately, your goal should be to guide the asker toward
    the most Pythonic solution to the problem they’re trying to solve.
  prefs: []
  type: TYPE_NORMAL
- en: Third, it’s important to be kind. The only things up for critique are *code*
    and *practice*, never people. Resist the temptation to deploy put-downs or shutdowns,
    no matter how clever or “funny” they may be.
  prefs: []
  type: TYPE_NORMAL
- en: On that note, be careful of issuing “read the documentation” admonishments.
    Documentation can be infamously obtuse and difficult to parse, especially for
    a beginner. It’s okay to share a link to the relevant page or section, or to any
    other helpful resource, but you should *never* shame anyone for not having previously
    read or understood the documentation or other material. The same goes for web
    search results—it can sometimes take real skill to determine which keywords are
    the best or which results are relevant. In any case, be prepared in case they
    say that the link doesn’t solve their problem; you may need to ask more questions
    to better understand what issue they’re stuck on.
  prefs: []
  type: TYPE_NORMAL
- en: User Groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Online communities are excellent resources, but nothing beats in-person networking
    and collaboration! There are over 1,600 Python user groups worldwide, providing
    opportunities for developers of all backgrounds and skill levels to exchange knowledge,
    especially through events like social meetings, speaking presentations, hack sessions,
    and even local conferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'A complete list of Python user groups is maintained on the official Python
    wiki: [https://wiki.python.org/moin/LocalUserGroups](https://wiki.python.org/moin/LocalUserGroups).
    Consider connecting with one in your area. If you don’t have a nearby user group,
    you may consider starting one yourself! The wiki has a guide for that, too: [https://wiki.python.org/moin/StartingYourUsersGroup](https://wiki.python.org/moin/StartingYourUsersGroup).'
  prefs: []
  type: TYPE_NORMAL
- en: PyLadies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of particular note is *PyLadies*, a group organized by the Python Software Foundation,
    which focuses on supporting and mentoring female developers in the Python community.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyLadies organizes meetups and other events, and it provides resources. In
    addition to the international online community, there are a number of local PyLadies
    groups all over the world. If there isn’t one near you, perhaps you could organize
    one. More information about PyLadies is available at [https://pyladies.com/](https://pyladies.com/).
    The official list of PyLadies groups is maintained here: [https://pyladies.com/locations/](https://pyladies.com/locations/).'
  prefs: []
  type: TYPE_NORMAL
- en: Conferences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Attending conferences is an incredible way to learn and grow as a developer,
    while connecting with the larger Python community. There are a number of fantastic
    conferences in the Python world, including PyCon US (the official conference),
    Pyjamas, SciPy, Python Pizza, and PyData. There are also versions of PyCon in
    many countries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that comes to mind when you think of a conference is probably
    all the lectures. Talks are certainly among the highlights, especially keynote
    presentations from important people in the Python community, but they’re not the
    only thing going on. *Workshops* present opportunities to get hands-on with a
    new topic. *Lightning talk* sessions are a lot of fun, too: they let anyone present
    a 5- or 10-minute talk, sometimes improvised right on the spot. Some presentations
    are amazingly insightful, and others are downright hilarious. Many conferences
    also have *sprints*, collaborative coding sessions (think “hackathon”) where attendees
    can freely join teams to build or improve code.'
  prefs: []
  type: TYPE_NORMAL
- en: While attending a conference can be a lot of fun, getting involved can be even
    more exciting! If you want to present a talk at a conference, be on the lookout
    for the *Call for Proposals (CFP)*, when you can submit a proposal for a talk
    or workshop. If you’re brand-new to speaking, you may consider presenting to your
    local Python User Group or giving a lightning talk. You could also submit a project
    for a sprint, which can be an excellent way to get new contributors and users
    while improving your code.
  prefs: []
  type: TYPE_NORMAL
- en: Most conferences rely pretty heavily on volunteers, so consider contacting any
    conference you’re thinking about attending, and then see how you can help out.
    You’ll get to meet a lot of great people that way, and volunteering is really
    fun.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to attend a conference but can’t afford to go, you can check if
    there are scholarships or other financial aid available, especially if you’re
    a volunteer. If you’re employed as a programmer, your employer may also be willing
    to help with some of your conference expenses. After all, when you get smarter,
    they benefit!
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of Python conferences is maintained on the Python wiki: [https://www.python.org/community/workshops/](https://www.python.org/community/workshops/)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Joining the Python Software Foundation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Python Software Foundation (PSF)* is the nonprofit organization that officially
    manages the Python language. They’re responsible for all the major decisions,
    and they help to grow the community worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: The Python Software Foundation is an open-membership organization, meaning anyone
    can join for free. Basic members need only sign up and agree to the PSF Code of
    Conduct, which is the set of guidelines that the entire Python community operates
    on. Members are subscribed to the Python Software Foundation newsletter.
  prefs: []
  type: TYPE_NORMAL
- en: There are three special types of members, all of whom get to vote in the PSF
    Board of Directors elections. *Supporting members* donate to the PSF annually.
    *Managing members* volunteer at least five hours a month in the Python community,
    including helping to organize events and user groups or volunteering on Python
    Software Foundation projects. *Contributing members* volunteer at least five hours
    a month on free, publicly available open source projects that advance the mission
    of the PSF. You can learn more about PSF membership at [https://www.python.org/psf/membership/](https://www.python.org/psf/membership/).
  prefs: []
  type: TYPE_NORMAL
- en: And the Road Goes Ever On . . .
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This, dear reader, is where I leave you. The direction you take from here is
    up to you! I am certain there are many adventures ahead of you. I send you forward
    into the brave frontier beyond with three final pieces of advice. If you’ve been
    coding for a while, you may already know these things, but they are always worth
    hearing again.
  prefs: []
  type: TYPE_NORMAL
- en: First, *it is dangerous to go alone*. Shiny new solutions call to you from the
    shadows, tempting you to stray from time-tested development paths. Clever solutions
    lure you away as they steal time and sanity from your future self and your colleagues.
    Bugs lurk in the dark recesses of your code, waiting for midnight on a Friday
    to leap out at you with bared teeth and inexplicable log files. The comradeship
    of your fellow Python developers is the surest defense against these and many
    more dangers! There is safety in numbers. I could never have written *Dead Simple
    Python* without the all the support, insight, debate, and encouragement from the
    Python community. We need each other to thrive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, *embrace the adventure of making mistakes!* You will always learn more
    from solving a bug, working through a difficult problem, or making a mistake,
    than you will ever learn from writing or reading the best code in the world. I
    love how my colleague Wilfrantz Dede puts it whenever he embarks on a new task:
    “I’m going to go write some bugs.” Mistakes are an inevitable part of the learning
    process. Learn to expect them, embrace them, conquer them, and laugh at them!
    Share your coding mistakes with your colleagues. I promise you that most will
    think more of you for it, not less, and anyone who *would* look down on you is
    merely covering up their own egregious errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Third and finally, *you are a real programmer*. Never again question that! No
    matter how long you’re in this industry, you will always have more to learn. There
    are even expert developers who have been programming for decades but still feel
    the call of knowledge not yet gained.
  prefs: []
  type: TYPE_NORMAL
- en: The journey is never really over. There is always one more crest of the hill,
    one more bend in the road, and one more vast plain stretching ahead! Embrace every
    step of the adventure. It never gets old.
  prefs: []
  type: TYPE_NORMAL
