["```py\n65: [50, 1, 7]\n```", "```py\n   --snip--\n       screen.draw.text(text_to_show,\n                        (20, text_lines[line_number]), color=GREEN)\n\n   ###############\n   ##   PROPS   ##\n   ###############\n   # Props are objects that may move between rooms, appear or disappear.\n   # All props must be set up here. Props not yet in the game go into room 0.\n   # object number : [room, y, x]\n➊ props = {\n       20: [31, 0, 4], 21: [26, 0, 1], 22: [41, 0, 2], 23: [39, 0, 5],\n       24: [45, 0, 2],\n➋     25: [32, 0, 2], 26: [27, 12, 5], # two sides of same door\n       40: [0, 8, 6], 53: [45, 1, 5], 54: [0, 0, 0], 55: [0, 0, 0],\n       56: [0, 0, 0], 57: [35, 4, 6], 58: [0, 0, 0], 59: [31, 1, 7],\n       60: [0, 0, 0], 61: [36, 1, 1], 62: [36, 1, 6], 63: [0, 0, 0],\n       64: [27, 8, 3], 65: [50, 1, 7], 66: [39, 5, 6], 67: [46, 1, 1],\n       68: [0, 0, 0], 69: [30, 3, 3], 70: [47, 1, 3],\n➌     71: [0, LANDER_Y, LANDER_X], 72: [0, 0, 0], 73: [27, 4, 6],\n       74: [28, 1, 11], 75: [0, 0, 0], 76: [41, 3, 5], 77: [0, 0, 0],\n       78: [35, 9, 11], 79: [26, 3, 2], 80: [41, 7, 5], 81: [29, 1, 1]\n       }\n\n   checksum = 0\n   for key, prop in props.items():\n➍     if key != 71: # 71 is skipped because it's different each game.\n           checksum += (prop[0] * key\n                        + prop[1] * (key + 1)\n                        + prop[2] * (key + 2))\n➎ print(len(props), \"props\")\n   assert len(props) == 37, \"Expected 37 prop items\"\n   print(\"Prop checksum:\", checksum)\n➏ assert checksum == 61414, \"Error in props data\"\n\n➐ in_my_pockets = [55]\n   selected_item = 0 # the first item\n   item_carrying = in_my_pockets[selected_item]\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n#assert len(props) == 37, \"Expected 37 prop items\"\n#assert checksum == 61414, \"Error in props data\"\n```", "```py\n   --snip--\n       top_left_x = center_x - 0.5 * room_pixel_width \n       top_left_y = (center_y - 0.5 * room_pixel_height) + 110\n\n➊     for prop_number, prop_info in props.items():\n➋         prop_room = prop_info[0]\n           prop_y = prop_info[1]\n           prop_x = prop_info[2]\n➌         if (prop_room == current_room and\n➍             room_map[prop_y][prop_x] in [0, 39, 2]):\n➎                 room_map[prop_y][prop_x] = prop_number\n➏                 image_here = objects[prop_number][0]\n                   image_width = image_here.get_width()\n                   image_width_in_tiles = int(image_width / TILE_SIZE)\n➐                 for tile_number in range(1, image_width_in_tiles):\n                       room_map[prop_y][prop_x + tile_number] = 255\n\n   ###############\n   ## GAME LOOP ##\n   ###############\n   --snip--\n```", "```py\n➊ import random\n\n➋ def get_number():\n➌     die_number = random.randint(1, 10)\n➍     return die_number\n\n➎ random_number = get_number()\n➏ print(random_number)\n```", "```py\nget_number()\n```", "```py\n   --snip--\n   in_my_pockets = [55]\n   selected_item = 0 # the first item\n   item_carrying = in_my_pockets[selected_item]\n\n   #######################\n   ## PROP INTERACTIONS ##\n   #######################\n\n➊ def find_object_start_x():\n➋     checker_x = player_x\n➌     while room_map[player_y][checker_x] == 255:\n➍         checker_x -= 1\n➎     return checker_x\n\n➏ def get_item_under_player():\n➐     item_x = find_object_start_x()\n➑     item_player_is_on = room_map[player_y][item_x]\n➒     return item_player_is_on\n\n   --snip--\n```", "```py\n   --snip--\n       item_player_is_on = room_map[player_y][item_x]\n       return item_player_is_on\n\n   def pick_up_object():\n       global room_map\n➊     item_player_is_on = get_item_under_player()\n➋     if item_player_is_on in items_player_may_carry:\n➌         room_map[player_y][player_x] = get_floor_type()\n➍         add_object(item_player_is_on)\n           show_text(\"Now carrying \" + objects[item_player_is_on][3], 0)\n           sounds.pickup.play()\n           time.sleep(0.5)\n➎     else:\n           show_text(\"You can't carry that!\", 0)\n\n➏ def add_object(item): # Adds item to inventory.\n       global selected_item, item_carrying\n➐     in_my_pockets.append(item)\n➑     item_carrying = item\n➒     selected_item = len(in_my_pockets) - 1\n       display_inventory()\n➓     props[item][0] = 0 # Carried objects go into room 0 (off the map).\n\n   def display_inventory():\n       print(in_my_pockets)\n   --snip--\n```", "```py\n   --snip--\n           player_frame = 0\n           start_room()\n           return \n\n➊     if keyboard.g:\n➋         pick_up_object()\n\n     # If the player is standing somewhere they shouldn't, move them back.\n       if room_map[player_y][player_x] not in items_player_may_stand_on: #\\ \n       #           or hazard_map[player_y][player_x] != 0:\n   --snip--\n```", "```py\n[55, 59]\n```", "```py\n   --snip--\n       selected_item = len(in_my_pockets) - 1     \n       display_inventory()\n       props[item][0] = 0 # Carried objects go into room 0 (off the map).\n\n   def display_inventory():\n➊     box = Rect((0, 45), (800, 105))\n       screen.draw.filled_rect(box, BLACK)\n\n➋     if len(in_my_pockets) == 0:\n           return\n\n➌     start_display = (selected_item // 16) * 16\n➍     list_to_show = in_my_pockets[start_display : start_display + 16]\n➎     selected_marker = selected_item % 16\n\n➏     for item_counter in range(len(list_to_show)):\n           item_number = list_to_show[item_counter]\n           image = objects[item_number][0]\n➐         screen.blit(image, (25 + (46 * item_counter), 90))\n\n       box_left = (selected_marker * 46) - 3\n➑     box = Rect((22 + box_left, 85), (40, 40))\n       screen.draw.rect(box, WHITE)\n       item_highlighted = in_my_pockets[selected_item]\n       description = objects[item_highlighted][2]\n➒     screen.draw.text(description, (20, 130), color=\"white\")\n\n   ###############\n   ##   START   ##\n   ###############\n\n   clock.schedule_interval(game_loop, 0.03)\n   generate_map()\n   clock.schedule_interval(adjust_wall_transparency, 0.05)\n➓ clock.schedule_unique(display_inventory, 1)\n```", "```py\n   --snip--\n       if keyboard.g:\n           pick_up_object()\n\n➊     if keyboard.tab and len(in_my_pockets) > 0:\n➋         selected_item += 1\n➌         if selected_item > len(in_my_pockets) - 1:\n               selected_item = 0\n➍         item_carrying = in_my_pockets[selected_item]\n➎         display_inventory()\n\n➏     if keyboard.d and item_carrying:\n➐         drop_object(old_player_y, old_player_x)\n\n➑     if keyboard.space:\n➒         examine_object()\n   --snip--\n```", "```py\nin_my_pockets = items_player_may_carry\n```", "```py\nin_my_pockets = [55, 59, 61, 64, 65, 66, 67] * 3\n```", "```py\nin_my_pockets = [55]\n```", "```py\n   --snip--\n       description = objects[item_highlighted][2]\n       screen.draw.text(description, (20, 130), color=\"white\")\n\n➊ def drop_object(old_y, old_x):\n       global room_map, props\n➋     if room_map[old_y][old_x] in [0, 2, 39]: # places you can drop things\n➌         props[item_carrying][0] = current_room\n           props[item_carrying][1] = old_y\n           props[item_carrying][2] = old_x\n➍         room_map[old_y][old_x] = item_carrying\n           show_text(\"You have dropped \" + objects[item_carrying][3], 0)\n           sounds.drop.play()\n➎         remove_object(item_carrying)\n           time.sleep(0.5)\n➏     else: # This only happens if there is already a prop here\n           show_text(\"You can't drop that there.\", 0)\n           time.sleep(0.5)\n\n   def remove_object(item): # Takes item out of inventory\n       global selected_item, in_my_pockets, item_carrying\n➐     in_my_pockets.remove(item)\n➑     selected_item = selected_item - 1\n➒     if selected_item < 0:\n           selected_item = 0\n➓     if len(in_my_pockets) == 0: # If they're not carrying anything\n           item_carrying = False # Set item_carrying to False\n       else: # Otherwise set it to the new selected item\n           item_carrying = in_my_pockets[selected_item]\n       display_inventory()\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n           item_carrying = in_my_pockets[selected_item]\n       display_inventory()\n\n   def examine_object():\n➊     item_player_is_on = get_item_under_player()\n➋     left_tile_of_item = find_object_start_x()\n➌     if item_player_is_on in [0, 2]: # don't describe the floor\n           return\n➍     description = \"You see: \" + objects[item_player_is_on][2]\n➎     for prop_number, details in props.items():\n           # props = object number: [room number, y, x]\n➏         if details[0] == current_room: # if prop is in the room\n               # If prop is hidden (= at player's location but not on map)\n               if (details[1] == player_y\n                   and details[2] == left_tile_of_item\n                   and room_map[details[1]][details[2]] != prop_number):\n➐                 add_object(prop_number)\n➑                 description = \"You found \" + objects[prop_number][3]\n                   sounds.combine.play()\n➒     show_text(description, 0)\n➓     time.sleep(0.5)\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```"]