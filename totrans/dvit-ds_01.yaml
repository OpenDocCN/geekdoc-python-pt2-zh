- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Exploratory Data Analysis
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 探索性数据分析
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'This is a data science book, so let’s start by diving into some data. This
    is something you should get used to: the first step of every data science problem
    is exploring your data. Looking closely at its minutest details will help you
    understand it better and give you clearer ideas for next steps and more sophisticated
    analyses. It will also help you catch any errors or problems with your data as
    early as possible. These first steps in the data science process are referred
    to as *exploratory data analysis*.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本数据科学书籍，因此让我们从数据入手。这是你应该习惯的做法：每一个数据科学问题的第一步就是探索数据。仔细查看数据的每一个细节将帮助你更好地理解它，并为下一步行动和更复杂的分析提供更清晰的思路。这也将帮助你尽早发现数据中的任何错误或问题。数据科学过程的这几个初步步骤被称为*探索性数据分析*。
- en: We’ll start this first chapter by introducing a business scenario and describing
    how data might be used to better run a business. We’ll talk about reading data
    in Python and checking basic summary statistics. We’ll then introduce some Python
    tools to create plots of data. We’ll go over simple exploratory analyses we can
    perform and talk about the questions they can answer for us. Finally, we’ll close
    with a discussion of how the analyses can help us improve business practices.
    The simple analyses that we’ll do in this chapter are the same types of analyses
    that you can do as a first step of working on any data science problem you ever
    encounter. Let’s begin!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过介绍一个商业场景并描述如何利用数据更好地运营企业来开始这一章。我们将讨论如何在Python中读取数据并检查基本的汇总统计信息。接着，我们将介绍一些Python工具来创建数据图表。我们将探讨可以执行的简单探索性分析，并讨论它们能为我们回答哪些问题。最后，我们将讨论这些分析如何帮助我们改进商业实践。本章中的简单分析正是你在处理任何数据科学问题时可以作为第一步进行的分析。让我们开始吧！
- en: Your First Day as CEO
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你作为首席执行官的第一天
- en: Imagine you receive a job offer to be the CEO of a company in Washington, DC,
    that provides bicycles that people can rent for short periods to ride around the
    city. Even though you don’t have any experience running bike-sharing companies,
    you accept the offer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你收到了一个工作邀请，成为华盛顿特区一家提供自行车租赁服务的公司的首席执行官。这家公司允许人们在短时间内租用自行车在城市中骑行。尽管你没有运营共享单车公司的经验，但你还是接受了这个邀请。
- en: You show up to work on your first day and think about your business goals as
    a CEO. Some of the goals you might think about could be related to issues like
    customer satisfaction, employee morale, brand recognition, market share maximization,
    cost reduction, or revenue growth. How can you decide which of these goals you
    should pursue first, and how should you pursue it? For example, think about increasing
    customer satisfaction. Before focusing on that goal, you’d need to find out whether
    your customers are satisfied and, if not, discover what’s making satisfaction
    suffer and how it can be improved. Or suppose you’re more interested in working
    to increase revenue. You would need to know what your revenue is right now before
    figuring out how it could be increased. In other words, you won’t be able to choose
    your initial focus until you better understand your company.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你第一天到公司上班，开始思考作为首席执行官的商业目标。你可能会考虑的一些目标与客户满意度、员工士气、品牌认知度、市场份额最大化、成本降低或收入增长等问题相关。你如何决定应该首先追求哪些目标，又该如何去实现它们呢？例如，考虑提高客户满意度。在专注于这一目标之前，你需要先弄清楚客户是否满意，如果不满意，需要找出导致满意度下降的原因以及如何改进。或者，假设你更关心的是增加收入。那么，你需要知道现在的收入状况，才能想出如何增加它。换句话说，在你更好地了解你的公司之前，你无法决定最初应该集中精力在哪个方向。
- en: If you want to understand your company, you need data. You might try to look
    at charts and reports that summarize your company’s data, but no prepared report
    can tell you as much as you’ll learn by diving into the data yourself.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解你的公司，你需要数据。你可能会尝试查看一些总结公司数据的图表和报告，但没有任何一份准备好的报告能够告诉你像你亲自深入数据所能学到的东西那么多。
- en: Finding Patterns in Datasets
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在数据集中寻找模式
- en: Let’s look at some data from a real bike-sharing service and imagine that this
    is data from your company. You can download this data from [https://bradfordtuckfield.com/hour.csv](https://bradfordtuckfield.com/hour.csv).
    (This file is in a special format called *.csv*, which we’ll talk more about soon.)
    You can open this file in a spreadsheet editor like Microsoft Excel or LibreOffice
    Calc; you should see something that looks like [Figure 1-1](#figure1-1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些来自实际共享单车服务的数据，并假设这些数据来自你的公司。你可以从[https://bradfordtuckfield.com/hour.csv](https://bradfordtuckfield.com/hour.csv)下载这些数据。（这个文件使用的是一种特殊的格式，叫做*.csv*，我们很快会详细讨论。）你可以在电子表格编辑器（如Microsoft
    Excel或LibreOffice Calc）中打开这个文件；你应该会看到类似[图1-1](#figure1-1)的内容。
- en: '![](image_fi/502888c01/f01001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01001.png)'
- en: 'Figure 1-1: Bike-sharing data, viewed in a spreadsheet'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1：共享单车数据，显示在电子表格中
- en: 'This dataset is no different from many other datasets that you’ve probably
    seen before: a rectangular array of rows and columns. In this dataset, each row
    represents information about a particular hour between midnight on January 1,
    2011, and 11:59 PM on December 31, 2012—more than 17,000 hours total. The rows
    are arranged in order, so the first few rows give us information about the first
    few hours of 2011, and the last few rows relate to the last few hours of 2012.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集和你以前可能见过的许多其他数据集没有什么不同：一个由行和列组成的矩形数组。在这个数据集中，每一行代表了2011年1月1日午夜至2012年12月31日晚上11:59之间某一特定小时的信息——总共有超过17,000个小时。这些行是按顺序排列的，因此前几行提供了2011年最初几个小时的信息，而最后几行则与2012年最后几个小时相关。
- en: Each column contains a particular metric that has been measured for each of
    these hours. For example, the `windspeed` column gives us hourly measurements
    of wind speed at a particular weather-recording station in Washington, DC. Notice
    that this measurement isn’t in familiar units like miles per hour. Instead, the
    measurements have been transformed so that they’re always between 0 and 1; all
    we need to know is that 1 represents a fast wind speed and 0 represents no wind.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每一列包含了这些小时内测量的某个特定指标。例如，`windspeed`列给出了位于华盛顿特区的某个气象记录站的每小时风速测量值。请注意，这个测量值并不是使用我们熟悉的单位（如英里每小时）。相反，测量值已经被转换，使得它们始终介于0和1之间；我们只需要知道1代表高速风，0代表没有风。
- en: If you look at the first few rows, you’ll see that the `windspeed` value is
    `0` for each of these rows, meaning there was no measured wind for the first few
    hours of the bike-sharing service’s existence. On the seventh row (counting the
    heading as the first row), you can see that there was finally some wind, and its
    measured speed was 0.0896\. If you look at the `hr` column, you can see that this
    wind was recorded when `hr` = `5`, or at 5 AM. We know that this row gives us
    information about January 1 because the `dteday` column on the seventh row has
    the value `2011-01-01`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看前几行，你会发现`windspeed`值在这些行中为`0`，这意味着在共享单车服务的最初几个小时里没有测量到风速。在第七行（把标题行算作第一行）中，你可以看到终于有了风，其测量风速为0.0896。如果你查看`hr`列，你会发现这个风速是在`hr`
    = `5`时记录的，即早上5点。我们知道这一行给出的信息是关于2011年1月1日的，因为第七行的`dteday`列的值为`2011-01-01`。
- en: 'Just by looking at a few values in the data, we can already start to tell a
    story, albeit an unexciting one: a still New Year’s night that turned into a slightly
    less still New Year’s morning. If we want to know some stories about the bike-sharing
    company and its performance instead of just the weather, we’ll have to look at
    other, more relevant columns.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅通过查看数据中的几个值，我们已经可以开始讲述一个故事，尽管这个故事并不激动人心：一个宁静的元旦夜晚，逐渐变成了一个稍微不那么安静的元旦早晨。如果我们想了解一些关于共享单车公司及其表现的故事，而不仅仅是天气情况，我们需要查看其他更相关的列。
- en: 'The columns with the most important information are the last three: `casual`,
    `registered`, and `count`. These columns indicate the number of people who used
    your company’s bikes each hour. People who register with your service to get discounts
    and benefits are registered users, and their bike use is recorded in the `registered`
    column. But people can also use your bikes without registering, and their bike
    use is recorded in the `casual` column. The sum of the `casual` and `registered`
    columns is the total count of users during each hour, and it’s recorded in the
    `count` column.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的信息列是最后三列：`casual`、`registered`和`count`。这些列显示了每小时使用你公司自行车的人数。注册并享受折扣和福利的用户是注册用户，他们的自行车使用记录在`registered`列中。但人们也可以不注册就使用你的自行车，他们的自行车使用记录在`casual`列中。`casual`和`registered`两列的总和即为每小时的总用户数，记录在`count`列中。
- en: 'Now that you’re familiar with some of the more relevant columns in this dataset,
    you can learn a great deal just by glancing at their numbers. Looking at the first
    20 or so hours shown in [Figure 1-1](#figure1-1), for example, you can see that
    in most hours, you have more registered users than casual users (higher values
    in the `registered` column than the `casual` column). This is just a simple numeric
    fact, but as the CEO, you should think through its implications for your business.
    Having more registered than casual users might mean that you’re doing well at
    convincing people to register, but it also might mean that using your service
    casually without registering isn’t as easy as it should be. You’ll have to think
    about which segment of customers is more important for you to target: the regular,
    registered users, like daily commuters, or the casual, infrequent users, like
    sightseeing tourists.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你已经熟悉了数据集中一些更相关的列，你可以通过简单地浏览它们的数字学到很多东西。例如，看看[图1-1](#figure1-1)中显示的前20个小时，你可以发现，在大多数小时内，注册用户数量多于临时用户数量（`registered`列的值高于`casual`列的值）。这只是一个简单的数字事实，但作为CEO，你应该思考它对你的业务的含义。注册用户多于临时用户可能意味着你在说服人们注册方面做得很好，但也可能意味着在不注册的情况下随便使用你的服务并不像它应该那么容易。你需要思考一下，哪个客户群体更重要：像日常通勤者这样的常规注册用户，还是像观光游客这样的偶尔使用者。
- en: We can look more closely at the daily patterns of casual and registered users
    to see if we can learn more about them. Let’s look at the hours shown in [Figure
    1-1](#figure1-1) again. We see that casual users are sparse until the afternoon
    of the first day and peak around 1 PM. Registered users are relatively numerous
    even at 1 AM of the first day and peak at 2 PM. The differences between the behavior
    of registered and casual users are small but could be meaningful. For example,
    they could indicate demographic differences between these groups. This, in turn,
    could require using different marketing strategies targeted to each group.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更仔细地观察日常用户和注册用户的行为模式，看看是否能从中学到更多信息。我们再来看一下[图1-1](#figure1-1)中显示的小时数。我们看到，临时用户在第一天的下午之前相对稀少，并在下午1点时达到峰值。注册用户即使在第一天的凌晨1点也相对较多，并在下午2点时达到峰值。注册用户和临时用户之间的行为差异虽小，但可能具有意义。例如，它们可能反映了这两个群体之间的人口统计差异。这反过来可能要求使用不同的营销策略，分别针对每个群体。
- en: 'Consider what we’ve done already: just by looking at a few columns of the first
    24 rows of our data, we’ve already learned several important things about the
    company and started to get some business ideas. Data science has a reputation
    for requiring arcane knowledge about sophisticated math and computer science,
    but simply glancing at a dataset, thinking a little, and applying common sense
    can go a long way toward improving any business scenario.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下我们已经做过的事情：仅仅通过查看前24行数据中的几列，我们就已经了解了关于公司的一些重要信息，并开始获得一些商业想法。数据科学有着需要精通复杂数学和计算机科学的神秘知识的声誉，但实际上，只需稍微浏览一下数据集，稍加思考，并运用常识，就可以在提升任何商业场景方面发挥很大作用。
- en: Using .csv Files to Review and Store Data
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 .csv 文件来回顾和存储数据
- en: Let’s look even more closely at our data. If you open the data file (*hour.csv*)
    in a spreadsheet editor, it will look like [Figure 1-1](#figure1-1). However,
    you can also open this file in a text editor like Notepad (if you’re using Windows)
    or TextEdit (if you’re using macOS) or GNU Emacs or gedit (if you’re using Linux).
    When you open this file in a text editor, it will look like [Figure 1-2](#figure1-2).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地查看我们的数据。如果你在电子表格编辑器中打开数据文件（*hour.csv*），它将像[图1-1](#figure1-1)所示。但是，你也可以在文本编辑器中打开此文件，如Windows中的记事本、macOS中的TextEdit，或Linux中的GNU
    Emacs或gedit。当你在文本编辑器中打开此文件时，它将像[图1-2](#figure1-2)所示。
- en: '![](image_fi/502888c01/f01002.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01002.png)'
- en: 'Figure 1-2: Bike-sharing data viewed as raw text'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-2：共享单车数据以原始文本显示
- en: This raw data (that is, every single text character) constitutes our *hour.csv*
    file, without the alignment of straight columns you’d see in a spreadsheet. Notice
    the many commas. This file’s extension, .*csv*, is short for *comma-separated
    values* because the numeric values in each row are separated from each other by
    commas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原始数据（即每个文本字符）构成了我们的*hour.csv*文件，没有你在电子表格中看到的直线对齐的列。注意到许多逗号。这个文件的扩展名，.*csv*，是*逗号分隔值*的缩写，因为每行中的数值是通过逗号与其他数值分隔的。
- en: 'When you use a spreadsheet editor to open a .*csv* file, the editor will attempt
    to interpret every comma as a boundary between spreadsheet cells so that it can
    display the data in straight, aligned rows and columns. But the data itself is
    not stored that way: it’s just raw text with rows of values, with each value separated
    from other values by commas.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用电子表格编辑器打开.*csv*文件时，编辑器会尝试将每个逗号解释为电子表格单元格之间的边界，以便将数据按直线对齐显示在行和列中。但数据本身并不是那样存储的：它仅仅是原始文本，包含一行行的数值，每个数值之间用逗号分隔。
- en: The simplicity of *.csv* files means that they can be easily created, easily
    opened by many types of programs, and easily changed. That’s why data scientists
    commonly store their data in .*csv* format.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*.csv*文件的简易性意味着它们可以轻松创建、被多种程序打开并轻松修改。这就是为什么数据科学家通常将数据存储为.*csv*格式的原因。'
- en: Displaying Data with Python
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python显示数据
- en: 'Using Python will allow us to do more sophisticated analyses than are possible
    in text editors and spreadsheet programs. It will also allow us to automate our
    processes and run analyses more quickly. We can easily open *.csv* files in Python.
    The following three lines of Python code will read the *hour.csv* file into your
    Python session and display its first five rows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python将使我们能够进行比文本编辑器和电子表格程序更复杂的分析。它还将使我们能够自动化流程，更快速地运行分析。我们可以轻松地在Python中打开.*csv*文件。以下三行Python代码将读取*hour.csv*文件到你的Python会话中并显示其前五行：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ll look more closely at the output of this snippet later. For now, let’s
    look at the code itself. Its purpose is to read and display our data. The second
    line reads the data by using the `read_csv()` method. A *method* is a unit of
    code that performs a single, well-defined function. As its name suggests, `read_csv()`
    is specifically designed to read data that’s stored in *.csv* files. After you
    run this line, the `hour` variable will contain all the data in the *hour.csv*
    file; then you can access this data in Python.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会更仔细地查看这段代码的输出。现在，让我们先看一下代码本身。它的目的是读取并显示我们的数据。第二行通过使用`read_csv()`方法读取数据。*方法*是执行单一、明确功能的代码单元。顾名思义，`read_csv()`专门用于读取存储在.*csv*文件中的数据。运行这一行后，`hour`变量将包含*hour.csv*文件中的所有数据；然后你就可以在Python中访问这些数据。
- en: On the third line, we use the `print()` function to display (print) our data
    onscreen. We could change the third line to `print(hour)` to see the entire dataset
    printed out. But datasets can be very large and hard to read all at once. Therefore,
    we add the `head()` method because it returns only the dataset’s first five rows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三行，我们使用`print()`函数将数据打印到屏幕上。我们可以将第三行改为`print(hour)`，以查看整个数据集的输出。但是数据集可能非常庞大，一次性读取很难理解。因此，我们添加了`head()`方法，因为它仅返回数据集的前五行。
- en: Both `read_csv()` and `head()` can be very useful to us. But they’re not part
    of the *Python standard library*—the standard Python capabilities installed by
    default. They are instead part of a package, a third-party body of code that’s
    optional to install and use in Python scripts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_csv()`和`head()`对我们非常有用。但它们并不是*Python标准库*的一部分——即默认安装的标准Python功能。它们实际上是某个包的一部分，包是第三方的代码库，可以选择安装并在Python脚本中使用。'
- en: 'These two methods are part of a popular package called *pandas*, which contains
    code for working with data. That’s why the first line of the previous snippet
    is `import pandas as pd`: this *imports*, or brings in, the pandas package so
    we can access it in our Python session. When we write `as pd`, this gives the
    package an *alias*, so every time we want to access a pandas capability, we can
    write `pd` instead of the full name pandas. So when we write `pd.read_csv()`,
    we’re accessing the `read_csv()` method that’s part of the pandas package.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法是一个叫做*pandas*的流行包的一部分，里面包含了处理数据的代码。这就是为什么前一个代码片段的第一行是 `import pandas as
    pd`：它*导入*了 pandas 包，这样我们就可以在 Python 会话中访问它。当我们写`as pd`时，这为该包指定了一个*别名*，这样每次我们想访问
    pandas 的功能时，都可以写`pd`，而不是完整的包名 pandas。因此，当我们写`pd.read_csv()`时，我们是在访问 pandas 包中的`read_csv()`方法。
- en: If you get an error when you run `import pandas as pd`, it’s possible that pandas
    is not installed on your computer. (Packages need to be installed before you can
    import them.) To install pandas, or any other Python package, you should use the
    standard Python package installer, called pip. You can find instructions for how
    to install pip and use it to install Python packages like pandas in this book’s
    introduction. Throughout this book, every time you import a package, you should
    make sure that you’ve first installed it on your computer by using pip.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在运行`import pandas as pd`时遇到错误，可能是因为你的计算机上没有安装 pandas。（在你导入包之前，必须先安装它们。）要安装
    pandas 或任何其他 Python 包，你应该使用标准的 Python 包安装工具——pip。你可以在本书的介绍部分找到如何安装 pip 并使用它安装像
    pandas 这样的 Python 包的说明。在本书中，每次导入一个包时，你都应该确保首先使用 pip 在你的计算机上安装它。
- en: 'You might get another error when you run this snippet. One of the most common
    errors will occur when Python isn’t able to find the *hour.csv* file. If that
    happens, Python will print out an error report. The last line of the error report
    might say this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个代码片段时，可能会遇到另一个错误。最常见的错误之一是当 Python 无法找到*hour.csv*文件时。如果发生这种情况，Python 会打印出错误报告。错误报告的最后一行可能会这样写：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Even if you’re not a Python expert, you can surmise what this means: Python
    tried to read the *hour.csv* file but wasn’t able to find it. This can be a frustrating
    error, but one that’s possible to resolve. First, make sure that you’ve downloaded
    the *hour.csv* file and that it has the name *hour.csv* on your computer. The
    filename on your computer needs to exactly match the filename in your Python code.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不是 Python 专家，你也可以推测出这意味着什么：Python 尝试读取*hour.csv*文件，但未能找到它。这可能是一个令人沮丧的错误，但也是可以解决的。首先，确保你已经下载了*hour.csv*文件，并且它在你的计算机上也叫*hour.csv*。计算机上的文件名必须与
    Python 代码中的文件名完全一致。
- en: 'If the name *hour.csv* is spelled correctly in your Python code (entirely with
    lowercase letters), the problem is probably with the file’s location. Remember
    that every file on your computer has a unique filepath that specifies exactly
    where you need to navigate to get to it. A filepath might look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Python 代码中*hour.csv*的名称拼写正确（完全小写字母），那么问题可能出在文件的位置。记住，每个文件在你的计算机上都有一个唯一的文件路径，指定了你需要导航到的位置。一个文件路径可能是这样的：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This filepath is in the format used in the Windows operating system. If you’re
    using Windows, try to make sure that your directories and filenames don’t use
    any special characters (like characters from non-English alphabets) because filepaths
    with special characters can lead to errors. The following is another example of
    a filepath, one that’s in the format used by Unix-style operating systems (including
    macOS and Linux):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件路径是 Windows 操作系统中使用的格式。如果你使用的是 Windows，尽量确保你的目录和文件名不包含任何特殊字符（例如非英语字母表的字符），因为包含特殊字符的文件路径可能导致错误。下面是另一个文件路径的例子，它采用的是
    Unix 风格操作系统（包括 macOS 和 Linux）使用的格式：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You’ll notice that Windows filepaths look different from macOS and Linux filepaths.
    In macOS and Linux, we use forward slashes exclusively, and we start with a slash
    (`/`) instead of a drive name like `C:\`. When you read a file into Python, the
    most straightforward way to avoid an error is to specify the full filepath, as
    follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，Windows 文件路径与 macOS 和 Linux 的文件路径不同。在 macOS 和 Linux 中，我们只使用正斜杠，并且从斜杠（`/`）开始，而不是像
    `C:\` 这样的驱动器名称。当你将文件读入 Python 时，避免错误的最直接方法是指定完整的文件路径，如下所示：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you run this snippet, you can replace the filepath in the `read_csv()`
    method with the filepath on your own computer. When you run the previous snippet,
    with the filepath correctly specified to match the location of *hour.csv* on your
    computer, you should get the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这段代码时，可以将`read_csv()`方法中的文件路径替换为自己计算机上的文件路径。当你运行前面的代码片段，并正确指定文件路径以匹配计算机上*hour.csv*的位置时，你应该会得到以下输出：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This output shows the first five rows of our data. You can see that the data
    is arranged by column, in a way that looks similar to our spreadsheet output.
    Just as in [Figure 1-1](#figure1-1), each row contains numeric values related
    to a particular hour of the bike-sharing company’s history.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出显示了我们数据的前五行。你可以看到数据按列排列，类似于我们的电子表格输出。就像在[图1-1](#figure1-1)中一样，每一行包含与共享单车公司某一特定小时历史相关的数值。
- en: Here, we see ellipses in place of some columns so that it’s easier to read onscreen
    and not too hard to read or copy and paste into text documents. (You might see
    all the columns instead of ellipses—your display will depend on the details of
    how Python and pandas are configured on your computer.) Just as we did when we
    opened the file in a spreadsheet editor, we can start looking at some of these
    numbers to discover stories about the company’s history and get ideas for running
    the business.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到一些列被省略号替代，这样更容易在屏幕上阅读，也不会太难阅读或复制粘贴到文本文件中。（你可能看到的是所有的列，而不是省略号——具体显示取决于Python和pandas在你计算机上的配置情况。）就像我们在电子表格编辑器中打开文件时做的那样，我们可以开始查看这些数字，发现关于公司历史的故事，并获得经营业务的灵感。
- en: Calculating Summary Statistics
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算汇总统计
- en: 'Besides just looking at our data, quantifying its important attributes will
    be helpful. We can start by calculating the mean of one of the columns, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了仅仅查看数据，量化其重要属性会非常有帮助。我们可以从计算某一列的均值开始，如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we access the `count` column of our `hour` dataset by using square brackets
    (`[]`) and the column name (`count`). If you run `print(hour['count'])` alone,
    you’ll see the entire column printed to your screen. But we want just the *mean*
    of the column, not the column itself, so we add the `mean()` method—yet another
    capability provided by pandas. We see that the mean is about 189.46\. This is
    interesting to know from a business perspective; it’s a rough measurement of the
    size of the business over the two years covered by the data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过使用方括号（`[]`）和列名（`count`）来访问`hour`数据集中的`count`列。如果你单独运行`print(hour['count'])`，你会看到整列数据被打印到屏幕上。但我们只想要列的*均值*，而不是整列数据，因此我们添加了`mean()`方法——这是pandas提供的另一个功能。我们看到均值大约是189.46。这从商业角度来看很有趣，它是一个粗略的度量，表示覆盖数据中两年时间段的业务规模。
- en: 'In addition to calculating the mean, we could calculate other important metrics
    as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了计算均值，我们还可以计算其他重要的指标，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we calculate the median of the `count` column by using the `median()`
    method. We also use the `std()` method to calculate a standard deviation of our
    `count` variable. (You may already know that a *standard deviation* is a measurement
    of how far spread out a set of numbers is. It’s useful to help us understand the
    amount of variation that exists in ridership counts between hours in our data.)
    We also calculate the minimum and maximum of the `registered` variable, using
    the `min()` and `max()` methods, respectively. The number of registered users
    ranges from 0 to 886, and this tells us the hourly record you’ve set, and the
    record you’ll need to break if you want your business to do better than it ever
    has before.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过使用`median()`方法计算`count`列的中位数。我们还使用`std()`方法计算`count`变量的标准差。（你可能已经知道，*标准差*是一个测量一组数字分布范围的指标。它有助于我们理解数据中不同时段之间骑行人数的波动程度。）我们还使用`min()`和`max()`方法分别计算`registered`变量的最小值和最大值。注册用户的数量从0到886不等，这告诉我们你设定的小时记录，以及如果你希望你的业务超过历史最佳成绩，你需要打破的记录。
- en: These simple calculations are called *summary statistics*, and they’re useful
    to check for every dataset you ever work with. Checking the summary statistics
    of a dataset can help you better understand your data and, in this case, help
    you better understand your business.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些简单的计算被称为*汇总统计*，它们对于你处理的每一个数据集都很有用。检查数据集的汇总统计有助于你更好地理解数据，在这个案例中，它帮助你更好地了解你的业务。
- en: As simple as these summary statistics might seem, many CEOs, if put on the spot,
    couldn’t even tell you their company’s exact number of customers. Knowing simple
    things like the mean number of customers on any hour of any day can help you understand
    how big your company is and how much room you have to grow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些总结性统计数据看起来很简单，但许多首席执行官如果被问到，可能连自己公司确切的客户数量都无法说出。了解一些简单的事情，比如任何一天的任意时段的平均客户数量，可以帮助你了解公司规模以及公司发展空间。
- en: These summary statistics can also be combined with other information to tell
    us even more. For example, if you look up how much your company charges for one
    hour of bike usage, you can multiply that by the mean of the `count` column to
    get your total revenue over the two years covered by the data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些总结性统计信息还可以与其他信息结合，给我们提供更多的洞察。例如，如果你查找一下公司收费的单小时自行车使用费，你可以将这个费用与`count`列的均值相乘，得出这两年数据覆盖期内的总收入。
- en: 'You can check summary statistics manually by using pandas methods like `mean()`
    and `median()` as we did previously. But another method makes summary statistics
    easy to check:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用像`mean()`和`median()`这样的pandas方法手动检查总结性统计数据，正如我们之前所做的。但是，还有一种方法可以轻松地检查总结性统计数据：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we use the `describe()` method to check the summary statistics of all
    variables in the dataset. The output looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`describe()`方法检查数据集中所有变量的总结性统计数据。输出结果如下：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see that `describe()` provides an entire table to us, and this table
    contains several useful metrics, including the mean, minimum, and maximum of each
    of our variables. The output of `describe()` also contains percentiles. The `25%`
    row, for example, contains the 25th percentile of each variable in the `hour`
    data. We can see that the 25th percentile of the `count` variable is 40, meaning
    that 25 percent of the hours in our dataset had 40 users or fewer, while 75 percent
    had more than 40 users.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，`describe()`为我们提供了一个完整的表格，表格包含了几个有用的指标，包括每个变量的均值、最小值和最大值。`describe()`的输出还包括百分位数。例如，`25%`行包含了`hour`数据中每个变量的第25百分位数。我们可以看到，`count`变量的第25百分位数是40，这意味着我们数据集中25%的时间段内用户数为40人或更少，而75%的时间段内用户数超过40人。
- en: The table that we get from the `describe()` method is also useful to help us
    check for problems with the data. It’s common for datasets to contain major errors
    that can be spotted in the output of `describe()`. For example, if you run the
    `describe()` method on a dataset of people and see that their average age is 200,
    your data has errors. This may sound obvious, but that exact error (average ages
    greater than 200) was recently found in a well-known research paper published
    in a top academic journal—if only those researchers had used `describe()`! You
    should look at the output of `describe()` for every dataset you work with to make
    sure that all the values are at least plausible. If you find average ages over
    200, or other data that doesn’t look credible, you’ll have to locate the problems
    in the data and fix them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`describe()`方法得到的表格也有助于我们检查数据中的问题。数据集通常包含一些重大错误，而这些错误可以通过`describe()`的输出被发现。例如，如果你在一个包含人群的数据显示方法上运行`describe()`，并且看到他们的平均年龄是200岁，那么你的数据就有错误。虽然这看起来显而易见，但在最近一篇发表于顶级学术期刊的知名研究论文中，竟然发现了这个错误（平均年龄大于200岁）——如果那些研究人员使用了`describe()`，他们就能避免这个问题！你应该查看每个数据集的`describe()`输出，确保所有的数值至少是合理的。如果你发现平均年龄超过200岁，或者其他看起来不可信的数据，你就需要定位并修复数据中的问题。
- en: 'At this stage, we can already start to use what we’ve learned from the data
    to get ideas for improving the business. For example, we’ve seen that in the first
    24 hours of our data, rider numbers at night are much lower than rider numbers
    during the day. We’ve also seen a wide variation in the hourly count of users:
    25 percent of hours have fewer than 40 riders, but one hour had 886 riders. As
    the CEO, you may want more hours that have closer to 886 riders and fewer hours
    that have fewer than 40 riders.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经可以开始利用从数据中学到的知识，来为改进业务提供思路。例如，我们看到在数据的前24小时内，夜间的骑行人数远低于白天的骑行人数。我们还看到了每小时用户数量的巨大差异：25%的时段内骑行人数少于40人，但某个时段有886名骑行者。作为CEO，你可能希望更多的时段能接近886名骑行者，而不是有些时段少于40名骑行者。
- en: You could pursue this goal in many ways. For example, you might lower prices
    during the night to get more customers at that time and therefore have fewer hours
    with low ridership. Just through simple exploration, you can continue to learn
    from the data and get ideas for improving the business.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式来实现这个目标。例如，你可能会选择在夜间降低价格，以便吸引更多的顾客，从而减少低乘车率的时间段。通过简单的探索，你可以继续从数据中学习，并获得改善业务的思路。
- en: Analyzing Subsets of Data
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据子集分析
- en: We’ve checked summary statistics related to the full dataset, and then considered
    offering lower prices at night to increase nighttime ridership. If we really want
    to pursue this idea, we should check summary statistics related to just the nighttime.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经查看了与整个数据集相关的摘要统计信息，然后考虑在夜间提供更低的价格以增加夜间的乘车人数。如果我们真的想要追求这个想法，我们应该查看与夜间相关的摘要统计信息。
- en: Nighttime Data
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 夜间数据
- en: 'We can start by using the `loc()` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从使用`loc()`方法开始：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This `loc()` method allows us to specify a subset of our full data. When we
    use `loc()`, we specify the subset we want to select by using square brackets
    with this pattern: `[<``row``>,<``column``>]`. Here, we specify `[3,''count'']`,
    indicating that we want to select row 3 of our data and the `count` column. The
    output we get from this is 13, and if you look at the data in [Figure 1-1](#figure1-1)
    or [Figure 1-2](#figure1-2), you can see that this is correct.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`loc()`方法允许我们指定一个完整数据集的子集。当我们使用`loc()`时，我们通过方括号和以下模式来指定我们想要选择的子集：[<`行`>,<`列`>]。在这里，我们指定了`[3,'count']`，表示我们要选择数据中的第3行和`count`列。我们从中得到的输出是13，如果你查看[图1-1](#figure1-1)或[图1-2](#figure1-2)中的数据，你会发现这个结果是正确的。
- en: One important thing to point out here is that the standard practice in Python,
    as well as in pandas, is to use *zero-based indexing*. We count from zero, so
    if our dataset has four rows, we label them row 0, row 1, row 2, and row 3\. The
    fourth row of your data is called row 3, or we say its index is 3\. Similarly,
    the third row of your data has index 2, the second row has index 1, and the first
    row has index 0\. That’s why when we run `print(hour.loc[3,'count'])`, we get
    13, which is the fourth value stored in the data (the value from the row with
    index 3), instead of 32, which is the third value stored in the data (the value
    from the row with index 2). Zero-based indexing doesn’t feel natural to many people,
    but with experience, you can get used to it and feel comfortable with it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要指出的一个重要事项是，在Python和pandas中，标准的做法是使用*零索引*。我们从零开始计数，因此，如果我们的数据集有四行，我们会标记为第0行、第1行、第2行和第3行。数据的第四行被称为第3行，或者我们说它的索引是3。同样，数据的第三行的索引是2，第二行的索引是1，第一行的索引是0。因此，当我们运行`print(hour.loc[3,'count'])`时，我们会得到13，这是存储在数据中的第四个值（来自索引为3的行），而不是32，后者是存储在数据中的第三个值（来自索引为2的行）。零索引对许多人来说可能不太直观，但通过经验，你可以逐渐习惯并感到舒适。
- en: 'In the previous snippet, we looked at a subset that consists of a single number
    (the `count` from a single row and a single column). But you may want to know
    about a subset that consists of multiple rows or multiple columns. By using a
    colon (`:`), we can specify a range of rows we want to look at:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们查看了一个由单个数字（来自单行单列的`count`）组成的子集。但你可能想要了解一个包含多行或多列的子集。通过使用冒号（`:`），我们可以指定一个我们想查看的行范围：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this snippet, we specify that we want values of the `registered` variable.
    By specifying `2:4` in the square brackets, we indicate that we want all the rows
    between row 2 and row 4, so we get three numbers as output: 27, 10, and 1\. If
    you look at these rows, you can see that these observations are related to the
    hours 2 AM, 3 AM, and 4 AM. Instead of printing out all the data, we’re printing
    out just three rows. Since we are printing out only a subset, we can call this
    process *subsetting*—selecting subsets of data. This can be useful when exploring
    and analyzing data.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，我们指定了想要获取`registered`变量的值。通过在方括号中指定`2:4`，我们表示希望获取第2行到第4行之间的所有数据，因此我们会得到三个数字作为输出：27、10和1。如果你查看这些行，你会发现这些观察数据与凌晨2点、3点和4点相关。我们并没有打印出所有数据，而只是打印了这三行。由于我们只打印了一个子集的数据，我们可以将这个过程称为*子集选择*——选择数据的子集。这在数据探索和分析中非常有用。
- en: 'Instead of looking at a few adjacent rows at a time, let’s look at all the
    nighttime observations in our data. We can use logical conditions with the `loc()`
    method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与其一次查看几行相邻的数据，不如直接查看数据中所有的夜间观测数据。我们可以使用逻辑条件和`loc()`方法来实现：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This snippet uses `loc()` to access a subset of the data, just as we’ve done
    before. However, instead of specifying particular row numbers, it specifies a
    logical condition: `hour[''hr'']<5`, meaning that it will select every row in
    our data for which the value of the `hr` variable is less than 5\. This will give
    us a subset of the data corresponding to the earliest hours of the morning (midnight
    to 4 AM). We can specify multiple conditions for more complex logic. For example,
    we can check specifically for ridership counts on colder early mornings or warmer
    early mornings:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用`loc()`来访问数据的子集，就像我们之前做的那样。不过，它不是指定特定的行号，而是指定一个逻辑条件：`hour['hr']<5`，意思是它会选择数据中`hr`变量值小于5的所有行。这将给我们一个数据子集，代表了清晨的最早时段（午夜至凌晨4点）。我们可以指定多个条件来实现更复杂的逻辑。例如，我们可以特别检查寒冷或温暖的清晨的乘车人数：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we specify multiple logical conditions, separated by an `&` character
    to mean *and*, which indicates that two things must be true simultaneously. The
    first line selects rows that have an `hr` value less than 5 *and* a `temp` value
    less than 0.50\. In this dataset, the `temp` variable records temperatures, but
    not on a Fahrenheit or Celsius scale that we’re familiar with. Instead, it uses
    a special scale that puts all temperatures between 0 and 1, where 0 represents
    a very cold temperature, and 1 represents a very warm temperature. Whenever you’re
    working with data, it’s important to make sure you know exactly which units are
    used for each variable. We specify `hour['temp']<.50` to select hours with colder
    temperatures and `hour['temp']>.50` to select hours with warmer temperatures.
    Together, these lines allow us to compare average ridership on cold early mornings
    with average ridership on warm early mornings.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了多个逻辑条件，用`&`字符连接，表示*与*，这意味着两个条件必须同时为真。第一行选择了`hr`值小于5*并且*`temp`值小于0.50的行。在这个数据集中，`temp`变量记录的是温度，但不是我们熟悉的华氏度或摄氏度，而是使用一个特殊的尺度，将所有温度都表示在0到1之间，其中0表示非常冷，1表示非常暖和。每当你处理数据时，确保你了解每个变量使用的单位非常重要。我们指定`hour['temp']<.50`来选择温度较冷的时段，指定`hour['temp']>.50`来选择温暖的时段。这两行代码让我们能够比较寒冷清晨和温暖清晨的平均乘车人数。
- en: 'We can also use the `|` symbol to signify *or*. This could be useful in an
    example like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`|`符号表示*或*。这在这样的示例中可能会很有用：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This line selects the mean readership count for rows with either high temperatures
    *or* high humidity—both aren’t required. Being able to select these complex conditions
    could help you choose ways to improve ridership during hours with uncomfortable
    weather.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码选择了温度高*或*湿度高的行的平均乘车人数——这两者都不是必须的。能够选择这些复杂条件可能有助于你选择在不舒适的天气条件下提高乘车人数的方法。
- en: Seasonal Data
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 季节性数据
- en: 'A nighttime discount is not the only possible strategy for improving ridership
    and revenue. You could also consider specials during certain seasons or at certain
    times of the year. In our data, the `season` variable records 1 for winter, 2
    for spring, 3 for summer, and 4 for fall. We can use the `groupby()` method to
    find the mean number of users during each of these seasons:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 夜间折扣并不是提高乘车人数和收入的唯一策略。你还可以考虑在某些季节或年份的特定时间推出特价。在我们的数据中，`season`变量记录了冬季为1，春季为2，夏季为3，秋季为4。我们可以使用`groupby()`方法来找到每个季节的平均用户数：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Much of this snippet should look familiar. We’re using `print()` to look at
    metrics related to the `hour` data. We use the `mean()` method, indicating that
    we’re looking at averages. And we use `['count']` to access the `count` column
    of the data. So it’s already clear that we’re going to be looking at average ridership
    counts in our `hour` data.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的大部分内容应该看起来很熟悉。我们使用`print()`查看与`hour`数据相关的指标。我们使用`mean()`方法，表示我们在查看平均值。然后我们使用`['count']`来访问数据中的`count`列。所以很明显，我们将查看`hour`数据中的平均乘车人数。
- en: 'The only new part is `groupby([''season''])`. This is a method that splits
    the data into groups—in this case, one group for each unique value that appears
    in the `season` column. The output shows us the mean ridership counts for each
    individual season:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的新部分是`groupby(['season'])`。这是一个将数据分组的方法——在本例中，它会根据`season`列中出现的每个唯一值来划分组。输出结果显示了每个单独季节的平均乘车人数：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Interpreting this output is straightforward: in the first season (winter),
    average ridership per hour is about 111.115; in the second season (spring), average
    ridership per hour is about 208.344; and so on. A definite seasonal pattern exists:
    higher ridership in the spring and summer seasons, and lower ridership in the
    fall and winter. The `groupby()` method can also group on multiple columns, as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 解释这个输出很简单：在第一季（冬季），每小时的平均乘客量大约为111.115；在第二季（春季），每小时的平均乘客量大约为208.344；依此类推。可以看出一个明显的季节性模式：春季和夏季的乘客量较高，而秋季和冬季的乘客量较低。`groupby()`方法也可以对多个列进行分组，具体如下：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result is the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, we specify two columns to group on: `season` and `holiday`. This splits
    our hourly data into the four individual seasons, and then splits each season
    into holidays (denoted by 1s) and non-holidays (denoted by 0s). It shows us average
    ridership counts on holidays and non-holidays separately for each season. The
    result is that we can see the differences between holidays and non-holidays seasonally.
    It seems like holidays in the colder seasons have ridership that’s lower than
    that on non-holidays, and holidays in the warmer seasons have ridership that’s
    roughly equal to that on non-holidays. Understanding these differences can help
    you make decisions about how to run the business and might give you ideas about
    strategies you can pursue during different seasons or different holidays.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了两个列进行分组：`season`和`holiday`。这将我们的每小时数据分成四个单独的季节，然后将每个季节分为节假日（由1表示）和非节假日（由0表示）。它分别展示了每个季节中节假日和非节假日的平均乘客量。结果是，我们可以看到节假日和非节假日之间的季节性差异。看起来寒冷季节的节假日乘客量低于非节假日，而温暖季节的节假日乘客量与非节假日相当。理解这些差异可以帮助你做出关于如何经营业务的决策，并可能为你提供关于在不同季节或不同节假日采取的策略的想法。
- en: 'This dataset is big, and there’s no end to the different ways it can be examined.
    We’ve begun to look at a few subsets and started to get a few ideas. You should
    do much more: examine subsets related to all the columns and explore many perspectives
    on the data. Even without doing advanced statistics and machine learning, you
    can learn a great deal and get many useful ideas.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集很大，而且可以通过各种不同的方式进行分析。我们已经开始查看几个子集，并且开始得到一些想法。你应该做得更多：检查与所有列相关的子集，并从多个角度探索数据。即使不进行高级统计和机器学习，你仍然可以学到很多并得到许多有用的想法。
- en: Visualizing Data with Matplotlib
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Matplotlib可视化数据
- en: 'Summary statistics are valuable and useful for exploration. However, there’s
    an extremely important part of exploratory data analysis that we haven’t done
    yet: *plotting*, or visualizing the data in organized charts.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 总结统计数据对于探索非常有价值和有用。然而，探索性数据分析中有一个非常重要的部分我们还没有做：*绘图*，或者说是将数据可视化成有组织的图表。
- en: Drawing and Displaying a Simple Plot
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制并显示一个简单的图表
- en: 'You should plot your data early and often every time you’re doing data analysis.
    We’ll use a popular plotting package called *Matplotlib*. We can draw a simple
    plot of our data as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在每次进行数据分析时，尽早并频繁地绘制数据。我们将使用一个流行的绘图包，叫做*Matplotlib*。我们可以通过以下方式绘制一个简单的图表：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we import the Matplotlib package, giving it the alias `plt`. Next, we
    create a figure, called `fig`, and an axis, called `ax`. The figure, `fig`, will
    contain all the information about whatever plot or group of plots we draw. The
    axis, `ax`, will give us access to useful methods for actually drawing plots.
    The `subplots()` method creates both of these for us, and inside that method,
    we can specify a figure size (`figsize`). In this case, we specify a figure size
    of `(10,6)`, meaning that our figure will have a width of 10 inches and a height
    of 6 inches.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了Matplotlib包，并给它起了个别名`plt`。接下来，我们创建一个图形，称为`fig`，以及一个坐标轴，称为`ax`。图形`fig`将包含我们绘制的任何图表或图组的所有信息。坐标轴`ax`将为我们提供用于实际绘制图表的有用方法。`subplots()`方法为我们创建了这两个对象，并且在这个方法中，我们可以指定图形的大小（`figsize`）。在这种情况下，我们指定了一个图形大小为`(10,6)`，意味着我们的图形宽度为10英寸，高度为6英寸。
- en: Next, we draw our plot by using the `scatter()` method. In `scatter()`, we specify
    `x=hour['instant']` so the x-axis will show the `instant` variable in our `hour`
    data. We specify `y=hour['count']` so the y-axis will show the `count` variable.
    Finally, we use `plt.show()` to display this plot onscreen. This snippet creates
    a plot that should look like [Figure 1-3](#figure1-3).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过使用`scatter()`方法绘制图表。在`scatter()`中，我们指定`x=hour['instant']`，这样x轴将显示我们`hour`数据中的`instant`变量。我们指定`y=hour['count']`，这样y轴将显示`count`变量。最后，我们使用`plt.show()`来显示这个图表。这个代码片段生成的图表应该类似于[图
    1-3](#figure1-3)。
- en: '![](image_fi/502888c01/f01003.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01003.png)'
- en: 'Figure 1-3: Ridership counts every hour for two years'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-3：两年内每小时的乘客数
- en: In this plot, you can see that every single point is an hour whose information
    is recorded in the dataset. The first hour (the beginning of 2011) is the one
    that appears at the farthest left of the plot. The last hour (the end of 2012)
    is the one that appears at the farthest right, and all other hours proceed in
    order in between.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，你可以看到每个点代表了数据集中记录的每一小时。第一小时（2011年的开始）出现在图表的最左边。最后一小时（2012年的结束）出现在图表的最右边，所有其他小时按顺序排列。
- en: This plot, known as a *scatterplot*, is a good first plot to draw because it
    shows every observation in the data; it also makes relationships easy to visually
    identify. In this case, we can see a full representation of the seasonal variation
    that our `groupby()` statement previously gave us a hint about. We can also see
    the general growth of ridership over time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表，称为*散点图*，是绘制的第一个好图表，因为它显示了数据中的每个观察值；它还使得关系容易通过视觉识别。在这种情况下，我们可以看到`groupby()`语句之前提示的季节性变化的完整表示。我们还可以看到随着时间推移，乘客数量的整体增长。
- en: Clarifying Plots with Titles and Labels
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用标题和标签来澄清图表
- en: 'The plot in [Figure 1-3](#figure1-3) shows the data, but it’s not as clearly
    presented as it should be. We can add titles and labels to our plot as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-3](#figure1-3)中的图表展示了数据，但它的呈现方式不够清晰。我们可以通过如下方式为图表添加标题和标签：'
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This snippet uses `xlabel()` to add a label to our x-axis, `ylabel()` to add
    a label to our y-axis, and `title()` to add a title to the plot. You can specify
    any text in these methods to get any labels you like. The output should look like
    [Figure 1-4](#figure1-4).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段使用了`xlabel()`来为x轴添加标签，`ylabel()`来为y轴添加标签，`title()`来为图表添加标题。你可以在这些方法中指定任何文本，以获得你想要的标签。输出应该类似于[图
    1-4](#figure1-4)。
- en: '![](image_fi/502888c01/f01004.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01004.png)'
- en: 'Figure 1-4: Ridership counts by hour, with axis labels and a title'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-4：按小时划分的乘客数，带有轴标签和标题
- en: Our dataset is very large, and looking at all the data at once is hard. Let’s
    look at how to plot smaller subsets of our data.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据集非常大，一次查看所有数据很困难。让我们看看如何绘制数据的较小子集。
- en: Plotting Subsets of Data
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制数据子集
- en: 'We can use the subsetting we did previously to plot only a subset of the data:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用之前做的子集来仅绘制数据的一个子集：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we define a new variable called `hour_first48`. This variable contains
    data related to row 0 through row 48 of the original data, corresponding roughly
    to the first two full days in the data.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个新的变量`hour_first48`。这个变量包含了与原始数据中第0行到第48行相关的数据，大致对应数据中的前两天。
- en: 'Notice that we select this subset by writing `hour.loc[0:48,:]`. This is the
    same `loc()` method that we’ve used before. We use `0:48` to specify that we want
    the rows with indexes up to 48, but we don’t specify any columns—we just write
    a colon (`:`) where we would normally specify column names to select. This is
    a useful shortcut: a colon alone placed there tells pandas that we want to select
    every column of the dataset, so we don’t need to write out each column name individually.
    The plot of this subset looks like [Figure 1-5](#figure1-5).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们通过写`hour.loc[0:48,:]`来选择这个子集。这是我们之前使用过的相同`loc()`方法。我们使用`0:48`来指定我们希望选择索引最大为48的行，但我们没有指定任何列——我们只是写了一个冒号（`:`），在我们通常指定列名的地方进行选择。这是一个有用的快捷方式：仅用冒号告诉pandas我们想选择数据集的所有列，因此不需要逐一写出每个列名。这个子集的图表看起来像[图
    1-5](#figure1-5)。
- en: '![](image_fi/502888c01/f01005.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01005.png)'
- en: 'Figure 1-5: Ridership counts by hour for the first two days'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-5：前两天按小时划分的乘客数
- en: 'By plotting only two days instead of two years of data, we avoid the problem
    of points overlapping and hiding one another. We can see every observation much
    more clearly. When you have a big dataset, it’s a good idea to do both: plot the
    entire dataset at once (to understand the general, overall patterns) as well as
    plot smaller subsets of the data (to understand individual observations and smaller-scale
    patterns). In this case, we can see patterns within each day of the data in addition
    to the longer-term seasonal patterns within its years.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过只绘制两天的数据，而不是两年的数据，我们避免了点重叠和相互遮挡的问题。我们可以更清楚地看到每个观测值。当你有一个大数据集时，最好同时做两件事：一次性绘制整个数据集（以了解整体的模式），同时也绘制数据的较小子集（以了解单个观测值和小范围的模式）。在这种情况下，我们不仅能看到每天的数据模式，还能看到跨年份的长期季节性模式。
- en: Testing Different Plot Types
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试不同的图类型
- en: 'We have many ways to change the appearance of a plot. Our `scatter()` function
    contains parameters that we can adjust to get different looks:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有多种方法可以改变图的外观。我们的`scatter()`函数包含一些参数，我们可以调整这些参数来获得不同的效果：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we use the `c` argument to specify a color for our plot points (red).
    We also specify a `marker` argument to change the *marker style*, or the shape
    of the points that are drawn. By specifying `+` for our marker argument, we get
    plot points that look like little pluses instead of little dots. [Figure 1-6](#figure1-6)
    shows the output.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`c`参数来指定图中点的颜色（红色）。我们还指定了一个`marker`参数来改变*标记样式*，即绘制的点的形状。通过将`+`指定为标记参数，我们得到的图点看起来像小加号，而不是小圆点。[图
    1-6](#figure1-6)展示了输出结果。
- en: '![](image_fi/502888c01/f01006.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01006.png)'
- en: 'Figure 1-6: Ridership counts, with different style choices'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-6：骑行人数统计，包含不同的样式选择
- en: This book isn’t printed in color, so you will not see the specified red color
    displayed on this page. But you should see red points if you run this code at
    home.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书没有彩色印刷，因此你在本页上看不到指定的红色。但如果你在家运行这段代码，应该能看到红色的点。
- en: 'Scatterplots are not the only type of plot we can draw. Let’s try a line plot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图并不是我们能绘制的唯一类型的图。让我们尝试绘制一条线图：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, we use `ax.plot()` instead of `ax.scatter()` to draw the plot.
    The `ax.plot()` method allows us to draw a line plot. Here, we call `ax.plot()`
    twice to draw two lines on a single plot. This enables us to compare casual and
    registered users ([Figure 1-7](#figure1-7)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用`ax.plot()`而不是`ax.scatter()`来绘制图形。`ax.plot()`方法允许我们绘制线图。在这里，我们调用`ax.plot()`两次，在同一张图上绘制两条线。这样我们就能比较临时用户和注册用户（[图
    1-7](#figure1-7)）。
- en: '![](image_fi/502888c01/f01007.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01007.png)'
- en: 'Figure 1-7: A line plot showing casual and registered riders over the first
    two days'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-7：显示临时用户和注册用户在前两天的线图
- en: This plot shows that the number of casual riders is almost always lower than
    the number of registered riders. The plot’s legend indicates different colors
    for casual and registered users as well as the different line styles (solid for
    casual riders, dashed for registered riders). Run this code at home to see the
    colors and their contrast more clearly.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图显示了临时骑行者的数量几乎总是低于注册骑行者的数量。图例显示了临时和注册用户的不同颜色，以及不同的线条样式（临时骑行者为实线，注册骑行者为虚线）。在家运行这段代码，你可以更清晰地看到颜色和它们的对比。
- en: 'We can also try a different kind of plot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以尝试另一种类型的图：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This time, we import a package called *seaborn*. This package is based on Matplotlib,
    so it includes all the capabilities of Matplotlib, plus more features that help
    create beautiful, informative plots quickly. We use seaborn’s `boxplot()` method
    to create a new kind of plot: a *box plot*. [Figure 1-8](#figure1-8) shows the
    box plots that this snippet creates.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们导入了一个名为*seaborn*的包。这个包基于Matplotlib，因此它包含了Matplotlib的所有功能，此外还提供了更多帮助快速创建美观、信息丰富的图形的特性。我们使用seaborn的`boxplot()`方法来创建一种新的图形：*箱线图*。[图
    1-8](#figure1-8)展示了这段代码生成的箱线图。
- en: '![](image_fi/502888c01/f01008.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01008.png)'
- en: 'Figure 1-8: Box plots showing ridership counts grouped by the hour of the day'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-8：按时间段分组的骑行人数箱线图
- en: You can see 24 vertical box plots, drawn parallel to one another—each one representing
    information about a particular hour of the day. A box plot is a simple kind of
    plot, but one that gives a great deal of information. In a box plot, the upper
    and lower horizontal boundaries of each rectangle represent the 75th and 25th
    percentiles of the plotted data, respectively. The horizontal line inside the
    rectangle represents the median (or 50th percentile). The vertical lines extending
    from the top and bottom of each rectangle represent the full range of all observations
    that are not considered outliers. The individually drawn points beyond the ranges
    of the vertical lines are regarded as outliers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 24 个垂直箱形图，它们平行绘制——每一个都代表一天中特定小时的信息。箱形图是一种简单的图表，但它提供了大量的信息。在箱形图中，每个矩形的上边界和下边界分别代表所绘数据的第
    75 百分位数和第 25 百分位数。矩形内的水平线表示中位数（或第 50 百分位数）。从每个矩形的顶部和底部延伸出的垂直线表示所有非异常值观察数据的完整范围。超出垂直线范围的独立绘制点被视为异常值。
- en: Seeing the box plots together in [Figure 1-8](#figure1-8) enables you to compare
    ridership at different times of day. For example, the median ridership during
    hour 5 (around 5 AM) is quite low, but the median ridership at hour 6 (around
    6 AM) is much higher. At hour 7 (around 7 AM), the median ridership is higher
    still. High ridership occurs again around 5 PM and 6 PM; maybe these peaks indicate
    that many of your customers use your bikes to commute to and from work.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 1-8](#figure1-8)中一起查看这些箱形图可以让你比较不同时间段的乘车人数。例如，第 5 小时（大约早上 5 点）的中位数乘车人数非常低，而第
    6 小时（大约早上 6 点）的中位数乘车人数要高得多。在第 7 小时（大约早上 7 点），中位数乘车人数更高。乘车人数在下午 5 点和下午 6 点再次出现高峰；也许这些高峰表明许多客户使用自行车上下班。
- en: 'As you might expect, we can draw many more types of plots. Another useful one
    is a *histogram*, which you can create as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所预期的那样，我们可以绘制更多类型的图表。另一个有用的图表是*直方图*，你可以按如下方式创建：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This snippet uses the `hist()` command to draw a histogram. [Figure 1-9](#figure1-9)
    shows the output.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段使用`hist()`命令绘制直方图。[图 1-9](#figure1-9)展示了输出结果。
- en: '![](image_fi/502888c01/f01009.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01009.png)'
- en: 'Figure 1-9: A histogram showing the frequency of each ridership count'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-9：显示每小时乘车人数频率的直方图
- en: 'In a histogram, the height of every bar represents frequency. In this case,
    our histogram shows the frequencies of every ridership count. For example, if
    you look at the x-axis around 800, you’ll see bars that have a height close to
    0\. This means that very few hours in our dataset had around 800 riders. By contrast,
    at about 200 on the x-axis, you see higher bars, with height closer to 500\. This
    indicates that for close to 500 individual hours in our data, ridership was close
    to 200\. The pattern we see in this histogram is a common one for businesses:
    many hours have few customers, and few hours have many customers.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在直方图中，每个柱形的高度表示频率。在这个例子中，我们的直方图展示了每个乘车人数的频率。例如，如果你查看 x 轴在 800 附近的位置，你会看到高度接近
    0 的柱形。这意味着在我们的数据集中，只有极少数小时的乘车人数接近 800。相比之下，在 x 轴约 200 的位置，你会看到更高的柱形，接近 500 的高度。这表明在我们数据中的大约
    500 个小时，乘车人数接近 200。我们在这个直方图中看到的模式是企业常见的模式：很多小时的客户很少，只有少数小时的客户很多。
- en: 'You could use this kind of histogram to think about the capacity of your company.
    For example, maybe your company has 1,000 bicycles available to rent today. You
    think that it might be good to save money by selling 200 of your bicycles—that
    way, you’ll earn some extra cash and won’t have to worry about maintenance and
    storage of superfluous bikes. This would leave you with 800 bicycles available
    to rent. By looking at the histogram, you can see exactly how much you would expect
    that change to impact your company: since only a small fraction of hours have
    demand higher than 800, this should have a relatively small impact on your capacity.
    You could look at the histogram to decide exactly how many of your bicycles you
    feel comfortable selling.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这种直方图来考虑公司容量。例如，也许你的公司今天有 1,000 辆自行车可供租赁。你认为出售 200 辆自行车可能是一个节省开支的好方法——这样，你将赚取一些额外的现金，同时不必担心多余自行车的维护和存储。这将使你剩下
    800 辆可供租赁。通过查看直方图，你可以清楚地看到这种变化对公司容量的影响：由于只有少数小时的需求超过 800，这对你的容量影响应该相对较小。你可以根据直方图来决定到底出售多少辆自行车最为合适。
- en: 'Another type of plot, a *pair plot*, draws every possible scatterplot for every
    possible pair of variables in your data:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的图表是*配对图*，它为数据中每一对可能的变量绘制所有可能的散点图：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, we create a `thevariables` variable, which is a list of three variables
    we’ll plot. (We’re plotting only three instead of all variables because of the
    limited space in the book.) We also create `hour_first100`, which is a subset
    of our full data containing only the rows with index 100 or less in the `hour`
    dataset. Again, the seaborn package helps us by providing the `pairplot()` method
    that we can call to create our plot. The result, [Figure 1-10](#figure1-10), is
    a collection of plots, including both scatterplots and histograms.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个`thevariables`变量，它是我们将要绘制的三个变量的列表。（我们仅绘制三个变量而不是所有变量，因为书中的空间有限。）我们还创建了`hour_first100`，它是我们完整数据集的一个子集，只包含`hour`数据集中索引为100或更小的行。同样，seaborn包通过提供`pairplot()`方法帮助我们创建图表。结果，[图
    1-10](#figure1-10)是一个包含散点图和直方图的图表集合。
- en: '![](image_fi/502888c01/f01010.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01010.png)'
- en: 'Figure 1-10: Pair plots showing relationships among selected variables'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-10：显示所选变量之间关系的配对图
- en: The pair plot shows scatterplots for every possible combination of variables
    in the subset of the data we selected, as well as histograms for the individual
    variables we selected. A lot of data is plotted here, but the scatterplots don’t
    show much apparent relationship among the variables; these relationships appear
    to be essentially random.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 配对图显示了我们选择的数据子集中的每一对可能组合的散点图，以及我们选择的单个变量的直方图。这里绘制了大量的数据，但散点图并未显示变量之间明显的关系；这些关系似乎基本上是随机的。
- en: Sometimes when we draw pair plots, we see more than just randomness. Instead,
    we can see clear relationships among variables. For example, if we had a measurement
    of snowfall in our data, we would see that as temperature goes up, snowfall levels
    go down, and vice versa. This type of clear relationship between variables is
    called *correlation*, and we’ll explore it in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，当我们绘制配对图时，我们看到的不仅仅是随机性。相反，我们可以看到变量之间的清晰关系。例如，如果我们在数据中有降雪量的测量值，我们会看到，随着温度升高，降雪量降低，反之亦然。变量之间这种清晰的关系被称为*相关性*，我们将在下一节探讨它。
- en: Exploring Correlations
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索相关性
- en: 'Two variables are *correlated* if a change in one variable tends to occur together
    with a change in the other variable. We say that two variables are positively
    correlated if they change *together*: one variable tends to go up when the other
    goes up, and one variable tends to go down when the other goes down. We can find
    innumerable examples of positive correlations in the world. The number of domestic
    house cats in a city is positively correlated with the amount of cat food purchased
    in that city. If one of these variables is high, the other one also tends to be
    high, and if one of these variables is low, the other one also tends to be low.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个变量的变化倾向于一起发生，我们说这两个变量是*相关的*。如果它们一起变化，我们说这两个变量是正相关的：一个变量在另一个变量上升时也倾向于上升，一个变量在另一个变量下降时也倾向于下降。在现实世界中，我们可以找到无数正相关的例子。例如，一个城市中家猫的数量与该城市购买猫粮的数量是正相关的。如果其中一个变量很高，另一个也倾向于很高；如果其中一个变量很低，另一个也倾向于很低。
- en: 'We can also talk about negative correlations: two variables are negatively
    correlated if one tends to go up when the other goes down, or if one tends to
    go down when the other goes up. Negative correlations are also common in the world.
    For example, the average temperature of a city is negatively correlated with the
    average amount of money a typical resident spends on thick winter coats every
    year. In cities where one of these numbers is high, the other tends to be low,
    and in cities where one of these numbers is low, the other tends to be high.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以讨论负相关性：如果一个变量倾向于在另一个变量下降时上升，或者一个变量倾向于在另一个变量上升时下降，那么这两个变量是负相关的。负相关性在现实中也很常见。例如，一个城市的平均气温与该城市典型居民每年在厚冬季外套上的平均花费是负相关的。在一个城市中，如果其中一个数值很高，另一个数值通常很低；如果其中一个数值很低，另一个数值通常很高。
- en: In the world of data science, it’s extremely important to find and understand
    correlations, both positive and negative ones. Your performance as CEO will improve
    if you can find and understand these correlations. For example, you might find
    that the count of riders is positively correlated with the temperature. If so,
    this means that ridership tends to be low when temperatures are low. You could
    even consider selling some of your bikes during seasons with low ridership to
    generate cash flow instead of letting many of your bikes sit idle. Exactly what
    you choose to do will depend on many other details of your situation, but understanding
    the data on a deep level will help you make the best possible business decisions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学的世界里，找到并理解相关性（无论是正相关还是负相关）是至关重要的。如果你能发现并理解这些相关性，作为 CEO 的表现将会提升。例如，你可能会发现骑行人数与温度之间存在正相关关系。如果是这样，意味着温度较低时骑行人数往往较少。你甚至可以考虑在骑行人数较少的季节出售一些自行车，以产生现金流，而不是让许多自行车闲置。你最终选择做什么将取决于你情况的许多其他细节，但深入理解数据将帮助你做出最佳的商业决策。
- en: Calculating Correlations
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算相关性
- en: 'We can calculate correlations in Python:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Python 中计算相关性：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, we use the `corr()` method, yet another capability provided by pandas.
    The `corr()` method calculates a number called the *correlation coefficient*.
    We can calculate many types of correlation coefficients, but by default, `corr()`
    calculates the Pearson correlation coefficient. This is the most commonly used
    correlation coefficient, so whenever we refer to a correlation coefficient in
    this book, we’ll be referring to the Pearson correlation coefficient.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `corr()` 方法，这是 pandas 提供的又一功能。`corr()` 方法计算一个被称为 *相关系数* 的数字。我们可以计算多种类型的相关系数，但默认情况下，`corr()`
    计算的是皮尔逊相关系数。这是最常用的相关系数，因此在本书中提到的相关系数，指的通常都是皮尔逊相关系数。
- en: The Pearson correlation coefficient is a number that’s always between –1 and
    1, and it’s often named with the variable *r*. It’s meant to describe the relationship
    between two variables; its sign describes the type of correlation, and its size
    describes the strength of the correlation. If the correlation coefficient *r*
    is a positive number, our two variables are positively correlated, and if *r*
    is a negative number, they’re negatively correlated. If the correlation coefficient
    is 0, or very close to 0, we say that the variables are *uncorrelated*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 皮尔逊相关系数是一个介于 –1 和 1 之间的数字，通常用变量 *r* 来表示。它用于描述两个变量之间的关系；其符号表示相关类型，大小表示相关性的强度。如果相关系数
    *r* 是正数，说明这两个变量是正相关的；如果 *r* 是负数，说明它们是负相关的。如果相关系数为 0，或者接近 0，我们说这两个变量是 *不相关的*。
- en: In this case, the first line of this snippet calculates the correlation coefficient
    describing the relationship between the `casual` and `registered` variables in
    our data. For these variables, *r* is about 0.51, a positive number that indicates
    a positive correlation.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，这段代码的第一行计算了描述 `casual` 和 `registered` 变量之间关系的相关系数。对于这些变量，*r* 大约是 0.51，这是一个正数，表示正相关。
- en: Understanding Strong vs. Weak Correlations
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解强相关与弱相关
- en: In addition to noticing whether correlation coefficients are positive, negative,
    or 0, we pay attention to their exact *magnitude*, or size. If a correlation coefficient
    is large (far from 0 and close to either 1 or –1), we often say that the correlation
    is *strong*. Take a look at [Figure 1-11](#figure1-11) to see examples of correlations.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 除了注意相关系数是正数、负数还是 0，我们还要关注它们的确切 *大小*。如果相关系数很大（远离 0，接近 1 或 –1），我们通常说相关性是 *强* 的。查看
    [图 1-11](#figure1-11) 可以看到相关性的示例。
- en: '![](image_fi/502888c01/f01011.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502888c01/f01011.png)'
- en: 'Figure 1-11: Positively correlated variables'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-11：正相关变量
- en: 'Here, you can see two plots. The first plot shows the relationship between
    Fahrenheit and Celsius temperatures. You can see that Fahrenheit and Celsius are
    positively correlated: when one goes up, the other goes up, and vice versa. The
    second plot shows the relationship between casual and registered ridership in
    your company. Again, we see a positive correlation: when casual ridership goes
    up, registered ridership tends to go up as well, and vice versa.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'The two correlations in [Figure 1-11](#figure1-11) are both positive, but we
    can see a qualitative difference between them. The relationship between Fahrenheit
    and Celsius is deterministic: knowing the Fahrenheit temperature allows us to
    know the Celsius temperature exactly, with no uncertainty or guesswork. This kind
    of deterministic positive correlation that appears as a straight line on a plot
    is also called a *perfect* correlation, and when we measure a correlation coefficient
    for a perfect positive correlation, we’ll find that *r* = 1.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, the relationship between casual and registered ridership is *not*
    deterministic. Often a higher number of casual riders corresponds to a higher
    number of registered riders. But sometimes it doesn’t; we can’t perfectly predict
    one variable by using the other one. When two variables are correlated but don’t
    have a deterministic relationship, we say that the relationship between the two
    variables has “noise,” or randomness.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '*Randomness* is hard to define precisely, but you can think of it as unpredictability.
    When you know a Fahrenheit temperature, you can predict the Celsius temperature
    with perfect accuracy. By contrast, when you know the casual ridership, you can
    predict the registered ridership, but your prediction may not be perfectly accurate.
    When unpredictability like this exists, the two variables will have a correlation
    coefficient that’s less than 1\. In this case, we can calculate the correlation
    of casual and registered ridership and find that *r* = 0.51.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the size of the correlation coefficient as a measure of the
    amount of randomness in the relationship between two variables. A larger correlation
    coefficient corresponds to less randomness (closer to a deterministic relationship,
    like the relationship between Fahrenheit and Celsius). A smaller correlation coefficient
    corresponds to more randomness and less predictability. You can think of a 0 correlation
    coefficient, indicating no relationship at all between variables, as an indication
    of pure randomness, or pure noise.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: You can look at [Figure 1-12](#figure1-12) to see examples of negative correlations
    of different magnitudes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502888c01/f01012a.png)![](image_fi/502888c01/f01012.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-12: Negatively correlated variables'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we see the same ideas as in [Figure 1-11](#figure1-11). The first plot
    shows a *perfect* negative correlation: this time, the deterministic relationship
    between pressure and volume. The correlation here is exactly *r* = –1, indicating
    that no randomness occurs in the relationship between the variables; each variable
    is perfectly predictable by using the other one.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到与[图 1-11](#figure1-11)中相同的思想。第一个图显示了一个*完美*的负相关性：这次是压力和体积之间的确定性关系。这里的相关性正好是
    *r* = –1，表明变量之间的关系没有任何随机性；每个变量都可以通过另一个变量完美预测。
- en: 'The second plot shows the relationship between temperature and humidity in
    our data. These two variables also have a negative correlation, but with a much
    smaller coefficient: *r* is about –0.07\. Just as we did with the positive correlations
    in [Figure 1-11](#figure1-11), we can interpret these correlation coefficients
    as measurements of randomness: a correlation coefficient with a larger magnitude
    (meaning that it’s closer to 1 or –1) is a correlation that’s highly predictable
    and not very random, while a coefficient with a smaller magnitude (closer to 0)
    is a correlation that has more randomness. When we see *r* = –0.07 here, we interpret
    that to mean that temperature and humidity are negatively correlated, but their
    correlation is very weak—it’s not far from pure randomness.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个图显示了我们数据中温度和湿度之间的关系。这两个变量也有负相关性，但相关系数要小得多：*r* 大约为 –0.07。就像我们在[图 1-11](#figure1-11)中分析正相关时所做的那样，我们可以将这些相关系数解释为随机性的度量：一个较大幅度的相关系数（意味着它更接近
    1 或 –1）是一个高度可预测的相关性，随机性较小，而一个幅度较小的系数（更接近 0）则表示该相关性有更多的随机性。当我们看到 *r* = –0.07 时，我们解释为温度和湿度之间存在负相关关系，但它们的相关性非常弱——几乎接近纯随机性。
- en: 'One important thing to remember when you look at correlations is a famous saying:
    “Correlation does not imply causation.” When we observe strong correlations, all
    we can be certain of is that two variables tend to change together; we can’t be
    certain that one causes the other.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当你观察相关性时，有一件重要的事情需要记住，那就是一句名言：“相关性并不意味着因果关系。” 当我们观察到强烈的相关性时，唯一可以确定的是两个变量倾向于一起变化；我们不能确定其中一个变量是导致另一个变量变化的原因。
- en: For example, suppose we study Silicon Valley startups and find that their monthly
    revenues are correlated with the number of Ping-Pong tables they purchase. We
    may hastily conclude from this correlation that Ping-Pong tables are causing revenue
    to increase; maybe the relaxation and camaraderie that they facilitate leads to
    higher productivity, or maybe the fun atmosphere they create leads to better retention
    and hiring success.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们研究硅谷的创业公司，发现它们的月收入与购买的乒乓球桌数量之间存在相关性。我们可能会仓促地得出结论，认为乒乓球桌导致了收入的增加；也许它们所促进的放松和团队精神提高了生产力，或者它们创造的有趣氛围提高了员工的留存率和招聘成功率。
- en: On the other hand, these ideas may be completely mistaken, and maybe the causation
    flows in the opposite direction; companies that have success (totally independent
    of their Ping-Pong tables) have higher revenues, and since their budget has suddenly
    increased, they use some of their new extra money for a fun purchase like a Ping-Pong
    table. In that case, revenue would be causing Ping-Pong table purchases, not the
    other way around.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，这些观点可能完全错误，也许因果关系是反向的；那些成功的公司（与它们的乒乓球桌完全无关）拥有更高的收入，并且由于预算突然增加，它们将部分新增的资金用于购买乒乓球桌等有趣的物品。在这种情况下，收入将导致乒乓球桌的购买，而不是相反。
- en: Finally, the correlation could be mere coincidence. Maybe Ping-Pong tables don’t
    lead to higher revenues, and revenues don’t lead to more Ping-Pong tables, but
    instead we’ve observed a *spurious correlation:* a correlation that occurs only
    by coincidence and does not indicate any causation or special relationship. A
    correlation could also be due to an *omitted variable*, something we haven’t observed
    but is independently causing revenue increases and Ping-Pong table purchases simultaneously.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，相关性可能只是纯粹的巧合。也许乒乓球桌并不会导致更高的收入，收入也不会导致更多的乒乓球桌，实际上我们观察到的是一个*虚假的相关性*：这是一种仅仅由于巧合而发生的相关性，并不表示任何因果关系或特殊的联系。相关性也可能是由于*遗漏变量*所致，这个变量我们没有观察到，但它独立地同时导致了收入的增加和乒乓球桌的购买。
- en: In any case, the important thing is to always be cautious when you find and
    interpret correlations. Correlations mean that two variables tend to change together,
    and they can help us make predictions, but they don’t necessarily imply that one
    variable causes the other, or even that they have any real relationship.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Discovering and understanding correlation coefficients can help you in your
    CEO duties, especially when you find surprising correlations. For example, you
    may find a strong, positive correlation between the size of groups that rent bicycles
    together and their level of customer satisfaction after the rental. Maybe this
    can give you some ideas about encouraging people to rent bikes with their friends
    as a chance to get more satisfied customers. Finding correlations, and understanding
    the magnitude of correlations and what that tells you about predictability, can
    be valuable in business.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Finding Correlations Between Variables
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can do more than calculate individual correlations between pairs of variables.
    We can go further by creating a *correlation matrix*, which is a matrix (or rectangular
    array) of numbers, each of whose elements is the correlation coefficient measuring
    the relationship between two particular variables. A correlation matrix will show
    the relationships among all of our variables:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here, we use the same `corr()` method that we’ve used before. When we use `corr()`
    without any arguments inside the parentheses, it creates a correlation matrix
    for all the variables in a dataset. In this case, we create a smaller correlation
    matrix that shows correlations among just three selected variables. The correlation
    matrix that we calculate here looks like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, we have a 3×3 matrix. Every entry in this matrix is a correlation coefficient.
    For example, in the second row, third column, you can see that the correlation
    between `windspeed` and `temp` is about *r* = –0.023\. Technically, this is a
    negative correlation, though it’s so close to 0 that we would typically describe
    the two variables as uncorrelated.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'You also can see that three correlations in the matrix are equal to 1.0\. That’s
    expected: these perfect correlations are measuring the correlation of each variable
    with itself (the correlation of `hr` with `hr`, `temp` with `temp`, and `windspeed`
    with `windspeed`). Every variable will always have a perfect correlation with
    itself. Creating a correlation matrix can be a quick, simple way to find correlations
    among all the variables in your data and find any surprising positive or negative
    correlations.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Creating Heat Maps
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating a correlation matrix, we can create a plot of all these correlations
    to make the matrix more easily readable:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, we create a heat map. In this type of plot, the color or darkness of a
    cell indicates the value of the number in that cell. The heat map in [Figure 1-13](#figure1-13)
    shows measurements of correlations between variables.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502888c01/f01013.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-13: Correlations shown in a heat map'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: This heat map shows a collection of nine rectangles. As the legend on the right
    indicates, a darker fill in a rectangle indicates that a particular correlation
    is higher, and a lighter fill indicates that a particular correlation is lower.
    A heat map of a correlation matrix can provide an even quicker way to check for
    patterns and relationships among variables, since strong relationships will quickly
    catch the eye.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer a color plot instead of a grayscale one, you can change the `cmap='binary'`
    parameter in the `sns.heatmap()` method. This `cmap` parameter refers to the *color
    map* of the heat map, and by choosing a different `cmap` value, you can get different
    color schemes. For example, if you use `cmap='coolwarm'`, you’ll see a heat map
    in which higher values are represented by reddish colors and lower values are
    represented by bluish colors.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Heat maps can be drawn for variables other than correlation matrices. For example,
    we can draw a heat map showing the number of riders at each hour throughout a
    week:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: To create this plot, we have to create a pivot table, a table of grouped values.
    If you’ve spent a lot of time working with Excel or other spreadsheet programs,
    you’ve likely encountered pivot tables before. Here, our pivot table has grouped
    values from our full dataset based on their day of the week and hour of the day.
    We have the average ridership for each hour (0 through 23) of each day (Sunday
    through Saturday). After creating a pivot table with data grouped in this way,
    we can use the same `heatmap()` method to create the heat map shown in [Figure
    1-14](#figure1-14).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502888c01/f01014.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-14: Ridership counts for each hour of every day'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: This heat map contains darker rectangles for hours that had more riders and
    lighter rectangles for hours that had fewer riders. We can see commuters who spike
    in activity around 8 AM and 5 PM. We can also see weekend outings on Saturday
    and Sunday afternoons.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'From a business perspective, this heat map could give us any number of business
    ideas. For instance, seeing the spike in ridership around 8 AM on weekdays could
    give you an idea for increasing your revenue. Just as we imagined providing discounts
    during times of low activity, we might also consider the mirror image strategy:
    surge pricing (temporarily higher prices) during especially active times. Other
    transportation companies like Uber, Lyft, and Grab use this surge pricing strategy,
    not only to increase revenue but also to ensure high availability of their products.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Further
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we’ve looked at only one dataset, and we’ve done only a few of the infinite
    explorations that are possible with it. As you continue from your first morning
    as CEO to your first afternoon, then your second day, and further on, you will
    need to make many decisions about your business and the way it operates. The exploration
    that we’ve done in this chapter can be applied to any other business question
    you ever encounter. For example, you might consider bundling bike rentals with
    refreshing drinks and earning extra revenue that way (not to mention keeping your
    riders healthier and safer). Analyzing data related to your customers, their riding
    patterns, and how thirsty they get during bike rides could help you figure out
    whether this strategy is a good idea.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看过一个数据集，而且只进行了其中一些无限可能的探索。当你从作为 CEO 的第一天早晨开始，直到第一天下午，再到第二天，甚至更远的时间，你将需要对你的业务及其运作方式做出许多决策。我们在这一章中所做的探索可以应用到你将来遇到的任何业务问题。例如，你可以考虑将自行车租赁与清爽的饮品捆绑销售，从而赚取额外的收入（更不用说这样可以让骑行者更加健康和安全）。分析与你的客户、他们的骑行模式以及骑行过程中他们的口渴程度相关的数据，能够帮助你判断这一策略是否可行。
- en: Other analyses could be related to the repairs your bikes need. How often are
    your bikes being repaired, and how much do repairs cost? You could check for the
    times of repairs and make sure they’re not being done during peak hours. You could
    check the costs of repairs of various types of bikes. You could check a histogram
    of the prices of repairs and check whether any outliers are increasing your costs
    too much. These explorations would help you better understand your business and
    help you get ideas for running it better.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 其他分析可能与你的自行车维修需求相关。你的自行车维修的频率是多少？维修费用是多少？你可以检查维修的时间，确保它们没有发生在高峰时段。你可以检查各种类型自行车的维修费用。你可以检查维修费用的直方图，看看是否有任何异常值导致费用过高。这些探索将帮助你更好地理解你的业务，并为你提供改进业务的想法。
- en: So far, our analyses have not been extremely sophisticated; mostly we’ve calculated
    only summary statistics and drawn plots. But these simple calculations and plots,
    when combined with common sense, can be valuable as a first step in making business
    decisions. Some CEOs don’t look at data enough, and others want to look at data
    but depend on staff to provide reports to them, and those reports may be slow
    or imperfect. A CEO who can confidently check data related to their company is
    a CEO who can be effective. CEOs can become good at data, and this can combine
    with their business knowledge to make them even better at their jobs. Similarly,
    data scientists can become good at business, and when their data skills are combined
    with business acumen, they can really become a force to be reckoned with.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的分析并不特别复杂；大多数情况下，我们只是计算了一些汇总统计并绘制了图表。但这些简单的计算和图表，结合常识，作为做出商业决策的第一步，依然非常有价值。有些
    CEO 不足够重视数据，其他一些则希望查看数据，但依赖员工为他们提供报告，而这些报告可能会很慢或者不完美。一个能够自信地检查与公司相关数据的 CEO，才能成为一名有效的
    CEO。CEO 可以变得擅长数据，这与他们的商业知识结合起来，将使他们在工作中更加出色。同样，数据科学家也可以变得擅长商业，当他们的数据技能与商业眼光结合时，他们将真正成为一个不可忽视的力量。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we started with a simple business scenario: becoming a CEO
    and making decisions related to running a business better. We went over some ideas
    for what a CEO needs to do and how exploratory data analysis can be helpful. We
    covered how to read data into Python, calculate summary statistics, draw plots,
    and interpret results in a business context. In the next chapter, we’ll go over
    linear regression, a more sophisticated method that can be used not only for exploration
    but also for forecasting. Let’s continue!'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从一个简单的商业场景开始：成为一名 CEO，并做出与更好地运营业务相关的决策。我们讨论了一些 CEO 需要做的事情，以及探索性数据分析如何发挥作用。我们涵盖了如何将数据读取到
    Python 中，计算汇总统计，绘制图表，并在商业上下文中解读结果。在下一章中，我们将讨论线性回归，这是一种更复杂的方法，既可以用于探索，也可以用于预测。让我们继续！
