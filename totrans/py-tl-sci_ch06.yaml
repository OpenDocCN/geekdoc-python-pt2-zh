- en: '**6'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JUPYTERLAB: YOUR CENTER FOR SCIENCE**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*JupyterLab* is a web-based interface for Project Jupyter. It combines every
    scientific computing component you’ll need into a single interactive and collaborative
    environment. Its flexible layout lets you efficiently execute complete computational
    workflows, from loading data to generating a final report. Its architecture is
    also hackable, meaning it’s extensible and open to developers.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve been reading this book from the beginning, you’ve already been introduced
    to multiple JupyterLab components, such as a console ([Chapter 3](ch03.xhtml)),
    a text editor ([Chapter 4](ch04.xhtml)), and Jupyter Notebook ([Chapter 5](ch05.xhtml)).
    So, we won’t retrace our steps here; instead, we’ll focus on the new interface
    and a few other features JupyterLab brings to the table.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*JupyterLab is under active development, and new features are being added regularly.
    To ensure that you’re up to date on the current state of JupyterLab, be sure to
    check out the full documentation at [https://jupyterlab.readthedocs.io/](https://jupyterlab.readthedocs.io/).*'
  prefs: []
  type: TYPE_NORMAL
- en: '**When to Use JupyterLab Instead of Notebook?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JupyterLab developers created the new interface based on the results of
    a 2015 user experience survey that indicated the need for more flexibility and
    integration in Jupyter Notebook. Users wanted easy access not only to notebooks
    but also to text editors, terminals, data viewers, debuggers, Markdown editors,
    CSV editors, a file browser, IPython cluster manager, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab not only provides these tools, it lets you share a kernel among them.
    In a single browser window, you can work with a notebook on one tab, edit a related
    data file on another, check resources or processes in a terminal, test concepts
    in a console, easily find and open files in a file manager, change the display
    language, and more. And like Notebook, it’s free and open source.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas Jupyter Notebook is great for data exploration, incremental software
    development, and documentation, JupyterLab permits more serious software development
    by providing many features found in traditional IDEs. But if you love Notebook,
    don’t worry; JupyterLab is basically a new frontend that exists on top of the
    existing Jupyter architecture. It uses the same server and file format as the
    classic Jupyter Notebook, so it’s fully compatible with your existing notebooks.
    In fact, you can run the classic Notebook app and JupyterLab side by side on the
    same computer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing JupyterLab**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we discussed in [Chapter 2](ch02.xhtml), it’s best to have a dedicated conda
    environment for each of your projects. To work with these environments with JupyterLab,
    you have two main options: you can either install JupyterLab directly in each
    conda environment, or you can link each environment to the JupyterLab installation
    in the *base* environment. We’ll call the first option the *naive* approach, and
    the second the *modular* approach. Although the modular approach is generally
    recommended, if a project needs to lock-down a specific version of JupyterLab,
    you’ll want to use the naive approach.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Naive Approach***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the naive approach, you install JupyterLab directly in a conda environment.
    You then can import and use any packages installed in the same environment. This
    is the simplest approach, but it can become resource intensive over time as your
    *pkgs* folder becomes populated with different versions of JupyterLab.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing and Launching JupyterLab Using Anaconda Navigator**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To install JupyterLab in a new environment using Anaconda Navigator, first launch
    Navigator using the Start menu in Windows, or Launchpad in macOS, or by entering
    `anaconda-navigator` in a terminal in Linux. Then, activate the environment by
    selecting its name in the **Applications on** drop-down menu near the top of the
    Home tab ([Figure 6-1](ch06.xhtml#ch06fig1)). In this example, we’re using the
    *base* environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-1: The Anaconda Navigator Home tab showing the active environment
    (base, or root) and the JupyterLab tile*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, find the JupyterLab app tile and click the **Install** button. You might
    need to scroll down the Home tab to find the tile. If you are unable to find the
    tile, then install JupyterLab using the CLI, as described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you see a Launch button rather than an Install button, JupyterLab now comes
    preinstalled with Anaconda.*'
  prefs: []
  type: TYPE_NORMAL
- en: The Install button will install the most current version of JupyterLab available
    from the top channel in your Channels listing, located near the top of the Home
    tab. If you want to install a specific version, click the “gear” icon at the upper
    right of the JupyterLab tile (see [Figure 6-1](ch06.xhtml#ch06fig1)) to see a
    listing of available version numbers.
  prefs: []
  type: TYPE_NORMAL
- en: If you need the absolute most current version of JupyterLab, make sure the conda-forge
    channel is at the top of your channels list. Packages in the defaults channel
    might be slightly older, but as compensation, they have passed the most rigorous
    compatibility testing. For more on using channels see [Chapter 2](ch02.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: After a few moments, the Install button should change to a Launch button. This
    button starts a local web server on your computer that displays the JupyterLab
    interface. Because it’s running locally, you don’t need an active internet connection;
    however, you will need to leave Navigator running.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing and Launching JupyterLab Using the CLI**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To install JupyterLab in a new environment using conda, first open Anaconda
    Prompt (in Windows) or a terminal (in macOS and Linux) and activate the conda
    environment. Let’s do this for *my_second_env* that we created in [Chapter 2](ch02.xhtml).
    If you skipped this step in [Chapter 2](ch02.xhtml), create the environment by
    doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, activate the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use conda to install JupyterLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To install a specific version, such as 3.1.4, you would use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To launch JupyterLab from the command line, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This starts a local web server on your computer that displays the JupyterLab
    interface. Because it’s running locally, you don’t need an active internet connection.
    You’ll need to leave your Prompt window or terminal open, however, as it’s running
    the local server for Notebook that lets you interact with your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Modular Approach***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the modular approach, you link each conda environment back to the JupyterLab
    package in your *base* environment. This approach is resource efficient. It also
    lets you easily keep the package up to date and choose among different environments
    from the same instance of JupyterLab.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the modular approach with either Navigator or the CLI. For simplicity,
    let’s use the CLI. Open Anaconda Prompt (in Windows) or a terminal (in macOS or
    Linux) and enter the following to create a new environment named *my_lab_env*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter y when prompted to accept the installation. Next, activate the new environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To link this environment with the JupyterLab installation in the *base* environment,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to ipykernel, we didn’t need to explicitly install Python in the environment.
    However, if you do need to use a *specific* version of Python in your project,
    you’ll want to explicitly install it in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, deactivate *my_lab_env*, which returns you to *base*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If JupyterLab is already installed in *base*, you can skip the next step. Otherwise,
    install JupyterLab using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To install a specific version, such as 3.1.4, you would use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install the nb_conda_kernels package to *base*. You’ll need to do this
    only once, so if you worked through [Chapter 5](ch05.xhtml), it should already
    be installed (you can check by running `conda list nb_conda_kernels` after activating
    the environment):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The nb_conda_kernels package enables a Jupyter instance in an environment to
    automatically recognize any other environment that has the ipykernel package installed.
    It’s this combination of nb_conda_kernels in the *base* environment and ipykernel
    in other conda environments that allows you to use a single installation of JupyterLab.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch JupyterLab from the active *base* environment enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This launches a local web server on your computer that displays the JupyterLab
    interface. Because it’s running locally, you don’t need an active internet connection.
    You’ll need to leave your Prompt window or terminal open, however, as it’s running
    a local server that lets you interact with your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: '**Building a 3D Astronomical Simulation**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s time to start working with JupyterLab! In this example, we’ll use JupyterLab
    to build a 3D simulation of an astronomical oddity: a *globular cluster*. Globular
    clusters are spherical collections of stars that orbit most spiral galaxies such
    as our Milky Way. They are among the oldest features in a galaxy and can contain
    millions of tightly packed stars.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start off fresh to avoid confusion. If you started JupyterLab in the previous
    sections, go to the browser page it opened and shut it down by clicking **File**
    ▸ **Shut Down**. If Navigator is open, close it by selecting **File** ▸ **Quit**.
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, we’ll use the modular approach, so be sure to install JupyterLab
    and the nb_conda_kernels package in your *base* environment, as described in the
    previous section.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Dedicated Project Folders***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Anaconda uses dedicated folders to keep track of your installed packages and
    conda environments (see [Chapter 2](ch02.xhtml)). Although Anaconda is designed
    to work smoothly with this structure and help you navigate it, not everyone wants
    their project files scattered around their directory tree. As we discussed in
    [Chapter 4](ch04.xhtml), there are multiple benefits to keeping all of your project’s
    files and folders within a single master folder.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s work through an example in which we store the conda environment and Jupyter
    notebooks in a folder named *my_jlab_proj*, short for “my JupyterLab project.”
    I’ll create this in my user directory in Windows (*C:\Users\hanna\*), and I suggest
    you use a similar location on your system.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The root directory for JupyterLab’s file browser (that is, the highest directory
    in the hierarchy) is the directory from which you launched JupyterLab. This is
    usually your home directory that holds the anaconda3 folder. As a result, you
    won’t be able to access files or folders above this directory structure within
    JupyterLab.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although you can create directories and environments with Anaconda Navigator,
    the command line is more succinct, so we’ll use that going forward. To make the
    directories for the project, open Anaconda Prompt (in Windows) or a terminal (in
    macOS or Linux) and enter the following (using your own directory path up to *\my_jlab_proj*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes a *my_jlab_proj* directory with notebooks and data subdirectories.
    Next, create a conda environment named *my_jlab_proj_env* under the project directory,
    activate it, and install some libraries (substitute your own path where needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As described previously, the ipykernel package lets you use a single JupyterLab
    application installed in the *base* environment. The Matplotlib package is Python’s
    primary plotting library. It includes the NumPy (Numerical Python) package as
    a dependency. We explore these libraries in more detail in later chapters of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your project directory structure should look like [Figure 6-2](ch06.xhtml#ch06fig2).
    Of course, with a real project, you might include additional folders for specific
    types of data, non-notebook scripts, miscellaneous items, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-2: Directory structure for my_jlab_proj*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch JupyterLab, first return to the base environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '***The JupyterLab Interface***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you launch JupyterLab, a new tab should appear in your browser with a file
    manager along the left side and a Launcher tab in the main work area ([Figure
    6-3](ch06.xhtml#ch06fig3)). If for some reason you don’t see the Launcher pane,
    on the menu bar at the top, select **File** ▸ **New Launcher**.
  prefs: []
  type: TYPE_NORMAL
- en: The default view in [Figure 6-3](ch06.xhtml#ch06fig3) is just a starting point.
    Indeed, JupyterLab’s building blocks are so flexible and customizable that there’s
    no such thing as a standard view, though there are some common features.
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab sessions reside in a *workspace* that contains the *state* of JupyterLab;
    that is, the files that are currently open, the layout of the application areas
    and tabs, and so on. The workspace consists of a *main work area*, or *Launcher*
    pane, containing tabs of documents and activities; a *menu bar*; and a collapsible
    *left sidebar*. The left sidebar contains a file browser and icons for the list
    of open tabs and running kernels and terminals, a table of contents, and an extensions
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-3: The JupyterLab workspace with major components labeled*'
  prefs: []
  type: TYPE_NORMAL
- en: Within the Launcher pane, you’ll see sections for Notebooks and Consoles. Within
    them are tiles for kernels in your various conda environments (your view will
    differ from [Figure 6-3](ch06.xhtml#ch06fig3), as I’ve set up some environments
    on my own). You’ll also see an Other section from within which you can open a
    terminal, text file, Markdown file, Python file, or a contextual help page.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Menu Bar***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The menu bar at the top of JupyterLab ([Figure 6-3](ch06.xhtml#ch06fig3)) offers
    top-level menus that expose available actions along with their keyboard shortcuts.
    These are specific to which tab is active in the main work area; unavailable actions
    will be visible but grayed out (half intensity). For convenience, some actions
    are duplicated in the left sidebar. Following are the default menus:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File** Actions related to files and folders, including shutting down and
    logging off'
  prefs: []
  type: TYPE_NORMAL
- en: '**Edit** Actions related to editing documents and working with notebook cells'
  prefs: []
  type: TYPE_NORMAL
- en: '**View** Actions to alter JupyterLab’s appearance and open the Command Palette'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run** Actions for running code in notebooks and consoles'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kernel** Actions for managing kernels'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tabs** Actions for working with tabs, plus a listing of open tabs'
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings** Settings for themes, languages, key maps, font sizes, and more'
  prefs: []
  type: TYPE_NORMAL
- en: '**Help** Links for JupyterLab help, plus a launcher for Classic Jupyter Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab extensions can also create new top-level menus in the menu bar. These
    will be specific to the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Left Sidebar***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The left sidebar provides access to commonly used tabs, such as a file browser,
    a list of open tabs and running terminals and kernels, a table-of-contents generator,
    and a manager for third-party extensions, as illustrated in [Figure 6-4](ch06.xhtml#ch06fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-4: The left sidebar with the file browser active*'
  prefs: []
  type: TYPE_NORMAL
- en: When you close a notebook, code console, or terminal, the underlying kernel
    or terminal running on the server continues to run. This enables you to perform
    long-running actions and return later. The Running panel ([Figure 6-5](ch06.xhtml#ch06fig5))
    lets you reopen the document linked to a given terminal or kernel. You can also
    shut down any open kernels or terminals.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-5: The Running Terminals and Kernels panel*'
  prefs: []
  type: TYPE_NORMAL
- en: The table-of-contents extension, now built in to JupyterLab, makes it easy to
    see and navigate the structure of a document. The table is automatically generated
    in the left sidebar when you have a notebook, Markdown, LaTeX, or Python file
    open. Each listed section is hyperlinked to the actual section within the document.
    You can number headings, collapse sections, and navigate into the file.
  prefs: []
  type: TYPE_NORMAL
- en: The tool uses the headings from your Markdown cells to generate the table of
    contents. The Toggle Auto-Numbering option, visible when you have a file open,
    will go through a notebook and number the sections and subsections as designated
    by the headings. This lets you move big sections around without having to go through
    the document and renumber them.
  prefs: []
  type: TYPE_NORMAL
- en: The extensions manager helps you to manage any third-party extensions you have
    installed. We’ll talk more about extensions, later.
  prefs: []
  type: TYPE_NORMAL
- en: The left sidebar is collapsible. Just click the icon for the active panel or
    select **View** ▸ **Show Left Sidebar** from the menu bar to toggle it off.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating a New Notebook***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s make a new Jupyter notebook in the *notebooks* folder to hold our globular
    cluster code and output. In the file manager view, also called the *left sidebar*,
    navigate to the folder and open it. Then, in the Notebook section in the Launcher
    pane, find and click the tile labeled `Python[conda env:my_jlab_proj_env]`(if
    the tile labels are truncated, hover your cursor over the tile to see the complete
    name). This opens a new untitled notebook that uses the kernel in the specified
    environment ([Figure 6-6](ch06.xhtml#ch06fig6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-6: A new untitled notebook in the JupyterLab work area*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the tab for the notebook is marked with a colored top border (blue
    by default). The work area permits only one current activity, and this lets you
    know which tab is active.
  prefs: []
  type: TYPE_NORMAL
- en: If you read [Chapter 5](ch05.xhtml), you probably recognize the notebook interface,
    though there are a few changes relative to classic Notebook. The icons and menu
    choices along the top of the cell (the toolbar beneath the Untitled.ipynb tab),
    are more streamlined and simplified, and they share functionality with the more
    fully featured menu bar that runs along the top of the interface. Take a moment
    to hover over the toolbar icons, and then click the main menu items such as File,
    Edit, and Run to see the available options. These should be familiar to you from
    [Chapter 5](ch05.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: '***Naming the Notebook***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, let’s rename the notebook. You can do this in one of several ways. You
    can use **File** ▸ **Rename Notebook** from the main menu. Alternatively, you
    can open contextual menus by right-clicking the **Untitled.ipynb** tab or by right-clicking
    the filename in the file browser and selecting **Rename** ([Figure 6-7](ch06.xhtml#ch06fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-7: The file browser’s contextual menu for working with files*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*JupyterLab comes with a lot of convenient contextual menus. Just about anything
    that’s clickable, including the blank area under notebook cells, has a menu available.*'
  prefs: []
  type: TYPE_NORMAL
- en: Use the context menu shown in [Figure 6-7](ch06.xhtml#ch06fig7) to name the
    notebook **globular.ipynb**. The notebook tab name should also change.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Markdown Cells***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make a descriptive header, click in the first cell and use the toolbar at
    the top of the notebook ([Figure 6-8](ch06.xhtml#ch06fig8)) to change the cell
    type from **Code** to **Markdown**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-8: The Notebook toolbar*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following and press CTRL-ENTER to run the cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For more on Markdown, see “Adding Text with a Markdown Cell” on [page 102](ch05.xhtml#ch00lev2sec50).
  prefs: []
  type: TYPE_NORMAL
- en: '***Adding Code and Making Plots***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You could easily run the simulator code in a single cell, but for the sake of
    the narrative, let’s spread it over multiple cells. Creating modular programs
    like this has its advantages. For example, you can isolate the imports and data
    loads in the first cell, so you don’t need to rerun them every time you make a
    change in subsequent cells.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding a new cell using the “+” from the notebook toolbar ([Figure
    6-8](ch06.xhtml#ch06fig8)). New cells are automatically code cells, so you’re
    ready to start coding. The first step is to import the libraries needed to build
    the simulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This code starts with a magic command that makes Matplotlib plot *inline*. This
    means that it will plot to an output cell *within* the notebook. The next two
    lines import NumPy and Matplotlib. The final line selects Matplotlib’s dark theme
    for plots, so our white stars will have a black backdrop. Execute the cell by
    pressing SHIFT-ENTER, which runs the cell and adds a new code cell below, or click
    the triangular “play” icon ( ▸ ) in the toolbar ([Figure 6-8](ch06.xhtml#ch06fig8)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now define a generic function that creates a list of x, y, z coordinates arrayed
    in a spherical volume. In the new cell, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The function takes as arguments the number of points (`num_pts`) and the radius
    of the sphere (`radius`). This determines the size of the cluster and how many
    stars it contains. You then create an empty list ➊ to hold the coordinates and
    loop through the number of points, each time drawing three random values from
    a normal distribution with a mean of 0 and a standard deviation of 1 ➋. These
    three values will represent the x, y, z coordinates of a star. Multiplying the
    coordinates by the radius stretches or shrinks the size of the cluster. At the
    end of each loop, you append the coordinates to the list and end the function
    by returning the list.
  prefs: []
  type: TYPE_NORMAL
- en: Run the cell by pressing SHIFT-ENTER to add a new cell at the bottom of the
    notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a globular cluster and plot it. In the new cell, enter the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The “rim” variables represent the radius and number of stars for the full cluster.
    Generate the coordinates by calling your function. Then, call it again to generate
    coordinates for stars in the densely packed core region at the center of the cluster
    ➊. Notice how you can alter the input arguments as you pass them to the function,
    by dividing them by a scaling factor and ensuring that the number of stars variable
    remains an integer. You can play with these scalers to change the appearance of
    the core region.
  prefs: []
  type: TYPE_NORMAL
- en: Time to plot the stars. Don’t worry about Matplotlib’s arcane syntax for now;
    we’ll go into this in more detail later in the book. Basically, plots, referred
    to as `Axes` (`ax` for short), reside in `Figure` (`fig`) objects that serve as
    containers ➋. To make a single 3D `ax` object you call the `plt.subplots()` method
    and set the projection type to `3d`. Then, turn off the x-, y-, and z-axes of
    the plot; we want our cluster to float in the blackness of space.
  prefs: []
  type: TYPE_NORMAL
- en: 'To post the star points, call the `scatter()` method twice: once for the rim
    stars, and once for the core ➌. This lets you specify different point sizes for
    the two regions. The `scatter()` method expects x, y, z points, but the data is
    currently a list of lists, with each point’s coordinates in its own list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To extract these coordinates, we’ll use Python’s built-in `zip()` function in
    conjunction with its *splat* (`*`) operator that unpacks multiple variables. Finish
    by setting the axis limits so their aspect ratio is equal and they’re big enough
    to hold the cluster ➍. By relating the limits to the `rim_radius` variable, rather
    than specifying an absolute size, the plot will automatically adjust if you change
    the radius value.
  prefs: []
  type: TYPE_NORMAL
- en: Press CTRL-ENTER to run the cell and generate the plot without adding a new
    cell. Your finished notebook should look like [Figure 6-9](ch06.xhtml#ch06fig9).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-9: The completed globular cluster notebook*'
  prefs: []
  type: TYPE_NORMAL
- en: To save your work, on the toolbar, click the floppy disk icon, or use CTRL-S.
  prefs: []
  type: TYPE_NORMAL
- en: '***Adding a Console***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Everything we’ve done to this point you could accomplish in the classic Jupyter
    Notebook app. Now let’s see what JupyterLab can bring to the table, namely the
    ability to work with multiple tabs connected to the same kernel.
  prefs: []
  type: TYPE_NORMAL
- en: As you work with code, especially code that you inherit from teammates, you’ll
    want to investigate data types, list contents, function returns, and so on. Normally,
    investigating side issues would clutter up your notebook. But JupyterLab lets
    you open multiple tabs *and* connect these tabs to the running kernel. This allows
    you to perform exploratory work outside of your notebook yet still within the
    workspace.
  prefs: []
  type: TYPE_NORMAL
- en: To open a console connected to the current kernel, right-click in any cell and
    then, on the context menu that opens, select **New Console for Notebook**. A console
    should appear beneath your notebook, as depicted in [Figure 6-10](ch06.xhtml#ch06fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-10: A new console linked to the globular.ipynb notebook*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the format of the coordinates in the `rim_stars` list, place your cursor
    in the empty box at the bottom of the console, enter the following, and then run
    it by pressing SHIFT-ENTER:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This displays the first three lines of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can see that you’re dealing with a list of lists, and each nested list holds
    three float values, representing x, y, and z coordinates. Because the notebook
    and console share the same kernel, as soon as you run the notebook, any imports,
    variable assignments, function definitions, and so on become resident in memory
    and accessible to the console. You can even copy all of cell `[3]` into the console,
    tweak the parameters, and plot the results there, leaving your notebook untouched.
  prefs: []
  type: TYPE_NORMAL
- en: To keep the console uncluttered, open its contextual menu and select **Clear
    Console Cells**.
  prefs: []
  type: TYPE_NORMAL
- en: '***Displaying an Image File***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What if you want to compare your output to a photograph of a globular cluster,
    to help you tweak the input variables for a realistic-looking simulation? You
    could always add an image to a Markdown cell, but you might need to scroll down
    to see it, and you’ll have to remember to delete it later. To avoid that aggravation,
    you can display the image in a separate JupyterLab window.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, go to the Wikimedia Commons internet site (*[https://commons.wikimedia.org/](https://commons.wikimedia.org/)*)
    and search for “The Great Globular Cluster in Hercules – M13.” Save or download
    the image to your *my_jlab_proj\data* folder. I used the 640-pixel resolution
    available at *[https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/The_Great_Globular_Cluster_in_Hercules_-_M13.jpg/640px-The_Great_Globular_Cluster_in_Hercules_-_M13.jpg](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/The_Great_Globular_Cluster_in_Hercules_-_M13.jpg/640px-The_Great_Globular_Cluster_in_Hercules_-_M13.jpg)*.
  prefs: []
  type: TYPE_NORMAL
- en: Back in JupyterLab, navigate to the image in the file browser and open it by
    right-clicking the filename and then selecting **Open**, or by double-clicking
    it. Next, drag and stack both the new image pane and the console onto the right
    side of the screen to produce the layout shown in [Figure 6-11](ch06.xhtml#ch06fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-11: Our final workspace with file browser (left), notebook (center),
    console (upper right), and .jpg image (lower right)*'
  prefs: []
  type: TYPE_NORMAL
- en: A workspace much like this, with the file browser, notebook, and console, is
    a nice setup for a beginner.
  prefs: []
  type: TYPE_NORMAL
- en: '***Exploring the Simulation***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can change the appearance of the simulation by opening it in an external
    window, changing the background color, adding gridlines, and so on. To explore
    the simulation in 3D, change the first line in cell `[1]` to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Then, select **Run** ▸ **Run All Cells** from the main menu. This opens an external
    Qt window that will let you spin the cluster around to view it from all sides.
    Check your task bar if the window doesn’t appear on its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see the plot’s 3D grid, it’s best to use a negative image. First,
    find and comment-out the following two lines using the CTRL / or CMD / shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the star color to black:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Save the notebook as *globular_black.ipynb* and run all cells. You might need
    to restart the kernel to clear the dark background plot style. If so, from the
    menu bar select **Kernel** ▸ **Restart Kernel and Run All Cells**. You should
    get the plot shown in [Figure 6-12](ch06.xhtml#ch06fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-12: The “black” cluster simulation with grid lines*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can use the jupyterlab-matplotlib extension to interact with plots within
    a notebook output cell. We’ll look at JupyterLab extensions later in this chapter.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Opening Multiple Notebooks***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One advantage of JupyterLab is that it lets you work on multiple Notebook projects
    at once. Let’s assume that you want to make an edit to the *geyser.ipynb* file
    that you made in [Chapter 5](ch05.xhtml). With JupyterLab, you can navigate to
    the notebook in the file manager and double-click it to open a new tab ([Figure
    6-13](ch06.xhtml#ch06fig13)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-13: Two notebooks open in the same browser window*'
  prefs: []
  type: TYPE_NORMAL
- en: You now have two notebooks open in the same browser window, and they use different
    kernels, as indicated in the upper-right corner of each notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '***Saving the Workspace***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Documents within a workspace, such as Jupyter notebooks and text files, can
    be saved using standard commands like CTRL-S, **File** ▸ **Save Notebook**, and
    so forth. In addition, the *layout* of your workspace (that is, the tabs you have
    open, their arrangement, and their content) can be saved as a **.jupyterlab-workspace*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: If you plan on using your current layout multiple times, or if you plan on having
    multiple project-dependent layouts, you’ll want to give each workspace a unique
    name. To store this layout file in your project folder, go to the JupyterLab file
    browser and ensure that you’re in the *my_jlab_proj* folder. Next, use the New
    Folder icon (a folder with a “+” in it) to create a folder named *workspaces*
    ([Figure 6-14](ch06.xhtml#ch06fig14)). Now open this folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-14: Adding the workspaces folder*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To preserve the current state of JupyterLab, on the menu bar, select **File**
    ▸ **Save Current Workspace As**. A pop-up window will ask you for a name, in the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '*my_jlab_proj/new-workspace.jupyterlab-workspace*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the *new-workspace* text to *globular* and then click **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*my_jlab_proj/globular.jupyterlab-workspace*'
  prefs: []
  type: TYPE_NORMAL
- en: To restore to a saved workspace, just open the *.jupyterlab-workspace* file.
  prefs: []
  type: TYPE_NORMAL
- en: '***Clearing the Workspace***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To clear the contents of a workspace, use the `reset` URL parameter. The example
    here shows the general format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to reset our globular workspace, in your browser’s address bar,
    use `reset`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will configure your workspace similar to that shown in [Figure 6-3](ch06.xhtml#ch06fig3).
    You can still restore the previous layout if you saved it in a *.jupyterlab-workspace*
    file, as described in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: For more on managing workspaces, visit *[https://jupyterlab.readthedocs.io/en/stable/user/urls.html](https://jupyterlab.readthedocs.io/en/stable/user/urls.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Closing the Workspace***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with Jupyter Notebook, simply closing the browser tab does not stop JupyterLab.
    To completely shut it down, on the menu bar, use **File** ▸ **Shut Down**. If
    you are logged in to another server rather than working locally, you can log out
    using **File** ▸ **Log Out**.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Be aware that some service providers, such as universities, might have specific
    logout procedures for their servers. Not following these protocols can waste allocated
    time resources and can result in unexpected usage fees.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking Advantage of the JupyterLab Interface**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hopefully, the previous example gave you an appreciation for the JupyterLab
    interface. In the sections that follow, we’ll take a closer look at some of its
    myriad components and controls. Many of these are self-explanatory, so we’ll focus
    on the most useful and less intuitive ones.
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the globular cluster exercise, the work area lets you tie tools
    together in a customized layout. It also brings some nice features to Jupyter
    notebooks, including the ability to rearrange a notebook by dragging and dropping
    cells, dragging cells between notebooks to copy content, and creating multiple
    synchronized views of the same notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Synchronized Views***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s look at the last case on synchronized views. It’s not uncommon to want
    to look at both the top and bottom of a long notebook at the same time, or to
    scroll down to see interactive output. To manage this, JupyterLab lets you open
    the same notebook more than once.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works, in the globular cluster session, click in the *globular*
    notebook and then select **File** ▸ **New View for Notebook**. Next, arrange the
    layout so that the two notebooks are side by side. Then, shorten your browser
    window so that you can’t see the entire notebook along with its output, mimicking
    a long notebook. In the left-hand notebook, scroll up to see the code. In the
    right-hand notebook, scroll down to see the plot, as in [Figure 6-15](ch06.xhtml#ch06fig15).
    Now, rerun the cells in the first notebook. The plot on the right should update.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-15: A synchronized view of the same notebook in different tabs*'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can move the output cell into a new pane. Simply open a context
    menu in the output cell containing the globular cluster simulation and then select
    **Create New View for Output** ([Figure 6-16](ch06.xhtml#ch06fig16)). You then
    can drag it wherever you want in the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: If you use sliders or other widgets to interactively change parameters and update
    the visualization, these will be included in the new view. This lets you create
    pseudo-dashboards within your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: '***Copying Cells Between Notebooks***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To drag and copy cells between notebooks, open a new notebook using **File**
    ▸ **New** ▸ **Notebook**. Drag the new notebook beside the *globular* notebook.
    From the *globular* notebook, click your cursor on a cell *number* (such as `[1]:`)
    and drag it into the new untitled notebook. You should see results similar to
    that shown in [Figure 6-17](ch06.xhtml#ch06fig17).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-16: The globular cluster notebook with the output cell in a separate
    pane*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-17: Results of dragging the first cell from the left-hand notebook
    into the right-hand notebook*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Staying Focused by Using Single Document Mode***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A nice thing about classic Jupyter Notebook is that you can focus on a task
    without the app “getting in your way.” The JupyterLab developers took note of
    this and included a setting that lets you concentrate on a single document or
    activity without having to close all the other tabs in the main work area.
  prefs: []
  type: TYPE_NORMAL
- en: To toggle on this setting, activate a tab by clicking it, and then, from the
    menu bar, select **View** ▸ **Simple Interface**, or use the **Simple** toggle
    switch at the lower-left corner of the JupyterLab window. The workspace should
    show only the active tab. If you toggle this on and off for the *globular* workspace,
    you might detect a drawback. When you return to the regular view, you *may* lose
    your preferred tab arrangement (compare [Figure 6-18](ch06.xhtml#ch06fig18) to
    6-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-18: The workspace tab arrangement after toggling off Simple Interface
    mode for the globular session*'
  prefs: []
  type: TYPE_NORMAL
- en: If your view does change, you can restore the original layout either manually
    or by using a saved *.jupyterlab-workspace* file. Because this is a bit tedious,
    you’ll only want to use simple interface options when you plan to spend a long
    time in a single document or activity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Text Editor**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JupyterLab includes a text editor that you can use to write Python scripts.
    We didn’t cover this in our *globular* session, so let’s work a simple example
    here using the Pythagorean theorem. This is the famous *a*² + *b*² = *c*² formula
    used to find the hypotenuse of a right triangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve closed JupyterLab, start it from your *base* environment. Open Anaconda
    Prompt (Windows) or a terminal (macOS or Linux), and then enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This should open the default layout shown in [Figure 6-3](ch06.xhtml#ch06fig3).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have JupyterLab up and running, return to the default workspace
    by editing the URL so that it ends in */lab*. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '*http://localhost :8888/lab*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason your workspace doesn’t look like the one in [Figure 6-3](ch06.xhtml#ch06fig3),
    reset it by adding the *?reset* URL parameter, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*http://localhost:8888/lab?reset*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, from the Launcher pane, start a new text file or Python file. A new tab
    should open for the untitled file. Click in the file and enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: From the menu bar, select **File** ▸ **Save As** (or **File** ▸ **Save Python
    File As** if you chose the Python file option) and name the file *pythagoras.py*.
    When you click **Save**, the file should appear in your file browser. If you go
    back and click the File menu again, you’ll note that the save options are now
    **Save Python File** and **Save Python File As**, even if you started with a text
    file. JupyterLab now recognizes that this as a Python file.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to save scripts before you run them. You can tell if a file has
    been saved by looking at the tab. Unsaved files will have a black dot adjacent
    to the filename, and saved files will have an X ([Figure 6-19](ch06.xhtml#ch06fig19)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-19: An unsaved text file with • in the tab versus a saved text file
    with X in the tab*'
  prefs: []
  type: TYPE_NORMAL
- en: Although the JupyterLab text editor is not as robust as the one in Spyder ([Chapter
    4](ch04.xhtml)), it’s more sophisticated than a simple editor such as Notepad.
    If you click **Settings** on the menu bar, you’ll see several submenus for altering
    its appearance and behavior, as illustrated in [Figure 6-20](ch06.xhtml#ch06fig20).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-20: The Settings menu*'
  prefs: []
  type: TYPE_NORMAL
- en: There’s a Key Map that lets you use the same keys as those used by the Sublime
    Text, vim, and emacs editors. There are multiple Editor Theme choices, options
    to change the font size, set tab indention levels, and automatically close brackets.
    Under the Advanced Settings Editor, you can change the Editor’s configuration
    file. Keyboard shortcuts are also available and depend on which key mapping you
    chose. You can perform an online search for a list of each map’s key bindings.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the editor uses the *Plain Text* syntax highlighting style, but
    you can choose from an exhaustive list by selecting **View** ▸ **Text Editor Syntax
    Highlighting** (or **Text Editor Theme**) from the menu bar. Going forward, I
    will use the default Jupyter theme, key map, and syntax highlighting. For more
    on highlighting, see [Chapter 3](ch03.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Back to our script. You have several options for running the code that you wrote
    in the editor. In the following sections, we’ll look at options involving a terminal
    and a notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running a Script in a Terminal***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To run the saved *pythagoras.py* file in a terminal emulator, on the menu bar,
    select **File** ▸ **New** ▸ **Terminal**. Next, click in the terminal pane and
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Press ENTER, and the script should run ([Figure 6-21](ch06.xhtml#ch06fig21)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-21: Running a Python file in a terminal pane*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on your machine, you might need to use `python3` in place of `python`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If you edit the Python file and want to rerun it in the terminal, remember that
    you can use the arrow keys to select previous commands, saving you keystrokes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running a Script in a Notebook***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To run the saved *pythagoras.py* file in a notebook, on the menu bar, select
    **File** ▸ **New** ▸ **Notebook**. If prompted for a kernel, accept **Python3**
    or choose the one in **my_jlab_proj_env** from the pull-down menu. Next, click
    in the notebook cell and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Press CTRL-ENTER, and you should see the output in the notebook ([Figure 6-22](ch06.xhtml#ch06fig22)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-22: Running a Python file in a notebook*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that you don’t need to save or rename the notebook to use it to run scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '***Simultaneously Writing and Documenting Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: JupyterLab lets you document your code, check that the code in the document
    runs, and preview the results, all in a single workspace. Let’s look at an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the file browser, navigate to your user directory. Open a new text editor
    from the menu bar using **File** ▸ **New** ▸ **Text File**. Rename it *doc.md*
    (*.md* files are plaintext format files that use Markdown language, like Notebook’s
    Markdown Cells), and then enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, in the Editor pane, open a context menu and then select **Show Markdown
    Preview**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the editor, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the editor pane, open a context menu and then select **Create Console for
    Editor**. If prompted for a kernel, choose one with Matplotlib installed, such
    as `Python [conda env:my_jlab_proj_env]`. Now, copy into the console the preceding
    code, starting with the import statement, and then run it using SHIFT-ENTER.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following code into the editor to show the plot in the Markdown
    preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Your layout should look similar to [Figure 6-23](ch06.xhtml#ch06fig23).
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the **Create Console for Editor** option to run code in the
    text editor. After opening the console, highlight the code inside the editor and
    then select **Run** ▸ **Run Code** from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab’s versatile layouts and sharable kernels support efficient workflows
    that boost productivity. If you find yourself constantly switching tabs and scrolling
    through panes while writing code, you might not be taking full advantage of JupyterLab’s
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-23: Previewing code using an Editor, Console, and Markdown pane*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using JupyterLab Extensions**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JupyterLab extensions are plug-and-play add-ons to “extend” the functionality
    of JupyterLab. Each extension may contain one or more plug-ins (the basic unit
    of extensibility). Extensions can be created by anyone, including yourself. To
    quote the documentation, “[the] whole of JupyterLab itself is simply a collection
    of extensions that are no more powerful or privileged than any custom extension.”
  prefs: []
  type: TYPE_NORMAL
- en: A small subset of popular JupyterLab extensions is listed in [Table 6-1](ch06.xhtml#ch06tab1).
    Some previous popular extensions, such as the Table of Contents and Debugger extensions,
    are now built in to JupyterLab. There are also extensions for working with plotting
    and dashboarding libraries such as Plotly, Bokeh, and Dash. We look at those libraries
    in [Chapter 16](ch16.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'JupyterLab extensions contain JavaScript that’s run in the browser. There are
    two types of extensions: *source* and *prebuilt*. Activating a source extension
    requires installation of Node.js and a rebuild of JupyterLab. Prebuilt extensions
    such as those published as Python packages do not require a rebuild of JupyterLab.
    Extensions can also include a server-side component necessary for the extension
    to function.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 6-1:** Useful JupyterLab Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Extension** | **Description** | **Website** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| nbdime | Tools for diffing and merging Jupyter notebooks | *[https://nbdime.readthedocs.io/en/latest/](https://nbdime.readthedocs.io/en/latest/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| jupyterlab-git | Version control using Git | *[https://github.com/jupyterlab/jupyterlab-git/](https://github.com/jupyterlab/jupyterlab-git/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| JupyterLab GitHub | Access notebooks from repositories | *[https://www.npmjs.com/package/@jupyterlab/github/](https://www.npmjs.com/package/@jupyterlab/github/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| Jupyter-ML Workspace | IDE dedicated to machine learning | *[https://github.com/ml-tooling/ml-workspace/](https://github.com/ml-tooling/ml-workspace/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| JupyterLab System Monitor | Monitor memory and CPU usage | *[https://github.com/jtpio/jupyterlab-system-monitor/](https://github.com/jtpio/jupyterlab-system-monitor/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| jupyterlab_html | View rendered HTML files | *[https://github.com/mflevine/jupyterlab_html](https://github.com/mflevine/jupyterlab_html)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| jupyterlab matplotlib | Interactive inline Matplotlib | *[https://github.com/matplotlib/ipympl/](https://github.com/matplotlib/ipympl/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| JupyterLab LaTeX | Live-edit LaTeX documents | *[https://github.com/jupyterlab/jupyterlab-latex/](https://github.com/jupyterlab/jupyterlab-latex/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| JupyterLab Code Formatter | Use formatters like Black or Autopep8 to enforce
    style guidelines | *[https://github.com/ryantam626/jupyterlab_code_formatter/](https://github.com/ryantam626/jupyterlab_code_formatter/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| jupyterlab-spellchecker | Spellchecker for Markdown cells and text files
    | *[https://github.com/ocordes/jupyterlab_spellchecker/](https://github.com/ocordes/jupyterlab_spellchecker/)*
    |'
  prefs: []
  type: TYPE_TB
- en: '| jupyterlab-google-drive | Cloud storage via Google Drive | *[https://github.com/jupyterlab/jupyterlab-google-drive](https://github.com/jupyterlab/jupyterlab-google-drive)*
    |'
  prefs: []
  type: TYPE_TB
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The classic Jupyter Notebook extensions we reviewed in [Chapter 5](ch05.xhtml)
    are not compatible with JupyterLab. Even though many useful extensions have been
    ported over to JupyterLab, others are still being updated. If an extension you
    want is unavailable, be patient and check the Extension Manager periodically for
    changes. The extension’s website might also include news on updates.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing and Managing Extensions with the Extension Manager***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can use the Extension Manager on the left sidebar (see [Figure 6-3](ch06.xhtml#ch06fig3))
    to install and manage extensions that are distributed as single JavaScript packages
    on *npm*, the *node package manager* (*[https://www.npmjs.com/](https://www.npmjs.com/)*).
    The extension manager is off by default, but you can turn it on it by clicking
    the **Enable** button ([Figure 6-24](ch06.xhtml#ch06fig24)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-24: Turning on the Extension Manager from the left sidebar*'
  prefs: []
  type: TYPE_NORMAL
- en: Installing extensions allows them to execute arbitrary code on the server, kernel,
    and browser. Because third-party extensions are not reviewed and may introduce
    security risks or contain malicious code, you’re asked to explicitly enable the
    action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The extension manager pane has three sections: a search bar, a list of installed
    extensions, and a “Discover” section for all the JupyterLab extensions on the
    NPM registry. The results are listed according to the registry’s sort order (see
    *[https://docs.npmjs.com/searching-for-and-choosing-packages-to-download#package-search-rank-criteria/](https://docs.npmjs.com/searching-for-and-choosing-packages-to-download#package-search-rank-criteria/)*).
    An exception to this order is extensions released by the Jupyter organization.
    These have a small Jupyter icon next to their names and will always appear at
    the top of the search results list ([Figure 6-25](ch06.xhtml#ch06fig25)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-25: Extensions released by the Jupyter organization are clearly marked
    and appear at the top of the search results.*'
  prefs: []
  type: TYPE_NORMAL
- en: To find an available extension, you can scroll down the list or use the Extension
    Manager’s search box. To learn more about an extension, click its name. This opens
    the extension’s website (usually on GitHub) in a new browser window.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the manager’s **Install** button to install extensions. For source
    extensions, you’ll need Node.js. To install it in your *base* environment *from
    the defaults channel*, open Anaconda Prompt (Windows) or a terminal (macOS or
    Linux) and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To install it from the *conda-forge* channel, enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You’re now ready to install extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Because most extensions are *source* extensions, when you click the manager’s
    **Install** button, a drop-down menu should appear under the search bar, indicating
    that the extension has been downloaded but that a rebuild is needed to complete
    the installation. You should click **Rebuild**, but if you ignore this for some
    reason, the next time you refresh your browser, change workspaces, or start JupyterLab,
    you’ll be presented with a **Build** button. Click the button and you’ll be asked
    to “Reload without Saving” or “Save and Reload.”
  prefs: []
  type: TYPE_NORMAL
- en: If you want to manage additional extensions at the same time, you can ignore
    the rebuild notice until you have made all the changes you want. After that, click
    the **Rebuild** button to start a rebuild in the background. When it’s complete,
    a dialog will open, indicating that a reload of the page is needed to load the
    latest build into the browser. At this point, the extension will appear in the
    Installed section of the manager, where you’ll have options for uninstalling or
    disabling it ([Figure 6-26](ch06.xhtml#ch06fig26)). Disabling an extension will
    prevent it from being activated, but without rebuilding the application.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Avoid installing extensions that you don’t trust, and watch out for any extensions
    trying to masquerade as a trusted extension. Extensions released through the Jupyter
    organization will have a small Jupyter icon to the right of the extension name.*'
  prefs: []
  type: TYPE_NORMAL
- en: During installation, JupyterLab will inspect the package metadata for any companion
    packages such as Notebook server extensions or kernel packages. If JupyterLab
    finds instructions for companion packages, it will present an informational dialog
    to notify you about these. It will be up to you to take these into account or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: To read more about the Extension Manager, visit the documentation at *[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-26: User-installed extensions can be uninstalled or disabled in the
    Extension Manager*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing and Managing Extensions Using the CLI***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are other ways to install extensions besides the Extension Manager. Installing
    a source extension will still require that you install Node.js and rebuilding
    JupyterLab, however, and you’ll need to be aware of the same security issues (see
    the previous section for details).
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking an extension name in the manager takes you to the extension’s website.
    Here, you might find instructions for installing in the CLI. For example, to install
    the jupyterlab-git extension, which lets you use version control with Git, open
    Anaconda Prompt (Windows) or a terminal (macOS or Linux) and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To uninstall the extension, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Also in the CLI, you can use the `jupyter labextension` command to install or
    uninstall source extensions from NPM, list all installed extensions, or disable
    an extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install an extension, use this format, where <extension-name> represents
    the extension’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To install multiple extensions, enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To install a specific version of an extension, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To uninstall extensions, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are installing/uninstalling multiple extensions in several stages, you
    might want to defer rebuilding JupyterLab by including the flag `--no-build` in
    the install/uninstall step. When you are ready to rebuild, you can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can list extensions using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The jupyter labextension command uses the JavaScript package name for the
    extension, which can be different from the name of the conda package used to distribute
    the extension.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable an extension without rebuilding JupyterLab, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Disabling an extension leaves the code loaded but prevents the plug-ins from
    running.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enable a disabled extensions with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Installed extensions are enabled by default unless there is a configuration
    explicitly disabling them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For help with the `jupyter labextension` command, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: To read more about this command, visit the documentation at *[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing ipywidgets for JupyterLab***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.xhtml), we worked with the ipywidgets extension to use widgets
    in classic Jupyter Notebook. Most of the time, installing ipywidgets automatically
    configures JupyterLab to use widgets, as it depends on the jupyterlab_widgets
    package, which configures JupyterLab to display and use widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using the modular approach, by which JupyterLab and the IPython kernel
    are installed in different environments, installing ipywidgets requires two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the jupyterlab_widgets package in the environment containing JupyterLab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install ipywidgets in each kernel’s environment that will use ipywidgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, with JupyterLab installed in your *base* environment and the kernel
    installed in your *my_jlab_proj_env* environment created earlier, use the following
    commands, substituting your path to the *my_jlab_proj_env* folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '***Creating Custom Extensions***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A JupyterLab extension is a package that contains one or more JupyterLab plug-ins.
    You can write your own plug-ins and package them together into a JupyterLab extension.
    The details for this are beyond the scope of this book, but you can find what
    you need in the *Extension Developer Guide* at *[https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html](https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sharing**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we talk about sharing in JupyterLab, we’re mainly talking about sharing
    notebooks. Because we covered this subject in “Sharing Notebooks” on [page 122](ch05.xhtml#ch00lev1sec39),
    I won’t repeat it here. To supplement that section, however, you can find more
    about using JupyterLab on JupyterHub at *[https://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html](https://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html)*.
    For performing real-time collaboration with JupyterLab, see *[https://jupyterlab.readthedocs.io/en/stable/user/rtc.html](https://jupyterlab.readthedocs.io/en/stable/user/rtc.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JupyterLab builds on Jupyter Notebook by providing an IDE-like environment for
    developing code, exploring datasets, and conducting experiments. With its extensible
    environment, JupyterLab takes us another step closer to true *literate programming*,
    wherein the exposition of logic is integrated into ordinary human language.
  prefs: []
  type: TYPE_NORMAL
- en: Although it’s open for business, JupyterLab is still under development, and
    you’ll want to consult the official documentation for the most recent additions,
    changes, and deprecations. In addition to work on the core program, development
    of third-party extensions will continue. New tools such as *nbdev* (*[https://nbdev.fast.ai/](https://nbdev.fast.ai/)*)
    and debuggers (*[https://jupyterlab.readthedocs.io/en/stable/user/debugger.html](https://jupyterlab.readthedocs.io/en/stable/user/debugger.html)*)
    are turning JupyterLab into a full-fledged IDE.
  prefs: []
  type: TYPE_NORMAL
- en: One development in late 2021 was the release of the cross-platform standalone
    *JupyterLab App* (*[https://github.com/jupyterlab/jupyterlab-desktop/](https://github.com/jupyterlab/jupyterlab-desktop/)*).
    With the App, JupyterLab no longer “lives” in a web browser, but instead exists
    as a self-contained desktop application. For convenience, it bundles a Python
    environment with several popular libraries ready to use in scientific computing
    and data science workflows. These include pandas, NumPy, Matplotlib, SciPy, and
    more. A current drawback, however, is that the application provides only `pip`
    installations in place of conda installations. This means that it’s not as easy
    to install some libraries compared to the web version.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes [Part I](part01.xhtml#part01) of the book. At the end of [Chapter
    4](ch04.xhtml), readers new to Python were instructed to work through [Part II](part02.xhtml#part02),
    which is a Python primer. If you’ve done that—or don’t need to—proceed to [Part
    III](part03.xhtml#part03), which provides an overview of important scientific
    and visualization packages available through Anaconda, including tips on how to
    choose the best ones for your needs.
  prefs: []
  type: TYPE_NORMAL
