- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: 'JUPYTERLAB: YOUR CENTER FOR SCIENCE**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JUPYTERLAB：你的科学中心**
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: '*JupyterLab* is a web-based interface for Project Jupyter. It combines every
    scientific computing component you’ll need into a single interactive and collaborative
    environment. Its flexible layout lets you efficiently execute complete computational
    workflows, from loading data to generating a final report. Its architecture is
    also hackable, meaning it’s extensible and open to developers.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*JupyterLab*是Project Jupyter的基于网页的界面。它将你所需要的所有科学计算组件整合到一个互动式协作环境中。其灵活的布局使你能够高效地执行完整的计算工作流程，从加载数据到生成最终报告。它的架构也是可以修改的，这意味着它具有扩展性，并且对开发者开放。'
- en: If you’ve been reading this book from the beginning, you’ve already been introduced
    to multiple JupyterLab components, such as a console ([Chapter 3](ch03.xhtml)),
    a text editor ([Chapter 4](ch04.xhtml)), and Jupyter Notebook ([Chapter 5](ch05.xhtml)).
    So, we won’t retrace our steps here; instead, we’ll focus on the new interface
    and a few other features JupyterLab brings to the table.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从本书的开头就开始阅读，你已经接触过多个JupyterLab组件，如控制台（[第3章](ch03.xhtml)），文本编辑器（[第4章](ch04.xhtml)），以及Jupyter
    Notebook（[第5章](ch05.xhtml)）。所以我们这里不会再回顾这些内容；我们将重点介绍JupyterLab带来的新界面和其他一些功能。
- en: '**NOTE**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*JupyterLab is under active development, and new features are being added regularly.
    To ensure that you’re up to date on the current state of JupyterLab, be sure to
    check out the full documentation at [https://jupyterlab.readthedocs.io/](https://jupyterlab.readthedocs.io/).*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*JupyterLab正在积极开发中，并且新功能会定期添加。为了确保你了解JupyterLab的最新状态，请务必查看完整文档：[https://jupyterlab.readthedocs.io/](https://jupyterlab.readthedocs.io/)。*'
- en: '**When to Use JupyterLab Instead of Notebook?**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**何时使用JupyterLab而非Notebook？**'
- en: The JupyterLab developers created the new interface based on the results of
    a 2015 user experience survey that indicated the need for more flexibility and
    integration in Jupyter Notebook. Users wanted easy access not only to notebooks
    but also to text editors, terminals, data viewers, debuggers, Markdown editors,
    CSV editors, a file browser, IPython cluster manager, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab的开发者根据2015年用户体验调查的结果创建了新的界面，该调查表明Jupyter Notebook需要更多的灵活性和集成。用户希望不仅能够轻松访问笔记本，还能访问文本编辑器、终端、数据查看器、调试器、Markdown编辑器、CSV编辑器、文件浏览器、IPython集群管理器等。
- en: JupyterLab not only provides these tools, it lets you share a kernel among them.
    In a single browser window, you can work with a notebook on one tab, edit a related
    data file on another, check resources or processes in a terminal, test concepts
    in a console, easily find and open files in a file manager, change the display
    language, and more. And like Notebook, it’s free and open source.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab不仅提供这些工具，还允许你在它们之间共享内核。在一个浏览器窗口中，你可以在一个标签页上使用笔记本，在另一个标签页上编辑相关的数据文件，在终端中检查资源或进程，在控制台中测试概念，轻松地在文件管理器中查找和打开文件，改变显示语言，等等。像Notebook一样，它是免费的并且是开源的。
- en: Whereas Jupyter Notebook is great for data exploration, incremental software
    development, and documentation, JupyterLab permits more serious software development
    by providing many features found in traditional IDEs. But if you love Notebook,
    don’t worry; JupyterLab is basically a new frontend that exists on top of the
    existing Jupyter architecture. It uses the same server and file format as the
    classic Jupyter Notebook, so it’s fully compatible with your existing notebooks.
    In fact, you can run the classic Notebook app and JupyterLab side by side on the
    same computer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Jupyter Notebook非常适合数据探索、增量软件开发和文档编写，但JupyterLab通过提供许多传统IDE中常见的功能，允许进行更为严肃的软件开发。但是如果你喜欢Notebook，不必担心；JupyterLab基本上是一个位于现有Jupyter架构之上的新前端。它使用与经典Jupyter
    Notebook相同的服务器和文件格式，因此与你现有的笔记本完全兼容。事实上，你可以在同一台计算机上同时运行经典的Notebook应用程序和JupyterLab。
- en: '**Installing JupyterLab**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安装JupyterLab**'
- en: 'As we discussed in [Chapter 2](ch02.xhtml), it’s best to have a dedicated conda
    environment for each of your projects. To work with these environments with JupyterLab,
    you have two main options: you can either install JupyterLab directly in each
    conda environment, or you can link each environment to the JupyterLab installation
    in the *base* environment. We’ll call the first option the *naive* approach, and
    the second the *modular* approach. Although the modular approach is generally
    recommended, if a project needs to lock-down a specific version of JupyterLab,
    you’ll want to use the naive approach.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.xhtml)中讨论的那样，为您的每个项目最好有一个独立的conda环境。要在这些环境中使用JupyterLab，您有两个主要选项：可以直接在每个conda环境中安装JupyterLab，或者将每个环境链接到*base*环境中的JupyterLab安装。我们将第一个选项称为*朴素*方法，第二个称为*模块化*方法。尽管通常推荐使用模块化方法，但如果一个项目需要锁定特定版本的JupyterLab，您将需要使用朴素方法。
- en: '***The Naive Approach***'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***朴素方法***'
- en: With the naive approach, you install JupyterLab directly in a conda environment.
    You then can import and use any packages installed in the same environment. This
    is the simplest approach, but it can become resource intensive over time as your
    *pkgs* folder becomes populated with different versions of JupyterLab.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在朴素方法中，您直接在conda环境中安装JupyterLab。然后，您可以导入并使用在同一环境中安装的任何软件包。这是最简单的方法，但随着时间的推移，它可能会变得资源密集，因为您的*pkgs*文件夹会被不同版本的JupyterLab填满。
- en: '**Installing and Launching JupyterLab Using Anaconda Navigator**'
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用Anaconda Navigator安装和启动JupyterLab**'
- en: To install JupyterLab in a new environment using Anaconda Navigator, first launch
    Navigator using the Start menu in Windows, or Launchpad in macOS, or by entering
    `anaconda-navigator` in a terminal in Linux. Then, activate the environment by
    selecting its name in the **Applications on** drop-down menu near the top of the
    Home tab ([Figure 6-1](ch06.xhtml#ch06fig1)). In this example, we’re using the
    *base* environment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Anaconda Navigator在新环境中安装JupyterLab，首先通过Windows中的开始菜单、macOS中的Launchpad，或者在Linux中通过终端输入`anaconda-navigator`来启动Navigator。然后，通过选择主页标签页顶部的**Applications
    on**下拉菜单中的环境名称来激活该环境（见[图6-1](ch06.xhtml#ch06fig1)）。在本示例中，我们使用的是*base*环境。
- en: '![Image](../images/06fig01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig01.jpg)'
- en: '*Figure 6-1: The Anaconda Navigator Home tab showing the active environment
    (base, or root) and the JupyterLab tile*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-1：Anaconda Navigator主页标签页，显示活动环境（base或root）和JupyterLab图块*'
- en: Next, find the JupyterLab app tile and click the **Install** button. You might
    need to scroll down the Home tab to find the tile. If you are unable to find the
    tile, then install JupyterLab using the CLI, as described in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到JupyterLab应用图块并点击**安装**按钮。您可能需要向下滚动主页标签页才能找到该图块。如果找不到该图块，请按照下一节所述使用CLI安装JupyterLab。
- en: '**NOTE**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you see a Launch button rather than an Install button, JupyterLab now comes
    preinstalled with Anaconda.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您看到启动按钮而不是安装按钮，则说明JupyterLab现在已与Anaconda一起预装。*'
- en: The Install button will install the most current version of JupyterLab available
    from the top channel in your Channels listing, located near the top of the Home
    tab. If you want to install a specific version, click the “gear” icon at the upper
    right of the JupyterLab tile (see [Figure 6-1](ch06.xhtml#ch06fig1)) to see a
    listing of available version numbers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装按钮将安装来自您的频道列表顶部的最新版本的JupyterLab，频道列表位于主页标签页的顶部附近。如果您想安装特定版本，请点击JupyterLab图块右上角的“齿轮”图标（见[图6-1](ch06.xhtml#ch06fig1)），以查看可用版本号的列表。
- en: If you need the absolute most current version of JupyterLab, make sure the conda-forge
    channel is at the top of your channels list. Packages in the defaults channel
    might be slightly older, but as compensation, they have passed the most rigorous
    compatibility testing. For more on using channels see [Chapter 2](ch02.xhtml).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要绝对最新版本的JupyterLab，请确保conda-forge频道位于您的频道列表顶部。默认频道中的软件包可能稍微旧一些，但作为补偿，它们通过了最严格的兼容性测试。有关使用频道的更多信息，请参见[第2章](ch02.xhtml)。
- en: After a few moments, the Install button should change to a Launch button. This
    button starts a local web server on your computer that displays the JupyterLab
    interface. Because it’s running locally, you don’t need an active internet connection;
    however, you will need to leave Navigator running.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，安装按钮应变为启动按钮。此按钮将在您的计算机上启动一个本地Web服务器，显示JupyterLab界面。由于它是在本地运行的，您不需要活跃的互联网连接；然而，您需要保持Navigator处于运行状态。
- en: '**Installing and Launching JupyterLab Using the CLI**'
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用CLI安装和启动JupyterLab**'
- en: 'To install JupyterLab in a new environment using conda, first open Anaconda
    Prompt (in Windows) or a terminal (in macOS and Linux) and activate the conda
    environment. Let’s do this for *my_second_env* that we created in [Chapter 2](ch02.xhtml).
    If you skipped this step in [Chapter 2](ch02.xhtml), create the environment by
    doing the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要在新环境中使用 conda 安装 JupyterLab，首先打开 Anaconda Prompt（Windows）或终端（macOS 和 Linux），并激活
    conda 环境。我们为在[第 2 章](ch02.xhtml)中创建的*my_second_env*做这个操作。如果你跳过了[第 2 章](ch02.xhtml)中的这一步，按照以下步骤创建该环境：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, activate the environment:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，激活该环境：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, use conda to install JupyterLab:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 conda 安装 JupyterLab：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To install a specific version, such as 3.1.4, you would use the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装特定版本，比如 3.1.4，你可以使用以下命令：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To launch JupyterLab from the command line, enter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过命令行启动 JupyterLab，输入以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This starts a local web server on your computer that displays the JupyterLab
    interface. Because it’s running locally, you don’t need an active internet connection.
    You’ll need to leave your Prompt window or terminal open, however, as it’s running
    the local server for Notebook that lets you interact with your web browser.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在你的计算机上启动一个本地 Web 服务器，显示 JupyterLab 界面。由于它是本地运行的，你不需要活跃的互联网连接。然而，你需要保持打开提示窗口或终端，因为它运行着本地服务器，允许你与网页浏览器进行交互。
- en: '***The Modular Approach***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***模块化方法***'
- en: With the modular approach, you link each conda environment back to the JupyterLab
    package in your *base* environment. This approach is resource efficient. It also
    lets you easily keep the package up to date and choose among different environments
    from the same instance of JupyterLab.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块化方法，你将每个 conda 环境链接回你的*base*环境中的 JupyterLab 包。该方法资源效率高，并且使你可以轻松保持包的最新状态，并从同一个
    JupyterLab 实例中选择不同的环境。
- en: 'You can use the modular approach with either Navigator or the CLI. For simplicity,
    let’s use the CLI. Open Anaconda Prompt (in Windows) or a terminal (in macOS or
    Linux) and enter the following to create a new environment named *my_lab_env*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用模块化方法，无论是通过 Navigator 还是 CLI。为了简单起见，我们使用 CLI。打开 Anaconda Prompt（Windows）或终端（macOS
    或 Linux），并输入以下命令以创建一个名为*my_lab_env*的新环境：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Enter y when prompted to accept the installation. Next, activate the new environment:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时输入 y 以接受安装。接下来，激活新的环境：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To link this environment with the JupyterLab installation in the *base* environment,
    enter the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此环境与*base*环境中的 JupyterLab 安装进行链接，输入以下内容：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Thanks to ipykernel, we didn’t need to explicitly install Python in the environment.
    However, if you do need to use a *specific* version of Python in your project,
    you’ll want to explicitly install it in the environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 ipykernel，我们无需显式地在环境中安装 Python。但是，如果你确实需要在项目中使用*特定*版本的 Python，你需要显式地将其安装到环境中。
- en: 'Now, deactivate *my_lab_env*, which returns you to *base*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，停用 *my_lab_env*，这将让你返回到*base*环境：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If JupyterLab is already installed in *base*, you can skip the next step. Otherwise,
    install JupyterLab using this command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 JupyterLab 已经安装在*base*环境中，你可以跳过下一步。否则，使用以下命令安装 JupyterLab：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To install a specific version, such as 3.1.4, you would use the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装特定版本，比如 3.1.4，你可以使用以下命令：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, install the nb_conda_kernels package to *base*. You’ll need to do this
    only once, so if you worked through [Chapter 5](ch05.xhtml), it should already
    be installed (you can check by running `conda list nb_conda_kernels` after activating
    the environment):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装 nb_conda_kernels 包到*base*环境。你只需要做一次，如果你已经完成了[第 5 章](ch05.xhtml)，它应该已经安装（你可以通过激活环境后运行
    `conda list nb_conda_kernels` 来检查）：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The nb_conda_kernels package enables a Jupyter instance in an environment to
    automatically recognize any other environment that has the ipykernel package installed.
    It’s this combination of nb_conda_kernels in the *base* environment and ipykernel
    in other conda environments that allows you to use a single installation of JupyterLab.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: nb_conda_kernels 包使得环境中的 Jupyter 实例能够自动识别任何安装了 ipykernel 包的其他环境。正是这种在*base*环境中的
    nb_conda_kernels 和其他 conda 环境中的 ipykernel 的组合，使你能够使用单一安装的 JupyterLab。
- en: 'To launch JupyterLab from the active *base* environment enter the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要从活动的*base*环境启动 JupyterLab，输入以下内容：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This launches a local web server on your computer that displays the JupyterLab
    interface. Because it’s running locally, you don’t need an active internet connection.
    You’ll need to leave your Prompt window or terminal open, however, as it’s running
    a local server that lets you interact with your web browser.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的计算机上启动一个本地 web 服务器，显示 JupyterLab 界面。由于它是本地运行的，你不需要活跃的互联网连接。然而，你需要保持 Prompt
    窗口或终端打开，因为它正在运行一个本地服务器，允许你与 web 浏览器进行交互。
- en: '**Building a 3D Astronomical Simulation**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建一个 3D 天文模拟**'
- en: 'It’s time to start working with JupyterLab! In this example, we’ll use JupyterLab
    to build a 3D simulation of an astronomical oddity: a *globular cluster*. Globular
    clusters are spherical collections of stars that orbit most spiral galaxies such
    as our Milky Way. They are among the oldest features in a galaxy and can contain
    millions of tightly packed stars.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始使用 JupyterLab 了！在这个例子中，我们将使用 JupyterLab 构建一个 3D 模拟，模拟一个天文奇观：*球状星团*。球状星团是围绕大多数螺旋星系（例如我们的银河系）旋转的球形星星集合。它们是星系中最古老的特征之一，可能包含数百万颗紧密集中的星星。
- en: Let’s start off fresh to avoid confusion. If you started JupyterLab in the previous
    sections, go to the browser page it opened and shut it down by clicking **File**
    ▸ **Shut Down**. If Navigator is open, close it by selecting **File** ▸ **Quit**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免混淆，让我们从头开始。如果你在前面的章节中启动了 JupyterLab，打开它的浏览器页面，然后通过点击 **文件** ▸ **关闭** 来关闭它。如果
    Navigator 打开了，选择 **文件** ▸ **退出** 来关闭它。
- en: Going forward, we’ll use the modular approach, so be sure to install JupyterLab
    and the nb_conda_kernels package in your *base* environment, as described in the
    previous section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以后我们将采用模块化方法，因此请确保按照前一部分的描述在你的 *base* 环境中安装 JupyterLab 和 nb_conda_kernels 包。
- en: '***Using Dedicated Project Folders***'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用专门的项目文件夹***'
- en: Anaconda uses dedicated folders to keep track of your installed packages and
    conda environments (see [Chapter 2](ch02.xhtml)). Although Anaconda is designed
    to work smoothly with this structure and help you navigate it, not everyone wants
    their project files scattered around their directory tree. As we discussed in
    [Chapter 4](ch04.xhtml), there are multiple benefits to keeping all of your project’s
    files and folders within a single master folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 使用专门的文件夹来跟踪你已安装的包和 conda 环境（见 [第 2 章](ch02.xhtml)）。虽然 Anaconda 设计上能够顺利与这种结构配合并帮助你浏览它，但并不是每个人都希望将项目文件散布在目录树中。正如我们在
    [第 4 章](ch04.xhtml) 中讨论的，保持所有项目文件和文件夹都在一个主文件夹内有多种好处。
- en: Let’s work through an example in which we store the conda environment and Jupyter
    notebooks in a folder named *my_jlab_proj*, short for “my JupyterLab project.”
    I’ll create this in my user directory in Windows (*C:\Users\hanna\*), and I suggest
    you use a similar location on your system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来进行操作，在这个例子中，我们将 conda 环境和 Jupyter 笔记本存储在一个名为 *my_jlab_proj* 的文件夹中，简称“我的
    JupyterLab 项目”。我将这个目录创建在 Windows 中的用户目录 (*C:\Users\hanna\*)，我建议你在你的系统中使用类似的位置。
- en: '**NOTE**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The root directory for JupyterLab’s file browser (that is, the highest directory
    in the hierarchy) is the directory from which you launched JupyterLab. This is
    usually your home directory that holds the anaconda3 folder. As a result, you
    won’t be able to access files or folders above this directory structure within
    JupyterLab.*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*JupyterLab 文件浏览器的根目录（即层级结构中的最高目录）是你启动 JupyterLab 时所在的目录。通常这是存放 anaconda3 文件夹的主目录。因此，你将无法在
    JupyterLab 中访问此目录结构之上的文件或文件夹。*'
- en: 'Although you can create directories and environments with Anaconda Navigator,
    the command line is more succinct, so we’ll use that going forward. To make the
    directories for the project, open Anaconda Prompt (in Windows) or a terminal (in
    macOS or Linux) and enter the following (using your own directory path up to *\my_jlab_proj*):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用 Anaconda Navigator 创建目录和环境，但命令行更加简洁，因此我们以后将使用命令行。要为项目创建目录，打开 Anaconda
    Prompt（在 Windows 中）或终端（在 macOS 或 Linux 中），然后输入以下内容（使用你自己的目录路径，直到 *\my_jlab_proj*）：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This makes a *my_jlab_proj* directory with notebooks and data subdirectories.
    Next, create a conda environment named *my_jlab_proj_env* under the project directory,
    activate it, and install some libraries (substitute your own path where needed):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建一个名为 *my_jlab_proj* 的目录，里面有笔记本和数据子目录。接下来，在项目目录下创建一个名为 *my_jlab_proj_env*
    的 conda 环境，激活它，并安装一些库（需要时替换为你自己的路径）：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As described previously, the ipykernel package lets you use a single JupyterLab
    application installed in the *base* environment. The Matplotlib package is Python’s
    primary plotting library. It includes the NumPy (Numerical Python) package as
    a dependency. We explore these libraries in more detail in later chapters of this
    book.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，ipykernel 包允许你在*基本*环境中使用单个安装的 JupyterLab 应用程序。Matplotlib 包是 Python 的主要绘图库，其中包括
    NumPy（数值 Python）包作为依赖项。我们将在本书的后续章节中详细探讨这些库。
- en: At this point, your project directory structure should look like [Figure 6-2](ch06.xhtml#ch06fig2).
    Of course, with a real project, you might include additional folders for specific
    types of data, non-notebook scripts, miscellaneous items, and more.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你的项目目录结构应该像[图 6-2](ch06.xhtml#ch06fig2)所示。当然，对于一个真实的项目，你可能会包含额外的文件夹，用于特定类型的数据、非笔记本脚本、杂项和其他内容。
- en: '![Image](../images/06fig02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig02.jpg)'
- en: '*Figure 6-2: Directory structure for my_jlab_proj*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2：my_jlab_proj 的目录结构*'
- en: 'To launch JupyterLab, first return to the base environment:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 JupyterLab，请首先返回到基本环境：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, enter the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下内容：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '***The JupyterLab Interface***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***JupyterLab 接口***'
- en: When you launch JupyterLab, a new tab should appear in your browser with a file
    manager along the left side and a Launcher tab in the main work area ([Figure
    6-3](ch06.xhtml#ch06fig3)). If for some reason you don’t see the Launcher pane,
    on the menu bar at the top, select **File** ▸ **New Launcher**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动 JupyterLab 时，浏览器会新建一个标签页，左侧是文件管理器，主工作区是一个启动器标签页（[图 6-3](ch06.xhtml#ch06fig3)）。如果你在菜单栏顶部看不到启动器窗格，请选择
    **文件** ▸ **新建启动器**。
- en: The default view in [Figure 6-3](ch06.xhtml#ch06fig3) is just a starting point.
    Indeed, JupyterLab’s building blocks are so flexible and customizable that there’s
    no such thing as a standard view, though there are some common features.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 6-3](ch06.xhtml#ch06fig3)中的默认视图仅作为一个起点。事实上，JupyterLab 的构建模块非常灵活和可定制，因此没有标准视图的概念，尽管有一些共同的特性。
- en: JupyterLab sessions reside in a *workspace* that contains the *state* of JupyterLab;
    that is, the files that are currently open, the layout of the application areas
    and tabs, and so on. The workspace consists of a *main work area*, or *Launcher*
    pane, containing tabs of documents and activities; a *menu bar*; and a collapsible
    *left sidebar*. The left sidebar contains a file browser and icons for the list
    of open tabs and running kernels and terminals, a table of contents, and an extensions
    manager.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 会话驻留在一个*工作空间*中，其中包含 JupyterLab 的*状态*；即当前打开的文件、应用程序区域和选项卡的布局等。工作空间包括一个*主工作区*或*启动器*窗格，其中包含文档和活动的选项卡；一个*菜单栏*；以及一个可折叠的*左侧边栏*。左侧边栏包含文件浏览器和打开选项卡列表及运行的内核和终端的图标，目录表和扩展管理器。
- en: '![Image](../images/06fig03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig03.jpg)'
- en: '*Figure 6-3: The JupyterLab workspace with major components labeled*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：带有主要组件标签的 JupyterLab 工作空间*'
- en: Within the Launcher pane, you’ll see sections for Notebooks and Consoles. Within
    them are tiles for kernels in your various conda environments (your view will
    differ from [Figure 6-3](ch06.xhtml#ch06fig3), as I’ve set up some environments
    on my own). You’ll also see an Other section from within which you can open a
    terminal, text file, Markdown file, Python file, or a contextual help page.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动器窗格中，你会看到笔记本和控制台的部分。其中包含你各种 conda 环境中的内核磁贴（你的视图将与[图 6-3](ch06.xhtml#ch06fig3)不同，因为我自己设置了一些环境）。你还会看到一个其他部分，可以从中打开终端、文本文件、Markdown
    文件、Python 文件或上下文帮助页面。
- en: '***The Menu Bar***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***菜单栏***'
- en: 'The menu bar at the top of JupyterLab ([Figure 6-3](ch06.xhtml#ch06fig3)) offers
    top-level menus that expose available actions along with their keyboard shortcuts.
    These are specific to which tab is active in the main work area; unavailable actions
    will be visible but grayed out (half intensity). For convenience, some actions
    are duplicated in the left sidebar. Following are the default menus:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 的顶部菜单栏（[图 6-3](ch06.xhtml#ch06fig3)）提供了顶级菜单，显示可用操作及其键盘快捷键。这些菜单是特定于主工作区中活动选项卡的；不可用的操作将显示但呈灰色（半透明）。为了方便起见，某些操作在左侧边栏中也有重复显示。以下是默认菜单：
- en: '**File** Actions related to files and folders, including shutting down and
    logging off'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件** 与文件和文件夹相关的操作，包括关闭和退出登录'
- en: '**Edit** Actions related to editing documents and working with notebook cells'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑** 与编辑文档和处理笔记本单元格相关的操作'
- en: '**View** Actions to alter JupyterLab’s appearance and open the Command Palette'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图** 改变 JupyterLab 的外观并打开命令面板'
- en: '**Run** Actions for running code in notebooks and consoles'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行** 在笔记本和控制台中运行代码的操作'
- en: '**Kernel** Actions for managing kernels'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**内核** 管理内核的操作'
- en: '**Tabs** Actions for working with tabs, plus a listing of open tabs'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项卡** 处理选项卡的操作，以及打开的选项卡列表'
- en: '**Settings** Settings for themes, languages, key maps, font sizes, and more'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置** 主题、语言、键盘映射、字体大小等的设置'
- en: '**Help** Links for JupyterLab help, plus a launcher for Classic Jupyter Notebook'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**帮助** JupyterLab 帮助链接，并启动经典 Jupyter Notebook'
- en: JupyterLab extensions can also create new top-level menus in the menu bar. These
    will be specific to the extension.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 扩展也可以在菜单栏中创建新的顶级菜单。这些菜单将特定于该扩展。
- en: '***The Left Sidebar***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***左侧边栏***'
- en: The left sidebar provides access to commonly used tabs, such as a file browser,
    a list of open tabs and running terminals and kernels, a table-of-contents generator,
    and a manager for third-party extensions, as illustrated in [Figure 6-4](ch06.xhtml#ch06fig4).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧边栏提供了访问常用选项卡的功能，如文件浏览器、打开的选项卡列表、正在运行的终端和内核、目录生成器以及第三方扩展管理器，如[图 6-4](ch06.xhtml#ch06fig4)所示。
- en: '![Image](../images/06fig04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig04.jpg)'
- en: '*Figure 6-4: The left sidebar with the file browser active*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-4: 启动文件浏览器的左侧边栏*'
- en: When you close a notebook, code console, or terminal, the underlying kernel
    or terminal running on the server continues to run. This enables you to perform
    long-running actions and return later. The Running panel ([Figure 6-5](ch06.xhtml#ch06fig5))
    lets you reopen the document linked to a given terminal or kernel. You can also
    shut down any open kernels or terminals.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你关闭一个笔记本、代码控制台或终端时，服务器上运行的底层内核或终端仍然会继续运行。这使你能够执行长时间运行的操作，并在稍后返回。运行面板（[图 6-5](ch06.xhtml#ch06fig5)）让你可以重新打开与特定终端或内核相关联的文档。你还可以关闭任何打开的内核或终端。
- en: '![Image](../images/06fig05.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig05.jpg)'
- en: '*Figure 6-5: The Running Terminals and Kernels panel*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-5: 运行中的终端和内核面板*'
- en: The table-of-contents extension, now built in to JupyterLab, makes it easy to
    see and navigate the structure of a document. The table is automatically generated
    in the left sidebar when you have a notebook, Markdown, LaTeX, or Python file
    open. Each listed section is hyperlinked to the actual section within the document.
    You can number headings, collapse sections, and navigate into the file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在内建于 JupyterLab 的目录扩展使得查看和浏览文档结构变得更加容易。当你打开笔记本、Markdown、LaTeX 或 Python 文件时，左侧边栏会自动生成一个目录。每个列出的部分都可以点击链接到文档中的实际部分。你可以为标题编号、折叠章节并浏览文件。
- en: The tool uses the headings from your Markdown cells to generate the table of
    contents. The Toggle Auto-Numbering option, visible when you have a file open,
    will go through a notebook and number the sections and subsections as designated
    by the headings. This lets you move big sections around without having to go through
    the document and renumber them.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 工具使用你在 Markdown 单元格中设置的标题来生成目录。启用“自动编号”选项（当你打开文件时可见），它将遍历笔记本并为由标题指定的部分和子部分编号。这使得你可以移动大部分章节，而无需逐一修改文档中的编号。
- en: The extensions manager helps you to manage any third-party extensions you have
    installed. We’ll talk more about extensions, later.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展管理器帮助你管理已安装的任何第三方扩展。我们稍后将详细介绍扩展。
- en: The left sidebar is collapsible. Just click the icon for the active panel or
    select **View** ▸ **Show Left Sidebar** from the menu bar to toggle it off.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧边栏是可折叠的。只需点击活动面板的图标，或者从菜单栏选择 **视图** ▸ **显示左侧边栏**，即可切换其显示状态。
- en: '***Creating a New Notebook***'
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建新笔记本***'
- en: Let’s make a new Jupyter notebook in the *notebooks* folder to hold our globular
    cluster code and output. In the file manager view, also called the *left sidebar*,
    navigate to the folder and open it. Then, in the Notebook section in the Launcher
    pane, find and click the tile labeled `Python[conda env:my_jlab_proj_env]`(if
    the tile labels are truncated, hover your cursor over the tile to see the complete
    name). This opens a new untitled notebook that uses the kernel in the specified
    environment ([Figure 6-6](ch06.xhtml#ch06fig6)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在*notebooks*文件夹中创建一个新的 Jupyter 笔记本，用于存放我们的星团代码和输出。在文件管理器视图中，也就是*左侧边栏*，导航到文件夹并打开它。然后，在启动器面板中的笔记本部分，找到并点击标记为
    `Python[conda env:my_jlab_proj_env]` 的方块（如果方块标签被截断，将光标悬停在方块上查看完整名称）。这将打开一个新的未命名笔记本，使用指定环境中的内核（[图
    6-6](ch06.xhtml#ch06fig6)）。
- en: '![Image](../images/06fig06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig06.jpg)'
- en: '*Figure 6-6: A new untitled notebook in the JupyterLab work area*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-6: JupyterLab 工作区中的新未命名笔记本*'
- en: Note that the tab for the notebook is marked with a colored top border (blue
    by default). The work area permits only one current activity, and this lets you
    know which tab is active.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，笔记本的标签上方有一个彩色的顶部边框（默认是蓝色）。工作区只允许一个当前活动，这让你知道哪个标签是激活的。
- en: If you read [Chapter 5](ch05.xhtml), you probably recognize the notebook interface,
    though there are a few changes relative to classic Notebook. The icons and menu
    choices along the top of the cell (the toolbar beneath the Untitled.ipynb tab),
    are more streamlined and simplified, and they share functionality with the more
    fully featured menu bar that runs along the top of the interface. Take a moment
    to hover over the toolbar icons, and then click the main menu items such as File,
    Edit, and Run to see the available options. These should be familiar to you from
    [Chapter 5](ch05.xhtml).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读了[第 5 章](ch05.xhtml)，你可能会认出笔记本界面，尽管相对于经典笔记本有一些变化。单元格顶部的图标和菜单选项（位于 Untitled.ipynb
    标签下方的工具栏）更简化、精炼，并且与运行在界面顶部的功能更全的菜单栏共享功能。花点时间将鼠标悬停在工具栏图标上，然后点击主菜单项，如文件、编辑和运行，查看可用的选项。这些功能应该你在[第
    5 章](ch05.xhtml)中已经熟悉。
- en: '***Naming the Notebook***'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***命名笔记本***'
- en: Now, let’s rename the notebook. You can do this in one of several ways. You
    can use **File** ▸ **Rename Notebook** from the main menu. Alternatively, you
    can open contextual menus by right-clicking the **Untitled.ipynb** tab or by right-clicking
    the filename in the file browser and selecting **Rename** ([Figure 6-7](ch06.xhtml#ch06fig7)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重命名笔记本。你可以通过几种方式来完成此操作。你可以从主菜单中选择**文件** ▸ **重命名笔记本**。另外，你也可以通过右键点击**Untitled.ipynb**标签页或在文件浏览器中右键点击文件名，然后选择**重命名**([图
    6-7](ch06.xhtml#ch06fig7))。
- en: '![Image](../images/06fig07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig07.jpg)'
- en: '*Figure 6-7: The file browser’s contextual menu for working with files*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-7：文件浏览器的上下文菜单，用于操作文件*'
- en: '**NOTE**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*JupyterLab comes with a lot of convenient contextual menus. Just about anything
    that’s clickable, including the blank area under notebook cells, has a menu available.*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*JupyterLab 配备了许多方便的上下文菜单。几乎所有可点击的区域，包括笔记本单元格下方的空白区域，都有可用的菜单。*'
- en: Use the context menu shown in [Figure 6-7](ch06.xhtml#ch06fig7) to name the
    notebook **globular.ipynb**. The notebook tab name should also change.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[图 6-7](ch06.xhtml#ch06fig7)中显示的上下文菜单将笔记本命名为**globular.ipynb**。笔记本标签页的名称也应该发生变化。
- en: '***Using Markdown Cells***'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 Markdown 单元格***'
- en: To make a descriptive header, click in the first cell and use the toolbar at
    the top of the notebook ([Figure 6-8](ch06.xhtml#ch06fig8)) to change the cell
    type from **Code** to **Markdown**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个描述性的标题，请点击第一个单元格并使用笔记本顶部的工具栏([图 6-8](ch06.xhtml#ch06fig8))将单元格类型从**代码**更改为**Markdown**。
- en: '![Image](../images/06fig08.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig08.jpg)'
- en: '*Figure 6-8: The Notebook toolbar*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-8：笔记本工具栏*'
- en: 'Now, enter the following and press CTRL-ENTER to run the cell:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入以下内容并按 CTRL-ENTER 运行单元格：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For more on Markdown, see “Adding Text with a Markdown Cell” on [page 102](ch05.xhtml#ch00lev2sec50).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Markdown 的更多信息，请参见[第 102 页](ch05.xhtml#ch00lev2sec50)中的“使用 Markdown 单元格添加文本”。
- en: '***Adding Code and Making Plots***'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加代码并绘制图形***'
- en: You could easily run the simulator code in a single cell, but for the sake of
    the narrative, let’s spread it over multiple cells. Creating modular programs
    like this has its advantages. For example, you can isolate the imports and data
    loads in the first cell, so you don’t need to rerun them every time you make a
    change in subsequent cells.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地在单个单元格中运行模拟器代码，但为了叙述方便，让我们将其分散到多个单元格中。像这样创建模块化程序有其优势。例如，你可以在第一个单元格中隔离导入和数据加载，这样你就不需要在修改后续单元格时每次都重新运行它们。
- en: 'Start by adding a new cell using the “+” from the notebook toolbar ([Figure
    6-8](ch06.xhtml#ch06fig8)). New cells are automatically code cells, so you’re
    ready to start coding. The first step is to import the libraries needed to build
    the simulation:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过使用笔记本工具栏中的“+”添加一个新单元格([图 6-8](ch06.xhtml#ch06fig8))。新单元格默认是代码单元格，因此你可以开始编码。第一步是导入构建模拟所需的库：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code starts with a magic command that makes Matplotlib plot *inline*. This
    means that it will plot to an output cell *within* the notebook. The next two
    lines import NumPy and Matplotlib. The final line selects Matplotlib’s dark theme
    for plots, so our white stars will have a black backdrop. Execute the cell by
    pressing SHIFT-ENTER, which runs the cell and adds a new code cell below, or click
    the triangular “play” icon ( ▸ ) in the toolbar ([Figure 6-8](ch06.xhtml#ch06fig8)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码从一个魔术命令开始，使 Matplotlib 在 *inline* 中绘图。这意味着它将在笔记本内部的输出单元格中绘制。接下来的两行导入 NumPy
    和 Matplotlib。最后一行选择 Matplotlib 的黑暗主题来绘制图形，这样我们的白色星星将在黑色背景下显示。按下 SHIFT-ENTER 运行该单元格，这将运行该单元格并在下方添加一个新的代码单元格，或者点击工具栏中的三角形“播放”图标（
    ▸ ）（参见 [图 6-8](ch06.xhtml#ch06fig8)）。
- en: 'Now define a generic function that creates a list of x, y, z coordinates arrayed
    in a spherical volume. In the new cell, enter the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在定义一个通用函数，创建一个球形体积中的 x、y、z 坐标列表。在新单元格中，输入以下内容：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The function takes as arguments the number of points (`num_pts`) and the radius
    of the sphere (`radius`). This determines the size of the cluster and how many
    stars it contains. You then create an empty list ➊ to hold the coordinates and
    loop through the number of points, each time drawing three random values from
    a normal distribution with a mean of 0 and a standard deviation of 1 ➋. These
    three values will represent the x, y, z coordinates of a star. Multiplying the
    coordinates by the radius stretches or shrinks the size of the cluster. At the
    end of each loop, you append the coordinates to the list and end the function
    by returning the list.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将点数 (`num_pts`) 和球体半径 (`radius`) 作为参数。这决定了星团的大小及其包含的星星数量。然后，创建一个空列表 ➊ 以保存坐标，并循环处理点数，每次从具有均值
    0 和标准差 1 的正态分布中绘制三个随机值 ➋。这三个值将表示星星的 x、y、z 坐标。将坐标乘以半径会拉伸或缩小星团的大小。在每次循环结束时，将坐标附加到列表中，并通过返回列表结束函数。
- en: Run the cell by pressing SHIFT-ENTER to add a new cell at the bottom of the
    notebook.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 SHIFT-ENTER 运行该单元格，以在笔记本底部添加一个新单元格。
- en: 'Now, create a globular cluster and plot it. In the new cell, enter the following
    code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个球状星团并将其绘制出来。在新单元格中，输入以下代码：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The “rim” variables represent the radius and number of stars for the full cluster.
    Generate the coordinates by calling your function. Then, call it again to generate
    coordinates for stars in the densely packed core region at the center of the cluster
    ➊. Notice how you can alter the input arguments as you pass them to the function,
    by dividing them by a scaling factor and ensuring that the number of stars variable
    remains an integer. You can play with these scalers to change the appearance of
    the core region.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: “边缘”变量表示整个星团的半径和星星数量。通过调用函数生成坐标。然后，再次调用该函数生成位于星团中心密集核心区域的星星的坐标 ➊。注意，您可以通过将它们除以缩放因子并确保星星数量变量保持整数来更改传递给函数的输入参数。您可以使用这些缩放器来改变核心区域的外观。
- en: Time to plot the stars. Don’t worry about Matplotlib’s arcane syntax for now;
    we’ll go into this in more detail later in the book. Basically, plots, referred
    to as `Axes` (`ax` for short), reside in `Figure` (`fig`) objects that serve as
    containers ➋. To make a single 3D `ax` object you call the `plt.subplots()` method
    and set the projection type to `3d`. Then, turn off the x-, y-, and z-axes of
    the plot; we want our cluster to float in the blackness of space.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是绘制星星的时候了。暂时不必担心 Matplotlib 的复杂语法；我们稍后会在本书中详细讨论这一点。基本上，绘图被称为 `Axes`（简称 `ax`）位于
    `Figure`（`fig`）对象中，这些对象作为容器 ➋。要创建一个单独的三维 `ax` 对象，您可以调用 `plt.subplots()` 方法，并将投影类型设置为
    `3d`。然后，关闭绘图的 x、y 和 z 轴；我们希望我们的星团漂浮在宇宙的黑暗中。
- en: 'To post the star points, call the `scatter()` method twice: once for the rim
    stars, and once for the core ➌. This lets you specify different point sizes for
    the two regions. The `scatter()` method expects x, y, z points, but the data is
    currently a list of lists, with each point’s coordinates in its own list:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布星点，请两次调用 `scatter()` 方法：一次用于边缘星星，一次用于核心 ➌。这使您可以为两个区域指定不同的点大小。`scatter()`
    方法期望 x、y、z 点，但数据当前是一个列表的列表，每个点的坐标在其自己的列表中：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To extract these coordinates, we’ll use Python’s built-in `zip()` function in
    conjunction with its *splat* (`*`) operator that unpacks multiple variables. Finish
    by setting the axis limits so their aspect ratio is equal and they’re big enough
    to hold the cluster ➍. By relating the limits to the `rim_radius` variable, rather
    than specifying an absolute size, the plot will automatically adjust if you change
    the radius value.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取这些坐标，我们将使用Python内置的`zip()`函数，并结合其*splat*（`*`）操作符来解包多个变量。最后通过设置坐标轴的限制，使它们的纵横比相等，并且足够大以容纳星团➍。通过将限制与`rim_radius`变量相关联，而不是指定绝对大小，如果你改变半径值，图表会自动调整。
- en: Press CTRL-ENTER to run the cell and generate the plot without adding a new
    cell. Your finished notebook should look like [Figure 6-9](ch06.xhtml#ch06fig9).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按CTRL-ENTER运行单元格并生成图表，而无需添加新单元格。你的完成笔记本应该如下所示：[图6-9](ch06.xhtml#ch06fig9)。
- en: '![Image](../images/06fig09.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig09.jpg)'
- en: '*Figure 6-9: The completed globular cluster notebook*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-9：完成的球状星团笔记本*'
- en: To save your work, on the toolbar, click the floppy disk icon, or use CTRL-S.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存工作，点击工具栏上的软盘图标，或者使用CTRL-S。
- en: '***Adding a Console***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加一个控制台***'
- en: Everything we’ve done to this point you could accomplish in the classic Jupyter
    Notebook app. Now let’s see what JupyterLab can bring to the table, namely the
    ability to work with multiple tabs connected to the same kernel.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的都可以在经典的Jupyter Notebook应用程序中完成。现在，让我们看看JupyterLab能带来什么，尤其是能够使用多个标签页连接到相同内核的功能。
- en: As you work with code, especially code that you inherit from teammates, you’ll
    want to investigate data types, list contents, function returns, and so on. Normally,
    investigating side issues would clutter up your notebook. But JupyterLab lets
    you open multiple tabs *and* connect these tabs to the running kernel. This allows
    you to perform exploratory work outside of your notebook yet still within the
    workspace.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理代码时，特别是继承自队友的代码，你可能需要检查数据类型、列表内容、函数返回值等。通常，调查这些副作用会让你的笔记本变得杂乱。但是，JupyterLab允许你打开多个标签页，并将这些标签页与正在运行的内核连接。这使得你可以在笔记本之外进行探索性工作，同时仍然处于工作空间内。
- en: To open a console connected to the current kernel, right-click in any cell and
    then, on the context menu that opens, select **New Console for Notebook**. A console
    should appear beneath your notebook, as depicted in [Figure 6-10](ch06.xhtml#ch06fig10).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开一个连接到当前内核的控制台，在任何单元格中右键点击，然后在打开的上下文菜单中选择**为笔记本新建控制台**。一个控制台应该会出现在笔记本下方，如[图6-10](ch06.xhtml#ch06fig10)所示。
- en: '![Image](../images/06fig10.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig10.jpg)'
- en: '*Figure 6-10: A new console linked to the globular.ipynb notebook*'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-10：一个新控制台链接到globular.ipynb笔记本*'
- en: 'To see the format of the coordinates in the `rim_stars` list, place your cursor
    in the empty box at the bottom of the console, enter the following, and then run
    it by pressing SHIFT-ENTER:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`rim_stars`列表中坐标的格式，将光标放在控制台底部的空框中，输入以下内容，然后按SHIFT-ENTER运行：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This displays the first three lines of the list:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示列表的前三行：
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can see that you’re dealing with a list of lists, and each nested list holds
    three float values, representing x, y, and z coordinates. Because the notebook
    and console share the same kernel, as soon as you run the notebook, any imports,
    variable assignments, function definitions, and so on become resident in memory
    and accessible to the console. You can even copy all of cell `[3]` into the console,
    tweak the parameters, and plot the results there, leaving your notebook untouched.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到你正在处理一个列表的列表，每个嵌套列表包含三个浮动值，分别表示x、y和z坐标。因为笔记本和控制台共享相同的内核，一旦你运行笔记本，任何导入、变量赋值、函数定义等都会驻留在内存中并可以被控制台访问。你甚至可以将单元格`[3]`的内容复制到控制台中，调整参数，并在那里绘制结果，而不会影响你的笔记本。
- en: To keep the console uncluttered, open its contextual menu and select **Clear
    Console Cells**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持控制台整洁，打开其上下文菜单并选择**清除控制台单元格**。
- en: '***Displaying an Image File***'
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***显示图像文件***'
- en: What if you want to compare your output to a photograph of a globular cluster,
    to help you tweak the input variables for a realistic-looking simulation? You
    could always add an image to a Markdown cell, but you might need to scroll down
    to see it, and you’ll have to remember to delete it later. To avoid that aggravation,
    you can display the image in a separate JupyterLab window.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将输出与球状星团的照片进行比较，以帮助你调整输入变量以获得真实感的模拟效果怎么办？你可以将图像添加到Markdown单元格中，但你可能需要向下滚动才能看到它，并且稍后必须记得删除它。为了避免这种麻烦，你可以在一个单独的JupyterLab窗口中显示该图像。
- en: To begin, go to the Wikimedia Commons internet site (*[https://commons.wikimedia.org/](https://commons.wikimedia.org/)*)
    and search for “The Great Globular Cluster in Hercules – M13.” Save or download
    the image to your *my_jlab_proj\data* folder. I used the 640-pixel resolution
    available at *[https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/The_Great_Globular_Cluster_in_Hercules_-_M13.jpg/640px-The_Great_Globular_Cluster_in_Hercules_-_M13.jpg](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/The_Great_Globular_Cluster_in_Hercules_-_M13.jpg/640px-The_Great_Globular_Cluster_in_Hercules_-_M13.jpg)*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问 Wikimedia Commons 网站 (*[https://commons.wikimedia.org/](https://commons.wikimedia.org/)*)，并搜索
    “The Great Globular Cluster in Hercules – M13”。将图片保存或下载到你的 *my_jlab_proj\data*
    文件夹。我使用了分辨率为 640 像素的版本，下载地址是 *[https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/The_Great_Globular_Cluster_in_Hercules_-_M13.jpg/640px-The_Great_Globular_Cluster_in_Hercules_-_M13.jpg](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/The_Great_Globular_Cluster_in_Hercules_-_M13.jpg/640px-The_Great_Globular_Cluster_in_Hercules_-_M13.jpg)*。
- en: Back in JupyterLab, navigate to the image in the file browser and open it by
    right-clicking the filename and then selecting **Open**, or by double-clicking
    it. Next, drag and stack both the new image pane and the console onto the right
    side of the screen to produce the layout shown in [Figure 6-11](ch06.xhtml#ch06fig11).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 JupyterLab，导航到文件浏览器中的图片并通过右键点击文件名选择**打开**，或者双击文件名来打开它。接下来，将新的图片面板和控制台拖动并堆叠到屏幕的右侧，以生成[图
    6-11](ch06.xhtml#ch06fig11)所示的布局。
- en: '![Image](../images/06fig11.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig11.jpg)'
- en: '*Figure 6-11: Our final workspace with file browser (left), notebook (center),
    console (upper right), and .jpg image (lower right)*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-11：我们的最终工作区，包含文件浏览器（左）、笔记本（中）、控制台（右上）和 .jpg 图片（右下）*'
- en: A workspace much like this, with the file browser, notebook, and console, is
    a nice setup for a beginner.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似这样的工作区，包含文件浏览器、笔记本和控制台，是初学者的理想设置。
- en: '***Exploring the Simulation***'
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***探索仿真***'
- en: 'You can change the appearance of the simulation by opening it in an external
    window, changing the background color, adding gridlines, and so on. To explore
    the simulation in 3D, change the first line in cell `[1]` to this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在外部窗口中打开仿真，改变背景色，添加网格线等方式来改变仿真的外观。要以 3D 模式探索仿真，可以将单元格 `[1]` 中的第一行更改为：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Then, select **Run** ▸ **Run All Cells** from the main menu. This opens an external
    Qt window that will let you spin the cluster around to view it from all sides.
    Check your task bar if the window doesn’t appear on its own.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从主菜单中选择 **运行** ▸ **运行所有单元**。这将打开一个外部 Qt 窗口，允许你旋转该星团并从各个角度查看它。如果窗口没有自动弹出，请检查任务栏。
- en: 'If you want to see the plot’s 3D grid, it’s best to use a negative image. First,
    find and comment-out the following two lines using the CTRL / or CMD / shortcut:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到图形的 3D 网格，最好使用负像素图像。首先，使用 CTRL / 或 CMD / 快捷键找到并注释掉以下两行：
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, change the star color to black:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将恒星的颜色改为黑色：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save the notebook as *globular_black.ipynb* and run all cells. You might need
    to restart the kernel to clear the dark background plot style. If so, from the
    menu bar select **Kernel** ▸ **Restart Kernel and Run All Cells**. You should
    get the plot shown in [Figure 6-12](ch06.xhtml#ch06fig12).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 将笔记本保存为 *globular_black.ipynb* 并运行所有单元。你可能需要重启内核来清除黑色背景的图形样式。如果需要，从菜单栏选择 **内核**
    ▸ **重启内核并运行所有单元**。你应该会看到[图 6-12](ch06.xhtml#ch06fig12)所示的图形。
- en: '![Image](../images/06fig12.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig12.jpg)'
- en: '*Figure 6-12: The “black” cluster simulation with grid lines*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-12：带有网格线的“黑色”星团仿真*'
- en: '**NOTE**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can use the jupyterlab-matplotlib extension to interact with plots within
    a notebook output cell. We’ll look at JupyterLab extensions later in this chapter.*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以使用 jupyterlab-matplotlib 扩展在笔记本输出单元中与图形进行交互。我们将在本章稍后讨论 JupyterLab 扩展。*'
- en: '***Opening Multiple Notebooks***'
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***打开多个笔记本***'
- en: One advantage of JupyterLab is that it lets you work on multiple Notebook projects
    at once. Let’s assume that you want to make an edit to the *geyser.ipynb* file
    that you made in [Chapter 5](ch05.xhtml). With JupyterLab, you can navigate to
    the notebook in the file manager and double-click it to open a new tab ([Figure
    6-13](ch06.xhtml#ch06fig13)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 的一个优点是它允许你同时处理多个笔记本项目。假设你想编辑在[第 5 章](ch05.xhtml)中制作的 *geyser.ipynb*
    文件。在 JupyterLab 中，你可以通过文件管理器找到该笔记本并双击它来打开一个新的标签页（[图 6-13](ch06.xhtml#ch06fig13)）。
- en: '![Image](../images/06fig13.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig13.jpg)'
- en: '*Figure 6-13: Two notebooks open in the same browser window*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-13：在同一浏览器窗口中打开的两个笔记本*'
- en: You now have two notebooks open in the same browser window, and they use different
    kernels, as indicated in the upper-right corner of each notebook.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在在同一个浏览器窗口中打开了两个笔记本，它们使用不同的内核，如每个笔记本右上角所示。
- en: '***Saving the Workspace***'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保存工作区***'
- en: Documents within a workspace, such as Jupyter notebooks and text files, can
    be saved using standard commands like CTRL-S, **File** ▸ **Save Notebook**, and
    so forth. In addition, the *layout* of your workspace (that is, the tabs you have
    open, their arrangement, and their content) can be saved as a **.jupyterlab-workspace*
    file.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 工作区中的文档，如 Jupyter 笔记本和文本文件，可以使用标准命令进行保存，如 CTRL-S、**文件** ▸ **保存笔记本**等。此外，您的工作区的
    *布局*（即您打开的标签页、它们的排列以及内容）可以作为 **.jupyterlab-workspace** 文件保存。
- en: If you plan on using your current layout multiple times, or if you plan on having
    multiple project-dependent layouts, you’ll want to give each workspace a unique
    name. To store this layout file in your project folder, go to the JupyterLab file
    browser and ensure that you’re in the *my_jlab_proj* folder. Next, use the New
    Folder icon (a folder with a “+” in it) to create a folder named *workspaces*
    ([Figure 6-14](ch06.xhtml#ch06fig14)). Now open this folder.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算多次使用当前布局，或者打算拥有多个依赖项目的布局，您需要为每个工作区提供一个独特的名称。要将此布局文件存储在项目文件夹中，请转到 JupyterLab
    文件浏览器，确保您在 *my_jlab_proj* 文件夹中。接下来，使用新建文件夹图标（一个带有“+”的文件夹）创建一个名为 *workspaces* 的文件夹（[图
    6-14](ch06.xhtml#ch06fig14)）。然后打开此文件夹。
- en: '![Image](../images/06fig14.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig14.jpg)'
- en: '*Figure 6-14: Adding the workspaces folder*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-14：添加工作区文件夹*'
- en: 'To preserve the current state of JupyterLab, on the menu bar, select **File**
    ▸ **Save Current Workspace As**. A pop-up window will ask you for a name, in the
    following format:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存当前的 JupyterLab 状态，请在菜单栏中选择 **文件** ▸ **另存为当前工作区**。弹出窗口会要求您输入名称，格式如下：
- en: '*my_jlab_proj/new-workspace.jupyterlab-workspace*'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*my_jlab_proj/new-workspace.jupyterlab-workspace*'
- en: 'Change the *new-workspace* text to *globular* and then click **Save**:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *new-workspace* 文本改为 *globular* 然后点击 **保存**：
- en: '*my_jlab_proj/globular.jupyterlab-workspace*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*my_jlab_proj/globular.jupyterlab-workspace*'
- en: To restore to a saved workspace, just open the *.jupyterlab-workspace* file.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复到已保存的工作区，只需打开 *.jupyterlab-workspace* 文件。
- en: '***Clearing the Workspace***'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***清空工作区***'
- en: 'To clear the contents of a workspace, use the `reset` URL parameter. The example
    here shows the general format:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要清空工作区的内容，请使用 `reset` URL 参数。这里的示例展示了其一般格式：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For example, to reset our globular workspace, in your browser’s address bar,
    use `reset`, as shown here:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要重置我们的球形工作区，在浏览器的地址栏中使用`reset`，如下所示：
- en: '[PRE28]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will configure your workspace similar to that shown in [Figure 6-3](ch06.xhtml#ch06fig3).
    You can still restore the previous layout if you saved it in a *.jupyterlab-workspace*
    file, as described in the previous section.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置您的工作区，类似于 [图 6-3](ch06.xhtml#ch06fig3) 中所示的内容。如果您已按照上一节中的描述保存了之前的布局，仍然可以恢复该布局。
- en: For more on managing workspaces, visit *[https://jupyterlab.readthedocs.io/en/stable/user/urls.html](https://jupyterlab.readthedocs.io/en/stable/user/urls.html)*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于管理工作区的信息，请访问 *[https://jupyterlab.readthedocs.io/en/stable/user/urls.html](https://jupyterlab.readthedocs.io/en/stable/user/urls.html)*。
- en: '***Closing the Workspace***'
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关闭工作区***'
- en: As with Jupyter Notebook, simply closing the browser tab does not stop JupyterLab.
    To completely shut it down, on the menu bar, use **File** ▸ **Shut Down**. If
    you are logged in to another server rather than working locally, you can log out
    using **File** ▸ **Log Out**.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Jupyter Notebook 一样，仅仅关闭浏览器标签页并不会停止 JupyterLab。要完全关闭它，请在菜单栏上选择 **文件** ▸ **关闭**。如果您登录的是另一服务器而不是本地工作，您可以使用
    **文件** ▸ **登出** 来退出。
- en: '**NOTE**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Be aware that some service providers, such as universities, might have specific
    logout procedures for their servers. Not following these protocols can waste allocated
    time resources and can result in unexpected usage fees.*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，一些服务提供商（如大学）可能有特定的服务器登出程序。未遵循这些程序可能会浪费分配的时间资源，并导致意外的使用费用。*'
- en: '**Taking Advantage of the JupyterLab Interface**'
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**利用 JupyterLab 界面**'
- en: Hopefully, the previous example gave you an appreciation for the JupyterLab
    interface. In the sections that follow, we’ll take a closer look at some of its
    myriad components and controls. Many of these are self-explanatory, so we’ll focus
    on the most useful and less intuitive ones.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 希望之前的示例让您对 JupyterLab 界面有所了解。在接下来的章节中，我们将更详细地看一下它的一些组件和控件。很多这些都是不言而喻的，因此我们将重点关注最有用和不太直观的部分。
- en: As you saw in the globular cluster exercise, the work area lets you tie tools
    together in a customized layout. It also brings some nice features to Jupyter
    notebooks, including the ability to rearrange a notebook by dragging and dropping
    cells, dragging cells between notebooks to copy content, and creating multiple
    synchronized views of the same notebook.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在球状星团练习中看到的，工作区允许你通过自定义布局将工具组合在一起。它还为Jupyter笔记本带来了一些不错的功能，包括通过拖拽单元格重新排列笔记本、在笔记本之间拖拽单元格以复制内容，以及创建多个相同笔记本的同步视图。
- en: '***Creating Synchronized Views***'
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建同步视图***'
- en: Let’s look at the last case on synchronized views. It’s not uncommon to want
    to look at both the top and bottom of a long notebook at the same time, or to
    scroll down to see interactive output. To manage this, JupyterLab lets you open
    the same notebook more than once.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下关于同步视图的最后一个案例。你可能经常需要同时查看一个长笔记本的顶部和底部，或者向下滚动查看交互式输出。为了管理这一需求，JupyterLab允许你多次打开同一个笔记本。
- en: To see how this works, in the globular cluster session, click in the *globular*
    notebook and then select **File** ▸ **New View for Notebook**. Next, arrange the
    layout so that the two notebooks are side by side. Then, shorten your browser
    window so that you can’t see the entire notebook along with its output, mimicking
    a long notebook. In the left-hand notebook, scroll up to see the code. In the
    right-hand notebook, scroll down to see the plot, as in [Figure 6-15](ch06.xhtml#ch06fig15).
    Now, rerun the cells in the first notebook. The plot on the right should update.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这个是如何工作的，在球状星团会话中，点击*globular*笔记本，然后选择**文件** ▸ **为笔记本创建新视图**。接下来，调整布局，使两个笔记本并排显示。然后，缩小浏览器窗口，使其无法显示完整的笔记本及其输出，模拟一个长笔记本。在左侧笔记本中，向上滚动查看代码。在右侧笔记本中，向下滚动查看图表，如[图
    6-15](ch06.xhtml#ch06fig15)所示。现在，重新运行第一个笔记本中的单元格。右侧的图表应该会更新。
- en: '![Image](../images/06fig15.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig15.jpg)'
- en: '*Figure 6-15: A synchronized view of the same notebook in different tabs*'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-15：不同标签页中相同笔记本的同步视图*'
- en: Alternatively, you can move the output cell into a new pane. Simply open a context
    menu in the output cell containing the globular cluster simulation and then select
    **Create New View for Output** ([Figure 6-16](ch06.xhtml#ch06fig16)). You then
    can drag it wherever you want in the workspace.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以将输出单元格移动到一个新窗格中。只需在包含球状星团模拟的输出单元格中打开上下文菜单，然后选择**为输出创建新视图**（[图 6-16](ch06.xhtml#ch06fig16)）。然后，你可以将它拖动到工作区中的任何位置。
- en: If you use sliders or other widgets to interactively change parameters and update
    the visualization, these will be included in the new view. This lets you create
    pseudo-dashboards within your workspace.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用滑块或其他小部件来交互式地更改参数并更新可视化，这些也会包含在新的视图中。这使你可以在工作区内创建伪仪表板。
- en: '***Copying Cells Between Notebooks***'
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在笔记本之间复制单元格***'
- en: To drag and copy cells between notebooks, open a new notebook using **File**
    ▸ **New** ▸ **Notebook**. Drag the new notebook beside the *globular* notebook.
    From the *globular* notebook, click your cursor on a cell *number* (such as `[1]:`)
    and drag it into the new untitled notebook. You should see results similar to
    that shown in [Figure 6-17](ch06.xhtml#ch06fig17).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要在笔记本之间拖拽并复制单元格，使用**文件** ▸ **新建** ▸ **笔记本**打开一个新笔记本。将新笔记本拖到*globular*笔记本旁边。在*globular*笔记本中，点击一个单元格*编号*（例如`[1]:`），并将其拖动到新的未命名笔记本中。你应该看到类似[图
    6-17](ch06.xhtml#ch06fig17)所示的结果。
- en: '![Image](../images/06fig16.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig16.jpg)'
- en: '*Figure 6-16: The globular cluster notebook with the output cell in a separate
    pane*'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-16：带有输出单元格的球状星团笔记本，输出单元格位于一个单独的窗格中*'
- en: '![Image](../images/06fig17.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig17.jpg)'
- en: '*Figure 6-17: Results of dragging the first cell from the left-hand notebook
    into the right-hand notebook*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-17：将左侧笔记本中的第一个单元格拖入右侧笔记本的结果*'
- en: '***Staying Focused by Using Single Document Mode***'
  id: totrans-222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过使用单文档模式保持专注***'
- en: A nice thing about classic Jupyter Notebook is that you can focus on a task
    without the app “getting in your way.” The JupyterLab developers took note of
    this and included a setting that lets you concentrate on a single document or
    activity without having to close all the other tabs in the main work area.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的Jupyter笔记本有一个优点，那就是你可以专注于一个任务，而不必让应用程序“干扰”你。JupyterLab的开发者注意到这一点，并加入了一个设置，允许你专注于单个文档或活动，而无需关闭主工作区中的所有其他标签。
- en: To toggle on this setting, activate a tab by clicking it, and then, from the
    menu bar, select **View** ▸ **Simple Interface**, or use the **Simple** toggle
    switch at the lower-left corner of the JupyterLab window. The workspace should
    show only the active tab. If you toggle this on and off for the *globular* workspace,
    you might detect a drawback. When you return to the regular view, you *may* lose
    your preferred tab arrangement (compare [Figure 6-18](ch06.xhtml#ch06fig18) to
    6-11).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用此设置，通过点击标签激活该标签，然后从菜单栏中选择 **视图** ▸ **简单界面**，或使用 JupyterLab 窗口左下角的 **简单**
    切换开关。工作区将仅显示活动标签。如果你在 *球形* 工作区上开启和关闭此设置，可能会发现一个缺点。当你返回常规视图时，你 *可能* 会丢失你偏好的标签排列（比较
    [图 6-18](ch06.xhtml#ch06fig18) 和 6-11）。
- en: '![Image](../images/06fig18.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig18.jpg)'
- en: '*Figure 6-18: The workspace tab arrangement after toggling off Simple Interface
    mode for the globular session*'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-18：关闭简单界面模式后，球形会话的工作区标签排列*'
- en: If your view does change, you can restore the original layout either manually
    or by using a saved *.jupyterlab-workspace* file. Because this is a bit tedious,
    you’ll only want to use simple interface options when you plan to spend a long
    time in a single document or activity.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果视图发生变化，你可以通过手动操作或使用已保存的 *.jupyterlab-workspace* 文件来恢复原始布局。由于这有点繁琐，当你打算长时间停留在单个文档或活动中时，你可能只想使用简单界面选项。
- en: '**Using the Text Editor**'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用文本编辑器**'
- en: JupyterLab includes a text editor that you can use to write Python scripts.
    We didn’t cover this in our *globular* session, so let’s work a simple example
    here using the Pythagorean theorem. This is the famous *a*² + *b*² = *c*² formula
    used to find the hypotenuse of a right triangle.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 包括一个文本编辑器，你可以用它来编写 Python 脚本。在我们的 *球形* 会话中没有涉及这个内容，所以这里我们通过一个简单的例子来讲解，使用勾股定理。这个著名的
    *a*² + *b*² = *c*² 公式用于求直角三角形的斜边。
- en: 'If you’ve closed JupyterLab, start it from your *base* environment. Open Anaconda
    Prompt (Windows) or a terminal (macOS or Linux), and then enter the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经关闭了 JupyterLab，从你的 *base* 环境启动它。打开 Anaconda 提示符（Windows）或终端（macOS 或 Linux），然后输入以下命令：
- en: '[PRE29]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This should open the default layout shown in [Figure 6-3](ch06.xhtml#ch06fig3).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会打开默认布局，如 [图 6-3](ch06.xhtml#ch06fig3) 所示。
- en: 'If you already have JupyterLab up and running, return to the default workspace
    by editing the URL so that it ends in */lab*. For example:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经启动了 JupyterLab，可以通过编辑 URL 将其结尾改为 */lab* 来返回默认工作区。例如：
- en: '*http://localhost :8888/lab*'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*http://localhost:8888/lab*'
- en: 'If for some reason your workspace doesn’t look like the one in [Figure 6-3](ch06.xhtml#ch06fig3),
    reset it by adding the *?reset* URL parameter, like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因你的工作区看起来与 [图 6-3](ch06.xhtml#ch06fig3) 中的不同，可以通过添加 *?reset* URL 参数来重置它，如下所示：
- en: '*http://localhost:8888/lab?reset*'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '*http://localhost:8888/lab?reset*'
- en: 'Now, from the Launcher pane, start a new text file or Python file. A new tab
    should open for the untitled file. Click in the file and enter this:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从启动器面板中，启动一个新的文本文件或 Python 文件。一个新的标签页应该会为未命名文件打开。点击文件并输入以下内容：
- en: '[PRE30]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: From the menu bar, select **File** ▸ **Save As** (or **File** ▸ **Save Python
    File As** if you chose the Python file option) and name the file *pythagoras.py*.
    When you click **Save**, the file should appear in your file browser. If you go
    back and click the File menu again, you’ll note that the save options are now
    **Save Python File** and **Save Python File As**, even if you started with a text
    file. JupyterLab now recognizes that this as a Python file.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜单栏中，选择 **文件** ▸ **另存为**（如果你选择了 Python 文件选项，则选择 **文件** ▸ **另存 Python 文件为**），并将文件命名为
    *pythagoras.py*。当你点击 **保存** 时，文件应该会出现在文件浏览器中。如果你回到并再次点击文件菜单，你会注意到保存选项现在变成了 **保存
    Python 文件** 和 **另存 Python 文件为**，即使你最初选择的是文本文件。JupyterLab 现在已经识别这是一个 Python 文件。
- en: You’ll need to save scripts before you run them. You can tell if a file has
    been saved by looking at the tab. Unsaved files will have a black dot adjacent
    to the filename, and saved files will have an X ([Figure 6-19](ch06.xhtml#ch06fig19)).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行脚本之前，你需要保存它们。你可以通过查看标签来判断文件是否已保存。未保存的文件会在文件名旁边显示一个黑点，而已保存的文件则会显示一个 X（[图 6-19](ch06.xhtml#ch06fig19)）。
- en: '![Image](../images/06fig19.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig19.jpg)'
- en: '*Figure 6-19: An unsaved text file with • in the tab versus a saved text file
    with X in the tab*'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-19：未保存的文本文件标签上有•，而保存的文本文件标签上有X*'
- en: Although the JupyterLab text editor is not as robust as the one in Spyder ([Chapter
    4](ch04.xhtml)), it’s more sophisticated than a simple editor such as Notepad.
    If you click **Settings** on the menu bar, you’ll see several submenus for altering
    its appearance and behavior, as illustrated in [Figure 6-20](ch06.xhtml#ch06fig20).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 JupyterLab 文本编辑器不像 Spyder 的编辑器那样强大（[第 4 章](ch04.xhtml)），但它比像记事本这样的简单编辑器更为精致。如果你在菜单栏上点击
    **设置**，你会看到多个子菜单，可以用来更改其外观和行为，如 [图 6-20](ch06.xhtml#ch06fig20) 所示。
- en: '![Image](../images/06fig20.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig20.jpg)'
- en: '*Figure 6-20: The Settings menu*'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-20：设置菜单*'
- en: There’s a Key Map that lets you use the same keys as those used by the Sublime
    Text, vim, and emacs editors. There are multiple Editor Theme choices, options
    to change the font size, set tab indention levels, and automatically close brackets.
    Under the Advanced Settings Editor, you can change the Editor’s configuration
    file. Keyboard shortcuts are also available and depend on which key mapping you
    chose. You can perform an online search for a list of each map’s key bindings.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个键盘映射可以让你使用与 Sublime Text、vim 和 emacs 编辑器相同的快捷键。还有多种编辑器主题选择，能够更改字体大小，设置制表符缩进级别，并自动关闭括号。在高级设置编辑器中，你可以更改编辑器的配置文件。键盘快捷键也可以使用，具体取决于你选择的键盘映射。你可以在线搜索各个映射的键位绑定列表。
- en: By default, the editor uses the *Plain Text* syntax highlighting style, but
    you can choose from an exhaustive list by selecting **View** ▸ **Text Editor Syntax
    Highlighting** (or **Text Editor Theme**) from the menu bar. Going forward, I
    will use the default Jupyter theme, key map, and syntax highlighting. For more
    on highlighting, see [Chapter 3](ch03.xhtml).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，编辑器使用 *纯文本* 语法高亮样式，但你可以通过选择菜单栏上的 **视图** ▸ **文本编辑器语法高亮**（或 **文本编辑器主题**）从完整的列表中选择其他样式。往后，我将使用默认的
    Jupyter 主题、键盘映射和语法高亮样式。有关高亮的更多信息，请参见 [第 3 章](ch03.xhtml)。
- en: Back to our script. You have several options for running the code that you wrote
    in the editor. In the following sections, we’ll look at options involving a terminal
    and a notebook.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的脚本。你有几种方法可以运行你在编辑器中编写的代码。在接下来的部分，我们将介绍通过终端和笔记本运行代码的选项。
- en: '***Running a Script in a Terminal***'
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在终端中运行脚本***'
- en: 'To run the saved *pythagoras.py* file in a terminal emulator, on the menu bar,
    select **File** ▸ **New** ▸ **Terminal**. Next, click in the terminal pane and
    enter the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要在终端模拟器中运行已保存的 *pythagoras.py* 文件，在菜单栏上选择 **文件** ▸ **新建** ▸ **终端**。接着，点击终端面板并输入以下内容：
- en: '[PRE31]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Press ENTER, and the script should run ([Figure 6-21](ch06.xhtml#ch06fig21)).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER，脚本应该会运行（[图 6-21](ch06.xhtml#ch06fig21)）。
- en: '![Image](../images/06fig21.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig21.jpg)'
- en: '*Figure 6-21: Running a Python file in a terminal pane*'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-21：在终端面板中运行 Python 文件*'
- en: 'Depending on your machine, you might need to use `python3` in place of `python`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的计算机设置，你可能需要使用 `python3` 替代 `python`：
- en: '[PRE32]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you edit the Python file and want to rerun it in the terminal, remember that
    you can use the arrow keys to select previous commands, saving you keystrokes.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编辑了 Python 文件并想在终端中重新运行它，请记住，你可以使用箭头键选择之前的命令，从而节省敲击键盘的时间。
- en: '***Running a Script in a Notebook***'
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在笔记本中运行脚本***'
- en: 'To run the saved *pythagoras.py* file in a notebook, on the menu bar, select
    **File** ▸ **New** ▸ **Notebook**. If prompted for a kernel, accept **Python3**
    or choose the one in **my_jlab_proj_env** from the pull-down menu. Next, click
    in the notebook cell and enter the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要在笔记本中运行已保存的 *pythagoras.py* 文件，在菜单栏上选择 **文件** ▸ **新建** ▸ **笔记本**。如果系统提示选择内核，请接受
    **Python3** 或从下拉菜单中选择 **my_jlab_proj_env** 中的内核。接着，点击笔记本单元格并输入以下内容：
- en: '[PRE33]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Press CTRL-ENTER, and you should see the output in the notebook ([Figure 6-22](ch06.xhtml#ch06fig22)).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 CTRL-ENTER，你应该会在笔记本中看到输出结果（[图 6-22](ch06.xhtml#ch06fig22)）。
- en: '![Image](../images/06fig22.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig22.jpg)'
- en: '*Figure 6-22: Running a Python file in a notebook*'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-22：在笔记本中运行 Python 文件*'
- en: Note that you don’t need to save or rename the notebook to use it to run scripts.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你无需保存或重命名笔记本就可以使用它来运行脚本。
- en: '***Simultaneously Writing and Documenting Code***'
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***同时编写和记录代码***'
- en: JupyterLab lets you document your code, check that the code in the document
    runs, and preview the results, all in a single workspace. Let’s look at an example.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 允许你在一个工作空间内编写文档代码、检查文档中的代码是否能运行，并预览结果。让我们来看一个例子。
- en: 'In the file browser, navigate to your user directory. Open a new text editor
    from the menu bar using **File** ▸ **New** ▸ **Text File**. Rename it *doc.md*
    (*.md* files are plaintext format files that use Markdown language, like Notebook’s
    Markdown Cells), and then enter the following:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件浏览器中，导航到你的用户目录。通过菜单栏中的**文件** ▸ **新建** ▸ **文本文件**打开一个新的文本编辑器。将其重命名为 *doc.md*（*.md*
    文件是使用 Markdown 语言的纯文本格式文件，就像 Notebook 的 Markdown 单元），然后输入以下内容：
- en: '[PRE34]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, in the Editor pane, open a context menu and then select **Show Markdown
    Preview**.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在编辑器窗格中，打开上下文菜单，然后选择**显示 Markdown 预览**。
- en: 'Back in the editor, enter the following:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回编辑器，输入以下内容：
- en: '[PRE35]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the editor pane, open a context menu and then select **Create Console for
    Editor**. If prompted for a kernel, choose one with Matplotlib installed, such
    as `Python [conda env:my_jlab_proj_env]`. Now, copy into the console the preceding
    code, starting with the import statement, and then run it using SHIFT-ENTER.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器窗格中，打开上下文菜单，然后选择**为编辑器创建控制台**。如果系统提示选择内核，选择一个已安装 Matplotlib 的内核，例如 `Python
    [conda env:my_jlab_proj_env]`。现在，将前面的代码（包括导入语句）复制到控制台中，然后使用 SHIFT-ENTER 执行。
- en: 'Next, enter the following code into the editor to show the plot in the Markdown
    preview:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在编辑器中输入以下代码，以便在 Markdown 预览中显示图表：
- en: '[PRE36]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Your layout should look similar to [Figure 6-23](ch06.xhtml#ch06fig23).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你的布局应该类似于 [图 6-23](ch06.xhtml#ch06fig23)。
- en: You can also use the **Create Console for Editor** option to run code in the
    text editor. After opening the console, highlight the code inside the editor and
    then select **Run** ▸ **Run Code** from the menu.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用**为编辑器创建控制台**选项在文本编辑器中运行代码。打开控制台后，突出显示编辑器中的代码，然后从菜单中选择**运行** ▸ **运行代码**。
- en: JupyterLab’s versatile layouts and sharable kernels support efficient workflows
    that boost productivity. If you find yourself constantly switching tabs and scrolling
    through panes while writing code, you might not be taking full advantage of JupyterLab’s
    capabilities.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 的多样化布局和可共享内核支持高效的工作流程，从而提高生产力。如果你在编写代码时总是不断切换标签和滚动窗格，你可能没有充分利用 JupyterLab
    的全部功能。
- en: '![Image](../images/06fig23.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig23.jpg)'
- en: '*Figure 6-23: Previewing code using an Editor, Console, and Markdown pane*'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-23：使用编辑器、控制台和 Markdown 窗格预览代码*'
- en: '**Using JupyterLab Extensions**'
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 JupyterLab 扩展**'
- en: JupyterLab extensions are plug-and-play add-ons to “extend” the functionality
    of JupyterLab. Each extension may contain one or more plug-ins (the basic unit
    of extensibility). Extensions can be created by anyone, including yourself. To
    quote the documentation, “[the] whole of JupyterLab itself is simply a collection
    of extensions that are no more powerful or privileged than any custom extension.”
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 扩展是即插即用的插件，用于“扩展” JupyterLab 的功能。每个扩展可以包含一个或多个插件（可扩展性的基本单元）。扩展可以由任何人创建，包括你自己。引用文档中的话，“[JupyterLab]
    本身就是一系列扩展的集合，它们没有比任何自定义扩展更强大或更具特权。”
- en: A small subset of popular JupyterLab extensions is listed in [Table 6-1](ch06.xhtml#ch06tab1).
    Some previous popular extensions, such as the Table of Contents and Debugger extensions,
    are now built in to JupyterLab. There are also extensions for working with plotting
    and dashboarding libraries such as Plotly, Bokeh, and Dash. We look at those libraries
    in [Chapter 16](ch16.xhtml).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 一小部分流行的 JupyterLab 扩展列在 [表 6-1](ch06.xhtml#ch06tab1) 中。一些以前流行的扩展，如目录和调试器扩展，现在已经内置到
    JupyterLab 中。还有一些用于处理绘图和仪表盘库（如 Plotly、Bokeh 和 Dash）的扩展。我们将在 [第 16 章](ch16.xhtml)
    中讨论这些库。
- en: 'JupyterLab extensions contain JavaScript that’s run in the browser. There are
    two types of extensions: *source* and *prebuilt*. Activating a source extension
    requires installation of Node.js and a rebuild of JupyterLab. Prebuilt extensions
    such as those published as Python packages do not require a rebuild of JupyterLab.
    Extensions can also include a server-side component necessary for the extension
    to function.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 扩展包含在浏览器中运行的 JavaScript。扩展有两种类型：*源代码*和*预构建*。激活源代码扩展需要安装 Node.js 并重建
    JupyterLab。而预构建的扩展（如以 Python 包发布的扩展）不需要重建 JupyterLab。扩展还可以包括必要的服务器端组件，供扩展功能使用。
- en: '**Table 6-1:** Useful JupyterLab Extensions'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 6-1：** 有用的 JupyterLab 扩展'
- en: '| **Extension** | **Description** | **Website** |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| **扩展** | **描述** | **网站** |'
- en: '| --- | --- | --- |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| nbdime | Tools for diffing and merging Jupyter notebooks | *[https://nbdime.readthedocs.io/en/latest/](https://nbdime.readthedocs.io/en/latest/)*
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| nbdime | 用于比较和合并 Jupyter 笔记本的工具 | *[https://nbdime.readthedocs.io/en/latest/](https://nbdime.readthedocs.io/en/latest/)*
    |'
- en: '| jupyterlab-git | Version control using Git | *[https://github.com/jupyterlab/jupyterlab-git/](https://github.com/jupyterlab/jupyterlab-git/)*
    |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| jupyterlab-git | 使用 Git 进行版本控制 | *[https://github.com/jupyterlab/jupyterlab-git/](https://github.com/jupyterlab/jupyterlab-git/)*
    |'
- en: '| JupyterLab GitHub | Access notebooks from repositories | *[https://www.npmjs.com/package/@jupyterlab/github/](https://www.npmjs.com/package/@jupyterlab/github/)*
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| JupyterLab GitHub | 从仓库访问笔记本 | *[https://www.npmjs.com/package/@jupyterlab/github/](https://www.npmjs.com/package/@jupyterlab/github/)*
    |'
- en: '| Jupyter-ML Workspace | IDE dedicated to machine learning | *[https://github.com/ml-tooling/ml-workspace/](https://github.com/ml-tooling/ml-workspace/)*
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| Jupyter-ML 工作区 | 专为机器学习设计的 IDE | *[https://github.com/ml-tooling/ml-workspace/](https://github.com/ml-tooling/ml-workspace/)*
    |'
- en: '| JupyterLab System Monitor | Monitor memory and CPU usage | *[https://github.com/jtpio/jupyterlab-system-monitor/](https://github.com/jtpio/jupyterlab-system-monitor/)*
    |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| JupyterLab 系统监控 | 监控内存和 CPU 使用情况 | *[https://github.com/jtpio/jupyterlab-system-monitor/](https://github.com/jtpio/jupyterlab-system-monitor/)*
    |'
- en: '| jupyterlab_html | View rendered HTML files | *[https://github.com/mflevine/jupyterlab_html](https://github.com/mflevine/jupyterlab_html)*
    |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| jupyterlab_html | 查看渲染后的 HTML 文件 | *[https://github.com/mflevine/jupyterlab_html](https://github.com/mflevine/jupyterlab_html)*
    |'
- en: '| jupyterlab matplotlib | Interactive inline Matplotlib | *[https://github.com/matplotlib/ipympl/](https://github.com/matplotlib/ipympl/)*
    |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| jupyterlab matplotlib | 交互式内联 Matplotlib | *[https://github.com/matplotlib/ipympl/](https://github.com/matplotlib/ipympl/)*
    |'
- en: '| JupyterLab LaTeX | Live-edit LaTeX documents | *[https://github.com/jupyterlab/jupyterlab-latex/](https://github.com/jupyterlab/jupyterlab-latex/)*
    |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| JupyterLab LaTeX | 实时编辑 LaTeX 文档 | *[https://github.com/jupyterlab/jupyterlab-latex/](https://github.com/jupyterlab/jupyterlab-latex/)*
    |'
- en: '| JupyterLab Code Formatter | Use formatters like Black or Autopep8 to enforce
    style guidelines | *[https://github.com/ryantam626/jupyterlab_code_formatter/](https://github.com/ryantam626/jupyterlab_code_formatter/)*
    |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| JupyterLab 代码格式化工具 | 使用 Black 或 Autopep8 等格式化工具来强制执行风格指南 | *[https://github.com/ryantam626/jupyterlab_code_formatter/](https://github.com/ryantam626/jupyterlab_code_formatter/)*
    |'
- en: '| jupyterlab-spellchecker | Spellchecker for Markdown cells and text files
    | *[https://github.com/ocordes/jupyterlab_spellchecker/](https://github.com/ocordes/jupyterlab_spellchecker/)*
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| jupyterlab-spellchecker | Markdown 单元和文本文件的拼写检查工具 | *[https://github.com/ocordes/jupyterlab_spellchecker/](https://github.com/ocordes/jupyterlab_spellchecker/)*
    |'
- en: '| jupyterlab-google-drive | Cloud storage via Google Drive | *[https://github.com/jupyterlab/jupyterlab-google-drive](https://github.com/jupyterlab/jupyterlab-google-drive)*
    |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| jupyterlab-google-drive | 通过 Google Drive 提供云存储 | *[https://github.com/jupyterlab/jupyterlab-google-drive](https://github.com/jupyterlab/jupyterlab-google-drive)*
    |'
- en: '**NOTE**'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The classic Jupyter Notebook extensions we reviewed in [Chapter 5](ch05.xhtml)
    are not compatible with JupyterLab. Even though many useful extensions have been
    ported over to JupyterLab, others are still being updated. If an extension you
    want is unavailable, be patient and check the Extension Manager periodically for
    changes. The extension’s website might also include news on updates.*'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们在[第 5 章](ch05.xhtml)中回顾的经典 Jupyter Notebook 扩展与 JupyterLab 不兼容。尽管许多有用的扩展已被移植到
    JupyterLab，但其他一些扩展仍在更新中。如果你想要的扩展不可用，请耐心等待，并定期检查扩展管理器以查看是否有更新。扩展的官方网站也可能会发布有关更新的新闻。*'
- en: '***Installing and Managing Extensions with the Extension Manager***'
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用扩展管理器安装和管理扩展***'
- en: You can use the Extension Manager on the left sidebar (see [Figure 6-3](ch06.xhtml#ch06fig3))
    to install and manage extensions that are distributed as single JavaScript packages
    on *npm*, the *node package manager* (*[https://www.npmjs.com/](https://www.npmjs.com/)*).
    The extension manager is off by default, but you can turn it on it by clicking
    the **Enable** button ([Figure 6-24](ch06.xhtml#ch06fig24)).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在左侧边栏使用扩展管理器（参见[图 6-3](ch06.xhtml#ch06fig3)）来安装和管理作为单个 JavaScript 包分发的扩展，这些包位于
    *npm*，即 *node 包管理器* 上（* [https://www.npmjs.com/](https://www.npmjs.com/)*）。扩展管理器默认是关闭的，但你可以通过点击
    **启用** 按钮来打开它（参见[图 6-24](ch06.xhtml#ch06fig24)）。
- en: '![Image](../images/06fig24.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig24.jpg)'
- en: '*Figure 6-24: Turning on the Extension Manager from the left sidebar*'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-24：从左侧边栏启用扩展管理器*'
- en: Installing extensions allows them to execute arbitrary code on the server, kernel,
    and browser. Because third-party extensions are not reviewed and may introduce
    security risks or contain malicious code, you’re asked to explicitly enable the
    action.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 安装扩展允许它们在服务器、内核和浏览器上执行任意代码。由于第三方扩展未经审查，可能会引入安全风险或包含恶意代码，因此需要明确启用此操作。
- en: 'The extension manager pane has three sections: a search bar, a list of installed
    extensions, and a “Discover” section for all the JupyterLab extensions on the
    NPM registry. The results are listed according to the registry’s sort order (see
    *[https://docs.npmjs.com/searching-for-and-choosing-packages-to-download#package-search-rank-criteria/](https://docs.npmjs.com/searching-for-and-choosing-packages-to-download#package-search-rank-criteria/)*).
    An exception to this order is extensions released by the Jupyter organization.
    These have a small Jupyter icon next to their names and will always appear at
    the top of the search results list ([Figure 6-25](ch06.xhtml#ch06fig25)).'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展管理器面板分为三个部分：一个搜索栏、已安装扩展的列表，以及一个“发现”部分，显示 NPM 注册表中的所有 JupyterLab 扩展。结果会根据注册表的排序规则列出（参见
    *[https://docs.npmjs.com/searching-for-and-choosing-packages-to-download#package-search-rank-criteria/](https://docs.npmjs.com/searching-for-and-choosing-packages-to-download#package-search-rank-criteria/)*）。其中一个例外是由
    Jupyter 组织发布的扩展。这些扩展在名称旁边会有一个小 Jupyter 图标，并且始终出现在搜索结果列表的顶部（[图 6-25](ch06.xhtml#ch06fig25)）。
- en: '![Image](../images/06fig25.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig25.jpg)'
- en: '*Figure 6-25: Extensions released by the Jupyter organization are clearly marked
    and appear at the top of the search results.*'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-25：由 Jupyter 组织发布的扩展已清晰标记，并出现在搜索结果的顶部。*'
- en: To find an available extension, you can scroll down the list or use the Extension
    Manager’s search box. To learn more about an extension, click its name. This opens
    the extension’s website (usually on GitHub) in a new browser window.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找可用的扩展，你可以向下滚动列表或使用扩展管理器的搜索框。要了解更多关于某个扩展的信息，点击其名称。这将会在新浏览器窗口中打开扩展的官方网站（通常是
    GitHub）。
- en: 'You can use the manager’s **Install** button to install extensions. For source
    extensions, you’ll need Node.js. To install it in your *base* environment *from
    the defaults channel*, open Anaconda Prompt (Windows) or a terminal (macOS or
    Linux) and enter the following:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用管理器的 **安装** 按钮来安装扩展。对于源代码扩展，你需要 Node.js。要在你的 *base* 环境中 *从默认频道* 安装它，打开
    Anaconda Prompt（Windows）或终端（macOS 或 Linux），并输入以下命令：
- en: '[PRE37]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To install it from the *conda-forge* channel, enter this:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 *conda-forge* 渠道安装，输入以下命令：
- en: '[PRE38]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You’re now ready to install extensions.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好安装扩展了。
- en: Because most extensions are *source* extensions, when you click the manager’s
    **Install** button, a drop-down menu should appear under the search bar, indicating
    that the extension has been downloaded but that a rebuild is needed to complete
    the installation. You should click **Rebuild**, but if you ignore this for some
    reason, the next time you refresh your browser, change workspaces, or start JupyterLab,
    you’ll be presented with a **Build** button. Click the button and you’ll be asked
    to “Reload without Saving” or “Save and Reload.”
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大多数扩展都是 *源代码* 扩展，当你点击管理器的 **安装** 按钮时，搜索栏下方会出现一个下拉菜单，指示扩展已经下载，但需要重建才能完成安装。你应该点击
    **重建**，但如果由于某些原因忽略此操作，下次你刷新浏览器、切换工作区或启动 JupyterLab 时，系统会显示一个 **构建** 按钮。点击该按钮后，你将被要求“重新加载而不保存”或“保存并重新加载”。
- en: If you want to manage additional extensions at the same time, you can ignore
    the rebuild notice until you have made all the changes you want. After that, click
    the **Rebuild** button to start a rebuild in the background. When it’s complete,
    a dialog will open, indicating that a reload of the page is needed to load the
    latest build into the browser. At this point, the extension will appear in the
    Installed section of the manager, where you’ll have options for uninstalling or
    disabling it ([Figure 6-26](ch06.xhtml#ch06fig26)). Disabling an extension will
    prevent it from being activated, but without rebuilding the application.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想同时管理多个扩展，你可以忽略重建通知，直到完成所有所需的更改。然后，点击 **重建** 按钮开始在后台进行重建。当重建完成后，将会弹出一个对话框，提示需要重新加载页面以加载最新的构建到浏览器中。此时，扩展会出现在管理器的已安装部分，在那里你将可以选择卸载或禁用它（[图
    6-26](ch06.xhtml#ch06fig26)）。禁用扩展会阻止它被激活，但无需重建应用程序。
- en: '**NOTE**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Avoid installing extensions that you don’t trust, and watch out for any extensions
    trying to masquerade as a trusted extension. Extensions released through the Jupyter
    organization will have a small Jupyter icon to the right of the extension name.*'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '*避免安装你不信任的扩展，并留意任何试图伪装成受信任扩展的扩展。由 Jupyter 组织发布的扩展将会在扩展名称的右侧显示一个小 Jupyter 图标。*'
- en: During installation, JupyterLab will inspect the package metadata for any companion
    packages such as Notebook server extensions or kernel packages. If JupyterLab
    finds instructions for companion packages, it will present an informational dialog
    to notify you about these. It will be up to you to take these into account or
    not.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，JupyterLab 将检查软件包元数据，查找任何配套软件包，如笔记本服务器扩展或内核软件包。如果 JupyterLab 找到配套软件包的说明，它将弹出一个信息对话框，提醒你这些软件包的存在。是否考虑这些配套软件包，取决于你自己。
- en: To read more about the Extension Manager, visit the documentation at *[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)*.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多有关扩展管理器的信息，请访问文档 *[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)*。
- en: '![Image](../images/06fig26.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig26.jpg)'
- en: '*Figure 6-26: User-installed extensions can be uninstalled or disabled in the
    Extension Manager*'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-26：用户安装的扩展可以在扩展管理器中卸载或禁用*'
- en: '***Installing and Managing Extensions Using the CLI***'
  id: totrans-322
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 CLI 安装和管理扩展***'
- en: There are other ways to install extensions besides the Extension Manager. Installing
    a source extension will still require that you install Node.js and rebuilding
    JupyterLab, however, and you’ll need to be aware of the same security issues (see
    the previous section for details).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展管理器之外，还有其他安装扩展的方法。不过，安装源扩展仍然需要你安装 Node.js 并重建 JupyterLab，而且你需要注意相同的安全问题（请参见前一节的详细信息）。
- en: 'Clicking an extension name in the manager takes you to the extension’s website.
    Here, you might find instructions for installing in the CLI. For example, to install
    the jupyterlab-git extension, which lets you use version control with Git, open
    Anaconda Prompt (Windows) or a terminal (macOS or Linux) and enter the following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理器中点击扩展名称将带你到该扩展的网站。在这里，你可能会找到使用 CLI 安装的说明。例如，要安装 jupyterlab-git 扩展，该扩展让你能够使用
    Git 进行版本控制，打开 Anaconda Prompt（Windows）或终端（macOS 或 Linux），并输入以下命令：
- en: '[PRE39]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To uninstall the extension, use this:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载扩展，请使用以下命令：
- en: '[PRE40]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Also in the CLI, you can use the `jupyter labextension` command to install or
    uninstall source extensions from NPM, list all installed extensions, or disable
    an extension.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 同样在 CLI 中，你可以使用 `jupyter labextension` 命令从 NPM 安装或卸载源扩展，列出所有已安装的扩展，或禁用某个扩展。
- en: 'To install an extension, use this format, where <extension-name> represents
    the extension’s name:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装扩展，请使用这种格式，其中 <extension-name> 表示扩展的名称：
- en: '[PRE41]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To install multiple extensions, enter this:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装多个扩展，请输入以下命令：
- en: '[PRE42]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To install a specific version of an extension, use the following:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装特定版本的扩展，请使用以下命令：
- en: '[PRE43]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To uninstall extensions, use this:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载扩展，请使用以下命令：
- en: '[PRE44]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If you are installing/uninstalling multiple extensions in several stages, you
    might want to defer rebuilding JupyterLab by including the flag `--no-build` in
    the install/uninstall step. When you are ready to rebuild, you can run the command:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在多个阶段安装/卸载多个扩展，可能希望通过在安装/卸载步骤中包含`--no-build`标志来推迟重建 JupyterLab。当你准备好重建时，可以运行以下命令：
- en: '[PRE45]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can list extensions using the following:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令列出扩展：
- en: '[PRE46]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**NOTE**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The jupyter labextension command uses the JavaScript package name for the
    extension, which can be different from the name of the conda package used to distribute
    the extension.*'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '*jupyter labextension 命令使用扩展的 JavaScript 包名称，这可能与用于分发扩展的 conda 包名称不同。*'
- en: 'To disable an extension without rebuilding JupyterLab, use this:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用扩展而不重建 JupyterLab，请使用以下命令：
- en: '[PRE47]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Disabling an extension leaves the code loaded but prevents the plug-ins from
    running.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用扩展会保持代码加载，但会阻止插件运行。
- en: 'You can enable a disabled extensions with the following:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令启用禁用的扩展：
- en: '[PRE48]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Installed extensions are enabled by default unless there is a configuration
    explicitly disabling them.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的扩展默认是启用的，除非有明确的配置禁用了它们。
- en: 'For help with the `jupyter labextension` command, enter:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 `jupyter labextension` 命令的帮助，请输入：
- en: '[PRE49]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: To read more about this command, visit the documentation at *[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)*.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于此命令的信息，请访问文档 *[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html)*。
- en: '***Installing ipywidgets for JupyterLab***'
  id: totrans-352
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为 JupyterLab 安装 ipywidgets***'
- en: In [Chapter 5](ch05.xhtml), we worked with the ipywidgets extension to use widgets
    in classic Jupyter Notebook. Most of the time, installing ipywidgets automatically
    configures JupyterLab to use widgets, as it depends on the jupyterlab_widgets
    package, which configures JupyterLab to display and use widgets.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 5 章](ch05.xhtml)中，我们使用了 ipywidgets 扩展在经典的 Jupyter Notebook 中使用小部件。大多数情况下，安装
    ipywidgets 会自动配置 JupyterLab 使用小部件，因为它依赖于 jupyterlab_widgets 包，该包配置 JupyterLab
    以显示和使用小部件。
- en: 'If you’re using the modular approach, by which JupyterLab and the IPython kernel
    are installed in different environments, installing ipywidgets requires two steps:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是模块化方法，即 JupyterLab 和 IPython 内核安装在不同的环境中，则安装 ipywidgets 需要两个步骤：
- en: Install the jupyterlab_widgets package in the environment containing JupyterLab.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含 JupyterLab 的环境中安装 jupyterlab_widgets 包。
- en: Install ipywidgets in each kernel’s environment that will use ipywidgets.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个将使用 ipywidgets 的内核环境中安装 ipywidgets。
- en: 'For example, with JupyterLab installed in your *base* environment and the kernel
    installed in your *my_jlab_proj_env* environment created earlier, use the following
    commands, substituting your path to the *my_jlab_proj_env* folder:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 *base* 环境中安装了 JupyterLab，并且在之前创建的 *my_jlab_proj_env* 环境中安装了内核，可以使用以下命令，替换为你自己的
    *my_jlab_proj_env* 文件夹路径：
- en: '[PRE50]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '***Creating Custom Extensions***'
  id: totrans-359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建自定义扩展***'
- en: A JupyterLab extension is a package that contains one or more JupyterLab plug-ins.
    You can write your own plug-ins and package them together into a JupyterLab extension.
    The details for this are beyond the scope of this book, but you can find what
    you need in the *Extension Developer Guide* at *[https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html](https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html)*.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 扩展是一个包含一个或多个 JupyterLab 插件的包。你可以编写自己的插件，并将它们打包成一个 JupyterLab 扩展。关于这方面的详细信息超出了本书的范围，但你可以在*扩展开发者指南*中找到所需的内容，网址为
    *[https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html](https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html)*。
- en: '**Sharing**'
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**共享**'
- en: When we talk about sharing in JupyterLab, we’re mainly talking about sharing
    notebooks. Because we covered this subject in “Sharing Notebooks” on [page 122](ch05.xhtml#ch00lev1sec39),
    I won’t repeat it here. To supplement that section, however, you can find more
    about using JupyterLab on JupyterHub at *[https://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html](https://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html)*.
    For performing real-time collaboration with JupyterLab, see *[https://jupyterlab.readthedocs.io/en/stable/user/rtc.html](https://jupyterlab.readthedocs.io/en/stable/user/rtc.html)*.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论 JupyterLab 中的共享时，主要是指共享笔记本。因为我们已经在 [第 122 页](ch05.xhtml#ch00lev1sec39)的“共享笔记本”部分讨论过这个话题，所以这里不再赘述。不过，作为补充，你可以在
    *[https://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html](https://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html)*
    上找到更多关于在 JupyterHub 上使用 JupyterLab 的信息。如果你想进行实时协作，可以参阅 *[https://jupyterlab.readthedocs.io/en/stable/user/rtc.html](https://jupyterlab.readthedocs.io/en/stable/user/rtc.html)*。
- en: '**Summary**'
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: JupyterLab builds on Jupyter Notebook by providing an IDE-like environment for
    developing code, exploring datasets, and conducting experiments. With its extensible
    environment, JupyterLab takes us another step closer to true *literate programming*,
    wherein the exposition of logic is integrated into ordinary human language.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 在 Jupyter Notebook 的基础上，通过提供一个类似 IDE 的环境来开发代码、探索数据集和进行实验。凭借其可扩展的环境，JupyterLab
    使我们更接近真正的 *文学化编程*，即将逻辑的阐述与普通人类语言结合在一起。
- en: Although it’s open for business, JupyterLab is still under development, and
    you’ll want to consult the official documentation for the most recent additions,
    changes, and deprecations. In addition to work on the core program, development
    of third-party extensions will continue. New tools such as *nbdev* (*[https://nbdev.fast.ai/](https://nbdev.fast.ai/)*)
    and debuggers (*[https://jupyterlab.readthedocs.io/en/stable/user/debugger.html](https://jupyterlab.readthedocs.io/en/stable/user/debugger.html)*)
    are turning JupyterLab into a full-fledged IDE.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 JupyterLab 已经可以使用，但它仍在开发中，因此你需要查阅官方文档，以获取最新的功能、变化和已弃用的内容。除了核心程序的工作，第三方扩展的开发将继续进行。像
    *nbdev* (*[https://nbdev.fast.ai/](https://nbdev.fast.ai/)*) 和调试器 (*[https://jupyterlab.readthedocs.io/en/stable/user/debugger.html](https://jupyterlab.readthedocs.io/en/stable/user/debugger.html)*)
    等新工具正在将 JupyterLab 打造成一个完整的集成开发环境（IDE）。
- en: One development in late 2021 was the release of the cross-platform standalone
    *JupyterLab App* (*[https://github.com/jupyterlab/jupyterlab-desktop/](https://github.com/jupyterlab/jupyterlab-desktop/)*).
    With the App, JupyterLab no longer “lives” in a web browser, but instead exists
    as a self-contained desktop application. For convenience, it bundles a Python
    environment with several popular libraries ready to use in scientific computing
    and data science workflows. These include pandas, NumPy, Matplotlib, SciPy, and
    more. A current drawback, however, is that the application provides only `pip`
    installations in place of conda installations. This means that it’s not as easy
    to install some libraries compared to the web version.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年底的一个发展是发布了跨平台的独立版*JupyterLab App*（* [https://github.com/jupyterlab/jupyterlab-desktop/](https://github.com/jupyterlab/jupyterlab-desktop/)*）。有了这个应用程序，JupyterLab不再“存在”于网页浏览器中，而是作为一个独立的桌面应用程序存在。为了方便使用，它捆绑了一个Python环境，并附带了多个常用的库，准备在科学计算和数据科学工作流中使用。这些库包括pandas、NumPy、Matplotlib、SciPy等。然而，目前的一个缺点是该应用程序仅提供`pip`安装，而不支持conda安装。这意味着，与网页版本相比，一些库的安装并不像那么方便。
- en: This concludes [Part I](part01.xhtml#part01) of the book. At the end of [Chapter
    4](ch04.xhtml), readers new to Python were instructed to work through [Part II](part02.xhtml#part02),
    which is a Python primer. If you’ve done that—or don’t need to—proceed to [Part
    III](part03.xhtml#part03), which provides an overview of important scientific
    and visualization packages available through Anaconda, including tips on how to
    choose the best ones for your needs.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本书的[第一部分](part01.xhtml#part01)内容。到[第4章](ch04.xhtml)，对于Python新手，读者被指示完成[第二部分](part02.xhtml#part02)，这部分是Python入门教程。如果你已经完成了这部分，或者不需要的话，可以直接进入[第三部分](part03.xhtml#part03)，这一部分概述了通过Anaconda提供的重要科学计算和可视化包，包括如何根据需要选择最适合的工具的技巧。
