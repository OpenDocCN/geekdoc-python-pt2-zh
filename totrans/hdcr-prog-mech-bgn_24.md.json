["```py\nif __name__ == '__main__':\n    print('Main')\n```", "```py\n#!/usr/bin/env bash\nPYTHONPATH=$PWD python3 apps/truss_structures/main.py $@\n```", "```py\n$ chmod +x truss.sh\n```", "```py\n$ ./truss.sh\n```", "```py\n$ ./truss.sh --scale=1.25 --disp-scale=100 --load-scale=0.1 --no-draw-original\n```", "```py\nimport argparse\n\ndef parse_arguments():\n ➊ parser = argparse.ArgumentParser(\n        description='Solves a truss structure'\n    )\n\n ➋ parser.add_argument(\n        '--scale',\n        help='scale applied to the geometry (for plotting)',\n        default=2,\n        type=float\n    )\n\n ➌ parser.add_argument(\n        '--disp-scale',\n        help='scale applied to the displacements (for plotting)',\n        default=500,\n        type=float\n    )\n\n ➍ parser.add_argument(\n        '--load-scale',\n        help='scale applied to the loads (for plotting)',\n        default=0.02,\n        type=float\n    )\n\n ➎ parser.add_argument(\n        '--no-draw-original',\n        help='Should draw the original geometry?',\n        action='store_true'\n    )\n\n ➏ return parser.parse_args()\n```", "```py\n$ ./truss.sh --help\n```", "```py\nusage: main.py [--help] [--scale SCALE] [--disp-scale DISP_SCALE]\n               [--load-scale LOAD_SCALE] [--no-draw-original]\n\nSolves a truss structure\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --scale SCALE         scale applied to the geometry (for plotting)\n  --disp-scale DISP_SCALE\n                        scale applied to the displacements (for plotting)\n  --load-scale LOAD_SCALE\n                        scale applied to the loads (for plotting)\n  --no-draw-original    Should draw the original geometry?\n```", "```py\nimport os\n\nfrom structures.out.svg import structure_solution_to_svg\nfrom structures.out.text import structure_solution_to_string\nfrom structures.solution.structure import StructureSolution\n\ndef save_solution_to_svg(solution: StructureSolution, arguments):\n ➊ solution_svg = structure_solution_to_svg(solution, arguments)\n    __write_to_file('result.svg', solution_svg)\n\ndef save_solution_to_text(solution: StructureSolution):\n ➋ solution_text = structure_solution_to_string(solution)\n    __write_to_file('result.txt', solution_text)\n\ndef __write_to_file(filename, content):\n ➌ file_path = os.path.join(os.getcwd(), filename)\n ➍ with open(file_path, 'w') as file:\n        file.write(content)\n```", "```py\nimport sys\nimport time\n\nimport apps.truss_structures.output as out\nfrom apps.truss_structures.arguments import parse_arguments\nfrom structures.parse.str_parse import parse_structure_from_lines\n\nif __name__ == '__main__':\n ➊ arguments = parse_arguments()\n ➋ lines = sys.stdin.readlines()\n\n    start_time = time.time()\n\n ➌ structure = parse_structure_from_lines(lines)\n ➍ solution = structure.solve_structure()\n    out.save_solution_to_svg(solution, arguments)\n    out.save_solution_to_text(solution)\n\n    end_time = time.time()\n    elapsed_secs = end_time - start_time\n ➎ print(f'Took {round(elapsed_secs, 3)} seconds to solve')\n```", "```py\n# Warren truss with 4 spans\n\nnodes\n# lower nodes\n1: (0.0, 0.0) (xy)\n2: (400.0, 0.0) ()\n3: (800.0, 0.0) ()\n4: (1200.0, 0.0) ()\n5: (1600.0, 0.0) (y)\n# upper nodes\n6: (400.0, 300.0) ()\n7: (800.0, 300.0) ()\n8: (1200.0, 300.0) ()\n\nloads\n6 -> (2500.0, -5000.0)\n7 -> (2500.0, -5000.0)\n8 -> (2500.0, -5000.0)\n\nbars\n# horizontal bars\n1: (1 -> 2) 20.0 20000000.0\n2: (2 -> 3) 20.0 20000000.0\n3: (3 -> 4) 20.0 20000000.0\n4: (4 -> 5) 20.0 20000000.0\n5: (6 -> 7) 20.0 20000000.0\n6: (7 -> 8) 20.0 20000000.0\n# vertical bars\n7: (2 -> 6) 15.0 20000000.0\n8: (3 -> 7) 15.0 20000000.0\n9: (4 -> 8) 15.0 20000000.0\n# diagonal bars\n10: (1 -> 6) 30.0 20000000.0\n11: (6 -> 3) 30.0 20000000.0\n12: (3 -> 8) 30.0 20000000.0\n13: (8 -> 5) 30.0 20000000.0\n```", "```py\n$ ./truss.sh --scale=1.25 --disp-scale=250 < apps/truss_structures/warren.txt\n```", "```py\nTook 0.058 seconds to solve\n```", "```py\nNODE 1\n    original position: (0.0, 0.0)\n    displacement: (0.0, 0.0) with norm 0.0\n    displaced position: (0.0, 0.0)\n    reaction: (-7513.0363, 6089.8571) with norm 9671.1981\n\n--snip--\n\nNODE 8\n    original position: (1200.0, 300.0)\n    displacement: (0.0185, -0.0693) with norm 0.0717\n    displaced position: (1200.0185, 299.9307)\n\n------------------------------------------\n\nBAR 1 (1 → 2) : ⊕ TENSION\n    Δl (elongation) = 0.0156\n    ϵ  (strain)     = 3.908e-05\n    σ  (stress)     = 781.5951\n\n--snip--\n\nBAR 13 (8 → 5) : ⊖ COMPRESSION\n    Δl (elongation) = -0.0124\n    ϵ  (strain)     = -2.473e-05\n    σ  (stress)     = -494.5523\n```", "```py\n$ ./truss.sh --scale=1.25 --disp-scale=250 --no-draw-original\n  < apps/truss_structures/warren.txt\n```", "```py\n$ ./truss.sh --scale=1.25 --disp-scale=500\n  < apps/truss_structures/warren.txt\n```", "```py\n$ /truss.sh --scale=1.25 --disp-scale=400 --load-scale=0.01\n  < apps/truss_structures/warren.txt\n```", "```py\n# Baltimore truss with 10 spans\n\nnodes\n# lower nodes\n1: (0.0, 0.0) (xy)\n2: (200.0, 0.0) ()\n3: (400.0, 0.0) ()\n4: (600.0, 0.0) ()\n5: (800.0, 0.0) ()\n6: (1000.0, 0.0) ()\n7: (1200.0, 0.0) ()\n8: (1400.0, 0.0) ()\n9: (1600.0, 0.0) ()\n10: (1800.0, 0.0) ()\n11: (2000.0, 0.0) ()\n12: (2200.0, 0.0) ()\n13: (2400.0, 0.0) ()\n14: (2600.0, 0.0) ()\n15: (2800.0, 0.0) ()\n16: (3000.0, 0.0) ()\n17: (3200.0, 0.0) ()\n18: (3400.0, 0.0) ()\n19: (3600.0, 0.0) ()\n20: (3800.0, 0.0) ()\n21: (4000.0, 0.0) (y)\n# middle nodes\n22: (200.0, 150.0) ()\n23: (600.0, 150.0) ()\n24: (1000.0, 150.0) ()\n25: (1400.0, 150.0) ()\n26: (1800.0, 150.0) ()\n27: (2200.0, 150.0) ()\n28: (2600.0, 150.0) ()\n29: (3000.0, 150.0) ()\n30: (3400.0, 150.0) ()\n31: (3800.0, 150.0) ()\n# upper nodes\n32: (400.0, 300.0) ()\n33: (800.0, 300.0) ()\n34: (1200.0, 300.0) ()\n35: (1600.0, 300.0) ()\n36: (2000.0, 300.0) ()\n37: (2400.0, 300.0) ()\n38: (2800.0, 300.0) ()\n39: (3200.0, 300.0) ()\n40: (3600.0, 300.0) ()\n\nloads\n1 -> (0.0, -500.0)\n2 -> (0.0, -500.0)\n--snip--\n40 -> (0.0, -500.0)\n\nbars\n# zig-zag bars\n1: (1 -> 22) 20.0 20000000.0\n2: (22 -> 3) 20.0 20000000.0\n3: (3 -> 23) 20.0 20000000.0\n4: (23 -> 5) 20.0 20000000.0\n5: (5 -> 24) 20.0 20000000.0\n6: (24 -> 7) 20.0 20000000.0\n7: (7 -> 25) 20.0 20000000.0\n8: (25 -> 9) 20.0 20000000.0\n9: (9 -> 26) 20.0 20000000.0\n10: (26 -> 11) 20.0 20000000.0\n11: (11 -> 27) 20.0 20000000.0\n12: (27 -> 13) 20.0 20000000.0\n13: (13 -> 28) 20.0 20000000.0\n14: (28 -> 15) 20.0 20000000.0\n15: (15 -> 29) 20.0 20000000.0\n16: (29 -> 17) 20.0 20000000.0\n17: (17 -> 30) 20.0 20000000.0\n18: (30 -> 19) 20.0 20000000.0\n19: (19 -> 31) 20.0 20000000.0\n20: (31 -> 21) 20.0 20000000.0\n# left diagonal bars\n21: (32 -> 22) 20.0 20000000.0\n22: (32 -> 23) 20.0 20000000.0\n23: (33 -> 24) 20.0 20000000.0\n24: (34 -> 25) 20.0 20000000.0\n25: (35 -> 26) 20.0 20000000.0\n# right diagonal bars\n26: (37 -> 27) 20.0 20000000.0\n27: (38 -> 28) 20.0 20000000.0\n28: (39 -> 29) 20.0 20000000.0\n29: (40 -> 30) 20.0 20000000.0\n30: (40 -> 31) 20.0 20000000.0\n# vertical bars\n31: (2 -> 22) 20.0 20000000.0\n32: (3 -> 32) 20.0 20000000.0\n33: (4 -> 23) 20.0 20000000.0\n34: (5 -> 33) 20.0 20000000.0\n35: (6 -> 24) 20.0 20000000.0\n36: (7 -> 34) 20.0 20000000.0\n37: (8 -> 25) 20.0 20000000.0\n38: (9 -> 35) 20.0 20000000.0\n39: (10 -> 26) 20.0 20000000.0\n40: (11 -> 36) 20.0 20000000.0\n41: (12 -> 27) 20.0 20000000.0\n42: (13 -> 37) 20.0 20000000.0\n43: (14 -> 28) 20.0 20000000.0\n44: (15 -> 38) 20.0 20000000.0\n45: (16 -> 29) 20.0 20000000.0\n46: (17 -> 39) 20.0 20000000.0\n47: (18 -> 30) 20.0 20000000.0\n48: (19 -> 40) 20.0 20000000.0\n49: (20 -> 31) 20.0 20000000.0\n# lower horizontal bars\n50: (1 -> 2) 20.0 20000000.0\n51: (2 -> 3) 20.0 20000000.0\n52: (3 -> 4) 20.0 20000000.0\n53: (4 -> 5) 20.0 20000000.0\n54: (5 -> 6) 20.0 20000000.0\n55: (6 -> 7) 20.0 20000000.0\n56: (7 -> 8) 20.0 20000000.0\n57: (8 -> 9) 20.0 20000000.0\n58: (9 -> 10) 20.0 20000000.0\n59: (10 -> 11) 20.0 20000000.0\n60: (11 -> 12) 20.0 20000000.0\n61: (12 -> 13) 20.0 20000000.0\n62: (13 -> 14) 20.0 20000000.0\n63: (14 -> 15) 20.0 20000000.0\n64: (15 -> 16) 20.0 20000000.0\n65: (16 -> 17) 20.0 20000000.0\n66: (17 -> 18) 20.0 20000000.0\n67: (18 -> 19) 20.0 20000000.0\n68: (19 -> 20) 20.0 20000000.0\n69: (20 -> 21) 20.0 20000000.0\n# upper horizontal bars\n70: (32 -> 33) 20.0 20000000.0\n71: (33 -> 34) 20.0 20000000.0\n72: (34 -> 35) 20.0 20000000.0\n73: (35 -> 36) 20.0 20000000.0\n74: (36 -> 37) 20.0 20000000.0\n75: (37 -> 38) 20.0 20000000.0\n76: (38 -> 39) 20.0 20000000.0\n77: (39 -> 40) 20.0 20000000.0\n```", "```py\n$ ./truss.sh --scale=0.75 --disp-scale=100 --load-scale=0.2\n  < apps/truss_structures/baltimore.txt\n```", "```py\nTook 0.106 seconds to solve\n```"]