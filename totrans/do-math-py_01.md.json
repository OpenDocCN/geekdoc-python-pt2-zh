["```py\n>>> 1 + 2\n3\n>>> 1 + 3.5\n4.5\n>>> -1 + 2.5\n1.5\n>>> 100 – 45\n55\n>>> -1.1 + 5\n3.9\n```", "```py\n>>> 3 * 2\n6\n>>> 3.5 * 1.5\n5.25\n```", "```py\n>>> 3 / 2\n1.5\n>>> 4 / 2\n2.0\n```", "```py\n>>> 3 // 2\n1\n```", "```py\n>>> -3 // 2\n-2\n```", "```py\n>>> 9 % 2\n1\n```", "```py\n>>> 2 ** 2\n4\n>>> 2 ** 10\n1024\n>>> 1 ** 10\n1\n```", "```py\n>>> 8 ** (1/3)\n2.0\n```", "```py\n>>> 5 + 5 * 5\n30\n>>> (5 + 5) * 5\n50\n```", "```py\n➊ >>> a = 3\n   >>> a + 1\n   4\n➋ >>> a = 5\n   >>> a + 1\n   6\n```", "```py\n>>> type(3)\n<class 'int'>\n\n>>> type(3.5)\n<class 'float'>\n\n>>> type(3.0)\n<class 'float'>\n```", "```py\n>>> int(3.8)\n3\n>>> int(3.0)\n3\n```", "```py\n>>> float(3)\n3.0\n```", "```py\n➊ >>> from fractions import Fraction\n➋ >>> f = Fraction(3, 4)\n➌ >>> f\n   Fraction(3, 4)\n```", "```py\n>>> Fraction(3, 4) + 1 + 1.5\n3.25\n```", "```py\n>>> Fraction(3, 4) + 1 + Fraction(1/4)\nFraction(2, 1)\n```", "```py\n>>> a = 2 + 3j\n>>> type(a)\n<class 'complex'>\n```", "```py\n>>> a = complex(2, 3)\n>>> a\n(2 + 3j)\n```", "```py\n>>> b = 3 + 3j\n>>> a + b\n(5 + 6j)\n>>> a - b\n(-1 + 0j)\n```", "```py\n>>> a * b\n(-3 + 15j)\n>>> a / b\n(0.8333333333333334 + 0.16666666666666666j)\n```", "```py\n>>> z = 2 + 3j\n>>> z.real\n2.0\n>>> z.imag\n3.0\n```", "```py\n>>> z.conjugate()\n(2 - 3j)\n```", "```py\n>>> (z.real ** 2 + z.imag ** 2) ** 0.5\n3.605551275463989\n```", "```py\n>>> abs(z)\n3.605551275463989\n```", "```py\n➊ >>> a = input()\n➋ 1\n```", "```py\n   >>> a\n➌ '1'\n```", "```py\n>>> s1 = 'a string'\n>>> s2 = \"a string\"\n```", "```py\n>>> a = '1'\n>>> int(a) + 1\n2\n>>> float(a) + 1\n2.0\n```", "```py\n>>> int('2.0')\nTraceback (most recent call last):\n\n  File \"<pyshell#26>\", line 1, in <module>\n    int('2.0')\nValueError: invalid literal for int() with base 10: '2.0'\n```", "```py\n>>> a = float(input())\n3/4\nTraceback (most recent call last):\n  File \"<pyshell#25>\", line 1, in <module>\n    a=float(input())\nValueError: could not convert string to float: '3/4'\n```", "```py\n>>> try:\n        a = float(input('Enter a number: '))\nexcept ValueError:\n        print('You entered an invalid number')\n```", "```py\n   Enter a number: 3/4\n➊ You entered an invalid number\n```", "```py\n>>> a = input('Input an integer: ')\n```", "```py\nInput an integer: 1\n```", "```py\n>>> a = int(input())\n1\n>>> a + 1\n2\n```", "```py\n>>> a = int(input())\n1.0\nTraceback (most recent call last):\n  File \"<pyshell#42>\", line 1, in <module>\n    a=int(input())\nValueError: invalid literal for int() with base 10: '1.0'\n```", "```py\n>>> 1.1.is_integer()\nFalse\n```", "```py\n>>> 1.0.is_integer()\nTrue\n```", "```py\n>>> a = Fraction(input('Enter a fraction: '))\nEnter a fraction: 3/4\n>>> a\nFraction(3, 4)\n```", "```py\n>>> a = Fraction(input('Enter a fraction: '))\nEnter a fraction: 3/0\nTraceback (most recent call last):\n  File \"<pyshell#2>\", line 1, in <module>\n    a = Fraction(input('Enter a fraction: '))\n  File \"/usr/lib64/python3.3/fractions.py\", line 167, in __new__\n    raise ZeroDivisionError('Fraction(%s, 0)' % numerator)\nZeroDivisionError: Fraction(3, 0)\n```", "```py\n>>> try:\n        a = Fraction(input('Enter a fraction: '))\nexcept ZeroDivisionError:\n        print('Invalid fraction')\n\nEnter a fraction: 3/0\nInvalid fraction\n```", "```py\n>>> z = complex(input('Enter a complex number: '))\nEnter a complex number: 2+3j\n>>> z\n(2+3j)\n```", "```py\n>>> z = complex(input('Enter a complex number: '))\nEnter a complex number: 2 + 3j\nTraceback (most recent call last):\n  File \"<pyshell#43>\", line 1, in <module>\n    z = complex(input('Enter a complex number: '))\nValueError: complex() arg is a malformed string\n```", "```py\n>>> def is_factor(a, b):\n        if b % a == 0:\n            return True\n        else:\n            return False\n```", "```py\n>>> is_factor(4, 1024)\nTrue\n```", "```py\n>>> for i in range(1, 4):\n        print(i)\n1\n2\n3\n```", "```py\n>>> for i in range(5):\n        print(i)\n0\n1\n2\n3\n4\n```", "```py\n>>> for i in range(1,10,2):\n        print(i)\n1\n3\n5\n7\n9\n```", "```py\n   '''\n   Find the factors of an integer\n   '''\n\n   def factors(b):\n\n➊     for i in range(1, b+1):\n           if b % i == 0:\n               print(i)\n\n   if __name__ == '__main__':\n\n       b = input('Your Number Please: ')\n       b = float(b)\n\n➋     if b > 0 and b.is_integer():\n           factors(int(b))\n       else:\n           print('Please enter a positive integer')\n```", "```py\nYour Number Please: 25\n1\n5\n25\n```", "```py\nYour Number Please: 15.5\nPlease enter a positive integer\n```", "```py\n>>> item1 = 'apples'\n>>> item2 = 'bananas'\n>>> item3 = 'grapes'\n>>> print('At the grocery store, I bought some {0} and {1} and {2}'.format(item1, item2, item3))\nAt the grocery store, I bought some apples and bananas and grapes\n```", "```py\n>>> print('Number 1: {0} Number 2: {1} '.format(1, 3.578))\nNumber 1: 1 Number 2: 3.578\n```", "```py\n   '''\n   Multiplication table printer\n   '''\n\n   def multi_table(a):\n\n➊     for i in range(1, 11):\n           print('{0} x {1} = {2}'.format(a, i, a*i))\n\n   if __name__ == '__main__':\n       a = input('Enter a number: ')\n       multi_table(float(a))\n```", "```py\nEnter a number : 5\n5.0 x 1 = 5.0\n5.0 x 2 = 10.0\n5.0 x 3 = 15.0\n5.0 x 4 = 20.0\n5.0 x 5 = 25.0\n5.0 x 6 = 30.0\n5.0 x 7 = 35.0\n5.0 x 8 = 40.0\n5.0 x 9 = 45.0\n5.0 x 10 = 50.0\n```", "```py\n>>> '{0}'.format(1.25456)\n'1.25456'\n>>> '{0:.2f}'.format(1.25456)\n'1.25'\n```", "```py\n>>> '{0:.2f}'.format(1.25556)\n'1.26'\n```", "```py\n>>> '{0:.2f}'.format(1)\n'1.00'\n```", "```py\n>>> (25.5 * 2.54) / 100\n0.6476999999999999\n```", "```py\n>>> 650 * 1.609\n1045.85\n```", "```py\n>>> F = 98.6\n>>> (F - 32) * (5 / 9)\n37.0\n```", "```py\n>>> C = 37\n>>> C * (9 / 5) + 32\n98.60000000000001\n```", "```py\n   '''\n   Unit converter: Miles and Kilometers\n   '''\n\n   def print_menu():\n       print('1. Kilometers to Miles')\n       print('2. Miles to Kilometers')\n\n   def km_miles():\n       km = float(input('Enter distance in kilometers: '))\n       miles = km / 1.609\n\n       print('Distance in miles: {0}'.format(miles))\n\n   def miles_km():\n       miles = float(input('Enter distance in miles: '))\n       km = miles * 1.609\n\n       print('Distance in kilometers: {0}'.format(km))\n\n   if __name__ == '__main__':\n➊     print_menu()\n➋     choice = input('Which conversion would you like to do?: ')\n       if choice == '1':\n           km_miles()\n\n       if choice == '2':\n           miles_km()\n```", "```py\n   1. Kilometers to Miles\n   2. Miles to Kilometers\n➊ Which conversion would you like to do?: 2\n   Enter distance in miles: 100\n   Distance in kilometers: 160.900000\n```", "```py\n>>> x = 10 - 500 + 79\n>>> x\n-411\n```", "```py\n>>> a = 1\n>>> b = 2\n>>> c = 1\n```", "```py\n>>> D = (b**2 – 4*a*c)**0.5\n```", "```py\n>>> x_1 = (-b + D)/(2*a)\n>>> x_1\n-1.0\n>>> x_2 = (-b - D)/(2*a)\n>>> x_2\n-1.0\n```", "```py\n'''\nQuadratic equation root calculator\n'''\n\ndef roots(a, b, c):\n\n    D = (b*b - 4*a*c)**0.5\n    x_1 = (-b + D)/(2*a)\n    x_2 = (-b - D)/(2*a)\n\n    print('x1: {0}'.format(x_1))\n    print('x2: {0}'.format(x_2))\n\nif __name__ == '__main__':\n    a = input('Enter a: ')\n    b = input('Enter b: ')\n    c = input('Enter c: ')\n    roots(float(a), float(b), float(c))\n```", "```py\nEnter a: 1\nEnter b: 2\nEnter c: 1\n\nx1: -1.000000\nx2: -1.000000\n```", "```py\nEnter a: 1\nEnter b: 1\nEnter c: 1\nx1: (-0.49999999999999994+0.8660254037844386j)\nx2: (-0.5-0.8660254037844386j)\n```", "```py\n   '''\n   Fraction operations\n   '''\n   from fractions import Fraction\n\n   def add(a, b):\n       print('Result of Addition: {0}'.format(a+b))\n\n   if __name__ == '__main__':\n➊     a = Fraction(input('Enter first fraction: '))\n➋     b = Fraction(input('Enter second fraction: '))\n       op = input('Operation to perform - Add, Subtract, Divide, Multiply: ')\n       if op == 'Add':\n           add(a,b)\n```", "```py\nEnter first fraction: 3/4\nEnter second fraction: 1/4\nOperation to perform - Add, Subtract, Divide, Multiply: Add\nResult of Addition: 1\n```", "```py\nEnter first fraction: 3/4\nEnter second fraction: 1/4\nOperation to perform - Add, Subtract, Divide, Multiply: Subtract\nResult of Subtraction: 2/4\n```", "```py\n   '''\n   Run until exit layout\n   '''\n\n   def fun():\n       print('I am in an endless loop')\n\n   if __name__ == '__main__':\n➊     while True:\n           fun()\n➋         answer = input('Do you want to exit? (y) for yes ')\n           if answer == 'y':\n               break\n```", "```py\nI am in an endless loop\nDo you want to exit? (y) for yes n\nI am in an endless loop\nDo you want to exit? (y) for yes n\nI am in an endless loop\nDo you want to exit? (y) for yes n\nI am in an endless loop\nDo you want to exit? (y) for yes y\n```", "```py\n'''\nMultiplication table printer with\nexit power to the user\n'''\n\ndef multi_table(a):\n\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(a, i, a*i))\n\nif __name__ == '__main__':\n\n    while True:\n        a = input('Enter a number: ')\n        multi_table(float(a))\n\n        answer = input('Do you want to exit? (y) for yes ')\n        if answer == 'y':\n            break\n```", "```py\nEnter a number: 2\n2.000000 x 1.000000 = 2.000000\n2.000000 x 2.000000 = 4.000000\n2.000000 x 3.000000 = 6.000000\n2.000000 x 4.000000 = 8.000000\n\n2.000000 x 5.000000 = 10.000000\n2.000000 x 6.000000 = 12.000000\n2.000000 x 7.000000 = 14.000000\n2.000000 x 8.000000 = 16.000000\n2.000000 x 9.000000 = 18.000000\n2.000000 x 10.000000 = 20.000000\nDo you want to exit? (y) for yes n\nEnter a number:\n```"]