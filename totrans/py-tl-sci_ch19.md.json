["```py\nconda activate base\n```", "```py\njupyter qtconsole\n```", "```py\nIn [1]: import matplotlib.pyplot as plt\n```", "```py\nIn [2]: import numpy as np\n\nIn [3]: data = np.arange(5, 10) In [4]: data\nOut[4]: array([5, 6, 7, 8, 9])\n```", "```py\nIn [5]: plt.plot(data);\n```", "```py\nIn [6]: import numpy as np\n\nIn [7]: x = np.arange(-5, 5, 0.1)\n\nIn [8]: y = np.cosh(x)\n```", "```py\nIn [9]: plt.title('A Catenary')\n   ...: plt.xlabel('Horizontal Distance')\n   ...: plt.ylabel('Height')\n   ...: plt.xlim(-8, 8)\n   ...: plt.ylim(0, 60)\n   ...: plt.grid()\n   ...: plt.plot(x, y, lw=3, color='k');\n```", "```py\nIn [10]: time = np.arange(-12.5, 12.5, 0.1)\n\nIn [11]: amplitude = np.sin(time)\n\nIn [12]: amplitude_halved = np.sin(time) / 2\n```", "```py\nIn [13]: plt.plot(time, amplitude, label='sine1')\n    ...: plt.plot(time, amplitude_halved, lw=3, ls='--', label='sine2')\n    ...: plt.legend();\n```", "```py\nIn [14]: plt.subplot(2, 1, 1)\n    ...: plt.plot(time, amplitude, label='sine1')\n    ...: plt.legend(loc='upper right')\n    ...: \n    ...: plt.subplot(2, 1, 2)\n    ...: plt.ylim(-1, 1)\n    ...: plt.plot(time, amplitude_halved, label='sine2')\n    ...: plt.legend(loc='best');\n```", "```py\nIn [15]: plt.subplot(2, 1, 1)\n    ...: plt.plot(time, amplitude, label='sine1')\n    ...: plt.legend(loc='upper right')\n    ...: \n    ...: plt.subplot(2, 1, 2)\n    ...: plt.ylim(-1, 1)\n    ...: plt.plot(time, amplitude_halved, label='sine2')\n    ...: plt.legend(loc='best')\n    ...: \n    ...: plt.tight_layout(pad=2)\n```", "```py\nIn [16]: import numpy as np\n\nIn [17]: import matplotlib.pyplot as plt\n```", "```py\nIn [18]: gs = plt.GridSpec(3, 3)\n```", "```py\n   ...: \n   ...: plt.subplot(gs[0,:2])\n   ...: plt.title('Goethite Distribution Location 1')\n   ...: plt.hist(np.random.normal(0.22, 0.02, size=500), bins=5)\n   ...:\n```", "```py\n   ...: plt.subplot(gs[1, :2])\n   ...: plt.title('Goethite Concentration Location 1')\n   ...: plt.text(1.3, 1.6, ➊ 'o--Sample A')\n   ...: x, y = np.arange(0, 3, 0.1), np.arange(0, 3, 0.1)\n   ...: X, Y = ➋ np.meshgrid(x, y)\n   ...: Z = np.absolute(np.cos(X * 2 + Y) * 2 + np.sin(Y + 3))\n   ...: plt.contourf(X, Y, Z, cmap='Greys')\n   ...: plt.colorbar() \n   ...:\n```", "```py\n   ...: plt.subplot(gs[:2, 2])\n   ...: plt.title('Loc1 Goe-Hem Ratio')\n   ...: plt.xlabel('Hematite mg')\n   ...: plt.ylabel('Goethite mg')\n   ...: plt.scatter(np.random.normal(3, 1, 30), np.random.uniform(1, 30, 30))\n   ...:\n```", "```py\n    ...: labels = 'Goethite', 'Hematite', 'Jarosite'\n    ...: explode = [0.1, 0.1, 0.2]\n    ...:\n```", "```py\n   ...: plt.subplot(gs[2, 0])\n   ...: plt.title('Sample A')\n   ...: sizes = [35, 55, 10]\n   ...: plt.pie(sizes, labels=labels, explode=explode)\n   ...: \n   ...: plt.subplot(gs[2, 1])\n   ...: plt.title('Sample B')\n   ...: sizes = [35, 45, 20]\n   ...: plt.pie(sizes, labels=labels, explode=explode)\n   ...: \n   ...: plt.subplot(gs[2, 2])\n   ...: plt.title('Sample C')\n   ...: sizes = [35, 35, 30]\n   ...: plt.pie(sizes, labels=labels, explode=explode)\n   ...:\n```", "```py\n    ...: plt.tight_layout();\n```", "```py\nIn [19]: widths = [2, 3, 2]\n\nIn [20]: heights = [2, 10, 3]\n```", "```py\nIn [21]: gs = plt.GridSpec(3, 3, width_ratios=widths, height_ratios=heights)\n```", "```py\nIn [22]: import matplotlib.pyplot as plt\n\nIn [23]: import numpy as np\n```", "```py\nIn [24]: data = np.arange(5, 10)\n```", "```py\nIn [25]: fig, ax = plt.subplots()\n```", "```py\n    ...: ax.plot(data);\n```", "```py\nIn [26]: fig\n```", "```py\nIn [27]: import numpy as np\n\nIn [28]: import matplotlib.pyplot as plt\n\nIn [29]: x = np.arange(-5, 5, 0.1)\n\nIn [30]: y = np.cosh(x)\n```", "```py\nIn [31]: fig, ax = plt.subplots()\n```", "```py\n    ...: ax.set(title='A Catenary', \n    ...:        xlabel='Horizontal Distance', \n    ...:        ylabel='Height',\n    ...:        xlim=(-8, 8.1),\n    ...:        ylim=(0, 60))\n```", "```py\n ...: ax.spines.left.set_position('zero')\n ...: ax.spines.left.set_linewidth(2)\n```", "```py\n ...: ax.spines.right.set_color('none')\n```", "```py\n ...: ax.spines.bottom.set_position('zero')\n ...: ax.spines.bottom.set_linewidth(2)\n ...: ax.spines.top.set_color('none')\n```", "```py\n    ...: ax.grid()\n    ...: ax.plot(x, y, lw=3, color='k');\n```", "```py\nIn [32]: fig, ax = plt.subplots()\n```", "```py\nIn [33]: fig, axs = plt.subplots(2, 2)\n    ...: axs\nOut[33]: \narray([[<AxesSubplot:>, <AxesSubplot:>],\n         [<AxesSubplot:>, <AxesSubplot:>]], dtype=object)\n```", "```py\nIn [34]: fig, axs = plt.subplots(2, 2)\n    ...: axs[0, 1].plot([1, 2, 3]);\n```", "```py\nIn [35]: fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n    ...: ax2.plot([1, 2, 3]);\n```", "```py\nIn [36]: fig, axs = plt.subplots(ncols=2, \n    ...:                         nrows=2, \n    ...:                         sharex=True,\n    ...:                         sharey=True,\n    ...:                         figsize=(6, 4),\n    ...:                         tight_layout=True)\n```", "```py\nIn [37]: import numpy as np\n\nIn [38]: import matplotlib.pyplot as plt\n\nIn [39]: fig = plt.figure()\n    ...: gs = fig.add_gridspec(3, 3)\n    ...:\n```", "```py\n    ...: ax1 = fig.add_subplot(gs[0, :2])\n    ...: ax1.set_title(' Goethite Distribution Location 1')\n    ...: ax1.hist(np.random.normal(0.22, 0.02, size=500), bins=5)\n```", "```py\n    ...: ax2 = fig.add_subplot(gs[1, :2])\n    ...: ax2.set_title('Goethite Concentration Location 1')\n    ...: ax2.annotate('o--Sample A', xy=(1.3, 1.6))\n    ...: x, y = np.arange(0, 3, 0.1), np.arange(0, 3, 0.1)\n    ...: X, Y = np.meshgrid(x, y)\n    ...: Z = np.absolute(np.cos(X * 2 + Y) * 2 + np.sin(Y + 3))\n    ...: contour_map = ax2.contourf(X, Y, Z, cmap='Greys')\n    ...: fig.colorbar(contour_map)\n    ...:\n```", "```py\n    ...: ax3 = fig.add_subplot(gs[:2, 2])\n    ...: ax3.set_title('Loc1 Goe-Hem Ratio')\n    ...: ax3.set_xlabel('Hematite mg')\n    ...: ax3.set_ylabel('Goethite mg')\n    ...: ax3.scatter(np.random.normal(3, 1, 30), \n    ...:                np.random.uniform(1, 30, 30))\n    ...:\n```", "```py\n     ...: labels = 'Goethite', 'Hematite', 'Jarosite'\n    ...: explode = [0.1, 0.1, 0.2]\n    ...:\n```", "```py\n    ...: ax4 = fig.add_subplot(gs[2, 0])\n    ...: ax4.set_title('Sample A')\n    ...: sizes = [35, 55, 10]\n    ...: ax4.pie(sizes, labels=labels, explode=explode)\n    ...: \n    ...: ax5 = fig.add_subplot(gs[2, 1])\n    ...: ax5.set_title('Sample B')\n    ...: sizes = [35, 45, 20]\n    ...: ax5.pie(sizes, labels=labels, explode=explode)\n    ...: \n    ...: ax6 = fig.add_subplot(gs[2, 2])\n    ...: ax6.set_title('Sample C')\n    ...: sizes = [35, 35, 30]\n    ...: ax6.pie(sizes, labels=labels, explode=explode)\n    ...: \n    ...: fig.tight_layout();\n```", "```py\nIn [40]: fig, axs = plt.subplot_mosaic([['left', 'upper right'],\n    ...:                               ['left', 'lower right']],\n    ...:                               figsize=(4.5, 3.5),\n    ...: tight_layout=True)\n    ...: axs['upper right'].set_title('upper right');\n```", "```py\nIn [41]: import numpy as np\n\nIn [42]: import matplotlib.pyplot as plt\n\nIn [43]: %matplotlib inline\n\nIn [44]: x = np.arange(0, 25)\n\nIn [45]: y = x**3\n```", "```py\nIn [46]: fig = plt.figure()    \n    ...: ax1 = fig.add_axes([0, 0, 1.0, 1.0]) \n    ...: ax2 = fig.add_axes([0.1, 0.6, 0.4, 0.3])\n    ...:\n```", "```py\n    ...: # Main plot\n    ...: ax1.plot(x, y, 'k*-')\n    ...: ax1.set_xlabel('x')\n    ...: ax1.set_ylabel('y')\n    ...: \n    ...: # Inset plot\n    ...: ax2.plot(x, np.sin(y), 'r*-')\n    ...: ax2.set_xlabel('x')\n    ...: ax2.set_ylabel('y')\n    ...: ax2.set_title('Sine of Y')\n```", "```py\nIn [47]: import numpy as np\n    ...: import matplotlib.pyplot as plt \n    ...: \n    ...: z = np.arange(0, 200, 1)\n    ...: x = z * np.cos(25 * z)\n    ...: y = z * np.sin(25 * z)\n    ...: \n ➊ ...: ax = plt.figure().add_subplot(projection='3d') \n    ...:\n    ...: ax.plot(x, y, z, 'black');\n```", "```py\n    ...: fig = plt.figure()\n    ...: ax = plt.axes(projection ='3d')\n```", "```py\nIn [48]: import numpy as np\n    ...: import matplotlib.pyplot as plt\n ➊ ...: import time \n ...: %matplotlib qt\n    ...: \n    ...: t = np.arange(-12.5, 12.5, 0.1)\n    ...: amplitude = np.sin(t)\n    ...: \n    ...: fig, ax = plt.subplots()\n ➋ ...: line, = ax.plot(t, amplitude)\n    ...: for i in range(30):\n    ...:     updated_amp = np.sin(t + i)\n ➌ ...:    line.set_ydata(updated_amp) \n    ...:     fig.canvas.draw()\n    ...:     fig.canvas.flush_events()\n    ...:     time.sleep(0.1)\n```", "```py\nIn [49]: import numpy as np\n    ...: import matplotlib.pyplot as plt\n    ...: %matplotlib qt\n    ...: \n    ...: x = 0 ...: for i in range(30):\n    ...:     x = x + 1\n    ...:     y = x**2\n    ...:     plt.scatter(x, y)\n    ...:     plt.title(\"Quadratic Function\")\n    ...:     plt.xlabel(\"x\")\n    ...:     plt.ylabel(\"x-squared\")\n    ...:     plt.pause(0.1)\n```", "```py\nIn [50]: import numpy as np\n    ...: import matplotlib.pyplot as plt\n    ...: from matplotlib.animation import ➊ FuncAnimation\n    ...: %matplotlib qt\n    ...: \n    ...: x = np.arange(-6, 6, 0.02)\n    ...: y = np.sin(2 * x) / x\n ➋ ...: scaler = np.arange(1, 10, 0.1) \n    ...:  \n    ...: fig, ax = plt.subplots()\n    ...: line1 = ax.plot(x, y, color='k', lw=2) ➌[0]\n    ...: line2 = ax.plot(x, y, color='r', ls='--')[0]\n    ...: \n    ...: def animate(frame):\n    ...:     line1.set_ydata(y / frame)\n    ...:     line2.set_ydata(y / frame * -0.2)\n    ...: \n    ...: animated = FuncAnimation(fig, animate, frames=scaler, interval=20)\n```", "```py\n    ...: ani = FuncAnimation(fig, func, frames=param1,fargs=(param2, param3))\n```", "```py\n    ...: animated.save('animation.gif', fps=20, dpi=150)\n```", "```py\nIn [51]: import numpy as np\n    ...: import matplotlib.pyplot as plt\n    ...: import matplotlib as mpl\n    ...: from cycler import cycler\n    ...: %matplotlib inline\n    ...:\n```", "```py\n    ...: mpl.rcParams['figure.figsize'] = (5, 4)\n    ...: mpl.rcParams['lines.color'] = 'black'\n    ...: mpl.rcParams['axes.prop_cycle'] = cycler('linestyle', ['-', ':'])\n    ...:\n```", "```py\n    ...: x = np.arange(0, 15, 0.1)\n    ...: y = np.sin(x)\n    ...: \n    ...: plt.plot(x, y)\n    ...: plt.plot(x + 1, y - 2);\n```", "```py\nIn [52]: mpl.rcParams.update(mpl.rcParamsDefault)\n    ...:\n```", "```py\nIn [53]: mpl.rc('lines', lw=5, ls='-.')\n    ...: plt.plot(x, y);\n```", "```py\n# scientific_style.mplstyle\n\nfigure.figsize:    4, 3  # width & height in inches\nfigure.dpi:        200   # dots per inch\naxes.grid:         True\nfont.family:       Times New Roman\naxes.titlesize:    24\naxes.labelsize:    20\nxtick.labelsize:   16\nytick.labelsize:   16\n```", "```py\nIn [54]: import matplotlib as mpl\n\nIn [55]: mpl.matplotlib_fname()\nOut[55]: 'C:\\\\Users\\\\hanna\\\\anaconda3\\\\lib\\\\site-packages\\\\matplotlib\\\\mpl-\ndata\\\\matplotlibrc'\n```", "```py\nIn [56]: import matplotlib.pyplot as plt\n\nIn [57]: plt.style.use('scientific_style')\n```", "```py\nIn [58]: fig, ax = plt.subplots()\n    ...: ax.set_title('Standardized Title')\n    ...: ax.set_xlabel('Standardized X-labels')\n    ...: ax.set_ylabel('Standardized Y-labels');\n```", "```py\nIn [59]: import numpy as np\n    ...: import matplotlib.pyplot as plt\n    ...: \n    ...: plt.style.use('grayscale')\n    ...:\n```", "```py\n    ...: x = np.arange(0, 20, 0.1)\n    ...: noise = np.random.uniform(0, 10, len(x))\n    ...: y = x + (noise * x**2)\n    ...: y2 = x + (noise * x**3)\n    ...:\n```", "```py\n    ...: plt.title('Grayscale Style Scatterplot')\n    ...: plt.xlabel('Log X')\n    ...: plt.ylabel('Log Y')\n    ...: plt.loglog()\n ➊ ...: plt.scatter(x, y2, alpha=0.4, label='X Cubed') \n    ...: plt.scatter(x, y, marker='+', label='X Squared')\n    ...: plt.legend(loc=(1.01, 0.7));\n```"]