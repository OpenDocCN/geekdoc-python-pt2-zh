- en: '**4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SERIOUS SCRIPTING WITH SPYDER**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The *Scientific Python Development IDE (Spyder)* is an open source interactive
    development environment designed *by* scientists *for* scientists. It integrates
    numerous specialized tools, such as a text editor, debugger, profiler, linter,
    and console, into a comprehensive tool for software development.
  prefs: []
  type: TYPE_NORMAL
- en: Spyder is built for heavy-duty work and consequently has a larger system footprint
    and more complicated interface ([Figure 4-1](ch04.xhtml#ch04fig1)) than the Jupyter
    Qt console covered in the previous chapter. But that doesn’t mean you can’t use
    Spyder for small tasks. It includes both a console, for executing ad hoc code,
    and a text editor for writing persistent, easily editable scripts of any size.
    We use Spyder in [Part II](part02.xhtml#part02) of this book, which provides a
    primer to Python programming in the event you need to learn Python or refresh
    certain concepts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-1: The Scientific Python Development IDE (Spyder)*'
  prefs: []
  type: TYPE_NORMAL
- en: In general, if you plan on writing elaborate programs or developing applications,
    you’ll want to use Spyder or a similar IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing and Launching Spyder with Anaconda Navigator**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spyder comes preinstalled in your *base* environment. To install it in a different
    environment using Anaconda Navigator, first activate the environment by selecting
    its name in the **Applications on** pull-down menu near the top of the Home tab
    ([Figure 4-2](ch04.xhtml#ch04fig2)). In this example, we are using *my_first_env*
    that we created in [Chapter 2](ch02.xhtml). Next, click the **Install** button
    on the Spyder app tile to install it. You might need to scroll down the Home tab
    to find the tile.
  prefs: []
  type: TYPE_NORMAL
- en: After a few minutes, the Install button should change to a Launch button. Click
    it to start Spyder. Remember, if you want to install a specific version of Spyder,
    click the gear icon at the upper right of the tile to see a listing of available
    version numbers.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on installing Spyder, see the Installation Guide at *[https://docs.spyder-ide.org/current/installation.html](https://docs.spyder-ide.org/current/installation.html)*
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-2: The Anaconda Navigator Home tab showing the active environment
    (my_first_env) and the Spyder tile*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing and Launching Spyder Using the CLI**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spyder comes preinstalled in your *base* environment. To install it in a new
    environment using conda, first open Anaconda Prompt (in Windows) or a terminal
    (in macOS and Linux) and activate the conda environment. Let’s do this for *my_first_env*
    by entering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use conda to install spyder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To install specific versions, such as 5.0.3, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To launch Spyder from the command line, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For more information on installing Spyder, see the installation guide at *[https://docs.spyder-ide.org/current/installation.html](https://docs.spyder-ide.org/current/installation.html)*
  prefs: []
  type: TYPE_NORMAL
- en: '**Launching Spyder from the Start Menu**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On most platforms, the official documentation recommends launching Spyder from
    Anaconda Navigator. In Windows, however, the recommended method is to launch Spyder
    from the Start menu ([Figure 4-3](ch04.xhtml#ch04fig3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-3: Spyder installations in the Windows Start menu under Anaconda3*'
  prefs: []
  type: TYPE_NORMAL
- en: There, you should see a listing of all your Spyder installations and the environments
    in which they’re loaded, under the *Anaconda3* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring the Spyder Interface**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 4-4](ch04.xhtml#ch04fig4) shows the Spyder interface with the major
    panes and toolbars labeled. Note that I’ve changed its appearance from the “factory
    settings” view to facilitate this walkthrough and make it easier to see in a black-and-white
    book. Don’t be intimidated by all the controls and panes. Spyder can be as easy
    or as difficult as you want to make it.'
  prefs: []
  type: TYPE_NORMAL
- en: So that you can more easily follow along, let’s configure your screen to look
    closer to that shown in [Figure 4-4](ch04.xhtml#ch04fig4). First, set the syntax
    highlighting theme in the Preferences window by either clicking **Tools** ▸ **Preferences**
    from the top toolbar in Windows and Linux; **Python/Spyder** ▸ **Preferences**
    on macOS; or the wrench icon on the main toolbar near the top of the screen ([Figure
    4-4](ch04.xhtml#ch04fig4)).
  prefs: []
  type: TYPE_NORMAL
- en: Find the Syntax highlighting theme menu, choose the **Spyder** option, and then
    click **Ok**. This sets the background to white (use **Spyder Dark** if you have
    sensitive eyes). Note that you have many color choices for highlighting code,
    just as you did with the Jupyter Qt console in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-4: The Spyder interface with key components labeled*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move the File Explorer pane to the left side of the screen. From
    the toolbar at the top of the interface, click **View** ▸ **Unlock panes and toolbars**.
    This lets you drag them around just like moving windows on your desktop. In the
    upper-right pane, find the gray tab labeled **Files** and click it. The upper-right
    pane should now show a File Explorer window. Grab the top of it and drag it to
    the left side of the interface, as shown in [Figure 4-4](ch04.xhtml#ch04fig4).
    You can grab the sides of the panes to resize them.
  prefs: []
  type: TYPE_NORMAL
- en: From the top toolbar, click **Run** ▸ **Run profiler**, followed by **Source**
    ▸ **Run code analysis**. These should automatically appear as tabs in the upper-right
    pane, as in [Figure 4-4](ch04.xhtml#ch04fig4). Using the profiler, you can measure
    your code’s runtime, whereas code analysis checks for style violations and potential
    bugs.
  prefs: []
  type: TYPE_NORMAL
- en: To save this or any layout, on the top toolbar choose **View** ▸ **Window layouts**
    ▸ **Save current layout** and give the layout a unique name. This becomes the
    default layout when you start Spyder. To choose another layout, look for it under
    **View** ▸ **Window layouts**.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Spyder is highly configurable. You can undock panes by dragging
    them outside of Spyder. You can turn panes and toolbars on and off using **View**
    ▸ **Panes** and **View** ▸ **Toolbars**, respectively. With time, your interface
    will evolve and become uniquely yours. Just remember to save that window layout!
  prefs: []
  type: TYPE_NORMAL
- en: In the sections that follow, we’ll look at how to use Spyder with different
    environments, set up Spyder projects, and use Spyder’s panes and toolbars. Other
    good references are the Spyder home page (*[https://www.spyder-ide.org/](https://www.spyder-ide.org/)*),
    documentation (*[http://docs.spyder-ide.org/current/index.html](http://docs.spyder-ide.org/current/index.html)*),
    and frequently asked questions (*[https://docs.spyder-ide.org/5/faq.html](https://docs.spyder-ide.org/5/faq.html)*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Spyder with Environments and Packages**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spyder is a package like any other and must be installed in *some* conda environment.
    This means that you’ll get an error if you try to import and use a package that’s
    not in the same environment as Spyder. To manage this issue, let’s look at the
    easy but resource-heavy *naive approach* and the lighter but more involved *modular
    approach*.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Naive Approach***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The simplest solution to using Spyder with environments is to install Spyder
    directly into each conda environment and run it from there, as we did in the previous
    installation examples. This works with all Spyder versions and should require
    no extra configuration after the IDE is installed. Unfortunately, it results in
    multiple installations to manage and isn’t as flexible or configurable as other
    alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose that you start a new project with a new environment in
    January and install the current version of Spyder into that environment. Six months
    later, in July, you start an additional project and load Spyder into that project’s
    new environment. This version of Spyder might possibly be newer than the one you
    installed in January. At this point, your *pkgs* folder has two separate Spyder
    installations taking up space. If you don’t need to keep older versions, one option
    is to run `conda update spyder` in your environments, to bring them all up to
    the current version, and then run `conda clean -all` to remove any versions not
    linked to an environment.
  prefs: []
  type: TYPE_NORMAL
- en: You may find the naive approach a suitable solution if you don’t plan to use
    Spyder a lot, if you won’t be working on a lot of projects at the same time, or
    if your system isn’t severely resource constrained. It certainly fits the *science
    first, programming second* mindset. Otherwise, check out the modular approach
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Modular Approach***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another way to work with existing environments is to install Spyder in one location
    and then change its default Python interpreter. The interpreter is the *python.exe*
    file that resides in each conda environment folder. Depending on your system,
    you might see it called *python.exe*, *pythonw.exe*, *python*, or *pythonw*.
  prefs: []
  type: TYPE_NORMAL
- en: With the modular approach, you install Spyder only once and put it in a dedicated
    environment (let’s call it *spyder_env*). This way, you can update it separately
    from other packages and avoid conflicts. You can perform either a minimal install
    of Spyder or a full install that includes all of Spyder’s optional dependencies
    for full functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the command line to create the dedicated environment and perform
    a full install, adding packages like NumPy, pandas, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From now on, you will start Spyder from this dedicated environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow the Spyder package in *spyder_env* to import and use packages in another
    environment, you must install the lightweight *spyder_kernels* package into the
    other environment, using either Navigator or conda. For example, we have not installed
    Spyder in *my_second_env*, created in [Chapter 2](ch02.xhtml). To use Spyder there,
    activate that environment and run the install like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can point your Spyder application, running in *spyder_env*, to the
    interpreter in *my_second_env* so that it can find and use the packages installed
    in *my_second_env*.
  prefs: []
  type: TYPE_NORMAL
- en: To change the Python interpreter in Spyder, click the name of the current environment
    in the **Status** bar (see [Figure 4-4](ch04.xhtml#ch04fig4)) and then select
    **Change default environment in Preferences** (you can also use the “wrench” icon
    in the main toolbar). From the Preferences dialog, select **Python interpreter**
    and then click the radio button next to **Use the following Python interpreter**
    ([Figure 4-5](ch04.xhtml#ch04fig5)). Choose the environment from the drop-down
    list or use the text box (or the Select file icon to the right of the text box)
    to provide the path to the Python interpreter that you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-5: Changing the Python interpreter using the Preferences dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: Click **OK** to change the interpreter and then click **Consoles** ▸ **Restart
    kernel** on the top toolbar for the changes to take effect. The environment name
    on the Status bar should change from *spyder_env* to *my_second_env* ([Figure
    4-6](ch04.xhtml#ch04fig6)). Now, Spyder can find and import packages from the
    selected environment, no matter the location of the Spyder package.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-6: The Spyder Status bar showing the name of the source environment
    for the Python interpreter*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you change the interpreter to an environment that does not have
    either the Spyder or spyder-kernels package installed, you’ll get an error message
    in the console when you try to restart it. Likewise, if you try to start a new
    console, you’ll get the informative message shown in [Figure 4-7](ch04.xhtml#ch04fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-7: Starting a new console in an environment without the spyder-kernels
    package produces a useful error message.*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, using the modular approach with multiple environments can
    become tedious, and you can lose track of which environment you’re working in.
    Some of Spyder’s functionality, like the Variable Explorer, might not work correctly
    for specific data types. And if you need to lock down a specific version of Spyder
    in a particular project, you could end up having to run multiple Spyder installations
    anyway so that other projects use the most current version.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on the modular approach, see the Spyder development team’s
    guide for working with environments and packages at *[https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder/](https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Project Files and Folders**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spyder lets you create special *project files* to store everything you do. These
    help you to stay organized and let you reload projects later to seamlessly continue
    your work. Projects are managed (opened, closed, created, and so on) using the
    **Projects** menu on Spyder’s top toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating a Project in a New Directory***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create a new project file as a new directory, on the top toolbar, click **Projects**
    ▸ **New Project**. This opens the Create New Project dialog shown in [Figure 4-8](ch04.xhtml#ch04fig8).
    Name the new project *my_spyder_proj*, choose a disk location, and then click
    **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-8: The Create New Project dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: This creates the directory structure shown in [Figure 4-9](ch04.xhtml#ch04fig9).
    In addition to the folders shown, Spyder will create eight files to help it manage
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-9: The initial directory structure after creating a new project with
    Spyder*'
  prefs: []
  type: TYPE_NORMAL
- en: To keep your project organized, you can add additional folders to *my_spyder_proj*.
    Ideally, these will use standardized names that are clear and concise so that
    you can easily work among projects and share them with others. Let’s do this now
    as an example. If you already have your own system, feel free to use that.
  prefs: []
  type: TYPE_NORMAL
- en: In Spyder’s File Explorer pane, right-click *my_spyder_proj* and then select
    **New** ▸ **Folder** from the pop-up menu. Add the folders shown below the existing
    *.spyproject* folder, as shown in [Figure 4-10](ch04.xhtml#ch04fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-10: The new project folders displayed in the File Explorer pane*'
  prefs: []
  type: TYPE_NORMAL
- en: In the naming format shown, *code* is for your Python code; *data* is for data
    files such as Excel spreadsheets, *.csv* files, images, and so on; *documents*
    is for text documents, such as reports; *output* is for things like figures and
    tables that your code produces; and *misc* is for everything else.
  prefs: []
  type: TYPE_NORMAL
- en: To make your project truly self-contained, I recommend including your conda
    environment, with its list of Python packages, in the project folder. To do this,
    create the Spyder project in an existing directory, as described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating a Project in an Existing Directory***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are times when you’ll want to create your Spyder project in an *existing*
    directory. A good example of this is when you want to include your conda environment
    in the project so that this important folder is bundled together with your other
    project files, allowing you to easily share or archive the project.
  prefs: []
  type: TYPE_NORMAL
- en: When stored in a Spyder project, the environment folder should be named something
    like *env* or *conda_env*. If you’re working multiple projects, you’ll want to
    append a project name—abbreviated if long—such as *env_PROJ_NAME*. This way, you
    can identify the correct Spyder installation when launching from the Windows **Start**
    menu. Recall that creating an environment outside of the default *pkgs* folder
    has some minor drawbacks, so you’ll want to review “Specifying an Environment’s
    Location” on [page 37](ch02.xhtml#ch00lev2sec20) before committing.
  prefs: []
  type: TYPE_NORMAL
- en: To include the conda environment folder in your Spyder project, we’ll create
    both the project and environment folder using the command line. Let’s name the
    project folder *spyder_proj_w_env* and use conda to simultaneously create both
    folders. In this example, I’m placing it under my *C:\Users\hanna\* folder in
    Windows, but you can put it anywhere you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The subsequent instructions follow the naive approach*,* described in “Using
    Spyder with Environments and Packages,” earlier in this chapter. If you’re using
    the *modular approach*, you need only to install the spyder-kernels package in
    your project’s conda environment. After that, start Spyder from its own dedicated
    environment and then change its Python interpreter to your project’s conda environment.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, if Spyder is currently running, use **File** ▸ **Quit** on the top
    toolbar to exit it. Next, open Anaconda Prompt (in Windows) or a terminal (in
    macOS and Linux) and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, `-p` is short for `--prefix`, which lets you include a directory
    path. We’ve also installed Python and Spyder at the same time, specifying the
    version number as recommended. This represents a minimal installation of Spyder.
    To install all of Spyder’s optional dependencies for full functionality, you can
    append these package names *after* Spyder in the previous command (I’ve omitted
    version numbers for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, activate the new environment and start Spyder by entering the following
    two lines, substituting the path to your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you can create a new project by selecting **Projects** ▸ **New
    Project** from Spyder’s top toolbar. Only this time, select **Existing directory**,
    leave the project name blank, and set the location to the path to the new project
    folder, *spyder_proj_w_env*, as shown in [Figure 4-11](ch04.xhtml#ch04fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-11: Creating a new Spyder project using an existing directory*'
  prefs: []
  type: TYPE_NORMAL
- en: You can now add the additional folders for code, data, and so on, as we did
    in the previous section. At this point, you’ll have a self-contained project ([Figure
    4-12](ch04.xhtml#ch04fig12)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-12: The new Spyder project with embedded conda environment (conda_env
    folder)*'
  prefs: []
  type: TYPE_NORMAL
- en: Again, you can use any file organization system you prefer, but I would strongly
    advise against dumping everything straight into the project folder. This will
    create a confusing mess, especially with large projects.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Project Pane***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When it comes to working with your project folders, you have several choices.
    [Figure 4-10](ch04.xhtml#ch04fig10) was taken from Spyder’s File Explorer pane.
    If you’d rather see just your project folders when using Spyder, open the Project
    pane by clicking **View** ▸ **Panes** ▸ **Project** from the top toolbar. To close
    the File Explorer pane, use the “hamburger” icon in the upper-right corner of
    the pane or use **View** ▸ **Panes** from the top toolbar and then deselect the
    pane.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can also view your project folder from your operating system’s file explorer
    while in Spyder. From either the Project or File Explorer pane, right-click the
    project folder and then select ***Show in folder***.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Help Pane**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spyder’s Help pane is useful whether you’re a beginner or an experienced programmer.
    To activate it, click the **Help** tab along the bottom of the upper-right pane
    in [Figure 4-4](ch04.xhtml#ch04fig4).
  prefs: []
  type: TYPE_NORMAL
- en: When you start Spyder for the first time, you’ll see a message in the Help pane
    asking you to read a short introductory tutorial ([Figure 4-13](ch04.xhtml#ch04fig13)).
    I highly recommend it, but if you want to wait, you’ll be able to read it later
    using the Help menu on the top toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-13: The Help pane at initial startup*'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the Introduction tour, the toolbar Help menu provides access
    to the longer Spyder tutorial that displays in the Help pane ([Figure 4-14](ch04.xhtml#ch04fig14)).
    You can also watch videos, access both the Spyder and IPython documentation, see
    a summary of keyboard shortcuts, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-14: The Help menu and the Spyder tutorial displayed in the Help pane*'
  prefs: []
  type: TYPE_NORMAL
- en: If you have the Help pane open while you code, it can find, render, and display
    documentation for any object with a *docstring* (descriptive text summary), including
    modules, classes, functions, and methods. This lets you access documentation directly
    from Spyder, without having to interrupt your workflow and look elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: The Source menu at the top of the Help pane lets you select between the Editor
    and the IPython console ([Figure 4-15](ch04.xhtml#ch04fig15)). Manually clicking
    an object, such as the `print()` function in [Figure 4-15](ch04.xhtml#ch04fig15),
    and then pressing CTRL-I (CMD-I in macOS) will display information on that item.
    You can get help by manually entering an object’s name (such as “print”) in the
    **Object** textbox at the top of the pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-15: Help output for the print() function used in the Editor, invoked
    using CTRL-I in Windows*'
  prefs: []
  type: TYPE_NORMAL
- en: To enable automatic help for both the Editor and Console, first click the wrench
    icon on the main toolbar (see [Figure 4-4](ch04.xhtml#ch04fig4)), and then select
    **Help** and click the radio buttons for Editor and IPython console under Automatic
    connections. It then can be turned on and off using the “lock” icon at the top
    of the Help pane. When on, simply typing a left parenthesis character (`(`) after
    a function or method name will show its associated help document.
  prefs: []
  type: TYPE_NORMAL
- en: You can also access summary help for objects by hovering over them in the Editor.
    Clicking the hover pop-up will open the full documentation in the Help pane. Just
    be sure that the Source menu is set to “Editor.”
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the “hamburger” icon at the upper right of the Help pane lets you toggle
    features in the display mode, such as rich or plain text, dock and undock the
    pane, close the window, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**The IPython Console**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The IPython console, located in the lower-right pane in [Figure 4-4](ch04.xhtml#ch04fig4),
    represents a direct connection to Python that lets you run code interactively.
    We reviewed most of its functionality in [Chapter 3](ch03.xhtml), so I won’t repeat
    that here.
  prefs: []
  type: TYPE_NORMAL
- en: With Spyder, you can open multiple consoles, restart the kernel, clear the namespace,
    view a history log, undock the window, and perform similar tasks. You can select
    some or all these options by clicking the named tab at the top of the IPython
    console pane, by using the “hamburger” icon in the upper-right corner of the pane,
    or by clicking **Consoles** on the top toolbar. You also get full GUI integration
    with the enhanced Spyder Debugger and the Variable Explorer, which we’ll look
    at in later sections.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Console for Output and Plotting***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you use Spyder’s text editor, any text-based output will appear in the
    console. Likewise, any Matplotlib-based graphics will display either in the console,
    as you saw in [Chapter 3](ch03.xhtml), or in Spyder’s Plots pane. The Plots pane
    is the default location, but you can force graphics to display *within* the console
    by opening the **Plots** pane, clicking the “hamburger” icon in the upper-right
    corner, and then deselecting **Mute inline plotting**. You can also control the
    graphics display from the top toolbar by choosing **Tools** ▸ **Preferences**
    ▸ **IPython console** ▸ **Graphics** and then selecting from the Graphics backend
    menu ([Figure 4-16](ch04.xhtml#ch04fig16)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-16: The IPython console Graphics dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying graphics in the console is a good choice if you want to save a record
    of an interactive session. If you need to interact with the plot, however, such
    as zooming, configuring subplots, manipulating files, and saving them using different
    formats, you’ll want to open it in a new window. You can do this by adding the
    magic command `%matplotlib qt` after the imports at the top of your program.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Some types of graphics can’t be displayed within Spyder but will instead open
    in a browser or an external native window. These include web-based graphics and
    Turtle and TKinter windows.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Kernels with the Console***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Python kernel is a computational engine that executes the code. You have
    several options for working with kernels in the console, including starting new
    kernels and interrupting running kernels. These are accessible from either Consoles
    on the top toolbar, the named console tab, or the “hamburger” icon on the IPython
    console pane.
  prefs: []
  type: TYPE_NORMAL
- en: You can also connect to external local and remote kernels (including those managed
    by Jupyter Notebook or Qt console) through the Consoles menu. To learn more, see
    *[https://docs.spyder-ide.org/5/panes/ipythonconsole.html](https://docs.spyder-ide.org/5/panes/ipythonconsole.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Clearing the Namespace***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Python kernel keeps track of objects such as variables and functions that
    you use when coding. This collection of objects, defined in the console at any
    given time, is called the *namespace*. To keep the namespace from becoming cluttered,
    Spyder allows you to clear it whenever you want.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example. The left pane in [Figure 4-17](ch04.xhtml#ch04fig17)
    is the text editor, and the right pane is the console. You can use both to write
    code. In the editor, I set `x = 5` and then pressed F5 to run the program. Because
    I didn’t include a `print()` function, nothing seems to happen, but internally,
    Python has assigned the `x` variable a value of 5.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-17: Both the text editor (left) and console (right) share the same
    x value*'
  prefs: []
  type: TYPE_NORMAL
- en: Now I decide to stop and test a coding idea in the console. I want to use an
    `x` value of 10, but I forget to type that in. Instead, I immediately multiply
    `x` by 10 and get an output of 50 ([Figure 4-17](ch04.xhtml#ch04fig17)). Normally,
    this would raise an error, as I haven’t named `x` yet, but because I did this
    earlier in the editor (in what I think is a separate program), `x` is already
    in the namespace. From my perspective, this result is unexpected.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging this in a tiny snippet is easy, but imagine that you’re working with
    longer, more complicated programs. A single occurrence of the `x` variable might
    be buried in 200 lines of code. Even with small programs, a common error is to
    run the program, delete something important, and then not notice the mistake as
    the program runs correctly, because the deleted object is resident in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'These persistent objects are easily forgotten and can come from numerous sources
    including previously executed code, interactive work in the console, or convenience
    imports of libraries (Spyder may do some of those convenience imports automatically).
    To remove these objects and clear the namespace without restarting the kernel,
    you can click **Remove all variables** under the Consoles menu on the top toolbar,
    or under the Console tab in the Console pane. You can also remove all the variables
    by entering the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to view the objects defined in the global namespace of a session,
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that even after removing all variables, a dozen or so built-in objects
    will remain. The namespace will never be completely empty.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule, whenever you finish coding a program, you should check that it runs
    independently by first removing all variables or starting a new kernel.
  prefs: []
  type: TYPE_NORMAL
- en: '***The History Pane***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The History pane ([Figure 4-4](ch04.xhtml#ch04fig4)) contains a timestamped
    record of all the commands and code that you’ve run in a console. You can use
    this log to retrace your steps and reproduce your work. It won’t show output or
    messages, however, and if you run a program in the Editor pane, it will show only
    that the file was *run*, not what commands were executed. And no matter how many
    consoles you have open, there’ll be only one History pane. All the commands from
    the various consoles will be listed in the order in which they were executed,
    with no indication as to the source console.
  prefs: []
  type: TYPE_NORMAL
- en: You can copy commands from the History pane and paste them in both the console
    and the editor. Currently, only 1,000 lines of history can be shown in the pane
    and there’s no way to clear the history. The list of commands are stored in *history.py*
    in the .*spyder-py3* directory in your user home folder (such as *C:/Users/<username*>
    on Windows, */Users/<username>* for macOS, and */home/<username>* on GNU/Linux).
  prefs: []
  type: TYPE_NORMAL
- en: '***Special Consoles***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to the IPython console, Spyder supports several *special consoles*
    that you can launch from either Consoles on the top toolbar or by using the “hamburger”
    icon on the IPython console pane. For example, the Cython console lets you use
    Cython (a superset of the Python language) to speed up your code and call C functions
    directly from Python. The SymPy console enables the creation and display of symbolic
    math expressions. You can also activate symbolic math usage through **Preferences**
    ▸ **IPython console** ▸ **Advanced Settings** ▸ **Use symbolic math**, assuming
    you have the SymPy package installed. For more on this, click **Help** ▸ **Spyder
    tutorial** on the top toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Editor Pane**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The text editor ([Figure 4-4](ch04.xhtml#ch04fig4)) is the heart and soul of
    Spyder. Whereas a console is basically a “scratch pad” designed for throw-away,
    interactive scripting with little to no persistence, Spyder’s Editor pane lets
    you create programs that you can save and run (or edit) later. You can think of
    it as a word processor with coding-friendly features like syntax highlighting,
    real-time code and style analysis, on-demand completion, common keyboard shortcuts,
    horizontal and vertical splitting, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '***Writing a Program Using the Editor***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To take the editor for a test drive, use either the command line or Navigator
    to activate the *spyder_proj_w_env* environment that you made in “Creating a Project
    in an Existing Directory” earlier in the chapter To try out plotting in the IDE,
    install the NumPy and Matplotlib packages in the active environment using either
    Navigator or the command line. In the command line, this looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `-y` (short for `--yes`) just confirms the installation command at execution
    so that you don’t have do it manually during the process. I show this for your
    convenience, but it’s always safer to manually confirm installations and removals.
    This gives you another opportunity to confirm that the correct environment is
    activated and that conda isn’t having to downgrade an existing package, due to
    some dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Next, launch Spyder from the same environment, using either the Windows Start
    menu (be sure to pick the icon with the proper environment name), Anaconda Navigator,
    or the command line. You’re now ready to write your first program with the editor.
  prefs: []
  type: TYPE_NORMAL
- en: To evaluate Spyder’s plotting capability, let’s use the “Stem Plot” example
    from the Matplotlib gallery (*[https://matplotlib.org/stable/gallery/index.html](https://matplotlib.org/stable/gallery/index.html)*).
    Start a new file by clicking **File** ▸ **New file** on the top toolbar or by
    using CTRL-N. You’ll see a new “untitled” tab appear in the Editor pane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the boilerplate text in the editor pane and type in the code that follows.
    Unlike the console, it’s okay to press ENTER to add new lines. In script mode,
    your code is executed later using special commands. If you’re a complete beginner,
    don’t worry about the code details; for now, focus on how the Editor pane works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Although it’s possible to run this code now, let’s save it first using **File**
    ▸ **Save as** on the top toolbar. Name the file *stem_plot.py* and save it in
    the *code* folder of your Spyder project.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The text editor supports many keyboard shortcuts. To see a list, on the top
    toolbar, click ***Help*** ▸ ***Shortcuts summary***. To search for a specific
    shortcut, click ***Tools*** ▸ ***Preferences*** ▸ ***Keyboard shortcuts***, also
    on the top toolbar.*'
  prefs: []
  type: TYPE_NORMAL
- en: To execute the code, you have several choices. You can use the “play” arrow
    on the left side of the Run toolbar ([Figure 4-4](ch04.xhtml#ch04fig4)), click
    inside the Editor pane and press CTRL-ENTER, or press F5 (or FN-F5, depending
    on your keyboard) from within the Editor pane.
  prefs: []
  type: TYPE_NORMAL
- en: If this is the first time you’ve run a program in Spyder, you’ll be asked to
    choose a run configuration ([Figure 4-18](ch04.xhtml#ch04fig18)). Choose the default
    selection, **Execute in current console**. We’ll talk about what this means in
    “Setting the Run Configuration” later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-18: The Run settings dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the results shown in [Figure 4-19](ch04.xhtml#ch04fig19).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-19: The Spyder interface after executing the stem_plot.py program*'
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note in [Figure 4-19](ch04.xhtml#ch04fig19) is that the text output,
    “This is a stem plot,” appears in the console window. This is a cleaner outcome
    compared to programming in the console, where your code, along with any output—including
    error messages—are displayed together in the same window.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you run a program in the editor, it’s “known” to the console. This means
    that it remembers things like named variables and defined functions. To see an
    example, in the IPython console, enter the following and then press ENTER:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This should regenerate the stem plot in [Figure 4-19](ch04.xhtml#ch04fig19).
  prefs: []
  type: TYPE_NORMAL
- en: Behavior such as this is useful when developing and debugging complex programs
    and when exploring large datasets that you don’t want to load more than once.
    It can also lead to unexpected results, as discussed earlier in “Clearing the
    Namespace” earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at another way to display a plot. In the Editor pane, add the
    `%matplotlib qt` magic command below the imports, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as *stem_plot.py* and then use CTRL-ENTER to run the program.
    In this case, the plot displays in an external window (check your task bar for
    an icon if nothing pops up). This Qt window has a toolbar with more options than
    are available inline ([Figure 4-20](ch04.xhtml#ch04fig20)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-20: The stem plot displayed in an external Qt window*'
  prefs: []
  type: TYPE_NORMAL
- en: This is a good time to revisit the global namespace. Close the Qt window. Now,
    delete the `%matplotlib qt` magic command from the file and save it by pressing
    CTRL-S. Whether you rerun the file from the editor or use `plt.stem(x, y)` in
    the console as we did earlier, the Qt window pops up again. Even though you removed
    it from the file, the old command is still persistent in memory.
  prefs: []
  type: TYPE_NORMAL
- en: To restore the inline plotting, restart the kernel or run the magic command
    `%matplotlib inline`, either in the console or through the editor.
  prefs: []
  type: TYPE_NORMAL
- en: '***Defining Code Cells***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the previous example, you typed a complete program into the Editor pane and
    then ran it. You can also run it one line at a time, or run a block of connected
    lines, referred to as a “code cell.”
  prefs: []
  type: TYPE_NORMAL
- en: To look at an example, create a new file, only this time, use the rectangular
    “New file” icon on the left side of the Files toolbar ([Figure 4-4](ch04.xhtml#ch04fig4)).
    Name the file *temperature_converter.py* and save it in the *code* folder.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, assume that you’re always having to convert temperature measurements
    from one scale to another and you want to put several conversion equations in
    one file, for convenience. You don’t want to run the whole program every time,
    because you’re normally performing just one conversion, such as Fahrenheit to
    Celsius, or Celsius to Kelvin. In this case, code cells are a handy solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code into the new file and save it. Use `#%%` to separate
    the code into discrete cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Adding a description to the right of the separator not only documents what the
    cell does, it names that cell in the Outline pane. To activate this pane, go to
    the top toolbar and click **View** ▸ **Panes** ▸ **Outline**. [Figure 4-21](ch04.xhtml#ch04fig21)
    shows the Editor and Outline panes together.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-21: The Editor pane (left) and Outline pane (right) for the temperature_converter.py
    program*'
  prefs: []
  type: TYPE_NORMAL
- en: In the Editor pane in [Figure 4-21](ch04.xhtml#ch04fig21), notice how the horizontal
    lines divide the script into cells starting with the `#%%` separators. In the
    Outline pane, the descriptions of the cells appear in order, from top to bottom.
    If you click a description, the corresponding cell in the Editor pane is highlighted
    and activated. You can also highlight a cell by clicking in it in the text editor.
  prefs: []
  type: TYPE_NORMAL
- en: To see the options for running cells, hover your cursor over the icons on the
    Run toolbar ([Figure 4-4](ch04.xhtml#ch04fig4)). This will also reveal the keyboard
    shortcuts. To run just the middle cell that converts Celsius to Fahrenheit, click
    in the cell, and then press CTRL-ENTER or click the **Run current cell** icon
    from the toolbar. You can also run a selection of code or a single line using
    an icon or the F9 key.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to run selected cells or single lines is useful when designing and
    debugging programs. It’s also handy for, say, changing a plot’s parameters and
    evaluating the results without reloading all the input data. You can also use
    this to update part of a program without rerunning all the code, but keep in mind
    that the console will “remember” only the last thing that was run. If this becomes
    confusing, you’ll want to refresh the console by restarting the kernel or removing
    all variables from the namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '***Setting the Run Configuration***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When you run a program in the editor for the first time, either using **Run**
    ▸ **Run** from the toolbar or by pressing F5, a dialog will open and ask you to
    choose the method for executing the file (see [Figure 4-18](ch04.xhtml#ch04fig18)).
    You’ll have three choices:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute in current console (the default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute in dedicated console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute in an external system console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll look at the first two in more detail next, but the recommendation for
    beginners is to use the default option, **Execute in current console**, and then
    verify that completed code executes independently. This requires clearing the
    namespace by removing all variables or restarting the kernel prior to checking
    the program.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry about getting locked into a decision. You can change the run configuration
    at any time by selecting **Run** ▸ **Configuration per file** from the top toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '**Executing in the Current Console**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When a file is executed in the current console, you can continue to interact
    with the console after the file runs. This lets you inspect and interact with
    any objects created during execution. This is a useful feature for incremental
    coding, testing, and debugging. As you saw in “Writing a Program Using the Editor,”
    it lets you call commands and functions from the console without executing the
    file again.
  prefs: []
  type: TYPE_NORMAL
- en: This comes at a price, however. Objects can persist in the global namespace
    from before execution of the code (see “Clearing the Namespace” on [page 76](ch04.xhtml#ch00lev2sec38)).
    One way to ensure that your code does not depend on existing but transitory objects
    in the namespace is to execute the file in a new console, as described next.
  prefs: []
  type: TYPE_NORMAL
- en: '**Executing in a Dedicated Console**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Choosing the **Execute in a dedicated console** option means that a new IPython
    console is opened every time you execute code in the editor. With this option,
    you can be sure that there are no persistent global objects polluting the namespace,
    such as undefined functions, unnamed variables, or unimported packages. It’s a
    safe option, but it provides a bit less flexibility for interacting with your
    code. It can also generate a lot of console tabs to manage. So, if you’re aware
    of namespace issues, the **Executing in the current console** option is preferred.
  prefs: []
  type: TYPE_NORMAL
- en: '***Autocompleting Text***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To save you keystrokes, both the text editor and console support the use of
    *autocompletion* using the TAB key. For example, enter the following long variable
    name in the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, slowly start typing it again and watch what happens.
  prefs: []
  type: TYPE_NORMAL
- en: When you start typing the name of an object such as a command, function, variable,
    class, and so on, the editor will present you with a list of objects that start
    with those letters ([Figure 4-22](ch04.xhtml#ch04fig22)). In the console, you
    must press TAB to display the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-22: Using the Autocomplete functionality*'
  prefs: []
  type: TYPE_NORMAL
- en: If the name is unique, or at the top of the list, you can press the TAB or ENTER
    key immediately and Spyder will fill out the rest of the name. If there are multiple
    choices, you can either keep typing until only the name you want remains and then
    press TAB or ENTER; use the arrow keys to select the correct name and press TAB
    or ENTER; or double-click the correct name with the mouse. You can change the
    number of characters that you need to type to see the list of suggested completions
    by going to **Tools** ▸ **Preferences** ▸ **Completion and Linting** on the top
    toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Autocompletion is a great feature because it supports writing “Pythonic” code
    that’s easy to read. With autocompletion, you can use highly descriptive variable
    and function names, like `photoshpere_temperature_in_celsius` or `step_2_apply_Gaussian_blur()`
    without incurring repetitive strain injuries.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Code Analysis Pane**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python has certain guidelines for writing code that the community is expected
    to follow. The goal is to produce Pythonic code that others can easily pickup
    and understand. We examine these guidelines later in [Part II](part02.xhtml#part02).
    For now, know that *linters* are tools that review your code and provide feedback
    on where you might have violated a guideline. Spyder uses the best-in-class *Pylint*
    linter in its Code Analysis pane.
  prefs: []
  type: TYPE_NORMAL
- en: Code analysis will help you to improve your code by detecting style issues,
    bad practices, and potential bugs. You should not consider a program complete—or
    ready to post on an online help site—until you’ve run it through a linter.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how this works. Use **Projects** ▸ **Open Project** from the top
    toolbar to open the *spyder_proj_w_env* project that you made earlier in “Creating
    a Project in an Existing Directory.” Then, open the *stem_plot.py* file in the
    editor using **File** ▸ **Open** from the top toolbar. We made this file previously
    in “Writing a Program Using the Editor.” Next, open the Code Analysis pane by
    clicking in the Editor pane and pressing F8, or by using **Source** ▸ **Run Code
    Analysis** on the top toolbar. You should get the results shown in [Figure 4-23](ch04.xhtml#ch04fig23).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-23: The Editor pane (left) and Code Analysis pane (right) for the
    stem_plot.py program*'
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the Code Analysis pane on the right, you can see that the code
    was given a high evaluation score of 8.33 out of 10\. The only violation was for
    having trailing newlines (blank lines) at the end of the program.
  prefs: []
  type: TYPE_NORMAL
- en: You can customize the code analysis by clicking **Tools** ▸ **Preferences**
    and then selecting from the **General**, **Linting**, **Code style and formatting**,
    and **Docstring style** tabs. There’s lots to choose from, including ignoring
    certain errors and warnings, changing the tool used to format code, picking the
    convention used to lint docstrings, underlining errors and warnings, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also suppress messages by adding specific comments to your code. For
    example, an expectation is that most variables in the global space represent *constants*
    and should be named using all caps. In short programs, you might choose to ignore
    this by inserting the following comment at the top of your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To find the proper message name, such as “trailing-newlines,” check the results
    in the Code Analysis pane (see [Figure 4-23](ch04.xhtml#ch04fig23)).
  prefs: []
  type: TYPE_NORMAL
- en: For more on code analysis, see the “Panes in Depth” section of the Spyder documentation
    (*[https://docs.spyder-ide.org/](https://docs.spyder-ide.org/)*). For more on
    the Python style guide, see *[https://pep8.org/](https://pep8.org/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Variable Explorer Pane**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Variable Explorer pane lets you view and edit variables generated during
    the execution of a program in the text editor, or those entered directly in the
    IPython console. These are the namespace contents of the current IPython console
    session, and you can use the Variable Explorer to inspect, add, remove, and edit
    their values through a variety of GUI-based editors.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try it out. First, on the top toolbar, click **Consoles** ▸ **Restart
    kernel** to start a new IPython console session. This will delete any old variables
    that might be persistent in memory. Now, in the upper-right pane, click the **Variable
    Explorer** tab or, on the top toolbar, click **View** ▸ **Panes** ▸ **Variable
    Explorer**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the IPython console, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Each time you press ENTER, the Variable Explorer pane should update until it
    looks like [Figure 4-24](ch04.xhtml#ch04fig24).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-24: The Variable Explorer pane*'
  prefs: []
  type: TYPE_NORMAL
- en: The pane shows you the name of the variable; its type, such as an integer, string,
    dictionary, and so on; its size; and its value. Right-clicking objects in the
    Variable Explorer displays options to plot and analyze these further. The pane
    supports editing lists, strings, dictionaries, NumPy arrays, pandas DataFrames,
    pandas Series, Pillow images, and more, letting you plot and visualize them with
    one click. For example, although the 10-row-by-5-column NumPy array is too large
    to show in the Value column, if you double-click it, an Object Viewer window appears
    that lets you view the array and manipulate its contents ([Figure 4-25](ch04.xhtml#ch04fig25)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-25: Object Viewer display of the an_array object*'
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, double-clicking anywhere within the list object’s row in the Variable
    Explorer pane will launch an Object Viewer ([Figure 4-26](ch04.xhtml#ch04fig26)).
    By right-clicking in a row in the Object Viewer, you can perform operations such
    as inserting a row and adding a new item, like “fluorite.”
  prefs: []
  type: TYPE_NORMAL
- en: If you use the `a_list` variable again in the current session, it will contain
    the new item, “fluorite.” You can also use the Variable Explorer’s toolbar to
    save the current session’s data as a *.spydata* file, which you can load later
    to recover all the variables stored. However, be aware that changing the value
    of an object in an Object Viewer doesn’t alter your code. If you rerun the code
    that generated the `a_list` variable, whether from a file or the console, it won’t
    contain “fluorite.”
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-26: Object Viewer displaying a list object*'
  prefs: []
  type: TYPE_NORMAL
- en: You can filter the items in the Variable Explorer by clicking the “hamburger”
    icon at the upper right of the pane. If an item can be plotted, you can generate
    a plot of its values, appropriate to its data type, by right-clicking the object.
    For example, right-click the `an_array` object and then choose **Show image**.
    This will produce a color heatmap of the array ([Figure 4-27](ch04.xhtml#ch04fig27)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-27: A heatmap of the an_array object*'
  prefs: []
  type: TYPE_NORMAL
- en: One thing that Variable Explorer won’t do is let you see “local” variables defined
    within functions (we look at functions in [Chapter 11](ch11.xhtml)). If you define
    a function using the following code, you won’t be able to see the `var1` and `var2`
    variables in the pane.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The Variable Explorer lets you keep track of your program’s global variables.
    It helps you to develop and test programs by permitting the inspection and editing
    of variables in a friendly GUI format. To read more about the options available,
    see the Spyder documentation at *[https://docs.spyder-ide.org/5/panes/variableexplorer.html](https://docs.spyder-ide.org/5/panes/variableexplorer.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Profiler Pane**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Profiler helps you to optimize your code by measuring the runtime and number
    of calls for every function or method called in a file. You can use it to identify
    bottlenecks and quantitatively measure performance improvements after you make
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example of how this works. On the top toolbar, open a new
    file in the editor by clicking **File** ▸ **New file**. Save this file in the
    *code* folder of your *spyder_proj_w_env* project (or anywhere else you want)
    as *hoot.py*. Now, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we defined two functions, `search_list` and `search_set`, that
    are identical in all but name. We’re going to use the Profiler to prove that it’s
    a lot faster to search for an item in a Python *set* versus a Python *list*, so
    we need to distinguish between the functions (we look at sets and lists in more
    detail in [Chapter 9](ch09.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: We next created a list with the numbers 0 to 999 (Python starts counting at
    0, not 1) and replaced the next-to-last item (index 998) with “hoot.” We then
    made a set from this list, named `my_set`. Now we call each function and pass
    them either the list or set, as appropriate (*pass* means that we enter the name
    of our list or set in the function’s parentheses). When each function reaches
    the “hoot” item in the list or set, it immediately prints “Hooty hoot!” in the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Run the file by clicking in the Editor pane and pressing F5\. You should see
    `Hooty hoot!` display twice in the IPython console.
  prefs: []
  type: TYPE_NORMAL
- en: To see how long each function took to run, click **Run** ▸ **Run profiler**
    from the top toolbar. This launches the Profiler pane and displays the run statistics
    ([Figure 4-28](ch04.xhtml#ch04fig28)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/04fig28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-28: The Profiler pane*'
  prefs: []
  type: TYPE_NORMAL
- en: The Total Time column shows the time taken by the specified item and every function
    called by it (indented underneath it). The Local Time column counts only the time
    spent in a particular callable object’s own scope. Based on the Local Time, the
    list object took 14.8 microseconds to run versus only 400 nanoseconds for the
    set. Because the two functions were identical except for their inputs, we can
    surmise that a hashable set is a better data type than a list for doing membership
    searches.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can select files by using the text box at the top of the Profiler
    pane and run them with the green “play” arrow to the right of the box ([Figure
    4-28](ch04.xhtml#ch04fig28)). Other options include showing the program’s output,
    saving the profiling data, loading profiling data for comparison, and clearing
    comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the Profiler, including the option to measure the memory
    usage of your code, see *[https://docs.spyder-ide.org/5/panes/profiler.html](https://docs.spyder-ide.org/5/panes/profiler.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Debugger Pane**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debugging is the process of detecting and removing errors (“bugs”) in code that
    can cause it to crash, return incorrect results, or otherwise behave unexpectedly.
    Python automatically produces error messages that can help you determine what
    part of your code is failing.
  prefs: []
  type: TYPE_NORMAL
- en: For a more sophisticated approach, Spyder integrates the enhanced `ipdb` debugger
    that’s part of the Python standard library. With the debugger tool, you can walk
    through your code line by line checking for problems.
  prefs: []
  type: TYPE_NORMAL
- en: Going into the details of the debugger is beyond the scope of this book, and
    you’ll probably write a lot of code without needing it. If you’re curious, however,
    you can get a good overview at *[https://docs.spyder-ide.org/5/panes/debugging.html](https://docs.spyder-ide.org/5/panes/debugging.html)*,
    and there are many online tutorials and videos for the debugger that use real-life
    coding examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spyder is powerful enough for full-time developers, so there’s a lot here we
    haven’t covered. But despite its sophistication, it’s easy for a beginner to pick
    up and use, and its editor and IPython console are great if you’re looking only
    to knock off short scripts. Although much of your scientific programming will
    probably be performed in Jupyter Notebook, covered next, there are many coding
    tasks for which Spyder is more appropriate, and you’ll be glad to have it in your
    repertoire.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to Python and want to start learning the language right now, you
    can skip ahead to [Part II](part02.xhtml#part02), “A Python Primer.” When you
    finish, don’t forget to circle back to [Part I](part01.xhtml#part01) and check
    out the chapters on Jupyter Notebook and JupyterLab ([Chapters 5](ch05.xhtml)
    and [6](ch06.xhtml)).
  prefs: []
  type: TYPE_NORMAL
