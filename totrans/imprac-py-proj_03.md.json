["```py\n>>> word = list('stop')\n>>> word\n['s', 't', 'o', 'p']\n>>> anagram = list('pots')\n>>> anagram\n['p', 'o', 't', 's']\n```", "```py\n>>> anagram == word\nFalse\n```", "```py\n>>> word = sorted(word)\n>>> word\n['o', 'p', 's', 't']\n>>> anagram = sorted(anagram)\n>>> anagram\n['o', 'p', 's', 't']\n>>> anagram == word\nTrue\n```", "```py\nLoad digital dictionary file as a list of words\nAccept a word from user\nCreate an empty list to hold anagrams\nSort the user-word\nLoop through each word in the word list:\n    Sort the word\n    if word sorted is equal to user-word sorted:\n        Append word to anagrams list\nPrint anagrams list\n```", "```py\n➊ import load_dictionary\n\n➋ word_list = load_dictionary.load('2of4brif.txt')\n\n➌ anagram_list = []\n\n   # input a SINGLE word or SINGLE name below to find its anagram(s):\n➍ name = 'Foster'\n   print(\"Input name = {}\".format (name))\n➎ name = name.lower()\n   print(\"Using name = {}\".format(name))\n\n   # sort name & find anagrams\n➏ name_sorted = sorted(name)\n➐ for word in word_list:\n       word = word.lower()\n       if word != name:\n           if sorted(word) == name_sorted:\n               anagram_list.append(word)\n\n   # print out list of anagrams\n   print()\n➑ if len(anagram_list) == 0:\n       print(\"You need a larger dictionary or a new name!\")\n   else:\n    ➒ print(\"Anagrams =\", *anagram_list, sep='\\n')\n```", "```py\nInput name = Foster\nUsing name = foster\n\nAnagrams =\nforest\nfortes\nsofter\n```", "```py\n   >>> from collections import Counter\n➊ >>> my_bonsai_trees = ['maple', 'oak', 'elm', 'maple', 'elm', 'elm', 'elm', 'elm']\n➋ >>> count = Counter(my_bonsai_trees)\n   >>> print(count)\n➌ Counter({'elm': 5, 'maple': 2, 'oak': 1})\n```", "```py\n   >>> name = 'foster'\n   >>> word = 'forest'\n   >>> name_count = Counter(name)\n   >>> print(name_count)\n➊ Counter({'f': 1, 't': 1, 'e': 1, 'o': 1, 'r': 1, 's': 1})\n   >>> word_count = Counter(word)\n   >>> print(word_count)\n➋ Counter({'f': 1, 't': 1, 'o': 1, 'e': 1, 'r': 1, 's': 1})\n```", "```py\n>>> if word_count == name_count:\n        print(\"It's a match!\")\n\nIt's a match!\n```", "```py\nLoad a dictionary file\nAccept a name from user\nSet limit = length of name\nStart empty list to hold anagram phrase\nWhile length of phrase < limit:\n    Generate list of dictionary words that fit in name\n    Present words to user\n    Present remaining letters to user\n    Present current phrase to user\n    Ask user to input word or start over\n    If user input can be made from remaining letters:\n        Accept choice of new word or words from user\n        Remove letters in choice from letters in name\n        Return choice and remaining letters in name\n    If choice is not a valid selection:\n        Ask user for new choice or let user start over\n    Add choice to phrase and show to user\n    Generate new list of words and repeat process\nWhen phrase length equals limit value:\n    Display final phrase\n    Ask user to start over or to exit\n```", "```py\n➊ import sys\n   from collections import Counter\n   import load_dictionary\n\n➋ dict_file = load_dictionary.load('2of4brif.txt')\n   # ensure \"a\" & \"I\" (both lowercase) are included\n   dict_file.append('a')\n   dict_file.append('i')\n   dict_file = sorted(dict_file)\n\n➌ ini_name = input(\"Enter a name: \")\n\n➍ def find_anagrams(name, word_list):\n       \"\"\"Read name & dictionary file & display all anagrams IN name.\"\"\"\n    ➎ name_letter_map = Counter(name)\n       anagrams = []\n    ➏ for word in word_list:\n        ➐ test = ''\n        ➑ word_letter_map = Counter(word.lower())\n        ➒ for letter in word:\n               if word_letter_map[letter] <= name_letter_map[letter]:\n                   test += letter\n           if Counter(test) == word_letter_map:\n               anagrams.append(word)\n    ➓ print(*anagrams, sep='\\n')\n       print()\n       print(\"Remaining letters = {}\".format(name))\n       print(\"Number of remaining letters = {}\".format(len(name)))\n       print(\"Number of remaining (real word) anagrams = {}\".format(len(anagrams)))\n```", "```py\n➊ def process_choice(name):\n       \"\"\"Check user choice for validity, return choice & leftover letters.\"\"\"\n       while True:\n        ➋ choice = input('\\nMake a choice else Enter to start over or # to end: ')\n           if choice == '':\n               main()\n           elif choice == '#':\n               sys.exit()\n           else:\n            ➌ candidate = ''.join(choice.lower().split())\n        ➍ left_over_list = list(name)\n        ➎ for letter in candidate:\n               if letter in left_over_list:\n                   left_over_list.remove(letter)\n        ➏ if len(name) - len(left_over_list) == len(candidate):\n               break\n           else:\n               print(\"Won't work! Make another choice!\", file=sys.stderr)\n    ➐ name = ''.join(left_over_list)  # makes display more readable\n    ➑ return choice, name\n```", "```py\n   def main():\n       \"\"\"Help user build anagram phrase from their name.\"\"\"\n    ➊ name = ''.join(ini_name.lower().split())\n       name = name.replace('-', '')\n    ➋ limit = len(name)\n       phrase = ''\n       running = True\n\n    ➌ while running:\n        ➍ temp_phrase = phrase.replace(' ', '')\n        ➎ if len(temp_phrase) < limit:\n               print(\"Length of anagram phrase = {}\".format(len(temp_phrase)))\n\n            ➏ find_anagrams(name, dict_file)\n               print(\"Current anagram phrase =\", end=\" \")\n               print(phrase, file=sys.stderr)\n\n            ➐ choice, name = process_choice(name)\n               phrase += choice + ' '\n\n        ➑ elif len(temp_phrase) == limit:\n               print(\"\\n*****FINISHED!!!*****\\n\")\n               print(\"Anagram of name =\", end=\" \")\n               print(phrase, file=sys.stderr)\n               print()\n            ➒ try_again = input('\\n\\nTry again? (Press Enter else \"n\" to quit)\\n ')\n               if try_again.lower() == \"n\":\n                   running = False\n                   sys.exit()\n               else:\n                   main()\n\n➓ if __name__ == '__main__':\n       main()\n```", "```py\nEnter a name: Bill Bo\n\nLength of anagram phrase = 0\n\nbib\n\nbill\n\nblob\n\nbob\n\nboil\n\nboll\n\ni\n\nill\n\nlib\n\nlilo\n\nlo\n\nlob\n\noi\n\noil\n\nRemaining letters = billbo\n\nNumber of remaining letters = 6\n\nNumber of remaining (real word) anagrams = 14\n\nCurrent anagram phrase =\n\nMake a choice else Enter to start over or # to end: ill\n\nLength of anagram phrase = 3\n\nbob\n\nRemaining letters = bbo\n\nNumber of remaining letters = 3\n\nNumber of remaining (real word) anagrams = 1\n\nCurrent anagram phrase = ill\n\nMake a choice else Enter to start over or # to end: Bob\n\n***** FINISHED!!! *****\n\nAnagram of name = ill Bob\n\nTry again? (Press Enter else \"n\" to quit)\n```", "```py\n➊ >>> from itertools import permutations\n   >>> name = 'vodle'\n➋ >>> perms = [''.join(i) for i in permutations(name)]\n➌ >>> print(len(perms))\n   120\n➍ >>> print(perms)\n   ['vodle', 'vodel', 'volde', 'voled', 'voedl', 'voeld', 'vdole', 'vdoel',\n   'vdloe', 'vdleo', 'vdeol', 'vdelo', 'vlode', 'vloed', 'vldoe', 'vldeo',\n   'vleod', 'vledo', 'veodl', 'veold', 'vedol', 'vedlo', 'velod', 'veldo',\n   'ovdle', 'ovdel', 'ovlde', 'ovled', 'ovedl', 'oveld', 'odvle', 'odvel',\n   'odlve', 'odlev', 'odevl', 'odelv', 'olvde', 'olved', 'oldve', 'oldev',\n   'olevd', 'oledv', 'oevdl', 'oevld', 'oedvl', 'oedlv', 'oelvd', 'oeldv',\n   'dvole', 'dvoel', 'dvloe', 'dvleo', 'dveol', 'dvelo', 'dovle', 'dovel',\n   'dolve', 'dolev', 'doevl', 'doelv', 'dlvoe', 'dlveo', 'dlove', 'dloev',\n   'dlevo', 'dleov', 'devol', 'devlo', 'deovl', 'deolv', 'delvo', 'delov',\n   'lvode', 'lvoed', 'lvdoe', 'lvdeo', 'lveod', 'lvedo', 'lovde', 'loved',\n   'lodve', 'lodev', 'loevd', 'loedv', 'ldvoe', 'ldveo', 'ldove', 'ldoev',\n   'ldevo', 'ldeov', 'levod', 'levdo', 'leovd', 'leodv', 'ledvo', 'ledov',\n   'evodl', 'evold', 'evdol', 'evdlo', 'evlod', 'evldo', 'eovdl', 'eovld',\n   'eodvl', 'eodlv', 'eolvd', 'eoldv', 'edvol', 'edvlo', 'edovl', 'edolv',\n   'edlvo', 'edlov', 'elvod', 'elvdo', 'elovd', 'elodv', 'eldvo', 'eldov']\n   >>>\n➎ >>> print(*perms, sep='\\n')\n   vodle\n   vodel\n   volde\n   voled\n   voedl\n   --snip--\n```", "```py\n➊ import sys\n   from itertools import permutations\n   from collections import Counter\n   import load_dictionary\n\n➋ def main():\n       \"\"\"Load files, run filters, allow user to view anagrams by 1st letter.\"\"\"\n    ➌ name = 'tmvoordle'\n       name = name.lower()\n\n    ➍ word_list_ini = load_dictionary.load('2of4brif.txt')\n       trigrams_filtered = load_dictionary.load('least-likely_trigrams.txt')\n\n    ➎ word_list = prep_words(name, word_list_ini)\n       filtered_cv_map = cv_map_words(word_list)\n       filter_1 = cv_map_filter(name, filtered_cv_map)\n       filter_2 = trigram_filter(filter_1, trigrams_filtered)\n       filter_3 = letter_pair_filter(filter_2)\n       view_by_letter(name, filter_3)\n```", "```py\n➊ def prep_words(name, word_list_ini):\n       \"\"\"Prep word list for finding anagrams.\"\"\"\n    ➋ print(\"length initial word_list = {}\".format(len(word_list_ini)))\n       len_name = len(name)\n    ➌ word_list = [word.lower() for word in word_list_ini\n                    if len(word) == len_name]\n    ➍ print(\"length of new word_list = {}\".format(len(word_list)))\n    ➎ return word_list\n```", "```py\n➊ def cv_map_words(word_list):\n       \"\"\"Map letters in words to consonants & vowels.\"\"\"\n    ➋ vowels = 'aeiouy'\n    ➌ cv_mapped_words = []\n    ➍ for word in word_list:\n           temp = ''\n           for letter in word:\n               if letter in vowels:\n                   temp += 'v'\n               else:\n                   temp += 'c'\n           cv_mapped_words.append(temp)\n\n       # determine number of UNIQUE c-v patterns\n    ➎ total = len(set(cv_mapped_words))\n       # target fraction to eliminate\n    ➏ target = 0.05\n       # get number of items in target fraction\n    ➐ n = int(total * target)\n    ➑ count_pruned = Counter(cv_mapped_words).most_common(total - n)\n    ➒ filtered_cv_map = set()\n       for pattern, count in count_pruned:\n           filtered_cv_map.add(pattern)\n       print(\"length filtered_cv_map = {}\".format(len(filtered_cv_map)))\n    ➓ return filtered_cv_map\n```", "```py\n➊ def cv_map_filter(name, filtered_cv_map):\n       \"\"\"Remove permutations of words based on unlikely cons-vowel combos.\"\"\"\n    ➋ perms = {''.join(i) for i in permutations(name)}\n       print(\"length of initial permutations set = {}\".format(len(perms)))\n       vowels = 'aeiouy'\n    ➌ filter_1 = set()\n    ➍ for candidate in perms:\n           temp = ''\n           for letter in candidate:\n               if letter in vowels:\n                   temp += 'v'\n               else:\n                   temp += 'c'\n        ➎ if temp in filtered_cv_map:\n               filter_1.add(candidate)\n       print(\"# choices after filter_1 = {}\".format(len(filter_1)))\n    ➏ return filter_1\n```", "```py\n➊ def trigram_filter(filter_1, trigrams_filtered):\n       \"\"\"Remove unlikely trigrams from permutations.\"\"\"\n    ➋ filtered = set()\n    ➌ for candidate in filter_1:\n        ➍ for triplet in trigrams_filtered:\n               triplet = triplet.lower()\n               if triplet in candidate:\n                   filtered.add(candidate)\n    ➎ filter_2 = filter_1 - filtered\n       print(\"# of choices after filter_2 = {}\".format(len(filter_2)))\n    ➏ return filter_2\n```", "```py\n➊ def letter_pair_filter(filter_2):\n       \"\"\"Remove unlikely letter-pairs from permutations.\"\"\"\n    ➋ filtered = set()\n    ➌ rejects = ['dt', 'lr', 'md', 'ml', 'mr', 'mt', 'mv',\n                  'td', 'tv', 'vd', 'vl', 'vm', 'vr', 'vt']\n    ➍ first_pair_rejects = ['ld', 'lm', 'lt', 'lv', 'rd',\n                             'rl', 'rm', 'rt', 'rv', 'tl', 'tm']\n    ➎ for candidate in filter_2:\n        ➏ for r in rejects:\n               if r in candidate:\n                   filtered.add(candidate)\n        ➐ for fp in first_pair_rejects:\n               if candidate.startswith(fp):\n                   filtered.add(candidate)\n    ➑ filter_3 = filter_2 - filtered\n       print(\"# of choices after filter_3 = {}\".format(len(filter_3)))\n    ➒ if 'voldemort' in filter_3:\n           print(\"Voldemort found!\", file=sys.stderr)\n    ➓ return filter_3\n```", "```py\n➊ def view_by_letter(name, filter_3):\n       \"\"\"Filter to anagrams starting with input letter.\"\"\"\n    ➋ print(\"Remaining letters = {}\".format(name))\n    ➌ first = input(\"select a starting letter or press Enter to see all: \")\n    ➍ subset = []\n    ➎ for candidate in filter_3:\n           if candidate.startswith(first):\n               subset.append(candidate)\n    ➏ print(*sorted(subset), sep='\\n')\n       print(\"Number of choices starting with {} = {}\".format(first, len(subset)))\n    ➐ try_again = input(\"Try again? (Press Enter else any other key to Exit):\")\n       if try_again.lower() == '':\n        ➑ view_by_letter(name, filter_3)\n       else:\n        ➒ sys.exit()\n```", "```py\nif __name__ == '__main__':\n    main()\n```", "```py\nlength initial word_list = 60388\nlength of new word_list = 8687\nlength filtered_cv_map = 234\nlength of initial permutations set = 181440\n# choices after filter_1 = 123120\n# of choices after filter_2 = 674\n# of choices after filter_3 = 248\nVoldemort found!\nRemaining letters = tmvoordle\nselect a starting letter or Enter to see all: v\n```"]