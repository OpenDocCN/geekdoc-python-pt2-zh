- en: PRACTICE PROJECT SOLUTIONS
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
- en: This appendix provides the solutions to the practice projects in each chapter.
    Digital versions are available on the book’s website at *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 1: Silly Name Generator**'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Pig Latin***'
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*pig_Latin_practice.py*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '"""Turn a word into its Pig Latin equivalent."""'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: VOWELS = 'aeiouy'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'word = input("Type a word and get its Pig Latin translation: ")'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'if word[0] in VOWELS:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: pig_Latin = word + 'way'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: pig_Latin = word[1:] + word[0] + 'ay'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: print("{}".format(pig_Latin), file=sys.stderr)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: try_again = input("\n\nTry again? (Press Enter else n to stop)\n ")
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'if try_again.lower() == "n":'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: sys.exit()
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '***Poor Man’s Bar Chart***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*EATOIN_practice.py*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '"""Map letters from string into dictionary & print bar chart of frequency."""'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: import pprint
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: from collections import defaultdict
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: text should be a short phrase for bars to fit in IDLE window'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: text = 'Like the castle in its corner in a medieval game, I foresee terrible
    \
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: trouble and I stay here just the same.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: ALPHABET = 'abcdefghijklmnopqrstuvwxyz'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: defaultdict module lets you build dictionary keys on the fly!
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: mapped = defaultdict(list)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'for character in text:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: character = character.lower()
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'if character in ALPHABET:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: mapped[character].append(character)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: pprint lets you print stacked output
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: print("\nYou may need to stretch console window if text wrapping occurs.\n")
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: print("text = ", end='')
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: print("{}\n".format(text), file=sys.stderr)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: pprint.pprint(mapped, width=110)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 2: Finding Palingram Spells**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Dictionary Cleanup***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*dictionary_cleanup_practice.py*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '"""Remove single-letter words from list if not ''a'' or ''i''."""'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: word_list = ['a', 'nurses', 'i', 'stack', 'b', 'c', 'cat']
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: word_list_clean = []
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: permissible = ('a', 'i')
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'for word in word_list:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(word) > 1:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: word_list_clean.append(word)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'elif len(word) == 1 and word in permissible:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: word_list_clean.append(word)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: continue
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: print("{}".format(word_list_clean))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 3: Solving Anagrams**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Finding Digrams***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*count_digrams_practice.py*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '"""Generate letter pairs in Voldemort & find their frequency in a dictionary.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Requires load_dictionary.py module to load an English dictionary file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: import re
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: from collections import defaultdict
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: from itertools import permutations
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: import load_dictionary
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: word_list = load_dictionary.load('2of4brif.txt')
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: name = 'Voldemort'  #(tmvoordle)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: name = name.lower()
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: generate unique letter pairs from name
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: digrams = set()
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: perms = {''.join(i) for i in permutations(name)}
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'for perm in perms:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, len(perm) - 1):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: digrams.add(perm[i] + perm[i + 1])
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: print(*sorted(digrams), sep='\n')
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: print("\nNumber of digrams = {}\n".format(len(digrams)))
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: use regular expressions to find repeating digrams in a word
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: mapped = defaultdict(int)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'for word in word_list:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: word = word.lower()
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'for digram in digrams:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'for m in re.finditer(digram, word):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: mapped[digram] += 1
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: print("digram frequency count:")
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in sorted(mapped):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: print("{} {}".format(k, mapped[k]))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 4: Decoding American Civil War Ciphers**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Hacking Lincoln***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| **Code word** | **Plaintext** |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: '| WAYLAND | captured |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
- en: '| NEPTUNE | Richmond |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
- en: '**Plaintext:** correspondents of the Tribune captured at Richmond please ascertain
    why they are detained and get them off if you can this fills it up'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '***Identifying Cipher Types***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*identify_cipher_type_practice.py*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '"""Load ciphertext & use fraction of ETAOIN present to classify cipher type."""'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: from collections import Counter
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: set arbitrary cutoff fraction of 6 most common letters in English
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ciphertext with target fraction or greater = transposition cipher
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CUTOFF = 0.5
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: load ciphertext
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'def load(filename):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '"""Open text file and return list."""'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(filename) as f:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: return f.read().strip()
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'try:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: ciphertext = load('cipher_a.txt')
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'except IOError as e:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: print("{}. Terminating program.".format(e),
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: file=sys.stderr)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: sys.exit(1)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: count 6 most common letters in ciphertext
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: six_most_frequent = Counter(ciphertext.lower()).most_common(6)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: print("\nSix most-frequently-used letters in English = ETAOIN")
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: print('\nSix most frequent letters in ciphertext =')
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: print(*six_most_frequent, sep='\n')
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: convert list of tuples to set of letters for comparison
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: cipher_top_6 = {i[0] for i in six_most_frequent}
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: TARGET = 'etaoin'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in TARGET:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'if letter in cipher_top_6:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: count += 1
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'if count/len(TARGET) >= CUTOFF:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: print("\nThis ciphertext most-likely produced by a TRANSPOSITION cipher")
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: print("This ciphertext most-likely produced by a SUBSTITUTION cipher")
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '***Storing a Key as a Dictionary***'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*key_dictionary_practice.py*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '"""Input cipher key string, get user input on route direction as dict value."""'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: col_order = """1 3 4 2"""
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: key = dict()
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: cols = [int(i) for i in col_order.split()]
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'for col in cols:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'key[col] = input("Direction to read Column {} (u = up, d = down): "'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: .format(col).lower())
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'if key[col] == ''u'' or key[col] == ''d'':'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: print("Input should be 'u' or 'd'")
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: print("{}, {}".format(col, key[col]))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '***Automating Possible Keys***'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*permutations_practice.py*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '"""For a total number of columns, find all unique column arrangements.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Builds a list of lists containing all possible unique arrangements of
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: individual column numbers, including negative values for route direction
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: (read up column vs. down).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Input:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: -total number of columns
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: -list of lists of unique column orders, including negative values for
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: route cipher encryption direction
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: import math
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: from itertools import permutations, product
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '#------BEGIN INPUT-----------------------------------------------------------'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Input total number of columns:'
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: num_cols = 4
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '#------DO NOT EDIT BELOW THIS LINE--------------------------------------------'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: generate listing of individual column numbers
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: columns = [x for x in range(1, num_cols+1)]
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: print("columns = {}".format(columns))
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: build list of lists of column number combinations
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: itertools product computes the Cartesian product of input iterables
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'def perms(columns):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '"""Take number of columns integer & generate pos & neg permutations."""'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: results = []
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'for perm in permutations(columns):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'for signs in product([-1, 1], repeat=len(columns)):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: results.append([i*sign for i, sign in zip(perm, signs)])
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: return results
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: col_combos = perms(columns)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: print(*col_combos, sep="\n")  # comment-out for num_cols > 4!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: print("Factorial of num_cols without negatives = {}"
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: .format(math.factorial(num_cols)))
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: print("Number of column combinations = {}".format(len(col_combos)))
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '***Route Transposition Cipher: Brute-Force Attack***'
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This practice project uses two programs. The second, *perms.py*, is used as
    a module in the first program, *route_cipher_hacker.py*. It was built from the
    *permutations_practice.py* program previously described in “[Automating Possible
    Keys](appendix.xhtml#lev408)” on [page 371](appendix.xhtml#page_371).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '***route_cipher_hacker.py***'
  id: totrans-182
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*route_cipher_hacker.py*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '"""Brute-force hack a Union route cipher (route_cipher_hacker.py).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Designed for whole-word transposition ciphers with variable rows & columns.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Assumes encryption began at either top or bottom of a column.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Possible keys auto-generated based on number of columns & rows input.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Key indicates the order to read columns and the direction to traverse.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Negative column numbers mean start at bottom and read up.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Positive column numbers means start at top & read down.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Example below is for 4x4 matrix with key -1 2 -3 4.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Note "0" is not allowed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Arrows show encryption route; for negative key values read UP.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 1   2   3   4
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: ___ ___ ___ ___
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '| ^ | | | ^ | | | MESSAGE IS WRITTEN'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '|_|_|_v_|_|_|_v_|'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '| ^ | | | ^ | | | ACROSS EACH ROW'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '|_|_|_v_|_|_|_v_|'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '| ^ | | | ^ | | | IN THIS MANNER'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '|_|_|_v_|_|_|_v_|'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '| ^ | | | ^ | | | LAST ROW IS FILLED WITH DUMMY WORDS'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '|_|_|_v_|_|_|_v_|'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: START        END
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Required inputs - a text message, # of columns, # of rows, key string'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Requires custom-made "perms" module to generate keys
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Prints off key used and translated plaintext
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: import perms
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '#=============================================================================='
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'USER INPUT:'
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'the string to be decrypted (type or paste between triple-quotes):'
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ciphertext = """REST TRANSPORT YOU GODWIN VILLAGE ROANOKE WITH ARE YOUR IS JUST
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: SUPPLIES FREE SNOW HEADING TO GONE TO SOUTH FILLER
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'the number of columns believed to be in the transposition matrix:'
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: COLS = 4
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'the number of rows believed to be in the transposition matrix:'
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ROWS = 5
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: END OF USER INPUT - DO NOT EDIT BELOW THIS LINE!
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#=============================================================================='
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '"""Turn ciphertext into list, call validation & decryption functions."""'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: cipherlist = list(ciphertext.split())
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: validate_col_row(cipherlist)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: decrypt(cipherlist)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'def validate_col_row(cipherlist):'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '"""Check that input columns & rows are valid vs. message length."""'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: factors = []
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: len_cipher = len(cipherlist)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: for i in range(2, len_cipher):  # range excludes 1-column ciphers
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'if len_cipher % i == 0:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: factors.append(i)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: print("\nLength of cipher = {}".format(len_cipher))
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Acceptable column/row values include: {}".format(factors))'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'if ROWS * COLS != len_cipher:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: print("\nError - Input columns & rows not factors of length "
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '"of cipher. Terminating program.", file=sys.stderr)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: sys.exit(1)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'def decrypt(cipherlist):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '"""Turn columns into items in list of lists & decrypt ciphertext."""'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: col_combos = perms.perms(COLS)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'for key in col_combos:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: translation_matrix = [None] * COLS
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: plaintext = ''
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: start = 0
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: stop = ROWS
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in key:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'if k < 0: # reading bottom-to-top of column'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: col_items = cipherlist[start:stop]
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'elif k > 0: # reading top-to-bottom of columnn'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: col_items = list((reversed(cipherlist[start:stop])))
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: translation_matrix[abs(k) - 1] = col_items
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: start += ROWS
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: stop += ROWS
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '# loop through nested lists popping off last item to a new list:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'for matrix_col in translation_matrix:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: word = str(matrix_col.pop())
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: plaintext += word + ' '
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: print("\nusing key = {}".format(key))
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: print("translated = {}".format(plaintext))
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: print("\nnumber of keys = {}".format(len(col_combos)))
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == ''__main__'':'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: main()
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '***perms.py***'
  id: totrans-268
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*perms.py*'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '"""For a total number of columns, find all unique column arrangements.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Builds a list of lists containing all possible unique arrangements of
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: individual column numbers including negative values for route direction
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'Input:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: -total number of columns
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: -list of lists of unique column orders including negative values for
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: route cipher encryption direction
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: from itertools import permutations, product
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: build list of lists of column number combinations
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: itertools product computes the Cartesian product of input iterables
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'def perms(num_cols):'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '"""Take number of columns integer & generate pos & neg permutations."""'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: results = []
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: columns = [x for x in range(1, num_cols+1)]
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'for perm in permutations(columns):'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'for signs in product([-1, 1], repeat=len(columns)):'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: results.append([i*sign for i, sign in zip(perm, signs)])
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: return results
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 5: Encoding English Civil War Ciphers**'
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Saving Mary***'
  id: totrans-291
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*save_Mary_practice.py*'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '"""Hide a null cipher within a list of names using a variable pattern."""'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: import load_dictionary
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: write a short message and use no punctuation or numbers!
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: message = "Give your word and we rise"
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: message = "".join(message.split())
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: open name file
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: names = load_dictionary.load('supporters.txt')
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: name_list = []
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: start list with null word not used in cipher
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: name_list.append(names[0])
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: add letter of null cipher to 2nd letter of name, then 3rd, then repeat
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: count = 1
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in message:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'for name in names:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(name) > 2 and name not in name_list:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'if count % 2 == 0 and name[2].lower() == letter.lower():'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: name_list.append(name)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: count += 1
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'elif count % 2 != 0 and name[1].lower() == letter.lower():'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: name_list.append(name)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: count += 1
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: add two null words early in message to throw off cryptanalysts
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: name_list.insert(3, 'Stuart')
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: name_list.insert(3, 'Stuart')
- en: name_list.insert(6, 'Jacob')
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: name_list.insert(6, 'Jacob')
- en: display cover letter and list with null cipher
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示封面信和带有空白密码的列表
- en: print("""
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: print("""
- en: 'Your Royal Highness: \n'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 尊贵的殿下： \n
- en: It is with the greatest pleasure I present the list of noble families who
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 非常高兴向您呈现支持您事业并请求篡位者的贵族家族名单
- en: have undertaken to support your cause and petition the usurper for the
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 已承诺支持您的事业，并向篡位者请愿
- en: release of your Majesty from the current tragical circumstances.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 释放陛下从当前悲剧性境况中。
- en: '""")'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '""")'
- en: print(*name_list, sep='\n')
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: print(*name_list, sep='\n')
- en: '***The Colchester Catch***'
  id: totrans-327
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***科尔切斯特的骗局***'
- en: '*colchester_practice.py*'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '*colchester_practice.py*'
- en: '"""Solve a null cipher based on every nth letter in every nth word."""'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '"""根据每隔第 n 个字母在每隔第 n 个单词中的位置解密。"""'
- en: import sys
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: import sys
- en: 'def load_text(file):'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'def load_text(file):'
- en: '"""Load a text file as a string."""'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '"""加载文本文件作为字符串。"""'
- en: 'with open(file) as f:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'with open(file) as f:'
- en: return f.read().strip()
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: return f.read().strip()
- en: 'load & process message:'
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载并处理消息：
- en: 'filename = input("\nEnter full filename for message to translate: ")'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: filename = input("\n请输入要翻译的消息的完整文件名：")
- en: 'try:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: loaded_message = load_text(filename)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: loaded_message = load_text(filename)
- en: 'except IOError as e:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 'except IOError as e:'
- en: print("{}. Terminating program.".format(e), file=sys.stderr)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: print("{}. 程序终止.".format(e), file=sys.stderr)
- en: sys.exit(1)
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: sys.exit(1)
- en: 'check loaded message & # of lines'
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查加载的消息和行数
- en: print("\nORIGINAL MESSAGE = {}\n".format(loaded_message))
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: print("\n原始消息 = {}\n".format(loaded_message))
- en: convert message to list and get length
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将消息转换为列表并获取长度
- en: message = loaded_message.split()
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: message = loaded_message.split()
- en: end = len(message)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: end = len(message)
- en: get user input on interval to check
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户输入的检查间隔
- en: increment = int(input("Input max word & letter position to \
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: increment = int(input("输入最大单词和字母位置以 \
- en: 'check (e.g., every 1 of 1, 2 of 2, etc.): "))'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 检查（例如，每 1 of 1, 2 of 2 等）："))
- en: print()
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: find letters at designated intervals
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找指定间隔的字母
- en: 'for i in range(1, increment + 1):'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, increment + 1):'
- en: print("\nUsing increment letter {} of word {}".format(i, i))
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: print("\n使用增量字母 {} 的单词 {}".format(i, i))
- en: print()
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: count = i - 1
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: count = i - 1
- en: location = i - 1
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: location = i - 1
- en: 'for index, word in enumerate(message):'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'for index, word in enumerate(message):'
- en: 'if index == count:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 'if index == count:'
- en: 'if location < len(word):'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 'if location < len(word):'
- en: print("letter = {}".format(word[location]))
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: print("letter = {}".format(word[location]))
- en: count += i
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: count += i
- en: 'else:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Interval doesn't work", file=sys.stderr)
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: print("间隔不起作用", file=sys.stderr)
- en: '**Chapter 6: Writing in Invisible Ink**'
  id: totrans-364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**第6章：用隐形墨水写作**'
- en: '***Checking the Number of Blank Lines***'
  id: totrans-365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***检查空白行的数量***'
- en: '*elementary_ink_practice.py*'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '*elementary_ink_practice.py*'
- en: '"""Add code to check blank lines in fake message vs lines in real message."""'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '"""添加代码检查假消息中的空白行与实际消息中的行数。"""'
- en: import sys
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: import sys
- en: import docx
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: import docx
- en: from docx.shared import RGBColor, Pt
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: from docx.shared import RGBColor, Pt
- en: get text from fake message & make each line a list item
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取假消息的文本并将每行作为列表项
- en: fake_text = docx.Document('fakeMessage.docx')
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: fake_text = docx.Document('fakeMessage.docx')
- en: fake_list = []
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: fake_list = []
- en: 'for paragraph in fake_text.paragraphs:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 'for paragraph in fake_text.paragraphs:'
- en: fake_list.append(paragraph.text)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: fake_list.append(paragraph.text)
- en: get text from real message & make each line a list item
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取实际消息的文本并将每行作为列表项
- en: real_text = docx.Document('realMessageChallenge.docx')
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: real_text = docx.Document('realMessageChallenge.docx')
- en: real_list = []
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: real_list = []
- en: 'for paragraph in real_text.paragraphs:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 'for paragraph in real_text.paragraphs:'
- en: if len(paragraph.text) != 0:  # remove blank lines
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 'if len(paragraph.text) != 0:  # 删除空白行'
- en: real_list.append(paragraph.text)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: real_list.append(paragraph.text)
- en: 'define function to check available hiding space:'
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义函数检查可用隐藏空间：
- en: 'def line_limit(fake, real):'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 'def line_limit(fake, real):'
- en: '"""Compare number of blank lines in fake vs lines in real and'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '"""比较假消息中的空白行数与实际消息中的行数，并'
- en: warn user if there are not enough blanks to hold real message.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有足够的空白行来容纳实际消息，则警告用户。
- en: NOTE:  need to import 'sys'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 注意： 需要导入 'sys'
- en: '"""'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: num_blanks = 0
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: num_blanks = 0
- en: num_real = 0
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: num_real = 0
- en: 'for line in fake:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 'for line in fake:'
- en: 'if line == '''':'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 'if line == '''':'
- en: num_blanks += 1
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: num_blanks += 1
- en: num_real = len(real)
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: num_real = len(real)
- en: diff = num_real - num_blanks
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: diff = num_real - num_blanks
- en: print("\nNumber of blank lines in fake message = {}".format(num_blanks))
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: print("\n假消息中的空白行数 = {}".format(num_blanks))
- en: print("Number of lines in real message = {}\n".format(num_real))
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: print("实际消息中的行数 = {}\n".format(num_real))
- en: 'if num_real > num_blanks:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 'if num_real > num_blanks:'
- en: print("Fake message needs {} more blank lines."
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: print("假消息需要 {} 更多空白行。"
- en: .format(diff), file=sys.stderr)
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: .format(diff), file=sys.stderr)
- en: sys.exit()
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: sys.exit()
- en: line_limit(fake_list, real_list)
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: line_limit(fake_list, real_list)
- en: load template that sets style, font, margins, etc.
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载设置样式、字体、边距等的模板
- en: doc = docx.Document('template.docx')
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: doc = docx.Document('template.docx')
- en: add letterhead
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加信头
- en: doc.add_heading('Morland Holmes', 0)
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: subtitle = doc.add_heading('Global Consulting & Negotiations', 1)
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: subtitle.alignment = 1
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: doc.add_heading('', 1)
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: doc.add_paragraph('December 17, 2015')
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: doc.add_paragraph('')
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'def set_spacing(paragraph):'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '"""Use docx to set line spacing between paragraphs."""'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_format = paragraph.paragraph_format
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_format.space_before = Pt(0)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_format.space_after = Pt(0)
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: length_real = len(real_list)
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: count_real = 0  # index of current line in real (hidden) message
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: interleave real and fake message lines
  id: totrans-418
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for line in fake_list:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: 'if count_real < length_real and line == "":'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: paragraph = doc.add_paragraph(real_list[count_real])
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_index = len(doc.paragraphs) - 1
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '# set real message color to white'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: run = doc.paragraphs[paragraph_index].runs[0]
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: font = run.font
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: font.color.rgb = RGBColor(255, 255, 255)  # make it red to test
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: count_real += 1
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: paragraph = doc.add_paragraph(line)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: set_spacing(paragraph)
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: doc.save('ciphertext_message_letterhead.docx')
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: print("Done"))
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 8: Counting Syllables for Haiku Poetry**'
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Syllable Counter vs. Dictionary File***'
  id: totrans-434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*test_count_syllables_w_dict.py*'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '"""Load a dictionary file, pick random words, run syllable-counting module."""'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: import random
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: from count_syllables import count_syllables
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'def load(file):'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '"""Open a text file & return list of lowercase strings."""'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(file) as in_file:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: loaded_txt = in_file.read().strip().split('\n')
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: loaded_txt = [x.lower() for x in loaded_txt]
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: return loaded_txt
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 'try:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: word_list = load('2of4brif.txt')
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'except IOError as e:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: print("{}\nError opening file. Terminating program.".format(e),
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: file=sys.stderr)
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: sys.exit(1)
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: test_data = []
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: num_words = 100
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: test_data.extend(random.sample(word_list, num_words))
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 'for word in test_data:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'try:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: num_syllables = count_syllables(word)
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: print(word, num_syllables, end='\n')
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'except KeyError:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: print(word, end='')
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: print(" not found", file=sys.stderr)
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 10: Are We Alone? Exploring the Fermi Paradox**'
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***A Galaxy Far, Far Away***'
  id: totrans-463
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*galaxy_practice.py*'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '"""Use spiral formula to build galaxy display."""'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: import math
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: from random import randint
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: import tkinter
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: root = tkinter.Tk()
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: root.title("Galaxy BR549")
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: c = tkinter.Canvas(root, width=1000, height=800, bg='black')
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: c.grid()
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: c.configure(scrollregion=(-500, -400, 500, 400))
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: oval_size = 0
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: build spiral arms
  id: totrans-475
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: num_spiral_stars = 500
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: angle = 3.5
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: core_diameter = 120
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: spiral_stars = []
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(num_spiral_stars):'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: theta = i * angle
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: r = math.sqrt(i) / math.sqrt(num_spiral_stars)
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: spiral_stars.append((r * math.cos(theta), r * math.sin(theta)))
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 'for x, y in spiral_stars:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: x = x * 350 + randint(-5, 3)
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: y = y * 350 + randint(-5, 3)
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: oval_size = randint(1, 3)
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-oval_size, y-oval_size, x+oval_size, y+oval_size,
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: fill='white', outline='')
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: build wisps
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: wisps = []
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2000):'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: theta = i * angle
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '# divide by num_spiral_stars for better dust lanes'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: r = math.sqrt(i) / math.sqrt(num_spiral_stars)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: spiral_stars.append((r * math.cos(theta), r * math.sin(theta)))
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'for x, y in spiral_stars:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: x = x * 330 + randint(-15, 10)
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: y = y * 330 + randint(-15, 10)
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: h = math.sqrt(x**2 + y**2)
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: 'if h < 350:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: wisps.append((x, y))
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-1, y-1, x+1, y+1, fill='white', outline='')
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: build galactic core
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: core = []
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(900):'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: x = randint(-core_diameter, core_diameter)
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: y = randint(-core_diameter, core_diameter)
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: h = math.sqrt(x**2 + y**2)
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: 'if h < core_diameter - 70:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: core.append((x, y))
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: oval_size = randint(2, 4)
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-oval_size, y-oval_size, x+oval_size, y+oval_size,
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: fill='white', outline='')
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: 'elif h < core_diameter:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: core.append((x, y))
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: oval_size = randint(0, 2)
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-oval_size, y-oval_size, x+oval_size, y+oval_size,
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: fill='white', outline='')
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: root.mainloop()
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '***Building a Galactic Empire***'
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*empire_practice.py*'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '"""Build 2-D model of galaxy, post expansion rings for galactic empire."""'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: import tkinter as tk
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: import time
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: from random import randint, uniform, random
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: import math
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '#============================================================================='
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: MAIN INPUT
  id: totrans-529
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'location of galactic empire homeworld on map:'
  id: totrans-530
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HOMEWORLD_LOC = (0, 0)
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: 'maximum number of years to simulate:'
  id: totrans-532
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MAX_YEARS = 10000000
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: 'average expansion velocity as fraction of speed of light:'
  id: totrans-534
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SPEED = 0.005
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: scale units
  id: totrans-536
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UNIT = 200
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '#======================================================================'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: set up display canvas
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: root = tk.Tk()
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: root.title("Milky Way galaxy")
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: c = tk.Canvas(root, width=1000, height=800, bg='black')
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: c.grid()
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: c.configure(scrollregion=(-500, -400, 500, 400))
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: actual Milky Way dimensions (light-years)
  id: totrans-545
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DISC_RADIUS = 50000
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: disc_radius_scaled = round(DISC_RADIUS/UNIT)
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 'def polar_coordinates():'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '"""Generate uniform random x,y point within a disc for 2-D display."""'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: r = random()
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: theta = uniform(0, 2 * math.pi)
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: x = round(math.sqrt(r) * math.cos(theta) * disc_radius_scaled)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: y = round(math.sqrt(r) * math.sin(theta) * disc_radius_scaled)
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: return x, y
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: 'def spirals(b, r, rot_fac, fuz_fac, arm):'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '"""Build spiral arms for tkinter display using Logarithmic spiral formula.'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: b = arbitrary constant in logarithmic spiral equation
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: r = scaled galactic disc radius
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: rot_fac = rotation factor
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: fuz_fac = random shift in star position in arm, applied to 'fuzz' variable
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: arm = spiral arm (0 = main arm, 1 = trailing stars)
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: spiral_stars = []
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: fuzz = int(0.030 * abs(r))  # randomly shift star locations
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: theta_max_degrees = 520
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: for i in range(theta_max_degrees):  # range(0, 700, 2) for no black hole
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: theta = math.radians(i)
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: x = r * math.exp(b*theta) * math.cos(theta + math.pi * rot_fac)\
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: + randint(-fuzz, fuzz) * fuz_fac
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: y = r * math.exp(b*theta) * math.sin(theta + math.pi * rot_fac)\
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: + randint(-fuzz, fuzz) * fuz_fac
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: spiral_stars.append((x, y))
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: 'for x, y in spiral_stars:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: 'if arm == 0 and int(x % 2) == 0:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-2, y-2, x+2, y+2, fill='white', outline='')
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: 'elif arm == 0 and int(x % 2) != 0:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-1, y-1, x+1, y+1, fill='white', outline='')
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: 'elif arm == 1:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x, y, x, y, fill='white', outline='')
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: 'def star_haze(scalar):'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: '"""Randomly distribute faint tkinter stars in galactic disc.'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: disc_radius_scaled = galactic disc radius scaled to radio bubble diameter
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: scalar = multiplier to vary number of stars posted
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, disc_radius_scaled * scalar):'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: x, y = polar_coordinates()
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: c.create_text(x, y, fill='white', font=('Helvetica', '7'), text='.')
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: 'def model_expansion():'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: '"""Model empire expansion from homeworld with concentric rings."""'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: 'r = 0 # radius from homeworld'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: text_y_loc = -290
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: x, y = HOMEWORLD_LOC
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-5, y-5, x+5, y+5, fill='red')
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: increment = round(MAX_YEARS / 10)# year interval to post circles
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: c.create_text(-475, -350, anchor='w', fill='red', text='Increment = {:,}'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: .format(increment))
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: c.create_text(-475, -325, anchor='w', fill='red',
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: text='Velocity as fraction of Light = {:,}'.format(SPEED))
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: 'for years in range(increment, MAX_YEARS + 1, increment):'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: 'time.sleep(0.5) # delay before posting new expansion circle'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: traveled = SPEED * increment / UNIT
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: r = r + traveled
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: c.create_oval(x-r, y-r, x+r, y+r, fill='', outline='red', width='2')
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: c.create_text(-475, text_y_loc, anchor='w', fill='red',
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: text='Years = {:,}'.format(years))
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: text_y_loc += 20
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: '# update canvas for new circle; no longer need mainloop()'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: c.update_idletasks()
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: c.update()
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '"""Generate galaxy display, model empire expansion, run mainloop."""'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=disc_radius_scaled, rot_fac=2, fuz_fac=1.5, arm=0)
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=disc_radius_scaled, rot_fac=1.91, fuz_fac=1.5, arm=1)
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=2, fuz_fac=1.5, arm=0)
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=-2.09, fuz_fac=1.5, arm=1)
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=0.5, fuz_fac=1.5, arm=0)
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=0.4, fuz_fac=1.5, arm=1)
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=-0.5, fuz_fac=1.5, arm=0)
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=-0.6, fuz_fac=1.5, arm=1)
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: star_haze(scalar=9)
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: model_expansion()
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: '# run tkinter loop'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: root.mainloop()
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == ''__main__'':'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: main()
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '***A Roundabout Way to Predict Detectability***'
  id: totrans-626
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*rounded_detection_practice.py*'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: '"""Calculate probability of detecting 32 LY-diameter radio bubble given 15.6
    M'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: randomly distributed civilizations in the galaxy."""
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: import math
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: from random import uniform, random
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: from collections import Counter
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: length units in light-years
  id: totrans-633
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DISC_RADIUS = 50000
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: DISC_HEIGHT = 1000
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: NUM_CIVS = 15600000
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: DETECTION_RADIUS = 16
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: 'def random_polar_coordinates_xyz():'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '"""Generate uniform random xyz point within a 3D disc."""'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: r = random()
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: theta = uniform(0, 2 * math.pi)
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: x = round(math.sqrt(r) * math.cos(theta) * DISC_RADIUS, 3)
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: y = round(math.sqrt(r) * math.sin(theta) * DISC_RADIUS, 3)
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: z = round(uniform(0, DISC_HEIGHT), 3)
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: return x, y, z
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: 'def rounded(n, base):'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: '"""Round a number to the nearest number designated by base parameter."""'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: return int(round(n/base) * base)
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: 'def distribute_civs():'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: '"""Distribute xyz locations in galactic disc model and return list."""'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: civ_locs = []
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: 'while len(civ_locs) < NUM_CIVS:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: loc = random_polar_coordinates_xyz()
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: civ_locs.append(loc)
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: return civ_locs
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: 'def round_civ_locs(civ_locs):'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: '"""Round xyz locations and return list of rounded locations."""'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: '# convert radius to cubic dimensions:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: detect_distance = round((4 / 3 * math.pi * DETECTION_RADIUS**3)**(1/3))
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: print("\ndetection radius = {} LY".format(DETECTION_RADIUS))
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: print("cubic detection distance = {} LY".format(detect_distance))
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: '# round civilization xyz to detection distance'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: civ_locs_rounded = []
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: 'for x, y, z in civ_locs:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: i = rounded(x, detect_distance)
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: j = rounded(y, detect_distance)
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: k = rounded(z, detect_distance)
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: civ_locs_rounded.append((i, j, k))
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: return civ_locs_rounded
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: 'def calc_prob_of_detection(civ_locs_rounded):'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: '"""Count locations and calculate probability of duplicate values."""'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: overlap_count = Counter(civ_locs_rounded)
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: overlap_rollup = Counter(overlap_count.values())
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: num_single_civs = overlap_rollup[1]
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: prob = 1 - (num_single_civs / NUM_CIVS)
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: return overlap_rollup, prob
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '"""Call functions and print results."""'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: civ_locs = distribute_civs()
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: civ_locs_rounded = round_civ_locs(civ_locs)
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: overlap_rollup, detection_prob = calc_prob_of_detection(civ_locs_rounded)
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: print("length pre-rounded civ_locs = {}".format(len(civ_locs)))
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: print("length of rounded civ_locs_rounded = {}".format(len(civ_locs_rounded)))
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: print("overlap_rollup = {}\n".format(overlap_rollup))
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: print("probability of detection = {0:.3f}".format(detection_prob))
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '# QC step to check rounding'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: print("\nFirst 3 locations pre- and post-rounding:\n")
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: 'print("pre-round: {}".format(civ_locs[i]))'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: 'print("post-round: {} \n".format(civ_locs_rounded[i]))'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == ''__main__'':'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: main()
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 11: The Monty Hall Problem**'
  id: totrans-693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***The Birthday Paradox***'
  id: totrans-694
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*birthday_paradox_practice.py*'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: '"""Calculate probability of a shared birthday per x number of people."""'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: import random
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: max_people = 50
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: num_runs = 2000
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: print("\nProbability of at least 2 people having the same birthday:\n")
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: 'for people in range(2, max_people + 1):'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: found_shared = 0
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: 'for run in range(num_runs):'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: bdays = []
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, people):'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: bday = random.randrange(0, 365)  # ignore leap years
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: bdays.append(bday)
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: set_of_bdays = set(bdays)
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(set_of_bdays) < len(bdays):'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: found_shared += 1
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: prob = found_shared/num_runs
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: print("Number people = {} Prob = {:.4f}".format(people, prob))
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: print("""
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: According to the Birthday Paradox, if there are 23 people in a room,
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: there's a 50% chance that 2 of them will share the same birthday.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: '""")'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 13: Simulating an Alien Volcano**'
  id: totrans-717
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Going the Distance***'
  id: totrans-718
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*practice_45.py*'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: import math
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: import random
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: import pygame as pg
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: pg.init()  # initialize pygame
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: define color table
  id: totrans-725
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BLACK = (0, 0, 0)
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: WHITE = (255, 255, 255)
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: LT_GRAY = (180, 180, 180)
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: GRAY = (120, 120, 120)
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: DK_GRAY = (80, 80, 80)
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: 'class Particle(pg.sprite.Sprite):'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '"""Builds ejecta particles for volcano simulation."""'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: 'gases_colors = {''SO2'': LT_GRAY, ''CO2'': GRAY, ''H2S'': DK_GRAY, ''H2O'':
    WHITE}'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: VENT_LOCATION_XY = (320, 300)
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: IO_SURFACE_Y = 308
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: GRAVITY = 0.5  # pixels-per-frame
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: VELOCITY_SO2 = 8  # pixels-per-frame
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: '# scalars (SO2 atomic weight/particle atomic weight) used for velocity'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: 'vel_scalar = {''SO2'': 1, ''CO2'': 1.45, ''H2S'': 1.9, ''H2O'': 3.6}'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, screen, background):'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: super().__init__()
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: self.screen = screen
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: self.background = background
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: self.image = pg.Surface((4, 4))
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: self.rect = self.image.get_rect()
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: self.gas = 'SO2'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: self.color = ''
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: self.vel = Particle.VELOCITY_SO2 * Particle.vel_scalar[self.gas]
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: self.x, self.y = Particle.VENT_LOCATION_XY
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: self.vector()
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: 'def vector(self):'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: '"""Calculate particle vector at launch."""'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: angles = [65, 55, 45, 35, 25]  # 90 is vertical
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: orient = random.choice(angles)
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: 'if orient == 45:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: self.color = WHITE
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: self.color = GRAY
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: radians = math.radians(orient)
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: self.dx = self.vel * math.cos(radians)
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: self.dy = -self.vel * math.sin(radians)  # negative as y increases down
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: 'def update(self):'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: '"""Apply gravity, draw path, and handle boundary conditions."""'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: self.dy += Particle.GRAVITY
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: pg.draw.line(self.background, self.color, (self.x, self.y),
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: (self.x + self.dx, self.y + self.dy))
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: self.x += self.dx
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: self.y += self.dy
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: 'if self.x < 0 or self.x > self.screen.get_width():'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: self.kill()
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: 'if self.y < 0 or self.y > Particle.IO_SURFACE_Y:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: self.kill()
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: '"""Set up and run game screen and loop."""'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: screen = pg.display.set_mode((639, 360))
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: pg.display.set_caption("Io Volcano Simulator")
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: background = pg.image.load("tvashtar_plume.gif")
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: '# Set up color-coded legend'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: legend_font = pg.font.SysFont('None', 26)
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: text = legend_font.render('White = 45 degrees', True, WHITE, BLACK)
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: particles = pg.sprite.Group()
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: clock = pg.time.Clock()
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: clock.tick(25)
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: particles.add(Particle(screen, background))
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: 'for event in pg.event.get():'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: 'if event.type == pg.QUIT:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: pg.quit()
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: sys.exit()
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: screen.blit(background, (0, 0))
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: screen.blit(text, (320, 170))
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: particles.update()
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: particles.draw(screen)
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: pg.display.flip()
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == "__main__":'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: main()
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 16: Finding Frauds with Benford’s Law**'
  id: totrans-797
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***Beating Benford***'
  id: totrans-798
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*beat_benford_practice.py*'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: '"""Manipulate vote counts so that final results conform to Benford''s law."""'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: example below is for Trump vs. Clinton, Illinois, 2016 Presidental Election
  id: totrans-801
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'def load_data(filename):'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: '"""Open a text file of numbers & turn contents into a list of integers."""'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(filename) as f:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: lines = f.read().strip().split('\n')
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: return [int(i) for i in lines]  # turn strings to integers
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: 'def steal_votes(opponent_votes, candidate_votes, scalar):'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: '"""Use scalar to reduce one vote count & increase another, return as lists.'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: opponent_votes – votes to steal from
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: candidate_votes - votes to increase by stolen amount
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: scalar - fractional percentage, < 1, used to reduce votes
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: list of changed opponent votes
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: list of changed candidate votes
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: new_opponent_votes = []
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: new_candidate_votes = []
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: 'for opp_vote, can_vote in zip(opponent_votes, candidate_votes):'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: new_opp_vote = round(opp_vote * scalar)
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: new_opponent_votes.append(new_opp_vote)
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: stolen_votes = opp_vote - new_opp_vote
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: new_can_vote = can_vote + stolen_votes
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: new_candidate_votes.append(new_can_vote)
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: return new_opponent_votes, new_candidate_votes
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: '"""Run the program.'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: Load data, set target winning vote count, call functions, display
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: results as table, write new combined vote total as text file to
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: use as input for Benford's law analysis.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '# load vote data'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: c_votes = load_data('Clinton_votes_Illinois.txt')
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: j_votes = load_data('Johnson_votes_Illinois.txt')
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: s_votes = load_data('Stein_votes_Illinois.txt')
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: t_votes = load_data('Trump_votes_Illinois.txt')
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: total_votes = sum(c_votes + j_votes + s_votes + t_votes)
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: '# assume Trump amasses a plurality of the vote with 49%'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: t_target = round(total_votes * 0.49)
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: print("\nTrump winning target = {:,} votes".format(t_target))
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: '# calculate extra votes needed for Trump victory'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: extra_votes_needed = abs(t_target - sum(t_votes))
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: print("extra votes needed = {:,}".format(extra_votes_needed))
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: '# calculate scalar needed to generate extra votes'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: scalar = 1 - (extra_votes_needed / sum(c_votes + j_votes + s_votes))
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: print("scalar = {:.3}".format(scalar))
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: '# flip vote counts based on scalar & build new combined list of votes'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: fake_counts = []
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: new_c_votes, new_t_votes = steal_votes(c_votes, t_votes, scalar)
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: fake_counts.extend(new_c_votes)
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: new_j_votes, new_t_votes = steal_votes(j_votes, new_t_votes, scalar)
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: fake_counts.extend(new_j_votes)
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: new_s_votes, new_t_votes = steal_votes(s_votes, new_t_votes, scalar)
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: fake_counts.extend(new_s_votes)
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: fake_counts.extend(new_t_votes)  # add last as has been changing up til now
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: '# compare old and new vote counts & totals in tabular form'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '# switch-out "Trump" and "Clinton" as necessary'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, len(t_votes)):'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: 'print("old Trump: {} \t new Trump: {} \t old Clinton: {} \t " \'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: '"new Clinton: {}".'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: format(t_votes[i], new_t_votes[i], c_votes[i], new_c_votes[i]))
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: print("-" * 95)
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: print("TOTALS:")
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: 'print("old Trump: {:,} \t new Trump: {:,} \t old Clinton: {:,}  " \'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '"new Clinton: {:,}".format(sum(t_votes), sum(new_t_votes),'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: sum(c_votes), sum(new_c_votes)))
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '# write out a text file to use as input to benford.py program'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: '# this program will check conformance of faked votes to Benford''s law'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(''fake_Illinois_counts.txt'', ''w'') as f:'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: 'for count in fake_counts:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: f.write("{}\n".format(count))
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == ''__main__'':'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: main()
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
