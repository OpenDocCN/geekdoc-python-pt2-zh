- en: '**LINGUISTIC PRIMER**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../Images/comm1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Most of the chapters in the book focus on analyzing sentence structures to identify
    patterns in word sequences using spaCy. To understand sentence analysis and patterns,
    you need some basic knowledge of linguistics. This appendix contains a linguistic
    primer to use as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependency Grammars vs. Phrase Structure Grammars**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, spaCy uses a dependency grammar rather than a phrase structure grammar
    more commonly used in linguistics. This section explains the difference between
    these two grammar types. If you have a formal linguistic background, you may find
    this information helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Also known as a constituent-based grammar, a *phrase structure grammar* models
    natural language based on how words combine to form constituents in a sentence.
    In syntax, a *constituent* is a group of words that functions as a single unit
    in a sentence. The phrase structure rules decompose a sentence into its constituent
    parts, forming a tree structure that begins with individual words and builds up
    larger and larger constituents.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, a *dependency grammar* is a word-based grammar that focuses on
    the relations between individual words rather than between constituents. As a
    result, a dependency parse, like the ones shown throughout this book, forms a
    tree that reflects how words relate to other words in a sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure A-1](../Text/app01.xhtml#app01fig01) shows an example of a sentence
    parsing using both grammar types.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/app1-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-1: An example of tree structures for a constituent-based phrase structure
    grammar (left) and a word-based dependency grammar (right)*'
  prefs: []
  type: TYPE_NORMAL
- en: The phrase structure tree breaks up the sentence based on the fact that the
    sentence consists of a noun phrase and a verb phrase. Those phrases appear on
    the second level of the hierarchy, directly under the sentence (S) mark—the formal
    top level. On the bottom level are the individual words that make up those phrases.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, the dependency structure uses the verb as the structural center
    of a sentence. The other words are either directly or indirectly connected to
    this verb with the help of directed links, known as *dependencies*. The dependency
    grammar that spaCy uses by default expresses the grammatical structure of a sentence
    as a set of one-to-one correspondences between words.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these relations represents a grammatical function in which one word
    is the *child*, or the dependent word, and the other is the *head*, or the governor.
    For example, in the pair “blue sky,” the dominant word is “sky,” and “blue”—its
    modifier—is its subordinate. You can think of the head as the word with the most
    relative “importance” and without which the child doesn’t make sense. By contrast,
    the head of a relation can often stand in a sentence without the child (for example,
    you don’t need “African” or “wild” in the sentence shown in [Figure A-1](../Text/app01.xhtml#app01fig01),
    nor “quickly”).
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure A-2](../Text/app01.xhtml#app01fig02) shows a graphical depiction of
    this concept.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/app1-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-2: An example of a dependency tree structure based on the head/child
    concept*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the dependency tree shown in [Figure A-2](../Text/app01.xhtml#app01fig02)
    is similar to the representation on the right in [Figure A-1](../Text/app01.xhtml#app01fig01).
    The only difference between these two representations is a visual one: although
    the tree shown in [Figure A-1](../Text/app01.xhtml#app01fig01) has a pyramidal
    view, the tree in [Figure A-2](../Text/app01.xhtml#app01fig02) uses labeled, directed
    arcs to emphasize the head/child link.'
  prefs: []
  type: TYPE_NORMAL
- en: Each word in a sentence must be connected to exactly one head. But the same
    word might have none, one, or several children. The spaCy grammar assumes that
    the head of a sentence (the ROOT token) is its own head. In this example, the
    verb “run” is the head of the sentence, so the head property of the Token object
    representing this word will refer to this same Token object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the head/child relationship has nothing to do with linear order in
    the sentence. For example, the child “wild” comes before its head “animals,” but
    the child “quickly” comes after its head “run.”
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Grammar Concepts**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section discusses the more advanced grammar concepts used in the book,
    including transitive verbs and direct objects, prepositional objects, modal auxiliary
    verbs, and personal pronouns.
  prefs: []
  type: TYPE_NORMAL
- en: '***Transitive Verbs and Direct Objects***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *direct object* is a noun (or a noun phrase) denoting something that is directly
    acted on by a verb. A *transitive verb* accepts a direct object. In most cases,
    for identifying intent, the transitive verb and its direct object are the most
    important words in a sentence to extract. The reason is that these words typically
    best describe the action and the thing acted upon. For example, in the sentence,
    “I want a pizza,” the words “want” and “pizza” express the sentence’s intent.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prepositional Objects***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *preposition* connects noun phrases with other words in a sentence. Prepositions
    such as “in,” “above,” “under,” “after,” and “before” express spatial or temporal
    relations. Others, such as “to,” “of,” and “for,” indicate semantic roles. For
    instance, in the sentence, “You’ll find the envelope under the book,” the preposition
    “under” expresses a spatial relationship between the envelope and the book. And
    in the sentence, “I will deploy it to a channel,” the use of the preposition “to”
    indicates the role goal expressed by the prepositional phrase “a channel.”
  prefs: []
  type: TYPE_NORMAL
- en: An *object of a preposition* (known as a complement in theoretical linguistics)
    is a noun, pronoun, or noun phrase that follows a preposition. In the sentence,
    “I wrote a series of articles,” the word “articles” is the object of the preposition.
  prefs: []
  type: TYPE_NORMAL
- en: In some questions, extracting the object of the preposition might give you the
    most informative word or phrase in terms of finding the answer, as shown in the
    question, “What can be done about climate change?” The phrase “climate change”
    is the key phrase in determining what the question is about.
  prefs: []
  type: TYPE_NORMAL
- en: The spaCy dependency parser indexes prepositions as 'prep' and objects of the
    preposition as 'pobj'.
  prefs: []
  type: TYPE_NORMAL
- en: '***Modal Auxiliary Verbs***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Modal auxiliary verbs include “may,” “might,” “can,” “could,” “must,” “ought,”
    “shall,” “should,” “will,” and “would,” among others. They’re used in conjunction
    with a main verb in the base form to indicate *modality*—in other words, likelihood,
    permission, capability, necessity, willingness, or advice.
  prefs: []
  type: TYPE_NORMAL
- en: The spaCy part-of-speech tagger recognizes modal auxiliary verbs, marking them
    with the fine-grained part-of-speech tag 'MD'. The syntactic dependency parser
    marks them as 'aux'. You might need to check whether a sentence uses a modal auxiliary
    verb when you need, for example, to reconstruct the sentence from a question.
  prefs: []
  type: TYPE_NORMAL
- en: '***Personal Pronouns***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A personal pronoun refers to a specific person, object, or to multiple people
    or objects. In English, personal pronouns have a number of forms, distinguished
    according to their grammatical role in a sentence:'
  prefs: []
  type: TYPE_NORMAL
- en: The nominative form (I, you, he, she, it, we, they) is typically used as the
    nominal subject of a verb.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The accusative form (me, you, him, her, it, us, them) is typically used as the
    object of a verb or preposition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reflexive form (myself, yourself/yourselves, himself, herself, itself, ourselves,
    themselves) typically refers back to the subject specified within the same clause.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spaCy parser assigns different dependency labels to personal pronouns according
    to their forms. Thus, a personal pronoun in nominative form is usually assigned
    the 'nsubj' dependency label, which stands for “nominal subject.” It is interesting
    to note that in many user-generated sentences for chatbots, the subject of the
    sentence is “I.”
  prefs: []
  type: TYPE_NORMAL
- en: In accusative form, a personal pronoun can be assigned either 'dobj' or 'iobj',
    which stands for direct object and indirect object, respectively. Reflexive pronouns
    also usually act as either direct objects or indirect objects.
  prefs: []
  type: TYPE_NORMAL
