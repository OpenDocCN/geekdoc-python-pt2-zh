- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Binary Search
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 二分查找
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: '*Binary search* is an algorithm for efficiently searching a sorted list. It
    checks the sorted list for a target value by repeatedly dividing the list in half,
    determining which of the two halves could contain the target value, and discarding
    the other half. This algorithm’s simplicity of logic and implementation make it
    a perfect introductory topic for computer science, so binary search algorithms
    are nearly universal throughout computer science courses and textbooks.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*二分查找*是一种高效的已排序列表搜索算法。它通过不断地将已排序的列表分成两半，判断哪一半可能包含目标值，并丢弃另一半，来检查目标值是否存在。这种算法的逻辑和实现简洁，使其成为计算机科学的完美入门话题，因此二分查找算法几乎普遍出现在计算机科学课程和教科书中。'
- en: The skeptical reader might wonder, “How often will I really need to search a
    sorted list?” or, more accurately, “How often will I need to implement a function
    to search my sorted list? Haven’t a few million people done this? Isn’t it in
    a library somewhere?” While you shouldn’t reject the possibility of one day needing
    to implement your own binary search, its true importance goes well beyond its
    implementation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 怀疑的读者可能会想：“我到底有多频繁需要搜索一个已排序的列表？”或者，更准确地说，“我到底有多频繁需要实现一个函数来搜索我的已排序列表？难道不是已经有几百万个人做过这个了吗？难道它不是某个库的一部分吗？”虽然你不应该排除未来需要实现你自己的二分查找的可能性，但它的真正重要性远远超出了其实现本身。
- en: Binary search illustrates how clever algorithms can use the structure in which
    data is stored to achieve significant computational savings, even when this structure
    is as simple as sorted data. Binary search is easily analyzed for correctness
    and efficiency, provides guarantees of both speed and correctness, and demonstrates
    the fundamental interaction between data and algorithms. It’s an excellent lens
    with which to examine difference in data storage techniques, such as the difference
    between linked lists and arrays, or the motivation behind many tree-based algorithms.
    It can even be used to create a better cup of coffee.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 二分查找展示了聪明的算法如何利用数据存储结构来实现显著的计算节省，即使这种结构像排序数据那样简单。二分查找易于分析其正确性和效率，提供了速度和正确性的保证，并展示了数据与算法之间的基本互动。它是一个很好的视角，用来研究不同数据存储技术之间的差异，比如链表和数组之间的差异，或者许多基于树的算法背后的动机。它甚至可以用来做一杯更好的咖啡。
- en: The Problem
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: 'Before defining any new algorithm, we must define the problem the algorithm
    will try to solve. In this chapter, our aim is to find a single item in a list
    that matches the given target value; we need an algorithm that can efficiently
    perform such a search. Formally we can define this search as:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义任何新算法之前，我们必须定义该算法将要解决的问题。在本章中，我们的目标是在列表中找到与给定目标值匹配的单个项目；我们需要一个能够高效执行这种搜索的算法。我们可以正式地将这个搜索定义为：
- en: Given a set of *N* data points *X* = {*x*[*1*]*, x*[*2*]*,* . . . *, x*[*N*]}
    and a target value *x*', find a point *x*[*i*]∈ *X* such that *x*'= *x*[*i*],
    or indicate that no such point exists.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定一组*N*个数据点 *X* = {*x*[*1*]*, x*[*2*]*, ... , x*[*N*]} 和一个目标值 *x*'，找出一个点 *x*[*i*]∈
    *X* 使得 *x*' = *x*[*i*]，或者指示没有这样的点存在。
- en: In our everyday lives, we would likely describe the task as “Find me this particular
    thing.” This search problem is one that we all face numerous times a day. We might
    be hunting for a word in a dictionary, a name in our contacts list, a specific
    date in a list of historical of events, or our preferred brand of coffee in a
    densely packed supermarket shelf. All we need is a list of candidates and a way
    to check whether we’ve found a match.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的日常生活中，我们可能会把任务描述为“找到这个特定的东西”。这个搜索问题是我们每天都会遇到的。我们可能在查字典找一个单词，在通讯录里找一个名字，在历史事件列表里找一个特定的日期，或者在挤满货物的超市货架上找我们偏爱的咖啡品牌。我们所需要的只是一个候选列表和一个检查是否找到匹配项的方法。
- en: Linear Scan
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性扫描
- en: To appreciate the advantages of binary search, we start with a simpler algorithm,
    *linear scan*, to provide a baseline for comparison. Linear scan searches for
    a target value by testing each value in our list, one after the other, against
    the target value, until the target is found or we reach the end of our list. This
    is how the author normally searches supermarket shelves—running his finger along
    the brightly colored packages of coffee, one by one, while mumbling to himself
    about the need for better indexing schemes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解二分查找的优势，我们从一个更简单的算法——*线性扫描*开始，以此作为对比的基准。线性扫描通过逐个测试列表中的每个值与目标值进行比对，直到找到目标值或遍历到列表的末尾。这就是作者通常搜索超市货架的方式——逐个用手指划过五彩缤纷的咖啡包装袋，同时低声抱怨索引系统需要改进。
- en: Imagine that we are looking to find the target value in an array `A` of numbers.
    In this case, let’s use `target = 21`. We iterate through each bin in the array
    and check whether that value equals 21, as illustrated in [Figure 2-1](#figure2-1).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要在一个包含数字的数组`A`中查找目标值。在这种情况下，假设`target = 21`。我们遍历数组中的每个箱子，并检查该值是否等于21，如[图
    2-1](#figure2-1)所示。
- en: '[Listing 2-1](#listing2-1) shows the code for linear scan. The code returns
    the index of the matching element if one is found and returns an index of `-1`
    if the search fails and the item is not in our array.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 2-1](#listing2-1)展示了线性扫描的代码。如果找到匹配的元素，代码返回该元素的索引；如果搜索失败且数组中没有该项，则返回索引`-1`。'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 2-1: The code for linear scan'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 2-1：线性扫描的代码
- en: '![A diagram showing how to perform a linear scan on an array of 11 unsorted
    bins containing numbers. We check whether the value of the first bin is 21; it
    isn’t, so we check the next bin and so on until we find a match.](image_fi/502604c02/f02001.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![一个图表，展示了如何对包含数字的11个无序箱子执行线性扫描。我们检查第一个箱子的值是否为21；如果不是，则检查下一个箱子，以此类推，直到找到匹配项。](image_fi/502604c02/f02001.png)'
- en: 'Figure 2-1: A linear scan over an array of integers'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：对整数数组进行线性扫描
- en: A single `WHILE` loop iterates over each element of the array, and the internal
    `IF` statement compares that element to the target. As soon as we come across
    an element matching the target, we return the corresponding index. If we make
    it to the end of the array, we return `-1`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的`WHILE`循环遍历数组中的每个元素，内部的`IF`语句将该元素与目标进行比较。一旦遇到匹配的元素，我们返回对应的索引。如果遍历到数组的末尾，则返回`-1`。
- en: Linear scan isn’t fancy or clever. It’s a *brute-force* test guaranteed to find
    the item of interest (if the item is in the data) because it checks every possible
    item until it finds a match or confirms the item is missing. This is thorough
    but inefficient, especially for large lists. If we know nothing about the structure
    of the data in `A`, there is nothing we can do to streamline the process. The
    target value could be in any bin, so we may need to check them all.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 线性扫描并不复杂或巧妙。它是一个*暴力破解*测试，保证能找到感兴趣的项目（如果项目在数据中存在），因为它会检查每一个可能的项，直到找到匹配项或确认该项不存在。这种方法全面，但效率较低，特别是在大型列表中。如果我们对`A`中数据的结构一无所知，就没有办法优化这个过程。目标值可能在任何一个箱子中，所以我们可能需要检查所有箱子。
- en: To illustrate linear scan’s limitations, imagine performing such a scan on a
    physical row of items, like a line of introductory computer science students standing
    outside a classroom. The teacher, looking to return a specific student’s assignment,
    walks down the line asking each student “Is your name Jeremy?” before potentially
    moving onto the next. The search stops when the teacher finds the correct student
    or makes it to the end of the line. The students (correctly) roll their eyes and
    mutter about their inefficient instructor.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明线性扫描的局限性，想象一下在一排物品上执行这样的扫描，比如一排站在教室外的计算机科学入门学生。老师为了找出某个学生的作业，逐个走下去问每个学生：“你的名字是Jeremy吗？”然后可能继续问下一个。搜索在老师找到正确的学生或走到队列末尾时停止。学生们（正确地）翻了翻眼睛，低声抱怨老师效率低下。
- en: Sometimes there are ways to make linear search faster *per comparison*. For
    example, we might optimize the comparison time for more complex data by stopping
    at the first mismatched letter when comparing strings, as described in Chapter
    1. Likewise, in the supermarket case, we could consume massive amounts of coffee
    ahead of time, so our shaky finger zips faster along the shelf. However, this
    only helps to a point. We are still limited to checking every item, one by one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有时可以通过*每次比较*优化线性查找的速度。例如，我们可以通过在比较字符串时遇到第一个不匹配的字母就停止，从而优化复杂数据的比较时间，正如第 1 章中所描述的那样。同样，在超市的例子中，我们可以提前喝大量的咖啡，这样我们的颤抖的手指就能更快地沿着货架滑动。然而，这只能帮助到一定程度。我们仍然需要逐一检查每个项目。
- en: In the next section, we’ll see how a small amount of structure in the data changes
    everything.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到数据中的少量结构如何改变一切。
- en: Binary Search Algorithm
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二分查找算法
- en: Binary search is an algorithm to find a target value *v* in a *sorted* list
    and only works on sorted data. The algorithm can be written to work with data
    sorted in either increasing or decreasing order, but, for now, let’s consider
    the case of data sorted in increasing order—lowest to highest. The algorithm operates
    by partitioning the list in half and determining in which half *v* must reside.
    It then discards the half that *v* is not in and repeats the process with only
    the half that can possibly still contain *v* until only one value remains. For
    example, if we were searching the sorted list in [Figure 2-2](#figure2-2) for
    the value 7, we would find 5 at the midpoint and could rule out the first half
    of the list. Anything before the middle element cannot be greater than 5, and,
    since 5 is less than 7, everything before 5 is also less than 7.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 二分查找是一种在*排序*列表中查找目标值*v*的算法，仅适用于排序数据。该算法可以编写成适用于按递增或递减顺序排序的数据，但目前我们考虑的是按递增顺序排序的数据——从最小到最大。该算法通过将列表分成两半，确定*v*应该位于哪一半来进行操作。然后，它会丢弃*v*不在的那一半，并在可能仍包含*v*的那一半上重复该过程，直到只剩一个值。例如，如果我们在[图
    2-2](#figure2-2)中查找值 7，我们会在中点找到 5，并可以排除列表的前半部分。中点之前的任何元素都不可能大于 5，而由于 5 小于 7，因此
    5 之前的所有元素也都小于 7。
- en: '![A sorted list of integers from 1 to 9\. An arrow points to the midpoint with
    value 5.](image_fi/502604c02/f02002.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![从 1 到 9 的整数排序列表。一箭头指向值为 5 的中点。](image_fi/502604c02/f02002.png)'
- en: 'Figure 2-2: A sorted list of integers from 1 to 9, where 5 is the midpoint'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：一个从 1 到 9 的整数排序列表，其中 5 是中点。
- en: 'The key to efficient algorithms is using information or structure within the
    data. In the case of binary search, we use the fact that the array is sorted in
    increasing order. More formally, consider a sorted array `A`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 高效算法的关键是利用数据中的信息或结构。在二分查找的情况下，我们利用了数组按递增顺序排序这一事实。更正式地说，考虑一个排序数组`A`：
- en: '*A*[*i*] ≤ *A*[*j*] for any pair of indexes *i* and *j* such that *i* < *j*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意一对索引*i*和*j*，若*i* < *j*，则有 *A*[*i*] ≤ *A*[*j*]
- en: While this might not seem like a lot of information, it’s enough to allow us
    to rule out entire sections of the array. It’s similar to the logic we use to
    avoid the ice cream aisle when searching for coffee. Once we know an item won’t
    be in a given area, we can rule out that entire set of items in that area without
    individually checking them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这看起来信息量不大，但它足以让我们排除数组中的整个区域。这类似于我们在找咖啡时避免走冰淇淋过道的逻辑。一旦我们知道某个物品不会出现在某个区域，我们就可以排除该区域内的所有物品，而不必一个个检查它们。
- en: 'Binary search tracks the current search space with two bounds: the upper bound
    `IndexHigh` marks the highest index of the array that is part of the active search
    space, and the lower bound `IndexLow` marks the lowest. Throughout the algorithm,
    if the target value is in the array, we guarantee the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 二分查找通过两个边界来跟踪当前的搜索空间：上界`IndexHigh`标记数组中属于活动搜索空间的最高索引，下界`IndexLow`标记最低索引。在整个算法中，如果目标值在数组中，我们可以保证以下几点：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Binary search starts each iteration by choosing the midpoint of the current
    search space:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 二分查找从每次迭代选择当前搜索空间的中点开始：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'where `Floor` is a mathematical function that rounds a number down to an integer.
    We then compare the value at the middle location, `A[IndexMid]`, with the target
    value `v`. If the middle point is less than the target value, `A[IndexMid] < v`,
    we know the target value must lie after the middle index. This allows us to chop
    the search space in half by making `IndexLow = IndexMid + 1`. Alternately, if
    the middle point is greater than the target value, `A[IndexMid] > v`, we know
    the target value must lie before the middle index, which allows us to chop the
    search space in half by making `IndexHigh = IndexMid – 1`. Of course, if we find
    `A[IndexMid] == v`, we immediately conclude the search: we’ve found the target.
    Boisterous celebration is optional.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`Floor`是一个数学函数，用于将一个数向下取整为整数。然后，我们将中间位置的值`A[IndexMid]`与目标值`v`进行比较。如果中点小于目标值，即`A[IndexMid]
    < v`，我们知道目标值必须位于中点索引之后。这使我们能够通过将`IndexLow = IndexMid + 1`来将搜索空间减半。或者，如果中点大于目标值，即`A[IndexMid]
    > v`，我们知道目标值必须位于中点索引之前，这样我们就可以通过将`IndexHigh = IndexMid – 1`来将搜索空间减半。当然，如果我们发现`A[IndexMid]
    == v`，我们会立即结束搜索：目标已经找到。热烈庆祝是可选的。
- en: 'Each row in [Figure 2-3](#figure2-3) represents a step in the binary search
    process on a sorted array. We’re searching the array at row (a) for the value
    `15`. At the start, our search bounds include the entire array: `IndexLow = 0`
    and `IndexHigh = 11`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-3](#figure2-3)中的每一行表示排序数组中二分查找过程的一步。我们在第(a)行中搜索数组中的值`15`。开始时，我们的搜索边界包括整个数组：`IndexLow
    = 0` 和 `IndexHigh = 11`。'
- en: 'In row (b), we compute the midpoint (rounding down) to be `IndexMid = 5`. Comparing
    the midpoint’s value to the target value, we see that `A[5] = 11`, which is less
    than our target value of 15\. Therefore, in row (c), we rule out every element
    in the array up to and including index `5`—that is, all the shaded elements—by
    adjusting the lower bounds: `IndexLow = 6`. We’ve eliminated almost half our search
    space with a single comparison! The algorithm repeats this process on the remaining
    range, computing the new midpoint as `IndexMid = 8`, comparing to the target value
    (`A[8] = 30`, which is greater than `v = 15`), and refining our bounds to `IndexHigh
    = 7`. In row (d), we once again eliminate half of the remaining search in the
    same way. In row (e), we again compute the midpoint as `IndexMid = 6` and compare
    it to the target value (`A[6] == v`). We’ve found the target!'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在第(b)行中，我们计算中点（向下取整）为`IndexMid = 5`。将中点的值与目标值进行比较，我们看到`A[5] = 11`，小于目标值`15`。因此，在第(c)行中，我们排除了数组中从索引`5`及之前的所有元素——即所有阴影部分——通过调整下界：`IndexLow
    = 6`。通过一次比较，我们就消除了几乎一半的搜索空间！算法继续在剩余范围内重复这个过程，计算新的中点为`IndexMid = 8`，并与目标值进行比较（`A[8]
    = 30`，大于`v = 15`），然后将边界调整为`IndexHigh = 7`。在第(d)行中，我们再次以相同的方式排除剩余搜索空间的一半。在第(e)行中，我们再次计算中点为`IndexMid
    = 6`并将其与目标值进行比较（`A[6] == v`）。目标已经找到了！
- en: Note that even though the lower bound’s index pointed to the target value (`v
    = 15`) for several iterations, we continued the search until the *midpoint* pointed
    to the target value. This is because our search checks only the value at the midpoint
    against the target and not the values at the lower or upper indexes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管下界索引已经指向目标值（`v = 15`）好几次，我们仍然继续搜索，直到*中点*指向目标值。这是因为我们的搜索只检查中点位置的值是否与目标匹配，而不是下界或上界索引的值。
- en: Returning to our line of introductory computer science students, we can imagine
    that by the end of the semester, the teacher asks the students to line up in alphabetical
    order. The teacher then starts a binary search by asking the middle student “What
    is your name?” and uses the responses to prune out half the line. The professor
    then mentally revises the bounds, moves to the new midpoint, and repeats the process.
    Thus, the professor can turn the exercise of returning an assignment into a demonstration
    of binary search—while also covering up the fact that they never managed to learn
    the students’ names.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的计算机科学入门课程的学生，我们可以想象，到学期末，老师要求学生按字母顺序排队。然后，老师开始进行二分查找，问中间的学生“你叫什么名字？”，并根据学生的回答将一半的学生从队伍中去除。教授随后在脑海中调整边界，移动到新的中点，并重复这个过程。这样，教授就能将交作业的练习变成演示二分查找——同时也掩盖了他们从未记住学生名字的事实。
- en: '![A diagram that represents performing a binary search for value 15 in a sorted
    array, where the lowest value is negative 5 and highest value is 54\. Each of
    five rows, (a) through (e), shows the same array in different stages of the search.
    Portions of the array that have been eliminated are shaded gray; the rest are
    shaded white. ](image_fi/502604c02/f02003.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![一张图示，表示对排序数组中的值 15 进行二分查找，其中最小值是-5，最大值是54。五行（a）到（e）分别展示了搜索过程中不同阶段的数组。被排除的数组部分以灰色阴影标出，其他部分以白色阴影标出。](image_fi/502604c02/f02003.png)'
- en: 'Figure 2-3: A binary search for the value 15 over a sorted array'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3：对排序数组中的值 15 进行的二分查找
- en: Absent Values
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺失的值
- en: Next, we need to consider what happens if the target value is not in the list
    and how the binary search confirms the value’s absence. In the linear scan case,
    we know that an element is not in the list as soon as we hit the end of the list.
    For binary search, we can conclude that our target item does not exist by testing
    the bounds themselves. As the search progresses, the upper and lower bounds move
    closer and closer until there are no unexplored values between them. Since we
    are always moving one of the bounds *past* the midpoint index, we can stop the
    search when `IndexHigh < IndexLow`. At that point, we can guarantee the target
    value is not in the list. [Figure 2-4](#figure2-4) shows an example search for
    `v = 10` on a sorted array, where `10` does not appear in the array.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要考虑目标值不在列表中时会发生什么，以及二分查找是如何确认值的缺失的。在线性扫描的情况下，一旦我们到达列表末尾，就知道元素不在列表中。对于二分查找，我们可以通过测试边界来得出结论，目标项不存在。随着搜索的进行，上下边界会越来越接近，直到它们之间没有未探索的值。由于我们总是将一个边界*移动*到中点索引的另一侧，当`IndexHigh
    < IndexLow`时，我们可以停止搜索。此时，我们可以确保目标值不在列表中。[Figure 2-4](#figure2-4)展示了一个在排序数组中搜索`v
    = 10`的例子，其中`10`不出现在数组中。
- en: '![A diagram that represents performing a binary search for absent value 10
    in a sorted array where the lowest value is negative 5 and highest value is 54\.
    Each of six rows, (a) through (f), shows the same array in different stages of
    the search.](image_fi/502604c02/f02004.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![一张图示，表示对排序数组中缺失的值 10 进行二分查找，数组的最小值是-5，最大值是54。六行（a）到（f）分别展示了搜索过程中不同阶段的数组。](image_fi/502604c02/f02004.png)'
- en: 'Figure 2-4: A binary search for a value (10) that isn’t in the array'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：对一个不在数组中的值（10）进行的二分查找
- en: 'We could theoretically have stopped the search earlier than row (f): once the
    value at our high bound is less than the target value (`IndexHigh = 4`) we know
    that the target can’t be in the array. However, as with our search in [Figure
    2-3](#figure2-3), the algorithm only checks the value at the midpoint against
    the target. It tracks the indices of the high and low bounds, but does not check
    the values at these locations explicitly. While we could add logic to capture
    this case, as well as the corresponding case of the lower bound being greater
    than the target value, we will keep the logic simple for now.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，我们可以在行（f）之前就停止搜索：一旦我们在高边界处的值小于目标值（`IndexHigh = 4`），我们就知道目标值不可能在数组中。然而，像[Figure
    2-3](#figure2-3)中的搜索一样，算法只会检查中点处的值与目标值进行比较。它会跟踪高低边界的索引，但不会显式地检查这些位置的值。虽然我们可以添加逻辑来捕捉这种情况，以及下边界大于目标值的相应情况，但为了简化逻辑，我们暂时保持现有的简单实现。
- en: Implementing Binary Search
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现二分查找
- en: We can implement a binary search in code with a single `WHILE` loop, as shown
    in [Listing 2-2](#listing2-2). Like the code for linear search in [Listing 2-1](#listing2-1),
    the binary search algorithm returns the index of the target element if it is in
    the array. If there is no matching element in the array, the algorithm returns
    `−1`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个单一的`WHILE`循环在代码中实现二分查找，如[Listing 2-2](#listing2-2)所示。与[Listing 2-1](#listing2-1)中的线性查找代码类似，二分查找算法会返回目标元素在数组中的索引。如果数组中没有匹配的元素，算法将返回`−1`。
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 2-2: Implementing binary search with a single loop'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 2-2：用单个循环实现二分查找
- en: While the high and low indices have not crossed, we continue the search ❶. During
    each iteration, we compute a new midpoint ❷ and check the midpoint value against
    the target. If it’s an exact match, we’ve found our target and can directly return
    the corresponding index. If the value at the midpoint is too small, we adjust
    the lower bounds ❸. If the value is too high, we adjust the upper bounds ❹. If
    `IndexHigh < IndexLow`, the element is not in the array, so we return `-1`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当高低索引没有交叉时，我们继续搜索 ❶。在每次迭代中，我们计算一个新的中点 ❷，并将中点值与目标值进行比较。如果它完全匹配，我们就找到了目标，可以直接返回相应的索引。如果中点的值太小，我们调整下界
    ❸。如果值太大，我们调整上界 ❹。如果`IndexHigh < IndexLow`，元素不在数组中，我们返回`-1`。
- en: Depending on the programming language, we could use approaches other than returning
    `-1` to indicate failure, such as throwing an exception. Regardless of the actual
    mechanism, your code and documentation should always be absolutely clear about
    what happens if the element is not in the array so that callers of the function
    can use it correctly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据编程语言的不同，我们可以使用除返回`-1`外的其他方法来表示失败，比如抛出异常。无论具体的机制如何，您的代码和文档应该始终明确说明如果元素不在数组中会发生什么，以便函数的调用者能够正确使用它。
- en: Adapting Binary Search
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改编二分查找
- en: So far, we have considered binary search in the context of lists and arrays—fixed
    sets of discrete items. It is easy to see how we could bring this algorithm into
    the real world by applying it to a shelf of sorted books, names in a telephone
    book, or a clothing rack ordered by size. But we can adapt this same approach
    to continuous data, where we don’t start with a set of individual items or indices,
    as well. Instead, we use high and low bounds on the values themselves.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经考虑了在列表和数组中的二分查找——一组固定的离散项。很容易看出，我们可以通过将该算法应用于一排排的排序书籍、电话簿中的名字，或者按尺码排序的衣架，将其引入现实世界。但我们同样可以将这种方法适应于连续数据，在这种情况下，我们不从一组单独的项或索引开始，而是直接使用值本身的上下界。
- en: 'Imagine you aim to craft the perfect cup of coffee. After months of laborious
    research, you’ve confirmed the optimal temperature and quantity of water. Yet
    one mystery remains: What quantity of coffee grounds should you use? Here the
    sources diverge. The Strong Coffee camp recommends a tremendous 5 tablespoons
    of coffee grounds, while the Watery Coffee camp recommends a paltry 0.5 tablespoons.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要制作一杯完美的咖啡。在几个月的辛勤研究后，您已经确认了最佳的水温和水量。然而，还有一个谜团待解：应使用多少咖啡粉？此时，意见不一。浓咖啡派推荐使用5汤匙咖啡粉，而淡咖啡派则推荐仅使用0.5汤匙。
- en: The problem of determining your own optimal scoop of coffee grounds lends itself
    perfectly to a binary search, as shown in [Figure 2-5](#figure2-5). We start with
    reasonable upper and lower bounds as illustrated in [Figure 2-5](#figure2-5)(a).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确定自己最佳咖啡粉量的问题非常适合使用二分查找，如[图 2-5](#figure2-5)所示。我们从合理的上下界开始，如[图 2-5](#figure2-5)(a)所示。
- en: LowerBound = 0 tablespoons The “coffee” was a cup of warm water.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LowerBound = 0 汤匙 “咖啡”是一杯温水。
- en: UpperBound = 5 tablespoons The coffee was too strong.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UpperBound = 5 汤匙 咖啡太浓了。
- en: The true value must be somewhere in between. Note that our bounds are now the
    values themselves instead of item indices.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的值必须在两者之间。请注意，我们的边界现在是这些值本身，而不是项的索引。
- en: '![A diagram showing a binary search of between 0 and 5 tablespoons of coffee.
    At each step (a) through (d), we define a new midpoint between a new upper and
    lower bound until we’ve found the optimal midpoint value, 2.](image_fi/502604c02/f02005.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![一张展示在0到5汤匙咖啡之间进行二分查找的图表。在每一步（a）到（d）中，我们定义新的中点，直到找到最佳中点值2。](image_fi/502604c02/f02005.png)'
- en: 'Figure 2-5: An adapted binary search can be used to search a range of real
    numbers.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：可以使用改编的二分查找来搜索一个实数范围。
- en: As with a binary search on an array of values, we can define the midpoint at
    2.5 tablespoons and test that ([Figure 2-5](#figure2-5)(b)). Again, 2.5 tablespoons
    is just a value. It doesn’t correspond to an element in an array or item on the
    shelf. We do not have an array of predetermined values, but rather the infinite
    range of all real numbers between 0.0 and 5.0, and any individual measurement
    effectively corresponds to an index into that range.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与对一个值数组的二分查找一样，我们可以将中点定义为2.5汤匙并进行测试（见[图 2-5](#figure2-5)(b)）。同样，2.5汤匙只是一个值，它并不对应数组中的某个元素或书架上的某个项。我们没有一组预定的值数组，而是0.0到5.0之间所有实数的无限范围，任何单独的测量值实际上都对应于该范围中的一个索引。
- en: We find the coffee made from 2.5 tablespoons is a little too strong for our
    taste, allowing us to refine the bounds. Our optimal amount of coffee is now constrained
    to lie between 0 tablespoons and 2.5 tablespoons (c). Our search continues with
    a new midpoint of 1.25 tablespoons, an amount that produces a weak brew. We need
    to refine our lower bound (d).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现2.5汤匙酿出的咖啡对于我们的口味来说有些太浓，这使得我们能够精细调整范围。我们现在的最佳咖啡量被限制在0汤匙和2.5汤匙之间（c）。我们的搜索继续进行，新的中间点是1.25汤匙，这个量酿出的咖啡较为淡薄。我们需要细化下限（d）。
- en: 'The search for morning bliss continues this way until we’ve sufficiently narrowed
    down our range. Unlike with a discrete array of values, we may never find the
    exact point that satisfies our search. After all, there is an infinite number
    of real values. If our optimal amount of coffee is 2.0 tablespoons, we might try
    values of 2.50, 1.25, 1.875, 2.1875, and 2.03125 before concluding that we are
    close enough. Therefore, we terminate the search when our range is sufficiently
    small:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找晨间愉悦的过程就是这样继续进行，直到我们足够缩小范围。与离散的数值数组不同，我们可能永远无法找到完全满足搜索条件的确切点。毕竟，实数的值是无限的。如果我们的最佳咖啡量是2.0汤匙，我们可能会尝试2.50、1.25、1.875、2.1875和2.03125等值，然后得出结论，认为我们已经足够接近了。因此，当我们的范围足够小时，我们会终止搜索：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Contrast this search with a linear scan through the options. In the name of
    science, we may resolve to try every possible increment of 0.05 tablespoons until
    we find the optimal brew. After all, this is coffee, and we must be thorough.
    Starting at our low index (0.0 tablespoons—alternately known as a cup of warm
    water), we continually increment the amount by 0.05 and retest. We run through
    0.05, 0.10, 0.15, . . . , 1.00 before we start to get to a reasonable strength.
    We would need many trials to get to the correct point, at least 20 of which would
    be too weak to even to count as coffee. That’s a lot of wasted effort and coffee
    beans.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将这种搜索与线性扫描选项进行对比。在科学的名义下，我们可能决定尝试每一个0.05汤匙的增量，直到找到最佳的酿制比例。毕竟，这可是咖啡，我们必须彻底。从我们最低的起始点（0.0汤匙——也就是一杯温水）开始，我们不断增加0.05的量并重新测试。我们从0.05、0.10、0.15，……，一直到1.00，才开始接近合理的浓度。我们需要进行许多试验才能找到正确的比例，至少有20次试验会太弱，甚至不能算作咖啡。这是大量的浪费努力和咖啡豆。
- en: The use of binary search also allows for better precision. By sampling only
    0.05 increments during our linear scan, we are limited to how close to the target
    value we can get. Binary search keeps homing in on a smaller range until we stop.
    We choose what value of `UpperBound – LowerBound` is sufficient to halt the search,
    allowing us to narrow it down to within 0.0001 tablespoons or closer.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用二分搜索还可以提高精度。在我们进行线性扫描时，每次仅增加0.05的增量，这限制了我们能接近目标值的程度。二分搜索不断缩小范围，直到我们停止。我们选择一个足够小的`UpperBound
    – LowerBound`差值来停止搜索，从而将范围缩小到0.0001汤匙或更精确。
- en: This adaptation of the binary search approach forms the basis of important mathematical
    techniques, such as bisection search. *Bisection search* uses it to find the zero
    of a function, or the value of *x* such that *f*(*x*) = 0\. Instead of evaluating
    whether coffee is too strong or too weak, bisection search tracks bounds where
    the function is above zero and below zero. By repeatedly dividing the interval
    in half at the midpoint, the algorithm zooms in on the value of *x* where the
    function is exactly zero.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种二分搜索方法的改进形式构成了重要数学技术的基础，例如二分法搜索。*二分法搜索*用于寻找函数的零点，或者找到* x *值，使得 * f *（* x *）=
    0。与评估咖啡是否太浓或太淡不同，二分法搜索跟踪函数在零点以上和以下的区间。通过不断在中点处分割区间，算法逐步缩小到 * x * 的值，使得函数的值恰好为零。
- en: Runtime
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时间
- en: Intuitively, we can see that binary search is often faster than a linear scan
    of the data. Let’s find out how much faster binary search can be to determine
    whether it’s worth the additional code complexity.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 直观上，我们可以看到二分搜索通常比线性扫描数据更快。让我们看看二分搜索到底能快多少，以确定它是否值得额外的代码复杂性。
- en: Of course, the relative speed of the two algorithms depends on the data itself.
    If we are searching for values that always occur at the start of the list, linear
    scan will win. Similarly, binary search might be unnecessary for tiny lists. We
    don’t need to partition a list in half if it has only two elements. We can just
    look at those elements directly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，两个算法的相对速度依赖于数据本身。如果我们正在寻找的值总是出现在列表的开头，线性扫描会更快。同样，二分搜索对于小型列表可能是不必要的。如果列表只有两个元素，我们不需要将其分割成两半，只需直接查看这两个元素。
- en: 'We often analyze the runtime of an algorithm in terms of its average and worst-case
    performance as the size of the data *N* grows. Computer scientists often use measures
    such as Big-O notation to more formally capture those concepts. We won’t formally
    analyze algorithms in this book or use Big-O notation, but we will consider the
    same two aspects throughout for each algorithm:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常根据数据大小 *N* 的变化，分析算法的平均运行时间和最坏情况表现。计算机科学家通常使用像 Big-O 这样的度量来更正式地表达这些概念。虽然本书不会正式分析算法或使用
    Big-O 符号，但我们会在每个算法中考虑相同的两个方面：
- en: The average-case runtime of an algorithm as the size of the data grows
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法的平均情况运行时间随着数据量的增长
- en: The worst-case runtime of an algorithm as the size of the data grows
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法的最坏情况运行时间随着数据量的增长
- en: For now, let’s compare worst-case performance for linear scan and binary search.
    For linear scan, the worst case occurs when the target value is at the end of
    the list or not in the list at all. In these cases, the algorithm has to check
    every single value. If the array has *N* values, it will require *N* comparisons.
    Its worst-case running time is *linear* with the size of the data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们比较线性扫描和二分查找的最坏情况表现。对于线性扫描，最坏情况发生在目标值位于列表的末尾或根本不在列表中。这时，算法必须检查每一个值。如果数组有
    *N* 个值，它将需要 *N* 次比较。它的最坏情况运行时间是 *线性* 的，随着数据量的增大而增长。
- en: 'In contrast, even the worst-case binary search will discard half the data at
    each step, so the number of comparisons is *logarithmic* with the size of the
    data set. It scales proportional to log[2]*N*, which is the base-2 logarithm of
    *N*. Admittedly there is more work per step: instead of checking a single value,
    we have to move our bounds and compute a new midpoint. However, for large enough
    lists, the benefit of needing only a logarithmic number of comparisons will far
    outweigh additional per-step costs.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，即使是最坏情况下的二分查找，也会在每一步中丢弃一半的数据，因此比较次数是与数据集大小的 *对数* 成正比。它的增长比例是 log[2]*N*，即
    *N* 的以 2 为底的对数。诚然，每一步的工作量更多：我们不再检查单一的值，而是需要移动边界并计算新的中点。然而，对于足够大的列表，仅需进行对数次比较的优势，将远大于每步增加的额外开销。
- en: Why This Matters
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这很重要
- en: 'This fixation on binary search in introductory computer science classes isn’t
    the result of binary-search advocacy campaigns, fan clubs, or secret societies
    (although those would all be understandable). Rather, it’s binary search’s simplicity
    that makes it a perfect introductory topic. It is a clean and effective example
    of one of the most fundamental concepts of computational thinking: that designing
    algorithms by using the structure in the problems themselves helps us construct
    efficient solutions. By taking advantage of the sorted nature of the data, we
    are able to cut the worst-case runtime from linear with the number of values to
    logarithmic—a difference that becomes more significant as the data grows.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学入门课程中，过分关注二分查找并不是因为有二分查找的宣传活动、粉丝俱乐部或秘密社团（尽管这些都能理解）。实际上，正是二分查找的简洁性，使其成为一个完美的入门主题。它是计算思维中最基本概念之一的一个干净且有效的示例：通过利用问题本身的结构来设计算法，帮助我们构建高效的解决方案。通过利用数据的有序特性，我们能够将最坏情况的运行时间从与数据量成线性关系，降低到与数据量的对数成关系——这种差异随着数据量的增大变得更加显著。
- en: Throughout the rest of the book, we will continue to look at the tight relationship
    between problem structure (including within the data) and how we can create efficient
    solutions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将继续探讨问题结构（包括数据本身）与如何创造高效解决方案之间的紧密关系。
