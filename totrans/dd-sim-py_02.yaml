- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: The Python Philosophy
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 哲学
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: I believe the best place to start learning Python is not with the language itself,
    but with the guiding philosophy driving it. To write good Python code, you must
    first understand what Python is. That’s what this chapter will focus on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为学习 Python 最好的起点不是从语言本身开始，而是从支撑它的指导理念开始。要编写优秀的 Python 代码，首先你必须理解 Python 是什么。这一章将专注于此。
- en: What Is Python, Exactly?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 究竟是什么？
- en: Python is a programming language developed in 1991 by Dutch programmer Guido
    van Rossum. The name refers not to the snake often used as a mascot, but to *Monty
    Python’s Flying Circus* (that fact alone should tell you a lot about the mindset
    behind the language). What began as a hobby project over Christmas break turned
    into one of the most perennially popular computer languages today.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是由荷兰程序员 Guido van Rossum 于 1991 年开发的编程语言。这个名字并不是指经常作为吉祥物的蛇，而是来源于 *Monty
    Python’s Flying Circus*（这个事实本身就能告诉你很多关于这门语言背后心态的信息）。最初作为一个圣诞假期的兴趣项目，它变成了如今最受欢迎的计算机语言之一。
- en: From a technical perspective, Python is considered a high-level, general-purpose
    language, with full support for the procedural, object-oriented, and functional
    programming paradigms, among others.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度看，Python 被认为是一种高级通用语言，完全支持过程化编程、面向对象编程和函数式编程等编程范式。
- en: 'Fans of Python are quick to point out its famous readability and simplicity,
    which lend to an initial feeling that the language is “magic.” This has also given
    rise to a less-than-useful bit of advice for newcomers: “Python is easy; it’s
    just pseudocode!”'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的粉丝们常常指出它著名的可读性和简洁性，这给人一种语言是“魔法般”的初始印象。这也促使了一个对新手来说并不太有用的建议：“Python 很简单；它只是伪代码！”
- en: 'That isn’t strictly true. Don’t let the natural readability fool you: Python
    is beautifully unique and influenced by many other languages, but it often bears
    little resemblance to any of them. To truly master it, one must take it by itself,
    not in strong comparison to other languages. That is exactly what this book will
    do.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不完全正确。不要让它天生的可读性蒙蔽了你：Python 是独具美感的、受到许多其他语言影响的，但它常常与任何一种语言的相似度都很低。要真正掌握它，必须独立对待它，而不是与其他语言做过多的对比。这正是本书将要做的事情。
- en: Most importantly, however, Python is an idea. It’s the collective creation of
    a diverse group of nerds, united by nothing more than an audacious desire to build
    an awesome programming language. When you truly understand Python, it alters your
    entire perspective. You’re a part of something larger; something that has taken
    on a life of its own.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最重要的是，Python 是一种理念。它是由一群多样化的极客集体创作的，他们共同的动力不过是想要构建一门令人惊叹的编程语言。当你真正理解 Python
    时，它将改变你整个的视角。你是更大事物的一部分；这是一个拥有独立生命的事物。
- en: 'As Guido van Rossum explained in his famous King’s Day speech:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Guido van Rossum 在他著名的国王节演讲中解释的那样：
- en: I believe the most important idea is that Python is developed on the Internet,
    entirely in the open, by a community of volunteers (but not amateurs!) who feel
    passion and ownership.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为最重要的观点是，Python 是在互联网上完全开放的，由一群有激情并且拥有归属感的志愿者（但不是业余爱好者！）共同开发的。
- en: 'Myths: What Python Isn’t'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 神话：Python 不是的东西
- en: There are a lot of myths about Python, many of which lead to people shunning
    the language for certain applications, if not altogether.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Python 存在许多神话，其中许多导致人们在某些应用中避开 Python，甚至完全放弃它。
- en: 'Myth #1: Python Is Merely a Scripting Language'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '神话 #1：Python 仅仅是一个脚本语言'
- en: 'I consider “scripting language” to be one of the most insidious terms used
    in discussing programming languages. It implies that the language is somehow unsuited
    for writing “real” software (see Myth #5).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '我认为“脚本语言”是讨论编程语言时最具误导性的术语之一。它暗示着这种语言在某种程度上不适合编写“真正”的软件（参见神话 #5）。'
- en: Python is *turing-complete*, which means that you could implement any programming
    language in Python and then be able to execute any program written in that language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是 *图灵完备* 的，这意味着你可以用 Python 实现任何编程语言，然后执行用该语言编写的任何程序。
- en: To put that another way, anything another programming language can do, Python
    can do. Whether it’s easy, or even advisable, depends on what you’re attempting.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，其他编程语言能做的事情，Python 也能做。是否容易，甚至是否建议使用，取决于你所尝试的目标。
- en: 'Myth #2: Python Is Slow'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '神话 #2：Python 很慢'
- en: It’s easy to assume that high-level or interpreted languages like Python are
    naturally slower than compiled or low-level languages like C. In truth, it depends
    on the implementation of the language and how it’s used. In this book, we’ll cover
    several concepts related to improving the performance of Python code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易认为像 Python 这样的高级或解释型语言天生比像 C 这样的编译型或低级语言慢。实际上，这取决于语言的实现和如何使用它。在本书中，我们将讨论与提高
    Python 代码性能相关的几个概念。
- en: The default implementation of the Python language interpreter, CPython, is written
    in C, and it is indeed slower than native machine code. However, there are various
    libraries and techniques—as well as other implementations of the language, including
    PyPy—which have much better performance overall (see Chapter 21) and even approach
    the speed of native machine code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语言解释器的默认实现 CPython 是用 C 编写的，确实比本地机器代码慢。然而，有各种各样的库和技术——以及其他语言实现，包括 PyPy——它们的整体性能要好得多（见第
    21 章），甚至接近本地机器代码的速度。
- en: With all that said, you should understand how performance actually factors into
    your project. In most situations, Python is plenty fast enough to be a good choice
    for application development, data analysis, scientific computing, game development,
    web development, and the list goes on. The performance drawbacks inherent in CPython
    usually only become problematic when you are dealing with very specific scenarios
    demanding extraordinarily high performance. Even then, there are ways around the
    bottlenecks. For the majority of projects, Python’s baseline performance is more
    than sufficient.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，你应该理解性能如何实际影响到你的项目。在大多数情况下，Python 足够快，足以成为应用程序开发、数据分析、科学计算、游戏开发、Web 开发等的良好选择。CPython
    中固有的性能缺陷通常只有在你处理需要极高性能的非常特定场景时才会成为问题。即使在这种情况下，也有绕过瓶颈的方法。对于大多数项目，Python 的基础性能完全足够。
- en: 'Myth #3: Python Cannot Be Compiled'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '神话 #3：Python 不能被编译'
- en: Python is an *interpreted language*, meaning the code is read, interpreted,
    and executed at runtime by the language’s *interpreter*. An end user running a
    project written in Python will typically have to have the Python interpreter installed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种 *解释型语言*，意味着代码在运行时由语言的 *解释器* 读取、解释和执行。运行用 Python 编写的项目的最终用户通常需要安装
    Python 解释器。
- en: This contrasts with what I like to call *assembled languages*, like C, C++,
    or FORTRAN. In these languages, the final result of compilation is machine code,
    which can be executed directly on any compatible computer without needing an additional
    program on that machine (or somehow bundled with the code).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我喜欢称之为 *汇编语言* 的语言有所不同，如 C、C++ 或 FORTRAN。在这些语言中，编译的最终结果是机器代码，可以在任何兼容的计算机上直接执行，而无需在该计算机上安装额外的程序（或者将其与代码捆绑在一起）。
- en: Many developers take this to mean that Python cannot be compiled (assembled)
    to machine code, which seems like the obvious corollary. In fact, it is possible
    to compile Python to machine code, although this is rarely necessary and seldom
    done.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员认为这意味着 Python 不能编译（组装）成机器代码，这似乎是显而易见的推论。实际上，确实可以将 Python 编译成机器代码，尽管这很少是必要的，也很少这样做。
- en: If you want to go this route, there are a few options. On UNIX, the built-in
    *Freeze* tool transpiles to C arrays of Python bytecode, and then it assembles
    this C code to machine code. This doesn’t result in truly assembled Python code,
    however, because the Python interpreter must still be invoked behind the scenes.
    Freeze only works on UNIX systems. The *cx_Freeze* tool, as well as *py2exe* on
    Windows, does much the same thing as Freeze.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想走这条路，有几个选择。在 UNIX 上，内置的 *Freeze* 工具将 Python 字节码转换为 C 数组，然后将这些 C 代码组装成机器代码。然而，这并不会生成真正的组装
    Python 代码，因为 Python 解释器仍然需要在后台调用。Freeze 仅适用于 UNIX 系统。*cx_Freeze* 工具以及 Windows
    上的 *py2exe* 与 Freeze 做的事情非常相似。
- en: To truly compile Python to machine code, you must use an intermediary language.
    *Nuitka* can be used to transpile Python code C and C++, which can then be assembled
    to machine code. You can also transpile Python to Java with *VOC*. *Cython* also
    allows transpiling a specialized form of Python to C, although it’s primarily
    geared toward writing Python extensions in C.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Python 真正编译成机器代码，必须使用一种中介语言。*Nuitka* 可以将 Python 代码转换为 C 和 C++，然后可以将其组装成机器代码。你还可以使用
    *VOC* 将 Python 转换为 Java。*Cython* 也允许将一种特殊形式的 Python 转换为 C，尽管它主要用于用 C 编写 Python
    扩展。
- en: 'Myth #4: Python Gets Compiled Behind the Scenes'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '神话 #4：Python 在幕后被编译'
- en: 'The Python interpreter converts code to *bytecode*, which is then executed.
    The interpreter includes a *virtual machine*, which executes the Python bytecode
    similarly to how a CPU executes machine code. Sometimes, the interpreter will
    do the conversion to bytecode in advance, for performance reasons, generating
    *.pyc* files containing bytecode. While this is “compiling” in one sense of the
    term, there is a key difference between compiling to bytecode and compiling to
    machine code: bytecode is still run through the interpreter, whereas machine code
    executes directly, without needing an additional program. (Technically, “compiling”
    to machine code is called *assembling*, although this distinction is often neglected
    or overlooked.)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器将代码转换为*字节码*，然后执行。解释器包含一个*虚拟机*，该虚拟机执行 Python 字节码，类似于 CPU 执行机器码的方式。有时，为了提高性能，解释器会提前进行字节码转换，生成包含字节码的*.pyc*
    文件。虽然从某种意义上说，这算是“编译”，但编译字节码与编译机器码之间有一个关键区别：字节码仍然需要通过解释器执行，而机器码则直接执行，无需额外的程序。（从技术上讲，“编译”机器码被称为*汇编*，尽管这个区别通常会被忽略或忽视。）
- en: In practice, the majority of Python projects ship as source code, or at least
    Python bytecode, which is run in the Python interpreter installed on the user’s
    machine. There are occasions when a standard executable is preferable, such as
    for ease of installation on end-user computers or in closed-source projects. For
    those situations, tools such as *PyInstaller* and *cx_Freeze* exist. These don’t
    compile the code, but rather bundle the Python source code or bytecode with the
    interpreter so it can be executed by itself (see Chapter 18).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，大多数 Python 项目以源代码的形式发布，或者至少以 Python 字节码的形式发布，这些代码在用户机器上安装的 Python 解释器中运行。有些情况下，标准可执行文件更为合适，例如为了方便在最终用户计算机上的安装或在闭源项目中。针对这些情况，存在一些工具，如*PyInstaller*
    和 *cx_Freeze*。这些工具不会编译代码，而是将 Python 源代码或字节码与解释器捆绑在一起，使其能够独立执行（见第 18 章）。
- en: 'Myth #5: Python Is Unsuitable for Large Projects'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '神话 #5：Python 不适合大型项目'
- en: I’ve heard some developers say, “Python is only useful if the whole project
    fits in one file.” This adage is partially based on the misconception that Python
    projects with multiple files are confusingly structured. This indeed tends to
    be the trend, but only because so few developers know how to correctly structure
    a Python project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾听一些开发者说：“Python 只有在整个项目都放在一个文件中时才有用。”这种说法部分源于一个误解，即多个文件的 Python 项目结构混乱。的确，这种情况确实有时会发生，但仅仅是因为很少有开发者知道如何正确地组织
    Python 项目。
- en: In reality, project structure in Python is far simpler than in C++ and Java.
    Once the developer understands the concepts of packages, modules, and the import
    system (see Chapter 4), working with multiple code files becomes trivial.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Python 中的项目结构比 C++ 和 Java 中的要简单得多。一旦开发者理解了包、模块和导入系统的概念（见第 4 章），使用多个代码文件就变得非常简单。
- en: Another reason for this myth has to do with the fact that Python is dynamically
    typed, rather than statically typed like Java or C++, which some believe makes
    refactoring harder. This doesn’t have to be the case, once the developer knows
    how to work with Python’s type system, instead of against it (see Chapter 5).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个导致这个神话的原因是 Python 是动态类型的，而不是像 Java 或 C++ 那样的静态类型。有些人认为这使得重构变得更难。但一旦开发者学会如何与
    Python 的类型系统协作，而不是与之对立（见第 5 章），情况就不一定如此。
- en: Python 2 vs. Python 3
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 2 与 Python 3
- en: For many years, there existed two major versions of Python. Starting in 2001,
    *Python 2* was the standard, meaning most books and articles about Python were
    written for this version. The last release was Python 2.7.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Python 存在两个主要版本。从 2001 年开始，*Python 2* 是标准版本，这意味着大多数关于 Python 的书籍和文章都是为这个版本编写的。最后一个版本是
    Python 2.7。
- en: The current version is *Python 3*, known during its development as *Python 3000*
    or *Py3k*. From its release in 2008 until 2019, we were in a sort of limbo between
    the two versions; a lot of existing code and packages were written in Python 2,
    while Python 3 was increasingly recommended for new projects that didn’t require
    legacy support. Many techniques and tools existed for writing code that could
    run in either version, which eased the transition for many existing projects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当前版本是*Python 3*，在开发过程中被称为*Python 3000* 或 *Py3k*。从 2008 年发布到 2019 年，我们处于这两个版本之间的某种“过渡期”；许多现有代码和包是用
    Python 2 编写的，而 Python 3 则越来越被推荐用于不需要遗留支持的新项目。很多技术和工具使得编写能在两个版本中运行的代码成为可能，这为许多现有项目的过渡提供了便利。
- en: In more recent years, especially since the release of Python 3.5, we’ve begun
    moving away from Python 2 altogether. Most major libraries officially supported
    Python 3, and legacy support became less of a priority.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，特别是自 Python 3.5 发布以来，我们已经开始完全脱离 Python 2。大多数主要库已经正式支持 Python 3，遗留支持不再是优先事项。
- en: As of January 1, 2020, Python 2 has been officially retired, and Python 3 is
    the definitive standard. Since Python 4 is still nothing more than a vague wisp
    of a rumor at this point, it’s safe to say that Python 3 will be with us for years
    to come.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2020 年 1 月 1 日，Python 2 已正式退役，而 Python 3 成为唯一的标准。由于 Python 4 目前仍只是一个模糊的传闻，可以肯定地说，Python
    3 会在未来几年继续存在。
- en: Unfortunately, many software development teams have been slow (sometimes unavoidably)
    about porting their code bases from Python 2 to Python 3\. This has left a lot
    of projects in limbo. If you use Python in a professional capacity, there is a
    good chance you’ll have to help transition some code to Python 3\. Python’s standard
    library includes a tool called *2to3*, which helps automate this process. Running
    the code through this tool is a good first step, but you will still need to manually
    update the code to use some of the newer patterns and tools Python 3 has to offer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，许多软件开发团队在将代码库从 Python 2 移植到 Python 3 上进展缓慢（有时是不可避免的）。这导致许多项目处于停滞状态。如果你在专业领域使用
    Python，可能需要帮助将一些代码过渡到 Python 3。Python 的标准库包含一个名为 *2to3* 的工具，可以帮助自动化这一过程。通过这个工具运行代码是一个好的第一步，但你仍然需要手动更新代码，使用
    Python 3 提供的一些更新的编程模式和工具。
- en: Defining “Pythonic” Code
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义“Pythonic”代码
- en: Among Python developers, you’ll hear a lot of talk about *Pythonic* code and
    what it constitutes, precisely. In a general sense, idiomatic code that makes
    good use of the language’s features is considered Pythonic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 开发者中，你会听到很多关于 *Pythonic* 代码的讨论，究竟什么才算是 Pythonic。一般来说，善用语言特性的惯用代码被认为是
    Pythonic 的。
- en: Unfortunately, this is very much open to interpretation. As a result, the topic
    of best practices in Python is a regular source of heated debate in the community.
    Don’t be alarmed by this. By regularly grappling with our own conventions and
    standards, we continually improve them and our own understanding along the way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个问题很大程度上是开放性解释的。因此，关于 Python 最佳实践的话题，在社区中经常成为激烈争论的来源。不要为此感到惊讶。通过不断地反思自己的约定和标准，我们在不断改进它们的同时，也提升了我们自己的理解。
- en: Our tendency to debate best practices in Python is rooted in our philosophy
    of *There’s Only One Way To Do It (TOOWTDI)*, a phrase coined by PythonLabs in
    2000 as a tongue-in-cheek response to the Perl community’s own adage of *There’s
    More Than One Way To Do It (TMTOWTDI)*. Despite the historic rivalry between these
    communities, these philosophies aren’t strictly opposing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们倾向于争论 Python 最佳实践，这与我们 *There’s Only One Way To Do It (TOOWTDI)* 的哲学理念密切相关。这一短语是
    PythonLabs 在 2000 年提出的，用以讽刺性地回应 Perl 社区的 *There’s More Than One Way To Do It (TMTOWTDI)*
    格言。尽管这两个社区之间有历史上的竞争，这些哲学并不完全对立。
- en: Python developers rightly assume there is some single, quantifiably “best” solution
    to any specific problem. Our task is to figure out what that solution is, but
    we also know we will often fall far short of the goal. Through continual discussion,
    debate, and experimentation, we refine our approaches in pursuit of the theoretical
    Best Solution.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python 开发者通常认为，对于任何具体问题，都会有一个量化的“最佳”解决方案。我们的任务就是找出这个解决方案，但我们也知道我们经常会远远未能达到目标。通过不断的讨论、辩论和实验，我们在追求理论上“最佳解决方案”的过程中不断完善我们的方式。
- en: In the same way, the Perl community understands that it is often impossible
    to definitively arrive at that Best Solution, so they emphasize experimentation
    instead of compliance with strict standards, in an effort to discover better and
    better solutions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Perl 社区理解到，往往无法明确得出最佳解决方案，因此他们强调实验而非严格遵守标准，力求发现越来越好的解决方案。
- en: 'In the end, the goal is the same: to ultimately define the best possible solution
    to a problem. Only the emphasis differs.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最终目标是相同的：最终定义出问题的最佳解决方案。只不过侧重点有所不同。
- en: In this book, I’ll focus a lot on the generally accepted Pythonic ways of writing
    code. However, I don’t claim to be the final authority. My colleagues in the Python
    community will always have plenty to add to these discussions. I never fail to
    learn something new from them!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将重点讲解普遍接受的 Pythonic 编码方式。然而，我并不声称自己是最终的权威。Python 社区的同事们总是会在这些讨论中有所补充。我总是从他们那里学到新的东西！
- en: The Zen of Python
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的禅意
- en: In 1999, a discussion started on the official Python mailing list about the
    need to write down some sort of formal guiding principles for the language. Tim
    Peters, a prominent member of the community, jokingly laid out a poetic summary
    of 19 principles to serve as an outline, leaving the 20th spot open for Guido
    van Rossum to complete (which he never did).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 1999年，Python官方邮件列表上展开了一场关于为语言写下某种正式指导原则的讨论。Tim Peters，作为社区中的一个杰出成员，开玩笑地列出了19条原则的诗意总结作为大纲，留出了第20条空位，等待Guido
    van Rossum来完成（但他从未完成）。
- en: Other community members quickly seized on this summary as a fantastic overview
    of Python’s philosophy, ultimately adopting it wholesale as *The Zen of Python*.
    The entire text is published by Python as PEP 20.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 其他社区成员很快就抓住了这个总结，认为它是Python哲学的绝佳概述，并最终将其完全采纳为*Python之禅*。整个文本由Python发布为PEP 20。
- en: Beautiful is better than ugly.
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 优美胜于丑陋。
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explicit is better than implicit.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 显式优于隐式。
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simple is better than complex.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 简单胜于复杂。
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Complex is better than complicated.
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 复杂胜于复杂化。
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Flat is better than nested.
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扁平化比嵌套更好。
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sparse is better than dense.
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 稀疏胜于密集。
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Readability counts.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可读性很重要。
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Special cases aren’t special enough to break the rules.
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 特殊情况不足以打破规则。
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although practicality beats purity.
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管实际性胜于纯粹性。
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Errors should never pass silently.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 错误永远不应悄悄地通过。
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unless explicitly silenced.
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 除非明确地被静默。
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the face of ambiguity, refuse the temptation to guess.
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 面对歧义时，拒绝猜测的诱惑。
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There should be one—and preferably only one—obvious way to do it.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 应该有一种——并且最好只有一种——显而易见的做法。
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although that way may not be obvious at first unless you’re Dutch.
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管那种方式一开始可能不太明显，除非你是荷兰人。
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now is better than never.
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在比永远更好。
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although never is often better than *right* now.
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管永远往往比*现在*更好。
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the implementation is hard to explain, it’s a bad idea.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果实现难以解释，那就是一个坏主意。
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the implementation is easy to explain, it may be a good idea.
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果实现容易解释，那可能是一个不错的主意。
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Namespaces are one honking great idea—let’s do more of those!
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 命名空间是一个极好的想法——让我们做更多这样的事情吧！
- en: This, too, is open to interpretation, and some argue that Tim Peters was kidding
    when he wrote The Zen of Python. However, if there’s one thing I’ve learned about
    Python developers, it’s that the line between “kidding” and “serious” is fine
    as spider silk.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点也有待解释，有人认为Tim Peters在写《Python之禅》时是在开玩笑。然而，如果我从Python开发者身上学到一件事，那就是“开玩笑”和“认真”之间的界限像蜘蛛丝一样细。
- en: In any case, The Zen of Python is a great place to start when talking about
    best practices in Python. Many developers, including myself, often refer back
    to it. I’ll refer to it frequently throughout this book.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，《Python之禅》是讨论Python最佳实践时的一个绝佳起点。包括我自己在内，许多开发者经常参考它。我将在本书中频繁提及它。
- en: Documentation, PEPs, and You
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档、PEP和你
- en: '*Dead Simple Python* is intended as a beginning, not an ending, to your learning
    journey. Once you are well acquainted with the Python language, you can turn to
    the language’s extensive official documentation to learn more about any particular
    features or tools. These docs are found online at [https://docs.python.org/](https://docs.python.org/).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单至极的Python*旨在作为你学习旅程的起点，而非终点。一旦你对Python语言有了充分的了解，你可以转向语言的官方文档，进一步了解任何特定的特性或工具。这些文档可以在线访问：[https://docs.python.org/](https://docs.python.org/)。'
- en: Any new feature in Python begins its life as a *Python Enhancement Proposal*
    (PEP). Each is assigned a unique number and published to the official PEP index
    at [https://python.org/dev/peps/](https://python.org/dev/peps/). Once proposed,
    a PEP will be considered, discussed, and ultimately accepted or rejected.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的任何新特性都始于*Python增强提案*（PEP）。每个PEP都被分配一个唯一编号，并发布到官方PEP索引：[https://python.org/dev/peps/](https://python.org/dev/peps/)。一旦提议，PEP将会被考虑、讨论，并最终被接受或拒绝。
- en: Accepted PEPs are effectively extensions of the documentation, as they are the
    most cohesive and authoritative descriptions of the feature(s) they define. Additionally,
    there are several Meta-PEPs and Informational PEPs that provide the backbone for
    the Python community and language.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 被接受的PEP实际上是文档的扩展，因为它们是最具凝聚力和权威性的特性描述。此外，还有一些Meta-PEP和Informational PEP，它们为Python社区和语言提供了骨干支持。
- en: As such, the official documentation and PEP index should be the first place
    you go if you have any questions about Python. I’ll refer to these frequently
    throughout this book.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，官方文档和PEP索引应该是你有任何Python相关问题时的首选查询地点。我将在本书中频繁参考这些资源。
- en: Who Calls the Shots?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁来做决定？
- en: To understand how and why the language evolves, it is important to know who’s
    in charge. When a PEP is proposed, who gets to decide if it’s accepted or rejected?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解语言是如何以及为什么发展的，了解谁在掌管至关重要。当一个 PEP 被提议时，谁有权决定是否接受或拒绝它？
- en: Python is an open source project officially owned by the nonprofit Python Software
    Foundation. Unlike many other popular languages, no formal associations exist
    between Python and any for-profit organization.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一个开源项目，正式归属于非营利的 Python 软件基金会。与许多其他流行的语言不同，Python 与任何盈利性组织之间不存在正式的关联。
- en: As an open source project, Python is supported by an active and vibrant community.
    At its heart is the core team, the trusted volunteers who maintain the language
    and keep the community running smoothly.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个开源项目，Python 得到了一个活跃且充满活力的社区的支持。其核心是核心团队，这些受信任的志愿者负责维护语言并保持社区的顺畅运作。
- en: Language creator Guido van Rossum served as the Benevolent Dictator for Life
    (BDFL), making the final decisions on all PEPs and overseeing ongoing development
    of the language. In 2018, he made the decision to step down from the role.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 语言创始人 Guido van Rossum 曾担任终身仁慈独裁者（BDFL），负责对所有 PEP 做出最终决定，并监督语言的持续发展。在 2018 年，他决定辞去这一职务。
- en: A few months after his resignation, PEP 13 was created to establish a new system
    of governance. Now the language is governed by a five-person steering committee,
    elected by the core team. Every time a new release of the language comes out,
    a new steering committee is elected.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在他辞职几个月后，创建了 PEP 13 来建立新的治理体系。现在，语言由一个五人组成的指导委员会管理，委员会成员由核心团队选举产生。每次语言发布新版本时，都会选举一个新的指导委员会。
- en: The Python Community
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 社区
- en: The Python community is a vast and diverse group of individuals from all over
    the world, united by their passion for this unique language. Ever since I stumbled
    upon the community many years ago as an utter novice, I have gained immeasurable
    help, guidance, and inspiration from it and its people. I’ve been privileged to
    offer the same to others in return. This book would not have ever happened without
    the continual feedback of my Python friends!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Python 社区是一个庞大而多样化的群体，成员来自世界各地，大家因对这一独特语言的热情而团结在一起。多年前，我作为一个初学者偶然发现了这个社区，得到了它及其成员无价的帮助、指导和启发。很荣幸，我也能将这些回馈给他人。如果没有我
    Python 朋友们持续的反馈，这本书根本不会诞生！
- en: 'The Python community is moderated by the core team and governed by the Python
    Code of Conduct. In short, it emphasizes open, considerate, and respectful behavior,
    summarizing itself as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Python 社区由核心团队进行管理，并遵循 Python 行为准则。简而言之，它强调开放、体贴和尊重的行为，并总结如下：
- en: Overall, we’re good to each other. We contribute to this community, not because
    we have to, but because we want to. If we remember that, these guidelines will
    come naturally.
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总的来说，我们彼此友好。我们参与这个社区，并非因为必须，而是因为我们愿意。如果我们记住这一点，这些准则将自然而然地遵循。
- en: I strongly encourage any developer who uses Python to plug into this vibrant
    community. One of the best ways to participate is through the Libera.Chat IRC
    `#python` chatroom. You can find guides to getting onto IRC at [https://python.org/community/](https://python.org/community/).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈鼓励任何使用 Python 的开发者参与这个充满活力的社区。参与的最佳方式之一是通过 Libera.Chat IRC `#python` 聊天室。你可以在
    [https://python.org/community/](https://python.org/community/) 查找如何加入 IRC 的指南。
- en: If you have any questions about Python, including while you read through this
    book, I recommend asking for help in the IRC channel. Chances are, you’ll find
    me and most of my technical editors there.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Python 有任何问题，包括在阅读本书时，建议你在 IRC 频道中寻求帮助。很可能，你会在那儿找到我和我的大多数技术编辑。
- en: In Chapter 21, I’ll discuss the many facets of the Python community.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 21 章，我将讨论 Python 社区的多个方面。
- en: The Pursuit of the One Obvious Way
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 追求唯一的明显方法
- en: The Python mantra “There’s Only One Way to Do It” can be quite confusing at
    first. There are many possible ways to solve any one problem. Are Pythonistas
    just too enamored with their own ideas?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的口号 “There’s Only One Way to Do It”（只有一种方式可以做到）刚开始可能让人很困惑。解决任何问题有许多可能的方法。Pythonista
    是否只是太过沉迷于自己的想法？
- en: Thankfully, no. This mantra means something much more encouraging, and it’s
    something every Python developer should understand.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，不是的。这个口号意味着一些更具鼓励性的内容，每个 Python 开发者都应该理解这一点。
- en: 'Some insight comes from The Zen of Python, which includes this rather cryptic
    quip:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一些见解来自《Python 之禅》，其中包括一句相当隐晦的警句：
- en: There should be one—and preferably only one—obvious way to do it.
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 应该有一个——最好是唯一一个——明显的方式来做这件事。
- en: ''
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although that way may not be obvious at first unless you’re Dutch.
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管这种方式一开始可能不太明显，除非你是荷兰人。
- en: Tim Peters was, of course, referring to language creator Guido van Rossum, a
    Dutch national. As the creator of the language, Guido could usually cut right
    to the “most obvious way” of solving problems in Python, especially in the early
    days of the language.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，蒂姆·彼得斯（Tim Peters）指的是语言创始人 Guido van Rossum，他是荷兰人。作为语言的创始人，Guido 通常能够直接找到解决问题的“最明显方法”，特别是在语言初期阶段。
- en: This *obvious way* is Python’s term for “the best solution”—a marriage of good
    practice, clean style, and reasonable efficiency, resulting in elegant code that
    is comprehensible to even the greenest novice.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 *最明显的方法* 是 Python 用来表示“最佳解决方案”的术语——它融合了良好的实践、清晰的风格和合理的效率，最终产生出优雅的代码，即使是最初学的新人也能理解。
- en: 'The details of the problem being solved will usually inform this “obvious way”:
    one situation may call for a loop, another for recursion, and yet another for
    a list comprehension. Contrary to the usual implications of the word *obvious*,
    the solution is often anything but simple to work out. The best solution is only
    obvious *once you know it*; arriving at it is where things get tricky. Most of
    us aren’t Guido.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的细节通常会指导这种“明显方法”：一种情况可能需要循环，另一种则需要递归，还有一种可能需要列表推导式。与 *明显* 一词通常的含义相反，解决方案往往并不是那么容易找出来。最好的解决方案只有在
    *你知道它* 的时候才显得显而易见；而到达它的过程才是问题所在。大多数人都不是 Guido。
- en: However, the *pursuit* of the “one obvious way” is a defining facet of the Python
    community, and it has had a profound impact on *Dead Simple Python*. A lot of
    the insights in this book were born out of sometimes intense debate between myself
    and my fellow Pythonistas. For this reason, I hand-selected my panel of technical
    editors from those colleagues who are commonly in opposition to me, and often
    each other, on pedantic technical points.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，*追求*“唯一的明显方式”是 Python 社区的一个定义性特征，它对 *简洁的 Python* 产生了深远的影响。本书中的许多见解来源于我与同事
    Python 爱好者之间有时激烈的辩论。正因如此，我从那些常与我、甚至彼此意见相左的同事中精心挑选了我的技术编辑小组，尤其是他们在一些挑剔的技术问题上。
- en: Anything ultimately adopted as the “right way” to solve a problem is usually
    accepted as such because of its technical merit, rather than because of some like-minded
    bias among Python developers, who are among the most exacting folks I’ve had the
    privilege of working with. This approach to logic overflows into every other conversation
    we have (which leads to some rather amazing and enlightening academic debates).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最终被采纳为解决问题的“正确方法”通常是因为其技术价值，而非出于 Python 开发者之间某种志同道合的偏见。Python 开发者是我有幸合作过的最为严格的群体之一。这个逻辑上的方法扩展到了我们所有的对话中（这导致了一些相当惊人且富有启发性的学术辩论）。
- en: New situations present themselves regularly. There will never come a point in
    any Python developer’s career when coding becomes truly “easy.” Situations will
    arise in every project that demand careful consideration, and often, debate. Developers
    must attempt to solve problems in the way that seems most obvious to them, then
    submit the solution to the critique of peers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 新的情况经常出现。在任何 Python 开发者的职业生涯中，都不会有某一时刻可以真正说编码变得“容易”了。每个项目中都会出现需要仔细考虑的情况，通常还需要辩论。开发者必须尝试以他们认为最明显的方式解决问题，然后将解决方案提交给同事们进行批评。
- en: The approaches in this book are, in many cases, the most obvious according to
    my view. Most have been seconded by my colleagues, yet I dare not assert that
    I am altogether “Dutch” in the Python sense. If you find yourself debating techniques
    in the Python community, please do not wave this book in anyone’s face as evidence
    that your solution is best! Skill in finding an obvious solution is not something
    that can be taught; rather it is only learned through practice.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的方法在许多情况下是按照我的观点认为最明显的。大多数方法都得到了同事们的支持，但我不敢断言自己完全是“荷兰式”的 Python 开发者。如果你在
    Python 社区中辩论技术，请不要把这本书拿给别人看，作为证据证明你的方案是最好的！找到明显解决方案的技能不是可以通过教授获得的；它只能通过实践来学习。
- en: Wrapping Up
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Despite the many myths that have been tossed around over the years, Python is
    a versatile and technically sound language, capable of handling just about any
    problem you can throw at it. It’s a solid choice, whether you are writing automation,
    crunching massive datasets, building native user applications, implementing machine
    learning, or crafting web applications and APIs. Most importantly, Python is backed
    by a vibrant, diverse, and helpful community.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管多年来有许多关于它的误解，Python是一种多功能且技术上扎实的编程语言，能够处理几乎任何你能抛给它的问题。无论是编写自动化脚本、处理海量数据集、构建本地用户应用、实现机器学习，还是开发Web应用和API，它都是一个可靠的选择。最重要的是，Python得到了一个充满活力、多样化且乐于助人的社区的支持。
- en: The key to success, then, is writing Python code that makes the most of the
    strengths and features of the language. The goal is not simply to write code that
    works, but to write code that both looks and behaves elegantly. The rest of this
    book will teach you how to do exactly that.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的关键在于编写充分发挥语言优点和特性的Python代码。目标不仅仅是编写能工作的代码，而是编写既美观又高效的代码。本书的其余部分将教你如何做到这一点。
