["```py\n$ python3 -m pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose\n```", "```py\n➊ from random import randint\n   from collections import Counter\n   import numpy as np\n   import matplotlib.pyplot as plt\n\n➋ NUM_EQUIV_VOLUMES = 1000  # number of locations in which to place civilizations\n   MAX_CIVS = 5000  # maximum number of advanced civilizations\n   TRIALS = 1000  # number of times to model a given number of civilizations\n   CIV_STEP_SIZE = 100  # civilizations count step size\n\n➌ x = []  # x values for polynomial fit\n   y = []  # y values for polynomial fit\n\n➍ for num_civs in range(2, MAX_CIVS + 2, CIV_STEP_SIZE):\n       civs_per_vol = num_civs / NUM_EQUIV_VOLUMES\n       num_single_civs = 0\n    ➎ for trial in range(TRIALS):\n           locations = []  # equivalent volumes containing a civilization\n        ➏ while len(locations) < num_civs:\n               location = randint(1, NUM_EQUIV_VOLUMES)\n               locations.append(location)\n        ➐ overlap_count = Counter(locations)\n           overlap_rollup = Counter(overlap_count.values())\n           num_single_civs += overlap_rollup[1]\n\n    ➑ prob = 1 - (num_single_civs / (num_civs * TRIALS))\n\n       # print ratio of civs-per-volume vs. probability of 2+ civs per location\n    ➒ print(\"{:.4f}  {:.4f}\".format(civs_per_vol, prob))\n    ➓ x.append(civs_per_vol)\n       y.append(prob)\n```", "```py\n>>> from collections import Counter\n>>> alist = [124, 452, 838, 124, 301]\n>>> count = Counter(alist)\n>>> count\nCounter({124: 2, 452: 1, 301: 1, 838: 1})\n>>> value_count = Counter(count.values())\n>>> value_count\nCounter({1: 3, 2: 1})\n>>> value_count[1]\n3\n```", "```py\n0.0020  0.0020\n0.1020  0.0970\n0.2020  0.1832\n0.3020  0.2607\n0.4020  0.3305\n0.5020  0.3951\n0.6020  0.4516\n0.7020  0.5041\n```", "```py\n➊ coefficients = np.polyfit(x, y, 4)  # 4th order polynomial fit\n➋ p = np.poly1d(coefficients)\n   print(\"\\n{}\".format(p))\n➌ xp = np.linspace(0, 5)\n➍ _ = plt.plot(x, y, '.', xp, p(xp), '-')\n➎ plt.ylim(-0.5, 1.5)\n➏ plt.show()\n```", "```py\n[-0.00475677  0.066811   -0.3605069   0.92146096  0.0082604 ]\n```", "```py\n           4           3          2\n-0.004757 x + 0.06681 x - 0.3605 x + 0.9215 x + 0.00826\n```", "```py\n>>> import tkinter\n>>>\n```", "```py\n➊ import tkinter as tk\n   from random import randint, uniform, random\n   import math\n\n   #=============================================================================\n➋ # MAIN INPUT\n\n   # scale (radio bubble diameter) in light-years:\n➌ SCALE = 225  # enter 225 to see Earth's radio bubble\n\n   # number of advanced civilizations from the Drake equation:\n➍ NUM_CIVS = 15600000\n   #=============================================================================\n```", "```py\n   # set up display canvas\n➊ root = tk.Tk()\n   root.title(\"Milky Way galaxy\")\n➋ c = tk.Canvas(root, width=1000, height=800, bg='black')\n➌ c.grid()\n➍ c.configure(scrollregion=(-500, -400, 500, 400))\n\n   # actual Milky Way dimensions (light-years)\n➎ DISC_RADIUS = 50000\n   DISC_HEIGHT = 1000\n➏ DISC_VOL = math.pi * DISC_RADIUS**2 * DISC_HEIGHT\n```", "```py\n➊ def scale_galaxy():\n       \"\"\"Scale galaxy dimensions based on radio bubble size (scale).\"\"\"\n       disc_radius_scaled = round(DISC_RADIUS / SCALE)\n    ➋ bubble_vol = 4/3 * math.pi * (SCALE / 2)**3\n    ➌ disc_vol_scaled = DISC_VOL/bubble_vol\n    ➍ return disc_radius_scaled, disc_vol_scaled\n\n➎ def detect_prob(disc_vol_scaled):\n       \"\"\"Calculate probability of galactic civilizations detecting each other.\"\"\"\n    ➏ ratio = NUM_CIVS / disc_vol_scaled  # ratio of civs to scaled galaxy volume\n    ➐ if ratio < 0.002:  # set very low ratios to probability of 0\n           detection_prob = 0\n       elif ratio >= 5:  # set high ratios to probability of 1\n           detection_prob = 1\n    ➑ else:\n           detection_prob = -0.004757 * ratio**4 + 0.06681 * ratio**3 - 0.3605 * \\\n                            ratio**2 + 0.9215 * ratio + 0.00826\n    ➒ return round(detection_prob, 3)\n```", "```py\n➊ def random_polar_coordinates(disc_radius_scaled):\n       \"\"\"Generate uniform random (x, y) point within a disc for 2D display.\"\"\"\n    ➋ r = random()\n    ➌ theta = uniform(0, 2 * math.pi)\n    ➍ x = round(math.sqrt(r) * math.cos(theta) * disc_radius_scaled)\n       y = round(math.sqrt(r) * math.sin(theta) * disc_radius_scaled)\n    ➎ return x, y\n```", "```py\n➊ def spirals(b, r, rot_fac, fuz_fac, arm):\n       \"\"\"Build spiral arms for tkinter display using logarithmic spiral formula.\n\n       b = arbitrary constant in logarithmic spiral equation\n       r = scaled galactic disc radius\n       rot_fac = rotation factor\n       fuz_fac = random shift in star position in arm, applied to 'fuzz' variable\n       arm = spiral arm (0 = main arm, 1 = trailing stars)\n       \"\"\"\n    ➋ spiral_stars = []\n    ➌ fuzz = int(0.030 * abs(r)) # randomly shift star locations\n       theta_max_degrees = 520\n    ➍ for i in range(theta_max_degrees):  # range(0, 600, 2) for no black hole\n           theta = math.radians(i)\n           x = r * math.exp(b * theta) * math.cos(theta + math.pi * rot_fac)\\\n               + randint(-fuzz, fuzz) * fuz_fac\n           y = r * math.exp(b * theta) * math.sin(theta + math.pi * rot_fac)\\\n               + randint(-fuzz, fuzz) * fuz_fac\n           spiral_stars.append((x, y))\n    ➎ for x, y in spiral_stars:\n        ➏ if arm == 0 and int(x % 2) == 0:\n               c.create_oval(x-2, y-2, x+2, y+2, fill='white', outline='')\n           elif arm == 0 and int(x % 2) != 0:\n               c.create_oval(x-1, y-1, x+1, y+1, fill='white', outline='')\n        ➐ elif arm == 1:\n               c.create_oval(x, y, x, y, fill='white', outline='')\n```", "```py\n➊ def star_haze(disc_radius_scaled, density):\n       \"\"\"Randomly distribute faint tkinter stars in galactic disc.\n\n       disc_radius_scaled = galactic disc radius scaled to radio bubble diameter\n       density = multiplier to vary number of stars posted\n       \"\"\"\n    ➋ for i in range(0, disc_radius_scaled * density):\n        ➌ x, y = random_polar_coordinates(disc_radius_scaled)\n        ➍ c.create_text(x, y, fill='white', font=('Helvetica', '7'), text='.')\n```", "```py\ndef main():\n       \"\"\"Calculate detection probability & post galaxy display & statistics.\"\"\"\n    ➊ disc_radius_scaled, disc_vol_scaled = scale_galaxy()\n       detection_prob = detect_prob(disc_vol_scaled)\n\n       # build 4 main spiral arms & 4 trailing arms\n    ➋ spirals(b=-0.3, r=disc_radius_scaled, rot_fac=2, fuz_fac=1.5, arm=0)\n       spirals(b=-0.3, r=disc_radius_scaled, rot_fac=1.91, fuz_fac=1.5, arm=1)\n       spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=2, fuz_fac=1.5, arm=0)\n       spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=-2.09, fuz_fac=1.5, arm=1)\n       spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=0.5, fuz_fac=1.5, arm=0)\n       spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=0.4, fuz_fac=1.5, arm=1)\n       spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=-0.5, fuz_fac=1.5, arm=0)\n       spirals(b=-0.3, r=-disc_radius_scaled, rot_fac=-0.6, fuz_fac=1.5, arm=1)\n       star_haze(disc_radius_scaled, density=8)\n\n       # display legend\n    ➌ c.create_text(-455, -360, fill='white', anchor='w',\n                     text='One Pixel = {} LY'.format(SCALE))\n       c.create_text(-455, -330, fill='white', anchor='w',\n                     text='Radio Bubble Diameter = {} LY'.format(SCALE))\n       c.create_text(-455, -300, fill='white', anchor='w',\n                     text='Probability of detection for {:,} civilizations = {}'.\n                     format(NUM_CIVS, detection_prob))\n\n       # post Earth's 225 LY diameter bubble and annotate\n    ➍ if SCALE == 225:\n        ➎ c.create_rectangle(115, 75, 116, 76, fill='red', outline='')\n           c.create_text(118, 72, fill='red', anchor='w',\n                         text=\"<---------- Earth's Radio Bubble\")\n\n       # run tkinter loop\n    ➏ root.mainloop()\n➐ if __name__ == '__main__':\n       main()\n```", "```py\nc.create_line(115, 75, 116, 75, fill='red')\n```"]