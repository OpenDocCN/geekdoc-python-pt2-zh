["```py\nLoad a text file and strip it of whitespace\nGet user input on how many letters after punctuation to look ahead and examine\nLoop through number of letters from 1 to this lookahead value\n    Start an empty string to hold the translation\n    Start a counter\n    Start a ➊first-found marker and set to False\n    Loop through characters in the text\n        If character is punctuation\n            Counter = 0\n            First-found = True\n        Otherwise, if ➋first-found is True\n            Counter + 1\n        If counter = lookahead value\n            Add character to translation string\n    Display translation for this lookahead value\n```", "```py\n➊ import sys\n   import string\n\n➋ def load_text(file):\n       \"\"\"Load a text file as a string.\"\"\"\n    ➌ with open(file) as f:\n        ➍ return f.read().strip()\n```", "```py\ndef solve_null_cipher(message, lookahead):\n    \"\"\"Solve a null cipher based on number of letters after punctuation mark.\n\n    message = null cipher text as string stripped of whitespace\n    lookahead = endpoint of range of letters after punctuation mark to examine\n    \"\"\"\n ➊ for i in range(1, lookahead + 1):\n        ➋ plaintext = ''\n           count = 0\n           found_first = False\n        ➌ for char in message:\n            ➍ if char in string.punctuation:\n                   count = 0\n                   found_first = True\n            ➎ elif found_first is True:\n                   count += 1\n            ➏ if count == i:\n                   plaintext += char\n        ➐ print(\"Using offset of {} after punctuation = {}\".\n                 format(i, plaintext))\n           print()\n```", "```py\ndef main():\n    \"\"\"Load text, solve null cipher.\"\"\"\n    # load & process message:\n ➊ filename = input(\"\\nEnter full filename for message to translate: \")\n ➋ try:\n        loaded_message = load_text(filename)\n    except IOError as e:\n        print(\"{}. Terminating program.\".format(e), file=sys.stderr)\n        sys.exit(1)\n ➌ print(\"\\nORIGINAL MESSAGE =\")\n    print(\"{}\".format(loaded_message), \"\\n\")\n    print(\"\\nList of punctuation marks to check = {}\".\n          format(string.punctuation), \"\\n\")   \n\n    # remove whitespace:\n ➍ message = ''.join(loaded_message.split())\n\n    # get range of possible cipher keys from user:\n ➎ while True:\n     ➏ lookahead = input(\"\\nNumber of letters to check after \" \\\n                          \"punctuation mark: \")\n     ➐ if lookahead.isdigit():\n            lookahead = int(lookahead)\n            break\n        else:\n         ➑ print(\"Please input a number.\", file=sys.stderr)\n    print()\n\n    # run function to decode cipher\n ➒ solve_null_cipher(message, lookahead)\n```", "```py\nif __name__ == '__main__':\n    main()\n```", "```py\nEnter full filename for message to translate: trevanion.txt\n\nORIGINAL MESSAGE =\nWorthie Sir John: Hope, that is the beste comfort of the afflicted, cannot\nmuch, I fear me, help you now. That I would saye to you, is this only: if ever\nI may be able to requite that I do owe you, stand not upon asking me. 'Tis not\nmuch I can do: but what I can do, bee you verie sure I wille. I knowe that,\nif deathe comes, if ordinary men fear it, it frights not you, accounting for\nit for a high honour, to have such a rewarde of your loyalty. Pray yet that\nyou may be spared this soe bitter, cup. I fear not that you will grudge any\nsufferings; onlie if bie submission you can turn them away, 'tis the part of a\nwise man. Tell me, an if you can, to do for you anythinge that you wolde have\ndone. The general goes back on Wednesday. Restinge your servant to command.\nR.T.\n\nList of punctuation marks to check = !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n\nNumber of letters to check after punctuation mark: 4\n\nUsing offset of 1 after punctuation = HtcIhTiisTbbIiiiatPcIotTatTRRT\n\nUsing offset of 2 after punctuation = ohafehsftiuekfftcorufnienohe\n\nUsing offset of 3 after punctuation = panelateastendofchapelslides\n\nUsing offset of 4 after punctuation = etnapthvnnwyoerroayaitlfogt\n```", "```py\n➊ from random import randint\n   import string\n   import load_dictionary\n\n   # write a short message that doesn't contain punctuation or numbers!\n   input_message = \"Panel at east end of chapel slides\"\n\n   message = ''\n   for char in input_message:\n    ➋ if char in string.ascii_letters:\n           message += char\n   print(message, \"\\n\")\n➌ message = \"\".join(message.split())\n\n➍ # open dictionary file\n   word_list = load_dictionary.load('2of4brif.txt')\n\n   # build vocabulary word list with hidden message\n➎ vocab_list = []\n➏ for letter in message:\n       size = randint(6, 10)\n    ➐ for word in word_list:\n           if len(word) == size and word[2].lower() == letter.lower()\\\n           and word not in vocab_list:\n               vocab_list.append(word)\n               break\n\n➑ if len(vocab_list) < len(message):\n       print(\"Word List is too small. Try larger dictionary or shorter message!\")\n   else:\n       print(\"Vocabulary words for Unit 1: \\n\", *vocab_list, sep=\"\\n\")\n```", "```py\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n```", "```py\nPanelateastendofchapelslides\n\nVocabulary words for Unit 1:\n\nalphabets\nabandoning\nannals\naberration\nablaze\nabandoned\nacting\nabetted\nabasement\nabseil\nactivated\nadequately\nabnormal\nabdomen\nabolish\naffecting\nacceding\nabhors\nabalone\nampersands\nacetylene\nallegation\nabsconds\naileron\nacidifying\nabdicating\nadepts\nabsent\n```", "```py\nFirst Second Third STUART Fourth Fifth JACOB Sixth Seventh Eighth\n```"]