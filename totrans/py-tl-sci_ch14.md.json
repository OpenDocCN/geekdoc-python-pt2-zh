["```py\n# Step 1: Crop image to 50x50 pixels.\n```", "```py\n# Added this to fix Steve's stupid mistake.\n```", "```py\nforce = mass * acceleration  # multiply mass variable by acceleration variable.\n```", "```py\n# As Step 1, enter the mass of the object.\nmass = 549\n# As Step 2, enter the acceleration of the object.\nacceleration = 42\n# As Step 3, calculate Force.\nforce = mass * acceleration\n```", "```py\nacceleration = 42  # Intermediate for now.\n```", "```py\n# Use Cartesian product to generate permutations with repetition.\nfor perm in product([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], repeat=len(combo)):\n```", "```py\nif velocity >= C:\n    # Don't let the ship reach light speed.\n    velocity = C - 0.000001\n```", "```py\n# This is a really long-winded comment that probably should be \n# shortened or left off or broken up and inserted before various\n# bits of code or in a docstring somewhere.\n```", "```py\n\"\"\"\nThis is a really long-winded comment that probably should be \nshortened or left off or broken up and inserted before various\nbits of code or in a docstring somewhere.\n\"\"\"\n```", "```py\n\"\"\"This is a really long-winded comment that probably should be \nshortened or left off or broken up and inserted before various\nbits of code or in a docstring somewhere.\"\"\"\n```", "```py\nC = 299_792_458  # Speed of light in a vacuum in meters per second.\n```", "```py\nscreen.setup(width=1.0, height=1.0)  # For fullscreen view.\n```", "```py\napogee = 25_500  # Highest point in the orbit.\n```", "```py\nurl = https://www.python.org/  # Cut and paste from website address.\n```", "```py\ntrajectory = rocket(dx=25, dy=-100)  # Negative y moves down the screen.\n```", "```py\n# print(key_used)\n# print(ciphertext)\n# print(plaintext)\n# print('Program complete.')\n```", "```py\n\"\"\"\nA one-line summary.\n\nMore info such as:\n function summaries\n method summaries\n attribute summaries\n exceptions raised\n and so on\n\"\"\"\n```", "```py\nIn [1]: import pickle\n\nIn [2]: print(pickle.__doc__)\n```", "```py\nCreate portable serialized representations of Python objects.\n\nSee module copyreg for a mechanism for registering custom picklers.\nSee module pickletools source for extensive comments.\n\nClasses:\n\n    Pickler\n    Unpickler\n\nFunctions:\n\n    dump(object, file)\n    dumps(object) -> string\n    load(file) -> object\n    loads(string) -> object\n\nMisc variables:\n\n    __version__\n    format_version\n    compatible_formats\n```", "```py\n\"\"\"Accept number as n and return cube of n.\"\"\"\n```", "```py\n\"\"\"Create portable serialized representations of Python objects.\n\nSee module copyreg for a mechanism for registering custom picklers.\nSee module pickletools source for extensive comments.\n\nClasses:\n\n    Pickler\n    Unpickler\n\nFunctions:\n\n    dump(object, file)\n    dumps(object) -> string\n    load(file) -> object\n    loads(string) -> object\n\nMisc variables:\n\n    __version__\n    format_version\n    compatible_formats\n\"\"\"\n```", "```py\n\"\"\"\nFunctions to solve the quadratic equation and get the volume of a sphere.\n\nFunctions:\nquad(a, b, c) -> soln1, soln2\nsphere_vol(radius) -> volume rounded to 2 decimal places\n\"\"\"\nimport math\n\ndef quad(a, b, c):\n    x1 = (-b - (b**2 - 4 * a * c)**0.5) / (2 * a)\n    x2 = (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n    return x1, x2\n\ndef sphere_vol(r):\n    vol = (4 / 3) * math.pi * r**3\n    return round(vol, 2)\n```", "```py\nIn [3]: import my_math\n\nIn [4]: print(my_math.__doc__)\n\nFunctions to solve the quadratic equation and get the volume of a sphere.\n\nFunctions:\nquad(a, b, c) -> soln1, soln2\nsphere_vol(radius) -> volume rounded to 2 decimal places\n```", "```py\nIn [5]: help(my_math)\nHelp on module my_math:\n\nNAME\nmy_math - Functions to solve the quadratic equation and get the volume of a sphere.\n\nDESCRIPTION\n    Functions:\n    quad(a, b, c) -> soln1, soln2\n    sphere_vol(radius) -> volume rounded to 2 decimal places FUNCTIONS\n    quad(a, b, c)\n    sphere_vol(r)\n\nFILE\n    C:\\Users\\hanna\\spyder_proj_w_env\\code\\my_math.py\n```", "```py\nclass Starship:\n    \"\"\"\n    A class to represent a starship.\n\n    Attributes\n    ----------\n    name : str\n        name of the ship\n    torpedoes : int\n        number of photon torpedoes\n    phasers: int\n        number of phaser banks\n    crew: int\n        number of crew members\n\n    Methods\n    -------\n    info():\n        Print the ship's attributes.\n\n    fire_all():\n        Return the sum of the weapon attributes as an integer.\n    \"\"\"\n```", "```py\ndef warning():\n    \"\"\"Print structural integrity warning message.\"\"\"\n    print(\"She canna take it Capt'n! She's gonna blow!\")\n```", "```py\ndef is_anagram(word1, word2):\n    \"\"\"\n    Check if two strings are anagrams and return a Boolean.\n\n    Arguments:\n        word1: a string\n        word2: a string\n\n    Returns:\n        Boolean\n    \"\"\"\n    return sorted(word1.lower()) == sorted(word2.lower())\n\nprint(is_anagram('forest', 'softer'))\n```", "```py\nIn [6]: runfile('C:/Users/hanna/oop/junk.py', wdir='C:/Users/hanna/oop')\nTrue\n```", "```py\ndef calc_taxes(taxable_income, tax_rate=0.24):\n    \"\"\" Calculate Federal taxes based on taxable income and rate.\n\n    Args:\n        taxable_income: int\n                           Income after qualified deductions.\n        tax_rate: float \n                    Federal tax rate as decimal value. \n                    Defaults to 24% tax bracket.\n\n    Returns: int\n               Federal taxes owed. \n\"\"\"\n```", "```py\ndef warp(factor):\n    \"\"\"Return input warp factor adjusted to allowable values.\n\n    Args:\n        factor: int\n                  warp factor\n\n    Returns: int\n               warp factor adjusted to operating limits\n\n    Raise: ValueError\n            factor value must be float or integer\n\n >>> warp(5)\n 5\n >>> warp(3.5)\n 3\n >>> warp(12)\n 10\n >>> warp(-4) \n 0\n >>> warp(0)\n 0\n >>> warp('ten')\n Traceback (most recent call last):\n â€¦\n ValueError: factor must be a number \"\"\"  \n    if isinstance(factor, (int, float)):\n        speed = int(factor)\n        if speed < 0:\n            speed = 0\n        elif speed > 10:\n            speed = 10   \n        return speed\n    else:\n        raise ValueError(\"factor must be a number\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\nIn [7]: import doctest\nIn [8]: import set_warp\n\nIn [9]: doctest.testmod(set_warp)\nOut[9]: TestResults(failed=0, attempted=6)\n```", "```py\nIn [10]: doctest.testmod(set_warp)\n**********************************************************************\nFile \"C:\\Users/hanna/file_play\\set_warp.py\", line 21, in set_warp.warp\nFailed example:\nwarp(-4) \nExpected:\n4\nGot:\n0\n**********************************************************************\n1 items had failures:\n1 of 6 in set_warp.warp\n***Test Failed*** 1 failures.\nOut[10]: TestResults(failed=1, attempted=6)\n```", "```py\nIn [11]: doctest.testmod(set_warp, verbose=True) \nTrying:\n    warp(5)\nExpecting:\n    5\nok\nTrying:\n    warp(3.5)\nExpecting:\n    3\nok\nTrying:\n    warp(12)\nExpecting:\n    10\nok\nTrying:\n    warp(-4) \nExpecting:\n    0\nok\nTrying:\n    warp(0)\nExpecting:\n    0\nok\nTrying:\n    warp('ten')  \nExpecting:\n    Traceback (most recent call last):\n        ...\n    ValueError: factor must be a number\nok\n1 items had no tests:\n    set_warp\n1 items passed all tests:\n   6 tests in set_warp.warp\n6 tests in 2 items.\n6 passed and 0 failed.\nTest passed.\n```", "```py\npython <your_filename.py> -v\n```", "```py\nclass Volcano():\n    'A volcano object'\n    def __init__(self, name, classification, active):\n        \"\"\"sfsds\"\"\"\n        self.name = name\n        self.classification = classification\n        self.active = active\n\n    def erupt(self):\n        'lsjljl'\n        if self.classification == 'stratovolcano' and self.active is True:\n            print(\"\\nRUMBLE!\\n\")\n\n    def pyroclastic_cloud(self):\n        if self.classification == 'stratovolcano' and self.active is True:\n            print(\"\\nWHOOSH!\\n\")\n\nmountain = Volcano('Krakatoa', 'stratovolcano', True)\nmountain.erupt()\nmountain.pyroclastic_cloud()\n```"]