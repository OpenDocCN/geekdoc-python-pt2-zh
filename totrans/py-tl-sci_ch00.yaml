- en: '**INTRODUCTION**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This book is for scientists and budding scientists who want to use the Python
    programming language in their work. It teaches the basics of Python and shows
    the easiest and most popular way to gain access to Python’s universe of scientific
    libraries, the preferred method for documenting work, and how to keep various
    projects separate and secure.
  prefs: []
  type: TYPE_NORMAL
- en: As a mature, open source, and easy-to-learn language, Python has an enormous
    user base and a welcoming community eager to help you develop your skills. This
    user base has contributed to a rich set of tools and supporting libraries (collections
    of precompiled routines) for scientific endeavors such as data science, machine
    learning, language processing, robotics, computer vision, and more. As a result,
    Python has become one of the most important scientific computing languages in
    academia and industry.
  prefs: []
  type: TYPE_NORMAL
- en: Popularity, however, comes with a price. The Python ecosystem is growing into
    an impenetrable jungle. In fact, this book sprang from conversations with scientific
    colleagues in the corporate world. New to Python, they were frustrated, stressed,
    and suffering from *paralysis by analysis*. At every turn, they felt they had
    to make critical and difficult decisions such as which library to use to draw
    a chart and which text editor to use to write their programs. They didn’t have
    the time or inclination to learn multiple tools, so they wanted to choose the
    option with the fewest repercussions down the road.
  prefs: []
  type: TYPE_NORMAL
- en: This book is designed to address those concerns. Its goal is to help you get
    started with scientific computing as quickly and painlessly as possible. Think
    of it as a machete for hacking through the dense jungle of Python distributions,
    tools, and libraries ([Figure 1](ch00.xhtml#ch00fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1: Hacking your way through the Python jungle*'
  prefs: []
  type: TYPE_NORMAL
- en: To reach this goal, I’ll help you make some decisions. As everyone’s needs are
    unique, these won’t always be perfect, but they should represent sensible, “no
    regret” choices that will position you to customize your setup later, after you
    have more experience.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, you’ll use the free *Anaconda Distribution* of Python. As the most
    popular Python distribution platform, it has more than 30 million users worldwide.
    Provided by Anaconda, Inc. (*[https://www.anaconda.com/](https://www.anaconda.com/)*),
    it’s the platform of choice for Python data science. Anaconda will make it easy
    to install Python, set up your computing environment, and keep it organized and
    up to date over time.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that this book is intended for scientists who write scripts for
    their own personal use or for that of their team. It’s not intended for professional
    software developers or engineers working on *enterprise* software. It also addresses
    only free, open source software. Your place of work may use proprietary or commercial
    libraries that supersede those listed here.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this book won’t show you how to *do* science, or data analysis, or
    whatever your job entails. It won’t teach you how to use your operating system,
    and it won’t provide detailed instructions on how to use every important scientific
    library. Each of these requires large, dedicated volumes, which you can readily
    find in bookstores or online. Rather, this book will introduce you to basic tools
    and libraries useful across a wide range of scientific disciplines, help you to
    install them, and help you to get started using them. And, hopefully, it will
    take a lot of the stress out of setting up and using Python for science.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Python?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because you’re reading this book, you’ve probably already made up your mind
    about using Python. If you’re still mulling it over, however, let’s look at some
    reasons why you might want to choose Python for scientific programming. Otherwise,
    feel free to skip to the next section, “Navigating This Book” on [page xxvii](ch00.xhtml#ch00lev1sec2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Python’s design philosophy stresses simplicity, readability, and flexibility.
    These priorities make it a useful language for all stages of research and scientific
    endeavors, including general computing, design of experiments, building device
    interfaces, connecting and controlling multiple hardware/software tools, heavy-duty
    number crunching, and data analysis and visualization. Let’s take a look at some
    of the key features of Python and why they are great selling points for science:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free and open source:** Python is *open source*, which means that the original
    source code is freely available and may be redistributed and modified by anyone.
    It is continuously developed by a team of volunteers and managed by the nonprofit
    Python Software Foundation (*[www.python.org/](http://www.python.org/)*). A strong
    point of open source software is that it’s *hardened*; that is, scrubbed of bugs
    and other problems by a large, involved user base. In addition, these users often
    publish and share their code so that the entire community has access to the latest
    techniques. On the downside, open source software can be more vulnerable to malicious
    users, less user friendly, and more poorly documented and supported than commercial
    alternatives.'
  prefs: []
  type: TYPE_NORMAL
- en: '**High level:** Python is a *high-level* programming language. This means that
    significant areas of the computing system, such as memory management, are automated
    and hidden from view. As a result, Python’s syntax is very readable by humans,
    making it easy to learn and use.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interpretive:** Python is an *interpretive* language, which means it executes
    instructions immediately—similar to applying a calculation in a spreadsheet—without
    the need to compile the code. This gives you instant feedback, makes Python highly
    interactive, and helps you to catch errors as soon as they occur. It does slow
    the language down, however, compared to compiled languages such as Java and C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform neutral:** Python runs on Windows, macOS, and Linux/Unix, and apps
    are available for Android and iOS.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Widespread support and shared learning:** Millions of developers provide
    a strong support system to Python. Thanks to this large community, all the major
    Python products include online documentation, and you can easily find help and
    guidance through both free and fee-based online support sites and tutorials. Likewise,
    the number of Python-related print and ebooks has exploded in recent years and
    cover a wide range of subjects for beginners through advanced users.'
  prefs: []
  type: TYPE_NORMAL
- en: Python’s helpful user base is important, as the key to programming lies not
    in memorizing all the commands, but in *understanding what you want to do*. You
    will spend as much time in online search engines as you will in Python, and knowing
    how to construct a *task-specific* question (such as “How do I post text on an
    image in OpenCV?”) will become an essential skill ([Figure 2](ch00.xhtml#ch00fig2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2: The secret life of programmers*'
  prefs: []
  type: TYPE_NORMAL
- en: Among the more popular support sites is Stack Overflow (*[https://stackoverflow.com/](https://stackoverflow.com/)*).
    In many cases, you’ll find that your query has already been answered. If not,
    be sure to take the tour (*[https://stackoverflow.com/tour/](https://stackoverflow.com/tour/)*)
    and visit the *Asking* section (*[https://stackoverflow.com/help/asking/](https://stackoverflow.com/help/asking/)*)
    to review the proper way to post questions.
  prefs: []
  type: TYPE_NORMAL
- en: You can also find sites dedicated to the use of Python in specific sciences.
    For example, *Practical Python for Astronomers* (*[https://python4astronomers.github.io/](https://python4astronomers.github.io/)*)
    is a useful site for astronomers, and *Analytics Vidhya* (*[https://www.analyticsvidhya.com/](https://www.analyticsvidhya.com/)*)
    is designed for data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: '**Batteries included:** A motto of Python is “batteries included,” which means
    that it comes with all the possible parts required for full usability. In addition
    to a large *standard library* of useful tools, Python can be easily upgraded from
    a wide selection of third-party libraries. These are Python programs written and
    tested by experts in a field that you can apply in your own work. Some examples
    include OpenCV, used to work with image and video data; TensorFlow, used for machine
    learning projects; and Matplotlib, used for generating charts and diagrams. These
    libraries will greatly reduce the amount of code that you need to write to conduct
    experiments, analyze and visualize data, design simulations, and complete your
    projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalable:** Python can easily handle the large datasets commonly used in
    science and engineering. Your main limitations will be the processing speed and
    memory of your computer. For comparison, Microsoft Excel spreadsheets have speed
    and stability issues with as few as tens of thousands of datapoints. Complex Excel
    projects become fragile as the number of spreadsheets grow, resulting in errors
    that are difficult to recognize, find, and fix.'
  prefs: []
  type: TYPE_NORMAL
- en: Python supports both procedural and object-oriented programming that will help
    you write clear, logical code for both small- and large-scale projects. Python
    will also catch errors for you as soon as they occur.
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexible:** Python can handle multiple data formats and can run instrumentation
    and sensors for scientific experiments and data gathering. As a “glue” language,
    it’s easy to integrate with lower-level languages such as C, C++, and FORTRAN,
    and it’s useful for connecting multiple scripts or systems, including databases
    and web services. The large number of third-party libraries available makes Python
    extendable to many tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigating This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is designed for both true beginners and those familiar with Python
    but not Anaconda or some of the various scientific libraries. It’s designed to
    be “one-stop shopping” that will get you up and running with enough knowledge
    to begin working with data and writing your own programs.
  prefs: []
  type: TYPE_NORMAL
- en: True beginners who want a quick start learning Python should first read the
    chapters shown boxed in [Figure 3](ch00.xhtml#ch00fig3), and then return to [Part
    I](part01.xhtml#part01) to finish [Chapters 5](ch05.xhtml) and [6](ch06.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3: The fast track to learning Python*'
  prefs: []
  type: TYPE_NORMAL
- en: More experienced users might want to skip around (for example, omitting the
    Python primer). With that in mind, here’s a short synopsis of the book’s contents.
  prefs: []
  type: TYPE_NORMAL
- en: '***[Part I: Setting Up Your Scientific Coding Environment](part01.xhtml#part01)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Part I](part01.xhtml#part01) provides instructions on how to install, launch,
    and navigate Anaconda, and how to use the conda package manager, an open source
    package and environment management system that runs on Windows, macOS, and Linux.
    In addition, you’ll be introduced to the world of shells, interpreters, text editors,
    notebooks, and integrated development environments (IDEs), including when and
    why you need them. [Part I](part01.xhtml#part01) includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1, Installing and Launching Anaconda](ch01.xhtml):** How to install
    Anaconda on Windows, macOS, and Linux, followed by a tour of the Anaconda Navigator
    graphical user interface (GUI) and the alternative terminal-based command prompt.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2, Keeping Organized with Conda Environments](ch02.xhtml):** Introduces
    the concept of virtual environments that let you isolate your projects and use
    different versions of Python and its scientific libraries. You’ll set up your
    first *conda environment*, a directory that contains a specific version of Python,
    into which you’ll install a specific collection of conda packages. This will allow
    you to keep your projects organized and prevent any conflicts among different
    versions of Python and/or the various libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3, Simple Scripting in the Jupyter Qt Console](ch03.xhtml):** Introduces
    the *Jupyter (IPython) Qt console*, a lightweight interface useful for interactive
    coding, quick concept testing, and data exploration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4, Serious Scripting with Spyder](ch04.xhtml):** Introduces *Spyder*,
    the *Scientific Python Development Environment* included with Anaconda. Spyder
    was designed by scientists, engineers, and data analysts, and provides the advanced
    editing, analysis, debugging, and profiling functionality of a comprehensive development
    tool with the data exploration, interactive execution, deep inspection, and visualization
    capabilities of a scientific application. If you’re completely new to Python,
    skip down to [Part II](part02.xhtml#part02), where you’ll use this tool and the
    Qt Console to learn the basics of Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5, Jupyter Notebook: An Interactive Journal for Computational Research](ch05.xhtml):**
    Introduces the *Jupyter (IPython) Notebook*, a web-based interactive computing
    platform that combines live code, equations, descriptive text, interactive visualizations,
    and other types of media. Programs written in Jupyter can be extensively documented
    in-place and turned into publishable articles, interactive dashboards, and presentation-quality
    slideshows.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6, JupyterLab: Your Center for Science](ch06.xhtml):** Introduces
    *JupyterLab*, a web-based interactive development environment for Jupyter notebooks,
    code, and data. JupyterLab’s flexible interface can be configured to support a
    wide range of workflows in data science, scientific computing, and machine learning.
    In fact, you may spend most of your scientific computing “life” here, especially
    if you’re a data scientist.'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Part II: A Python Primer](part02.xhtml#part02)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Part II](part02.xhtml#part02) is a quick introduction to the Python programming
    language. If you’re already familiar with the basics, you can skip this part and
    just use it as a reference when needed. [Part II](part02.xhtml#part02) includes
    the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7, Integers, Floats, and Strings](ch07.xhtml):** Introduces some
    of Python’s basic data types, operators, and error messages.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8, Variables](ch08.xhtml):** Introduces variables and variable naming
    conventions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9, The Container Data Types](ch09.xhtml):** Introduces Python’s
    tuple, list, set, and dictionary data types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10, Flow Control](ch10.xhtml):** Introduces flow-control statements,
    line structure, and methods for handling exceptions (errors).'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11, Functions and Modules](ch11.xhtml):** Introduces important concepts
    like abstraction and encapsulation, used to make programs easier to read and maintain.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12, Files and Folders](ch12.xhtml):** Introduces modules and functions
    for working with files, folders, and directory paths.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 13, Object-Oriented Programming](ch13.xhtml):** Introduces the basics
    of object-oriented programming (OOP), used to make programs easier to maintain
    and update.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 14, Documenting Your Work](ch14.xhtml):** Presents best practices
    for in-code documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Part III: The Anaconda Ecosystem](part03.xhtml#part03)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Part III](part03.xhtml#part03) introduces the Anaconda Python ecosystem and
    includes high-level summaries of many important scientific and visualization libraries,
    such as NumPy, pandas, and Matplotlib, and how to choose among the many options
    available. [Part III](part03.xhtml#part03) includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 15, The Scientific Libraries](ch15.xhtml):** Overviews of the core
    scientific libraries grouped by function, such as data analysis, machine learning,
    language processing, computer vision, deep learning, and so on. Guidelines are
    provided for choosing among competing libraries, along with a discussion of methods
    and libraries for dealing with very large datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 16, The InfoVis, SciVis, and Dashboarding Libraries](ch16.xhtml):**
    Overviews of the most important libraries used to plot statistical and 3-D data
    and generate dashboards. Guidelines are provided for choosing among competing
    libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 17, The GeoVis Libraries](ch17.xhtml):** Overviews of the most important
    libraries used to plot geospatial data. Guidelines are provided for choosing among
    competing libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Part IV: The Essential Libraries](part04.xhtml#part04)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Part IV](part04.xhtml#part04) introduces you to the basics of working with
    NumPy, Matplotlib, and pandas—the “Big Three” of Python scientific libraries.
    These libraries are important and wildly popular ones on which many others are
    based. [Part IV](part04.xhtml#part04) includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 18, NumPy: Numerical Python](ch18.xhtml):** Introduces *NumPy*,
    the module used for mathematical calculations in Python. Many useful scientific
    libraries such as pandas and Matplotlib are built on NumPy. This section covers
    some of its key concepts and base functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 19, Demystifying Matplotlib](ch19.xhtml):** Covers the basics of
    Matplotlib, the granddaddy of plotting in Python, including some of its more confusing
    aspects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 20, pandas, seaborn, and scikit-learn](ch20.xhtml):** Introduces
    *pandas*, the Python library designed for data loading, manipulation, and analysis.
    It offers data structures and operations for manipulating numerical tables and
    time series and includes data visualization functionality. This chapter is built
    around a machine learning classification problem that also involves seaborn, used
    for easier Matplotlib plotting, and scikit-learn, used for building predictive
    models.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 21, Managing Dates and Times with Python and Pandas](ch21.xhtml):**
    Addresses methods for working with dates and times in both native Python and pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Appendix](app01.xhtml#app01)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The [appendix](app01.xhtml#app01) presents answers to the “Test Your Knowledge”
    challenges throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Updates and Errata**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book will likely have multiple printings, and you can check for any updates
    or corrections at *[https://www.nostarch.com/python-tools-scientists](https://www.nostarch.com/python-tools-scientists)*.
    In the event you find any typos or errors, please report them to *[errata@nostarch.com](mailto:errata@nostarch.com)*.
    Be sure to include the book’s title and the page numbers affected (ebook readers
    should mention the chapter and the subsection).
  prefs: []
  type: TYPE_NORMAL
- en: As Python, Anaconda, and the scientific libraries are constantly evolving, I
    provide links to their official sites where appropriate so that you can always
    find the most up-to-date information regarding these products.
  prefs: []
  type: TYPE_NORMAL
- en: '**Leaving Reviews**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you find this book helpful, please take the time to leave an online review,
    even if it’s just a ranking with stars. Your unbiased opinion will help other
    users navigate the increasingly crowded market of Python programming books.
  prefs: []
  type: TYPE_NORMAL
