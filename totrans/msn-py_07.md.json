["```py\n--snip--\n##def movement():\n##    global current_room\n##    old_room = current_room\n##    \n##    if keyboard.left:\n##        current_room -= 1\n##    if keyboard.right:\n##        current_room += 1\n##    if keyboard.up:\n##        current_room -= MAP_WIDTH\n##    if keyboard.down:\n##        current_room += MAP_WIDTH\n##\n##    if current_room > 50:\n##        current_room = 50\n##    if current_room < 1:\n##        current_room = 1\n##\n##    if current_room != old_room:\n##        print(\"Entering room:\" + str(current_room))\n##\n##clock.schedule_interval(movement, 0.08)\n--snip--\n```", "```py\n   --snip--\n   TILE_SIZE = 30\n\n➊ player_y, player_x = 2, 5\n➋ game_over = False\n\n➌ PLAYER = {\n       \"left\": [images.spacesuit_left, images.spacesuit_left_1,\n                images.spacesuit_left_2, images.spacesuit_left_3,\n                images.spacesuit_left_4\n                ],\n       \"right\": [images.spacesuit_right, images.spacesuit_right_1,\n                 images.spacesuit_right_2, images.spacesuit_right_3,\n                 images.spacesuit_right_4\n                 ],\n       \"up\": [images.spacesuit_back, images.spacesuit_back_1,\n              images.spacesuit_back_2, images.spacesuit_back_3,\n              images.spacesuit_back_4\n              ],\n       \"down\": [images.spacesuit_front, images.spacesuit_front_1,\n                images.spacesuit_front_2, images.spacesuit_front_3,\n                images.spacesuit_front_4\n                ]\n       }\n\n➍ player_direction = \"down\"\n➎ player_frame = 0\n➏ player_image = PLAYER[player_direction][player_frame]\n   player_offset_x, player_offset_y = 0, 0\n\n   --snip--\n```", "```py\n   --snip--\n       for y in range(room_height):\n        for x in range(room_width):\n               if room_map[y][x] != 255: \n                   image_to_draw = objects[room_map[y][x]][0]\n                   screen.blit(image_to_draw,\n                       (top_left_x + (x*30),\n                        top_left_y + (y*30) - image_to_draw.get_height()))\n➊         if player_y == y:\n➋             image_to_draw = PLAYER[player_direction][player_frame]\n➌             screen.blit(image_to_draw,\n                           (top_left_x + (player_x*30)+(player_offset_x*30),\n                            top_left_y + (player_y*30)+(player_offset_y*30)\n                            - image_to_draw.get_height()))\n   --snip--\n```", "```py\n   --snip--\n               for tile_number in range(1, image_width_in_tiles):\n                   room_map[scenery_y][scenery_x + tile_number] = 255\n\n   ###############\n   ## GAME LOOP ##\n   ###############\n\n➊ def game_loop():\n➋     global player_x, player_y, current_room\n       global from_player_x, from_player_y\n       global player_image, player_image_shadow\n       global selected_item, item_carrying, energy\n       global player_offset_x, player_offset_y\n       global player_frame, player_direction\n\n➌     if game_over:\n           return\n➍     if player_frame > 0:\n           player_frame += 1\n           time.sleep(0.05)\n           if player_frame == 5:\n               player_frame = 0\n               player_offset_x = 0\n               player_offset_y = 0\n\n➎ # save player's current position\n       old_player_x = player_x\n       old_player_y = player_y\n\n➏ # move if key is pressed\n       if player_frame == 0:\n           if keyboard.right:\n               from_player_x = player_x\n               from_player_y = player_y\n               player_x += 1\n               player_direction = \"right\"\n               player_frame = 1\n           elif keyboard.left: #elif stops player making diagonal movements\n               from_player_x = player_x\n               from_player_y = player_y\n               player_x -= 1\n               player_direction = \"left\"\n               player_frame = 1\n           elif keyboard.up:\n               from_player_x = player_x\n               from_player_y = player_y\n               player_y -= 1\n               player_direction = \"up\"\n               player_frame = 1\n           elif keyboard.down:\n               from_player_x = player_x\n               from_player_y = player_y\n               player_y += 1\n               player_direction = \"down\"\n               player_frame = 1\n\n➐     # If the player is standing somewhere they shouldn't, move them back.\n       # Keep the 2 comments below - you'll need them later\n       if room_map[player_y][player_x] not in items_player_may_stand_on: #\\\n       #           or hazard_map[player_y][player_x] != 0:\n           player_x = old_player_x\n           player_y = old_player_y\n➑         player_frame = 0\n\n➒     if player_direction == \"right\" and player_frame > 0:\n           player_offset_x = -1 + (0.25 * player_frame)\n       if player_direction == \"left\" and player_frame > 0:\n           player_offset_x = 1 - (0.25 * player_frame)\n       if player_direction == \"up\" and player_frame > 0:\n           player_offset_y = 1 - (0.25 * player_frame)\n       if player_direction == \"down\" and player_frame > 0:\n           player_offset_y = -1 + (0.25 * player_frame)\n\n   ###############\n   ## EXPLORER  ##\n   ###############\n\n   --snip--\n```", "```py\n--snip--\n###############\n##   START   ##\n###############\n\nclock.schedule_interval(game_loop, 0.03)\n\n--snip--\n```", "```py\nif room_map[player_y][player_x] not in items_player_may_stand_on:\n```", "```py\nplayer_offset_x = 1 - (0.25 * player_frame)\n```", "```py\nplayer_offset_x = -1 + (0.25 * player_frame)\n```", "```py\n   --snip--\n\n   def game_loop():\n\n   --snip--\n               player_direction = \"down\"\n               player_frame = 1   \n   # check for exiting the room\n➊     if player_x == room_width: # through door on RIGHT\n           #clock.unschedule(hazard_move)\n➋         current_room += 1\n➌         generate_map()\n➍         player_x = 0 # enter at left\n➎         player_y = int(room_height / 2) # enter at door\n➏         player_frame = 0\n➐         #start_room()\n➑         return\n\n➒     if player_x == -1: # through door on LEFT\n           #clock.unschedule(hazard_move)\n           current_room -= 1\n           generate_map()\n           player_x = room_width - 1  # enter at right\n           player_y = int(room_height / 2) # enter at door\n           player_frame = 0\n           #start_room()\n           return\n\n➓     if player_y == room_height: # through door at BOTTOM\n           #clock.unschedule(hazard_move)\n           current_room += MAP_WIDTH\n           generate_map()\n           player_y = 0 # enter at top\n           player_x = int(room_width / 2) # enter at door\n           player_frame = 0\n           #start_room()\n           return\n\n       if player_y == -1: # through door at TOP\n           #clock.unschedule(hazard_move)\n           current_room -= MAP_WIDTH\n           generate_map()\n           player_y = room_height - 1 # enter at bottom\n           player_x = int(room_width / 2) # enter at door\n           player_frame = 0\n           #start_room()\n           return\n\n     # If the player is standing somewhere they shouldn't, move them back.\n       if room_map[player_y][player_x] not in items_player_may_stand_on: #\\ \n       #           or hazard_map[player_y][player_x] != 0:\n           player_x = old_player_x\n   --snip--\n```"]