- en: '**3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: SIMPLE SCRIPTING IN THE JUPYTER QT CONSOLE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JUPYTER QT CONSOLE 中的简单脚本编写**
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: The *Jupyter Qt console* is a lightweight application that blends the simplicity
    of a terminal with features possible only in a GUI, such as viewing inline figures.
    It’s designed for quickly testing ideas, exploring datasets, and working through
    tutorials rather than extended interactive use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jupyter Qt 控制台* 是一款轻量级应用程序，它将终端的简洁性与仅在图形用户界面（GUI）中可能实现的功能（如查看内联图形）相结合。它旨在快速测试想法、探索数据集并处理教程，而不是长时间的交互式使用。'
- en: When I say that the Qt console is “lightweight,” I mean that it has a small
    memory footprint and doesn’t burden your CPU. Likewise, it doesn’t overwhelm users
    with a bewildering number of controls and options. The interface is clean and
    sparse ([Figure 3-1](ch03.xhtml#ch03fig1)), much like the interactive shell that
    ships with Python, but with many improvements. These include line numbers, the
    ability to open multiple tabs, the support of rich media output (such as images,
    video, audio, and interactive elements), command history retrieval across sessions,
    proper multiline editing with syntax highlighting, session export, and more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说 Qt 控制台是“轻量级”的意思是，它的内存占用小，不会给 CPU 带来负担。同样，它也不会通过众多的控制项和选项让用户感到困惑。其界面简洁而稀疏（见
    [图 3-1](ch03.xhtml#ch03fig1)），类似于 Python 自带的交互式 Shell，但做了许多改进。这些改进包括行号、多标签页支持、丰富媒体输出（如图像、视频、音频和交互式元素）的支持、跨会话的命令历史记录检索、带语法高亮的多行编辑、会话导出等。
- en: '![Image](../images/03fig01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig01.jpg)'
- en: '*Figure 3-1: The Jupyter Qt console with two tabs (kernel 0 and kernel 1) and
    an inline figure*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：具有两个标签（内核 0 和内核 1）以及内联图形的 Jupyter Qt 控制台*'
- en: The sections that follow provide a broad introduction to the Qt console. For
    a more in-depth study, you can find the official documentation at *[https://qtconsole.readthedocs.io/](https://qtconsole.readthedocs.io/)*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节将提供 Qt 控制台的广泛介绍。有关更深入的研究，你可以访问官方文档 *[https://qtconsole.readthedocs.io/](https://qtconsole.readthedocs.io/)*。
- en: '**Installing seaborn**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安装 seaborn**'
- en: If you want to reproduce the plots shown in this chapter, you’ll need to install
    the seaborn data visualization library. Use the *my_first_env* conda environment
    created in the last chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想重现本章中显示的图表，你需要安装 seaborn 数据可视化库。使用上一章中创建的 *my_first_env* conda 环境。
- en: 'Open Anaconda Prompt (in Windows) or a terminal (in macOS and Linux) and then
    enter the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Anaconda Prompt（Windows 系统）或终端（macOS 和 Linux 系统），然后输入以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll also need knowledge of multiline editing, which you can find in the “Multiline
    Editing” section later in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要了解多行编辑，你可以在本章稍后的“多行编辑”部分找到相关内容。
- en: '**Installing and Launching the Jupyter Qt Console Using Navigator**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 Navigator 安装并启动 Jupyter Qt 控制台**'
- en: There are two ways to install the Jupyter Qt console using Anaconda Navigator.
    If you have trouble with the first method, proceed to the second.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Anaconda Navigator 安装 Jupyter Qt 控制台有两种方法。如果你在第一种方法中遇到问题，可以尝试第二种方法。
- en: The easiest way is to use the Qt Console tile on the Home tab. First activate
    the environment by selecting its name in the **Applications on** pull-down menu
    near the top of the Home tab ([Figure 3-2](ch03.xhtml#ch03fig2)). In this example,
    we’re using *my_first_env*, created in the last chapter. Next, click the **Install**
    button on the Qt Console app tile. You might need to scroll down the Home tab
    to find the tile.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用首页标签上的 Qt Console 磁贴。首先通过在首页标签顶部附近的 **Applications on** 下拉菜单中选择其名称来激活环境（见
    [图 3-2](ch03.xhtml#ch03fig2)）。在这个例子中，我们使用的是上一章中创建的 *my_first_env*。接下来，点击 Qt Console
    应用程序磁贴上的 **Install** 按钮。你可能需要滚动首页标签以找到该磁贴。
- en: '![Image](../images/03fig02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig02.jpg)'
- en: '*Figure 3-2: The Anaconda Navigator Home tab showing the active environment
    (my_first_env) and the Qt Console tile*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：Anaconda Navigator 首页标签，显示了活动环境（my_first_env）和 Qt Console 磁贴*'
- en: '**NOTE**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Ignore the package named jupyter console. This version of the console is purely
    terminal based and doesn’t involve Qt for graphics.*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*忽略名为 jupyter console 的包。此版本的控制台纯粹基于终端，不涉及用于图形的 Qt。*'
- en: After a few moments, the Install button should change to a Launch button. Click
    this to launch the console. Note that, even though the tile on the Home tab has
    an IPython (IP[y]) icon, the console window name is Qt Console.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，Install 按钮应该会变成 Launch 按钮。点击它以启动控制台。请注意，尽管首页标签上的磁贴显示的是 IPython（IP[y]）图标，但控制台窗口的名称是
    Qt Console。
- en: If for some reason you don’t see the installation tile on the Home tab, click
    the **Environments** tab, switch the view to **Not installed**, search for **qtconsole**
    in the **Search Packages** box, and then click the button beside **qtconsole**
    in the list ([Figure 3-3](ch03.xhtml#ch03fig3)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因你没有在首页标签看到安装图块，请点击**环境**标签，将视图切换到**未安装**，在**搜索包**框中搜索**qtconsole**，然后点击列表中**qtconsole**旁边的按钮（[图
    3-3](ch03.xhtml#ch03fig3)）。
- en: '![Image](../images/03fig03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig03.jpg)'
- en: '*Figure 3-3: Installing the Jupyter Qt console through the Environments tab*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：通过“环境”标签安装 Jupyter Qt 控制台*'
- en: Next, click the **Apply** button at the bottom of the screen and then click
    **Apply** in the pop-up window that opens. You should now see the Qt Console tile
    on your Home tab ([Figure 3-3](ch03.xhtml#ch03fig3)). If not, try clicking the
    **Refresh** button in the upper-right corner of the Home tab.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击屏幕底部的**应用**按钮，然后在弹出窗口中再次点击**应用**。你现在应该在首页标签上看到 Qt 控制台图块（[图 3-3](ch03.xhtml#ch03fig3)）。如果没有，尝试点击首页标签右上角的**刷新**按钮。
- en: By installing Qt console in each environment, you’ll be able to import and use
    other packages in that environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每个环境中安装 Qt 控制台，你将能够导入并使用该环境中的其他包。
- en: '**Installing and Launching the Jupyter Qt Console Using the CLI**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 CLI 安装和启动 Jupyter Qt 控制台**'
- en: 'To install the Jupyter Qt console in a new environment using the CLI rather
    than Anaconda Navigator, first open Anaconda Prompt (in Windows) or a terminal
    (in macOS and Linux) and activate the conda environment. Let’s do this for *my_first_env*,
    created in the last chapter:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用 CLI 在新环境中安装 Jupyter Qt 控制台，而不是使用 Anaconda Navigator，首先打开 Anaconda 提示符（在
    Windows 中）或终端（在 macOS 和 Linux 中），并激活 conda 环境。我们将在上一章创建的*my_first_env*环境中进行操作：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, use conda to install the console:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 conda 安装控制台：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice `PyQt` in the list of packages to be installed. This library enables
    the use of graphics in the same window as code and explains the “Qt” in Jupyter
    Qt console. Enter Y when prompted to complete the installation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在待安装包列表中有`PyQt`。这个库使得在同一窗口中使用图形成为可能，也解释了 Jupyter Qt 控制台中的“Qt”含义。安装过程中，如果提示，输入
    Y 完成安装。
- en: 'To start the program, enter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 启动程序时，输入：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If the console doesn’t appear automatically, check your task bar. Later, if
    you want to update the app, enter the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果控制台没有自动出现，请检查你的任务栏。之后，如果你想更新应用程序，可以输入以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**NOTE**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you have both Navigator and Anaconda Prompt (or the Terminal) open at the
    same time, and are working between them, you’ll need to click the Refresh button
    on the Navigator Home screen after using conda to install or remove packages.
    This will update the Install and Launch buttons on the Navigator app tiles to
    the correct state.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你同时打开了 Navigator 和 Anaconda 提示符（或终端），并且在它们之间切换工作，使用 conda 安装或删除包后，你需要点击
    Navigator 首页上的“刷新”按钮。这将更新安装和启动按钮的状态。*'
- en: '**The Qt Console Controls**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Qt 控制台控制**'
- en: 'The Qt console is *interactive*, which means that it behaves like an electronic
    calculator. Any instructions you enter will be run immediately. In fact, you can
    use the console as a calculator:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 控制台是*交互式*的，这意味着它像电子计算器一样工作。你输入的任何指令都会立即执行。实际上，你可以把控制台当作计算器使用：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice how the console marks input versus output and includes line numbers.
    Although you can’t see it in a black and white book, the Qt console also uses
    different colors to distinguish among keywords, comments, error messages, and
    so on. Called *syntax highlighting*, this color-coding helps you to visually categorize
    your code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意控制台如何标记输入与输出，并包括行号。尽管在黑白书籍中你看不见，Qt 控制台也使用不同的颜色来区分关键字、注释、错误信息等。这个被称为*语法高亮*的颜色编码帮助你将代码进行视觉分类。
- en: You can also choose a light or dark background. Indeed, this would be a good
    time to play with some of the screen configuration choices to see which one you
    like best.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以选择浅色或深色背景。事实上，现在正是调整屏幕配置选项的好时机，看看你最喜欢哪种设置。
- en: '***Choosing a Syntax Style***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***选择语法风格***'
- en: At the top of the Jupyter Qt console window, click **View** ▸ **Syntax Style**.
    You’ll see a list of around 36 style types, including the popular `emacs`, `vim`,
    and `vs` styles. Choose one and then enter the code you see in [Figure 3-4](ch03.xhtml#ch03fig4),
    which will let you see some of the theme’s color choices. This book uses the `default`
    syntax style unless noted otherwise.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter Qt 控制台窗口顶部，点击 **视图** ▸ **语法样式**。你将看到大约36种样式类型，包括流行的 `emacs`、`vim`
    和 `vs` 样式。选择其中一个，然后输入你在 [图3-4](ch03.xhtml#ch03fig4) 中看到的代码，这样你就能看到主题的颜色选择。本书默认使用
    `default` 语法样式，除非另有说明。
- en: To compare styles, open new tabs using **File** ▸ **New Tab with New kernel**.
    Then use **Window** ▸ **Rename Current Tab** to name the tab for the style currently
    on display (such as “Monokai” in [Figure 3-4](ch03.xhtml#ch03fig4)). You can copy
    the code from one tab to the next to see the highlighting changes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较样式，使用 **文件** ▸ **新标签页与新内核** 打开新标签页。然后使用 **窗口** ▸ **重命名当前标签** 为当前显示的样式命名（例如，[图3-4](ch03.xhtml#ch03fig4)中的“Monokai”）。你可以将代码从一个标签复制到下一个，以查看高亮变化。
- en: '![Image](../images/03fig04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig04.jpg)'
- en: '*Figure 3-4: The Monokai syntax style*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-4：Monokai语法样式*'
- en: 'If you start Jupyter Qt console from the command line, you can specify a style
    at the same time. For example, to choose Monokai, enter the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从命令行启动 Jupyter Qt 控制台，你可以同时指定一个样式。例如，要选择 Monokai，输入以下内容：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Of course, there’s no need to specify the `default` style.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，不需要指定 `default` 样式。
- en: It’s even possible to configure the console and set your own style (see “Colors
    and Highlighting” and “Fonts” at *[https://qtconsole.readthedocs.io/_/downloads/en/stable/pdf/](https://qtconsole.readthedocs.io/_/downloads/en/stable/pdf/)*).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以配置控制台并设置你自己的样式（请参阅 *[https://qtconsole.readthedocs.io/_/downloads/en/stable/pdf/](https://qtconsole.readthedocs.io/_/downloads/en/stable/pdf/)*
    中的“颜色和高亮”以及“字体”部分）。
- en: '***Using Keyboard Shortcuts***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用键盘快捷键***'
- en: Jupyter Qt console supports keyboard shortcuts, or *keybindings*, including
    the familiar CTRL-C and CTRL-V for copy and paste, respectively ([Table 3-1](ch03.xhtml#ch03tab1)).
    You can launch a list of the keybindings by clicking **Help** ▸ **Show QtConsole
    help**. To exit help, use the ESC key.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Qt 控制台支持键盘快捷键，或称 *键绑定*，包括熟悉的 CTRL-C 和 CTRL-V，用于复制和粘贴（分别见[表3-1](ch03.xhtml#ch03tab1)）。你可以通过点击
    **帮助** ▸ **显示QtConsole帮助** 来查看键绑定列表。退出帮助时，使用 ESC 键。
- en: '**Table 3-1:** Some Common Keybindings Available in Jupyter Qt Console'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**表3-1：** Jupyter Qt 控制台中常用的键绑定'
- en: '| **Keybinding** | **Description** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **键绑定** | **描述** |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| CTRL-C | Copy highlighted text to clipboard without prompts |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-C | 将高亮文本复制到剪贴板，无需提示 |'
- en: '| CTRL-SHIFT-C | Copy highlighted text to clipboard with prompts |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-SHIFT-C | 将高亮文本复制到剪贴板，并显示提示 |'
- en: '| CTRL-V | Paste text from clipboard |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-V | 从剪贴板粘贴文本 |'
- en: '| CTRL-Z | Undo |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-Z | 撤销 |'
- en: '| CTRL-SHIFT-Z | Redo |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-SHIFT-Z | 重做 |'
- en: '| CTRL-S | Save to HTML/XHTML |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-S | 保存为HTML/XHTML |'
- en: '| CTRL-L | Clear terminal |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-L | 清除终端 |'
- en: '| CTRL-A | Go to beginning of line |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-A | 跳转到行首 |'
- en: '| CTRL-E | Go to end of line |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-E | 跳转到行尾 |'
- en: '| CTRL-U | Delete from cursor to the beginning of the line |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-U | 从光标位置删除到行首 |'
- en: '| CTRL-K | Delete from cursor to the end of the line |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-K | 从光标位置删除到行尾 |'
- en: '| CTRL-P | Previous line (like up arrow) |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-P | 上一行（类似上箭头） |'
- en: '| CTRL-N | Next line (like down arrow) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-N | 下一行（类似下箭头） |'
- en: '| CTRL-F | Forward (like right arrow) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-F | 前进（类似右箭头） |'
- en: '| CTRL-B | Back (like left arrow) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-B | 返回（类似左箭头） |'
- en: '| CTRL-D | Delete next character or exit if input is empty |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-D | 删除下一个字符，或者当输入为空时退出 |'
- en: '| ALT-D | Delete next word |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| ALT-D | 删除下一个单词 |'
- en: '| ALT-BACKSPACE | Delete previous word |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| ALT-BACKSPACE | 删除上一个单词 |'
- en: '| CTRL-. | Force kernel to restart |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-. | 强制重启内核 |'
- en: '| CTRL-+ | Increase font size |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-+ | 增大字体大小 |'
- en: '| CTRL-hyphen | Decrease font size |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-hyphen | 减小字体大小 |'
- en: '| CTRL-T | Open new tab with new kernel |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-T | 打开带有新内核的新标签页 |'
- en: '| CTRL-SHIFT-P | Print |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-SHIFT-P | 打印 |'
- en: '| F11 | Toggle full screen mode |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| F11 | 切换全屏模式 |'
- en: '| CTRL-R | Rename current tab |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-R | 重命名当前标签 |'
- en: '| ALT-R | Rename window |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| ALT-R | 重命名窗口 |'
- en: Among the more useful shortcuts are the up and down arrow keys. These let you
    cycle through lines you’ve already entered to use them again.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在更实用的快捷键中，向上和向下箭头键尤其有用。它们允许你循环查看已经输入的行，方便再次使用。
- en: '***Using Tabs and Kernels***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用标签和内核***'
- en: 'Jupyter Qt console supports multiple tabs, which you can open from the **File**
    menu. You must select a kernel option, which is the active “computational engine”
    that executes the code. There are three choices:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Qt控制台支持多个标签页，可以从**文件**菜单打开。你必须选择一个内核选项，这是执行代码的活动“计算引擎”。有三个选项：
- en: '**New tab with new kernel** Opens a new tab with a new IPython kernel.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用新内核的新标签页** 打开一个带有新IPython内核的新标签页。'
- en: '**New tab with same kernel** Creates a child of a parent kernel loaded on a
    particular tab. Objects initialized on the parent tab will be accessible in both
    tabs.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用相同内核的新标签页** 创建一个父内核的子内核，该内核会加载在特定标签页上。在父标签页上初始化的对象将在两个标签页中都可以访问。'
- en: '**New tab with existing kernel** Opens a new tab and lets you choose from kernels
    other than IPython.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用现有内核的新标签页** 打开一个新标签页，并让你选择IPython以外的内核。'
- en: '***Printing and Saving***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***打印与保存***'
- en: If you’re one of those “old-school” people who likes to print programs to paper
    and edit them with a red pen, you’ll like the **File** ▸ **Print** command, which
    will produce a hardcopy of your code as it appears in the console.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是那种喜欢把程序打印出来并用红笔编辑的“老派”人，你会喜欢**文件** ▸ **打印**命令，它会生成代码的硬拷贝，正如它在控制台中显示的那样。
- en: You can save the Qt console session as an HTML or XHTML file using **File**
    ▸ **Save to HTML/XHTML**. If you have any inline figures or images, you can choose
    to write them to an external PNG file. PNG images can be either saved in an external
    folder or inlined to create a larger but more portable file. In Windows, the external
    folder, named *ipython_files*, is stored beneath the HTML file location.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过**文件** ▸ **保存为HTML/XHTML** 将Qt控制台会话保存为HTML或XHTML文件。如果你有任何内嵌的图形或图片，可以选择将它们写入外部PNG文件。PNG图像可以保存在外部文件夹中，或者内嵌保存，以创建一个更大但更便携的文件。在Windows中，外部文件夹名为*ipython_files*，它存储在HTML文件所在的位置下。
- en: With the XHTML option, your figures will be inlined as SVG files. To switch
    the format of inline figures from the default PNG format to SVG, see “Saving and
    Printing” at *[https://qtconsole.readthedocs.io/](https://qtconsole.readthedocs.io/)*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XHTML选项时，图形将作为SVG文件内嵌显示。要将内嵌图形的格式从默认的PNG格式切换到SVG格式，请参见“保存与打印”部分，网址为 *[https://qtconsole.readthedocs.io/](https://qtconsole.readthedocs.io/)*。
- en: Although the Qt console is meant for interactive work, it’s possible to copy
    code from the saved HTML/XHTML file or from an external text editor into the console
    to run it again. You’ll need to strip out any output lines, however, and you’ll
    lose the line number formatting (compare [Figure 3-5](ch03.xhtml#ch03fig5) to
    [Figure 3-1](ch03.xhtml#ch03fig1)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Qt控制台主要用于交互式工作，但你也可以将已保存的HTML/XHTML文件或外部文本编辑器中的代码复制到控制台中再次运行。然而，你需要去除任何输出行，并且你将失去行号格式（比较[图
    3-5](ch03.xhtml#ch03fig5)与[图 3-1](ch03.xhtml#ch03fig1)）。
- en: '![Image](../images/03fig05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig05.jpg)'
- en: '*Figure 3-5: Code from an HTML file copied and run again in a new Qt console
    session*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-5：从HTML文件复制并在新的Qt控制台会话中再次运行的代码*'
- en: You can also use the `%load` magic command to take any script, such as a text
    file or existing Python file, and paste its contents as your next input in the
    Qt console. You then can edit it or execute it as is.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`%load`魔法命令，将任何脚本（如文本文件或现有的Python文件）粘贴到Qt控制台作为下一次输入。然后，你可以编辑它或按原样执行。
- en: '**NOTE**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*A magic command is a special IPython enhancement added over normal Python
    code that facilitates common tasks such as loading a file. Line magic commands,
    as used in the Qt console, are prefixed by the percent symbol (`%`).*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*魔法命令是IPython对普通Python代码的增强功能，它简化了诸如加载文件之类的常见任务。在Qt控制台中使用的行魔法命令，以百分号符号（`%`）为前缀。*'
- en: 'To see how the `%load` command works, open the text editor for your platform
    and enter this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`%load`命令如何工作，请为你的平台打开文本编辑器并输入以下内容：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `print()` function is a built-in Python routine (mini-program) that prints
    output to the screen. We look at functions in greater detail in [Chapter 11](ch11.xhtml).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()`函数是一个内建的Python例程（迷你程序），用于将输出打印到屏幕。我们将在[第11章](ch11.xhtml)中更详细地讨论函数。'
- en: Save this somewhere as *test.py* or *test.txt*. In the Qt console, type %load
    plus the path to your file, as with my example in [Figure 3-6](ch03.xhtml#ch03fig6).
    Press ENTER to load the file, and again to execute the code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 *test.py* 或 *test.txt*。在Qt控制台中，键入`%load`，然后输入你的文件路径，像我在[图 3-6](ch03.xhtml#ch03fig6)中的示例一样。按回车键加载文件，再按一次回车键执行代码。
- en: '![Image](../images/03fig06.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig06.jpg)'
- en: '*Figure 3-6: Using the %load magic command to load and execute code from a
    text file*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-6：使用`%load`魔法命令从文本文件加载并执行代码*'
- en: The `%load` command can also load code from other sources such as a URL.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`%load` 命令也可以从其他来源加载代码，如 URL。'
- en: A subset of commonly used magic commands are listed in [Table 3-2](ch03.xhtml#ch03tab2).
    You can read more about them at *[https://ipython.readthedocs.io/en/stable/interactive/magics.html](https://ipython.readthedocs.io/en/stable/interactive/magics.html)*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的部分魔法命令列在 [表 3-2](ch03.xhtml#ch03tab2) 中。你可以在 *[https://ipython.readthedocs.io/en/stable/interactive/magics.html](https://ipython.readthedocs.io/en/stable/interactive/magics.html)*
    了解更多相关内容。
- en: As you can see from this example, you don’t need a fancy tool to write a Python
    program; a simple notepad application will suffice. But you can do better. Text
    editors dedicated to programming such as Emacs, Vim, IDLE, Notepad++, Sublime
    Text, and many others have built-in functionality that helps you code much more
    efficiently. We look at Spyder’s text editor in the next chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这个例子中看到的，你不需要一个复杂的工具来编写 Python 程序；一个简单的记事本应用就足够了。但是你可以做得更好。专门用于编程的文本编辑器，如
    Emacs、Vim、IDLE、Notepad++、Sublime Text 等，具有内置的功能，能让你更高效地编程。我们将在下一章介绍 Spyder 的文本编辑器。
- en: '**Table 3-2:** Common Line Magic Commands'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 3-2：** 常用的行魔法命令'
- en: '| **Command** | **Description** |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `%cd` | Change the current working directory |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `%cd` | 更改当前工作目录 |'
- en: '| `%cls (or %clear)` | Clear the screen |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `%cls (或 %clear)` | 清除屏幕 |'
- en: '| `%conda` | Run the conda package manager within the current kernel |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `%conda` | 在当前内核中运行 conda 包管理器 |'
- en: '| `%load` | Load code into current frontend |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `%load` | 加载代码到当前前端 |'
- en: '| `%lsmagic` | List the currently available magic functions (ESC to exit) |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `%lsmagic` | 列出当前可用的魔法函数（按 ESC 键退出） |'
- en: '| `%matplotlib qt` | Display Matplotlib plots in interactive Qt window versus
    inline |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `%matplotlib qt` | 在交互式 Qt 窗口中显示 Matplotlib 图表，而不是内嵌显示 |'
- en: '| `%pprint` | Toggle pretty printing on/off |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `%pprint` | 切换美观打印开关 |'
- en: '| `%precision` | Set floating-point precision for pretty printing |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `%precision` | 设置浮点数精度以便美观打印 |'
- en: '| `%pwd` | Return the current working directory path |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `%pwd` | 返回当前工作目录路径 |'
- en: '| `%quickref` | Display reference material for magic functions (ESC to exit)
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `%quickref` | 显示魔法函数的参考资料（按 ESC 键退出） |'
- en: '| `%reset` | Remove all variables from the session memory |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `%reset` | 从会话内存中移除所有变量 |'
- en: '| `%timeit` | Time the execution of a Python statement or expression |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `%timeit` | 计时 Python 语句或表达式的执行时间 |'
- en: '| `%MAGIC?` | Adding a “?” behind a magic command displays its docstring |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `%MAGIC?` | 在魔法命令后加上“?”可以显示其文档字符串 |'
- en: '***Multiline Editing***'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多行编辑***'
- en: '*Multiline editing* is a useful feature that’s not available in terminals but
    is supported by Qt console. It lets you enter multiple lines without executing
    them by using CTRL-ENTER in place of ENTER.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*多行编辑* 是一个有用的功能，终端中没有，但 Qt 控制台支持。它让你可以通过使用 CTRL-ENTER 替代 ENTER 来输入多行，而无需立即执行。'
- en: '**NOTE**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*This book uses Windows conventions. macOS users should substitute the COMMAND
    key for CONTROL, and the OPTION key for ALT when using keyboard shortcuts.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*本书使用 Windows 操作系统的习惯。macOS 用户在使用快捷键时应将 COMMAND 键替换为 CONTROL 键，将 OPTION 键替换为
    ALT 键。*'
- en: 'If you look closely at the code in [Figure 3-1](ch03.xhtml#ch03fig1), you’ll
    notice that Line 4 looks odd. The second line is not numbered; instead, it’s three
    dots precede it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看 [图 3-1](ch03.xhtml#ch03fig1) 中的代码，你会注意到第 4 行看起来有些奇怪。第二行没有编号，而是以三个点作为前缀：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Because I pressed CTRL-ENTER after typing Line 4, the line didn’t execute. As
    a result, I was able to fully define the chart before drawing it. Had I entered
    and executed each of these lines independently, I would’ve gotten the unacceptable
    results shown in [Figure 3-7](ch03.xhtml#ch03fig7).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我在输入第 4 行后按下了 CTRL-ENTER，这一行并未执行。因此，我能够在绘制图表之前完全定义它。如果我逐行输入并执行这些代码，我将会得到 [图
    3-7](ch03.xhtml#ch03fig7) 中显示的不可接受的结果。
- en: '![Image](../images/03fig07.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig07.jpg)'
- en: '*Figure 3-7: Executing each line individually causes the chart to plot without
    data*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-7：逐行执行导致图表绘制时没有数据*'
- en: Additionally, at any point in a multiline block, you can force its execution
    (without having to go to the bottom) by using SHIFT-ENTER.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在多行块中的任何位置，你都可以通过使用 SHIFT-ENTER 强制执行当前的代码块（无需跳到最后一行）。
- en: Multiline editing is a convenient feature that distinguishes Jupyter Qt console
    from more basic interpreters. It’s wonderful for short code snippets, but as your
    programs become longer, you’ll want the efficiency and persistence of a true text
    editor.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 多行编辑是 Jupyter Qt 控制台与其他基本解释器的一个显著区别。对于短小的代码片段，这个功能非常方便，但随着程序变得更长，你会更倾向于使用真正的文本编辑器，它提供更高效且持久的编辑体验。
- en: '**Summary**'
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: The Jupyter Qt console is a lightweight application for writing code snippets,
    quickly exploring datasets and testing ideas, and working through coding tutorials.
    For writing large persistent programs, you’ll want to use other coding tools such
    as Jupyter Notebook, JupyterLab, or Spyder.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Qt 控制台是一个轻量级应用程序，适用于编写代码片段、快速探索数据集、测试想法以及完成编码教程。对于编写大型持久程序，你需要使用其他编码工具，如
    Jupyter Notebook、JupyterLab 或 Spyder。
