- en: '**3'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SIMPLE SCRIPTING IN THE JUPYTER QT CONSOLE**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The *Jupyter Qt console* is a lightweight application that blends the simplicity
    of a terminal with features possible only in a GUI, such as viewing inline figures.
    It’s designed for quickly testing ideas, exploring datasets, and working through
    tutorials rather than extended interactive use.
  prefs: []
  type: TYPE_NORMAL
- en: When I say that the Qt console is “lightweight,” I mean that it has a small
    memory footprint and doesn’t burden your CPU. Likewise, it doesn’t overwhelm users
    with a bewildering number of controls and options. The interface is clean and
    sparse ([Figure 3-1](ch03.xhtml#ch03fig1)), much like the interactive shell that
    ships with Python, but with many improvements. These include line numbers, the
    ability to open multiple tabs, the support of rich media output (such as images,
    video, audio, and interactive elements), command history retrieval across sessions,
    proper multiline editing with syntax highlighting, session export, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-1: The Jupyter Qt console with two tabs (kernel 0 and kernel 1) and
    an inline figure*'
  prefs: []
  type: TYPE_NORMAL
- en: The sections that follow provide a broad introduction to the Qt console. For
    a more in-depth study, you can find the official documentation at *[https://qtconsole.readthedocs.io/](https://qtconsole.readthedocs.io/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing seaborn**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to reproduce the plots shown in this chapter, you’ll need to install
    the seaborn data visualization library. Use the *my_first_env* conda environment
    created in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Anaconda Prompt (in Windows) or a terminal (in macOS and Linux) and then
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You’ll also need knowledge of multiline editing, which you can find in the “Multiline
    Editing” section later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing and Launching the Jupyter Qt Console Using Navigator**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two ways to install the Jupyter Qt console using Anaconda Navigator.
    If you have trouble with the first method, proceed to the second.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way is to use the Qt Console tile on the Home tab. First activate
    the environment by selecting its name in the **Applications on** pull-down menu
    near the top of the Home tab ([Figure 3-2](ch03.xhtml#ch03fig2)). In this example,
    we’re using *my_first_env*, created in the last chapter. Next, click the **Install**
    button on the Qt Console app tile. You might need to scroll down the Home tab
    to find the tile.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-2: The Anaconda Navigator Home tab showing the active environment
    (my_first_env) and the Qt Console tile*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ignore the package named jupyter console. This version of the console is purely
    terminal based and doesn’t involve Qt for graphics.*'
  prefs: []
  type: TYPE_NORMAL
- en: After a few moments, the Install button should change to a Launch button. Click
    this to launch the console. Note that, even though the tile on the Home tab has
    an IPython (IP[y]) icon, the console window name is Qt Console.
  prefs: []
  type: TYPE_NORMAL
- en: If for some reason you don’t see the installation tile on the Home tab, click
    the **Environments** tab, switch the view to **Not installed**, search for **qtconsole**
    in the **Search Packages** box, and then click the button beside **qtconsole**
    in the list ([Figure 3-3](ch03.xhtml#ch03fig3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-3: Installing the Jupyter Qt console through the Environments tab*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, click the **Apply** button at the bottom of the screen and then click
    **Apply** in the pop-up window that opens. You should now see the Qt Console tile
    on your Home tab ([Figure 3-3](ch03.xhtml#ch03fig3)). If not, try clicking the
    **Refresh** button in the upper-right corner of the Home tab.
  prefs: []
  type: TYPE_NORMAL
- en: By installing Qt console in each environment, you’ll be able to import and use
    other packages in that environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing and Launching the Jupyter Qt Console Using the CLI**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the Jupyter Qt console in a new environment using the CLI rather
    than Anaconda Navigator, first open Anaconda Prompt (in Windows) or a terminal
    (in macOS and Linux) and activate the conda environment. Let’s do this for *my_first_env*,
    created in the last chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use conda to install the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice `PyQt` in the list of packages to be installed. This library enables
    the use of graphics in the same window as code and explains the “Qt” in Jupyter
    Qt console. Enter Y when prompted to complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the program, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If the console doesn’t appear automatically, check your task bar. Later, if
    you want to update the app, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you have both Navigator and Anaconda Prompt (or the Terminal) open at the
    same time, and are working between them, you’ll need to click the Refresh button
    on the Navigator Home screen after using conda to install or remove packages.
    This will update the Install and Launch buttons on the Navigator app tiles to
    the correct state.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Qt Console Controls**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Qt console is *interactive*, which means that it behaves like an electronic
    calculator. Any instructions you enter will be run immediately. In fact, you can
    use the console as a calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the console marks input versus output and includes line numbers.
    Although you can’t see it in a black and white book, the Qt console also uses
    different colors to distinguish among keywords, comments, error messages, and
    so on. Called *syntax highlighting*, this color-coding helps you to visually categorize
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: You can also choose a light or dark background. Indeed, this would be a good
    time to play with some of the screen configuration choices to see which one you
    like best.
  prefs: []
  type: TYPE_NORMAL
- en: '***Choosing a Syntax Style***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the top of the Jupyter Qt console window, click **View** ▸ **Syntax Style**.
    You’ll see a list of around 36 style types, including the popular `emacs`, `vim`,
    and `vs` styles. Choose one and then enter the code you see in [Figure 3-4](ch03.xhtml#ch03fig4),
    which will let you see some of the theme’s color choices. This book uses the `default`
    syntax style unless noted otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: To compare styles, open new tabs using **File** ▸ **New Tab with New kernel**.
    Then use **Window** ▸ **Rename Current Tab** to name the tab for the style currently
    on display (such as “Monokai” in [Figure 3-4](ch03.xhtml#ch03fig4)). You can copy
    the code from one tab to the next to see the highlighting changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-4: The Monokai syntax style*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you start Jupyter Qt console from the command line, you can specify a style
    at the same time. For example, to choose Monokai, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Of course, there’s no need to specify the `default` style.
  prefs: []
  type: TYPE_NORMAL
- en: It’s even possible to configure the console and set your own style (see “Colors
    and Highlighting” and “Fonts” at *[https://qtconsole.readthedocs.io/_/downloads/en/stable/pdf/](https://qtconsole.readthedocs.io/_/downloads/en/stable/pdf/)*).
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Keyboard Shortcuts***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Jupyter Qt console supports keyboard shortcuts, or *keybindings*, including
    the familiar CTRL-C and CTRL-V for copy and paste, respectively ([Table 3-1](ch03.xhtml#ch03tab1)).
    You can launch a list of the keybindings by clicking **Help** ▸ **Show QtConsole
    help**. To exit help, use the ESC key.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 3-1:** Some Common Keybindings Available in Jupyter Qt Console'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keybinding** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-C | Copy highlighted text to clipboard without prompts |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-SHIFT-C | Copy highlighted text to clipboard with prompts |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-V | Paste text from clipboard |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-Z | Undo |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-SHIFT-Z | Redo |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-S | Save to HTML/XHTML |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-L | Clear terminal |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-A | Go to beginning of line |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-E | Go to end of line |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-U | Delete from cursor to the beginning of the line |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-K | Delete from cursor to the end of the line |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-P | Previous line (like up arrow) |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-N | Next line (like down arrow) |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-F | Forward (like right arrow) |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-B | Back (like left arrow) |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-D | Delete next character or exit if input is empty |'
  prefs: []
  type: TYPE_TB
- en: '| ALT-D | Delete next word |'
  prefs: []
  type: TYPE_TB
- en: '| ALT-BACKSPACE | Delete previous word |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-. | Force kernel to restart |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-+ | Increase font size |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-hyphen | Decrease font size |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-T | Open new tab with new kernel |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-SHIFT-P | Print |'
  prefs: []
  type: TYPE_TB
- en: '| F11 | Toggle full screen mode |'
  prefs: []
  type: TYPE_TB
- en: '| CTRL-R | Rename current tab |'
  prefs: []
  type: TYPE_TB
- en: '| ALT-R | Rename window |'
  prefs: []
  type: TYPE_TB
- en: Among the more useful shortcuts are the up and down arrow keys. These let you
    cycle through lines you’ve already entered to use them again.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Tabs and Kernels***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Jupyter Qt console supports multiple tabs, which you can open from the **File**
    menu. You must select a kernel option, which is the active “computational engine”
    that executes the code. There are three choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New tab with new kernel** Opens a new tab with a new IPython kernel.'
  prefs: []
  type: TYPE_NORMAL
- en: '**New tab with same kernel** Creates a child of a parent kernel loaded on a
    particular tab. Objects initialized on the parent tab will be accessible in both
    tabs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**New tab with existing kernel** Opens a new tab and lets you choose from kernels
    other than IPython.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Printing and Saving***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’re one of those “old-school” people who likes to print programs to paper
    and edit them with a red pen, you’ll like the **File** ▸ **Print** command, which
    will produce a hardcopy of your code as it appears in the console.
  prefs: []
  type: TYPE_NORMAL
- en: You can save the Qt console session as an HTML or XHTML file using **File**
    ▸ **Save to HTML/XHTML**. If you have any inline figures or images, you can choose
    to write them to an external PNG file. PNG images can be either saved in an external
    folder or inlined to create a larger but more portable file. In Windows, the external
    folder, named *ipython_files*, is stored beneath the HTML file location.
  prefs: []
  type: TYPE_NORMAL
- en: With the XHTML option, your figures will be inlined as SVG files. To switch
    the format of inline figures from the default PNG format to SVG, see “Saving and
    Printing” at *[https://qtconsole.readthedocs.io/](https://qtconsole.readthedocs.io/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Qt console is meant for interactive work, it’s possible to copy
    code from the saved HTML/XHTML file or from an external text editor into the console
    to run it again. You’ll need to strip out any output lines, however, and you’ll
    lose the line number formatting (compare [Figure 3-5](ch03.xhtml#ch03fig5) to
    [Figure 3-1](ch03.xhtml#ch03fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-5: Code from an HTML file copied and run again in a new Qt console
    session*'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `%load` magic command to take any script, such as a text
    file or existing Python file, and paste its contents as your next input in the
    Qt console. You then can edit it or execute it as is.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*A magic command is a special IPython enhancement added over normal Python
    code that facilitates common tasks such as loading a file. Line magic commands,
    as used in the Qt console, are prefixed by the percent symbol (`%`).*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how the `%load` command works, open the text editor for your platform
    and enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `print()` function is a built-in Python routine (mini-program) that prints
    output to the screen. We look at functions in greater detail in [Chapter 11](ch11.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Save this somewhere as *test.py* or *test.txt*. In the Qt console, type %load
    plus the path to your file, as with my example in [Figure 3-6](ch03.xhtml#ch03fig6).
    Press ENTER to load the file, and again to execute the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-6: Using the %load magic command to load and execute code from a
    text file*'
  prefs: []
  type: TYPE_NORMAL
- en: The `%load` command can also load code from other sources such as a URL.
  prefs: []
  type: TYPE_NORMAL
- en: A subset of commonly used magic commands are listed in [Table 3-2](ch03.xhtml#ch03tab2).
    You can read more about them at *[https://ipython.readthedocs.io/en/stable/interactive/magics.html](https://ipython.readthedocs.io/en/stable/interactive/magics.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from this example, you don’t need a fancy tool to write a Python
    program; a simple notepad application will suffice. But you can do better. Text
    editors dedicated to programming such as Emacs, Vim, IDLE, Notepad++, Sublime
    Text, and many others have built-in functionality that helps you code much more
    efficiently. We look at Spyder’s text editor in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 3-2:** Common Line Magic Commands'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `%cd` | Change the current working directory |'
  prefs: []
  type: TYPE_TB
- en: '| `%cls (or %clear)` | Clear the screen |'
  prefs: []
  type: TYPE_TB
- en: '| `%conda` | Run the conda package manager within the current kernel |'
  prefs: []
  type: TYPE_TB
- en: '| `%load` | Load code into current frontend |'
  prefs: []
  type: TYPE_TB
- en: '| `%lsmagic` | List the currently available magic functions (ESC to exit) |'
  prefs: []
  type: TYPE_TB
- en: '| `%matplotlib qt` | Display Matplotlib plots in interactive Qt window versus
    inline |'
  prefs: []
  type: TYPE_TB
- en: '| `%pprint` | Toggle pretty printing on/off |'
  prefs: []
  type: TYPE_TB
- en: '| `%precision` | Set floating-point precision for pretty printing |'
  prefs: []
  type: TYPE_TB
- en: '| `%pwd` | Return the current working directory path |'
  prefs: []
  type: TYPE_TB
- en: '| `%quickref` | Display reference material for magic functions (ESC to exit)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `%reset` | Remove all variables from the session memory |'
  prefs: []
  type: TYPE_TB
- en: '| `%timeit` | Time the execution of a Python statement or expression |'
  prefs: []
  type: TYPE_TB
- en: '| `%MAGIC?` | Adding a “?” behind a magic command displays its docstring |'
  prefs: []
  type: TYPE_TB
- en: '***Multiline Editing***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Multiline editing* is a useful feature that’s not available in terminals but
    is supported by Qt console. It lets you enter multiple lines without executing
    them by using CTRL-ENTER in place of ENTER.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This book uses Windows conventions. macOS users should substitute the COMMAND
    key for CONTROL, and the OPTION key for ALT when using keyboard shortcuts.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely at the code in [Figure 3-1](ch03.xhtml#ch03fig1), you’ll
    notice that Line 4 looks odd. The second line is not numbered; instead, it’s three
    dots precede it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Because I pressed CTRL-ENTER after typing Line 4, the line didn’t execute. As
    a result, I was able to fully define the chart before drawing it. Had I entered
    and executed each of these lines independently, I would’ve gotten the unacceptable
    results shown in [Figure 3-7](ch03.xhtml#ch03fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-7: Executing each line individually causes the chart to plot without
    data*'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, at any point in a multiline block, you can force its execution
    (without having to go to the bottom) by using SHIFT-ENTER.
  prefs: []
  type: TYPE_NORMAL
- en: Multiline editing is a convenient feature that distinguishes Jupyter Qt console
    from more basic interpreters. It’s wonderful for short code snippets, but as your
    programs become longer, you’ll want the efficiency and persistence of a true text
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Jupyter Qt console is a lightweight application for writing code snippets,
    quickly exploring datasets and testing ideas, and working through coding tutorials.
    For writing large persistent programs, you’ll want to use other coding tools such
    as Jupyter Notebook, JupyterLab, or Spyder.
  prefs: []
  type: TYPE_NORMAL
