["```py\n>>> simplelist = [1, 2, 3]\n```", "```py\n>>> simplelist[0]\n1\n>>> simplelist[1]\n2\n>>> simplelist[2]\n3\n```", "```py\n>>> stringlist = ['a string','b string','c string']\n>>> stringlist[0]\n'a string'\n>>> stringlist[1]\n'b string'\n>>> stringlist[2]\n'c string'\n```", "```py\n>>> emptylist = []\n```", "```py\n➊ >>> emptylist\n   []\n➋ >>> emptylist.append(1)\n   >>> emptylist\n   [1]\n➌ >>> emptylist.append(2)\n   >>> emptylist\n➍ [1, 2]\n```", "```py\n>>> simpletuple = (1, 2, 3)\n```", "```py\n>>> simpletuple[0]\n1\n\n>>> simpletuple[1]\n2\n>>> simpletuple[2]\n3\n```", "```py\n>>> l = [1, 2, 3]\n>>> for item in l:\n        print(item)\n```", "```py\n1\n2\n3\n```", "```py\n>>> l = [1, 2, 3]\n>>> for index, item in enumerate(l):\n        print(index, item)\n```", "```py\n0 1\n1 2\n2 3\n```", "```py\n>>> x_numbers = [1, 2, 3]\n>>> y_numbers = [2, 4, 6]\n```", "```py\n>>> from pylab import plot, show\n>>> plot(x_numbers, y_numbers)\n[<matplotlib.lines.Line2D object at 0x7f83ac60df10>]\n```", "```py\n>>> show()\n```", "```py\n>>> plot(x_numbers, y_numbers, marker='o')\n```", "```py\n>>> plot(x_numbers, y_numbers, 'o')\n[<matplotlib.lines.Line2D object at 0x7f2549bc0bd0>]\n```", "```py\n>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\n>>> plot(nyc_temp, marker='o')\n[<matplotlib.lines.Line2D object at 0x7f2549d52f90>]\n```", "```py\n>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\n>>> years = range(2000, 2013)\n>>> plot(years, nyc_temp, marker='o')\n[<matplotlib.lines.Line2D object at 0x7f2549a616d0>]\n>>> show()\n```", "```py\n>>> nyc_temp_2000 = [31.3, 37.3, 47.2, 51.0, 63.5, 71.3, 72.3, 72.7, 66.0, 57.0, 45.3, 31.1]\n>>> nyc_temp_2006 = [40.9, 35.7, 43.1, 55.7, 63.1, 71.0, 77.9, 75.8, 66.6, 56.2, 51.9, 43.6]\n>>> nyc_temp_2012 = [37.3, 40.9, 50.9, 54.8, 65.1, 71.0, 78.8, 76.7, 68.8, 58.0, 43.9, 41.5]\n```", "```py\n>>> months = range(1, 13)\n>>> plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)\n[<matplotlib.lines.Line2D object at 0x7f2549c1f0d0>, <matplotlib.lines.Line2D\nobject at 0x7f2549a61150>, <matplotlib.lines.Line2D object at 0x7f2549c1b550>]\n```", "```py\n>>> plot(months, nyc_temp_2000)\n[<matplotlib.lines.Line2D object at 0x7f1e51351810>]\n>>> plot(months, nyc_temp_2006)\n[<matplotlib.lines.Line2D object at 0x7f1e5ae8e390>]\n>>> plot(months, nyc_temp_2012)\n[<matplotlib.lines.Line2D object at 0x7f1e5136ccd0>]\n>>> show()\n```", "```py\n>>> plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)\n[<matplotlib.lines.Line2D object at 0x7f2549d6c410>, <matplotlib.lines.Line2D\nobject at 0x7f2549d6c9d0>, <matplotlib.lines.Line2D object at 0x7f2549a86850>]\n```", "```py\n>>> from pylab import legend\n>>> legend([2000, 2006, 2012])\n<matplotlib.legend.Legend object at 0x7f2549d79410>\n```", "```py\n>>> show()\n```", "```py\n>>> from pylab import plot, show, title, xlabel, ylabel, legend\n>>> plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)\n[<matplotlib.lines.Line2D object at 0x7f2549a9e210>, <matplotlib.lines.Line2D\nobject at 0x7f2549a4be90>, <matplotlib.lines.Line2D object at 0x7f2549a82090>]\n>>> title('Average monthly temperature in NYC')\n<matplotlib.text.Text object at 0x7f25499f7150>\n>>> xlabel('Month')\n<matplotlib.text.Text object at 0x7f2549d79210>\n>>> ylabel('Temperature')\n<matplotlib.text.Text object at 0x7f2549b8b2d0>\n\n>>> legend([2000, 2006, 2012])\n<matplotlib.legend.Legend object at 0x7f2549a82910>\n```", "```py\n>>> nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]\n>>> plot(nyc_temp, marker='o')\n[<matplotlib.lines.Line2D object at 0x7f3ae5b767d0>]\n```", "```py\n>>> from pylab import axis\n>>> axis()\n(0.0, 12.0, 53.0, 57.5)\n```", "```py\n>>> axis(ymin=0)\n(0.0, 12.0, 0, 57.5)\n```", "```py\n   '''\n   Simple plot using pyplot\n   '''\n\n➊ import matplotlib.pyplot\n\n➋ def create_graph():\n       x_numbers = [1, 2, 3]\n       y_numbers = [2, 4, 6]\n\n       matplotlib.pyplot.plot(x_numbers, y_numbers)\n       matplotlib.pyplot.show()\n\n   if __name__ == '__main__':\n       create_graph()\n```", "```py\n'''\nSimple plot using pyplot\n'''\nimport matplotlib.pyplot as plt\n\ndef create_graph():\n    x_numbers = [1, 2, 3]\n    y_numbers = [2, 4, 6]\n    plt.plot(x_numbers, y_numbers)\n    plt.show()\n\nif __name__ == '__main__':\n    create_graph()\n```", "```py\n>>> from pylab import plot, savefig\n>>> x = [1, 2, 3]\n>>> y = [2, 4, 6]\n>>> plot(x, y)\n>>> savefig('mygraph.png')\n```", "```py\n>>> savefig('C:\\mygraph.png')\n```", "```py\n   '''\n   The relationship between gravitational force and\n   distance between two bodies\n   '''\n\n   import matplotlib.pyplot as plt\n\n   # Draw the graph\n   def draw_graph(x, y):\n       plt.plot(x, y, marker='o')\n       plt.xlabel('Distance in meters')\n\n       plt.ylabel('Gravitational force in newtons')\n       plt.title('Gravitational force and distance')\n       plt.show()\n\n   def generate_F_r():\n       # Generate values for r\n➊     r = range(100, 1001, 50)\n       # Empty list to store the calculated values of F\n       F = []\n\n       # Constant, G\n       G = 6.674*(10**-11)\n       # Two masses\n       m1 = 0.5\n       m2 = 1.5\n\n       # Calculate force and add it to the list, F\n➋     for dist in r:\n           force = G*(m1*m2)/(dist**2)\n           F.append(force)\n\n       # Call the draw_graph function\n➌     draw_graph(r, F)\n\n   if __name__=='__main__':\n       generate_F_r()\n```", "```py\n   '''\n   Generate equally spaced floating point\n   numbers between two given values\n   '''\n\n   def frange(start, final, increment):\n\n       numbers = []\n➊     while start < final:\n➋         numbers.append(start)\n           start = start + increment\n\n       return numbers\n```", "```py\n   '''\n   Draw the trajectory of a body in projectile motion\n   '''\n\n   from matplotlib import pyplot as plt\n   import math\n\n   def draw_graph(x, y):\n       plt.plot(x, y)\n       plt.xlabel('x-coordinate')\n       plt.ylabel('y-coordinate')\n       plt.title('Projectile motion of a ball')\n\n   def frange(start, final, interval):\n\n       numbers = []\n       while start < final:\n           numbers.append(start)\n           start = start + interval\n\n       return numbers\n\n   def draw_trajectory(u, theta):\n\n➊     theta = math.radians(theta)\n       g = 9.8\n\n       # Time of flight\n➋     t_flight = 2*u*math.sin(theta)/g\n       # Find time intervals\n       intervals = frange(0, t_flight, 0.001)\n\n       # List of x and y coordinates\n       x = []\n       y = []\n➌     for t in intervals:\n           x.append(u*math.cos(theta)*t)\n           y.append(u*math.sin(theta)*t - 0.5*g*t*t)\n\n       draw_graph(x, y)\n\n   if __name__ == '__main__':\n➍     try:\n           u = float(input('Enter the initial velocity (m/s): '))\n           theta = float(input('Enter the angle of projection (degrees): '))\n       except ValueError:\n           print('You entered an invalid input')\n       else:\n           draw_trajectory(u, theta)\n           plt.show()\n```", "```py\nEnter the initial velocity (m/s): 25\nEnter the angle of projection (degrees): 60\n```", "```py\n   if __name__ == '__main__':\n\n       # List of three different initial velocities\n➊     u_list = [20, 40, 60]\n       theta = 45\n       for u in u_list:\n           draw_trajectory(u, theta)\n\n       # Add a legend and show the graph\n➋     plt.legend(['20', '40', '60'])\n       plt.show()\n```", "```py\n   '''\n   Quadratic function calculator\n   '''\n\n   # Assume values of x\n➊ x_values = [-1, 1, 2, 3, 4, 5]\n➋ for x in x_values:\n       # Calculate the value of the quadratic function\n       y = x**2 + 2*x + 1\n       print('x={0} y={1}'.format(x, y))\n```", "```py\nx=-1 y=0\nx=1 y=4\nx=2 y=9\n\nx=3 y=16\nx=4 y=25\nx=5 y=36\n```", "```py\nHow many trajectories? 3\nEnter the initial velocity for trajectory 1 (m/s): 45\nEnter the angle of projection for trajectory 1 (degrees): 45\nEnter the initial velocity for trajectory 2 (m/s): 60\nEnter the angle of projection for trajectory 2 (degrees): 45\nEnter the initial velocity for trajectory(m/s) 3: 45\nEnter the angle of projection for trajectory(degrees) 3: 90\n```", "```py\nEnter the number of categories: 4\nEnter category: Food\nExpenditure: 70\n\nEnter category: Transportation\nExpenditure: 35\nEnter category: Entertainment\nExpenditure: 30\nEnter category: Phone/Internet\nExpenditure: 30\n```", "```py\n   '''\n   Example of drawing a horizontal bar chart\n   '''\n   import matplotlib.pyplot as plt\n   def create_bar_chart(data, labels):\n       # Number of bars\n       num_bars = len(data)\n       # This list is the point on the y-axis where each\n       # Bar is centered. Here it will be [1, 2, 3...]\n➊     positions = range(1, num_bars+1)\n➋     plt.barh(positions, data, align='center')\n       # Set the label of each bar\n       plt.yticks(positions, labels)\n       plt.xlabel('Steps')\n       plt.ylabel('Day')\n       plt.title('Number of steps walked')\n       # Turns on the grid which may assist in visual estimation\n       plt.grid(\n       plt.show()\n\n   if __name__ == '__main__':\n       # Number of steps I walked during the past week\n       steps = [6534, 7000, 8900, 10786, 3467, 11045, 5095]\n       # Corresponding days\n       labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n       create_bar_chart(steps, labels)\n```", "```py\ndef fibo(n):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    # n > 2\n    a = 1\n    b = 1\n    # First two members of the series\n    series = [a, b]\n    for i in range(n):\n        c = a + b\n        series.append(c)\n        a = b\n        b = c\n\n    return series\n```"]