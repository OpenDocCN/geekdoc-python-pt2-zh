- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Your Workbench
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你的工作台
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Your development environment is a major factor in how productive you’ll be in
    a language. Instead of contenting yourself with a bare-bones default shell, you’ll
    want to assemble a development environment worthy of any production-level project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你的开发环境是决定你在编程语言中工作效率的重要因素。与其满足于一个简单的默认终端，你应该搭建一个值得用于任何生产级项目的开发环境。
- en: A good Python development environment usually consists of the language interpreter,
    the pip package manager, a *virtual environment*, a Python-oriented code editor,
    and one or more *static analyzers* to check your code for errors and problems.
    I’ll discuss each of these in this chapter. I’ll also introduce the style conventions
    common in Python and round out the chapter with a guided tour of the most common
    Python integrated development environments (IDEs).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的 Python 开发环境通常包含语言解释器、pip 包管理工具、*虚拟环境*、一个以 Python 为导向的代码编辑器，以及一个或多个*静态分析器*，用来检查代码中的错误和问题。我将在本章中详细介绍这些内容。我还会介绍
    Python 中常见的编码风格规范，并在最后对最常见的 Python 集成开发环境（IDE）进行一次实用的导览。
- en: Installing Python
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Before you can do anything, you have to install Python itself, along with a
    couple of essential tools. As you know from Chapter 1, Python is an interpreted
    language, so you’ll need to install its *interpreter*. You must also install pip,
    the Python package manager, so you can install additional Python tools and libraries.
    The exact steps for setup depend on your platform, but I will cover the major
    platforms here.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始任何操作之前，你需要安装 Python 及一些必要的工具。如同第一章所提到的，Python 是一种解释型语言，所以你需要安装它的*解释器*。你还必须安装
    pip，这是 Python 的包管理工具，方便你安装其他 Python 工具和库。具体的安装步骤取决于你的平台，但我将在这里介绍主要平台的安装方式。
- en: In this book, I’m using Python 3.9, the latest version at the time of writing.
    If you’re reading this at a later date, just use the latest stable release of
    Python 3\. All the instructions should work the same. You need only replace the
    version number in the obvious ways on any commands run in the command line.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我使用的是 Python 3.9，这是写作时的最新版本。如果你在之后的日期阅读这本书，只需使用最新的 Python 3 稳定版本即可。所有的指令都应该一样适用。你只需在命令行中按照显而易见的方式替换版本号。
- en: This is merely a quick guide to installation. For the complete, official instructions,
    which cover many more situations and advanced options, see [https://docs.python.org/using/](https://docs.python.org/using/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅是一个快速安装指南。有关完整的官方安装说明，涵盖更多情况和高级选项，请参见[https://docs.python.org/using/](https://docs.python.org/using/)。
- en: Installing on Windows
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 上安装
- en: On Windows, Python is not generally installed by default, so you’ll need to
    download it yourself from [https://python.org/downloads/windows/](https://python.org/downloads/windows/)
    and run that installer. On the first screen of the installer, be sure you check
    the boxes for **Install the launcher for all users** and **Add Python to PATH**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，Python 通常不会默认安装，所以你需要从[https://python.org/downloads/windows/](https://python.org/downloads/windows/)下载并运行安装程序。在安装程序的第一屏，确保勾选**为所有用户安装启动器**和**将
    Python 添加到 PATH**。
- en: Python is also available through the Windows App Store. However, as of the date
    of my writing, this particular installation method is still officially considered
    unstable. I recommend downloading the official installer instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 也可以通过 Windows 应用商店进行安装。然而，截止到我写这篇书的时候，这种安装方式仍然被官方认为是不稳定的。我建议你还是下载官方安装程序进行安装。
- en: Installing on macOS
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装
- en: On macOS, you can use either MacPorts or Homebrew to install Python and pip.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，你可以使用 MacPorts 或 Homebrew 来安装 Python 和 pip。
- en: 'Use the following commands to install Python and pip with MacPorts, replacing
    the `38` with whatever version you want to download (removing the decimal point):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令通过 MacPorts 安装 Python 和 pip，将 `38` 替换为你想要下载的版本号（去掉小数点）：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, here’s the command to install both Python and pip in one step
    with Homebrew:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用以下命令通过 Homebrew 一步安装 Python 和 pip：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Use only one of the two methods described above.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用上述两种方法中的一种。
- en: Installing on Linux
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装
- en: If you’re running a Linux operating system, chances are that Python (`python3`)
    is installed by default, although the other tools you need may not be. (I’ll show
    you how to install Python anyway, just to be on the safe side.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Linux 操作系统，Python（`python3`）很可能已经默认安装，尽管你可能需要的其他工具未必已安装。（不过，为了安全起见，我会向你展示如何安装
    Python。）
- en: 'To install Python and pip on Ubuntu, Debian, or related, run this command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Ubuntu、Debian 或相关系统上安装 Python 和 pip，运行以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On Fedora, RHEL, or CentOS, you can run this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fedora、RHEL 或 CentOS 上，你可以运行以下命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On Arch Linux, run this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Arch Linux 上，运行以下命令：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For other distributions, you’ll need to search for the Python 3 and pip packages
    yourself.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他发行版，你需要自己搜索 Python 3 和 pip 的安装包。
- en: Installing from Source
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源码安装
- en: If you’re running a UNIX-like system, and if your system either has an outdated
    version of Python 3 in the system packages or lacks a package manager altogether,
    you can build Python from source. This is how I usually install the latest Python.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是类似 UNIX 的系统，并且系统中安装的 Python 3 版本过旧，或者根本没有包管理器，你可以从源码构建 Python。这就是我通常安装最新
    Python 的方式。
- en: Installing Dependencies
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: On macOS, there are some relatively complex considerations when it comes to
    installing Python’s build dependencies. You should consult the documentation at
    [https://devguide.python.org/setup/#macos-and-os-x](https://devguide.python.org/setup/#macos-and-os-x).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，安装 Python 构建依赖时有一些相对复杂的注意事项。你应该参考 [https://devguide.python.org/setup/#macos-and-os-x](https://devguide.python.org/setup/#macos-and-os-x)
    中的文档。
- en: On most Linux systems, you will need to make sure you have the development files
    for several libraries that Python relies upon. The best way to install these depends
    on your system and, more specifically, which package manager you use.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数 Linux 系统上，你需要确保安装了 Python 依赖的多个库的开发文件。安装这些文件的最佳方式取决于你的系统，具体来说，取决于你使用的包管理器。
- en: If you’re on a Linux distribution that uses the APT package manager—such as
    Ubuntu, Pop!_OS, Debian, or Linux Mint—then you should either check the box to
    enable Source Code as a source in your Software Sources or Software & Updates
    settings or make sure you have it included in your *sources.list* file. (The exact
    method depends on your system, and that topic is beyond the scope of this book.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 APT 包管理器的 Linux 发行版——例如 Ubuntu、Pop!_OS、Debian 或 Linux Mint——你应该勾选启用源代码作为软件源选项，或者确保它已经包含在你的
    *sources.list* 文件中。（具体方法取决于你的系统，这个话题超出了本书的范畴。）
- en: 'Then, run the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you get the message `Unable to find a source package for python3.9`, change
    the `9` to a lower (or higher) number until you find one that works. The dependencies
    for Python 3 don’t really change much between minor versions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到消息 `Unable to find a source package for python3.9`，请将 `9` 改为一个较低（或较高）的数字，直到找到一个可用的版本。Python
    3 的依赖项在次版本之间变化不大。
- en: 'If your Linux distribution uses the DNF package manager, such as if you’re
    on modern Fedora, RHEL, or CentOS, run the following commands:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Linux 发行版使用 DNF 包管理器，例如你使用的是现代版的 Fedora、RHEL 或 CentOS，运行以下命令：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you’re on an older version of Fedora or RHEL that uses the yum package manager,
    run the following commands:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是旧版本的 Fedora 或 RHEL，且使用的是 yum 包管理器，运行以下命令：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you’re on SUSE Linux, you’ll have to install the dependencies, including
    needed libraries, one by one. [Table 2-1](#table2-1) lists these dependencies.
    If you’re on another UNIX-based system, this list will be helpful, although you
    may need to change the package names or build the dependencies from source.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 SUSE Linux，你需要逐个安装依赖项，包括所需的库。[表 2-1](#table2-1) 列出了这些依赖项。如果你使用的是其他 UNIX
    系统，这个列表也会很有帮助，尽管你可能需要更改包名或从源码构建依赖项。
- en: 'Table 2-1: Python 3 Build Dependencies According to SUSE Linux'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-1：SUSE Linux 中的 Python 3 构建依赖项
- en: '| automake | intltool | netcfg |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| automake | intltool | netcfg |'
- en: '| fdupes | libbz2-devel | openssl-devel |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| fdupes | libbz2-devel | openssl-devel |'
- en: '| gcc | libexpat-devel | pkgconfig |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| gcc | libexpat-devel | pkgconfig |'
- en: '| gcc-c++ | libffi-devel | readline-devel |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| gcc-c++ | libffi-devel | readline-devel |'
- en: '| gcc-fortran | libnsl-devel | sqlite-devel |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| gcc-fortran | libnsl-devel | sqlite-devel |'
- en: '| gdbm-devel | lzma-devel | xz |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| gdbm-devel | lzma-devel | xz |'
- en: '| gettext-tools | make | zlib-devel |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| gettext-tools | make | zlib-devel |'
- en: '| gmp-devel | ncurses-devel |  |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| gmp-devel | ncurses-devel |  |'
- en: Downloading and Building Python
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 下载并构建 Python
- en: You can download the Python source as a Gzipped source tarball, which is a compressed
    file (*.tgz*), from [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/).
    I usually like to move this tarball file into a dedicated directory for Python
    source tarballs, especially as I tend to have multiple versions of Python at any
    one time. Within that directory, extract (uncompress) this file with `tar -xzvf
    Python-3.x.x.tgz`, substituting the name of the tarball you downloaded.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/)
    下载 Python 源代码的 Gzipped 源代码 tar 包，这是一个压缩文件（*.tgz*）。我通常喜欢将这个 tar 包文件移动到一个专门用于 Python
    源代码 tar 包的目录中，特别是因为我往往在任何时候都有多个版本的 Python。在该目录中，使用 `tar -xzvf Python-3.x.x.tgz`
    解压（解压缩）这个文件，记得替换您下载的 tar 包名称。
- en: 'Next, from within the extracted directory, run the following, ensuring that
    each command succeeds before running the next one:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在解压的目录中，运行以下命令，确保每个命令都成功执行后再运行下一个命令：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This should configure Python for normal use, ensure it won’t encounter any errors
    in the current environment, and then install it *alongside* any existing Python
    installations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该配置 Python 以供正常使用，确保它在当前环境中不会遇到任何错误，然后将其与任何现有的 Python 安装一起安装。
- en: Once the installation is complete, you can use Python right away.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以立即使用 Python。
- en: Meet the Interpreter
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认识解释器
- en: Now that you’ve installed that interpreter, you can run Python scripts and projects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了该解释器，可以运行 Python 脚本和项目。
- en: Interactive Session
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交互式会话
- en: 'The interpreter’s *interactive session* allows you to enter and run code in
    real time and see the outcomes. You can start an interactive session on the command
    line with this command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器的*交互式会话*允许您实时输入和运行代码，并查看结果。您可以通过命令行输入以下命令来启动交互式会话：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Although the above should work on Windows, the same as on any other system,
    the Python documentation recommends the following alternative on Windows instead:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管以上内容在 Windows 上应该也能正常工作，就像在任何其他系统上一样，但 Python 文档建议在 Windows 上使用以下替代方法：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Just to keep everything system-agnostic, I’ll use `python3` throughout the rest
    of this book.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持系统中立性，接下来我将在本书中统一使用 `python3`。
- en: 'When you start the interactive session, you should see something that looks
    similar to this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动交互式会话时，您应该看到类似于以下内容的界面：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Enter any Python code you want at the prompt `>`, and the interpreter will
    run it immediately. You can even enter multiline statements, such as conditional
    statements, and the interpreter will know more lines are expected before it runs
    the code. You’ll see the three-dot (`...`) prompt when the interpreter is waiting
    for more lines. When you’re done, press Enter on a blank line, and the interpreter
    will run the whole block:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符 `>` 处输入任何您想运行的 Python 代码，解释器会立即执行它。您甚至可以输入多行语句，比如条件语句，解释器会知道在运行代码之前还需要更多行。当解释器等待更多行时，您会看到三点（`...`）提示符。当您完成输入时，按下空白行上的回车键，解释器会运行整个代码块：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To quit the interactive session, run this command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出交互式会话，请运行以下命令：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The interactive session is useful for testing things out in Python, but not
    much else. You should know of its existence moving forward, but I won’t use it
    much in this book. Instead, you should be using a proper code editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式会话对于在 Python 中进行实验非常有用，但其他用途不多。您应该了解它的存在，但我在本书中不会频繁使用它。相反，您应该使用一个合适的代码编辑器。
- en: Running Python Files
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 Python 文件
- en: You write scripts and programs in a text or code editor. I’ll introduce several
    code editors and IDEs at the end of this chapter, but in the meantime, you can
    use your favorite text editor for writing your code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文本或代码编辑器中编写脚本和程序。我将在本章末介绍几种代码编辑器和 IDE，但在此之前，您可以使用您喜欢的文本编辑器来编写代码。
- en: 'Python code is written in *.py* files. To run a Python file (*myfile.py*, for
    example), you’d use this in the command line (*not* the interpreter):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python 代码写在 *.py* 文件中。要运行一个 Python 文件（例如 *myfile.py*），您应该在命令行中使用以下命令（*不是*在解释器中）：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Packages and Virtual Environments
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包和虚拟环境
- en: A *package* is a collection of code, which is analogous to a library in most
    other programming languages. Python is rather famous for being “batteries included,”
    since most things “just work” with a simple `import` statement. But if you need
    to do something beyond the basics, such as creating a snazzy user interface, you
    often have to install a package.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*软件包*是一个代码集合，类似于大多数其他编程语言中的库。Python 因其“自带电池”而闻名，因为大多数功能通过简单的`import`语句“自动工作”。但如果你需要做一些基础之外的事情，比如创建一个炫酷的用户界面，你通常需要安装一个软件包。'
- en: Thankfully, installing most third-party libraries is easy. Library authors bundle
    their libraries into packages, which can be installed using the handy little pip
    package manager tool that we installed earlier. I’ll cover that tool later.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，大多数第三方库的安装都很简单。库的作者将其库打包成软件包，可以使用我们之前安装的便捷小工具 pip 包管理器进行安装。我稍后会讲解这个工具。
- en: Using multiple third-party packages requires a bit of finesse. Some packages
    require other packages to be installed first. Certain packages have conflicts
    with other packages. You can also install specific versions of a package, depending
    on what exactly you need. Did I mention that some of the applications and operating
    system components on your computer rely on certain Python packages? This is why
    virtual environments exist.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个第三方软件包需要一些技巧。有些软件包需要先安装其他软件包。有些软件包与其他软件包存在冲突。你还可以根据需要安装软件包的特定版本。我有没有提到你计算机上的一些应用程序和操作系统组件依赖于某些
    Python 软件包？这就是虚拟环境存在的原因。
- en: A *virtual environment* is a sandbox where you can install only the Python packages
    you need for a particular project, without the risk of those packages clashing
    with those for another project (or your system). You create different little sandboxes
    for each project and install only the packages you want in it. Everything stays
    neatly organized. You never actually change what Python packages are installed
    on your system, so you avoid breaking important things that have nothing to do
    with your project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*虚拟环境*是一个沙盒，你可以只为特定项目安装所需的 Python 软件包，而不用担心这些软件包与其他项目（或你的系统）中的软件包发生冲突。你为每个项目创建不同的小沙盒，并只安装你需要的软件包。一切都井井有条。你从不真正更改系统中安装的
    Python 软件包，因此避免了破坏与项目无关的重要内容。'
- en: You may even create virtual environments that have nothing to do with a particular
    project. For example, I have a dedicated virtual environment for running random
    code files in Python 3.10, with a particular set of tools I use for finding problems.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以创建与特定项目无关的虚拟环境。例如，我有一个专门用于运行随机代码文件的虚拟环境，使用的是 Python 3.10 和我用来查找问题的特定工具集。
- en: Creating a Virtual Environment
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建虚拟环境
- en: Each virtual environment resides in a dedicated directory. Conventionally, we
    name this folder *env* or *venv*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每个虚拟环境都驻留在一个专用的目录中。通常，我们将这个文件夹命名为*env*或*venv*。
- en: For each project, I typically like to create a dedicated virtual environment
    inside the project folder. Python provides a tool called *venv* for this.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个项目，我通常喜欢在项目文件夹中创建一个专用的虚拟环境。Python 提供了一个名为*venv*的工具来实现这一点。
- en: If you use Git or another *version control system* *(VCS)* for tracking changes
    to your code, there’s an additional setup step I’ll get to in a moment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Git 或其他*版本控制系统*（*VCS*）来跟踪代码的变化，接下来会有一个额外的设置步骤，我稍后会讲解。
- en: 'To create the virtual environment with the name `venv` in the current working
    directory, run the following command in the command line:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在当前工作目录中创建名为 `venv` 的虚拟环境，请在命令行中运行以下命令：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The first `venv` ❶ is a command that creates a virtual environment, and the
    second `venv` ❷ is the desired path to the virtual environment. In this case,
    `venv` is just a relative path, creating a *venv/* directory in the current working
    directory. However, you could also use an absolute path, and you could call it
    whatever you want. For example, you could create a virtual environment called
    *myvirtualenv* in the */opt* directory of a UNIX system, like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`venv` ❶是创建虚拟环境的命令，第二个`venv` ❷是虚拟环境的目标路径。在这个例子中，`venv` 只是一个相对路径，在当前工作目录中创建一个*venv/*目录。但是，你也可以使用绝对路径，并且可以根据需要命名它。例如，你可以在
    UNIX 系统的*/opt*目录中创建一个名为*myvirtualenv*的虚拟环境，像这样：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note, I’m specifying `python3` here, although I can run this with whatever Python
    version I want to use, such as `python3.9 -m venv venv`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在这里指定了`python3`，虽然我可以使用任何我想用的 Python 版本来运行它，比如 `python3.9 -m venv venv`。
- en: 'If you use something older than Python 3.3, make sure you install your system’s
    `virtualenv` package and then use this command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Python 3.3 之前的版本，确保先安装系统的 `virtualenv` 包，然后使用以下命令：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now if you look at your working directory, you’ll notice that the directory
    *venv/* has been created.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你查看工作目录，你会发现已经创建了名为 *venv/* 的目录。
- en: Activating a Virtual Environment
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: To use your virtual environment, you need to activate it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用虚拟环境，你需要激活它。
- en: 'On UNIX-like systems, run this command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在类 UNIX 系统上，运行以下命令：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On Windows, run this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，运行以下命令：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Alternatively, if you use PowerShell on Windows, run this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你在 Windows 上使用 PowerShell，可以运行以下命令：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Some PowerShell users must first run `set-executionpolicy RemoteSigned` for
    virtual environments to work on Windows PowerShell. If you run into trouble, try
    this.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 PowerShell 用户在 Windows PowerShell 上使用虚拟环境时，必须首先运行 `set-executionpolicy RemoteSigned`。如果遇到问题，尝试一下这个。
- en: Like magic, you’re now using your virtual environment! You should see `(venv)`
    at the start of your command line prompt (not at the end), to indicate that you’re
    using a virtual environment named `venv`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就像魔法一样，你现在已经在使用虚拟环境！你应该会在命令行提示符的开头看到 `(venv)`，以表示你正在使用名为 `venv` 的虚拟环境。
- en: While inside your virtual environment, you can still access all the same files
    on your system that you use outside the virtual environment, but your environment
    *paths* will be overridden by the virtual environment. Practically speaking, any
    packages you install in the virtual environment are only usable there, and from
    the `venv`, the system-wide packages cannot be accessed unless you explicitly
    specify otherwise.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境内，你仍然可以访问系统上的所有文件，就像在虚拟环境外部一样，但你的环境*路径*会被虚拟环境覆盖。实际上，你在虚拟环境中安装的任何包只能在该环境中使用，从
    `venv` 中，除非你明确指定，否则无法访问系统范围的包。
- en: If you want the virtual environment to also see the system-wide packages, you
    can do so with a special flag, which has to be set when you first create the virtual
    environment. You can’t change this after the virtual environment is created.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望虚拟环境也能看到系统范围的包，可以通过一个特殊的标志来实现，这个标志必须在你首次创建虚拟环境时设置。创建虚拟环境后无法更改这一设置。
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Leaving a Virtual Environment
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 退出虚拟环境
- en: To get out of the virtual environment and back to reality . . . er, *ahem*,
    the system, you need a simple command.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出虚拟环境并回到现实中...呃，*咳咳*，回到系统，你需要一个简单的命令。
- en: 'You ready for this, UNIX users? Just run this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗，UNIX 用户？只需运行以下命令：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That really is it. The same works for Windows PowerShell users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。Windows PowerShell 用户也可以使用相同的方式。
- en: 'Things are only slightly more complicated on the Windows command line:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 命令行上，事情稍微复杂一点：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Still pretty painless. Remember, like with activation, if you named your virtual
    environment something else, you’d have to change the `venv` in that line accordingly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然相当简单。记住，和激活一样，如果你为虚拟环境取了其他名字，你需要相应地更改命令中的 `venv`。
- en: Introducing pip
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入 pip
- en: Most of us have great expectations for Python’s package system. Python’s package
    manager is *pip*, which usually makes package installation trivial, especially
    in virtual environments.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数人对 Python 的包管理系统有很高的期望。Python 的包管理器是 *pip*，通常使得包的安装变得非常简单，尤其是在虚拟环境中。
- en: System-Wide Packages
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统范围的包
- en: 'Remember, for any Python development work, you should almost always work in
    virtual environments. This will ensure that you’re always using the right packages
    for your work, without potentially messing up which packages (and versions thereof)
    are available to other programs on your computer. If you absolutely, positively
    know you want to install packages in your system-wide Python environment, you
    may use pip for that as well. First, make sure you are *not* working in a virtual
    environment, and then use this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，对于任何 Python 开发工作，你几乎总是应该在虚拟环境中工作。这将确保你始终使用适合你工作的正确包，而不会干扰计算机上其他程序可用的包（及其版本）。如果你非常确定要在系统范围的
    Python 环境中安装包，也可以使用 pip。首先，确保你*没有*在虚拟环境中工作，然后使用以下命令：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Replace the `command` with your pip commands, which I’ll cover next.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `command` 替换为你的 pip 命令，接下来我会讲解这个。
- en: Installing Packages
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装包
- en: 'To install a package, run `pip install` `package`. For example, to install
    PySide6 within an activated virtual environment, you’d use this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个包，运行 `pip install` `package`。例如，要在激活的虚拟环境中安装 PySide6，你可以使用以下命令：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you want to install a specific version of something, append two equal signs
    (`==`), followed by the desired version number (no spaces):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想安装某个特定版本的包，可以在包名后加上两个等号（`==`），然后是所需的版本号（不带空格）：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Bonus: you can even use operators like `>=`, to mean “at least this version
    or greater.” These are called *requirement specifiers*.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 额外功能：你甚至可以使用类似`>=`的运算符，表示“至少这个版本或更高”。这些被称为*需求说明符*。
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That line would install the latest version of PySide6 that is at least version
    `6.1.2`. This is really helpful if you want the most recent version of a package
    but also want to ensure you at least install a *minimum* version of a package
    (you might not). If it isn’t possible to install a version of the package that
    meets the requirement, pip will display an error message.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令将安装至少版本为`6.1.2`的最新版本的PySide6。如果你想要安装软件包的最新版本，但也想确保至少安装一个*最低*版本时，这非常有用（即使你不需要）。如果无法安装符合要求的版本，pip会显示错误信息。
- en: If you’re on a UNIX-like system, you may need to use `pip install "PySide6>=6.1.2"`
    instead, since `>` has another meaning in the shell.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是类UNIX系统，可能需要使用`pip install "PySide6>=6.1.2"`，因为在shell中，`>`有另外的含义。
- en: requirements.txt
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: requirements.txt
- en: You can save even more time for yourself and others by writing a *requirements.txt*
    file for your project. This file lists the packages your project needs. When creating
    a virtual environment, you and other users can install all the required packages
    with a single command, using this file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为你的项目编写*requirements.txt*文件，你可以为自己和他人节省更多时间。这个文件列出了你的项目所需的所有软件包。在创建虚拟环境时，你和其他用户可以通过这个文件用一条命令安装所有必需的软件包。
- en: 'To create this file, list the name of a pip package, as well as its version
    (if required), on each line. For example, one of my projects has a *requirements.txt*
    file like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个文件，列出每个软件包的名称以及版本（如果需要），每行一个。例如，我的一个项目有这样一个*requirements.txt*文件：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Listing 2-1: *requirements.txt*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '示例2-1: *requirements.txt*'
- en: 'Now anyone can install all those packages in one shot with this command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何人都可以通过以下命令一次性安装所有这些软件包：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: I’ll revisit *requirements.txt* in Chapter 18, when I cover packaging and distribution.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在第18章中再次提到*requirements.txt*，当我讲解打包和分发时。
- en: Upgrading Packages
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级软件包
- en: 'You can update an already-installed package with pip as well. For example,
    to update to the latest version of PySide6, run this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用pip更新已安装的软件包。例如，要更新到PySide6的最新版本，运行以下命令：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you have a *requirements.txt* file, you can also upgrade all your required
    packages at once:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个*requirements.txt*文件，你还可以一次性升级所有所需的软件包：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Removing Packages
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除软件包
- en: 'You can remove packages with this command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令删除软件包：
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Replace `package` with the package name.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将`package`替换为软件包名称。
- en: There is one minor wrinkle. Installing one package will also install any other
    packages it relies upon, which we call its *dependencies*. Uninstalling a package
    does not remove its dependencies, so you may need to go through and remove them
    yourself. This can get tricky, since multiple packages may share dependencies
    and you therefore risk breaking a separate package.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小问题。安装一个软件包时，它会同时安装所有依赖的其他软件包，我们称之为它的*依赖项*。卸载一个软件包并不会移除它的依赖项，因此你可能需要手动去移除它们。这可能会有些棘手，因为多个软件包可能共享依赖项，因此你可能会打破其他的软件包。
- en: Herein lies one more advantage of virtual environments. Once I’m in that sort
    of a pickle, I can delete the virtual environment, create a new one, and install
    only those packages I need.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是虚拟环境的另一个优势。一旦遇到这种情况，我可以删除虚拟环境，创建一个新的，只安装我需要的软件包。
- en: Finding Packages
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找软件包
- en: Great, so now you can install, upgrade, and remove things. But how do you even
    know what packages pip has to offer?
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在你可以安装、升级和删除软件包了。但你怎么知道pip有哪些可用的包呢？
- en: 'There are two ways to find out. The first is to use pip itself to run a search.
    Say you want a package for web scraping. Run this command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以查找。第一种是直接使用pip进行搜索。假设你想找一个网页抓取的包，运行以下命令：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: That will give you a whole ton of results to sift through, but it’s helpful
    at those times when you simply forget the name of a package.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这会给你带来一大堆结果需要筛选，但当你忘记一个软件包的名称时，它非常有帮助。
- en: If you want something a lot more browsable and informative, [https://pypi.org/](https://pypi.org/%20)
    is the official Python Package Index.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个更加易于浏览和信息丰富的界面，[https://pypi.org/](https://pypi.org/%20) 是官方的Python软件包索引。
- en: One Warning About pip . . .
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于pip的一个警告……
- en: Unless you have expertise in the full technical implications, ***never*** use
    `sudo pip` on a UNIX-like system! It can do so many bad things to your system
    installation—things that your system package manager cannot correct—that if you
    decide to use it, you will regret it for the remainder of your system’s lifetime.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你对所有技术细节有足够的了解，否则***绝对不要***在类 UNIX 系统中使用 `sudo pip`！它可能会对你的系统安装造成许多坏影响——这些问题是系统包管理器无法修复的——如果你决定使用它，你将会后悔直到系统的生命周期结束。
- en: Usually, when someone thinks they need to use `sudo pip`, they should really
    use `python3 -m pip` or `pip install --user` to install to their local user directory.
    Most other problems can be solved with virtual environments. Unless you’re an
    expert who fully understands what you’re doing and how to reverse it, don’t *ever*
    use `sudo pip`!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当有人认为他们需要使用 `sudo pip` 时，他们实际上应该使用 `python3 -m pip` 或 `pip install --user`
    来安装到本地用户目录。大多数其他问题可以通过虚拟环境来解决。除非你是完全理解自己所做的事情以及如何恢复的专家，否则*永远*不要使用 `sudo pip`！
- en: Virtual Environments and Git
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟环境与 Git
- en: Working with virtual environments and a VCS, like Git, can be tricky. Within
    a virtual environment’s directory are the *actual packages* you installed with
    pip. Those would clutter up your VCS repository with big, unnecessary files, and
    you can’t necessarily copy a virtual environment folder from one computer to another
    and expect it to work anyway.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟环境和版本控制系统（如 Git）一起工作可能会有些棘手。在虚拟环境目录内包含的是你通过 pip 安装的 *实际包*。这些包会让你的 VCS 仓库中充满冗余的大文件，而且你不一定能够将虚拟环境文件夹从一台计算机复制到另一台计算机并期望它能正常工作。
- en: 'Thus, you *don’t* want to track these files in your VCS. There are two solutions:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你*不*希望在 VCS 中跟踪这些文件。有两种解决方案：
- en: Only create virtual environments outside of your repository.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只在仓库外部创建虚拟环境。
- en: Untrack the virtual environment directory in the VCS.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在版本控制系统中不跟踪虚拟环境目录。
- en: There are arguments in favor of both rules, but which one you should use really
    depends on your project, environment, and particular needs.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对这两个规则都有支持的论点，但你应该使用哪个，实际上取决于你的项目、环境和具体需求。
- en: 'If you’re using Git, create or edit a file called *.gitignore* in the root
    directory of your repository. Add this line somewhere in it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Git，在你的代码仓库根目录下创建或编辑一个名为 *.gitignore* 的文件。在文件的某个位置添加以下这一行：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Listing 2-2: *.gitignore*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-2: *.gitignore*'
- en: If you used a different name for your virtual environment, change that line
    to match. If you’re using a different VCS, like Subversion or Mercurial, check
    the documentation to see how to ignore a directory like *venv*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为虚拟环境使用了不同的名称，请将那一行修改为相应的名称。如果你使用的是其他版本控制系统，如 Subversion 或 Mercurial，查阅相关文档以了解如何忽略像
    *venv* 这样的目录。
- en: Conventionally, every developer who clones your repository will build their
    own virtual environment, probably using that *requirements.txt* file you provided.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 按惯例，每个克隆你仓库的开发者都会构建自己的虚拟环境，可能会使用你提供的那个 *requirements.txt* 文件。
- en: Even if you plan to place your virtual environments outside of the repository,
    it’s good to use your *.gitignore* file, just as a little extra insurance. Best
    VCS practice is to handpick which files to commit, but mistakes happen. Since
    *venv* is one of the most conventional names for a virtual environment directory,
    adding it to the *.gitignore* at least helps prevent some accidental commits.
    If your team has other standard names for virtual environments, you might consider
    adding those as well.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你计划将虚拟环境放在仓库外部，使用 *.gitignore* 文件仍然是一个很好的保险措施。最好的 VCS 做法是手动挑选需要提交的文件，但难免会犯错。由于
    *venv* 是虚拟环境目录的最常见名称之一，将它添加到 *.gitignore* 至少有助于避免一些意外提交。如果你的团队有其他标准的虚拟环境目录名称，你也可以考虑将它们加入到文件中。
- en: The Whole Shebang
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整的 Shebang
- en: Many users and developers who might be running your code will also be using
    virtual environments. Yet all of this can come apart at the seams very easily
    if the very first line of your Python file is wrong.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 许多可能运行你代码的用户和开发者也会使用虚拟环境。但如果你的 Python 文件的第一行有问题，这一切很容易就会出错。
- en: 'I’m talking about the *shebang*, a special command at the top of a Python file,
    by which you can make that file directly executable:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我在说的是 *shebang*，它是一个位于 Python 文件顶部的特殊命令，通过它你可以让这个文件直接可执行：
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Listing 2-3: *hello_world.py*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-3: *hello_world.py*'
- en: 'The shebang (short for haSH-BANG, or `#!`) ❶ provides the path to the Python
    interpreter. While it’s optional, I strongly recommend including it in your code,
    as it means the file can be marked as executable and run directly, like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: shebang（来自 haSH-BANG 或 `#!`）❶ 提供了 Python 解释器的路径。虽然它是可选的，但我强烈建议在代码中包含它，因为这意味着文件可以标记为可执行并直接运行，如下所示：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is helpful, but as I’ve hinted before, one must be careful with shebangs.
    A shebang tells the computer where to find the exact Python interpreter to use,
    so the wrong shebang can break out of the confines of a virtual environment or
    even point to a version of the interpreter that isn’t installed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有帮助，但正如我之前提到的，使用 shebang 时必须小心。shebang 告诉计算机在哪里找到正确的 Python 解释器，因此错误的 shebang
    可能会打破虚拟环境的限制，甚至指向一个未安装的解释器版本。
- en: 'You may have seen this kind of shebang in the wild:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在实际环境中见过这种类型的 shebang：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Listing 2-4: *shebang.py:1a*'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-4: *shebang.py:1a*'
- en: That line is terribly wrong, because it forces the computer to use a particular
    system-wide copy of Python. Again, that dismisses the entire purpose of a virtual
    environment.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 那一行是完全错误的，因为它强迫计算机使用特定的系统范围内的 Python 副本。再次强调，这会忽略虚拟环境的全部目的。
- en: 'Instead, you should always use this shebang for any Python file that only runs
    with Python 3:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你应该始终使用这个 shebang 来处理仅在 Python 3 中运行的任何 Python 文件：
- en: '[PRE38]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Listing 2-5: *shebang.py:1b*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-5: *shebang.py:1b*'
- en: 'If you happen to have a script which runs in *both* Python 2 and Python 3,
    use this shebang instead:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你恰好有一个同时在 *Python 2 和 Python 3* 中运行的脚本，请使用这个 shebang：
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Listing 2-6: *shebang.py:1c*'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-6: *shebang.py:1c*'
- en: The rules about shebangs and how they are handled are officially outlined in
    PEP 394 (for UNIX-like systems) and PEP 397 (for Windows systems). Regardless
    of which system you develop for, it’s good to understand the implications of shebangs
    in both UNIX and Windows.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 shebang 的规则及其处理方式在 PEP 394（针对 UNIX 类系统）和 PEP 397（针对 Windows 系统）中正式列出。无论你为哪个系统开发，理解
    shebang 在 UNIX 和 Windows 中的含义都是很重要的。
- en: File Encoding
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件编码
- en: Since Python 3.1, all Python files have used the *UTF-8 encoding*, allowing
    the interpreter to use all of the characters in Unicode. (Prior to that version,
    the default was to use the old ASCII encoding.)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 3.1 开始，所有 Python 文件都使用 *UTF-8 编码*，允许解释器使用 Unicode 中的所有字符。（在此版本之前，默认使用旧的
    ASCII 编码。）
- en: If you need to use a different encoding system, instead of the default UTF-8,
    you need to tell the Python interpreter that outright.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要使用与默认的 UTF-8 不同的编码系统，你需要明确告知 Python 解释器。
- en: 'For example, to use Latin-1 encoding in a Python file, include this line at
    the top of your file, right below the shebang. To work, it must be on the first
    or second line—that’s where the interpreter looks for this information:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在 Python 文件中使用 Latin-1 编码，需在文件顶部的 shebang 下面包含这一行。为了使其生效，它必须位于第一行或第二行——这是解释器查找这些信息的位置：
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If you want another encoding system, replace `latin-1` with whatever you need.
    If you specify an encoding that Python doesn’t recognize, it will throw an error.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要另一个编码系统，将 `latin-1` 替换为你所需的任何编码。如果你指定了 Python 无法识别的编码，它将抛出错误。
- en: 'Although the preceding is the conventional way to specify encoding, there are
    two other valid ways to write the above comment. You can use this form, without
    the hard-to-remember `-*-`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前述是指定编码的传统方式，但还有两种有效的方式可以编写上述注释。你可以使用这种形式，而无需记住复杂的 `-*-`：
- en: '[PRE41]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Or you can use this longer but more English-like form:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用这种更长但更像英语的形式：
- en: '[PRE42]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Whatever you use, it must be *exactly* as shown above, except for swapping `latin-1`
    for whatever encoding you want. For this reason, the first or second forms are
    preferred.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用什么，它必须与上面显示的*完全相同*，除了将 `latin-1` 替换为你想要的编码。因此，首选第一种或第二种形式。
- en: To learn more, read PEP 263, which defined this feature.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息，请阅读定义此功能的 PEP 263。
- en: Most of the time, you’ll be fine using the default UTF-8 encoding anyway; if
    you need something else, now you know how to inform the interpreter.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，你使用默认的 UTF-8 编码就可以了；如果需要其他编码，现在你知道如何告知解释器了。
- en: A Few Extra Virtual Environment Tricks
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些额外的虚拟环境技巧
- en: 'As you get used to using virtual environments and pip, you’ll pick up additional
    tricks and tools to make the whole process easier. Here are a few of the more
    popular ones:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当你习惯使用虚拟环境和 pip 时，你将学到更多的技巧和工具，使整个过程更加简单。以下是一些更受欢迎的工具：
- en: Using a Virtual Environment Without Activating
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在不激活的情况下使用虚拟环境
- en: You can use the binaries that are a part of the virtual environment without
    activating it. For example, you can execute `venv/bin/python` to run the virtual
    environment’s own Python instance, or `venv/bin/pip` to run its instance of pip.
    It’ll work the same as if you had activated the virtual environment.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在不激活虚拟环境的情况下使用其二进制文件。例如，你可以执行 `venv/bin/python` 来运行虚拟环境自己的 Python 实例，或者执行
    `venv/bin/pip` 来运行它的 pip 实例。它的运行效果与激活虚拟环境是一样的。
- en: 'For example, assuming my virtual environment is `venv`, I could do this in
    the terminal:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我的虚拟环境是 `venv`，我可以在终端中执行以下操作：
- en: '[PRE43]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: It works! Yet, `import pylint` still will not work on the system-wide Python
    interactive shell (unless, of course, you installed it on the system).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 它是有效的！不过，`import pylint` 仍然无法在系统全局的 Python 交互式 shell 中工作（除非你已将其安装在系统中）。
- en: The Alternatives
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代方案
- en: Throughout this book, I’ll be using pip and `venv`, as they’re the default tools
    for modern Python. However, there are a few other solutions out there worth looking
    into.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用 pip 和 `venv`，因为它们是现代 Python 的默认工具。然而，还有一些其他的解决方案值得关注。
- en: Pipenv
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Pipenv
- en: A number of Python developers swear by *Pipenv*, which combines both pip and
    `venv` into one cohesive tool, with many additional features.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Python 开发者极力推荐 *Pipenv*，它将 pip 和 `venv` 合并为一个统一的工具，并附带许多附加功能。
- en: Because the workflow is quite different, I won’t cover Pipenv here. If you’re
    interested in it, I recommend reading their superb documentation at [https://docs.pipenv.org/](https://docs.pipenv.org/).
    You’ll find comprehensive setup and usage instructions there, as well as a more
    detailed explanation of the advantages Pipenv offers.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 由于工作流程非常不同，这里不会介绍 Pipenv。如果你对它感兴趣，我推荐阅读他们的优秀文档，地址是 [https://docs.pipenv.org/](https://docs.pipenv.org/)。你将在那里找到全面的设置和使用说明，以及对
    Pipenv 提供的优势的更详细解释。
- en: pip-tools
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pip-tools
- en: A number of tasks in pip can be simplified with pip-tools, including automatic
    updating, aids for writing *requirements.txt*, and more.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip-tools 可以简化 pip 中的许多任务，包括自动更新、辅助编写 *requirements.txt* 文件等。
- en: If you use pip-tools, you should only install it within a virtual environment.
    It is designed specifically for that use case.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 pip-tools，你应该仅在虚拟环境中安装它。它专为这种使用场景设计。
- en: More information is available at [https://pypi.org/project/pip-tools/](https://pypi.org/project/pip-tools/).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以查看 [https://pypi.org/project/pip-tools/](https://pypi.org/project/pip-tools/)。
- en: poetry
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: poetry
- en: Some Python developers absolutely hate the entire pip workflow. One such developer
    created *poetry* as an alternative package manager. I don’t use it in this book,
    as it behaves very differently, but I’d be remiss not to point it out.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Python 开发者完全不喜欢整个 pip 工作流。有一位开发者创建了*poetry*作为替代的包管理器。我在本书中没有使用它，因为它的行为与 pip
    非常不同，但我不指出它的话就不太合适了。
- en: 'You can find more information, download directions (the creator does not recommend
    using pip to install it), and access documentation on their website: [https://python-poetry.org/](https://python-poetry.org/).'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在他们的网站上找到更多信息、下载说明（创作者不建议通过 pip 安装）和访问文档，网址是：[https://python-poetry.org/](https://python-poetry.org/)。
- en: Introduction to PEP 8
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PEP 8 介绍
- en: Unlike many languages, where style decisions are left entirely to the discretion
    of the community at large, Python does have an official style guide, which is
    published as *PEP 8*. Although the conventions in the guide are intended primarily
    for standard library code, many Python developers choose to stick to them as a
    rule.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言不同，Python 并不是完全依赖社区的自由裁量来决定风格规范，Python 有官方的风格指南，即 *PEP 8*。虽然该指南中的约定主要适用于标准库代码，但许多
    Python 开发者选择遵循这些规则。
- en: 'That doesn’t make them mandatory: if you have an objective reason to follow
    a different style convention in your project, that’s fine, although you should
    apply that style consistently, as much as is reasonable.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着它们是强制性的：如果你有客观的理由在项目中遵循不同的风格规范，那也没问题，尽管你应该尽量一致地应用这种风格。
- en: 'PEP 8 itself makes this distinction clear, early on:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 8 本身在早期就明确了这一区分：
- en: A style guide is about consistency. Consistency with this style guide is important.
    Consistency within a project is more important. Consistency within one module
    or function is the most important.
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 风格指南关乎一致性。遵循该风格指南的一致性很重要。项目中的一致性更重要。单个模块或函数中的一致性最为重要。
- en: ''
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: However, know when to be inconsistent—sometimes, style guide recommendations
    just aren’t applicable. When in doubt, use your best judgment. Look at other examples
    and decide what looks best. And don’t hesitate to ask!
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 然而，要知道什么时候可以不遵循一致性——有时，风格指南的建议并不适用。当你有疑问时，依靠你最好的判断力。看看其他示例，决定什么样的格式最好。并且不要犹豫，随时提问！
- en: In practice, you’ll likely find very little reason to deviate from PEP 8\. The
    style guide is far from all-encompassing. It leaves plenty of breathing room,
    while making it clear what constitutes a good or bad coding style.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可能会发现几乎没有理由偏离 PEP 8。风格指南远非包罗万象，它为你提供了充足的自由空间，同时明确指出什么是好的编码风格，什么是不好的编码风格。
- en: The Line Limit Debate
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行限制的争论
- en: PEP 8 recommends a line limit of 79 characters, or an 80-character cutoff, though
    there’s a lot of debate on the topic. Some Python developers respect that rule,
    while others prefer cutoffs of 100 or 120 characters. What to do?
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 8 推荐每行字符数限制为 79 个字符，或者 80 字符的截断，尽管这个话题一直存在许多争议。一些 Python 开发者遵守这一规则，而另一些则偏好
    100 或 120 字符的截断。那么该怎么办呢？
- en: 'The most common argument for longer limits is that modern monitors are wider
    and higher resolution. Surely, the 80-character limit is a relic of a bygone era,
    right? ***Definitely not!*** There are several reasons to stick to a common line
    limit. For example:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 支持较长限制的最常见论点是现代显示器更宽且分辨率更高。当然，80 字符的限制是过去时代的遗物，对吧？***绝对不是！*** 坚持使用常见的行限制有几个理由。例如：
- en: Vision-impaired individuals who must work with larger font sizes or zoomed-in
    interfaces
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须使用较大字体或缩放界面的视力受损人士
- en: Viewing differences in a file between commits in a side-by-side diff
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交之间查看文件的差异时，使用并排显示的差异视图
- en: Split-screen editors, displaying multiple files simultaneously
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分屏编辑器，显示多个文件同时编辑
- en: Vertical monitors
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直显示器
- en: Side-by-side windows on a laptop monitor, wherein the editor only has half its
    usual space
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 笔记本显示器上并排的窗口，其中编辑器只有一半的常规空间
- en: Individuals with older monitors, who cannot afford to upgrade to the latest
    1080p monster
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用较旧显示器的个人，他们无法升级到最新的 1080p 大屏显示器
- en: Viewing code on mobile devices
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在移动设备上查看代码
- en: Writing coding books for No Starch Press
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 No Starch Press 编写编程书籍
- en: 'In all of these scenarios, the reasoning behind the 80-character limit becomes
    apparent: there simply isn’t enough horizontal space for 120 characters or more
    per line. Soft text wrapping, wherein the remainder of a cut-off line appears
    on a separate line (without a line number), does solve some of these issues. However,
    it can be difficult to read, as many people forced to rely on it regularly will
    attest to.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些场景中，80 字符限制的理由变得显而易见：每行不可能有超过 120 个字符的水平空间。软换行，即被截断的行的其余部分出现在另起一行（没有行号）的方式，确实能解决其中一些问题。然而，很多依赖这种方式的人会证明，它其实很难阅读。
- en: 'This doesn’t mean that you have to follow this 79-character maximum religiously.
    There are exceptions. Above all, *readability* and *consistency* are the goals.
    Many developers embrace the 80/100 rule: an 80-character “soft” cutoff, you try
    to respect in most cases; and a 100-character “hard” cutoff, you reserve for all
    those cases where the lower limit would negatively impact readability.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着你必须严格遵循这个 79 字符的最大限制。也有例外。最重要的是，*可读性* 和 *一致性* 是目标。许多开发者接受 80/100 规则：80
    字符的“软”限制，你在大多数情况下尝试遵守；而 100 字符的“硬”限制，则用于那些在低限制下会影响可读性的情况。
- en: Tabs or Spaces?
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制表符还是空格？
- en: Ah yes, the civil war over which many friendships have been strained and many
    relationships have abruptly ended (okay, maybe just that one?). Most programmers
    have strong feelings on the topic.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，是的，这场内战导致了许多友谊的紧张和很多关系的突然结束（好吧，也许就那一个？）。大多数程序员对这个话题有强烈的意见。
- en: PEP 8 recommends spaces over tabs, but technically, it allows either. The important
    thing is to *never mix the two*. Use either spaces or tabs, and stick to it throughout
    your entire project.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 8 推荐使用空格而非制表符，但从技术上讲，它允许两者。重要的是 *永远不要混合使用两者*。无论选择空格还是制表符，都要在整个项目中保持一致。
- en: 'If you do use spaces, then there’s the debate about how many spaces to use.
    PEP 8 answers this question, too: *four spaces per indentation level*. Any less
    can negatively impact code readability, especially for people with visual impairments
    or some forms of dyslexia.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用空格，那么就会有关于每次缩进使用多少空格的争论。PEP 8 也回答了这个问题：*每个缩进级别使用四个空格*。少于这个数量会影响代码的可读性，特别是对于视力障碍者或一些类型的阅读障碍者。
- en: By the way, most code editors are able to automatically enter four spaces when
    they press Tab, so there’s rarely an excuse to press space repeatedly.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，大多数代码编辑器在按下 Tab 时会自动输入四个空格，因此很少有理由反复按空格键。
- en: 'Quality Control: Static Analyzers'
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量控制：静态分析器
- en: One of the most useful tools in any programmer’s toolkit is a reliable *static
    analyzer*, which reads your source code, looking for potential problems or deviations
    from the standards. If you’ve never used one before, now is the time to change
    that. One common type of static analyzer, called a *linter*, checks your source
    code for common mistakes, potential errors, and style inconsistencies. Two of
    the most popular linters are *Pylint* and *PyFlakes*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何程序员的工具包中，最有用的工具之一就是可靠的 *静态分析器*，它会读取你的源代码，寻找潜在问题或偏离标准的地方。如果你以前从未使用过，现在是时候改变这一点了。一种常见的静态分析器叫做
    *linter*，它检查你的源代码中常见的错误、潜在的错误和风格不一致问题。最流行的两个 linter 是 *Pylint* 和 *PyFlakes*。
- en: There are many more kinds of static analyzers available for Python, including
    static type checkers like *Mypy* and complexity analyzers like *mccabe*.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他类型的静态分析器可供 Python 使用，包括静态类型检查器如 *Mypy* 和复杂度分析器如 *mccabe*。
- en: I’ll cover how to install all of these below, and I’ll discuss how to use many
    of them. I recommend you choose only one of these two linters and install the
    rest of the static analyzers.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我会在下面介绍如何安装所有这些工具，并讨论如何使用其中的许多工具。我建议你只选择这两种 linter 中的一个并安装其他静态分析器。
- en: Pylint
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pylint
- en: Pylint is perhaps the most versatile static analyzer in Python. It works decently
    well by default, and it allows you to customize exactly what you want it to look
    for and ignore.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 可能是 Python 中最通用的静态分析器。默认情况下，它表现得相当不错，并允许你自定义想要检查和忽略的内容。
- en: 'You can install the Pylint package with pip, which I recommend doing in a virtual
    environment. Once installed, you pass Pylint the name of a file you want analyzed,
    like this:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 pip 安装 Pylint 包，我建议在虚拟环境中进行安装。安装完成后，你可以传递 Pylint 你想分析的文件名，像这样：
- en: '[PRE44]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can also analyze an entire package or module at once. (I’ll define what
    modules and packages are in Chapter 4.) For example, if you want Pylint to analyze
    a package called `myawesomeproject` in the current working directory, you’d run
    this:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以一次性分析整个包或模块。（我将在第 4 章定义模块和包。）例如，如果你想让 Pylint 分析当前工作目录下名为 `myawesomeproject`
    的包，你可以运行以下命令：
- en: '[PRE45]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Pylint will scan the files and display its warnings and recommendations on the
    command line. Then, you can edit your file and make the necessary changes.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 将扫描文件并在命令行上显示警告和建议。然后，你可以编辑文件并进行必要的修改。
- en: 'For example, consider the following Python file:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 Python 文件：
- en: '[PRE46]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Listing 2-7: *cooking.py:1a*'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-7: *cooking.py:1a*'
- en: 'I’ll run the linter on that file with the following in the system command line:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我会在系统命令行中运行以下命令来对该文件进行 linter 检查：
- en: '[PRE47]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Pylint provides the following feedback:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 提供了以下反馈：
- en: '[PRE48]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The linter found five errors in my code: both the module and the function are
    missing their docstrings (see Chapter 3). I tried to use the variables `eggs`
    and `order`, neither of which exist. I also assigned a value to the variable `ham`,
    but I never used that value anywhere.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: linter 在我的代码中发现了五个错误：模块和函数都缺少文档字符串（见第 3 章）。我试图使用 `eggs` 和 `order` 这两个变量，但它们都不存在。我还给变量
    `ham` 赋了一个值，但从未在任何地方使用过这个值。
- en: 'If Pylint takes umbrage at a particular line of code you feel should be left
    as is, you can tell the static analyzer to ignore it and move on. You do this
    with a special comment, either inline on the line in question or at the top of
    the affected block. For example:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Pylint 对你认为应该保留不变的某行代码产生不满，你可以告诉静态分析器忽略它并继续执行。你可以通过特殊注释来实现这一点，注释可以是内联的，也可以位于受影响代码块的顶部。例如：
- en: '[PRE49]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Listing 2-8: *cooking.py:1b*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2-8: *cooking.py:1b*'
- en: 'With the first command, I tell Pylint not to alert me about the missing docstring
    on the module; that affects the entire block of code. The inline comment on the
    next line will suppress the warning about the missing docstring on the function,
    and it will only affect that line. If I ran the linter again, I’d only see the
    other two linter errors:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 通过第一个命令，我告诉 Pylint 不要警告我模块缺少文档字符串；这会影响整个代码块。下一行的内联注释将抑制函数缺少文档字符串的警告，只会影响这一行。如果我再次运行
    linter，我只会看到另外两个 linter 错误：
- en: '[PRE50]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: At this point, I’d edit my code and actually fix the rest of those problems.
    (Except I won’t, for this example.)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，我会编辑代码并修复剩下的问题。（不过为了这个示例，我不会这样做。）
- en: 'You can also control Pylint’s project-wide behavior by creating a *pylintrc*
    file in the root directory of your project. To do this, run the following:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过在项目的根目录下创建一个*pylintrc*文件来控制Pylint的项目范围行为。要做到这一点，请运行以下命令：
- en: '[PRE51]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Find that file; open it; and edit it to turn on and off different warnings,
    ignore files, and define other settings. The documentation isn’t fantastic for
    this, but you can often work out what different options do from the comments in
    that *pylintrc* file.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 找到那个文件；打开它；编辑它以启用或禁用不同的警告，忽略文件，并定义其他设置。虽然文档并不完美，但你通常可以通过查看*pylintrc*文件中的注释来理解不同选项的作用。
- en: 'When you run Pylint, it will look for a *pylintrc* (or *.pylintrc*) file in
    the current working directory. Alternatively, you can specify a different filename
    for Pylint to read its settings from, such as *myrcfile*, by passing the filename
    to the `--rcfile` option when invoking Pylint:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行Pylint时，它会在当前工作目录中查找*pylintrc*（或*.pylintrc*）文件。或者，你也可以指定一个不同的文件名，让Pylint读取其设置，例如通过在调用Pylint时使用`--rcfile`选项传递文件名*myrcfile*：
- en: '[PRE52]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Some regular users of Pylint like to create `.pylintrc` or `.config/pylintrc`
    in their home directory (UNIX-like systems only). If Pylint cannot find another
    configuration file, it will use the one in the home directory.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常规使用Pylint的用户喜欢在他们的主目录下创建`.pylintrc`或`.config/pylintrc`文件（仅限类Unix系统）。如果Pylint无法找到其他配置文件，它会使用主目录中的配置文件。
- en: Although the Pylint documentation is far from comprehensive, it can still be
    useful. You can find it at [https://pylint.readthedocs.io/](https://pylint.readthedocs.io/).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Pylint文档远非全面，但它仍然有用。你可以在[https://pylint.readthedocs.io/](https://pylint.readthedocs.io/)找到它。
- en: Flake8
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flake8
- en: 'The *Flake8* tool is actually a combination of three static analyzers:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '*Flake8*工具实际上是三个静态分析器的组合：'
- en: '*PyFlakes* is a linter, similar in purpose to Pylint. It is designed to work
    faster and to avoid false positives (both being common complaints about Pylint).
    It also ignores style rules, which are handled by the next tool.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PyFlakes*是一个linter，功能类似于Pylint。它被设计得更快，且避免误报（这两个问题都是Pylint的常见抱怨）。它还忽略了样式规则，这些由下一个工具处理。'
- en: '*pycodestyle* is a style checker, to help ensure you write PEP 8-compliant
    code. (This tool used to be called `pep8`, but it was renamed to avoid confusion
    with the actual style guide.)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*pycodestyle*是一个样式检查工具，用来确保你编写符合PEP 8的代码。（这个工具曾经被称为`pep8`，但为了避免与实际的样式指南混淆，它被重命名了。）'
- en: '*mccabe* checks the McCabe (or Cyclomatic) complexity of your code. If you
    don’t know what that is, don’t worry—its purpose is essentially just to warn you
    when your code’s structure is getting too complicated.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*mccabe*检查代码的McCabe（或环形）复杂度。如果你不知道那是什么，别担心——它的目的是在你的代码结构变得过于复杂时提醒你。'
- en: You can install the Flake8 package with pip, which I typically do within a virtual
    environment.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过pip安装Flake8包，我通常是在虚拟环境中进行安装。
- en: 'To scan a file, module, or package, pass it to `flake8` on the command line.
    For example, to scan my earlier *cooking.py* file ([Listing 2-8](#listing2-8)),
    I’d use this command:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要扫描文件、模块或包，请将其传递给命令行中的`flake8`。例如，要扫描我之前的*cooking.py*文件（[列表 2-8](#listing2-8)），我会使用以下命令：
- en: '[PRE53]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'That outputs the following:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出如下内容：
- en: '[PRE54]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: (You’ll notice that Flake8 isn’t complaining about the lack of docstrings; that’s
    disabled by default in this linter.)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: （你会注意到Flake8并不会因为缺少文档字符串而报错；这是在该linter中默认禁用的。）
- en: 'By default, only PyFlakes and pycodestyle are run. If you want to analyze the
    complexity of your code, you also need to pass the argument `--max-complexity`,
    followed by a number. Anything higher than `10` is considered too complex, but
    if you understand McCabe complexity, you can change this to suit your needs. So,
    for example, to check the complexity of the *cooking.py* file, you’d run this:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，仅运行PyFlakes和pycodestyle。如果你想分析代码的复杂度，还需要传递`--max-complexity`参数，后面跟一个数字。任何高于`10`的复杂度都会被认为过于复杂，但如果你了解McCabe复杂度，你可以根据需要调整这一点。所以，例如，要检查*cooking.py*文件的复杂度，你可以运行以下命令：
- en: '[PRE55]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: However you run Flake8, you’ll get a comprehensive list of all the errors and
    warnings in your code.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你以何种方式运行Flake8，你都会获得代码中所有错误和警告的全面列表。
- en: If you need to tell Flake8 to ignore something it thinks is a problem, you use
    a `# noqa` comment, followed by the error code to ignore. This comment should
    be inline, on the line where the error occurs. If you omit the error code, then
    `# noqa` will cause Flake8 to ignore all errors on that line.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要告诉 Flake8 忽略它认为是问题的某些内容，你可以使用 `# noqa` 注释，后面跟着要忽略的错误代码。这个注释应该是内联的，位于错误发生的那一行。如果省略错误代码，`#
    noqa` 会导致 Flake8 忽略该行的所有错误。
- en: 'In my code, if I wanted to ignore both of the errors I received, it might look
    like this:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的代码中，如果我想忽略收到的两个错误，它可能看起来像这样：
- en: '[PRE56]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Listing 2-9: *cooking.py:1c*'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 2-9: *cooking.py:1c*'
- en: Here, you see three different scenarios. First, I’m ignoring only warning `F841`.
    Second, I’m ignoring two errors (even though one of them isn’t actually raised;
    this is just a silly example). Third, I’m ignoring all possible errors.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到三种不同的场景。首先，我只忽略了警告 `F841`。其次，我忽略了两个错误（即使其中一个实际上没有被触发；这只是一个愚蠢的例子）。第三，我忽略了所有可能的错误。
- en: Flake8 also supports configuration files. In the project directory, you can
    create a *.flake8* file. Start a section in that file with the line `[flake8]`,
    followed by all the Flake8 settings you want to define. (See the documentation.)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Flake8 还支持配置文件。在项目目录中，你可以创建一个 *.flake8* 文件。文件中以 `[flake8]` 开头的部分，后面是你要定义的所有
    Flake8 设置。（请参阅文档。）
- en: Flake8 will also accept project-wide configuration files called *tox.ini* or
    *setup.cfg*, so long as they have a `[flake8]` section within them.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: Flake8 还支持名为 *tox.ini* 或 *setup.cfg* 的项目级配置文件，只要这些文件中包含 `[flake8]` 部分。
- en: 'For example, if you want to automatically run mccabe each time you invoke Flake8,
    rather than specify `--max-complexity` every time, you could define a *.flake8*
    file that looks like this:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想在每次调用 Flake8 时自动运行 mccabe，而不是每次都指定 `--max-complexity`，你可以定义一个 *.flake8*
    文件，如下所示：
- en: '[PRE57]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Listing 2-10: *.flake8*'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 2-10: *.flake8*'
- en: Some developers like to define a system-wide configuration file for Flake8,
    which you can do (only) on a UNIX-like system. In your home folder, create the
    configuration file as either *.flake8* or *.config/flake8*.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发人员喜欢为 Flake8 定义一个系统级别的配置文件，这可以在 UNIX 类系统上完成。在你的主文件夹中，创建配置文件，名称可以是 *.flake8*
    或 *.config/flake8*。
- en: One of the chief advantages of Flake8 over Pylint is the documentation. Flake8
    has a complete list of their warnings, errors, options, and the like. You can
    find the documentation at [https://flake8.readthedocs.io/](https://flake8.readthedocs.io/).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Flake8 相较于 Pylint 的一个主要优势是文档。Flake8 提供了完整的警告、错误、选项等列表。你可以在 [https://flake8.readthedocs.io/](https://flake8.readthedocs.io/)
    找到文档。
- en: Mypy
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mypy
- en: '*Mypy* is an unusual static analyzer because it focuses entirely on *type annotations*
    (see Chapter 6). Because it involves so many concepts I haven’t covered yet, I
    won’t go into much depth here.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '*Mypy* 是一个不寻常的静态分析工具，因为它完全关注 *类型注解*（参见第 6 章）。由于涉及的概念太多，我还没有涉及，因此在这里不会深入讨论。'
- en: Still, now is a good time to get it installed. Like everything else so far,
    you can install the `mypy` package from pip.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，现在是安装它的好时机。像之前的所有内容一样，你可以从 pip 安装 `mypy` 包。
- en: 'Once installed, Mypy can be used by passing it the file, package, or module
    you wish to check:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，Mypy 可以通过传递你希望检查的文件、包或模块来使用：
- en: '[PRE58]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Mypy will only attempt to check files that have type annotations, and it will
    ignore the rest.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy 只会尝试检查具有类型注解的文件，并忽略其他文件。
- en: 'Style Janitors: Autoformatting Tools'
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式清理工具：自动格式化工具
- en: Another tool you may find useful is an *autoformatter,* which can automatically
    change your Python code—spacing, indentation, and preferred equivalent expressions
    (such as `!=` instead of `<>`)—to be PEP 8 compliant. Two options are *autopep8*
    and *Black*.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现另一个有用的工具是 *自动格式化工具*，它可以自动更改你的 Python 代码——空格、缩进和首选的等效表达式（例如 `!=` 替代 `<>`）——以符合
    PEP 8 标准。有两个选择是 *autopep8* 和 *Black*。
- en: autopep8
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: autopep8
- en: The autopep8 tool leverages pycodestyle (part of Flake8), even using the same
    configuration file as that tool to determine what style rules it ultimately follows
    or ignores.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: autopep8 工具利用 pycodestyle（Flake8 的一部分），甚至使用与该工具相同的配置文件来决定最终遵循或忽略哪些样式规则。
- en: As always, you can install `autopep8` with pip.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你可以通过 pip 安装 `autopep8`。
- en: By default, autopep8 only fixes whitespace, but if you pass the `--aggressive`
    argument to it, it will make additional changes. In fact, if you pass that argument
    twice, it will do even more. The complete list is beyond the scope of this explanation,
    so consult the documentation at [https://pypi.org/project/autopep8/](https://pypi.org/project/autopep8/)
    to learn more.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，autopep8只修复空格问题，但如果你传递`--aggressive`参数，它会进行更多更改。实际上，如果你传递两次该参数，它会做更多的修改。完整的列表超出了本解释的范围，因此请参考文档[https://pypi.org/project/autopep8/](https://pypi.org/project/autopep8/)以了解更多信息。
- en: 'To fix most PEP 8 issues on a Python code file by changing it in place (as
    opposed to making a copy, which is the default behavior), run this:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过就地修改（而不是创建副本，这是默认行为）来修复Python代码文件中的大部分PEP 8问题，可以运行以下命令：
- en: '[PRE59]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Changing the file directly may sound a bit risky, but it really isn’t. Style
    changes are just that: style. They don’t affect the actual behavior of the code.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 直接修改文件可能听起来有点风险，但实际上并不如此。样式更改只是样式问题：它们不会影响代码的实际行为。
- en: Black
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Black
- en: 'The Black tool is a little more straightforward: it assumes you want to follow
    PEP 8 in its entirety, and it doesn’t overwhelm you with many options as a result.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Black工具稍微直接一些：它假定你想要完全遵循PEP 8，因此没有给你太多选项。
- en: 'Like autopep8, you install `black` with pip, although it requires Python 3.6
    or later. To format a file with it, pass the filename:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 与autopep8一样，你可以通过pip安装`black`，但它要求使用Python 3.6或更高版本。要格式化文件，只需传递文件名：
- en: '[PRE60]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A complete list of Black’s few options can be seen via `black --help`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Black的所有选项可以通过`black --help`查看。
- en: Testing Frameworks
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试框架
- en: 'Testing frameworks form an essential part of any good development workflow,
    but I won’t go into detail about them in this chapter. Python has three major
    options for testing frameworks: *Pytest*, *nose2*, and *unittest*, in addition
    to a promising new project called *ward*. All of these can be installed with pip.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 测试框架是任何良好开发工作流中的一个重要部分，但在本章中我不会详细介绍它们。Python有三个主要的测试框架选项：*Pytest*、*nose2*和*unittest*，此外还有一个很有前景的新项目叫做*ward*。这些都可以通过pip安装。
- en: More knowledge is essential to cover this topic effectively, so I’ll revisit
    it in Chapter 20.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 更深入的知识是有效覆盖这个话题的关键，因此我将在第20章中重新讨论它。
- en: An Exhibition of Code Editors
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码编辑器展示
- en: You have your Python interpreter, your virtual environments, your static analyzers,
    and other such tools. Now you are prepared to write code.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 你拥有Python解释器、虚拟环境、静态分析工具和其他此类工具。现在你已经准备好编写代码了。
- en: You can write Python in any basic text editor, just as you could with practically
    any other programming language. Yet you’ll probably have an easier time writing
    production-quality code with a proper code editor.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任何基本的文本编辑器中编写Python代码，就像你可以用几乎任何其他编程语言一样。然而，你可能会发现，使用一个合适的代码编辑器来编写生产级代码会更轻松。
- en: Before I end this chapter, I want to take you on a tour of several of the most
    popular Python code editors and integrated development environments (*IDEs*) available.
    This is only a sampling, as there are many more options besides. **If you already
    know what code editor or IDE you want to use, skip forward to the last section
    of this chapter.**
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在我结束本章之前，我想带你了解几款最流行的Python代码编辑器和集成开发环境（*IDEs*）。这只是一个简单的展示，因为除了这些之外还有很多其他选择。**如果你已经知道你想使用哪个代码编辑器或IDE，可以跳到本章的最后部分。**
- en: IDLE
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDLE
- en: 'Python has its own IDE, called *IDLE*, which ships with the standard distribution
    of Python. It’s a fairly bare-bones IDE with two components: an editor and an
    interface for the interactive shell. You could do worse than IDLE, so if you aren’t
    in the mood to install a different editor right now, start here. However, I recommend
    exploring your options, as most editors and IDEs have a host of useful features
    that IDLE lacks.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Python有自己的IDE，叫做*IDLE*，它随Python标准发行版一起提供。它是一个相当基础的IDE，包含两个部分：一个编辑器和一个交互式shell界面。IDLE也许不是最差的选择，因此如果你现在不想安装其他编辑器，可以从这里开始。不过，我建议你探索其他选项，因为大多数编辑器和IDE都具备IDLE所没有的许多有用功能。
- en: Emacs and Vim
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Emacs和Vim
- en: The purists and old-school hackers among you will be glad to know that Emacs
    and Vim both have excellent Python support. Setting up either is not for the faint
    of heart, so I’m not going into any of that here.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你们中那些纯粹主义者和老派黑客来说，Emacs和Vim都提供了出色的Python支持。设置这两者中的任何一个都不是简单的事情，所以我在这里不打算深入探讨。
- en: If you’re already a lover of either (or both?) code editors, you can find excellent
    tutorials for both at Real Python.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经是其中一种（或两种？）代码编辑器的忠实粉丝，可以在Real Python上找到这两者的优秀教程。
- en: For Emacs, see [https://realpython.com/emacs-the-best-python-editor/](https://realpython.com/emacs-the-best-python-editor/).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Emacs，请参见[https://realpython.com/emacs-the-best-python-editor/](https://realpython.com/emacs-the-best-python-editor/)。
- en: For Vim, see [https://realpython.com/vim-and-python-a-match-made-in-heaven/](https://realpython.com/vim-and-python-a-match-made-in-heaven/).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Vim，请参见[https://realpython.com/vim-and-python-a-match-made-in-heaven/](https://realpython.com/vim-and-python-a-match-made-in-heaven/)。
- en: PyCharm
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCharm
- en: 'According to “The State of Developer Ecosystem 2021” developer survey by JetBrains,
    the PyCharm IDE from JetBrains is far and away the most popular option for Python
    programming. It comes in two flavors: the free *PyCharm Community Edition* and
    the paid *PyCharm Professional Edition*. (Steps were taken by JetBrains to eliminate
    bias. See the survey here: [https://www.jetbrains.com/lp/devecosystem-2021/python/](https://www.jetbrains.com/lp/devecosystem-2021/python/).)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 根据JetBrains的《开发者生态系统状态 2021》开发者调查，JetBrains的PyCharm IDE是目前最受欢迎的Python编程选项。它有两个版本：免费的*PyCharm社区版*和付费的*PyCharm专业版*。（JetBrains已采取措施消除偏见。请参阅调查：[https://www.jetbrains.com/lp/devecosystem-2021/python/](https://www.jetbrains.com/lp/devecosystem-2021/python/)。）
- en: Both versions offer a dedicated Python code editor with autocompletion, refactoring,
    debugging, and testing tools. It can manage and use virtual environments with
    ease, and it integrates with your version control software. It even performs static
    analysis (using its own tool). The professional edition adds tools for data, scientific
    development, and web development.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 两个版本都提供了一个专门的Python代码编辑器，具有自动补全、重构、调试和测试工具。它可以轻松管理和使用虚拟环境，并与您的版本控制软件集成。它甚至执行静态分析（使用其自己的工具）。专业版增加了数据、科学开发和Web开发工具。
- en: If you’re familiar with other JetBrains IDEs, like IntelliJ IDEA or CLion, PyCharm
    would be a great Python IDE to start with. It requires more computer resources
    than many code editors, but if you have a decently powerful machine, this won’t
    be a problem. If you haven’t used JetBrains IDEs before, try the Community Edition
    before investing in the paid version.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉其他JetBrains IDE，例如IntelliJ IDEA或CLion，那么PyCharm将是一个很好的Python IDE入门选择。它比许多代码编辑器需要更多的计算机资源，但如果您的计算机性能足够强大，这不会成为问题。如果您之前没有使用过JetBrains的IDE，建议先试用社区版，然后再考虑购买付费版。
- en: You can find more information and downloads at [https://jetbrains.com/pycharm/](https://jetbrains.com/pycharm/).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://jetbrains.com/pycharm/](https://jetbrains.com/pycharm/)找到更多信息和下载链接。
- en: Visual Studio Code
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: '*Visual Studio Code* has excellent Python support. It’s the second-most popular
    Python code editor, according to that 2021 JetBrains survey. It’s free and open
    source, and it runs on virtually every platform. Install the official Python extension
    from Microsoft, and you’re ready to go!'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '*Visual Studio Code*具有出色的Python支持。根据2021年JetBrains的调查，它是第二受欢迎的Python代码编辑器。它是免费的开源软件，几乎可以在所有平台上运行。只需安装Microsoft的官方Python扩展，您就可以开始使用！'
- en: Visual Studio Code supports autocompletion, refactoring, debugging, and virtual
    environment switching, along with the usual version control integration. It integrates
    with Pylint, Flake8, and Mypy, among several other popular static analyzers. It
    even works with the most common Python unit testing tools.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code支持自动补全、重构、调试和虚拟环境切换，并与常见的版本控制工具集成。它与Pylint、Flake8和Mypy等几个流行的静态分析工具集成。它甚至与最常见的Python单元测试工具兼容。
- en: Download it at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://code.visualstudio.com/](https://code.visualstudio.com/)下载它。
- en: Sublime Text
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sublime Text
- en: '*Sublime* is another popular multilanguage code editor. It is appreciated for
    its speed and simplicity, and it is easily customized with extensions and configuration
    files. Sublime Text is free to try, but if you find you like it and wish to continue
    using it, you need to purchase it.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '*Sublime*是另一个受欢迎的多语言代码编辑器。它因其速度和简洁性而受到推崇，并且可以通过扩展和配置文件轻松定制。Sublime Text可以免费试用，但如果您觉得它不错并希望继续使用，则需要购买它。'
- en: 'The Anaconda plug-in transforms Sublime Text into a Python IDE, with everything:
    autocompletion, navigation, static analysis, autoformatting, test running, and
    even a documentation browser. It requires a little more hand-tuned configuration
    than some of the other options, especially if you want to use virtual environments.
    However, if Sublime Text is your jam, it’s worth it.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda插件将Sublime Text转变为一个Python IDE，拥有所有功能：自动补全、导航、静态分析、自动格式化、测试运行，甚至还有文档浏览器。它需要比其他一些选项更多的手动配置，尤其是在您想使用虚拟环境时。然而，如果您喜欢Sublime
    Text，它是值得的。
- en: Download Sublime Text at [https://sublimetext.com/](https://sublimetext.com/)
    and the Anaconda plug-in at [https://damnwidget.github.io/anaconda/](https://damnwidget.github.io/anaconda/).
    That second link also provides instructions for installing the plug-in in Sublime
    Text.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://sublimetext.com/](https://sublimetext.com/)下载Sublime Text，在[https://damnwidget.github.io/anaconda/](https://damnwidget.github.io/anaconda/)下载Anaconda插件。第二个链接还提供了如何在Sublime
    Text中安装插件的说明。
- en: Spyder
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spyder
- en: If your focus is scientific programming or data analysis, or if you’re a fan
    of MATLAB’s interface, you’ll be right at home in *Spyder*, a free and open source
    Python IDE that is also written *in* Python.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你专注于科学编程或数据分析，或者如果你喜欢MATLAB的界面，那么你会很喜欢*Spyder*，一个免费的开源Python IDE，它也是用*Python*编写的。
- en: In addition to the usual features—a dedicated Python code editor, a debugger,
    integration with static analyzers, and documentation viewing—Spyder includes integration
    with many common Python libraries for data analysis and scientific computing.
    It integrates a full code profiler and variable explorer. Plug-ins exist for supporting
    unit tests, autoformatting, and editing Jupyter notebooks, among other features.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常见的功能——专用的Python代码编辑器、调试器、与静态分析工具的集成以及文档查看——Spyder还包括与许多常见的Python数据分析和科学计算库的集成。它集成了完整的代码分析器和变量浏览器。还存在用于支持单元测试、自动格式化和编辑Jupyter笔记本的插件，等等。
- en: Download Spyder at [https://spyder-ide.org/](https://spyder-ide.org/).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://spyder-ide.org/](https://spyder-ide.org/)下载Spyder。
- en: Eclipse + PyDev/LiClipse
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse + PyDev/LiClipse
- en: '*Eclipse* has lost a lot of ground to the newer editors, but it still has a
    loyal user base. Although it’s geared toward languages like Java, C++, PHP, and
    JavaScript, Eclipse can also become a Python IDE with the *PyDev* plug-in.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '*Eclipse*在新一代编辑器面前已经失去了不少市场，但它依然拥有忠实的用户群。尽管它主要面向Java、C++、PHP和JavaScript等语言，Eclipse也可以通过*PyDev*插件变成一个Python
    IDE。'
- en: If you already have installed Eclipse, which is completely free, then you only
    need to install the PyDev plug-in from the Eclipse Marketplace. Download Eclipse
    at [https://eclipse.org/ide/](https://eclipse.org/ide/) and look in the marketplace
    for the plug-in.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了完全免费的Eclipse，那么你只需要从Eclipse Marketplace安装PyDev插件即可。从[https://eclipse.org/ide/](https://eclipse.org/ide/)下载Eclipse，并在Marketplace中查找插件。
- en: Alternatively, you can install *LiClipse,* which bundles Eclipse, PyDev, and
    other useful tools. The PyDev developers recommend this approach, as it directly
    supports their development work. You can use LiClipse without a license for 30
    days, after which point, you must purchase a license. Download LiClipse from [https://liclipse.com/](https://liclipse.com/).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以安装*LiClipse*，它将Eclipse、PyDev和其他实用工具捆绑在一起。PyDev的开发者推荐这种方式，因为它直接支持他们的开发工作。你可以在没有许可证的情况下使用LiClipse
    30天，之后必须购买许可证。你可以从[https://liclipse.com/](https://liclipse.com/)下载LiClipse。
- en: PyDev offers autocompletion, refactoring, support for type hinting and static
    analysis, debugging, unit test integration, and many more features. You can find
    more information about PyDev at [https://pydev.org/](https://pydev.org/).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: PyDev提供自动补全、重构、对类型提示和静态分析的支持、调试、单元测试集成等众多功能。你可以在[https://pydev.org/](https://pydev.org/)找到更多关于PyDev的信息。
- en: The Eric Python IDE
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eric Python IDE
- en: '*Eric* might be the oldest IDE on the list, but it’s still as reliable as ever.
    Named after Eric Idle of *Monty Python’s Flying Circus*, Eric is a free and open
    source IDE written in Python.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '*Eric* 可能是列表中最古老的IDE，但它仍然和以前一样可靠。Eric以*Monty Python''s Flying Circus*中的Eric
    Idle命名，是一个免费的开源IDE，使用Python编写。'
- en: 'It offers everything you could possibly need to write Python: autocompletion,
    debugging, refactoring, static analysis, testing integration, documentation tools,
    virtual environment management, and the list goes on.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了你编写Python所需的一切：自动补全、调试、重构、静态分析、测试集成、文档工具、虚拟环境管理，等等。
- en: Find information about Eric and download it at [https://eric-ide.python-projects.org/](https://eric-ide.python-projects.org/).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://eric-ide.python-projects.org/](https://eric-ide.python-projects.org/)查看有关Eric的信息并下载。
- en: Wrapping Up
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Writing code involves so much more than just code. Having set up your development
    environment, project, and IDE, you are now prepared to focus exclusively on making
    your code the best it can be.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码不仅仅是写代码。在设置好开发环境、项目和IDE之后，你现在可以专注于使代码尽可能优秀。
- en: By this point, you should have assembled a Python development workbench worthy
    of any production-level project. At minimum, you should have installed the Python
    interpreter, pip, `venv`, one or more static analyzers, and a Python code editor.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经搭建了一个足以支撑任何生产级项目的Python开发工作台。至少，你应该已经安装了Python解释器、pip、`venv`、一个或多个静态分析工具和一个Python代码编辑器。
- en: 'Right now, in your code editor or IDE, create a *FiringRange* project for experimenting
    in while working through this book. For the moment, to be sure everything works,
    you can make a single Python file in that project with these contents:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的代码编辑器或IDE中，创建一个用于实验的*FiringRange*项目，边学习本书内容边进行实验。为了确保一切正常，你可以在该项目中创建一个包含以下内容的Python文件：
- en: '[PRE61]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Listing 2-11: *hello_world.py*'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 2-11: *hello_world.py*'
- en: 'Run that like this:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这样运行：
- en: '[PRE62]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You should see the following output:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE63]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: I’ll go into the correct structure for Python projects in Chapter 4, but writing
    and running individual Python files in your firing range project should be sufficient
    for Chapter 3.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在第4章详细讲解Python项目的正确结构，但在第3章中，写和运行你在射击场项目中的单独Python文件应该就足够了。
- en: If you’re new to the IDE you have selected, take a few minutes now to familiarize
    yourself with it. You should particularly ensure you know how to navigate and
    run code, manage files, work with virtual environments, access the interactive
    console, and use the static analyzers.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是第一次使用你选择的 IDE，花几分钟熟悉一下它。你特别需要确保自己知道如何导航和运行代码、管理文件、使用虚拟环境、访问交互式控制台，并使用静态分析工具。
