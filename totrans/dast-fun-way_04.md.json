["```py\nStack {\n    Integer: array_size\n    Integer: top\n    Array of values: array\n}\n```", "```py\nPush(Stack: s, Type: value):\n    IF s.top == s.array_size – 1:\n        Expand the size of the array\n    s.top = s.top + 1\n    s.array[s.top] = value\n```", "```py\nPop(Stack: s):\n    Type: value = null\n    IF s.top > -1:\n        value = s.array[s.top]\n        s.top = s.top – 1\n    return value\n```", "```py\nStack {\n    LinkedListNode: head\n}\n```", "```py\nPush(Stack: s, Type: value):\n    LinkedListNode: node = LinkedListNode(value)\n    node.next = s.head\n    s.head = node\n```", "```py\nPop(Stack: s):\n    Type: value = null\n IF s.head != null:\n        value = s.head.value\n        s.head = s.head.next\n    return value\n```", "```py\nQueue {\n    LinkedListNode: front\n    LinkedListNode: back\n}\n```", "```py\nEnqueue(Queue: q, Type: value):\n    LinkedListNode: node = LinkedListNode(value)\n  ❶ IF q.back == null:\n        q.front = node\n        q.back = node\n    ELSE:\n      ❷ q.back.next = node\n      ❸ q.back = node\n```", "```py\nDequeue(Queue: q):\n  ❶ IF q.front == null:\n        return null\n\n  ❷ Type: value = q.front.value\n  ❸ q.front = q.front.next\n    IF q.front == null:\n        q.back = null\n    return value\n```"]