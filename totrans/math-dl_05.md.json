["```py\n>>> s = 66\n\n>>> s\n\n66\n```", "```py\n>>> import numpy as np\n\n>>> x = np.array([1,2,3])\n\n>>> print(x)\n\n[1 2 3]\n\n>>> print(x.reshape((3,1)))\n\n[[1]\n\n [2]\n\n [3]]\n```", "```py\n>>> A = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n>>> print(A)\n\n[[1 2 3]\n\n [4 5 6]\n\n [7 8 9]]\n\n>>> print(np.arange(12).reshape((3,4)))\n\n[[ 0 1 2 3]\n\n [ 4 5 6 7]\n\n [ 8 9 10 11]]\n```", "```py\n>>> t = np.arange(36).reshape((3,3,4))\n\n>>> print(t)\n\n[[[ 0 1 2 3]\n\n  [ 4 5 6 7]\n\n  [ 8 9 10 11]]\n\n [[12 13 14 15]\n\n  [16 17 18 19]\n\n  [20 21 22 23]]\n\n [[24 25 26 27]\n\n  [28 29 30 31]\n\n  [32 33 34 35]]]\n```", "```py\n>>> print(t[0])\n\n[[ 0 1 2 3]\n\n [ 4 5 6 7]\n\n [ 8 9 10 11]]\n\n>>> print(t[0,1])\n\n[4 5 6 7]\n\n>>> print(t[0,1,2])\n\n6\n```", "```py\n>>> w = np.zeros((9,9,9,9,9))\n\n>>> w[4,1,2,0,1]\n\n0.0\n```", "```py\n>>> t = np.array(42).reshape((1,1,1,1,1))\n\n>>> print(t)\n\n[[[[[42]]]]]\n\n>>> t.shape\n\n(1, 1, 1, 1, 1)\n\n>>> t[0,0,0,0,0]\n\n42\n```", "```py\n>>> t = np.array([[1,2,3],[4,5,6]])\n\n>>> print(t)\n\n[[1 2 3]\n\n [4 5 6]]\n\n>>> w = t[np.newaxis,:,:]\n\n >>> w.shape\n\n(1, 2, 3)\n\n>>> print(w)\n\n[[[1 2 3]\n\n  [4 5 6]]]\n```", "```py\n>>> a = np.array([[1,2,3],[4,5,6]])\n\n>>> b = np.array([[7,8,9],[10,11,12]])\n\n>>> c = np.array([10,100,1000])\n\n>>> d = np.array([10,11])\n\n>>> print(a)\n\n[[1 2 3]\n\n [4 5 6]]\n\n>>> print(b)\n\n[[ 7 8 9]\n\n [10 11 12]]\n\n>>> print(c)\n\n[  10 100 1000]\n\n>>> print(d)\n\n[10 11]\n```", "```py\n>>> print(a+b)\n\n[[ 8 10 12]\n\n [14 16 18]]\n\n>>> print(a-b)\n\n[[-6 -6 -6]\n\n [-6 -6 -6]]\n\n>>> print(a*b)\n\n[[ 7 16 27]\n\n [40 55 72]]\n\n>>> print(a/b)\n\n[[0.14285714 0.25       0.33333333]\n\n [0.4        0.45454545 0.5       ]]\n\n>>> print(b**a)\n\n[[       7       64      729]\n\n [   10000   161051  2985984]]\n```", "```py\n>>> print(a+c)\n\n[[  11  102 1003]\n\n [  14  105 1006]]\n\n>>> print(c*a)\n\n[[  10 200 3000]\n\n [  40 500 6000]]\n\n>>> print(a/c)\n\n[[0.1  0.02  0.003]\n\n [0.4  0.05  0.006]]\n```", "```py\n>>> print(a+d)\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nValueError: operands could not be broadcast together with shapes (2,3) (2,)\n```", "```py\n>>> d = d.reshape((2,1))\n\n>>> d.shape\n\n(2, 1)\n\n>>> print(a+d)\n\n[[11 12 13]\n\n [15 16 17]]\n```", "```py\n>>> v = np.array((2, -4, 3))\n\n>>> u = v / np.sqrt((v*v).sum())\n\n>>> print(u)\n\n[ 0.37139068 -0.74278135 0.55708601 ]\n```", "```py\n>>> v = np.array([1,2,3])\n\n>>> print(v)\n\n[1 2 3]\n\n>>> print(v.reshape((3,1)))\n\n[[1]\n\n [2]\n\n [3]]\n\n>>> print(v.reshape((1,3)))\n\n[[1 2 3]]\n```", "```py\n>>> print(v.transpose())\n\n[1 2 3]\n\n>>> print(v.T)\n\n[1 2 3]\n```", "```py\n>>> v = v.reshape((1,3))\n\n>>> print(v.transpose())\n\n[[1]\n\n [2]\n\n [3]]\n\n>>> print(v.T)\n\n[[1]\n\n [2]\n\n [3]]\n```", "```py\n>>> a = np.array([1,2,3,4])\n\n>>> b = np.array([5,6,7,8])\n\n>>> def inner(a,b):\n\n...   s = 0.0\n\n...   for i in range(len(a)):\n\n...     s += a[i]*b[i]\n\n...   return s\n\n...\n\n>>> inner(a,b)\n\n70.0\n```", "```py\n>>> (a*b).sum()\n\n70\n```", "```py\n>>> np.dot(a,b)\n\n70\n```", "```py\n>>> A = np.sqrt(np.dot(a,a))\n\n>>> B = np.sqrt(np.dot(b,b))\n\n>>> t = np.arccos(np.dot(a,b)/(A*B))\n\n>>> t*(180/np.pi)\n\n14.335170291600924\n```", "```py\n>>> a = np.array([1,0,0])\n\n>>> b = np.array([0,1,0])\n\n>>> np.dot(a,b)\n\n0\n\n>>> t = np.arccos(0)\n\n>>> t*(180/np.pi)\n\n90.0\n```", "```py\n>>> a = np.array([1,1])\n\n>>> b = np.array([1,0])\n\n>>> p = (np.dot(a,b)/np.dot(b,b))*b\n\n>>> print(p)\n\n[1\\. 0.]\n\n>>> c = np.array([-1,1])\n\n>>> p = (np.dot(c,b)/np.dot(b,b))*b\n\n>>> print(p)\n\n[-1\\. -0.]\n```", "```py\n>>> a = np.array([1,2,3,4])\n\n>>> b = np.array([5,6,7,8])\n\n>>> np.dot(a,b)\n\n70\n\n>>> np.outer(a,b)\n\narray([[ 5, 6, 7, 8],\n\n       [10, 12, 14, 16],\n\n       [15, 18, 21, 24],\n\n       [20, 24, 28, 32]])\n```", "```py\n>>> a = np.array([1,0,0])\n\n>>> b = np.array([0,1,0])\n\n>>> print(np.cross(a,b))\n\n[0 0 1]\n\n>>> c = np.array([1,1,0])\n\n>>> print(np.cross(a,c))\n\n[0 0 1]\n```", "```py\ndef matrixmul(A,B):\n\n    I,K = A.shape\n\n    J = B.shape[1]\n\n    C = np.zeros((I,J), dtype=A.dtype)\n\n    for i in range(I):\n\n        for j in range(J):\n\n            for k in range(K):\n\n                C[i,j] += A[i,k]*B[k,j]\n\n    return C\n```", "```py\n>>> av = np.array([1,2,3])\n\n>>> ar = np.array([[1,2,3]])\n\n>>> ac = np.array([[1],[2],[3]])\n\n>>> av.shape\n\n(3,)\n\n>>> ar.shape\n\n(1, 3)\n\n>>> ac.shape\n\n(3, 1)\n```", "```py\na1 = np.array([1,2,3])\n\nar = np.array([[1,2,3]])\n\nac = np.array([[1],[2],[3]])\n\nb1 = np.array([1,2,3])\n\nbr = np.array([[1,2,3]])\n\nbc = np.array([[1],[2],[3]])\n\nA = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\nB = np.array([[9,8,7],[6,5,4],[3,2,1]])\n```", "```py\ndef dot(a,b):\n\n    try:\n\n        return np.dot(a,b)\n\n    except:\n\n        return \"fails\"\n```"]