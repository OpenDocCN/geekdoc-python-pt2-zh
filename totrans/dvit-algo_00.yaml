- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem-Solving With Algorithms
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/circleart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: The act of catching a ball is remarkable. A ball may start so far away that
    it seems only a speck on the horizon. It may be in the air for only a few short
    seconds or less. The ball will meet air resistance, wind, and of course, gravity,
    moving in something like a parabolic arc. And each time a ball is thrown, it is
    sent with a different force, at a different angle, and in a different environment
    with different conditions. So how is it that the moment a batter hits a baseball,
    an outfielder 300 feet away seems to immediately know where to run in order to
    catch it before it hits the ground?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'This question is called *the outfielder problem,* and it’s still being discussed
    in scholarly journals today. We’re starting with the outfielder problem because
    it has two very different solutions: an analytic solution and an algorithmic solution.
    Comparing these solutions will provide a vivid illustration of what an algorithm
    is and how it’s different from other approaches to problem-solving. Additionally,
    the outfielder problem will help us visualize a field that is occasionally abstract—you
    probably have some experience throwing and catching something, and this experience
    can help you understand the theory behind your practice.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Before we can really understand how a human knows exactly where a ball will
    land, it will help to understand how a machine does it. We’ll start by looking
    at an analytic solution to the outfielder problem. This solution is mathematically
    precise and easy for computers to execute instantaneously, and some version of
    it is usually taught in introductory physics classes. It would enable a sufficiently
    agile robot to play outfield for a baseball team.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'However, humans can’t easily run analytic equations in their heads, and certainly
    not as quickly as computers can. A solution that’s better suited to human brains
    is an algorithmic solution, which we’ll use to explore what an algorithm is and
    what its strengths are compared to other problem-solving solutions. Moreover,
    the algorithmic solution will show us that algorithms are natural to human thought
    processes and don’t need to be intimidating. The outfielder problem is meant to
    introduce a new way to solve problems: the algorithmic approach.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The Analytic Approach
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To solve this problem analytically, we have to go back a few centuries to an
    early model of motion.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The Galilean Model
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The equations most commonly used to model a ball’s movement date back to Galileo,
    who centuries ago formulated polynomials that capture acceleration, speed, and
    distance. If we ignore wind and air resistance and assume the ball starts at ground
    level, Galileo’s model says that the horizontal position of a thrown ball at time
    *t* will be given by the formula
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![c01eq001](Images/c01eq001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: where *v*[1] represents the starting speed of the ball in the *x* (horizontal)
    direction. Moreover, the height of a thrown ball (*y*), according to Galileo,
    can be calculated at time *t* as
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![c01eq002](Images/c01eq002.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'where *v*[2] represents the starting speed of the ball in the *y* (vertical)
    direction, and *a* represents the constant downward acceleration due to gravity
    (which will be about –9.81 if we are working in metric units). When we substitute
    the first equation into the second equation, we find that the height of a thrown
    ball (*y*) relates to the horizontal position of the ball (*x*) as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![c01eq003](Images/c01eq003.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: We can use Galileo’s equations to model a hypothetical ball’s trajectory in
    Python using the function in [Listing 1-1](#listing1-1). The specific polynomial
    in [Listing 1-1](#listing1-1) is appropriate for a ball whose initial horizontal
    speed is about 0.99 meters per second, and whose initial vertical speed is about
    9.9 meters per second. You can feel free to try other values for *v*[1] and *v*[2]
    to model any type of throw that interests you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Listing 1-1:](#listinganchor1-1) A function for calculating the trajectory
    of a ball'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: We can plot the function in [Listing 1-1](#listing1-1) in Python to see what,
    approximately, a ball’s trajectory should look like (ignoring air resistance and
    other negligible factors). We’ll import some plotting capabilities from a module
    called `matplotlib` in the first line. The `matplotlib` module is one of many
    third-party modules we’ll import in code throughout this book. Before you use
    a third-party module, you’ll have to install it. You can install `matplotlib`
    and any other third-party modules by following the instructions at [http://automatetheboringstuff.com/2e/appendixa/](http://automatetheboringstuff.com/2e/appendixa/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Listing 1-2:](#listinganchor1-2) Plotting a hypothetical ball trajectory between
    the moment it is thrown (at *x* = 0) and when it hits the ground again (at *x*
    = 2)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The output ([Figure 1-1](#figure1-1)) is a nice plot that shows the path our
    hypothetical ball is expected to follow through space. This pretty curved path
    is similar for every moving projectile that’s influenced by gravity and has been
    poetically called *Gravity’s Rainbow* by the novelist Thomas Pynchon.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Not all balls will follow this exact path, but this is one possible path that
    a ball could follow. The ball starts at 0, and it goes up and then down exactly
    like we are used to seeing balls go up and down, from the left of our field of
    view to the right.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![figure_1-1](Images/figure_1-1.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: '[Figure 1-1:](#figureanchor1-1) The trajectory of a hypothetical thrown ball'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The Solve-for-x Strategy
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have an equation for the ball’s position, we can solve that equation
    for anything that interests us: where the ball will reach its highest point, for
    example, or where it will get to ground level again, which is the one thing that
    an outfielder needs to know in order to catch it. Students in physics classes
    all over the world are taught how to find these solutions, and if we wanted to
    teach a robot to play outfield, it would be very natural to teach the robot these
    equations as well. The method for solving for the ball’s final location is as
    simple as taking the `ball_trajectory()`function we started with and setting it
    equal to 0:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了描述球位置的方程，我们就可以求解出任何我们感兴趣的内容：例如，球会达到的最高点，或者它再次回到地面的位置——这是外场手需要知道的唯一信息，才能接到球。全世界的物理课堂上，学生们都在学习如何找到这些解，如果我们想教机器人打外场，教它这些方程也是非常自然的。求解球最终位置的方法就像我们最初使用的
    `ball_trajectory()` 函数一样简单，只需要将其设为 0：
- en: '![c01eq004](Images/c01eq004.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq004](Images/c01eq004.png)'
- en: 'Then, we can solve this for *x*, using the quadratic formula taught to teenagers
    everywhere:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用青少年们学过的二次方程公式来解这个 *x*：
- en: '![c01eq005](Images/c01eq005.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq005](Images/c01eq005.png)'
- en: In this case, we find that *x* = 0 and *x* = 2 are the solutions. The first
    solution, *x* = 0, is where the ball started, where it was thrown by the pitcher
    or hit by the batter. The second solution, *x* = 2, is where the ball returns
    to the ground again after its flight.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们发现 *x* = 0 和 *x* = 2 是解答。第一个解 *x* = 0 是球开始的地方，就是投手投出或击球员击出的地方。第二个解
    *x* = 2 是球飞行后再次落地的地方。
- en: 'The strategy we just used is a relatively simple one. Let’s call it the *solve-for-*x
    *strategy*. We write down an equation that describes a situation, and then solve
    that equation for the variable we’re interested in. The solve-for-*x* strategy
    is extremely common in the hard sciences, at both the high school and college
    levels. Students are asked to solve for: a ball’s expected destination, the ideal
    level of economic production, the proportion of a chemical that should be used
    in an experiment, or any number of other things.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才使用的策略是相对简单的。我们可以称它为 *解 *x* 策略*。我们写下一个描述情境的方程，然后解这个方程，找出我们感兴趣的变量的值。解 *x*
    的策略在硬科学中非常常见，无论是在高中还是大学水平。学生们常常被要求解答：球的预期着陆点、经济生产的理想水平、实验中应使用的化学物质比例，或者其他许多问题。
- en: The solve-for-*x* strategy is extremely powerful. If, for example, an army observed
    an enemy force fire a projectile weapon (say, a missile), they could quickly plug
    Galileo’s equation into their calculators and nearly instantaneously find where
    the missile was expected to land, and evade it or intercept it accordingly. It
    could be done for free on a consumer-level laptop running Python. If a robot were
    playing outfield in a baseball game, it could do the same to catch a ball without
    breaking a sweat.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 解 *x* 的策略极其强大。例如，如果一支军队观察到敌方发射了一个投射武器（比如导弹），他们可以迅速将伽利略的方程输入到计算器中，几乎瞬间就能找出导弹预计着陆的位置，从而躲避或拦截它。这项操作可以在一台运行
    Python 的消费者级笔记本电脑上免费完成。如果一个机器人在棒球比赛中担任外场，它也可以通过这种方法接到球，轻松应对。
- en: The solve-for-*x* strategy is easy in this case because we already know the
    equation that needs to be solved and the method to solve it. We owe the equation
    for a thrown ball to Galileo, as mentioned. We owe the quadratic formula to the
    great Muhammad ibn Musa al-Khwarizmi, who was the first to specify a fully general
    solution of the quadratic equation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，解 *x* 的策略很简单，因为我们已经知道需要解的方程和解法。我们所说的投掷球的方程来自于伽利略，正如之前所提到的。而求解二次方程的公式则归功于伟大的穆罕默德·伊本·穆萨·阿尔-花拉兹米，他是第一个给出完全一般的二次方程解法的人。
- en: Al-Khwarizmi was a ninth-century polymath who contributed to astronomy, cartography,
    and trigonometry, besides giving us the word *algebra* and the method it refers
    to. He’s one of the important figures who has enabled us to take the journey of
    this book. Since we live after giants like Galileo and al-Khwarizmi, we don’t
    need to suffer through the difficult part of deriving their equations—we just
    have to memorize them and use them appropriately.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 阿尔-花拉兹米是九世纪的博学者，他在天文学、制图学和三角学方面做出了贡献，还给我们带来了“代数”一词及其相关方法。他是使我们能够走到这本书这一步的重要人物之一。由于我们生活在像伽利略和阿尔-花拉兹米这样巨人的后代，我们不需要经历推导他们方程的艰难过程——我们只需要记住它们并恰当地使用。
- en: The Inner Physicist
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内在物理学家
- en: Using Galileo’s and al-Khwarizmi’s equations and a solve-for-*x* strategy, a
    sophisticated machine can catch a ball or intercept a missile. But it seems reasonable
    to assume that most baseball players don’t start writing out equations as soon
    as they see a ball go into the air. Reliable observers have reported that professional
    baseball spring training programs consist of a great deal of time running around
    and playing, and considerably less time gathered around a whiteboard deriving
    the Navier-Stokes equations. Solving the mystery of where a ball will land doesn’t
    provide a clear-cut answer to the outfielder problem—that is, how a *human* can
    instinctively know where a ball will land without plugging it into a computer
    program.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Or maybe it does. The glibbest possible solution to the outfielder problem is
    to assert that if computers are solving Galilean quadratics to determine where
    balls will land, then so are humans. We’ll call this solution the *inner physicist
    theory*. According to this theory, the “wetware” of our brains is able to set
    up and solve quadratic equations, or else draw plots and extrapolate their lines,
    all far beneath the level of our consciousness. Each of us, in other words, has
    an “inner physicist” deep in our brains who can calculate exact solutions to difficult
    math problems in seconds and deliver the solutions to our muscles, which can then
    find their way to the ball, bringing our bodies and mitts along. Our subconscious
    might be able to do this even if we’ve never taken a physics class or solved for
    *x*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The inner physicist theory is not without its proponents. Notably, the well-known
    mathematician Keith Devlin published a book in 2006 called *The Math Instinct:
    Why You’re a Mathematical Genius (Along with Lobsters, Birds, Cats, and Dogs)*.
    The book’s cover shows a dog jumping to catch a Frisbee, with arrows tracing the
    respective trajectory vectors of the Frisbee and the dog, implying that the dog
    is able to perform the intricate calculations that would be required to make those
    vectors meet.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'The manifest ability of dogs to catch Frisbees and humans to catch baseballs
    seems to be a point in favor of the inner physicist theory. The subconscious is
    a mysterious and powerful thing, whose depths we have yet to fully plumb. So why
    couldn’t it solve some high school–level equations now and then? More pressingly,
    the inner physicist theory is difficult to refute because it’s hard to think of
    alternatives to it: if dogs can’t solve partial differential equations to catch
    Frisbees, then how do they catch them anyway? They take great leaps into the air
    and catch erratically moving Frisbees in their jaws like it’s nothing. If they
    aren’t solving some physics problem in their brains, then how else could they
    (and we) possibly know how to precisely intercept a ball?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: As recently as 1967, no one had a good answer. That year, the engineer Vannevar
    Bush wrote a book in which he described the scientific features of baseball as
    he understood them, and he was unable to provide any explanation for how outfielders
    know where to run to catch fly balls. Luckily for us, the physicist Seville Chapman
    read Bush’s book and was inspired to propose a theory of his own the very next
    year.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The Algorithmic Approach
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chapman, true scientist that he was, was not satisfied with a mystical and unverified
    trust in the human subconscious, and he wanted a more concrete explanation for
    outfielders’ powers. This is what he discovered.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Thinking with Your Neck
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Chapman began to tackle the outfielder problem by noting the information available
    to someone catching a ball. Though it’s difficult for humans to estimate an exact
    velocity or the trajectory of a parabolic arc, he thought we would have an easier
    time observing angles. If someone throws or hits a ball from the ground and the
    ground is flat and even, then the outfielder will see the ball start at close
    to eye level. Imagine an angle formed by two lines: the ground, and the line between
    the outfielder’s eyes and the ball. The moment the ball is hit by the batter,
    this angle will be (roughly) 0 degrees. After the ball has been in flight for
    a brief moment, it will be higher than the ground, so the angle between the ground
    and the outfielder’s line of sight with the ball will have increased. Even if
    the outfielder has not studied geometry, they will have a “feel” for this angle—for
    example, by feeling how far back they have to tilt their neck to see the ball.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: If we suppose that the outfielder is standing where the ball will eventually
    land, at *x* = 2, we can get a sense of the way the angle of the outfielder’s
    line of sight with the ball increases by plotting a line of sight from early in
    the ball’s trajectory. The following line of code creates a line segment for the
    plot we drew in [Listing 1-2](#listing1-2), and it is meant to be run in the same
    Python session. This line segment represents the line between the outfielder’s
    eyes and the ball after the ball has traveled 0.1 meters horizontally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can plot this line of sight along with other lines of sight to see how the
    angle continues to increase over the course of the ball’s trajectory. The following
    lines of code add more line segments to the same plot we drew in [Listing 1-2](#listing1-2).
    These line segments represent the line between the outfielder’s eyes and the ball
    at two more points in the ball’s journey: the points when the ball has traveled
    0.1, 0.2, and 0.3 meters horizontally. After creating all of these line segments,
    we will plot them all together.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The resulting plot shows several lines of sight that form continuously increasing
    angles with the ground ([Figure 1-2](#figure1-2)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![figure_1-2](Images/figure_1-2.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: '[Figure 1-2:](#figureanchor1-2) The trajectory of a hypothetical thrown ball,
    with line segments representing the outfielder looking at the ball as it travels'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'As the ball progresses through its flight, the angle of the outfielder’s line
    of sight continues to increase, and the outfielder has to keep tipping their head
    back until they make the catch. Let’s call the angle between the ground and the
    outfielder’s line of sight with the ball *theta*. We assume that the outfielder
    is standing at the ball’s eventual destination (*x* = 2). Recall from high school
    geometry class that the tangent of an angle in a right triangle is the ratio of
    the length of the side that’s opposite the angle and the length of the side that’s
    adjacent to the angle (and is not the hypotenuse). In this case, the tangent of
    theta is the ratio of the height of the ball to its horizontal distance from the
    outfielder. We can plot the sides whose ratio constitutes the tangent with the
    following Python code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The resulting plot is shown in [Figure 1-3](#figure1-3).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![figure_1-3](Images/figure_1-3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: '[Figure 1-3:](#figureanchor1-3) The trajectory of a hypothetical thrown ball,
    with a line segment representing the outfielder looking at the ball as it travels,
    and line segments A and B showing the lengths whose ratio constitutes the tangent
    we are interested in'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'We calculate the tangent by taking the ratio of the length of the side labeled
    A and the length of the side labeled B. The equation for the height A will be
    10*x* – 5*x*², while the equation for the length of B will be 2 – *x*. So the
    following equation implicitly describes the ball’s angle *theta* at each moment
    of its flight:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![c01eq006](Images/c01eq006.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'The overall situation is complex: a ball is hit far away and quickly shoots
    through a parabolic curve whose end is hard to immediately estimate. But in this
    complex situation, Chapman has found this simple relationship: that *when the
    outfielder is standing in the right location*, the tangent of theta grows at a
    simple, constant rate. The kernel of Chapman’s breakthrough is that the tangent
    of theta, the ball’s angle with the ground, grows linearly over time. Since Chapman
    found that simple relationship in the weeds of the outfielder problem, he was
    able to develop an elegant algorithmic solution to it.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: His solution depends on the fact that if something—in this case, the tangent
    of theta—grows at a constant rate, it has zero acceleration. So if you are standing
    exactly where a ball is headed, you’ll observe an angle whose tangent experiences
    zero acceleration. By contrast, if you are standing too close to the ball’s initial
    position, you’ll observe positive acceleration. If you are standing too far from
    the ball’s initial position, you’ll observe negative acceleration. (You are encouraged
    to verify the messy calculus behind these truths if you so desire.) This means
    that an outfielder can know where they need to go by feeling how steadily they
    have to tilt back their head as they look at the ball rising—thinking, so to speak,
    with their neck.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Applying Chapman’s Algorithm
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Robots don’t necessarily have necks, and so a method for “thinking with one’s
    neck” may not be helpful for a robot outfielder. Remember that they can solve
    quadratic equations directly and instantaneously to find where to go to catch
    a ball, without worrying about the acceleration of the tangent of theta. But for
    humans, Chapman’s neck-thinking method could be extremely useful. In order to
    get to the ball’s eventual destination, a human outfielder could follow this relatively
    simple process:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Observe the acceleration of the tangent of the angle between the ground and
    your line of sight with the ball.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the acceleration is positive, step backward.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the acceleration is negative, step forward.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1–3 until the ball is directly in front of your face.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Catch it.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One serious objection to Chapman’s five-step method is that outfielders following
    this process seem to have to calculate the tangents of angles on the fly, meaning
    we’re replacing an inner physicist theory with an “inner geometer theory” in which
    baseball players can instantaneously, and subconsciously, take tangents.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: One potential resolution to this objection is that for many angles, tan(theta)
    is approximately equal to theta, so rather than observing the acceleration of
    a tangent, outfielders can merely observe the acceleration of an angle. If the
    acceleration of an angle can be estimated by the felt acceleration of the neck
    joints that crick as the neck moves back to observe the ball, and if an angle
    is a reasonable approximation for its tangent, then we don’t need to assume any
    great subconscious mathematical or geometrical powers on the part of outfielders—only
    the physical skill of being accurately attuned to subtle sensory inputs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: By making an acceleration estimate the only difficult part of the process, we
    have obtained a potential solution to the outfielder problem that has much more
    psychological plausibility than the inner physicist’s theory of subconsciously
    extrapolated parabolas. Of course, the psychological appeal of the solution doesn’t
    mean that it can be used only by humans. A robot outfielder could also be programmed
    to follow Chapman’s five-step process, and it might even perform better at catching
    the ball if it did so, because, for example, Chapman’s process enables those who
    use it to dynamically respond to changes due to wind or bounces.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides psychological plausibility, there’s one more crucial feature that the
    five-step process implied by Chapman’s insight possesses: it doesn’t rely on a
    solve-for-*x* strategy or any explicit equation at all. Instead, it proposes successive
    iterations of easy observations and small, gradual steps to reach a well-defined
    goal. In other words, the process that we have inferred from Chapman’s theory
    is an algorithm.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Solving Problems with Algorithms
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The word *algorithm* came from the name of the great al-Khwarizmi, mentioned
    earlier. It’s not an easy word to define, not least because its accepted definition
    has changed over time. Stated simply, an algorithm is just a set of instructions
    that produce a well-defined outcome. This is a broad definition; as we saw in
    the Introduction, tax forms and recipes for parfaits could rightly be considered
    algorithms.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Chapman’s ball-catching process, or Chapman’s algorithm as we may want to call
    it, is arguably even more algorithm-like than a recipe for a parfait, because
    it contains a looping structure in which small steps are taken repeatedly until
    a definite condition is reached. This is a common algorithmic structure you’ll
    see throughout this book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Chapman proposed an algorithmic solution to the outfielder problem because a
    solve-for-*x* solution was not plausible (outfielders often don’t know the relevant
    equations). In general, algorithms are most useful when the solve-for-*x* strategy
    fails. Sometimes we don’t know the right equations to use, but more often there
    is no equation that could fully describe a situation, the equation is impossible
    to solve, or we face time or space constraints. Algorithms exist at the edge of
    what is possible, and every time an algorithm is created or improved, we push
    the frontier of efficiency and knowledge out a little further.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Today, there is a common perception that algorithms are difficult, esoteric,
    mysterious, and strictly mathematical and that they require years of study to
    understand. The way our education system is structured today, we begin teaching
    children the solve-for-*x* strategy as early as possible, and we explicitly teach
    algorithms only at the college or graduate school levels, if at all. For many
    students, it takes years to master the solve-for-*x* strategy, and it always feels
    unnatural to them. People who have had this experience may assume that algorithms
    will feel just as unnatural, and will also be more difficult to understand because
    they are more “advanced.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the lesson I take from Chapman’s algorithm is that we have gotten
    it all exactly backward. During recess, students learn and perfect their performance
    of dozens of algorithms, for catching, throwing, kicking, running, and moving.
    There are probably also much more complex algorithms, which have not been fully
    delineated, that govern the operation of the social world of recess: the talking,
    status seeking, gossiping, alliance formation, and friendship cultivation. When
    we end recess time and start math class, we take students out of a world of algorithm
    exploration and push them to learn an unnatural and mechanistic process of solving
    for *x*, a process that is not a natural part of human development and is not
    even the most powerful method for solving analytical problems. Only if students
    progress to advanced math and computer science do they return to the natural world
    of algorithms and the powerful processes that they were unconsciously and joyfully
    mastering at recess.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is meant to be an intellectual recess for the curious—a recess in
    the sense that a young student means it: the beginning of all important activity,
    the end of all drudgery, and the continuation of cheerful exploration with friends.
    If you have any feeling of trepidation about algorithms, remind yourself that
    we humans are naturally algorithmic, and if you can catch a ball or bake a cake,
    you can master an algorithm.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of this book, we explore many different algorithms. Some will
    sort lists or calculate numbers. Others will enable natural language processing
    and artificial intelligence. I encourage you to bear in mind that algorithms don’t
    grow on trees. Each algorithm, before it became mainstream and was packaged for
    general consumption in this book, was discovered or created by someone like Chapman,
    who woke up one day in a world in which his algorithm didn’t exist and went to
    sleep at the end of that day in a world in which it did. I encourage you to try
    to get in the mindset of these heroic discoverers. That is, I encourage you to
    approach an algorithm not only as a tool to be used but also as a formidable problem
    that was solved. The world of algorithms is not yet close to being fully mapped—many
    remain to be discovered and perfected, and I earnestly hope that you can be a
    part of that discovery process.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you saw two approaches to solving a problem: the analytic
    one and the algorithmic one. By solving the outfield problem two ways, we explored
    the differences between these approaches, ultimately arriving at Chapman’s algorithm.
    Chapman found a simple pattern in a complex situation (the constant acceleration
    of the tangent of theta) and used it to develop the idea of an iterative, looping
    process that requires only one simple input (the feeling of acceleration in a
    craning neck) and leads to a definite goal (catching a ball). When you seek to
    develop and use algorithms in your own work, you can try to emulate Chapman’s
    example.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look at some examples of algorithms in history. These
    examples should deepen your appreciation of algorithms, including what they are
    and how they work. We’ll talk about algorithms from ancient Egypt, ancient Greece,
    and Imperial Japan. Every new algorithm you learn can be an addition to the “toolbox”
    of algorithms that you can rely on when you eventually advance to the point at
    which you can design and perfect your own.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
