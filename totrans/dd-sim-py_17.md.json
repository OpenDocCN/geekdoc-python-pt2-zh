["```py\nclass Collection:\n\n    def __init__(self, title, page_start, length=1):\n        self.title = title\n        self.page_start = page_start\n self.page_end = page_start + length – 1\n        self.items = []\n\n    def __str__(self):\n        return self.title\n\n    def expand(self, by):\n        self.page_end += by\n\n    def add_item(self, bullet, note, signifier=None):\n        \"\"\"Adds an item to the monthly log.\"\"\"\n```", "```py\nclass MonthlyLog(Collection):\n\n    def __init__(self, month, year, page_start, length=2):\n        ❶ super().__init__( ❷ f\"{month} {year}\", page_start, length)\n        self.events = []\n\n    def __str__(self):\n        return f\"{ ❸ self.title} (Monthly Log)\"\n\n    def add_event(self, event, date=None):\n        \"\"\"Logs an event for the given date (today by default).\"\"\"\n```", "```py\nclass FutureLog(Collection):\n\n    def __init__(self, start_month, page_start):\n        super().__init__(\"Future Log\", page_start, 4)\n        self.start = start_month\n        self.months = [start_month]  # TODO: Add other five months.\n\n    def add_item(self, bullet, note, signifier=None, month=None):\n        \"\"\"Adds an item to the future log for the given month.\"\"\"\n```", "```py\nprint(issubclass(FutureLog, Collection))  # prints True\n```", "```py\nlog = FutureLog('May 2023', 5)\nlog.add_item('June 2023', '.', 'Clean mechanical keyboard')\nprint(log)      # prints \"Future Log\"\n\nmonthly = MonthlyLog('April', '2023', 9)\nmonthly.add_event('Finally learned Python inheritance!')\nmonthly.add_item('.', 'Email Ben re: coffee meeting')\nprint(monthly)  # prints \"April 2023 (Monthly Log)\"\n\nto_read = Collection(\"Books to Read\", 17)\nto_read.add_item('.', 'Anne of Avonlea')\nprint(to_read)  # prints \"Books to Read\"\n```", "```py\nclass Food:\n    def __str__(self):\n        return \"Yum, what is it?\"\n\nclass Pizza(Food):\n    def __str__(self):\n        return \"Piiiizzaaaaaa\"\n\nclass Sandwich(Food):\n    def __str__(self):\n        return \"Mmm, sammich.\"\n\nclass Calzone(Pizza, Sandwich):\n    pass\n```", "```py\ncalzone = Calzone()\nprint(calzone)  # What gets printed??\n```", "```py\nL[Food] = Food, object\n```", "```py\nL[Pizza] = merge(Pizza, {Food, object})\n```", "```py\nL[Pizza] = merge(`Pizza`, {Food, object})\n```", "```py\nL[Pizza] = **Pizza** + merge({`Food`, object})\n```", "```py\nL[Pizza] = Pizza + **Food** + merge({`object`})\n```", "```py\nL[Pizza] = Pizza + Food + **object**\n```", "```py\nL[Sandwich]: Sandwich + Food + object\n```", "```py\nL[Calzone] = merge(\n    Calzone,\n    {Pizza, Food, object},\n    {Sandwich, Food, object}\n)\n```", "```py\nL[Calzone] = merge(\n    `Calzone`,\n    {Pizza, Food, object},\n    {Sandwich, Food, object}\n)\n```", "```py\nL[Calzone] = **Calzone** + merge(\n    {`Pizza`, Food, object},\n    {Sandwich, Food, object}\n)\n```", "```py\nL[Calzone] = Calzone + **Pizza** + merge(\n    {*Food*, object},\n    {Sandwich, `Food`, object}\n)\n```", "```py\nL[Calzone] = Calzone + Pizza + merge(\n    {Food, object},\n    {`Sandwich`, Food, object}\n)\n```", "```py\nL[Calzone] = Calzone + Pizza + **Sandwich** + merge(\n    {`Food`, object},\n    {`Food`, object}\n)\n```", "```py\nL[Calzone] = Calzone + Pizza + Sandwich + **Food** + merge(\n    {`object`},\n    {`object`}\n)\n```", "```py\nL[Calzone] = Calzone + Pizza + Sandwich + Food + **object**\n```", "```py\ncalzone = Calzone()\nprint(calzone)  # What gets printed??\n```", "```py\nPiiiizzaaaaaa\n```", "```py\nclass PizzaSandwich(Sandwich, Pizza):\n    pass\n\nclass CalzonePizzaSandwich(Calzone, PizzaSandwich):\n    pass\n```", "```py\nL[PizzaSandwich] = PizzaSandwich + Sandwich + Pizza + Food + object\n```", "```py\nL[CalzonePizzaSandwich] = merge(\n    `CalzonePizzaSandwich`,\n    {Calzone, Pizza, Sandwich, Food, object},\n    {PizzaSandwich, Sandwich, Pizza, Food, object}\n)\n```", "```py\nL[CalzonePizzaSandwich] = **CalzonePizzaSandwich** + merge(\n    {`Calzone`, Pizza, Sandwich, Food, object},\n    {PizzaSandwich, Sandwich, Pizza, Food, object}\n)\n```", "```py\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + **Calzone** + merge(\n    {`Pizza`, Sandwich, Food, object},\n    {PizzaSandwich, Sandwich, `Pizza`, Food, object}\n)\n```", "```py\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + merge(\n    {Pizza, Sandwich, Food, object},\n    {`PizzaSandwich`, Sandwich, Pizza, Food, object}\n)\n```", "```py\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + **PizzaSandwich** + merge(\n    {`Pizza`, Sandwich, Food, object},\n    {Sandwich, `Pizza`, Food, object}\n)\n```", "```py\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + PizzaSandwich + merge(\n    {Pizza, `Sandwich`, Food, object},\n    {`Sandwich`, Pizza, Food, object}\n)\n```", "```py\nTypeError: Cannot create a consistent method resolution\n```", "```py\nclass PizzaSandwich(**Pizza**, **Sandwich**):\n    pass\n\nclass CalzonePizzaSandwich(Calzone, PizzaSandwich):\n    pass\n```", "```py\nL[CalzonePizzaSandwich] = merge(\n    *CalzonePizzaSandwich*,\n    {Calzone, Pizza, Sandwich, Food, object},\n    {PizzaSandwich, Pizza, Sandwich, Food, object}\n)\n\nL[CalzonePizzaSandwich] = **CalzonePizzaSandwich** + merge(\n    {`Calzone`, Pizza, Sandwich, Food, object},\n    {PizzaSandwich, Pizza, Sandwich, Food, object}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + **Calzone** + merge(\n    {`Pizza`, Sandwich, Food, object},\n    {PizzaSandwich, `Pizza`, Sandwich, Food, object}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + merge(\n    {Pizza, Sandwich, Food, object},\n    {`PizzaSandwich`, Pizza, Sandwich, Food, object}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + **PizzaSandwich** + merge(\n    {`Pizza`, Sandwich, Food, object},\n    {`Pizza`, Sandwich, Food, object}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + PizzaSandwich + **Pizza** + merge(\n    {`Sandwich`, Food, object},\n    {`Sandwich`, Food, object}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + PizzaSandwich + Pizza + **Sandwich** + merge(\n    {`Food`, object},\n    {`Food`, object}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + PizzaSandwich + Pizza + Sandwich + **Food** + merge(\n    {`object`},\n    {`object`}\n)\n\nL[CalzonePizzaSandwich] = CalzonePizzaSandwich + Calzone + PizzaSandwich + Pizza + Sandwich + Food + **object**\n```", "```py\nclass PizzaSandwich(Pizza, Sandwich):\n    pass\n\nclass CalzonePizzaSandwich(Calzone, PizzaSandwich):\n    **def __str__(self):**\n **return Calzone.__str__(self)**\n```", "```py\nclass Food:\n    def __init__(self, ❶ name):\n        self.name = name\n\nclass Pizza(Food):\n    def __init__(self, toppings):\n        super().__init__(\"Pizza\")\n        self.toppings = toppings\n\nclass Sandwich(Food):\n    def __init__(self, bread, fillings):\n        super().__init__(\"Sandwich\")\n        self.bread = bread\n        self.fillings = fillings\n```", "```py\nclass Calzone(Pizza, Sandwich):\n    def __init__(self, toppings):\n        super().__init__(toppings)\n        # what about Sandwich.__init__??\n\n# The usage...\npizza = Pizza(toppings=\"pepperoni\")\nsandwich = Sandwich(bread=\"rye\", fillings=\"swiss\")\ncalzone = Calzone(\"sausage\")  # TypeError: __init__() missing 1 required positional argument: 'fillings'\n```", "```py\nclass Calzone(Pizza, Sandwich):\n    def __init__(self, toppings):\n        **Pizza.__init__(self, toppings)**\n        **Sandwich.__init__(self, 'pizza crust', toppings)**\n\n# The usage...\npizza = Pizza(toppings=\"pepperoni\")\nsandwich = Sandwich(bread=\"rye\", fillings=\"swiss\")\ncalzone = Calzone(\"sausage\")\n```", "```py\nclass Food:\n    def __init__(self, name):\n        self.name = name\n\nclass Pizza(Food):\n    **def __init__(self, toppings, name=\"Pizza\", **kwargs):**\n **super().__init__(name=name, **kwargs)**\n        self.toppings = toppings\n\nclass Sandwich(Food):\n    **def __init__(self, bread, fillings, name=\"Sandwich\", **kwargs):**\n        **super().__init__(name=name, **kwargs)**\n        self.bread = bread\n        self.fillings = fillings\n```", "```py\nclass Calzone(Pizza, Sandwich):\n    def __init__(self, toppings):\n        **super().__init__(**\n **toppings=toppings,**\n **bread='pizza crust',**\n **fillings=toppings,**\n **name='Calzone'**\n **)**\n **# The usage...\npizza = Pizza(toppings=\"pepperoni\")\nsandwich = Sandwich(bread=\"rye\", fillings=\"swiss\")\ncalzone = Calzone(\"sausage\")**\n```", "```py\n[MAGIC]\nUserName = Jason\nMagicNumber = 42\n```", "```py\nimport configparser\nfrom pathlib import Path\n\nclass SettingsFileMixin:\n\n    settings_path = Path('livesettings.ini')\n    config = configparser.ConfigParser()\n\n    def read_setting(self, key):\n        self.config.read(self.settings_path)\n        try:\n            return self.config[self.settings_section][key]\n        except KeyError:\n            raise KeyError(\"Invalid section in settings file.\")\n```", "```py\nclass Greeter(SettingsFileMixin):\n\n    def __init__(self, greeting):\n        self.settings_section = 'MAGIC'\n        self.greeting = greeting\n\n    def __str__(self):\n        try:\n            name = self.read_setting('UserName')\n        except KeyError:\n            name = \"user\"\n        return f\"{self.greeting} {name}!\"\n```", "```py\nclass MagicNumberPrinter(SettingsFileMixin):\n\n    def __init__(self, greeting):\n        self.settings_section = 'MAGIC'\n\n    def __str__(self):\n        try:\n            magic_number = self.read_setting('MagicNumber')\n        except KeyError:\n            magic_number = \"unknown\"\n        return f\"The magic number is {magic_number}!\"\n```", "```py\ngreeter = Greeter(\"Salutations,\")\nfor i in range(100000):\n    print(greeter)\n```", "```py\n`# --snip--`\nSalutations, Jason!\nSalutations, Jason!\nSalutations, Jason!\nSalutations, Bob!\nSalutations, Bob!\nSalutations, Bob!\n`# --snip--`\n```"]