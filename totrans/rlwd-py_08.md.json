["```py\ntransit.py, part 1\nimport math\nimport numpy as np\nimport cv2 as cv\nimport matplotlib.pyplot as plt\n\nIMG_HT = 400\nIMG_WIDTH = 500\nBLACK_IMG = np.zeros((IMG_HT, IMG_WIDTH, 1), dtype='uint8') \nSTAR_RADIUS = 165\nEXO_RADIUS = 7\nEXO_DX = 3\nEXO_START_X = 40\nEXO_START_Y = 230\nNUM_FRAMES = 145\n```", "```py\ntransit.py, part 2\ndef main():\n    intensity_samples = record_transit(EXO_START_X, EXO_START_Y)  \n    relative_brightness = calc_rel_brightness(intensity_samples)\n    print('\\nestimated exoplanet radius = {:.2f}\\n'\n          .format(STAR_RADIUS * math.sqrt(max(relative_brightness)\n                                          - min(relative_brightness))))\n    plot_light_curve(relative_brightness)\n```", "```py\ntransit.py, part 3\ndef record_transit(exo_x, exo_y):\n    \"\"\"Draw planet transiting star and return list of intensity changes.\"\"\"\n    intensity_samples = []\n    for _ in range(NUM_FRAMES):\n        temp_img = BLACK_IMG.copy()\n        cv.circle(temp_img, (int(IMG_WIDTH / 2), int(IMG_HT / 2)),\n                  STAR_RADIUS, 255, -1)\n     ➊ cv.circle(temp_img, (exo_x, exo_y), EXO_RADIUS, 0, -1)\n        intensity = temp_img.mean()\n        cv.putText(temp_img, 'Mean Intensity = {}'.format(intensity), (5, 390),\n                   cv.FONT_HERSHEY_PLAIN, 1, 255)\n        cv.imshow('Transit', temp_img)\n        cv.waitKey(30)\n     ➋ intensity_samples.append(intensity)\n        exo_x += EXO_DX\n    return intensity_samples\n```", "```py\ntransit.py, part 4 \n   def calc_rel_brightness(intensity_samples):\n       \"\"\"Return list of relative brightness from list of intensity values.\"\"\"\n       rel_brightness = []\n       max_brightness = max(intensity_samples)\n       for intensity in intensity_samples:\n          rel_brightness.append(intensity / max_brightness)\n       return rel_brightness\n\n➊ def plot_light_curve(rel_brightness):\n       \"\"\"Plot changes in relative brightness vs. time.\"\"\"\n       plt.plot(rel_brightness, color='red', linestyle='dashed',\n               linewidth=2, label='Relative Brightness')\n       plt.legend(loc='upper center')\n       plt.title('Relative Brightness vs. Time')\n       plt.show()\n\n➋ if __name__ == '__main__':\n      main()\n```", "```py\nplt.ylim(0, 1.2)\n```", "```py\nestimated exoplanet radius = 6.89\n```", "```py\npixelator.py, part 1\nimport numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\n\nfiles = ['earth_west.png', 'earth_east.png']\n\nfor file in files:\n    img_ini = cv.imread(file)\n    pixelated = cv.resize(img_ini, (3, 3), interpolation=cv.INTER_AREA)\n    img = cv.resize(pixelated, (300, 300), interpolation=cv.INTER_AREA)\n    cv.imshow('Pixelated {}'.format(file), img)\n    cv.waitKey(2000)\n```", "```py\npixelator.py, part 2 \n   b, g, r = cv.split(pixelated)\n   color_aves = []\n   for array in (b, g, r):\n       color_aves.append(np.average(array))\n\n   labels = 'Blue', 'Green', 'Red'\n   colors = ['blue', 'green', 'red']    \n   fig, ax = plt.subplots(figsize=(3.5, 3.3))  # size in inches\n➊ _, _, autotexts = ax.pie(color_aves,\n                            labels=labels,\n                            autopct='%1.1f%%',\n                            colors=colors)\n   for autotext in autotexts:\n       autotext.set_color('white')\n   plt.title('{}\\n'.format(file))\n\nplt.show()\n```", "```py\n[[ 49  93  22]\n [124 108  65]\n [ 52 118  41]]\n```", "```py\n[Text(0.1832684031431146, 0.5713253822554821, '40.1%'), Text(-0.5646237442340427,\n-0.20297789891298565, '30.7%'), Text(0.36574010704848686, -0.47564080364930983, '29.1%')\n```", "```py\npixelator_saturated_only.py\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\n\nfiles = ['earth_west.png', 'earth_east.png']\n\n# Downscale image to 3x3 pixels.\nfor file in files:\n    img_ini = cv.imread(file)\n    pixelated = cv.resize(img_ini, (3, 3), interpolation=cv.INTER_AREA)\n    img = cv.resize(pixelated, (300, 300), interpolation=cv.INTER_NEAREST)\n    cv.imshow('Pixelated {}'.format(file), img)\n    cv.waitKey(2000)\n\n ➊ color_values = pixelated[1, 1]  # Selects center pixel.\n\n    # Make pie charts.\n    labels = 'Blue', 'Green', 'Red'\n    colors = ['blue', 'green', 'red']    \n    fig, ax = plt.subplots(figsize=(3.5, 3.3))  # Size in inches.\n\n ➋ _, _, autotexts = ax.pie(color_values,\n                             labels=labels,\n                             autopct='%1.1f%%',\n                             colors=colors)\n    for autotext in autotexts:\n        autotext.set_color('white')\n ➌ plt.title('{} Saturated Center Pixel \\n'.format(file))\n\nplt.show()\n```", "```py\n[108 109 109]\n```"]