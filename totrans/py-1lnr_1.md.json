["```py\n## Arithmetic Operations\n\nx, y = 3, 2\n\nprint(x + y) # = 5\n\nprint(x - y) # = 1\n\nprint(x * y) # = 6\n\nprint(x / y) # = 1.5\n\nprint(x // y) # = 1\n\nprint(x % y) # = 1\n\nprint(-x) # = -3\n\nprint(abs(-x)) # = 3\n\nprint(int(3.9)) # = 3\n\nprint(float(x)) # = 3.0\n\nprint(x ** y) # = 9\n```", "```py\nx = 1 > 2\n\nprint(x)\n\n# False\n\ny = 2 > 1\n\nprint(y)\n\n# True\n```", "```py\nx, y = True, False\n\nprint((x or y) == True)\n\n# True\n\nprint((x and y) == False)\n\n# True\n\nprint((not y) == True)\n\n# True\n```", "```py\n## 1\\. Boolean Operations\n\nx, y = True, False\n\nprint(x and not y)\n\n# True\n\nprint(not x and y or x)\n\n# True\n\n## 2\\. If condition evaluates to False\n\nif None or 0 or 0.0 or '' or [] or {} or set():\n\n    print(\"Dead code\") # Not reached\n```", "```py\n## Most Important String Methods\n\ny = \"    This is lazy\\t\\n   \"\n\nprint(y.strip())\n\n# Remove Whitespace: 'This is lazy'\n\nprint(\"DrDre\".lower())\n\n# Lowercase: 'drdre'\n\nprint(\"attention\".upper())\n\n# Uppercase: 'ATTENTION'\n\nprint(\"smartphone\".startswith(\"smart\"))\n\n# Matches the string's prefix against the argument: True\n\nprint(\"smartphone\".endswith(\"phone\"))\n\n# Matches the string's suffix against the argument: True\n\nprint(\"another\".find(\"other\"))\n\n# Match index: 2\n\nprint(\"cheat\".replace(\"ch\", \"m\"))\n\n# Replaces all occurrences of the first by the second argument: meat\n\nprint(','.join([\"F\", \"B\", \"I\"]))\n\n# Glues together all elements in the list using the separator string: F,B,I\n\nprint(len(\"Rumpelstiltskin\"))\n\n# String length: 15\n\nprint(\"ear\" in \"earth\")\n\n# Contains: True\n```", "```py\ndef f():\n\n   x = 2\n\n# The keyword 'is' will be introduced next\n\nprint(f() is None)\n\n# True\n\nprint(\"\" == None)\n\n# False\n\nprint(0 == None)\n\n# False\n```", "```py\nl = [1, 2, 2]\n\nprint(len(l))\n\n# 3\n```", "```py\ny = x = 3\n\nprint(x is y)\n\n# True\n\nprint([3] is [3])\n\n# False\n```", "```py\n# 1\\. Append\n\nl = [1, 2, 2]\n\nl.append(4)\n\nprint(l)\n\n# [1, 2, 2, 4]\n\n# 2\\. Insert\n\nl = [1, 2, 4]\n\nl.insert(2, 3)\n\nprint(l)\n\n# [1, 2, 3, 4]\n\n# 3\\. List Concatenation\n\nprint([1, 2, 2] + [4])\n\n# [1, 2, 2, 4]\n```", "```py\nl = [1, 2, 2, 4]\n\nl.remove(1)\n\nprint(l)\n\n# [2, 2, 4]\n```", "```py\nl = [1, 2, 2, 4]\n\nl.reverse()\n\nprint(l)\n\n# [4, 2, 2, 1]\n```", "```py\nl = [2, 1, 4, 2]\n\nl.sort()\n\nprint(l)\n\n# [1, 2, 2, 4]\n```", "```py\nprint([2, 2, 4].index(2))\n\n# 0\n\nprint([2, 2, 4].index(2,1))\n\n# 1\n```", "```py\nstack = [3]\n\nstack.append(42) # [3, 42]\n\nstack.pop() # 42 (stack: [3])\n\nstack.pop() # 3 (stack: [])\n```", "```py\nhero = \"Harry\"\n\nguide = \"Dumbledore\"\n\nenemy = \"Lord V.\"\n\nprint(hash(hero))\n\n# 6175908009919104006\n\nprint(hash(guide))\n\n# -5197671124693729851\n\n## Can we create a set of strings?\n\ncharacters = {hero, guide, enemy}\n\nprint(characters)\n\n# {'Lord V.', 'Dumbledore', 'Harry'}\n\n## Can we create a set of lists?\n\nteam_1 = [hero, guide]\n\nteam_2 = [enemy]\n\nteams = {team_1, team_2}\n\n# TypeError: unhashable type: 'list'\n```", "```py\ncharacters = {hero, guide, enemy}\n\nprint(characters)\n\n# {'Lord V.', 'Dumbledore', 'Harry'}\n```", "```py\nclone_army = {hero, hero, hero, hero, hero, enemy}\n\nprint(clone_army)\n\n# {'Lord V.', 'Harry'}\n```", "```py\ncalories = {'apple' : 52, 'banana' : 89, 'choco' : 546}\n```", "```py\nprint(calories['apple'] < calories['choco'])\n\n# True\n\ncalories['cappu'] = 74\n\nprint(calories['banana'] < calories['cappu'])\n\n# False\n```", "```py\nprint('apple' in calories.keys())\n\n# True\n\nprint(52 in calories.values())\n\n# True\n```", "```py\nfor k, v in calories.items():\n\n    print(k) if v > 500 else None\n\n# 'choco'\n```", "```py\n➊ print(42 in [2, 39, 42]) \n\n  # True\n\n➋ print(\"21\" in {\"2\", \"39\", \"42\"}) \n\n  # False\n\n  print(\"list\" in {\"list\" : [1, 2, 3], \"set\" : {1,2,3}})\n\n  # True\n```", "```py\n# (name, $-income)\n\ncustomers = [(\"John\", 240000),\n\n             (\"Alice\", 120000),\n\n             (\"Ann\", 1100000),\n\n             (\"Zach\", 44000)]\n\n# your high-value customers earning >$1M\n\nwhales = [x for x,y in customers if y>1000000]\n\nprint(whales)\n\n# ['Ann']\n```", "```py\n➊ x = int(input(\"your value: \")) \n\n➋ if x > 3: \n\n      print(\"Big\")\n\n➌ elif x == 3: \n\n      print(\"Medium\")\n\n➍ else: \n\n      print(\"Small\")\n```", "```py\n# For loop declaration\n\nfor i in [0, 1, 2]:\n\n   print(i)\n\n'''\n\n0\n\n1\n\n2\n\n'''\n\n# While loop - same semantics\n\nj = 0\n\nwhile j < 3:\n\n   print(j)\n\n   j = j + 1\n\n'''\n\n0\n\n1\n\n2\n\n'''\n```", "```py\nwhile True:\n\n   break # no infinite loop\n\nprint(\"hello world\")\n\n# hello world\n```", "```py\nwhile True:\n\n  continue\n\n  print(\"43\") # dead code\n```", "```py\ndef appreciate(x, percentage):\n\n   return x + x * percentage / 100\n\nprint(appreciate(10000, 5))\n\n# 10500.0\n```", "```py\nlambda <arguments> : <return expression>\n```", "```py\nprint((lambda x: x + 3)(3))\n\n# 6\n```"]