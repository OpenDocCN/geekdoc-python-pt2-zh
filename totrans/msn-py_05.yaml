- en: '**5'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PREPARING THE SPACE STATION EQUIPMENT**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the space station walls are in place, we can start installing the equipment.
    We’ll need detailed information about the different pieces of equipment, including
    the furniture, survival systems, and experimental machinery. In this chapter,
    you’ll add information about all the items on the space station, including their
    images and descriptions. You’ll also experiment with designing your own room and
    view it using the *Explorer* program you created in [Chapter 4](ch04.xhtml#ch04).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A SIMPLE PLANETS DICTIONARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To store the information about the space station equipment, we’ll use a programming
    concept called dictionaries. A *dictionary* is a bit like a list but with a built-in
    search engine. Let’s take a closer look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '**UNDERSTANDING THE DIFFERENCE BETWEEN A LIST AND A DICTIONARY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with a paper dictionary, you can use a word or phrase to look up information
    in a Python dictionary. That word or phrase is called the *key*, and the information
    linked to the key is called the *value*. Unlike in a paper dictionary, the entries
    in a Python dictionary can be in any order. They don’t have to be alphabetical.
    Python can go directly to the entry you need, wherever it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you have a list that contains information about previous space missions.
    You could get the first item from that list by using this line:'
  prefs: []
  type: TYPE_NORMAL
- en: print(mission_info[0])
  prefs: []
  type: TYPE_NORMAL
- en: 'If mission_info was a dictionary instead of a list, you could use a mission
    name instead of an index number to get the information on that mission, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: print(mission_info["Apollo 11"])
  prefs: []
  type: TYPE_NORMAL
- en: The key can be a word or phrase but can also be a number. We’ll start by using
    words because it’s easier to understand the difference between a list and a dictionary
    that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING AN ASTRONOMY CHEAT SHEET DICTIONARY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All astronauts need a good understanding of the solar system, so let’s learn
    about the planets as we build our first dictionary. We’ll use the planet names
    as the keys and connect each name to information about that planet.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at [Listing 5-1](ch05.xhtml#ch05list1), which creates a dictionary
    called planets. When you make a dictionary, you use curly brackets {} to mark
    the start and end of it, instead of the square brackets you use for a list.
  prefs: []
  type: TYPE_NORMAL
- en: Each entry in the dictionary is made up of the key, followed by a colon and
    then the information for that entry. As with a list, we separate the entries with
    commas and put double quotes around pieces of text.
  prefs: []
  type: TYPE_NORMAL
- en: Open a new file in IDLE (**File** ▸ **New File**) and enter the following program.
    Save it as *listing5-1.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-1.py*'
  prefs: []
  type: TYPE_NORMAL
- en: 'planets = { "Mercury": "The smallest planet, nearest the Sun",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Venus": "Venus takes 243 days to rotate",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Earth": "The only planet known to have native life",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mars": "The Red Planet is the second smallest planet",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Jupiter": "The largest planet, Jupiter is a gas giant",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Saturn": "The second largest planet is a gas giant",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Uranus": "An ice giant with a ring system",'
  prefs: []
  type: TYPE_NORMAL
- en: '"Neptune": "An ice giant and farthest from the Sun"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '➊ while True:'
  prefs: []
  type: TYPE_NORMAL
- en: ➋     query = input("Which planet would you like information on? ")
  prefs: []
  type: TYPE_NORMAL
- en: ➌     print(planets[query])
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-1: Your first dictionary program*'
  prefs: []
  type: TYPE_NORMAL
- en: This program doesn’t use Pygame Zero, so you can run it by clicking **Run**
    ▸ **Run Module** at the top of the IDLE window. (It will still work if you run
    it using pgzrun, but it’s easier to use the menu.) When you run the program, it
    asks you which planet you want information on using the input() built-in function
    ➋. Try entering Earth or Jupiter for the planet name.
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Earth
  prefs: []
  type: TYPE_NORMAL
- en: The only planet known to have native life
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Jupiter
  prefs: []
  type: TYPE_NORMAL
- en: The largest planet, Jupiter is a gas giant
  prefs: []
  type: TYPE_NORMAL
- en: Whichever planet name you enter is stored in the variable query. That variable
    is then used to look up the information for that planet in the planets dictionary
    ➌. Instead of using an index number inside the square brackets as we did with
    a list, we use the word we entered to get the information, and that word is stored
    in the variable query.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, we can use a while ➊ loop to repeat a set of instructions. Unlike
    a for loop, which we use to repeat a certain number of times, a while loop usually
    repeats until something changes. Often in a game, the while command will check
    a variable to decide whether to keep repeating instructions. For example, the
    instruction while lives > 0 could keep a game going until the player runs out
    of lives. When the lives variable changes to 0, the instructions in the loop would
    stop repeating.
  prefs: []
  type: TYPE_NORMAL
- en: The while True command we use in *listing5-1.py* will keep repeating forever,
    because it means “while True is True,” which is always. For this while True command
    to work, make sure you capitalize True and place a colon at the end of the line.
  prefs: []
  type: TYPE_NORMAL
- en: Under the while command, we use four spaces to indent the instructions that
    should repeat. Here, we’ve indented the lines that ask you for a planet name and
    then give you the planet information, so they’re the instructions that repeat.
    After you enter a planet name and get the information, the program asks you for
    another planet name, and another, forever. Or until you stop the program by pressing
    CTRL-C, at least.
  prefs: []
  type: TYPE_NORMAL
- en: Although this program works, it isn’t complete yet. You might get an unhelpful
    error if you enter a planet name that isn’t in the dictionary. Let’s fix the code
    so it returns a useful message instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**ERROR-PROOFING THE DICTIONARY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you enter a key that isn’t in the dictionary, you’ll see an error message.
    Python looks for an exact match. So, if you try to look up something that isn’t
    in the dictionary or make even a tiny spelling mistake, you won’t get the information
    you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dictionary keys, like variable names, are case sensitive, so if you type earth
    instead of Earth, the program will crash. If you enter a planet that doesn’t exist,
    this is what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Pluto
  prefs: []
  type: TYPE_NORMAL
- en: 'Traceback (most recent call last):'
  prefs: []
  type: TYPE_NORMAL
- en: File "C:\Users\Sean\Documents\Escape\listing5-1.py", line 13, in <module>
  prefs: []
  type: TYPE_NORMAL
- en: print(planets[query])
  prefs: []
  type: TYPE_NORMAL
- en: 'KeyError: ''Pluto'''
  prefs: []
  type: TYPE_NORMAL
- en: '>>>'
  prefs: []
  type: TYPE_NORMAL
- en: Poor Pluto! After 76 years of service, it was disqualified as a planet in 2006,
    so it’s not in our planets dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #1**'
  prefs: []
  type: TYPE_NORMAL
- en: Can you add an entry for Pluto in the dictionary? Pay special attention to the
    position of the quotes, colon, and comma. You can add it at any position in the
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: When the program looks for an item in the dictionary that isn’t there, it stops
    the program and drops you back at the Python shell prompt. To avoid this, we need
    the program to check whether the word entered is one of the keys in the dictionary
    before it tries to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see which keys are in the dictionary by entering the dictionary name
    followed by a dot and keys(). The technical jargon for this is a *method*. Roughly
    speaking, a method is a set of instructions that you can attach to a piece of
    data using a period. Run the following code in the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> print(planets.keys())'
  prefs: []
  type: TYPE_NORMAL
- en: dict_keys(['Mars', 'Pluto', 'Jupiter', 'Earth', 'Uranus', 'Saturn', 'Mercury',
  prefs: []
  type: TYPE_NORMAL
- en: '''Neptune'', ''Venus''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might notice something odd here. When I completed Training Mission #1,
    I added Pluto to the dictionary as the last item. But in this output, it’s in
    second place in my list of keys. When you add items to a list, they’re placed
    at the end, but in a dictionary, that is not always the case. It depends on which
    version of Python you’re using. (The latest version does keep dictionary items
    in the same order you added them.) As mentioned earlier, the order of the keys
    in the dictionary doesn’t matter, though. Python figures out where the keys are
    in the dictionary, so you never need to think about it.'
  prefs: []
  type: TYPE_NORMAL
- en: To stop the program from crashing when a user asks for information on a planet
    that isn’t in the dictionary, modify your program with the new lines shown in
    [Listing 5-2](ch05.xhtml#ch05list2).
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-2.py*'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: query = input("Which planet would you like information on? ")
  prefs: []
  type: TYPE_NORMAL
- en: '➊     if query in planets.keys():'
  prefs: []
  type: TYPE_NORMAL
- en: ➋         print(planets[query])
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: ➌         print("No data available! Sorry!")
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-2: Error proofing the dictionary lookup*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the program as *listing5-2.py*, and run it by clicking **Run** ▸ **Run
    Module**. Check that it works by entering a planet correctly, and then enter another
    planet that isn’t in the list of keys. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Venus
  prefs: []
  type: TYPE_NORMAL
- en: Venus takes 243 days to rotate
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Tatooine
  prefs: []
  type: TYPE_NORMAL
- en: No data available! Sorry!
  prefs: []
  type: TYPE_NORMAL
- en: We protect our program from crashing by making it check whether the key in query
    exists in the dictionary before the program tries to use it ➊. If the key does
    exist, we use the query as we did before ➋. Otherwise, we send a message to users
    telling them that we don’t have that information in our dictionary ➌. Now the
    program is much friendlier.
  prefs: []
  type: TYPE_NORMAL
- en: '**PUTTING LISTS INSIDE DICTIONARIES**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our planet dictionary is a bit limited at the moment. What if we want to add
    extra information, such as whether the planet has rings and how many moons it
    has? To do so, we can use a list to store multiple pieces of information about
    a planet and then put that list inside the dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here is a new entry for Venus:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Venus": ["Venus takes 243 days to rotate", False, 0]'
  prefs: []
  type: TYPE_NORMAL
- en: 'The square brackets mark the start and end of the list, and there are three
    items in the list: a short description, a True or False value that indicates whether
    or not the planet has rings, and the number of moons it has. Because Venus doesn’t
    have rings, the second entry is False. It also doesn’t have any moons, so the
    third entry is 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: True *and* False *values need to start with a capital letter and shouldn’t be
    in quotes. The words turn orange when you type them correctly in IDLE.*
  prefs: []
  type: TYPE_NORMAL
- en: Change your dictionary code so each key has a list, as shown in [Listing 5-3](ch05.xhtml#ch05list3),
    keeping the rest of the code the same. Remember that dictionary entries are separated
    by commas, so there’s a comma after the closing bracket for all the lists except
    the last one. Save your updated program as *listing5-3.py*.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve slipped in information for Pluto too. Some speculate that Pluto might have
    rings, and exploration continues. By the time you read this book, our understanding
    of Pluto might have changed.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-3.py*'
  prefs: []
  type: TYPE_NORMAL
- en: 'planets = { "Mercury": ["The smallest planet, nearest the Sun", False, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Venus": ["Venus takes 243 days to rotate", False, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Earth": ["The only planet known to have native life", False, 1],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mars": ["The second smallest planet", False, 2],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Jupiter": ["The largest planet, a gas giant", True, 67],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Saturn": ["The second largest planet is a gas giant", True, 62],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Uranus": ["An ice giant with a ring system", True, 27],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Neptune": ["An ice giant and farthest from the Sun", True, 14],'
  prefs: []
  type: TYPE_NORMAL
- en: '"Pluto": ["Largest dwarf planet in the Solar System", False, 5]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-3: Putting a list in a dictionary*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the program by selecting **Run** ▸ **Run Module**. Now when you ask for
    information on a planet, the program should display the entire list for that planet:'
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Venus
  prefs: []
  type: TYPE_NORMAL
- en: '[''Venus takes 243 days to rotate'', False, 0]'
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Mars
  prefs: []
  type: TYPE_NORMAL
- en: '[''The second smallest planet'', False, 2]'
  prefs: []
  type: TYPE_NORMAL
- en: '**EXTRACTING INFORMATION FROM A LIST INSIDE A DICTIONARY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We know how to get a list of information from a dictionary, so the next step
    is to get individual pieces of information from that list. For example, the False
    entry doesn’t mean much by itself. If we can separate it from the list, we can
    add an explanation beside it so the results are easier to understand. We previously
    used lists inside *lists* for the room map in [Chapter 4](ch04.xhtml#ch04). Now,
    as then, we’ll use index numbers to get items from a list in a *dictionary*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because planets[query] is the entire list, we can see just the description
    (the first item in the list) by using planets[query][0]. We can see whether it
    has rings or not by using planets[query][1]. Briefly, here is what we’re doing:'
  prefs: []
  type: TYPE_NORMAL
- en: We’re using the planet name, stored in the variable query, to access a particular
    list from the planets dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re using an index number to take an individual item from that list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify your program to look like [Listing 5-4](ch05.xhtml#ch05list4). As before,
    change only the lines that are not grayed out. Save your program as *listing5-4.py*,
    and run it by clicking **Run** ▸ **Run Module**.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-4.py*'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: query = input("Which planet would you like information on? ")
  prefs: []
  type: TYPE_NORMAL
- en: 'if query in planets.keys():'
  prefs: []
  type: TYPE_NORMAL
- en: ➊         print(planets[query][0])
  prefs: []
  type: TYPE_NORMAL
- en: ➋         print("Does it have rings? ", planets[query][1])
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Databanks empty. Sorry!")
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-4: Displaying information from the list stored in the dictionary*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the *listing5-4.py* program, you should see something like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Earth
  prefs: []
  type: TYPE_NORMAL
- en: The only planet known to have native life
  prefs: []
  type: TYPE_NORMAL
- en: Does it have rings?  False
  prefs: []
  type: TYPE_NORMAL
- en: Which planet would you like information on? Saturn
  prefs: []
  type: TYPE_NORMAL
- en: The second largest planet is a gas giant
  prefs: []
  type: TYPE_NORMAL
- en: Does it have rings?  True
  prefs: []
  type: TYPE_NORMAL
- en: This should work for every planet in the dictionary!
  prefs: []
  type: TYPE_NORMAL
- en: When you enter the name of a planet that’s in the dictionary, the program now
    prints the first item from its list of information, which is the description ➊.
    On the next line, the program asks itself whether that planet has rings and then
    shows you the True or False answer, which is the second item in that planet’s
    list of information ➋. You can display some text and some data using the same
    print() instruction, by separating them with a comma. The display is much clearer
    than printing the entire list, and the information is easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #2**'
  prefs: []
  type: TYPE_NORMAL
- en: Can you modify the program to also tell you how many moons the planet has?
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING THE SPACE STATION OBJECTS DICTIONARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s put our knowledge of how to use dictionaries, and lists inside dictionaries,
    to use in the space station. With all the furniture, life support equipment, tools,
    and personal effects required on the space station, there’s a lot of information
    to keep track of. We’ll use a dictionary called objects to store information about
    all the different items in the game.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use numbers as the keys for the objects. It’s simpler than using a word
    for each object. Also, using numbers makes it easier to understand the room map
    if you want to print it as we did in [Chapter 4](ch04.xhtml#ch04). There’s less
    risk of mistyping, too. When we create the code for the puzzles later, it’ll be
    less obvious what the solution is, which means there will be fewer spoilers if
    you’re building the game before playing it.
  prefs: []
  type: TYPE_NORMAL
- en: You might remember that we used the numbers 0, 1, and 2 to represent floor tiles,
    wall pillars, and soil in [Chapter 4](ch04.xhtml#ch04). We’ll continue using those
    numbers for those items, and the rest of the objects will use numbers 3 to 81.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each entry in the dictionary is a list containing information about the item,
    similar to how we made the planets dictionary earlier in this chapter. The lists
    contain the following information for each object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An object image file** Different objects can use the same image file. For
    example, all the access cards use the same image.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A shadow image file** We use shadows to enhance the 3D perspective in the
    game. The two standard shadows are *images.full_shadow*, which fills a full tile
    space and is for larger objects, and *images.half_shadow*, which fills half a
    tile space for smaller objects. Objects with a distinctive outline, such as the
    cactus, have their own shadow image file that is used only for that object. Some
    items, like the chair, have the shadow within the image file. Some items have
    no shadow, like the crater and any items the player can carry. When an image has
    no shadow, we write None where its shadow filename belongs in the dictionary.
    The word None is a special data type in Python. Like with True and False, you
    don’t need any quotes around it, and it should start with a capital letter. When
    you enter it correctly, None turns orange in the code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A long description** A long description is displayed when you examine or
    select an object while playing the game. Some of the long descriptions include
    clues, and others simply describe the environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A short description** Typically just a few words, such as “an access card,”
    a short description is shown onscreen when you do something with the object while
    playing the game. For example, “You have dropped an access card.” A short description
    is only required for items that the player can pick up or use, such as an access
    card or the vending machine.'
  prefs: []
  type: TYPE_NORMAL
- en: The game can reuse items in the objects dictionary. For example, if a room is
    made of 60 or more identical wall pillars, the game can just reuse the same wall
    pillar object. It only needs to be in the dictionary once.
  prefs: []
  type: TYPE_NORMAL
- en: There are some items that use the same image files but have other differences,
    which means we must store them separately in the dictionary. For example, the
    access cards have different descriptions depending on who they belong to, and
    the doors have different descriptions to tell you which key to use. Each access
    card and door has its own entry in the objects dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE FIRST OBJECTS IN ESCAPE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open *listing4-3.py*, which you created in [Chapter 4](ch04.xhtml#ch04). This
    listing contains the game map and the code to generate the room map. We’ll add
    to this program to continue building the *Escape* game.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to set up some additional variables. Before the adventure begins,
    a research craft, called the Poodle lander, crash-lands on the planet surface.
    We’ll store coordinates for a random crash site in these new variables. We’ll
    add these variables now because the map object (number 27) will require them for
    its description.
  prefs: []
  type: TYPE_NORMAL
- en: Add the new lines in [Listing 5-5](ch05.xhtml#ch05list5) to the VARIABLES section,
    marked out with a hashed box, in your existing *listing4-3.py* file. I recommend
    adding them at the end of your other variables, just above where the MAP section
    begins, so your listing and my listing are consistent. Save your program as *listing5-5.py*.
    The program won’t do anything new if you run it now, but if you want to try it,
    enter pgzrun listing5-5.py.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-5.py*'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'VARIABLES ##'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: DEMO_OBJECTS = [images.floor, images.pillar, images.soil]
  prefs: []
  type: TYPE_NORMAL
- en: LANDER_SECTOR = random.randint(1, 24)
  prefs: []
  type: TYPE_NORMAL
- en: LANDER_X = random.randint(2, 11)
  prefs: []
  type: TYPE_NORMAL
- en: LANDER_Y = random.randint(2, 11)
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##    MAP    ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-5: Adding the crash site location variables*'
  prefs: []
  type: TYPE_NORMAL
- en: These new instructions create variables to remember the sector (or room number)
    the Poodle landed on, and its *x* and *y* position in that sector. The instructions
    use the random.randint() function, which picks a random number between the two
    numbers you give it. These instructions run once at the start of the game, so
    the lander location is different each time you play but doesn’t change during
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s add the first chunk of the objects data, shown in [Listing 5-6](ch05.xhtml#ch05list6).
    This section provides the data for objects 0 to 12\. Because the player cannot
    pick up or use these objects, they don’t have a short description.
  prefs: []
  type: TYPE_NORMAL
- en: Place this section of the listing just above the MAKE MAP section of your existing
    program (*listing5-5.py*). To help you find your way around the listing, you can
    press CTRL-F in IDLE to search for a particular word or phrase. For example, try
    searching for *make map* to see where to start adding the code in [Listing 5-6](ch05.xhtml#ch05list6).
    After searching, click Close on the search dialog box. Remember that if you get
    lost in the listing, you can always refer to the complete game listing in [Appendix
    A](appa.xhtml#appa).
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer not to type the data, use the file *data-chapter5.py*, in the
    listings folder. It contains the objects dictionary, so you can copy and paste
    it into your program. You can start by just pasting the first 12 items.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-6.py*'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: assert len(GAME_MAP)-1 == MAP_SIZE, "Map size and GAME_MAP don't match"
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##  OBJECTS  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: objects = {
  prefs: []
  type: TYPE_NORMAL
- en: '0: [images.floor, None, "The floor is shiny and clean"],'
  prefs: []
  type: TYPE_NORMAL
- en: '1: [images.pillar, images.full_shadow, "The wall is smooth and cold"],'
  prefs: []
  type: TYPE_NORMAL
- en: '2: [images.soil, None, "It''s like a desert. Or should that be dessert?"],'
  prefs: []
  type: TYPE_NORMAL
- en: '3: [images.pillar_low, images.half_shadow, "The wall is smooth and cold"],'
  prefs: []
  type: TYPE_NORMAL
- en: '4: [images.bed, images.half_shadow, "A tidy and comfortable bed"],'
  prefs: []
  type: TYPE_NORMAL
- en: '5: [images.table, images.half_shadow, "It''s made from strong plastic."],'
  prefs: []
  type: TYPE_NORMAL
- en: '6: [images.chair_left, None, "A chair with a soft cushion"],'
  prefs: []
  type: TYPE_NORMAL
- en: '7: [images.chair_right, None, "A chair with a soft cushion"],'
  prefs: []
  type: TYPE_NORMAL
- en: '8: [images.bookcase_tall, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Bookshelves, stacked with reference books"],'
  prefs: []
  type: TYPE_NORMAL
- en: '9: [images.bookcase_small, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Bookshelves, stacked with reference books"],'
  prefs: []
  type: TYPE_NORMAL
- en: '10: [images.cabinet, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A small locker, for storing personal items"],'
  prefs: []
  type: TYPE_NORMAL
- en: '11: [images.desk_computer, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A computer. Use it to run life support diagnostics"],'
  prefs: []
  type: TYPE_NORMAL
- en: '12: [images.plant, images.plant_shadow, "A spaceberry plant, grown here"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: MAKE MAP  ##
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-6: Adding the first objects*'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the colors of the code can help you spot errors. If your text
    sections aren’t green, you’ve left out the opening double quotes. If there is
    too much green, you might have forgotten the closing double quotes. Some of the
    lists continue on the next line, and Python knows the list isn’t complete until
    it sees the closing bracket. If you struggle to get any of the listings to work,
    you can use my version of the code (see “[Using My Example Listings](ch01.xhtml#ch01sb1)”
    on [page 21](ch01.xhtml#page_21)) and pick up the project from any point.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 5-6](ch05.xhtml#ch05list6) looks similar to our earlier planets dictionary:
    we use curly brackets to mark the start and end of the dictionary, and each entry
    in the dictionary is a list so it is inside square brackets. The main difference
    is that this time the key is a number instead of a word.'
  prefs: []
  type: TYPE_NORMAL
- en: Save your new program as *listing5-6.py*. This program uses Pygame Zero for
    the graphics, so you need to run your new program by entering pgzrun listing5-6.py.
    It should work the same as it did previously because we’ve added new data but
    haven’t done anything with that data yet. It’s worth running the program anyway,
    because if you see an error message in the command line window, you can fix the
    new code before you go any further.
  prefs: []
  type: TYPE_NORMAL
- en: '**VIEWING OBJECTS WITH THE SPACE STATION EXPLORER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To see the objects, we have to tell the game to use the new dictionary. Change
    the following line in the EXPLORER part of the program from this:'
  prefs: []
  type: TYPE_NORMAL
- en: image_to_draw = DEMO_OBJECTS[room_map[y][x]]
  prefs: []
  type: TYPE_NORMAL
- en: 'to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: image_to_draw = objects[room_map[y][x]][0]
  prefs: []
  type: TYPE_NORMAL
- en: This small change makes the *Explorer* code use our new objects dictionary instead
    of the DEMO_OBJECTS list we told it to use previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we’re now using lowercase letters instead of capital letters. In
    this program, I use capital letters for constants whose values won’t change. The
    DEMO_OBJECTS list never changed: it was only used for looking up the image filenames.
    But the objects dictionary will sometimes have its content changed as the game
    is played.'
  prefs: []
  type: TYPE_NORMAL
- en: The other difference is that [0] is on the end of the line now. This is because
    when we pull an item from the objects dictionary, it gives us an entire list of
    information. But we just want to use the image here, which is the first item in
    that list, so we use the index number [0] to extract it.
  prefs: []
  type: TYPE_NORMAL
- en: Save the program and run it again, and you should see that the rooms look the
    same as before. That’s because we haven’t added any new objects yet, and we kept
    the object numbers for the floor, wall, and soil the same as the index numbers
    we were using for them before.
  prefs: []
  type: TYPE_NORMAL
- en: '**DESIGNING A ROOM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s add some items to the room display. In the EXPLORER section of the code,
    add the new lines shown in [Listing 5-7](ch05.xhtml#ch05list7):'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-7.py*'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: EXPLORER  ##
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw():'
  prefs: []
  type: TYPE_NORMAL
- en: global room_height, room_width, room_map
  prefs: []
  type: TYPE_NORMAL
- en: print(current_room)
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: screen.clear()
  prefs: []
  type: TYPE_NORMAL
- en: room_map[2][4] = 7
  prefs: []
  type: TYPE_NORMAL
- en: room_map[2][6] = 6
  prefs: []
  type: TYPE_NORMAL
- en: room_map[1][1] = 8
  prefs: []
  type: TYPE_NORMAL
- en: room_map[1][2] = 9
  prefs: []
  type: TYPE_NORMAL
- en: room_map[1][8] = 12
  prefs: []
  type: TYPE_NORMAL
- en: room_map[1][9] = 9
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-7: Adding some objects in the room display*'
  prefs: []
  type: TYPE_NORMAL
- en: These new instructions add objects to the room_map list at different positions
    before the room is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that room_map uses the y-coordinate before the x-coordinate. The first
    index number says how far from the back of the room the objects are; the smaller
    the number the nearer to the back they are. The smallest useful number is usually
    1 because the wall is in row 0.
  prefs: []
  type: TYPE_NORMAL
- en: The second number says how far across the room the objects are, from left to
    right. There’s usually a wall in column 0, so 1 is the smallest useful number
    for this position too.
  prefs: []
  type: TYPE_NORMAL
- en: The number on the other side of the equal sign is the key for a particular object.
    You can check which object each number represents by looking at the objects dictionary
    in [Listing 5-6](ch05.xhtml#ch05list6).
  prefs: []
  type: TYPE_NORMAL
- en: 'So this line:'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[1][1] = 8
  prefs: []
  type: TYPE_NORMAL
- en: 'places object 8 (a tall bookcase) into the top-left corner of the room. And
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[2][6] = 6
  prefs: []
  type: TYPE_NORMAL
- en: places a chair (object 6) three rows from the top and seven positions from the
    left. (Remember that index numbers start at 0.)
  prefs: []
  type: TYPE_NORMAL
- en: Save your program as *listing5-7.py* and enter pgzrun listing5-7.py to run it.
    [Figure 5-1](ch05.xhtml#ch05fig1) shows what you should see now.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig5-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-1: Cozy! Some objects displayed in the space station* Explorer *program*'
  prefs: []
  type: TYPE_NORMAL
- en: Because the *Explorer* program is just a demo, some things don’t work yet. For
    example, some objects have a black square under them because there’s no floor
    tile there. Also, all the rooms look the same because we’ve coded the objects
    into the EXPLORER section, so they appear in every room we display. This means
    you can’t view all the rooms anymore, because the objects won’t fit in some of
    them. As a result, you can’t use the arrow keys to look at all the rooms. The
    program doesn’t display wide objects such as the bed correctly yet, either. We’ll
    fix all of these problems later, but we can continue building and testing the
    space station in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #3**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Experiment with the code you’ve added to the *Explorer* program to reposition
    the furniture to your liking. Playing with this code is a great way to learn how
    to position objects in the rooms. If you want to play with a bigger room, change
    the value of current_room in the VARIABLES section from 31 to 40 (which is the
    biggest room in the game). Save your program as *mission5-3.py* and run it using
    pgzrun mission5-3.py. You’ll need to keep a safe copy of the existing *Explorer*
    code (*listing5-7.py*) to use in Training Mission #4.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE REST OF THE OBJECTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: So far we’ve added objects 0 to 12 to the objects dictionary. There are 81 objects
    in total in the game, so let’s add the rest now by adding the new lines in [Listing
    5-8](ch05.xhtml#ch05list8). Remember to add a comma after item 12 before adding
    the rest of the items in the dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: When the same filename or a similar description is used for more than one object,
    you can just copy and paste it. To copy code, click and hold down the mouse button
    at the beginning of the chunk of code, move the mouse to highlight it, and then
    press CTRL-C. Then click the mouse where you want to paste that code and press
    CTRL-V. Remember too that you can copy and paste the whole dictionary from the
    *data-chapter5.py* file if you want to save time typing.
  prefs: []
  type: TYPE_NORMAL
- en: Save the program as *listing5-8.py*. You can test that the program still works
    by entering pgzrun listing5-8.py, although you won’t see anything new yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is [Listing 5-8](ch05.xhtml#ch05list8):'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing5-8.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##  OBJECTS  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: objects = {
  prefs: []
  type: TYPE_NORMAL
- en: '0: [images.floor, None, "The floor is shiny and clean"],'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '12: [images.plant, images.plant_shadow, "A spaceberry plant, grown locally"],'
  prefs: []
  type: TYPE_NORMAL
- en: '➊     13: [images.electrical1, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Electrical systems used for powering the space station"],'
  prefs: []
  type: TYPE_NORMAL
- en: '14: [images.electrical2, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Electrical systems used for powering the space station"],'
  prefs: []
  type: TYPE_NORMAL
- en: '15: [images.cactus, images.cactus_shadow, "Ouch! Careful on the cactus!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '16: [images.shrub, images.shrub_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A space lettuce. A bit limp, but amazing it''s growing here!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '17: [images.pipes1, images.pipes1_shadow, "Water purification pipes"],'
  prefs: []
  type: TYPE_NORMAL
- en: '18: [images.pipes2, images.pipes2_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Pipes for the life support systems"],'
  prefs: []
  type: TYPE_NORMAL
- en: '19: [images.pipes3, images.pipes3_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Pipes for the life support systems"],'
  prefs: []
  type: TYPE_NORMAL
- en: '➋     20: [images.door, images.door_shadow, "Safety door. Opens automatically
    \'
  prefs: []
  type: TYPE_NORMAL
- en: for astronauts in functioning spacesuits."],
  prefs: []
  type: TYPE_NORMAL
- en: '21: [images.door, images.door_shadow, "The airlock door. \'
  prefs: []
  type: TYPE_NORMAL
- en: For safety reasons, it requires two person operation."],
  prefs: []
  type: TYPE_NORMAL
- en: '22: [images.door, images.door_shadow, "A locked door. It needs " \'
  prefs: []
  type: TYPE_NORMAL
- en: + PLAYER_NAME + "'s access card"],
  prefs: []
  type: TYPE_NORMAL
- en: '23: [images.door, images.door_shadow, "A locked door. It needs " \'
  prefs: []
  type: TYPE_NORMAL
- en: + FRIEND1_NAME + "'s access card"],
  prefs: []
  type: TYPE_NORMAL
- en: '24: [images.door, images.door_shadow, "A locked door. It needs " \'
  prefs: []
  type: TYPE_NORMAL
- en: + FRIEND2_NAME + "'s access card"],
  prefs: []
  type: TYPE_NORMAL
- en: '25: [images.door, images.door_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A locked door. It is opened from Main Mission Control"],'
  prefs: []
  type: TYPE_NORMAL
- en: '26: [images.door, images.door_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A locked door in the engineering bay."],'
  prefs: []
  type: TYPE_NORMAL
- en: '➌     27: [images.map, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The screen says the crash site was Sector: " \'
  prefs: []
  type: TYPE_NORMAL
- en: '+ str(LANDER_SECTOR) + " // X: " + str(LANDER_X) + \'
  prefs: []
  type: TYPE_NORMAL
- en: '" // Y: " + str(LANDER_Y)],'
  prefs: []
  type: TYPE_NORMAL
- en: '28: [images.rock_large, images.rock_large_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A rock. Its coarse surface feels like a whetstone", "the rock"],'
  prefs: []
  type: TYPE_NORMAL
- en: '29: [images.rock_small, images.rock_small_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A small but heavy piece of Martian rock"],'
  prefs: []
  type: TYPE_NORMAL
- en: '30: [images.crater, None, "A crater in the planet surface"],'
  prefs: []
  type: TYPE_NORMAL
- en: '31: [images.fence, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A fine gauze fence. It helps protect the station from dust storms"],'
  prefs: []
  type: TYPE_NORMAL
- en: '32: [images.contraption, images.contraption_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"One of the scientific experiments. It gently vibrates"],'
  prefs: []
  type: TYPE_NORMAL
- en: '33: [images.robot_arm, images.robot_arm_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A robot arm, used for heavy lifting"],'
  prefs: []
  type: TYPE_NORMAL
- en: '34: [images.toilet, images.half_shadow, "A sparkling clean toilet"],'
  prefs: []
  type: TYPE_NORMAL
- en: '35: [images.sink, None, "A sink with running water", "the taps"],'
  prefs: []
  type: TYPE_NORMAL
- en: '36: [images.globe, images.globe_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A giant globe of the planet. It gently glows from inside"],'
  prefs: []
  type: TYPE_NORMAL
- en: '37: [images.science_lab_table, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A table of experiments, analyzing the planet soil and dust"],'
  prefs: []
  type: TYPE_NORMAL
- en: '38: [images.vending_machine, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A vending machine. It requires a credit.", "the vending machine"],'
  prefs: []
  type: TYPE_NORMAL
- en: '39: [images.floor_pad, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A pressure sensor to make sure nobody goes out alone."],'
  prefs: []
  type: TYPE_NORMAL
- en: '40: [images.rescue_ship, images.rescue_ship_shadow, "A rescue ship!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '41: [images.mission_control_desk, images.mission_control_desk_shadow, \'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mission Control stations."],'
  prefs: []
  type: TYPE_NORMAL
- en: '42: [images.button, images.button_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The button for opening the time-locked door in engineering."],'
  prefs: []
  type: TYPE_NORMAL
- en: '43: [images.whiteboard, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The whiteboard is used in brainstorms and planning meetings."],'
  prefs: []
  type: TYPE_NORMAL
- en: '44: [images.window, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The window provides a view out onto the planet surface."],'
  prefs: []
  type: TYPE_NORMAL
- en: '45: [images.robot, images.robot_shadow, "A cleaning robot, turned off."],'
  prefs: []
  type: TYPE_NORMAL
- en: '46: [images.robot2, images.robot2_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A planet surface exploration robot, awaiting set-up."],'
  prefs: []
  type: TYPE_NORMAL
- en: '47: [images.rocket, images.rocket_shadow, "A 1-person craft in repair."],'
  prefs: []
  type: TYPE_NORMAL
- en: '48: [images.toxic_floor, None, "Toxic floor - do not walk on!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '49: [images.drone, None, "A delivery drone"],'
  prefs: []
  type: TYPE_NORMAL
- en: '50: [images.energy_ball, None, "An energy ball - dangerous!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '51: [images.energy_ball2, None, "An energy ball - dangerous!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '52: [images.computer, images.computer_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A computer workstation, for managing space station systems."],'
  prefs: []
  type: TYPE_NORMAL
- en: '53: [images.clipboard, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A clipboard. Someone has doodled on it.", "the clipboard"],'
  prefs: []
  type: TYPE_NORMAL
- en: '54: [images.bubble_gum, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A piece of sticky bubble gum. Spaceberry flavour.", "bubble gum"],'
  prefs: []
  type: TYPE_NORMAL
- en: '55: [images.yoyo, None, "A toy made of fine, strong string and plastic. \'
  prefs: []
  type: TYPE_NORMAL
- en: Used for antigrav experiments.", PLAYER_NAME + "'s yoyo"],
  prefs: []
  type: TYPE_NORMAL
- en: '56: [images.thread, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A piece of fine, strong string", "a piece of string"],'
  prefs: []
  type: TYPE_NORMAL
- en: '57: [images.needle, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A sharp needle from a cactus plant", "a cactus needle"],'
  prefs: []
  type: TYPE_NORMAL
- en: '58: [images.threaded_needle, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A cactus needle, spearing a length of string", "needle and string"],'
  prefs: []
  type: TYPE_NORMAL
- en: '59: [images.canister, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The air canister has a leak.", "a leaky air canister"],'
  prefs: []
  type: TYPE_NORMAL
- en: '60: [images.canister, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"It looks like the seal will hold!", "a sealed air canister"],'
  prefs: []
  type: TYPE_NORMAL
- en: '61: [images.mirror, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The mirror throws a circle of light on the walls.", "a mirror"],'
  prefs: []
  type: TYPE_NORMAL
- en: '62: [images.bin_empty, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A rarely used bin, made of light plastic", "a bin"],'
  prefs: []
  type: TYPE_NORMAL
- en: '63: [images.bin_full, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A heavy bin full of water", "a bin full of water"],'
  prefs: []
  type: TYPE_NORMAL
- en: '64: [images.rags, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"An oily rag. Pick it up by a corner if you must!", "an oily rag"],'
  prefs: []
  type: TYPE_NORMAL
- en: '65: [images.hammer, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A hammer. Maybe good for cracking things open...", "a hammer"],'
  prefs: []
  type: TYPE_NORMAL
- en: '66: [images.spoon, None, "A large serving spoon", "a spoon"],'
  prefs: []
  type: TYPE_NORMAL
- en: '67: [images.food_pouch, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A dehydrated food pouch. It needs water.", "a dry food pack"],'
  prefs: []
  type: TYPE_NORMAL
- en: '68: [images.food, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A food pouch. Use it to get 100% energy.", "ready-to-eat food"],'
  prefs: []
  type: TYPE_NORMAL
- en: '69: [images.book, None, "The book has the words ''Don''t Panic'' on the \'
  prefs: []
  type: TYPE_NORMAL
- en: cover in large, friendly letters", "a book"],
  prefs: []
  type: TYPE_NORMAL
- en: '70: [images.mp3_player, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"An MP3 player, with all the latest tunes", "an MP3 player"],'
  prefs: []
  type: TYPE_NORMAL
- en: '71: [images.lander, None, "The Poodle, a small space exploration craft. \'
  prefs: []
  type: TYPE_NORMAL
- en: Its black box has a radio sealed inside.", "the Poodle lander"],
  prefs: []
  type: TYPE_NORMAL
- en: '72: [images.radio, None, "A radio communications system, from the \'
  prefs: []
  type: TYPE_NORMAL
- en: Poodle", "a communications radio"],
  prefs: []
  type: TYPE_NORMAL
- en: '73: [images.gps_module, None, "A GPS Module", "a GPS module"],'
  prefs: []
  type: TYPE_NORMAL
- en: '74: [images.positioning_system, None, "Part of a positioning system. \'
  prefs: []
  type: TYPE_NORMAL
- en: Needs a GPS module.", "a positioning interface"],
  prefs: []
  type: TYPE_NORMAL
- en: '75: [images.positioning_system, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A working positioning system", "a positioning computer"],'
  prefs: []
  type: TYPE_NORMAL
- en: '76: [images.scissors, None, "Scissors. They''re too blunt to cut \'
  prefs: []
  type: TYPE_NORMAL
- en: anything. Can you sharpen them?", "blunt scissors"],
  prefs: []
  type: TYPE_NORMAL
- en: '77: [images.scissors, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Razor-sharp scissors. Careful!", "sharpened scissors"],'
  prefs: []
  type: TYPE_NORMAL
- en: '78: [images.credit, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A small coin for the station''s vending systems",'
  prefs: []
  type: TYPE_NORMAL
- en: '"a station credit"],'
  prefs: []
  type: TYPE_NORMAL
- en: '79: [images.access_card, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"This access card belongs to " + PLAYER_NAME, "an access card"],'
  prefs: []
  type: TYPE_NORMAL
- en: '80: [images.access_card, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"This access card belongs to " + FRIEND1_NAME, "an access card"],'
  prefs: []
  type: TYPE_NORMAL
- en: '81: [images.access_card, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"This access card belongs to " + FRIEND2_NAME, "an access card"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ➍ items_player_may_carry = list(range(53, 82))
  prefs: []
  type: TYPE_NORMAL
- en: '# Numbers below are for floor, pressure pad, soil, toxic floor.'
  prefs: []
  type: TYPE_NORMAL
- en: ➎ items_player_may_stand_on = items_player_may_carry + [0, 39, 2, 48]
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '## MAKE MAP  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-8: Completing the objects data for the* Escape *game*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the lists for objects extend over more than one line in the program
    ➊. This is fine because Python knows the list isn’t complete until it sees a closing
    bracket. To break a string (or any other piece of code) over more than one line,
    you can use a \ at the end of the line ➋. The line breaks in *listing5-8.py* are
    just there to make the code fit onto the book page neatly: onscreen, the code
    can extend to the right if you want it to.'
  prefs: []
  type: TYPE_NORMAL
- en: Object 27 is a map showing the Poodle’s crash site. Its long description includes
    the variables that you set in [Listing 5-5](ch05.xhtml#ch05list5) for the Poodle’s
    position. The str() function is used to convert the numbers in those variables
    into strings so they can be combined with other strings to make up the long description
    ➌.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve also set up some additional lists we’ll need in the game: items_player_may_carry
    stores the numbers of the objects the player can pick up ➍. These are objects
    53 to 81\. Because they’re grouped together, we can set up the items_player_may_carry
    list using a range. A *range* is a sequence of numbers that starts from the first
    number given and finishes at the one *before* the last number. (We used ranges
    in [Chapter 3](ch03.xhtml#ch03).) We turn that range into a list using list(range(53
    to 82)), which makes a list of all the numbers from 53 to 81.'
  prefs: []
  type: TYPE_NORMAL
- en: If you add more objects that a player can carry later, you can add them to the
    end of this list. For example, to add new objects numbered 89 and 93 that the
    player can carry, use items_player_may_carry = list(range(54, 82)) + [89, 93].
    You can also add new objects to the end of the objects list and just extend the
    range used to set up items_player_may_carry.
  prefs: []
  type: TYPE_NORMAL
- en: The other new list is items_player_may_stand_on, which specifies whether a player
    is allowed to stand on a particular item ➎. Players can only stand on objects
    small enough to be picked up and on the different types of floor. We make this
    list by adding the object numbers for the different floor types to the items_player_may_carry
    list.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve entered [Listing 5-8](ch05.xhtml#ch05list8), you’ve completed the
    OBJECTS section of the *Escape* game! But we haven’t put the objects into the
    game map yet. We’ll start to do that in [Chapter 6](ch06.xhtml#ch06).
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #4**'
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with some of the new objects you just added to the game. By modifying
    the code, can you . . .
  prefs: []
  type: TYPE_NORMAL
- en: Swap the tall bookcase for a bin (object 62)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap the spaceberry plant for a small rock (object 29)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap the chair on the right for a patch of toxic floor (object 48)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand which instruction places which object, you can either use the
    coordinates in your existing code or look up the object numbers in the objects
    dictionary (onscreen or in the listings in this chapter). Run your program to
    make sure it works.
  prefs: []
  type: TYPE_NORMAL
- en: '**ARE YOU FIT TO FLY?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  To get information from a dictionary, you use
    the key for that information. The key can be a word or a number and can also be
    stored in a variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  If you try to use a key that isn’t in the dictionary,
    you’ll cause an error.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  To avoid an error, check whether the key is in
    the dictionary before the program tries to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can put lists inside dictionaries. Then you
    can use the dictionary key followed by the list index to get a particular item
    from the list. For example: planets["Earth"][1].'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The *Escape* game uses the objects dictionary
    to store information about all the objects in the game. Each item in the dictionary
    is a list.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can use the index number of that list to
    access the object’s image file, shadow image file, and long and short description.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0096-01.jpg)'
  prefs: []
  type: TYPE_IMG
