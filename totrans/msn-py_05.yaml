- en: '**5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5'
- en: PREPARING THE SPACE STATION EQUIPMENT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 准备空间站设备**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Now that the space station walls are in place, we can start installing the equipment.
    We’ll need detailed information about the different pieces of equipment, including
    the furniture, survival systems, and experimental machinery. In this chapter,
    you’ll add information about all the items on the space station, including their
    images and descriptions. You’ll also experiment with designing your own room and
    view it using the *Explorer* program you created in [Chapter 4](ch04.xhtml#ch04).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，空间站的墙壁已经搭建完成，我们可以开始安装设备了。我们需要有关各种设备的详细信息，包括家具、生存系统和实验机械。在本章中，你将添加空间站上所有物品的信息，包括它们的图片和描述。你还将尝试设计自己的房间，并通过你在[第4章](ch04.xhtml#ch04)中创建的*Explorer*程序查看它。
- en: '**CREATING A SIMPLE PLANETS DICTIONARY**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建一个简单的行星字典**'
- en: To store the information about the space station equipment, we’ll use a programming
    concept called dictionaries. A *dictionary* is a bit like a list but with a built-in
    search engine. Let’s take a closer look at how it works.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储关于空间站设备的信息，我们将使用一个编程概念，称为字典。*字典*有点像列表，但内置了搜索引擎。让我们更仔细地看看它是如何工作的。
- en: '**UNDERSTANDING THE DIFFERENCE BETWEEN A LIST AND A DICTIONARY**'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**理解列表和字典之间的区别**'
- en: As with a paper dictionary, you can use a word or phrase to look up information
    in a Python dictionary. That word or phrase is called the *key*, and the information
    linked to the key is called the *value*. Unlike in a paper dictionary, the entries
    in a Python dictionary can be in any order. They don’t have to be alphabetical.
    Python can go directly to the entry you need, wherever it is.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 和纸质字典一样，你可以使用单词或短语在 Python 字典中查找信息。这个单词或短语叫做*键*，而与键相关的信息叫做*值*。与纸质字典不同，Python
    字典中的条目可以是无序的，它们不必是按字母顺序排列的。Python 可以直接定位到你需要的条目，无论它在哪里。
- en: 'Imagine you have a list that contains information about previous space missions.
    You could get the first item from that list by using this line:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个包含以前太空任务信息的列表。你可以通过以下这行代码获取列表中的第一个项目：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If `mission_info` was a dictionary instead of a list, you could use a mission
    name instead of an index number to get the information on that mission, like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mission_info`是一个字典而不是列表，你可以使用任务名称代替索引号来获取该任务的信息，像这样：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The key can be a word or phrase but can also be a number. We’ll start by using
    words because it’s easier to understand the difference between a list and a dictionary
    that way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 键可以是一个单词或短语，也可以是一个数字。我们将从使用单词开始，因为这样更容易理解列表和字典之间的区别。
- en: '**MAKING AN ASTRONOMY CHEAT SHEET DICTIONARY**'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作天文学备忘单字典**'
- en: All astronauts need a good understanding of the solar system, so let’s learn
    about the planets as we build our first dictionary. We’ll use the planet names
    as the keys and connect each name to information about that planet.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有宇航员都需要对太阳系有良好的理解，因此在构建我们的第一个字典时，让我们了解一下行星。我们将使用行星的名称作为键，并将每个名称与该行星的信息连接起来。
- en: Take a look at [Listing 5-1](ch05.xhtml#ch05list1), which creates a dictionary
    called `planets`. When you make a dictionary, you use curly brackets `{}` to mark
    the start and end of it, instead of the square brackets you use for a list.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下[清单 5-1](ch05.xhtml#ch05list1)，它创建了一个名为`planets`的字典。当你创建字典时，使用大括号`{}`来标记字典的开始和结束，而不是用于列表的方括号。
- en: Each entry in the dictionary is made up of the key, followed by a colon and
    then the information for that entry. As with a list, we separate the entries with
    commas and put double quotes around pieces of text.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的每个条目由键、后跟冒号，再然后是该条目的信息组成。和列表一样，我们用逗号分隔条目，并将文本部分用双引号括起来。
- en: Open a new file in IDLE (**File** ▸ **New File**) and enter the following program.
    Save it as *listing5-1.py*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中打开一个新文件（**文件** ▸ **新建文件**），并输入以下程序。将其保存为*listing5-1.py*。
- en: '*listing5-1.py*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-1.py*'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 5-1: Your first dictionary program*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-1：你的第一个字典程序*'
- en: This program doesn’t use Pygame Zero, so you can run it by clicking **Run**
    ▸ **Run Module** at the top of the IDLE window. (It will still work if you run
    it using `pgzrun`, but it’s easier to use the menu.) When you run the program,
    it asks you which planet you want information on using the `input()` built-in
    function ➋. Try entering Earth or Jupiter for the planet name.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序没有使用Pygame Zero，因此你可以通过点击IDLE窗口顶部的**Run** ▸ **Run Module**来运行它。（即使你通过`pgzrun`运行，它仍然能正常工作，但使用菜单更方便。）当你运行程序时，它会使用`input()`内置函数
    ➋询问你想要查询哪个行星的信息。试着输入“Earth”或“Jupiter”作为行星名称。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Whichever planet name you enter is stored in the variable `query`. That variable
    is then used to look up the information for that planet in the `planets` dictionary
    ➌. Instead of using an index number inside the square brackets as we did with
    a list, we use the word we entered to get the information, and that word is stored
    in the variable `query`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你输入的每个行星名称都会存储在变量`query`中。然后，变量会用来在`planets`字典 ➌ 中查找该行星的信息。与我们在列表中使用索引号不同，这里我们使用输入的单词来获取信息，这个单词被存储在`query`变量中。
- en: In Python, we can use a `while` ➊ loop to repeat a set of instructions. Unlike
    a `for` loop, which we use to repeat a certain number of times, a `while` loop
    usually repeats until something changes. Often in a game, the `while` command
    will check a variable to decide whether to keep repeating instructions. For example,
    the instruction `while lives > 0` could keep a game going until the player runs
    out of lives. When the `lives` variable changes to 0, the instructions in the
    loop would stop repeating.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以使用`while` ➊循环来重复一组指令。与我们用来重复指定次数的`for`循环不同，`while`循环通常会一直重复，直到某些条件发生变化。在游戏中，`while`命令通常会检查某个变量，决定是否继续重复指令。例如，`while
    lives > 0`指令可以让游戏在玩家生命值大于0时继续进行。当`lives`变量变为0时，循环中的指令会停止重复。
- en: The `while` `True` command we use in *listing5-1.py* will keep repeating forever,
    because it means “while `True` is `True`,” which is always. For this `while` `True`
    command to work, make sure you capitalize `True` and place a colon at the end
    of the line.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*listing5-1.py*中使用的`while` `True`命令会一直重复，因为它意味着“只要`True`为`True`”，这总是成立的。为了使这个`while`
    `True`命令正常工作，确保你将`True`的T大写，并且在行末加上冒号。
- en: Under the `while` command, we use four spaces to indent the instructions that
    should repeat. Here, we’ve indented the lines that ask you for a planet name and
    then give you the planet information, so they’re the instructions that repeat.
    After you enter a planet name and get the information, the program asks you for
    another planet name, and another, forever. Or until you stop the program by pressing
    CTRL-C, at least.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`命令下，我们使用四个空格来缩进应该重复的指令。这里，我们已经缩进了要求你输入行星名称并给出行星信息的行，因此它们是需要重复的指令。在你输入行星名称并获取信息后，程序会继续要求你输入另一个行星名称，一直重复下去，直到你按下CTRL-C停止程序为止。
- en: Although this program works, it isn’t complete yet. You might get an unhelpful
    error if you enter a planet name that isn’t in the dictionary. Let’s fix the code
    so it returns a useful message instead.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个程序可以正常运行，但它还不完整。如果你输入一个不在字典中的行星名称，可能会得到一个没有帮助的错误信息。让我们修复代码，让它返回一个有用的提示信息。
- en: '**ERROR-PROOFING THE DICTIONARY**'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**字典错误防护**'
- en: When you enter a key that isn’t in the dictionary, you’ll see an error message.
    Python looks for an exact match. So, if you try to look up something that isn’t
    in the dictionary or make even a tiny spelling mistake, you won’t get the information
    you want.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入一个字典中不存在的键时，你会看到一个错误信息。Python会查找完全匹配的项。因此，如果你试图查找字典中不存在的项或拼写错误，程序就不会返回你想要的信息。
- en: 'Dictionary keys, like variable names, are case sensitive, so if you type `earth`
    instead of `Earth`, the program will crash. If you enter a planet that doesn’t
    exist, this is what happens:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键名像变量名一样区分大小写，所以如果你输入`earth`而不是`Earth`，程序就会崩溃。如果你输入一个不存在的行星，结果会是这样：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Poor Pluto! After 76 years of service, it was disqualified as a planet in 2006,
    so it’s not in our `planets` dictionary.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可怜的冥王星！经过76年的服务，它在2006年被取消了行星资格，因此它不在我们的`planets`字典中。
- en: '**TRAINING MISSION #1**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Can you add an entry for Pluto in the dictionary? Pay special attention to the
    position of the quotes, colon, and comma. You can add it at any position in the
    dictionary.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你能为冥王星在字典中添加一项吗？请特别注意引号、冒号和逗号的位置。你可以在字典中的任何位置添加它。
- en: When the program looks for an item in the dictionary that isn’t there, it stops
    the program and drops you back at the Python shell prompt. To avoid this, we need
    the program to check whether the word entered is one of the keys in the dictionary
    before it tries to use it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序查找字典中不存在的项时，它会停止运行并返回到 Python shell 提示符。为了避免这种情况，我们需要程序在尝试使用某个单词之前，检查它是否是字典中的键之一。
- en: 'You can see which keys are in the dictionary by entering the dictionary name
    followed by a dot and `keys()`. The technical jargon for this is a *method*. Roughly
    speaking, a method is a set of instructions that you can attach to a piece of
    data using a period. Run the following code in the Python shell:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入字典名称后跟一个点和 `keys()` 来查看字典中有哪些键。这个技术术语叫做 *方法*。简单来说，方法是一组指令，你可以通过句点将它附加到数据上。请在
    Python shell 中运行以下代码：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You might notice something odd here. When I completed Training Mission #1,
    I added Pluto to the dictionary as the last item. But in this output, it’s in
    second place in my list of keys. When you add items to a list, they’re placed
    at the end, but in a dictionary, that is not always the case. It depends on which
    version of Python you’re using. (The latest version does keep dictionary items
    in the same order you added them.) As mentioned earlier, the order of the keys
    in the dictionary doesn’t matter, though. Python figures out where the keys are
    in the dictionary, so you never need to think about it.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '你可能会注意到一个奇怪的地方。当我完成训练任务 #1 时，我把冥王星作为字典中的最后一项添加进去。但在这个输出中，它排在我的键列表的第二个位置。当你向列表中添加项时，它们会被放在末尾，但在字典中情况并非总是如此。这取决于你使用的是哪个版本的
    Python。（最新版本会保持字典项按添加顺序排列。）不过，正如前面提到的，字典中键的顺序并不重要。Python 会自动确定键的位置，所以你不需要去思考它。'
- en: To stop the program from crashing when a user asks for information on a planet
    that isn’t in the dictionary, modify your program with the new lines shown in
    [Listing 5-2](ch05.xhtml#ch05list2).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止程序在用户请求字典中没有的行星信息时崩溃，请按照 [列表 5-2](ch05.xhtml#ch05list2) 中的新增代码修改程序。
- en: '*listing5-2.py*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-2.py*'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 5-2: Error proofing the dictionary lookup*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-2：字典查找的错误防护*'
- en: 'Save the program as *listing5-2.py*, and run it by clicking **Run** ▸ **Run
    Module**. Check that it works by entering a planet correctly, and then enter another
    planet that isn’t in the list of keys. Here’s an example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为 *listing5-2.py*，然后通过点击 **运行** ▸ **运行模块** 来运行它。通过正确输入一个行星名称来检查程序是否正常工作，然后再输入一个不在键列表中的行星名称。这是一个例子：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We protect our program from crashing by making it check whether the key in `query`
    exists in the dictionary before the program tries to use it ➊. If the key does
    exist, we use the query as we did before ➋. Otherwise, we send a message to users
    telling them that we don’t have that information in our dictionary ➌. Now the
    program is much friendlier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在程序尝试使用 `query` 中的键之前，检查该键是否存在于字典中，从而防止程序崩溃 ➊。如果该键存在，我们像之前一样使用查询 ➋。否则，我们会向用户发送一条消息，告诉他们我们字典中没有该信息
    ➌。现在程序变得更加友好。
- en: '**PUTTING LISTS INSIDE DICTIONARIES**'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将列表放入字典中**'
- en: Our planet dictionary is a bit limited at the moment. What if we want to add
    extra information, such as whether the planet has rings and how many moons it
    has? To do so, we can use a list to store multiple pieces of information about
    a planet and then put that list inside the dictionary.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的行星字典目前有些有限。如果我们想添加更多信息，比如行星是否有环和它有多少颗卫星呢？为此，我们可以使用列表来存储关于行星的多个信息，然后将该列表放入字典中。
- en: 'For example, here is a new entry for Venus:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是金星的新条目：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The square brackets mark the start and end of the list, and there are three
    items in the list: a short description, a `True` or `False` value that indicates
    whether or not the planet has rings, and the number of moons it has. Because Venus
    doesn’t have rings, the second entry is `False`. It also doesn’t have any moons,
    so the third entry is 0.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号标记了列表的开始和结束，列表中有三个项目：一个简短的描述，一个表示行星是否有环的 `True` 或 `False` 值，以及它拥有的卫星数量。因为金星没有环，所以第二项是
    `False`。它也没有卫星，所以第三项是 0。
- en: '**RED ALERT**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: True *and* False *values need to start with a capital letter and shouldn’t be
    in quotes. The words turn orange when you type them correctly in IDLE.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**True** *和* **False** *的值需要以大写字母开头，并且不应该加引号。当你在 IDLE 中正确输入时，单词会变成橙色。*'
- en: Change your dictionary code so each key has a list, as shown in [Listing 5-3](ch05.xhtml#ch05list3),
    keeping the rest of the code the same. Remember that dictionary entries are separated
    by commas, so there’s a comma after the closing bracket for all the lists except
    the last one. Save your updated program as *listing5-3.py*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更改你的字典代码，使每个键都有一个列表，如[示例 5-3](ch05.xhtml#ch05list3)所示，其余代码保持不变。记住，字典条目之间由逗号分隔，因此所有列表的右括号后面都需要有逗号，除了最后一个列表。将更新后的程序保存为*listing5-3.py*。
- en: I’ve slipped in information for Pluto too. Some speculate that Pluto might have
    rings, and exploration continues. By the time you read this book, our understanding
    of Pluto might have changed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我也为冥王星加入了信息。有些人猜测冥王星可能有环，探索仍在进行中。当你阅读本书时，我们对冥王星的理解可能已经发生了变化。
- en: '*listing5-3.py*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-3.py*'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 5-3: Putting a list in a dictionary*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 5-3：将列表放入字典中*'
- en: 'Run the program by selecting **Run** ▸ **Run Module**. Now when you ask for
    information on a planet, the program should display the entire list for that planet:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**运行** ▸ **运行模块**来运行程序。现在，当你请求某颗行星的信息时，程序应该显示该行星的整个列表：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**EXTRACTING INFORMATION FROM A LIST INSIDE A DICTIONARY**'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从字典中的列表提取信息**'
- en: We know how to get a list of information from a dictionary, so the next step
    is to get individual pieces of information from that list. For example, the `False`
    entry doesn’t mean much by itself. If we can separate it from the list, we can
    add an explanation beside it so the results are easier to understand. We previously
    used lists inside *lists* for the room map in [Chapter 4](ch04.xhtml#ch04). Now,
    as then, we’ll use index numbers to get items from a list in a *dictionary*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何从字典中获取信息列表，所以下一步是从该列表中获取单个信息。例如，`False`项本身意义不大。如果我们能够将其从列表中分离出来，可以在旁边添加解释，以便更容易理解结果。我们之前在[第4章](ch04.xhtml#ch04)中使用了*列表*中的列表来表示房间地图。现在，就像之前一样，我们将使用索引号从*字典*中的列表中获取条目。
- en: 'Because `planets[query]` is the entire list, we can see just the description
    (the first item in the list) by using `planets[query][0]`. We can see whether
    it has rings or not by using `planets[query][1]`. Briefly, here is what we’re
    doing:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`planets[query]`是整个列表，我们可以通过使用`planets[query][0]`来查看描述（列表中的第一个条目）。我们可以通过使用`planets[query][1]`来查看它是否有环。简而言之，以下是我们正在做的事情：
- en: We’re using the planet name, stored in the variable `query`, to access a particular
    list from the `planets` dictionary.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用存储在变量`query`中的行星名称，从`planets`字典中访问特定的列表。
- en: We’re using an index number to take an individual item from that list.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用索引号从列表中提取单个项。
- en: Modify your program to look like [Listing 5-4](ch05.xhtml#ch05list4). As before,
    change only the lines that are not grayed out. Save your program as *listing5-4.py*,
    and run it by clicking **Run** ▸ **Run Module**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 修改你的程序，使其看起来像[示例 5-4](ch05.xhtml#ch05list4)。像之前一样，只修改未灰显的行。将程序保存为*listing5-4.py*，并通过点击**运行**
    ▸ **运行模块**来运行它。
- en: '*listing5-4.py*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-4.py*'
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 5-4: Displaying information from the list stored in the dictionary*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 5-4：显示从字典中存储的列表获取的信息*'
- en: 'When you run the *listing5-4.py* program, you should see something like the
    following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行*listing5-4.py*程序时，你应该会看到类似以下内容：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This should work for every planet in the dictionary!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该适用于字典中的每一颗行星！
- en: When you enter the name of a planet that’s in the dictionary, the program now
    prints the first item from its list of information, which is the description ➊.
    On the next line, the program asks itself whether that planet has rings and then
    shows you the `True` or `False` answer, which is the second item in that planet’s
    list of information ➋. You can display some text and some data using the same
    `print()` instruction, by separating them with a comma. The display is much clearer
    than printing the entire list, and the information is easier to understand.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入字典中存在的行星名称时，程序现在会打印出该行星信息列表中的第一个项，即描述➊。在下一行，程序会询问该行星是否有环，并显示`True`或`False`的答案，这是该行星信息列表中的第二项➋。你可以通过用逗号分隔来在同一个`print()`指令中显示一些文本和一些数据。这样显示比打印整个列表要清晰得多，信息也更易于理解。
- en: '**TRAINING MISSION #2**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: Can you modify the program to also tell you how many moons the planet has?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你能修改程序，让它同时告诉你这颗行星有多少颗卫星吗？
- en: '**MAKING THE SPACE STATION OBJECTS DICTIONARY**'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作太空站对象字典**'
- en: Let’s put our knowledge of how to use dictionaries, and lists inside dictionaries,
    to use in the space station. With all the furniture, life support equipment, tools,
    and personal effects required on the space station, there’s a lot of information
    to keep track of. We’ll use a dictionary called `objects` to store information
    about all the different items in the game.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将如何使用字典以及在字典中使用列表的知识应用到空间站上。空间站上需要的家具、生命支持设备、工具和个人物品众多，我们需要跟踪大量信息。我们将使用一个名为`objects`的字典来存储游戏中所有不同物品的信息。
- en: We’ll use numbers as the keys for the objects. It’s simpler than using a word
    for each object. Also, using numbers makes it easier to understand the room map
    if you want to print it as we did in [Chapter 4](ch04.xhtml#ch04). There’s less
    risk of mistyping, too. When we create the code for the puzzles later, it’ll be
    less obvious what the solution is, which means there will be fewer spoilers if
    you’re building the game before playing it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用数字作为对象的键。这样比为每个对象使用一个单词更简单。而且，使用数字会让你更容易理解房间地图，如果你想像我们在[第4章](ch04.xhtml#ch04)中那样打印出来的话。也减少了输入错误的风险。当我们稍后为谜题创建代码时，解决方案就不那么显而易见了，这意味着如果你在玩游戏之前构建游戏，会减少剧透。
- en: You might remember that we used the numbers 0, 1, and 2 to represent floor tiles,
    wall pillars, and soil in [Chapter 4](ch04.xhtml#ch04). We’ll continue using those
    numbers for those items, and the rest of the objects will use numbers 3 to 81.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得我们在[第4章](ch04.xhtml#ch04)中使用了数字0、1和2来表示地板瓷砖、墙柱和土壤。我们将继续使用这些数字来表示这些物品，其余的物品将使用数字3到81。
- en: 'Each entry in the dictionary is a list containing information about the item,
    similar to how we made the `planets` dictionary earlier in this chapter. The lists
    contain the following information for each object:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的每个条目都是一个包含该物品信息的列表，类似于我们在本章前面创建的`planets`字典。列表中包含每个对象的以下信息：
- en: '**An object image file** Different objects can use the same image file. For
    example, all the access cards use the same image.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个对象图像文件** 不同的对象可以使用相同的图像文件。例如，所有的访问卡都使用相同的图像。'
- en: '**A shadow image file** We use shadows to enhance the 3D perspective in the
    game. The two standard shadows are *images.full_shadow*, which fills a full tile
    space and is for larger objects, and *images.half_shadow*, which fills half a
    tile space for smaller objects. Objects with a distinctive outline, such as the
    cactus, have their own shadow image file that is used only for that object. Some
    items, like the chair, have the shadow within the image file. Some items have
    no shadow, like the crater and any items the player can carry. When an image has
    no shadow, we write `None` where its shadow filename belongs in the dictionary.
    The word `None` is a special data type in Python. Like with `True` and `False`,
    you don’t need any quotes around it, and it should start with a capital letter.
    When you enter it correctly, `None` turns orange in the code.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个阴影图像文件** 我们使用阴影来增强游戏中的3D效果。两个标准阴影是*images.full_shadow*，它填充一个完整的瓷砖空间，适用于较大的物体；另一个是*images.half_shadow*，它填充一个半个瓷砖空间，适用于较小的物体。像仙人掌这样的物体有自己独特的轮廓，它们有专用的阴影图像文件，仅用于该物体。一些物品，比如椅子，其阴影包含在图像文件内。有些物品没有阴影，比如陨石坑和玩家可以携带的任何物品。当图像没有阴影时，我们在字典中的阴影文件名位置写`None`。`None`是Python中的一种特殊数据类型。像`True`和`False`一样，你不需要给它加引号，而且它应该以大写字母开头。正确输入时，`None`在代码中会变成橙色。'
- en: '**A long description** A long description is displayed when you examine or
    select an object while playing the game. Some of the long descriptions include
    clues, and others simply describe the environment.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个长描述** 当你在游戏中检查或选择一个对象时，会显示一个长描述。一些长描述包含线索，而其他的则只是描述环境。'
- en: '**A short description** Typically just a few words, such as “an access card,”
    a short description is shown onscreen when you do something with the object while
    playing the game. For example, “You have dropped an access card.” A short description
    is only required for items that the player can pick up or use, such as an access
    card or the vending machine.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个简短描述** 通常只有几个词，例如“一个访问卡”，简短描述会在你与对象互动时显示在屏幕上。例如，“你丢下了一张访问卡。”简短描述仅在玩家可以拾取或使用的物品上需要，比如访问卡或自动售货机。'
- en: The game can reuse items in the `objects` dictionary. For example, if a room
    is made of 60 or more identical wall pillars, the game can just reuse the same
    wall pillar object. It only needs to be in the dictionary once.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏可以重用`objects`字典中的物品。例如，如果一个房间由60个或更多相同的墙壁支柱构成，游戏只需重用同一个墙壁支柱对象。它只需要在字典中出现一次。
- en: There are some items that use the same image files but have other differences,
    which means we must store them separately in the dictionary. For example, the
    access cards have different descriptions depending on who they belong to, and
    the doors have different descriptions to tell you which key to use. Each access
    card and door has its own entry in the `objects` dictionary.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有些物品使用相同的图像文件，但有其他不同之处，这意味着我们必须在字典中将它们分开存储。例如，通行卡根据持有者的不同描述不同，门也有不同的描述，告诉你使用哪把钥匙。每张通行卡和每扇门在`objects`字典中都有自己的条目。
- en: '**ADDING THE FIRST OBJECTS IN ESCAPE**'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加逃脱游戏中的第一个物品**'
- en: Open *listing4-3.py*, which you created in [Chapter 4](ch04.xhtml#ch04). This
    listing contains the game map and the code to generate the room map. We’ll add
    to this program to continue building the *Escape* game.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你在[第4章](ch04.xhtml#ch04)中创建的*listing4-3.py*。该列表包含了游戏地图和生成房间地图的代码。我们将对这个程序进行扩展，继续构建*逃脱*游戏。
- en: First, we need to set up some additional variables. Before the adventure begins,
    a research craft, called the Poodle lander, crash-lands on the planet surface.
    We’ll store coordinates for a random crash site in these new variables. We’ll
    add these variables now because the map object (number 27) will require them for
    its description.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设置一些额外的变量。在冒险开始之前，一艘名为“波杜尔着陆器”的科研飞船坠毁在行星表面。我们将在这些新变量中存储随机坠机地点的坐标。我们现在添加这些变量，因为地图对象（编号27）将需要它们来描述其位置。
- en: Add the new lines in [Listing 5-5](ch05.xhtml#ch05list5) to the `VARIABLES`
    section, marked out with a hashed box, in your existing *listing4-3.py* file.
    I recommend adding them at the end of your other variables, just above where the
    `MAP` section begins, so your listing and my listing are consistent. Save your
    program as *listing5-5.py*. The program won’t do anything new if you run it now,
    but if you want to try it, enter pgzrun listing5-5.py.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将[Listing 5-5](ch05.xhtml#ch05list5)中的新行添加到现有*listing4-3.py*文件中的`VARIABLES`部分，该部分由一个哈希框标记。我建议将它们添加到其他变量的末尾，紧接着`MAP`部分开始的位置，这样你的列表和我的列表就一致了。将程序保存为*listing5-5.py*。如果现在运行它，程序不会做任何新的操作，但如果你想尝试，可以输入pgzrun
    listing5-5.py。
- en: '*listing5-5.py*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-5.py*'
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 5-5: Adding the crash site location variables*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 5-5: 添加坠机地点变量*'
- en: These new instructions create variables to remember the sector (or room number)
    the Poodle landed on, and its *x* and *y* position in that sector. The instructions
    use the `random.randint()` function, which picks a random number between the two
    numbers you give it. These instructions run once at the start of the game, so
    the lander location is different each time you play but doesn’t change during
    the game.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新指令创建了变量，用来记住波杜尔着陆器所着陆的区块（或房间编号），以及它在该区块中的*x*和*y*位置。这些指令使用了`random.randint()`函数，它会从你提供的两个数字之间随机选择一个数字。这些指令在游戏开始时执行一次，因此每次你玩游戏时，着陆器的位置都会不同，但游戏过程中不会改变。
- en: Now let’s add the first chunk of the objects data, shown in [Listing 5-6](ch05.xhtml#ch05list6).
    This section provides the data for objects 0 to 12\. Because the player cannot
    pick up or use these objects, they don’t have a short description.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加第一部分物品数据，如[Listing 5-6](ch05.xhtml#ch05list6)所示。本部分提供了从物品0到12的数据。因为玩家无法拾取或使用这些物品，它们没有简短的描述。
- en: Place this section of the listing just above the `MAKE MAP` section of your
    existing program (*listing5-5.py*). To help you find your way around the listing,
    you can press CTRL-F in IDLE to search for a particular word or phrase. For example,
    try searching for *make map* to see where to start adding the code in [Listing
    5-6](ch05.xhtml#ch05list6). After searching, click Close on the search dialog
    box. Remember that if you get lost in the listing, you can always refer to the
    complete game listing in [Appendix A](appa.xhtml#appa).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将本段代码添加到现有程序中的`MAKE MAP`部分（*listing5-5.py*）之前。为了帮助你在代码中找到位置，你可以在IDLE中按CTRL-F搜索特定的单词或短语。例如，尝试搜索*make
    map*，查看在哪里开始添加[Listing 5-6](ch05.xhtml#ch05list6)中的代码。搜索后，点击搜索对话框上的关闭按钮。记住，如果你在列表中迷失了方向，始终可以参考[附录A](appa.xhtml#appa)中的完整游戏代码。
- en: If you prefer not to type the data, use the file *data-chapter5.py*, in the
    listings folder. It contains the `objects` dictionary, so you can copy and paste
    it into your program. You can start by just pasting the first 12 items.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想手动输入数据，可以使用位于列表文件夹中的 *data-chapter5.py* 文件。它包含了 `objects` 字典，你可以将它复制并粘贴到你的程序中。你可以先粘贴前
    12 项。
- en: '*listing5-6.py*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-6.py*'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 5-6: Adding the first objects*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-6：添加第一个对象*'
- en: Remember that the colors of the code can help you spot errors. If your text
    sections aren’t green, you’ve left out the opening double quotes. If there is
    too much green, you might have forgotten the closing double quotes. Some of the
    lists continue on the next line, and Python knows the list isn’t complete until
    it sees the closing bracket. If you struggle to get any of the listings to work,
    you can use my version of the code (see “[Using My Example Listings](ch01.xhtml#ch01sb1)”
    on [page 21](ch01.xhtml#page_21)) and pick up the project from any point.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，代码的颜色可以帮助你发现错误。如果你的文本部分不是绿色的，说明你漏掉了开头的双引号。如果有过多的绿色，可能是你忘了关闭的双引号。有些列表会继续在下一行，而
    Python 知道列表没有完成，直到看到闭合的括号。如果你在让任何代码示例工作时遇到困难，你可以使用我提供的代码版本（参见 “[使用我的示例代码](ch01.xhtml#ch01sb1)”
    在 [第21页](ch01.xhtml#page_21)），从任何点开始继续这个项目。
- en: '[Listing 5-6](ch05.xhtml#ch05list6) looks similar to our earlier `planets`
    dictionary: we use curly brackets to mark the start and end of the dictionary,
    and each entry in the dictionary is a list so it is inside square brackets. The
    main difference is that this time the key is a number instead of a word.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 5-6](ch05.xhtml#ch05list6) 看起来与我们之前的 `planets` 字典相似：我们使用大括号标记字典的开始和结束，每个字典条目是一个列表，因此它位于方括号内。主要的区别是这次键是数字而不是单词。'
- en: Save your new program as *listing5-6.py*. This program uses Pygame Zero for
    the graphics, so you need to run your new program by entering pgzrun listing5-6.py.
    It should work the same as it did previously because we’ve added new data but
    haven’t done anything with that data yet. It’s worth running the program anyway,
    because if you see an error message in the command line window, you can fix the
    new code before you go any further.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将你新的程序保存为 *listing5-6.py*。这个程序使用 Pygame Zero 进行图形处理，因此你需要通过输入 `pgzrun listing5-6.py`
    来运行它。它应该和之前一样工作，因为我们添加了新的数据，但还没有使用这些数据。无论如何都值得运行一下程序，因为如果你在命令行窗口看到错误信息，你可以在继续之前修复新代码。
- en: '**VIEWING OBJECTS WITH THE SPACE STATION EXPLORER**'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用空间站浏览器查看对象**'
- en: 'To see the objects, we have to tell the game to use the new dictionary. Change
    the following line in the `EXPLORER` part of the program from this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看对象，我们必须告诉游戏使用新的字典。将程序中 `EXPLORER` 部分的以下行更改为：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'to the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 改成如下：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This small change makes the *Explorer* code use our new `objects` dictionary
    instead of the `DEMO_OBJECTS` list we told it to use previously.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小变化使得 *Explorer* 代码使用我们新的 `objects` 字典，而不是我们之前指定的 `DEMO_OBJECTS` 列表。
- en: 'Notice that we’re now using lowercase letters instead of capital letters. In
    this program, I use capital letters for constants whose values won’t change. The
    `DEMO_OBJECTS` list never changed: it was only used for looking up the image filenames.
    But the `objects` dictionary will sometimes have its content changed as the game
    is played.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们现在使用的是小写字母而不是大写字母。在这个程序中，我使用大写字母表示常量，其值不会改变。`DEMO_OBJECTS` 列表从未改变：它仅用于查找图像文件名。但
    `objects` 字典在游戏过程中有时会更改其内容。
- en: The other difference is that `[0]` is on the end of the line now. This is because
    when we pull an item from the `objects` dictionary, it gives us an entire list
    of information. But we just want to use the image here, which is the first item
    in that list, so we use the index number `[0]` to extract it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个区别是 `[0]` 现在位于行末。这是因为当我们从 `objects` 字典中提取一个条目时，它会给我们一整个信息列表。但我们这里只想使用图像，它是该列表中的第一个项目，因此我们使用索引
    `[0]` 来提取它。
- en: Save the program and run it again, and you should see that the rooms look the
    same as before. That’s because we haven’t added any new objects yet, and we kept
    the object numbers for the floor, wall, and soil the same as the index numbers
    we were using for them before.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 保存程序并再次运行，你应该会看到房间看起来与之前相同。这是因为我们还没有添加任何新的对象，我们保持了楼层、墙壁和土壤的对象编号与之前使用的索引编号相同。
- en: '**DESIGNING A ROOM**'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设计一个房间**'
- en: 'Let’s add some items to the room display. In the `EXPLORER` section of the
    code, add the new lines shown in [Listing 5-7](ch05.xhtml#ch05list7):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在房间显示中添加一些物品。在代码的`EXPLORER`部分，添加[Listing 5-7](ch05.xhtml#ch05list7)中显示的新行：
- en: '*listing5-7.py*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-7.py*'
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 5-7: Adding some objects in the room display*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 5-7：在房间显示中添加一些物体*'
- en: These new instructions add objects to the `room_map` list at different positions
    before the room is displayed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新指令在房间显示之前，将物体添加到`room_map`列表中的不同位置。
- en: Remember that `room_map` uses the y-coordinate before the x-coordinate. The
    first index number says how far from the back of the room the objects are; the
    smaller the number the nearer to the back they are. The smallest useful number
    is usually 1 because the wall is in row 0.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`room_map`使用y坐标在前，x坐标在后。第一个索引数字表示物体离房间后面的距离；数字越小，物体越靠近后面。最小的有效数字通常是1，因为墙壁在第0行。
- en: The second number says how far across the room the objects are, from left to
    right. There’s usually a wall in column 0, so 1 is the smallest useful number
    for this position too.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个数字表示物体离房间的左边有多远，通常从左到右。第0列通常是墙壁，所以1也是这个位置的最小有效数字。
- en: The number on the other side of the equal sign is the key for a particular object.
    You can check which object each number represents by looking at the `objects`
    dictionary in [Listing 5-6](ch05.xhtml#ch05list6).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 等号另一边的数字是特定物体的键。你可以通过查看[Listing 5-6](ch05.xhtml#ch05list6)中的`objects`字典来检查每个数字代表的物体。
- en: 'So this line:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这一行：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'places object 8 (a tall bookcase) into the top-left corner of the room. And
    this line:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将物体8（一组高书架）放置在房间的左上角。而这一行：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: places a chair (object 6) three rows from the top and seven positions from the
    left. (Remember that index numbers start at 0.)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将一把椅子（物体6）放置在距离顶部三行和距离左边七个位置的地方。（记住，索引编号是从0开始的。）
- en: Save your program as *listing5-7.py* and enter pgzrun listing5-7.py to run it.
    [Figure 5-1](ch05.xhtml#ch05fig1) shows what you should see now.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的程序保存为 *listing5-7.py*，然后输入 `pgzrun listing5-7.py` 运行它。[图5-1](ch05.xhtml#ch05fig1)显示了现在你应该看到的内容。
- en: '![image](../images/fig5-1.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig5-1.jpg)'
- en: '*Figure 5-1: Cozy! Some objects displayed in the space station* Explorer *program*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-1：温馨！*Explorer*程序中显示的一些物体*'
- en: Because the *Explorer* program is just a demo, some things don’t work yet. For
    example, some objects have a black square under them because there’s no floor
    tile there. Also, all the rooms look the same because we’ve coded the objects
    into the `EXPLORER` section, so they appear in every room we display. This means
    you can’t view all the rooms anymore, because the objects won’t fit in some of
    them. As a result, you can’t use the arrow keys to look at all the rooms. The
    program doesn’t display wide objects such as the bed correctly yet, either. We’ll
    fix all of these problems later, but we can continue building and testing the
    space station in the meantime.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因为*Explorer*程序只是一个示例，所以一些功能还没有实现。例如，一些物体下面有一个黑色的方块，因为那里没有地板瓦片。另外，所有的房间看起来都一样，因为我们已经把物体编码到`EXPLORER`部分，所以它们出现在我们显示的每个房间里。这意味着你不能再查看所有的房间，因为某些房间里无法容纳物体。因此，你不能使用箭头键查看所有的房间。程序也不能正确显示像床这样的宽物体。我们稍后会解决这些问题，但在此期间，我们可以继续构建和测试空间站。
- en: '**TRAINING MISSION #3**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务#3**'
- en: 'Experiment with the code you’ve added to the *Explorer* program to reposition
    the furniture to your liking. Playing with this code is a great way to learn how
    to position objects in the rooms. If you want to play with a bigger room, change
    the value of `current_room` in the `VARIABLES` section from 31 to 40 (which is
    the biggest room in the game). Save your program as *mission5-3.py* and run it
    using `pgzrun mission5-3.py`. You’ll need to keep a safe copy of the existing
    *Explorer* code (*listing5-7.py*) to use in Training Mission #4.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试修改你在*Explorer*程序中添加的代码，将家具重新定位到你喜欢的位置。玩这个代码是学习如何在房间中定位物体的好方法。如果你想玩一个更大的房间，可以将`VARIABLES`部分中的`current_room`值从31改为40（这是游戏中最大的房间）。将程序保存为
    *mission5-3.py*，并使用`pgzrun mission5-3.py`运行它。你需要保留现有的*Explorer*代码（*listing5-7.py*）的备份，以便在训练任务#4中使用。
- en: '**ADDING THE REST OF THE OBJECTS**'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加其余的物体**'
- en: So far we’ve added objects 0 to 12 to the `objects` dictionary. There are 81
    objects in total in the game, so let’s add the rest now by adding the new lines
    in [Listing 5-8](ch05.xhtml#ch05list8). Remember to add a comma after item 12
    before adding the rest of the items in the dictionary.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将对象0到12添加到`objects`字典中。游戏中总共有81个物品，所以现在让我们通过在[清单5-8](ch05.xhtml#ch05list8)中添加新行来添加其余的物品。记得在添加字典中其余物品之前，在物品12后添加逗号。
- en: When the same filename or a similar description is used for more than one object,
    you can just copy and paste it. To copy code, click and hold down the mouse button
    at the beginning of the chunk of code, move the mouse to highlight it, and then
    press CTRL-C. Then click the mouse where you want to paste that code and press
    CTRL-V. Remember too that you can copy and paste the whole dictionary from the
    *data-chapter5.py* file if you want to save time typing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当同一个文件名或类似的描述用于多个物品时，你可以直接复制粘贴它。要复制代码，点击并按住鼠标左键，在代码块的开头开始，移动鼠标并高亮选中代码，然后按CTRL-C。接着点击鼠标到你想粘贴代码的位置，按CTRL-V。记住，如果你想节省打字时间，你也可以复制并粘贴整个*data-chapter5.py*文件中的字典。
- en: Save the program as *listing5-8.py*. You can test that the program still works
    by entering pgzrun listing5-8.py, although you won’t see anything new yet.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing5-8.py*。你可以通过输入pgzrun listing5-8.py来测试程序是否仍然有效，尽管你目前还看不到任何新内容。
- en: 'This is [Listing 5-8](ch05.xhtml#ch05list8):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[清单5-8](ch05.xhtml#ch05list8)：
- en: '*listing5-8.py*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing5-8.py*'
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Listing 5-8: Completing the objects data for the* Escape *game*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单5-8：完成* Escape *游戏的物品数据*'
- en: 'Some of the lists for objects extend over more than one line in the program
    ➊. This is fine because Python knows the list isn’t complete until it sees a closing
    bracket. To break a string (or any other piece of code) over more than one line,
    you can use a `\` at the end of the line ➋. The line breaks in *listing5-8.py*
    are just there to make the code fit onto the book page neatly: onscreen, the code
    can extend to the right if you want it to.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一些物品的列表在程序中跨越了多行 ➊。这没问题，因为Python知道列表直到看到闭括号才算完成。要将字符串（或任何其他代码片段）分割成多行，你可以在行尾使用`\`
    ➋。*listing5-8.py*中的换行只是为了让代码在书页上排版得更整齐：在屏幕上，如果你愿意，代码可以延伸到右侧。
- en: Object 27 is a map showing the Poodle’s crash site. Its long description includes
    the variables that you set in [Listing 5-5](ch05.xhtml#ch05list5) for the Poodle’s
    position. The `str()` function is used to convert the numbers in those variables
    into strings so they can be combined with other strings to make up the long description
    ➌.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对象27是一个显示贵宾犬坠毁地点的地图。它的长描述包括你在[清单5-5](ch05.xhtml#ch05list5)中设置的贵宾犬位置变量。`str()`函数用于将这些变量中的数字转换为字符串，以便它们可以与其他字符串组合，构成长描述
    ➌。
- en: 'We’ve also set up some additional lists we’ll need in the game: `items_player_may_carry`
    stores the numbers of the objects the player can pick up ➍. These are objects
    53 to 81\. Because they’re grouped together, we can set up the `items_player_may_carry`
    list using a range. A *range* is a sequence of numbers that starts from the first
    number given and finishes at the one *before* the last number. (We used ranges
    in [Chapter 3](ch03.xhtml#ch03).) We turn that range into a list using `list(range(53
    to 82))`, which makes a list of all the numbers from 53 to 81.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了一些在游戏中需要的额外列表：`items_player_may_carry`存储玩家可以拾取的物品编号 ➍。这些物品编号是53到81。因为它们是连续的，我们可以使用范围来设置`items_player_may_carry`列表。*范围*是一个数字序列，它从给定的第一个数字开始，直到最后一个数字*之前*的数字为止。（我们在[第3章](ch03.xhtml#ch03)中使用了范围。）我们通过`list(range(53
    to 82))`将该范围转化为列表，从而得到包含53到81之间所有数字的列表。
- en: If you add more objects that a player can carry later, you can add them to the
    end of this list. For example, to add new objects numbered 89 and 93 that the
    player can carry, use `items_player_may_carry = list(range(54, 82)) + [89, 93]`.
    You can also add new objects to the end of the `objects` list and just extend
    the range used to set up `items_player_may_carry`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以后添加更多玩家可以携带的物品，可以将它们添加到这个列表的末尾。例如，要添加编号为89和93的新物品，玩家可以携带，可以使用`items_player_may_carry
    = list(range(54, 82)) + [89, 93]`。你也可以将新物品添加到`objects`列表的末尾，并扩展用于设置`items_player_may_carry`的范围。
- en: The other new list is `items_player_may_stand_on`, which specifies whether a
    player is allowed to stand on a particular item ➎. Players can only stand on objects
    small enough to be picked up and on the different types of floor. We make this
    list by adding the object numbers for the different floor types to the `items_player_may_carry`
    list.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新列表是`items_player_may_stand_on`，它指定玩家是否被允许站在某个物品上➎。玩家只能站在足够小以便能被捡起的物品和不同类型的地面上。我们通过将不同地面类型的物品编号添加到`items_player_may_carry`列表中来创建这个列表。
- en: After you’ve entered [Listing 5-8](ch05.xhtml#ch05list8), you’ve completed the
    `OBJECTS` section of the *Escape* game! But we haven’t put the objects into the
    game map yet. We’ll start to do that in [Chapter 6](ch06.xhtml#ch06).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了[F第五章清单](ch05.xhtml#ch05list8)之后，你就完成了*Escape*游戏中的`OBJECTS`部分！但是我们还没有将物品放入游戏地图中。我们将在[第六章](ch06.xhtml#ch06)开始做这件事。
- en: '**TRAINING MISSION #4**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #4**'
- en: Experiment with some of the new objects you just added to the game. By modifying
    the code, can you . . .
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 试验一下你刚刚添加到游戏中的一些新物品。通过修改代码，你能否 . . .
- en: Swap the tall bookcase for a bin (object 62)?
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将高书架换成一个垃圾箱（物品 62）？
- en: Swap the spaceberry plant for a small rock (object 29)?
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将太空浆果植物换成一块小石头（物品 29）？
- en: Swap the chair on the right for a patch of toxic floor (object 48)?
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将右边的椅子换成一块有毒的地面（物品 48）？
- en: To understand which instruction places which object, you can either use the
    coordinates in your existing code or look up the object numbers in the `objects`
    dictionary (onscreen or in the listings in this chapter). Run your program to
    make sure it works.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解哪个指令放置了哪个物品，你可以使用现有代码中的坐标，或者查阅`objects`字典中的物品编号（屏幕上或本章的清单中）。运行你的程序以确保它正常工作。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞行了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框以确认你已经学会了本章的关键内容。
- en: '![Images](../images/box.jpg)  To get information from a dictionary, you use
    the key for that information. The key can be a word or a number and can also be
    stored in a variable.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  要从字典中获取信息，你需要使用该信息的键。键可以是一个单词或数字，也可以存储在变量中。'
- en: '![Images](../images/box.jpg)  If you try to use a key that isn’t in the dictionary,
    you’ll cause an error.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  如果你尝试使用字典中没有的键，会导致错误。'
- en: '![Images](../images/box.jpg)  To avoid an error, check whether the key is in
    the dictionary before the program tries to use it.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  为了避免错误，在程序尝试使用键之前，检查该键是否存在于字典中。'
- en: '![Images](../images/box.jpg)  You can put lists inside dictionaries. Then you
    can use the dictionary key followed by the list index to get a particular item
    from the list. For example: `planets["Earth"][1]`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  你可以将列表放入字典中。然后，你可以使用字典键后跟列表索引来获取列表中的特定项。例如：`planets["Earth"][1]`。'
- en: '![Images](../images/box.jpg)  The *Escape* game uses the `objects` dictionary
    to store information about all the objects in the game. Each item in the dictionary
    is a list.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  *Escape*游戏使用`objects`字典来存储游戏中所有物品的信息。字典中的每个项都是一个列表。'
- en: '![Images](../images/box.jpg)  You can use the index number of that list to
    access the object’s image file, shadow image file, and long and short description.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  你可以使用该列表的索引号来访问物品的图片文件、阴影图片文件以及长短描述。'
- en: '![image](../images/f0096-01.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0096-01.jpg)'
