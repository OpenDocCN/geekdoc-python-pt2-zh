["```py\nsudo port install python38 py38-pip\nsudo port select --set python python38\nsudo port select --set pip py38-pip\n```", "```py\nbrew install python\n```", "```py\nsudo apt install python3 python3-pip python3-venv\n```", "```py\nsudo dnf python3 python3-pip\n```", "```py\nsudo pacman -S python python-pip\n```", "```py\nsudo apt-get update\nsudo apt-get build-dep python3.9\n```", "```py\nsudo dnf install dnf-plugins-core\nsudo dnf builddep python3\n```", "```py\nsudo yum install yum-utils\nsudo yum-builddep python3\n```", "```py\n./configure --enable-optimizations\nmake\nmake altinstall\n```", "```py\npython3\n```", "```py\npy.exe -3\n```", "```py\nPython 3.10.2 (default)\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n> \n```", "```py\n> **spam = True**\n> **if spam:**\n...     **print(\"Spam, spam, spam, spam...\")**\n...\nSpam, spam, spam, spam...\n```", "```py\n> **exit()**\n```", "```py\npython3 myfile.py\n```", "```py\npython3 -m ❶ venv ❷ venv\n```", "```py\npython3 -m venv /opt/myvirtualenv\n```", "```py\nvirtualenv -p python3 venv\n```", "```py\n$ **source venv/bin/activate**\n```", "```py\n> **venv\\Scripts\\activate.bat**\n```", "```py\n> **venv\\Scripts\\activate.ps1**\n```", "```py\npython3 -m venv **--system-site-packages** venv\n```", "```py\n$ **deactivate**\n```", "```py\n> **venv\\Scripts\\deactivate.bat**\n```", "```py\npython3 -m pip `command`\n```", "```py\npip install PySide6\n```", "```py\npip install PySide6==6.1.2\n```", "```py\npip install PySide6>=6.1.2\n```", "```py\nPySide2>=5.11.1\nappdirs\n```", "```py\npip install -r requirements.txt\n```", "```py\npip install --upgrade PySide6\n```", "```py\npip install --upgrade -r requirements.txt\n```", "```py\npip uninstall `package`\n```", "```py\npip search web scraping\n```", "```py\nvenv/\n```", "```py\n❶  #!/usr/bin/env python3\n\nprint(\"Hello, world!\")\n```", "```py\n./hello_world.py\n```", "```py\n#!/usr/bin/python\n```", "```py\n#!/usr/bin/**env python3**\n```", "```py\n#!/usr/bin/env **python**\n```", "```py\n# -*- coding: latin-1 -*-\n```", "```py\n# coding: latin-1\n```", "```py\n# This Python file uses the following encoding: latin-1\n```", "```py\nvenv/bin/pip install pylint\nvenv/bin/python\n\n> import pylint\n```", "```py\npylint filetocheck.py\n```", "```py\npylint `myawesomeproject`\n```", "```py\ndef cooking():\n    ham = True\n    print(eggs)\n    return order\n```", "```py\npylint cooking.py\n```", "```py\n************* Module cooking\ncooking.py:1:0: C0111: Missing module docstring (missing-docstring)\ncooking.py:1:0: C0111: Missing function docstring (missing-docstring)\ncooking.py:3:10: E0602: Undefined variable 'eggs' (undefined-variable)\ncooking.py:4:11: E0602: Undefined variable 'order' (undefined-variable)\ncooking.py:2:4: W0612: Unused variable 'ham' (unused-variable)\n\n-----------------------------------------------------------------------\nYour code has been rated at -22.50/10\n```", "```py\n**# pylint: disable=missing-docstring**\n\ndef cooking():  **# pylint: disable=missing-docstring**\n    ham = True\n    print(eggs)\n    return order\n```", "```py\n************* Module cooking\ncooking.py:5:10: E0602: Undefined variable 'eggs' (undefined-variable)\ncooking.py:6:11: E0602: Undefined variable 'order' (undefined-variable)\ncooking.py:4:4: W0612: Unused variable 'ham' (unused-variable)\n\n----------------------------------------------------------------------\nYour code has been rated at -17.50/10 (previous run: -22.50/10, +5.00)\n```", "```py\npylint --generate-rcfile > pylintrc\n```", "```py\npylint --rcfile=myrcfile `filetocheck.py`\n```", "```py\nflake8 cooking.py\n```", "```py\ncooking.py:2:5: F841 local variable 'ham' is assigned to but never used\ncooking.py:3:11: F821 undefined name 'eggs'\ncooking.py:4:12: F821 undefined name 'order'\n```", "```py\nflake8 --max-complexity 10 cooking.py\n```", "```py\ndef cooking():\n    ham = True    # noqa F841\n    print(eggs)   # noqa F821, F841\n    return order  # noqa\n```", "```py\n[flake8]\nmax-complexity = 10\n```", "```py\nmypy `filetocheck.py`\n```", "```py\nautopep8 --in-place --aggressive --aggressive `filetochange.py`\n```", "```py\nblack `filetochange.py`\n```", "```py\n#!/usr/bin/env python3\n\nprint(\"Hello, world!\")\n```", "```py\npython3 hello_world.py\n```", "```py\nHello, world!\n```", "```py\nprint(\"Hello, world\")\n```", "```py\nname = input( ❶ \"What is your name? \")\nprint(\"Hello, \" + name)\n```", "```py\nmessage = \"Hello, world!\"\nprint(message)\n```", "```py\nmessage = \"Hello, world!\"**;** print(message)\n```", "```py\nname = \"Jason\"\n❶ if name != \"\":\n    message = \"Hello, \" + name + \"!\"\n    print(message)\n❷ print(\"I am a computer.\")\n```", "```py\nraining = True\nhailing = False\nif raining:\n    if hailing:\n       print(\"NOPE\")\n    else:\n        print(\"Umbrella time.\")\n```", "```py\nraining = True\nif raining:\n    `pass`\n```", "```py\n# This is a comment\nprint(\"Hello, world!\")\nprint(\"How are you?\") ❶ # This is an inline comment.\n# Here's another comment\n# And another\n# And...you get the idea\n```", "```py\ndef make_tea():\n    \"\"\"Will produce a concoction almost,\n    but not entirely unlike tea.\n    \"\"\"\n    #  ...function logic...\n```", "```py\nprint(make_tea.__doc__)  # This always works.\nhelp(make_tea)           # Intended for use in the interactive shell.\n```", "```py\nname = \"Jason\"\npoints = 4571\nprint(name)   # displays \"Jason\"\nprint(points) # displays 4571\npoints = 42\nprint(points) # displays 42\n```", "```py\nfrom decimal import Decimal\nfrom fractions import Fraction\n\nthird_fraction = Fraction(1, 3)\nthird_fixed = Decimal(\"0.333\")\nthird_float = 1 / 3\n\nprint(third_fraction)  # 1/3\nprint(third_fixed)     # 0.333\nprint(third_float)     # 0.3333333333333333\n\nthird_float = float(third_fraction)\nprint(third_float)     # 0.3333333333333333\n\nthird_float = float(third_fixed)\nprint(third_float)     # 0.333\n```", "```py\nprint(-42)         # negative (unary), evaluates to -42\nprint(abs(-42))    # absolute value, evaluates to 42\nprint(40 + 2)      # addition, evaluates to 42\nprint(44 - 2)      # subtraction, evaluates to 42\nprint(21 * 2)      # multiplication, evaluates to 42\nprint(680 / 16)    # division, evaluates to 42.5\nprint(680 // 16)   # floor division (discard remainder), evaluates to 42\nprint(1234 % 149)  # modulo, evaluates to 42\nprint(7 ** 2)      # exponent, evaluates to 49\nprint((9 + 5) * 3) # parentheses, evaluates to 42\n```", "```py\nfoo = 10\nfoo += 10   # value is now 20 (10 + 10)\nfoo -= 5    # value is now 15 (20 – 5)\nfoo *= 16   # value is now 240 (15 * 16)\nfoo //= 5   # value is now 48 (240 // 5)\nfoo /= 4    # value is now 12.0 (48 / 4)\nfoo **= 2   # value is now 144.0 (12.0 ** 2)\nfoo %= 51   # value is now 42.0 (144.0 % 15)\n```", "```py\nprint(9 & 8)    # bitwise AND, evaluates to 8\nprint(9 | 8)    # bitwise OR, evaluates to 9\nprint(9 ^ 8)    # bitwise XOR, evaluates to 1\nprint(~8)       # unary bitwise ones complement (flip), evaluates to -9\nprint(1 << 3)   # bitwise left shift, evaluates to 8\nprint(8 >> 3)   # bitwise right shift, evaluates to 1\n```", "```py\nimport math\n\nprint(math.pi)   # PI\nprint(math.tau)  # TAU\nprint(math.e)    # Euler's number\nprint(math.inf)  # Infinity\nprint(math.nan)  # Not-a-Number\n\ninfinity_1 = float('inf')\ninfinity_2 = ❶ math.inf \nprint(infinity_1 == infinity_2)  # prints True\n```", "```py\nimport math\n\ndistance_ft = 65  # the distance to the object\nangle_deg = 74    # the angle to the top of the object\n\n# Convert from degrees to radians\nangle_rad = ❶ math.radians(angle_deg)\n# Calculate the height of the object\nheight_ft = distance_ft * ❷ math.tan(angle_rad)\n# Round to one decimal place\nheight_ft = ❸ round(height_ft, 1)\n\nprint(height_ft)  # outputs 226.7\n```", "```py\ncommand = \"greet\"\n\nif command == \"greet\":\n    print(\"Hello!\")\nelif command == \"exit\":\n    print(\"Goodbye\")\nelse:\n    print(\"I don't understand.\")\n```", "```py\nscore = 98\nhigh_score = 100\n\nprint(score == high_score)  # equals, evaluates to False\nprint(score != high_score)  # not equals, evaluates to True\nprint(score < high_score)   # less than, evaluates to True\nprint(score <= high_score)  # less than or equals, evaluates to True\nprint(score > high_score)   # greater than, evaluates to False\nprint(score >= high_score)  # greater than or equals, evaluates to False\n```", "```py\nspam = True\neggs = False\npotatoes = None\n\nif spam is True:          # Evaluates to True\n    print(\"We have spam.\")\n\nif spam is not False:     # Evaluates to True\n    print(\"I DON'T LIKE SPAM!\")\n\n❶ if spam:                  # Implicitly evaluates to True (preferred)\n    print(\"Spam, spam, spam, spam...\")\n\nif eggs is False:         # Evaluates to True\n    print(\"We're all out of eggs.\")\n\nif eggs is not True:      # Evaluates to True\n    print(\"No eggs, but we have spam, spam, spam, spam...\")\n\n❷ if not eggs:              # Implicitly evaluates to True (preferred)\n    print(\"Would you like spam instead?\")\n\nif potatoes is not None:  # Evaluates to False (preferred)\n    print(\"Yum\")          # We never reach this...potatoes is None!\n\nif potatoes is None:      # Evaluates to True (preferred)\n    print(\"Yes, we have no potatoes.\")\n\n❸ if eggs is spam:          # Evaluates to False (CAUTION!!!)\n    print(\"This won't work.\")\n```", "```py\nanswer = 42\n\nif answer:\n    print(\"Evaluated to True\")  # this runs\n\nprint(bool(answer))             # prints True\n```", "```py\nspam = True\neggs = False\n\nif spam and eggs:        # AND operator, evaluates to False\n    print(\"I do not like green eggs and spam.\")\n\nif spam or eggs:         # OR operator, evaluates to True\n    print(\"Here's your meal.\")\n\nif (not eggs) and spam:  # NOT (and AND) operators, evaluates to True\n    print(\"But I DON'T LIKE SPAM!\")\n```", "```py\nscore = 98\nhigh_score = 100\nprint(score != high_score)      # not equals operator, evaluates to True\nprint(not score == high_score)  # not operator, evaluates to True\n```", "```py\nif (eggs := 7 + 5) == 12:\n    print(\"We have one dozen eggs\")\n\nprint(eggs)  # prints 12\n```", "```py\n...\n```", "```py\ndanger = \"Cuidado, llamas!\"\ndanger = 'Cuidado, llamas!'\ndanger = '''Cuidado, llamas!'''\ndanger = \"\"\"Cuidado, llamas!\"\"\"\n```", "```py\nquote = \"Shout \\\"Cuidado, llamas!\\\"\"\n```", "```py\nquote = **'**Shout, \"Cuidado, llamas!\"**'**\n```", "```py\nquestion = \"What do you mean, \\\"it's fine\\\"?\"\n```", "```py\nquestion = **\"\"\"**What do you mean, \"it's fine\"?**\"\"\"**\n```", "```py\n❶ parrot = \"\"\"\\\nThis parrot is no more!\nHe has ceased to be!\nHe's expired\n    and gone to meet his maker!\nHe's a stiff!\nBereft of life,\n    he rests in peace!\"\"\"\n\nprint(parrot)\n```", "```py\nprint(r\"I love backslashes: \\ Aren't they cool?\")\n```", "```py\nI love backslashes: \\ Aren't they cool?\n```", "```py\nprint(\"A\\nB\")\nprint(r\"A\\nB\")\n```", "```py\nA\nB\n```", "```py\nA\\nB\n```", "```py\nin_stock = 0\nprint(\"This cheese shop has \" + str(in_stock) + \" types of cheese.\")\n```", "```py\nin_stock = 0\nprint(**f**\"This cheese shop has **{in_stock}** types of cheese.\")\n```", "```py\nprint(f\"{5+5=}\")  # prints \"5+5=10\"\n```", "```py\nanswer = 42\nprint(f\"{{answer}}\")          # prints \"{42}\"\nprint(f\"{{{{answer}}}}\")      # prints \"{{42}}\"\nprint(f\"{{{{{{answer}}}}}}\")  # prints \"{{{42}}}\"\n```", "```py\nprint(f\"{ord('\\\"')}\")     # SyntaxError\n```", "```py\nprint(f\"\"\"{ord('\"')}\"\"\")  # prints \"34\"\n```", "```py\nprint(f\"{ord('\\n')}\")     # SyntaxError\n```", "```py\nnewline_ord = ord('\\n')\nprint(f\"{newline_ord}\")   # prints \"10\"\n```", "```py\nprint(f\"{# a comment}\")   # SyntaxError\nprint(f\"{ord('#')}\")      # OK, prints \"35\"\n```", "```py\nspam = 1234.56789\nprint(f\"{spam:=^+15,.2f}\")  # prints \"===+1,234.57===\"\n\nspam = 42\nprint(f\"{spam:#07x}\")       # prints \"0x0002a\"\n\nspam = \"Hi!\"\nprint(f\"{spam:-^20}\")       # prints \"--------Hi!---------\"\n```", "```py\na = 42\nb = 64\n```", "```py\nprint( ❶ \"{:#x} and {:#o}\".format( ❷ a, b))\n```", "```py\n0x2a 0o100\n```", "```py\nprint(f\"{**a**:#x} and {**b**:#o}\")  # prints \"0x2a 0o100\"\n```", "```py\nprint(\"{0:d}={0:#x} | {1:d}={1:#x}\".format(a, b))\n```", "```py\n42=0x2a | 64=0x40\n```", "```py\nf\"{**a**:d}={**a**:#x} | {**b**:d}={**b**:#x}\"\n```", "```py\nfrom string import Template\n```", "```py\ns = Template(\"$greeting, $user!\")\n```", "```py\nprint(s.substitute(greeting=\"Hi\", user=\"Jason\"))\n```", "```py\nHi, Jason!\n```", "```py\ns = Template(\"A ${thing}ify subscription costs $$$price/mo.\")\nprint(s.substitute(thing=\"Code\", price=19.95))\n```", "```py\nA Codeify subscription costs $19.95/mo.\n```", "```py\ngreeting = \"Hello\"\nname = \"Jason\"\n```", "```py\nmessage = greeting + \", \" + name + \"!\"  # value is \"Hello, Jason!\"\nprint(message)\n```", "```py\nmessage = **\"\".join((**greeting, \", \", name, \"!\"**))**  # value is \"Hello, Jason!\"\nprint(message)\n```", "```py\ndef tell_joke(joke_type):\n```", "```py\n if joke_type == \"funny\":\n        print(\"How can you tell an elephant is in your fridge?\")\n        print(\"There are footprints in the butter!\")\n    elif joke_type == \"lethal\":\n        print(\"Wenn ist das Nunstück git und Slotermeyer?\")\n        print(\"Ja! Beiherhund das Oder die Flipperwaldt gersput!\")\n    else:\n        print(\"Why did the chicken cross the road?\")\n        print(\"To get to the other side!\")\n```", "```py\ntell_joke(\"funny\")\n```", "```py\nclass Joke:\n```", "```py\n def __init__(self, joke_type):\n        if joke_type == \"funny\":\n            self.question = \"How can you tell an elephant is in your fridge?\"\n            self.answer = \"There are footprints in the butter!\"\n        elif joke_type == \"lethal\":\n            self.question = \"Wenn ist das Nunstück git und Slotermeyer?\"\n            self.answer = \"Ja! Beiherhund das Oder die Flipperwaldt gersput!\"\n        else:\n            self.question = \"Why did the chicken cross the road?\"\n            self.answer = \"To get to the other side!\"\n```", "```py\n def tell(self):\n        print(self.question)\n        print(self.answer)\n```", "```py\nlethal_joke = Joke(\"lethal\")\nlethal_joke.tell()\n```", "```py\nnum_from_user = input(\"Enter a number: \")\n\ntry:\n    num = int(num_from_user)\nexcept ValueError:\n    print(\"You didn't enter a valid number.\")\n    num = 0\n\nprint(f\"Your number squared is {num**2}\")\n```", "```py\ncheeses = [\"Red Leicester\", \"Tilsit\", \"Caerphilly\", \"Bel Paese\"]\n```", "```py\nprint(cheeses[1])  # prints \"Tilsit\"\ncheeses[1] = \"Cheddar\"\nprint(cheeses[1])  # prints \"Cheddar\"\n```", "```py\nanswers = (\"Sir Lancelot\", \"To seek the holy grail\", 0x0000FF)\n```", "```py\nprint(answers[0])  # prints \"Sir Lancelot\"\n```", "```py\nanswers[0] = \"King Arthur\"  # raises TypeError\n```", "```py\nn = 0\n\nwhile n < 10:\n    n += 1\n    print(n)\n```", "```py\nwhile True:\n    command = input(\"Enter command: \")\n    if command == \"exit\":\n        break\n    elif command == \"sing\":\n        print(\"La la LAAA\")\n        continue\n\n    print(\"Command unknown.\")\n```", "```py\nfor i in range(1, 11):\n    print(i)\n```", "```py\nlunch_order = input(\"What would you like for lunch? \")\n\nmatch lunch_order:\n    case 'pizza':\n        print(\"Pizza time!\")\n    case 'sandwich':\n        print(\"Here's your sandwich\")\n    case 'taco':\n        print('Taco, taco, TACO, tacotacotaco!')\n    case _:\n        print(\"Yummy.\")\n```", "```py\nlunch_order = input(\"What would you like for lunch? \") \n\nmatch lunch_order:\n    # `--snip--`\n    case 'taco':\n        print('Taco, taco, TACO, tacotacotaco!')\n    **case 'salad' | 'soup':**\n **print('Eating healthy, eh?')**\n    case _:\n        print(\"Yummy.\")\n```", "```py\nlunch_order = input(\"What would you like for lunch? \") \n\nmatch lunch_order:\n    # `--snip--`\n    case 'salad' | 'soup':\n        print('Eating healthy, eh?')\n    case **order**:\n        print(**f\"Enjoy your {order}.\"**)\n```", "```py\nlunch_order = input(\"What would you like for lunch? \")\n**if ' ' in lunch_order:**\n **lunch_order = lunch_order.split(maxsplit=1)**\n\nmatch lunch_order:\n    **case (flavor, 'ice cream'):**\n **print(f\"Here's your very grown-up {flavor}...lunch.\")**\n    # `--snip--`\n```", "```py\n**class Special:**\n **TODAY = 'lasagna'**\n\nlunch_order = input(\"What would you like for lunch? \")\n\nmatch lunch_order:\n **case Special.TODAY:**\n **print(\"Today's special is awesome!\")**\n    case 'pizza':\n        print(\"Pizza time!\")\n    # `--snip--`\n```", "```py\nclass Special:\n    TODAY = 'lasagna'\n\nlunch_order = input(\"What would you like for lunch? \")\n\nmatch lunch_order:\n    # `--snip--`\n    case 'salad' | 'soup':\n        print('Eating healthy, eh?')\n **case ice_cream if 'ice cream' in ice_cream:**\n **flavor = ice_cream.replace('ice cream', '').strip()**\n **print(f\"Here's your very grown-up {flavor}...lunch.\")**\n    case order:\n        print(f\"Enjoy your {order}.\")\n```", "```py\nomission-git/\n├── LICENSE.md\n├── omission/\n│   ├── __init__.py\n│   ├── __main__.py\n│   ├── app.py\n│   ├── common/\n│   │   ├── __init__.py\n│   │   ├── classproperty.py\n│   │   ├── constants.py\n│   │   └── game_enums.py\n│   ├── data/\n│   │   ├── __init__.py\n│   │   ├── data_loader.py\n│   │   ├── game_round_settings.py\n│   │   ├── scoreboard.py\n│   │   └── settings.py\n│   ├── interface/\n│   ├── game/\n│   │   ├── __init__.py\n│   │   ├── content_loader.py\n│   │   ├── game_item.py\n│   │   ├── game_round.py\n│   │   └── timer.py\n│   ├── resources/\n│   └── tests/\n│       ├── __init__.py\n│       ├── test_game_item.py\n│       ├── test_game_round_settings.py\n│       ├── test_scoreboard.py\n│       ├── test_settings.py\n│       ├── test_test.py\n│       └── test_timer.py\n├── omission.py\n├── pylintrc\n├── README.md\n└── .gitignore\n```", "```py\npython3 -m omission\n```", "```py\nimport re\n```", "```py\nTraceback (most recent call last):\nFile \"weird.py\", line 1, in \nimport re\nFile \"re.py\", line 122, in \nimport enum\nModuleNotFoundError: No module named 'enum'\n```", "```py\n#!/usr/bin/env python3\n\ndef open():\n    print(\"Ahhhhhhhhhhhhhh.\")\n\ndef close():\n    print(\"Thank you for making a simple door very happy.\")\n```", "```py\nimport smart_door\nsmart_door.open()\nsmart_door.close()\n```", "```py\n**from** smart_door **import open**\nopen()\n```", "```py\nfrom smart_door import open**, close**\nopen()\n**close()**\n```", "```py\nsomefile = open(\"data.txt\", \"r\")\n# ...work with the file...\nsomefile.close()\n```", "```py\nTraceback (most recent call last):\n  File \"ch4_import2-bad.py\", line 9, in <module>\n    somefile = open(\"data.txt\", \"r\")\nTypeError: open() takes no arguments (2 given)\n```", "```py\nfrom smart_door import open as door_open\nfrom smart_door import close\n\ndoor_open()\nclose()\n```", "```py\nsomefile = open(\"data.txt\", \"r\")\n# ...work with the file...\nsomefile.close()\n```", "```py\nimport omission.data.data_loader\n```", "```py\nfrom musicapp.player.data.library.song import play\n\nplay()\n```", "```py\nfrom musicapp.player.data.library import song\n\nsong.do_thing()\n```", "```py\nfrom smart_door import *\n```", "```py\nfrom smart_door import *\nfrom gzip import *\nopen()\n```", "```py\nomission-git/\n└── omission/\n    ├── __init__.py\n    ├── __main__.py\n    ├── app.py\n    ├── common/\n    │   ├── __init__.py\n    │   ├── classproperty.py\n    │   ├── constants.py\n    │   └── game_enums.py\n    ├── data/\n    │   ├── __init__.py\n    │   ├── data_loader.py\n    │   ├── game_round_settings.py\n    │   ├── scoreboard.py\n    │   └── settings.py\n```", "```py\nfrom omission.common.game_enums import GameMode\n```", "```py\nfrom common.game_enums import GameMode\n```", "```py\nfrom **..**common.game_enums import GameMode\n```", "```py\nfrom omission.data.game_round_settings import GameRoundSettings\n```", "```py\nfrom game_round_settings import GameRoundSettings\n```", "```py\nfrom **.**game_round_settings import GameRoundSettings\n```", "```py\ndef greet():\n    print(\"Hello, world!\")\n```", "```py\nprint(\"Awesome module was run.\")\n```", "```py\nfrom testpkg import awesome\n\nprint(__name__)          # prints \"__main__\"\nprint(awesome.__name__)  # prints \"testpkg.awesome\"\n```", "```py\nAwesome module was run.\n__main__\ntestpkg.awesome\n```", "```py\n**if __name__ == \"__main__\":**\n    print(\"Awesome module was run.\")\n```", "```py\ndef main():\n    # Code to start/run your package.\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nfrom .smallrocket.rocket import SmallRocket\nfrom .largerocket.rocket import LargeRocket\nfrom .launchpad.pad import Launchpad\n```", "```py\nfrom rockets import SmallRocket, Launchpad\n\npad = Launchpad(SmallRocket())\npad.launch()\n```", "```py\n__all__ = [\"SmallRocket\", \"LargeRocket\", \"Launchpad\"]\n```", "```py\n__all__ = [\"smallrocket\"]\n```", "```py\n__all__ = [\"smallrocket.rocket\"]\n```", "```py\nfrom omission.__main__ import main\nmain()\n```", "```py\nimport sys\nprint(sys.path)\n```", "```py\n[ ❶ '/home/jason/DeadSimplePython/Code/ch4', ❷ '/usr/lib/python310.zip', ❸ '/usr/lib/python3.10', ❹ '/usr/lib/python3.10/lib-dynload', ❺ '/home/jason/.venvs/venv310/lib/python3.10/site-packages']\n```", "```py\n/home/jason/bunch_of_code\n../../../awesomesauce\n```"]