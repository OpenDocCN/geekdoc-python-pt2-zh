["```pyencapsulation    The intended purpose of classes: to associate data (attributes) with the functions (methods) written to interpret or mutate that data.    endianness    See *byte order*.    entry point    The code that is run first when importing or executing a project.    error    An exception representing a program state caused by unexpected and improper behavior. (See also *exceptional state*.)    event loop    The loop in asynchrony that manages multitasking between awaitables and provides the means of calling the first awaitable in the stack.    `except`    A clause in a `try` statement whose suite is executed if any exceptions indicated in the header are raised within the `try` suite. (See also `else`; `finally`; `try`.)    exception    An object that represents an exceptional program state and stores information associated with that state. When unhandled, exceptions are fatal. (See also *error*; *exceptional state*; *warning*.)    exceptional state    A program state wherein, in most cases, data must be changed or program flow must be redirected to allow valid continued execution. (See also *exception*; *happy path*.)    exception chaining    The act of associating an exception with one or more preceding exceptions in the call stack.    executor    An object that creates and manages threads in threading.    expression    A section of code that evaluates to a single value.    extension module    See *binary extension module*.    ## F    falsey    See *truthiness*.    field    See *attribute*.    file-like object    See *stream*.    file object    See *stream*.    finalizer    The special instance method `__del__()`, which is called when the instance is deleted either with the `del` operator or by the garbage collector. (See also *constructor*; *initializer*.)    `finally`    A clause in a `try` statement that is always run after the other clauses, even if the suite in another clause raises an exception or returns. (See also `else`; `except`; `try`.)    finder    An object that locates the module being imported.    finder, meta path    A finder that uses a particular strategy to find a module.    finder, path-based    A type of meta path finder that searches the filesystem for a module. Calls one or more path entry finders.    finder, path entry    A finder that searches the filesystem for a module in a particular manner, such as searching compressed files.    first-class citizen    A designation thatindicates something can be treated as an object. Functions are examples of first-class citizens in Python.    fixture    A function or method that sets up anything a test might need, especially things that are shared by multiple tests. Can also perform *teardown*.    fixture, autouse    A fixture that is automatically applied to all tests.    flaky test    A test that may fail unexpectedly or periodically, for reasons other than a flaw in the code that it’s testing.    float    See *floating-point number*.    floating-point number    Anumber with a decimal part that is stored internally according to the IEEE 754 standard. In Python, these are always stored with double precision. Floating-point numbers are infamous for being unable to store exact values. (See also *complex number*; `Decimal`; `Fraction`; *integer*.)    flush (v.)    To force the retrieval of all data in a buffer; usually refers to printing all data in the standard output stream or standard error stream.    `for`    A compound statement that defines a loop, iterates over the iterable(s) in the header, and executes the suite on each iteration, unless explicitly exited. (See also `while`.)    format specification    A mini-language of various flags that control how a value is formatted in a *formatted string*.    formatted string    A type of string literal that allows you to insert and format expressions and their resulting values directly in the string value. Denoted by an `f` before the opening quote. (See also *raw string*; *string*; *string literal*.)    `Fraction`    An object that stores an exact fraction, rather than floating-point numbers, thereby representing an exact fractional numeric value. (See also *complex number*; `Decimal`; *floating-point number*; *integer*.)    freeze (v.)    To execute the process of compiling Python source code to frozen code.    freezer    A tool that bundles the compiled Python code, the Python interpreter, and all the package dependencies into a single artifact.    frozen code    C arrays of Python bytecode that is assembled into machine code. Frozen code must still be executed by the Python interpreter.    `frozenset`    An immutable variant of a set.    f-string    See *formatted string*.    fully qualified name    The name of an object, such as a function, as the import system sees it; includes the names of the packages and the module the object is contained within. (See also *qualified name*.)    function    A callable with a name that contains a suite of statements and can optionally accept one or more arguments. (See also *callable*.)    function, member    See *method*.    function, pure    A function or callable that (a) has no side effects, (b) does not affect the behavior of other functions, and (c) is repeatable and stateless, such that input `X` will always yield output `Y`.    functional programming    A programming paradigm that organizes around pure, stateless functions. (See also *object-oriented programming*; *procedural programming*).    function annotation    Type hints applied to a function.    future    An object that will contain a value at some point in the future but can be passed around like a normal object, even before it contains that value. Often used in threading and multiprocessing. Known as a “promise” or “delay” in other languages.    fuzzing    The act of generating random inputs in tests to find inputs that cause the code to fail in unexpected ways.    ## G    garbage collection    The process of removing unneeded objects from memory.    garbage collector, generational    A garbage collector that handles all the odd situations a reference-counting garbage collector cannot. (See also *garbage collector,* *reference-counting*.)    garbage collector, reference-counting    A garbage collector that removes values when their reference count reaches zero. (See also *garbage collector, generational*.)    generator    See *generator function* or *generator object*.    generator expression    An anonymous generator that is defined by a single expression and that evaluates to a generator object. A generator expression is to a generator as a lambda is to a function. (See also *comprehension*.)    generator function    A function containing one or more `yield` statements. When called directly, it produces a *generator object*.    generator object    An iterable object that produces values on demand. (See also *comprehension*.)    generic function    See *single-dispatch generic function*.    generic type    A type hint, usually referring to a collection, where the type of items in the collection is passed as a parameter.    Global Interpreter Lock (GIL)    A mechanism in CPython that ensures any single Python process is constrained to a single CPU core, regardless of how many cores are available to the system.    god class    An antipattern; a class that violates the single-responsibility principle by having too many purposes or functionalities. Prone to bugs and difficult to maintain.    ## H    happy path    A program execution flow wherein all data and conditions are logically correct and valid, such that no errors can occur. (See also *exceptional state*.)    hashable    Describesan object for which a hash value can be created and for which the hash value never changes during the object’s lifetime. Must implement the special method `__hash__()`. All immutable values are hashable, while many mutable types are not.    hash value    A unique, immutable value, typically an integer, that is generated by processing an object in some way. Two objects that have the same hash value are usually guaranteed to be equivalent. Hash values are used by some collections and algorithms because it’s faster to compare hash values than most other values.    header    The first line of a clause, always terminated with a colon (`:`).    hexadecimal    A base-16 number system consisting of the digits *0* through *9*, as well as the digits *A* through *F* (which represent decimal values *10* through *15*). In Python, hexadecimal literals are prefixed with `0x`. (See also *binary*; *octal.*)    hook, meta    A meta path finder stored in `sys.meta_path`.    hook, path entry    A path entry finder stored in `sys.path_hooks`.    ## I    identity    A reference to a particular value in memory. When two names share an identity, they are bound to the same value in memory.    identity operator    See `is`.    `if`    A compound statement that executes a suite based on the condition of one or more clause headers. If the `if` header condition fails, each subsequent `elif` header in the compound statement is evaluated; if all conditions fail, the `else` clause executes, if one is present. (See also `elif`; `else`.)    immutable    Describes a value that CANNOT be modified in place. Attempting to mutate on a name referencing an immutable value will instead rebind the name to a new value. (See also *mutable*.)    import, absolute    An import statement that uses the fully qualified name of the module, starting from the top-level package.    import, relative    An import statement that uses the qualified name of a module relative to the current package.    importer    An object that serves as both a finder and a loader.    importer, built-in    An importer that finds and loads built-in modules.    importer, frozen    An importer that finds and loads frozen modules.    `in`    An operator that is used to check whether a particular value is contained in any collection or other object that implements the special method `__contains__()`.    indirect parametrization    See *parametrization, indirect*.    infinite iterator    An iterator that will continue to yield values until explicitly stopped.    infinite loop    A loop with no means of exiting; see *loop, infinite*.    inheritance    The relationship between two classes A and B, such that class B has one or more attributes or methods defined in class A, in addition to one or more attributes or methods first defined and/or redefined in class B. Also known as an “is-a” relationship. (See also *composition*.)    initializer    The special instance method `__init__()`, which is called immediately after a new instance is created from a class by the constructor. (See also *constructor*; *finalizer*.)    instance    An organized collection of attributes (variables) and methods (functions) created according to a class and existing in memory as a single value. (See also *class*; *object*.)    integer    A whole number.    interactive session    A console in which you enter and run code through the interpreter in real time and see the outcomes.    interface    The set of public methods that are used to interact with the class or object.    interpreted language    A language in which the source code or the bytecode created from the source code is interpreted and executed at runtime, on the client’s machine, by the language’s *interpreter*.    interpreter    A program that interprets and executes source code or bytecode.    interpreter shutdown    A special phase of the interpreter, wherein all allocated resources are gradually freed.    intra-package reference    See *import, relative*.    introspection    The ability of code to access information about itself at runtime.    `is`    An operator comparing the identity of two operands. Typically only used when comparing an operand with the value `True`, `False`, or `None`.    iterable    An object that can be traversed by an iterator; must supply an iterator object via the special method `__iter__()`. All *collections* are iterables. (See also *iteration*; *iterative*; *iterator*.)    iteration    The process of acting on each individual value in a group of one or more values, which are either contained within a collection or provided one by one, on demand, by a statement. (See also *iterable*; *iterative*; *iterator*.)    iterative    Describes something employing iteration.    iterator    An object that can traverse an iterable object; must implement the special method `__next__()` and return itself from `__iter__()`. (See also *iterable*; *iteration*; *iterative*.)    ## K    key function    A callable that returns the part of a collection or object that should be used for sorting.    ## L    lambda    An anonymous function made up of a single expression, the value of which is implicitly returned.    lazy evaluation    Behavior wherein each item in an iterable is evaluated on demand, instead of up front. (See also *eager evaluation*.)    LEGB    See *scope resolution order*.    linter    A static analyzer that checks source code for common mistakes, potential errors, and style inconsistencies.    list    A mutable, sequential (array-like) collection. List literals are comma delimited and enclosed in square brackets (`[ ]`). (See also *deque*; *dictionary*; *set*; *tuple*.)    list comprehension    See *comprehension, list*.    literal    An expression that explicitly defines a value in place.    little-endian    See *byte order*.    livelock    An erroneous situation similar to *deadlock*, except that threads keep infinitely repeating the same interactions, instead of merely waiting on one other. (See also *starvation*.)    loader    An object that loads a module using its module spec.    lock    An object that ensures only one task, thread, or process can access a shared resource at once, to help prevent race conditions. (See also *deadlock*, *livelock*, *starvation*.)    Look Before You Leap (LBYL)    A coding philosophy wherein you prevent errors by testing a value before using it. (See also *Easier to Ask Forgiveness than Permission (EAFP)*.)    lookup chain    The rules that determine where Python searches for an attribute and in what order. The order is as follows: data descriptors, object attributes, non-data descriptors, and finally class attributes according to the superclass linearization.    loop, infinite    A loop with no means of exiting. (See *infinite loop*.)    loose coupling    A pattern in which two or more components interact solely via their public interfaces, without regard to their implementation.    ## M    magic method    See *method, special*.    marking    The application of metadata to tests and fixtures. (See also *parametrization*.)    `memoryview`    An object that provides access to the raw memory of any object implementing the buffer protocol.    metaclass    The object from which a class is instantiated*.*    meta hook    See *hook, meta*.    meta path finder    See *finder, meta path*.    method    A function that is a member of a class or instance.    method, class    A method that belongs to the class itself and can be called on the class or on any instance of the class. Can access class attributes but cannot access instance attributes. (See also *method, instance*; *method, static*.)    method, dunder    See *method, special*.    method, instance    A method that belongs to the instance and can access the attributes of the particular instance. (See also *method, class*; *method, static*.)    method, magic    See *method, special*.    method, special    A method that implements a core Python language feature on a class or instance; for example, any instance that supports the addition operator (`+`) implements the special method `__add__()`. The name of a special method always starts and ends with two underscores (`__`).    method, static    A method that belongs to the class but cannot access either the class attributes or the instance attributes. (See also *method, class*; *method, instance*.)    method resolution order    The rules that determine the order in which the classes in an inheritance relationship are checked for a method or attribute. (See also *superclass linearization*.)    mixin    A class that exists purely to contain methods and attributes that you may want to compose into other classes. It may be incomplete or even invalid by itself, as it is not intended to be instantiated directly.    mocking    The act of temporarily replacing parts of the code with versions that will simulate inputs or other scenarios during testing.    module    An object of organization in Python. Usually executable and often implemented as a Python file (*.py*). (See also *package*.)    module search path    The directory that defines where Python looks for packages and modules and what order it searches in.    module spec    An object containing all the information about how to load a module.    multiprocessing    A technique for achieving parallelism in Python by running tasks on different independent Python processes. (See also *concurrency*; *parallelism*; *threading*.)    mutable    Describes a value that can be modified in place.    mutate    To change a value in place.    ## N    name    A token composed of letters, numbers, and underscores, which is always bound to a value. Commonly thought of as a “variable” in Python. Names have scope but not type.    `namedtuple`    A tuple with named fields.    name mangling    A behavior of Python wherein a name belonging to a class is renamed, usually to prevent naming conflicts or to provide a weak form of data hiding. Any name belonging to a class that is preceded by two underscores (`__`) will be name mangled. (See also *non-public*; *public*.)    namespace    An explicitly defined path to something, such as a function.    `None`    A dedicated value universally representing a lack of a value, rather than a value equivalent to `False` or `0`.    `NoneType`    The data type of the `None` value.    non-public    An attribute or method that is *not* intended to be called or mutated outside of the containing class, although such access is still possible. Non-public names always begin with an underscore (`_`). (See also *name mangling*; *public*.)    `not`    A logical operator that reverses the boolean result of an expression. When paired with the `is` operator (`is not`), it checks that two values do not have the same identity. (See also `and`; `or`.)    number system    A system whereby numeric values are represented with sequences of digits. For example, the decimal, or base-10, number system consists of the digits *0* through *9*. (See also *binary*; *hexadecimal*; *octal*.)    ## O    object    An instance of a class. In Python, the maxim is “Everything is an object.”    object-oriented programming    A programming paradigm that is organized around classes and objects by coupling data and its related logic. (See also *functional programming*.)    obvious    How any idiomatic Python solution should feel, once you know it.    octal    A base-8 number system consisting of the digits *0* through *7*. In Python, octal literals are prefixed with `0o`. (See also *binary*; *hexadecimal*.)    operator    A token, usually a symbol, which together with one or two operands (values) forms an expression. All operators in Python call a special method behind the scenes.    operator, binary    An operator that accepts two operands.    operator, unary    An operator that accepts one operand.    `or`    A logical operator where one or both operand expressions must evaluate to `True` for the operator to return `True`. (See also `and`; `not` `.`)    `OrderedDict`    A variant of the dictionary with extra functionality for tracking and managing the order of key-value pairs. (See also `Counter`; `defaultdict`.)    ## P    package    A term thatusually refers to a regular package. (See *package, regular*.)    package, namespace    A specialized type of package, lacking an *__init__.py* module, which allows you to distribute a package in multiple portions. Should not be confused with a *package, regular*.    package, regular    A special type of module containing other modules or packages. Usually exists as a directory containing an *__init__.py* module.    parallelism    A technique in which multiple tasks are executed simultaneously on different CPU cores. (See also *concurrency*; *multiprocessing*.)    parameter    A name defined in the header of a function to which a value can be passed (assigned) when the function is called. (See also *argument*.)    parameter, keyword-only    A parameter that only accepts a keyword argument. (See also *parameter, positional-only*.)    parameter, optional    A parameter for which an argument may be omitted in the call. A parameter is made optional by defining a *default argument value* in the parameter list. (See also *parameter, required*.)    parameter, positional-only    A parameter that only accepts a positional argument. (See also *parameter, keyword-only*.)    parameter, required    A parameter for which an argument must be provided in the call. (See also *parameter, optional*.)    parameter, variadic    See *parameter, variadic positional*.    parameter, variadic keyword    A parameter that can accept an arbitrary number of keyword arguments and that packs them into a dictionary. The variadic keyword parameter name is preceded by two asterisks (`**`). Conventionally named `kwargs`. (See also *argument, variadic keyword*; *parameter, variadic*.)    parameter, variadic positional    A parameter that can accept an arbitrary number of positional arguments, packing them into a tuple. The variadic parameter name is preceded by a single asterisk (`*`). Conventionally named `args`. (See also *argument, variadic*; *parameter, variadic keyword*.)    parametrization    The expansion of a single test out into multiple tests, each with the same logic but different data. Accomplished via marking.    parametrization, indirect    The act of relaying parametrized values to a fixture.    `pass`    A keyword that has no effect. Usually used as a placeholder for a suite.    path, absolute    A path that starts from the root of the filesystem.    path, concrete    A path-like object that provides methods for interacting with the filesystem.    path, pure    A path-like object that does not access the underlying filesystem.    path, relative    A path that starts from some nonroot location on the filesystem.    path-like object    An object that represents a filesystem path. Inherits from the abstract class `os.Pathlike`.    pdb    See *Python Debugger (pdb)*.    PEP    See *Python Enhancement Proposal*.    PEP 8    The Python style guide.    picklable    Describes any value that can be serialized by the `pickle` protocol.    `pickle`    A serialization format that is extraordinarily slow and insecure in most use cases, but which remains useful in multiprocessing.    pin (v.)    To set a dependency in packaging to use a specific version of the dependency.    platform wheel    See *wheel, platform*.    polymorphism    A pattern wherein multiple classes, with different behaviors and features, offer a common interface.    portion    Part of a larger package distributed with namespace packages.    postmortem (v.)    To run a debugger after a fatal crash has taken place.    pre-emptive multitasking    See *threading*.    priming    The act of making an initial call to a simple coroutine, advancing it to its first `yield` statement so it can receive a value via `send()`. Performed either by calling `send(None)` on the simple coroutine or by passing the simple coroutine to `next()`.    procedural programming    A programming paradigm that organizes around control blocks and focuses on control flow. (See also *functional programming*; *object-oriented programming*.)    process (n.)    An instance of a running computer program on a system. (See also *multiprocessing*; *subprocess*; *thread*.)    producer    A thread or process that provides data. (See also *consumer*.)    profiling    The technique by which you identify performance bottlenecks and common inefficiencies in existing code, thus finding where that code can be optimized. (See also *benchmarking*.)    promise    See *future.*    provisional    A term applied to a package or API that may change at any time, without regard to backward compatibility.    property    A name belonging to a class instance. Behaves externally like an attribute but is internally implemented as one to three instance methods: a getter, a setter, and a deleter.    public    An attribute or method that is intended to be called or mutated outside of the containing class. (See also *non-public*.)    pure function    See *function, pure*.    PyPA    See *Python Packaging Authority (PyPA)*.    PyPI    See *Python Package Index (PyPI)*.    Python Debugger (pdb)    A debugger for Python, with a workflow similar to other command line debuggers.    Python Enhancement Proposal (PEP)    A document formally proposing an addition or modification to an official policy, standard, or specification related to the Python programming language.    Pythonic    Describesidiomatic Python code, which is code that makes good use of Python’s syntax and behavior.    Python Package Index (PyPI)    An online repository of Python packages.    Python Packaging Authority (PyPA)    A quasi-official working group made up of Python community members who maintain projects and who want to make Python packaging a better experience.    Python Software Foundation (PSF)    The nonprofit organization that officially manages the Python language.    ## Q    qualified name    The name of an object, such as a function, preceded by its complete namespace within one of its modules and packages, if any. (See also *fully qualified name*.)    ## R    race condition    A bug-causing situation in concurrency or parallelism where an outcome is dependent on the order in which various tasks, threads, or processes start, pause, resume, and/or finish. (This order is always unpredictable.) Race conditions can be infamously hard to detect and debug. (See also *lock*.)    raw string    A type of string literal wherein the backslash is always treated as a literal character, rather than an escape character. Denoted by an `r` before the opening quote. (See also *formatted string*; *string*; *string literal*.)    rebind    To bind an existing name to a different value.    recursion    A callable calling itself; can be used as a form of looping. (See also *recursion*.)    recursion depth    The number of open (not yet returned) recursive calls to a callable from itself.    recursion limit    The maximum recursion depth before Python raises an error; can be set via `sys.setrecursionlimit()`.    reentrant (adj.)    Describes something that can be paused mid-execution while being called again concurrently, without any odd effects. This is an important concept in *concurrency* and *parallelism*.    reference    The association between a name and a value.    reference count    A count of how many references exist for a given value.    `repr`    See *canonical string representation*.    `return`    A statement that immediately exits a function, optionally passing back to the function caller the value that follows the keyword.    ## S    scope    The enclosing code structure within which a name is accessible. (See also *scope, global*; *scope, local*; *scope, nonlocal*.)    scope, global    The scope shared by the entire program; any name defined in the top level of a module is in global scope.    scope, local    The scope that is defined by a function, lambda, or comprehension; any name defined within local scope is only accessible within that scope.    scope, nonlocal    The scope that is local to the enclosing scope, rather than the present scope. Seen in nested functions, where function A contains function B; A is the nonlocal scope of B.    scope resolution order    The order in which scopes are searched for a given name. Best remembered via the acronym *LEGB*, for *local*, *enclosing-function local* (aka nonlocal), *global*, and *built-in*.    screaming snake case    A naming convention using all-caps letters (screaming) and underscores (snakes); for example, `INTEREST_RATE`. Normally used for variables intended to be used as constants, according to PEP 8\\. (See also *camel case*; *snake case*.)    sdist    See *source distribution (sdist)*.    segmentation fault    A fatal system error resulting from a program trying to access computer memory it doesn’t have permission to access. This is a common possible outcome of undefined behavior.    `self`    The name conventionally given to the first parameter of an instance method, which is intended to be bound to the instance itself.    sequence    An array-like collection.    serialization    The process of converting data to a format that can be stored. (See also *deserialization*.)    set    A mutable, unordered collection where all items are guaranteed to be unique. Set literals are comma delimited and enclosed in braces (`{ }`). (See also *deque*; *dictionary*; `frozenset`; *tuple*.)    set comprehension    See *comprehension, set*.    severity level    The relative importance of a message sent to a logger*.*    shadow (v.)    To obscure a name with another name; especially, to obscure a built-in or global name with a local name or to obscure a class attribute with an instance attribute.    shallow copy    See *copy*.    shebang    A special comment at the top of a Python file by which you can make the file directly executable. Short for “haSH-BANG” (`#!`), which appears at the beginning of the comment.    side effects    Any changes made to state outside of the local scope of a function.    simple coroutine    See *coroutine, simple*.    single-dispatch generic function    A function that behaves differently for parameters of different types.    single-responsibility principle    A principle stating that a function, class, or module should have one clear and distinct responsibility.    singleton    A design pattern in which a class only allows one version of itself to be instantiated at any one time. Generally discouraged in Python; static classes are preferred. (See *class, static*.)    slice notation    A form of subscripting by which you can iterate over multiple values in a specified range or pattern. Slice notation is enclosed in square brackets (`[ ]`) and consists of three integer parts: `[``start``:``stop``:``step``]`. Any of these three parts may be omitted.    slots    A tuple of predefined attributes on an object, declared with the `__slots__` special class attribute. Using slots is faster than the default behavior, wherein attributes are stored in a dictionary.    snake case    A naming convention, typically using all lowercase letters, with underscores (snakes) in place of spaces (e.g., `interest_rate`). Normally used for variable and function names in Python, according to PEP 8\\. (See also *camel case*; *screaming snake case*.)    software test fixture    See *fixture*.    source distribution (sdist)    One or more Python packages bundled into a compressed archive.    special attribute    See *attribute, special*.    special method    See *method, special*.    starred expression    A name that is preceded by an asterisk (`*`) and into which multiple values may be unpacked.    starvation    An erroneous situation in which a thread is permanently stuck, waiting for a future or waiting to join a thread, especially to acquire some data or resource it needs. (See also *deadlock*; *livelock*.)    state    Data stored between executions of a callable that typically affect the callable’s behavior.    statement    A single executable unit of code in Python; analogous to a sentence in English. (See also *expression*; *statement, compound*.)    statement, compound    A structure that organizes additional statements into one or more clauses and affects the execution of those statements in some manner. Python has seven types of compound statements: `if`, `while`, `for`, `try`, `with`, `def`, and `class`.    statement, simple    Typically, a single line of code. (See also *statement*.)    static analyzer    A tool that checks source code for potential problems or deviations from standards. (See also *linter*.)    stream    A buffer object that offers methods for reading from or writing to a file or other input/output source.    stream, standard error    A stream provided by the operating system. Serves as a buffer that prints to the terminal but marks the messages as related to errors, instead of normal output.    stream, standard input    A stream provided by the operating system. Serves as a buffer that contains data typed into the terminal.    stream, standard output    A stream provided by the operating system. Serves as a buffer that prints to the terminal.    string    A value consisting of one or more Unicode or ASCII characters. (See also *formatted string*; *raw string*; *string literal*.)    string literal    A literal representation of a string. It is wrapped in a matching pair of single quotes (`'...'`), double quotes (`\"...\"`), or triple quotes (`\"\"\"...\"\"\"`).    struct    A module for converting between Python values and binary data, including for interoperability with C values.    stub class    A class that contains little to no data.    subprocess    A separate process that is linked to the main process. (See also *multiprocessing*.)    subscript    A reference to an individual value within a collection or other object created by specifying an index integer in square brackets (`[ ]`).    subscriptable    Describes any collection or object that allows you to access, modify, or delete individual items by specifying an index integer in square brackets (`[ ]`). For an object to be subscriptable, it must implement one or more of the following special methods, as appropriate: `__getitem__()`, `__setitem__()`, `__delitem__()`. (See also *slice notation*.)    suite    A “block” of code; one or more statements that belong to (are the “body” of) a clause and thus belong to a compound statement, which controls their execution.    `super()`    A function that accesses the next class in the *superclass linearization* for the current class.    superclass linearization    The list of base classes a class inherits from, in the order they are to be searched for the method being called. (See also *method resolution order*.)    ## T    task    A special object that runs native coroutines without blocking.    teardown    Cleanup tasks like closing streams or database connections or deleting temporary files. (See also *fixture*.)    ternary expression    A compact conditional expression that produces a value. Follows the form `a` `if` `expression` `else` `b`, where the ternary expression evaluates to `a` if `expression` evaluates to `True`, or to `b` otherwise.    test fixture    See *fixture*.    test-driven development (TDD)    The practice of writing tests before writing the code and then writing the code to make the tests pass*.*    thread    A single flow of execution within a process. A single process may have multiple threads.    threading    A form of concurrency in which the operating system manages multitasking by running each task in a thread. (See also *asynchrony*, *parallelism*.)    thread safety    Techniques to avoid concurrency-related bugs, especially race conditions.    timeout    In concurrency and parallelism, the maximum time until the program gives up waiting on a thread or process to join.    traceback    The complete call stack leading to an exception, along with any information about the exception itself.    truthiness    The implied boolean value of any expression or value; it is *truthy* if evaluating to `True` and *falsey* if evaluating to `False`. Values equivalent to `False`, `0`, or `None` are falsey; all others are truthy.    truthy    See *truthiness.*    `try`    A compound statement that catches any exceptions raised within the initial clause and handles them according to the subsequent `except`, `else`, and `finally` clauses. (See also `else`; `except`; `finally`.)    tuple    An immutable, sequential (array-like) collection. Tuple literals are comma delimited and normally enclosed in parentheses (`( )`). (See also *deque*; *dictionary*; *list*; `namedtuple`; *set*.)    Turing-complete    Describes a quality of a language whereby you could implement any other programming language in it and execute any program written in that language.    `type`    The metaclass from which nearly all classes are instantiated.    type alias    A name bound to a type hint, especially a parameterized generic type, for easier reuse.    type annotations    See *type hint*.    type hint    An annotation that describes the expected data type associated with a name, parameter, or function return. Only used by certain static analyzers; entirely ignored by the Python language itself.    ## U    undefined behavior    A situation in code with no formal definition for how it should be handled. (See also *segmentation fault*.)    unit test    A test that verifies the behavior of a single unit, such as a function or a conditional path through a function.    unpack    To assign each of the values in a collection or other iterable to multiple names.    ## V    value    A unique copy of data in memory. There must be a reference to the value, or else it is deleted. Values have type but not scope.    variable    A term referring to a name and its value together.    variable, member    See *attribute*.    version control system    Software that tracks revisions to source code and other files. Git is a major example.    virtual environment    A sandboxed environment containing separate installations of desired packages.    virtual subclassing    A technique wherein an ABC reports certain classes as being derived, even if they aren’t.    ## W    walrus operator    See *assignment expression*.    warning    A message about a problem that has been worked around or another piece of important information. Warnings are nonfatal by default. (See also *exception*.)    warnings filter    An argument passed to the Python interpreter that controls which warnings are displayed and how.    weakref    A reference that doesn’t increase the reference count on the value.    wheel    A standardized format for Python built distributions, defined in PEP 237\\. Superseded *eggs*, a more limited format with similar goals.    wheel, platform    A wheel built for a specific system.    `while`    A compound statement that defines a loop; as long as the condition in the header is true, the suite is executed, unless explicitly exited. (See also `for`.)    wrapper module    A binary extension module that exposes a C library to Python. (See also *accelerator module*.)    ## Y    `yield`    A keyword used in generators and simple coroutines. Either (a) returns the value of the expression following the operator to the caller of the generator’s `__next__()` method or (b) passes to the assignment operator preceding this operator the value sent to the coroutine via its `send()` method. (See also *generator*; `yield from`.)    `yield from`    A statement that passes execution control flow from the current generator to the iterable following this operator. (See also *generator*; `yield`.)    ## Z    Zen of Python, The    A poem by Tim Peters that expresses the philosophy of the Python language.```"]