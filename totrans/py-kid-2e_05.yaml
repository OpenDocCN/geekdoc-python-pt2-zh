- en: '4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drawing with Turtles
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A turtle in Python is not quite like a turtle in the real world. We know a turtle
    as a reptile that moves around very slowly and carries its house on its back.
    In the world of Python, a *turtle* is a small, black arrow that moves slowly around
    the screen. Actually, considering that a Python turtle leaves a trail as it moves
    around the screen, it’s less like a turtle and more like a snail or slug.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll use a Python turtle to learn the basics of computer graphics
    by drawing some simple shapes and lines.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python’s Turtle Module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *module* in Python is a way for programmers to make useful code available
    for other programmers to use. (Among other things, a module can contain *functions*
    we can use.) We’ll learn more about modules and functions in [Chapter 7](ch07.xhtml#ch07).
  prefs: []
  type: TYPE_NORMAL
- en: The turtle is a special module in Python that we can use to learn how computers
    draw pictures on a screen. The turtle module is a way of programming vector graphics,
    which is basically just drawing with simple lines, dots, and curves.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0044-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s see how the turtle works. First, start the Python Shell. Next, tell Python
    to use the turtle by importing the turtle module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Importing a module tells Python that you want to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Canvas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we’ve imported the turtle module, we need to create a *canvas*—a blank
    space to draw on, like an artist’s canvas. To do so, we call the function Turtle
    from the turtle module, which automatically creates a canvas (we’ll learn more
    about what a function is in [Chapter 7](ch07.xhtml#ch07)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter this into the Python Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should see a blank box (the canvas), with an arrow in the center (similar
    to [Figure 4-1](ch04.xhtml#ch04fig01)). The arrow in the middle of the screen
    is the turtle, and you’re right—it isn’t very turtle-like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-1: Running turtle in the Python Shell*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If the turtle module doesn’t appear to be working, there are some additional
    steps you can try in [Appendix C](app03.xhtml#app03).*'
  prefs: []
  type: TYPE_NORMAL
- en: Moving the Turtle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can send instructions to the turtle by using functions available on the
    variable t we just created, similar to using the Turtle function in the turtle
    module. For example, the forward instruction tells the turtle to move forward.
    To tell the turtle to advance 50 pixels, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0045-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should see something like [Figure 4-2](ch04.xhtml#ch04fig02).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-2: The turtle moving forward*'
  prefs: []
  type: TYPE_NORMAL
- en: The turtle has moved forward 50 pixels. A *pixel* is a single point on the screen—the
    smallest element that can be represented. Everything you see on your computer
    monitor is made up of pixels, which are tiny, square dots. If you could zoom in
    on the canvas and the line drawn by the turtle, you would be able to see that
    the arrow representing the turtle’s path is just a bunch of pixels. This is the
    basis for simple computer graphics.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-3: Pixels are dots!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll tell the turtle to turn 90 degrees to the left with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you haven’t learned about *degrees* yet, imagine you’re standing in the
    center of a circle:'
  prefs: []
  type: TYPE_NORMAL
- en: The direction you’re facing is 0 degrees.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you hold out your left arm, that’s 90 degrees left.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you hold out your right arm, that’s 90 degrees right.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see this 90-degree turn to the left or right in [Figure 4-4](ch04.xhtml#ch04fig04).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-4: 90 degrees left and right*'
  prefs: []
  type: TYPE_NORMAL
- en: If you continue around the circle to the right from where your right arm is
    pointing, 180 degrees is directly behind you, 270 degrees is the direction your
    left arm is pointing, and 360 degrees is back where you started; degrees go from
    0 to 360\. The degrees in a full circle, when turning to the right, can be seen
    in 45-degree increments in [Figure 4-5](ch04.xhtml#ch04fig05).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-5: 45-degree increments*'
  prefs: []
  type: TYPE_NORMAL
- en: When Python’s turtle turns left, it swivels around to face the new direction
    (just as if you turned your body to face where your arm is pointing 90 degrees
    left). The t.left(90) command points the arrow up (since it started by pointing
    to the right). You can see this in [Figure 4-6](ch04.xhtml#ch04fig06).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-6: Turtle after turning left*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you call t.left(90), it’s the same as calling t.right(270) in terms of
    the direction the turtle ends up facing at the end. This is also true when calling
    t.right(90), which is the same as t.left(270). Just imagine that circle and follow
    along with the degrees.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll draw a square. Add the following code to the lines you’ve already
    entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Your turtle should have drawn a square and should now be facing in the same
    direction it started, as seen in [Figure 4-7](ch04.xhtml#ch04fig07).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-7: Turtle drawing a square*'
  prefs: []
  type: TYPE_NORMAL
- en: To erase the canvas, enter t.reset(). This clears the canvas and puts the turtle
    back at its starting position.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can also use t.clear(), which just clears the screen and leaves the turtle
    where it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can also turn our turtle right or move it backward. We can use up to lift
    the “pen” off the page (in other words, tell the turtle to stop drawing), and
    down to start drawing again. These functions are written in the same way as the
    others we’ve used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try another drawing using some of these commands. This time, we’ll have
    the turtle draw two lines. Enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: First, we clear the canvas and move the turtle back to its starting position
    with t.reset(). Next, we move the turtle backward 100 pixels with t.backward(100),
    and then use t.up() to pick up the pen and stop drawing.
  prefs: []
  type: TYPE_NORMAL
- en: Then, with the t.right(90) command, we turn the turtle right 90 degrees to point
    down, toward the bottom of the screen, and with t.forward(20), we move forward
    20 pixels. Nothing is drawn because we used the up command on the third line.
    Next, we turn the turtle left 90 degrees to face right with t.left(90), and then
    we use the down command to tell the turtle to start drawing again. Lastly, we
    draw a line forward, parallel to the first line we drew, with t.forward(100).
    The two parallel lines we’ve drawn end up looking like [Figure 4-8](ch04.xhtml#ch04fig08).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0050-01.jpg)![Image](Images/04fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-8: Turtle drawing parallel lines*'
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use Python’s turtle module. We drew some
    simple lines, using left and right turns and forward and backward commands. You
    found out how to stop the turtle from drawing by using up, and start drawing again
    with the down command. You also discovered that the turtle turns by degrees.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try drawing some of the following shapes with the turtle. The solutions can
    be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: '#1: A Rectangle'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a new canvas using the turtle module’s Turtle function and then draw
    a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '#2: A Triangle'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create another canvas and draw a triangle. Look back at the diagram of the circle
    with the degrees (“Moving the Turtle” on [page 45](ch04.xhtml#ch04lev1sec3)) to
    remind yourself which direction to turn the turtle.
  prefs: []
  type: TYPE_NORMAL
- en: '#3: A Box Without Corners'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program to draw the four lines shown in [Figure 4-9](ch04.xhtml#ch04fig09)
    (the size isn’t important, just the shape).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-9: A box without corners in Turtle*'
  prefs: []
  type: TYPE_NORMAL
- en: '#4: A Tilted Box Without Corners'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program to draw the four lines shown in [Figure 4-10](ch04.xhtml#ch04fig10)
    (similar to the previous puzzle, but the box is tilted on its side). Again, the
    size of the box isn’t important—just the shape.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/04fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-10: A tilted box without corners in Turtle*'
  prefs: []
  type: TYPE_NORMAL
