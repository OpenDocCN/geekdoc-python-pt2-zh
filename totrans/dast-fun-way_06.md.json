["```py\nTrieNode {\n    Boolean: is_entry\n    Array of TrieNodes: children\n}\n```", "```py\nTrie {\n    TrieNode: root\n}\n```", "```py\nTrieSearch(Trie: trie, String: target):\n    return TrieNodeSearch(tr.root, target, 0)\n```", "```py\nTrieNodeSearch(TrieNode: current, String: target, Integer: index):\n  ❶ IF index == length(target):\n        IF current.is_entry:\n            return current\n        ELSE:\n            return null\n\n  ❷ Character: next_letter = target[index]\n  ❸ Integer: next_index = LetterToIndex(next_letter)\n    TrieNode: next_child = current.children[next_index]\n  ❹ IF next_child == null:\n        return null\n    ELSE:\n        return TrieNodeSearch(next_child, target, index+1)\n```", "```py\nTrieInsert(Trie: tr, String: new_value):\n    TrieNodeInsert(tr.root, new_value, 0)\n```", "```py\nTrieNodeInsert(TrieNode: current, String: new_value, Integer: index):\n  ❶ IF index == length(new_value):\n        current.is_entry = True\n    ELSE:\n        Character: next_letter = new_value[index]\n        Integer: next_index = LetterToIndex(next_letter)\n        TrieNode: next_child = current.children[next_index]\n      ❷ IF next_child == null:\n            current.children[next_index] = TrieNode()\n          ❸ TrieNodeInsert(current.children[next_index], \n                           new_value, index + 1)\n        ELSE:\n          ❹ TrieNodeInsert(next_child, new_value, index + 1)\n```", "```py\nTrieDelete(Trie: tr, String: target):\n    TrieNodeDelete(tr.root, target, 0)\n```", "```py\nTrieNodeDelete(TrieNode: current, String: target, Integer: index):\n  ❶ IF index == length(target):\n        IF current.is_entry:\n            current.is_entry = False\n    ELSE:\n      ❷ Character: next_letter = target[index]\n        Integer: next_index = LetterToIndex(next_letter)\n        TrieNode: next_child = current.children[next_index]\n        IF next_child != null:\n          ❸ IF TrieNodeDelete(next_child, target, index+1):\n               current.children[next_index] = null\n\n    # Do not delete this node if it has either an entry or a child.\n  ❹ IF current.is_entry:\n        return False\n  ❺ FOR EACH ptr IN current.children:\n        IF ptr != null:\n            return False\n    return True\n```"]