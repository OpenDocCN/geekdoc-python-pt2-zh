- en: '15'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating Mr. Stick Man
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we’ll create the main character of *Mr. Stick Man Races for
    the Exit*. This will require the most complicated coding we’ve done so far, because
    Mr. Stick Man needs to run left and right, jump, stop when he runs into a platform,
    and fall when he runs off the edge of a platform. We’ll use event bindings for
    the left and right arrow keys to make the stick figure run left and right, and
    we’ll have him jump when the player presses the spacebar.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the Stick Figure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The __init__ function for our new stick figure class will look a lot like those
    in the other classes in our game. We start by giving our new class a name—StickFigureSprite—and
    assign this class to a parent class, Sprite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code looks similar to the PlatformSprite class in [Chapter 14](ch14.xhtml#ch14),
    except we’re not using any additional parameters (other than self and game). This
    is because, unlike the PlatformSprite class, only one StickFigureSprite object
    will be used in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the Stick Figure Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because we have a lot of platform objects on the screen, we pass the platform
    image as a parameter of the PlatformSprite’s __init__ function (kind of like saying,
    “Here, PlatformSprite, use this image when you draw yourself on the screen.”).
    But since there’s only one stick figure object, it doesn’t make sense to load
    the image outside the sprite and then pass it in as a parameter. The StickFigureSprite
    class will know how to load its own images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0234-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next few lines of the __init__ function load the three left images (which
    we’ll use to animate the stick figure running left) and the three right images
    (used to animate the stick figure running right). We need to load these images
    now, because we don’t want to load them every time we display the stick figure
    on the screen (doing so would take too long and make our game run slowly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code loads the three left images, which we’ll use to animate the stick
    figure running left, and the three right images, which we’ll use to animate the
    stick figure running right.
  prefs: []
  type: TYPE_NORMAL
- en: We create the object variables images_left ➊ and images _right ➋. Each contains
    a list of the PhotoImage objects we created in [Chapter 10](ch10.xhtml#ch10),
    showing the stick figure facing left and right.
  prefs: []
  type: TYPE_NORMAL
- en: We draw the first image ➌ with images_left[0] using the canvas’s create_image
    function at position (200, 470), which puts the stick figure in the middle of
    the game screen, at the bottom of the canvas. The create_image function returns
    a number that identifies the image on the canvas. We store this identifier in
    the object variable image for later use.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next part of the __init__ function sets up more variables we’ll use later
    in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The object variables x ➊ and y ➋ will store the amount we’ll be adding to the
    stick figure’s horizontal (*x1* and *x2*) or vertical (*y1* and *y2*) coordinates
    when he is moving around the screen.
  prefs: []
  type: TYPE_NORMAL
- en: As you learned in [Chapter 11](ch11.xhtml#ch11), to animate something with the
    tkinter module, we add values to the object’s x or y position to move it around
    the canvas. By setting x to –2 and y to 0, we subtract 2 from the x position later
    in the code and add nothing to the vertical position, to make the stick figure
    run to the left.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember that a negative x number means move left on the canvas, and a positive
    x number means move right. A negative y number means move up, and a positive y
    number means move down.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create the object variable current_image to store the image’s index
    position as currently displayed on the screen. Our list of left-facing images,
    images_left, contains *figure-L1.gif*, *figure-L2.gif*, and *figure-L3.gif*. Those
    are index positions 0, 1, and 2.
  prefs: []
  type: TYPE_NORMAL
- en: The current_image_add variable will contain the number we’ll add to that index
    position stored in current_image to get the next index position. For example,
    if the image at index position 0 is displayed, we add 1 to get the next image
    at index position 1, and then add 1 again to get the final image in the list at
    index position 2\. (You’ll see how we use this variable for animation in the next
    chapter.)
  prefs: []
  type: TYPE_NORMAL
- en: The jump_count variable is a counter we’ll use while the stick figure is jumping.
    The last_time variable will record the last time we changed the image when animating
    our stick figure. We store the current time using the time function of the time
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we set the coordinates object variable to an object of the Coords class,
    with no initialization parameters set (x1, y1, x2, and y2 are all 0). Unlike with
    the platforms, the stick figure’s coordinates will change, so we’ll set these
    values later.
  prefs: []
  type: TYPE_NORMAL
- en: Binding to Keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the final part of the __init__ function, the bind functions bind a key to
    something in our code that needs to be run when the key is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We bind <KeyPress-Left> to the turn_left function, <KeyPress-Right> to the turn_right
    function, and <space> to the jump function. Now we need to create those functions
    to make the stick figure move.
  prefs: []
  type: TYPE_NORMAL
- en: Turning the Stick Figure Left and Right
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The turn_left and turn_right functions ensure the stick figure is not jumping,
    and then set the value of the object variable x to move him left and right. (Our
    game doesn’t allow us to change his direction in midair.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0237-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Python calls the turn_left function when the player presses the left arrow key,
    and it passes an object with information about what the player did as a parameter.
    This object is called an *event object*, and we give it the parameter name evt.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*The event object isn’t important for our purposes, but we need to include
    it as a parameter of our functions or we’ll get an error, because Python is expecting
    it to be there. The event object contains things like the* x *and* y *positions
    of the mouse (for a mouse event), a code identifying a particular key that has
    been pressed (for keyboard events), and other information. For this game, none
    of that information is useful, so we can safely ignore it.*'
  prefs: []
  type: TYPE_NORMAL
- en: To see if the stick figure is jumping, we check the value of the y object variable.
    If the value is not 0, the stick figure is jumping. In this code, if the value
    of y is 0, we set x to –2 to run left ➊ or we set it to 2 to run right ➋. We use
    –2 and 2, because setting the value to –1 or 1 wouldn’t make the stick figure
    move across the screen fast enough.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the animation working for your stick figure, try changing this
    value to see what difference it makes.
  prefs: []
  type: TYPE_NORMAL
- en: Making the Stick Figure Jump
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The jump function is very similar to the turn_left and turn_right functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This function again takes an evt parameter (the event object), which we can
    ignore because we don’t need any more information about the event (same as before).
    If this function is called, we know the spacebar was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Because we want our stick figure to jump only if he is not already jumping,
    we check to see if y is equal to 0\. If the stick figure is not jumping, we set
    y to –4 (to move him vertically up the screen), and set jump_count to 0\. We’ll
    use jump_count to make sure the stick figure doesn’t keep jumping forever. Instead,
    we’ll let him jump for a specific count and then have him come back down again,
    as if gravity were pulling him. We’ll add this code in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0239-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What We Have So Far
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s review the definitions of the classes and functions in our game thus far,
    and where they should be in your file.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of your program, you should have your import statements, followed
    by the Game and Coords classes. The Game class will be used to create an object
    that will be the main controller for our game, and objects of the Coords class
    are used to hold the positions of things in our game (like the platforms and Mr.
    Stick Man):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you should have the within functions (which tell whether the coordinates
    of one sprite are within the same area of another sprite), the Sprite parent class
    (which is the parent class of all the sprites in our game), the PlatformSprite
    class, and the beginning of the StickFigureSprite class. We used the PlatformSprite
    class to create platform objects, which our stick figure will jump across. We
    also created one object of the StickFigureSprite class, to represent the main
    character in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, at the end of your program, you should have code that creates all
    the objects in our game so far: the game object itself and the platforms. The
    final line is where we call the mainloop function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If your code looks a bit different, or you’re having trouble getting it working,
    you can always skip ahead to the end of [Chapter 16](ch16.xhtml#ch16) for the
    full listing of the entire game.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we began working on the class for our stick figure. At the
    moment, if we created an object of this class, it wouldn’t really do much besides
    load the images it needs for animating the stick figure and set up a few object
    variables to be used later in the code. This class contains a couple of functions
    for changing the values in those object variables based on keyboard events (when
    the player presses the left or right arrow or the spacebar).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll finish our game. We’ll write the functions for the
    StickFigureSprite class to display and animate the stick figure and move him around
    the screen. We’ll also add the exit (the door) that Mr. Stick Man is trying to
    reach.
  prefs: []
  type: TYPE_NORMAL
