- en: '15'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '15'
- en: Creating Mr. Stick Man
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Mr. Stick Man
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: In this chapter, we’ll create the main character of *Mr. Stick Man Races for
    the Exit*. This will require the most complicated coding we’ve done so far, because
    Mr. Stick Man needs to run left and right, jump, stop when he runs into a platform,
    and fall when he runs off the edge of a platform. We’ll use event bindings for
    the left and right arrow keys to make the stick figure run left and right, and
    we’ll have him jump when the player presses the spacebar.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建 *Mr. Stick Man Races for the Exit* 的主角。这将是迄今为止我们编写的最复杂的代码，因为 Mr.
    Stick Man 需要向左和向右奔跑、跳跃、在碰到平台时停下，并在跑出平台边缘时下落。我们将使用事件绑定来响应左右箭头键，使 stick figure 向左和向右奔跑，当玩家按下空格键时让他跳跃。
- en: Initializing the Stick Figure
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化 Stick Figure
- en: 'The __init__ function for our new stick figure class will look a lot like those
    in the other classes in our game. We start by giving our new class a name—StickFigureSprite—and
    assign this class to a parent class, Sprite:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新 stick figure 类的`__init__`函数与游戏中其他类的函数非常相似。我们首先给新类命名——StickFigureSprite——并将此类分配给父类
    Sprite：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code looks similar to the PlatformSprite class in [Chapter 14](ch14.xhtml#ch14),
    except we’re not using any additional parameters (other than self and game). This
    is because, unlike the PlatformSprite class, only one StickFigureSprite object
    will be used in the game.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与[第14章](ch14.xhtml#ch14)中的 PlatformSprite 类很相似，除了我们没有使用任何额外的参数（除了 self 和
    game）。这是因为，与 PlatformSprite 类不同，在游戏中只会使用一个 StickFigureSprite 对象。
- en: Loading the Stick Figure Images
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载 Stick Figure 图像
- en: Because we have a lot of platform objects on the screen, we pass the platform
    image as a parameter of the PlatformSprite’s __init__ function (kind of like saying,
    “Here, PlatformSprite, use this image when you draw yourself on the screen.”).
    But since there’s only one stick figure object, it doesn’t make sense to load
    the image outside the sprite and then pass it in as a parameter. The StickFigureSprite
    class will know how to load its own images.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为屏幕上有很多平台对象，我们将平台图像作为参数传递给 PlatformSprite 的 `__init__` 函数（有点像在说：“这里，PlatformSprite，画图时用这张图像。”）。但由于只有一个
    stick figure 对象，将图像加载到 sprite 外部再作为参数传递并不合理。StickFigureSprite 类将知道如何加载它自己的图像。
- en: '![Image](Images/f0234-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0234-01.jpg)'
- en: 'The next few lines of the __init__ function load the three left images (which
    we’ll use to animate the stick figure running left) and the three right images
    (used to animate the stick figure running right). We need to load these images
    now, because we don’t want to load them every time we display the stick figure
    on the screen (doing so would take too long and make our game run slowly):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`函数的接下来几行代码加载了三张左侧图像（用于让 stick figure 向左奔跑的动画）和三张右侧图像（用于让 stick figure
    向右奔跑的动画）。我们需要现在就加载这些图像，因为我们不希望每次在屏幕上显示 stick figure 时都重新加载它们（这样会浪费时间并让游戏运行变慢）：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code loads the three left images, which we’ll use to animate the stick
    figure running left, and the three right images, which we’ll use to animate the
    stick figure running right.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码加载了三张左侧图像（我们将用它们来让 stick figure 向左奔跑），以及三张右侧图像（我们将用它们来让 stick figure 向右奔跑）。
- en: We create the object variables images_left ➊ and images _right ➋. Each contains
    a list of the PhotoImage objects we created in [Chapter 10](ch10.xhtml#ch10),
    showing the stick figure facing left and right.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了对象变量 images_left ➊ 和 images_right ➋。每个变量都包含我们在[第10章](ch10.xhtml#ch10)中创建的
    PhotoImage 对象的列表，显示了 stick figure 面朝左和右的图像。
- en: We draw the first image ➌ with images_left[0] using the canvas’s create_image
    function at position (200, 470), which puts the stick figure in the middle of
    the game screen, at the bottom of the canvas. The create_image function returns
    a number that identifies the image on the canvas. We store this identifier in
    the object variable image for later use.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `images_left[0]` 在 (200, 470) 的位置通过画布的 `create_image` 函数绘制第一张图像 ➌，这将把 stick
    figure 放置在游戏屏幕的中间，画布的底部。`create_image` 函数返回一个标识图像的编号。我们将这个标识符存储在对象变量 image 中，以便后续使用。
- en: Setting Up Variables
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置变量
- en: 'The next part of the __init__ function sets up more variables we’ll use later
    in this code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`函数的下一个部分设置了我们将在后续代码中使用的更多变量：'
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The object variables x ➊ and y ➋ will store the amount we’ll be adding to the
    stick figure’s horizontal (*x1* and *x2*) or vertical (*y1* and *y2*) coordinates
    when he is moving around the screen.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对象变量 x ➊ 和 y ➋ 将存储我们在 stick figure 移动时会增加的水平坐标（*x1* 和 *x2*）或垂直坐标（*y1* 和 *y2*）。
- en: As you learned in [Chapter 11](ch11.xhtml#ch11), to animate something with the
    tkinter module, we add values to the object’s x or y position to move it around
    the canvas. By setting x to –2 and y to 0, we subtract 2 from the x position later
    in the code and add nothing to the vertical position, to make the stick figure
    run to the left.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第11章](ch11.xhtml#ch11)中学到的，要使用tkinter模块制作动画，我们需要在对象的x或y位置上添加值来移动它在画布上。通过将x设置为-2，y设置为0，我们在代码中稍后会从x位置减去2，而垂直位置不做任何变化，这样人物就会向左移动。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*Remember that a negative x number means move left on the canvas, and a positive
    x number means move right. A negative y number means move up, and a positive y
    number means move down.*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，负的x数值意味着在画布上向左移动，正的x数值意味着向右移动；负的y数值意味着向上移动，正的y数值意味着向下移动。*'
- en: Next, we create the object variable current_image to store the image’s index
    position as currently displayed on the screen. Our list of left-facing images,
    images_left, contains *figure-L1.gif*, *figure-L2.gif*, and *figure-L3.gif*. Those
    are index positions 0, 1, and 2.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建对象变量`current_image`，用来存储当前显示在屏幕上的图像的索引位置。我们的左向图像列表`images_left`包含*figure-L1.gif*、*figure-L2.gif*和*figure-L3.gif*。它们分别是索引位置0、1和2。
- en: The current_image_add variable will contain the number we’ll add to that index
    position stored in current_image to get the next index position. For example,
    if the image at index position 0 is displayed, we add 1 to get the next image
    at index position 1, and then add 1 again to get the final image in the list at
    index position 2\. (You’ll see how we use this variable for animation in the next
    chapter.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_image_add`变量将包含我们添加到`current_image`中存储的索引位置的数值，以获得下一个索引位置。例如，如果索引位置0的图像被显示，我们加1得到下一个索引位置1的图像，再加1得到列表中的最后一张图像，即索引位置2的图像。（你将在下一章看到我们如何使用这个变量来进行动画。）'
- en: The jump_count variable is a counter we’ll use while the stick figure is jumping.
    The last_time variable will record the last time we changed the image when animating
    our stick figure. We store the current time using the time function of the time
    module.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`jump_count`变量是我们在人物跳跃时使用的计数器。`last_time`变量将记录我们在动画中更改人物图像的最后时间。我们使用时间模块的time函数来存储当前时间。'
- en: Finally, we set the coordinates object variable to an object of the Coords class,
    with no initialization parameters set (x1, y1, x2, and y2 are all 0). Unlike with
    the platforms, the stick figure’s coordinates will change, so we’ll set these
    values later.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将坐标对象变量设置为一个没有初始化参数的Coords类对象（x1、y1、x2 和 y2 都是 0）。与平台不同的是，人物的坐标会发生变化，因此我们稍后会设置这些值。
- en: Binding to Keys
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绑定按键
- en: 'In the final part of the __init__ function, the bind functions bind a key to
    something in our code that needs to be run when the key is pressed:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__init__`函数的最后部分，绑定函数将一个按键绑定到我们代码中需要在按键按下时执行的某个操作：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We bind <KeyPress-Left> to the turn_left function, <KeyPress-Right> to the turn_right
    function, and <space> to the jump function. Now we need to create those functions
    to make the stick figure move.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将<KeyPress-Left>绑定到`turn_left`函数，将<KeyPress-Right>绑定到`turn_right`函数，将<space>绑定到`jump`函数。现在我们需要创建这些函数，使人物能够移动。
- en: Turning the Stick Figure Left and Right
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转动人物向左和向右
- en: The turn_left and turn_right functions ensure the stick figure is not jumping,
    and then set the value of the object variable x to move him left and right. (Our
    game doesn’t allow us to change his direction in midair.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`turn_left`和`turn_right`函数确保人物没有在跳跃，然后设置对象变量x的值来使人物左右移动。（我们的游戏不允许人物在空中改变方向。）'
- en: '![Image](Images/f0237-01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0237-01.jpg)'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Python calls the turn_left function when the player presses the left arrow key,
    and it passes an object with information about what the player did as a parameter.
    This object is called an *event object*, and we give it the parameter name evt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家按下左箭头键时，Python会调用`turn_left`函数，并传递一个包含玩家所做操作信息的对象作为参数。这个对象叫做*事件对象*，我们将其参数命名为`evt`。
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*The event object isn’t important for our purposes, but we need to include
    it as a parameter of our functions or we’ll get an error, because Python is expecting
    it to be there. The event object contains things like the* x *and* y *positions
    of the mouse (for a mouse event), a code identifying a particular key that has
    been pressed (for keyboard events), and other information. For this game, none
    of that information is useful, so we can safely ignore it.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*事件对象对我们来说并不重要，但我们需要将它作为函数的参数，否则会出现错误，因为Python期望它在那儿。事件对象包含像* x *和* y *的鼠标位置（对于鼠标事件），一个表示按下的特定键的代码（对于键盘事件），以及其他信息。对于这个游戏，这些信息都没有用，所以我们可以安全地忽略它。*'
- en: To see if the stick figure is jumping, we check the value of the y object variable.
    If the value is not 0, the stick figure is jumping. In this code, if the value
    of y is 0, we set x to –2 to run left ➊ or we set it to 2 to run right ➋. We use
    –2 and 2, because setting the value to –1 or 1 wouldn’t make the stick figure
    move across the screen fast enough.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要判断小人是否在跳跃，我们检查y对象变量的值。如果值不为0，表示小人正在跳跃。在这段代码中，如果y的值为0，我们将x设置为-2，表示向左跑 ➊，或者将x设置为2，表示向右跑
    ➋。我们使用-2和2，是因为将值设置为-1或1不足以让小人快速穿越屏幕。
- en: Once you have the animation working for your stick figure, try changing this
    value to see what difference it makes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦小人的动画正常工作，尝试改变这个值，看看会有什么不同。
- en: Making the Stick Figure Jump
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让小人跳跃
- en: 'The jump function is very similar to the turn_left and turn_right functions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 跳跃函数和turn_left、turn_right函数非常相似：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This function again takes an evt parameter (the event object), which we can
    ignore because we don’t need any more information about the event (same as before).
    If this function is called, we know the spacebar was pressed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数再次接收一个evt参数（事件对象），我们可以忽略它，因为我们不需要有关事件的任何更多信息（和之前一样）。如果调用了这个函数，我们就知道空格键被按下了。
- en: Because we want our stick figure to jump only if he is not already jumping,
    we check to see if y is equal to 0\. If the stick figure is not jumping, we set
    y to –4 (to move him vertically up the screen), and set jump_count to 0\. We’ll
    use jump_count to make sure the stick figure doesn’t keep jumping forever. Instead,
    we’ll let him jump for a specific count and then have him come back down again,
    as if gravity were pulling him. We’ll add this code in the next chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们希望小人只有在不再跳跃的情况下才进行跳跃，我们检查y是否等于0。如果小人没有跳跃，我们将y设置为-4（让他向屏幕上方跳跃），并将jump_count设置为0。我们使用jump_count来确保小人不会永远跳跃。相反，我们让他跳跃一定次数后，再让他下落，就像重力在拉他一样。我们将在下一章添加这段代码。
- en: '![Image](Images/f0239-01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0239-01.jpg)'
- en: What We Have So Far
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 到目前为止我们做了什么
- en: Let’s review the definitions of the classes and functions in our game thus far,
    and where they should be in your file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下目前为止我们游戏中各个类和函数的定义，以及它们应该在文件中的位置。
- en: 'At the top of your program, you should have your import statements, followed
    by the Game and Coords classes. The Game class will be used to create an object
    that will be the main controller for our game, and objects of the Coords class
    are used to hold the positions of things in our game (like the platforms and Mr.
    Stick Man):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的顶部，你应该有你的导入语句，接着是Game和Coords类。Game类将用于创建一个对象，作为我们游戏的主控制器，而Coords类的对象用于保存游戏中物体的位置（比如平台和小人）：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, you should have the within functions (which tell whether the coordinates
    of one sprite are within the same area of another sprite), the Sprite parent class
    (which is the parent class of all the sprites in our game), the PlatformSprite
    class, and the beginning of the StickFigureSprite class. We used the PlatformSprite
    class to create platform objects, which our stick figure will jump across. We
    also created one object of the StickFigureSprite class, to represent the main
    character in our game:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你应该有within函数（用于判断一个精灵的坐标是否在另一个精灵的区域内），Sprite父类（这是我们游戏中所有精灵的父类），PlatformSprite类，以及StickFigureSprite类的开头。我们使用PlatformSprite类创建平台对象，让小人跳跃其上。我们还创建了一个StickFigureSprite类的对象，表示游戏中的主角：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, at the end of your program, you should have code that creates all
    the objects in our game so far: the game object itself and the platforms. The
    final line is where we call the mainloop function:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在程序的末尾，你应该有一段代码来创建游戏中到目前为止的所有对象：游戏对象本身和平台。最后一行是调用mainloop函数的地方：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If your code looks a bit different, or you’re having trouble getting it working,
    you can always skip ahead to the end of [Chapter 16](ch16.xhtml#ch16) for the
    full listing of the entire game.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码看起来有点不同，或者你在让它正常工作时遇到问题，你可以随时跳到[第16章](ch16.xhtml#ch16)的结尾，查看整个游戏的完整代码。
- en: What You Learned
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, we began working on the class for our stick figure. At the
    moment, if we created an object of this class, it wouldn’t really do much besides
    load the images it needs for animating the stick figure and set up a few object
    variables to be used later in the code. This class contains a couple of functions
    for changing the values in those object variables based on keyboard events (when
    the player presses the left or right arrow or the spacebar).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了火柴人类的工作。目前，如果我们创建了这个类的一个对象，它其实不会做太多事情，除了加载它需要的图像以便动画化火柴人，并设置一些稍后在代码中使用的对象变量。这个类包含了几个函数，用于根据键盘事件（当玩家按下左箭头、右箭头或空格键时）来改变这些对象变量的值。
- en: In the next chapter, we’ll finish our game. We’ll write the functions for the
    StickFigureSprite class to display and animate the stick figure and move him around
    the screen. We’ll also add the exit (the door) that Mr. Stick Man is trying to
    reach.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将完成我们的游戏。我们将为**StickFigureSprite**类编写函数，以显示和动画化火柴人，并将他移动到屏幕上。我们还将添加出口（门），火柴人先生正试图到达那里。
