["```py\nPython 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:30:23)\n\n[MSC v.1928 32 bit (Intel)] on win32\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n>>>\n```", "```py\nPython 3.9.2 (default, Mar 15 2021, 17:23:44)\n\n[Clang 11.0.0 (clang-1100.0.33.17)] on darwin\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n>>>\n```", "```py\nPython 3.9.2 (default, Feb 20 2021, 20:57:50)\n\n[GCC 7.5.0] on linux\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n>>>\n```", "```py\n>>> 'hello'\n\n'hello'\n\n>>> 'a bunch of words'\n\n'a bunch of words'\n```", "```py\n>>> 'don't say that'\n\n  File \"<stdin>\", line 1\n\n    'don't say that'\n\n         ^\n\nSyntaxError: invalid syntax\n```", "```py\n>>> \"don't say that\"\n\n\"don't say that\"\n```", "```py\n>>> 'hello' + 'there'\n\n'hellothere'\n```", "```py\n>>> 'hello ' + 'there'\n\n'hello there'\n```", "```py\n>>> '-' * 30\n\n'------------------------------'\n```", "```py\n>>> '' * 3\n```", "```py\n>>> 'hello'.upper()\n\n'HELLO'\n```", "```py\n>>> '   abc'.strip()\n\n'abc'\n\n>>> '   abc       '.strip()\n\n'abc'\n\n>>> 'abc'.strip()\n\n'abc'\n```", "```py\n>>> 'abc'.strip('a')\n\n'bc'\n\n>>> 'abca'.strip('a')\n\n'bc'\n\n>>> 'abca'.strip('ac')\n\n'b'\n```", "```py\n>>> 'abc'.count('a')\n\n1\n\n>>> 'abc'.count('q')\n\n0\n\n >>> 'aaabcaa'.count('a')\n\n5\n\n>>> 'aaabcaa'.count('ab')\n\n1\n```", "```py\n>>> 'ababa'.count('aba')\n\n1\n```", "```py\n>>> 'this is a string with a few words'.count(' ')\n\n7\n```", "```py\n>>> 30\n\n30\n\n>>> 7\n\n7\n\n>>> 1000000\n\n1000000\n\n>>> -9\n\n-9\n```", "```py\n>>> 8 + 10\n\n18\n\n>>> 8 - 10\n\n-2\n\n>>> 8 * 10\n\n80\n```", "```py\n>>> 8 // 2\n\n4\n\n>>> 9 // 5\n\n1\n\n>>> -9 // 5\n\n-2\n```", "```py\n>>> 8 % 2\n\n0\n```", "```py\n>>> 8 % 3\n\n2\n```", "```py\n>>> 8 / 2\n\n4.0\n\n>>> 9 / 5\n\n1.8\n\n>>> -9 / 5\n\n-1.8\n```", "```py\n>>> 12.5 * 2\n\n25.0\n```", "```py\n>>> 50 + 10 * 2\n\n70\n```", "```py\n>>> (50 + 10) * 2\n\n120\n```", "```py\n>>> (5).bit_length()\n\n3\n\n>>> (100).bit_length()\n\n7\n\n>>> (99999).bit_length()\n\n17\n```", "```py\n>>> dollars = 250\n```", "```py\n>>> dollars\n\n250\n\n>>> dollars + 10\n\n260\n\n>>> dollars\n\n250\n```", "```py\n>>> dollars = 250\n\n>>> dollars\n\n250\n\n>>> dollars = 300\n\n>>> dollars\n\n300\n```", "```py\n>>> purchase_price1 = 58\n\n>>> purchase_price2 = 9\n\n>>> purchase_price1 + purchase_price2\n\n67\n```", "```py\n>>> start = 'Monday'\n\n>>> end = 'Friday'\n\n>>> start\n\n'Monday'\n\n>>> end\n\n'Friday'\n```", "```py\n>>> start + '-' + end\n\n'Monday-Friday'\n```", "```py\n>>> dollars = 250\n```", "```py\n>>> dollars + 1\n\n251\n```", "```py\n>>> dollars\n\n250\n```", "```py\n>>> dollars = dollars + 1\n\n>>> dollars\n\n251\n\n>>> dollars = dollars + 1\n\n>>> dollars\n\n252\n```", "```py\n>>> x = 37\n\n>>> y = x + 2\n\n>>> x = 20\n```", "```py\n>>> line = 'this is a string with a few words'\n\n>>> total_words = line.count(' ') + 1\n\n>>> total_words\n\n8\n```", "```py\n>>> 'this is a string with a few words'.count(' ') + 1\n\n8\n```", "```py\n >>> input()\n\ntesting\n\n'testing'\n```", "```py\n>>> result = input()\n\ntesting\n\n>>> result\n\n'testing'\n\n>>> result.upper()\n\n'TESTING'\n```", "```py\n>>> 'abc'\n\n'abc'\n\n>>> 'abc'.upper()\n\n 'ABC'\n\n>>> 45 + 9\n\n54\n```", "```py\n>>> print('abc')\n\nabc\n\n>>> print('abc'.upper())\n\nABC\n\n>>> print(45 + 9)\n\n54\n```", "```py\n>>> print('abc', 45 + 9)\n\nabc 54\n```", "```py\n$ touch word_count.py\n\n$ open -a TextEdit word_count.py\n```", "```py\n❶ line = input()\n\n❷ total_words = line.count(' ') + 1\n\n❸ print(total_words)\n```", "```py\nthis is my first python program\n```", "```py\n>>> r = 4\n\n>>> h = 6\n```", "```py\nPI = 3.141592653589793\n```", "```py\n>>> r\n\n4\n\n>>> r * r\n\n16\n```", "```py\n>>> r ** 2\n\n16\n```", "```py\n>>> (PI * r ** 2 * h) / 3\n\n100.53096491487338\n```", "```py\n>>> r = input()\n\n4\n\n>>> h = input()\n\n6\n```", "```py\n>>> r\n\n'4'\n\n>>> h\n\n'6'\n```", "```py\n>>> (PI * r ** 2 * h) / 3\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n```", "```py\n>>> r\n\n'4'\n\n>>> h\n\n'6'\n\n>>> r = int(r)\n\n>>> h = int(h)\n\n>>> r\n\n4\n\n>>> h\n\n6\n```", "```py\n>>> (PI * r ** 2 * h) / 3\n\n100.53096491487338\n```", "```py\n>>> int('  12  ')\n\n12\n\n>>> int('12x')\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nValueError: invalid literal for int() with base 10: '12x'\n```", "```py\n>>> num = input()\n\n82\n\n>>> num = int(num)\n\n>>> num\n\n82\n```", "```py\n>>> num = int(input())\n\n82\n\n>>> num\n\n82\n```", "```py\n>>> num = 82\n\n>>> 'my number is ' + num\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nTypeError: can only concatenate str (not \"int\") to str\n\n>>> str(num)\n\n'82'\n\n>>> 'my number is ' + str(num)\n\n'my number is 82'\n```", "```py\n❶ PI = 3.141592653589793\n\n❷ radius = int(input())\n\n❸ height = int(input())\n\n❹ volume = (PI * radius ** 2 * height) / 3\n\n❺ print(volume)\n```", "```py\nxyz\n```", "```py\nTraceback (most recent call last):\n\n  File \"cone_volume.py\", line 3, in <module>\n\n    radius = int(input())\n\nValueError: invalid literal for int() with base 10: 'xyz'\n```"]