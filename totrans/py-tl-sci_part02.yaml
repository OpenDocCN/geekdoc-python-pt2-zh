- en: '**PART II'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PYTHON PRIMER**
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve never used the Python programming language before, this primer will
    get you up to speed quickly. You’ll learn the language’s basics, as well as helpful
    hints and tips for solving real-world problems on your own. If you already know
    some Python, use this primer as reference material to jog your memory when needed.
  prefs: []
  type: TYPE_NORMAL
- en: When you learn a human language in school, you begin with the alphabet and parts
    of speech like nouns, verbs, and adverbs. Next, you might learn how to diagram
    sentences using these building blocks, stringing them together to form cohesive
    thoughts.
  prefs: []
  type: TYPE_NORMAL
- en: Learning a programming language works much the same way. Just as human language
    uses grammatical rules to join parts of speech into understandable expressions,
    Python uses syntactical rules to join objects into executable programs. But this
    isn’t a linear process. Like a toddler learning to speak, a whole lot happens
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: From the start, you’ll acquire a lot of “nested” knowledge. You can’t understand
    what a variable is without understanding what an object is, and you can’t understand
    objects without understanding values, or values without data types. Therefore,
    if you browse the tables of contents in beginner programming books, you won’t
    see a consistent approach to presenting the information.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapters that follow, I’ll attempt to progress through the language logically
    so that each step builds on the one that came before. There’ll be times, however,
    when we’ll need to run functions before we define them, or touch on a concept
    before fully developing it. That’s okay. Humans learn by doing, and we’re good
    at filling in knowledge gaps using context and interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, this short introduction can’t cover all the features of Python in
    detail, but it should give you a good foundation to begin programming on your
    own. If you want a more thorough introduction to Python, I suggest reading *Python
    Crash Course, 2nd edition: A Hands-On, Project-Based Introduction to Programming*
    (No Starch Press, 2019) by Eric Matthes. Alternatively, for a more technical and
    hard-core introduction, try *Learning Python,* 5th edition (O’Reilly Media, 2013)
    by Mark Lutz. To expand your knowledge beyond the beginner books, I suggest *Beyond
    the Basic Stuff with Python: Best Practices for Writing Clean Code* (No Starch
    Press, 2021) by Al Sweigart.'
  prefs: []
  type: TYPE_NORMAL
- en: To find online tutorials, bootcamps, videos, and so on, visit *[https://wiki.python.org/moin/BeginnersGuide/Programmers/](https://wiki.python.org/moin/BeginnersGuide/Programmers/)*.
    This Wiki page includes a section for nonprogrammers (*[https://wiki.python.org/moin/BeginnersGuide/NonProgrammers/](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers/)*)
    as well as for those with a range of programming experience and will help guide
    you to additional resources. I’ve also found the *Real Python* site (*[https://realpython.com/](https://realpython.com/)*)
    to be a great source of Python tutorials and information. It includes both free
    and paid content.
  prefs: []
  type: TYPE_NORMAL
- en: And to be a true Pythonista, you’ll want to check out the *Zen of Python* (*[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)*),
    a collection of 19 guiding principles that influence the design of the Python
    language. According to these principles, “There should be one—and preferably only
    one—obvious way to do something.” In the spirit of providing a single obvious
    “right way” of doing things and building consensus around these practices, the
    Python community releases coding conventions known as *Python Enhancement Proposals*,
    or *PEPs*.
  prefs: []
  type: TYPE_NORMAL
- en: The most important PEP is *PEP 8* (*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*),
    a set of standards for the style of your Python code. It includes naming conventions;
    rules about the use of blank lines, tabs, and spaces; maximum line lengths; the
    format of comments; and so on. The goal is to improve the readability of code
    and make it consistent across a wide spectrum of Python programs. Another useful
    style guide is PEP 257 (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*),
    which covers code documentation. We look at both these guides in the chapters
    that follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if books and online searches fail to meet your needs, the next step
    is to ask someone for help. If no coworkers or classmates can help, you can do
    this online, either for a fee or at free forums like Stack Overflow (*[https://stackoverflow.com/](https://stackoverflow.com/)*).
    But be warned: the members of these sites don’t suffer fools gladly. Be sure to
    read their “How do I ask a good question?” pages before posting. You can find
    advice and counsel for Stack Overflow at *[http://stackoverflow.com/help/how-to-ask/](http://stackoverflow.com/help/how-to-ask/)*.'
  prefs: []
  type: TYPE_NORMAL
