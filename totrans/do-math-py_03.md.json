["```py\n>>> shortlist = [1, 2, 3]\n>>> sum(shortlist)\n6\n```", "```py\n>>> len(shortlist)\n3\n```", "```py\n   '''\n   Calculating the mean\n   '''\n\n   def calculate_mean(numbers):\n➊     s = sum(numbers)\n➋     N = len(numbers)\n       # Calculate the mean\n➌     mean = s/N\n\n       return mean\n\n   if __name__ == '__main__':\n➍     donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]\n➎     mean = calculate_mean(donations)\n       N = len(donations)\n➏     print('Mean donation over the last {0} days is {1}'.format(N, mean))\n```", "```py\nMean donation over the last 12 days is 477.75\n```", "```py\n>>> samplelist = [4, 1, 3]\n>>> samplelist.sort()\n>>> samplelist\n[1, 3, 4]\n```", "```py\n   '''\n   Calculating the median\n   '''\n\n   def calculate_median(numbers):\n➊     N = len(numbers)\n➋     numbers.sort()\n\n       # Find the median\n       if N % 2 == 0:\n           # if N is even\n           m1 = N/2\n           m2 = (N/2) + 1\n           # Convert to integer, match position\n➌         m1 = int(m1) - 1\n➍         m2 = int(m2) - 1\n➎         median = (numbers[m1] + numbers[m2])/2\n       else:\n➏         m = (N+1)/2\n           # Convert to integer, match position\n           m = int(m) - 1\n           median = numbers[m]\n\n       return median\n\n   if __name__ == '__main__':\n       donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]\n\n       median = calculate_median(donations)\n       N = len(donations)\n       print('Median donation over the last {0} days is {1}'.format(N, median))\n```", "```py\n>>> 6/2\n3.0\n```", "```py\nMedian donation over the last 12 days is 500.0\n```", "```py\n>>> simplelist = [4, 2, 1, 3, 4]\n>>> from collections import Counter\n>>> c = Counter(simplelist)\n>>> c.most_common()\n[(4, 2), (1, 1), (2, 1), (3, 1)]\n```", "```py\n>>> c.most_common(1)\n[(4, 2)]\n```", "```py\n>>> c.most_common(2)\n[(4, 2), (1, 1)]\n```", "```py\n➊ >>> mode = c.most_common(1)\n   >>> mode\n   [(4, 2)]\n➋ >>> mode[0]\n   (4, 2)\n➌ >>> mode[0][0]\n   4\n```", "```py\n   '''\n   Calculating the mode\n   '''\n\n   from collections import Counter\n\n   def calculate_mode(numbers):\n➊     c = Counter(numbers)\n➋     mode = c.most_common(1)\n➌     return mode[0][0]\n\n   if __name__=='__main__':\n       scores = [7,8,9,2,10,9,9,9,9,4,5,6,1,5,6,7,8,6,1,10]\n       mode = calculate_mode(scores)\n\n       print('The mode of the list of numbers is: {0}'.format(mode))\n```", "```py\nThe mode of the list of numbers is: 9\n```", "```py\n   '''\n   Calculating the mode when the list of numbers may\n   have multiple modes\n   '''\n\n   from collections import Counter\n\n   def calculate_mode(numbers):\n\n       c = Counter(numbers)\n➊     numbers_freq = c.most_common()\n➋     max_count = numbers_freq[0][1]\n\n       modes = []\n       for num in numbers_freq:\n➌         if num[1] == max_count:\n               modes.append(num[0])\n       return modes\n\n   if __name__ == '__main__':\n       scores = [5, 5, 5, 4, 4, 4, 9, 1, 3]\n       modes = calculate_mode(scores)\n       print('The mode(s) of the list of numbers are:')\n➍     for mode in modes:\n           print(mode)\n```", "```py\nThe mode(s) of the list of numbers are:\n4\n5\n```", "```py\n   '''\n   Frequency table for a list of numbers\n   '''\n\n   from collections import Counter\n\n   def frequency_table(numbers):\n➊     table = Counter(numbers)\n       print('Number\\tFrequency')\n➋     for number in table.most_common():\n           print('{0}\\t{1}'.format(number[0], number[1]))\n\n   if __name__=='__main__':\n       scores = [7,8,9,2,10,9,9,9,9,4,5,6,1,5,6,7,8,6,1,10]\n       frequency_table(scores)\n```", "```py\nNumber  Frequency\n9       5\n6       3\n1       2\n5       2\n7       2\n8       2\n10      2\n2       1\n4       1\n```", "```py\n   '''\n   Frequency table for a list of numbers\n   Enhanced to display the table sorted by the numbers\n   '''\n\n   from collections import Counter\n\n   def frequency_table(numbers):\n       table = Counter(numbers)\n➊     numbers_freq = table.most_common()\n➋     numbers_freq.sort()\n\n       print('Number\\tFrequency')\n➌     for number in numbers_freq:\n           print('{0}\\t{1}'.format(number[0], number[1]))\n\n   if __name__ == '__main__':\n       scores = [7,8,9,2,10,9,9,9,9,4,5,6,1,5,6,7,8,6,1,10]\n       frequency_table(scores)\n```", "```py\nNumber  Frequency\n1       2\n2       1\n4       1\n5       2\n6       3\n7       2\n8       2\n9       5\n10      2\n```", "```py\n   '''\n   Find the range\n   '''\n\n   def find_range(numbers):\n\n➊     lowest = min(numbers)\n➋     highest = max(numbers)\n       # Find the range\n       r = highest-lowest\n\n➌     return lowest, highest, r\n\n   if __name__ == '__main__':\n       donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]\n➍     lowest, highest, r = find_range(donations)\n       print('Lowest: {0} Highest: {1} Range: {2}'.format(lowest, highest, r))\n```", "```py\nLowest: 60 Highest: 1200 Range: 1140\n```", "```py\n   '''\n   Find the variance and standard deviation of a list of numbers\n   '''\n\n   def calculate_mean(numbers):\n       s = sum(numbers)\n       N = len(numbers)\n       # Calculate the mean\n       mean = s/N\n\n       return mean\n\n   def find_differences(numbers):\n       # Find the mean\n       mean = calculate_mean(numbers)\n       # Find the differences from the mean\n       diff = []\n       for num in numbers:\n           diff.append(num-mean)\n\n       return diff\n\n   def calculate_variance(numbers):\n\n       # Find the list of differences\n➊     diff = find_differences(numbers)\n       # Find the squared differences\n       squared_diff = []\n➋     for d in diff:\n           squared_diff.append(d**2)\n       # Find the variance\n       sum_squared_diff = sum(squared_diff)\n➌     variance = sum_squared_diff/len(numbers)\n       return variance\n\n   if __name__ == '__main__':\n       donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]\n       variance = calculate_variance(donations)\n       print('The variance of the list of numbers is {0}'.format(variance))\n\n➍     std = variance**0.5\n       print('The standard deviation of the list of numbers is {0}'.format(std))\n```", "```py\nThe variance of the list of numbers is 141047.35416666666\nThe standard deviation of the list of numbers is 375.5627166887931\n```", "```py\n>>> simple_list1 = [1, 2, 3]\n>>> simple_list2 = [4, 5, 6]\n>>> for x, y in zip(simple_list1, simple_list2):\n        print(x, y)\n\n1 4\n2 5\n3 6\n```", "```py\n   def find_corr_x_y(x,y):\n       n = len(x)\n\n       # Find the sum of the products\n       prod = []\n➊     for xi,yi in zip(x,y):\n           prod.append(xi*yi)\n\n➋     sum_prod_x_y = sum(prod)\n➌     sum_x = sum(x)\n➍     sum_y = sum(y)\n       squared_sum_x = sum_x**2\n       squared_sum_y = sum_y**2\n\n       x_square = []\n➎     for xi in x:\n           x_square.append(xi**2)\n       # Find the sum\n       x_square_sum = sum(x_square)\n\n       y_square=[]\n        for yi in y:\n           y_square.append(yi**2)\n       # Find the sum\n       y_square_sum = sum(y_square)\n\n       # Use formula to calculate correlation\n➏     numerator = n*sum_prod_x_y - sum_x*sum_y\n       denominator_term1 = n*x_square_sum - squared_sum_x\n       denominator_term2 = n*y_square_sum - squared_sum_y\n➐     denominator = (denominator_term1*denominator_term2)**0.5\n➑     correlation = numerator/denominator\n\n       return correlation\n```", "```py\n   >>> x = [1, 2, 3, 4]\n   >>> y = [2, 4, 6, 8]\n   >>> import matplotlib.pyplot as plt\n➊ >>> plt.scatter(x, y)\n   <matplotlib.collections.PathCollection object at 0x7f351825d550>\n   >>> plt.show()\n```", "```py\n100\n60\n70\n900\n100\n200\n500\n500\n503\n600\n1000\n1200\n```", "```py\n   # Find the sum of numbers stored in a file\n   def sum_data(filename):\n       s = 0\n➊     with open(filename) as f:\n           for line in f:\n➋             s = s + float(line)\n       print('Sum of the numbers: {0}'.format(s))\n\n   if __name__ == '__main__':\n       sum_data('mydata.txt')\n```", "```py\nSum of the numbers: 5733.0\n```", "```py\n   '''\n   Calculating the mean of numbers stored in a file\n   '''\n   def read_data(filename):\n\n       numbers = []\n       with open(filename) as f:\n           for line in f:\n➊             numbers.append(float(line))\n\n       return numbers\n\n   def calculate_mean(numbers):\n       s = sum(numbers)\n       N = len(numbers)\n       mean = s/N\n\n       return mean\n\n   if __name__ == '__main__':\n➋     data = read_data('mydata.txt')\n       mean = calculate_mean(data)\n       print('Mean: {0}'.format(mean))\n```", "```py\nMean: 477.75\n```", "```py\nNumber,Squared\n10,100\n9,81\n22,484\n```", "```py\n   import csv\n   import matplotlib.pyplot as plt\n\n   def scatter_plot(x, y):\n       plt.scatter(x, y)\n       plt.xlabel('Number')\n       plt.ylabel('Square')\n       plt.show()\n\n   def read_csv(filename):\n\n       numbers = []\n       squared = []\n       with open(filename) as f:\n➊         reader = csv.reader(f)\n           next(reader)\n➋         for row in reader:\n               numbers.append(int(row[0]))\n               squared.append(int(row[1]))\n           return numbers, squared\n\n   if __name__ == '__main__':\n       numbers, squared = read_csv('numbers.csv')\n       scatter_plot(numbers, squared)\n```", "```py\n   def read_csv(filename):\n\n       with open(filename) as f:\n           reader = csv.reader(f)\n           next(reader)\n\n           summer = []\n           highest_correlated = []\n➊         for row in reader:\n               summer.append(float(row[1]))\n               highest_correlated.append(float(row[2]))\n\n       return summer, highest_correlated\n```", "```py\n   import matplotlib.pyplot as plt\n   import csv\n\n   if __name__ == '__main__':\n➊     summer, highest_correlated = read_csv('correlate-summer.csv')\n       corr = find_corr_x_y(summer, highest_correlated)\n       print('Highest correlation: {0}'.format(corr))\n       scatter_plot(summer, highest_correlated)\n```", "```py\ndef create_classes(numbers, n):\n    low = min(numbers)\n    high = max(numbers)\n\n    # Width of each class\n    width = (high - low)/n\n    classes = []\n    a = low\n    b = low + width\n    classes = []\n    while a < (high-width):\n        classes.append((a, b))\n        a = b\n        b = a + width\n    # The last class may be of a size that is less than width\n    classes.append((a, high+1))\n    return classes\n```"]