["```py\n**bash ~/Downloads/Anaconda3-2020.11-Linux-x86_64.sh**\n```", "```py\ninstallation finished.\nDo you wish the installer to prepend the Anaconda3 install location to PATH \nin your /home/mark/.bashrc ? [yes|no]\n[no] >>>\n```", "```py\n**source ~/.bashrc**\n```", "```py\n**anaconda-navigator**\n```", "```py\n**print(\"This is my very first Python script!\")**\n```", "```py\n**print(\"This is my second Python message!\")**\n```", "```py\nThis is my second Python message!\n```", "```py\nThis is my very first Python script!\nThis is my second Python message!\n```", "```py\n# -*- coding: utf-8 -*-\n```", "```py\n\"\"\"\nCreated on Fri Apr 16 14:49:19 2021\n\n@author: hlliu2\n\"\"\"\n```", "```py\nprint(7*123)\n```", "```py\n    print(2)\n    print(3**2)\n    print(7//3)\n    print(7/3)\n    print(7%3)\n    print(2+2)\n    print(10*2)\n    ```", "```py\nName1 = 'University of Kentucky '\nName2 = \"Gatton College 2021\"\n```", "```py\n**print(type(Name1))**\n**print(type(Name2))**\n```", "```py\n<class 'str'>\n<class 'str'>\n```", "```py\nprint(Name1+Name2)\nprint(Name1*3)\n```", "```py\nUniversity of Kentucky Gatton College 2021\nUniversity of Kentucky University of Kentucky University of Kentucky\n```", "```py\nx = -17.8912\ny = 0.987\n```", "```py\n**print(type(x))**\n**print(type(y))**\n**print(round(x,3))**\n**print(round(y,1))**\n```", "```py\n<class 'float'>\n<class 'float'>\n-17.891\n1.0\n```", "```py\na = 7\nb = -23\nc = 0\n```", "```py\n**print(type(a))**\n**print(type(b))**\n**print(type(c))**\n**print(round(7.346,1))**\n**print(round(7.346,0))** \n```", "```py\n<class 'int'>\n<class 'int'>\n<class 'int'>\n7.3\n7.0\n```", "```py\n**print(4 > 5)**\n**print(10 >= 6)**\n```", "```py\nFalse\nTrue\n```", "```py\n**print('4 > 5')**\n**print(type(4 > 5))**\n**print(type('4 > 5'))**\n```", "```py\n4 > 5\n<class 'bool'>\n<class 'str'>\n```", "```py\n**print(int(True))**\n**print(int(False))**\n**print(float(True))**\n**print(str(False))**\n```", "```py\n1\n0\n1.0\n'False'\n```", "```py\n**print(bool(1))**\n**print(bool(-2))**\n**print(bool(0))**\n**print(bool('hello'))**\n```", "```py\nTrue\nTrue\nFalse \nTrue\n```", "```py\nprint(int(17.0))\nprint(int(\"88\")) \nprint(int(\"3.45\"))\nprint(str(17.0))\nprint(float(-4))\n```", "```py\n17\n88\nValueError: invalid literal for int() with base 10: '3.45'\n'17.0'\n-4.0\n```", "```py\n**from keyword import kwlist**\n**print(kwlist)**\n```", "```py\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break',\n'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', \n'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', \n'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n```", "```py\nx = 5\nif x > 0:\n    print('x is positive')\nelse: \n    print('x is nonpositive')\n```", "```py\nx = 5\nif x > 0:\n    print('x is positive')\nelif x == 0:\n    print('x is zero')\nelse: \n    print('x is negative')\n```", "```py\nscore = 88\nif score >= 90:\n    print('grade is A')\nelif score >= 80:\n    print('grade is B')\nelif score >= 70:\n    print('grade is C')\nelif score >= 60:\n    print('grade is D')\nelse:\n    print('grade is F')\n```", "```py\nn = 0\nwhile n < 3:\n    n = n+1 \n    print(n)\nprint('finished')\n```", "```py\n1\n2\n3\nfinished\n```", "```py\nfor n in range(3):\n    n = n + 1 \n    print(n)\nprint('finished')\n```", "```py\nfor letter in [\"A\", \"B\", \"C\"]:\n    for num in (1, 2):\n        print(f\"this is {`letter`}{`num`}\")\n```", "```py\nthis is A1\nthis is A2\nthis is B1\nthis is B2\nthis is C1\nthis is C2\n```", "```py\nfor n in (1, 2, 3):\n    if n == 2:\n        continue\n  1 print(n)\nprint('finished')\n```", "```py\n1\n3\nfinished\n```", "```py\nfor n in (1, 2, 3):\n    if n == 2:\n        break\n    print(n)\n1 print('finished')\n```", "```py\n1\nfinished\n```", "```py\nfor n in (1, 2, 3):\n    if n == 2:\n        pass\n    print(n)\nprint('finished')\n```", "```py\n1\n2\n3\nfinished\n```", "```py\nmsg = \"hello\"\nprint(msg[1])\n```", "```py\ne \n```", "```py\nprint(msg[-3])\n```", "```py\nl\n```", "```py\nmsg = \"hello\"\nprint(msg[0:3])\n```", "```py\nhel\n```", "```py\ninp = \"University of Kentucky\"\ninp1 = inp.replace(' ','+')\nprint(inp1)\n```", "```py\nUniversity+of+Kentucky\n```", "```py\ninp = \"Department of Education\"\ninp1 = \"department of education\"\nprint(inp.lower() == inp1.lower())\n```", "```py\nTrue\n```", "```py\n**email = \"John.Smith@uky.edu\"**\n**pos1 = email.find(\".\")**\n**print(pos1)**\n**pos2 = email.find(\"@\")**\n**print(pos2)**\n**last_name = email[(1+pos1):pos2]**\n**print(last_name)**\n```", "```py\n4 \n10 \nSmith\n```", "```py\nemail = \"John.Smith@uky.edu\"\npos = email.find(\"uky.edu\")\nprint(pos)\n```", "```py\n11 \n```", "```py\n**msg = \"Please think of an integer\"**\n**words = msg.split()**\n**print(words)**\n```", "```py\n['Please', 'think', 'of', 'an', 'integer']\n```", "```py\nemail = \"John.Smith@uky.edu\"\n(name, domain) = email.split('@')\n(first, last) = name.split('.')\nprint(f\"last name is {last}\")\n```", "```py\nlast name is Smith\n```", "```py\nmylink = ('&')\nstrlist = ['University', 'of', 'Kentucky']\njoined_string = mylink.join(strlist)\nprint(joined_string)\n```", "```py\nUniversity&of&Kentucky\n```", "```py\nlst = [1, \"a\", \"hello\"]\n```", "```py\nlst1 = []\n```", "```py\nlst2 = list()\n```", "```py\nlst = [1, \"a\", \"hello\"]\nprint(lst[2])\n```", "```py\nhello\n```", "```py\nfor x in range(len(lst)):\n    print(lst[x])\n```", "```py\n1\na\nhello\n```", "```py\nllst = [[1,2,3,5],\n          [2,2,6,8],\n          [2,3,5,9],\n          [3,5,4,7],\n          [1,3,5,0]]\nprint('the value of llst[1][2] is ', llst[1][2])\nprint('the value of llst[3][2] is ', llst[3][2])\nprint('the value of llst[1][3] is ', llst[1][3])\n```", "```py\nthe value of llst[1][2] is  6\nthe value of llst[3][2] is  4\nthe value of llst[1][3] is  8\n```", "```py\n**lst = [1, \"a\", \"hello\"]**\n**print(lst + lst)**\n**print(lst * 3)**\n```", "```py\n[1, \"a\", \"hello\", 1, \"a\", \"hello\"]\n[1, \"a\", \"hello\", 1, \"a\", \"hello\", 1, \"a\", \"hello\"]\n```", "```py\nnames = ['Adam','Kate','Peter']\n```", "```py\nfor x, name in enumerate(names):\n    print(x, name)\n```", "```py\n0 Adam\n1 Kate\n2 Peter\n```", "```py\nnames = ['Adam','Kate','Peter']\nfor x, name in enumerate(names, start=1): \n    print(x, name)\n```", "```py\n1 Adam\n2 Kate\n3 Peter\n```", "```py\nlst = [1, \"a\", \"hello\"]\n1 lst.append(2) \nprint(lst)\n```", "```py\n[1, \"a\", \"hello\", 2]\n```", "```py\nlst.append(2**, 3)** \n```", "```py\nTypeError: append() takes exactly one argument (2 given)\n```", "```py\nlst.append([2, 3]) \n```", "```py\n[1, \"a\", \"hello\", [2, 3]]\n```", "```py\nlst + [2, 3] \n```", "```py\n[1, a, \"hello\", 2, 3]\n```", "```py\nlst = [1, \"a\", \"hello\", 2]\nlst.remove(\"a\") \nprint(lst)\n```", "```py\n[1, \"hello\", 2]\n```", "```py\nlst = [1, \"a\", \"hello\", 2]\nprint(lst.index(\"a\"))\n```", "```py\n1\n```", "```py\nlst = [1, \"a\", \"hello\", 2, 1]\nprint(lst.count(1)) \nprint(lst.count(\"a\")) \n```", "```py\n2\n1\n```", "```py\nTypeError: '<' not supported between instances of 'str' and 'int'\n```", "```py\nlst = [5, 47, 12, 9, 4, -1]\nlst.sort()\nprint(lst)\nlst.sort(reverse=True)\nprint(lst)\n```", "```py\n[-1, 4, 5, 9, 12, 47]\n[47, 12, 9, 5, 4, -1]\n```", "```py\nLst = ['a', 'hello', 'ba', 'ahello', '2', '-1']\nlst.sort()\nprint(lst)\n```", "```py\n['-1', '2', 'a', 'ahello', 'ba', 'hello']\n```", "```py\nlst = [5, 47, 12, 9, 4, -1]\nprint(\"the range of the numbers is\", max(lst)-min(lst))\nprint(\"the mean of the numbers is\", sum(lst)/len(lst))\n```", "```py\nthe range of the numbers is 48\nthe mean of the numbers is 12.666666666666666\n```", "```py\nmsg = \"hello\"\nletters = list(msg)\nprint(letters)\n```", "```py\n['h', 'e', 'l', 'l', 'o']\n```", "```py\nscores = {'blue':10, 'white':12}\n```", "```py\nDict1 = dict()\nDict2 = {}\n```", "```py\nDict3 = {}\nDict3['yellow'] = 6\nprint(Dict3)\n```", "```py\nprint(scores['blue'])\nprint(scores['white']) \n```", "```py\n10\n12 \n```", "```py\nscores = {'blue':10, 'white':12}\nprint(scores['blue'])\nprint(scores['white'])\nprint(scores.get('yellow'))\nprint(scores.get('yellow',0))\n```", "```py\n10\n12\nNone\n0\n```", "```py\nscores = {'blue':10, 'white':12}\nteams = list(scores.keys())\nprint(teams) \n```", "```py\n['blue', 'white']\n```", "```py\npoints = list(scores.values())\nprint(points)\n```", "```py\n[10, 12]\n```", "```py\nprint(list(scores.items()))\n```", "```py\n[('blue', 10), ('white', 12)]\n```", "```py\nscores2 = {'blue':[5, 5, 10], 'white':[5, 7, 12]}\n```", "```py\nprint(scores2['white'][1])\n```", "```py\nnews = (\n'''Python is an interpreted, high-level, and general-purpose programming\n language. Python's design philosophy emphasizes code readability with\n its notable use of significant whitespace. \n Its language constructs and object-oriented approach aim to help \n programmers write clear, logical code for small- and large-scale \n projects.\n''')\nwdcnt = dict()\nwd = news.split()\nfor w in wd:\n    wdcnt[w] = wdcnt.get(w, 0) + 1\nprint(wdcnt)   \nfor w in list(wdcnt.keys()):\n    if wdcnt[w] == max(list(wdcnt.values())):\n        print(w)\n```", "```py\n{'Python': 1, 'is': 1, 'an': 1, 'interpreted,': 1, 'high-level': 1, 'and': 3,\n 'general-purpose': 1, 'programming': 1, 'language.': 1, \"Python's\": 1,\n 'design': 1, 'philosophy': 1, 'emphasizes': 1, 'code': 2, 'readability': 1,\n 'with': 1, 'its': 1, 'notable': 1, 'use': 1, 'of': 1, 'significant': 1, \n'whitespace.': 1, 'Its': 1, 'language': 1, 'constructs': 1, \n'object-oriented': 1, 'approach': 1, 'aim': 1, 'to': 1, 'help': 1, \n'programmers': 1, 'write': 1, 'clear,': 1, 'logical': 1, 'for': 1, \n'small-': 1, 'large-scale': 1, 'projects.': 1}\nand\n```", "```py\nspanish = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\n```", "```py\n**english = {y:x for x,y in spanish.items()}**\n```", "```py\n**print(english)**\n```", "```py\n{'uno': 'one', 'dos': 'two', 'tres': 'three'}\n```", "```py\nspanishenglish = {**spanish, **English}\n```", "```py\ntpl = (1, 2, 3, 9, 0)\ntpl.append(4)\nprint(tpl)\n```", "```py\nAttributeError: 'tuple' object has no attribute 'append'\n```", "```py\ntpl = (1, 2, 3, 9, 0)\nprint(tpl[3])\nprint(tpl[1:4])\n```", "```py\n9\n(2, 3, 9)\n```", "```py\n**lt = [(1, 2), (3, 9), (0, 7), (1, 0)]**\n**lt.sort()**\n**print(lt)**\n```", "```py\n [(0, 7), (1, 0), (1, 2), (3, 9)]\n```", "```py\nfor x in range(-5, 6, 2):\n    print(x)\n```", "```py\n-5\n-3\n-1\n1\n3\n5\n```", "```py\n**color = input('What is your favorite color?')**\n**print('I see, so your favorite color is {}'.format(color))**\n```", "```py\nWhat is your favorite color? **blue**\nI see, so your favorite color is blue.\n```", "```py\nFirstName = input('What is your first name?\\n')\nLastName = input('What is your last name?\\n')\nprint(f'Nice to meet you, {FirstName } {LastName }.')\n```", "```py\ndef TheEnd():\n    print('Finished printing') \nfor i in (1, 2, 3):\n    print(i)\nTheEnd() \n```", "```py\n1\n2\n3\nFinished printing\n```", "```py\ndef msgs(name): \n    print(f\"Thank you, {name}, I appreciate your help!\") \n```", "```py\nmsgs(\"Mary\")\nmsgs(\"Bob\")\n```", "```py\nThank you, Mary, I appreciate your help!\nThank you, Bob, I appreciate your help!\n```", "```py\ndef team_sales(sales1, sales2, sales3):\n    sales = sales1 + sales2 + sales3\n    return sales\nprint(team_sales(100, 150, 120))\n```", "```py\ndef total_sales(*args):\n    total = 0\n    for arg in args:\n       total = total + arg\n    return total\n`--snip--`\n```", "```py\n`--snip--`\nprint(total_sales(200,100,100,100))\nprint(total_sales(800,500,400))\n```", "```py\n500\n1700 \n```", "```py\n**import math**\n**print(math.cos(30))**\n```", "```py\nprint(math.cos(30))\n```", "```py\nNameError: name 'math' is not defined\n```", "```py\n**import math**\n**print(cos(30))**\n```", "```py\nNameError: name 'cos' is not defined\n```", "```py\n**from math import cos, log**\n**print(cos(30)+log(100))**\n```", "```py\ndef team_sales(sales1, sales2, sales3):\n    sales = sales1 + sales2 + sales3\n    return sales\n```", "```py\nfrom create_local_module import team_sales\nprint(team_sales(100, 160, 200))\nprint(team_sales(200, 250, 270))\nprint(team_sales(150, 120, 200))\n```", "```py\n460\n720\n470\n```", "```py\nC:\\Users\\`ME`\\Anaconda3\\envs\\MYEV\\Lib\\tkinter\n```", "```py\nhelp(\"modules\")\n```", "```py\nimport `ModuleName`\n```", "```py\n**pip install gTTS** \n```", "```py\n**conda install yt** \n```", "```py\n**conda create -n chatting**\n```", "```py\n**conda activate chatting**\n```", "```py\n(chatting) C:\\>\n```", "```py\n(chatting) Macs-MacBook-Pro:~ macuser$\n```", "```py\n(chatting) mark@mark-OptiPlex-9020:~$\n```", "```py\n**conda install spyder**\n```", "```py\n**spyder**\n```", "```py\n    name1 = 'Kentucky '\n    name2 = \"Wildcats\"\n    ```", "```py\n    print(type(name1))\n    print(type(name2))\n    print(name1 + name2)\n    print(name2 + name1)\n    print(name2 + ' @ ' + name1)\n    print(3 * name2)\n    ```", "```py\n    x = 3.458\n    y = -2.35\n    ```", "```py\n    print(type(x))\n    print(type(y))\n    print(round(x, 2))\n    print(round(y, 1))\n    print(round(x, 0))\n    ```", "```py\n    a = 57\n    b = -3\n    c = 0\n    ```", "```py\n    print(type(b))\n    print(str(a))\n    print(float(c))\n    ```", "```py\n    print(type(5==9))\n    print('8<7')\n    print(5==9)\n    print(type('8<7'))\n    print(type('True'))\n    ```", "```py\n    print(int(-23.0))\n    print(int(\"56\")) \n    print(str(-23.0))\n    print(float(8))\n    ```", "```py\n    print(int(True))\n    print(float(False))\n    print(str(False))\n    ```", "```py\n    print(bool(0))\n    print(bool(-23))\n    print(bool(17.6))\n    print(bool('Python'))\n    ```", "```py\n    global\n    2pirnt\n    print2\n    _squ\n    list\n    ```", "```py\n    for letter in (\"A\", \"B\", \"C\"):\n        if letter == \"B\": \n            break\n        for num in (1, 2):  \n            print(f\"this is {letter}{num}\")\n    ```", "```py\n    for letter in (\"A\", \"B\", \"C\"):\n        if letter == \"B\": \n            continue\n        for num in (1, 2):  \n            print(f\"this is {letter}{num}\")\n    ```", "```py\n    for letter in (\"A\", \"B\", \"C\"):\n        if letter == \"B\": \n            pass\n        for num in (1, 2):  \n            print(f\"this is {letter}{num}\")\n    ```", "```py\n    for i in range(5):\n        print(i)\n    ```", "```py\n    for i in range(10, 15):\n        print(i)\n    ```", "```py\n    for i in range(10, 15, 2):\n        print(i)\n    ```", "```py\n    [1, \"a\", \"hello\", 2].remove(1)\n    [1, \"a\", \"hello\", 2].append(\"hi\")\n    ```"]