- en: '19'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '19'
- en: ASSEMBLING OUR APPLICATION
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 组装我们的应用程序
- en: '![Image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common01.jpg)'
- en: We’ve implemented all the pieces of our truss structure application, so now
    it’s time to assemble them into something we can run from the command line. The
    application we’ll write this chapter will parse an input file into the structure
    model, use the solve_structure method from the Structure class to assemble the
    solved structure, and then use the functions we implemented in the previous chapter
    to create an SVG diagram and text file describing the solution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了所有的构件，现在是时候将它们组合成一个可以从命令行运行的应用程序了。我们将在本章编写的应用程序将解析输入文件为结构模型，使用结构类中的 solve_structure
    方法来组装已解算的结构，然后利用我们在前一章实现的函数创建一个SVG图表和一个描述解决方案的文本文件。
- en: '**A General Overview**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**概述**'
- en: To get an overview of how we’ll assemble the different modules into a final
    application, let’s take a look at [Figure 19-1](ch19.xhtml#ch19fig1). This figure
    illustrates the stages that take place when our application is executed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了概览如何将不同的模块组装成最终的应用程序，让我们看看[图19-1](ch19.xhtml#ch19fig1)。这张图说明了当我们的应用程序执行时的各个阶段。
- en: '![Image](../images/19fig01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig01.jpg)'
- en: '*Figure 19-1: Structure resolution steps*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-1：结构解析步骤*'
- en: First, our application is given a text file defining the structure. This file
    is formatted according to the rules we defined in [Chapter 17](ch17.xhtml#ch17).
    In the first step, we’ll read the contents of the file into a string that’s then
    parsed into a model built from our structure classes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的应用程序会提供一个文本文件来定义结构。这个文件是按照我们在[第17章](ch17.xhtml#ch17)中定义的规则格式化的。在第一步，我们将读取文件的内容并将其解析为一个基于我们结构类构建的模型。
- en: Once the structure model is constructed, the Structure class’s solve _structure
    method does the analysis and creates a structure solution model. If you recall,
    the StructureSolution class is the top-level entity representing the solution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦结构模型构建完成，结构类的 solve_structure 方法会进行分析并创建结构解决方案模型。如果你记得的话，StructureSolution
    类是表示解决方案的顶级实体。
- en: The last step is to save the result in the form of a diagram (into an SVG file)
    and in the form of a text report (into a plaintext file). Thus, our program’s
    output will be two files.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将结果以图表形式保存（保存为SVG文件），并以文本报告的形式保存（保存为纯文本文件）。因此，我们程序的输出将是两个文件。
- en: Before we can do anything, though, we first need to set up a new directory for
    our application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，在我们做任何事情之前，我们首先需要为应用程序设置一个新的目录。
- en: '**Setup**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置**'
- en: 'First, let’s create a new package in the *apps* directory. Name it *truss_structures*.
    Your directory should look like the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在 *apps* 目录中创建一个新的包。命名为 *truss_structures*。你的目录结构应如下所示：
- en: apps
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: apps
- en: '|- aff_transf_motion'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '|- aff_transf_motion'
- en: '|   |- ...'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '|   |- ...'
- en: '|- circle_from_points'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|- circle_from_points'
- en: '|   |- ...'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '|   |- ...'
- en: '|- truss_structures'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '|- truss_structures'
- en: '|    |- __init__.py'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '|    |- __init__.py'
- en: 'If you created the package folder as a regular folder, don’t forget to include
    an empty *__init__.py* file to make it a Python package. In the package, let’s
    now add the main file. Create a new Python file named *main.py*, and in it, simply
    add the following lines:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将包文件夹创建为常规文件夹，别忘了包含一个空的 *__init__.py* 文件，以使其成为一个Python包。在该包中，现在让我们添加主文件。创建一个新的Python文件，命名为
    *main.py*，并在其中简单地添加以下几行：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Your *truss_structures* package should now contain two files:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 *truss_structures* 包现在应该包含两个文件：
- en: truss_structures
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: truss_structures
- en: '|- __init__.py'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '|- __init__.py'
- en: '|- main.py'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|- main.py'
- en: In this chapter, we won’t be using a run configuration inside our IDE; we’ll
    instead rely on a bash script that wraps the program. Let’s prepare the script
    now so we can use it throughout the chapter. At the top of the project directory,
    in the *Mechanics* folder, create a new bash file and name it *truss.sh*. Enter
    the code in [Listing 19-1](ch19.xhtml#ch19lis1).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将不使用IDE中的运行配置；我们将依赖一个包装程序的bash脚本。让我们现在准备好这个脚本，以便在整章中使用它。在项目目录的最上层，即 *Mechanics*
    文件夹中，创建一个新的bash文件并命名为 *truss.sh*。输入[清单19-1](ch19.xhtml#ch19lis1)中的代码。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 19-1: Bash wrapper script*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单19-1：Bash包装脚本*'
- en: 'We have to change the permissions on the file to make it executable. From the
    shell, run the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须更改文件的权限，以使其可执行。可以从Shell运行以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run this script from the shell,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从Shell运行这个脚本，
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: you should see ’Main’ printed out. We’re all set up; let’s start coding!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到 “Main” 被打印出来。我们已经准备好了一切，现在开始编码吧！
- en: '**Input Arguments**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**输入参数**'
- en: 'Our command line application is going to accept a few arguments: the overall
    scale of the drawing, the scale of the node displacements, the scale of the loads,
    and whether the original geometry should be drawn (see [Table 18-1](ch18.xhtml#ch18tab1)
    on [page 497](ch18.xhtml#ch18tab1) for a refresher).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的命令行应用程序将接受几个参数：绘图的总体比例、节点位移的比例、负载的比例，以及是否绘制原始几何图形（有关详细信息，请参见 [表 18-1](ch18.xhtml#ch18tab1)
    和 [第497页](ch18.xhtml#ch18tab1)）。
- en: 'We pass these arguments to our program like so:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样将这些参数传递给我们的程序：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We want to read these arguments, parse their values, and use a default value
    if the user doesn’t provide a value. We can do this using a handy tool from Python’s
    standard library: *argparse*. Argparse will also generate help messages about
    the different arguments for the user and validate the passed-in values.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望读取这些参数，解析它们的值，并在用户没有提供值时使用默认值。我们可以使用 Python 标准库中的一个实用工具：*argparse* 来实现。Argparse
    还将为用户生成关于不同参数的帮助信息，并验证传入的值。
- en: 'Create a new file in the *apps/truss_structures* package named *arguments.py*.
    Your *truss_structures* package should now look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *apps/truss_structures* 包中创建一个新文件，命名为 *arguments.py*。你的 *truss_structures*
    包现在应该是这样的：
- en: truss_structures
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: truss_structures
- en: '|- __init__.py'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '|- __init__.py'
- en: '|- arguments.py'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '|- arguments.py'
- en: '|- main.py'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '|- main.py'
- en: Enter the code in [Listing 19-2](ch19.xhtml#ch19lis2).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 [清单 19-2](ch19.xhtml#ch19lis2) 中的代码。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 19-2: Parsing the command line arguments*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 19-2：解析命令行参数*'
- en: 'In this file, we define a function named parse_arguments. This function configures
    an instance of the ArgumentParser ➊ class to identify our arguments and parse
    them. We pass the constructor a description of what our program does. This will
    be used as a help message if the user passes in the --help flag, like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们定义了一个名为 parse_arguments 的函数。这个函数配置了 ArgumentParser ➊ 类的一个实例，用于识别我们的参数并解析它们。我们将程序的描述传递给构造函数。如果用户传入
    --help 标志，则此描述会作为帮助信息显示，像这样：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This provides the user with the following description:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为用户提供以下描述：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first argument we add is --scale ➋; we give it a help message and a default
    value of 2, and we set its type to be a floating-point number.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的第一个参数是 --scale ➋；我们为它提供一个帮助信息和一个默认值 2，并将其类型设置为浮动点数。
- en: Then comes the --disp-scale argument ➌ with a default value of 500\. Don’t forget
    that the displacements are usually small compared to the size of the bars, so
    we’ll need a big scale to appreciate them. Each structure solution has a different
    order of magnitude for the displacements, so this scale is better adjusted by
    trial and error.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是 --disp-scale 参数 ➌，其默认值为 500。不要忘记，位移通常相较于杆件的大小要小，因此我们需要一个较大的比例才能更好地观察它们。每个结构解的位移量级不同，因此这个比例最好通过反复试验来调整。
- en: Next comes the --load-scale argument ➍ with a default value of 0.02\. This scale
    will shrink the loads so that they fit inside the drawing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 --load-scale 参数 ➍，其默认值为 0.02。这个比例会缩小负载，使它们适应绘图。
- en: Last comes the --no-draw-original flag ➎, which controls whether we draw the
    original structure’s geometry. If the flag isn’t present in the arguments, we’ll
    draw the original geometry but use a lighter color to keep the focus on the solution
    drawing. This will look something like [Figure 19-2](ch19.xhtml#ch19fig2).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是 --no-draw-original 标志 ➎，它控制是否绘制原始结构的几何图形。如果参数中没有这个标志，我们会绘制原始几何图形，但会使用较浅的颜色，以便将重点放在解答图形上。这看起来像是
    [图 19-2](ch19.xhtml#ch19fig2)。
- en: '![Image](../images/19fig02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig02.jpg)'
- en: '*Figure 19-2: Drawing the original geometry (in a lighter color)*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-2：绘制原始几何图形（使用较浅的颜色）*'
- en: 'The --no-draw-original flag is different than the other parameters: it’s not
    expecting an associated value; we only care whether the flag appears in the parameters
    list. We add this flag to the parser using the add_argument method with an action
    parameter. When this argument is found in the arguments list, an action is executed.
    In this case, we use the ’store_true’ action, which simply saves a True value
    in the argument if the flag is present and a False otherwise. There are a few
    actions defined in the *argsparse* package, which you can browse in the documentation.
    We’ll need only ’store_true’.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: --no-draw-original 标志与其他参数不同：它不需要关联的值；我们只关心标志是否出现在参数列表中。我们通过使用 add_argument
    方法和 action 参数将此标志添加到解析器中。当这个参数出现在参数列表中时，将执行一个动作。在这种情况下，我们使用 'store_true' 动作，它会在标志存在时将
    True 值保存在参数中，反之则为 False。*argsparse* 包中定义了几个动作，你可以在文档中查看。我们只需要 'store_true'。
- en: The last line returns the result of calling the parse_args method ➏. This method
    reads the arguments from sys.argv, which is where Python stores the arguments
    passed to a program, and parses the values following the rules we defined earlier.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行返回了调用 `parse_args` 方法 ➏ 的结果。该方法从 `sys.argv` 中读取参数，`sys.argv` 是 Python 存储传递给程序的参数的地方，并按照我们之前定义的规则解析值。
- en: The result is a dictionary-like structure with the values for the parameters.
    As we’ll see later, the names for the keys of the dictionary are the same as the
    arguments, but without the initial dashes (--) and with underscores instead of
    the middle dashes. For example, --load-scale becomes load_scale, a much more Pythonic
    name for a variable. In addition, the dash isn’t allowed for variable names in
    Python.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个类似字典的结构，包含参数的值。如我们稍后将看到的，字典的键名与命令行参数相同，但去掉了前导的破折号（--），并且使用了下划线代替中间的破折号。例如，`--load-scale`
    变成了 `load_scale`，这更符合 Python 的命名风格。此外，Python 中不允许使用破折号作为变量名。
- en: Let’s now write the code that generates the application’s output files.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写生成应用程序输出文件的代码。
- en: '**Generating the Output**'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**生成输出**'
- en: We prepared two functions in the previous chapter that generate both the SVG
    and text solution representations. We’ll use these functions in the app and write
    their results to an external file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章准备了两个函数，分别生成 SVG 和文本的解表示。我们将在应用中使用这些函数，并将它们的结果写入外部文件。
- en: 'First, create a new file named *output.py*. Your *truss_structures* package
    should now look like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 *output.py* 的新文件。现在你的 *truss_structures* 包应该如下所示：
- en: truss_structures
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: truss_structures
- en: '|- __init__.py'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '|- __init__.py'
- en: '|- arguments.py'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|- arguments.py'
- en: '|- main.py'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '|- main.py'
- en: '|- output.py'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|- output.py'
- en: In *output.py*, enter the code in [Listing 19-3](ch19.xhtml#ch19lis3).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *output.py* 中，输入 [示例 19-3](ch19.xhtml#ch19lis3) 中的代码。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 19-3: Handling the structure output*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 19-3：处理结构输出*'
- en: 'We define three functions: one for saving the solution into an SVG image file
    (save_solution_to_svg), another one that saves the solution in a text file (save_solution_to_text),
    and a third function that creates a new file and saves it in the current working
    directory (__write_to_file).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了三个函数：一个用于将解保存为 SVG 图像文件（`save_solution_to_svg`），另一个将解保存为文本文件（`save_solution_to_text`），还有一个用于创建新文件并将其保存在当前工作目录中的函数（`__write_to_file`）。
- en: The save_solution_to_svg function calls the structure_solution_to_svg function
    from the previous chapter ➊ and passes the generated SVG string to the __write_to_file
    function. Note that we pass the command line argument’s dictionary to this function;
    these are the settings we use to generate the SVG vector image. For this to work,
    we have to make sure the command line arguments are parsed using the same name
    as the settings expected by structure_solution_to_svg. After the SVG diagram is
    created, we use __write_to_file to create a file named *result.svg* in the program’s
    working directory.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_solution_to_svg` 函数调用了上一章的 `structure_solution_to_svg` 函数 ➊，并将生成的 SVG
    字符串传递给 `__write_to_file` 函数。请注意，我们将命令行参数的字典传递给此函数；这些参数是我们用来生成 SVG 矢量图像的设置。为了使其正常工作，我们必须确保命令行参数使用与
    `structure_solution_to_svg` 预期的设置相同的名称进行解析。SVG 图表创建后，我们使用 `__write_to_file` 在程序的工作目录中创建一个名为
    *result.svg* 的文件。'
- en: 'The save_solution_to_text function is similar to save_solution_to_svg: it produces
    the text result using the structure_solution_to_string function ➋ and then writes
    the results to a *result.txt* file.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_solution_to_text` 函数类似于 `save_solution_to_svg`：它使用 `structure_solution_to_string`
    函数 ➋ 生成文本结果，然后将结果写入 *result.txt* 文件。'
- en: In __write_to_file, the first thing we do is figure out the file path by joining
    the current working directory with the filename (which should already include
    the extension). We then store the file path in the file_path variable ➌. Lastly,
    we use the with block to open the file in write mode (’w’), which creates the
    file if it doesn’t exist, and then we write the passed-in content string to the
    file ➍.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `__write_to_file` 中，我们首先通过将当前工作目录与文件名（文件名应已包括扩展名）连接来确定文件路径。然后，我们将文件路径存储在 `file_path`
    变量 ➌ 中。最后，我们使用 `with` 块以写入模式（'w'）打开文件，这将创建文件（如果文件不存在），然后将传入的内容字符串写入文件 ➍。
- en: We’re almost done! We just need to stitch the input, resolution, and output
    together.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们差不多完成了！接下来我们只需要将输入、解析和输出连接起来。
- en: '**The Main Script**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**主脚本**'
- en: Let’s head back to the *main.py* file. Open it and enter the code in [Listing
    19-4](ch19.xhtml#ch19lis4) (you can delete the print(’Main’) line we wrote earlier).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到*main.py*文件。打开它并输入[列表19-4](ch19.xhtml#ch19lis4)中的代码（你可以删除我们之前写的print(’Main’)这一行）。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 19-4: Main script*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表19-4：主脚本*'
- en: In the “if name is main” block, we parse the arguments passed to the script
    from the command line. To do this, we use our parse_arguments function ➊, which
    we import from the *arguments.py* module. If this parsing fails, because a required
    flag was left out or something similar, the execution halts, and a helpful message
    is sent to the user.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在“if name is main”块中，我们解析从命令行传递给脚本的参数。为此，我们使用从*arguments.py*模块导入的parse_arguments函数
    ➊。如果解析失败，因为缺少了必需的标志或类似的原因，执行会停止，并向用户发送一条有用的提示信息。
- en: Once the arguments are parsed, we read all of the lines passed to the program
    via the standard input and save them in the lines variable ➋.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦解析了参数，我们就读取通过标准输入传递给程序的所有行，并将它们保存在lines变量中 ➋。
- en: Next, we parse those passed-in lines to create the structure model using the
    parse_structure_from_lines function ➌ we developed in [Chapter 17](ch17.xhtml#ch17).
    Once we have the structure model, we call its solve_structure method to compute
    the solution ➍.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们解析传入的行，使用我们在[第17章](ch17.xhtml#ch17)中开发的parse_structure_from_lines函数创建结构模型
    ➌。一旦我们得到结构模型，就调用它的solve_structure方法来计算解决方案 ➍。
- en: 'Then, we call the two functions we wrote in the previous section to produce
    the output files: save_solution_to_svg and save_solution_to_text.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用前一节中编写的两个函数来生成输出文件：save_solution_to_svg 和 save_solution_to_text。
- en: Lastly, we calculate the time the program took to run to have it as a reference
    and compare how long it takes to solve structures of different sizes. We stored
    the time in the start_time variable before we started to parse and compute the
    structure. We also stored the time in end_time just after generating the output
    files. Subtracting start_time from end_time yields the elapsed seconds, the amount
    of time our app took to produce the results. We print this resulting time in seconds
    before the application execution finishes ➎.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们计算程序运行所花费的时间，作为参考，并比较解决不同大小结构所需的时间。在开始解析和计算结构之前，我们将时间存储在start_time变量中。在生成输出文件后，我们将时间存储在end_time中。从end_time中减去start_time，得到经过的秒数，也就是我们的应用程序花费的时间。我们在应用程序执行完成前，打印出这个结果时间（秒）
    ➎。
- en: I’m sure you’re as excited as I am to try our new app. Let’s write a structure
    file by hand and solve it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你和我一样迫不及待地想试试我们的新应用。让我们手动编写一个结构文件并求解它。
- en: '**Trying the App**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**尝试应用**'
- en: Let’s create a structure file to try the app. [Figure 19-3](ch19.xhtml#ch19fig3)
    illustrates four common truss configurations found in bridges. From these standard
    designs, we’ll pick the Warren typology for our first test. We’ll write a file
    by hand defining a structure following this configuration of the bars in the truss.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来创建一个结构文件，试试这个应用。[图19-3](ch19.xhtml#ch19fig3)展示了桥梁中常见的四种桁架配置。我们将从这些标准设计中选择沃伦型桁架作为第一次测试。我们将手动编写一个文件，定义一个按照桁架中杆件配置的结构。
- en: '![Image](../images/19fig03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig03.jpg)'
- en: '*Figure 19-3: Truss typologies*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-3：桁架类型*'
- en: 'Create a new file named *warren.txt* inside *apps/truss_structures*. Enter
    the following structure definition:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在*apps/truss_structures*目录中创建一个名为*warren.txt*的新文件。输入以下结构定义：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Alternatively, to avoid writing all this yourself, you may copy and paste the
    contents of the file provided in the code that accompanies the book. [Figure 19-4](ch19.xhtml#ch19fig4)
    might help you visually understand how the nodes and bars are arranged in our
    Warren structure example file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，为了避免自己写这些代码，你可以复制并粘贴书中提供的代码文件内容。[图19-4](ch19.xhtml#ch19fig4)可能帮助你直观地理解沃伦结构示例文件中节点和杆件的排列方式。
- en: '![Image](../images/19fig04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig04.jpg)'
- en: '*Figure 19-4: Warren truss structure to test our app*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-4：沃伦桁架结构来测试我们的应用*'
- en: 'Now it’s time to solve this structure and see the beautiful results our app
    produces. From the shell, run the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候求解这个结构，并查看我们的应用程序产生的美丽结果了。从终端运行以下命令：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This should print to the shell:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会输出到终端：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the previous command, we execute the bash script that wraps our code and
    passes it two arguments: a global drawing scale of 1.25 and a displacement scale
    of 250\. The other arguments will use their default values, which if you recall
    are a load scale of 0.02 and False for the --no-draw-original flag.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个命令中，我们执行了一个封装了我们代码的bash脚本，并传递了两个参数：一个1.25的全局绘图比例和250的位移比例。其他参数将使用默认值，回忆一下，它们分别是0.02的载荷比例和--no-draw-original标志的值为False。
- en: 'Two new files should have appeared in your project, at the same level as the
    *truss.sh* bash file: *result.svg* and *result.txt*. If you open the second, the
    textual representation of the solution, you’ll see something like [Listing 19-5](ch19.xhtml#ch19lis5).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 两个新文件应该已经出现在你的项目中，与*truss.sh* bash文件在同一层级：*result.svg*和*result.txt*。如果你打开第二个文件——解决方案的文本表示，你会看到类似于[列表
    19-5](ch19.xhtml#ch19lis5)的内容。
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 19-5: Warren truss plaintext solution*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 19-5：沃伦桁架纯文本解决方案*'
- en: The plaintext solution report is useful for checking all the solution values.
    For instance, you can check the reactions in nodes 1 and 5 (the externally constrained
    nodes). The node with an ID of 1 (NODE 1), which is externally constrained in
    both the horizontal and vertical directions, has an approximate reaction force
    of ![Image](../images/Rvictor_caps.jpg) = ⟨–7513, 6090⟩. The displacement of this
    node is necessarily zero. The node with an ID of 5 (NODE 5), which is constrained
    only in the vertical direction, has a displacement vector of ![Image](../images/uvictorit.jpg)
    = ⟨0.055, 0.0⟩.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 纯文本解决方案报告有助于检查所有的解决方案值。例如，你可以检查节点1和节点5的反应（外部约束节点）。ID为1的节点（节点1）在水平和垂直方向上均受约束，其大约反作用力为![图片](../images/Rvictor_caps.jpg)
    = ⟨–7513, 6090⟩。该节点的位移必然为零。ID为5的节点（节点5）仅在垂直方向上受约束，其位移向量为![图片](../images/uvictorit.jpg)
    = ⟨0.055, 0.0⟩。
- en: Take a look at the section of each bar section now. You can readily identify
    the compressed and elongated bars and check their elongation, strain, and stress
    values. This report gives us all the data we need if we want to analyze the structure
    under the given loads.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看每个桁架部分。你可以轻松识别出被压缩和被拉长的桁架，检查它们的伸长、应变和应力值。如果我们想分析在给定载荷下的结构，这份报告提供了所有所需的数据。
- en: The best part is inside the *result.svg* file. Open the resulting image in your
    favorite browser. Your result should look like [Figure 19-5](ch19.xhtml#ch19fig5).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最精彩的部分在*result.svg*文件中。用你最喜欢的浏览器打开生成的图片。你的结果应该像[图 19-5](ch19.xhtml#ch19fig5)那样。
- en: '![Image](../images/19fig05.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig05.jpg)'
- en: '*Figure 19-5: Warren solution diagram*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-5：沃伦解法示意图*'
- en: As you can see on your screen, the bars are colored in red if subject to compression
    and green if subject to tension. The captions aligned to the bars indicate their
    stress. The original geometry is drawn in the background using a light-blue color,
    which gives us a better visualization of how the loads deform the structure.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在屏幕上看到的，如果桁架受压，它们会显示为红色；如果受拉，它们会显示为绿色。与桁架对齐的标签显示了它们的应力。原始几何图形以浅蓝色绘制在背景中，这使我们能够更好地可视化载荷如何使结构变形。
- en: '**NOTE**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can view SVG images in PyCharm, but if we try to open and visualize our
    diagrams inside the IDE, you’ll be surprised to see them upside down. Don’t panic:
    you haven’t gotten it wrong. It’s just that (as of the 2021.1 version) PyCharm
    doesn’t support the* transform *attribute we added to the SVG, which, if you recall
    from earlier, we require to flip the y-axis. I recommend using a browser instead.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在PyCharm中查看SVG图像，但如果我们尝试在IDE中打开并可视化我们的图表，你会惊讶地发现它们是倒过来的。别慌张：你没有弄错。只是（从2021.1版本开始）PyCharm不支持我们添加到SVG中的*transform*属性，正如你从前面记得的那样，我们需要它来翻转y轴。我建议你改用浏览器。*'
- en: Can you see the difference in the bars’ line thickness? Using line thickness
    to represent the cross section of the bars helps us identify the bars of the structure
    that can withstand a greater load. The stress labels we added to the bars allow
    us to readily inspect the stress on each bar, giving us one of the most important
    pieces of information upfront. We can gather quite a bit of information from just
    a single glance at our diagram; this is precisely the value of these sorts of
    graphical representations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到桁架线条粗细的区别吗？使用线条粗细来表示桁架的截面有助于我们识别出能够承受更大载荷的桁架。我们为桁架添加的应力标签使我们可以迅速检查每根桁架上的应力，从而提前获取最重要的信息之一。从我们的图表中，我们只需一眼就能收集到很多信息；这正是这种图形表示法的价值所在。
- en: To understand what the arguments to our program do, let’s play around with them
    and see what kind of results we can get.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解程序的参数作用，我们可以玩玩这些参数，看看能得到什么样的结果。
- en: '***Playing with the Arguments***'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***玩弄参数***'
- en: 'Let’s first check what happens if we pass the --no-draw-original flag:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先检查一下，如果我们传递--no-draw-original标志会发生什么。
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you open the *result.svg* image in your favorite browser, you should see
    the image in [Figure 19-6](ch19.xhtml#ch19fig6).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你喜欢的浏览器中打开*result.svg*图像，你应该能看到类似[Figure 19-6](ch19.xhtml#ch19fig6)的图像。
- en: '![Image](../images/19fig06.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig06.jpg)'
- en: '*Figure 19-6: Warren solution diagram without original geometry*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 19-6：沃伦解法图，没有原始几何形状*'
- en: Without the original geometry we can see the deformed structure with less clutter;
    at the same time, we cannot see how the nodes and bars are moving relative to
    their original position.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 没有原始几何形状的情况下，我们可以看到变形后的结构更加简洁；同时，我们无法看到节点和杆件相对于原始位置的运动。
- en: 'What about using a larger displacement scale? Let’s try the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，使用更大的位移比例怎么样呢？让我们试试下面的操作：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using a displacement scale of 500 exaggerates the deformations so we can see
    them clearly. The diagram should now look like [Figure 19-7](ch19.xhtml#ch19fig7).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用500的位移缩放值会夸大变形，以便我们能够清楚地看到它们。现在，图表应该像[Figure 19-7](ch19.xhtml#ch19fig7)一样。
- en: '![Image](../images/19fig07.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig07.jpg)'
- en: '*Figure 19-7: Warren solution diagram with a larger displacement scale*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 19-7：沃伦解法图，位移比例较大*'
- en: 'We haven’t used the loads diagram yet; we’ve been using the default value of
    0.02\. Let’s try to edit this value to see its effect:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有使用荷载图；我们一直在使用默认值0.02。让我们尝试编辑这个值，看看它的效果：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If we use a load scale of 0.01, half of what we’ve used so far, you can see
    that the load vectors’ lengths have shrunk, as in [Figure 19-8](ch19.xhtml#ch19fig8).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用荷载比例为0.01，也就是我们目前使用的荷载比例的一半，你可以看到荷载向量的长度缩小了，正如[Figure 19-8](ch19.xhtml#ch19fig8)所示。
- en: '![Image](../images/19fig08.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig08.jpg)'
- en: '*Figure 19-8: Warren solution diagram with a smaller load scale*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 19-8：沃伦解法图，荷载比例较小*'
- en: As you can see, the load scale is important for the correct visualization of
    the load vectors. A small value shrinks the vectors so much that there’s no space
    for their labels to be nicely placed. You can try a larger load scale, say 0.5\.
    The labels should disappear from the diagram. In this case, the vectors we draw
    are so long that their centers lie outside the drawing bounds, and therefore,
    the load caption that we place toward the start point is simply not visible.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，荷载比例对于正确的荷载向量可视化非常重要。较小的值会将向量缩小到几乎没有空间来妥善放置它们的标签。你可以尝试使用较大的荷载比例，比如0.5。标签应该会从图表中消失。在这种情况下，我们绘制的向量非常长，以至于它们的中心点位于绘图范围外，因此，我们放置在起始点附近的荷载标题根本看不见。
- en: '***Solving a Large Structure***'
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***解决大型结构***'
- en: 'In the *apps/truss_structures* directory of the code distributed with the book
    is a file, *baltimore.txt*, that defines a Baltimore truss structure with 10 spans.
    Copy this file into your project, in the same folder. Alternatively, you can create
    and write the file by hand ([Listing 19-6](ch19.xhtml#ch19lis6)):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码与书籍一起分发的*apps/truss_structures*目录中，有一个文件，*baltimore.txt*，它定义了一个有10个跨度的巴尔的摩桁架结构。将此文件复制到你的项目中，放在同一文件夹里。或者，你也可以手动创建并编写该文件（[Listing
    19-6](ch19.xhtml#ch19lis6)）：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 19-6: Baltimore truss structure definition*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 19-6：巴尔的摩桁架结构定义*'
- en: Note that, in this code, we apply the same load to every node, but we’ve left
    out some of the load lines. If you write this by hand, you should include those
    load definition lines.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这段代码中，我们对每个节点施加相同的荷载，但我们省略了一些荷载行。如果你手动编写代码，应该包括这些荷载定义行。
- en: 'Let’s pass the file defining this large structure to our program:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将定义这个大型结构的文件传递给我们的程序：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output produced by the program should look something like the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 程序生成的输出应该类似于以下内容：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Even for the Baltimore typology with 40 nodes and 77 bars, the computation time
    is a fraction of a second. If you open the *solution.svg* file, you’ll see something
    like [Figure 19-9](ch19.xhtml#ch19fig9).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是具有40个节点和77条杆件的巴尔的摩类型，计算时间也是一秒钟的一小部分。如果你打开*solution.svg*文件，你会看到类似于[Figure
    19-9](ch19.xhtml#ch19fig9)的内容。
- en: '![Image](../images/19fig09.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig09.jpg)'
- en: '*Figure 19-9: Baltimore solution diagram*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 19-9：巴尔的摩解法图*'
- en: Now that you’ve gotten this far, spend some time playing with your application.
    Try with different structures and parameters to check the results.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了这一部分，花些时间玩玩你的应用程序。尝试使用不同的结构和参数来检查结果。
- en: '**Summary**'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'In this chapter, we took all of the structural analysis modules we’ve been
    building in the previous chapters and assembled them into a command line application
    that solves truss structures. Our app reads structure files from the standard
    input and produces two result files: one is a vector diagram representing the
    solution, and the other is a plaintext report including all the relevant values.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将之前章节中构建的所有结构分析模块整合成一个命令行应用程序，用于求解桁架结构。我们的应用程序从标准输入读取结构文件，并生成两个结果文件：一个是表示解的矢量图，另一个是包含所有相关数值的纯文本报告。
- en: This is the last chapter in [Part V](part05.xhtml#part05) of the book. It’s
    been an intense couple of chapters, but I hope the result has paid off. We’ve
    made up a format for files that defines a structure, written a function to parse
    it into our model, implemented the resolution algorithm that generates the solution
    model, coded a way to export this solution into a diagram and text report, and,
    finally, assembled all of it into a final application.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书[第五部分](part05.xhtml#part05)的最后一章。这几章内容很密集，但我希望结果是值得的。我们为文件制定了一个定义结构的格式，编写了一个函数将其解析到我们的模型中，实施了解决方案算法以生成解决方案模型，编写了一种将此解决方案导出为图表和文本报告的方式，最后将这一切整合成一个最终应用程序。
- en: We chose an application that solves truss structures to exemplify the process
    of writing engineering applications, but we could have chosen any other topic—heat
    transfer, fluid dynamics, beam analysis, and so on. The process and techniques
    are the same. The knowledge you’ve acquired should empower you to write code that
    works with any engineering domain you might encounter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了一个求解桁架结构的应用来举例说明编写工程应用程序的过程，但我们本可以选择任何其他主题——如热传导、流体动力学、梁分析等。过程和技巧是相同的。你所学到的知识应该能让你编写适用于任何工程领域的代码。
- en: 'This is also the last chapter in the book. I hope you’ve enjoyed learning about
    how to build engineering applications, split them into modules, and, of course,
    test them. All that’s left is for you to start creating your own apps. As mentioned
    in the introduction of the book, the only way to become an expert is by doing:
    build many apps, learn from your mistakes, and then build some more. Good luck!'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是本书的最后一章。我希望你喜欢学习如何构建工程应用、将它们拆分成模块，并且当然也学会如何测试它们。剩下的就是开始创建你自己的应用了。正如本书介绍中所提到的，成为专家的唯一途径就是通过实践：构建很多应用，从错误中学习，然后再继续构建。祝你好运！
