["```py\npip install requests \npip install beautifulsoup4\n```", "```py\n>>> import requests\n>>> \n>>> import bs4\n>>>\n```", "```py\ndream_summary.py, part 1\nfrom collections import Counter\nimport re\nimport requests\nimport bs4\nimport nltk\nfrom nltk.corpus import stopwords\n\ndef main():\n ➊ url = 'http://www.analytictech.com/mb021/mlk.htm'\n    page = requests.get(url)\n    page.raise_for_status()\n ➋ soup = bs4.BeautifulSoup(page.text, 'html.parser')\n    p_elems = [element.text for element in soup.find_all('p')]\n\n    speech = ''.join(p_elems)\n```", "```py\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n<html>\n\n<head>\n<meta http-equiv=\"Content-Type\"\ncontent=\"text/html; charset=iso-8859-1\">\n<meta name=\"GENERATOR\" content=\"Microsoft FrontPage 4.0\">\n<title>Martin Luther King Jr.'s 1962 Speech</title>\n</head>\n--snip--\n<p>I am happy to join with you today in what will go down in\nhistory as the greatest demonstration for freedom in the history\nof our nation. </p>\n--snip--\n```", "```py\n    p_elems = soup.select('p')\n    speech = ''.join(p_elems)\n```", "```py\ndream_summary.py, part 2\n   speech = speech.replace(')mowing', 'knowing')\n   speech = re.sub('\\s+', ' ', speech) \n   speech_edit = re.sub('[^a-zA-Z]', ' ', speech)\n   speech_edit = re.sub('\\s+', ' ', speech_edit)\n\n➊ while True:\n       max_words = input(\"Enter max words per sentence for summary: \")\n       num_sents = input(\"Enter number of sentences for summary: \")\n       if max_words.isdigit() and num_sents.isdigit():\n           break\n       else:\n           print(\"\\nInput must be in whole numbers.\\n\")\n\n   speech_edit_no_stop = remove_stop_words(speech_edit)\n   word_freq = get_word_freq(speech_edit_no_stop)\n   sent_scores = score_sentences(speech, word_freq, max_words)\n\n➋ counts = Counter(sent_scores)\n   summary = counts.most_common(int(num_sents))\n   print(\"\\nSUMMARY:\")\n   for i in summary:\n       print(i[0])\n```", "```py\n[('From every mountainside, let freedom ring.', 4.625), --snip-- ]\n```", "```py\ndream_summary.py, part 3\ndef remove_stop_words(speech_edit):\n    \"\"\"Remove stop words from string and return string.\"\"\"\n    stop_words = set(stopwords.words('english'))\n    speech_edit_no_stop = ''\n    for word in nltk.word_tokenize(speech_edit):\n        if word.lower() not in stop_words:\n            speech_edit_no_stop += word + ' '\n    return speech_edit_no_stop\n```", "```py\n>>> import nltk\n>>> s = 'one One one'\n>>> fd = nltk.FreqDist(nltk.word_tokenize(s))\n>>> fd\nFreqDist({'one': 2, 'One': 1})\n>>> fd_lower = nltk.FreqDist(nltk.word_tokenize(s.lower()))\n>>> fd_lower\nFreqDist({'one': 3})\n```", "```py\ndream_summary.py, part 4 \ndef get_word_freq(speech_edit_no_stop):\n    \"\"\"Return a dictionary of word frequency in a string.\"\"\"        \n    word_freq = nltk.FreqDist(nltk.word_tokenize(speech_edit_no_stop.lower()))\n    return word_freq\n```", "```py\ndream_summary.py, part 5\ndef score_sentences(speech, word_freq, max_words):\n    \"\"\"Return dictionary of sentence scores based on word frequency.\"\"\"\n    sent_scores = dict()\n    sentences = nltk.sent_tokenize(speech)\n ➊ for sent in sentences:\n        sent_scores[sent] = 0\n        words = nltk.word_tokenize(sent.lower())\n        sent_word_count = len(words)\n     ➋ if sent_word_count <= int(max_words):\n            for word in words:\n                if word in word_freq.keys():\n                    sent_scores[sent] += word_freq[word]\n       ➌ sent_scores[sent] = sent_scores[sent] / sent_word_count\n  return sent_scores\n\nif __name__ == '__main__':\n    main()\n```", "```py\nEnter max words per sentence for summary: 14\nEnter number of sentences for summary: 15\n\nSUMMARY:\nFrom every mountainside, let freedom ring.\nLet freedom ring from Lookout Mountain in Tennessee!\nLet freedom ring from every hill and molehill in Mississippi.\nLet freedom ring from the curvaceous slopes of California!\nLet freedom ring from the snow capped Rockies of Colorado!\nBut one hundred years later the Negro is still not free.\nFrom the mighty mountains of New York, let freedom ring.\nFrom the prodigious hilltops of New Hampshire, let freedom ring.\nAnd I say to you today my friends, let freedom ring.\nI have a dream today.\nIt is a dream deeply rooted in the American dream.\nFree at last!\nThank God almighty, we're free at last!\"\nWe must not allow our creative protest to degenerate into physical violence.\nThis is the faith that I go back to the mount with.\n```", "```py\nEnter max words per sentence for summary: 1000\nEnter number of sentences for summary: 15\n\nSUMMARY:\nFrom every mountainside, let freedom ring.\nLet freedom ring from Lookout Mountain in Tennessee!\nLet freedom ring from every hill and molehill in Mississippi.\nLet freedom ring from the curvaceous slopes of California!\nLet freedom ring from the snow capped Rockies of Colorado!\nBut one hundred years later the Negro is still not free.\nFrom the mighty mountains of New York, let freedom ring.\nFrom the prodigious hilltops of New Hampshire, let freedom ring.\nAnd I say to you today my friends, let freedom ring.\nI have a dream today.\nBut not only there; let freedom ring from the Stone Mountain of Georgia!\nIt is a dream deeply rooted in the American dream.\nWith this faith we will be able to work together, pray together; to struggle\ntogether, to go to jail together, to stand up for freedom forever, knowing\nthat we will be free one day.\nFree at last!\nOne hundred years later the life of the Negro is still sadly crippled by the\nmanacles of segregation and the chains of discrimination.\n```", "```py\nbed_summary.py, part 1\n   import requests\n   import bs4\n   from nltk.tokenize import sent_tokenize\n➊ from gensim.summarization import summarize\n\n➋ url = 'https://jamesclear.com/great-speeches/make-your-bed-by-admiral\n          -william-h-mcraven'\n   page = requests.get(url)\n   page.raise_for_status()\n   soup = bs4.BeautifulSoup(page.text, 'html.parser')\n   p_elems = [element.text for element in soup.find_all('p')]\n\n   speech = ''.join(p_elems)\n```", "```py\nbed_summary.py, part 2\nprint(\"\\nSummary of Make Your Bed speech:\")\nsummary = summarize(speech, word_count=225)\nsentences = sent_tokenize(summary)\nsents = set(sentences)\nprint(' '.join(sents))\n```", "```py\nprint(summarize(speech, word_count=225))\n```", "```py\nSummary of Make Your Bed speech:\nBasic SEAL training is six months of long torturous runs in the soft sand,\nmidnight swims in the cold water off San Diego, obstacle courses, unending\ncalisthenics, days without sleep and always being cold, wet and miserable.\nBasic SEAL training is six months of long torturous runs in the soft sand,\nmidnight swims in the cold water off San Diego, obstacle courses, unending\ncalisthenics, days without sleep and always being cold, wet and miserable.\n--snip--\n```", "```py\nSummary of Make Your Bed speech:\nIf you can't do the little things right, you will never do the big things\nright.And, if by chance you have a miserable day, you will come home to a\nbed that is made — that you made — and a made bed gives you encouragement\nthat tomorrow will be better.If you want to change the world, start off\nby making your bed.During SEAL training the students are broken down into\nboat crews. It's just the way life is sometimes.If you want to change the\nworld get over being a sugar cookie and keep moving forward.Every day during\ntraining you were challenged with multiple physical events — long runs, long\nswims, obstacle courses, hours of calisthenics — something designed to test\nyour mettle. Basic SEAL training is six months of long torturous runs in the\nsoft sand, midnight swims in the cold water off San Diego, obstacle courses,\nunending calisthenics, days without sleep and always being cold, wet and\nmiserable.\n>>>\n======= RESTART: C:\\Python372\\sequel\\wordcloud\\bed_summary.py =======\n\nSummary of Make Your Bed speech:\nIt's just the way life is sometimes.If you want to change the world get over\nbeing a sugar cookie and keep moving forward.Every day during training you\nwere challenged with multiple physical events — long runs, long swims,\nobstacle courses, hours of calisthenics — something designed to test your\nmettle. If you can't do the little things right, you will never do the big\nthings right.And, if by chance you have a miserable day, you will come home to\na bed that is made — that you made — and a made bed gives you encouragement\nthat tomorrow will be better.If you want to change the world, start off by\nmaking your bed.During SEAL training the students are broken down into boat\ncrews. Basic SEAL training is six months of long torturous runs in the soft\nsand, midnight swims in the cold water off San Diego, obstacle courses,\nunending calisthenics, days without sleep and always being cold, wet and\nmiserable.\n```", "```py\npip install wordcloud\n```", "```py\nconda install -c conda-forge wordcloud\n```", "```py\npip install pillow\n```", "```py\nconda install -c anaconda pillow\n```", "```py\nwc_hound.py, part 1\n   import numpy as np\n   from PIL import Image\n   import matplotlib.pyplot as plt\n   from wordcloud import WordCloud, STOPWORDS\n\n   # Load a text file as a string.\n➊ with open('hound.txt') as infile:\n      text = infile.read()\n\n   # Load an image as a NumPy array.\n   mask = np.array(Image.open('holmes.png'))\n\n   # Get stop words as a set and add extra words.\n   stopwords = STOPWORDS\n➋ stopwords.update(['us', 'one', 'will', 'said', 'now', 'well', 'man', 'may',\n                     'little', 'say', 'must', 'way', 'long', 'yet', 'mean',\n                     'put', 'seem', 'asked', 'made', 'half', 'much',\n                     'certainly', 'might', 'came'])\n```", "```py\nUnicodeDecodeError: 'ascii' codec can't decode byte 0x93 in position 365:\nordinal not in range(128)\n```", "```py\n    with open('hound.txt', encoding='utf-8', errors='ignore') as infile:\n```", "```py\nwc_hound.py, part 2\nwc = WordCloud(max_words=500,\n               relative_scaling=0.5,\n               mask=mask,\n               background_color='white',\n               stopwords=stopwords,\n               margin=2,\n               random_state=7,\n               contour_width=2,\n               contour_color='brown',\n               colormap='copper').generate(text)\n\ncolors = wc.to_array()\n```", "```py\nwc_hound.py, part 3\nplt.figure()\nplt.title(\"Chamberlain Hunt Academy Senior Class Presents:\\n\",\n          fontsize=15, color='brown')\nplt.text(-10, 0, \"The Hound of the Baskervilles\",\n         fontsize=20, fontweight='bold', color='brown')\nplt.suptitle(\"7:00 pm May 10-12 McComb Auditorium\",\n             x=0.52, y=0.095, fontsize=15, color='brown')\nplt.imshow(colors, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n##plt.savefig('hound_wordcloud.png')\n```", "```py\nEnter max words per sentence for summary: 30\nEnter number of sentences for summary: 5\n\nSUMMARY:\nGensim is implemented in Python and Cython.\nGensim is an open-source library for unsupervised topic modeling and natural\nlanguage processing, using modern statistical machine learning.\n[12] Gensim is commercially supported by the company rare-technologies.com,\nwho also provide student mentorships and academic thesis projects for Gensim\nvia their Student Incubator programme.\nThe software has been covered in several new articles, podcasts and\ninterviews.\nGensim is designed to handle large text collections using data streaming and\nincremental online algorithms, which differentiates it from most other machine\nlearning software packages that target only in-memory processing.\n```", "```py\nchapter_elems = soup.select('div[class=\"chapter\"]')\nchapters = chapter_elems[2:]\n```", "```py\n--snip--\n\nChapter 3:\n\"Besides, besides—\" \"Why do you hesitate?” \"There is a realm in which the most\nacute and most experienced of detectives is helpless.\" \"You mean that the\nthing is supernatural?\" \"I did not positively say so.\" \"No, but you evidently\nthink it.\" \"Since the tragedy, Mr. Holmes, there have come to my ears several\nincidents which are hard to reconcile with the settled order of Nature.\" \"For\nexample?\" \"I find that before the terrible event occurred several people had\nseen a creature upon the moor which corresponds with this Baskerville demon,\nand which could not possibly be any animal known to science.\n\n--snip--\n\nChapter 6:\n\"Bear in mind, Sir Henry, one of the phrases in that queer old legend which\nDr. Mortimer has read to us, and avoid the moor in those hours of darkness\nwhen the powers of evil are exalted.\" I looked back at the platform when we\nhad left it far behind and saw the tall, austere figure of Holmes standing\nmotionless and gazing after us.\n\nChapter 7:\nI feared that some disaster might occur, for I was very fond of the old man,\nand I knew that his heart was weak.\" \"How did you know that?\" \"My friend\nMortimer told me.\" \"You think, then, that some dog pursued Sir Charles, and\nthat he died of fright in consequence?\" \"Have you any better explanation?\" \"I\nhave not come to any conclusion.\" \"Has Mr. Sherlock Holmes?\" The words took\naway my breath for an instant but a glance at the placid face and steadfast\neyes of my companion showed that no surprise was intended.\n\n--snip--\n\nChapter 14:\n\"What’s the game now?\" \"A waiting game.\" \"My word, it does not seem a very\ncheerful place,\" said the detective with a shiver, glancing round him at the\ngloomy slopes of the hill and at the huge lake of fog which lay over the\nGrimpen Mire.\n\nFar away on the path we saw Sir Henry looking back, his face white in the\nmoonlight, his hands raised in horror, glaring helplessly at the frightful\nthing which was hunting him down.\n\n--snip--\n```"]