["```py\n{\"product\": \"pizza\", \"type\": \"Chicago\", \"qty\": 1}\n```", "```py\n   import spacy\n\n   nlp = spacy.load('en')\n\n   doc = nlp(u'I want a Greek pizza.')\n\n➊ orderdict ={}\n\n➋ for token in doc:\n\n  ➌ if token.dep_ == 'dobj':\n\n       dobj = token\n\n    ➍ orderdict.update(product = dobj.lemma_)\n\n    ➎ for child in dobj.lefts:\n\n      ➏ if child.dep_ == 'amod' or child.dep_ == 'compound': \n\n           orderdict.update(ptype = child.text )\n\n      ➐ elif child.dep_ == 'det': \n\n           orderdict.update(qty = 1 )\n\n      ➑ elif child.dep_ == 'nummod': \n\n           orderdict.update(qty = child.text)\n\n       break\n```", "```py\nprint(orderdict)\n```", "```py\n{'product': 'pizza', 'ptype': 'Greek', 'qty': 1}\n```", "```py\nI want two Greek pizzas.\n```", "```py\n{'product': 'pizza', 'ptype': 'Greek', 'qty': two}\n```", "```py\n➊ def word2int(numword):\n\n     num = 0\n\n  ➋ try:\n\n    ➌ num = int(numword)\n\n    ➍ return num\n\n     except ValueError:\n\n    ➎ pass\n\n  ➏ words = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",\n\n     \"eight\",\"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \n\n     \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n\n  ➐ for idx, word in enumerate(words):\n\n        ➑ if word in numword:\n\n             num = idx \n\n  ➒ return num\n```", "```py\n      elif child.dep_ == 'nummod': \n\n        orderdict.update(qty = child.text)\n```", "```py\n      elif child.dep_ == 'nummod': \n\n        orderdict.update(qty = word2int(child.text))\n```", "```py\nI want two Greek pizzas.\n```", "```py\n{'product': 'pizza', 'ptype': 'Greek', 'qty': 2}\n```", "```py\n$ mysql -uroot -p\n\nEnter password: ******\n\nmysql>\n```", "```py\nALTER USER 'root'@'localhost' IDENTIFIED BY 'Your-pswd';\n```", "```py\nmysql> CREATE DATABASE mybot;\n\nQuery OK, 1 row affected (0.03 sec)\n```", "```py\nmysql> USE mybot;\n\nDatabase changed\n```", "```py\nCREATE TABLE orders (\n\n  id INT NOT NULL AUTO_INCREMENT,\n\n  product VARCHAR(30),\n\n  ptype VARCHAR(30),\n\n  qty INT,\n\n  PRIMARY KEY (id)\n\n);\n```", "```py\npip install mysql-connector-python\n```", "```py\nimport mysql.connector\n\ncnx = mysql.connector.connect(user='root', password='Your_pswd',\n\n                              host='127.0.0.1',\n\n                              database='mybot')\n\ncnx.close()\n```", "```py\n   import json\n\n➊ json_str = json.dumps(orderdict)\n\n   import mysql.connector\n\n   from mysql.connector import errorcode\n\n   try:\n\n  ➋ cnx = mysql.connector.connect(user='root', password='Your_pswd',\n\n                                   host='127.0.0.1',\n\n                                   database='mybot')\n\n  ➌ query = (\"\"\"INSERT INTO orders (product, ptype, qty)\n\n     SELECT product, ptype, qty FROM\n\n         JSON_TABLE(\n\n        ➍ %s,\n\n           \"$\" COLUMNS(\n\n             qty    INT PATH '$.qty', \n\n             product   VARCHAR(30) PATH \"$.product\",\n\n             ptype     VARCHAR(30) PATH \"$.ptype\"\n\n           )\n\n         ) AS jt1\"\"\")\n\n  ➎ cursor = cnx.cursor()\n\n  ➏ cursor.execute(query, ➐(json_str,))\n\n  ➑ cnx.commit()\n\n➒ except mysql.connector.Error as err:\n\n     print(\"Error-Code:\", err.errno)\n\n     print(\"Error-Message: {}\".format(err.msg))\n\n   finally:\n\n     cursor.close()\n\n     cnx.close()\n```", "```py\nmysql> SELECT * FROM orders;\n\nID   PRODUCT     PTYPE    QTY\n\n---- ----------- -------- ---\n\n1    pizza       Greek    2\n```", "```py\nI want two pizzas.\n```", "```py\n  query = (\"\"\"INSERT INTO orders (product, ptype, qty)\n\n  SELECT product, ptype, qty FROM\n\n      JSON_TABLE(\n\n        %s,\n\n        \"$\" \n\n        COLUMNS(\n\n             qty    INT PATH '$.qty' ➊ERROR ON EMPTY, \n\n             product   VARCHAR(30) PATH \"$.product\" ➊ERROR ON EMPTY,\n\n             ptype     VARCHAR(30) PATH \"$.ptype\" ➊ERROR ON EMPTY\n\n        )\n\n      ) AS jt1\"\"\");\n```", "```py\nError-Code: 3665\n\nError-Message: Missing value for JSON_TABLE column 'ptype'\n```", "```py\nWhat type of pizza do you want?\n```", "```py\nI want Greek ones.\n```"]