["```py\nfrom random import choices,seed\nnumberofrolls=1800\nseed(9)\ndice1=choices([1,2,3,4,5,6], k=numberofrolls)\ndice2=choices([1,2,3,4,5,6], k=numberofrolls)\n```", "```py\nprint(dice1[0:10])\n```", "```py\n[3, 3, 1, 6, 1, 4, 6, 1, 4, 4]\n```", "```py\ndicesum=[dice1[n]+dice2[n] for n in range(numberofrolls)]\n```", "```py\nfrom matplotlib import pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(figsize =(10, 7))\nax.hist(dicesum,bins=[2,3,4,5,6,7,8,9,10,11,12,13],align='left')\nplt.show()\n```", "```py\ndef getcenter(allpoints):\n    center=np.mean(allpoints)\n    stdev=np.sqrt(np.cov(allpoints))\n    return(center,stdev)\n\nprint(getcenter(dicesum))\n```", "```py\n(6.9511111111111115, 2.468219092930105)\n```", "```py\nfig, ax = plt.subplots(figsize =(10, 7))\nax.hist(dicesum,bins=range(2,14),align='left')\nimport scipy.stats as stats\nimport math\nmu=7\nsigma=2.5\nx = np.linspace(mu - 2*sigma, mu + 2*sigma, 100)*1\nplt.plot(x, stats.norm.pdf(x, mu, sigma)*numberofrolls,linewidth=5)\nplt.show()\n```", "```py\nstats.norm.pdf(2, mu, sigma)*numberofrolls\n# output: 38.8734958894954\n\nstats.norm.pdf(7, mu, sigma)*numberofrolls\n# output: 287.23844188903155\n\nstats.norm.pdf(12, mu, sigma)*numberofrolls\n# output: 38.8734958894954\n```", "```py\nseed(913)\ndice1=choices([4,5,6,7,8,9,10,11,12,13,14,15], k=numberofrolls)\ndice2=choices([4,5,6,7,8,9,10,11,12,13,14,15], k=numberofrolls)\ndicesum12=[dice1[n]+dice2[n] for n in range(numberofrolls)]\nfig, ax = plt.subplots(figsize =(10, 7))\nax.hist(dicesum12,bins=range(8,32),align='left')\nmu=np.mean(dicesum12)\nsigma=np.std(dicesum12)\nx = np.linspace(mu - 2*sigma, mu + 2*sigma, 100)*1\nplt.plot(x, stats.norm.pdf(x, mu, sigma)*numberofrolls,linewidth=5)\nplt.show()\n```", "```py\ndicesumboth=dicesum+dicesum12\nfig, ax = plt.subplots(figsize =(10, 7))\nax.hist(dicesumboth,bins=range(2,32),align='left')\nimport scipy.stats as stats\nimport math\nmu=np.mean(dicesum12)\nsigma=np.std(dicesum12)\nx = np.linspace(mu - 2*sigma, mu + 2*sigma, 100)*1\nplt.plot(x, stats.norm.pdf(x, mu, sigma)*numberofrolls,linewidth=5)\nmu=np.mean(dicesum)\nsigma=np.std(dicesum)\nx = np.linspace(mu - 2*sigma, mu + 2*sigma, 100)*1\nplt.plot(x, stats.norm.pdf(x, mu, sigma)*numberofrolls,linewidth=5)\nplt.show()\n```", "```py\nseed(494)\nrandomselection=choices(dicesumboth, k=1)\nprint(randomselection)\n```", "```py\nstats.norm.pdf(8, np.mean(dicesum), np.std(dicesum))*numberofrolls\n# output: 265.87855493973007\n\nstats.norm.pdf(8, np.mean(dicesum12), np.std(dicesum12))*numberofrolls\n# output: 11.2892030357587252\n```", "```py\nstats.norm.pdf(12, np.mean(dicesum), np.std(dicesum))*numberofrolls\n# results in 35.87586208537935\n\nstats.norm.pdf(12, np.mean(dicesum12), np.std(dicesum12))*numberofrolls\n# results in 51.42993240324318\n```", "```py\nfrom scipy.stats import multivariate_normal\ndef classify(allpts,allmns,allvar):\n    vars=[]\n    for n in range(len(allmns)):\n        vars.append(multivariate_normal(mean=allmns[n], cov=allvar[n]))\n    classification=[]\n    for point in allpts:\n        this_classification=-1\n        this_pdf=0\n        for n in range(len(allmns)):\n if vars[n].pdf(point)>this_pdf:\n                this_pdf=vars[n].pdf(point)\n                this_classification=n+1\n        classification.append(this_classification)\n    return classification\n```", "```py\nallpoints = [2,8,12,15,25]\nallmeans = [7, 19]\nallvar = [np.cov(dicesum),np.cov(dicesum12)]\n```", "```py\nprint(classify(allpoints,allmeans,allvar))\n```", "```py\n[1, 1, 2, 2, 2]\n```", "```py\nimport ast\nimport requests\nlink = \"https://bradfordtuckfield.com/emdata.txt\"\nf = requests.get(link)\nallpoints = ast.literal_eval(f.text)\n```", "```py\nallxs=[point[0] for point in allpoints]\nallys=[point[1] for point in allpoints]\nplt.plot(allxs, allys, 'x')\nplt.axis('equal')\nplt.show()\n```", "```py\n#initial guesses\nmean1=[-1,0]\nmean2=[0.5,-1]\nmean3=[0.5,0.5]\n\nallmeans=[mean1,mean2,mean3]\n\ncov1=[[1,0],[0,1]]\ncov2=[[1,0],[0,1]]\ncov3=[[1,0],[0,1]]\n\nallvar=[cov1,cov2,cov3]\n```", "```py\nplt.plot(allxs, allys, 'x')\nplt.plot(mean1[0],mean1[1],'r*', markersize=15)\nplt.plot(mean2[0],mean2[1],'r*', markersize=15)\nplt.plot(mean3[0],mean3[1],'r*', markersize=15)\nplt.axis('equal')\nplt.show()\n```", "```py\ndef classify(allpts,allmns,allvar):\n    vars=[]\n    for n in range(len(allmns)):\n        vars.append(multivariate_normal(mean=allmns[n], cov=allvar[n]))\n    classification=[]\n    for point in allpts:\n        this_classification=-1\n        this_pdf=0\n        for n in range(len(allmns)):\n if vars[n].pdf(point)>this_pdf:\n                this_pdf=vars[n].pdf(point)\n                this_classification=n+1\n        classification.append(this_classification)\n    return classification \n```", "```py\ntheclass=classify(allpoints,allmeans,allvar)\n```", "```py\n[1, 1, 1, 1, 3, 1, 3, 3, 1, 3]\n```", "```py\ndef makeplot(allpoints,theclass,allmeans):\n    thecolors=['black']*len(allpoints)\n    for idx in range(len(thecolors)):\n        if theclass[idx]==2:\n            thecolors[idx]='green'\n        if theclass[idx]==3:\n            thecolors[idx]='yellow'\n    allxs=[point[0] for point in allpoints]\n    allys=[point[1] for point in allpoints]\n    for i in range(len(allpoints)):\n        plt.scatter(allxs[i], allys[i],color=thecolors[i])\n    for i in range(len(allmeans)):\n        plt.plot(allmeans[i][0],allmeans[i][1],'b*', markersize=15)\n    plt.axis('equal')\n    plt.show()\n```", "```py\ndef getcenters(allpoints,theclass,k):\n    centers=[]\n    thevars=[]\n    for n in range(k):\n        pointsn=[allpoints[i] for i in range(0,len(allpoints)) if theclass[i]==(n+1)]\n        xpointsn=[points[0] for points in pointsn]\n ypointsn=[points[1] for points in pointsn]\n        xcenter=np.mean(xpointsn)\n        ycenter=np.mean(ypointsn)\n        centers.append([xcenter,ycenter])\n        thevars.append(np.cov(xpointsn,ypointsn))\n    return centers,thevars\n```", "```py\nallmeans,allvar=getcenters(allpoints,theclass,3)\n```", "```py\ntheclass=classify(allpoints,allmeans,allvar)\n```", "```py\nfor n in range(0,100):\n    theclass=classify(allpoints,allmeans,allvar)\n    allmeans,allvar=getcenters(allpoints,theclass,3)\n```", "```py\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(init=\"random\", n_clusters=3, n_init=10, max_iter=300, random_state=42)\nkmeans.fit(allpoints)\nnewclass=[label+1 for label in kmeans.labels_]\nmakeplot(allpoints,newclass,kmeans.cluster_centers_)\n```"]