- en: INTRODUCTION
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: '![image](../images/fintro-01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fintro-01.jpg)'
- en: Which approach shown in [Figure 1](ch00.xhtml#ch00fig1) would you prefer? On
    the left, you see an example of a traditional approach to teaching math, involving
    definitions, propositions, and proofs. This method requires a lot of reading and
    odd symbols. You’d never guess this had anything to do with geometric figures.
    In fact, this text explains how to find the *centroid*, or the center, of a triangle.
    But traditional approaches like this don’t tell us *why* we should be interested
    in finding the center of a triangle in the first place.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你更喜欢[图1](ch00.xhtml#ch00fig1)中展示的哪种方法？左侧是传统数学教学法的例子，包括定义、命题和证明。这种方法需要大量的阅读和难懂的符号。你可能永远也不会猜到这与几何图形有任何关系。事实上，这段文字是在解释如何找到三角形的*重心*，或者说是三角形的中心。但像这样的传统方法并没有告诉我们*为什么*我们要关注找到三角形中心的问题。
- en: '![image](../images/fxviii-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxviii-01.jpg)'
- en: '*Figure 1: Two approaches to teaching about the centroid*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1：两种关于重心的教学方法*'
- en: Next to this text, you see a picture of a dynamic sketch with a hundred or so
    rotating triangles. It’s a challenging programming project, and if you want it
    to rotate the right way (and look cool), you have to find the centroid of the
    triangle. In many situations, making cool graphics is nearly impossible without
    knowing the math behind geometry, for example. As you’ll see in this book, knowing
    a little of the math behind triangles, like the centroid, will make it easy to
    create our artworks. A student who knows math and can create cool designs is more
    likely to delve into a little geometry and put up with a few square roots or a
    trig function or two. A student who doesn’t see any outcome, and is only doing
    homework from a textbook, probably doesn’t have much motivation to learn geometry.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段文字旁边，你会看到一张动态草图，里面有大约一百个旋转的三角形。这是一个具有挑战性的编程项目，如果你想让它旋转得正确（而且看起来很酷），你就必须找到三角形的重心。在很多情况下，制作酷炫的图形几乎是不可能的，除非你了解几何背后的数学原理。正如你将在本书中看到的那样，了解一些关于三角形的数学知识，比如重心，将使我们能够轻松地创作艺术作品。一个懂得数学并能创造酷炫设计的学生，更有可能深入研究一点几何，甚至容忍一些平方根或一两个三角函数。而一个看不出任何成果，只是在做课本作业的学生，可能并没有太大动力去学习几何。
- en: In my eight years of experience as a math teacher and three years of experience
    as a computer science teacher, I’ve met many more math learners who prefer the
    visual approach to the academic one. In the process of creating something interesting,
    you come to understand that math is not just following steps to solve an equation.
    You see that exploring math with programming allows for many ways to solve interesting
    problems, with many unforeseen mistakes and opportunities for improvements along the
    way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我作为数学教师的八年经验和三年计算机科学教师的经验中，我遇到的许多数学学习者更喜欢视觉化的学习方法，而不是学术性的学习方法。在创造一些有趣的东西的过程中，你会发现数学不仅仅是按照步骤解方程。你会看到，使用编程来探索数学，提供了多种解决有趣问题的方法，并且在过程中有许多意料之外的错误和改进机会。
- en: This is the difference between school math and real math.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是学校数学和实际数学之间的区别。
- en: THE PROBLEM WITH SCHOOL MATH
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学校数学的问题
- en: What do I mean by “school math” exactly? In the US in the 1860s, school math
    was preparation for a job as a clerk, adding columns of numbers by hand. Today,
    jobs are different, and the preparation for these jobs needs to change, too.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我所说的“学校数学”到底是什么意思？在19世纪60年代的美国，学校数学是为当时做文员的工作做准备的，文员需要手工加总一列数字。今天，工作不同了，准备这些工作的方式也需要改变。
- en: People learn best by doing. This hasn’t been a daily practice in schools, though,
    which tend to favor passive learning. “Doing” in English and history classes might
    mean students write papers or give presentations, and science students perform
    experiments, but what do math students do? It used to be that all you could actively
    “do” in math class was solve equations, factor polynomials, and graph functions.
    But now that computers can do most of those calculations for us, these practices
    are no longer sufficient.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 人们通过实践学习最有效。然而，这在学校中并不是日常的做法，学校通常倾向于偏向被动学习。在英语和历史课上，“做”可能意味着学生写论文或做演讲，而科学课上学生做实验，但数学学生该做什么呢？过去，数学课上你能“做”的事情就是解方程、因式分解多项式和绘制函数图像。但现在计算机可以为我们做大部分这些计算，这些做法已经不再足够了。
- en: Simply learning how to automate solving, factoring, and graphing is not the
    final goal. Once a student has learned to automate a process, they can go further
    and deeper into a topic than was ever possible before.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 单纯地学习如何自动化求解、因式分解和绘图并不是最终目标。一旦学生学会了自动化某个过程，他们就能在任何时候深入了解某个话题，超越以往的水平。
- en: '[Figure 2](ch00.xhtml#ch00fig2) shows a typical math problem you’d find in
    a textbook, asking students to define a function, “f(x),” and evaluate it for
    a ton of values.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2](ch00.xhtml#ch00fig2) 展示了你在教科书中会遇到的典型数学问题，要求学生定义一个函数“f(x)”并对大量值进行求值。'
- en: '![image](../images/fxix-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxix-01.jpg)'
- en: '*Figure 2: A traditional approach to teaching functions*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2：传统的函数教学方法*'
- en: 'This same format goes on for 18 more questions! This kind of exercise is a
    trivial problem for a programming language like Python. We could simply define
    the function f(x) and then plug in the values by iterating over a list, like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个格式在接下来的 18 个问题中都会持续出现！对于像 Python 这样的编程语言来说，这类练习是一个微不足道的问题。我们只需要定义函数 f(x)，然后通过遍历一个列表插入值，就像这样：
- en: import math
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: import math
- en: 'def f(x):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'def f(x):'
- en: return math.sqrt(x + 3) - x + 1
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: return math.sqrt(x + 3) - x + 1
- en: '#list of values to plug in'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '#插入值的列表'
- en: 'for x in [0,1,math.sqrt(2),math.sqrt(2)-1]:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'for x in [0,1,math.sqrt(2),math.sqrt(2)-1]:'
- en: print("f({:.3f}) = {:.3f}".format(x,f(x)))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: print("f({:.3f}) = {:.3f}".format(x,f(x)))
- en: 'The last line just makes the output pretty while rounding all the solutions
    to three decimal places, as shown here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行只是通过将所有解四舍五入到三位小数来美化输出，如下所示：
- en: f(0.000) = 2.732
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: f(0.000) = 2.732
- en: f(1.000) = 2.000
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: f(1.000) = 2.000
- en: f(1.414) = 1.687
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: f(1.414) = 1.687
- en: f(0.414) = 2.434
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: f(0.414) = 2.434
- en: 'In programming languages like Python, JavaScript, Java, and so on, functions
    are a vitally important tool for transforming numbers and other objects—even other
    functions! Using Python, you can give a descriptive name to a function, so it’s
    easier to understand what’s going on. For example, you can name a function that
    calculates the area of a rectangle by calling it calculateArea(), like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python、JavaScript、Java 等编程语言中，函数是一个极其重要的工具，用于转换数字和其他对象，甚至是其他函数！通过 Python，你可以为函数赋予一个描述性的名字，从而更容易理解其功能。例如，你可以为一个计算矩形面积的函数命名为
    calculateArea()，像这样：
- en: 'def calculateArea(width,height):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'def calculateArea(width,height):'
- en: A math textbook published in the 21st century, decades after Benoit Mandelbrot
    first generated his famous fractal on a computer when working for IBM, shows a
    picture of the Mandelbrot set and gushes over the discovery. The textbook describes
    the Mandelbrot set, which is shown in [Figure 3](ch00.xhtml#ch00fig3), as “a fascinating
    mathematical object derived from the complex numbers. Its beautiful boundary illustrates
    chaotic behavior.”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一本在21世纪出版的数学教科书，距本诺瓦·曼德布罗特（Benoit Mandelbrot）第一次在为 IBM 工作时生成他著名的分形图像已经过去几十年，书中展示了曼德布罗特集的图像并对这一发现进行了热烈的赞美。这本教科书将曼德布罗特集（见[图
    3](ch00.xhtml#ch00fig3)）描述为“一个源自复数的迷人数学对象。它美丽的边界展示了混沌行为。”
- en: '![image](../images/fxx-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxx-01.jpg)'
- en: '*Figure 3: The Mandelbrot set*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3：曼德布罗特集*'
- en: The textbook then takes the reader through a painstaking “exploration” to show
    how to transform a point in the complex plane. But the student is only shown how
    to do this on a calculator, which means only two points can be transformed (iterated
    seven times) in a reasonable amount of time. Two points.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这本教科书接着带领读者进行艰苦的“探索”，展示如何在复平面中变换一个点。但学生们仅被教会如何在计算器上完成此操作，这意味着在合理的时间内只能变换两个点（迭代七次）。仅仅两个点。
- en: In this book, you’ll learn how to do this in Python, and you’ll make the program
    transform hundreds of thousands of points automatically and even *create* the
    Mandelbrot set you see above!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将学习如何用 Python 来完成此操作，你将让程序自动变换数十万个点，甚至*创建*你上面看到的曼德布罗特集！
- en: ABOUT THIS BOOK
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书简介
- en: This book is about using programming tools to make math fun and relevant, while
    still being challenging. You’ll make graphs to show all the possible outputs of
    a function. You’ll make dynamic, interactive works of art. You’ll even make an
    ecosystem with sheep that move around, eat grass, and multiply, and you’ll create
    virtual organisms that try to find the shortest route through a bunch of cities
    while you watch!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在使用编程工具使数学变得有趣且相关，同时保持挑战性。你将绘制图表，展示函数的所有可能输出。你将创作动态的、交互式的艺术作品。你甚至将创建一个有羊群的生态系统，羊群在其中四处移动、吃草并繁殖，你还将创建虚拟生物，让它们试图寻找通过一系列城市的最短路径，边看边学习！
- en: You’ll do this using Python and Processing in order to supercharge what you
    can do in math class. This book is not about skipping the math; it’s about using
    the newest, coolest tools out there to get creative and learn real computer skills
    while discovering the connections between math, art, science, and technology.
    Processing will provide the graphics, shapes, motion, and colors, while Python
    does the calculating and follows your instructions behind the scenes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 Python 和 Processing 来增强你在数学课上的表现。本书并非是跳过数学内容，而是利用最新、最酷的工具来激发创意，并在发现数学、艺术、科学和技术之间的联系的同时，学习真正的计算机技能。Processing
    提供图形、形状、运动和颜色，而 Python 负责计算并在幕后执行你的指令。
- en: For each of the projects in this book, you’ll build the code up from scratch,
    starting from a blank file, and checking your progress at every step. Through
    making mistakes and debugging your own programs, you’ll get a much deeper understanding
    of what each block of code does.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的每个项目中，你将从零开始构建代码，从一个空白文件开始，并在每一步检查进度。通过犯错和调试自己的程序，你将深入理解每一行代码的功能。
- en: WHO SHOULD USE THIS BOOK
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谁应该使用本书
- en: This book is for anyone who’s learning math or who wants to use the most modern
    tools available to approach math topics like trigonometry and algebra. If you’re
    learning Python, you can use this book to apply your growing programming skills
    to nontrivial projects like cellular automata, genetic algorithms, and computational
    art.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于任何学习数学的人，或是希望使用最现代的工具来接近三角学和代数等数学主题的人。如果你正在学习 Python，你可以使用本书将你日益增长的编程技能应用到如细胞自动机、遗传算法和计算艺术等复杂项目中。
- en: Teachers can use the projects in this book to challenge their students or to
    make math more approachable and relevant. What better way to teach matrices than
    to save a bunch of points to a matrix and use them to draw a 3D figure? When you
    know Python, you can do this and much more.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 教师可以利用本书中的项目挑战学生，或使数学变得更易接近和更具相关性。还有什么比通过将一堆点保存到矩阵中并用它们绘制一个 3D 图形来教授矩阵更好的方法呢？当你掌握了
    Python，你不仅能做到这一点，还能做到更多。
- en: WHAT’S IN THIS BOOK?
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书内容是什么？
- en: This book begins with three chapters that cover basic Python concepts you’ll
    build on to explore more complicated math. The next nine chapters explore math
    concepts and problems that you can visualize and solve using Python and Processing.
    You can try the exercises peppered throughout the book to apply what you learned
    and challenge yourself.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从三章基础内容开始，帮助你掌握 Python 的基本概念，为探索更复杂的数学问题打下基础。接下来的九章则探讨数学概念和问题，借助 Python 和
    Processing，你可以进行可视化并解决这些问题。你可以尝试书中穿插的练习，应用你学到的知识，并挑战自己。
- en: '**[Chapter 1: Drawing Polygons with Turtles](ch01.xhtml#ch01)** teaches basic
    programming concepts like loops, variables, and functions using Python’s built-in
    turtle module.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第一章：用海龟绘制多边形](ch01.xhtml#ch01)** 通过使用 Python 内置的海龟模块，教授基本的编程概念，如循环、变量和函数。'
- en: '**[Chapter 2: Making Tedious Arithmetic Fun with Lists and Loops](ch02.xhtml#ch02)**
    goes deeper into programming concepts like lists and Booleans.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第二章：用列表和循环让繁琐的算术变得有趣](ch02.xhtml#ch02)** 更深入地探讨编程概念，如列表和布尔值。'
- en: '**[Chapter 3: Guessing and Checking with Conditionals](ch03.xhtml#ch03)** applies
    your growing Python skills to problems like factoring numbers and making an interactive
    number-guessing game.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第三章：用条件语句进行猜测和检查](ch03.xhtml#ch03)** 将你不断增长的 Python 技能应用于诸如因数分解和创建互动数字猜测游戏等问题。'
- en: '**[Chapter 4: Transforming and Storing Numbers with Algebra](ch04.xhtml#ch04)**
    ramps up from solving simple equations to solving cubic equations numerically
    and by graphing.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第四章：用代数转换和存储数字](ch04.xhtml#ch04)** 从解决简单的方程式开始，逐步深入到数值解立方方程和图形化解法。'
- en: '**[Chapter 5: Transforming Shapes with Geometry](ch05.xhtml#ch05)** shows you
    how to create shapes and then multiply, rotate, and spread them all over the screen.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第五章：用几何学变换形状](ch05.xhtml#ch05)** 教你如何创建形状，然后将它们进行缩放、旋转，并分布到屏幕各处。'
- en: '**[Chapter 6: Creating Oscillations with Trigonometry](ch06.xhtml#ch06)** goes
    beyond right triangles and lets you create oscillating shapes and waves.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第六章：利用三角学创建振荡](ch06.xhtml#ch06)** 超越了直角三角形，让你能够创建振荡的形状和波动。'
- en: '**[Chapter 7: Complex Numbers](ch07.xhtml#ch07)** teaches you how to use complex
    numbers to move points around the screen, creating designs like the Mandelbrot
    set.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第七章：复数](ch07.xhtml#ch07)** 教你如何使用复数来移动屏幕上的点，创建如曼德博集合等设计。'
- en: '**[Chapter 8: Using Matrices for Computer Graphics and Systems of Equations](ch08.xhtml#ch08)**
    takes you into the third dimension, where you’ll translate and rotate 3D shapes
    and solve huge systems of equations with one program.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章：使用矩阵进行计算机图形学和方程组](ch08.xhtml#ch08)** 带你进入三维空间，在那里你将用一个程序来平移和旋转三维形状，并解决大型方程组。'
- en: '**[Chapter 9: Building Objects with Classes](ch09.xhtml#ch09)** covers how
    to create one object, or as many as your computer can handle, with roaming sheep
    and delicious grass locked in a battle for survival.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章：使用类构建对象](ch09.xhtml#ch09)** 讲解了如何创建一个对象，或者创建尽可能多的对象，展示了游动的绵羊和美味的草在生死存亡的斗争中。'
- en: '**[Chapter 10: Creating Fractals Using Recursion](ch10.xhtml#ch10)** shows
    how recursion can be used as a whole new way to measure distances and create wildly
    unexpected designs.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章：使用递归创建分形](ch10.xhtml#ch10)** 展示了如何将递归作为一种全新的方式来衡量距离，并创造出极具意外性的设计。'
- en: '**[Chapter 11: Cellular Automata](ch11.xhtml#ch11)** teaches you how to generate
    and program cellular automata to behave according to rules you make.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章：元胞自动机](ch11.xhtml#ch11)** 教你如何生成并编程使元胞自动机按照你设定的规则行为。'
- en: '**[Chapter 12: Solving Problems Using Genetic Algorithms](ch12.xhtml#ch12)**
    shows you how to harness the theory of natural selection to solve problems we
    couldn’t solve in a million years otherwise!'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章：使用遗传算法解决问题](ch12.xhtml#ch12)** 教你如何利用自然选择理论来解决否则我们可能永远无法解决的问题！'
- en: DOWNLOADING AND INSTALLING PYTHON
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载并安装 Python
- en: The easiest way to get started is to use the Python 3 software distribution,
    which is available for free at [*https://www.python.org/*](https://www.python.org/).
    Python has become one of the most popular programming languages in the world.
    It’s used to create websites like Google, YouTube, and Instagram, and researchers
    at universities all over the world use it to crunch numbers in various fields,
    from astronomy to zoology. The latest version released to date is Python 3.7\.
    Go to [*https://www.python.org/downloads/*](https://www.python.org/downloads/)
    and choose the latest version of Python 3, as shown in [Figure 4](ch00.xhtml#ch00fig4).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的入门方式是使用 Python 3 软件发行版，可以免费获取，网址是 [*https://www.python.org/*](https://www.python.org/)。Python
    已成为全球最受欢迎的编程语言之一，它被用来创建像 Google、YouTube 和 Instagram 这样的网站，全球各地的大学研究人员也用它来处理各种领域的数字，从天文学到动物学。至今发布的最新版本是
    Python 3.7。访问 [*https://www.python.org/downloads/*](https://www.python.org/downloads/)
    并选择最新的 Python 3 版本，如[图4](ch00.xhtml#ch00fig4)所示。
- en: '![image](../images/fxxii-01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxxii-01.jpg)'
- en: '*Figure 4: The official website of the Python Software Foundation*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4：Python 软件基金会的官方网站*'
- en: '![image](../images/fxxiii-01a.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxxiii-01a.jpg)'
- en: '*Figure 5: Click the downloaded file to start the install*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5：点击下载的文件开始安装*'
- en: You can choose the version for your operating system. The site detected that
    I was using Windows. Click the file when the download is complete, as shown in
    [Figure 5](ch00.xhtml#ch00fig5).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择适合你操作系统的版本。网站检测到我正在使用 Windows。下载完成后，点击文件，如[图5](ch00.xhtml#ch00fig5)所示。
- en: Follow the directions, and always choose the default options. It might take
    a few minutes to install. After that, search your system for “IDLE.” That’s the
    Python IDE, or *integrated development environment*, which is what you’ll need
    to write Python code. Why “IDLE”? The Python programming language was named after
    the Monty Python comedy troupe, and one of the members is Eric Idle.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照指示操作，始终选择默认选项。安装可能需要几分钟。安装完成后，搜索你的系统中的 “IDLE”。这就是 Python 的 IDE（集成开发环境），你将需要它来编写
    Python 代码。为什么叫“IDLE”？因为 Python 编程语言是以蒙提·派森（Monty Python）喜剧团命名的，而其中一位成员叫埃里克·艾德尔（Eric
    Idle）。
- en: STARTING IDLE
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动 IDLE
- en: Find IDLE on your system and open it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统中找到 IDLE 并打开它。
- en: '![image](../images/fxxiii-01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxxiii-01.jpg)'
- en: '*Figure 6: Opening IDLE on Windows*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6：在 Windows 上打开 IDLE*'
- en: A screen called a “shell” will appear. You can use this for the interactive
    coding environment, but you’ll want to save your code. Click **File**▸**New File**
    or press ALT-N, and a file will appear (see [Figure 7](ch00.xhtml#ch00fig7)).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为“shell”的屏幕将会出现。你可以使用它来进行交互式编码，但你需要保存代码。点击**文件**▸**新建文件**或按 ALT-N，一个文件窗口会出现（参见[图7](ch00.xhtml#ch00fig7)）。
- en: '![image](../images/fxxiii-02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxxiii-02.jpg)'
- en: '*Figure 7: Python’s interactive shell (left) and a new module (file) window,
    ready for code!*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7：Python 的交互式 shell（左）和准备好代码的新模块（文件）窗口！*'
- en: This is where you’ll write your Python code. We will also use Processing, so
    let’s go over how to download and install Processing next.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你编写Python代码的地方。我们还将使用Processing，接下来我们来看看如何下载和安装Processing。
- en: INSTALLING PROCESSING
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装PROCESSING
- en: There’s a lot you can do with Python, and we’ll use IDLE a lot. But when we
    want to do some heavy-duty graphics, we’re going to use Processing. Processing
    is a professional-level graphics library used by coders and artists to make dynamic,
    interactive artwork and graphics.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python你可以做很多事情，我们将会经常使用IDLE。但当我们需要做一些高性能图形时，我们将使用Processing。Processing是一个专业级的图形库，供程序员和艺术家用来制作动态、互动的艺术作品和图形。
- en: Go to [*https://processing.org/download/*](https://processing.org/download/)
    and choose your operating system, as shown in [Figure 8](ch00.xhtml#ch00fig8).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[*https://processing.org/download/*](https://processing.org/download/)并选择你的操作系统，如[图8](ch00.xhtml#ch00fig8)所示。
- en: '![image](../images/fxxiv-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxxiv-01.jpg)'
- en: '*Figure 8: The Processing website*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8：Processing官网*'
- en: '![image](../images/fxxiv-02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fxxiv-02.jpg)'
- en: '*Figure 9: Where to find other Processing modes, like the Python mode we’ll
    be using*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9：在哪里找到其他Processing模式，例如我们将使用的Python模式*'
- en: Download the installer for your operating system by clicking it and following
    the instructions. Double-click the icon to start Processing. This defaults to
    Java mode. Click **Java** to open the drop-down menu, as shown in [Figure 9](ch00.xhtml#ch00fig9),
    and then click **Add Mode**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击操作系统对应的安装程序并按照指示进行操作来下载它。双击图标启动Processing。默认情况下是Java模式。点击**Java**以打开下拉菜单，如[图9](ch00.xhtml#ch00fig9)所示，然后点击**添加模式**。
- en: Select **Python Mode**▸**Install**. It should take a minute or two, but after
    this you’ll be able to code in Python with Processing.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Python模式**▸**安装**。这应该需要一到两分钟，但完成后你就可以在Processing中用Python进行编程了。
- en: Now that you’ve set up Python and Processing, you’re ready to start exploring
    math!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置好了Python和Processing，准备好开始探索数学了！
