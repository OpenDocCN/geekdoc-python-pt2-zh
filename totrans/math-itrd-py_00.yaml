- en: INTRODUCTION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](../images/fintro-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Which approach shown in [Figure 1](ch00.xhtml#ch00fig1) would you prefer? On
    the left, you see an example of a traditional approach to teaching math, involving
    definitions, propositions, and proofs. This method requires a lot of reading and
    odd symbols. You’d never guess this had anything to do with geometric figures.
    In fact, this text explains how to find the *centroid*, or the center, of a triangle.
    But traditional approaches like this don’t tell us *why* we should be interested
    in finding the center of a triangle in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxviii-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1: Two approaches to teaching about the centroid*'
  prefs: []
  type: TYPE_NORMAL
- en: Next to this text, you see a picture of a dynamic sketch with a hundred or so
    rotating triangles. It’s a challenging programming project, and if you want it
    to rotate the right way (and look cool), you have to find the centroid of the
    triangle. In many situations, making cool graphics is nearly impossible without
    knowing the math behind geometry, for example. As you’ll see in this book, knowing
    a little of the math behind triangles, like the centroid, will make it easy to
    create our artworks. A student who knows math and can create cool designs is more
    likely to delve into a little geometry and put up with a few square roots or a
    trig function or two. A student who doesn’t see any outcome, and is only doing
    homework from a textbook, probably doesn’t have much motivation to learn geometry.
  prefs: []
  type: TYPE_NORMAL
- en: In my eight years of experience as a math teacher and three years of experience
    as a computer science teacher, I’ve met many more math learners who prefer the
    visual approach to the academic one. In the process of creating something interesting,
    you come to understand that math is not just following steps to solve an equation.
    You see that exploring math with programming allows for many ways to solve interesting
    problems, with many unforeseen mistakes and opportunities for improvements along the
    way.
  prefs: []
  type: TYPE_NORMAL
- en: This is the difference between school math and real math.
  prefs: []
  type: TYPE_NORMAL
- en: THE PROBLEM WITH SCHOOL MATH
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What do I mean by “school math” exactly? In the US in the 1860s, school math
    was preparation for a job as a clerk, adding columns of numbers by hand. Today,
    jobs are different, and the preparation for these jobs needs to change, too.
  prefs: []
  type: TYPE_NORMAL
- en: People learn best by doing. This hasn’t been a daily practice in schools, though,
    which tend to favor passive learning. “Doing” in English and history classes might
    mean students write papers or give presentations, and science students perform
    experiments, but what do math students do? It used to be that all you could actively
    “do” in math class was solve equations, factor polynomials, and graph functions.
    But now that computers can do most of those calculations for us, these practices
    are no longer sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Simply learning how to automate solving, factoring, and graphing is not the
    final goal. Once a student has learned to automate a process, they can go further
    and deeper into a topic than was ever possible before.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2](ch00.xhtml#ch00fig2) shows a typical math problem you’d find in
    a textbook, asking students to define a function, “f(x),” and evaluate it for
    a ton of values.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxix-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2: A traditional approach to teaching functions*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This same format goes on for 18 more questions! This kind of exercise is a
    trivial problem for a programming language like Python. We could simply define
    the function f(x) and then plug in the values by iterating over a list, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: import math
  prefs: []
  type: TYPE_NORMAL
- en: 'def f(x):'
  prefs: []
  type: TYPE_NORMAL
- en: return math.sqrt(x + 3) - x + 1
  prefs: []
  type: TYPE_NORMAL
- en: '#list of values to plug in'
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in [0,1,math.sqrt(2),math.sqrt(2)-1]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("f({:.3f}) = {:.3f}".format(x,f(x)))
  prefs: []
  type: TYPE_NORMAL
- en: 'The last line just makes the output pretty while rounding all the solutions
    to three decimal places, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: f(0.000) = 2.732
  prefs: []
  type: TYPE_NORMAL
- en: f(1.000) = 2.000
  prefs: []
  type: TYPE_NORMAL
- en: f(1.414) = 1.687
  prefs: []
  type: TYPE_NORMAL
- en: f(0.414) = 2.434
  prefs: []
  type: TYPE_NORMAL
- en: 'In programming languages like Python, JavaScript, Java, and so on, functions
    are a vitally important tool for transforming numbers and other objects—even other
    functions! Using Python, you can give a descriptive name to a function, so it’s
    easier to understand what’s going on. For example, you can name a function that
    calculates the area of a rectangle by calling it calculateArea(), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def calculateArea(width,height):'
  prefs: []
  type: TYPE_NORMAL
- en: A math textbook published in the 21st century, decades after Benoit Mandelbrot
    first generated his famous fractal on a computer when working for IBM, shows a
    picture of the Mandelbrot set and gushes over the discovery. The textbook describes
    the Mandelbrot set, which is shown in [Figure 3](ch00.xhtml#ch00fig3), as “a fascinating
    mathematical object derived from the complex numbers. Its beautiful boundary illustrates
    chaotic behavior.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxx-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3: The Mandelbrot set*'
  prefs: []
  type: TYPE_NORMAL
- en: The textbook then takes the reader through a painstaking “exploration” to show
    how to transform a point in the complex plane. But the student is only shown how
    to do this on a calculator, which means only two points can be transformed (iterated
    seven times) in a reasonable amount of time. Two points.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you’ll learn how to do this in Python, and you’ll make the program
    transform hundreds of thousands of points automatically and even *create* the
    Mandelbrot set you see above!
  prefs: []
  type: TYPE_NORMAL
- en: ABOUT THIS BOOK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is about using programming tools to make math fun and relevant, while
    still being challenging. You’ll make graphs to show all the possible outputs of
    a function. You’ll make dynamic, interactive works of art. You’ll even make an
    ecosystem with sheep that move around, eat grass, and multiply, and you’ll create
    virtual organisms that try to find the shortest route through a bunch of cities
    while you watch!
  prefs: []
  type: TYPE_NORMAL
- en: You’ll do this using Python and Processing in order to supercharge what you
    can do in math class. This book is not about skipping the math; it’s about using
    the newest, coolest tools out there to get creative and learn real computer skills
    while discovering the connections between math, art, science, and technology.
    Processing will provide the graphics, shapes, motion, and colors, while Python
    does the calculating and follows your instructions behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: For each of the projects in this book, you’ll build the code up from scratch,
    starting from a blank file, and checking your progress at every step. Through
    making mistakes and debugging your own programs, you’ll get a much deeper understanding
    of what each block of code does.
  prefs: []
  type: TYPE_NORMAL
- en: WHO SHOULD USE THIS BOOK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is for anyone who’s learning math or who wants to use the most modern
    tools available to approach math topics like trigonometry and algebra. If you’re
    learning Python, you can use this book to apply your growing programming skills
    to nontrivial projects like cellular automata, genetic algorithms, and computational
    art.
  prefs: []
  type: TYPE_NORMAL
- en: Teachers can use the projects in this book to challenge their students or to
    make math more approachable and relevant. What better way to teach matrices than
    to save a bunch of points to a matrix and use them to draw a 3D figure? When you
    know Python, you can do this and much more.
  prefs: []
  type: TYPE_NORMAL
- en: WHAT’S IN THIS BOOK?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book begins with three chapters that cover basic Python concepts you’ll
    build on to explore more complicated math. The next nine chapters explore math
    concepts and problems that you can visualize and solve using Python and Processing.
    You can try the exercises peppered throughout the book to apply what you learned
    and challenge yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: Drawing Polygons with Turtles](ch01.xhtml#ch01)** teaches basic
    programming concepts like loops, variables, and functions using Python’s built-in
    turtle module.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Making Tedious Arithmetic Fun with Lists and Loops](ch02.xhtml#ch02)**
    goes deeper into programming concepts like lists and Booleans.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: Guessing and Checking with Conditionals](ch03.xhtml#ch03)** applies
    your growing Python skills to problems like factoring numbers and making an interactive
    number-guessing game.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: Transforming and Storing Numbers with Algebra](ch04.xhtml#ch04)**
    ramps up from solving simple equations to solving cubic equations numerically
    and by graphing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: Transforming Shapes with Geometry](ch05.xhtml#ch05)** shows you
    how to create shapes and then multiply, rotate, and spread them all over the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6: Creating Oscillations with Trigonometry](ch06.xhtml#ch06)** goes
    beyond right triangles and lets you create oscillating shapes and waves.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Complex Numbers](ch07.xhtml#ch07)** teaches you how to use complex
    numbers to move points around the screen, creating designs like the Mandelbrot
    set.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Using Matrices for Computer Graphics and Systems of Equations](ch08.xhtml#ch08)**
    takes you into the third dimension, where you’ll translate and rotate 3D shapes
    and solve huge systems of equations with one program.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: Building Objects with Classes](ch09.xhtml#ch09)** covers how
    to create one object, or as many as your computer can handle, with roaming sheep
    and delicious grass locked in a battle for survival.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10: Creating Fractals Using Recursion](ch10.xhtml#ch10)** shows
    how recursion can be used as a whole new way to measure distances and create wildly
    unexpected designs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11: Cellular Automata](ch11.xhtml#ch11)** teaches you how to generate
    and program cellular automata to behave according to rules you make.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12: Solving Problems Using Genetic Algorithms](ch12.xhtml#ch12)**
    shows you how to harness the theory of natural selection to solve problems we
    couldn’t solve in a million years otherwise!'
  prefs: []
  type: TYPE_NORMAL
- en: DOWNLOADING AND INSTALLING PYTHON
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to get started is to use the Python 3 software distribution,
    which is available for free at [*https://www.python.org/*](https://www.python.org/).
    Python has become one of the most popular programming languages in the world.
    It’s used to create websites like Google, YouTube, and Instagram, and researchers
    at universities all over the world use it to crunch numbers in various fields,
    from astronomy to zoology. The latest version released to date is Python 3.7\.
    Go to [*https://www.python.org/downloads/*](https://www.python.org/downloads/)
    and choose the latest version of Python 3, as shown in [Figure 4](ch00.xhtml#ch00fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxxii-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4: The official website of the Python Software Foundation*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxxiii-01a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5: Click the downloaded file to start the install*'
  prefs: []
  type: TYPE_NORMAL
- en: You can choose the version for your operating system. The site detected that
    I was using Windows. Click the file when the download is complete, as shown in
    [Figure 5](ch00.xhtml#ch00fig5).
  prefs: []
  type: TYPE_NORMAL
- en: Follow the directions, and always choose the default options. It might take
    a few minutes to install. After that, search your system for “IDLE.” That’s the
    Python IDE, or *integrated development environment*, which is what you’ll need
    to write Python code. Why “IDLE”? The Python programming language was named after
    the Monty Python comedy troupe, and one of the members is Eric Idle.
  prefs: []
  type: TYPE_NORMAL
- en: STARTING IDLE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Find IDLE on your system and open it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxxiii-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6: Opening IDLE on Windows*'
  prefs: []
  type: TYPE_NORMAL
- en: A screen called a “shell” will appear. You can use this for the interactive
    coding environment, but you’ll want to save your code. Click **File**▸**New File**
    or press ALT-N, and a file will appear (see [Figure 7](ch00.xhtml#ch00fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxxiii-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7: Python’s interactive shell (left) and a new module (file) window,
    ready for code!*'
  prefs: []
  type: TYPE_NORMAL
- en: This is where you’ll write your Python code. We will also use Processing, so
    let’s go over how to download and install Processing next.
  prefs: []
  type: TYPE_NORMAL
- en: INSTALLING PROCESSING
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There’s a lot you can do with Python, and we’ll use IDLE a lot. But when we
    want to do some heavy-duty graphics, we’re going to use Processing. Processing
    is a professional-level graphics library used by coders and artists to make dynamic,
    interactive artwork and graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [*https://processing.org/download/*](https://processing.org/download/)
    and choose your operating system, as shown in [Figure 8](ch00.xhtml#ch00fig8).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxxiv-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8: The Processing website*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fxxiv-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9: Where to find other Processing modes, like the Python mode we’ll
    be using*'
  prefs: []
  type: TYPE_NORMAL
- en: Download the installer for your operating system by clicking it and following
    the instructions. Double-click the icon to start Processing. This defaults to
    Java mode. Click **Java** to open the drop-down menu, as shown in [Figure 9](ch00.xhtml#ch00fig9),
    and then click **Add Mode**.
  prefs: []
  type: TYPE_NORMAL
- en: Select **Python Mode**▸**Install**. It should take a minute or two, but after
    this you’ll be able to code in Python with Processing.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve set up Python and Processing, you’re ready to start exploring
    math!
  prefs: []
  type: TYPE_NORMAL
