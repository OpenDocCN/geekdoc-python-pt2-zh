- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Accessing Data from Files and APIs
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件和 API 获取数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Accessing data and getting it into your script is the first step of data analysis.
    This chapter covers several ways of importing data from files and other sources
    into your Python application, as well as ways to export data to files. You’ll
    see how to access the content of different types of files, including those stored
    locally on your machine and others accessible remotely through HTTP requests.
    You’ll also learn how to get data by sending requests to APIs that are accessible
    via a URL. Finally, you’ll learn how to load different types of data into pandas
    DataFrames.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 访问数据并将其导入脚本是数据分析的第一步。本章介绍了几种从文件和其他来源导入数据到 Python 应用程序的方法，以及如何将数据导出到文件。你将学习如何访问不同类型文件的内容，包括那些存储在本地计算机上的文件，以及通过
    HTTP 请求远程访问的文件。你还将了解如何通过发送请求到可以通过 URL 访问的 API 获取数据。最后，你将学习如何将不同类型的数据加载到 pandas
    DataFrame 中。
- en: Importing Data Using Python’s open() Function
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 的 open() 函数导入数据
- en: Python’s built-in `open()` function opens a file of any type to be processed
    within a script. The function returns a `file` object, which comes with methods
    that allow you to access and manipulate the content found in the file. If the
    file contains data in certain formats, such as CSV, JSON, or HTML, however, you’ll
    also need to import a corresponding library to access and manipulate the data.
    Processing plaintext files doesn’t require a special library; you can simply rely
    on the methods of the `file` object returned by `open()`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的内置 `open()` 函数可以打开任何类型的文件，并在脚本中进行处理。该函数返回一个 `file` 对象，带有方法让你访问和操作文件中的内容。然而，如果文件包含某些特定格式的数据，如
    CSV、JSON 或 HTML，你还需要导入相应的库来访问和操作这些数据。处理纯文本文件则不需要特殊的库；你可以直接使用 `open()` 返回的 `file`
    对象的方法。
- en: Text Files
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本文件
- en: Text files (*.txt*) are perhaps the most common file type you’ll encounter.
    To Python, a text file is a sequence of string objects. Each string object is
    one line of the text file—that is, a sequence of characters ending in a nondisplayed
    newline character (`\n`) or hard return.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 文本文件（*.txt*）可能是你遇到的最常见文件类型。对 Python 来说，文本文件是一个字符串对象序列。每个字符串对象对应文本文件中的一行——即一系列以不可见的换行符（`\n`）或回车符结束的字符。
- en: 'Python has built-in functions to work with text files, allowing you to perform
    read, write, and append operations on them. In this section, we’ll focus on how
    to read data from a text file. Start off by typing the following passage into
    a text editor and saving it as *excerpt.txt*. Be sure to press ENTER twice at
    the end of the first paragraph to create the blank line between the paragraphs
    (but don’t press ENTER to break up the long lines):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了内置函数来处理文本文件，允许你执行读取、写入和追加操作。在本节中，我们将重点讲解如何从文本文件中读取数据。首先，在文本编辑器中输入以下段落，并将其保存为
    *excerpt.txt* 文件。在第一个段落的结尾按两次 ENTER 键，创建段落之间的空行（但不要按 ENTER 键来分隔长行）：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To humans, the passage consists of two paragraphs that include three sentences
    total. To Python, however, the passage includes two nonempty lines and one blank
    line between them. Here’s how to read the entire contents of the file into a Python
    script and print it out:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对人类来说，段落包括两段文字，总共三句话。然而对 Python 来说，段落包括两行非空行和它们之间的一行空行。下面是如何将文件的全部内容读取到 Python
    脚本中并打印出来：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You start by specifying the path to the file ❶. You’ll have to replace `/path/to/excerpt.txt`
    with your own file path based on where the file is saved. You pass the path to
    the `open()` function as the first parameter ❷. The second parameter controls
    how the file will be used. The parameter defaults to reading in text mode, meaning
    the file’s contents will be opened for reading only (not editing) and treated
    as strings. You explicitly specify `"r"` for *reading* ❸, but this isn’t strictly
    necessary. (Passing `"rt"` would make text mode explicit along with specifying
    reading.) The `open()` function returns a ``file object in the specified mode
    ❹. Then, you use the `read()` method of the `file` object to read the entire contents
    of the file ❺.``
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先指定文件的路径 ❶。你需要根据文件保存的位置，将 `/path/to/excerpt.txt` 替换为你自己的文件路径。你将文件路径作为第一个参数传递给
    `open()` 函数 ❷。第二个参数控制文件的使用方式。默认情况下，这个参数是以文本模式读取文件，这意味着文件的内容只会以只读方式打开（不能编辑），并被当作字符串处理。你可以显式地指定
    `"r"` 用于 *读取* ❸，但这并不是必须的。（传递 `"rt"` 会明确指定文本模式，并且指定读取方式。）`open()` 函数返回一个以指定模式打开的
    `file` 对象 ❹。然后，你使用 `file` 对象的 `read()` 方法读取文件的全部内容 ❺。
- en: '[PRE2] path = "`/path/to/excerpt.txt`" with open(path,"r") as f: ❶ for i, line
    in enumerate(f):   ❷ if line.strip():       print(f"Line {i}: ", line.strip())
    [PRE3] Line 0:  Today, robots can talk to humans using natural language, and they''re
    getting smarter. Even so, very few people understand how these robots work or
    how they might use these technologies in their own projects. Line 2:  Natural
    language processing (NLP) - a branch of artificial intelligence that helps machines
    understand and respond to human language - is the key technology that lies at
    the heart of any digital assistant product. [PRE4] path = "`/path/to/excerpt.txt`"
    with open(path,"r") as f:   lst = [line.strip() for line in f if line.strip()]
    [PRE5] Jeff Russell, jeff.russell, sales Jane Boorman, jane.boorman, sales [PRE6]
    Year,Make,Model,Price 1997,Ford,E350,3200.00 1999,Chevy,Venture,4800.00 1996,Jeep,Grand
    Cherokee,4900.00 [PRE7] import csv path = "`/path/to/cars.csv`" with open(path,
    "r") as ❶ csv_file:   csv_reader = ❷ csv.DictReader(csv_file)   cars = []   for
    row in csv_reader:   ❸ cars.append(dict(row)) print(cars) [PRE8] [  {''Year'':
    ''1997'', ''Make'': ''Ford'', ''Model'': ''E350'', ''Price'': ''3200.00''},  {''Year'':
    ''1999'', ''Make'': ''Chevy'', ''Model'': ''Venture'', ''Price'': ''4800.00''},  {''Year'':
    ''1996'', ''Make'': ''Jeep'', ''Model'': ''Grand Cherokee'', ''Price'': ''4900.00''}
    ] [PRE9] import csv path = "cars.csv" with open(path, "r") as csv_file:   csv_reader
    = csv.reader(csv_file)   cars = []   for row in csv_reader:     cars.append(row)
    print(cars)  [PRE10] [   [''Year'', ''Make'', ''Model'', ''Price'']   [''1997'',
    ''Ford'', ''E350'', ''3200.00'']   [''1999'', ''Chevy'', ''Venture'', ''4800.00'']   [''1996'',
    ''Jeep'', ''Grand Cherokee'', ''4900.00''] ] [PRE11] image = "`/path/to/file.jpg`"
    with open(image, ❶ "rb") as image_file:   content = ❷ image_file.read() ❸ print(len(content))
    [PRE12] for row in cars:   print(list(row.values())) [PRE13] [''1997'', ''Ford'',
    ''E350'', ''3200.00''] [''1999'', ''Chevy'', ''Venture'', ''4800.00''] [''1996'',
    ''Jeep'', ''Grand Cherokee'', ''4900.00''] [PRE14] ❶ to_update = [''1999'', ''Chevy'',
    ''Venture''] ❷ new_price = ''4500.00'' ❸ with open(''`path/to/cars.csv`'', ''w'')
    as csvfile: ❹ fieldnames = cars[0].keys() ❺ writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   writer.writeheader()
    ❻ for row in cars:     if set(to_update).issubset(set(row.values())):       row[''Price'']
    = new_price     writer.writerow(row) [PRE15] Year,Make,Model,Price 1997,Ford,E350,3200.00
    1999,Chevy,Venture,4500.00 1996,Jeep,Grand Cherokee,4900.00 [PRE16] ❶ GET ❷ /api/books?bibkeys=ISBN%3A1718500521&format=json
    HTTP/1.1 ❸ Host: openlibrary.org ❹ User-Agent: python-requests/2.24.0 ❺ Accept-Encoding:
    gzip, deflate Accept: */* ❻ Connection: keep-alive [PRE17] import requests PARAMS
    = {''bibkeys'':''ISBN:1718500521'', ''format'':''json''} requests.get(''http://openlibrary.org/api/books'',
    params = PARAMS) [PRE18] $ **pip install urllib3** [PRE19] import urllib3 ❶ http
    = urllib3.PoolManager() ❷ r = http.request(''GET'', ''`http://localhost/excerpt.txt`'')
    for i, line in enumerate(❸ r.data.decode(''utf-8'').split(''\n'')):   if line.strip():   ❹
    print("Line %i: " %(i), line.strip()) [PRE20] import json import urllib3 http
    = urllib3.PoolManager() r = http.request(''GET'', ''https://newsapi.org/v2/everything?
    ❶ q=Python         programming language& ❷ apiKey=`your_api_key_here`& ❸ pageSize=5'')
    ❹ articles = json.loads(r.data.decode(''utf-8'')) for article in articles[''articles'']:   print(article[''title''])   print(article[''publishedAt''])   print(article[''url''])   print()
    [PRE21] A Programming Language To Express Programming Frustration 2021-12-15T03:00:05Z
    https://hackaday.com/2021/12/14/a-programming-language-to-express-programming-frustration/  Raise
    Your Business''s Potential by Learning Python 2021-12-24T16:30:00Z https://www.entrepreneur.com/article/403981  TIOBE
    Announces that the Programming Language of the Year Was Python 2022-01-08T19:34:00Z
    https://developers.slashdot.org/story/22/01/08/017203/tiobe-announces-that-the-programming-language-of-the-year-was-python  Python
    is the TIOBE programming language of 2021 — what does this title even mean? 2022-01-04T12:28:01Z
    https://thenextweb.com/news/python-c-tiobe-programming-language-of-the-year-title-analysis  Which
    programming language or compiler is faster 2021-12-18T02:15:28Z [PRE22] $ **pip
    install requests** [PRE23] import requests ❶ r = requests.get(''`http://localhost/excerpt.txt`'')
    for i, line in enumerate(❷ r.text.split(''\n'')):   if line.strip():   ❸ print("Line
    %i: " %(i), line.strip()) [PRE24] data = [{"Emp":"Jeff Russell",   "POs":[{"Pono":2608,"Total":35},          {"Pono":2617,"Total":35},          {"Pono":2620,"Total":139}   ]},   {"Emp":"Jane
    Boorman",   "POs":[{"Pono":2621,"Total":95},         {"Pono":2626,"Total":218}    ]
    }] [PRE25] import json import pandas as pd df = pd.json_normalize(❶ data, ❷ "POs",
    ❸ "Emp").set_index([❹ "Emp","Pono"]) print(df) [PRE26]  Total Emp          Pono        Jeff
    Russell 2608     35  2617     35              2620    139 Jane Boorman 2621     95              2626    218
    [PRE27] ❶ df = df.reset_index() json_doc = (❷ df.groupby([''Emp''], as_index=True)              ❸
    .apply(lambda x: x[[''Pono'',''Total'']].to_dict(''records''))              ❹
    .reset_index()              ❺ .rename(columns={0:''POs''})              ❻ .to_json(orient=''records''))
    [PRE28] [{"Emp": "Jeff Russell",     "POs": [{"Pono": 2608, "Total": 35},       {"Pono":
    2617, "Total": 35},       {"Pono": 2620, "Total": 139}     ]},   {"Emp": "Jane
    Boorman",  "POs": [{"Pono": 2621, "Total": 95},       {"Pono": 2626, "Total":
    218}     ] }] [PRE29] print(json.dumps(json.loads(json_doc), indent=2)) [PRE30]
    $ **pip install pandas-datareader** [PRE31] import pandas_datareader.data as pdr
    print(dir(pdr)) [PRE32] import pandas_datareader.data as pdr spx_index = pdr.get_data_stooq(''^SPX'',
    ''2022-01-03'', ''2022-01-10'') print(spx_index) [PRE33]  Open     High      Low    Close      Volume
    Date                                                       2022-01-10  4655.34  4673.02  4582.24  4670.29  2668776356
    2022-01-07  4697.66  4707.95  4662.74  4677.03  2414328227 2022-01-06  4693.39  4725.01  4671.26  4696.05  2389339330
    2022-01-05  4787.99  4797.70  4699.44  4700.58  2810603586 2022-01-04  4804.51  4818.62  4774.27  4793.54  2841121018
    2022-01-03  4778.14  4796.64  4758.17  4796.56  2241373299 [PRE34]`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
