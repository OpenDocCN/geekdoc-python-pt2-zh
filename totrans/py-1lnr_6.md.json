["```py\n  ## One-Liner\n\n➊ is_anagram = lambda x1, x2: sorted(x1) == sorted(x2)\n\n  ## Results\n\n  print(is_anagram(\"elvis\", \"lives\"))\n\n  print(is_anagram(\"elvise\", \"livees\"))\n\n  print(is_anagram(\"elvis\", \"dead\"))\n```", "```py\nprint(sorted(\"elvis\"))\n\n# ['e', 'i', 'l', 's', 'v']\n\nprint(sorted(\"lives\"))\n\n# ['e', 'i', 'l', 's', 'v']\n```", "```py\n## Results\n\nprint(is_anagram(\"elvis\", \"lives\")) # True\n\nprint(is_anagram(\"elvise\", \"livees\")) # True\n\nprint(is_anagram(\"elvis\", \"dead\")) # False\n```", "```py\n## One-Liner\n\nis_palindrome = lambda phrase: phrase == phrase[::-1]\n\n## Result\n\nprint(is_palindrome(\"anna\"))\n\nprint(is_palindrome(\"kdljfasjf\"))\n\nprint(is_palindrome(\"rats live on no evil star\"))\n```", "```py\n## Result\n\nprint(is_palindrome(\"anna\")) # True\n\nprint(is_palindrome(\"kdljfasjf\")) # False\n\nprint(is_palindrome(\"rats live on no evil star\")) # True\n```", "```py\n## The Data\n\nn = 5\n\n## The One-Liner\n\nfactorial = lambda n: n * factorial(n-1) if n > 1 else 1\n\n## The Result\n\nprint(factorial(n))\n```", "```py\n## The Data\n\na = \"cat\"\n\nb = \"chello\"\n\nc = \"chess\"\n\n## The One-Liner\n\nls = ➊lambda a, b: len(b) if not a else len(a) if not b else min(\n\n ➋ ls(a[1:], b[1:])+(a[0] != b[0]),\n\n ➌ ls(a[1:], b)+1,\n\n ➍ ls(a, b[1:])+1)\n\n## The Result\n\nprint(ls(a,b))\n\nprint(ls(a,c))\n\nprint(ls(b,c))\n```", "```py\n# Dependencies\n\nfrom functools import reduce\n\n# The Data\n\ns = {1, 2, 3}\n\n# The One-Liner\n\nps = lambda s: reduce(lambda P, x: ➊P + [subset | {x} for subset in P], s, ➋[set()])\n\n# The Result\n\nprint(ps(s))\n```", "```py\n# The Result\n\nprint(ps(s))\n\n# [set(), {1}, {2}, {1, 2}, {3}, {1, 3}, {2, 3}, {1, 2, 3}]\n```", "```py\n## Data\n\nabc = \"abcdefghijklmnopqrstuvwxyz\"\n\ns = \"xthexrussiansxarexcoming\"\n\n## One-Liner\n\nrt13 = lambda x: \"\".join([abc[(abc.find(c) + 13) % 26] for c in x])\n\n## Result\n\nprint(rt13(s))\n\nprint(rt13(rt13(s)))\n```", "```py\nabc[(abc.find(c) + 13) % 26]\n```", "```py\n## Result\n\nprint(rt13(s))\n\n# kgurkehffvnafknerkpbzvat\n\nprint(rt13(rt13(s)))\n\n# xthexrussiansxarexcoming\n```", "```py\ndef prime(n):\n\n➊ for i in range(2,n):\n\n    ➋ if n % i == 0:\n\n           return False\n\n    return True\n\nprint(prime(10))\n\n# False\n\nprint(prime(11))\n\n# True\n\nprint(prime(7919))\n\n# True\n```", "```py\n# Find all prime numbers <= m\n\nm = 20\n\nprimes = [n for n in range(2,m+1) if prime(n)]\n\nprint(primes)\n\n# [2, 3, 5, 7, 11, 13, 17, 19]\n```", "```py\n## Dependencies\n\nfrom functools import reduce\n\n## The Data\n\nn=100\n\n## The One-Liner\n\nprimes = reduce(lambda r, x: r - set(range(x**2, n, x)) if x in r else r,\n\n                range(2, int(n**0.5) + 1), set(range(2, n)))\n\n## The Result\n\nprint(primes)\n\n# {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\n\n#  47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n```", "```py\n## The One-Liner\n\nprimes = reduce(lambda r, x: r - set(range(x**2, n, x)) if x in r else r,\n\n                range(2, int(n**0.5) + 1), set(range(2, n)))\n```", "```py\n# Dependencies\n\nfrom functools import reduce\n\n# The Data\n\nn = 10\n\n# The One-Liner\n\nfibs = reduce(lambda x, _: x + [x[-2] + x[-1]], [0] * (n-2), [0, 1])\n\n# The Result\n\nprint(fibs)\n```", "```py\nn = 10\n\nx = [0,1]\n\nfibs = x[0:2] + [x.append(x[-1] + x[-2]) or x[-1] for i in range(n-2)]\n\nprint(fibs)\n\n# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```", "```py\nprint(0 or 10)\n\n# 10\n```", "```py\ndef binary_search(lst, value):\n\n    lo, hi = 0, len(lst)-1\n\n    while lo <= hi:\n\n        mid = (lo + hi) // 2\n\n        if lst[mid] < value:\n\n            lo = mid + 1\n\n        elif value < lst[mid]:\n\n            hi = mid - 1\n\n        else:\n\n            return mid\n\n    return -1\n\nl = [3, 6, 14, 16, 33, 55, 56, 89]\n\nx = 56\n\nprint(binary_search(l,x))\n\n# 6 (the index of the found element)\n```", "```py\n## The Data\n\nl = [3, 6, 14, 16, 33, 55, 56, 89]\n\nx = 33\n\n## The One-Liner\n\n➊ bs = lambda l, x, lo, hi: -1 if lo>hi else \\ \n\n       ➋ (lo+hi)//2 if l[(lo+hi)//2] == x else \\ \n\n       ➌ bs(l, x, lo, (lo+hi)//2-1) if l[(lo+hi)//2] > x else \\ \n\n       ➍ bs(l, x, (lo+hi)//2+1, hi) \n\n## The Results\n\nprint(bs(l, x, 0, len(l)-1))\n```", "```py\n## The Data\n\nunsorted = [33, 2, 3, 45, 6, 54, 33]\n\n## The One-Liner\n\nq = lambda l: q([x for x in l[1:] if x <= l[0]]) + [l[0]] + q([x for x in l if x > l[0]]) if l else []\n\n## The Result\n\nprint(q(unsorted))\n```", "```py\nlambda l: q(left) + pivot + q(right) if l else []\n```", "```py\n## The Result\n\nprint(q(unsorted))\n\n# [2, 3, 6, 33, 33, 45, 54]\n```"]