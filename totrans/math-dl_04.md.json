["```py\n>>> import numpy as np\n\n>>> n = 10\n\n>>> a = np.random.random(n)\n\n>>> (1/n)*((a-a.mean())**2).sum()\n\n0.08081748204006689\n\n>>> (1/(n-1))*((a-a.mean())**2).sum()\n\n0.08979720226674098\n```", "```py\n>>> n = 10000\n\n>>> a = np.random.random(n)\n\n>>> (1/n)*((a-a.mean())**2).sum()\n\n0.08304350577482553\n\n>>> (1/(n-1))*((a-a.mean())**2).sum()\n\n0.08305181095592111\n```", "```py\n\ndef MAD(x):\n\n    return np.median(np.abs(x-np.median(x)))\n```", "```py\n\nd = np.load(\"exams.npy\")\n\np = d[:,0].astype(\"uint32\")\n\nq = np.quantile(p, [0.0, 0.25, 0.5, 0.75, 1.0])\n\nprint(\"Quartiles: \", q)\n\nprint(\"Counts by quartile:\")\n\nprint(\"    %d\" % ((q[0] <= p) & (p < q[1])).sum())\n\nprint(\"    %d\" % ((q[1] <= p) & (p < q[2])).sum())\n\nprint(\"    %d\" % ((q[2] <= p) & (p < q[3])).sum())\n\nprint(\"    %d\" % ((q[3] <= p) & (p < q[4])).sum())\n```", "```py\n\n18.0, 56.75, 68.0, 78.0, 100.0\n```", "```py\n\n250, 237, 253, 248\n```", "```py\n\nd = np.load(\"exams.npy\")\n\nplt.boxplot(d)\n\nplt.xlabel(\"Test\")\n\nplt.ylabel(\"Scores\")\n\nplt.show()\n```", "```py\n>>> a = np.arange(10, dtype=\"float64\")\n\n>>> a[3] = np.nan\n\n>>> np.isnan(a[3])\n\nTrue\n\n>>> a[3] == np.nan\n\nFalse\n\n>>> a[3] is np.nan\n\nFalse\n```", "```py\n\nN = 1000\n\nnp.random.seed(73939133)\n\nx = np.zeros((N,4))\n\nx[:,0] = 5*np.random.random(N)\n\nx[:,1] = np.random.normal(10,1,size=N)\n\nx[:,2] = 3*np.random.beta(5,2,N)\n\nx[:,3] = 0.3*np.random.lognormal(size=N)\n```", "```py\n\ni = np.random.randint(0,N, size=int(0.05*N))\n\nx[i,0] = np.nan\n\ni = np.random.randint(0,N, size=int(0.05*N))\n\nx[i,1] = np.nan\n\ni = np.random.randint(0,N, size=int(0.05*N))\n\nx[i,2] = np.nan\n\ni = np.random.randint(0,N, size=int(0.05*N))\n\nx[i,3] = np.nan\n```", "```py\n\ngood_idx = np.where(np.isnan(x[:,0]) == False)\n\nm = np.median(x[good_idx,0])\n\nbad_idx = np.where(np.isnan(x[:,0]) == True)\n\nx[bad_idx,0] = m\n```", "```py\n\nnon-NaN mean, std = 2.169986, 0.474514\n\nupdated mean, std = 2.173269, 0.462957\n```", "```py\n\nimport numpy as np\n\ndef pearson(x,y):\n\n    exy = (x*y).mean()\n\n    ex = x.mean()\n\n    ey = y.mean()\n\n    exx = (x*x).mean()\n\n    ex2 = x.mean()**2\n\n    eyy = (y*y).mean()\n\n    ey2 = y.mean()**2\n\n    return (exy - ex*ey)/(np.sqrt(exx-ex2)*np.sqrt(eyy-ey2))\n```", "```py\n\nnp.random.seed(8675309)\n\nN = 100\n\nx = np.linspace(0,1,N) + (np.random.random(N)-0.5)\n\ny = np.random.random(N)*x\n\nz = -0.1*np.random.random(N)*x\n```", "```py\n\npearson(x,y):  0.682852\n\npearson(x,z): -0.850475\n\npearson(y,z): -0.565361\n```", "```py\n>>> d = np.vstack((x,y,z))\n\n>>> print(np.corrcoef(d))\n\n[[ 1.          0.68285166 -0.85047468]\n\n [ 0.68285166  1.         -0.56536104]\n\n [-0.85047468 -0.56536104  1.        ]]\n```", "```py\n>>> from sklearn.datasets import load_sample_image\n\n>>> china = load_sample_image('china.jpg')\n\n>>> a = china[230,:,1].astype(\"float64\")\n\n>>> b = china[231,:,1].astype(\"float64\")\n\n>>> c = china[400,:,1].astype(\"float64\")\n\n>>> d = np.random.random(640)\n\n>>> pearson(a,b)\n\n0.8979360\n\n>>> pearson(a,c)\n\n-0.276082\n\n>>> pearson(a,d)\n\n-0.038199\n```", "```py\n\n[86, 62, 28, 43, 3, 92, 38, 87, 74, 11]\n```", "```py\n\n[7, 5, 2, 4, 0, 9, 3, 8, 6, 1]\n```", "```py\n\nimport numpy as np\n\ndef spearman(x,y):\n\n    n = len(x)\n\n    t = x[np.argsort(x)]\n\n    rx = []\n\n    for i in range(n):\n\n    rx.append(np.where(x[i] == t)[0][0])\n\nrx = np.array(rx, dtype=\"float64\")\n\nt = y[np.argsort(y)]\n\nry = []\n\nfor i in range(n):\n\n    ry.append(np.where(y[i] == t)[0][0])\n\nry = np.array(ry, dtype=\"float64\")\n\nd = rx - ry\n\nreturn 1.0 - (6.0/(n*(n*n-1)))*(d**2).sum()\n```", "```py\n>>> from scipy.stats import spearmanr\n\n>>> print(spearman(x,y), spearmanr(x,y)[0])\n\n0.694017401740174 0.6940174017401739\n\n>>> print(spearman(x,z), spearmanr(x,z)[0])\n\n-0.8950855085508551 -0.895085508550855\n\n>>> print(spearman(y,z), spearmanr(y,z)[0])\n\n-0.6414041404140414 -0.6414041404140414\n```", "```py\n\nramp = np.linspace(-20,20,1000)\n\nsig = 1.0 / (1.0 + np.exp(-ramp))\n\nprint(pearson(ramp,sig))\n\nprint(spearman(ramp,sig))\n```", "```py\n\n0.905328\n\n1.0\n```", "```py\n\nnp.random.seed(65535)\n\na = np.random.normal(85,6,50).astype(\"int32\")\n\na[np.where(a > 100)] = 100\n\nb = np.random.normal(82,7,50).astype(\"int32\")\n\nb[np.where(b > 100)] = 100\n```", "```py\n\nfrom scipy.stats import ttest_ind\n\nt,p = ttest_ind(a,b, equal_var=False)\n\nprint(\"(t=%0.5f, p=%0.5f)\" % (t,p))\n```", "```py\n\nfrom scipy import stats\n\ndef CI(a, b, alpha=0.05):\n\n    n1, n2 = len(a), len(b)\n\n    s1, s2 = np.std(a, ddof=1)**2, np.std(b, ddof=1)**2\n\n    df = (s1/n1 + s2/n2)**2 / ((s1/n1)**2/(n1-1) + (s2/n2)**2/(n2-1))\n\n    tc = stats.t.ppf(1 - alpha/2, df)\n\n    lo = (a.mean()-b.mean()) - tc*np.sqrt(s1/n1 + s2/n2)\n\n    hi = (a.mean()-b.mean()) + tc*np.sqrt(s1/n1 + s2/n2)\n\n    return lo, hi\n```", "```py\n\ndef Cohen_d(a,b):\n\n    s1 = np.std(a, ddof=1)**2\n\n    s2 = np.std(b, ddof=1)**2\n\n    return (a.mean() - b.mean()) / np.sqrt(0.5*(s1+s2))\n```", "```py\n\nfrom scipy.stats import mannwhitneyu\n\nu,p = mannwhitneyu(a,b)\n\nprint(\"(U=%0.5f, p=%0.5f)\" % (u,p))\n```"]