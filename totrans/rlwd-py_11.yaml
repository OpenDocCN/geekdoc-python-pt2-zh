- en: '11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '11'
- en: CREATING AN INTERACTIVE ZOMBIE ESCAPE MAP
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个互动丧尸逃生地图
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: In 2010, *The Walking Dead* premiered on the AMC television channel. Set at
    the beginning of a zombie apocalypse, it told the story of a small group of survivors
    in the area of Atlanta, Georgia. The critically acclaimed show soon became a phenomenon,
    turning into the most watched series in cable television history, spawning a spin-off
    called *Fear the Walking Dead*, and starting an entirely new genre of television,
    the post-episode discussion show, with *Talking Dead*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2010年，*行尸走肉*在AMC电视台首播。该剧设定在丧尸末日的初期，讲述了一群幸存者在乔治亚州亚特兰大地区的故事。这部广受好评的剧集迅速成为现象级作品，成为有线电视历史上收视最多的系列剧，衍生出了名为*恐惧行尸走肉*的外传，并开创了一个全新的电视类型——剧集后讨论节目，*行尸走肉后谈*。
- en: In this chapter, you’ll play a quick-thinking data scientist who foresees the
    coming collapse of civilization. You’ll prepare a map to help the *Walking Dead*
    survivors escape the crowded Atlanta metropolitan area for the more sparsely populated
    lands west of the Mississippi. In the process, you’ll use the pandas library to
    load, analyze, and clean the data, and you’ll use the bokeh and holoviews modules
    to plot the map.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将扮演一位机智的数据科学家，预见到文明即将崩溃。你将准备一张地图，帮助*行尸走肉*的幸存者逃离拥挤的亚特兰大大都市区，前往密西西比河以西人口稀少的地区。在这个过程中，你将使用pandas库加载、分析和清理数据，并使用bokeh和holoviews模块绘制地图。
- en: '**Project #15: Visualizing Population Density with a Choropleth Map**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 #15：使用区域专题地图可视化人口密度**'
- en: According to scientists (yes, they’ve studied this), the key to surviving a
    zombie apocalypse is to live as far from a city as possible. In the United States,
    that means living in one of the large black areas shown in [Figure 11-1](ch11.xhtml#ch011fig1).
    The brighter the lights, the greater the population, so if you want to avoid people,
    don’t “go into the light.”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据科学家的研究（是的，他们研究过这个问题），生存下来的关键是尽量远离城市。在美国，这意味着要住在[图 11-1](ch11.xhtml#ch011fig1)中显示的大面积黑色区域里。灯光越亮，人口越多，因此如果你想避免人群，就不要“走向光明”。
- en: '![Image](../images/fig11_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig11_01.jpg)'
- en: 'Figure 11-1: Nighttime image of US city lights in 2012'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-1：2012年美国城市夜间灯光图
- en: Unfortunately for our *Walking Dead* survivors in Atlanta, they’re a long way
    from the relative safety of the American West. They’ll need to weave their way
    through a gauntlet of cities and towns, ideally passing through the least populated
    areas. Service station maps don’t provide that population information, but the
    US census does. Before civilization collapses and the internet fails, you can
    download population density data onto your laptop and sort it out later using
    Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在亚特兰大的*行尸走肉*幸存者来说，不幸的是，他们距离美国西部相对安全的地区还有很长一段路。他们需要穿越一系列城市和小镇，理想情况下尽量经过人口稀少的区域。服务站地图并没有提供人口信息，但美国人口普查提供了。文明崩溃、互联网失效之前，你可以将人口密度数据下载到你的笔记本电脑上，稍后使用Python整理数据。
- en: The best way to present this type of data is with a *choropleth map*, a visualization
    tool that uses colors or patterns to represent statistics about predefined geographical
    regions. You may be familiar with choropleth maps of US presidential election
    results, which color counties red for a Republican victory and blue for a Democratic
    one ([Figure 11-2](ch11.xhtml#ch011fig2)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 展示此类数据的最佳方式是使用*区域专题地图*，这是一种利用颜色或图案来表示预定地理区域统计数据的可视化工具。你可能熟悉美国总统选举结果的区域专题地图，地图上县域会被涂上红色代表共和党获胜，蓝色代表民主党获胜（[图
    11-2](ch11.xhtml#ch011fig2)）。
- en: If the survivors had a choropleth map of population density that showed the
    number of people per square mile in each county, they could find the shortest,
    and theoretically safest, routes out of Atlanta and across the American South.
    Although you could get even higher-resolution data from the census, using its
    county-level data should be enough. *Walking Dead* zombie herds migrate as they
    get hungry, quickly rendering detailed statistics obsolete.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果幸存者们手中有一张显示每个县每平方英里人口数量的*区域专题地图*，他们就能找到离开亚特兰大并穿越美国南部的最短、理论上最安全的路线。尽管你可以从人口普查中获得更高分辨率的数据，但使用其县级数据应该足够了。*行尸走肉*中的丧尸群体会随着饥饿而迁移，这很快就会让详细的统计数据变得过时。
- en: '![Image](../images/fig11_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig11_02.jpg)'
- en: 'Figure 11-2: Choropleth map of the 2016 US presidential election results (light
    gray = Democrat, dark gray = Republican)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2：2016年美国总统选举结果的区域专题地图（浅灰色 = 民主党，深灰色 = 共和党）
- en: To determine the best routes through the counties, the survivors can use state
    highway maps like the ones found in service stations and welcome centers. These
    paper maps include county and parish outlines, making it easy to relate their
    network of cities and roads to a page-sized printout of the choropleth map.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定通过各县的最佳路线，幸存者可以使用像加油站和欢迎中心提供的州际公路地图。这些纸质地图包括县和教区的轮廓，便于将它们的城市和道路网络与页尺寸的分层地图打印图对照。
- en: THE OBJECTIVE
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目标
- en: Create an interactive map of the conterminous United States (the 48 adjoining
    states) that displays population density by county.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个交互式地图，展示美国48个相邻州（即大陆48州）的县级人口密度。
- en: '***The Strategy***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***策略***'
- en: 'Like all data visualization exercises, this task consists of the following
    basic steps: finding and cleaning the data, choosing the type of plot and the
    tool with which to show the data, preparing the data for plotting, and drawing
    the data.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 和所有数据可视化任务一样，本任务包含以下基本步骤：查找并清理数据、选择绘图类型和展示数据的工具、准备数据以进行绘图，以及绘制数据。
- en: Finding the data is easy in this case, as the US census population data is made
    readily available to the public. You still need to *clean* it, however, by finding
    and handling bogus data points, null values, and formatting issues. Ideally you
    would also verify the accuracy of the data, a difficult job that data scientists
    probably skip far too often. The data should at least pass a sanity check, something
    that may have to wait until the data is drawn. New York City should have a greater
    population density than Billings, Montana, for example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，找到数据很容易，因为美国人口普查数据是公开的。但你仍然需要*清理*这些数据，处理虚假的数据点、空值和格式问题。理想情况下，你还应该验证数据的准确性，这是一项困难的工作，数据科学家可能经常忽略。数据至少应该通过一个理智检查，这个工作可能要等到数据绘制出来后才能完成。例如，纽约市的人口密度应该大于蒙大拿州比灵斯市。
- en: Next, you must decide how you’ll present the data. You’ll use a map, but other
    options might include a bar chart or a table. Even more important is choosing
    the tool—in this case, the Python library—that you’ll use to make the plot. The
    choice of tool can have a big impact on how you prepare the data and exactly what
    you end up showing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你必须决定如何呈现数据。你将使用地图，但其他选项可能包括条形图或表格。更重要的是选择工具——在这种情况下是 Python 库——来生成图表。工具的选择会对数据准备方式以及最终展示的内容产生重大影响。
- en: 'Years ago, a fast-food company ran a commercial in which a customer claimed
    to like “a variety, but not too much of a variety.” When it comes to visualization
    tools in Python, you can argue that there are too many choices, with too little
    to distinguish them: matplotlib, seaborn, plotly, bokeh, folium, altair, pygal,
    ggplot, holoviews, cartopy, geoplotlib, and built-in functions in pandas.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，一家快餐公司曾做过一个广告，其中一个顾客声称喜欢“有多样性，但不要太多的多样性。”对于 Python 中的可视化工具，你可以说选择太多，且很难区分它们：matplotlib、seaborn、plotly、bokeh、folium、altair、pygal、ggplot、holoviews、cartopy、geoplotlib，以及
    pandas 中的内置函数。
- en: These various visualization libraries have their strengths and weaknesses, but
    since this project requires speed, you’ll focus on the easy-to-use holoviews module,
    with a bokeh backend for plotting. This combination will allow you to produce
    an interactive choropleth map with only a few lines of code, and bokeh conveniently
    includes US state and county polygons in its sample data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同的可视化库各有优缺点，但由于本项目需要快速完成，你将重点使用易于操作的 holoviews 模块，后端使用 bokeh 绘图。这种组合可以让你仅用几行代码就生成一个交互式的分层地图，而且
    bokeh 方便地在其示例数据中包含了美国州和县的多边形。
- en: Once you’ve chosen your visualization tool, you must put the data in the format
    that the tool expects. You’ll need to figure out how to fill in the county shapes,
    which you get from one file, with the population data from another file. This
    will involve a little reverse engineering using example code from the holoviews
    gallery. After that, you’ll plot the map with bokeh.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了可视化工具，你就需要将数据转换成工具所期望的格式。你需要弄清楚如何将一个文件中的县级边界形状，和另一个文件中的人口数据结合起来。这将涉及一些逆向工程，借助
    holoviews 画廊中的示例代码。完成之后，你将使用 bokeh 绘制地图。
- en: Fortunately, data analysis with Python almost always relies on the Python Data
    Analysis Library (pandas). This module will let you load the census data, analyze
    it, and reformat it for use with holoviews and bokeh.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，使用 Python 进行数据分析几乎总是依赖于 Python 数据分析库（pandas）。该模块将帮助你加载人口普查数据、分析数据并将其重新格式化，以便与
    holoviews 和 bokeh 一起使用。
- en: '***The Python Data Analysis Library***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Python 数据分析库***'
- en: The open source pandas library is the most popular library available for performing
    data extraction, processing, and manipulation in Python. It contains data structures
    designed for working with common data sources, such as SQL relational databases
    and Excel spreadsheets. If you plan on being a data scientist in any form, you’ll
    surely encounter pandas at some point.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的 pandas 库是 Python 中最流行的数据提取、处理和操作库。它包含了针对常见数据源（如 SQL 关系型数据库和 Excel 电子表格）设计的数据结构。如果你打算从事数据科学工作，你一定会在某个时刻遇到
    pandas。
- en: 'The pandas library contains two primary data structures: series and dataframes.
    A *series* is a one-dimensional labeled array that can hold any type of data,
    such as integers, floats, strings, and so on. Because pandas is based on NumPy,
    a series object is basically two associated arrays (see the introduction to arrays
    on [page 12](ch01.xhtml#page_12) in [Chapter 1](ch01.xhtml) if you’re new to arrays).
    One array contains the data point values, which can have any NumPy data type.
    The other array contains labels for each data point, called *indexes* ([Table
    11-1](ch11.xhtml#ch011table1)).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库包含两种主要的数据结构：序列和 DataFrame。*序列* 是一个一维的带标签数组，可以保存任何类型的数据，如整数、浮点数、字符串等。因为
    pandas 基于 NumPy，序列对象实际上是两个关联的数组（如果你对数组不熟悉，可以参考[第 1 章](ch01.xhtml)中[第 12 页](ch01.xhtml#page_12)的数组介绍）。一个数组包含数据点的值，数据类型可以是任何
    NumPy 类型。另一个数组包含每个数据点的标签，称为*索引*（见[表 11-1](ch11.xhtml#ch011table1)）。
- en: '**Table 11-1:** A Series Object'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 11-1：** 序列对象'
- en: '| Index | Value |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 值 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0 | 25 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 25 |'
- en: '| 1 | 432 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 432 |'
- en: '| 2 | –112 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 2 | –112 |'
- en: '| 3 | 99 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 99 |'
- en: Unlike the indexes of Python list items, the indexes in a series don’t have
    to be integers. In [Table 11-2](ch11.xhtml#ch011table2), the indexes are the names
    of people, and the values are their ages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 列表项的索引不同，序列中的索引不必是整数。在[表 11-2](ch11.xhtml#ch011table2)中，索引是人名，值是他们的年龄。
- en: '**Table 11-2:** A Series Object with Meaningful Labels'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 11-2：** 带有有意义标签的序列对象'
- en: '| Index | Value |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 值 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Javier | 25 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Javier | 25 |'
- en: '| Carol | 32 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Carol | 32 |'
- en: '| Lora | 19 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| Lora | 19 |'
- en: '| Sarah | 29 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Sarah | 29 |'
- en: As with a list or NumPy array, you can slice a series or select individual elements
    by specifying an index. You can manipulate the series many ways, such as filtering
    it, performing mathematical operations on it, and merging it with other series.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表或 NumPy 数组一样，你可以通过指定索引来切片序列或选择单个元素。你可以以多种方式操作序列，如对其进行筛选、执行数学运算或与其他序列合并。
- en: A *dataframe* is a more complex structure comprising two dimensions. It has
    a tabular structure similar to a spreadsheet, with columns, rows, and data ([Table
    11-3](ch11.xhtml#ch011table3)). You can think of it as an ordered collection of
    columns with two indexing arrays.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*DataFrame* 是一个更复杂的结构，包含两个维度。它具有类似电子表格的表格结构，包括列、行和数据（见[表 11-3](ch11.xhtml#ch011table3)）。你可以把它看作是一个有序的列集合，配有两个索引数组。'
- en: '**Table 11-3:** A Dataframe Object'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 11-3：** DataFrame 对象'
- en: '|  | Columns |  |  |  |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|  | 列 |  |  |  |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Index | Country | State | County | Population |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 国家 | 州 | 县 | 人口 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | USA | Alabama | Autauga | 54,571 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 美国 | 阿拉巴马州 | 奥托戈县 | 54,571 |'
- en: '| 1 | USA | Alabama | Baldwin | 182,265 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 美国 | 阿拉巴马州 | 鲍德温县 | 182,265 |'
- en: '| 2 | USA | Alabama | Barbour | 27,457 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 美国 | 阿拉巴马州 | 巴伯县 | 27,457 |'
- en: '| 3 | USA | Alabama | Bibb | 22,915 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 美国 | 阿拉巴马州 | 比布县 | 22,915 |'
- en: The first index, for the rows, works much like the index array in a series.
    The second keeps track of the series of labels, with each label representing a
    column header. Dataframes also resemble dictionaries; the column names form the
    keys, and the series of data in each column forms the values. This structure lets
    you easily manipulate dataframes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个索引用于行，类似于序列中的索引数组。第二个索引跟踪标签序列，每个标签代表一个列标题。DataFrame 也类似于字典；列名作为键，每列中的数据序列作为值。这个结构使你可以轻松地操作
    DataFrame。
- en: Covering all the functionality in pandas would require a whole book, and you
    can find plenty online! We’ll defer additional discussion until the code section,
    where we’ll look at specific examples as we apply them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 的所有功能如果要全部覆盖需要一本书，你可以在网上找到很多资源！我们将在代码部分进一步讨论，届时会通过具体示例来讲解。
- en: '***The bokeh and holoviews Libraries***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***bokeh 和 holoviews 库***'
- en: The bokeh module (*[https://bokeh.org/](https://bokeh.org/)*) is an open source
    interactive visualization library for modern web browsers. You can use it to construct
    elegant interactive graphics over large or streaming datasets. It renders its
    graphics using HTML and JavaScript, the predominant programming languages for
    creating interactive web pages.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: bokeh 模块 (*[https://bokeh.org/](https://bokeh.org/)* )是一个开源的交互式可视化库，适用于现代网页浏览器。你可以使用它在大规模或流式数据集上构建优雅的交互式图形。它使用
    HTML 和 JavaScript 渲染图形，这两种是创建交互式网页的主要编程语言。
- en: The open source holoviews library (*[http://holoviews.org/](http://holoviews.org/)*)
    aims to make data analysis and visualization simple. With holoviews, instead of
    building a plot by making a direct call to a plotting library, such as bokeh or
    matplotlib, you first create an object describing your data, and the plots become
    automatic visual representations of this object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的 holoviews 库 (*[http://holoviews.org/](http://holoviews.org/)* )旨在简化数据分析和可视化。使用
    holoviews，你首先创建一个描述数据的对象，而不是直接调用绘图库（如 bokeh 或 matplotlib）来构建图表，然后图表会自动成为该对象的可视化表现。
- en: The holoviews example gallery includes several choropleth maps visualized using
    bokeh (such as *[http://holoviews.org/gallery/demos/bokeh/texas_choropleth_example.html](http://holoviews.org/gallery/demos/bokeh/texas_choropleth_example.html)*).
    Later, we’ll use the unemployment rate example from this gallery to figure out
    how to present our population density data in a similar manner.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: holoviews 示例画廊包括多个使用 bokeh 可视化的区域图（例如 *[http://holoviews.org/gallery/demos/bokeh/texas_choropleth_example.html](http://holoviews.org/gallery/demos/bokeh/texas_choropleth_example.html)*）。稍后，我们将使用这个画廊中的失业率示例，了解如何以类似的方式呈现我们的人口密度数据。
- en: '***Installing pandas, bokeh, and holoviews***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装 pandas、bokeh 和 holoviews***'
- en: If you worked through the project in [Chapter 1](ch01.xhtml), you already have
    pandas and NumPy installed. If not, see the instructions in “Installing the Python
    Libraries” on [page 6](ch01.xhtml#page_6).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了[第一章](ch01.xhtml)的项目，你已经安装了 pandas 和 NumPy。如果没有，请参考“安装 Python 库”中的说明，查看[第6页](ch01.xhtml#page_6)。
- en: One option for installing holoviews, along with latest version of all the recommended
    packages for working with the module on Linux, Windows, or macOS, is to use Anaconda.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 holoviews 的一种方式是使用 Anaconda，它会同时安装推荐的所有包的最新版本，适用于 Linux、Windows 或 macOS。
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This installation method includes the default matplotlib plotting library backend,
    the more interactive bokeh plotting library backend, and the Jupyter/IPython Notebook.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该安装方法包括默认的 matplotlib 绘图库后端、更加互动的 bokeh 绘图库后端以及 Jupyter/IPython Notebook。
- en: You can install a similar set of packages using pip.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 pip 安装一套类似的包。
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Additional minimal installation options are available through pip, assuming
    you already have bokeh installed. You can find these and other installation instructions
    at *[http://holoviews.org/install.html](http://holoviews.org/install.html)* and
    *[http://holoviews.org/user_guide/Installing_and_Configuring.html](http://holoviews.org/user_guide/Installing_and_Configuring.html)*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 bokeh，通过 pip 可以获得其他最小安装选项。你可以在 *[http://holoviews.org/install.html](http://holoviews.org/install.html)*
    和 *[http://holoviews.org/user_guide/Installing_and_Configuring.html](http://holoviews.org/user_guide/Installing_and_Configuring.html)*
    上找到这些及其他安装说明。
- en: '***Accessing the County, State, Unemployment, and Population Data***'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***访问县、州、失业和人口数据***'
- en: The bokeh library comes with data files for the state and county outlines and
    the 2009 US unemployment data per county. As mentioned, you’ll use the unemployment
    data to determine how to format the population data, which comes from the 2010
    census.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: bokeh 库附带了州和县的轮廓数据文件以及2009年美国各县的失业数据。如前所述，你将使用失业数据来确定如何格式化来自2010年人口普查的人口数据。
- en: 'To download the bokeh sample data, connect to the internet, open a Python shell,
    and enter the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 bokeh 示例数据，请连接互联网，打开 Python shell，并输入以下命令：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the program will tell you where on your machine it’s putting
    the data so that bokeh can automatically find it. Your path will differ from mine.
    For more on downloading the sample data, see *[https://docs.bokeh.org/en/latest/docs/reference/sampledata.html](https://docs.bokeh.org/en/latest/docs/reference/sampledata.html)*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，程序会告诉你数据存放的位置，以便 bokeh 可以自动找到它。你的路径会与我的不同。有关下载示例数据的更多信息，请参见 *[https://docs.bokeh.org/en/latest/docs/reference/sampledata.html](https://docs.bokeh.org/en/latest/docs/reference/sampledata.html)*。
- en: Look for *US_Counties.csv* and *unemployment09.csv* in the folder of downloaded
    files. These plaintext files use the popular *comma-separated values* (CSV) format,
    in which each line represents a data record with multiple fields separated by
    commas. (Good luck saying “CSV” right if you regularly shop at a CVS pharmacy!)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载的文件夹中查找 *US_Counties.csv* 和 *unemployment09.csv* 文件。这些纯文本文件使用流行的 *逗号分隔值*（CSV）格式，每一行表示一个数据记录，包含多个由逗号分隔的字段。（如果你经常去
    CVS 药店购物，试着正确说出“CSV”，祝你好运！）
- en: The unemployment file is instructive of the plight of the data scientist. If
    you open it, you’ll see that there are no column names describing the data ([Figure
    11-3](ch11.xhtml#ch011fig3)), though it’s possible to guess what most of the fields
    represent. We’ll deal with this later.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 失业文件展示了数据科学家的困境。如果你打开它，你会发现没有描述数据的列名（[图 11-3](ch11.xhtml#ch011fig3)），虽然大多数字段的含义可以猜测出来。我们稍后会处理这个问题。
- en: '![Image](../images/fig11_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig11_03.jpg)'
- en: 'Figure 11-3: The first few rows of unemployment09.csv'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-3：unemployment09.csv 文件的前几行
- en: If you open the US counties file, you’ll see lots of columns, but at least they
    have headers ([Figure 11-4](ch11.xhtml#ch011fig4)). Your challenge will be to
    relate the un-employment data in [Figure 11-3](ch11.xhtml#ch011fig3) to the geographical
    data in [Figure 11-4](ch11.xhtml#ch011fig4) so that you can do the same later
    with the census data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开美国县文件，你会看到很多列，但至少它们有标题（[图 11-4](ch11.xhtml#ch011fig4)）。你的挑战是将[图 11-3](ch11.xhtml#ch011fig3)中的失业数据与[图
    11-4](ch11.xhtml#ch011fig4)中的地理数据关联起来，这样你就可以在处理人口普查数据时做同样的事情。
- en: '![Image](../images/fig11_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig11_04.jpg)'
- en: 'Figure 11-4: The first few rows of US_Counties.csv'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-4：US_Counties.csv 文件的前几行
- en: You can find the population data, *census_data_popl_2010.csv*, in the *Chapter_11*
    folder, downloadable from the book’s website. This file, originally named *DEC_10_SF1_GCTPH1.US05PR_with_ann.csv*,
    came from the American FactFinder website. By the time this book is published,
    the US government will have migrated the census data to a new site called *[https://data.census.gov](https://data.census.gov)*
    (see *[https://www.census.gov/data/what-is-data-census-gov.html](https://www.census.gov/data/what-is-data-census-gov.html)*).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *Chapter_11* 文件夹中找到人口数据 *census_data_popl_2010.csv*，该文件可以从书籍网站下载。这个文件原名为
    *DEC_10_SF1_GCTPH1.US05PR_with_ann.csv*，来自美国数据查询网站 American FactFinder。到本书出版时，美国政府将把人口普查数据迁移到一个新的站点
    *[https://data.census.gov](https://data.census.gov)*（见 *[https://www.census.gov/data/what-is-data-census-gov.html](https://www.census.gov/data/what-is-data-census-gov.html)*）。
- en: If you look at the top of the census file, you’ll see lots of columns with two
    header rows ([Figure 11-5](ch11.xhtml#ch011fig5)). You’re interested in column
    M, titled *Density per square mile of land area – Population*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看人口普查文件的顶部，你会看到很多列和两行标题（[图 11-5](ch11.xhtml#ch011fig5)）。你需要关注的是 M 列，标题为
    *每平方英里土地面积密度 - 人口*。
- en: '![Image](../images/fig11_05.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig11_05.jpg)'
- en: 'Figure 11-5: The first few rows of census_data_popl_2010.csv'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-5：census_data_popl_2010.csv 文件的前几行
- en: At this point, you have all the Python libraries and data files you need to
    generate a population density choropleth map *in theory*. Before you can write
    the code, however, you need to know how you’re going to link the population data
    to the geographical data so that you can place the correct county data in the
    correct county shape.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经具备了生成人口密度专题地图所需的所有 Python 库和数据文件 *理论上*。然而，在你编写代码之前，你需要知道如何将人口数据与地理数据关联起来，以便将正确的县数据放入正确的县形状中。
- en: '***Hacking holoviews***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***黑客入门：Holoviews***'
- en: Learning to adapt existing code for your own use is a valuable skill for a data
    scientist. This may require a bit of reverse engineering. Because open source
    software is free, it’s sometimes poorly documented, so you have to figure out
    how it works on your own. Let’s take a moment and apply this skill to our current
    problem.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 学会根据自己的需求调整现有代码是数据科学家的宝贵技能。这可能需要一些逆向工程的技巧。因为开源软件是免费的，有时文档不全，所以你必须自己弄清楚它是如何工作的。让我们花点时间，将这种技能应用到当前的问题上。
- en: In previous chapters, we took advantage of the gallery examples provided by
    open source modules such as turtle and matplotlib. The holoviews library also
    has a gallery (*[http://holoviews.org/gallery/index.html](http://holoviews.org/gallery/index.html)*),
    and it includes Texas Choropleth Example, a choropleth map of the Texas unemployment
    rate in 2009 ([Figure 11-6](ch11.xhtml#ch011fig6)).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们利用了像turtle和matplotlib这样的开源模块提供的图库示例。holoviews库也有一个图库（* [http://holoviews.org/gallery/index.html](http://holoviews.org/gallery/index.html)
    *），其中包括德克萨斯州分层图示例，这是一张2009年德克萨斯州失业率的分层地图（见[图 11-6](ch11.xhtml#ch011fig6)）。
- en: '![Image](../images/fig11_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_06.jpg)'
- en: 'Figure 11-6: Choropleth map of the 2009 Texas unemployment rate from the holoviews
    gallery'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-6：来自holoviews图库的2009年德克萨斯州失业率的分层地图
- en: '[Listing 11-1](ch11.xhtml#ch011list1) contains the code provided by holoviews
    for this map. You’ll build your project based on this example, but to do so, you’ll
    have to address two main differences. First, you plan to plot population density
    rather than unemployment rate. Second, you want a map of the conterminous United
    States, not just Texas.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 11-1](ch11.xhtml#ch011list1)包含了holoviews为该地图提供的代码。你将基于这个示例构建你的项目，但要做到这一点，你需要解决两个主要的差异。首先，你计划绘制人口密度，而不是失业率。其次，你想要一张包括美国本土的地图，而不仅仅是德克萨斯州。'
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 11-1: holoviews gallery code for generating the Texas choropleth'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11-1：生成德克萨斯州分层图的holoviews图库代码
- en: The code imports the data from the bokeh sample data ➊. You’ll need to know
    the format and content of both the unemployment and counties variables. The unemployment
    rate is accessed later using the unemployment variable and an index or key of
    cid, which may stand for “county ID” ➋. The program selects Texas, rather than
    the whole United States, based on a conditional using a state code ➌.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从bokeh示例数据 ➊ 中导入数据。你需要知道失业率和县数据这两个变量的格式和内容。失业率稍后将通过失业率变量和cid索引或键来访问，cid可能代表“县ID”
    ➋。该程序通过使用州代码来选择德克萨斯州，而不是整个美国 ➌。
- en: Let’s investigate this in the Python shell.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Python shell中探讨一下。
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Start by importing the bokeh sample data using the syntax from the gallery example.
    Next, use the type() built-in function to check the data type of the unemployment
    variable ➊. You’ll see that it’s a dictionary.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用图库示例中的语法导入bokeh示例数据。接着，使用内置函数type()检查失业率变量 ➊ 的数据类型。你会看到它是一个字典。
- en: Now, use dictionary comprehension to make a new dictionary comprising the first
    two lines in unemployment ➋. Print the results, and you’ll see that the keys are
    tuples and the values are numbers, presumably the unemployment rate in percent
    ➌. Check the data type for the numbers in the key. They’re integers rather than
    strings ➍.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用字典推导式生成一个新的字典，包含失业率中前两行的数据 ➋。打印结果，你会看到键是元组，值是数字，推测是以百分比表示的失业率 ➌。检查键中数字的数据类型。它们是整数，而不是字符串
    ➍。
- en: Compare the output at ➌ to the first two rows in the CSV file in [Figure 11-3](ch11.xhtml#ch011fig3).
    The first number in the key tuple, presumably a state code, comes from column
    B. The second number in the tuple, presumably a county code, comes from column
    C. The unemployment rate is obviously stored in column I.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ➌ 处的输出与[图 11-3](ch11.xhtml#ch011fig3)中CSV文件的前两行进行对比。键元组中的第一个数字，推测为州代码，来自第B列。元组中的第二个数字，推测为县代码，来自第C列。失业率显然存储在第I列。
- en: Now compare the contents of unemployment to [Figure 11-4](ch11.xhtml#ch011fig4),
    representing the county data. The *STATE num* (column J) and *COUNTY num* (column
    K) obviously hold the components of the key tuple.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将失业率的数据与[图 11-4](ch11.xhtml#ch011fig4)中的县数据进行对比。*STATE num*（第J列）和*COUNTY num*（第K列）显然包含了键元组的组成部分。
- en: So far so good, but if you look at the population data file in [Figure 11-5](ch11.xhtml#ch011fig5),
    you won’t find a state or county code to direct into a tuple. There are numbers
    in column E, however, that match those in the last column of the county data,
    labeled *FIPS formula* in [Figure 11-4](ch11.xhtml#ch011fig4). These FIPS numbers
    seem to relate to the state and county codes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止都很好，但如果你查看[图 11-5](ch11.xhtml#ch011fig5)中的人口数据文件，你会发现没有州或县的代码可以直接转换为元组。然而，第E列中的数字与县数据的最后一列匹配，那个列被标注为*FIPS公式*（见[图
    11-4](ch11.xhtml#ch011fig4)）。这些FIPS号码似乎与州和县的代码有关。
- en: As it turns out, a *Federal Information Processing Series (FIPS)* code is basically
    a ZIP code for a county. The FIPS code is a five-digit numeric code assigned to
    each county by the National Institute of Standards and Technology. The first two
    digits represent the county’s state, and the final three digits represent the
    county ([Table 11-4](ch11.xhtml#ch011table4)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，*联邦信息处理系列（FIPS）* 代码基本上是县区的邮政编码。FIPS 代码是由国家标准与技术研究院分配给每个县区的五位数字编码。前两位数字代表该县所在的州，后三位数字代表该县（见
    [表 11-4](ch11.xhtml#ch011table4)）。
- en: '**Table 11-4:** Identifying US Counties Using a FIPS Code'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 11-4：** 使用 FIPS 代码识别美国县区'
- en: '| US County | State Code | County Code | FIPS |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 美国县区 | 州代码 | 县区代码 | FIPS |'
- en: '| --- | --- | --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Baldwin County, AL | 01 | 003 | 1003 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 鲍德温县，AL | 01 | 003 | 1003 |'
- en: '| Johnson County, IA | 19 | 103 | 19103 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 约翰逊县，IA | 19 | 103 | 19103 |'
- en: Congratulations, you now know how to link the US census data to the county shapes
    in the bokeh sample data. It’s time to write the final code!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，现在你知道如何将美国人口普查数据与 Bokeh 样本数据中的县区形状关联起来了。现在是时候编写最终代码了！
- en: '***The Choropleth Code***'
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Choropleth 代码***'
- en: The *choropleth.py* program includes code for both cleaning the data and plotting
    the choropleth map. You can find a copy of the code, along with the population
    data, in the *Chapter_11* folder downloadable from the book’s website at *[https://nostarch.com/real-world-python/](https://nostarch.com/real-world-python/)*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*choropleth.py* 程序包括清理数据和绘制 choropleth 地图的代码。你可以在书籍网站的 *[Chapter_11](https://nostarch.com/real-world-python/)*
    文件夹中下载该代码以及人口数据的副本。'
- en: '**Importing Modules and Data and Constructing a Dataframe**'
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导入模块和数据并构建数据框**'
- en: '[Listing 11-2](ch11.xhtml#ch011list2) imports modules and the bokeh county
    sample data that includes coordinates for all the US county polygons. It also
    loads and creates a dataframe object to represent the population data. Then it
    begins the process of cleaning and preparing the data for use with the county
    data.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 11-2](ch11.xhtml#ch011list2) 导入了模块和包含所有美国县区多边形坐标的 Bokeh 县区样本数据。它还加载并创建了一个数据框对象，用于表示人口数据。然后，它开始清理和准备数据，以便与县区数据一起使用。'
- en: '[PRE5]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 11-2: Importing modules and data, creating a dataframe, and renaming
    columns'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-2：导入模块和数据，创建数据框，并重命名列
- en: Start by importing abspath from the operating system library. You’ll use this
    to find the absolute path to the choropleth map HTML file after it’s created.
    Then import the webbrowser module so you can launch the HTML file. You need this
    because the holoviews library is designed to work with a Jupyter Notebook and
    won’t automatically display the map without some help.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从操作系统库导入 abspath。你将使用它找到创建后的 choropleth 地图 HTML 文件的绝对路径。然后导入 webbrowser 模块，这样你就可以启动
    HTML 文件。你需要这个，因为 holoviews 库是为 Jupyter Notebook 设计的，没有一些帮助，它不会自动显示地图。
- en: Next, import pandas and repeat the holoviews imports from the gallery example
    in [Listing 11-1](ch11.xhtml#ch011list1). Note that you must specify bokeh as
    the holoviews extension, or *backend* ➊. This is because holoviews can work with
    other plotting libraries, such as matplotlib, and needs to know which one to use.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，导入 pandas 并重复 [列表 11-1](ch11.xhtml#ch011list1) 中的 holoviews 导入。注意，你必须指定
    bokeh 作为 holoviews 的扩展，或称为 *backend* ➊。这是因为 holoviews 可以与其他绘图库（如 matplotlib）一起使用，因此需要知道使用哪一个。
- en: You brought in the geographical data with the imports. Now load the population
    data using pandas. This module includes a set of input/output API functions to
    facilitate reading and writing data. These *readers* and *writers* address major
    formats such as comma-separated values (read_csv, to_csv), Excel (read_excel,
    to_excel), Structured Query Language (read_sql, to_sql), HyperText Markup Language
    (read_html, to_html), and more. In this project, you’ll work with the CSV format.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过导入操作获得了地理数据。现在，使用 pandas 加载人口数据。这个模块包括一组输入/输出 API 函数，方便数据的读取和写入。这些 *读取器*
    和 *写入器* 处理常见格式，如逗号分隔值（read_csv, to_csv）、Excel（read_excel, to_excel）、结构化查询语言（read_sql,
    to_sql）、超文本标记语言（read_html, to_html）等。在这个项目中，你将使用 CSV 格式。
- en: In most cases, you can read CSV files without specifying the character encoding.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你可以在不指定字符编码的情况下读取 CSV 文件。
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this case, however, you’ll get the following error:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种情况下，你会遇到以下错误：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That’s because the file contains characters encoded with Latin-1, also known
    as ISO-8859-1, rather than the default UTF-8 encoding. Adding the encoding argument
    will fix the problem ➋.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为文件包含使用 Latin-1 编码（也称为 ISO-8859-1）而非默认的 UTF-8 编码的字符。添加编码参数将解决这个问题 ➋。
- en: Now, turn the population data file into a tabular dataframe by calling the DataFrame()
    constructor. You don’t need all the columns in the original file, so pass the
    names of the column you want to keep to the constructor. These represent columns
    E, G, and M in [Figure 11-5](ch11.xhtml#ch011fig5), or the FIPS code, county name
    (without the state name), and population density, respectively.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过调用 DataFrame() 构造函数将人口数据文件转化为一个表格数据框。你不需要原始文件中的所有列，因此将你想保留的列名称传递给构造函数。这些列分别代表[图
    11-5](ch11.xhtml#ch011fig5)中的 E 列、G 列和 M 列，即 FIPS 代码、县名（不包含州名）和人口密度。
- en: Next, use the rename() dataframe method to make the column labels shorter and
    more meaningful. Call them *fips*, *County*, and *Density*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 rename() 数据框方法将列标签改得更短且更有意义。将它们命名为 *fips*、*County* 和 *Density*。
- en: 'Finish the listing by printing the first few rows of the dataframe using the
    head() method and by printing the shape of the dataframe using its shape attribute.
    By default, the head() method prints the first five rows. If you want to see more
    rows, you can pass it the number as an argument, such as head(20). You should
    see the following output in the shell:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 完成列表后，使用 head() 方法打印数据框的前几行，并使用 shape 属性打印数据框的形状。默认情况下，head() 方法打印前五行。如果你想查看更多行，可以传递行数作为参数，比如
    head(20)。你应该会在 shell 中看到以下输出：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that the first two rows (rows 0 and 1) are not useful. In fact, you can
    glean from this output that each state will have a row for its name, which you’ll
    want to delete. You can also see from the shape attribute that there are 3,274
    rows in the dataframe.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前两行（第 0 行和第 1 行）并不有用。事实上，从输出中可以看出，每个州会有一行用于显示州名，而这些行你需要删除。从 shape 属性中你还可以看到，数据框中一共有
    3,274 行。
- en: '**Removing Extraneous State Name Rows and Preparing the State and County Codes**'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**删除多余的州名行并准备州和县代码**'
- en: '[Listing 11-3](ch11.xhtml#ch011list3) removes all rows whose FIPS code is less
    than or equal to 100\. These are header rows that indicate where a new state begins.
    It then creates new columns for the state and county codes, which it derives from
    the existing column of FIPS codes. You’ll use these later to select the proper
    county outline from the bokeh sample data.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 11-3](ch11.xhtml#ch011list3) 删除了所有 FIPS 代码小于或等于 100 的行。这些是指示新州开始的头部行。然后，它为州和县代码创建了新的列，这些列是从现有的
    FIPS 代码列派生出来的。你稍后会用这些列从 bokeh 示例数据中选择适当的县轮廓。'
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 11-3: Removing extraneous rows and preparing the state and county codes'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-3：删除多余的行并准备州和县代码
- en: To display the population density data in the county polygons, you need to turn
    it into a dictionary where the keys are a tuple of the state code and county code
    and the values are the density data. But as you saw previously, the population
    data does not include separate columns for the state and county codes; it has
    only the FIPS codes. So, you’ll need to split out the state and county components.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在县的多边形中显示人口密度数据，你需要将其转化为一个字典，其中键是由州代码和县代码组成的元组，值是密度数据。但正如你之前所看到的，人口数据中并没有单独的州和县代码列；它只有
    FIPS 代码。因此，你需要拆分出州和县的部分。
- en: 'First, get rid of all the noncounty rows. If you look at the previous shell
    output (or rows 3 and 4 in [Figure 11-5](ch11.xhtml#ch011fig5)), you’ll see that
    these rows do not include a four- or five-digit FIPS code. You can thus use the
    fips column to make a new dataframe, still named df, that preserves only rows
    with a fips value greater than 100\. To check that this worked, repeat the printout
    from the previous listing, as shown here:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，去除所有不包含县的数据行。如果查看之前的 shell 输出（或[图 11-5](ch11.xhtml#ch011fig5)中的第 3 和第 4 行），你会发现这些行并没有包含四位或五位的
    FIPS 代码。因此，你可以使用 fips 列创建一个新的数据框，仍命名为 df，只保留 FIPS 值大于 100 的行。为了检查这一操作是否有效，可以重复前面列出的打印输出，如下所示：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The two “bad” rows at the top of the dataframe are now gone, and based on the
    shape attribute, you’ve lost a total of 53 rows. These represent the header rows
    for the 50 states, United States, District of Columbia (DC), and Puerto Rico.
    Note that DC has a FIPS code of 11001 and Puerto Rico uses a state code of 72
    to go with the three-digit county code for its 78 municipalities. You’ll keep
    DC but remove Puerto Rico later.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框顶部的两行“坏”数据现在已经消失，根据shape属性，你已经丢失了总计53行。这些行代表了50个州、美国、哥伦比亚特区（DC）和波多黎各的表头行。注意，DC的FIPS代码为11001，波多黎各使用72作为州代码，与其78个市的三位县代码配合使用。你将保留DC，但稍后会删除波多黎各。
- en: Next, create columns for state and county code numbers. Name the first new column
    state_id ➊. Dividing by 1,000 using floor division (//) returns the quotient with
    the digits after the decimal point removed. Since the last three numbers of the
    FIPS code are reserved for county codes, this leaves you with the state code.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为州和县代码数字创建列。将第一列命名为state_id ➊。使用地板除法（//）除以1000返回商，去除小数点后的数字。由于FIPS代码的最后三位保留给县代码，因此这将给你留下州代码。
- en: Although // returns an integer, the new dataframe column uses the float datatype
    by default. But our analysis of the bokeh sample data indicated that it used integers
    for these codes in the key tuples. Convert the column to the integer datatype
    using the pandas astype() method and pass it 'int64'.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然//返回整数，但新的数据框列默认使用浮点数据类型。但我们对bokeh示例数据的分析表明，它在关键元组中使用的是整数类型的这些代码。使用pandas的astype()方法将该列转换为整数数据类型，并传递'int64'。
- en: Now, make a new column for the county code. Name it cid so it will match the
    terminology used in the holoviews choropleth example. Since you’re after the last
    three digits in the FIPS code, use the modulo operator (%). This returns the remainder
    from the division of the first argument to the second. Convert this column to
    the integer datatype as in the previous line.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个新的列用于县代码。将其命名为cid，以便与holoviews choropleth示例中使用的术语一致。由于你需要的是FIPS代码的最后三位数字，因此使用取余运算符（%）。它返回第一个参数除以第二个参数的余数。像前一行一样，将此列转换为整数数据类型。
- en: Print the output again, only this time call the info() method on the dataframe
    ➋. This method returns a concise summary of the dataframe, including datatypes
    and memory usage.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打印输出，但这次调用数据框的info()方法 ➋。此方法返回数据框的简洁摘要，包括数据类型和内存使用情况。
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see from the columns and information summary, the state_id and cid
    numbers are integer values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从列和信息摘要中看到的那样，state_id和cid数字是整数值。
- en: The state codes in the first five rows are all single-digit numbers, but it’s
    possible for state codes to have double digits, as well. Take the time to check
    the state codes of later rows. You can do this by calling the loc() method on
    the dataframe and passing it a high row number ➌. This will let you check double-digit
    state codes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 前五行中的州代码都是单一数字，但州代码也可能是两位数。花些时间检查后续行的州代码。你可以通过在数据框上调用loc()方法并传递一个较大的行号 ➌ 来做到这一点。这将让你检查双位数的州代码。
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The fips, state_id, and cid all look reasonable. This completes the data preparation.
    The next step is to turn this data into a dictionary that holoviews can use to
    make the choropleth map.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: fips、state_id和cid看起来都很合理。这完成了数据的准备工作。下一步是将这些数据转换成holoviews可以用来制作choropleth地图的字典。
- en: '**Preparing the Data for Display**'
  id: totrans-144
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**准备数据以供显示**'
- en: '[Listing 11-4](ch11.xhtml#ch011list4) converts the state and county IDs and
    the density data into separate lists. It then recombines them into a dictionary
    with the same format as the unemployment dictionary used in the holoviews gallery
    example. It also lists the states and territories to exclude from the map and
    makes a list of the data needed to plot the choropleth map.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表11-4](ch11.xhtml#ch011list4)将州和县ID以及密度数据转换为单独的列表。然后，它将这些数据重新组合成一个字典，格式与holoviews画廊示例中使用的失业字典相同。它还列出了要从地图中排除的州和领土，并列出了绘制choropleth地图所需的数据。'
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 11-4: Preparing the population data for plotting'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11-4：为绘制准备人口数据
- en: 'Earlier, we looked at the unemployment variable in the holoviews gallery example
    and found that it was a dictionary. Tuples of the state and county codes served
    as the keys, and the unemployment rates served as the values, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们查看了holoviews画廊示例中的失业变量，并发现它是一个字典。州和县代码的元组作为键，失业率作为值，如下所示：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To create a similar dictionary for the population data, first use the pandas
    tolist() method to create separate lists of the dataframe’s state_id, cid, and
    Density columns. Then, use the built-in zip() function to merge the state and
    county code lists as tuple pairs. Create the final dictionary, popl_dens_dict,
    by zipping this new tuple_list with the density list. (The name tuple_list is
    misleading; technically, it’s a tuple_tuple.) That’s it for the data preparation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建类似的字典来存储人口数据，首先使用 pandas 的 tolist() 方法将数据框的 state_id、cid 和 Density 列分别创建成单独的列表。然后，使用内置的
    zip() 函数将州和县代码列表合并成元组对。通过将这个新的元组列表与密度列表打包，创建最终的字典 popl_dens_dict。（tuple_list 这个名字有些误导，严格来说它是一个
    tuple_tuple。）数据准备工作就完成了。
- en: The *Walking Dead* survivors will be lucky to get out of Atlanta. Let’s forget
    about them reaching Alaska. Make a tuple, named EXCLUDED, of states and territories
    that are in the bokeh county data but aren’t part of the conterminous United States.
    These include Alaska, Hawaii, Puerto Rico, Guam, Virgin Islands, Northern Mariana
    Islands, and American Samoa. To reduce typing, you can use the abbreviations provided
    as a column in the county dataset (see [Figure 11-4](ch11.xhtml#ch011fig4)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*行尸走肉*中的幸存者要是能从亚特兰大活着出去就已经幸运了。我们还是忘了他们能到达阿拉斯加吧。创建一个名为 EXCLUDED 的元组，包含在 bokeh
    县数据中但不属于美国本土的州和地区。这些包括阿拉斯加、夏威夷、波多黎各、关岛、维尔京群岛、北马里亚纳群岛和美属萨摩亚。为了减少打字量，你可以使用县数据集中提供的州缩写（参见[图
    11-4](ch11.xhtml#ch011fig4)）。'
- en: Next, as in the holoviews example, make a dictionary and put it in a list named
    counties. Here’s where you add the population density data. Link it to the proper
    county using the cid county identifier number. Use a conditional to apply the
    EXCLUDED tuple.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，像 holoviews 示例一样，创建一个字典并将其放入一个名为 counties 的列表中。在这里，你需要添加人口密度数据。使用 cid 县标识符号将其链接到正确的县。使用条件语句来应用
    EXCLUDED 元组。
- en: 'If you print the first index in this list, you’ll get the (truncated) output
    that follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印出该列表的第一个索引，你将得到以下（被截断的）输出：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Density key-value pair now replaces the unemployment rate pair used in the
    holoviews gallery example. Next up, plotting the map!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Density 键值对替换了在 holoviews 示例中使用的失业率键值对。接下来，开始绘制地图！
- en: '**Plotting the Choropleth Map**'
  id: totrans-156
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**绘制 choropleth 地图**'
- en: '[Listing 11-5](ch11.xhtml#ch011list5) creates the choropleth map, saves it
    as an *.html* file, and opens it with the webbrowser.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 11-5](ch11.xhtml#ch011list5) 创建 choropleth 地图，将其保存为 *.html* 文件，并通过 webbrowser
    打开。'
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 11-5: Creating and plotting the choropleth map'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-5：创建并绘制 choropleth 地图
- en: 'According to the holoviews documentation, the Polygons() class creates a contiguous
    filled area in a 2D space as a list of polygon geometries. Name a variable choropleth
    and pass Polygons() the counties variable and the dictionary keys, including the
    lons and lats used to draw the county polygons. Also pass it the county names
    and population density keys. The holoviews hover tool will use this tuple, (''detailed
    name'', ''County''), to show you the full county name, such as County: Claiborne
    County, Mississippi, when you move the cursor around the map ([Figure 11-7](ch11.xhtml#ch011fig7)).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '根据 holoviews 文档，Polygons() 类在 2D 空间中创建一个连通的填充区域，作为多边形几何体的列表。定义一个变量 choropleth
    并将 counties 变量和字典键（包括用于绘制县多边形的 lons 和 lats）传递给 Polygons()。同时，传递县名和人口密度键。holoviews
    的悬停工具将使用这个元组（''详细名称''，''County''），在你移动鼠标时显示完整的县名，比如 "County: Claiborne County,
    Mississippi"（见[图 11-7](ch11.xhtml#ch011fig7)）。'
- en: '![Image](../images/fig11_07.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_07.jpg)'
- en: 'Figure 11-7: Choropleth map with the hover feature active'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-7：启用悬停功能的 choropleth 地图
- en: Next, set the options for the map ➊. First, permit use of a logarithmic color
    bar by setting the logz argument to True.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，设置地图的选项 ➊。首先，通过将 logz 参数设置为 True，允许使用对数色条。
- en: The holoviews window will come with a set of default tools such as pan, zoom,
    save, refresh, and so on (see the upper-right corner of [Figure 11-7](ch11.xhtml#ch011fig7)).
    Use the tools argument to add the hover feature to this list. This allows you
    query the map and get both the county name and detailed information on the population
    density.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: holoviews 窗口将带有一组默认工具，如平移、缩放、保存、刷新等（参见[图 11-7](ch11.xhtml#ch011fig7)的右上角）。使用
    tools 参数将悬停功能添加到此列表中。这允许你查询地图，并获取县名和人口密度的详细信息。
- en: You’re not making a standard plot with an annotated *x*-axis and *y*-axis, so
    set these to None. Likewise, don’t show a grid or frame around the map.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不是在创建一个标准的带有注释的 *x* 轴和 *y* 轴的图形，所以将它们设置为 None。同样，不要显示地图周围的网格或框架。
- en: Set the width and height of the map in pixels. You may want to adjust this for
    your monitor. Next set colorbar to True and place the toolbar at the top of the
    display.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 设置地图的宽度和高度（以像素为单位）。你可能需要根据你的显示器调整这些设置。接下来，将colorbar设置为True，并将工具栏放置在显示屏的顶部。
- en: Since you want to color the counties based on population density, set the color_index
    argument to Density, which represents the values in popl_dens_dict. For the fill
    colors, use the Greys cmap. If you want to use brighter colors, you can find a
    list of available colormaps at *[http://build.holoviews.org/user_guide/Colormaps.html](http://build.holoviews.org/user_guide/Colormaps.html)*.
    Be sure to choose one with “bokeh” in the name. Finish the color scheme by selecting
    a line color for the county outlines. Good choices for a gray colormap are None,
    'white', or 'black'.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你希望根据人口密度为县区着色，因此将color_index参数设置为Density，它代表popl_dens_dict中的值。对于填充颜色，使用Greys色图。如果你希望使用更亮的颜色，可以在*[http://build.holoviews.org/user_guide/Colormaps.html](http://build.holoviews.org/user_guide/Colormaps.html)*找到可用色图的列表。确保选择一个名称中包含“bokeh”的色图。完成颜色方案后，选择一个线条颜色用于县区轮廓。对于灰色色图，好的选择包括None、'white'或'black'。
- en: Complete the options by adding a title. The choropleth map is now ready for
    plotting.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加标题来完成选项。现在，分区地图已经准备好绘制。
- en: To save your map in the current directory, use the holoviews save() method and
    pass it the choropleth variable, a file name with the *.html* extension, and the
    name of the plotting backend being used ➋. As mentioned previously, holoviews
    is designed for use with a Jupyter Notebook. If you want the map to automatically
    pop up on your browser, first assign the full path to the saved map to a url variable.
    Then use the webbrowser module to open url and display the map ([Figure 11-8](ch11.xhtml#ch011fig8)).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的地图保存在当前目录中，使用holoviews的save()方法，并传递给它choropleth变量、一个带有*.html*扩展名的文件名以及正在使用的绘图后端名称
    ➋。如前所述，holoviews是为Jupyter Notebook设计的。如果你希望地图自动弹出在浏览器中，首先将保存的地图的完整路径赋值给一个url变量。然后，使用webbrowser模块打开url并显示地图（[图11-8](ch11.xhtml#ch011fig8)）。
- en: '![Image](../images/fig11_08.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_08.jpg)'
- en: 'Figure 11-8: The 2010 population density choropleth map. Lighter colors represent
    lower population density'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-8：2010年人口密度分区地图。较浅的颜色表示较低的人口密度
- en: You can use the toolbar at the top of the map to pan, zoom (using a box or lasso),
    save, refresh, or hover. The hover tool, shown in [Figure 11-7](ch11.xhtml#ch011fig7),
    will help you find the least populated counties in places where the map shading
    makes the difference hard to distinguish visually.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用地图顶部的工具栏来平移、缩放（使用框选或套索）、保存、刷新或悬停。悬停工具，如[图11-7](ch11.xhtml#ch011fig7)所示，将帮助你在地图阴影使差异难以视觉区分的地方找到人口最少的县区。
- en: '**NOTE**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The Box Zoom tool permits a quick view of a rectangular area but may stretch
    or squeeze the map axes. To preserve the map’s aspect ratio when zooming, use
    a combination of the Wheel Zoom and Pan tools.*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*Box Zoom工具允许快速查看矩形区域，但可能会拉伸或压缩地图坐标轴。为了在缩放时保持地图的纵横比，可以结合使用Wheel Zoom和Pan工具。*'
- en: '***Planning the Escape***'
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***逃生计划***'
- en: The Chisos Mountains, an extinct supervolcano in Big Bend National Park, might
    be one of the best places on Earth to ride out a zombie apocalypse. Remote and
    fortress-like in appearance ([Figure 11-9](ch11.xhtml#ch011fig9)), the mountains
    tower 4,000 feet above the surrounding desert plain, reaching a maximum elevation
    of almost 8,000 feet. At their heart lies a natural basin with park facilities,
    including a lodge, cabins, store, and restaurant. Fish and game are abundant in
    the area, desert springs provide fresh water, and the banks of the Rio Grande
    are suitable for farming.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 奇索斯山脉（Chisos Mountains）是大弯国家公园（Big Bend National Park）中的一座灭绝超级火山，可能是地球上度过僵尸末日的最佳地点之一。它孤立且外形像堡垒（[图11-9](ch11.xhtml#ch011fig9)），山脉比周围的沙漠平原高出4,000英尺，最高海拔接近8,000英尺。山脉的中心是一个天然盆地，里面有公园设施，包括旅馆、小屋、商店和餐厅。该地区鱼类和野生动物丰富，沙漠泉水提供淡水，里奥格兰德河的河岸适合农业种植。
- en: '![Image](../images/fig11_09.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_09.jpg)'
- en: 'Figure 11-9: The Chisos Mountains of west Texas (left) with 3D relief map representation
    (right)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-9：德克萨斯州西部的奇索斯山脉（左）及其3D地形图（右）
- en: With your choropleth map, you can quickly plan a route to this natural fortress
    far, far away. But first, you need to escape Atlanta. The shortest route out of
    the metropolitan area is a narrow passage squeezed between the cities of Birmingham
    and Montgomery in Alabama ([Figure 11-10](ch11.xhtml#ch011fig10)). You can skirt
    the next big city, Jackson, Mississippi, by going either north or south. To choose
    the best route, however, you need to look farther ahead.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的地理信息图，你可以迅速规划一条通往远处自然堡垒的路线。但首先，你需要逃离亚特兰大。离开大都市区的最短路线是位于阿拉巴马州伯明翰和蒙哥马利之间的一条狭窄通道（见[图11-10](ch11.xhtml#ch011fig10)）。你可以选择向北或向南绕过下一个大城市杰克逊，密西西比州。不过，为了选择最佳路线，你需要往前看得更远。
- en: '![Image](../images/fig11_10.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_10.jpg)'
- en: 'Figure 11-10: Escape from Atlanta'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-10：逃离亚特兰大
- en: The southerly route around Jackson is shorter but forces the survivors to pass
    over the highly developed I-35 corridor, anchored by San Antonio in the south
    and Dallas–Fort Worth (DFW) in the north ([Figure 11-11](ch11.xhtml#ch011fig11)).
    This creates a potentially dangerous choke point at Hill County, Texas (circled
    in [Figure 11-11](ch11.xhtml#ch011fig11)).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 绕过杰克逊的南方路线较短，但迫使幸存者必须经过高度发达的I-35走廊，该走廊以南部的圣安东尼奥和北部的达拉斯–沃斯堡（DFW）为中心（见[图11-11](ch11.xhtml#ch011fig11)）。这在德克萨斯州希尔县（[图11-11](ch11.xhtml#ch011fig11)中圈出的地方）形成了一个潜在的危险瓶颈。
- en: '![Image](../images/fig11_11.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_11.jpg)'
- en: 'Figure 11-11: The way west'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-11：西行路线
- en: Alternatively, the northerly route through the Red River Valley, between Oklahoma
    and Texas, would be longer but safer, especially if you took advantage of the
    navigable river. Once west of Fort Worth, the survivors could cross the river
    and turn south to salvation.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，通过俄克拉荷马州和德克萨斯州之间的红河谷的北方路线，虽然更长，但更安全，尤其是如果你利用了可通航的河流。一旦穿过沃斯堡以西，幸存者可以过河并向南行进，找到救赎之路。
- en: This type of planning would be even simpler if holoviews provided a slider tool
    that allowed you to interactively alter the color bar. For example, you could
    filter out or change the shading of counties by simply dragging your cursor up
    and down the legend. This would make it easier to find connected routes through
    the lowest population counties.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果holoviews提供一个允许你交互式地改变颜色条的滑动工具，这种类型的规划将变得更加简单。例如，你可以通过简单地上下拖动光标来过滤或改变县的阴影。这将使得找到通过人口最少的县的连接路线变得更加容易。
- en: 'Unfortunately, a slider tool isn’t one of the holowviews window options. Since
    you know pandas, though, that won’t stop you. Simply add the following snippet
    of code after the line that prints the information at location 500:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，滑动工具并不是holoviews窗口选项之一。然而，由于你了解pandas，这并不会阻止你。只需在打印位置500的信息行之后添加以下代码片段：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will change the population density values in the dataframe, setting those
    greater than or equal to 65 to a constant value of 1000. Run the program again,
    and you’ll get the plot in [Figure 11-12](ch11.xhtml#ch011fig12). With the new
    values, the San Antonio–Austin–Dallas barrier becomes more apparent, as does the
    relative safety of the Red River Valley that forms the northern border of east
    Texas.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将改变数据框中的人口密度值，将那些大于或等于65的值设置为常量1000。重新运行程序后，你将看到[图11-12](ch11.xhtml#ch011fig12)中的图表。通过这些新值，圣安东尼奥–奥斯汀–达拉斯的屏障更加明显，红河谷（它形成了东德克萨斯州的北部边界）的相对安全性也更加明显。
- en: You may be wondering, where did the survivors go in the TV show? They went nowhere!
    They spent the first four seasons in the vicinity of Atlanta, first camping at
    Stone Mountain and then holed up in a prison near the fictional town of Woodbury
    ([Figure 11-13](ch11.xhtml#ch011fig13)).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道，电视节目中的幸存者去了哪里？他们什么也没去！他们在亚特兰大附近度过了前四季，最初露营在石山，然后藏身于虚构小镇伍德伯里的监狱附近（见[图11-13](ch11.xhtml#ch011fig13)）。
- en: '![Image](../images/fig11_12.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_12.jpg)'
- en: 'Figure 11-12: Counties with more than 65 people per square mile shaded black'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-12：每平方英里超过65人的县以黑色阴影显示
- en: '![Image](../images/fig11_13.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig11_13.jpg)'
- en: 'Figure 11-13: Location of Stone Mountain and the fictional town of Woodbury'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-13：石山和虚构小镇伍德伯里的位置
- en: Stone Mountain is less than 20 miles from downtown Atlanta and in DeKalb County,
    with 2,586 people per square mile. Woodbury (the real town of Senoia) is only
    35 miles from downtown Atlanta and on the border of Coweta County, with 289 people
    per square mile, and Fayette County, with 549 people per square mile. No wonder
    these guys had so much trouble. If only there had been a data scientist in the
    group.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 斯通山距离亚特兰大市中心不到20英里，位于德卡尔布县，每平方英里有2,586人。伍德伯里（即实际的塞诺伊镇）距离亚特兰大市中心仅35英里，位于科韦塔县和费耶特县的边界，每平方英里有289人和549人。难怪这些家伙会遇到这么多麻烦。如果当时小组里有一位数据科学家就好了。
- en: '**Summary**'
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you got to work with the Python Data Analysis Library (pandas)
    and the bokeh and holoviews visualization modules. In the process, you did some
    real-world data wrangling to clean and link data from different sources.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学习如何使用Python数据分析库（pandas）以及bokeh和holoviews可视化模块。在这个过程中，你进行了实际的数据清洗和整理，将来自不同来源的数据进行连接。
- en: '**Further Reading**'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: “If the Zombie Apocalypse Happens, Scientists Say You Should Run for the Hills”
    (Business Insider, 2017), by Kevin Loria, describes the application of standard
    disease models to infection rates in a theoretical zombie outbreak.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: “如果僵尸 apocalypse 发生，科学家建议你应该跑到山里去”（《商业内幕》，2017年），作者凯文·洛里亚，描述了将标准疾病模型应用于假设僵尸疫情中的感染率。
- en: “What to Consider When Creating Choropleth Maps” (*Chartable*, 2018), by Lisa
    Charlotte Rost, provides useful guidelines for making choropleth maps. You can
    find it at *[https://blog.datawrapper.de/choroplethmaps/](https://blog.datawrapper.de/choroplethmaps/)*.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: “制作分层地图时需要考虑的因素”（*Chartable*，2018年），作者丽莎·夏洛特·罗斯特，提供了制作分层地图的实用指南。你可以在* [https://blog.datawrapper.de/choroplethmaps/](https://blog.datawrapper.de/choroplethmaps/)
    *找到它。
- en: '“Muddy America: Color Balancing the Election Map—Infographic” (STEM Lounge,
    2019) by Larry Weru, demonstrates ways to increase the useful detail in choropleth
    maps, using the iconic red-blue United States election map as an example.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: “浑浊的美国：选举地图的颜色平衡——信息图表”（STEM Lounge，2019年），作者拉里·韦鲁，展示了如何增加分层地图中有用细节的方法，并以具有标志性的红蓝美国选举地图为例。
- en: '*Python Data Science Handbook: Essential Tools for Working with Data* (O’Reilly
    Media, 2016), by Jake VanderPlas, is a thorough reference for important Python
    data science tools, including pandas.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python数据科学手册：数据工作必备工具*（O''Reilly出版社，2016年），作者杰克·范德普拉斯，是一本详细的参考书，涵盖了Python数据科学工具的相关内容，包括pandas。'
- en: '*Beneath the Window: Early Ranch Life in the Big Bend Country* (Iron Mountain
    Press, 2003), by Patricia Wilson Clothier, is an engaging recollection of growing
    up in the early 20th century on a vast ranch in the Big Bend country of Texas,
    before it became a national park. It provides insight into how apocalypse survivors
    might deal with life in the harsh country.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*窗下：大弯国家早期牧场生活*（《铁山出版社》，2003年），作者帕特里夏·威尔逊·克洛瑟，是一本生动的回忆录，讲述了她在20世纪初在德克萨斯州大弯国家的一个广阔牧场上长大，那个地方在成为国家公园之前的样子。它提供了对末日幸存者如何应对严酷环境的见解。'
- en: '*Game Theory: Real Tips for SURVIVING a Zombie Apocalypse (7 Days to Die)*
    (The Game Theorists, 2016) is a video on the best place *in the world* to escape
    a zombie apocalypse. Unlike *The Walking Dead*, the video assumes that the zombie
    virus can be transmitted by mosquitoes and ticks, and it selects the location
    with this in mind. It’s available online.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*博弈论：在僵尸末日中生存的真正技巧（7天生存挑战）*（《游戏理论家》，2016年）是一部关于*世界上*最佳逃生地的视频。与*行尸走肉*不同，这段视频假设僵尸病毒可以通过蚊子和蜱虫传播，因此选择了考虑到这一点的地点。该视频可以在线观看。'
- en: '**Challenge Project: Mapping US Population Change**'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**挑战项目：美国人口变化地图**'
- en: The US government will release population data from the 2020 census in 2021\.
    However, less accurate, intercensal population estimates for 2019 are currently
    available. Use one of these, along with the 2010 data from Project 15, to generate
    a new choropleth map that captures population change, by county, over that time
    period.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 美国政府将在2021年发布2020年人口普查数据。然而，2019年的跨普查人口估计数据虽然不那么精确，但已经可以使用。请利用这些数据，结合2010年的《项目15》数据，生成一个新的分层地图，展示该时间段内按县划分的人口变化。
- en: 'Hint: you can subtract columns in pandas dataframes to generate the difference
    data, as demonstrated in the toy example that follows. The 2020 population values
    represent dummy data.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：你可以在pandas数据框中相减列以生成差异数据，如下面的玩具示例所示。2020年的人口值代表的是虚拟数据。
- en: '[PRE18]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
