- en: Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NUMBERS AND SYMBOLS**'
  prefs: []
  type: TYPE_NORMAL
- en: 7×7 magic square, testing code for, [33](c02.xhtml#Page_33)
  prefs: []
  type: TYPE_NORMAL
- en: '`%` (modulo) operator'
  prefs: []
  type: TYPE_NORMAL
- en: Euclid’s algorithm, [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: Kurushima’s algorithm, [27](c02.xhtml#Page_27)–[28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: RPM (Russian peasant multiplication), [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: rules, [32](c02.xhtml#Page_32)
  prefs: []
  type: TYPE_NORMAL
- en: '`[]` (square brackets)'
  prefs: []
  type: TYPE_NORMAL
- en: using with list comprehension, [152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: using with `loc` functionality, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: acceleration
  prefs: []
  type: TYPE_NORMAL
- en: estimating for thrown ball, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: observing for thrown ball, [9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: AI (artificial intelligence). *See* *also* decision trees; game trees; random
    forests
  prefs: []
  type: TYPE_NORMAL
- en: adding enhancements, [199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: drawing the board, [187](c10.xhtml#Page_187)–[188](c10.xhtml#Page_188)
  prefs: []
  type: TYPE_NORMAL
- en: game trees and winning games, [190](c10.xhtml#Page_190)–[199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: la pipopipette, [186](c10.xhtml#Page_186)–[187](c10.xhtml#Page_187)
  prefs: []
  type: TYPE_NORMAL
- en: representing games, [188](c10.xhtml#Page_188)–[189](c10.xhtml#Page_189)
  prefs: []
  type: TYPE_NORMAL
- en: scoring games, [189](c10.xhtml#Page_189)–[190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: algebra, *[5](c01.xhtml#Page_5)*
  prefs: []
  type: TYPE_NORMAL
- en: algorithmic approach
  prefs: []
  type: TYPE_NORMAL
- en: Chapman’s algorithm, [9](c01.xhtml#Page_9)–[10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: thinking with your neck, [6](c01.xhtml#Page_6)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: algorithms, *[13](c02.xhtml#Page_13)*
  prefs: []
  type: TYPE_NORMAL
- en: adding theoretical precision, [63](c04.xhtml#Page_63)–[64](c04.xhtml#Page_64)
  prefs: []
  type: TYPE_NORMAL
- en: alpha–beta pruning, *[199](c10.xhtml#Page_199)*
  prefs: []
  type: TYPE_NORMAL
- en: avoiding use of, [48](c03.xhtml#Page_48)–[49](c03.xhtml#Page_49)
  prefs: []
  type: TYPE_NORMAL
- en: Babylonian, [90](c05.xhtml#Page_90)
  prefs: []
  type: TYPE_NORMAL
- en: Bowyer-Watson, [136](c07.xhtml#Page_136)
  prefs: []
  type: TYPE_NORMAL
- en: comparing to functions, [60](c04.xhtml#Page_60)–[63](c04.xhtml#Page_63)
  prefs: []
  type: TYPE_NORMAL
- en: counting steps, [57](c04.xhtml#Page_57)–[60](c04.xhtml#Page_60)
  prefs: []
  type: TYPE_NORMAL
- en: divide and conquer, *[69](c04.xhtml#Page_69)*
  prefs: []
  type: TYPE_NORMAL
- en: doing more with, [202](c11.xhtml#Page_202)–[203](c11.xhtml#Page_203)
  prefs: []
  type: TYPE_NORMAL
- en: finding maximum, [42](c03.xhtml#Page_42)
  prefs: []
  type: TYPE_NORMAL
- en: gaining expertise, [209](c11.xhtml#Page_209)
  prefs: []
  type: TYPE_NORMAL
- en: measuring efficiency, [55](c04.xhtml#Page_55)–[57](c04.xhtml#Page_57)
  prefs: []
  type: TYPE_NORMAL
- en: measuring time, [57](c04.xhtml#Page_57)
  prefs: []
  type: TYPE_NORMAL
- en: merging sorted lists, [67](c04.xhtml#Page_67)
  prefs: []
  type: TYPE_NORMAL
- en: minimax, [195](c10.xhtml#Page_195)–[198](c10.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: performing “by hand,” [14](c02.xhtml#Page_14)–[18](c02.xhtml#Page_18), [20](c02.xhtml#Page_20)–[21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: perturb search, *[112](c06.xhtml#Page_112)*
  prefs: []
  type: TYPE_NORMAL
- en: refraining from using, [48](c03.xhtml#Page_48)–[49](c03.xhtml#Page_49)
  prefs: []
  type: TYPE_NORMAL
- en: solving problems with, *[10](c01.xhtml#Page_10)*–[11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: tax rates, [39](c03.xhtml#Page_39)
  prefs: []
  type: TYPE_NORMAL
- en: using big O notation, [64](c04.xhtml#Page_64)–[65](c04.xhtml#Page_65)
  prefs: []
  type: TYPE_NORMAL
- en: within algorithms, [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: Al-Khwarizmi, [5](c01.xhtml#Page_5), [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: alpha–beta pruning algorithm, *[199](c10.xhtml#Page_199)*
  prefs: []
  type: TYPE_NORMAL
- en: analytic approach
  prefs: []
  type: TYPE_NORMAL
- en: Galilean model, [2](c01.xhtml#Page_2)–[4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: inner physicist, [5](c01.xhtml#Page_5)–[6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: solve-for-*x* strategy, [4](c01.xhtml#Page_4)–[5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: angle, tangent of, [8](c01.xhtml#Page_8)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: annealing, process of, *[117](c06.xhtml#Page_117)*
  prefs: []
  type: TYPE_NORMAL
- en: antidiagonal of square matrix, [26](c02.xhtml#Page_26)–[27](c02.xhtml#Page_27)
  prefs: []
  type: TYPE_NORMAL
- en: '`append()` method, RPM (Russian peasant multiplication), [18](c02.xhtml#Page_18)'
  prefs: []
  type: TYPE_NORMAL
- en: arguments, magic squares, [31](c02.xhtml#Page_31)–[34](c02.xhtml#Page_34)
  prefs: []
  type: TYPE_NORMAL
- en: artificial intelligence (AI), *[185](c10.xhtml#Page_185)*–*[186](c10.xhtml#Page_186)*
  prefs: []
  type: TYPE_NORMAL
- en: adding enhancements, [199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: drawing the board, [187](c10.xhtml#Page_187)–[188](c10.xhtml#Page_188)
  prefs: []
  type: TYPE_NORMAL
- en: game trees and winning games, [190](c10.xhtml#Page_190)–[199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: la pipopipette, [186](c10.xhtml#Page_186)–[187](c10.xhtml#Page_187)
  prefs: []
  type: TYPE_NORMAL
- en: representing games, [188](c10.xhtml#Page_188)–[189](c10.xhtml#Page_189)
  prefs: []
  type: TYPE_NORMAL
- en: scoring games, [189](c10.xhtml#Page_189)–[190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: asymptote, relationship to maximum, [39](c03.xhtml#Page_39)–[40](c03.xhtml#Page_40)
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: Babylonian algorithm, [90](c05.xhtml#Page_90)
  prefs: []
  type: TYPE_NORMAL
- en: ball. *See also* the outfielder problem
  prefs: []
  type: TYPE_NORMAL
- en: horizontal position of, [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: plotting trajectory of, [1](c01.xhtml#Page_1)–[2](c01.xhtml#Page_2), [4](c01.xhtml#Page_4),
    [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: tangent calculation, [8](c01.xhtml#Page_8)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: '`ball_trajectory()` function, [3](c01.xhtml#Page_3)–[4](c01.xhtml#Page_4)'
  prefs: []
  type: TYPE_NORMAL
- en: baseball, scientific features of, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: bell curve, *[95](c05.xhtml#Page_95)*–[96](c05.xhtml#Page_96)
  prefs: []
  type: TYPE_NORMAL
- en: '`between_spaces` variable, creating, [154](c08.xhtml#Page_154)'
  prefs: []
  type: TYPE_NORMAL
- en: big O notation
  prefs: []
  type: TYPE_NORMAL
- en: sleep sort’s runtime, [72](c04.xhtml#Page_72)
  prefs: []
  type: TYPE_NORMAL
- en: using, *[64](c04.xhtml#Page_64)*–[65](c04.xhtml#Page_65)
  prefs: []
  type: TYPE_NORMAL
- en: billiard balls and randomness, [91](c05.xhtml#Page_91)
  prefs: []
  type: TYPE_NORMAL
- en: binary branching process, using with decision trees, [166](c09.xhtml#Page_166)–[167](c09.xhtml#Page_167)
  prefs: []
  type: TYPE_NORMAL
- en: binary expansion, *[17](c02.xhtml#Page_17)*
  prefs: []
  type: TYPE_NORMAL
- en: binary search, [73](c04.xhtml#Page_73)–[75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: bisect, geometric terminology, *[130](c07.xhtml#Page_130)*
  prefs: []
  type: TYPE_NORMAL
- en: bits, string of, *[97](c05.xhtml#Page_97)*–[98](c05.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: board, drawing for dots and boxes game, [187](c10.xhtml#Page_187)–[189](c10.xhtml#Page_189)
  prefs: []
  type: TYPE_NORMAL
- en: bootstrapping, *[91](c05.xhtml#Page_91)*
  prefs: []
  type: TYPE_NORMAL
- en: Bowyer-Watson algorithm, [136](c07.xhtml#Page_136). *See also* DT (Delaunay
    triangulation); triangulation
  prefs: []
  type: TYPE_NORMAL
- en: brain, “wetware” of, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: branching process, using with decision trees, [166](c09.xhtml#Page_166)–[167](c09.xhtml#Page_167)
  prefs: []
  type: TYPE_NORMAL
- en: brute force solution, using in TSP (traveling salesman problem), [107](c06.xhtml#Page_107)
  prefs: []
  type: TYPE_NORMAL
- en: Bush, Vannevar, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: calculus, rules of, [38](c03.xhtml#Page_38)
  prefs: []
  type: TYPE_NORMAL
- en: centroid of triangle, finding, *[131](c07.xhtml#Page_131)*–[133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: Chapman, Seville, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: Chapman’s algorithm, [9](c01.xhtml#Page_9)–[11](c01.xhtml#Page_11). *See also*
    the outfielder problem
  prefs: []
  type: TYPE_NORMAL
- en: chatbot, building, [203](c11.xhtml#Page_203)–[208](c11.xhtml#Page_208)
  prefs: []
  type: TYPE_NORMAL
- en: chess, solving eight queens puzzle, [209](c11.xhtml#Page_209)–[212](c11.xhtml#Page_212)
  prefs: []
  type: TYPE_NORMAL
- en: Chesterton, G. K., [151](c08.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: circles, drawing, [133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: circumcenters
  prefs: []
  type: TYPE_NORMAL
- en: finding for triangles, [131](c07.xhtml#Page_131)–[133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: plotting, [145](c07.xhtml#Page_145)
  prefs: []
  type: TYPE_NORMAL
- en: relationship to triangles, [134](c07.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: circumcircles
  prefs: []
  type: TYPE_NORMAL
- en: plotting, [145](c07.xhtml#Page_145)
  prefs: []
  type: TYPE_NORMAL
- en: relationship to triangles, *[132](c07.xhtml#Page_132)*, [134](c07.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: combinatorial explosion, using in TSP (traveling salesman problem), [108](c06.xhtml#Page_108)
  prefs: []
  type: TYPE_NORMAL
- en: compound words, dealing with, [152](c08.xhtml#Page_152)–[153](c08.xhtml#Page_153).
    *See also* words
  prefs: []
  type: TYPE_NORMAL
- en: constructive methods of Euclid, *[20](c02.xhtml#Page_20)*
  prefs: []
  type: TYPE_NORMAL
- en: continued fractions. *See also* fractions to radicals
  prefs: []
  type: TYPE_NORMAL
- en: algorithm for generating, [82](c05.xhtml#Page_82)–[85](c05.xhtml#Page_85)
  prefs: []
  type: TYPE_NORMAL
- en: compressing and communicating Phi, [79](c05.xhtml#Page_79)–*[80](c05.xhtml#Page_80)*
  prefs: []
  type: TYPE_NORMAL
- en: versus decimals, [86](c05.xhtml#Page_86)–[88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: overview, [78](c05.xhtml#Page_78), *[80](c05.xhtml#Page_80)*–[82](c05.xhtml#Page_82)
  prefs: []
  type: TYPE_NORMAL
- en: to radicals, [88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: continued square roots, *[88](c05.xhtml#Page_88)*
  prefs: []
  type: TYPE_NORMAL
- en: corpus, *[149](c08.xhtml#Page_149)*, [160](c08.xhtml#Page_160). *See also* imported
    corpus
  prefs: []
  type: TYPE_NORMAL
- en: cosine similarity, *[206](c11.xhtml#Page_206)*–[208](c11.xhtml#Page_208)
  prefs: []
  type: TYPE_NORMAL
- en: '`Counter()` function, using with n + 1-gram, [161](c08.xhtml#Page_161)'
  prefs: []
  type: TYPE_NORMAL
- en: counting steps, [57](c04.xhtml#Page_57)–[60](c04.xhtml#Page_60)
  prefs: []
  type: TYPE_NORMAL
- en: '**D**'
  prefs: []
  type: TYPE_NORMAL
- en: decimals to continued fractions, [86](c05.xhtml#Page_86)–[88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: decision trees. *See also* AI (artificial intelligence) game trees; machine
    learning; random forests
  prefs: []
  type: TYPE_NORMAL
- en: adding depth to, [175](c09.xhtml#Page_175)–[177](c09.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: building, [167](c09.xhtml#Page_167)
  prefs: []
  type: TYPE_NORMAL
- en: calculating happiness levels, [170](c09.xhtml#Page_170)
  prefs: []
  type: TYPE_NORMAL
- en: choosing split points, [182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: choosing splitting variables, [173](c09.xhtml#Page_173)–[175](c09.xhtml#Page_175),
    [182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: downloading datasets, [168](c09.xhtml#Page_168)
  prefs: []
  type: TYPE_NORMAL
- en: evaluating, [178](c09.xhtml#Page_178)–[182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: looking at data, [168](c09.xhtml#Page_168)–[169](c09.xhtml#Page_169)
  prefs: []
  type: TYPE_NORMAL
- en: nodes, *[167](c09.xhtml#Page_167)*
  prefs: []
  type: TYPE_NORMAL
- en: out-of-sample observations, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: overfitting, [181](c09.xhtml#Page_181)–*[182](c09.xhtml#Page_182)*
  prefs: []
  type: TYPE_NORMAL
- en: overview, [165](c09.xhtml#Page_165)–[166](c09.xhtml#Page_166)
  prefs: []
  type: TYPE_NORMAL
- en: prediction errors, [171](c09.xhtml#Page_171)–[172](c09.xhtml#Page_172)
  prefs: []
  type: TYPE_NORMAL
- en: problem of overfitting, [179](c09.xhtml#Page_179)–[181](c09.xhtml#Page_181)
  prefs: []
  type: TYPE_NORMAL
- en: pruning, [182](c09.xhtml#Page_182), *[199](c10.xhtml#Page_199)*
  prefs: []
  type: TYPE_NORMAL
- en: in-sample observations, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: simplifying, [181](c09.xhtml#Page_181)–[182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: split points, *[171](c09.xhtml#Page_171)*
  prefs: []
  type: TYPE_NORMAL
- en: splitting data, [169](c09.xhtml#Page_169)–[173](c09.xhtml#Page_173)
  prefs: []
  type: TYPE_NORMAL
- en: test sets, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: training sets, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: underfitting, *[181](c09.xhtml#Page_181)*–[182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: using nested lists with, [176](c09.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: Delaunay triangulation (DT). *See also* geometry
  prefs: []
  type: TYPE_NORMAL
- en: generating, [136](c07.xhtml#Page_136)–[139](c07.xhtml#Page_139)
  prefs: []
  type: TYPE_NORMAL
- en: implementing, [139](c07.xhtml#Page_139)–[143](c07.xhtml#Page_143)
  prefs: []
  type: TYPE_NORMAL
- en: overview, [134](c07.xhtml#Page_134)–[136](c07.xhtml#Page_136)
  prefs: []
  type: TYPE_NORMAL
- en: purpose of, *[136](c07.xhtml#Page_136)*
  prefs: []
  type: TYPE_NORMAL
- en: returning from points, [142](c07.xhtml#Page_142)
  prefs: []
  type: TYPE_NORMAL
- en: to Voronoi, [143](c07.xhtml#Page_143)–[147](c07.xhtml#Page_147)
  prefs: []
  type: TYPE_NORMAL
- en: derivative, calculating, *[38](c03.xhtml#Page_38)*
  prefs: []
  type: TYPE_NORMAL
- en: Devlin, Keith, [5](c01.xhtml#Page_5)–[6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: dictionary object, creating for chatbot, [203](c11.xhtml#Page_203)
  prefs: []
  type: TYPE_NORMAL
- en: Diehard tests for randomness, *[95](c05.xhtml#Page_95)*–[97](c05.xhtml#Page_97)
  prefs: []
  type: TYPE_NORMAL
- en: divide and conquer algorithm, *[69](c04.xhtml#Page_69)*
  prefs: []
  type: TYPE_NORMAL
- en: dogs, catching Frisbees, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: dots and boxes game. *See also* games
  prefs: []
  type: TYPE_NORMAL
- en: drawing board for, [187](c10.xhtml#Page_187)–[188](c10.xhtml#Page_188)
  prefs: []
  type: TYPE_NORMAL
- en: playing, *[186](c10.xhtml#Page_186)*–[187](c10.xhtml#Page_187)
  prefs: []
  type: TYPE_NORMAL
- en: scoring, [190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: doubling column, RPM (Russian peasant multiplication), [14](c02.xhtml#Page_14)–[20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: '`down_left`, Kurushima’s algorithm, [28](c02.xhtml#Page_28)–[29](c02.xhtml#Page_29)'
  prefs: []
  type: TYPE_NORMAL
- en: '`drawgame()` function, using with games, [188](c10.xhtml#Page_188)–[189](c10.xhtml#Page_189)'
  prefs: []
  type: TYPE_NORMAL
- en: drawing circles, [133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: '`drawlattice()` function, using with games, [188](c10.xhtml#Page_188)–[189](c10.xhtml#Page_189)'
  prefs: []
  type: TYPE_NORMAL
- en: DT (Delaunay triangulation). *See also* Bowyer-Watson algorithm; triangulation
  prefs: []
  type: TYPE_NORMAL
- en: generating, [136](c07.xhtml#Page_136)–[139](c07.xhtml#Page_139)
  prefs: []
  type: TYPE_NORMAL
- en: implementing, [139](c07.xhtml#Page_139)–[143](c07.xhtml#Page_143)
  prefs: []
  type: TYPE_NORMAL
- en: overview, [134](c07.xhtml#Page_134)–[136](c07.xhtml#Page_136)
  prefs: []
  type: TYPE_NORMAL
- en: purpose of, *[136](c07.xhtml#Page_136)*
  prefs: []
  type: TYPE_NORMAL
- en: returning from points, [142](c07.xhtml#Page_142)
  prefs: []
  type: TYPE_NORMAL
- en: to Voronoi, [143](c07.xhtml#Page_143)–[147](c07.xhtml#Page_147)
  prefs: []
  type: TYPE_NORMAL
- en: '**E**'
  prefs: []
  type: TYPE_NORMAL
- en: education and lifetime income, [42](c03.xhtml#Page_42)–[45](c03.xhtml#Page_45)
  prefs: []
  type: TYPE_NORMAL
- en: '*Elements*, [20](c02.xhtml#Page_20)'
  prefs: []
  type: TYPE_NORMAL
- en: equilateral, geometric terminology, *[130](c07.xhtml#Page_130)*
  prefs: []
  type: TYPE_NORMAL
- en: ESS (European Social Survey), using with decision trees, [168](c09.xhtml#Page_168)
  prefs: []
  type: TYPE_NORMAL
- en: Euclid’s algorithm, *[20](c02.xhtml#Page_20)*–[22](c02.xhtml#Page_22), [84](c05.xhtml#Page_84)–[85](c05.xhtml#Page_85)
  prefs: []
  type: TYPE_NORMAL
- en: exclusive OR operation, *[98](c05.xhtml#Page_98)*
  prefs: []
  type: TYPE_NORMAL
- en: exponential function, *[60](c04.xhtml#Page_60)*–[61](c04.xhtml#Page_61)
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  prefs: []
  type: TYPE_NORMAL
- en: '`False`, Kurushima’s algorithm, [27](c02.xhtml#Page_27)'
  prefs: []
  type: TYPE_NORMAL
- en: feedback shift register, [98](c05.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: file-sorting method, [52](c04.xhtml#Page_52)–[54](c04.xhtml#Page_54). *See also*
    sorted filing cabinets
  prefs: []
  type: TYPE_NORMAL
- en: '`fillsquare()` function, Kurushima’s algorithm, [31](c02.xhtml#Page_31)–[32](c02.xhtml#Page_32)'
  prefs: []
  type: TYPE_NORMAL
- en: finding words, [151](c08.xhtml#Page_151)–[152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: '`finditer()` function, using with words, [152](c08.xhtml#Page_152)'
  prefs: []
  type: TYPE_NORMAL
- en: '`findnearest()` function, using in TSP (traveling salesman problem), [109](c06.xhtml#Page_109)'
  prefs: []
  type: TYPE_NORMAL
- en: '`float(''nan'')` function, using with Kurushima’s algorithm, [24](c02.xhtml#Page_24)'
  prefs: []
  type: TYPE_NORMAL
- en: '`floor()` function, using for binary search, [73](c04.xhtml#Page_73)–[74](c04.xhtml#Page_74)'
  prefs: []
  type: TYPE_NORMAL
- en: '`for` loop, using with words and spaces, [157](c08.xhtml#Page_157)'
  prefs: []
  type: TYPE_NORMAL
- en: fractions to radicals, [88](c05.xhtml#Page_88). *See* *also* continued fractions
  prefs: []
  type: TYPE_NORMAL
- en: Franklin, Benjamin, [126](c07.xhtml#Page_126)
  prefs: []
  type: TYPE_NORMAL
- en: Frisbee, trajectory vectors, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: functions
  prefs: []
  type: TYPE_NORMAL
- en: inverting, [75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: recursion, *[22](c02.xhtml#Page_22)*
  prefs: []
  type: TYPE_NORMAL
- en: '**G**'
  prefs: []
  type: TYPE_NORMAL
- en: Galilean model, [2](c01.xhtml#Page_2)–[5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: game trees. *See also* AI (artificial intelligence); decision trees; random
    forests
  prefs: []
  type: TYPE_NORMAL
- en: building, [192](c10.xhtml#Page_192)–[195](c10.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: and winning games, [190](c10.xhtml#Page_190)–[192](c10.xhtml#Page_192)
  prefs: []
  type: TYPE_NORMAL
- en: games. *See also* dots and boxes game
  prefs: []
  type: TYPE_NORMAL
- en: choosing moves, [195](c10.xhtml#Page_195)–[198](c10.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: minimax algorithm, *[195](c10.xhtml#Page_195)*–[198](c10.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: representing, [188](c10.xhtml#Page_188)–[189](c10.xhtml#Page_189)
  prefs: []
  type: TYPE_NORMAL
- en: scoring, [189](c10.xhtml#Page_189)–[190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: winning, [195](c10.xhtml#Page_195)–[198](c10.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian normal curve, [96](c05.xhtml#Page_96)
  prefs: []
  type: TYPE_NORMAL
- en: '`gen_delaunay()` function, passing *x* and *y* values to, [143](c07.xhtml#Page_143)'
  prefs: []
  type: TYPE_NORMAL
- en: '`generate_tree()` function, using with games, [194](c10.xhtml#Page_194)'
  prefs: []
  type: TYPE_NORMAL
- en: '`genlines` function, using with triangles, [129](c07.xhtml#Page_129)'
  prefs: []
  type: TYPE_NORMAL
- en: '`genlines` function, TSP (traveling salesman problem), [104](c06.xhtml#Page_104)'
  prefs: []
  type: TYPE_NORMAL
- en: geometry. *See also* DT (Delaunay triangulation)
  prefs: []
  type: TYPE_NORMAL
- en: postmaster problem, [126](c07.xhtml#Page_126)–[128](c07.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: representing points, [128](c07.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: tangent of angle, [8](c01.xhtml#Page_8)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: terminology, [130](c07.xhtml#Page_130)
  prefs: []
  type: TYPE_NORMAL
- en: triangles, [128](c07.xhtml#Page_128)–[134](c07.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: '`get_number()` function, using with continued fractions, [85](c05.xhtml#Page_85)'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_prediction()` function, using with decision trees, [178](c09.xhtml#Page_178)–[179](c09.xhtml#Page_179)'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_split()` function, using with decision trees, [174](c09.xhtml#Page_174)–[176](c09.xhtml#Page_176)'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_splitpoint()` function, using with decision trees, [174](c09.xhtml#Page_174)'
  prefs: []
  type: TYPE_NORMAL
- en: '`git bisect` software, using for binary search, [75](c04.xhtml#Page_75)'
  prefs: []
  type: TYPE_NORMAL
- en: global variables, defining for simulated annealing, [122](c06.xhtml#Page_122)
  prefs: []
  type: TYPE_NORMAL
- en: golden ratio, *[78](c05.xhtml#Page_78)*–[79](c05.xhtml#Page_79)
  prefs: []
  type: TYPE_NORMAL
- en: gradient ascent, *[35](c03.xhtml#Page_35)*
  prefs: []
  type: TYPE_NORMAL
- en: climbing income hill, [44](c03.xhtml#Page_44)–[45](c03.xhtml#Page_45)
  prefs: []
  type: TYPE_NORMAL
- en: implementing, [40](c03.xhtml#Page_40)–[41](c03.xhtml#Page_41)
  prefs: []
  type: TYPE_NORMAL
- en: local extrema, [42](c03.xhtml#Page_42)–[44](c03.xhtml#Page_44)
  prefs: []
  type: TYPE_NORMAL
- en: objections, [41](c03.xhtml#Page_41)–[42](c03.xhtml#Page_42)
  prefs: []
  type: TYPE_NORMAL
- en: using, [49](c03.xhtml#Page_49)
  prefs: []
  type: TYPE_NORMAL
- en: gradient descent, *[35](c03.xhtml#Page_35)*, *[47](c03.xhtml#Page_47)*
  prefs: []
  type: TYPE_NORMAL
- en: '*Gravity’s Rainbow*, [3](c01.xhtml#Page_3)'
  prefs: []
  type: TYPE_NORMAL
- en: greedy algorithms, TSP (traveling salesman problem), *[112](c06.xhtml#Page_112)*–[113](c06.xhtml#Page_113)
  prefs: []
  type: TYPE_NORMAL
- en: guided search, using in TSP (traveling salesman problem), *[112](c06.xhtml#Page_112)*
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs: []
  type: TYPE_NORMAL
- en: '`half_double dataframe`, RPM (Russian peasant multiplication), [18](c02.xhtml#Page_18)'
  prefs: []
  type: TYPE_NORMAL
- en: halving column, RPM (Russian peasant multiplication), [14](c02.xhtml#Page_14)–[20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: happiness levels, calculating with decision trees, [170](c09.xhtml#Page_170)
  prefs: []
  type: TYPE_NORMAL
- en: hill climbing, [47](c03.xhtml#Page_47)–[48](c03.xhtml#Page_48)
  prefs: []
  type: TYPE_NORMAL
- en: '`howfull` argument, Kurushima’s algorithm, [31](c02.xhtml#Page_31)–[32](c02.xhtml#Page_32)'
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  prefs: []
  type: TYPE_NORMAL
- en: '`if` statement'
  prefs: []
  type: TYPE_NORMAL
- en: inserting `pop()` function into, [66](c04.xhtml#Page_66)–[67](c04.xhtml#Page_67)
  prefs: []
  type: TYPE_NORMAL
- en: using with words and spaces, [151](c08.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: imported corpus, using to check for valid words, [154](c08.xhtml#Page_154)–[155](c08.xhtml#Page_155).
    *See also* corpus
  prefs: []
  type: TYPE_NORMAL
- en: inner physicist theory, *[5](c01.xhtml#Page_5)*–[6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: in-sample observations, using with decision trees, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: '`insert()` function, using with bits, [98](c05.xhtml#Page_98)'
  prefs: []
  type: TYPE_NORMAL
- en: insertion sort, [52](c04.xhtml#Page_52)–[55](c04.xhtml#Page_55)
  prefs: []
  type: TYPE_NORMAL
- en: comparing to exponential function, [61](c04.xhtml#Page_61)
  prefs: []
  type: TYPE_NORMAL
- en: counting steps in, [63](c04.xhtml#Page_63)–[64](c04.xhtml#Page_64)
  prefs: []
  type: TYPE_NORMAL
- en: step counter, [58](c04.xhtml#Page_58)
  prefs: []
  type: TYPE_NORMAL
- en: installing, `matplotlib` module, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: integers, dividing to get quotient, [84](c05.xhtml#Page_84)
  prefs: []
  type: TYPE_NORMAL
- en: '`inverse_sin(0.9)` function, using for binary search, [75](c04.xhtml#Page_75)'
  prefs: []
  type: TYPE_NORMAL
- en: inverting functions, [75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: irrational number, *[79](c05.xhtml#Page_79)*
  prefs: []
  type: TYPE_NORMAL
- en: '**J**'
  prefs: []
  type: TYPE_NORMAL
- en: Japanese magic squares. *See also* magic squares; squares
  prefs: []
  type: TYPE_NORMAL
- en: Kurushima’s algorithm in Python, [24](c02.xhtml#Page_24)–[30](c02.xhtml#Page_30)
  prefs: []
  type: TYPE_NORMAL
- en: Luo Shu square in Python, [22](c02.xhtml#Page_22)–[23](c02.xhtml#Page_23)
  prefs: []
  type: TYPE_NORMAL
- en: '**K**'
  prefs: []
  type: TYPE_NORMAL
- en: Kepler, Johannes, [78](c05.xhtml#Page_78)
  prefs: []
  type: TYPE_NORMAL
- en: k-means machine-learning method, [56](c04.xhtml#Page_56)
  prefs: []
  type: TYPE_NORMAL
- en: k-NN machine-learning method, [56](c04.xhtml#Page_56)
  prefs: []
  type: TYPE_NORMAL
- en: Kurushima’s algorithm
  prefs: []
  type: TYPE_NORMAL
- en: function, [30](c02.xhtml#Page_30)–[31](c02.xhtml#Page_31)
  prefs: []
  type: TYPE_NORMAL
- en: rules, [25](c02.xhtml#Page_25)–[28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: '**L**'
  prefs: []
  type: TYPE_NORMAL
- en: la pipopipette, *[186](c10.xhtml#Page_186)*–[187](c10.xhtml#Page_187)
  prefs: []
  type: TYPE_NORMAL
- en: language algorithms
  prefs: []
  type: TYPE_NORMAL
- en: difficulty, [150](c08.xhtml#Page_150)
  prefs: []
  type: TYPE_NORMAL
- en: phrase completion, [159](c08.xhtml#Page_159)–[163](c08.xhtml#Page_163)
  prefs: []
  type: TYPE_NORMAL
- en: space insertion, [150](c08.xhtml#Page_150)–[158](c08.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: lattice, using with la pipopipette, *[186](c10.xhtml#Page_186)*–[187](c10.xhtml#Page_187)
  prefs: []
  type: TYPE_NORMAL
- en: LCGs (linear congruential generators), [92](c05.xhtml#Page_92)–[93](c05.xhtml#Page_93)
  prefs: []
  type: TYPE_NORMAL
- en: '`left` and `right` variables, Python, [66](c04.xhtml#Page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: Leibniz, Gottfried Wilhelm, [130](c07.xhtml#Page_130)–[131](c07.xhtml#Page_131)
  prefs: []
  type: TYPE_NORMAL
- en: LFSRs (linear feedback shift registers), [97](c05.xhtml#Page_97)–[99](c05.xhtml#Page_99)
  prefs: []
  type: TYPE_NORMAL
- en: lifetime income and education, [42](c03.xhtml#Page_42)–[45](c03.xhtml#Page_45)
  prefs: []
  type: TYPE_NORMAL
- en: lines of sight, plotting for thrown ball, [7](c01.xhtml#Page_7)–[8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: list comprehensions, *[149](c08.xhtml#Page_149)*, [156](c08.xhtml#Page_156)
  prefs: []
  type: TYPE_NORMAL
- en: list indexing syntax, Python, [68](c04.xhtml#Page_68)–[69](c04.xhtml#Page_69)
  prefs: []
  type: TYPE_NORMAL
- en: lists, sorting, [153](c08.xhtml#Page_153)
  prefs: []
  type: TYPE_NORMAL
- en: '`loc` functionality, RPM (Russian peasant multiplication), [19](c02.xhtml#Page_19)'
  prefs: []
  type: TYPE_NORMAL
- en: local extrema, problem, [42](c03.xhtml#Page_42)–[45](c03.xhtml#Page_45)
  prefs: []
  type: TYPE_NORMAL
- en: loops, RPM (Russian peasant multiplication), [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: lower bound, defining for binary search, [73](c04.xhtml#Page_73)
  prefs: []
  type: TYPE_NORMAL
- en: '`lower()` method, using with chatbot, [203](c11.xhtml#Page_203)'
  prefs: []
  type: TYPE_NORMAL
- en: Lucas, Édouard, [186](c10.xhtml#Page_186)
  prefs: []
  type: TYPE_NORMAL
- en: Luo Shu square, creating in Python, [22](c02.xhtml#Page_22)–*[23](c02.xhtml#Page_23)*
  prefs: []
  type: TYPE_NORMAL
- en: '**M**'
  prefs: []
  type: TYPE_NORMAL
- en: machine learning. *See also* decision trees
  prefs: []
  type: TYPE_NORMAL
- en: overview, [165](c09.xhtml#Page_165)
  prefs: []
  type: TYPE_NORMAL
- en: random forests, [182](c09.xhtml#Page_182)–[183](c09.xhtml#Page_183)
  prefs: []
  type: TYPE_NORMAL
- en: machine-learning methods, k-means clustering and k-NN, [56](c04.xhtml#Page_56)
  prefs: []
  type: TYPE_NORMAL
- en: magic eye, [147](c07.xhtml#Page_147)
  prefs: []
  type: TYPE_NORMAL
- en: magic squares, *[22](c02.xhtml#Page_22)*–[23](c02.xhtml#Page_23). *See also*
    Japanese magic squares; squares
  prefs: []
  type: TYPE_NORMAL
- en: arguments, [31](c02.xhtml#Page_31)–[34](c02.xhtml#Page_34)
  prefs: []
  type: TYPE_NORMAL
- en: Kurushima’s algorithm, [30](c02.xhtml#Page_30)–[31](c02.xhtml#Page_31)
  prefs: []
  type: TYPE_NORMAL
- en: of odd dimension, [24](c02.xhtml#Page_24)
  prefs: []
  type: TYPE_NORMAL
- en: patterns, [34](c02.xhtml#Page_34)
  prefs: []
  type: TYPE_NORMAL
- en: “walk” through, [28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: '*The Math Instinct: Why You’re a Mathematical Genius (Along with Lobsters,
    Birds, Cats, and Dogs)*, [5](c01.xhtml#Page_5)–[6](c01.xhtml#Page_6)'
  prefs: []
  type: TYPE_NORMAL
- en: '*math* library, Python, [73](c04.xhtml#Page_73)–[74](c04.xhtml#Page_74)'
  prefs: []
  type: TYPE_NORMAL
- en: mathematical physics, interpretation of, [92](c05.xhtml#Page_92)
  prefs: []
  type: TYPE_NORMAL
- en: '`math.floor()`, RPM (Russian peasant multiplication), [18](c02.xhtml#Page_18)'
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib` module'
  prefs: []
  type: TYPE_NORMAL
- en: setting tax rates, [36](c03.xhtml#Page_36)–[37](c03.xhtml#Page_37)
  prefs: []
  type: TYPE_NORMAL
- en: using with dots and boxes game, [187](c10.xhtml#Page_187)–[188](c10.xhtml#Page_188)
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib` module, installing, [3](c01.xhtml#Page_3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`max()` function, using with `numpy`, [162](c08.xhtml#Page_162)'
  prefs: []
  type: TYPE_NORMAL
- en: maxima and minima, *[35](c03.xhtml#Page_35)*
  prefs: []
  type: TYPE_NORMAL
- en: maximization and minimization, [45](c03.xhtml#Page_45)–[48](c03.xhtml#Page_48)
  prefs: []
  type: TYPE_NORMAL
- en: maximum
  prefs: []
  type: TYPE_NORMAL
- en: and asymptote approach, [39](c03.xhtml#Page_39)–[40](c03.xhtml#Page_40)
  prefs: []
  type: TYPE_NORMAL
- en: education and lifetime income, [44](c03.xhtml#Page_44)–[45](c03.xhtml#Page_45)
  prefs: []
  type: TYPE_NORMAL
- en: and minimum of step values, [60](c04.xhtml#Page_60)–[61](c04.xhtml#Page_61)
  prefs: []
  type: TYPE_NORMAL
- en: revenue, [39](c03.xhtml#Page_39)
  prefs: []
  type: TYPE_NORMAL
- en: solving first-order conditions, [42](c03.xhtml#Page_42)
  prefs: []
  type: TYPE_NORMAL
- en: taxation/revenue curve, [41](c03.xhtml#Page_41)–[42](c03.xhtml#Page_42)
  prefs: []
  type: TYPE_NORMAL
- en: '`maxitin` argument, adding, [122](c06.xhtml#Page_122)'
  prefs: []
  type: TYPE_NORMAL
- en: merging to sorting, *[65](c04.xhtml#Page_65)*, [68](c04.xhtml#Page_68)–[70](c04.xhtml#Page_70).
    *See also* sorting
  prefs: []
  type: TYPE_NORMAL
- en: Mersenne Twister PRNG, [99](c05.xhtml#Page_99)
  prefs: []
  type: TYPE_NORMAL
- en: metaheuristics, metaphor based, [117](c06.xhtml#Page_117)–[118](c06.xhtml#Page_118)
  prefs: []
  type: TYPE_NORMAL
- en: Mikami, Yoshio, [22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: Millennium Prize Problems, [212](c11.xhtml#Page_212)
  prefs: []
  type: TYPE_NORMAL
- en: minimax algorithm
  prefs: []
  type: TYPE_NORMAL
- en: using to make decisions, [199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: using to win games, *[195](c10.xhtml#Page_195)*–[198](c10.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: '`minimax()` function, calling, [198](c10.xhtml#Page_198)'
  prefs: []
  type: TYPE_NORMAL
- en: modulo (`%`) operator
  prefs: []
  type: TYPE_NORMAL
- en: Euclid’s algorithm, [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: Kurushima’s algorithm, [27](c02.xhtml#Page_27)–[28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: RPM (Russian peasant multiplication), [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: rules, [32](c02.xhtml#Page_32)
  prefs: []
  type: TYPE_NORMAL
- en: Monte Carlo methods, *[199](c10.xhtml#Page_199)*
  prefs: []
  type: TYPE_NORMAL
- en: mystery number and continued fraction, [81](c05.xhtml#Page_81)
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  prefs: []
  type: TYPE_NORMAL
- en: '*n* + 1-grams, finding, [161](c08.xhtml#Page_161)–[163](c08.xhtml#Page_163)'
  prefs: []
  type: TYPE_NORMAL
- en: '*n* queens completion problem, solving for chess, *[210](c11.xhtml#Page_210)*–[211](c11.xhtml#Page_211)'
  prefs: []
  type: TYPE_NORMAL
- en: '`nan` entries, filling in, [25](c02.xhtml#Page_25)–[28](c02.xhtml#Page_28),
    [30](c02.xhtml#Page_30)–[31](c02.xhtml#Page_31)'
  prefs: []
  type: TYPE_NORMAL
- en: Navier-Stokes equations, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: nearest neighbor algorithm, TSP (traveling salesman problem), *[108](c06.xhtml#Page_108)*–[110](c06.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: nested lists, using with decision trees, [176](c09.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: nested radicals, *[88](c05.xhtml#Page_88)*
  prefs: []
  type: TYPE_NORMAL
- en: '`next_random()` function, [93](c05.xhtml#Page_93)'
  prefs: []
  type: TYPE_NORMAL
- en: n-gram, tokenizing and getting, *[159](c08.xhtml#Page_159)*–[160](c08.xhtml#Page_160)
  prefs: []
  type: TYPE_NORMAL
- en: Norvig, Peter, [160](c08.xhtml#Page_160)
  prefs: []
  type: TYPE_NORMAL
- en: NP (nondeterministic polynomial) complexity class, *[212](c11.xhtml#Page_212)*–[213](c11.xhtml#Page_213)
  prefs: []
  type: TYPE_NORMAL
- en: numbered file, inserting, [54](c04.xhtml#Page_54)
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy` module'
  prefs: []
  type: TYPE_NORMAL
- en: importing, [60](c04.xhtml#Page_60)
  prefs: []
  type: TYPE_NORMAL
- en: using to select phrases, [162](c08.xhtml#Page_162)
  prefs: []
  type: TYPE_NORMAL
- en: using with decision trees, [180](c09.xhtml#Page_180)–[181](c09.xhtml#Page_181)
  prefs: []
  type: TYPE_NORMAL
- en: '**O**'
  prefs: []
  type: TYPE_NORMAL
- en: optimization, [101](c06.xhtml#Page_101)–[102](c06.xhtml#Page_102). *See also*
    simulated annealing; TSP (traveling salesman problem)
  prefs: []
  type: TYPE_NORMAL
- en: the outfielder problem, *[1](c01.xhtml#Page_1)*–[2](c01.xhtml#Page_2), [6](c01.xhtml#Page_6)–[9](c01.xhtml#Page_9).
    *See also* ball; Chapman’s algorithm
  prefs: []
  type: TYPE_NORMAL
- en: out-of-sample observations, using with decision trees, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: overfitting decision trees, [181](c09.xhtml#Page_181)–*[182](c09.xhtml#Page_182)*
  prefs: []
  type: TYPE_NORMAL
- en: overlapping sums test, *[95](c05.xhtml#Page_95)*–[96](c05.xhtml#Page_96)
  prefs: []
  type: TYPE_NORMAL
- en: '**P**'
  prefs: []
  type: TYPE_NORMAL
- en: P complexity class of problems, *[212](c11.xhtml#Page_212)*–[213](c11.xhtml#Page_213)
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` module, using in Python, [19](c02.xhtml#Page_19)'
  prefs: []
  type: TYPE_NORMAL
- en: percentile, using with decision trees, [172](c09.xhtml#Page_172)–[173](c09.xhtml#Page_173)
  prefs: []
  type: TYPE_NORMAL
- en: perpendicular, geometric terminology, *[130](c07.xhtml#Page_130)*
  prefs: []
  type: TYPE_NORMAL
- en: '`perturb()` function'
  prefs: []
  type: TYPE_NORMAL
- en: modifying, [116](c06.xhtml#Page_116)
  prefs: []
  type: TYPE_NORMAL
- en: showing end of, [121](c06.xhtml#Page_121)
  prefs: []
  type: TYPE_NORMAL
- en: updating, [119](c06.xhtml#Page_119)
  prefs: []
  type: TYPE_NORMAL
- en: using for simulated annealing, [123](c06.xhtml#Page_123)
  prefs: []
  type: TYPE_NORMAL
- en: using in TSP (traveling salesman problem), [111](c06.xhtml#Page_111)–[112](c06.xhtml#Page_112)
  prefs: []
  type: TYPE_NORMAL
- en: perturb search algorithm, *[112](c06.xhtml#Page_112)*. *See also* simulated
    annealing
  prefs: []
  type: TYPE_NORMAL
- en: phi
  prefs: []
  type: TYPE_NORMAL
- en: compressing and communicating, [79](c05.xhtml#Page_79)–[80](c05.xhtml#Page_80)
  prefs: []
  type: TYPE_NORMAL
- en: and golden ratio, *[78](c05.xhtml#Page_78)*
  prefs: []
  type: TYPE_NORMAL
- en: phrase completion, [159](c08.xhtml#Page_159)–[163](c08.xhtml#Page_163)
  prefs: []
  type: TYPE_NORMAL
- en: '`plot()` function, using with dots and boxes game, [187](c10.xhtml#Page_187)–[188](c10.xhtml#Page_188)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plot_triangle()` function'
  prefs: []
  type: TYPE_NORMAL
- en: defining, [129](c07.xhtml#Page_129)
  prefs: []
  type: TYPE_NORMAL
- en: improving, [133](c07.xhtml#Page_133)–[134](c07.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: '`plotitinerary()` function, using in TSP (traveling salesman problem), [105](c06.xhtml#Page_105)'
  prefs: []
  type: TYPE_NORMAL
- en: plotting capabilities, Galilean model, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: '*.png* file, saving to, [129](c07.xhtml#Page_129)–[130](c07.xhtml#Page_130)'
  prefs: []
  type: TYPE_NORMAL
- en: points, representing, [128](c07.xhtml#Page_128)–[130](c07.xhtml#Page_130)
  prefs: []
  type: TYPE_NORMAL
- en: '`points_to_triangle()` function'
  prefs: []
  type: TYPE_NORMAL
- en: defining, [128](c07.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: using in triangulation, [134](c07.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: polynomial, Galilean model, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: polynomial time, verifying solutions in, [212](c11.xhtml#Page_212)
  prefs: []
  type: TYPE_NORMAL
- en: '`pop()` method'
  prefs: []
  type: TYPE_NORMAL
- en: inserting into `if` statements, [66](c04.xhtml#Page_66)–[67](c04.xhtml#Page_67)
  prefs: []
  type: TYPE_NORMAL
- en: using with bits, [98](c05.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: '`pop()` method, sorting via insertion, [55](c04.xhtml#Page_55)'
  prefs: []
  type: TYPE_NORMAL
- en: postmaster problem, [126](c07.xhtml#Page_126)–[128](c07.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: potential words. *See also* words
  prefs: []
  type: TYPE_NORMAL
- en: checking for, [153](c08.xhtml#Page_153)–[154](c08.xhtml#Page_154)
  prefs: []
  type: TYPE_NORMAL
- en: finding halves of, [156](c08.xhtml#Page_156)–[158](c08.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: prediction errors, decision trees, [171](c09.xhtml#Page_171)–[172](c09.xhtml#Page_172)
  prefs: []
  type: TYPE_NORMAL
- en: '`print(cities)` function, TSP (traveling salesman problem), [103](c06.xhtml#Page_103)'
  prefs: []
  type: TYPE_NORMAL
- en: '`print(lines)` function, TSP (traveling salesman problem), [104](c06.xhtml#Page_104)'
  prefs: []
  type: TYPE_NORMAL
- en: '`print(square)` function, using with Kurushima’s algorithm, [24](c02.xhtml#Page_24)–[25](c02.xhtml#Page_25)'
  prefs: []
  type: TYPE_NORMAL
- en: PRNGs (pseudorandom number generators), *[92](c05.xhtml#Page_92)*–[99](c05.xhtml#Page_99)
  prefs: []
  type: TYPE_NORMAL
- en: problems, solving with algorithms, [10](c01.xhtml#Page_10)–[11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: Project Gutenberg, [160](c08.xhtml#Page_160)
  prefs: []
  type: TYPE_NORMAL
- en: pruning decision trees, [182](c09.xhtml#Page_182), *[199](c10.xhtml#Page_199)*
  prefs: []
  type: TYPE_NORMAL
- en: pseudorandomness, *[92](c05.xhtml#Page_92)*–[93](c05.xhtml#Page_93)
  prefs: []
  type: TYPE_NORMAL
- en: Pynchon, Thomas, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: Pythagorean theorem
  prefs: []
  type: TYPE_NORMAL
- en: using, [105](c06.xhtml#Page_105)
  prefs: []
  type: TYPE_NORMAL
- en: using with triangles, [130](c07.xhtml#Page_130)
  prefs: []
  type: TYPE_NORMAL
- en: using in TSP (traveling salesman problem), [108](c06.xhtml#Page_108)–[109](c06.xhtml#Page_109)
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs: []
  type: TYPE_NORMAL
- en: creating Luo Shu square, [22](c02.xhtml#Page_22)–[23](c02.xhtml#Page_23)
  prefs: []
  type: TYPE_NORMAL
- en: Euclid’s algorithm, [20](c02.xhtml#Page_20)–[22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: feedback shift register, [98](c05.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: Galilean model, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: implementing RPM (Russian peasant multiplication), [18](c02.xhtml#Page_18)–[20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: Kurushima’s algorithm, [24](c02.xhtml#Page_24)
  prefs: []
  type: TYPE_NORMAL
- en: '`left` and `right` variables, [66](c04.xhtml#Page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: list indexing syntax, [68](c04.xhtml#Page_68)
  prefs: []
  type: TYPE_NORMAL
- en: '*math* library, [73](c04.xhtml#Page_73)–[74](c04.xhtml#Page_74)'
  prefs: []
  type: TYPE_NORMAL
- en: ordered pairs in, [152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: overlapping sums test, *[95](c05.xhtml#Page_95)*–[96](c05.xhtml#Page_96)
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` module, [19](c02.xhtml#Page_19)'
  prefs: []
  type: TYPE_NORMAL
- en: '`random` module, [58](c04.xhtml#Page_58)–[59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: '`random.choice()` function, [28](c02.xhtml#Page_28)'
  prefs: []
  type: TYPE_NORMAL
- en: rules for Kurushima’s algorithm, [27](c02.xhtml#Page_27)–[28](c02.xhtml#Page_28),
    [30](c02.xhtml#Page_30)–[31](c02.xhtml#Page_31)
  prefs: []
  type: TYPE_NORMAL
- en: square roots in, [90](c05.xhtml#Page_90)–[91](c05.xhtml#Page_91)
  prefs: []
  type: TYPE_NORMAL
- en: '`timeit` module, [57](c04.xhtml#Page_57)'
  prefs: []
  type: TYPE_NORMAL
- en: using tuples with words and spaces, [152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: '**Q**'
  prefs: []
  type: TYPE_NORMAL
- en: quotient, getting by dividing integers, [84](c05.xhtml#Page_84)
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  prefs: []
  type: TYPE_NORMAL
- en: radicals and fractions, [88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: radius, returning for triangle, [132](c07.xhtml#Page_132)–[133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: Ramanujan, Srinivasa, [88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: random forests, [182](c09.xhtml#Page_182)–[183](c09.xhtml#Page_183). *See also*
    decision trees; game trees
  prefs: []
  type: TYPE_NORMAL
- en: '`random` model, Python, [58](c04.xhtml#Page_58)–[59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: random number generators
  prefs: []
  type: TYPE_NORMAL
- en: judging PRNGs (pseudorandom number generators), [93](c05.xhtml#Page_93)–[95](c05.xhtml#Page_95)
  prefs: []
  type: TYPE_NORMAL
- en: LCDs (linear congruential generators), [92](c05.xhtml#Page_92)–[93](c05.xhtml#Page_93)
  prefs: []
  type: TYPE_NORMAL
- en: LFSRs (linear feedback shift registers), [97](c05.xhtml#Page_97)–[99](c05.xhtml#Page_99)
  prefs: []
  type: TYPE_NORMAL
- en: overview, [91](c05.xhtml#Page_91)
  prefs: []
  type: TYPE_NORMAL
- en: '`random.choice()` function, Python, [28](c02.xhtml#Page_28)'
  prefs: []
  type: TYPE_NORMAL
- en: randomness
  prefs: []
  type: TYPE_NORMAL
- en: Diehard tests for, [95](c05.xhtml#Page_95)–[97](c05.xhtml#Page_97)
  prefs: []
  type: TYPE_NORMAL
- en: possibility of, [91](c05.xhtml#Page_91)–[92](c05.xhtml#Page_92)
  prefs: []
  type: TYPE_NORMAL
- en: '`random.seed()` function, [59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: recursion
  prefs: []
  type: TYPE_NORMAL
- en: of functions, *[22](c02.xhtml#Page_22)*
  prefs: []
  type: TYPE_NORMAL
- en: implementing merge sort with, [69](c04.xhtml#Page_69)
  prefs: []
  type: TYPE_NORMAL
- en: using with Euclid’s algorithm, [85](c05.xhtml#Page_85)
  prefs: []
  type: TYPE_NORMAL
- en: '`re.finditer()` function, using with words, [152](c08.xhtml#Page_152)'
  prefs: []
  type: TYPE_NORMAL
- en: '`reindex()` method, using with decision trees, [181](c09.xhtml#Page_181)'
  prefs: []
  type: TYPE_NORMAL
- en: '`remove()` function, using with words and spaces, [155](c08.xhtml#Page_155)'
  prefs: []
  type: TYPE_NORMAL
- en: '`replace()` function, using with words and spaces, [155](c08.xhtml#Page_155)'
  prefs: []
  type: TYPE_NORMAL
- en: '`resetthresh` variable, adding, [122](c06.xhtml#Page_122)'
  prefs: []
  type: TYPE_NORMAL
- en: revenue
  prefs: []
  type: TYPE_NORMAL
- en: maximum, [39](c03.xhtml#Page_39)
  prefs: []
  type: TYPE_NORMAL
- en: showing for tax rates, [36](c03.xhtml#Page_36)–[37](c03.xhtml#Page_37)
  prefs: []
  type: TYPE_NORMAL
- en: '`right` and `left` variables, Python, [66](c04.xhtml#Page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: RPM (Russian peasant multiplication), [13](c02.xhtml#Page_13)–[20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: rules, applying with Kurushima’s algorithm, [27](c02.xhtml#Page_27), [30](c02.xhtml#Page_30)–[31](c02.xhtml#Page_31)
  prefs: []
  type: TYPE_NORMAL
- en: '**S**'
  prefs: []
  type: TYPE_NORMAL
- en: science, laws of, [130](c07.xhtml#Page_130)–[131](c07.xhtml#Page_131)
  prefs: []
  type: TYPE_NORMAL
- en: scoring games, [189](c10.xhtml#Page_189)–[190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: search suggestions, strategy for generating, [160](c08.xhtml#Page_160), [162](c08.xhtml#Page_162)–[163](c08.xhtml#Page_163)
  prefs: []
  type: TYPE_NORMAL
- en: searching versus sorting, [72](c04.xhtml#Page_72)–[75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: Shakespeare’s works, accessing, [160](c08.xhtml#Page_160)–[161](c08.xhtml#Page_161),
    [163](c08.xhtml#Page_163)
  prefs: []
  type: TYPE_NORMAL
- en: '`siman()` function, using for simulated annealing, [122](c06.xhtml#Page_122)–[123](c06.xhtml#Page_123)'
  prefs: []
  type: TYPE_NORMAL
- en: Simmons, Joseph, [179](c09.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: simulated annealing, [115](c06.xhtml#Page_115)–[124](c06.xhtml#Page_124). *See
    also* optimization; perturb search; TSP (traveling salesman problem)
  prefs: []
  type: TYPE_NORMAL
- en: sleep sort, [70](c04.xhtml#Page_70)–[72](c04.xhtml#Page_72). *See also* sorting
  prefs: []
  type: TYPE_NORMAL
- en: Smith, David Eugene, [22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: solve-for-*x* strategy, *[4](c01.xhtml#Page_4)*–[5](c01.xhtml#Page_5), [10](c01.xhtml#Page_10)–[11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: sorted filing cabinets, merging, [62](c04.xhtml#Page_62), [64](c04.xhtml#Page_64)–[65](c04.xhtml#Page_65).
    *See also* file-sorting method
  prefs: []
  type: TYPE_NORMAL
- en: sorting. *See also* merging to sorting; sleep sort
  prefs: []
  type: TYPE_NORMAL
- en: lists, [153](c08.xhtml#Page_153)
  prefs: []
  type: TYPE_NORMAL
- en: via insertion, [54](c04.xhtml#Page_54)–[55](c04.xhtml#Page_55)
  prefs: []
  type: TYPE_NORMAL
- en: to searching, [72](c04.xhtml#Page_72)–[75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: space insertion
  prefs: []
  type: TYPE_NORMAL
- en: checking for potential words, [153](c08.xhtml#Page_153)–[154](c08.xhtml#Page_154)
  prefs: []
  type: TYPE_NORMAL
- en: checking for valid words, [154](c08.xhtml#Page_154)–[156](c08.xhtml#Page_156)
  prefs: []
  type: TYPE_NORMAL
- en: dealing with compound words, [152](c08.xhtml#Page_152)–[153](c08.xhtml#Page_153)
  prefs: []
  type: TYPE_NORMAL
- en: defining word lists, [151](c08.xhtml#Page_151)–[152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: finding halves of potential words, [156](c08.xhtml#Page_156)–[158](c08.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: finding words, [151](c08.xhtml#Page_151)–[152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: overview, [150](c08.xhtml#Page_150)–[151](c08.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: spaces
  prefs: []
  type: TYPE_NORMAL
- en: getting substrings between, [153](c08.xhtml#Page_153)–[154](c08.xhtml#Page_154)
  prefs: []
  type: TYPE_NORMAL
- en: inserting into texts, [158](c08.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: words ending with, [156](c08.xhtml#Page_156)
  prefs: []
  type: TYPE_NORMAL
- en: split points, choosing for decision trees, *[171](c09.xhtml#Page_171)*, [182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: splitting variables, choosing for decision trees, [182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: square brackets (`[]`)
  prefs: []
  type: TYPE_NORMAL
- en: using with list comprehension, [152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: using with `loc` functionality, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: square matrix, antidiagonal of, [26](c02.xhtml#Page_26)–[27](c02.xhtml#Page_27)
  prefs: []
  type: TYPE_NORMAL
- en: square roots, [89](c05.xhtml#Page_89)–[91](c05.xhtml#Page_91)
  prefs: []
  type: TYPE_NORMAL
- en: squares, filling in, [30](c02.xhtml#Page_30)–[34](c02.xhtml#Page_34). *See also*
    Japanese magic squares; magic squares
  prefs: []
  type: TYPE_NORMAL
- en: '`start()` function, using with words, [153](c08.xhtml#Page_153)'
  prefs: []
  type: TYPE_NORMAL
- en: statistical methods, bootstrapping as, *[91](c05.xhtml#Page_91)*
  prefs: []
  type: TYPE_NORMAL
- en: steps
  prefs: []
  type: TYPE_NORMAL
- en: counting in insertion sort, [57](c04.xhtml#Page_57)–[60](c04.xhtml#Page_60),
    [63](c04.xhtml#Page_63)–[64](c04.xhtml#Page_64)
  prefs: []
  type: TYPE_NORMAL
- en: exponential growth, [60](c04.xhtml#Page_60)–[61](c04.xhtml#Page_61)
  prefs: []
  type: TYPE_NORMAL
- en: stochastic gradient ascent, *[45](c03.xhtml#Page_45)*
  prefs: []
  type: TYPE_NORMAL
- en: strings, splitting into words, *[159](c08.xhtml#Page_159)*–[160](c08.xhtml#Page_160)
  prefs: []
  type: TYPE_NORMAL
- en: substrings, getting between spaces, [153](c08.xhtml#Page_153)–[154](c08.xhtml#Page_154)
  prefs: []
  type: TYPE_NORMAL
- en: sudoku puzzles, solving, [211](c11.xhtml#Page_211)–[212](c11.xhtml#Page_212)
  prefs: []
  type: TYPE_NORMAL
- en: '**T**'
  prefs: []
  type: TYPE_NORMAL
- en: tangent of angle, [8](c01.xhtml#Page_8)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: tax rates, setting, [36](c03.xhtml#Page_36)–[41](c03.xhtml#Page_41)
  prefs: []
  type: TYPE_NORMAL
- en: taxation/revenue curve, gradient ascent, [41](c03.xhtml#Page_41)
  prefs: []
  type: TYPE_NORMAL
- en: tax/revenue curve, flipping, [46](c03.xhtml#Page_46)–[47](c03.xhtml#Page_47)
  prefs: []
  type: TYPE_NORMAL
- en: temperature function, TSP (traveling salesman problem), [113](c06.xhtml#Page_113)–[115](c06.xhtml#Page_115)
  prefs: []
  type: TYPE_NORMAL
- en: test sets, using with decision trees, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: text normalization, using with chatbot, *[203](c11.xhtml#Page_203)*
  prefs: []
  type: TYPE_NORMAL
- en: text vectorization, *[204](c11.xhtml#Page_204)*–[206](c11.xhtml#Page_206)
  prefs: []
  type: TYPE_NORMAL
- en: TFIDF (term frequency-inverse document frequency) method, [204](c11.xhtml#Page_204)–[205](c11.xhtml#Page_205),
    [207](c11.xhtml#Page_207)–[208](c11.xhtml#Page_208)
  prefs: []
  type: TYPE_NORMAL
- en: theta, applying to thrown ball, [8](c01.xhtml#Page_8)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: thinking with your neck, [6](c01.xhtml#Page_6)–[9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: time, measuring precisely, [57](c04.xhtml#Page_57)
  prefs: []
  type: TYPE_NORMAL
- en: '`timeit` module, Python, [57](c04.xhtml#Page_57)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Titanic* lifeboat example, using sleep sort with, [71](c04.xhtml#Page_71)–[72](c04.xhtml#Page_72)'
  prefs: []
  type: TYPE_NORMAL
- en: tokenization, performing with chatbot, [204](c11.xhtml#Page_204)
  prefs: []
  type: TYPE_NORMAL
- en: tokenizing n-grams, *[159](c08.xhtml#Page_159)*–[160](c08.xhtml#Page_160)
  prefs: []
  type: TYPE_NORMAL
- en: training sets, using with decision trees, *[180](c09.xhtml#Page_180)*
  prefs: []
  type: TYPE_NORMAL
- en: '`translate()` method, using with chatbot, [203](c11.xhtml#Page_203)–[204](c11.xhtml#Page_204)'
  prefs: []
  type: TYPE_NORMAL
- en: triage and decision trees, *[166](c09.xhtml#Page_166)*
  prefs: []
  type: TYPE_NORMAL
- en: triangles
  prefs: []
  type: TYPE_NORMAL
- en: centroid, *[131](c07.xhtml#Page_131)*–[133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: creating for postmaster problem, [128](c07.xhtml#Page_128)–[134](c07.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: finding circumcenter of, [131](c07.xhtml#Page_131)–[133](c07.xhtml#Page_133)
  prefs: []
  type: TYPE_NORMAL
- en: plotting, [129](c07.xhtml#Page_129), [145](c07.xhtml#Page_145)–[146](c07.xhtml#Page_146)
  prefs: []
  type: TYPE_NORMAL
- en: replacing, [140](c07.xhtml#Page_140)–[143](c07.xhtml#Page_143)
  prefs: []
  type: TYPE_NORMAL
- en: triangulation. *See also* Bowyer-Watson algorithm; DT (Delaunay triangulation)
  prefs: []
  type: TYPE_NORMAL
- en: defined, *[134](c07.xhtml#Page_134)*
  prefs: []
  type: TYPE_NORMAL
- en: of seven points, [135](c07.xhtml#Page_135)
  prefs: []
  type: TYPE_NORMAL
- en: '`True`, Kurushima’s algorithm, [27](c02.xhtml#Page_27)'
  prefs: []
  type: TYPE_NORMAL
- en: TSP (traveling salesman problem). *See also* optimization; simulated annealing
  prefs: []
  type: TYPE_NORMAL
- en: greedy algorithms, *[112](c06.xhtml#Page_112)*–[113](c06.xhtml#Page_113)
  prefs: []
  type: TYPE_NORMAL
- en: improving, [110](c06.xhtml#Page_110)–[112](c06.xhtml#Page_112)
  prefs: []
  type: TYPE_NORMAL
- en: nearest neighbor algorithm, *[108](c06.xhtml#Page_108)*–[110](c06.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: overview, [102](c06.xhtml#Page_102)–[103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: versus postmaster problem, [127](c07.xhtml#Page_127)
  prefs: []
  type: TYPE_NORMAL
- en: setting up, [103](c06.xhtml#Page_103)–[108](c06.xhtml#Page_108)
  prefs: []
  type: TYPE_NORMAL
- en: temperature function, [113](c06.xhtml#Page_113)–[115](c06.xhtml#Page_115)
  prefs: []
  type: TYPE_NORMAL
- en: tuples, using with words and spaces, *[152](c08.xhtml#Page_152)*
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  prefs: []
  type: TYPE_NORMAL
- en: underfitting decision trees, *[181](c09.xhtml#Page_181)*–[182](c09.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: '`up_right`, Kurushima’s algorithm, [28](c02.xhtml#Page_28)–[29](c02.xhtml#Page_29)'
  prefs: []
  type: TYPE_NORMAL
- en: upper bound, defining for binary search, [73](c04.xhtml#Page_73)
  prefs: []
  type: TYPE_NORMAL
- en: '**V**'
  prefs: []
  type: TYPE_NORMAL
- en: vector similarity, determining, [206](c11.xhtml#Page_206)–[208](c11.xhtml#Page_208)
  prefs: []
  type: TYPE_NORMAL
- en: vertex, geometric terminology, *[130](c07.xhtml#Page_130)*
  prefs: []
  type: TYPE_NORMAL
- en: Voronoi diagram
  prefs: []
  type: TYPE_NORMAL
- en: generating, [143](c07.xhtml#Page_143)–[147](c07.xhtml#Page_147)
  prefs: []
  type: TYPE_NORMAL
- en: for postmaster problem, [128](c07.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: '**W**'
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loop, Kurushima’s algorithm, [31](c02.xhtml#Page_31)'
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loop'
  prefs: []
  type: TYPE_NORMAL
- en: using for binary search, [74](c04.xhtml#Page_74)
  prefs: []
  type: TYPE_NORMAL
- en: using with bits, [99](c05.xhtml#Page_99)
  prefs: []
  type: TYPE_NORMAL
- en: using with continued fractions, [85](c05.xhtml#Page_85)
  prefs: []
  type: TYPE_NORMAL
- en: using with merge sort, [67](c04.xhtml#Page_67)
  prefs: []
  type: TYPE_NORMAL
- en: using with square roots, [90](c05.xhtml#Page_90)–[91](c05.xhtml#Page_91)
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loop, RPM (Russian peasant multiplication), [18](c02.xhtml#Page_18)'
  prefs: []
  type: TYPE_NORMAL
- en: winning games, [195](c10.xhtml#Page_195)–[198](c10.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: word list, defining, [151](c08.xhtml#Page_151)–[152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: words. *See also* compound words; potential words
  prefs: []
  type: TYPE_NORMAL
- en: checking validity with imported corpus, [154](c08.xhtml#Page_154)–[156](c08.xhtml#Page_156)
  prefs: []
  type: TYPE_NORMAL
- en: ending with spaces, [156](c08.xhtml#Page_156)
  prefs: []
  type: TYPE_NORMAL
- en: finding, [151](c08.xhtml#Page_151)–[152](c08.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: tokenizing, *[159](c08.xhtml#Page_159)*–[160](c08.xhtml#Page_160)
  prefs: []
  type: TYPE_NORMAL
- en: '**X**'
  prefs: []
  type: TYPE_NORMAL
- en: XOR operation, *[98](c05.xhtml#Page_98)*
  prefs: []
  type: TYPE_NORMAL
