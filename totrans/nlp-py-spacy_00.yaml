- en: '**INTRODUCTION**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../Images/fm0xv.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Increasingly, when you call the bank or your internet provider, you might hear
    something like the following on the other end of the line: “Hello, I am your digital
    assistant. Please ask your question.” Today, robots can talk to humans using natural
    language, and they’re getting smarter. Even so, very few people understand how
    these robots work or how they might use these technologies in their own projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Natural language processing (NLP)—a branch of artificial intelligence that helps
    machines understand and respond to human language—is the key technology that lies
    at the heart of any digital assistant product. This book arms you with the skills
    you need to start creating your own NLP applications. By the end of this book,
    you’ll know how to apply NLP approaches to real-world problems, such as analyzing
    sentences, capturing the meaning of a text, composing original texts, and even
    building your own chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Python for Natural Language Processing**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to develop an NLP application, you can choose among a wide range
    of tools and technologies. All the examples in this book are implemented with
    Python code that employs the spaCy NLP library for Python. Here are some compelling
    reasons why you might want to choose Python and spaCy for your NLP development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python is a high-level programming language known for the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simplicity** If you’re new to programming, Python is a good language with
    which to start, because it’s extremely easy to learn. Due to its simplicity, Python
    allows you to write code that others can easily understand. For example, Python’s
    simplicity helps chatbot developers collaborate with linguists who don’t have
    much programming experience.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prevalence** Python is one of the most popular languages. The vast majority
    of the widely used APIs have Python wrappers that you can easily install using
    the pip installation tool. The ability to install Python wrappers via the pip
    simplifies the process of obtaining third-party tools you might want to use in
    your NLP applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Significant presence in the AI ecosystem** There are a lot of Python libraries
    available in the AI ecosystem. This availability simplifies the development of
    your NLP applications, allowing you to choose among a range of libraries to best
    solve a particular task.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The spaCy Library**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book uses spaCy, a popular Python library that contains the linguistic
    data and algorithms you’ll need to process natural language texts. As you’ll learn
    in this book, spaCy is easy to use because it provides container objects that
    represent elements of natural language texts, such as sentences and words. These
    objects, in turn, have attributes that represent linguistic features, like parts
    of speech. At the time of this writing, spaCy offered pretrained models for English,
    German, Greek, Spanish, French, Italian, Lithuanian, Norwegian Bokmål, Dutch,
    Portuguese, and multiple languages combined. In addition, spaCy offers built-in
    visualizers that you can invoke programmatically to generate a graphic of the
    syntactic structure of a sentence or named entities in a document.
  prefs: []
  type: TYPE_NORMAL
- en: The spaCy library also natively supports advanced NLP features that other popular
    NLP libraries for Python don’t. For example, spaCy natively supports word vectors
    (discussed in detail in [Chapter 5](../Text/ch05.xhtml#ch05)), unlike the Natural
    Language Toolkit (NLTK). When using the latter, you would need to use a third-party
    tool like Gensim, a Python implementation of the word2vec algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: With spaCy, you can customize existing models or individual model components,
    and you can train your own models from scratch to meet your application’s requirements
    (you’ll learn how to do this in [Chapter 10](../Text/ch10.xhtml#ch10)). You can
    also connect the statistical models trained by other popular *machine learning
    (ML)* libraries, such as TensorFlow, Keras, scikit-learn, and PyTorch. In addition,
    spaCy can operate seamlessly with other libraries in Python’s AI ecosystem, allowing
    you to, for example, take advantage of computer vision in your chatbot application,
    as you’ll do in [Chapter 12](../Text/ch12.xhtml#ch12).
  prefs: []
  type: TYPE_NORMAL
- en: '**Who Should Read This Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is for those interested in learning how to use NLP in practice. In
    particular, it might be interesting to people who want to develop chatbots for
    businesses or just for fun. Regardless of your background or experience with NLP
    or programming, you’ll be able to follow the code examples provided in this book
    because they all include detailed explanations of the process involved.
  prefs: []
  type: TYPE_NORMAL
- en: Some working knowledge of Python will be helpful, because the book doesn’t cover
    the basics of Python syntax. Also, the examples assume a school-level understanding
    of English grammar and syntax. The Appendix is a reference for some of the less
    well-known linguistic concepts. If you have a good understanding of NLP concepts
    and some basic programming, the examples will be even easier to follow.
  prefs: []
  type: TYPE_NORMAL
- en: '**What’s in the Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Natural Language Processing with Python and spaCy* begins with a brief introduction
    to the basic elements and methods of the NLP technology used to process and analyze
    natural language data. Then it proceeds with increasingly complicated techniques
    that you can use to deal with even the sophisticated challenges that natural language
    can pose for computer processing and analysis. The “Try This” sections in each
    chapter will help you reinforce the material you just learned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you’ll find in each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1](../Text/ch01.xhtml#ch01): [How Natural Language Processing Works](../Text/ch01.xhtml#ch01)**
    Provides a brief introduction to the basic elements of NLP technology. It describes
    the machine learning techniques that generate the data NLP libraries use, such
    as spaCy, including statistical language modeling and statistical neural network
    models used for solving NLP problems. It then describes the tasks and challenges
    an NLP application developer faces.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2](../Text/ch02.xhtml#ch02): [The Text-Processing Pipeline](../Text/ch02.xhtml#ch02)**
    Explains what spaCy is and what it’s designed to do, and then shows you how to
    get started with it quickly. It covers setting up your working environment and
    then coding using the text-processing pipeline, a series of basic NLP operations
    used to determine the meaning and intent of a discourse.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3](../Text/ch03.xhtml#ch03): [Working with Container Objects and
    Customizing spaCy](../Text/ch03.xhtml#ch03)** Covers spaCy’s architecture, focusing
    on the central data structures available in the library. You’ll get hands-on experience
    with spaCy’s key objects by following the examples provided. You’ll also learn
    how to customize the pipeline components to suit your application’s needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4](../Text/ch04.xhtml#ch04): [Extracting and Using Linguistic Features](../Text/ch04.xhtml#ch04)**
    Illustrates how to extract linguistic features, such as dependency labels, part-of-speech
    tags, and named entities. You’ll learn to generate and then walk up the dependency
    tree of a sentence, exploring syntactic relations. By doing so, you’ll learn how
    to programmatically continue a conversation with a chatbot user, condense long
    text, and complete other useful tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5](../Text/ch05.xhtml#ch05): [Working with Word Vectors](../Text/ch05.xhtml#ch05)**
    Explains how spaCy’s models map natural language words to vectors of real numbers,
    allowing you to do math with words. You’ll learn how to use spaCy’s similarity
    method, which compares the word vectors of container objects to determine the
    closeness of their meanings.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6](../Text/ch06.xhtml#ch06): [Finding Patterns and Walking Dependency
    Trees](../Text/ch06.xhtml#ch06)** Dives into the details of meaning extraction,
    syntactic dependency parsing, noun chunking, and entity recognition. You’ll complete
    all the steps needed to extract meaning from raw text, using word sequence patterns
    and walking dependency trees. The chapter introduces spaCy’s Matcher tool to find
    patterns and also covers when you might still need to rely on context to determine
    the proper processing approach.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7](../Text/ch07.xhtml#ch07): [Visualizations](../Text/ch07.xhtml#ch07)**
    Discusses how to take advantage of spaCy’s built-in displaCy visualizer, which
    you can use for visualizing syntactic dependencies and named entities in your
    browser. Visualizing can help you immediately identify patterns within your data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8](../Text/ch08.xhtml#ch08): [Intent Recognition](../Text/ch08.xhtml#ch08)**
    Demonstrates intent extraction, which is a common task in chatbot development.
    You’ll learn how to extract meaning from text data, a typically challenging task
    that takes just a few lines of code in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9](../Text/ch09.xhtml#ch09): [Storing User Input in a Database](../Text/ch09.xhtml#ch09)**
    Teaches you how to automatically extract keywords from user input and store them
    in a relational database, which you can then use to fill out order forms or other
    business documents.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10](../Text/ch10.xhtml#ch10): [Training Models](../Text/ch10.xhtml#ch10)**
    Covers how to train spaCy’s named entity recognizer and dependency parser to meet
    requirements of your application not covered by spaCy’s default models. It details
    how to train an existing, pretrained model with new examples and a blank one from
    scratch.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11](../Text/ch11.xhtml#ch11): [Deploying Your Own Chatbot](../Text/ch11.xhtml#ch11)**
    Guides you through the process of deploying your chatbot app to Telegram, a popular
    messenger service, so it can interact with users over the internet.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12](../Text/ch12.xhtml#ch12): [Implementing Web Data and Processing
    Images](../Text/ch12.xhtml#ch12)** Shows how your chatbot can extract answers
    to questions from Wikipedia and react to user-submitted images by using spaCy
    along with some other libraries in Python’s AI ecosystem.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Appendix](../Text/app01.xhtml#app01): [Linguistic Primer](../Text/app01.xhtml#app01)**
    Contains a brief guide to the grammar and syntax elements discussed most frequently
    in the book. Readers who don’t come from linguistic backgrounds can use it as
    a reference.'
  prefs: []
  type: TYPE_NORMAL
