["```py\nLoad a list of first names\nLoad a list of surnames\nChoose a first name at random\nAssign the name to a variable\nChoose a surname at random\nAssign the name to a variable\nPrint the names to the screen in order and in red font\nAsk the user to quit or play again\nIf user plays again:\n    repeat\nIf user quits:\n    end and exit\n```", "```py\n➊ import sys, random\n\n➋ print(\"Welcome to the Psych 'Sidekick Name Picker.'\\n\")\n   print(\"A name just like Sean would pick for Gus:\\n\\n\")\n\n   first = ('Baby Oil', 'Bad News', 'Big Burps', \"Bill 'Beenie-Weenie'\",\n            \"Bob 'Stinkbug'\", 'Bowel Noises', 'Boxelder', \"Bud 'Lite' \",\n            'Butterbean', 'Buttermilk', 'Buttocks', 'Chad', 'Chesterfield',\n            'Chewy', 'Chigger\", \"Cinnabuns', 'Cleet', 'Cornbread', 'Crab Meat',\n            'Crapps', 'Dark Skies', 'Dennis Clawhammer', 'Dicman', 'Elphonso',\n            'Fancypants', 'Figgs', 'Foncy', 'Gootsy', 'Greasy Jim', 'Huckleberry',\n            'Huggy', 'Ignatious', 'Jimbo', \"Joe 'Pottin Soil'\", 'Johnny',\n            'Lemongrass', 'Lil Debil', 'Longbranch', '\"Lunch Money\"',\n            'Mergatroid', '\"Mr Peabody\"', 'Oil-Can', 'Oinks', 'Old Scratch',\n            'Ovaltine', 'Pennywhistle', 'Pitchfork Ben', 'Potato Bug',\n            'Pushmeet','Rock Candy', 'Schlomo', 'Scratchensniff', 'Scut',\n            \"Sid 'The Squirts'\", 'Skidmark', 'Slaps', 'Snakes', 'Snoobs',\n            'Snorki', 'Soupcan Sam', 'Spitzitout', 'Squids', 'Stinky',\n            'Storyboard', 'Sweet Tea', 'TeeTee', 'Wheezy Joe',\n            \"Winston 'Jazz Hands'\", 'Worms')\n\n   last = ('Appleyard', 'Bigmeat', 'Bloominshine', 'Boogerbottom',\n           'Breedslovetrout', 'Butterbaugh', 'Clovenhoof', 'Clutterbuck',\n           'Cocktoasten', 'Endicott', 'Fewhairs', 'Gooberdapple', 'Goodensmith',\n           'Goodpasture', 'Guster', 'Henderson', 'Hooperbag', 'Hoosenater',\n           'Hootkins', 'Jefferson', 'Jenkins', 'Jingley-Schmidt', 'Johnson',\n           'Kingfish', 'Listenbee', \"M'Bembo\", 'McFadden', 'Moonshine', 'Nettles',\n           'Noseworthy', 'Olivetti', 'Outerbridge', 'Overpeck', 'Overturf',\n           'Oxhandler', 'Pealike', 'Pennywhistle', 'Peterson', 'Pieplow',\n           'Pinkerton', 'Porkins', 'Putney', 'Quakenbush', 'Rainwater',\n           'Rosenthal', 'Rubbins', 'Sackrider', 'Snuggleshine', 'Splern',\n           'Stevens', 'Stroganoff', 'Sugar-Gold', 'Swackhamer', 'Tippins',\n           'Turnipseed', 'Vinaigrette', 'Walkingstick', 'Wallbanger', 'Weewax',\n           'Weiners', 'Whipkey', 'Wigglesworth', 'Wimplesnatch', 'Winterkorn',\n           'Woolysocks')\n\n➌ while True:\n    ➍ firstName = random.choice(first)\n\n    ➎ lastName = random.choice(last)\n\n       print(\"\\n\\n\")\n    ➏ print(\"{} {}\".format(firstName, lastName), file=sys.stderr)\n       print(\"\\n\\n\")\n\n    ➐ try_again = input(\"\\n\\nTry again? (Press Enter else n to quit)\\n \")\n       if try_again.lower() == \"n\":\n           break\n\n➑ input(\"\\nPress Enter to exit.\")\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pylint pseudonyms.py\nNo config file found, using default configuration\n************* Module pseudonyms\nC: 45, 0: No space allowed around keyword argument assignment\n    print(firstName, lastName, file = sys.stderr)\n                                    ^ (bad-whitespace)\nC:  1, 0: Missing module docstring (missing-docstring)\nC:  2, 0: Multiple imports on one line (sys, random) (multiple-imports)\nC:  7, 0: Invalid constant name \"first\" (invalid-name)\nC: 23, 0: Invalid constant name \"last\" (invalid-name)\nC: 40, 4: Invalid constant name \"firstName\" (invalid-name)\nC: 42, 4: Invalid constant name \"lastName\" (invalid-name)\nC: 48, 4: Invalid constant name \"try_again\" (invalid-name)\n```", "```py\nGlobal evaluation\n-----------------\nYour code has been rated at 4.00/10 (previous run: 4.00/10, +0.00)\n```", "```py\n   def main():\n       some indented code\n       some indented code\n       some indented code\n➊ if __name__ == \"__main__\":\n    ➋ main()\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pylint pseudonyms_main\nNo config file found, using default configuration\n************* Module pseudonyms_main\nC: 47, 0: No space allowed around keyword argument assignment\n        print(firstName, lastName, file = sys.stderr)\n                                        ^ (bad-whitespace)\nC:  1, 0: Missing module docstring (missing-docstring)\nC:  2, 0: Multiple imports on one line (sys, random) (multiple-imports)\nC:  4, 0: Missing function docstring (missing-docstring)\nC: 42, 8: Invalid variable name \"firstName\" (invalid-name)\nC: 44, 8: Invalid variable name \"lastName\" (invalid-name)\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pylint -rn pseudonyms_main.py\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pylint --max-line-length=79 pseudonyms_main\n```", "```py\nC: 12, 0: Line too long (80/79) (line-too-long)\nC: 14, 0: Line too long (83/79) (line-too-long)\n--snip--\n```", "```py\nyour pathname>pylint -rn --max-line-length=79 --generate-rcfile > name.pylintrc\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pylint --rcfile myconfig.pylintrc pseudonyms_main\n```", "```py\ndef circ(r):\n    \"\"\"Return the circumference of a circle with radius of r.\"\"\"\n    c = 2 * r * math.pi\n    return c\n```", "```py\ndef circ(r):\n    \"\"\"Return the circumference of a circle with radius of r.\n\n    Arguments:\n    r – radius of circle\n\n    Returns:\n        float: circumference of circle\n    \"\"\"\n    c = 2 * r * math.pi\n    return c\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pydocstyle\n.\\OLD_pseudonyms_main.py:1 at module level:\n        D100: Missing docstring in public module\n.\\OLD_pseudonyms_main.py:4 in public function `main`:\n        D103: Missing docstring in public function\n.\\ pseudonyms.py:1 at module level:\n        D100: Missing docstring in public module\n.\\ pseudonyms_main_broken.py:1 at module level:\n        D200: One-line docstring should fit on one line with quotes (found 2)\n.\\ pseudonyms_main_broken.py:6 in public function `main`:\n        D205: 1 blank line required between summary line and description\n(found 0)\n```", "```py\nC:\\Python35\\Python 3 Stuff\\Psych>pydocstyle pseudonyms_main_fixed.py\n\nC:\\Python35\\Python 3 Stuff\\Psych>\n```", "```py\nyour_path>pylint --max-line-length=79 pseudonyms_main_fixed\n```", "```py\nGlobal evaluation\n-----------------\nYour code has been rated at 3.33/10\n```", "```py\n\"\"\"Generate funny names by randomly combining names from 2 separate lists.\"\"\"\nimport sys\nimport random\n\ndef main():\n    \"\"\"Choose names at random from 2 tuples of names and print to screen.\"\"\"\n    print(\"Welcome to the Psych 'Sidekick Name Picker.'\\n\")\n    print(\"A name just like Sean would pick for Gus:\\n\\n\")\n\n    first = ('Baby Oil', 'Bad News', 'Big Burps', \"Bill 'Beenie-Weenie'\",\n             \"Bob 'Stinkbug'\", 'Bowel Noises', 'Boxelder', \"Bud 'Lite'\",\n             'Butterbean', 'Buttermilk', 'Buttocks', 'Chad', 'Chesterfield',\n             'Chewy', 'Chigger', 'Cinnabuns', 'Cleet', 'Cornbread',\n             'Crab Meat', 'Crapps', 'Dark Skies', 'Dennis Clawhammer',\n             'Dicman', 'Elphonso', 'Fancypants', 'Figgs', 'Foncy', 'Gootsy',\n             'Greasy Jim', 'Huckleberry', 'Huggy', 'Ignatious', 'Jimbo',\n             \"Joe 'Pottin Soil'\", 'Johnny', 'Lemongrass', 'Lil Debil',\n             'Longbranch', '\"Lunch Money\"', 'Mergatroid', '\"Mr Peabody\"',\n             'Oil-Can', 'Oinks', 'Old Scratch', 'Ovaltine', 'Pennywhistle',\n             'Pitchfork Ben', 'Potato Bug', 'Pushmeet', 'Rock Candy',\n             'Schlomo', 'Scratchensniff', 'Scut', \"Sid 'The Squirts'\",\n             'Skidmark', 'Slaps', 'Snakes', 'Snoobs', 'Snorki', 'Soupcan Sam',\n             'Spitzitout', 'Squids', 'Stinky', 'Storyboard', 'Sweet Tea',\n             'TeeTee', 'Wheezy Joe', \"Winston 'Jazz Hands'\", 'Worms')\n\n    last = ('Appleyard', 'Bigmeat', 'Bloominshine', 'Boogerbottom',\n            'Breedslovetrout', 'Butterbaugh', 'Clovenhoof', 'Clutterbuck',\n            'Cocktoasten', 'Endicott', 'Fewhairs', 'Gooberdapple',\n            'Goodensmith', 'Goodpasture', 'Guster', 'Henderson', 'Hooperbag',\n            'Hoosenater', 'Hootkins', 'Jefferson', 'Jenkins',\n            'Jingley-Schmidt', 'Johnson', 'Kingfish', 'Listenbee', \"M'Bembo\",\n            'McFadden', 'Moonshine', 'Nettles', 'Noseworthy', 'Olivetti',\n            'Outerbridge', 'Overpeck', 'Overturf', 'Oxhandler', 'Pealike',\n            'Pennywhistle', 'Peterson', 'Pieplow', 'Pinkerton', 'Porkins',\n            'Putney', 'Quakenbush', 'Rainwater', 'Rosenthal', 'Rubbins',\n            'Sackrider', 'Snuggleshine', 'Splern', 'Stevens', 'Stroganoff',\n            'Sugar-Gold', 'Swackhamer', 'Tippins', 'Turnipseed',\n            'Vinaigrette', 'Walkingstick', 'Wallbanger', 'Weewax', 'Weiners',\n            'Whipkey', 'Wigglesworth', 'Wimplesnatch', 'Winterkorn',\n            'Woolysocks')\n\n    while True:         \n        first_name = random.choice(first)\n        last_name = random.choice(last)\n\n        print(\"\\n\\n\")\n        # Trick IDLE by using \"fatal error\" setting to print name in red.\n        print(\"{} {}\".format(first_name, last_name), file=sys.stderr)\n        print(\"\\n\\n\")\n\n        try_again = input(\"\\n\\nTry again? (Press Enter else n to quit)\\n \")\n\n        if try_again.lower() == \"n\":\n            break\n\n    input(\"\\nPress Enter to exit.\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nGlobal evaluation\n-----------------\nYour code has been rated at 10.00/10 (previous run: 3.33/10, +6.67)\n```"]