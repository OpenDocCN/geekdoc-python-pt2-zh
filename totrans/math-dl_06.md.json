["```py\n>>> import numpy as np\n\n>>> a = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n>>> print(a)\n\n[[1 2 3]\n\n [4 5 6]\n\n [7 8 9]]\n\n>>> print(a.transpose())\n\n[[1 4 7]\n\n [2 5 8]\n\n [3 6 9]]\n\n>>> print(a.T)\n\n[[1 4 7]\n\n [2 5 8]\n\n [3 6 9]]\n```", "```py\n>>> b = np.array([[1,2,3,4],[5,6,7,8]])\n\n>>> print(b)\n\n [[1 2 3 4]\n\n [5 6 7 8]]\n\n>>> print(np.diag(b))\n\n[1 6]\n\n>>> print(np.trace(b))\n\n7\n```", "```py\n>>> from numpy.linalg import matrix_power\n\n>>> a = np.array([[1,2],[3,4]])\n\n>>> print(matrix_power(a,2))\n\n[[ 7 10]\n\n [15 22]]\n\n>>> print(matrix_power(a,10))\n\n[[ 4783807 6972050]\n\n [10458075 15241882]]\n```", "```py\n>>> print(np.zeros((3,5)))\n\n[[0\\. 0\\. 0\\. 0\\. 0.]\n\n [0\\. 0\\. 0\\. 0\\. 0.]\n\n [0\\. 0\\. 0\\. 0\\. 0.]]\n\n>>> print(np.ones(3,3))\n\n[[1\\. 1\\. 1.]\n\n [1\\. 1\\. 1.]\n\n [1\\. 1\\. 1.]]\n```", "```py\n>>> a = np.array([[1,2],[3,4]])\n\n>>> i = np.identity(2)\n\n>>> print(i)\n\n[[1\\. 0.]\n\n [0\\. 1.]]\n\n>>> print(a @ i)\n\n [[1\\. 2.]\n\n [3\\. 4.]]\n```", "```py\n>>> a = np.arange(16).reshape((4,4))\n\n>>> print(a)\n\n[[ 0  1  2  3]\n\n [ 4  5  6  7]\n\n [ 8  9 10 11]\n\n [12 13 14 15]]\n\n>>> print(np.triu(a))\n\n[[ 0 1  2  3]\n\n [ 0 5  6  7]\n\n [ 0 0 10 11]\n\n [ 0 0 0 15]]\n\n>>> print(np.tril(a))\n\n[[ 0  0  0  0]\n\n [ 4  5  0  0]\n\n [ 8  9 10  0]\n\n [12 13 14 15]]\n```", "```py\n\ndef factorial(n):\n\n    if (n == 0):\n\n        return 1\n\n    return n*factorial(n-1)\n```", "```py\n>>> a = np.array([[1,2],[3,4]])\n\n>>> print(a)\n\n[[1 2]\n\n [3 4]]\n\n>>> np.linalg.det(a)\n\n-2.0000000000000004\n\n>>> 1*4 - 2*3\n\n-2\n```", "```py\n>>> a = np.array([[1,2,1],[2,1,2],[1,2,2]])\n\n>>> print(a)\n\n[[1 2 1]\n\n [2 1 2]\n\n [1 2 2]]\n\n>>> b = np.linalg.inv(a)\n\n>>> print(b)\n\n[[ 0.66666667 0.66666667 -1\\. ]\n\n [ 0.66666667 -0.33333333 0\\. ]\n\n [-1.          0.         1\\. ]]\n\n>>> print(a @ b)\n\n[[1\\. 0\\. 0.]\n\n [0\\. 1\\. 0.]\n\n [0\\. 0\\. 1.]]\n\n>>> print(b @ a)\n\n[[1\\. 0\\. 0.]\n\n [0\\. 1\\. 0.]\n\n [0\\. 0\\. 1.]]\n```", "```py\n>>> a = np.array([[0,1],[-2,-3]])\n\n>>> print(np.linalg.eig(a)[0])\n\n[-1\\. -2.]\n```", "```py\n>>> print(np.linalg.eig(a)[1])\n\n[[ 0.70710678 -0.4472136 ]\n\n [-0.70710678  0.89442719]]\n```", "```py\n>>> np.array([1,-1])/np.sqrt((np.array([1,-1])**2).sum())\n\narray([ 0.70710678, -0.70710678])\n\n>>> np.array([-1,2])/np.sqrt((np.array([-1,2])**2).sum())\n\narray([-0.4472136, 0.89442719])\n```", "```py\n>>> from sklearn import datasets\n\n>>> iris = datasets.load_iris()\n\n>>> X = iris.data[:5]\n\n>>> X\n\narray([[5.1, 3.5, 1.4, 0.2],\n\n       [4.9, 3.0, 1.4, 0.2],\n\n       [4.7, 3.2, 1.3, 0.2],\n\n       [4.6, 3.1, 1.5, 0.2],\n\n       [5.0, 3.6, 1.4, 0.2]])\n```", "```py\n\n>>> print(np.cov(X, rowvar=False))\n\n[[ 0.043   0.0365 -0.0025  0.    ]\n\n [ 0.0365  0.067  -0.0025  0.    ]\n\n [-0.0025 -0.0025  0.005   0.    ]\n\n [ 0.      0.      0.      0.    ]]\n```", "```py\n>>> print(np.std(X, axis=0)**2)\n\n[0.0344 0.0536 0.004 0.     ]\n```", "```py\n\n>>> print(np.std(X, axis=0, ddof=1)**2)\n\n[0.043 0.067 0.005  0.   ]\n```", "```py\n\n   import numpy as np\n\n   from sklearn import datasets\n\n❶ from scipy.spatial.distance import mahalanobis\n\n   bc = datasets.load_breast_cancer()\n\n   d = bc.data; l = bc.target\n\n❷ i = np.argsort(np.random.random(len(d)))\n\n   d = d[i]; l = l[i]\n\n   xtrn, ytrn = d[:400], l[:400]\n\n   xtst, ytst = d[400:], l[400:]\n\n ❸ i = np.where(ytrn == 0)\n\n   m0 = xtrn[i].mean(axis=0)\n\n   i = np.where(ytrn == 1)\n\n   m1 = xtrn[i].mean(axis=0)\n\n   S = np.cov(xtrn, rowvar=False)\n\n   SI= np.linalg.inv(S)\n\n   def score(xtst, ytst, m, SI):\n\n       nc = 0\n\n       for i in range(len(ytst)):\n\n           d = np.array([mahalanobis(xtst[i],m[0],SI),\n\n                         mahalanobis(xtst[i],m[1],SI)])\n\n           c = np.argmin(d)\n\n           if (c == ytst[i]):\n\n               nc += 1\n\n       return nc / len(ytst)\n\n   mscore = score(xtst, ytst, [m0,m1], SI)\n\n❹ escore = score(xtst, ytst, [m0,m1], np.identity(30))\n\n   print(\"Mahalanobis score = %0.4f\" % mscore)\n\n   print(\"Euclidean score = %0.4f\" % escore)\n```", "```py\n   from scipy.special import rel_entr\n\n   N = 1000000\n\n❶ p = np.random.randint(0,13,size=N)\n\n❷ p = np.bincount(p)\n\n❸ p = p / p.sum()\n\n   q = np.random.binomial(12,0.9,size=N)\n\n   q = np.bincount(q)\n\n   q = q / q.sum()\n\n   w = np.random.binomial(12,0.4,size=N)\n\n   w = np.bincount(w)\n\n   w = w / w.sum()\n\n   print(rel_entr(q,p).sum())\n\n   print(rel_entr(w,p).sum())\n```", "```py\n   from sklearn.datasets import load_iris\n\n   iris = load_iris().data.copy()\n\n❶ m = iris.mean(axis=0)\n\n   ir = iris - m\n\n❷ cv = np.cov(ir, rowvar=False)\n\n❸ val, vec = np.linalg.eig(cv)\n\n   val = np.abs(val)\n\n❹ idx = np.argsort(val)[::-1]\n\n   ex = val[idx] / val.sum()\n\n   print(\"fraction explained: \", ex)\n\n❺ w = np.vstack((vec[:,idx[0]],vec[:,idx[1]]))\n\n❻ d = np.zeros((ir.shape[0],2))\n\n   for i in range(ir.shape[0]):\n\n       d[i,:] = np.dot(w,ir[i])\n```", "```py\nfraction explained: [0.92461872 0.05306648 0.01710261 0.00521218]\n```", "```py\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\n\npca.fit(ir)\n\nd = pca.fit_transform(ir)\n```", "```py\n>>> from scipy.linalg import svd\n\n>>> a = np.array([[3,2,2],[2,3,-2]])\n\n>>> u,s,vt = svd(a)\n```", "```py\n>>> print(u)\n\n[[-0.70710678 -0.70710678]\n\n [-0.70710678  0.70710678]]\n\n>>> print(s)\n\n[5\\. 3.]\n\n>>> print(vt)\n\n[[-7.07106781e-01 -7.07106781e-01 -5.55111512e-17]\n\n [-2.35702260e-01  2.35702260e-01 -9.42809042e-01]\n\n [-6.66666667e-01  6.66666667e-01  3.33333333e-01]]\n```", "```py\n>>> print(np.linalg.eig(a.T @ a)[0])\n\n[2.5000000e+01 5.0324328e-15 9.0000000e+00]\n```", "```py\n>>> print(u.T @ u)\n\n[[1.00000000e+00 3.33066907e-16]\n\n [3.33066907e-16 1.00000000e+00]]\n\n>>> print(vt @ vt.T)\n\n[[ 1.00000000e+00  8.00919909e-17 -1.85037171e-17]\n\n [ 8.00919909e-17  1.00000000e+00 -5.55111512e-17]\n\n [-1.85037171e-17 -5.55111512e-17  1.00000000e+00]]\n```", "```py\n>>> S = np.zeros((2,3))\n\n>>> S[0,0], S[1,1] = s\n\n>>> print(S)\n\n[[5\\. 0\\. 0.]\n\n [0\\. 3\\. 0.]]\n\n>>> A = u @ S @ vt\n\n>>> print(A)\n\n[[ 3\\. 2\\. 2.]\n\n [ 2\\. 3\\. -2.]]\n```", "```py\n   u,s,vt = svd(ir)\n\n❶ S = np.zeros((ir.shape[0], ir.shape[1]))\n\n   for i in range(4):\n\n       S[i,i] = s[i]\n\n❷ S = S[:, :2]\n\n   T = u @ S\n```", "```py\n>>> A = np.array([[3,2,2],[2,3,-2]])\n\n>>> print(A)\n\n[[ 3 2  2]\n\n [ 2 3 -2]]\n```", "```py\n>>> u,s,vt = svd(A)\n\n>>> Splus = np.array([[1/s[0],0],[0,1/s[1]],[0,0]])\n\n>>> print(Splus)\n\n[[0.2        0.        ]\n\n [0.         0.33333333]\n\n [0.         0.        ]]\n```", "```py\n>>> Aplus = vt.T @ Splus @ u.T\n\n>>> print(Aplus)\n\n[[ 0.15555556  0.04444444]\n\n [ 0.04444444  0.15555556]\n\n [ 0.22222222 -0.22222222]]\n\n>>> print(A @ Aplus @ A)\n\n[[ 3\\. 2.  2.]\n\n [ 2\\. 3\\. -2.]]\n```", "```py\n>>> print(A @ Aplus)\n\n[[1.00000000e+00 5.55111512e-17]\n\n [1.66533454e-16 1.00000000e+00]]\n```"]