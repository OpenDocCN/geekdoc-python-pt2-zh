["```py\nimport numpy as np\nimport wave, math\nsRate = 44100\nnSamples = sRate * 5\n❶ x = np.arange(nSamples)/float(sRate)\n❷ vals = np.sin(2.0*math.pi*220.0*x)\n❸ data = np.array(vals*32767, 'int16').tostring()\nfile = wave.open('sine220.wav', 'wb')\n❹ file.setparams((1, 2, sRate, nSamples, 'NONE', 'uncompressed'))\n❺ file.writeframes(data)\nfile.close()\n\n```", "```py\n>>> `from collections import deque`\n❶ >>> `d = deque(range(10), maxlen=10)`\n>>> `print(d)`\ndeque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)\n❷ >>> `d.append(10)`\n>>> `print(d)`\ndeque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxlen=10)\n\n```", "```py\n# initialize plotting\n❶ fig, ax = plt.subplots(1)\n❷ line, = ax.plot([], [])\ndef generateNote(freq):\n    \"\"\"generate note using Karplus-Strong algorithm\"\"\"\n    nSamples = 44100\n    sampleRate = 44100\n  ❸ N = int(sampleRate/freq)\n  ❹ if gShowPlot:\n        # set axis\n        ax.set_xlim([0, N])\n        ax.set_ylim([-1.0, 1.0])\n        line.set_xdata(np.arange(0, N))\n    # initialize ring buffer\n  ❺ buf = deque([random.random() - 0.5 for i in range(N)], maxlen=N)\n    # init samples buffer\n  ❻ samples = np.array([0]*nSamples, 'float32')\n\n```", "```py\n    for i in range(nSamples):\n      ❶ samples[i] = buf[0]\n      ❷ avg = 0.995*0.5*(buf[0] + buf[1])\n      ❸ buf.append(avg)\n        # plot of flag set\n      ❹ if gShowPlot:\n            if i % 1000 == 0:\n                line.set_ydata(buf)\n                fig.canvas.draw()\n                fig.canvas.flush_events()\n    # samples to 16-bit to string\n    # max value is 32767 for 16-bit\n  ❺ samples = np.array(samples * 32767, 'int16')\n  ❻ return samples.tobytes()\n\n```", "```py\ndef writeWAVE(fname, data):\n    # open file\n  ❶ file = wave.open(fname, 'wb')\n    # WAV file parameters\n    nChannels = 1\n    sampleWidth = 2\n    frameRate = 44100\n    nFrames = 44100\n    # set parameters\n  ❷ file.setparams((nChannels, sampleWidth, frameRate, nFrames,\n                    'NONE', 'noncompressed'))\n  ❸ file.writeframes(data)\n    file.close()\n\n```", "```py\nclass NotePlayer:\n    # constructor\n    def __init__(self):\n        # init pyaudio\n      ❶ self.pa = pyaudio.PyAudio()\n        # open stream\n      ❷ self.stream = self.pa.open(\n                format=pyaudio.paInt16,\n                channels=1,\n                rate=44100,\n                output=True)\n        # dictionary of notes\n      ❸ self.notes = []\n\n```", "```py\ndef __del__(self):\n    # destructor\n    self.stream.stop_stream()\n    self.stream.close()\n    self.pa.terminate()\n\n```", "```py\ndef add(self, fileName):\n    self.notes.append(fileName)\n\n```", "```py\ndef play(self, fileName):\n    try:\n        print(\"playing \" + fileName)\n        # open WAV file\n      ❶ wf = wave.open(fileName, 'rb')\n        # read a chunk\n      ❷ data = wf.readframes(CHUNK)\n        # read rest\n        while data != b'':\n          ❸ self.stream.write(data)\n          ❹ data = wf.readframes(CHUNK)\n        # clean up\n      ❺ wf.close()\n    except BaseException as err:\n      ❻ print(f\"Exception! {err=}, {type(err)=}.\\nExiting.\")\n        exit(0)\n\n```", "```py\ndef playRandom(self):\n    \"\"\"play a random note\"\"\"\n    index = random.randint(0, len(self.notes)-1)\n    note = self.notes[index]\n    self.play(note)\n\n```", "```py\ndef main():\n--`snip`--\n    parser = argparse.ArgumentParser(description=\"Generating sounds with\n                                               Karplus-Strong Algorithm\")\n    # add arguments\n    parser.add_argument('--display', action='store_true', required=False)\n    parser.add_argument('--play', action='store_true', required=False)\n    args = parser.parse_args()\n    # show plot if flag set\n  ❶ if args.display:\n        gShowPlot = True\n        plt.show(block=False)\n    # create note player\n  ❷ nplayer = NotePlayer()\n    print('creating notes...')\n    for name, freq in list(pmNotes.items()):\n        fileName = name + '.wav'\n      ❸ if not os.path.exists(fileName) or args.display:\n            data = generateNote(freq)\n            print('creating ' + fileName + '...')\n            writeWAVE(fileName, data)\n        else:\n            print('fileName already created. skipping...')\n        # add note to player\n      ❹ nplayer.add(name + '.wav')\n        # play note if display flag set\n        if args.display:\n          ❺ nplayer.play(name + '.wav')\n            time.sleep(0.5)\n    # play a random tune\n    if args.play:\n        while True:\n            try:\n              ❻ nplayer.playRandom()\n                # rest - 1 to 8 beats\n              ❼ rest = np.random.choice([1, 2, 4, 8], 1,\n                                        p=[0.15, 0.7, 0.1, 0.05])\n                time.sleep(0.25*rest[0])\n            except KeyboardInterrupt:\n                exit()\n\n```", "```py\npmNotes = {'C4': 262, 'Eb': 311, 'F': 349, 'G': 391, 'Bb': 466}\n\n```", "```py\n$ `python ks.py --display`\n\n```", "```py\n$ `python ks.py --play`\n\n```", "```py\n\"\"\"\nks.py\nUses the Karplus-Strong algorithm to generate musical notes\nin a pentatonic scale.\nAuthor: Mahesh Venkitachalam\n\"\"\"\nimport sys, os\nimport time, random\nimport wave, argparse\nimport numpy as np\nfrom collections import deque\nimport matplotlib\n# to fix graph display issues on macOS\nmatplotlib.use('TkAgg')\nfrom matplotlib import pyplot as plt\nimport pyaudio\n# show plot of algorithm in action?\ngShowPlot = False\n# notes of a pentatonic minor scale\n# piano C4-E(b)-F-G-B(b)-C5\npmNotes = {'C4': 262, 'Eb': 311, 'F': 349, 'G':391, 'Bb':466}\nCHUNK = 1024\n# initialize plotting\nfig, ax = plt.subplots(1)\nline, = ax.plot([], [])\n# write out WAV file\ndef writeWAVE(fname, data):\n    \"\"\"write data to WAV file\"\"\"\n    # open file\n    file = wave.open(fname, 'wb')\n    # WAV file parameters\n    nChannels = 1\n    sampleWidth = 2\n    frameRate = 44100\n    nFrames = 44100\n    # set parameters\n    file.setparams((nChannels, sampleWidth, frameRate, nFrames,\n                    'NONE', 'noncompressed'))\n    file.writeframes(data)\n    file.close()\ndef generateNote(freq):\n    \"\"\"generate note using Karplus-Strong algorithm\"\"\"\n    nSamples = 44100\n    sampleRate = 44100\n    N = int(sampleRate/freq)\n    if gShowPlot:\n        # set axis\n        ax.set_xlim([0, N])\n        ax.set_ylim([-1.0, 1.0])\n        line.set_xdata(np.arange(0, N))\n    # initialize ring buffer\n    buf = deque([random.random() - 0.5 for i in range(N)], maxlen=N)\n    # init sample buffer\n    samples = np.array([0]*nSamples, 'float32')\n    for i in range(nSamples):\n        samples[i] = buf[0]\n        avg = 0.995*0.5*(buf[0] + buf[1])\n        buf.append(avg)\n        # plot of flag set\n        if gShowPlot:\n            if i % 1000 == 0:\n                line.set_ydata(buf)\n                fig.canvas.draw()\n                fig.canvas.flush_events()\n    # samples to 16-bit to string\n    # max value is 32767 for 16-bit\n    samples = np.array(samples * 32767, 'int16')\n    return samples.tobytes()\n# play a WAV file\nclass NotePlayer:\n    # constructor\n    def __init__(self):\n        # init pyaudio\n        self.pa = pyaudio.PyAudio()\n        # open stream\n        self.stream = self.pa.open(\n                format=pyaudio.paInt16,\n                channels=1,\n                rate=44100,\n                output=True)\n        # dictionary of notes\n        self.notes = []\n    def __del__(self):\n        # destructor\n        self.stream.stop_stream()\n        self.stream.close()\n        self.pa.terminate()\n    # add a note\n    def add(self, fileName):\n        self.notes.append(fileName)\n    # play a note\n    def play(self, fileName):\n        try:\n            print(\"playing \" + fileName)\n            # open WAV file\n            wf = wave.open(fileName, 'rb')\n            # read a chunk\n            data = wf.readframes(CHUNK)\n            # read rest\n            while data != b'':\n                self.stream.write(data)\n                data = wf.readframes(CHUNK)\n            # clean up\n            wf.close()\n        except BaseException as err:\n            print(f\"Exception! {err=}, {type(err)=}.\\nExiting.\")\n            exit(0)\n    def playRandom(self):\n        \"\"\"play a random note\"\"\"\n        index = random.randint(0, len(self.notes)-1)\n        note = self.notes[index]\n        self.play(note)\n# main() function\ndef main():\n    # declare global var\n    global gShowPlot\n    parser = argparse.ArgumentParser(description=\"Generating sounds with\n                                              Karplus-Strong Algorithm.\")\n    # add arguments\n    parser.add_argument('--display', action='store_true', required=False)\n    parser.add_argument('--play', action='store_true', required=False)\n    args = parser.parse_args()\n    # show plot if flag set\n    if args.display:\n        gShowPlot = True\n        # plt.ion()\n        plt.show(block=False)\n    # create note player\n    nplayer = NotePlayer()\n    print('creating notes...')\n    for name, freq in list(pmNotes.items()):\n        fileName = name + '.wav'\n        if not os.path.exists(fileName) or args.display:\n            data = generateNote(freq)\n            print('creating ' + fileName + '...')\n            writeWAVE(fileName, data)\n        else:\n            print('fileName already created. skipping...')\n        # add note to player\n        nplayer.add(name + '.wav')\n        # play note if display flag set\n        if args.display:\n            nplayer.play(name + '.wav')\n            time.sleep(0.5)\n    # play a random tune\n    if args.play:\n        while True:\n            try:\n                nplayer.playRandom()\n                # rest - 1 to 8 beats\n                rest = np.random.choice([1, 2, 4, 8], 1,\n                                        p=[0.15, 0.7, 0.1, 0.05])\n                time.sleep(0.25*rest[0])\n            except KeyboardInterrupt:\n                exit()\n# call main\nif __name__ == '__main__':\n    main()\n\n```"]