["```py\n def list_of_zeros(length: int):\n    return [0] * length\n\ndef list_of_list_of_zeros(rows: int, cols: int):\n    return [list_of_zeros(cols) for _ in range(rows)]\n```", "```py\n>>> [0] * 5\n[0, 0, 0, 0, 0]\n```", "```py\nfrom _ in range(rows)\n```", "```py\n>>> from utils.lists import list_of_list_of_zeros\n>>> list_of_list_of_zeros(2, 3)\n[[0, 0, 0], [0, 0, 0]]\n```", "```py\nm.value_at(2, 4)\nv.value_at(3)\n```", "```py\nfrom utils.lists import list_of_zeros\n\nclass Vector:\n\n    def __init__(self, length: int):\n        self.__length = length\n        self.__data = list_of_zeros(length)\n\n    @property\n    def length(self):\n        return self.__length\n```", "```py\nclass Vector:\n   --snip--\n\n   def set_value(self, value: float, index: int):\n       self.__data[index] = value\n       return self\n\n   def add_to_value(self, amount: float, index: int):\n       self.__data[index] += amount\n       return self\n\n   def set_data(self, data: [float]):\n       if len(data) != self.__length:\n           raise ValueError('Cannot set data: length mismatch')\n\n       for i in range(self.__length):\n           self.__data[i] = data[i]\n\n       return self\n```", "```py\nvec = Vector(5).set_value(3, 2)\n```", "```py\nvec = Vector(5)\nvec.set_value(3, 2)\n```", "```py\nclass Vector:\n   --snip--\n\n   def value_at(self, index: int):\n       return self.__data[index]\n```", "```py\nfrom geom2d import are_close_enough\n```", "```py\nfrom geom2d import are_close_enough\nfrom utils.lists import list_of_zeros\n\nclass Vector:\n    --snip--\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n\n        if not isinstance(other, Vector):\n            return False\n\n        if self.__length != other.__length:\n            return False\n\n        for i in range(self.length):\n            if not are_close_enough(\n                    self.value_at(i),\n                    other.value_at(i)\n            ):\n                return False\n\n        return True\n```", "```py\nfrom geom2d import are_close_enough\nfrom utils.lists import list_of_zeros\n\nclass Vector:\n\n    def __init__(self, length: int):\n        self.__length = length\n        self.__data = list_of_zeros(length)\n\n    @property\n    def length(self):\n        return self.__length\n\n    def set_value(self, value: float, index: int):\n        self.__data[index] = value\n        return self\n\n    def add_to_value(self, amount: float, index: int):\n        self.__data[index] += amount\n        return self\n\n    def set_data(self, data: [float]):\n        if len(data) != self.__length:\n            raise ValueError('Cannot set data: length mismatch')\n\n        for i in range(self.__length):\n            self.__data[i] = data[i]\n\n        return self\n\n    def value_at(self, index: int):\n        return self.__data[index]\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n\n        if not isinstance(other, Vector):\n            return False\n\n        if self.__length != other.__length:\n            return False\n\n        for i in range(self.length):\n            if not are_close_enough(\n                    self.value_at(i),\n                    other.value_at(i)\n            ):\n                return False\n\n        return True\n```", "```py\nimport unittest\n\nfrom eqs.vector import Vector\n\nclass VectorTest(unittest.TestCase):\n\n    def test_length(self):\n        self.assertEqual(5, Vector(5).length)\n\n    def test_unset_value_is_zero(self):\n        vector = Vector(2)\n        self.assertEqual(0.0, vector.value_at(0))\n        self.assertEqual(0.0, vector.value_at(1))\n\n    def test_set_get_value(self):\n        value = 10.0\n        vector = Vector(2).set_value(value, 1)\n        self.assertEqual(0.0, vector.value_at(0))\n        self.assertEqual(value, vector.value_at(1))\n\n    def test_add_to_value(self):\n        vector = Vector(2).set_data([1, 2]).add_to_value(10, 0)\n        self.assertEqual(11, vector.value_at(0))\n        self.assertEqual(2, vector.value_at(1))\n```", "```py\n$ python3 -m unittest eqs/tests/vector_test.py\n```", "```py\nfrom utils.lists import list_of_list_of_zeros\n\nclass Matrix:\n\n    def __init__(self, rows_count: int, cols_count: int):\n        self.__rows_count = rows_count\n        self.__cols_count = cols_count\n        self.__is_square = rows_count == cols_count\n        self.__data = list_of_list_of_zeros(rows_count, cols_count)\n\n    @property\n    def rows_count(self):\n        return self.__rows_count\n\n    @property\n    def cols_count(self):\n        return self.__cols_count\n\n    @property\n    def is_square(self):\n        return self.__is_square\n```", "```py\nclass Matrix:\n    --snip--\n\n   def set_value(self, value: float, row: int, col: int):\n       self.__data[row][col] = value\n       return self\n\n   def add_to_value(self, amount: float, row: int, col: int):\n       self.__data[row][col] += amount\n       return self\n```", "```py\nclass Matrix:\n    --snip--\n\n   def set_data(self, data: [float]):\n    ➊ if len(data) != self.__cols_count * self.__rows_count:\n           raise ValueError('Cannot set data: size mismatch')\n\n       for row in range(self.__rows_count):\n        ➋ offset = self.__cols_count * row\n           for col in range(self.__cols_count):\n            ➌ self.__data[row][col] = data[offset + col]\n\n       return self\n```", "```py\nclass Matrix:\n    --snip--\n\n    def set_identity_row(self, row: int):\n        for col in range(self.__cols_count):\n            self.__data[row][col] = 1 if row == col else 0\n\n        return self\n\n    def set_identity_col(self, col: int):\n        for row in range(self.__rows_count):\n            self.__data[row][col] = 1 if row == col else 0\n\n        return self\n```", "```py\n<expression> if <condition> else <expression>\n```", "```py\nclass Matrix:\n    --snip--\n\n    def value_at(self, row: int, col: int):\n        return self.__data[row][col]\n\n    def value_transposed_at(self, row: int, col: int):\n        return self.__data[col][row]\n```", "```py\nclass Matrix:\n    --snip--\n\n    def scale(self, factor: float):\n        for i in range(self.__rows_count):\n            for j in range(self.__cols_count):\n                self.__data[i][j] *= factor\n\n        return self\n```", "```py\nfrom geom2d import are_close_enough\n```", "```py\nfrom geom2d import are_close_enough\nfrom utils.lists import list_of_list_of_zeros\n\nclass Matrix:\n    --snip--\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n\n        if not isinstance(other, Matrix):\n            return False\n\n        if self.__rows_count != other.rows_count:\n            return False\n\n        if self.__cols_count != other.cols_count:\n            return False\n\n        for i in range(self.__rows_count):\n            for j in range(self.__cols_count):\n                if not are_close_enough(\n                        self.__data[i][j],\n                        other.__data[i][j]\n                ):\n                    return False\n\n        return True\n```", "```py\nfrom geom2d import are_close_enough\nfrom utils.lists import list_of_list_of_zeros\n\nclass Matrix:\n\n    def __init__(self, rows_count: int, cols_count: int):\n        self.__rows_count = rows_count\n        self.__cols_count = cols_count\n        self.__is_square = rows_count == cols_count\n        self.__data = list_of_list_of_zeros(rows_count, cols_count)\n\n    @property\n    def rows_count(self):\n        return self.__rows_count\n\n    @property\n    def cols_count(self):\n        return self.__cols_count\n\n    @property\n    def is_square(self):\n        return self.__is_square\n\n    def set_value(self, value: float, row: int, col: int):\n        self.__data[row][col] = value\n        return self\n\n    def add_to_value(self, amount: float, row: int, col: int):\n        self.__data[row][col] += amount\n        return self\n\n    def set_data(self, data: [float]):\n        if len(data) != self.__cols_count * self.__rows_count:\n            raise ValueError('Cannot set data: size mismatch')\n\n        for row in range(self.__rows_count):\n            offset = self.__cols_count * row\n            for col in range(self.__cols_count):\n                self.__data[row][col] = data[offset + col]\n\n        return self\n\n    def set_identity_row(self, row: int):\n        for col in range(self.__cols_count):\n            self.__data[row][col] = 1 if row == col else 0\n\n        return self\n\n    def set_identity_col(self, col: int):\n        for row in range(self.__rows_count):\n            self.__data[row][col] = 1 if row == col else 0\n\n        return self\n\n    def value_at(self, row: int, col: int):\n        return self.__data[row][col]\n\n    def value_transposed_at(self, row: int, col: int):\n        return self.__data[col][row]\n\n    def scale(self, factor: float):\n        for i in range(self.__rows_count):\n            for j in range(self.__cols_count):\n                self.__data[i][j] *= factor\n\n        return self\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n\n        if not isinstance(other, Matrix):\n            return False\n\n        if self.__rows_count != other.rows_count:\n            return False\n\n        if self.__cols_count != other.cols_count:\n            return False\n\n        for i in range(self.__rows_count):\n            for j in range(self.__cols_count):\n                if not are_close_enough(\n                        self.__data[i][j],\n                        other.__data[i][j]\n                ):\n                    return False\n\n        return True\n```", "```py\nimport unittest\n\nfrom eqs.matrix import Matrix\n\nclass MatrixTest(unittest.TestCase):\n\n    def test_is_square(self):\n        self.assertTrue(\n            Matrix(2, 2).is_square\n        )\n\n    def test_is_not_square(self):\n        self.assertFalse(\n            Matrix(2, 3).is_square\n        )\n```", "```py\n$  python3 -m unittest eqs/tests/matrix_test.py\n```", "```py\nRan 2 tests in 0.001s\n\nOK\n```", "```py\nclass MatrixTest(unittest.TestCase):\n    --snip--\n\n    def test_unset_value_is_zero(self):\n        matrix = Matrix(2, 2)\n        self.assertEqual(0.0, matrix.value_at(0, 1))\n\n    def test_set_get_value(self):\n        value = 10.0\n        matrix = Matrix(2, 2).set_value(value, 0, 1)\n        self.assertEqual(value, matrix.value_at(0, 1))\n\n    def test_add_to_value(self):\n        expected = [1, 12, 3, 4]\n        matrix = Matrix(2, 2) \\\n            .set_data([1, 2, 3, 4]) \\\n            .add_to_value(10, 0, 1)\n        self.assert_matrix_has_data(matrix, expected)\n```", "```py\nclass MatrixTest(unittest.TestCase):\n    --snip--\n\n   def assert_matrix_has_data(self, matrix, data):\n       for row in range(matrix.rows_count):\n           offset = matrix.cols_count * row\n           for col in range(matrix.cols_count):\n               self.assertEqual(\n                   data[offset + col],\n                   matrix.value_at(row, col)\n               )\n```", "```py\nclass MatrixTest(unittest.TestCase):\n    --snip--\n\n   def test_set_data(self):\n       data = [1, 2, 3, 4, 5, 6]\n       matrix = Matrix(2, 3).set_data(data)\n       self.assert_matrix_has_data(matrix, data)\n```", "```py\nclass MatrixTest(unittest.TestCase):\n    --snip--\n\n    def test_set_identity_row(self):\n        expected = [1, 0, 4, 5]\n        matrix = Matrix(2, 2) \\\n            .set_data([2, 3, 4, 5]) \\\n            .set_identity_row(0)\n        self.assert_matrix_has_data(matrix, expected)\n\n    def test_set_identity_col(self):\n        expected = [2, 0, 4, 1]\n        matrix = Matrix(2, 2) \\\n            .set_data([2, 3, 4, 5]) \\\n            .set_identity_col(1)\n        self.assert_matrix_has_data(matrix, expected)\n```", "```py\nclass MatrixTest(unittest.TestCase):\n    --snip--\n\n   def test_scale(self):\n       expected = [2, 4, 6, 8, 10, 12]\n       matrix = Matrix(2, 3) \\\n           .set_data([1, 2, 3, 4, 5, 6]) \\\n           .scale(2)\n       self.assert_matrix_has_data(matrix, expected)\n```", "```py\n$ python3 -m unittest eqs/tests/matrix_test.py\n```", "```py\nRan 9 tests in 0.001s\n\nOK\n```"]