["```py\narray([[0, 1, 2],\n       [3, 4, 5]])\n```", "```py\narray([5, 4, 9])\n```", "```py\narray([[4.1, 2.0, 6.7],\n       [0.3, 9.4, 2.2]])\n```", "```py\narray([[[1, 0, 1, 1],\n        [0, 1, 1, 1],\n        [1, 1, 0, 1]],\n\n       [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [1, 1, 0, 1]]])\n```", "```py\nIn [1]: import numpy as np\n\nIn [2]: arr1d = np.array([1, 2, 3, 4]) \n\nIn [3]: type(arr1d)\nOut[3]: numpy.ndarray\n\nIn [4]: print(arr1d)\n[1 2 3 4]\n```", "```py\nIn [5]: my_sequence = [1, 2, 3, 4]\n\nIn [6]: arr1d = np.array(my_sequence)\n\nIn [7]: arr1d\nOut[7]: array([1, 2, 3, 4])\n```", "```py\nIn [8]: arr2d = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n\nIn [9]: print(arr2d)\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n```", "```py\nIn [10]: arr2d.shape\nOut[10]: (3, 3)\n```", "```py\nIn [11]: arr2d.ndim\nOut[11]: 2\n```", "```py\nIn [12]: arr2d.strides\nOut[12]: (12, 4)\n```", "```py\nIn [13]: mixed_input = np.array([[0, 1, 2], (3, 4, 5), [6, 7, 8]])\n\nIn [14]: mixed_input\nOut[14]: \narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n```", "```py\nIn [15]: arr2d = np.array([[0, 1, 2], [3, 4, 5], [6, 7]])\n\nC:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_19556/570173853.py:1:\nVisibleDeprecationWarning: Creating an ndarray from ragged nested sequences\n(which is a list-or-tuple of lists-or-tuples-or ndarrays with different\nlengths or shapes) is deprecated. If you meant to do this, you must specify\n'dtype=object' when creating the ndarray.\n    arr2d = np.array([[0, 1, 2], [3, 4, 5], [6, 7]])\n```", "```py\nIn [16]: arr2d = np.array([[0, 1, 2], [3, 4, 5], [6, 7]], dtype='object')\n\nIn [17]: print(arr2d)\n[list([0, 1, 2]) list([3, 4, 5]) list([6, 7])]\n```", "```py\nIn [18]: arr3d = np.array([[[0, 0, 0],\n    ...:                   [1, 1, 1]],\n    ...:                  [[2, 2, 2],\n    ...:                   [3, 3, 3]]])\n\nIn [19]: arr3d\nOut[19]: \narray([[[0, 0, 0],\n        [1, 1, 1]],\n\n       [[2, 2, 2],\n        [3, 3, 3]]])\n```", "```py\nIn [20]: arr1d = np.arange(10)\n\nIn [21]: arr1d\nOut[21]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nIn [22]: arr1d_step = np.arange(0, 10, 2)\n\nIn [23]: arr1d_step\nOut[23]: array([0, 2, 4, 6, 8])\n```", "```py\nIn [24]: arr1d_start_5 = np.arange(5, 10)\n\nIn [25]: arr1d_start_5\nOut[25]: array([5, 6, 7, 8, 9])\n```", "```py\nIn [26]: arr1d_float = np.arange(10, dtype='float64')\n\nIn [27]: arr1d_float.dtype\nOut[27]: dtype('float64')\n```", "```py\nIn [28]: arr1d_float_step = np.arange(0, 3, 0.3)\n\nIn [29]: arr1d_float_step\nOut[29]: array([0\\. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7])\n```", "```py\nIn [30]: arr3d = np.arange(16).reshape(2, 2, 4)\nIn [31]: print(arr3d)\n[[[ 0  1  2  3]\n  [ 4  5  6  7]]\n\n [[ 8  9 10 11]\n  [12 13 14 15]]]\n```", "```py\nIn [32]: arr3d = np.arange(16).reshape(2, 3, 4)\nTraceback (most recent call last):\n\nFile \"C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_19556/3404575613.py\", line 1, in <module>\narr3d = np.arange(16).reshape(2, 3, 4)\n\nValueError: cannot reshape array of size 16 into shape (2,3,4)\n```", "```py\nIn [33]: np.linspace(start=0, stop=20, num=6)\nOut[33]: array([ 0., 4., 8., 12., 16., 20.])\n```", "```py\nIn [34]: np.linspace(0, 20, 6, endpoint=False)\nOut[34]: \narray([ 0\\. , 3.33333333, 6.66666667, 10\\. , 13.33333333, 16.66666667])\n```", "```py\nIn [35]: arr1d, step = np.linspace(0, 20, 6, retstep=True)\n\nIn [36]: step\nOut[36]: 4.0\n```", "```py\nIn [37]: np.linspace(0, 20, 6, dtype='int64')\nOut[37]: array([ 0, 4, 8, 12, 16, 20], dtype=int64)\n```", "```py\nIn [38]: np.linspace(0, 20, 6).reshape(2, 3)\nOut[38]: \narray([[ 0.,  4.,  8.],\n       [12., 16., 20.]])\n```", "```py\nIn [39]: np.zeros((3, 3))\nOut[39]: \narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n```", "```py\nIn [40]: np.ones((3, 3))\nOut[40]: \narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n```", "```py\nIn [41]: np.eye(N=3, M=3, k=0)\nOut[41]: \narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\nIn [42]: np.eye(N=3, M=3, k=1)\nOut[42]: \narray([[0., 1., 0.],\n       [0., 0., 1.],\n       [0., 0., 0.]])\n```", "```py\nIn [43]: np.full((3, 3), fill_value=5, dtype='int64')\nOut[43]: \narray([[5, 5, 5],\n       [5, 5, 5],\n       [5, 5, 5]], dtype=int64)\n```", "```py\nIn [44]: np.empty((2, 3, 2))\nOut[44]: \narray([[[2.20687562e-312, 2.05833592e-312],\n        [5.73116149e-322, 0.00000000e+000],\n        [2.35541533e-312, 2.07955588e-312]],\n\n       [[2.05833592e-312, 2.44029516e-312],\n        [2.35541533e-312, 2.33419537e-312],\n        [0.00000000e+000, 0.00000000e+000]]])\n```", "```py\nIn [45]: np.random.random((3,3))\nOut[45]: \narray([[0.16666842, 0.54555604, 0.08931106],\n       [0.14603673, 0.84008062, 0.67797898],\n       [0.17353608, 0.34648653, 0.97878551]])\n```", "```py\nIn [46]: arr1d = np.arange(0, 4)\n\nIn [47]: arr1d.shape\nOut[47]: (4,)\n```", "```py\nIn [48]: arr1d.size\nOut[48]: 4\n```", "```py\nIn [49]: arr1d.dtype\nOut[49]: dtype('int32')\n```", "```py\nIn [50]: test = np.array([5, 4, 9], dtype='int64')\n\nIn [51]: test.dtype\nOut[51]: dtype('int64')\n```", "```py\nIn [52]: arr1d.strides\nOut[52]: (4,)\n```", "```py\nIn [53]: arr1d_str = np.array(['wheat', 'soybeans', 'corn'])\n\nIn [54]: arr1d_str.dtype\nOut[54]: dtype('<U8')\n```", "```py\nIn [55]: arr1d_str.dtype.name\nOut[55]: 'str256'\n```", "```py\nIn [56]: arr1d_str.itemsize\nOut[56]: 32\n```", "```py\nIn [57]: arr1d = np.array([15, 16, 17, 18, 19, 20])\n\nIn [58]: arr1d[0]\nOut[58]: 15\n\nIn [59]: arr1d[-6]\nOut[59]: 15\n\nIn [60]: arr1d[-1]\nOut[60]: 20\n```", "```py\nIn [61]: arr1d[::2]\nOut[61]: array([15, 17, 19])\n```", "```py\nIn [62]: arr1d[[0, 2, 4]]\nOut[62]: array([15, 17, 19])\n```", "```py\nIn [63]: arr1d[[0, 2, 4]] = 0\n\nIn [64]: arr1d\nOut[64]: array([ 0, 16, 0, 18, 0, 20])\n```", "```py\nIn [65]: arr1d[:3] = 100\n\nIn [66]: arr1d\nOut[66]: array([100, 100, 100, 18, 0, 20])\n```", "```py\nIn [67]: arr1d = np.array([0, 1, 2, 3, 4])\n\nIn [68]: a_slice = arr1d[3:]\n\nIn [69]: a_slice\nOut[69]: array([3, 4])\n\nIn [70]: a_slice[0] = 666\n\nIn [71]: arr1d\nOut[71]: array([ 0, 1, 2, 666, 4])\n\nIn [72]: a_slice[:] = 42\n\nIn [73]: arr1d\nOut[73]: array([ 0, 1, 2, 42, 42])\n```", "```py\nIn [74]: a_slice = arr1d[1:3].copy()\n\nIn [75]: a_slice[:] = 55\n\nIn [76]: a_slice\nOut[76]: array([55, 55])\n\nIn [77]: arr1d\nOut[77]: array([ 0, 1, 2, 42, 42])\n```", "```py\nIn [78]: a_slice = np.array(arr1d[:])\n\nIn [79]: a_slice[:] = 55\n\nIn [80]: arr1d\nOut[80]: array([0, 1, 2, 42, 42])\n```", "```py\nIn [81]: arr2d = np.arange(1, 10).reshape(3, 3)\n\nIn [82]: arr2d\nOut[82]: \narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n```", "```py\nIn [83]: arr2d[1]\nOut[83]: array([4, 5, 6])\n```", "```py\nIn [84]: arr2d[1:3]\nOut[84]: \narray([[4, 5, 6],\n       [7, 8, 9]])\n```", "```py\nIn [85]: arr2d[:, 1]\nOut[85]: array([2, 5, 8])\n```", "```py\nIn [86]: arr2d[:, 1:2]\nOut[86]: \narray([[2],\n       [5],\n       [8]])\n\nIn [87]: arr2d[:, 1:2].shape\nOut[87]: (3, 1)\n```", "```py\nIn [88]: a2_slice = arr2d[:, 1]\n\nIn [89]: a2_slice\nOut[89]: array([2, 5, 8])\n\nIn [90]: a2_slice[:] = 42\n\nIn [91]: arr2d\nOut[91]: \narray([[ 1, 42, 3],\n       [ 4, 42, 6],\n       [ 7, 42, 9]])\n```", "```py\nIn [92]: arr2d[1, 1]\nOut[92]: 42\n```", "```py\nIn [93]: arr2d[1][1]\nOut[93]: 42\n```", "```py\nIn [94]: arr3d = np.arange(24).reshape(2, 3, 4)\n\nIn [94]: arr3d\nOut[94]: \narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n```", "```py\nIn [95]: arr3d[1, 2, 0]\nOut[95]: 20\n```", "```py\nIn [96]: arr3d[1, :, :]\nOut[96]: \narray([[12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23]])\n```", "```py\nIn [97]: arr3d[0, :, :] = 0\n\nIn [98]: arr3d\nOut[98]: \narray([[[ 0,  0,  0,  0],\n        [ 0,  0,  0,  0],\n        [ 0,  0,  0,  0]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n```", "```py\nIn [99]: arr4d = np.arange(24).reshape(2, 2, 2, 3)\n\nIn [100]: arr4d\nOut[100]: \narray([[[[ 0,  1,  2],\n         [ 3,  4,  5]],\n\n        [[ 6,  7,  8],\n         [ 9, 10, 11]]],\n\n       [[[12, 13, 14],\n         [15, 16, 17]],\n\n        [[18, 19, 20],\n         [21, 22, 23]]]])\n```", "```py\nIn [101]: arr4d[1, 1, 0, 2]\nOut[101]: 20\n```", "```py\nIn [102]: arr1d = np.array([1, 2, 3, 4, 5])\n\nIn [103]: print(arr1d >= 4)\n[False False False True True]\n```", "```py\nIn [104]: a_slice = arr1d[arr1d >= 4]\n\nIn [105]: a_slice\nOut[105]: array([4, 5])\n```", "```py\nIn [106]: arr_1 = np.random.randn(3, 4)\n\nIn [107]: arr_2 = np.random.randn(3, 4)\n\nIn [108]: arr_2 > arr_1\nOut[108]: \narray([[ True,  True, False,  True],\n       [ True, False,  True, False],\n       [False,  True,  True, True]])\n```", "```py\nIn [109]: img = np.array([\n [12, 13, 14,  4, 16,  1, 11, 10,  9],\n [11, 14, 12,  3, 15,  1, 10, 12, 11],\n [10, 12, 12,  1, 14,  3, 10, 12, 12], [ 9, 11, 16,  0,  4,  2,  3, 12, 10],\n [12, 11, 16, 14, 10,  2, 16, 12, 13],\n [10, 15, 16, 14, 14,  4, 16, 15, 12],\n [13, 17, 14, 10, 14,  1, 14, 15, 10]])\n\nIn [110]: img_thresh = (img > 4).astype(int)\n```", "```py\nIn [111]: print(img_thresh)\n[[1 1 1 0 1 0 1 1 1]\n [1 1 1 0 1 0 1 1 1]\n [1 1 1 0 1 0 1 1 1]\n [1 1 1 0 0 0 0 1 1]\n [1 1 1 1 1 0 1 1 1]\n [1 1 1 1 1 0 1 1 1]\n [1 1 1 1 1 0 1 1 1]]\n```", "```py\nIn [112]: img[img < 5] = 0\n\nIn [113]: img\nOut[113]: \narray([[12, 13, 14,  0, 16,  0, 11, 10,  9],\n       [11, 14, 12,  0, 15,  0, 10, 12, 11],\n       [10, 12, 12,  0, 14,  0, 10, 12, 12],\n       [ 9, 11, 16,  0,  0,  0,  0, 12, 10],\n       [12, 11, 16, 14, 10,  0, 16, 12, 13],\n       [10, 15, 16, 14, 14,  0, 16, 15, 12],\n       [13, 17, 14, 10, 14,  0, 14, 15, 10]])\n```", "```py\nIn [114]: arr1d = np.array([1, 2, 3, 4])\n\nIn [115]: arr1d.reshape(2, 2)\nOut[115]: \narray([[1, 2],\n       [3, 4]])\n\nIn [116]: arr1d\nOut[116]: array([1, 2, 3, 4])\n```", "```py\nIn [117]: arr2d = arr1d.reshape(2, 2)\n\nIn [118]: arr2d\nOut[118]: \narray([[1, 2],\n       [3, 4]]) \n\nIn [119]: arr2d[0] = 42\n\nIn [120]: arr2d\nOut[120]: \narray([[42, 42],\n       [ 3,  4]])\n\nIn [121]: arr1d\nOut[121]: array([42, 42, 3, 4])\n```", "```py\nIn [122]: arr1d.shape = (2, 2)\n\nIn [123]: arr1d\nOut[123]: \narray([[42, 42],\n        [3, 4]])\n```", "```py\nIn [124]: arr2d = np.arange(8).reshape(2, 4)\n\nIn [125]: arr2d\nOut[125]: \narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\nIn [126]: arr1d = arr2d.ravel()\n\nIn [127]: arr1d\nOut[127]: array([0, 1, 2, 3, 4, 5, 6, 7])\n```", "```py\nIn [128]: arr2d.flatten()\nOut[128]: array([0, 1, 2, 3, 4, 5, 6, 7])\n```", "```py\nIn [129]: arr2d.shape = (8)\n\nIn [130]: arr2d\nOut[130]: array([0, 1, 2, 3, 4, 5, 6, 7])\n```", "```py\nIn [131]: arr2d = np.arange(8).reshape(2, 4)\n\nIn [132]: arr2d\nOut[132]: \narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\nIn [133]: arr2d.transpose()\nOut[133]: \narray([[0, 4],\n       [1, 5],\n       [2, 6],\n       [3, 7]])\n```", "```py\nIn [134]: arr2d_transposed = arr2d.transpose().copy()\n```", "```py\nIn [135]: arr3d = np.arange(12).reshape(2, 2, 3)\n\nIn [136]: arr3d\nOut[136]: \narray([[[0,  1,  2],\n        [3,  4,  5]],\n\n       [[6,  7,  8],\n        [9, 10, 11]]])\n\nIn [137]: arr3d.transpose((2, 1, 0))\nOut[137]: \narray([[[0,  6],\n        [3,  9]],\n\n       [[1,  7],\n        [4, 10]],\n\n       [[2,  8],\n        [5, 11]]])\n```", "```py\nIn [138]: arr3d\nOut[138]: \narray([[[0,  1,  2],\n        [3,  4,  5]],\n\n       [[6,  7,  8],\n        [9, 10, 11]]])\n\nIn [139]: arr3d.swapaxes(0, 1)\nOut[139]: \narray([[[0,  1,  2],\n        [6,  7,  8]],\n\n       [[3,  4,  5],\n        [9, 10, 11]]])\n```", "```py\nIn [140]: zeros = np.zeros((3, 3))\n\nIn [141]: ones = np.ones((3, 3))\n```", "```py\nIn [142]: np.vstack((zeros, ones))\nOut[142]: \narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.],\n       [1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n```", "```py\nIn [143]: np.hstack((zeros, ones))\nOut[143]: \narray([[0., 0., 0., 1., 1., 1.],\n       [0., 0., 0., 1., 1., 1.],\n       [0., 0., 0., 1., 1., 1.]])\n```", "```py\nIn [144]: x = np.array([1, 2, 3])\n\nIn [145]: y = np.array([4, 5, 6])\n\nIn [146]: z = np.array([7, 8, 9])\n\nIn [147]: np.row_stack((x, y, z))\nOut[147]: \narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\nIn [148]: np.column_stack((x, y, z))\nOut[148]: \narray([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])\n```", "```py\nIn [149]: source = np.arange(24).reshape((4, 6))\n\nIn [150]: source\nOut[150]: \narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n```", "```py\nIn [151]: split1, split2 = np.vsplit(source, 2)\n\nIn [152]: split1\nOut[152]: \narray([[ 0, 1, 2, 3,  4,  5],\n       [ 6, 7, 8, 9, 10, 11]])\n\nIn [153]: split2\nOut[153]: \narray([[12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n```", "```py\nIn [154]: split1, split2 = np.hsplit(source, 2)\n\nIn [155]: split1\nOut[155]: \narray([[ 0,  1,  2],\n       [ 6,  7,  8],\n       [12, 13, 14],\n       [18, 19, 20]])\n\nIn [156]: split2\nOut[156]: \narray([[ 3,  4,  5],\n       [ 9, 10, 11],\n       [15, 16, 17],\n       [21, 22, 23]])\n```", "```py\nIn [157]: a, b, c = np.split(source, [2, 5], axis=1)\n\nIn [158]: a\nOut[158]: \narray([[ 0,  1],\n       [ 6,  7],\n       [12, 13],\n       [18, 19]])\n\nIn [159]: b\nOut[159]: \narray([[ 2,  3,  4],\n       [ 8,  9, 10],\n       [14, 15, 16],\n       [20, 21, 22]])\n\nIn [160]: c\nOut[160]: \narray([[ 5],\n       [11],\n       [17],\n       [23]])\n```", "```py\nIn [161]: data_a = np.random.randint(500, size=100_000)\n\nIn [162]: data_b = np.random.randint(500, size=100_000)\n```", "```py\nIn [163]: shared_list = []\n\nIn [164]: for item in data_a:\n     ...:     if item in data_b:\n     ...:         shared_list.append(item)\n```", "```py\nIn [165]: shared_list[:3]\nOut[165]: [326, 159, 155]\n```", "```py\nIn [166]: data_a[np.isin(data_a, data_b)]\nOut[166]: array([326, 159, 155, ..., 136, 416, 307])\n```", "```py\nIn [167]: arr1 = np.array([[1, 1, 1], [2, 2, 2]])\n\nIn [168]: arr1\nOut[168]: \narray([[1, 1, 1],\n       [2, 2, 2]])\n\nIn [169]: arr2 = np.array([[3, 3, 3], [4, 4, 4]])\n\nIn [170]: arr2\nOut[170]: \narray([[3, 3, 3],\n       [4, 4, 4]])\n\nIn [171]: arr1 * arr2\nOut[171]: \narray([[3, 3, 3],\n       [8, 8, 8]])\n```", "```py\nIn [172]: arr1 = np.array([[0, 1], [2, 3]])\n\nIn [173]: arr2 = np.array([[4, 5], [6, 7]])\n\nIn [174]: np.dot(arr1, arr2)\nOut[174]: \narray([[ 6,  7],\n       [26, 31]])\n```", "```py\nIn [175]: arr1d = np.array([0, 1, 2, 3])\n\nIn [176]: arr1d += 10\n\nIn [177]: arr1d\nOut[177]: array([10, 11, 12, 13])\n\nIn [178]: arr1d -= 10\n\nIn [179]: arr1d\nOut[179]: array([0, 1, 2, 3])\n\nIn [180]: arr1d *= 2\n\nIn [181]: arr1d\nOut[181]: array([0, 2, 4, 6])\n```", "```py\nIn [182]: arr1d = np.array([10, 20, 30, 40])\n\nIn [183]: np.log10(arr1d)\nOut[183]: array([1\\. , 1.30103 , 1.47712125, 1.60205999])\n\nIn [184]: np.square(arr1d)\nOut[184]: array([ 100, 400, 900, 1600], dtype=int32)\n```", "```py\nIn [185]: a = np.array([1, 2, 500])\n\nIn [186]: b = np.array([0, 2, -1])\n\nIn [187]: np.maximum(a, b)\nOut[187]: array([ 1, 2, 500])\n\nIn [188]: np.minimum(a, b)\nOut[188]: array([ 0, 2, -1])\n```", "```py\nIn [189]: arr = np.random.randint(100, size=(3, 5))\n\nIn [190]: arr\nOut[190]: \narray([[85, 77,  0, 10, 24],\n       [16, 39, 94, 11, 21],\n       [71, 54,  8, 73, 98]])\n```", "```py\nIn [191]: arr.mean()\nOut[191]: 45.4\n```", "```py\nIn [192]: np.mean(arr)\nOut[192]: 45.4\n```", "```py\nIn [193]: arr.mean(axis=1)\nOut[193]: array([39.2, 36.2, 60.8])\n```", "```py\nIn [194]: arr.sum(axis=0)\nOut[194]: array([172, 170, 102, 94, 143])\n```", "```py\nIn [195]: arr.mean(1)\nOut[195]: array([39.2, 36.2, 60.8])\n```", "```py\nIn [196]: np.apply_along_axis(np.mean, axis=1, arr=arr)\nOut[196]: array([37.4, 31\\. , 74.4])\n```", "```py\nIn [197]: def cube(x):\n     ...:      return x**3\n\nIn [198]: np.apply_along_axis(cube, axis=1, arr=arr)\nOut[198]: \narray([[614125, 456533,      0,   1000,  13824],\n       [  4096,  59319, 830584,   1331,   9261],\n       [357911, 157464,    512, 389017, 941192]], dtype=int32)\n```", "```py\nIn [199]: arr = np.arange(8).reshape(2, 4)\n\nIn [200]: arr\nOut[200]: \narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\nIn [201]: np.save('my_array', arr)\n```", "```py\nIn [202]: np.load('my_array.npy')\nOut[202]: \narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n```", "```py\nIn [203]: arr1 = np.arange(5)\n\nIn [204]: arr2 = np.arange(4)\n\nIn [205]: np.savez('arr_arch.npz', a=arr1, b=arr2)\n\nIn [206]: archive = np.load('arr_arch.npz')\n\nIn [207]: archive['a']\nOut[207]: array([0, 1, 2, 3, 4])\n```", "```py\nIn [208]: np.savez_compressed('arr_arch_compressed.npz', a=arr1, b=arr2)\n```", "```py\nIn [209]: arr = np.genfromtxt('my_data.csv', delimiter=',', names=True)\n```"]