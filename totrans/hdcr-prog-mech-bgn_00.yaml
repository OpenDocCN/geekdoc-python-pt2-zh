- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: '![Image](../images/common01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common01.jpg)'
- en: Knowing how to write code empowers you to solve complex problems. By harnessing
    the capabilities of modern CPUs, which can accomplish billions of operations per
    second, we can quickly and correctly work out the solutions to difficult problems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学会编写代码能让你解决复杂问题。通过利用现代 CPU 的能力，它们每秒可以执行数十亿次操作，我们可以快速且准确地解决困难的问题。
- en: This is a book about solving engineering problems with Python. We’ll learn how
    to code geometric primitives that will serve as the basis of more complex operations,
    how to read and write from files, how to create vector images and animated sequences
    to present the results, and how to solve large systems of linear equations. Finally,
    we’ll put all this knowledge together to build an application that solves truss
    structure problems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书介绍了如何使用 Python 解决工程问题。我们将学习如何编写几何原语，这些原语将作为更复杂操作的基础，如何从文件中读取和写入数据，如何创建矢量图像和动画序列来展示结果，以及如何解决大规模线性方程组。最后，我们将把这些知识结合起来，构建一个解决桁架结构问题的应用程序。
- en: '**Who This Book Is For**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书适合谁阅读**'
- en: This book is targeted at engineering students, graduated engineers, or just
    about any person with a technical background who wants to learn how to write applications
    to solve engineering problems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向工程学学生、已毕业的工程师，或任何希望学习如何编写应用程序来解决工程问题的技术背景人士。
- en: A background in math and mechanics is a must. We’ll be using concepts from linear
    algebra, 2D geometry, and physics. We’ll also use some mechanics of materials
    and numerical methods, which are subjects common to many engineering degrees.
    We won’t go too far into these topics to allow a larger number of readers to find
    the material of the book useful. The techniques learned in this book can later
    be used to solve problems that involve more complex concepts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数学和力学的基础是必需的。我们将使用线性代数、二维几何和物理学的概念。我们还将使用一些材料力学和数值方法的知识，这些是许多工程学科的常见内容。为了让更多读者能从本书中获益，我们不会深入探讨这些主题。本书中学到的技术以后可以用来解决涉及更复杂概念的问题。
- en: 'To follow along, you’ll need to have some coding skills and basic Python knowledge.
    This is not an introductory book to programming; there are lots of other good
    books covering that. I can recommend *Python Crash Course* by Eric Matthes (No
    Starch Press, 2019) if you’re looking for such a book. There’s also a lot of great
    material online, from which I’d pick [*https://realpython.com*](https://realpython.com)
    as my favorite. The official Python website is also full of good tutorials and
    documents: *[https://www.python.org/about/gettingstarted/](https://www.python.org/about/gettingstarted/)*.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上本书的内容，你需要具备一定的编码技能和基本的 Python 知识。本书不是一本编程入门书；市面上有很多其他优秀的书籍可以覆盖这些内容。如果你正在寻找这样的书，我推荐
    Eric Matthes 的 *Python Crash Course*（No Starch Press，2019年）。网上也有很多很棒的资源，我最喜欢的是
    [*https://realpython.com*](https://realpython.com)。官方的 Python 网站也有很多很好的教程和文档：
    *[https://www.python.org/about/gettingstarted/](https://www.python.org/about/gettingstarted/)*。
- en: We’re going to write a lot of code, so I strongly recommend you have a computer
    with you as you read and that you enter and test all the code in this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写大量代码，因此强烈建议你在阅读时随身携带计算机，并输入和测试本书中的所有代码。
- en: '**What You’ll Learn**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你将学到的内容**'
- en: In this book, we’ll explore techniques to write robust applications that correctly,
    and quickly, solve engineering problems. To ensure correctness, we’ll be testing
    our code using automated tests. Every application you build should be properly
    tested using automated testing, as we’ll discuss throughout the book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将探讨编写健壮应用程序的技术，确保它们能够正确且快速地解决工程问题。为了确保正确性，我们将使用自动化测试来测试我们的代码。你构建的每个应用程序都应该通过自动化测试进行充分测试，正如我们在本书中所讨论的那样。
- en: Engineering applications usually require some amount of data to be fed in, so
    we’ll also learn how to read the input of our programs from a file, parsing it
    using regular expressions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 工程应用通常需要输入一些数据，因此我们还将学习如何从文件中读取程序的输入，并使用正则表达式进行解析。
- en: Engineering applications typically need to solve a large system of equations,
    so we’ll cover how to write numerical methods that can do these complex computations.
    We’ll focus on linear systems, but the same techniques can easily be applied to
    write numerical algorithms for nonlinear equations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 工程应用通常需要解决大型方程组，因此我们将介绍如何编写数值方法来进行这些复杂的计算。我们将重点讲解线性方程组，但相同的技术也可以轻松应用于编写非线性方程的数值算法。
- en: 'Lastly, engineering applications need to produce a result. We’ll learn how
    to write text to files that we can later inspect. We’ll cover how to produce beautiful
    vector diagrams and animated sequences to present the results of our programs.
    As they say, a diagram is worth a thousand words: looking at a well-drawn diagram
    that describes the result with the most relevant solution values makes programs
    much more valuable.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，工程应用需要产生结果。我们将学习如何将文本写入文件，以便稍后检查。我们还将学习如何生成漂亮的矢量图和动画序列，以展示程序的结果。正如他们所说，一张图胜过千言万语：看着一张清晰的图表，描述了最相关的解决方案值，能让程序的价值大大提升。
- en: To illustrate all these concepts, we’ll conclude the book by building an application
    that solves two-dimensional truss structures. This application will have everything
    you need to build engineering applications. The knowledge acquired building this
    application can easily be translated to writing other kinds of engineering applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这些概念，我们将通过构建一个解决二维桁架结构的应用程序来结束本书。这款应用程序将包含你构建工程应用所需的一切知识。在构建这个应用程序时获得的知识可以轻松转化为编写其他类型工程应用的能力。
- en: '**About This Book**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于本书**'
- en: 'In this section, we’ll explain three things: the meaning behind the title of
    this book, the choice of Python, and the table of contents.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解释三件事：本书标题背后的含义、选择Python的原因，以及目录内容。
- en: '***What Is the “Hardcore” About?***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***“Hardcore”是什么意思？***'
- en: The word *Hardcore* in the title of this book refers to the fact that we’ll
    write all the code ourselves, relying only on the Python standard libraries (libraries
    that ship with Python); we won’t use any third-party library to solve equations
    or draw vector images.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书标题中的*Hardcore*一词指的是我们将自己编写所有代码，只依赖Python标准库（Python自带的库）；我们不会使用任何第三方库来解方程或绘制矢量图形。
- en: You may be wondering why. If there’s code already written by someone that does
    all this for us, why not simply use it? Aren’t we re-inventing the wheel?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么呢？如果已经有人写了能为我们做这些事情的代码，为什么不直接使用它呢？难道我们不是在重新发明轮子吗？
- en: This is a book about learning, and to learn you need to do things yourself.
    You’ll never understand the wheel unless you re-invent it. Once your software
    skills are solid and you’ve written thousands of lines of code and worked on a
    lot of projects, you’ll be in a good position to decide which external libraries
    fit your needs and how to leverage them. But if you use those libraries from the
    beginning, you’ll get used to using them and take the solutions for granted. It’s
    important to always ask yourself, how does this library’s code work to solve my
    problem?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本关于学习的书，而要学习，你需要亲自去做。除非你重新发明轮子，否则你永远不会理解轮子的原理。一旦你的软件技能扎实，写了成千上万行代码，并参与了大量项目，你就能很好地判断哪些外部库适合你的需求，以及如何利用它们。但是，如果你从一开始就使用这些库，你会习惯使用它们，并理所当然地接受这些解决方案。始终问问自己，这个库的代码是如何解决我的问题的，这一点很重要。
- en: Like anything else, coding takes practice. If you want to become good at coding,
    you need to write a lot of code; there are no shortcuts. If you’re getting paid
    to write software or want to take an idea to market as fast as possible, then
    use existing libraries. But if you’re learning and want to become proficient in
    the art of writing code, don’t use libraries. Write the code yourself.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他任何事情一样，编码需要练习。如果你想在编程上做得好，你需要写很多代码；没有捷径可走。如果你是为了赚钱写软件，或者希望尽快将一个想法推向市场，那么可以使用现有的库。但是，如果你是在学习并希望在编写代码的艺术上变得熟练，就不要使用库。自己编写代码。
- en: '***Why Python?***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为什么选择Python？***'
- en: Python is one of the most beloved programming languages. According to Stack
    Overflow’s 2020 developer survey (*[https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)*),
    Python is today’s third most loved language, with 66.7 percent of its users willing
    to continue using it in the future, just behind TypeScript and Rust (see [Figure
    1](ch00.xhtml#fig1)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python是最受欢迎的编程语言之一。根据Stack Overflow 2020年的开发者调查（*[https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)*），Python是今天第三受欢迎的语言，有66.7%的用户愿意在未来继续使用它，仅次于TypeScript和Rust（参见[图1](ch00.xhtml#fig1)）。
- en: '![Image](../images/fig1.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1.jpg)'
- en: '*Figure 1: 2020 most loved languages (source: Stack Overflow survey)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1：2020年最受欢迎的编程语言（来源：Stack Overflow调查）*'
- en: 'This same survey puts Python first when it comes to “desired” languages: 30
    percent of the surveyed developers who are not currently using Python expressed
    interest in learning it (see [Figure 2](ch00.xhtml#fig2)).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig2.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2: 2020 most wanted languages (source: Stack Overflow survey)*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'These results are not surprising; Python is an extremely versatile and productive
    language. Writing code in Python is a delight, and its Standard Library is well
    equipped: for just about anything you want to do, Python has something ready to
    help.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use Python in this book not only because of its popularity but also because
    it’s easy to use and versatile. One nice thing about Python is that, if you are
    reading this book but have no prior knowledge of the language, it won’t take you
    long to get started. It’s a relatively easy language to learn and the internet
    is filled with tutorials and courses to help you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: What Python is typically not seen as is a fast language, and indeed, Python’s
    execution times are not one of its strengths. [Figure 3](ch00.xhtml#fig3) below
    shows a comparison of the execution times in seconds of the same three programs
    written both in Python and in Go (a very fast language developed by Google). In
    every case, Python takes much longer than Go to execute.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig3.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3: Python benchmark (source: [https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/python3-go.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/python3-go.html))*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: So, don’t we care about speed? We do, but for the purposes of this book, we
    care more about development time and the development experience. Python has lots
    of constructs that make coding delightful; for example, things like filtering
    or mapping a collection can be done out of the box using Python’s list comprehensions,
    whereas in Go, you need to do those operations using good old for loops. For almost
    every program we’ll write, execution time will never be a concern, as we’ll get
    more than acceptable results. The skills you learn in this book will transfer
    to other, faster languages if you encounter speed issues in your applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: But before we start learning anything, let’s have a quick overview of the topics
    you’ll find in this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '***Contents at a Glance***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll cover a lot of ground in this book. Each chapter builds on top of the
    previous ones, so you’ll want to make sure to read the book in order and work
    on the code each chapter presents.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'The book includes the following chapters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**[Part I: Basics](part01.xhtml#part01)**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: A Short Python Primer](ch01.xhtml#ch01)** Introduces some intermediate
    Python topics that we’ll use throughout the book. We’ll cover how to split our
    code into modules and packages, how to use Python’s collections, and how to run
    Python scripts and import modules.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Two Python Paradigms](ch02.xhtml#ch02)** Covers functional and
    object-oriented programming paradigms and explores techniques to write code in
    those styles.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章：两种Python编程范式](ch02.xhtml#ch02)** 介绍函数式编程和面向对象编程范式，并探索在这些风格下编写代码的技巧。'
- en: '**[Chapter 3: The Command Line](ch03.xhtml#ch03)** Instructs you on how to
    use the command line to run programs and other simple tasks such as creating files.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章：命令行](ch03.xhtml#ch03)** 教你如何使用命令行运行程序和执行其他简单任务，如创建文件。'
- en: '**[Part II: 2D Geometry](part02.xhtml#part02)**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2部分：二维几何](part02.xhtml#part02)**'
- en: '**[Chapter 4: Points and Vectors](ch04.xhtml#ch04)** Covers the most basic,
    but crucial, geometric primitives: points and vectors. The rest of the book relies
    on the implementation of these two primitives, so we’ll also learn about automated
    testing to make sure our implementations are bug-free.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章：点与向量](ch04.xhtml#ch04)** 讲解最基础但至关重要的几何基本元素：点和向量。全书其余内容都依赖于这两种基本元素的实现，因此我们还将学习自动化测试，以确保我们的实现没有bug。'
- en: '**[Chapter 5: Lines and Segments](ch05.xhtml#ch05)** Adds the line and segment
    geometric primitives to our geometry toolbox. We’ll take a look at how to check
    whether two segments or two lines intersect and how to calculate the intersection
    points.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章：直线与线段](ch05.xhtml#ch05)** 将直线和线段这两个几何基本元素加入我们的几何工具箱。我们将学习如何检查两条线段或直线是否相交，以及如何计算交点。'
- en: '**[Chapter 6: Polygons](ch06.xhtml#ch06)** Adds rectangles, circles, and generic
    polygons to our geometry toolbox.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章：多边形](ch06.xhtml#ch06)** 将矩形、圆形和一般多边形加入我们的几何工具箱。'
- en: '**[Chapter 7: Affine Transformations](ch07.xhtml#ch07)** Covers affine transformations,
    an interesting algebraic construct we’ll use to produce beautiful images and animations.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章：仿射变换](ch07.xhtml#ch07)** 讲解仿射变换，这是一种有趣的代数构造，我们将利用它来生成美丽的图像和动画。'
- en: '**[Part III: Graphics and Simulations](part03.xhtml#part03)**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3部分：图形与仿真](part03.xhtml#part03)**'
- en: '**[Chapter 8: Drawing Vector Images](ch08.xhtml#ch08)** Introduces the Scalable
    Vector Graphics (SVG) image format. We’ll write our own library to produce these
    images using our geometric primitives.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章：绘制矢量图像](ch08.xhtml#ch08)** 介绍了可缩放矢量图形（SVG）图像格式。我们将编写自己的库，使用几何基本元素生成这些图像。'
- en: '**[Chapter 9: Building a Circle from Three Points](ch09.xhtml#ch09)** Takes
    all the knowledge from the previous chapters to build our first application, one
    that finds the circle that goes through three given points and draws the result
    to a vector image.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章：通过三点构建圆](ch09.xhtml#ch09)** 综合前几章的知识，构建我们的第一个应用程序，找到通过三个给定点的圆，并将结果绘制成矢量图像。'
- en: '**[Chapter 10: Graphical User Interfaces and the Canvas](ch10.xhtml#ch10)**
    Covers the basics of the Tkinter package, which is used to build user interfaces
    in Python. We’ll spend most of the time learning how to use the Canvas widget,
    which is used to draw images to the screen.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章：图形用户界面与画布](ch10.xhtml#ch10)** 讲解了Tkinter包的基础知识，Tkinter用于在Python中构建用户界面。我们将大部分时间用于学习如何使用Canvas小部件，它用于在屏幕上绘制图像。'
- en: '**[Chapter 11: Animations, Simulations, and the Time Loop](ch11.xhtml#ch11)**
    Guides you through the process of creating an animation by drawing inside Tkinter’s
    Canvas. We’ll explore the concept of the time loop used by engineering simulations
    and video game engines to render scenes to the screen.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章：动画、仿真与时间循环](ch11.xhtml#ch11)** 带领你通过绘制Tkinter的Canvas中的动画过程。我们将探索工程仿真和视频游戏引擎中使用的时间循环概念，用于将场景渲染到屏幕上。'
- en: '**[Chapter 12: Animating Affine Transformations](ch12.xhtml#ch12)** Creates
    an application that animates the effect of applying an affine transformation to
    some geometric primitives.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章：动画化仿射变换](ch12.xhtml#ch12)** 创建一个应用程序，动画化仿射变换对某些几何基本元素的影响。'
- en: '**[Part IV: Systems of Equations](part04.xhtml#part04)**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4部分：方程组](part04.xhtml#part04)**'
- en: '**[Chapter 13: Matrices and Vectors](ch13.xhtml#ch13)** Introduces the vector
    and matrix constructs and covers how to code these primitives, which will be extremely
    useful when we’re working with systems of equations.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第13章：矩阵与向量](ch13.xhtml#ch13)** 介绍了向量和矩阵构造，并讲解如何编码这些基本元素，这对我们处理方程组时非常有用。'
- en: '**[Chapter 14: Linear Equations](ch14.xhtml#ch14)** Shows how numerical methods
    can be implemented to solve large systems of linear equations. We’ll implement
    the Cholesky factorization method together; this algorithm will solve the systems
    of equations that will appear in the next and last part of the book.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**[Part V: Truss Structures](part05.xhtml#part05)**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 15: Structural Models](ch15.xhtml#ch15)** Reviews the basic mechanics
    of materials concepts we’ll use in this part of the book. We’ll also write the
    classes to represent a truss structure. Using this truss structure model we’ll
    build a complete structural analysis application.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 16: Structure Resolution](ch16.xhtml#ch16)** Using the model built
    in the previous chapter, we’ll cover all the computations required to find the
    structure’s displacements, deformations, and stresses.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 17: Reading Input from a File](ch17.xhtml#ch17)** Covers the implementation
    of file reading and parsing so that our truss analysis application can rely on
    data that’s stored as plaintext.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 18: Producing an SVG Image and Text File](ch18.xhtml#ch18)** Discusses
    the generation of SVG image diagrams based on the structure solution. Here we’ll
    use our own SVG package to draw the diagrams, which will contain all the relevant
    details such as the geometry of the deformed structure and the stress label next
    to each bar.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 19: Assembling Our Application](ch19.xhtml#ch19)** Explains how
    to put together the pieces built in the previous chapters to build the complete
    truss resolution application.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting Up Your Environment**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this book, we’ll use Python 3 and provide instructions to work with PyCharm,
    a development environment program that’ll let us work effectively. The code has
    been tested using Python versions 3.6 through 3.9, but it’ll most likely continue
    to work equally well with future versions of the language. Let’s download the
    code that accompanies the book, install the latest Python 3 interpreter, and set
    up PyCharm.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '***Downloading the Book’s Code***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the code for this book is available on GitHub at [*https://github.com/angelsolaorbaiceta/Mechanics*](https://github.com/angelsolaorbaiceta/Mechanics).
    Again, while I strongly recommend that you write all the code yourself, it’s a
    good idea to have it with you for reference.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with Git and GitHub, you may want to clone the repository.
    Also, I suggest fetching and pulling from the repository from time to time, as
    I may add new features or fix bugs in the project.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with the Git version control system or GitHub, your
    best option is to download a copy of the code. You can do this by clicking the
    **Clone** button and choosing the **Download ZIP** option (see [Figure 4](ch00.xhtml#fig4)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig4.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4: Downloading the code from GitHub*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the project and place it inside the directory of your choice. As you’ll
    see, I documented every package and subpackage in the project using *README files*
    (*README.md*). These files are usually found in software projects; they explain
    and document the features of a project and also include instructions on how to
    compile or run the code. A README file is the first thing you want to read when
    you open a software project, as they describe how to configure the project and
    get the code running.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 解压项目并将其放置在你选择的目录中。如你所见，我使用 *README 文件*（*README.md*）记录了项目中的每个包和子包。这些文件通常出现在软件项目中，它们解释并记录了项目的特性，并包含有关如何编译或运行代码的说明。README
    文件是你打开软件项目时首先要阅读的内容，因为它们描述了如何配置项目并使代码运行。
- en: '**NOTE**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*README files are written using the Markdown format. If you want to know more
    about this format, you can read about it here:* [https://www.markdownguide.org/](https://www.markdownguide.org/).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*README 文件是使用 Markdown 格式编写的。如果你想了解更多关于这种格式的内容，可以阅读这里的介绍：* [https://www.markdownguide.org/](https://www.markdownguide.org/)。'
- en: The *Mechanics* project on GitHub contains more code than we cover in this book.
    We didn’t want to make this book too long, so we couldn’t cover everything included
    in the project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上的 *Mechanics* 项目包含的代码比我们在本书中涵盖的要多。我们不想让本书太长，因此未能涵盖项目中包含的所有内容。
- en: For example, in [Chapter 14](ch14.xhtml#ch14), “Linear Equations,” we talk about
    numerical methods to solve systems of linear equations and explain the Cholesky
    factorization in detail. There are some other numerical methods in the project,
    such as the conjugate gradient, which we don’t have time to cover in the book;
    the code is there for you to analyze and use. There are also many automated tests
    that we skip in the book for brevity reasons; use those tests as a reference when
    you write your own.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[第14章](ch14.xhtml#ch14)《线性方程》中，我们讨论了解决线性方程组的数值方法，并详细解释了 Cholesky 分解。项目中还有一些其他的数值方法，例如共轭梯度法，由于时间限制我们无法在书中涵盖；这些代码可以供你分析和使用。项目中还有很多自动化测试，我们为了简洁省略了它们；在编写自己的代码时可以参考这些测试。
- en: It’s time to install Python.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候安装 Python 了。
- en: '***Installing Python***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装 Python***'
- en: You can download Python for macOS, Linux, and Windows from [*https://www.python.org/downloads/*](https://www.python.org/downloads/).
    For Windows and macOS you’ll need to download the installer and run it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [*https://www.python.org/downloads/*](https://www.python.org/downloads/)
    下载适用于 macOS、Linux 和 Windows 的 Python。对于 Windows 和 macOS，你需要下载安装程序并运行它。
- en: 'Linux typically comes with Python preinstalled. You can check which version
    is installed on your computer using the following command in the shell:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 通常自带 Python。你可以通过在终端中使用以下命令检查你电脑上安装的版本：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To install a version of Python on a Linux computer, you use the *os* package
    manager. For Ubuntu users using the *apt* package manager, this would be
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 计算机上安装 Python 版本，你可以使用 *os* 包管理器。对于使用 *apt* 包管理器的 Ubuntu 用户，命令如下：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For Fedora users, using the *dnf* package manager, this would be
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Fedora 用户，使用 *dnf* 包管理器，命令如下：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you are using a different Linux distribution, a quick Google search should
    get you the instructions to install Python using your package manager.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是其他 Linux 发行版，快速的 Google 搜索应该能帮你找到使用包管理器安装 Python 的说明。
- en: It’s important that you download a version of Python 3, such as 3.9, which is
    the current version at the time of writing. Any version above 3.6 (included) will
    work.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，你下载的是 Python 3 的版本，比如 3.9，这是在写作时的当前版本。任何版本高于 3.6（包含 3.6）都会有效。
- en: '**NOTE**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Python versions 2 and 3 are not compatible; code written targeting Python
    3 will very likely not work with Python’s version 2 interpreter. The language
    evolved in a non-backwards-compatible way, and some features in version 3 are
    not available in version 2.*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python 2 和 3 不兼容；针对 Python 3 编写的代码很可能无法在 Python 2 解释器上运行。语言以一种不向后兼容的方式发展，版本
    3 中的一些特性在版本 2 中不可用。*'
- en: '***Installing and Configuring PyCharm***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装和配置 PyCharm***'
- en: 'As we develop our code, we’ll want to use an *integrated development environment*
    (or IDE for short), a program equipped with features that help us write code more
    effectively. An IDE typically offers autocompletion features to let you know what
    options you have available as you type, as well as build, debug, and test tools.
    Taking some time to learn the main features of your IDE of choice is worth the
    effort: it’ll make you much more productive during the development phase.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开发代码时，我们需要使用 *集成开发环境*（简称 IDE），这是一种配备有帮助我们更高效写代码的功能的程序。IDE 通常提供自动补全功能，让你在输入时知道有哪些可用选项，并且还提供构建、调试和测试工具。花时间学习你所选择的
    IDE 的主要功能是值得的：它会在开发阶段让你更加高效。
- en: 'For this book we’ll be using PyCharm, a powerful IDE created by JetBrains,
    a company that makes not only some of the best IDEs on the market but also its
    own programming language: Kotlin. If you already have some Python experience and
    prefer to use another IDE, such as Visual Studio Code, you’re welcome to do so,
    but you’ll need to figure out some things on your own using your IDE’s documentation.
    If you don’t have a lot of previous experience with any IDE, I recommend you stick
    to using PyCharm so you can follow along with the book.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将使用 PyCharm，这是 JetBrains 创建的一个强大 IDE，JetBrains 不仅开发了市场上一些最优秀的 IDE，还开发了自己的编程语言
    Kotlin。如果你已经有一定的 Python 经验，并且更喜欢使用其他 IDE，比如 Visual Studio Code，也可以使用，但你需要根据你的
    IDE 文档自行解决一些问题。如果你之前没有太多 IDE 使用经验，我建议你坚持使用 PyCharm，这样你可以跟着本书一起学习。
- en: To download PyCharm, head to [*https://www.jetbrains.com/pycharm/*](https://www.jetbrains.com/pycharm/)
    and click the **Download** button (see [Figure 5](ch00.xhtml#fig5)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 PyCharm，请访问[*https://www.jetbrains.com/pycharm/*](https://www.jetbrains.com/pycharm/)，然后点击
    **Download** 按钮（见 [图 5](ch00.xhtml#fig5)）。
- en: '![Image](../images/fig5.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5.jpg)'
- en: '*Figure 5: Downloading PyCharm IDE*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5：下载 PyCharm IDE*'
- en: 'PyCharm is available for Linux, macOS, and Windows. It has two different versions:
    Professional and Community. You can download the Community version for free. Follow
    the installer steps to install PyCharm on your machine.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 可用于 Linux、macOS 和 Windows。它有两个版本：专业版和社区版。你可以免费下载社区版。按照安装步骤将 PyCharm
    安装到你的计算机上。
- en: '**Opening the Mechanics Project**'
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**打开 Mechanics 项目**'
- en: Let’s use PyCharm to set up the *Mechanics* project you downloaded earlier so
    you can play with it and have its code for reference.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 PyCharm 设置你之前下载的 *Mechanics* 项目，这样你就可以玩一下并将其代码作为参考。
- en: Open PyCharm and click the **Open** option on the welcome screen. Locate the
    *Mechanics* project folder you downloaded or cloned from GitHub and select it.
    PyCharm should open the project and configure a Python interpreter for it, using
    the version of Python installed in your computer.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 PyCharm，在欢迎界面点击 **Open** 选项。找到你之前下载或从 GitHub 克隆的 *Mechanics* 项目文件夹并选择它。PyCharm
    应该会打开该项目并为其配置 Python 解释器，使用你计算机上安装的 Python 版本。
- en: 'Every project inside PyCharm requires that a Python interpreter be set. Since
    you could have several different versions of Python installed on your machine
    and because you may have chosen custom install locations, you need to tell PyCharm
    which of those versions of Python you want to use to interpret your project’s
    code and where to find Python’s interpreter in your system. For Windows and Linux
    users, go the menu and choose **File** ▸ **Settings**. For macOS users, choose
    **PyCharm** ▸ **Preferences**. In the Settings/Preferences window, click the **Project:
    Mechanics** section in the left column to expand it and choose **Python Interpreter**
    (see [Figure 6](ch00.xhtml#fig6)).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '每个 PyCharm 项目都需要设置 Python 解释器。由于你的计算机上可能安装了多个不同版本的 Python，且你可能选择了自定义安装位置，因此你需要告诉
    PyCharm 使用哪个 Python 版本来解释项目的代码，并且需要指明在系统中哪里可以找到 Python 解释器。对于 Windows 和 Linux
    用户，打开菜单并选择 **File** ▸ **Settings**。对于 macOS 用户，选择 **PyCharm** ▸ **Preferences**。在
    Settings/Preferences 窗口中，点击左侧栏的 **Project: Mechanics** 部分展开它，然后选择 **Python Interpreter**（见
    [图 6](ch00.xhtml#fig6)）。'
- en: '![Image](../images/fig6.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6.jpg)'
- en: '*Figure 6: Setting up the project’s Python interpreter*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6：设置项目的 Python 解释器*'
- en: On the right side of the window, click the down arrow beside the Python Interpreter
    field, and from the drop-down, choose the version of the Python binary you installed
    on your computer. If you followed the previous instructions, Python should have
    been installed to a default directory where PyCharm can find it, so the interpreter
    should appear in the list. If you’ve installed Python somewhere else, you’ll need
    to tell PyCharm the directory where you did so.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口右侧，点击 Python 解释器字段旁边的下拉箭头，从下拉菜单中选择你在计算机上安装的 Python 二进制版本。如果你按照之前的说明操作，Python
    应该已安装到 PyCharm 可以找到的默认目录中，因此解释器应该出现在列表中。如果你将 Python 安装在其他地方，则需要告诉 PyCharm 安装目录。
- en: '**NOTE**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you have any trouble setting the project’s interpreter, check PyCharm’s
    official documentation:* [https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html](https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html)*.
    This link contains a detailed explanation of the process.*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果在设置项目的解释器时遇到任何问题，请查看 PyCharm 的官方文档：* [https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html](https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html)*。该链接包含了详细的操作说明。*'
- en: 'Now that you’ve opened the *Mechanics* project, it should already be set up.
    Open the *README.md* file inside PyCharm by double-clicking it. By default, when
    you open a Markdown file in PyCharm, it’ll show you a split view: to your left
    is the Markdown raw file and to your right is the rendered version of the file.
    See [Figure 7](ch00.xhtml#fig7).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经打开了 *Mechanics* 项目，项目应该已经设置好了。双击 PyCharm 中的 *README.md* 文件打开。默认情况下，当你在
    PyCharm 中打开一个 Markdown 文件时，会显示分屏视图：左侧是 Markdown 原始文件，右侧是文件的渲染版本。参见 [图 7](ch00.xhtml#fig7)。
- en: This *README.md* file explains the basic structure of the project. Feel free
    to navigate through the links in the preview; give yourself some time to read
    through the README files inside each of the packages. This will give you a good
    sense of the amount of work we’ll do together throughout the book.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 *README.md* 文件解释了项目的基本结构。随意浏览预览中的链接；给自己一些时间阅读每个包中的 README 文件。这将帮助你了解我们将在本书中一起完成的工作量。
- en: '![Image](../images/fig7.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7.jpg)'
- en: '*Figure 7: README.md file with PyCharm’s split view*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7：带有 PyCharm 分屏视图的 README.md 文件*'
- en: '**Creating Your Own Mechanics Project**'
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建自己的 Mechanics 项目**'
- en: Now that you have the *Mechanics* project you downloaded set up for reference,
    let’s create a new empty project where you can write your code. Close the project
    if you have it open (select **File** ▸ **Close Project**). You should see the
    welcome page, as in [Figure 8](ch00.xhtml#fig8).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置好了下载的 *Mechanics* 项目作为参考，让我们创建一个新的空项目，在其中编写代码。如果你有打开的项目，关闭它（选择 **文件**
    ▸ **关闭项目**）。你应该会看到欢迎页面，如 [图 8](ch00.xhtml#fig8) 所示。
- en: '![Image](../images/fig8.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig8.jpg)'
- en: '*Figure 8: PyCharm welcome screen*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8：PyCharm 欢迎界面*'
- en: 'From the welcome page choose **Create New Project**. You’ll be asked to name
    your project: use *Mechanics*. Then, for the interpreter, instead of the default,
    which is New environment using, select the **Existing interpreter** option (see
    [Figure 9](ch00.xhtml#fig9)). Locate the version of Python you downloaded earlier
    in the introduction and click **CREATE**.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在欢迎页面选择 **创建新项目**。系统会要求你为项目命名：使用 *Mechanics*。然后，在解释器选项中，选择 **现有解释器**（而不是默认的
    New environment using）（参见 [图 9](ch00.xhtml#fig9)）。找到你在引言中下载的 Python 版本并点击 **创建**。
- en: '![Image](../images/fig9.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9.jpg)'
- en: '*Figure 9: PyCharm, creating a new project*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9：PyCharm，创建新项目*'
- en: You should have a new empty project created and ready for you to write code.
    Let’s take a quick look at PyCharm’s main features.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经创建了一个新的空项目，准备好编写代码了。让我们快速浏览一下 PyCharm 的主要功能。
- en: '**PyCharm Introduction**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**PyCharm 介绍**'
- en: This section is by no means a thorough guide to using PyCharm. To get a more
    complete overview of the IDE, you should read the documentation at [*https://www.jetbrains.com/help/pycharm*](https://www.jetbrains.com/help/pycharm).
    The official documentation is complete and up-to-date with the latest features.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本节绝不是 PyCharm 使用的全面指南。要获取更完整的 IDE 概述，请阅读[ *https://www.jetbrains.com/help/pycharm*
    ](https://www.jetbrains.com/help/pycharm)上的文档。官方文档完整且包含最新功能。
- en: PyCharm is a powerful IDE, and its Community (free) version even comes packed
    with lots of functionality; it makes working with Python a delightful experience.
    Its user interface (UI) can be divided into four main sections (see [Figure 10](ch00.xhtml#fig10)).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation bar** On the top of the window is the navigation bar. To its left
    is the breadcrumb navigation of the currently open file. To its right are buttons
    to run and debug the program, as well as the drop-down list that shows the current
    run configuration (we’ll cover run configurations later in the book).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Tool window** This is the directory structure of your project, including
    all its packages and files.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**Editor** This is where you’ll write your code.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminal** PyCharm comes with two terminals: your system’s terminal and Python’s
    terminal. We’ll use both of them throughout the book. We’ll cover these in [Chapter
    3](ch03.xhtml#ch03).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig10.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10: PyCharm UI*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm also includes the project’s Python interpreter in the lower-right corner
    of the UI. You can change the interpreter’s version from here, choosing from a
    list of versions installed on your system.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Packages and Files***'
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can create new Python packages (we’ll cover packages in [Chapter 1](ch01.xhtml#ch01))
    in your project using the Project Tool window. To create a new package, go to
    the Project Tool window and right-click the folder or package where you want to
    create the new package; from the menu that appears, select **New** ▸ **Python
    Package**. Similarly, select **New** ▸ **Python File** to create Python files.
    You can see these options in [Figure 11](ch00.xhtml#fig11).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: You can also create regular directories with New ▸ Directory and all types of
    files using New ▸ File, which will let you choose the file’s extension yourself.
    The difference between a regular directory and a Python package is that the latter
    includes a file named *__init__.py* that instructs Python’s interpreter to understand
    the directory as a package with Python code. You’ll learn more about this in [Chapter
    1](ch01.xhtml#ch01).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig11.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11: PyCharm new package or file*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Run Configurations***'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *run configuration* is just a way of telling PyCharm how we want our project
    (or a part of it) to run. We can save this configuration to use as many times
    as we need. With a run configuration in place, we can execute our application
    by simply pressing a button, as opposed to having to write a command in the shell,
    which potentially entails copy-pasting parameters, inputting filenames, and the
    like.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Among other things, a run configuration can include information about the entry
    point for our application, what files to redirect to the standard input, what
    environment variables have to be set, and what parameters to pass to the program.
    Run configurations are a convenience that will save us time when developing; they
    also allow us to easily debug Python code, as we’ll see in the next section. You
    can find the official documentation for run configurations here: [*https://www.jetbrains.com/help/pycharm/run-debug-configuration.html*](https://www.jetbrains.com/help/pycharm/run-debug-configuration.html).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a run configuration ourselves to get some hands-on experience.
    To do this, let’s first create a new empty project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a Test Project**'
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To create a new project from the menu, choose **File** ▸ **New Project**. In
    the Create Project dialog, enter *RunConfig* for the project’s name, select the
    **Existing interpreter** option, and then click **CREATE**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'In this new empty project, add a Python file by right-clicking the *RunConfig*
    empty directory in the Project Tool window and then selecting **New** ▸ **Python
    File**. Name it *fibonacci*. Open the file and enter this code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We’ve written a function to compute the *n*th Fibonacci number using a recursive
    algorithm, which we then use to compute and print the 30th number. Let’s create
    a new run configuration to execute this script.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a New Run Configuration**'
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To create a new run configuration, from the menu select **Run** ▸ **Edit Configurations**;
    the dialog in [Figure 12](ch00.xhtml#fig12) should appear.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig12.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12: The Run/Debug Configurations dialog*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are a few templates we can use to create a new run configuration.
    Each template defines parameters to help us readily create the right kind of configuration.
    We’re only going to use the Python template in this book. This template defines
    a run configuration to run and debug Python files.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: In the dialog, click the **+** button in the top-left corner and select **Python**
    from the list of available templates (see [Figure 13](ch00.xhtml#fig13)).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig13.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: '*Figure 13: Creating a new Python run configuration*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve chosen the configuration template, the right side of the dialog
    displays the parameters we’ll need to provide for this configuration to run our
    code. We only need to fill two of these parameters: the configuration’s name and
    the script path.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Locate the Name field at the top of the dialog and enter **fibonacci**. Then
    locate the Script path field under the Configuration section, and click the folder
    icon to its right. Upon clicking this icon, a file dialog should open inside the
    project’s root folder, exactly where we’ve added our *fibonacci.py* file. Choose
    this file as the script path. Your new configuration dialog should look similar
    to [Figure 14](ch00.xhtml#fig14). Click **OK**.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig14.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14: The run configuration parameters*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: You’ve successfully created a run configuration. Let’s use it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Run Configuration**'
  id: totrans-154
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the navigation bar, toward the right, locate the run configuration selector.
    [Figure 15](ch00.xhtml#fig15) shows this selector.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: '*Figure 15: The run configuration selector*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'In the drop-down list, select the run configuration you just created and click
    the green play button to execute it. You should see the following message in the
    shell of the IDE:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can also launch a run configuration from the menu by selecting **Run** ▸
    **Run ‘fibonacci’**.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: We’ve successfully used a run configuration to launch our *fibonacci.py* script.
    Let’s now use it to learn about debugging Python code.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '***Debugging Python Code***'
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When our programs are misbehaving and we don’t know why, we can debug them.
    To debug a program, we can execute it line by line, one step at a time, and inspect
    the values of the variables.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s modify our fibonacci function a little bit before we debug the script.
    Imagine that the users of this function are complaining about it being too slow
    for large numbers. For example, they state they have to wait several minutes for
    the function to compute the 50th Fibonacci number:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After careful analysis, we realize that our current implementation of the fibonacci
    function could be improved if we cached the already computed Fibonacci numbers
    to avoid repeating the calculations over and over again. To speed up the execution,
    we decide to save the numbers we’ve already figured out in a dictionary. Modify
    your code like so:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before we start our debugging exercise, try to run the script again to make
    sure it still yields the expected result. You can go further and try to compute
    the 50th number: this time it will compute it in a matter of milliseconds. The
    following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'yields this result:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s now stop the execution exactly at the line where we call the function:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To do this, we need to set a *breakpoint* where we want the Python interpreter
    to stop the execution. You can set a breakpoint in two ways: either click in the
    editor, slightly to the right of the line number where you want to stop (where
    the dot appears in [Figure 16](ch00.xhtml#fig16)), or click your cursor anywhere
    in the line, and then from the menu select **Run** ▸ **Toggle Breakpoints** ▸
    **Line Breakpoint**.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve added the breakpoint successfully, you should see a dot like the one
    in [Figure 16](ch00.xhtml#fig16).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig16.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16: Setting a breakpoint in the code*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: To launch the Fibonacci run configuration in debug mode, instead of clicking
    the green play button, you want to click the red bug button (see [Figure 15](ch00.xhtml#fig15))
    or select **Run** ▸ **Debug ‘fibonacci’** from the menu.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm launches our script and checks for breakpoints; as soon as it finds
    one, it stops execution before executing that line. Your IDE should’ve halted
    execution in the line where we set the breakpoint and displayed the debugger controls
    in the lower part, as in [Figure 17](ch00.xhtml#fig17).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig17.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: '*Figure 17: PyCharm’s debugger*'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'The debugger has a bar near the top to control the execution of the program
    (see [Figure 18](ch00.xhtml#fig18)). There are a few icons, but we’re mainly interested
    in the first two: Step over and Step into. With the Step over option, we can execute
    the current line and jump to the next one. The Step into option goes inside the
    function body of the current line. We’ll look at these two in a minute.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'The right side of the debugger has a Variables pane where we can inspect the
    current state of our program: the values of all the existing variables. For instance,
    we can see the cache variable in [Figure 17](ch00.xhtml#fig17), which is an empty
    dictionary at the moment.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig18.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: '*Figure 18: Debugger execution controls*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now click the Step into icon in the execution control’s section of the
    debugger. The execution enters the fibonacci function body and stops in its first
    instruction ([Figure 19](ch00.xhtml#fig19)).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig19.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19: Stepping into the fibonacci function*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: The debugger’s Variables pane now shows the n variable with its current value,
    50\. This value also appears beside the fibonacci function definition, as you
    can see in [Figure 19](ch00.xhtml#fig19) (both places are indicated with arrows).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: The left side of the debugger displays the Frames pane. This pane contains the
    stack frames of our program. Each time a function is executed, a new frame is
    pushed to the stack with the function’s local variables and some more information.
    You can go back and forth in time by clicking a frame to inspect the state of
    the program before that function got called. For instance, you can click the <module>,
    fibonacci.py:15 stack frame to go back in time before the fibonacci function got
    called. To go back to the current execution point, simply click the topmost stack
    frame, fibonacci, fibonacci.py:5 in this case.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Try to continue debugging the program using the Step over and Step into controls.
    Make sure you watch the cache and n variables as they change their values. Once
    you’re done experimenting, to stop the debugging session, you can either execute
    all the instructions in the program until it finishes or click the Stop button
    in the debugger. You can do this from the menu by selecting **Run** ▸ **Stop ‘fibonacci’**
    or by clicking the red square icon on the left side of the debugger.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try one last debugging exercise. Run the program again in debug mode;
    when the execution stops at the breakpoint, click the Step over icon. Inspect
    the cache variable in the Variables pane. As you can see, the cache is now filled
    with all the Fibonacci numbers from 3 up to 50\. You can expand the dictionary
    to check all of the values inside, as in [Figure 20](ch00.xhtml#fig20).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig20.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: '*Figure 20: Debugger variables*'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also interact with the current status of the program using the debugger’s
    console ([Figure 21](ch00.xhtml#fig21)). In the debugger view, click the **Console**
    tab next to the Debugger tab. In this console, you can interact with the state
    of the current program and do things like check whether a given Fibonacci number
    is cached:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Image](../images/fig21.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: '*Figure 21: Debugger console*'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this introductory chapter, we’ve taken a look at the contents of the book
    and the prerequisites you’ll need to follow along and make the best of it. We
    also installed Python and configured our environment to work effectively throughout
    the book.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: The last section was a sneak peek into PyCharm and its powerful debugging tools,
    but as you can imagine, we’ve barely scratched the surface. To learn more about
    PyCharm debugging, take a quick look at the official documentation at [*https://www.jetbrains.com/help/pycharm/debugging-code.html*](https://www.jetbrains.com/help/pycharm/debugging-code.html).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s start learning about Python.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
