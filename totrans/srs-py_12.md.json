["```py\nCREATE TABLE message (\n  id serial PRIMARY KEY,\n  content text\n);\n```", "```py\nif query.select(Message).filter(Message.id == some_id):\n    # We already have the message, it's a duplicate, ignore and raise\n    raise DuplicateMessage(message)\nelse:\n    # Insert the message\n    query.insert(message)\n```", "```py\ntry:\n    # Insert the message\n    message_table.insert(message)\nexcept UniqueViolationError:\n    # Duplicate\n    raise DuplicateMessage(message)\n```", "```py\nCREATE TABLE message (\n  id SERIAL PRIMARY KEY,\n  channel INTEGER NOT NULL,\n  source TEXT NOT NULL,\n  content TEXT NOT NULL\n);\n```", "```py\n➊ CREATE OR REPLACE FUNCTION notify_on_insert() RETURNS trigger AS $$\n➋ BEGIN\n     PERFORM pg_notify('channel_' || NEW.channel,\n                       CAST(row_to_json(NEW) AS TEXT));\n     RETURN NULL;\n   END;\n   $$ LANGUAGE plpgsql;\n```", "```py\nCREATE TRIGGER notify_on_message_insert AFTER INSERT ON message\nFOR EACH ROW EXECUTE PROCEDURE notify_on_insert();\n```", "```py\n$ psql\npsql (9.3rc1)\nSSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)\nType \"help\" for help.\n\nmydatabase=> LISTEN channel_1;\nLISTEN\nmydatabase=> INSERT INTO message(channel, source, content)\nmydatabase-> VALUES(1, 'jd', 'hello world');\nINSERT 0 1\nAsynchronous notification \"channel_1\" with payload\n\"{\"id\":1,\"channel\":1,\"source\":\"jd\",\"content\":\"hello world\"}\"\nreceived from server process with PID 26393.\n```", "```py\nimport psycopg2\nimport psycopg2.extensions\nimport select\n\nconn = psycopg2.connect(database='mydatabase', user='myuser',\n                        password='idkfa', host='localhost')\n\nconn.set_isolation_level(\n    psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)\n\ncurs = conn.cursor()\ncurs.execute(\"LISTEN channel_1;\")\n\nwhile True:\n    select.select([conn], [], [])\n    conn.poll()\n    while conn.notifies:\n        notify = conn.notifies.pop()\n        print(\"Got NOTIFY:\", notify.pid, notify.channel,\nnotify.payload)\n```", "```py\n$ python listen.py\nGot NOTIFY: 28797 channel_1\n{\"id\":10,\"channel\":1,\"source\":\"jd\",\"content\":\"hello world\"}\n```", "```py\nimport flask\nimport psycopg2\nimport psycopg2.extensions\nimport select\n\napp = flask.Flask(__name__)\n\ndef stream_messages(channel):\n    conn = psycopg2.connect(database='mydatabase', user='mydatabase',\n                            password='mydatabase', host='localhost')\n    conn.set_isolation_level(\n        psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)\n\n    curs = conn.cursor()\n    curs.execute(\"LISTEN channel_%d;\" % int(channel))\n\n    while True:\n        select.select([conn], [], [])\n        conn.poll()\n        while conn.notifies:\n            notify = conn.notifies.pop()\n            yield \"data: \" + notify.payload + \"\\n\\n\"\n\n@app.route(\"/message/<channel>\", methods=['GET'])\ndef get_messages(channel):\n    return flask.Response(stream_messages(channel),\n                          mimetype='text/event-stream')\n\nif __name__ == \"__main__\":\n    app.run()\n```", "```py\n$ python listen+http.py\n * Running on http://127.0.0.1:5000/\n```", "```py\n$ curl -v http://127.0.0.1:5000/message/1\n* About to connect() to 127.0.0.1 port 5000 (#0)\n*   Trying 127.0.0.1...\n* Adding handle: conn: 0x1d46e90\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x1d46e90) send_pipe: 1, recv_pipe: 0\n* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#0)\n> GET /message/1 HTTP/1.1\n> User-Agent: curl/7.32.0\n> Host: 127.0.0.1:5000\n> Accept: */*\n>\n```", "```py\nmydatabase=> INSERT INTO message(channel, source, content)\nmydatabase-> VALUES(1, 'jd', 'hello world');\nINSERT 0 1\nmydatabase=> INSERT INTO message(channel, source, content) mydatabase-> VALUES(1, 'jd', 'it works');\nINSERT 0 1\n```", "```py\ndata: {\"id\":71,\"channel\":1,\"source\":\"jd\",\"content\":\"hello world\"}\ndata: {\"id\":72,\"channel\":1,\"source\":\"jd\",\"content\":\"it works\"}\n```"]