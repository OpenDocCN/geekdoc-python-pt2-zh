- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: SILLY NAME GENERATOR**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**傻名字生成器**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: The USA Network television channel once ran a detective dramedy called *Psych*,
    in which hyper-observant amateur sleuth Shawn Spencer solved cases while pretending
    to use psychic abilities. A trademark of the show was the way he would introduce
    his sidekick, Gus, with goofy names made up on the fly, like Galileo Humpkins,
    Lavender Gooms, and Bad News Marvin Barnes. As Shawn might’ve said, some of these
    names are so seriously silly they could give you a brain aneurysm, and not the
    good kind!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 美国电视网曾播出一部侦探喜剧叫做*Psych*，其中超观察力的业余侦探肖恩·斯宾塞在假装使用超能力的同时解决案件。该剧的一个特色是肖恩总是用临时编造的搞笑名字来介绍他的配角加斯，比如Galileo
    Humpkins、Lavender Gooms和Bad News Marvin Barnes。正如肖恩可能会说的，这些名字有些荒唐得让人忍不住想中风，而且不是那种好的类型！
- en: '**Project #1: Generating Pseudonyms**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 #1：生成化名**'
- en: In this warm-up project, you’ll write a simple Python program that generates
    nutty names by randomly combining first names and surnames. With any luck, you’ll
    produce a plethora of aliases that would make any sidekick proud. You’ll also
    review best-practice coding guidelines and apply external programs that will help
    you write code that conforms to those guidelines.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个热身项目中，你将编写一个简单的Python程序，通过随机组合名字和姓氏来生成疯狂的名字。如果运气好的话，你将产生大量的别名，让任何配角都感到骄傲。你还将回顾最佳编码实践指南，并应用外部程序来帮助你编写符合这些指南的代码。
- en: '*Psych* not your thing? Replace the names in my list in the code with your
    own jokes or theme. You could just as easily turn this project into a *Game of
    Thrones* name generator, or perhaps you want to discover your very own “Benedict
    Cumberbatch” name; my favorite is Bendylick Cricketbat.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*心理学*不是你的兴趣吗？将我代码列表中的名字替换成你自己的笑话或主题。你可以轻松地将这个项目变成*权力的游戏*名字生成器，或者你可能想发现属于你自己的“本尼迪克特·康伯巴奇”名字；我最喜欢的是Bendylick
    Cricketbat。'
- en: '**THE OBJECTIVE**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: Randomly generate funny sidekick names using Python code that conforms to established
    style guidelines.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用符合既定风格指南的Python代码随机生成有趣的配角名字。
- en: '**Planning and Designing a Project**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**规划和设计项目**'
- en: Planning time is never wasted time. It doesn’t matter whether you’re programming
    for fun or profit; at some point, you’ll need to estimate—fairly accurately—how
    long the project will take, what obstacles you may encounter, and what tools and
    resources you’ll need to do the work. And to accomplish that, you’ll need to know
    what you’re trying to create in the first place!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 规划时间从来都不是浪费的时间。不管你是为了乐趣还是为了盈利编程；在某个时刻，你需要相对准确地估算项目将需要多长时间，可能遇到哪些障碍，以及你需要什么工具和资源来完成工作。而为了做到这一点，你首先需要知道你究竟想创造什么！
- en: 'A successful manager once told me that his secret was simply to ask lots of
    questions: *What* are you trying to do? *Why* are you doing it? Why are you doing
    it *this way*? How much *time* do you have? How much *money*? Answering these
    questions is extremely helpful to the design process and gives you a clear line
    of sight.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一位成功的经理曾告诉我，他的秘诀就是不断提问：*你*想做什么？*为什么*要做这个？为什么要*以这种方式*做？你有多少*时间*？有多少*金钱*？回答这些问题对设计过程非常有帮助，并能让你清晰地看到目标。
- en: 'In his book *Think Python, 2nd Edition* (O’Reilly, 2015), Allen Downey describes
    two types of software development plans: “prototype and patch” and “designed development.”
    With prototype and patch, you start with a simple program and then use *patches*,
    or edited code, to handle problems encountered in testing. This can be a good
    approach when you’re working through a complex problem you don’t understand very
    well. But it can also produce complicated and unreliable code. If you have a clear
    view of the problem and how you want to solve it, you should use a designed development
    plan to avoid future issues and their subsequent patches. This approach can make
    coding easier and more efficient, and it typically leads to stronger and more
    reliable code.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在他所著的《*Think Python, 第二版*》（O'Reilly，2015）一书中，艾伦·道尼描述了两种软件开发计划：“原型和修补”以及“设计开发”。使用原型和修补，你从一个简单的程序开始，然后使用*修补*，或编辑的代码，来处理测试过程中遇到的问题。这种方法在你处理一个自己不太理解的复杂问题时是很好的。然而，它也可能产生复杂且不可靠的代码。如果你对问题和解决方法有清晰的认识，你应该使用设计开发计划来避免未来出现的问题及其随之而来的修补。这种方法可以使编码更容易高效，并通常会导致更强大、更可靠的代码。
- en: For all the projects in this book, you’ll start with a clearly defined problem
    or goal that will form the basis of your design decisions. Then we’ll discuss
    strategy to better understand the issues and create a designed development plan.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中的所有项目，你将从一个明确定义的问题或目标开始，这将成为你设计决策的基础。接下来，我们将讨论策略，以更好地理解问题并创建一个设计开发计划。
- en: '***The Strategy***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***策略***'
- en: You’ll start with two lists—first and last—of funny names. The lists will be
    relatively short, so they won’t be memory intensive, won’t need to be dynamically
    updated, and shouldn’t present any runtime issues. Since all you’ll need to do
    is read names from the list, you’ll use a tuple as a container.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从两个列表开始——名字的“名”和“姓”。这些列表相对较短，因此它们不会占用大量内存，也不需要动态更新，也不应该在运行时出现问题。由于你只需要从列表中读取名字，你将使用元组作为容器。
- en: With your two tuples of names, you’ll generate new names—pairing a first name
    with a last—at the touch of a button. That way, the user can easily repeat the
    process until a sufficiently funny name appears.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你两个名字的元组，你可以通过点击一个按钮生成新名字——将一个名和一个姓配对。这样，用户可以轻松地重复该过程，直到出现足够搞笑的名字。
- en: 'You should also highlight the name in the interpreter window somehow so it
    stands out from the command prompts. The IDLE shell doesn’t provide many font
    options, but you probably know—all too well—that errors appear in red. The default
    for the `print()` function is the standard output, but with the `sys` module loaded,
    you can redirect the output to the error channel, with its trademark red coloring,
    using the `file` parameter: `print(`something`, file=sys.stderr)`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该在解释器窗口中以某种方式突出显示名字，使其从命令提示符中脱颖而出。IDLE shell 提供的字体选项不多，但你可能知道——太清楚了——错误会以红色显示。`print()`
    函数的默认输出是标准输出，但加载 `sys` 模块后，你可以使用 `file` 参数将输出重定向到错误通道，且带有标志性的红色显示：`print(`something`,
    file=sys.stderr)`。
- en: Finally, you’ll determine what style recommendations exist for Python programming.
    These guidelines should address not only the code but also documentation embedded
    within the code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将确定 Python 编程中有哪些风格推荐。这些指南不仅应该涵盖代码本身，还应涵盖嵌入代码中的文档。
- en: '***The Pseudocode***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***伪代码***'
- en: “You can always count on the Americans to do the right thing after they have
    tried everything else.” That quote, weakly linked to Winston Churchill, sums up
    the way many people approach writing pseudocode.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “你总是可以指望美国人在尝试一切其他方法后做出正确的决定。” 这句名言，虽然与温斯顿·丘吉尔的联系微弱，却总结了许多人写伪代码时的方式。
- en: '*Pseudocode* is a high-level, informal way to describe computer programs using
    structured English or any human language. It should resemble a simplified programming
    language and include keywords and proper indentations. Developers use it to ignore
    all the arcane syntax of true programming languages and focus on the underlying
    logic. Despite its widespread use, pseudocode has no official standards—only guidelines.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*伪代码* 是一种高级的、非正式的描述计算机程序的方式，使用结构化的英语或任何人类语言。它应该像一种简化的编程语言，包含关键词和正确的缩进。开发人员使用它忽略真正编程语言的所有复杂语法，专注于底层逻辑。尽管伪代码被广泛使用，但它没有官方标准——只有一些指南。'
- en: If you find you’ve hacked your way into frustration, it may be because you didn’t
    take the time to write pseudocode. I am a true believer in it, as pseudocode has—without
    fail—guided me to solutions when I was otherwise lost in the woods. Consequently,
    you’ll use some form of pseudocode in most of the projects in this book. At the
    very least, I hope you’ll see its utility, but I also hope you’ll develop the
    discipline to write it in your own projects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己已经陷入沮丧的境地，可能是因为你没有花时间写伪代码。我是真正的伪代码信徒，因为伪代码——毫无例外——曾在我迷失方向时将我引导到了解决方案。因此，在本书的大多数项目中，你将使用某种形式的伪代码。至少，我希望你能看到它的实用性，但我也希望你能养成在自己项目中写伪代码的习惯。
- en: 'A very high-level pseudocode for our funny name generator could look like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的搞笑名字生成器的一个非常高层次的伪代码可能看起来像这样：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unless you’re trying to pass a programming class or provide clear instructions
    to others, focus on the *purpose* of the pseudocode; don’t worry about slavishly
    complying with the (nonstandard) guidelines for writing it. And don’t stop with
    programming—you can apply the pseudocode process to much more. Once you get the
    hang of it, you might find it helps you complete other tasks like doing your taxes,
    planning your investments, building a house, or getting ready for a camping trip.
    It’s a great way to focus your thinking and carry programming successes over into
    real life. If only Congress would use it!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你正在努力通过编程课程或向他人提供清晰的指示，否则要关注伪代码的*目的*；不要过于担心死板地遵循（非标准的）书写规则。而且，不要仅仅局限于编程——你可以将伪代码的过程应用到更多的事情上。一旦你掌握了它，你可能会发现它有助于你完成其他任务，比如做税务、规划投资、建造房屋或准备露营旅行。这是一种很好的方式，可以帮助你集中思维，并将编程的成功经验带入现实生活。如果国会也能使用它就好了！
- en: '**The Code**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码**'
- en: '[Listing 1-1](ch01.xhtml#ch01list1) is the code for the funny name generator,
    *pseudonyms.py*, which compiles and prints a list of pseudonyms from two tuples
    of names. If you don’t want to type all the names, you can type a subset or download
    the code from *[https://nostarch.com/impracticalpython/](https://nostarch.com/impracticalpython/)*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-1](ch01.xhtml#ch01list1)是生成有趣名字的代码，*pseudonyms.py*，它从两个名字元组中编译并打印一个假名列表。如果你不想输入所有名字，可以输入其中一部分，或者从*[https://nostarch.com/impracticalpython/](https://nostarch.com/impracticalpython/)*下载代码。'
- en: '*pseudonyms.py*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*pseudonyms.py*'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 1-1: Generates silly pseudonyms from tuples of names*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-1：从名字元组中生成傻乎乎的假名*'
- en: First, import the `sys` and `random` modules ➊. You’ll use `sys` to access the
    system-specific error message functionality, so you can color your output an eye-catching
    red in the IDLE window. And `random` lets you pick, at random, items from your
    name lists.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入`sys`和`random`模块 ➊。你将使用`sys`来访问系统特定的错误消息功能，这样你就可以在IDLE窗口中将输出颜色设置为醒目的红色。而`random`模块则可以让你随机选择名字列表中的项。
- en: The `print` statements at ➋ introduce the program to the user. The newline command
    `\n` forces a new line, and single quotes `''` allow you to use quotes in the
    printout without having to resort to the backslash escape character, which would
    reduce code readability.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ➋处的`print`语句向用户介绍程序。换行命令`\n`强制换行，单引号`''`允许你在打印输出中使用引号，而无需使用反斜杠转义字符，这样可以提高代码可读性。
- en: Next, define your tuples of names. Then initiate the `while` loop ➌. Setting
    `while = True` basically means “Keep running until I tell you to stop.” Eventually,
    you’ll use a `break` statement to end the loop.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义你的名字元组。然后初始化`while`循环 ➌。将`while = True`设置为“保持运行，直到我告诉你停止”。最终，你会使用`break`语句来结束循环。
- en: The loop starts by choosing a name from the `first` tuple at random and then
    assigns that name to the variable `firstName` ➍. It uses the `random` module’s
    `choice` method to return a random element from a nonempty sequence—in this case,
    the tuple of first names.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 循环开始时，从`first`元组中随机选择一个名字，并将其赋值给变量`firstName` ➍。它使用`random`模块的`choice`方法从一个非空序列中返回一个随机元素——在这种情况下，就是第一个名字的元组。
- en: Next, choose a surname at random from the `last` tuple and assign it to the
    variable `lastName` ➎. Now that you have both names, print them and trick IDLE
    into using the red “error” font by supplying the optional argument `file=sys.stderr`
    to the `print` statement ➏. Use the newer string format *method*, rather than
    the older string format *operator* (`%`), to convert the name variables to a string.
    To read more about the new method, see *[https://docs.python.org/3.7/library/string.html](https://docs.python.org/3.7/library/string.html)*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从`last`元组中随机选择一个姓，并将其赋值给变量`lastName` ➎。现在你有了两个名字，打印它们，并通过在`print`语句 ➏中提供可选参数`file=sys.stderr`来欺骗IDLE使用红色的“错误”字体。使用更新的字符串格式*方法*，而不是较旧的字符串格式*操作符*（`%`），将名字变量转换为字符串。要了解更多关于新方法的信息，请参阅*[https://docs.python.org/3.7/library/string.html](https://docs.python.org/3.7/library/string.html)*。
- en: Once the name is displayed, ask the user to choose to play again or quit, using
    `input` to provide the instruction in quotes. In this case, include a few blank
    lines as well to make the funny name more obvious in the IDLE window. If the user
    responds by pressing the ENTER key, nothing is returned to the `try_again` variable
    ➐. With nothing returned, the condition on the `if` statement isn’t met, the `while`
    loop continues, and a new name is printed. If the user instead presses the N key,
    the `if` statement results in a `break` command, and the loop ends because the
    `while` statement no longer evaluates to `True`. Use the lowercase string method
    `.lower()` to mitigate the player’s CAPS LOCK key being engaged. In other words,
    it doesn’t matter whether the user inputs a lowercase or uppercase N, because
    the program will always read it as lowercase.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦显示出名字，要求用户选择是重新玩一轮还是退出，通过`input`提供带引号的提示。在这种情况下，还需要加入几行空白，以便在IDLE窗口中让有趣的名字更加明显。如果用户通过按下ENTER键进行响应，`try_again`变量➐不会返回任何内容。由于没有返回内容，`if`语句中的条件不成立，`while`循环继续执行，并且打印出一个新名字。如果用户按下N键，`if`语句会导致`break`命令，循环结束，因为`while`语句不再被评估为`True`。使用小写字符串方法`.lower()`来避免玩家启用CAPS
    LOCK键。换句话说，无论用户输入小写N还是大写N，程序都会将其读取为小写。
- en: Finally, ask the user to exit by pressing the ENTER key ➑. Pressing ENTER doesn’t
    assign the return value of `input()` to a variable, the program ends, and the
    console window closes. Pressing F5 in the IDLE editor window executes the completed
    program.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要求用户通过按下ENTER键退出➑。按下ENTER不会将`input()`的返回值赋给一个变量，程序结束，控制台窗口关闭。在IDLE编辑器窗口按F5执行完成的程序。
- en: This code works, but working isn’t enough—programs in Python should work with
    *style*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是可行的，但仅仅能运行是不够的——Python程序应该以*优雅*的方式运行。
- en: '***Using the Python Community’s Style Guide***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用Python社区的风格指南***'
- en: According to the *Zen of Python* (*[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)*),
    “There should be one—and preferably only one—obvious way to do something.” In
    the spirit of providing a single obvious “right way” of doing things and building
    consensus around these practices, the Python community releases *Python Enhancement
    Proposals*, which are coding conventions for the Python code comprising the standard
    library in the main Python distribution. The most important of these is *PEP 8*,
    a style guide for Python programming. PEP 8 evolves over time as new conventions
    are identified and past ones are rendered obsolete by changes in the language.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*Python禅意*（*[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)*），“应该有一种——最好只有一种——明显的做事方式。”为了提供一种明显的“正确做法”并在这些实践中建立共识，Python社区发布了*Python增强提案*，这些提案是用于Python标准库的编码约定。最重要的提案是*PEP
    8*，这是Python编程的风格指南。PEP 8随着时间的推移不断发展，因为新的约定被发现，而过去的约定随着语言的变化而变得过时。
- en: PEP 8 (*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*)
    sets standards for naming conventions; use of blank lines, tabs, and spaces; maximum
    line length; comments; and so on. The goal is to improve the readability of code
    and make it consistent across a wide spectrum of Python programs. When you start
    programming, you should strive to learn and follow the accepted conventions, before
    bad habits become engrained. The code in this book will conform closely to PEP
    8, but I have overridden some conventions (by using less commented code, fewer
    blank lines, and shorter docstrings, for example) in deference to the publishing
    industry.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 8（*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)）规定了命名约定、空白行、制表符和空格的使用、最大行长度、注释等标准。其目标是提高代码的可读性，并使其在广泛的Python程序中保持一致。当你开始编程时，应努力学习并遵循公认的约定，避免坏习惯的养成。本书中的代码将严格遵循PEP
    8，但我在某些约定上做了一些调整（例如，使用较少的注释代码、较少的空白行和较短的文档字符串），以适应出版行业的需求。
- en: Standardized names and procedures are especially important when you’re working
    in cross-functional teams. A lot can get lost in translation between scientists
    and engineers, as in 1999, when engineers lost the Mars Climate Orbiter because
    different teams used different measurement units. For almost two decades, I built
    computer models of the earth that were transferred to an engineering function.
    The engineers used scripts to load these models into their own proprietary software.
    They would share these scripts among projects for efficiency and to help the inexperienced.
    Since these “command files” were customized to each project, the engineers were
    understandably annoyed when attribute names changed during model updates. In fact,
    one of their internal guidelines was “Beg, bribe, or bully your modeler into using
    consistent property names!”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在跨职能团队中工作时，标准化的名称和程序尤为重要。科学家和工程师之间的交流常常会出现误解，就像1999年工程师因为不同团队使用不同的测量单位而导致火星气候轨道器失败一样。在近二十年的时间里，我构建了地球的计算机模型，并将其转移给工程部门。工程师们使用脚本将这些模型加载到他们自己的专有软件中。他们会在项目之间共享这些脚本，以提高效率并帮助没有经验的人。由于这些“命令文件”是根据每个项目定制的，当模型更新时属性名称发生变化时，工程师们常常感到恼火。事实上，他们的一项内部准则是：“乞求、贿赂或威胁模型设计师使用一致的属性名称！”
- en: '***Checking Your Code with Pylint***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用Pylint检查你的代码***'
- en: You should become familiar with PEP 8, but you’ll still make mistakes, and comparing
    your code to the guide is a major drag. Luckily, programs such as Pylint, pycodestyle,
    and Flake8 can help you easily follow the PEP 8 style recommendations. For this
    project, you’ll use Pylint.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该熟悉PEP 8，但你仍然会犯错误，而且与指南进行代码对比会很麻烦。幸运的是，像Pylint、pycodestyle和Flake8这样的程序可以帮助你轻松遵循PEP
    8的风格建议。在这个项目中，你将使用Pylint。
- en: '**Installing Pylint**'
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**安装Pylint**'
- en: Pylint is a source code, bug, and quality checker for the Python programming
    language. To download a free copy, go to *[https://www.pylint.org/#install](https://www.pylint.org/#install)*
    and find the install button for your platform. This button will show the command
    for installing Pylint. For example, in Windows, go to the folder that contains
    your copy of Python (such as *C:\Python35*), use SHIFT-right-click to open a context
    menu, and then click either **open command window here** or **open PowerShell
    window here**, depending on which version of Windows you’re using. Run pip install
    pylint (pip3 if Python 2 *and* 3 are installed).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint是Python编程语言的源代码、错误和质量检查工具。要下载免费的副本，请访问 *[https://www.pylint.org/#install](https://www.pylint.org/#install)*
    并找到适合你平台的安装按钮。此按钮将显示安装Pylint的命令。例如，在Windows中，进入包含你Python副本的文件夹（如 *C:\Python35*），使用SHIFT-右键点击打开上下文菜单，然后根据你的Windows版本选择
    **在此处打开命令窗口** 或 **在此处打开PowerShell窗口**。运行 `pip install pylint`（如果同时安装了Python 2和3，则使用
    `pip3`）。
- en: '**Running Pylint**'
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**运行Pylint**'
- en: In Windows, Pylint is run from a command window or, for newer systems, the PowerShell
    (you open both by using SHIFT-right-click in the folder containing the Python
    module you want to check). Type pylint filename to run the program (see [Figure
    1-1](ch01.xhtml#ch01fig1)). The *.py* extension is optional, and your directory
    path will vary from the one shown. On macOS or another Unix-based system, use
    the terminal emulator.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，Pylint从命令窗口运行，或者在更新的系统中使用PowerShell（你可以通过在包含你想检查的Python模块的文件夹中SHIFT-右键点击来打开这两者）。输入
    `pylint 文件名` 来运行程序（参见 [图1-1](ch01.xhtml#ch01fig1)）。*.py* 扩展名是可选的，并且你的目录路径会有所不同。在macOS或其他基于Unix的系统中，使用终端模拟器。
- en: '![image](../images/f0007-01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0007-01.jpg)'
- en: '*Figure 1-1: The Windows command window with the command to run Pylint*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：Windows命令窗口与运行Pylint的命令*'
- en: 'The command window will display the Pylint results. Here’s a sample of a useful
    output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 命令窗口将显示Pylint的结果。以下是一个有用的输出示例：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The capital letter at the start of each line is a message code. For example,
    `C: 15, 0` refers to a coding standard violation in line 15, column 0\. You can
    reference the following key for the various Pylint message codes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '每行开头的资本字母是消息代码。例如，`C: 15, 0`表示在第15行、第0列发生了编码标准违规。你可以参考以下的键值对来了解不同的Pylint消息代码：'
- en: '**R** Refactor for a “good practice” metric violation'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**R** 重构，表示违反了“最佳实践”度量'
- en: '**C** Convention for coding standard violation'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**C** 规范，表示违反了编码标准'
- en: '**W** Warning for stylistic problems or minor programming issues'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**W** 警告，表示风格问题或小的编程问题'
- en: '**E** Error for important programming issues (i.e., most probably a bug)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**E** 错误，表示重要的编程问题（即很可能是一个bug）'
- en: '**F** Fatal for errors that prevent further processing'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**F** 致命错误，表示阻止进一步处理的问题'
- en: 'Pylint will end its report by grading your program’s conformance to PEP 8\.
    In this case, your code received a 4 out of 10:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 将在报告结束时评分，评估程序是否符合 PEP 8。此时，您的代码得到了 4 分（满分 10 分）：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Handling False Constant Name Errors**'
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理虚假常量名称错误**'
- en: You might have noticed that Pylint incorrectly assumes all variable names in
    the global space refer to constants, and should therefore be in all caps. You
    can work around this shortcoming in a number of ways. The first is to embed your
    code in a `main()` function (as shown in [Listing 1-2](ch01.xhtml#ch01list2));
    that way, it’s out of the global space.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到，Pylint 错误地认为所有全局空间中的变量名都表示常量，因此应该全部使用大写字母。您可以通过多种方式解决这个问题。首先是将代码嵌入到 `main()`
    函数中（如 [清单 1-2](ch01.xhtml#ch01list2) 所示）；这样，它就不在全局空间中了。
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 1-2: Defines and calls a* main() *function*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-2：定义并调用一个* main() *函数*'
- en: The `__name__` variable is a special built-in variable that you can use to evaluate
    whether a program is being run in stand-alone mode or as an imported module; remember
    that a module is just a Python program used inside of another Python program.
    If you run the program directly, `__name__` is set to `__main__`. In [Listing
    1-2](ch01.xhtml#ch01list2) `__name__` is used to ensure that, when the program
    is imported, the `main()` function isn’t run until you intentionally call it,
    but when you run the program directly, the condition in the `if` statement is
    met ➊ and `main()` is automatically called ➋. You don’t always need this convention.
    For example, if your code just defines a function, you can load it as a module
    and call it without the need for `__name__`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`__name__` 变量是一个特殊的内建变量，您可以用它来评估程序是以独立模式运行，还是作为一个导入的模块运行；请记住，模块只是一个在另一个 Python
    程序中使用的 Python 程序。如果您直接运行程序，`__name__` 会被设置为 `__main__`。在 [清单 1-2](ch01.xhtml#ch01list2)
    中，`__name__` 被用来确保当程序被导入时，`main()` 函数不会被执行，直到您有意调用它；但是当您直接运行程序时，`if` 语句中的条件会被满足
    ➊，`main()` 会自动调用 ➋。您并不总是需要这种约定。例如，如果您的代码仅定义了一个函数，您可以将其作为模块加载并调用，而不需要 `__name__`。'
- en: Let’s embed everything in *pseudonyms.py*, except for the `import` statement,
    under a `main()` function and then embed the `main()` function call under an `if`
    statement, as in [Listing 1-2](ch01.xhtml#ch01list2). You can make the changes
    yourself or download the *pseudonyms_main.py* program from the website. Rerun
    Pylint. You should get the following results in your command window.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将除了 `import` 语句以外的所有内容都嵌入到 *pseudonyms.py* 文件中的 `main()` 函数下，然后将 `main()`
    函数调用嵌入到一个 `if` 语句下，如 [清单 1-2](ch01.xhtml#ch01list2) 所示。您可以自己进行更改，也可以从网站上下载 *pseudonyms_main.py*
    程序。重新运行 Pylint。您应该会在命令窗口中看到以下结果。
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now those annoying comments about invalid constant names have disappeared, but
    you aren’t out of the woods yet. As much as I like them, Python conventions don’t
    allow for *camel case* names, like `firstName`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，那些关于无效常量名称的烦人评论已经消失了，但您还没有完全解决问题。尽管我喜欢它们，但 Python 的约定不允许使用 *驼峰命名法*（camel
    case），例如 `firstName`。
- en: '**Configuring Pylint**'
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**配置 Pylint**'
- en: 'When evaluating small scripts, I prefer to use the Pylint defaults and ignore
    the false “constant name” errors. I also like to run the option `-rn` (short for
    `-reports=n`) to suppress the large volume of extraneous statistics that Pylint
    returns:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估小型脚本时，我倾向于使用 Pylint 默认设置，并忽略虚假的“常量名称”错误。我还喜欢运行 `-rn` 选项（`-reports=n` 的简写）来抑制
    Pylint 返回的大量冗余统计信息：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that using `-rn` will disable the code-grading option.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用 `-rn` 会禁用代码评分选项。
- en: 'Another issue with Pylint is that its maximum line length default is 100 characters
    but PEP 8 recommends 79 characters. To comply with PEP 8, you can run Pylint with
    the following option:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 的另一个问题是，其最大行长度默认值为 100 个字符，而 PEP 8 推荐 79 个字符。为了遵循 PEP 8，您可以使用以下选项运行 Pylint：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you’ll see that indenting the names for the `main()` function caused some
    lines to exceed the guidelines:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您会看到为 `main()` 函数缩进名称导致一些行超出了规范：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You probably don’t want to configure Pylint every time you run it, and fortunately,
    you don’t have to. Instead, you can make your own customized configuration file
    using the command `–-generate-rcfile`. For example, to suppress reporting and
    set the maximum line length to 79, enter the following into your command prompt:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不想每次运行 Pylint 时都进行配置，幸运的是，您不必这样做。相反，您可以使用命令 `–-generate-rcfile` 创建自己的自定义配置文件。例如，要抑制报告并将最大行长度设置为
    79，请在命令提示符下输入以下内容：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Put the changes you want before the `–-generate-rcfile >` name`.pylintrc` statement
    and provide your own name before the `.pylintrc` extension. You can create a configuration
    file either stand-alone, as just shown, or at the same time you evaluate a Python
    program. The *.pylintrc* file is automatically saved in your current working directory,
    though there is an option for adding a directory path (see *[https://pylint.org](https://pylint.org)*
    and *[https://pylint.readthedocs.io/en/latest/user_guide/run.html](https://pylint.readthedocs.io/en/latest/user_guide/run.html)*
    for more details).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `--generate-rcfile >` name`.pylintrc` 语句之前放置你想要的更改，并在 `.pylintrc` 扩展名之前提供你自己的名称。你可以独立创建一个配置文件，如前所示，或者在评估
    Python 程序时同时创建。*.pylintrc* 文件会自动保存在当前工作目录中，尽管也可以选择添加目录路径（有关更多详情，请参见 *[https://pylint.org](https://pylint.org)*
    和 *[https://pylint.readthedocs.io/en/latest/user_guide/run.html](https://pylint.readthedocs.io/en/latest/user_guide/run.html)*）。
- en: 'To reuse your custom configuration file, use the `--rcfile` option followed
    by the name of your personal configuration file and the name of the program you’re
    evaluating. For example, to run *myconfig.pylintrc* on the *pseudonyms_main.py*
    program, enter the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要重用你自定义的配置文件，使用 `--rcfile` 选项，后面跟着你的个人配置文件名称和你正在评估的程序名称。例如，要在 *pseudonyms_main.py*
    程序上运行 *myconfig.pylintrc*，请输入以下内容：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '***Describing Your Code with Docstrings***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***用文档字符串描述你的代码***'
- en: 'Pylint identifies that the *pseudonyms_main.py* program is missing a docstring.
    According to the PEP 257 style guide (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*),
    a *docstring* is a string literal that occurs as the first statement in a module,
    function, class, or method definition. A docstring is basically a short description
    of what your code does, and it may include specifics on aspects of the code such
    as required inputs. Here, in triple quotes, is an example of a single-line docstring
    for a function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 发现 *pseudonyms_main.py* 程序缺少文档字符串。根据 PEP 257 风格指南 (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*)，文档字符串是出现在模块、函数、类或方法定义中的第一条语句的字符串字面量。文档字符串基本上是对你的代码做什么的简短描述，它可能包括代码的特定方面，如所需的输入。以下是一个单行文档字符串示例，使用三重引号表示：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding docstring simply states what the function does, but docstrings
    can be longer and include more information. For instance, the following is a multiline
    docstring for the same function that displays information about the function’s
    input and output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的文档字符串只是简单地说明了函数的作用，但文档字符串可以更长，并包含更多的信息。例如，以下是一个多行的文档字符串，描述了相同函数的输入和输出信息：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Unfortunately, docstrings are person-, project-, and company-specific things,
    and you can find a lot of conflicting guidance. Google has its own format and
    an excellent style guide. Some members of the scientific community use a `NumPy`
    docstring standard. And *reStructuredText* is a popular format used mainly in
    conjunction with Sphinx—a tool that uses docstrings to generate documentation
    for Python projects in formats such as HTML and PDF. If you’ve ever read the docs
    (*[https://readthedocs.org/](https://readthedocs.org/)*) for a Python module,
    then you’ve seen Sphinx in action. You can find links to guides for some of these
    different styles in “[Further Reading](ch01.xhtml#lev22)” on [page 14](ch01.xhtml#page_14).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，文档字符串是与个人、项目和公司相关的事情，你会发现有很多相互矛盾的指导方针。Google 有自己的格式和优秀的风格指南。科学界的一些成员使用
    `NumPy` 文档字符串标准。而 *reStructuredText* 是一种流行的格式，主要与 Sphinx 配合使用——一个利用文档字符串生成 Python
    项目文档的工具，支持如 HTML 和 PDF 等格式。如果你曾经阅读过 Python 模块的文档（*[https://readthedocs.org/](https://readthedocs.org/)*)，那么你就看到了
    Sphinx 的实际应用。你可以在 “[Further Reading](ch01.xhtml#lev22)” 里找到这些不同风格的指南链接，[第 14 页](ch01.xhtml#page_14)。
- en: You can check how well your docstrings conform to the PEP 257 conventions with
    a free tool called pydocstyle. To install it in Windows or any other operating
    system, open a command window and run pip install pydocstyle (use `pip3` if both
    Python 2 and 3 are installed).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个名为 pydocstyle 的免费工具检查你的文档字符串是否符合 PEP 257 标准。在 Windows 或其他操作系统上安装它，打开命令窗口并运行
    `pip install pydocstyle`（如果安装了 Python 2 和 3，请使用 `pip3`）。
- en: 'To run pydocstyle, open a command window in the folder containing the code
    you want to check. If you don’t specify a filename, pydocstyle will run on *all*
    the Python programs in the folder and give you feedback:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 pydocstyle，在包含你想检查的代码的文件夹中打开命令窗口。如果不指定文件名，pydocstyle 将在文件夹中的 *所有* Python
    程序上运行，并给出反馈：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you specify a file with no docstring issues, pydocstyle will return nothing:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你指定的文件没有文档字符串问题，pydocstyle 将不会返回任何内容：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I’ll use fairly simple docstrings in all of the projects in this book in order
    to reduce visual noise in the annotated code. Feel free to expand on these if
    you wish to practice. You can always check your results with pydocstyle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有项目中，我将使用相对简单的文档字符串，以减少注释代码的视觉噪音。如果你想练习，随时可以扩展这些文档字符串。你也可以通过 pydocstyle
    来检查你的结果。
- en: '***Checking Your Code Style***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***检查代码风格***'
- en: When I was growing up, my uncle would drive from our rural town to a larger
    city to have his hair “styled.” I never understood how that was different from
    a regular haircut, but I do know how to “style” our funny name generator code
    so that it complies with PEP 8 and PEP 257.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我小时候，叔叔会从我们的小镇开车到大城市去“做发型”。我一直搞不懂这与普通理发有什么区别，但我知道怎么“设计”我们的有趣名字生成器代码，使其符合 PEP
    8 和 PEP 257 的规范。
- en: 'Make a copy of *pseudonyms_main.py* called *pseudonyms_main_fixed.py* and immediately
    evaluate it with Pylint using this command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *pseudonyms_main.py* 复制一份，命名为 *pseudonyms_main_fixed.py*，然后立即使用以下命令通过 Pylint
    对其进行评估：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Don’t suppress the report using `-rn`. You should see this output at the bottom
    of the command window:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用 `-rn` 来抑制报告。你应该在命令窗口底部看到以下输出：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now correct the code based on the Pylint output. In the following example, I
    have provided the corrections in bold. I made changes to the name tuples to correct
    for line-length issues. You can also download the corrected code, *pseudonyms_main_fixed.py*,
    from the book’s resources at *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在根据 Pylint 输出修正代码。在以下示例中，我用粗体标出了修正部分。我修改了名称元组，以解决行长度问题。你还可以从本书的资源中下载修正后的代码
    *pseudonyms_main_fixed.py*，链接在 *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*。
- en: '*pseudonyms_main_fixed.py*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*pseudonyms_main_fixed.py*'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Pylint gives the revised code a grade of 10 out of 10:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 对修改后的代码打出了 10 分（满分）的评分：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you saw in the previous section, running pydocstyle on *pseudonyms_main_fixed.py*
    yields no errors, but don’t be fooled into thinking that means it’s good or even
    adequate. For example, this docstring also passes: `"""ksjkdls lskjds kjs jdi
    wllk sijkljs dsdw noiu sss."""`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上一节看到的，运行 pydocstyle 对 *pseudonyms_main_fixed.py* 进行检查时没有报错，但不要以为这就代表代码没有问题，甚至可以认为它已经足够好。例如，这个文档字符串也能通过检查：`"""ksjkdls
    lskjds kjs jdi wllk sijkljs dsdw noiu sss."""`
- en: It’s hard to write sparse, succinct, and truly useful docstrings and comments.
    PEP 257 will help with docstrings, but comments are more freestyle and “open range.”
    Too many comments create visual noise, can be off-putting to the user, and shouldn’t
    be needed, as well-written code is largely self-documenting. Good reasons for
    adding comments include clarifying intent and heading off potential user errors,
    such as when specific measurement units or input formats are required. To find
    the right balance in commenting, take note of good examples when you run across
    them. Also, think about what you would want to see if you had to pick up your
    own code after a five-year hiatus!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 编写简洁、有用且有效的文档字符串和注释是很难的。PEP 257 会帮助你处理文档字符串，但注释更具自由性和“开放范围”。注释过多会造成视觉噪音，可能让用户感到反感，并且通常不需要，因为写得好的代码本身就能自解释。添加注释的好理由包括澄清意图和避免潜在的用户错误，例如当要求特定的度量单位或输入格式时。为了找到合适的注释平衡，遇到好的例子时要注意。此外，想一想如果你在五年后重新接手自己写的代码，你希望看到什么！
- en: Pylint and pydocstyle are easy to install, are easy to run, and will help you
    learn and comply with the accepted coding standards of the Python community. Running
    your code through Pylint prior to posting it on web forums is also a good practice
    when you’re seeking help and should prompt “kinder, gentler” responses!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 和 pydocstyle 易于安装，易于使用，它们将帮助你学习并遵守 Python 社区接受的编码标准。在你将代码发布到网络论坛寻求帮助之前，使用
    Pylint 运行代码也是一种良好的做法，这样可以促使你收到“更温和、更友好”的回应！
- en: '**Summary**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'You should now know how to write code and documentation that conforms to the
    Python community’s expectations. More importantly, you’ve generated some seriously
    funny names for a sidekick, gangster, informant, whoever. Here are a few of my
    favorites:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该知道如何编写符合 Python 社区期望的代码和文档了。更重要的是，你已经为一个伙伴、黑帮分子、线人，或者其他任何角色生成了一些非常有趣的名字。以下是我最喜欢的几个：
- en: '| Pitchfork Ben Pennywhistle | ‘Bad News’ Bloominshine |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| Pitchfork Ben Pennywhistle | ‘Bad News’ Bloominshine |'
- en: '| Chewy Stroganoff | ‘Sweet Tea’ Tippins |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| Chewy Stroganoff | ‘Sweet Tea’ Tippins |'
- en: '| Spitzitout Winterkorn | Wheezy Joe Jenkins |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| Spitzitout Winterkorn | Wheezy Joe Jenkins |'
- en: '| ‘Big Burps’ Rosenthal | Soupcan Sam Putney |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| ‘Big Burps’ Rosenthal | Soupcan Sam Putney |'
- en: '| Bill ‘Beenie-Weenie’ Clutterbuck | Greasy Jim Wigglesworth |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| Bill ‘Beenie-Weenie’ Clutterbuck | Greasy Jim Wigglesworth |'
- en: '| Dark Skies Jingley-Schmidt | Chesterfield Walkingstick |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| Dark Skies Jingley-Schmidt | Chesterfield Walkingstick |'
- en: '| Potato Bug Quakenbush | Jimbo Woolysocks |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| Potato Bug Quakenbush | Jimbo Woolysocks |'
- en: '| Worms Endicott | Fancypants Pinkerton |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| Worms Endicott | Fancypants Pinkerton |'
- en: '| Cleet Weiners | Dicman Overpeck |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| Cleet Weiners | Dicman Overpeck |'
- en: '| Ignatious Outerbridge | Buttocks Rubbins |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| Ignatious Outerbridge | Buttocks Rubbins |'
- en: '**Further Reading**'
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: For a clickable version of these resources, visit *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/).*
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看这些资源的可点击版本，请访问 *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*。
- en: '***Pseudocode***'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***伪代码***'
- en: Descriptions of some fairly formal pseudocode standards can be found at *[http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html](http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html)*
    and *[http://www.slideshare.net/sabiksabz/pseudo-code-basics/](http://www.slideshare.net/sabiksabz/pseudo-code-basics/)*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一些相对正式的伪代码标准的描述可以在 *[http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html](http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html)*
    和 *[http://www.slideshare.net/sabiksabz/pseudo-code-basics/](http://www.slideshare.net/sabiksabz/pseudo-code-basics/)*
    找到。
- en: '***Style Guides***'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***风格指南***'
- en: Here’s a list of style guides you can reference when creating Python programs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您在创建 Python 程序时可以参考的风格指南列表。
- en: The PEP 8 style guide can be found at *[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PEP 8 风格指南可以在 *[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*
    找到。
- en: The PEP 257 guidelines can be found at *[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PEP 257 指南可以在 *[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*
    找到。
- en: Google has its own format and style guide at *[https://google.github.io/styleguide/pyguide.html](https://google.github.io/styleguide/pyguide.html)*.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 有自己格式和风格指南，地址是 *[https://google.github.io/styleguide/pyguide.html](https://google.github.io/styleguide/pyguide.html)*。
- en: Examples of Google style can be found at *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)*.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 风格的示例可以在 *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)*
    找到。
- en: '`NumPy` docstring standards are at *[https://numpydoc.readthedocs.io/en/latest/](https://numpydoc.readthedocs.io/en/latest/)*.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NumPy` 文档字符串标准可以在 *[https://numpydoc.readthedocs.io/en/latest/](https://numpydoc.readthedocs.io/en/latest/)*
    找到。'
- en: '`NumPy` docstrings examples can be found at *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html)*.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NumPy` 的文档字符串示例可以在 *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html)*
    找到。'
- en: You can find out about reStructuredText at *[https://docs.python.org/devguide/documenting.html](https://docs.python.org/devguide/documenting.html)*,
    *[https://docs.python.org/3.1/documenting/rest.html](https://docs.python.org/3.1/documenting/rest.html)*,
    and *[https://wiki.python.org/moin/reStructuredText/](https://wiki.python.org/moin/reStructuredText/)*.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过 *[https://docs.python.org/devguide/documenting.html](https://docs.python.org/devguide/documenting.html)*、
    *[https://docs.python.org/3.1/documenting/rest.html](https://docs.python.org/3.1/documenting/rest.html)*
    和 *[https://wiki.python.org/moin/reStructuredText/](https://wiki.python.org/moin/reStructuredText/)*
    了解 reStructuredText。
- en: '*The Hitchhiker’s Guide to Python* (*[http://docs.python-guide.org/en/latest/writing/style/](http://docs.python-guide.org/en/latest/writing/style/)*)
    contains a section on code styles and *autopep8*, which'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Python 编程指南》* (*[http://docs.python-guide.org/en/latest/writing/style/](http://docs.python-guide.org/en/latest/writing/style/)*)
    包含关于代码风格和 *autopep8* 的一节，'
- en: will automatically reformat code for PEP 8 (to a point).
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将自动为 PEP 8 代码重新格式化（一定程度上）。
- en: '*Effective Python* by Brett Slatkin (Addison-Wesley, 2015) contains a useful
    section on documenting programs.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brett Slatkin 所著的 *《Effective Python》*（Addison-Wesley，2015年）包含了一节有用的关于文档编写的内容。
- en: '***Third-Party Modules***'
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第三方模块***'
- en: The following are some resources for using third-party modules.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用第三方模块的资源。
- en: Details on Pylint are at *[https://docs.pylint.org/en/1.8/tutorial.html](https://docs.pylint.org/en/1.8/tutorial.html)*.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pylint 的详细信息请见 *[https://docs.pylint.org/en/1.8/tutorial.html](https://docs.pylint.org/en/1.8/tutorial.html)*。
- en: Details on pydocstyle can be found at *[http://www.pydocstyle.org/en/latest/](http://www.pydocstyle.org/en/latest/)*.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pydocstyle 的详细信息请见 *[http://www.pydocstyle.org/en/latest/](http://www.pydocstyle.org/en/latest/)*。
- en: '**Practice Projects**'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**实践项目**'
- en: Try out these projects for working with strings. My own solutions are available
    in the appendix.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这些与字符串处理相关的项目。我的解决方案可以在附录中找到。
- en: '***Pig Latin***'
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***猪拉丁语***'
- en: To form Pig Latin, you take an English word that begins with a consonant, move
    that consonant to the end, and then add “ay” to the end of the word. If the word
    begins with a vowel, you simply add “way” to the end of the word. One of the most
    famous Pig Latin phrases of all time is “ixnay on the ottenray,” uttered by Marty
    Feldman in Mel Brooks’s comedic masterpiece *Young Frankenstein*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要构成“猪拉丁语”（Pig Latin），你需要取一个以辅音字母开头的英语单词，将辅音字母移到单词的末尾，然后在单词后加上“ay”。如果单词是以元音字母开头，则只需在单词后加上“way”。历史上最著名的“猪拉丁语”短语之一是“Marty
    Feldman”在梅尔·布鲁克斯的喜剧杰作*《年轻的弗兰肯斯坦》*中说的“ixnay on the ottenray”。
- en: Write a program that takes a word as input and uses indexing and slicing to
    return its Pig Latin equivalent. Run Pylint and pydocstyle on your code and correct
    any style mistakes. You can find a solution in the appendix or download *pig_latin_practice.py*
    from *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，输入一个单词，并使用索引和切片返回它的猪拉丁语等价词。运行Pylint和pydocstyle检查你的代码，并修正任何样式错误。你可以在附录中找到解决方案，或者从*[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*下载*pig_latin_practice.py*。
- en: '***Poor Man’s Bar Chart***'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***贫穷人士的条形图***'
- en: 'The six most commonly used letters in the English language can be remembered
    with the mnemonic “etaoin” (pronounced *eh-tay-oh-in*). Write a Python script
    that takes a sentence (string) as input and returns a simple bar chart–type display
    as in [Figure 1-2](ch01.xhtml#ch01fig2). Hint: I used a dictionary data structure
    and two modules that I haven’t covered yet, `pprint` and `collections/defaultdict`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 英语中六个最常用的字母可以通过助记法“etaoin”来记住（发音为*eh-tay-oh-in*）。编写一个Python脚本，输入一个句子（字符串），并返回一个简单的条形图类型的显示，参见[图
    1-2](ch01.xhtml#ch01fig2)。提示：我使用了一个字典数据结构和两个尚未介绍的模块，`pprint`和`collections/defaultdict`。
- en: '![image](../images/f0016-01.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0016-01.jpg)'
- en: '*Figure 1-2: Bar chart–like output of the* ETAOIN_practice.py *program in the
    appendix*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：附录中ETAOIN_practice.py程序生成的条形图样输出*'
- en: '**Challenge Projects**'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**挑战项目**'
- en: No solutions are provided for challenge projects. You’re on your own with these!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于挑战项目不提供解决方案。你需要独立完成这些项目！
- en: '***Poor Foreign Man’s Bar Chart***'
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***贫穷外籍人士的条形图***'
- en: Use an online translator to change your text into another Latin-based writing
    system (such as Spanish or French), rerun your code from the Poor Man’s Bar Chart,
    and compare the results. For example, a Spanish version of the text in [Figure
    1-2](ch01.xhtml#ch01fig2) yields the results in [Figure 1-3](ch01.xhtml#ch01fig3).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在线翻译工具将你的文本转换成另一种基于拉丁字母的书写系统（如西班牙语或法语），重新运行“贫穷人士的条形图”代码，并比较结果。例如，西班牙语版本的[图
    1-2](ch01.xhtml#ch01fig2)中的文本会生成[图 1-3](ch01.xhtml#ch01fig3)中的结果。
- en: '![image](../images/f0016-02.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0016-02.jpg)'
- en: '*Figure 1-3: The results of running* EATOIN_challenge.py *on a Spanish translation
    of the text in [Figure 1-2](ch01.xhtml#ch01fig2)*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：在西班牙语翻译的文本上运行* EATOIN_challenge.py *的结果，参见[图 1-2](ch01.xhtml#ch01fig2)*'
- en: Twice as many *L*s and three times as many *U*s appear in the Spanish sentence.
    To make the bar charts for different inputs directly comparable, change the code
    so every letter of the alphabet has a key and is displayed even if there are no
    values.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 西班牙语句子中出现的*L*字母数量是原来的两倍，*U*字母的数量是原来的三倍。为了使不同输入的条形图能够直接比较，请更改代码，使得每个字母都在图表中有一个键，即使没有相应的值也要显示出来。
- en: '***The Middle***'
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***中间部分***'
- en: Rewrite the funny name generator code to include middle names. First, create
    a new `middle_name` tuple, then split apart existing first name–middle name pairs
    (such as “Joe ‘Pottin Soil’” or “Sid ‘The Squirts’”) and add them to the tuple.
    You should also move some obvious nicknames (like “Oil Can”) to your `middle_name`
    tuple. Finally, add some new middle names (such as “The Big News,” or “Grunts,”
    or “Tinkie Winkie”). Use Python’s `random` module so that a middle name is chosen
    only one-half or one-third of the time.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 重写有趣名字生成器的代码，加入中间名。首先，创建一个新的`middle_name`元组，然后拆分现有的名字-中间名组合（如“Joe ‘Pottin Soil’”或“Sid
    ‘The Squirts’”），并将其添加到元组中。你还应将一些明显的昵称（如“Oil Can”）移到`middle_name`元组中。最后，添加一些新的中间名（如“The
    Big News”或“Grunts”或“Tinkie Winkie”）。使用Python的`random`模块，使得每次生成中间名的概率为一半或三分之一。
- en: '***Something Completely Different***'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***完全不同的东西***'
- en: 'Start your own list of funny names and add to the funny name generator. Hint:
    movie credits are a rich hunting ground!'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 开始自己的一份有趣名字列表，并将其添加到有趣名字生成器中。提示：电影片尾名单是一个丰富的猎取资源！
