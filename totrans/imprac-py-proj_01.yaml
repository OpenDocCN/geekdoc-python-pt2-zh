- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SILLY NAME GENERATOR**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: The USA Network television channel once ran a detective dramedy called *Psych*,
    in which hyper-observant amateur sleuth Shawn Spencer solved cases while pretending
    to use psychic abilities. A trademark of the show was the way he would introduce
    his sidekick, Gus, with goofy names made up on the fly, like Galileo Humpkins,
    Lavender Gooms, and Bad News Marvin Barnes. As Shawn might’ve said, some of these
    names are so seriously silly they could give you a brain aneurysm, and not the
    good kind!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '**Project #1: Generating Pseudonyms**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this warm-up project, you’ll write a simple Python program that generates
    nutty names by randomly combining first names and surnames. With any luck, you’ll
    produce a plethora of aliases that would make any sidekick proud. You’ll also
    review best-practice coding guidelines and apply external programs that will help
    you write code that conforms to those guidelines.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '*Psych* not your thing? Replace the names in my list in the code with your
    own jokes or theme. You could just as easily turn this project into a *Game of
    Thrones* name generator, or perhaps you want to discover your very own “Benedict
    Cumberbatch” name; my favorite is Bendylick Cricketbat.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**THE OBJECTIVE**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Randomly generate funny sidekick names using Python code that conforms to established
    style guidelines.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Planning and Designing a Project**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Planning time is never wasted time. It doesn’t matter whether you’re programming
    for fun or profit; at some point, you’ll need to estimate—fairly accurately—how
    long the project will take, what obstacles you may encounter, and what tools and
    resources you’ll need to do the work. And to accomplish that, you’ll need to know
    what you’re trying to create in the first place!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful manager once told me that his secret was simply to ask lots of
    questions: *What* are you trying to do? *Why* are you doing it? Why are you doing
    it *this way*? How much *time* do you have? How much *money*? Answering these
    questions is extremely helpful to the design process and gives you a clear line
    of sight.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'In his book *Think Python, 2nd Edition* (O’Reilly, 2015), Allen Downey describes
    two types of software development plans: “prototype and patch” and “designed development.”
    With prototype and patch, you start with a simple program and then use *patches*,
    or edited code, to handle problems encountered in testing. This can be a good
    approach when you’re working through a complex problem you don’t understand very
    well. But it can also produce complicated and unreliable code. If you have a clear
    view of the problem and how you want to solve it, you should use a designed development
    plan to avoid future issues and their subsequent patches. This approach can make
    coding easier and more efficient, and it typically leads to stronger and more
    reliable code.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: For all the projects in this book, you’ll start with a clearly defined problem
    or goal that will form the basis of your design decisions. Then we’ll discuss
    strategy to better understand the issues and create a designed development plan.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '***The Strategy***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll start with two lists—first and last—of funny names. The lists will be
    relatively short, so they won’t be memory intensive, won’t need to be dynamically
    updated, and shouldn’t present any runtime issues. Since all you’ll need to do
    is read names from the list, you’ll use a tuple as a container.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: With your two tuples of names, you’ll generate new names—pairing a first name
    with a last—at the touch of a button. That way, the user can easily repeat the
    process until a sufficiently funny name appears.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also highlight the name in the interpreter window somehow so it
    stands out from the command prompts. The IDLE shell doesn’t provide many font
    options, but you probably know—all too well—that errors appear in red. The default
    for the print() function is the standard output, but with the sys module loaded,
    you can redirect the output to the error channel, with its trademark red coloring,
    using the file parameter: print(something, file=sys.stderr).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you’ll determine what style recommendations exist for Python programming.
    These guidelines should address not only the code but also documentation embedded
    within the code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '***The Pseudocode***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: “You can always count on the Americans to do the right thing after they have
    tried everything else.” That quote, weakly linked to Winston Churchill, sums up
    the way many people approach writing pseudocode.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '*Pseudocode* is a high-level, informal way to describe computer programs using
    structured English or any human language. It should resemble a simplified programming
    language and include keywords and proper indentations. Developers use it to ignore
    all the arcane syntax of true programming languages and focus on the underlying
    logic. Despite its widespread use, pseudocode has no official standards—only guidelines.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: If you find you’ve hacked your way into frustration, it may be because you didn’t
    take the time to write pseudocode. I am a true believer in it, as pseudocode has—without
    fail—guided me to solutions when I was otherwise lost in the woods. Consequently,
    you’ll use some form of pseudocode in most of the projects in this book. At the
    very least, I hope you’ll see its utility, but I also hope you’ll develop the
    discipline to write it in your own projects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'A very high-level pseudocode for our funny name generator could look like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Load a list of first names
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Load a list of surnames
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Choose a first name at random
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Assign the name to a variable
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Choose a surname at random
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Assign the name to a variable
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Print the names to the screen in order and in red font
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Ask the user to quit or play again
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'If user plays again:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: repeat
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'If user quits:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: end and exit
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Unless you’re trying to pass a programming class or provide clear instructions
    to others, focus on the *purpose* of the pseudocode; don’t worry about slavishly
    complying with the (nonstandard) guidelines for writing it. And don’t stop with
    programming—you can apply the pseudocode process to much more. Once you get the
    hang of it, you might find it helps you complete other tasks like doing your taxes,
    planning your investments, building a house, or getting ready for a camping trip.
    It’s a great way to focus your thinking and carry programming successes over into
    real life. If only Congress would use it!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你是在通过编程课程或者给别人提供清晰的指导，否则应该专注于伪代码的*目的*；不必过于拘泥于（非标准的）写作规范。并且，不要止步于编程——你可以将伪代码的过程应用到更多的方面。一旦掌握了它，你可能会发现它能帮助你完成其他任务，比如做税务申报、规划投资、建房子，或者准备露营旅行。这是一个帮助你集中思考的好方法，并能将编程上的成功转化到现实生活中。如果国会也能使用它就好了！
- en: '**The Code**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码**'
- en: '[Listing 1-1](ch01.xhtml#ch01list1) is the code for the funny name generator,
    *pseudonyms.py*, which compiles and prints a list of pseudonyms from two tuples
    of names. If you don’t want to type all the names, you can type a subset or download
    the code from *[https://nostarch.com/impracticalpython/](https://nostarch.com/impracticalpython/)*.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 1-1](ch01.xhtml#ch01list1) 是有趣名字生成器的代码，*pseudonyms.py*，它通过两个名字元组编译并打印出一系列化名。如果你不想输入所有的名字，你可以输入一个子集，或者从
    *[https://nostarch.com/impracticalpython/](https://nostarch.com/impracticalpython/)*
    下载代码。'
- en: '*pseudonyms.py*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*pseudonyms.py*'
- en: ➊ import sys, random
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ import sys, random
- en: ➋ print("Welcome to the Psych 'Sidekick Name Picker.'\n")
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ print("欢迎来到心理学 '助手名字选择器。'\n")
- en: print("A name just like Sean would pick for Gus:\n\n")
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: print("一个像肖恩为古斯选的名字：\n\n")
- en: first = ('Baby Oil', 'Bad News', 'Big Burps', "Bill 'Beenie-Weenie'",
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: first = ('婴儿油', '坏消息', '大打嗝', "比尔 '比尼-维尼'",
- en: '"Bob ''Stinkbug''", ''Bowel Noises'', ''Boxelder'', "Bud ''Lite'' ",'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '"Bob ''Stinkbug''", ''肠胃声音'', ''Boxelder'', "Bud ''Lite'' ",'
- en: '''Butterbean'', ''Buttermilk'', ''Buttocks'', ''Chad'', ''Chesterfield'','
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '''Butterbean'', ''Buttermilk'', ''Buttocks'', ''Chad'', ''Chesterfield'','
- en: '''Chewy'', ''Chigger", "Cinnabuns'', ''Cleet'', ''Cornbread'', ''Crab Meat'','
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '''Chewy'', ''Chigger'', "肉桂包", ''Cleet'', ''玉米饼'', ''蟹肉'','
- en: '''Crapps'', ''Dark Skies'', ''Dennis Clawhammer'', ''Dicman'', ''Elphonso'','
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '''Crapps'', ''Dark Skies'', ''Dennis Clawhammer'', ''Dicman'', ''Elphonso'','
- en: '''Fancypants'', ''Figgs'', ''Foncy'', ''Gootsy'', ''Greasy Jim'', ''Huckleberry'','
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '''Fancypants'', ''Figgs'', ''Foncy'', ''Gootsy'', ''Greasy Jim'', ''Huckleberry'','
- en: '''Huggy'', ''Ignatious'', ''Jimbo'', "Joe ''Pottin Soil''", ''Johnny'','
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '''Huggy'', ''Ignatious'', ''Jimbo'', "Joe ''种植土''", ''Johnny'','
- en: '''Lemongrass'', ''Lil Debil'', ''Longbranch'', ''"Lunch Money"'','
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '''Lemongrass'', ''Lil Debil'', ''Longbranch'', ''"午餐钱"'','
- en: '''Mergatroid'', ''"Mr Peabody"'', ''Oil-Can'', ''Oinks'', ''Old Scratch'','
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '''Mergatroid'', ''"Mr Peabody"'', ''油罐'', ''Oinks'', ''Old Scratch'','
- en: '''Ovaltine'', ''Pennywhistle'', ''Pitchfork Ben'', ''Potato Bug'','
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '''Ovaltine'', ''Pennywhistle'', ''Pitchfork Ben'', ''土豆虫'','
- en: '''Pushmeet'',''Rock Candy'', ''Schlomo'', ''Scratchensniff'', ''Scut'','
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '''Pushmeet'', ''Rock Candy'', ''Schlomo'', ''Scratchensniff'', ''Scut'','
- en: '"Sid ''The Squirts''", ''Skidmark'', ''Slaps'', ''Snakes'', ''Snoobs'','
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '"Sid ''The Squirts''", ''Skidmark'', ''Slaps'', ''Snakes'', ''Snoobs'','
- en: '''Snorki'', ''Soupcan Sam'', ''Spitzitout'', ''Squids'', ''Stinky'','
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '''Snorki'', ''Soupcan Sam'', ''Spitzitout'', ''Squids'', ''Stinky'','
- en: '''Storyboard'', ''Sweet Tea'', ''TeeTee'', ''Wheezy Joe'','
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '''Storyboard'', ''甜茶'', ''TeeTee'', ''Wheezy Joe'','
- en: '"Winston ''Jazz Hands''", ''Worms'')'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '"Winston ''Jazz Hands''", ''Worms'')'
- en: last = ('Appleyard', 'Bigmeat', 'Bloominshine', 'Boogerbottom',
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: last = ('Appleyard', 'Bigmeat', 'Bloominshine', 'Boogerbottom',
- en: '''Breedslovetrout'', ''Butterbaugh'', ''Clovenhoof'', ''Clutterbuck'','
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '''Breedslovetrout'', ''Butterbaugh'', ''Clovenhoof'', ''Clutterbuck'','
- en: '''Cocktoasten'', ''Endicott'', ''Fewhairs'', ''Gooberdapple'', ''Goodensmith'','
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '''Cocktoasten'', ''Endicott'', ''Fewhairs'', ''Gooberdapple'', ''Goodensmith'','
- en: '''Goodpasture'', ''Guster'', ''Henderson'', ''Hooperbag'', ''Hoosenater'','
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '''Goodpasture'', ''Guster'', ''Henderson'', ''Hooperbag'', ''Hoosenater'','
- en: '''Hootkins'', ''Jefferson'', ''Jenkins'', ''Jingley-Schmidt'', ''Johnson'','
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '''Hootkins'', ''Jefferson'', ''Jenkins'', ''Jingley-Schmidt'', ''Johnson'','
- en: '''Kingfish'', ''Listenbee'', "M''Bembo", ''McFadden'', ''Moonshine'', ''Nettles'','
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '''Kingfish'', ''Listenbee'', "M''Bembo", ''McFadden'', ''Moonshine'', ''Nettles'','
- en: '''Noseworthy'', ''Olivetti'', ''Outerbridge'', ''Overpeck'', ''Overturf'','
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '''Noseworthy'', ''Olivetti'', ''Outerbridge'', ''Overpeck'', ''Overturf'','
- en: '''Oxhandler'', ''Pealike'', ''Pennywhistle'', ''Peterson'', ''Pieplow'','
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '''Oxhandler'', ''Pealike'', ''Pennywhistle'', ''Peterson'', ''Pieplow'','
- en: '''Pinkerton'', ''Porkins'', ''Putney'', ''Quakenbush'', ''Rainwater'','
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '''Pinkerton'', ''Porkins'', ''Putney'', ''Quakenbush'', ''Rainwater'','
- en: '''Rosenthal'', ''Rubbins'', ''Sackrider'', ''Snuggleshine'', ''Splern'','
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '''Rosenthal'', ''Rubbins'', ''Sackrider'', ''Snuggleshine'', ''Splern'','
- en: '''Stevens'', ''Stroganoff'', ''Sugar-Gold'', ''Swackhamer'', ''Tippins'','
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '''Stevens'', ''Stroganoff'', ''Sugar-Gold'', ''Swackhamer'', ''Tippins'','
- en: '''Turnipseed'', ''Vinaigrette'', ''Walkingstick'', ''Wallbanger'', ''Weewax'','
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '''Turnipseed'', ''Vinaigrette'', ''Walkingstick'', ''Wallbanger'', ''Weewax'','
- en: '''Weiners'', ''Whipkey'', ''Wigglesworth'', ''Wimplesnatch'', ''Winterkorn'','
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '''Weiners'', ''Whipkey'', ''Wigglesworth'', ''Wimplesnatch'', ''Winterkorn'','
- en: '''Woolysocks'')'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '''Woolysocks'')'
- en: '➌ while True:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '➌ while True:'
- en: ➍ firstName = random.choice(first)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ firstName = random.choice(first)
- en: ➎ lastName = random.choice(last)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ lastName = random.choice(last)
- en: print("\n\n")
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: print("\n\n")
- en: ➏ print("{} {}".format(firstName, lastName), file=sys.stderr)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ➏ print("{} {}".format(firstName, lastName), file=sys.stderr)
- en: print("\n\n")
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: print("\n\n")
- en: ➐ try_again = input("\n\nTry again? (Press Enter else n to quit)\n ")
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ➐ try_again = input("\n\n再试一次？（按 Enter 键继续，按 n 键退出）\n ")
- en: 'if try_again.lower() == "n":'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'if try_again.lower() == "n":'
- en: break
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ➑ input("\nPress Enter to exit.")
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ➑ input("\n按 Enter 键退出。")
- en: '*Listing 1-1: Generates silly pseudonyms from tuples of names*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-1：从名字元组生成傻乎乎的化名*'
- en: First, import the sys and random modules ➊. You’ll use sys to access the system-specific
    error message functionality, so you can color your output an eye-catching red
    in the IDLE window. And random lets you pick, at random, items from your name
    lists.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入 sys 和 random 模块 ➊。你将使用 sys 来访问特定于系统的错误消息功能，这样你就可以在 IDLE 窗口中将输出设置为引人注目的红色。而
    random 模块让你可以从名字列表中随机选择元素。
- en: The print statements at ➋ introduce the program to the user. The newline command
    \n forces a new line, and single quotes '' allow you to use quotes in the printout
    without having to resort to the backslash escape character, which would reduce
    code readability.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ 处的 print 语句向用户介绍程序。换行命令 \n 强制换行，单引号 '' 让你在打印输出时使用引号，而无需使用反斜杠转义字符，这样可以提高代码的可读性。
- en: Next, define your tuples of names. Then initiate the while loop ➌. Setting while
    = True basically means “Keep running until I tell you to stop.” Eventually, you’ll
    use a break statement to end the loop.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义你的名字元组。然后启动 while 循环 ➌。设置 while = True 基本上意味着“继续运行，直到我告诉你停止”。最终，你会使用 break
    语句来结束循环。
- en: The loop starts by choosing a name from the first tuple at random and then assigns
    that name to the variable firstName ➍. It uses the random module’s choice method
    to return a random element from a nonempty sequence—in this case, the tuple of
    first names.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 循环从随机选择第一个元组中的一个名字开始，然后将该名字赋值给变量 firstName ➍。它使用 random 模块的 choice 方法，从非空序列中返回一个随机元素——在这个例子中，就是从名字元组中随机选择一个名字。
- en: Next, choose a surname at random from the last tuple and assign it to the variable
    lastName ➎. Now that you have both names, print them and trick IDLE into using
    the red “error” font by supplying the optional argument file=sys.stderr to the
    print statement ➏. Use the newer string format *method*, rather than the older
    string format *operator* (%), to convert the name variables to a string. To read
    more about the new method, see *[https://docs.python.org/3.7/library/string.html](https://docs.python.org/3.7/library/string.html)*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从最后一个元组中随机选择一个姓氏并将其赋值给变量 lastName ➎。现在你已经有了两个名字，打印它们，并通过在 print 语句中提供可选参数
    file=sys.stderr，让 IDLE 使用红色“错误”字体。使用较新的字符串格式*方法*，而不是旧的字符串格式*运算符*（%），将名字变量转换为字符串。要了解更多关于新方法的信息，请参阅
    *[https://docs.python.org/3.7/library/string.html](https://docs.python.org/3.7/library/string.html)*。
- en: Once the name is displayed, ask the user to choose to play again or quit, using
    input to provide the instruction in quotes. In this case, include a few blank
    lines as well to make the funny name more obvious in the IDLE window. If the user
    responds by pressing the ENTER key, nothing is returned to the try_again variable
    ➐. With nothing returned, the condition on the if statement isn’t met, the while
    loop continues, and a new name is printed. If the user instead presses the N key,
    the if statement results in a break command, and the loop ends because the while
    statement no longer evaluates to True. Use the lowercase string method .lower()
    to mitigate the player’s CAPS LOCK key being engaged. In other words, it doesn’t
    matter whether the user inputs a lowercase or uppercase N, because the program
    will always read it as lowercase.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦名字显示出来，询问用户是否选择继续玩或退出，使用 input 提供带引号的提示信息。在这种情况下，还要包含几行空白，以使得 IDLE 窗口中的搞笑名字更加突出。如果用户按下
    ENTER 键，则 try_again 变量 ➐ 中不会返回任何值。没有返回值时，if 语句的条件不成立，while 循环继续执行，一个新名字会被打印出来。如果用户按下
    N 键，则 if 语句会触发 break 命令，循环结束，因为 while 语句不再计算为 True。使用小写字符串方法 .lower() 可以避免玩家开启大写锁定键。换句话说，无论用户输入小写字母还是大写字母
    N，程序都会将其视为小写字母。
- en: Finally, ask the user to exit by pressing the ENTER key ➑. Pressing ENTER doesn’t
    assign the return value of input() to a variable, the program ends, and the console
    window closes. Pressing F5 in the IDLE editor window executes the completed program.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，提示用户按 Enter 键退出 ➑。按 Enter 键不会将 input() 的返回值赋给变量，程序结束，控制台窗口关闭。在 IDLE 编辑器窗口中按
    F5 执行完成的程序。
- en: This code works, but working isn’t enough—programs in Python should work with
    *style*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以运行，但仅仅能运行是不够的——Python 程序应该以*风格*来运行。
- en: '***Using the Python Community’s Style Guide***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: According to the *Zen of Python* (*[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)*),
    “There should be one—and preferably only one—obvious way to do something.” In
    the spirit of providing a single obvious “right way” of doing things and building
    consensus around these practices, the Python community releases *Python Enhancement
    Proposals*, which are coding conventions for the Python code comprising the standard
    library in the main Python distribution. The most important of these is *PEP 8*,
    a style guide for Python programming. PEP 8 evolves over time as new conventions
    are identified and past ones are rendered obsolete by changes in the language.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: PEP 8 (*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*)
    sets standards for naming conventions; use of blank lines, tabs, and spaces; maximum
    line length; comments; and so on. The goal is to improve the readability of code
    and make it consistent across a wide spectrum of Python programs. When you start
    programming, you should strive to learn and follow the accepted conventions, before
    bad habits become engrained. The code in this book will conform closely to PEP
    8, but I have overridden some conventions (by using less commented code, fewer
    blank lines, and shorter docstrings, for example) in deference to the publishing
    industry.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Standardized names and procedures are especially important when you’re working
    in cross-functional teams. A lot can get lost in translation between scientists
    and engineers, as in 1999, when engineers lost the Mars Climate Orbiter because
    different teams used different measurement units. For almost two decades, I built
    computer models of the earth that were transferred to an engineering function.
    The engineers used scripts to load these models into their own proprietary software.
    They would share these scripts among projects for efficiency and to help the inexperienced.
    Since these “command files” were customized to each project, the engineers were
    understandably annoyed when attribute names changed during model updates. In fact,
    one of their internal guidelines was “Beg, bribe, or bully your modeler into using
    consistent property names!”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '***Checking Your Code with Pylint***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You should become familiar with PEP 8, but you’ll still make mistakes, and comparing
    your code to the guide is a major drag. Luckily, programs such as Pylint, pycodestyle,
    and Flake8 can help you easily follow the PEP 8 style recommendations. For this
    project, you’ll use Pylint.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Pylint**'
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Pylint is a source code, bug, and quality checker for the Python programming
    language. To download a free copy, go to *[https://www.pylint.org/#install](https://www.pylint.org/#install)*
    and find the install button for your platform. This button will show the command
    for installing Pylint. For example, in Windows, go to the folder that contains
    your copy of Python (such as *C:\Python35*), use SHIFT-right-click to open a context
    menu, and then click either **open command window here** or **open PowerShell
    window here**, depending on which version of Windows you’re using. Run pip install
    pylint (pip3 if Python 2 *and* 3 are installed).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '**Running Pylint**'
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In Windows, Pylint is run from a command window or, for newer systems, the PowerShell
    (you open both by using SHIFT-right-click in the folder containing the Python
    module you want to check). Type pylint filename to run the program (see [Figure
    1-1](ch01.xhtml#ch01fig1)). The *.py* extension is optional, and your directory
    path will vary from the one shown. On macOS or another Unix-based system, use
    the terminal emulator.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0007-01.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-1: The Windows command window with the command to run Pylint*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The command window will display the Pylint results. Here’s a sample of a useful
    output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pylint pseudonyms.py
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: No config file found, using default configuration
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '************* Module pseudonyms'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 45, 0: No space allowed around keyword argument assignment'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: print(firstName, lastName, file = sys.stderr)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: ^ (bad-whitespace)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'C:  1, 0: Missing module docstring (missing-docstring)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'C:  2, 0: Multiple imports on one line (sys, random) (multiple-imports)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'C:  7, 0: Invalid constant name "first" (invalid-name)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 23, 0: Invalid constant name "last" (invalid-name)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 40, 4: Invalid constant name "firstName" (invalid-name)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 42, 4: Invalid constant name "lastName" (invalid-name)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 48, 4: Invalid constant name "try_again" (invalid-name)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The capital letter at the start of each line is a message code. For example,
    C: 15, 0 refers to a coding standard violation in line 15, column 0\. You can
    reference the following key for the various Pylint message codes:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '**R** Refactor for a “good practice” metric violation'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '**C** Convention for coding standard violation'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '**W** Warning for stylistic problems or minor programming issues'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '**E** Error for important programming issues (i.e., most probably a bug)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**F** Fatal for errors that prevent further processing'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Pylint will end its report by grading your program’s conformance to PEP 8\.
    In this case, your code received a 4 out of 10:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Global evaluation
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '-----------------'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code has been rated at 4.00/10 (previous run: 4.00/10, +0.00)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '**Handling False Constant Name Errors**'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You might have noticed that Pylint incorrectly assumes all variable names in
    the global space refer to constants, and should therefore be in all caps. You
    can work around this shortcoming in a number of ways. The first is to embed your
    code in a main() function (as shown in [Listing 1-2](ch01.xhtml#ch01list2)); that
    way, it’s out of the global space.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: some indented code
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: some indented code
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: some indented code
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '➊ if __name__ == "__main__":'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: ➋ main()
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 1-2: Defines and calls a* main() *function*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: The __name__ variable is a special built-in variable that you can use to evaluate
    whether a program is being run in stand-alone mode or as an imported module; remember
    that a module is just a Python program used inside of another Python program.
    If you run the program directly, __name__ is set to __main__. In [Listing 1-2](ch01.xhtml#ch01list2)
    __name__ is used to ensure that, when the program is imported, the main() function
    isn’t run until you intentionally call it, but when you run the program directly,
    the condition in the if statement is met ➊ and main() is automatically called
    ➋. You don’t always need this convention. For example, if your code just defines
    a function, you can load it as a module and call it without the need for __name__.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Let’s embed everything in *pseudonyms.py*, except for the import statement,
    under a main() function and then embed the main() function call under an if statement,
    as in [Listing 1-2](ch01.xhtml#ch01list2). You can make the changes yourself or
    download the *pseudonyms_main.py* program from the website. Rerun Pylint. You
    should get the following results in your command window.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pylint pseudonyms_main
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: No config file found, using default configuration
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '************* Module pseudonyms_main'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 47, 0: No space allowed around keyword argument assignment'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: print(firstName, lastName, file = sys.stderr)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: ^ (bad-whitespace)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'C:  1, 0: Missing module docstring (missing-docstring)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'C:  2, 0: Multiple imports on one line (sys, random) (multiple-imports)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'C:  4, 0: Missing function docstring (missing-docstring)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 42, 8: Invalid variable name "firstName" (invalid-name)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 44, 8: Invalid variable name "lastName" (invalid-name)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Now those annoying comments about invalid constant names have disappeared, but
    you aren’t out of the woods yet. As much as I like them, Python conventions don’t
    allow for *camel case* names, like firstName.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring Pylint**'
  id: totrans-150
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'When evaluating small scripts, I prefer to use the Pylint defaults and ignore
    the false “constant name” errors. I also like to run the option -rn (short for
    -reports=n) to suppress the large volume of extraneous statistics that Pylint
    returns:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pylint -rn pseudonyms_main.py
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Note that using -rn will disable the code-grading option.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Another issue with Pylint is that its maximum line length default is 100 characters
    but PEP 8 recommends 79 characters. To comply with PEP 8, you can run Pylint with
    the following option:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pylint --max-line-length=79 pseudonyms_main
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you’ll see that indenting the names for the main() function caused some
    lines to exceed the guidelines:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 12, 0: Line too long (80/79) (line-too-long)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'C: 14, 0: Line too long (83/79) (line-too-long)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'You probably don’t want to configure Pylint every time you run it, and fortunately,
    you don’t have to. Instead, you can make your own customized configuration file
    using the command –-generate-rcfile. For example, to suppress reporting and set
    the maximum line length to 79, enter the following into your command prompt:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: your pathname>pylint -rn --max-line-length=79 --generate-rcfile > name.pylintrc
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Put the changes you want before the –-generate-rcfile > name.pylintrc statement
    and provide your own name before the .pylintrc extension. You can create a configuration
    file either stand-alone, as just shown, or at the same time you evaluate a Python
    program. The *.pylintrc* file is automatically saved in your current working directory,
    though there is an option for adding a directory path (see *[https://pylint.org](https://pylint.org)*
    and *[https://pylint.readthedocs.io/en/latest/user_guide/run.html](https://pylint.readthedocs.io/en/latest/user_guide/run.html)*
    for more details).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'To reuse your custom configuration file, use the --rcfile option followed by
    the name of your personal configuration file and the name of the program you’re
    evaluating. For example, to run *myconfig.pylintrc* on the *pseudonyms_main.py*
    program, enter the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pylint --rcfile myconfig.pylintrc pseudonyms_main
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '***Describing Your Code with Docstrings***'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Pylint identifies that the *pseudonyms_main.py* program is missing a docstring.
    According to the PEP 257 style guide (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*),
    a *docstring* is a string literal that occurs as the first statement in a module,
    function, class, or method definition. A docstring is basically a short description
    of what your code does, and it may include specifics on aspects of the code such
    as required inputs. Here, in triple quotes, is an example of a single-line docstring
    for a function:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'def circ(r):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '"""Return the circumference of a circle with radius of r."""'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: c = 2 * r * math.pi
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: return c
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding docstring simply states what the function does, but docstrings
    can be longer and include more information. For instance, the following is a multiline
    docstring for the same function that displays information about the function’s
    input and output:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'def circ(r):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '"""Return the circumference of a circle with radius of r.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: r – radius of circle
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'float: circumference of circle'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: c = 2 * r * math.pi
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: return c
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, docstrings are person-, project-, and company-specific things,
    and you can find a lot of conflicting guidance. Google has its own format and
    an excellent style guide. Some members of the scientific community use a NumPy
    docstring standard. And *reStructuredText* is a popular format used mainly in
    conjunction with Sphinx—a tool that uses docstrings to generate documentation
    for Python projects in formats such as HTML and PDF. If you’ve ever read the docs
    (*[https://readthedocs.org/](https://readthedocs.org/)*) for a Python module,
    then you’ve seen Sphinx in action. You can find links to guides for some of these
    different styles in “[Further Reading](ch01.xhtml#lev22)” on [page 14](ch01.xhtml#page_14).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: You can check how well your docstrings conform to the PEP 257 conventions with
    a free tool called pydocstyle. To install it in Windows or any other operating
    system, open a command window and run pip install pydocstyle (use pip3 if both
    Python 2 and 3 are installed).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'To run pydocstyle, open a command window in the folder containing the code
    you want to check. If you don’t specify a filename, pydocstyle will run on *all*
    the Python programs in the folder and give you feedback:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pydocstyle
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '.\OLD_pseudonyms_main.py:1 at module level:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'D100: Missing docstring in public module'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '.\OLD_pseudonyms_main.py:4 in public function `main`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'D103: Missing docstring in public function'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '.\ pseudonyms.py:1 at module level:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'D100: Missing docstring in public module'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '.\ pseudonyms_main_broken.py:1 at module level:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'D200: One-line docstring should fit on one line with quotes (found 2)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '.\ pseudonyms_main_broken.py:6 in public function `main`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'D205: 1 blank line required between summary line and description'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: (found 0)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'If you specify a file with no docstring issues, pydocstyle will return nothing:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>pydocstyle pseudonyms_main_fixed.py
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: C:\Python35\Python 3 Stuff\Psych>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: I’ll use fairly simple docstrings in all of the projects in this book in order
    to reduce visual noise in the annotated code. Feel free to expand on these if
    you wish to practice. You can always check your results with pydocstyle.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '***Checking Your Code Style***'
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When I was growing up, my uncle would drive from our rural town to a larger
    city to have his hair “styled.” I never understood how that was different from
    a regular haircut, but I do know how to “style” our funny name generator code
    so that it complies with PEP 8 and PEP 257.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a copy of *pseudonyms_main.py* called *pseudonyms_main_fixed.py* and immediately
    evaluate it with Pylint using this command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: your_path>pylint --max-line-length=79 pseudonyms_main_fixed
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t suppress the report using -rn. You should see this output at the bottom
    of the command window:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Global evaluation
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '-----------------'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Your code has been rated at 3.33/10
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Now correct the code based on the Pylint output. In the following example, I
    have provided the corrections in bold. I made changes to the name tuples to correct
    for line-length issues. You can also download the corrected code, *pseudonyms_main_fixed.py*,
    from the book’s resources at *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '*pseudonyms_main_fixed.py*'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '"""Generate funny names by randomly combining names from 2 separate lists."""'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: import sys
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: import random
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'def main():'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '"""Choose names at random from 2 tuples of names and print to screen."""'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: print("Welcome to the Psych 'Sidekick Name Picker.'\n")
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: print("A name just like Sean would pick for Gus:\n\n")
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: first = ('Baby Oil', 'Bad News', 'Big Burps', "Bill 'Beenie-Weenie'",
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '"Bob ''Stinkbug''", ''Bowel Noises'', ''Boxelder'', "Bud ''Lite''",'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '''Butterbean'', ''Buttermilk'', ''Buttocks'', ''Chad'', ''Chesterfield'','
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '''Chewy'', ''Chigger'', ''Cinnabuns'', ''Cleet'', ''Cornbread'','
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '''Crab Meat'', ''Crapps'', ''Dark Skies'', ''Dennis Clawhammer'','
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '''Dicman'', ''Elphonso'', ''Fancypants'', ''Figgs'', ''Foncy'', ''Gootsy'','
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '''Greasy Jim'', ''Huckleberry'', ''Huggy'', ''Ignatious'', ''Jimbo'','
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '"Joe ''Pottin Soil''", ''Johnny'', ''Lemongrass'', ''Lil Debil'','
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '''Longbranch'', ''"Lunch Money"'', ''Mergatroid'', ''"Mr Peabody"'','
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '''Oil-Can'', ''Oinks'', ''Old Scratch'', ''Ovaltine'', ''Pennywhistle'','
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '''Pitchfork Ben'', ''Potato Bug'', ''Pushmeet'', ''Rock Candy'','
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '''Schlomo'', ''Scratchensniff'', ''Scut'', "Sid ''The Squirts''",'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '''Skidmark'', ''Slaps'', ''Snakes'', ''Snoobs'', ''Snorki'', ''Soupcan Sam'','
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '''Spitzitout'', ''Squids'', ''Stinky'', ''Storyboard'', ''Sweet Tea'','
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '''TeeTee'', ''Wheezy Joe'', "Winston ''Jazz Hands''", ''Worms'')'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: last = ('Appleyard', 'Bigmeat', 'Bloominshine', 'Boogerbottom',
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '''Breedslovetrout'', ''Butterbaugh'', ''Clovenhoof'', ''Clutterbuck'','
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '''Cocktoasten'', ''Endicott'', ''Fewhairs'', ''Gooberdapple'','
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '''Goodensmith'', ''Goodpasture'', ''Guster'', ''Henderson'', ''Hooperbag'','
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '''Hoosenater'', ''Hootkins'', ''Jefferson'', ''Jenkins'','
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '''Jingley-Schmidt'', ''Johnson'', ''Kingfish'', ''Listenbee'', "M''Bembo",'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '''McFadden'', ''Moonshine'', ''Nettles'', ''Noseworthy'', ''Olivetti'','
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '''Outerbridge'', ''Overpeck'', ''Overturf'', ''Oxhandler'', ''Pealike'','
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '''Pennywhistle'', ''Peterson'', ''Pieplow'', ''Pinkerton'', ''Porkins'','
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '''Putney'', ''Quakenbush'', ''Rainwater'', ''Rosenthal'', ''Rubbins'','
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '''Sackrider'', ''Snuggleshine'', ''Splern'', ''Stevens'', ''Stroganoff'','
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '''Sugar-Gold'', ''Swackhamer'', ''Tippins'', ''Turnipseed'','
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '''Vinaigrette'', ''Walkingstick'', ''Wallbanger'', ''Weewax'', ''Weiners'','
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '''Whipkey'', ''Wigglesworth'', ''Wimplesnatch'', ''Winterkorn'','
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '''Woolysocks'')'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: first_name = random.choice(first)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: last_name = random.choice(last)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: print("\n\n")
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '# Trick IDLE by using "fatal error" setting to print name in red.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: print("{} {}".format(first_name, last_name), file=sys.stderr)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: print("\n\n")
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: try_again = input("\n\nTry again? (Press Enter else n to quit)\n ")
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'if try_again.lower() == "n":'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: input("\nPress Enter to exit.")
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == "__main__":'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: main()
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'Pylint gives the revised code a grade of 10 out of 10:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Global evaluation
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '-----------------'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code has been rated at 10.00/10 (previous run: 3.33/10, +6.67)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'As you saw in the previous section, running pydocstyle on *pseudonyms_main_fixed.py*
    yields no errors, but don’t be fooled into thinking that means it’s good or even
    adequate. For example, this docstring also passes: """ksjkdls lskjds kjs jdi wllk
    sijkljs dsdw noiu sss."""'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: It’s hard to write sparse, succinct, and truly useful docstrings and comments.
    PEP 257 will help with docstrings, but comments are more freestyle and “open range.”
    Too many comments create visual noise, can be off-putting to the user, and shouldn’t
    be needed, as well-written code is largely self-documenting. Good reasons for
    adding comments include clarifying intent and heading off potential user errors,
    such as when specific measurement units or input formats are required. To find
    the right balance in commenting, take note of good examples when you run across
    them. Also, think about what you would want to see if you had to pick up your
    own code after a five-year hiatus!
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Pylint and pydocstyle are easy to install, are easy to run, and will help you
    learn and comply with the accepted coding standards of the Python community. Running
    your code through Pylint prior to posting it on web forums is also a good practice
    when you’re seeking help and should prompt “kinder, gentler” responses!
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You should now know how to write code and documentation that conforms to the
    Python community’s expectations. More importantly, you’ve generated some seriously
    funny names for a sidekick, gangster, informant, whoever. Here are a few of my
    favorites:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '| Pitchfork Ben Pennywhistle | ‘Bad News’ Bloominshine |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
- en: '| Chewy Stroganoff | ‘Sweet Tea’ Tippins |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
- en: '| Spitzitout Winterkorn | Wheezy Joe Jenkins |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| ‘Big Burps’ Rosenthal | Soupcan Sam Putney |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| Bill ‘Beenie-Weenie’ Clutterbuck | Greasy Jim Wigglesworth |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '| Dark Skies Jingley-Schmidt | Chesterfield Walkingstick |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: '| Potato Bug Quakenbush | Jimbo Woolysocks |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
- en: '| Worms Endicott | Fancypants Pinkerton |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '| Cleet Weiners | Dicman Overpeck |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
- en: '| Ignatious Outerbridge | Buttocks Rubbins |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
- en: '**Further Reading**'
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a clickable version of these resources, visit *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/).*
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '***Pseudocode***'
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Descriptions of some fairly formal pseudocode standards can be found at *[http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html](http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html)*
    and *[http://www.slideshare.net/sabiksabz/pseudo-code-basics/](http://www.slideshare.net/sabiksabz/pseudo-code-basics/)*.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '***Style Guides***'
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here’s a list of style guides you can reference when creating Python programs.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: The PEP 8 style guide can be found at *[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PEP 257 guidelines can be found at *[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google has its own format and style guide at *[https://google.github.io/styleguide/pyguide.html](https://google.github.io/styleguide/pyguide.html)*.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of Google style can be found at *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)*.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy docstring standards are at *[https://numpydoc.readthedocs.io/en/latest/](https://numpydoc.readthedocs.io/en/latest/)*.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy docstrings examples can be found at *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html)*.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out about reStructuredText at *[https://docs.python.org/devguide/documenting.html](https://docs.python.org/devguide/documenting.html)*,
    *[https://docs.python.org/3.1/documenting/rest.html](https://docs.python.org/3.1/documenting/rest.html)*,
    and *[https://wiki.python.org/moin/reStructuredText/](https://wiki.python.org/moin/reStructuredText/)*.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Hitchhiker’s Guide to Python* (*[http://docs.python-guide.org/en/latest/writing/style/](http://docs.python-guide.org/en/latest/writing/style/)*)
    contains a section on code styles and *autopep8*, which'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: will automatically reformat code for PEP 8 (to a point).
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Effective Python* by Brett Slatkin (Addison-Wesley, 2015) contains a useful
    section on documenting programs.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Third-Party Modules***'
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following are some resources for using third-party modules.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Details on Pylint are at *[https://docs.pylint.org/en/1.8/tutorial.html](https://docs.pylint.org/en/1.8/tutorial.html)*.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details on pydocstyle can be found at *[http://www.pydocstyle.org/en/latest/](http://www.pydocstyle.org/en/latest/)*.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Practice Projects**'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try out these projects for working with strings. My own solutions are available
    in the appendix.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '***Pig Latin***'
  id: totrans-301
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To form Pig Latin, you take an English word that begins with a consonant, move
    that consonant to the end, and then add “ay” to the end of the word. If the word
    begins with a vowel, you simply add “way” to the end of the word. One of the most
    famous Pig Latin phrases of all time is “ixnay on the ottenray,” uttered by Marty
    Feldman in Mel Brooks’s comedic masterpiece *Young Frankenstein*.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that takes a word as input and uses indexing and slicing to
    return its Pig Latin equivalent. Run Pylint and pydocstyle on your code and correct
    any style mistakes. You can find a solution in the appendix or download *pig_latin_practice.py*
    from *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '***Poor Man’s Bar Chart***'
  id: totrans-304
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The six most commonly used letters in the English language can be remembered
    with the mnemonic “etaoin” (pronounced *eh-tay-oh-in*). Write a Python script
    that takes a sentence (string) as input and returns a simple bar chart–type display
    as in [Figure 1-2](ch01.xhtml#ch01fig2). Hint: I used a dictionary data structure
    and two modules that I haven’t covered yet, pprint and collections/defaultdict.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-01.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-2: Bar chart–like output of the* ETAOIN_practice.py *program in the
    appendix*'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Projects**'
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No solutions are provided for challenge projects. You’re on your own with these!
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '***Poor Foreign Man’s Bar Chart***'
  id: totrans-310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use an online translator to change your text into another Latin-based writing
    system (such as Spanish or French), rerun your code from the Poor Man’s Bar Chart,
    and compare the results. For example, a Spanish version of the text in [Figure
    1-2](ch01.xhtml#ch01fig2) yields the results in [Figure 1-3](ch01.xhtml#ch01fig3).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-02.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-3: The results of running* EATOIN_challenge.py *on a Spanish translation
    of the text in [Figure 1-2](ch01.xhtml#ch01fig2)*'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Twice as many *L*s and three times as many *U*s appear in the Spanish sentence.
    To make the bar charts for different inputs directly comparable, change the code
    so every letter of the alphabet has a key and is displayed even if there are no
    values.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '***The Middle***'
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rewrite the funny name generator code to include middle names. First, create
    a new middle_name tuple, then split apart existing first name–middle name pairs
    (such as “Joe ‘Pottin Soil’” or “Sid ‘The Squirts’”) and add them to the tuple.
    You should also move some obvious nicknames (like “Oil Can”) to your middle_name
    tuple. Finally, add some new middle names (such as “The Big News,” or “Grunts,”
    or “Tinkie Winkie”). Use Python’s random module so that a middle name is chosen
    only one-half or one-third of the time.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '***Something Completely Different***'
  id: totrans-317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Start your own list of funny names and add to the funny name generator. Hint:
    movie credits are a rich hunting ground!'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
