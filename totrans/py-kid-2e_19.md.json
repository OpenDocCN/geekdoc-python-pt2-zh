["```py\n    def animate(self):\n        if self.x != 0 and self.y == 0:\n            if time.time() - self.last_time > 0.1:\n                self.last_time = time.time()\n                self.current_image += self.current_image_add\n                if self.current_image >= 2:\n                    self.current_image_add = -1\n                if self.current_image <= 0:\n                    self.current_image_add = 1\n```", "```py\n    def animate(self):\n    ...\n        if self.x < 0:\n            if self.y != 0:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_left[2])\n         âžŠ else:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_left[self.current_image])\n        elif self.x > 0:\n            if self.y != 0:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_right[2])\n            else:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_right[self.current_image])\n```", "```py\n    def coords(self):\n        xy = self.game.canvas.coords(self.image)\n        self.coordinates.x1 = xy[0]\n        self.coordinates.y1 = xy[1]\n        self.coordinates.x2 = xy[0] + 27\n        self.coordinates.y2 = xy[1] + 30\n        return self.coordinates\n```", "```py\n    def move(self):\n        self.animate()\n        if self.y < 0:\n            self.jump_count += 1\n            if self.jump_count > 20:\n                self.y = 4\n        if self.y > 0:\n            self.jump_count -= 1\n```", "```py\n        co = self.coords()\n        left = True\n        right = True\n        top = True\n        bottom = True\n        falling = True\n```", "```py\n        if self.y > 0 and co.y2 >= self.game.canvas_height:\n            self.y = 0\n            bottom = False\n        elif self.y < 0 and co.y1 <= 0:\n            self.y = 0\n            top = False\n```", "```py\n        if self.x > 0 and co.x2 >= self.game.canvas_width:\n            self.x = 0\n            right = False\n        elif self.x < 0 and co.x1 <= 0:\n            self.x = 0\n            left = False\n```", "```py\n        for sprite in self.game.sprites:\n            if sprite == self:\n                continue\n            sprite_co = sprite.coords()\n            if top and self.y < 0 and collided_top(co, sprite_co):\n                self.y = -self.y\n                top = False\n```", "```py\n            if bottom and self.y > 0 and collided_bottom(self.y,\n                    co, sprite_co):\n                self.y = sprite_co.y1 - co.y2\n                if self.y < 0:\n                    self.y = 0\n                bottom = False\n                top = False\n```", "```py\n            if bottom and falling and self.y == 0 \\\n                    and co.y2 < self.game.canvas_height \\\n                    and collided_bottom(1, co, sprite_co):\n                falling = False\n```", "```py\n            if left and self.x < 0 and collided_left(co, sprite_co):\n                self.x = 0\n                left = False\n            if right and self.x > 0 and collided_right(co, sprite_co):\n                self.x = 0\n                right = False\n```", "```py\n        for sprite in self.game.sprites:\n            if sprite == self:\n                continue\n            sprite_co = sprite.coords()\n            if top and self.y < 0 and collided_top(co, sprite_co):\n                self.y = -self.y\n                top = False\n            if bottom and self.y > 0 and collided_bottom(self.y,\n                    co, sprite_co):\n                self.y = sprite_co.y1 - co.y2\n                if self.y < 0:\n                    self.y = 0\n                bottom = False\n                top = False\n            if bottom and falling and self.y == 0 \\\n                    and co.y2 < self.game.canvas_height \\\n                    and collided_bottom(1, co, sprite_co):\n                falling = False\n            if left and self.x < 0 and collided_left(co, sprite_co):\n                self.x = 0\n                left = False\n            if right and self.x > 0 and collided_right(co, sprite_co):\n                self.x = 0\n                right = False\n```", "```py\n        if falling and bottom and self.y == 0 \\\n                and co.y2 < self.game.canvas_height:\n            self.y = 4\n        self.game.canvas.move(self.image, self.x, self.y)\n```", "```py\nsf = StickFigureSprite(g)\ng.sprites.append(sf)\n```", "```py\nclass DoorSprite(Sprite):\n    def __init__(self, game, photo_image, x, y, width, height):\n        Sprite.__init__(self, game)\n        self.photo_image = photo_image\n        self.image = game.canvas.create_image(x, y, \n                image=self.photo_image, anchor='nw')\n        self.coordinates = Coords(x, y, x + (width / 2), y + height)\n        self.endgame = True\n```", "```py\n if left and self.x < 0 and collided_left(co, sprite_co):\n                self.x = 0\n                left = False\n                if sprite.endgame:\n                    self.game.running = False\n```", "```py\n            if right and self.x > 0 and collided_right(co, sprite_co):\n                self.x = 0\n                right = False\n                if sprite.endgame:\n                    self.game.running = False\n```", "```py\ng.sprites.append(platform7)\ng.sprites.append(platform8)\ng.sprites.append(platform9)\ng.sprites.append(platform10)\ndoor = DoorSprite(g, PhotoImage(file='door1.gif'), 45, 30, 40, 35)\ng.sprites.append(door)\nsf = StickFigureSprite(g)\ng.sprites.append(sf)\ng.mainloop()\n```", "```py\nfrom tkinter import *\nimport random\nimport time\n\nclass Coords:\n    def __init__(self, x1=0, y1=0, x2=0, y2=0):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\ndef within_x(co1, co2):\n    if (co1.x1 > co2.x1 and co1.x1 < co2.x2) \\\n            or (co1.x2 > co2.x1 and co1.x2 < co2.x2) \\\n            or (co2.x1 > co1.x1 and co2.x1 < co1.x2) \\\n            or (co2.x2 > co1.x1 and co2.x2 < co1.x2):\n        return True\n    else:\n        return False\n\ndef within_y(co1, co2):\n    if (co1.y1 > co2.y1 and co1.y1 < co2.y2) \\\n            or (co1.y2 > co2.y1 and co1.y2 < co2.y2) \\\n            or (co2.y1 > co1.y1 and co2.y1 < co1.y2) \\\n            or (co2.y2 > co1.y1 and co2.y2 < co1.y2):\n        return True\n    else:\n        return False\n\ndef collided_left(co1, co2):\n    if within_y(co1, co2):\n        if co1.x1 >= co2.x1 and co1.x1 <= co2.x2:\n            return True\n    return False\n\ndef collided_right(co1, co2):\n    if within_y(co1, co2):\n        if co1.x2 >= co2.x1 and co1.x2 <= co2.x2:\n            return True\n    return False\n\ndef collided_top(co1, co2):\n    if within_x(co1, co2):\n        if co1.y1 >= co2.y1 and co1.y1 <= co2.y2:\n            return True\n    return False\n\ndef collided_bottom(y, co1, co2):\n    if within_x(co1, co2):\n        y_calc = co1.y2 + y\n        if y_calc >= co2.y1 and y_calc <= co2.y2:\n            return True\n    return False\n\nclass Sprite:\n    def __init__(self, game):\n        self.game = game\n        self.endgame = False\n        self.coordinates = None\n    def move(self):\n        pass\n    def coords(self):\n        return self.coordinates\n\nclass PlatformSprite(Sprite):\n    def __init__(self, game, photo_image, x, y, width, height):\n        Sprite.__init__(self, game)\n        self.photo_image = photo_image\n        self.image = game.canvas.create_image(x, y, \n                image=self.photo_image, anchor='nw')\n        self.coordinates = Coords(x, y, x + width, y + height)\n\nclass StickFigureSprite(Sprite):\n    def __init__(self, game):\n        Sprite.__init__(self, game)\n        self.images_left = [\n            PhotoImage(file='figure-L1.gif'),\n            PhotoImage(file='figure-L2.gif'),\n            PhotoImage(file='figure-L3.gif')\n        ]\n        self.images_right = [\n            PhotoImage(file='figure-R1.gif'),\n            PhotoImage(file='figure-R2.gif'),\n            PhotoImage(file='figure-R3.gif')\n        ]\n        self.image = game.canvas.create_image(200, 470, \n                image=self.images_left[0], anchor='nw')\n        self.x = -2\n        self.y = 0\n        self.current_image = 0\n        self.current_image_add = 1\n        self.jump_count = 0\n        self.last_time = time.time()\n        self.coordinates = Coords()\n        game.canvas.bind_all('<KeyPress-Left>', self.turn_left)\n        game.canvas.bind_all('<KeyPress-Right>', self.turn_right)\n        game.canvas.bind_all('<space>', self.jump)\n\n    def turn_left(self, evt):\n        if self.y == 0:\n            self.x = -2\n\n    def turn_right(self, evt):\n        if self.y == 0:\n            self.x = 2\n\n    def jump(self, evt):\n        if self.y == 0:\n            self.y = -4\n            self.jump_count = 0\n\n    def animate(self):\n        if self.x != 0 and self.y == 0:\n            if time.time() - self.last_time > 0.1:\n                self.last_time = time.time()\n                self.current_image += self.current_image_add\n                if self.current_image >= 2:\n                    self.current_image_add = -1\n                if self.current_image <= 0:\n                    self.current_image_add = 1\n        if self.x < 0:\n            if self.y != 0:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_left[2])\n            else:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_left[self.current_image])\n        elif self.x > 0:\n            if self.y != 0:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_right[2])\n            else:\n                self.game.canvas.itemconfig(self.image, \n                        image=self.images_right[self.current_image])\n\n    def coords(self):\n        xy = self.game.canvas.coords(self.image)\n        self.coordinates.x1 = xy[0]\n        self.coordinates.y1 = xy[1]\n        self.coordinates.x2 = xy[0] + 27\n        self.coordinates.y2 = xy[1] + 30\n        return self.coordinates\n\n    def move(self):\n        self.animate()\n        if self.y < 0:\n            self.jump_count += 1\n            if self.jump_count > 20:\n                self.y = 4\n        if self.y > 0:\n            self.jump_count -= 1\n        co = self.coords()\n        left = True\n        right = True\n        top = True\n        bottom = True\n        falling = True\n        if self.y > 0 and co.y2 >= self.game.canvas_height:\n            self.y = 0\n            bottom = False\n        elif self.y < 0 and co.y1 <= 0:\n            self.y = 0\n            top = False\n        if self.x > 0 and co.x2 >= self.game.canvas_width:\n            self.x = 0\n            right = False\n        elif self.x < 0 and co.x1 <= 0:\n            self.x = 0\n            left = False\n\n        for sprite in self.game.sprites:\n            if sprite == self:\n                continue\n            sprite_co = sprite.coords()\n            if top and self.y < 0 and collided_top(co, sprite_co):\n                self.y = -self.y\n                top = False\n            if bottom and self.y > 0 and collided_bottom(self.y, \n                    co, sprite_co):\n                self.y = sprite_co.y1 - co.y2\n                if self.y < 0:\n                    self.y = 0\n                bottom = False\n                top = False\n            if bottom and falling and self.y == 0 \\\n                    and co.y2 < self.game.canvas_height \\\n                    and collided_bottom(1, co, sprite_co):\n                falling = False\n            if left and self.x < 0 and collided_left(co, sprite_co):\n                self.x = 0\n                left = False\n                if sprite.endgame:\n                    self.game.running = False\n            if right and self.x > 0 and collided_right(co, sprite_co):\n                self.x = 0\n                right = False\n                if sprite.endgame:\n                    self.game.running = False\n\n        if falling and bottom and self.y == 0 \\\n                and co.y2 < self.game.canvas_height:\n            self.y = 4\n        self.game.canvas.move(self.image, self.x, self.y)\n\nclass DoorSprite(Sprite):\n    def __init__(self, game, photo_image, x, y, width, height):\n        Sprite.__init__(self, game)\n        self.photo_image = photo_image\n        self.image = game.canvas.create_image(x, y, \n                image=self.photo_image, anchor='nw')\n        self.coordinates = Coords(x, y, x + (width / 2), y + height)\n        self.endgame = True\n\nclass Game:\n    def __init__(self):\n        self.tk = Tk()\n        self.tk.title('Mr. Stick Man Races for the Exit')\n        self.tk.resizable(0, 0)\n        self.tk.wm_attributes('-topmost', 1)\n        self.canvas = Canvas(self.tk, width=500, height=500, \n                             highlightthickness=0)\n        self.canvas.pack()\n        self.tk.update()\n        self.canvas_height = self.canvas.winfo_height()\n        self.canvas_width = self.canvas.winfo_width()\n        self.bg = PhotoImage(file='background.gif')\n        w = self.bg.width()\n        h = self.bg.height()\n        for x in range(0, 5):\n            for y in range(0, 5):\n                self.canvas.create_image(x * w, y * h, \n                        image=self.bg, anchor='nw')\n        self.sprites = []\n        self.running = True\n\n    def mainloop(self):\n        while True:\n            if self.running == True:\n                for sprite in self.sprites:\n                    sprite.move()\n            self.tk.update_idletasks()\n            self.tk.update()\n            time.sleep(0.01)\n\ng = Game()\nplatform1 = PlatformSprite(g, PhotoImage(file='platform1.gif'), \n                           0, 480, 100, 10)\nplatform2 = PlatformSprite(g, PhotoImage(file='platform1.gif'), \n                           150, 440, 100, 10)\nplatform3 = PlatformSprite(g, PhotoImage(file='platform1.gif'), \n                           300, 400, 100, 10)\nplatform4 = PlatformSprite(g, PhotoImage(file='platform1.gif'), \n                           300, 160, 100, 10)\nplatform5 = PlatformSprite(g, PhotoImage(file='platform2.gif'), \n                           175, 350, 66, 10)\nplatform6 = PlatformSprite(g, PhotoImage(file='platform2.gif'), \n                           50, 300, 66, 10)\nplatform7 = PlatformSprite(g, PhotoImage(file='platform2.gif'), \n                           170, 120, 66, 10)\nplatform8 = PlatformSprite(g, PhotoImage(file='platform2.gif'), \n                           45, 60, 66, 10)\nplatform9 = PlatformSprite(g, PhotoImage(file='platform3.gif'), \n                           170, 250, 32, 10)\nplatform10 = PlatformSprite(g, PhotoImage(file='platform3.gif'), \n                            230, 200, 32, 10)\ng.sprites.append(platform1)\ng.sprites.append(platform2)\ng.sprites.append(platform3)\ng.sprites.append(platform4)\ng.sprites.append(platform5)\ng.sprites.append(platform6)\ng.sprites.append(platform7)\ng.sprites.append(platform8)\ng.sprites.append(platform9)\ng.sprites.append(platform10)\ndoor = DoorSprite(g, PhotoImage(file='door1.gif'), 45, 30, 40, 35)\ng.sprites.append(door)\nsf = StickFigureSprite(g)\ng.sprites.append(sf)\ng.mainloop()\n```"]