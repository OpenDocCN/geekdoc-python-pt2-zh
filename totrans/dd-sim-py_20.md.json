["```py\nBOUND = 10**5\n```", "```py\ndef collatz(n):\n    steps = 0\n    while n > 1:\n        if n % 2:\n            n = n * 3 + 1\n        else:\n            n = n / 2\n steps += 1\n    return steps\n```", "```py\ndef length_counter(target):\n    count = 0\n    for i in range(2, BOUND):\n        if collatz(i) == target:\n            count += 1\n    return count\n```", "```py\ndef get_input(prompt):\n    while True:\n        n = input(prompt)\n        try:\n            n = int(n)\n        except ValueError:\n            print(\"Value must be an integer.\")\n            continue\n        if n <= 0:\n            print(\"Value must be positive.\")\n        else:\n            return n\n```", "```py\ndef main():\n    print(\"Collatz Sequence Counter\")\n\n    target = get_input(\"Collatz sequence length to search for: \")\n    print(f\"Searching in range 1-{BOUND}...\")\n\n count = length_counter(target)\n    guess = get_input(\"How many times do you think it will appear? \")\n\n    if guess == count:\n        print(\"Exactly right! I'm amazed.\")\n    elif abs(guess - count) < 100:\n        print(f\"You're close! It was {count}.\")\n    else:\n        print(f\"Nope. It was {count}.\")\n```", "```py\nif __name__ == \"__main__\":\n    main()\n```", "```py\nCollatz Sequence Counter\nCollatz sequence length to search for: `42`\nSearching in range 1-100000...\n```", "```py\nHow many times do you think it will appear? `456`\nNope. It was 782.\n```", "```py\nimport asyncio\n\nBOUND = 10**5\n```", "```py\nasync def some_function():\n    # ...\n```", "```py\nawait some_function()\n```", "```py\ndef collatz(start):\n    steps = 0\n    n = start\n    while n > 1:\n        if n % 2:\n            n = n * 3 + 1\n        else:\n            n = n / 2\n        steps += 1\n    return steps\n```", "```py\n**async** def length_counter(target):\n    count = 0\n    for i in range(2, BOUND):\n        if collatz(i) == target:\n            count += 1\n        **await asyncio.sleep(0)**\n    return count\n```", "```py\n**async** def get_input(prompt):\n    while True:\n        n = input(prompt)\n        try:\n            n = int(n)\n        except ValueError:\n            print(\"Value must be an integer.\")\n            continue\n        if n <= 0:\n            print(\"Value must be positive.\")\n        else:\n            return n\n```", "```py\nf = length_counter(100)\nwhile True:\n    try:\n        f.send(None)\n    except StopIteration as e:\n        print(e)  # prints '255'\n        break\n```", "```py\n**async** def main():\n    print(\"Collatz Sequence Counter\")\n\n    target = **await** get_input(\"Collatz sequence length to search for: \")\n    print(f\"Searching in range 1-{BOUND}\")\n\n    **length_counter_task = asyncio.create_task(length_counter(target))**\n **guess_task = asyncio.create_task(**\n **get_input(\"How many times do you think it will appear? \")**\n **)**\n ****count = await length_counter_task**\n **guess = await guess_task**\n\n    if guess == count:\n        print(\"Exactly right! I'm amazed.\")\n    elif abs(guess-count) < 100:\n        print(f\"You're close! It was {count}.\")\n    else:\n        print(f\"Nope. It was {count}.\")**\n```", "```py\nif __name__ == \"__main__\":\n    **loop =** ❶ **asyncio.get_event_loop()**\n  ❷ **loop.run_until_complete(main())**\n```", "```py\nif __name__ == \"__main__\":\n    **asyncio.run(main())**\n```", "```py\n n = input(prompt)\n```", "```py\nimport asyncio\n**from aioconsole import ainput**\n\nBOUND = 10**5\n```", "```py\nasync def get_input(prompt):\n    while True:\n        n = **await ainput**(prompt)\n        try:\n            n = int(n)\n        except ValueError:\n            print(\"Value must be an integer.\")\n            continue\n if n <= 0:\n            print(\"Value must be positive.\")\n        else:\n            return n\n```", "```py\nasyncio.run(main())\n```", "```py\n target = await get_input(\"Collatz sequence length to search for: \")\n```", "```py\n guess_task = asyncio.create_task(\n        get_input(\"How many times do you think it will appear? \")\n    )\n```", "```py\n length_counter_task = asyncio.create_task(length_counter(target))\n```", "```py\n count = await length_counter_task\n```", "```py\n n = await ainput(prompt)\n```", "```py\nguess = await guess_task\n```", "```py\nasync def main():\n    print(\"Collatz Sequence Counter\")\n\n    target = await get_input(\"Collatz sequence length to search for: \")\n    print(f\"Searching in range 1-{BOUND}\")\n\n    **(guess, count) = await asyncio.gather(**\n        **get_input(\"How many times do you think it will appear? \"),**\n        **length_counter(target)**\n    **)**\n\n    if guess == count:\n        print(\"Exactly right! I'm amazed.\")\n    elif abs(guess-count) < 100:\n        print(f\"You're close! It was {count}.\")\n    else:\n        print(f\"Nope. It was {count}.\")\n```", "```py\nimport asyncio\nfrom aioconsole import ainput\n\nBOUND = 10**5\n\nclass Collatz:\n\n    def __init__(self):\n        self.start = 2\n```", "```py\n async def count_steps(self, start_value):\n        steps = 0\n        n = start_value\n        while n > 1:\n            if n % 2:\n                n = n * 3 + 1\n            else:\n                n = n // 2\n            steps += 1\n        return steps\n```", "```py\n def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        steps = await self.count_steps(self.start)\n        self.start += 1\n        if self.start == BOUND:\n            raise StopAsyncIteration\n        return steps\n```", "```py\nasync def length_counter(target):\n    count = 0\n    async for steps in ❶ Collatz():\n        if steps == target:\n            count += 1\n    return count\n```", "```py\nasync def length_counter(target):\n    count = 0\n    **iter = Collatz().__aiter__()**\n **running = True**\n **while running:**\n **try:**\n **steps = await iter.__anext__()**\n **except StopAsyncIteration:**\n **running = False**\n **else:**\n **if steps == target:**\n **count += 1**\n    return count\n```"]