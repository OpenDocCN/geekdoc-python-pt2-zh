["```py\n*dog.py*\nclass Dog:\n    def __init__(self,name):\n        self.name = name\n```", "```py\nd = Dog('Fido')\n```", "```py\n>>> d.name\n'Fido'\n```", "```py\n>>> b = Dog('Bettisa')\n>>> b.name\n'Bettisa'\n```", "```py\n*dog.py*\nclass Dog:\n    def __init__(self,name):\n        self.name = name\n\n    def bark(self):\n        print(\"Woof!\")\n\nd = Dog('Fido')\n```", "```py\n>>> d.bark()\nWoof!\n```", "```py\n*BouncingBall.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(0) #black\n    ellipse(300,300,20,20)\n```", "```py\n*BouncingBall.pyde*\nxcor = 300\nycor = 300\n\ndef setup():\n    size(600,600)\n```", "```py\n*BouncingBall.pyde*\nxcor = 300\nycor = 300\n\ndef setup():\n    size(600,600)\n\ndef draw():\n ➊ global xcor, ycor\n    background(0) #black\n    xcor += 1\n    ycor += 1\n    ellipse(xcor,ycor,20,20)\n```", "```py\n*BouncingBall.pyde*\nxcor = 300\nycor = 300\nxvel = 1\nyvel = 2\n\ndef setup():\n    size(600,600)\n\ndef draw():\n    global xcor,ycor,xvel,yvel\n    background(0) #black\n    xcor += xvel\n    ycor += yvel\n    #if the ball reaches a wall, switch direction.\n    if xcor > width or xcor < 0:\n        xvel = -xvel\n    if ycor > height or ycor < 0:\n        yvel = -yvel\n    ellipse(xcor,ycor,20,20)\n```", "```py\n#ball1:\nball1x = random(width)\nball1y = random(height)\nball1xvel = random(-2,2)\nball1tvel = random(-2,2)\n\n#ball2:\nball2x = random(width)\nball2y = random(height)\nball2xvel = random(-2,2)\nball2tvel = random(-2,2)\n\n#ball3:\nball3x = random(width)\nball3y = random(height)\nball3xvel = random(-2,2)\nball3tvel = random(-2,2)\n\n#update ball1:\nball1x += ball1xvel\nball1y += ball1yvel\nellipse(ball1x,ball1y,20,20)\n\n#update ball2:\nball2x += ball2xvel\nball2y += ball2yvel\nellipse(ball2x,ball2y,20,20)\n\n#update ball3:\nball3x += ball3xvel\nball3y += ball3yvel\nellipse(ball3x,ball3y,20,20)\n```", "```py\n*BouncingBall.pyde*\nballList=[] #empty list to put the balls in\n\nclass Ball:\n    def __init__(self,x,y):\n        '''How to initialize a Ball'''\n        self.xcor = x\n        self.ycor = y\n        self.xvel = random(-2,2)\n        self.yvel = random(-2,2)\n```", "```py\nxcor = 300\nycor = 300\nxvel = 1\nyvel = 2\n```", "```py\nBall(100,200)\n```", "```py\n*BouncingBall.pyde*\nballList=[] #empty list to put the balls in\n\nclass Ball:\n    def __init__(self,x,y):\n        '''How to initialize a Ball'''\n        self.xcor = x\n        self.ycor = y\n        self.xvel = random(-2,2)\n        self.yvel = random(-2,2)\n\n    def update(self):\n        self.xcor += self.xvel\n        self.ycor += self.yvel\n        #if the ball reaches a wall, switch direction\n        if self.xcor > width or self.xcor < 0:\n            self.xvel = -self.xvel\n        if self.ycor > height or self.ycor < 0:\n            self.yvel = -self.yvel\n        ellipse(self.xcor,self.ycor,20,20)\n```", "```py\ndef setup():\n    size(600,600)\n    for i in range(3):\n        ballList.append(Ball(random(width),\n                             random(height)))\n```", "```py\n*BouncingBall.pyde*\ndef draw():\n    background(0) #black\n    for ball in ballList:\n        ball.update()\n```", "```py\n*BouncingBall.pyde*\nclass Ball:\n    def __init__(self,x,y):\n        '''How to initialize a Ball'''\n        self.xcor = x\n        self.ycor = y\n        self.xvel = random(-2,2)\n        self.yvel = random(-2,2)\n        self.col = color(random(255),\n                         random(255),\n                         random(255))\n```", "```py\n        fill(self.col)\n        ellipse(self.xcor,self.ycor,20,20)\n```", "```py\n*SheepAndGrass.pyde*\nclass Sheep:\n    def __init__(self,x,y):\n        self.x = x #x-position\n        self.y = y #y-position\n        self.sz = 10 #size\n\n    def update(self):\n        ellipse(self.x,self.y,self.sz,self.sz)\n```", "```py\ndef setup():\n    global shawn\n    size(600,600)\n    #create a Sheep object called shawn at (300,200)\n    shawn = Sheep(300,200)\n\ndef draw():\n    background(255)\n    shawn.update()\n```", "```py\n    *SheepAndGrass.pyde*\n    def update(self):\n        #make sheep walk randomly\n        move = 10 #the maximum it can move in any direction\n        self.x += random(-move, move)\n        self.y += random(-move, move)\n        fill(255) #white\n        ellipse(self.x,self.y,self.sz,self.sz)\n```", "```py\n*SheepAndGrass.pyde*\nclass Sheep:\n    def __init__(self,x,y):\n        self.x = x #x-position\n        self.y = y #y-position\n        self.sz = 10 #size\n\n    def update(self):\n        #make sheep walk randomly\n        move = 10 #the maximum it can move in any direction\n        self.x += random(-move, move)\n        self.y += random(-move, move)\n        fill(255) #white\n        ellipse(self.x,self.y,self.sz,self.sz)\n\nsheepList = [] #list to store sheep\n\ndef setup():\n    size(600,600)\n    for i in range(3):\n        sheepList.append(Sheep(random(width),\n                               random(height)))\n\ndef draw():\n    background(255)\n    for sheep in sheepList:\n        sheep.update()\n```", "```py\nclass Sheep:\n    def __init__(self,x,y):\n        self.x = x #x-position\n        self.y = y #y-position\n        self.sz = 10 #size\n        self.energy = 20 #energy level\n\n    def update(self):\n        #make sheep walk randomly\n        move = 1\n        self.energy -= 1 #walking costs energy\n        if sheep.energy <= 0:\n            sheepList.remove(self)\n        self.x += random(-move, move)\n        self.y += random(-move, move)\n        fill(255) #white\n        ellipse(self.x,self.y,self.sz,self.sz)\n```", "```py\nWHITE = color(255)\nBROWN = color(102,51,0)\nRED = color(255,0,0)\nGREEN = color(0,102,0)\nYELLOW = color(255,255,0)\nPURPLE = color(102,0,204)\n```", "```py\nclass Grass:\n    def __init__(self,x,y,sz):\n        self.x = x\n        self.y = y\n        self.energy = 5 #energy from eating this patch\n        self.eaten = False #hasn't been eaten yet\n        self.sz = sz\n\n    def update(self):\n        fill(GREEN)\n        rect(self.x,self.y,self.sz,self.sz)\n```", "```py\nsheepList = [] #list to store sheep\ngrassList = [] #list to store grass\npatchSize = 10 #size of each patch of grass\n```", "```py\ndef setup():\n    global patchSize\n    size(600,600)\n    #create the sheep\n    for i in range(3):\n        sheepList.append(Sheep(random(width),\n                               random(height)))\n    #create the grass:\n    for x in range(0,width,patchSize):\n        for y in range(0,height,patchSize):\n            grassList.append(Grass(x,y,patchSize))\n```", "```py\n*SheepAndGrass.pyde*\ndef draw():\n    background(255)\n    #update the grass first\n    for grass in grassList:\n        grass.update()\n    #then the sheep\n    for sheep in sheepList:\n        sheep.update()\n```", "```py\ndef setup():\n    global patchSize\n    size(600,600)\n    noStroke()\n```", "```py\n    def update(self):\n        if self.eaten:\n            fill(BROWN)\n        else:\n            fill(GREEN)\n        rect(self.x,self.y,self.sz,self.sz)\n```", "```py\nrows_of_grass = height/patchSize\n```", "```py\n        *SheepAndGrass.pyde*\n        self.x += random(-move, move)\n        self.y += random(-move, move)\n        #\"wrap\" the world Asteroids-style\n     ➊ if self.x > width:\n            self.x %= width\n        if self.y > height:\n            self.y %= height\n        if self.x < 0:\n            self.x += width\n        if self.y < 0:\n            self.y += height\n        #find the patch of grass you're on in the grassList:\n     ➋ xscl = int(self.x / patchSize)\n        yscl = int(self.y / patchSize)\n     ➌ grass = grassList[xscl * rows_of_grass + yscl]\n        if not grass.eaten:\n            self.energy += grass.energy\n            grass.eaten = True\n```", "```py\n    #create the sheep\n    for i in range(20):\n        sheepList.append(Sheep(random(width),\n                               random(height)))\n```", "```py\nYELLOW = color(255,255,0)\nPURPLE = color(102,0,204)\ncolorList = [WHITE,RED,YELLOW,PURPLE]\n```", "```py\nclass Sheep:\n    def __init__(self,x,y,col):\n        self.x = x #x-position\n        self.y = y #y-position\n        self.sz = 10 #size\n        self.energy = 20\n        self.col = col\n```", "```py\n        fill(self.col) #its own color\n        ellipse(self.x,self.y,self.sz,self.sz)\n```", "```py\nfrom random import choice\n```", "```py\nchoice(colorList)\n```", "```py\ndef setup():\n    size(600,600)\n    noStroke()\n    #create the sheep\n    for i in range(20):\n        sheepList.append(Sheep(random(width),\n                               random(height),\n                               choice(colorList)))\n```", "```py\nif self.energy <= 0:\n    sheepList.remove(self)\nif self.energy >= 50:\n    self.energy -= 30 #giving birth takes energy\n    #add another sheep to the list\n    sheepList.append(Sheep(self.x,self.y,self.col))\n```", "```py\n    def update(self):\n        if self.eaten:\n            if random(100) < 5:\n                self.eaten = False\n            else:\n                fill(BROWN)\n        else:\n            fill(GREEN)\n        rect(self.x,self.y,self.sz,self.sz)\n```", "```py\nclass Grass:\n    def __init__(self,x,y,sz):\n        self.x = x\n        self.y = y\n        self.energy = 2 #energy from eating this patch\n        self.eaten = False #hasn't been eaten yet\n        self.sz = sz\n```", "```py\n    def update(self):\n        #make sheep walk randomly\n move = 5 #the maximum it can move in any direction\n        if self.col == PURPLE:\n            move = 7\n        self.energy -= 1\n```"]