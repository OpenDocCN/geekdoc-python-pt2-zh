["```py\n[2,4,7]\n['Bob', 'John', 'Will']\n```", "```py\nregions = ['Asia', 'America', 'Europe']\n```", "```py\nregions = []\n```", "```py\nmy_list = []\n```", "```py\nmy_list.append('Pay bills')\nmy_list.append('Tidy up')\nmy_list.append('Walk the dog')\nmy_list.append('Cook dinner')\n```", "```py\n['Pay bills', 'Tidy up', 'Walk the dog', 'Cook dinner']\n```", "```py\nprint(my_list[0])\n```", "```py\nPay bills\n```", "```py\ni = my_list.index('Cook dinner')\n```", "```py\nmy_list.insert(i, 'Go to the pharmacy')\n```", "```py\n['Pay bills', 'Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner']\n```", "```py\nprint(my_list.count('Tidy up'))\n```", "```py\nprint(my_list[0:3])\n```", "```py\n['Pay bills', 'Tidy up', 'Walk the dog']\n```", "```py\nprint(my_list[:3])\n```", "```py\nprint(my_list[3:])\n```", "```py\n['Go to the pharmacy', 'Cook dinner']\n```", "```py\nprint(my_list[:])\n```", "```py\n['Pay bills', 'Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner']\n```", "```py\nmy_list[len(my_list):] = ['Mow the lawn', 'Water plants']\n```", "```py\n['Pay bills', 'Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner',\n 'Mow the lawn', 'Water plants']\n```", "```py\ndel my_list[5:]\n```", "```py\n['Pay bills', 'Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner']\n```", "```py\nfrom collections import deque\nqueue = deque(my_list)\nqueue.append('Wash the car')\nprint(queue.popleft(), ' - Done!')\nmy_list_upd = list(queue)\n```", "```py\nPay bills - Done!\n```", "```py\n['Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner', 'Wash the car']\n```", "```py\nmy_list = ['Pay bills', 'Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner']\nstack = []\nfor task in my_list:\n  stack.append(task)\nwhile stack:\n  print(stack.pop(), ' - Done!'))\nprint('\\nThe stack is empty')\n```", "```py\nCook dinner - Done!\nGo to the pharmacy - Done!\nWalk the dog - Done!\nTidy up - Done!\nPay bills - Done!\n\nThe stack is empty\n```", "```py\n$ **pip install -U spacy**\n$ **python -m spacy download en_core_web_sm**\n```", "```py\nimport spacy\ntxt = 'List is a ubiquitous data structure in the Python programming language.'\n\nnlp = spacy.load('en_core_web_sm')\ndoc = nlp(txt)\nstk = []\nfor w in doc:\n  if w.pos_ == 'NOUN' or w.pos_ == 'PROPN': ❶\n    stk.append(w.text)\n  elif (w.head.pos_ == 'NOUN' or w.head.pos_ == 'PROPN') and (w in w.head.lefts): ❷\n    stk.append(w.text)\n  elif stk: ❸\n    chunk = ''\n    while stk:\n      chunk = stk.pop() + ' ' + chunk ❹\n    print(chunk.strip())\n```", "```py\nList\na ubiquitous data structure\nthe Python programming language.\n```", "```py\ntxt = 'List is a ubiquitous data structure in the Python programming language.'\nimport spacy\nnlp = spacy.load('en')\ndoc = nlp(txt)\nfor t in doc:\n  print(t.text, t.head.text)\n```", "```py\nList is arguably the most useful type in the Python programming language.\n```", "```py\n['List', 0, 0, 'the', 'most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n```", "```py\ntxt = 'List is arguably the most useful type in the Python\n                                      programming language.'\nimport spacy\nnlp = spacy.load('en')\ndoc = nlp(txt)\n❶ head_lefts = [t.text if t in t.head.lefts else 0 for t in doc]\nprint(head_lefts)\n```", "```py\n['List', 0, 0, 'the', 'most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n```", "```py\nfor w in doc:\n  head_lefts = [t.text if t in t.head.lefts else 0 for t in ❶ doc[w.i:]]\n  print(head_lefts)\n```", "```py\n['List', 0, 0, 'the', 'most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n[0, 0, 'the', 'most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n[0, 'the', 'most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n['the', 'most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n['most', 'useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n['useful', 0, 0, 'the', 'Python', 'programming', 0, 0]\n[0, 0, 'the', 'Python', 'programming', 0, 0]\n[0, 'the', 'Python', 'programming', 0, 0]\n['the', 'Python', 'programming', 0, 0]\n['Python', 'programming', 0, 0]\n['programming', 0, 0]\n[0, 0]\n[0]\n```", "```py\nfor w in doc:\n  head_lefts = [t.text if t in t.head.lefts else 0 for t in doc[w.i:]]\n❶ i0 = head_lefts.index(0)\n  if i0 > 0:\n  ❷ noun = [1 if t.pos_== 'NOUN' or t.pos_== 'PROPN' else 0 for t in\n                   reversed(doc[w.i:w.i+i0 +1])]\n    try:\n    ❸ i1 = noun.index(1)+1\n    except ValueError:\n      pass\n    print(head_lefts[:i0 +1])\n  ❹ print(doc[w.i+i0 +1-i1])\n```", "```py\n['List', 0]\nList\n['the', 'most', 'useful', 0]\ntype\n['most', 'useful', 0]\ntype\n['useful', 0]\ntype\n['the', 'Python', 'programming', 0]\nlanguage\n['Python', 'programming', 0]\nlanguage\n['programming', 0]\nlanguage\n```", "```py\ntxt = 'List is arguably the most useful type in the Python\n                                      programming language.'\nimport spacy\nnlp = spacy.load('en')\ndoc = nlp(txt)\nstk = []\n❶ for w in doc:\n❷ head_lefts = [1 if t in t.head.lefts else 0 for t in doc[w.i:]]\n  i0 = 0\n  try: i0 = head_lefts.index(0)\n  except ValueError: pass\n  i1 = 0\n  if i0 > 0:\n    noun = [1 if t.pos_== 'NOUN' or t.pos_== 'PROPN' else 0 for t in \n                   reversed(doc[w.i:w.i+i0 +1])]\n    try: i1 = noun.index(1)+1  \n    except ValueError: pass\n  if w.pos_ == 'NOUN' or w.pos_ == 'PROPN':\n  ❸ stk.append(w.text)\n  elif (i1 > 0):\n  ❹ stk.append(w.text)\n  elif stk:\n    chunk = ''\n    while stk:\n ❺ chunk = stk.pop() + ' ' + chunk\n    print(chunk.strip())\n```", "```py\nList\nthe most useful type\nthe Python programming language\n```", "```py\n('Ford', 'Mustang', 1964)\n```", "```py\n[('8:00','Pay bills'), ('8:30','Tidy up'), ('9:30','Walk the dog'),\n ('10:00','Go to the pharmacy'), ('10:30','Cook dinner')]\n```", "```py\ntask_list = ['Pay bills', 'Tidy up', 'Walk the dog', 'Go to the pharmacy', 'Cook dinner']\ntm_list = ['8:00', '8:30', '9:30', '10:00', '10:30']\n```", "```py\nsched_list = [(tm, task) for tm, task in zip(tm_list, task_list)]\n```", "```py\nprint(sched_list[1][0])\n```", "```py\n8:30\n```", "```py\nsched_list[1][0] = '9:00'\n```", "```py\nTypeError: 'tuple' object does not support item assignment\n```", "```py\n{'Make': 'Ford', 'Model': 'Mustang', 'Year': 1964}\n```", "```py\ndict_list = [\n  {'time': '8:00', 'name': 'Pay bills'},\n  {'time': '8:30', 'name': 'Tidy up'},\n  {'time': '9:30', 'name': 'Walk the dog'},\n  {'time': '10:00', 'name': 'Go to the pharmacy'},\n  {'time': '10:30', 'name': 'Cook dinner'}\n]\n```", "```py\ndict_list[1]['time'] = '9:00'\n```", "```py\ncar = {\n  \"brand\": \"Volkswagen\",\n  \"style\": \"Sedan\",\n  \"model\": \"Jetta\"\n}\n```", "```py\nprint(car.setdefault(\"model\", \"Passat\"))\n```", "```py\nJetta\n```", "```py\nprint(car.setdefault(\"year\", 2022))\n```", "```py\n2022\n```", "```py\nprint(car)\n```", "```py\n{\n  \"brand\": \"Volkswagen\",\n  \"style\": \"Sedan\",\n  \"model\": \"Jetta\",\n  \"year\": 2022\n}\n```", "```py\ntxt = '''Python is one of the most promising programming languages today. Due to the simplicity of Python syntax, many researchers and scientists prefer Python over many other languages.'''\n```", "```py\ntxt = txt.replace('.', '').replace(',', '')\n```", "```py\nlst = txt.split()\nprint(lst)\n```", "```py\n['Python', 'is', 'one', 'of', 'the', 'most', 'promising', 'programming',\n 'languages', 'today', 'Due', 'to', 'the', 'simplicity', 'of', 'Python',\n 'syntax', 'many', 'researchers', 'and', 'scientists', 'prefer', 'Python',\n 'over', 'many', 'other', 'languages']\n```", "```py\ndct = {}\nfor w in lst:\n  c = dct.setdefault(w,0)\n  dct[w] += 1\n```", "```py\ndct_sorted = dict(sorted(dct.items(), key=lambda x: x[1], reverse=True))\nprint(dct_sorted)\n```", "```py\n{'Python': 3, 'of': 2, 'the': 2, 'languages': 2, 'many': 2, 'is': 1, 'one': 1,\n 'most': 1, 'promising': 1, 'programming': 1, 'today': 1, 'Due': 1, 'to': 1,\n 'simplicity': 1, 'syntax': 1, 'researchers': 1, 'and': 1, 'scientists': 1,\n 'prefer': 1, 'over': 1, 'other': 1}\n```", "```py\nd = { \"PONumber\"             : 2608,\n      \"ShippingInstructions\" : {\"name\"   : \"John Silver\",\n                                \"Address\": {  \"street\"  : \"426 Light Street\",\n                                              \"city\"    : \"South San Francisco\",\n                                              \"state\"   : \"CA\",\n                                              \"zipCode\" : 99237,\n                                              \"country\" : \"United States of America\" },\n                                 \"Phone\" : [ { \"type\" : \"Office\", \"number\" : \"809-123-9309\" },\n                                             { \"type\" : \"Mobile\", \"number\" : \"417-123-4567\" }\n                                           ] \n                               } \n    }\n```", "```py\nimport json\nwith open(\"po.json\", \"w\") as outfile:\n  json.dump(d, outfile)\n```", "```py\nwith open(\"po.json\",) as fp:\n    d = json.load(fp) \n```", "```py\n{'London', 'New York', 'Paris'}\n```", "```py\nlst = ['John Silver', 'Tim Jemison', 'John Silver', 'Maya Smith']\nlst = list(set(lst))\nprint(lst)\n```", "```py\n['Maya Smith', 'Tim Jemison', 'John Silver']\n```", "```py\nlst = ['John Silver', 'Tim Jemison', 'John Silver', 'Maya Smith']\nlst = list(sorted(set(lst), key=lst.index))\n```", "```py\n['John Silver', 'Tim Jemison', 'Maya Smith']\n```", "```py\nphoto1_tags = {'coffee', 'breakfast', 'drink', 'table', 'tableware', 'cup', 'food'}\nphoto2_tags = {'food', 'dish', 'meat', 'meal', 'tableware', 'dinner', 'vegetable'}\nintersection = photo1_tags.intersection(photo2_tags)\nif len(intersection) >= 2:\n  print(\"The photos contain similar objects.\")\n```"]