["```py\nThe firm earned $1.5 million in 2017.\n```", "```py\n>>> import spacy\n\n>>> nlp = spacy.load('en')\n\n>>> doc = nlp(u\"The firm earned $1.5 million in 2017.\")\n\n>>> for token in doc:\n\n...   print(token.text, ➊token.pos_, ➋spacy.explain(token.pos_))\n\n...\n```", "```py\n\nThe     DET   determiner\n\nfirm    NOUN  noun\n\nearned  VERB  verb\n\n$       SYM   symbol\n\n1.5     NUM   numeral\n\nmillion NUM   numeral\n\nin      ADP   adposition\n\n2017    NUM   numeral\n\n.       PUNCT punctuation\n```", "```py\n>>> for token in doc:\n\n...   print(token.text, token.pos_, token.tag_, spacy.explain(token.tag_))\n```", "```py\n\nThe     DET   DT  determiner\n\nfirm    NOUN  NN  noun, singular\n\nearned  VERB  VBD verb, past tense\n\n$       SYM   $   symbol, currency\n\n1.5     NUM   CD  cardinal number\n\nmillion NUM   CD  cardinal number\n\nin      ADP   IN  conjunction, subordinating or preposition\n\n2017    NUM   CD  cardinal number\n\n.       PUNCT .   punctuation mark, sentence closer\n```", "```py\n   import spacy\n\n   nlp = spacy.load('en')\n\n   doc = nlp(u\"The firm earned $1.5 million in 2017.\")\n\n   phrase = ''\n\n➊ for token in doc:\n\n   ➋ if token.tag_ == '$':\n\n         phrase = token.text\n\n         i = token.i+1\n\n      ➌ while doc[i].tag_ == 'CD':\n\n             phrase += doc[i].text + ' '\n\n             i += 1\n\n      ➍ break\n\nphrase = phrase[:-1]\n\nprint(phrase)\n```", "```py\n$1.5 million\n```", "```py\nI can promise it is worth your time.\n```", "```py\n>>> doc = nlp(u\"I can promise it is worth your time.\")\n\n>>> for token in doc:\n\n...   print(token.text, token.pos_, token.tag_)\n\n...\n```", "```py\n\nI       PRON PRP\n\ncan     VERB MD\n\npromise VERB VB\n\nit      PRON PRP\n\nis      VERB VBZ\n\nworth   ADJ  JJ\n\nyour    ADJ  PRP$\n\ntime    NOUN NN\n\n.      PUNCT .\n```", "```py\nCan you really promise it is worth my time?\n```", "```py\n  import spacy\n\n  nlp = spacy.load('en')\n\n  doc = nlp(u\"I can promise it is worth your time.\")\n\n  sent = ''\n\n  for i,token in enumerate(doc):\n\n➊ if token.tag_ == 'PRP' and doc[i+1].tag_ == 'MD' and doc[i+2].tag_ == 'VB':\n\n    ➋ sent = doc[i+1].text.capitalize() + ' ' + doc[i].text\n\n       sent = sent + ' ' + ➌doc[i+2:].text\n\n    ➍ break\n\n #By now, you should have: 'Can I promise it is worth your time.'\n\n   #Retokenization\n\n➎ doc=nlp(sent)\n\n   for i,token in enumerate(doc):\n\n ➏ if token.tag_ == 'PRP' and token.text == 'I':\n\n        sent = doc[:i].text + ' you ' + doc[i+1:].text\n\n        break\n\n #By now, you should have: 'Can you promise it is worth your time.'\n\n doc=nlp(sent)\n\n for i,token in enumerate(doc):\n\n➐ if token.tag_ == 'PRP$' and token.text == 'your':\n\n       sent = doc[:i].text + ' my ' + doc[i+1:].text\n\n       break\n\n #By now, you should have: 'Can you promise it is worth my time.' \n\n doc=nlp(sent)\n\n for i,token in enumerate(doc):\n\n   if token.tag_ == 'VB':\n\n    ➑ sent = doc[:i].text + ' really ' + doc[i:].text\n\n      break\n\n #By now, you should have: 'Can you really promise it is worth my time.'\n\n doc=nlp(sent)\n\n➒ sent = doc[:len(doc)-1].text + '?'\n\n #Finally, you should have: 'Can you really promise it is worth my time?'\n\n print(sent)\n```", "```py\nCan you really promise it is worth my time?\n```", "```py\n>>> doc = nlp(u\"I can promise it is worth your time.\")\n\n>>> for token in doc:\n\n...   print(token.text, token.pos_, token.tag_, token.dep_, spacy.explain(token.dep_))\n```", "```py\nI       PRON  PRP  nsubj     nominal subject\n\ncan     VERB  MD   aux       auxiliary\n\npromise VERB  VB   ROOT      None\n\nit      PRON  PRP  nsubj     nominal subject\n\nis      VERB  VBZ  ccomp     clausal complement\n\nworth   ADJ   JJ   acomp     adjectival complement\n\nyour    ADJ   PRP$ poss      possession modifier\n\ntime    NOUN  NN   npadvmod  noun phrase as adverbial modifier\n\n.       PUNCT .    punct     punctuation\n```", "```py\nI     PRON  PRP  nsubj  nominal subject\n\nknow  VERB  VBP  ROOT   None\n\nyou   PRON  PRP  dobj   direct object\n\n.     PUNCT .    punct  punctuation\n\nYou   PRON  PRP  nsubj  nominal subject\n\nknow  VERB  VBP  ROOT   None\n\nme    PRON  PRP  dobj   direct object\n\n.     PUNCT .    Punct  punctuation\n```", "```py\nUser: I want an apple.\n\nBot: Do you want a red apple?\n\nUser: I want a green apple.\n\nBot: Why do you want a green one?\n```", "```py\nimport spacy\n\nimport sys\n```", "```py\n def find_chunk(doc):\n\n   chunk = ''\n\n➊ for i,token in enumerate(doc):\n\n  ➋ if token.dep_ == 'dobj':\n\n     ➌ shift = len([w for w in token.children])\n\n     ➍ #print([w for w in token.children])\n\n     ➎ chunk = doc[i-shift:i+1]\n\n        break\n\n return chunk\n```", "```py\n def determine_question_type(chunk):\n\n➊ question_type = 'yesno'\n\n   for token in chunk:\n\n  ➋ if token.dep_ == 'amod':\n\n    ➌ question_type = 'info'\n\n   return question_type\n```", "```py\n\ndef generate_question(doc, question_type):\n\n  sent = ''\n\n  for i,token in enumerate(doc):\n\n    if token.tag_ == 'PRP' and doc[i+1].tag_ == 'VBP':\n\n     sent = 'do ' + doc[i].text\n\n     sent = sent + ' ' + doc[i+1:].text\n\n     break\n\n  doc=nlp(sent)\n\n  for i,token in enumerate(doc):\n\n    if token.tag_ == 'PRP' and token.text == 'I':\n\n     sent = doc[:i].text + ' you ' + doc[i+1:].text\n\n     break\n\n   doc=nlp(sent)\n\n➊ if question_type == 'info':\n\n     for i,token in enumerate(doc):\n\n       if token.dep_ == 'dobj':\n\n         sent = 'why ' + doc[:i].text + ' one ' + doc[i+1:].text\n\n         break\n\n➋ if question_type == 'yesno':\n\n     for i,token in enumerate(doc):\n\n       if token.dep_ == 'dobj':\n\n     ➌ sent = doc[:i-1].text + ' a red ' + doc[i:].text\n\n        break\n\n   doc=nlp(sent)\n\n   sent = doc[0].text.capitalize() +' ' + doc[1:len(doc)-1].text + '?'\n\n   return sent\n```", "```py\n➊ if len(sys.argv) > 1:\n\n     sent = sys.argv[1]\n\n     nlp = spacy.load('en')\n\n  ➋ doc = nlp(sent)\n\n  ➌ chunk = find_chunk(doc)\n\n  ➍ if str(chunk) == '':\n\n       print('The sentence does not contain a direct object.')\n\n       sys.exit()\n\n  ➎ question_type = determine_question_type(chunk)\n\n  ➏ question = generate_question(doc, question_type)\n\n     print(question)\n\n  else:\n\n     print('You did not submit a sentence!')\n```", "```py\n➊ $ python question.py 'I want a green apple.'\n\n   Why do you want a green one?\n\n➋ $ python question.py 'I want an apple.'\n\n   Do you want a red apple?\n\n➌ $ python question.py 'I want...'\n\n   The sentence does not contain a direct object.\n\n➍ $ python question.py\n\n   You did not submit a sentence!\n```"]