["```py\nTreeNode {\n    Type: value\n    TreeNode: left\n    TreeNode: right\n    TreeNode: parent\n}\n```", "```py\nFindValue(TreeNode: current, Type: target):\n  ❶ IF current == null:\n        return null\n  ❷ IF current.value == target:\n        return current\n  ❸ IF target < current.value AND current.left != null:\n        return FindValue(current.left, target)\n  ❹ IF target > current.value AND current.right != null:\n        return FindValue(current.right, target)\n  ❺ return null\n```", "```py\nFindValueItr(TreeNode: root, Type: target):\n  ❶ TreeNode: current = root\n  ❷ WHILE current != null AND current.value != target:\n      ❸ IF target < current.value:\n            current = current.left\n        ELSE:\n            current = current.right\n  ❹ return current\n```", "```py\nBinarySearchTree {\n    TreeNode: root\n}\n```", "```py\nFindTreeNode(BinarySearchTree: tree, Type: target):\n    IF tree.root == null:\n        return null\n    return FindValue(tree.root, target)\n```", "```py\nInsertTreeNode(BinarySearchTree: tree, Type: new_value):\n    IF tree.root == null:\n        tree.root = TreeNode(new_value)\n    ELSE:\n        InsertNode(tree.root, new_value)\n```", "```py\nInsertNode(TreeNode: current, Type: new_value):\n  ❶ IF new_value == current.value:\n        Update node as needed\n        return\n  ❷ IF new_value < current.value:\n      ❸ IF current.left != null:\n            InsertNode(current.left, new_value)\n        ELSE:\n            current.left = TreeNode(new_value)\n            current.left.parent = current \n    ELSE:\n      ❹ IF current.right != null:\n            InsertNode(current.right, new_value)\n        ELSE:\n            current.right = TreeNode(new_value)\n            current.right.parent = current\n```", "```py\nRemoveTreeNode(BinarySearchTree: tree, TreeNode: node):\n  ❶ IF tree.root == null OR node == null:\n        return\n\n    # Case A: Deleting a leaf node.\n  ❷ IF node.left == null AND node.right == null:\n        IF node.parent == null:\n            tree.root = null\n        ELSE IF node.parent.left == node:\n            node.parent.left = null\n        ELSE:\n            node.parent.right = null\n        return\n\n    # Case B: Deleting a node with one child.\n  ❸ IF node.left == null OR node.right == null:\n      ❹ TreeNode: child = node.left\n        IF node.left == null:\n            child = node.right\n\n      ❺ child.parent = node.parent\n        IF node.parent == null:\n            tree.root = child\n        ELSE IF node.parent.left == node:\n            node.parent.left = child\n        ELSE:\n            node.parent.right = child\n        return\n\n    # Case C: Deleting a node with two children.\n    # Find the successor and splice it out of the tree.\n  ❻ TreeNode: successor = node.right\n    WHILE successor.left != null:\n        successor = successor.left\n    RemoveTreeNode(tree, successor)\n\n    # Insert the successor in the deleted node's place.\n  ❼ IF node.parent == null:\n        tree.root = successor\n    ELSE IF node.parent.left == node:\n        node.parent.left = successor\n    ELSE:\n        node.parent.right = successor\n  ❽ successor.parent = node.parent\n\n  ❾ successor.left = node.left\n    node.left.parent = successor\n\n    successor.right = node.right\n    IF node.right != null:\n        node.right.parent = successor\n```", "```py\nRemoveTreeNode(tree, FindTreeNode(tree, target))\n```", "```py\nnode.parent = null\nnode.right = null\nnode.left = null\n```"]