- en: '**4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: CREATING THE SPACE STATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建空间站**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In this chapter, you’ll build the map for your space station on Mars. Using
    the simple *Explorer* code that you’ll add in this chapter, you’ll be able to
    look at the walls of each room and start to find your bearings. We’ll use lists,
    loops, and the techniques you learned in [Chapters 1](ch01.xhtml#ch01), [2](ch02.xhtml#ch02),
    and [3](ch03.xhtml#ch03) to create the map data and display the room in 3D.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将为火星上的空间站绘制地图。通过在本章中添加的简单*Explorer*代码，你将能够查看每个房间的墙壁并开始找到方向。我们将使用列表、循环以及你在[第1章](ch01.xhtml#ch01)、[第2章](ch02.xhtml#ch02)和[第3章](ch03.xhtml#ch03)中学到的技巧来创建地图数据并以3D方式展示房间。
- en: '**AUTOMATING THE MAP MAKING PROCESS**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**自动化地图生成过程**'
- en: The problem with our current `room_map` data is that there’s a lot of it. The
    *Escape* game includes 50 locations. If you had to enter `room_map` data for every
    location, it would take ages and be hugely inefficient. As an example, if each
    room consisted of 9 × 9 tiles, we would have 81 data items per room, or 4,050
    data items in total. Just the room data would take up 10 pages of this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的`room_map`数据的问题是数据量非常大。*Escape*游戏包括50个位置。如果你必须为每个位置输入`room_map`数据，这将需要大量时间，而且极其低效。举个例子，如果每个房间由9×9个方格组成，那么每个房间将有81条数据，总共有4,050条数据。仅房间数据就会占据本书的10页。
- en: 'Much of that data is repeated: 0s mark the floor and exits, and 1s mark the
    walls at the edges. You know from [Chapter 3](ch03.xhtml#ch03) that we can use
    loops to efficiently manage repetition. We can use that knowledge to make a program
    that will generate the `room_map` data automatically when we give it certain information,
    such as the room size and the location of the exits.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中许多数据是重复的：0表示地板和出口，1表示周围的墙壁。从[第3章](ch03.xhtml#ch03)中你已经知道，我们可以使用循环有效地管理重复数据。我们可以利用这一知识编写一个程序，当我们提供特定信息（例如房间大小和出口位置）时，它将自动生成`room_map`数据。
- en: '**HOW THE AUTOMATIC MAP MAKER WORKS**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**自动地图生成器工作原理**'
- en: 'The *Escape* program will work like this: when the player visits a room, our
    code will take the data for that room (its size and exit positions) and convert
    it into the `room_map` data. The `room_map` data will include columns and rows
    that represent the floor, walls around the edge, and gaps where the exits should
    be. Eventually, we’ll use the `room_map` data to draw the room with the floor
    and walls in the correct place.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Escape*程序将按以下方式工作：当玩家进入一个房间时，我们的代码将获取该房间的数据（其大小和出口位置），并将其转换为`room_map`数据。`room_map`数据将包括代表地板、周围墙壁以及应有出口位置的空隙的列和行。最终，我们将使用`room_map`数据以正确的位置绘制房间的地板和墙壁。'
- en: '[Figure 4-1](ch04.xhtml#ch04fig1) shows the map for the space station. I’ll
    refer to each location as a room, although numbers 1 to 25 are sectors on the
    planet surface within the station compound, similar to a garden. Numbers 26 to
    50 are rooms inside the space station.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-1](ch04.xhtml#ch04fig1)显示了空间站的地图。我将每个位置称为房间，尽管1到25号位置是站内地面上的区域，类似于花园。26到50号是空间站内部的房间。'
- en: The indoor layout is a simple maze with many corridors, dead-ends, and rooms
    to explore. When you make your own maps, try to create winding paths and corners
    to explore, even if the map isn’t very big. Be sure to reward players for their
    exploration by placing a useful or appealing item at the end of each corridor.
    Players also often feel more comfortable travelling from left to right as they
    explore a game world, so the player’s character will start on the left of the
    map in room 31.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 室内布局是一个简单的迷宫，包含许多走廊、死胡同和可探索的房间。当你自己制作地图时，尝试创建蜿蜒的路径和拐角供探索，即使地图并不大。一定要通过在每个走廊的尽头放置一个有用或吸引人的物品来奖励玩家的探索。玩家在探索游戏世界时通常感觉从左到右移动更为舒适，因此玩家的角色将从地图的左侧、第31号房间开始。
- en: Outside, players can walk anywhere, but a fence will stop them from leaving
    the station compound (or wandering off the game map). Due to the claustrophobic
    atmosphere inside the space station, players will experience a sense of freedom
    outside with space to roam.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在外面，玩家可以自由走动，但围栏将阻止他们离开站区（或走出游戏地图）。由于空间站内部有一种幽闭的氛围，玩家在外面会体验到一种自由感，能够在空旷的地方漫游。
- en: '![image](../images/fig4-1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-1.jpg)'
- en: '*Figure 4-1: The space station map*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-1：空间站地图*'
- en: When you’re playing the final *Escape* game, you can refer to this map, but
    you might find it more enjoyable to explore without a map or to make your own.
    This map doesn’t show where the doors are, which in the final game will stop players
    from accessing some parts of the map until they find the right key cards.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在玩最终的*逃脱*游戏时，你可以参考这张地图，但你可能会发现没有地图，或者自己制作一张地图，探索起来会更有趣。这张地图并没有标明门的位置，在最终的游戏中，玩家需要找到正确的钥匙卡才能进入地图的某些部分。
- en: '**CREATING THE MAP DATA**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建地图数据**'
- en: Let’s create the map data. The rooms in our space station will all join up,
    so we only need to store the location of an exit from one side of the wall. For
    instance, an exit on the right of room 31 and an exit on the left of room 32 would
    be the same doorway connecting the two rooms. We don’t need to specify that exit
    for both rooms. For each room in the map, we’ll store whether it has an exit at
    the top or on the right. The program can work out on its own whether an exit exists
    at the bottom or on the left (as I’ll explain shortly). This approach also ensures
    that the map is consistent and no exits seem to vanish after you walk through
    them. If you can go one way through an exit, you can always go back the other
    way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来创建地图数据。我们空间站中的房间都会相互连接，所以我们只需要存储一侧墙壁上出口的位置。例如，房间31右侧的出口和房间32左侧的出口实际上是连接这两个房间的同一个门口。我们不需要为这两个房间都指定这个出口。对于地图中的每个房间，我们将存储它是否在顶部或右侧有出口。程序可以自己计算是否存在底部或左侧的出口（稍后我会解释）。这种方法还确保地图的一致性，走过的出口不会消失。如果你能通过某个出口走出去，你也能从另一侧回来。
- en: 'Each room in the map needs the following data:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 地图中的每个房间都需要以下数据：
- en: A short description of the room.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 房间的简短描述。
- en: Height in tiles, which is the size of the room from top to bottom on the screen.
    (This has nothing to do with the distance from floor to ceiling.)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度（以瓦片为单位），即房间从顶部到底部在屏幕上的大小。（这与地面到天花板的距离无关。）
- en: Width in tiles, which is the size of the room from left to right across the
    screen.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度（以瓦片为单位），即房间从左到右在屏幕上的大小。
- en: Whether or not there is an exit at the top (`True` or `False`).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否在顶部有出口（`True`或`False`）。
- en: Whether or not there is an exit on the right (`True` or `False`).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否在右侧有出口（`True`或`False`）。
- en: '**TIP**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '`True` and `False` are known as *Boolean values*. In Python, these values must
    start with a capital letter, and they don’t need quotes around them, because they’re
    not strings.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`True` 和 `False` 被称为*布尔值*。在Python中，这些值必须以大写字母开头，并且不需要加引号，因为它们不是字符串。'
- en: We call the unit we use to measure the room size a *tile* because it’s the same
    size as a floor tile. As you learned in [Chapter 3](ch03.xhtml#ch03), a tile will
    be our basic unit of measurement for all objects. For instance, a single object
    in the room, such as a chair or a cabinet, will often be the size of one tile.
    In [Chapter 3](ch03.xhtml#ch03) (see [Figure 3-1](ch03.xhtml#ch03fig1) and [Listing
    3-5](ch03.xhtml#ch03list5)), we made a room map that had seven rows with five
    list items in each row, so that room would be seven tiles high and five tiles
    wide.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来测量房间大小的单位称为*瓦片*，因为它与地砖的大小相同。正如你在[第3章](ch03.xhtml#ch03)中学到的，瓦片将是我们所有物体的基本测量单位。例如，房间中的一个物体，比如椅子或柜子，通常会占据一个瓦片的大小。在[第3章](ch03.xhtml#ch03)（见[图3-1](ch03.xhtml#ch03fig1)和[清单3-5](ch03.xhtml#ch03list5)）中，我们制作了一个房间地图，该地图有七行，每行五个列表项，这样这个房间就会是七个瓦片高和五个瓦片宽。
- en: 'Having rooms of different sizes adds variety to the map: some rooms can be
    narrow like corridors, and some can be expansive like community rooms. To fit
    in our game window, the maximum size of a room is 15 tiles high by 25 tiles wide.
    Large rooms or rooms with lots of objects in them might run more slowly on older
    computers, though.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不同大小的房间为地图增添了多样性：有些房间可以像走廊一样狭窄，有些则可以像公共休息室一样宽敞。为了适应我们的游戏窗口，房间的最大尺寸为15个瓦片高、25个瓦片宽。然而，大型房间或包含很多物体的房间可能会在旧电脑上运行得较慢。
- en: 'Here’s an example of the data for room 26: it’s a narrow room 13 tiles high
    and 5 tiles wide with an exit at the top but none to the right (see the map in
    [Figure 4-1](ch04.xhtml#ch04fig1)).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是房间26的数据示例：它是一个狭窄的房间，高13个瓦片，宽5个瓦片，顶部有出口，但右侧没有出口（见[图4-1](ch04.xhtml#ch04fig1)中的地图）。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We give the room a name (or description), numbers for the height and width respectively,
    and `True` and `False` values for whether the top and right edges have an exit.
    In this game, each wall can have only one exit, and that exit will be automatically
    positioned in the middle of the wall.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给房间命名（或描述），分别为高度和宽度设置数字，并为顶部和右侧边缘是否有出口设置`True`和`False`值。在这个游戏中，每面墙只能有一个出口，并且该出口会自动放置在墙的中间。
- en: When the program makes the `room_map` data for room 27 next door, it will check
    room 26 to see whether it has an exit on the right. Because room 26 has no exit
    on the right, the program will know that room 27 has no left exit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序为隔壁的27号房间生成`room_map`数据时，它会检查26号房间，看看是否有右侧出口。由于26号房间没有右侧出口，程序就会知道27号房间没有左侧出口。
- en: We’ll store the lists of data for each room in a list called `GAME_MAP`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会将每个房间的数据列表存储在一个名为`GAME_MAP`的列表中。
- en: '**WRITING THE GAME_MAP CODE**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写GAME_MAP代码**'
- en: Click **File** ▸ **New File** to start a new file in Python. Enter the code
    from [Listing 4-1](ch04.xhtml#ch04list1) to start building the space station.
    Save your listing as *listing4-1.py*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**文件** ▸ **新建文件**，开始创建一个Python文件。输入[清单4-1](ch04.xhtml#ch04list1)中的代码，开始构建空间站。将你的清单保存为*listing4-1.py*。
- en: '**TIP**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Remember to save your work regularly when you’re typing a long program. As in
    many applications, you can press CTRL-S to save in IDLE.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在编写较长程序时定期保存你的工作。像许多应用程序一样，你可以按CTRL-S在IDLE中保存。
- en: '*listing4-1.py*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing4-1.py*'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 4-1: The* GAME_MAP *data*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单4-1：* GAME_MAP *数据*'
- en: 'Let’s take a closer look at this code for setting out the room map data. Keep
    in mind that as we build the *Escape* game, we’ll keep adding to the program.
    To help you find your way around the program, I’ll mark the different sections
    with headings like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看一下这段设置房间地图数据的代码。请记住，在我们构建*逃脱*游戏时，我们会不断地往程序中添加内容。为了帮助你在程序中找到自己的位置，我会用类似这样的标题来标记不同的部分：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `#` symbol marks a comment and tells Python to ignore anything after it
    on the same line, so the game will work with or without these comments. The comments
    will make it easier to figure out where you are in the code and where you need
    to add new instructions as the program gets bigger. I’ve drawn boxes using the
    comment symbols to make the headings stand out as you scroll through the program
    code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`#`符号标记了注释，并告诉Python忽略同一行中`#`之后的内容，因此游戏即使没有这些注释也能正常运行。注释将帮助你更容易地理解自己在代码中的位置，以及在程序变得更大时需要在哪里添加新的指令。我使用注释符号绘制了框架，使得标题在浏览程序代码时更加突出。'
- en: 'Three astronauts are based on the space station, and you can personalize their
    names in the code ➊. Change the `PLAYER_NAME` to your own, and add the names of
    two friends for the `FRIEND1_NAME` and `FRIEND2_NAME` variables. Throughout the
    code, we’ll use these variables wherever we need to use the name of one of your
    friends: for example, each astronaut has their own sleeping quarters. We need
    to set up these variables now because we’ll use them to set up some of the room
    descriptions later in this program. Who will you take with you to Mars?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 三名宇航员驻扎在空间站上，你可以在代码中个性化他们的名字 ➊。将`PLAYER_NAME`改为你自己的名字，并为`FRIEND1_NAME`和`FRIEND2_NAME`变量添加两个朋友的名字。在整个代码中，我们将在需要使用你朋友名字的地方使用这些变量：例如，每个宇航员都有自己的寝室。我们现在需要设置这些变量，因为稍后在程序中设置某些房间描述时会用到它们。你会带谁一起去火星呢？
- en: 'The program also sets up some variables we’ll need at the end of this chapter
    to draw our room: the `top_left_x` and `top_left_y` variables ➋ specify where
    to start drawing the room; and the `DEMO_OBJECTS` list contains the images to
    use ➌.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 程序还设置了一些我们在本章后面需要用来绘制房间的变量：`top_left_x`和`top_left_y`变量 ➋ 指定了绘制房间的起始位置；而`DEMO_OBJECTS`列表包含了要使用的图像
    ➌。
- en: 'First, we set up variables to contain the height, width, and overall size of
    the map in tiles ➍. We create the `GAME_MAP` list ➎ and give it the data for room
    0: this room is for storing items that aren’t in the game yet because the player
    hasn’t discovered or created them. It’s not a real room the player can visit.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们设置了包含地图高度、宽度和总体大小的变量 ➍。我们创建了`GAME_MAP`列表 ➎ 并为它提供了房间0的数据：这个房间用于存储游戏中尚未出现的物品，因为玩家还没有发现或创造它们。它不是玩家可以访问的真实房间。
- en: 'We then use a loop ➏ to add the same data for each of the 25 planet surface
    rooms that make up the grounds of the compound. The `range(1, 26``)` function
    is used to repeat 25 times. The first number is the one we want to start at, and
    the second is the number we want to finish at plus one (`range()` doesn’t include
    the last number you give it, remember). Each time through the loop, the program
    adds the same data to the end of `GAME_MAP` because all the planet surface “rooms”
    are the same size and have exits in every direction. The data for every surface
    room looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用一个循环➏，为构成复合体的25个行星表面房间添加相同的数据。`range(1, 26)`函数用于重复25次。第一个数字是我们希望开始的数字，第二个是我们希望结束的数字再加1（`range()`不包括你给出的最后一个数字，记住这一点）。每次循环时，程序都会将相同的数据添加到`GAME_MAP`的末尾，因为所有的行星表面“房间”大小相同，并且每个方向都有出口。每个表面房间的数据如下：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When this loop finishes, `GAME_MAP` will include room 0 and also have the same
    “dusty planet surface” data for rooms 1 to 25\. We also set up the `outdoor``_rooms`
    range to store the room numbers 1 to 25\. We’ll use this range when we need to
    check whether a room is inside or outside the space station.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个循环完成后，`GAME_MAP`将包括房间0，并且房间1到25将拥有相同的“尘土行星表面”数据。我们还设置了`outdoor_rooms`范围，用于存储房间号1到25。当我们需要检查一个房间是位于空间站内还是外时，会用到这个范围。
- en: 'Finally, we add rooms 26 to 50 to `GAME_MAP` ➐. We do this by using `+=` to
    add a new list to the end of `GAME_MAP`. That new list includes the data for the
    remaining rooms. Each of these rooms will be different, so we need to enter the
    data for them separately. You saw the information for room 26 earlier: the data
    contains the room name, its height and width, and whether it has exits at the
    top and the right. Each piece of room data is a list, so it has square brackets
    at the start and end. At the end of each piece of room data (except the last one),
    we must use a comma to separate it from the next one. I’ve also put the room number
    in a comment at the end of each line to help keep track of the room numbers. These
    comments will be helpful as you develop the game. It’s good practice to annotate
    your code like this so you can understand it when you revisit it.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将房间26到50添加到`GAME_MAP`中➐。我们通过使用`+=`将一个新列表添加到`GAME_MAP`的末尾。这个新列表包含剩余房间的数据。每个房间的数据都不同，所以我们需要分别输入它们的数据。你之前看到过房间26的信息：数据包括房间名称、房间的高度和宽度，以及它是否有上方和右方的出口。每个房间的数据都是一个列表，因此它的开始和结束都有方括号。在每个房间数据的末尾（除了最后一个）我们必须用逗号将其与下一个数据分开。我还在每行的末尾加了房间号的注释，帮助跟踪房间号。这些注释在你开发游戏时会很有帮助。像这样注释代码是一个好习惯，这样当你再次查看代码时就能理解它。
- en: Rooms 46 and 47 add the variables `FRIEND1_NAME` and `FRIEND2_NAME` to the room
    description, so you have two rooms called something like “Karen’s sleeping quarters,”
    using your friends’ names ➑. As well as using the `+` symbol to add numbers and
    combine lists, you can also use it to combine strings.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 房间46和47将变量`FRIEND1_NAME`和`FRIEND2_NAME`添加到房间描述中，因此你将有两个房间，它们的名字可能是“Karen的睡眠区”，使用你朋友的名字➑。除了使用`+`符号来加法和合并列表外，你还可以用它来合并字符串。
- en: At the end of *listing4-1.py*, we perform a simple check using `assert()` to
    make sure the map data makes sense ➒. We check whether the length of the `GAME_MAP`
    (the number of rooms in the map data) is the same as the size of the map, which
    we calculated at ➍ by multiplying its width by its height. If it’s not, it means
    we’re missing some data or have too much.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在*listing4-1.py*的结尾，我们使用`assert()`进行简单检查，确保地图数据是合理的➒。我们检查`GAME_MAP`的长度（地图数据中的房间数量）是否与我们在➍通过将其宽度与高度相乘计算出的地图大小相同。如果不同，说明我们缺少一些数据或数据太多。
- en: We have to subtract 1 from the length of `GAME_MAP` because it also includes
    room 0, which we didn’t include when we calculated the map size. This check won’t
    catch all errors, but it can tell you whether you missed a line of the map data
    when entering it. Wherever possible, I’ll try to include simple tests like this
    to help you check for any errors as you enter the program code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须从`GAME_MAP`的长度中减去1，因为它还包括房间0，而在我们计算地图大小时没有包含该房间。这个检查不能捕获所有错误，但它可以告诉你在输入地图数据时是否遗漏了一行数据。只要可能，我会尽量包含像这样的简单测试，帮助你在输入程序代码时检查错误。
- en: '**TESTING AND DEBUGGING THE CODE**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**测试和调试代码**'
- en: 'Run *listing4-1.py* by clicking **Run** ▸ **Run Module** or press F5 (the keyboard
    shortcut). Nothing much should happen. The shell window should just display a
    message that says `"RESTART:"` together with your filename. The reason is that
    all we’ve asked the program to do is set up some variables and a list, so there
    is nothing to see. But if you made a mistake entering the listing, you might also
    see a red error message in the shell window. If you do get an error, double-check
    the following details:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**运行** ▸ **运行模块**或者按F5（快捷键）来运行*listing4-1.py*。应该不会发生什么。Shell窗口只会显示一条消息，显示`"RESTART:"`以及你的文件名。原因是我们要求程序做的只是设置一些变量和一个列表，所以没有任何可见的东西。但如果你在输入代码时犯了错误，你也可能在Shell窗口看到一条红色的错误信息。如果你看到错误，请仔细检查以下细节：
- en: Are the quote marks in the right place? Strings are in green in the Python program
    window, so look for large areas of green, which suggest you didn’t close your
    string. If room descriptions are in black, you didn’t open the string. Both indicate
    a missing quote mark.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引号位置正确吗？在Python程序窗口中，字符串是绿色的，所以寻找大面积的绿色，表示你没有关闭字符串。如果房间描述是黑色的，说明你没有打开字符串。这两种情况都表明缺少引号。
- en: Are you using the correct brackets and parentheses in the proper places? In
    this listing, square brackets surround list items, and parentheses (curved brackets)
    are used for functions, such as `range()` and `append()`. Curly brackets {…} are
    not used at all.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在正确的位置使用了正确的括号和圆括号吗？在这个列表中，方括号用来括住列表项，圆括号（括号）用于函数，例如`range()`和`append()`。大括号{…}完全没有使用。
- en: Are you missing any brackets or parentheses? A simple way to check is to count
    the number of opening and closing brackets and parentheses. Every opening bracket
    or parenthesis should have a closing bracket or parenthesis of the same shape.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否漏掉了任何括号或圆括号？检查的简单方法是数一下打开和关闭的括号和圆括号的数量。每个打开的括号或圆括号应该都有一个相同形状的闭合括号或圆括号。
- en: 'You have to close brackets and parentheses in the reverse order of how you
    opened them. If you have an opening parenthesis and then an opening square bracket,
    you must close them first with a closing square bracket and then a closing parenthesis.
    This format is correct: ( [ … ] ). This format is wrong: ( [ … ) ].'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须按照打开括号和圆括号的顺序来关闭它们。如果你有一个打开的圆括号，然后是一个打开的方括号，你必须先用闭合的方括号关闭它们，然后再用闭合的圆括号。这个格式是正确的：([
    … ])。这个格式是错误的：（[ … ) ]。
- en: Are your commas in the correct place? Remember that each list for a room in
    `GAME_MAP` must have a comma after the closing square bracket to separate it from
    the next room’s data (except for the last room).
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的逗号位置正确吗？记住，`GAME_MAP`中每个房间的列表后必须有一个逗号，用来分隔下一个房间的数据（除了最后一个房间）。
- en: '**TIP**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Why not ask a friend to help you build the game? Programmers often work in pairs
    to help each other with ideas and, perhaps most importantly, have two pairs of
    eyes checking everything. You can take turns typing too!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不请朋友帮你一起做这个游戏？程序员常常成对工作，互相帮助提出创意，也许最重要的是，两个人的眼睛检查一切。你们还可以轮流打字！
- en: '**GENERATING ROOMS FROM THE DATA**'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从数据生成房间**'
- en: Now the space station map is stored in our `GAME_MAP` list. The next step is
    to add the function that takes the data for the current room from `GAME_MAP` and
    expands it into the `room_map` list that the *Escape* game will use to see what’s
    at each position in the room. The `room_map` list always stores information about
    the room the player is currently in. When the player enters a different room,
    we replace the data in `room_map` with the map of the new room. Later in the book,
    we’ll add scenery and props to the `room_map`, so the player has items to interact
    with too.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，空间站地图存储在我们的`GAME_MAP`列表中。下一步是添加一个功能，从`GAME_MAP`中获取当前房间的数据，并将其扩展到`room_map`列表中，*逃脱*游戏将使用这个列表来查看房间中每个位置的内容。`room_map`列表始终存储玩家当前所在房间的信息。当玩家进入不同的房间时，我们用新房间的地图替换`room_map`中的数据。书中的后续部分，我们会往`room_map`中添加景物和道具，这样玩家也能与物品互动。
- en: The `room_map` data is made by a function we’ll create called `generate_map()`,
    shown in [Listing 4-2](ch04.xhtml#ch04list2).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`room_map`数据是由我们将要创建的一个函数`generate_map()`生成的，见[列表 4-2](ch04.xhtml#ch04list2)。'
- en: Add the code in [Listing 4-2](ch04.xhtml#ch04list2) to the end of [Listing 4-1](ch04.xhtml#ch04list1).
    The grayed out code shows you where [Listing 4-1](ch04.xhtml#ch04list1) ends.
    Make sure all the indentation is correct. The indentation determines whether code
    belongs to the `get_floor_type()` or `generate_map()` function, and some code
    is indented further to tell Python which `if` or `for` command it belongs to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将[列表4-2](ch04.xhtml#ch04list2)中的代码添加到[列表4-1](ch04.xhtml#ch04list1)的末尾。灰色部分的代码显示了[列表4-1](ch04.xhtml#ch04list1)的结束位置。确保所有的缩进都是正确的。缩进决定了代码属于`get_floor_type()`还是`generate_map()`函数，而某些代码缩进得更深，告诉Python它属于哪个`if`或`for`命令。
- en: Save your program as *listing4-2.py* and click **Run** ▸ **Run Module** to run
    it and check for any error messages in the shell.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的程序保存为*listing4-2.py*，然后点击**运行** ▸ **运行模块**，运行它并检查shell中是否有任何错误信息。
- en: '**RED ALERT**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Don’t start a new program with the code in [Listing 4-2](ch04.xhtml#ch04list2):
    make sure you add [Listing 4-2](ch04.xhtml#ch04list2) to the end of [Listing 4-1](ch04.xhtml#ch04list1).
    As you follow along in this book, you’ll increasingly add to your existing program
    to build the* Escape *game.*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要仅仅从[列表4-2](ch04.xhtml#ch04list2)中的代码开始新的程序：确保将[列表4-2](ch04.xhtml#ch04list2)添加到[列表4-1](ch04.xhtml#ch04list1)的末尾。在本书中跟随步骤时，你将逐步向现有程序中添加内容，来构建*逃脱*游戏。*'
- en: '*listing4-2.py*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing4-2.py*'
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 4-2: Generating the* room_map *data*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-2：生成* room_map *数据*'
- en: You can build the *Escape* game and even make your own game maps without understanding
    how the `room_map` code works. But if you’re curious, read on and I’ll walk you
    through it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建*逃脱*游戏，甚至制作自己的游戏地图，而不需要理解`room_map`代码是如何工作的。但如果你有兴趣，继续阅读，我会带你一步步理解。
- en: '**HOW THE ROOM GENERATING CODE WORKS**'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**房间生成代码的工作原理**'
- en: 'Let’s start with a reminder of what we want the `generate_map()` function to
    do. Given the height and width of a room, and the location of the exits, we want
    it to generate a room map, which might look something like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先回顾一下`generate_map()`函数需要做的事情。给定房间的高度和宽度，以及出口的位置，我们希望它生成一个房间地图，可能看起来像这样：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is room number 31 on the map, the room the player starts the game in. It’s
    7 tiles high and 11 tiles wide, and it has an exit at the top and right. The floor
    spaces (and exits in the wall) are marked with a 0\. The walls around the room
    are marked with a 1\. [Figure 4-2](ch04.xhtml#ch04fig2) shows the same room in
    a grid layout, with the index numbers for the lists shown at the top and on the
    left.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是地图上的31号房间，玩家开始游戏的房间。它的高度是7格，宽度是11格，顶部和右侧都有出口。地面空间（以及墙上的出口）用0表示。房间周围的墙壁用1表示。[图4-2](ch04.xhtml#ch04fig2)展示了相同房间的网格布局，列表的索引号显示在顶部和左侧。
- en: '![image](../images/fig4-2.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-2.jpg)'
- en: '*Figure 4-2: A grid representing room 31; the 1s are wall pillars, and the
    0s are empty floor spaces.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-2：一个表示31号房间的网格；1表示墙柱，0表示空的地面空间。*'
- en: The number of the room the player is currently in is stored in the `current``_room`
    variable, which you set up in the `VARIABLES` section of your program (see [Listing
    4-1](ch04.xhtml#ch04list1)). The `generate_map()` function starts by collecting
    the room data for the current room from the `GAME_MAP` ➋ and putting it into a
    list called `room_data`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家当前所在的房间号存储在`current_room`变量中，你在程序的`VARIABLES`部分设置了这个变量（见[列表4-1](ch04.xhtml#ch04list1)）。`generate_map()`函数首先从`GAME_MAP`
    ➋中收集当前房间的数据，并将其放入一个名为`room_data`的列表中。
- en: 'If you cast your mind back to when we set up `GAME_MAP`, the information in
    the `room_data` list will now look similar to this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回想一下我们设置`GAME_MAP`时的情况，`room_data`列表中的信息现在将类似于此：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This list format allows us to set up the `room_name` by taking the first element
    from this list at index 0\. We can find the room’s height at index 1 and width
    at index 2 by taking the next elements. The `generate_map()` function stores the
    height and width information in the `room_height` and `room_width` variables.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种列表格式使我们能够通过取该列表中索引为0的第一个元素来设置`room_name`。我们可以通过取接下来的元素，找到房间的高度（索引1）和宽度（索引2）。`generate_map()`函数将高度和宽度信息存储在`room_height`和`room_width`变量中。
- en: '**CREATING THE BASIC ROOM SHAPE**'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建基本房间形状**'
- en: 'The next step is to set the materials we’ll use to build the rooms and create
    the basic room shape using them. We’ll add exits later. We’ll use three elements
    for each room:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置我们用来构建房间的材料，并使用这些材料创建基本的房间形状。我们稍后会添加出口。每个房间将使用三个元素：
- en: The *floor type*, which is stored in the variable `floor_type`. Inside the space
    station, we use floor tiles (represented by 0 in `room_map`), and outside we use
    soil (represented by 2 in `room_map`).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*地面类型*，它存储在`floor_type`变量中。在空间站内，我们使用地板砖（在`room_map`中表示为0），在外部使用土壤（在`room_map`中表示为2）。'
- en: The *edge type*, which appears in each space at the edge of the room. For an
    inside room, this is a wall pillar, represented by 1\. For an outside room, this
    is the soil.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*边缘类型*，出现在房间边缘的每个空间中。对于室内房间，这是一个墙柱，表示为1。对于室外房间，这是土壤。'
- en: The *bottom edge type*, which is a wall inside the station and usually soil
    outside. The bottom row of the outside compound, where it meets the space station,
    is a special case because the station wall is visible here, so the `bottom_edge`
    type is a wall pillar (see [Figure 4-3](ch04.xhtml#ch04fig3)).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*底边类型*，这是站内的墙壁，外部通常是土壤。外部复合体的最底行，与空间站接触的地方是一个特殊情况，因为这里可见站墙，所以`bottom_edge`类型是墙柱（见[图4-3](ch04.xhtml#ch04fig3)）。'
- en: '![image](../images/fig4-3.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/fig4-3.jpg)'
- en: '*Figure 4-3: Different materials are used for the edges and bottom edge of
    the room, depending on where the room is in the space station compound. (Note
    that the astronaut and additional scenery won’t be in your game yet.)*'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图4-3：根据房间在空间站复合体中的位置，使用不同的材料来构建房间的边缘和底边。（注意，宇航员和额外的景物暂时不会出现在你的游戏中。）*'
- en: We use a function called `get_floor_type()` ➊ to find out the correct floor
    type for the room. Functions can send information back to other parts of the program
    using the `return` instruction, as you can see in this function. The `get_floor_type()`
    function checks whether the `current_room` value is in the `outdoor_rooms` range.
    If so, the function returns the number 2, which represents Martian soil. Otherwise,
    it returns the number 0, which represents a tiled floor. This check is in a separate
    function so other parts of the program can use it too. The `generate_map()` function
    puts the number that `get_floor_type()` returns into the `floor_type` variable.
    Using one instruction ➌, `generate_map()` sets up the `floor_type` variable to
    be equal to whatever `get_floor_type()` sends back, and it tells the `get_floor_type()`
    function to run now too.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为`get_floor_type()`的函数➊来查找房间的正确地面类型。函数可以通过`return`指令将信息返回到程序的其他部分，就像在这个函数中看到的那样。`get_floor_type()`函数检查`current_room`值是否位于`outdoor_rooms`范围内。如果是，函数返回数字2，代表火星土壤。否则，它返回数字0，代表瓷砖地面。这个检查在一个单独的函数中，这样程序的其他部分也可以使用它。`generate_map()`函数将`get_floor_type()`返回的数字放入`floor_type`变量中。通过一条指令➌，`generate_map()`将`floor_type`变量设置为`get_floor_type()`返回的值，并指示`get_floor_type()`函数现在也要执行。
- en: 'The `generate_map()` function also sets up variables for the `bottom_edge`
    and `side_edge`. These variables store the type of material that will be used
    to make the edges of the room, as shown in [Figure 4-3](ch04.xhtml#ch04fig3).
    The side edge material is used for the top, left, and right sides, and the bottom
    edge material is for the bottom edge. If the room number is between 1 and 20 inclusive,
    it’s a regular planet surface room. The bottom and edge are soil in that case.
    If the room number is between 21 and 25, it’s a planet surface room that touches
    the space station at the bottom. This is a special case: the side edge material
    is soil, but the bottom edge is made of wall pillars. If the room number is higher
    than 25, the side and bottom edges are made of wall pillars because it’s an inside
    room. (You can check that these room numbers make sense in [Figure 4-1](ch04.xhtml#ch04fig1).)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`generate_map()`函数还为`bottom_edge`和`side_edge`设置了变量。这些变量存储将用于构建房间边缘的材料类型，如[图4-3](ch04.xhtml#ch04fig3)所示。侧边材料用于顶部、左侧和右侧，而底边材料用于底边。如果房间号在1到20之间（含），则是常规的行星表面房间，底边和边缘是土壤。在房间号在21到25之间时，它是一个与空间站底部接触的行星表面房间。这是一个特殊情况：侧边材料是土壤，但底边由墙柱构成。如果房间号大于25，则侧边和底边由墙柱构成，因为这是一个室内房间。（你可以在[图4-1](ch04.xhtml#ch04fig1)中检查这些房间号是否合理。）'
- en: 'We start making the `room_map` list by creating the top row, which will be
    a row of soil outside or the back wall inside. The top row is made of the same
    material all the way across, so we can use a shortcut. Try this in the shell:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始创建`room_map`列表，首先构建顶部行，这一行将是外部的土壤或内部的后墙。顶部行由相同的材料构成，所以我们可以使用一个快捷方式。可以在终端中尝试这个：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `[1]` in the `print()` instruction is a list that contains just one item.
    When we multiply it by 10, we get a list that contains that item 10 times. In
    our program, we multiply the edge type we’re using by the width of the room ➍.
    If the top edge has an exit in it, we’ll add that shortly.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()`指令中的`[1]`是一个只包含一个元素的列表。当我们将其乘以10时，得到的是一个包含该元素10次的列表。在我们的程序中，我们将使用的边缘类型乘以房间的宽度
    ➍。如果顶部边缘有出口，我们稍后会添加这一部分。'
- en: 'The middle rows of the room are made using a loop ➎ that adds each row in turn
    to the end of `room_map`. All the middle rows in a room are the same and are made
    up of the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 房间的中间行是通过一个循环 ➎生成的，该循环将每一行依次添加到`room_map`的末尾。房间中的所有中间行都是相同的，构成这些行的内容如下：
- en: An edge tile (either wall or soil) for the left side of the room.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 房间左侧的边缘瓦片（可以是墙或土壤）。
- en: The floor in the middle. We can use our shortcut again here. We multiply the
    `floor_type` by the size of the space in the middle of the room. That is the `room_width`
    minus 2 because there are two edge spaces.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中间的地板。我们可以在这里再次使用我们的快捷方式。我们将`floor_type`乘以房间中间空间的大小。也就是`room_width`减去2，因为有两个边缘空间。
- en: The edge piece at the right side.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右侧的边缘瓦片。
- en: The bottom line is then added ➏ and is generated in the same way as the top
    line.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加底部的那一行 ➏，并且它的生成方式与顶部的一行相同。
- en: '**ADDING EXITS**'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加出口**'
- en: Next, we add exits in the walls where required. We’ll put the exits in the middle
    of the walls, so we start by figuring out where the middle row and middle column
    are ➐ by dividing the room height and width by 2\. Sometimes this calculation
    results in a number with a decimal. We need a whole number for our index positions,
    so we use the `int()` function to remove the decimal part ➐. The `int()` function
    converts a decimal number into a whole number (an *integer*).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在需要的地方在墙上添加出口。我们将出口放置在墙的中间，所以我们首先通过将房间的高度和宽度除以2来计算中间的行和中间的列的位置 ➐。有时这个计算会得到一个带小数的数字。我们需要一个整数作为索引位置，因此我们使用`int()`函数去掉小数部分
    ➐。`int()`函数将小数转换为整数（*整数*）。
- en: 'We check for a right exit first ➑. Remember that `room_data` contains the information
    for this room, which was originally taken from `GAME_MAP`. The value `room_data[4]`
    tells us whether there is an exit on the right of this room. This instruction:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查右侧是否有出口 ➑。记住，`room_data`包含这个房间的信息，它最初是从`GAME_MAP`获取的。值`room_data[4]`告诉我们这个房间的右边是否有出口。这个指令：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'is shorthand for this instruction:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 是以下指令的简写：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We use `==` to check whether two things are the same. One reason that Boolean
    values are often a great choice to use for your data is that they make the code
    easier to read and write, as this example shows.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`==`来检查两个事物是否相同。布尔值之所以常常是处理数据的一个很好的选择，是因为它们让代码更容易阅读和编写，正如这个例子所展示的那样。
- en: 'When there is a right exit, we change three positions in the middle of the
    right wall from the edge type to the floor type, making a gap in the wall there.
    The value `room_width-1` finds the *x* position on the right edge: we subtract
    1 because index numbers start at 0\. In [Figure 4-2](ch04.xhtml#ch04fig2), for
    example, you can see that the room width is 11 tiles, but the index position for
    the right wall is 10\. On the planet surface, this code doesn’t change anything,
    because there’s no wall there to put a gap in. But it’s simpler to let the program
    add the floor tiles anyway so we don’t have to write code for special cases.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当有右侧出口时，我们会将右墙中间的三个位置从边缘类型改为地板类型，从而在墙上留下一个空隙。值`room_width-1`找到右边缘的*x*位置：我们减去1是因为索引从0开始。例如，在[图4-2](ch04.xhtml#ch04fig2)中，你可以看到房间的宽度是11个瓦片，但右墙的索引位置是10。在行星表面上，这段代码并不会改变任何东西，因为那里没有墙可以留空隙。但为了简化程序，我们还是让它添加地板瓦片，这样就不需要为特殊情况编写代码了。
- en: Before we check whether we need an exit for the left wall, we make sure the
    room isn’t on the left edge of the map where there can be no exit ➒. The `%` operator
    gives us the remainder when we divide one number by another. If we divide the
    current room number by the map width, 5, using the `%` operator, we’ll get a 1
    if the room is on the left edge. The left edge room numbers are 1, 6, 11, 16,
    21, 26, 31, 36, 41, and 46\. So we only continue checking for a left exit if the
    remainder is not 1 (`!=` means “is not equal to”).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查左侧墙壁是否需要出口之前，我们确保房间不在地图的左边缘，因为左边缘不能有出口 ➒。`%` 操作符可以得到两个数相除后的余数。如果我们使用 `%`
    操作符将当前房间号除以地图宽度 5，当房间位于左边缘时，我们会得到 1。左边缘的房间号包括 1、6、11、16、21、26、31、36、41 和 46。所以只有当余数不是
    1 时，我们才继续检查左侧出口（`!=` 表示“不等于”）。
- en: To see whether we need an exit on the left in this room, we work out which room
    is on the other side of that wall by subtracting 1 from the current room number.
    Then we check whether that room has a right exit. If so, our current room needs
    a left exit, and we add it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看这个房间是否需要左侧出口，我们通过将当前房间号减去 1 来计算出墙的另一边是哪一个房间。然后我们检查该房间是否有右侧出口。如果有，则说明当前房间需要左侧出口，我们就添加它。
- en: The exits at the top and bottom are added in a similar way ➓. We check `room_data`
    directly to see whether there’s an exit at the top of the room, and if so, we
    add a gap in that wall. We can check the room below as well to see whether there
    should be a bottom exit in the room.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上下出口的添加方式类似 ➓。我们直接检查 `room_data` 来判断房间顶部是否有出口，如果有，则在该墙壁中添加一个缝隙。我们还可以检查下方的房间，看看是否应该在该房间添加底部出口。
- en: '**TESTING THE PROGRAM**'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试程序**'
- en: 'When you run the program, you can confirm that you don’t see any errors in
    the Python shell. You can also check that the program is working by generating
    the map and then printing it from the shell, like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，可以确认在 Python shell 中没有看到任何错误。你还可以通过生成地图并从 shell 中打印出来的方式来检查程序是否工作正常，像这样：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `current_room` variable is set by default to be room 31, the starting room
    in the game, so that is the `room_map` data that prints. From our `GAME_MAP` data
    (and [Figure 4-2](ch04.xhtml#ch04fig2)) we can see that this room has 7 rows and
    11 columns, and our output confirms that we have 7 lists, each containing 11 numbers:
    perfect. What’s more, we can see that the first row features four wall pillars,
    three empty spaces, and then four more wall pillars, so the function has put an
    exit here as we would expect. Three of the lists have a 0 as their last number
    too, indicating an exit on the right. It looks like the program is working!'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_room` 变量默认设置为房间 31，这是游戏中的起始房间，因此打印出来的是 `room_map` 数据。从我们的 `GAME_MAP`
    数据（以及 [图 4-2](ch04.xhtml#ch04fig2)）中可以看到，这个房间有 7 行和 11 列，输出结果也证实我们有 7 个列表，每个列表包含
    11 个数字：完美。更重要的是，我们可以看到第一行有四个墙柱，三个空格，然后是另外四个墙柱，因此该函数在此处添加了一个出口，正如我们所期望的那样。三个列表的最后一个数字是
    0，表示右侧有出口。看起来程序运行正常！'
- en: '**TRAINING MISSION #1**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: 'You can change the value of `current_room` from the shell to print a different
    room. Try entering different values for the room, regenerating the map, and printing
    it. Check the output against the map and the `GAME_MAP` code to make sure the
    results match what you expect. Here is one example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 shell 更改 `current_room` 的值来打印不同的房间。尝试输入不同的房间值，重新生成地图并打印出来。检查输出结果与地图以及
    `GAME_MAP` 代码是否匹配，确保结果符合预期。以下是一个示例：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What happens when you enter a value for one of the planet surface rooms?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为其中一个行星表面房间输入值时会发生什么？
- en: '**EXPLORING THE SPACE STATION IN 3D**'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在 3D 中探索空间站**'
- en: Let’s turn our room maps into rooms! We’ll combine the code we created for turning
    room maps into 3D rooms in [Chapter 3](ch03.xhtml#ch03) with our code for extracting
    the room map from the game map. Then we can tour the space station and start to
    get our bearings.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将房间地图转换为房间！我们将把第 [3 章](ch03.xhtml#ch03) 中将房间地图转换为 3D 房间的代码与提取游戏地图中的房间地图的代码结合起来。然后我们可以参观空间站并开始定位。
- en: The *Explorer* feature of our program will enable us to view all the rooms on
    the space station. We’ll give it its own `EXPLORER` section in the program. It’s
    a temporary measure to enable us to quickly see results. We’ll replace the *Explorer*
    with better code for viewing rooms in [Chapters 7](ch07.xhtml#ch07) and [8](ch08.xhtml#ch08).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们程序中的 *Explorer* 功能将使我们能够查看空间站上的所有房间。我们将为它在程序中创建一个单独的 `EXPLORER` 部分。这是一个临时措施，方便我们快速查看结果。我们将在第
    [7 章](ch07.xhtml#ch07) 和第 [8 章](ch08.xhtml#ch08) 中，用更好的代码来替换 *Explorer*，以便查看房间。
- en: Add the code in [Listing 4-3](ch04.xhtml#ch04list3) to the end of your program
    for [Listing 4-2](ch04.xhtml#ch04list2), after the instructions shown in gray.
    Then save the program as *listing4-3.py*. Remember to save it with your other
    programs for this book in the *escape* folder so the *images* folder is in the
    right place (see “[Downloading the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将[清单 4-3](ch04.xhtml#ch04list3)中的代码添加到你程序的末尾，放在[清单 4-2](ch04.xhtml#ch04list2)中显示为灰色的指令之后。然后将程序保存为*listing4-3.py*。记得将其与本书的其他程序一起保存在*escape*文件夹中，这样*images*文件夹才能正确放置（参见
    “[下载游戏文件](intro.xhtml#lev8)” [第7页](intro.xhtml#page_7)）。
- en: '*listing4-3.py*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing4-3.py*'
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 4-3: The* Explorer *code*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 4-3：*Explorer *代码*'
- en: The new additions in [Listing 4-3](ch04.xhtml#ch04list3) should look familiar
    to you. We call the `generate_map()` function to create the `room_map` data for
    the current room ➊. We then display it ➋ using the code we created in [Listing
    3-5](ch03.xhtml#ch03list5) in [Chapter 3](ch03.xhtml#ch03). We use keyboard controls
    to change the `current_room` variable ➌, similar to how we changed the *x* and
    *y* position of our spacewalking astronaut in [Chapter 1](ch01.xhtml#ch01) (see
    [Listing 1-4](ch01.xhtml#ch01list4)). To go up or down a row in the map, we change
    the `current_room` number by the width of the game map. For example, to go up
    a row from room 32, we subtract 5 to go into room 27 (see [Figure 4-1](ch04.xhtml#ch04fig1)).
    If the room number has changed, the program prints the `current_room` variable
    ➏. The `str()` function converts the room number to a string ➐, so it can be joined
    to the `"Entering room:"` string. Without using the `str()` function, you can’t
    join a number to a string.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 4-3](ch04.xhtml#ch04list3)中的新添加内容应该对你来说比较熟悉。我们调用`generate_map()`函数来为当前房间创建`room_map`数据➊。然后，我们使用[第3章](ch03.xhtml#ch03)中的[清单
    3-5](ch03.xhtml#ch03list5)创建的代码来显示它➋。我们使用键盘控制来改变`current_room`变量➌，类似于我们在[第1章](ch01.xhtml#ch01)中如何改变太空行走宇航员的*x*和*y*位置（参见[清单
    1-4](ch01.xhtml#ch01list4)）。要在地图中上下移动一行，我们通过游戏地图的宽度来改变`current_room`的数字。例如，要从32号房间上移一行，我们减去5进入27号房间（参见[图4-1](ch04.xhtml#ch04fig1)）。如果房间号发生变化，程序会打印出`current_room`变量➏。`str()`函数将房间号转换为字符串➐，以便与`"Entering
    room:"`字符串连接。若不使用`str()`函数，无法将数字与字符串连接。'
- en: Finally, we schedule the `movement` function to run at regular intervals ➑,
    as we did in [Chapter 1](ch01.xhtml#ch01). This time, we have a longer gap between
    each time the function runs (0.1 seconds), so the keys are less responsive.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们安排`movement`函数按固定间隔运行➑，就像我们在[第1章](ch01.xhtml#ch01)中所做的那样。这次，我们将函数运行之间的间隔时间加长（0.1秒），因此按键响应会稍微迟钝一些。
- en: From the command line, navigate to your *escape* folder and run the program
    from the command line using pgzrun listing4-3.py.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行进入你的*escape*文件夹，并使用命令行运行程序，命令为`pgzrun listing4-3.py`。
- en: The screen should be similar to [Figure 4-4](ch04.xhtml#ch04fig4), which shows
    the walls and doorways for room 31.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕应该与[图4-4](ch04.xhtml#ch04fig4)相似，显示的是31号房间的墙壁和门道。
- en: '![image](../images/fig4-4.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-4.jpg)'
- en: '*Figure 4-4: The* Explorer *shows your starting room in 3D.*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-4：*Explorer *以3D展示你的起始房间。*'
- en: 'Now you can use the arrow keys to explore the map. The program will draw a
    room for you and enable you to go to the neighboring rooms by pressing an arrow
    key. At this point, you only see the shell of the room: walls and floor. We’ll
    add more objects in the rooms and your character later.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用箭头键来探索地图。程序将为你绘制房间，并允许你通过按箭头键进入邻近房间。此时，你只能看到房间的外壳：墙壁和地板。稍后我们将在房间中添加更多物体以及你的角色。
- en: 'At the moment, you can walk in any direction, including through walls: the
    program doesn’t check for any movement errors. If you walk off the left of the
    map, you’ll reappear on the right, a row higher. If you walk off the right, you’ll
    reappear on the left, a row lower. If you try to go off the top or the bottom
    of the map, the program will return you to room 1 (at the top) or room 50 (at
    the bottom). For example, if the room number is more than (`>`) 50 ➍ it’s reset
    to 50 ➎. In this code, I’ve lowered the sensitivity of the keys to reduce the
    risk of whizzing through the rooms too fast. If you find the controls unresponsive
    or sluggish, you might need to press the keys for slightly longer.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你可以朝任何方向走，包括穿过墙壁：程序不会检查任何移动错误。如果你走出地图的左边，你会在右边重新出现，高一个行。如果你走出右边，你会在左边重新出现，低一个行。如果你试图走出地图的顶部或底部，程序会将你带回房间1（顶部）或房间50（底部）。例如，如果房间号超过（`>`）50
    ➍，它会重置为50 ➎。在这段代码中，我降低了键盘的灵敏度，以减少快速穿过房间的风险。如果你发现控制反应迟钝或缓慢，可能需要稍微按住键更长时间。
- en: Explore the space station and compare what you see on screen with the map in
    [Figure 4-1](ch04.xhtml#ch04fig1). If you see any errors, go back to the `GAME_MAP`
    data to check the data, and then take another look at the `generate_map()` function
    to make sure it’s been entered correctly. To help you follow the map, when you
    move to a new room, its number will appear in the command line window where you
    entered the `pgzrun` command, as shown in [Figure 4-5](ch04.xhtml#ch04fig5).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 探索太空站，并将你在屏幕上看到的内容与[图 4-1](ch04.xhtml#ch04fig1)中的地图进行对比。如果发现任何错误，返回`GAME_MAP`数据检查数据，然后再检查`generate_map()`函数，确保其输入正确。为了帮助你跟随地图，当你进入新房间时，其编号会出现在你输入`pgzrun`命令的命令行窗口中，如[图
    4-5](ch04.xhtml#ch04fig5)所示。
- en: '![image](../images/fig4-5.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-5.jpg)'
- en: '*Figure 4-5: The command line window tells you which room you’re entering.*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-5：命令行窗口告诉你正在进入哪个房间。*'
- en: 'Also, check that exits exist from both sides: if you go through a door and
    it isn’t there when you look from the other side, `generate_map()` has been entered
    incorrectly. Follow along on the map first to make sure you’re not going off the
    edge of the map and coming back on the other side before you start debugging.
    It’s worth taking the time to make sure your map data and functions are all correct
    at this point, because broken map data can make it impossible to complete the
    *Escape* game!'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，检查出口是否存在于两侧：如果你通过一扇门，而从另一侧看时它不在那里，说明`generate_map()`输入错误。在开始调试之前，先跟随地图，确保自己没有走出地图的边界并从另一侧返回。此时，花时间确保你的地图数据和函数是正确的非常值得，因为破损的地图数据会使得无法完成*Escape*游戏！
- en: '**TRAINING MISSION #2**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: To enjoy playing *Escape* and solving the puzzles, I recommend that you use
    the data I’ve provided for the game map. It’s best not to change the data until
    you’ve completed playing the game and have decided to redesign it. Otherwise,
    objects might be in locations you can’t reach, making the game impossible to complete.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地享受玩*Escape*并解决谜题，我建议你使用我为游戏地图提供的数据。在完成游戏并决定重新设计之前，最好不要更改数据。否则，物品可能会出现在你无法到达的位置，导致游戏无法完成。
- en: However, you can safely extend the map. The easiest way to do so is to add another
    row of rooms at the bottom of the map, making sure a door connects at least one
    of the new rooms to the existing bottom row of the map. Remember to change the
    `MAP_HEIGHT` variable. You’ll also need to change the number 50 in the *Explorer*
    code (*listing4-3.py*) to your highest room number (see ➍ and ➎). Why not add
    a corridor now?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，你可以安全地扩展地图。最简单的方法是，在地图底部再添加一排房间，确保至少有一扇门将新房间与现有的底部行连接。记得修改`MAP_HEIGHT`变量。你还需要将*Explorer*代码（*listing4-3.py*）中的数字50更改为你的最高房间编号（见
    ➍ 和 ➎）。为什么不现在就加一个走廊呢？
- en: '**MAKING YOUR OWN MAPS**'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作你自己的地图**'
- en: After you’ve finished building and playing *Escape*, you can customize the map
    or design your own game layouts using this code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 完成构建和游玩*Escape*后，你可以使用这段代码自定义地图或设计自己的游戏布局。
- en: If you want to add your own map data for rooms 1 to 25, delete the code that
    generates their data automatically (see ➏ in [Listing 4-1](ch04.xhtml#ch04list1)).
    You can then add your own data for these rooms.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为房间1到25添加自己的地图数据，可以删除自动生成它们数据的代码（见 ➏ 在[Listing 4-1](ch04.xhtml#ch04list1)中）。然后你可以为这些房间添加自己的数据。
- en: Alternatively, if you don’t want to use the planet surface locations, just block
    the exit to them. The exit onto the planet surface is in room 26\. Change that
    room’s entry in the `GAME_MAP` list so it doesn’t have a top exit. You can use
    room numbers starting at room 26 and extend the map downward to make a game that
    is completely indoors. As a result, you won’t need to make any code changes to
    account for the planet surface.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你不想使用星球表面的位置，可以直接阻止出口通向它们。通往星球表面的出口位于第26号房间。修改该房间在`GAME_MAP`列表中的条目，使其没有顶部出口。你可以从第26号房间开始使用房间编号，向下扩展地图，制作一个完全在室内的游戏。这样，你就不需要对星球表面进行任何代码修改。
- en: If you remove a doorway from the *Escape* game map (including the one in room
    26), you might also need to remove a door. Some of the exits at the top and bottom
    of the room will have doors that seal them off. (We’ll add doors to the *Escape*
    game in [Chapter 11](ch11.xhtml#ch11).)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从*逃脱*游戏地图中移除一个门（包括第26号房间的门），你可能还需要移除一扇门。房间顶部和底部的一些出口会有门将其封闭。（我们将在[第11章](ch11.xhtml#ch11)中添加门到*逃脱*游戏中。）
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你适合飞行吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框，以确认你已经学会了本章的关键知识点。
- en: '![Images](../images/box.jpg)  The `GAME_MAP` list stores the main map data
    for *Escape*.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) `GAME_MAP`列表存储*逃脱*游戏的主要地图数据。'
- en: '![Images](../images/box.jpg)  The `GAME_MAP` only needs to store the exit at
    the top and right of a room.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) `GAME_MAP`只需要存储房间顶部和右侧的出口。'
- en: '![Images](../images/box.jpg)  When the player visits a room, the `generate_map()`
    function makes the `room_map` list for the current room. The `room_map` list describes
    where the walls and objects are in the room.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) 当玩家访问一个房间时，`generate_map()`函数会为当前房间生成`room_map`列表。`room_map`列表描述了房间内墙壁和物体的位置。'
- en: '![Images](../images/box.jpg)  Locations 1 to 25 are on the planet surface,
    and a loop generates their map data. Locations 26 to 50 are the space station
    rooms, and you need to input their data manually.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) 位置1到25在星球表面，循环会生成它们的地图数据。位置26到50是太空站房间，你需要手动输入它们的数据。'
- en: '![Images](../images/box.jpg)  We use comments to help us find our way around
    the *Escape* program listing.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) 我们使用注释帮助我们在*逃脱*程序列表中找到位置。'
- en: '![Images](../images/box.jpg)  When adding data using a program in script mode,
    you can use the shell to check the contents of lists and variables to make sure
    the program is working correctly. Remember to run the program first to set up
    the data!'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) 当使用脚本模式的程序添加数据时，你可以使用shell检查列表和变量的内容，以确保程序正常工作。记得先运行程序来设置数据！'
- en: '![Images](../images/box.jpg)  The *Explorer* code enables you to look at every
    room in the game map using the arrow keys.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) *Explorer*代码允许你使用箭头键查看游戏地图中的每个房间。'
- en: '![Images](../images/box.jpg)  It’s important to make sure the game map matches
    [Figure 4-1](ch04.xhtml#ch04fig1). Otherwise, it might not be possible for players
    to complete the *Escape* game. You can use the *Explorer* program to do this.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg) 确保游戏地图与[图4-1](ch04.xhtml#ch04fig1)相匹配非常重要。否则，玩家可能无法完成*逃脱*游戏。你可以使用*Explorer*程序来检查这一点。'
- en: '![image](../images/f0077-01.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0077-01.jpg)'
