["```py\n\ndef f(x):\n\n    return 6*x**2 - 12*x + 3\n\ndef d(x):\n\n    return 12*x - 12\n```", "```py\n   import numpy as np\n\n   import matplotlib.pylab as plt\n\n❶ x = np.linspace(-1,3,1000)\n\n   plt.plot(x,f(x))\n\n❷ x = -0.9\n\n   eta = 0.03\n\n❸ for i in range(15):\n\n      plt.plot(x, f(x), marker='o', color='r')\n\n    ❹ x = x - eta * d(x)\n```", "```py\n\ndef f(x,y):\n\n    return 6*x**2 + 9*y**2 - 12*x - 14*y + 3\n\ndef dx(x):\n\n    return 12*x - 12\n\ndef dy(y):\n\n    return 18*y - 14\n```", "```py\nN = 100\n\nx,y = np.meshgrid(np.linspace(-1,3,N), np.linspace(-1,3,N))\n\nz = f(x,y)\n\nplt.contourf(x,y,z,10, cmap=\"Greys\")\n\nplt.contour(x,y,z,10, colors='k', linewidths=1)\n\nplt.plot([0,0],[-1,3],color='k',linewidth=1)\n\nplt.plot([-1,3],[0,0],color='k',linewidth=1)\n\nplt.plot(1,0.7777778,color='k',marker='+')\n```", "```py\nx = xold = -0.5\n\ny = yold = 2.9\n\nfor i in range(12):\n\n    plt.plot([xold,x],[yold,y], marker='o', linestyle='dotted', color='k')\n\n    xold = x\n\n    yold = y\n\n    x = x - 0.02 * dx(x)\n\n    y = y - 0.02 * dy(y)\n```", "```py\n\ndef f(x,y):\n\n    return -2*np.exp(-0.5*((x+1)**2+(y-1)**2)) + \\\n\n           -np.exp(-0.5*((x-1)**2+(y+1)**2))\n\ndef dx(x,y):\n\n    return 2*(x+1)*np.exp(-0.5*((x+1)**2+(y-1)**2)) + \\\n\n           (x-1)*np.exp(-0.5*((x-1)**2+(y+1)**2))\n\ndef dy(x,y):\n\n    return (y+1)*np.exp(-0.5*((x-1)**2+(y+1)**2)) + \\\n\n           2*(y-1)*np.exp(-0.5*((x+1)**2+(y-1)**2))\n```", "```py\n   import matplotlib.pylab as plt\n\n   def f(x):\n\n       return 6*x**2 - 12*x + 3\n\n   def d(x):\n\n       return 12*x - 12\n\n❶ m = ['o','s','>','<','*','+','p','h','P','D']\n\n   x = np.linspace(0.75,1.25,1000)\n\n   plt.plot(x,f(x))\n\n❷ x = xold = 0.75\n\n   eta = 0.09\n\n   mu = 0.8\n\n   v = 0.0\n\n   for i in range(10):\n\n    ❸ plt.plot([xold,x], [f(xold),f(x)], marker=m[i], linestyle='dotted',\n\n       color='r')\n\n       xold = x\n\n       v = mu*v - eta * d(x)\n\n       x = x + v\n\n   for i in range(40):\n\n       v = mu*v - eta * d(x)\n\n       x = x + v\n\n❹ plt.plot(x,f(x),marker='X', color='k')\n```", "```py\n\n   def gd(x,y, eta,mu, steps, marker):\n\n       xold = x\n\n       yold = y\n\n    ❶ vx = vy = 0.0\n\n       for i in range(steps):\n\n           plt.plot([xold,x],[yold,y], marker=marker,\n\n                    linestyle='dotted', color='k')\n\n xold = x\n\n           yold = y\n\n        ❷ vx = mu*vx - eta * dx(x,y)\n\n           vy = mu*vy - eta * dy(x,y)\n\n        ❸ x = x + vx\n\n           y = y + vy\n\n❹ gd( 0.7,-0.2, 0.1, 0.9, 25, '>')\n\n   gd( 1.5, 1.5, 0.02, 0.9, 90, '*')\n```", "```py\n\ndef __init__(self, input_size, output_size, momentum=0.0):\n\n    self.delta_w = np.zeros((input_size, output_size))\n\n    self.delta_b = np.zeros((1,output_size))\n\n    self.passes = 0\n\n    self.weights = np.random.rand(input_size, output_size) - 0.5\n\n    self.bias = np.random.rand(1, output_size) - 0.5\n\n ❶ self.vw = np.zeros((input_size, output_size))\n\n    self.vb = np.zeros((1, output_size))\n\n    self.momentum = momentum\n```", "```py\n\ndef step(self, eta):\n\n ❶ self.vw = self.momentum * self.vw - eta * self.delta_w / self.passes\n\n    self.vb = self.momentum * self.vb - eta * self.delta_b / self.passes\n\n ❷ self.weights = self.weights + self.vw\n\n    self.bias = self.bias + self.vb\n\n    self.delta_w = np.zeros(self.weights.shape)\n\n    self.delta_b = np.zeros(self.bias.shape)\n\n    self.passes = 0\n```", "```py\nnet = Network()\n\nnet.add(FullyConnectedLayer(14*14, 100, momentum=0.9))\n\nnet.add(ActivationLayer())\n\nnet.add(FullyConnectedLayer(100, 50, momentum=0.9))\n\nnet.add(ActivationLayer())\n\nnet.add(FullyConnectedLayer(50, 10, momentum=0.9))\n\nnet.add(ActivationLayer())\n```", "```py\nx_train = np.load(\"fmnist_train_images_small.npy\")/255\n\nx_test = np.load(\"fmnist_test_images_small.npy\")/255\n\ny_train = np.load(\"fmnist_train_labels_vector.npy\")\n\ny_test = np.load(\"fmnist_test_labels.npy\")\n```", "```py\n\n[[866   1  14  28   8   1  68   0  14   0]\n\n [  5 958   2  25   5   0   3   0   2   0]\n\n [ 20   1 790  14 126   0  44   1   3   1]\n\n [ 29  21  15 863  46   1  20   0   5   0]\n\n [  0   0  91  22 849   1  32   0   5   0]\n\n [  0   0   0   1   0 960   0  22   2  15]\n\n [161   2 111  38 115   0 556   0  17   0]\n\n [  0   0   0   0   0  29   0 942   0  29]\n\n [  1   0   7   5   6   2   2   4 973   0]\n\n [  0   0   0   0   0   6   0  29   1 964]]\n\naccuracy = 0.8721000\n\nMCC = 0.8584048\n```", "```py\n\n[[766   5  14  61   2   1 143   0   8   0]\n\n [  1 958   2  30   3   0   6   0   0   0]\n\n [ 12   0 794  16  98   0  80   0   0   0]\n\n [  8  11  13 917  21   0  27   0   3   0]\n\n [  0   0  84  44 798   0  71   0   3   0]\n\n [  0   0   0   1   0 938   0  31   1   29]\n\n [ 76   2  87  56  60   0 714   0   5   0]\n\n [  0   0   0   0   0  11   0 963   0  26]\n\n [  1   1   6   8   5   1  10   4 964   0]\n\n [  0   0   0   0   0   6   0  33   0 961]]\n\naccuracy = 0.8773000\n\nMCC = 0.8638721\n```", "```py\nno momentum: 0.85778 +/- 0.00056\n\nmomentum   : 0.86413 +/- 0.00075\n\nt-test momentum vs no (t,p): (6.77398299, 0.00000003)\n\nMann-Whitney U             : (41.00000000, 0.00000126)\n\nCohen's d                  : 2.04243\n```"]