- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
- en: This is a book about computational thinking through the lens of *data structures*,
    constructs for organizing and storing data. It is more than a cookbook of handy
    data structures. Rather, it explores the thinking behind these structures and
    their fundamental impact on solving complex problems, using real-world analogies
    to make abstract computational concepts intuitive. The goal of this book is to
    provide new insights into how you can use preexisting structure within the data
    to your advantage or create new structures to efficiently solve problems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Among other things, I discuss the differences between arrays and linked lists,
    the complexity and power of pointers, the effect of data structures on algorithmic
    behavior, the branching of tree-based data structures, mathematical mappings in
    hash tables, and the usefulness of randomization. In short, you’ll learn to think
    about algorithms by investigating different ways to organize the data they process.
    You’ll also apply these computational approaches to real-world problems, a surprising
    number of which focus on procuring a decent cup of coffee.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how data structures function is critical to using them effectively.
    Just as an experienced carpenter wouldn’t pound screws into wood with a hammer
    or use sandpaper to cut a two-by-four in half, an experienced programmer needs
    to choose the right tools for every job. As we’ll see repeatedly throughout the
    following chapters, every data structure comes with tradeoffs. Saws cut through
    wood more effectively than sandpaper but create coarse edges. There is no single
    data structure that is perfect for every possible use case, but this is what makes
    computer science and the development of algorithms so interesting. A good computer
    scientist must understand how different data structures behave in order to determine
    where they can be best used.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on a few canonical data structures and uses them to explore
    fundamental themes in computational thinking. Each of these data structures is
    a useful exemplar of a more general class of data structures and of a conceptual
    approach. For example, B-trees demonstrate one approach to the problems of keeping
    search trees balanced and optimizing for expensive memory accesses. I discuss
    the tradeoffs between memory usage and accuracy with Bloom filters; the use of
    randomization with skip lists; and how to capture multidimensional structure with
    grids, quadtrees, or k-d trees. As such, this book is neither an introduction
    to programming, a comprehensive anthology of data structures, nor a full analysis
    of brewing coffee (although we will touch repeatedly on this important topic).
    Our goals are different—to develop mental tools that apply across a range of specific
    problems and programming languages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Intended Audience
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is for anyone who wants to learn more about the thinking behind the
    data structures that lie at the heart of computer science. I assume such basic
    familiarity with programming as can be expected after taking an introductory course,
    participating in a boot camp, or working through a beginners’ programming book.
    Readers should be familiar with fundamental programming concepts such as variables,
    loops, and conditional statements. Some more adventurous readers might even have
    coded up some of the data structures or algorithms in this book already or might
    do so as they read through it. However, you won’t need to know the specific details
    of particular programming languages or algorithms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于任何希望了解计算机科学核心数据结构背后思维方式的人。我假设读者对编程有一定的基础了解，例如参加过入门课程、参加过编程训练营或完成过初学者编程书籍。读者应当熟悉基本的编程概念，如变量、循环和条件语句。一些更具冒险精神的读者可能已经编写过本书中的某些数据结构或算法，或者在阅读过程中会动手实现它们。然而，你不需要了解特定编程语言或算法的具体细节。
- en: I hope this book appeals to a wide range of audiences. Practitioners who have
    learned basic programming from an introductory course will find an introduction
    to computational thinking that can provide a foundation for future investigation.
    Students will find a new way to understand particularly difficult or tricky topics.
    Mathematicians will learn new names and jargon for ideas they’ve used since well
    before computer science existed. And experienced computer scientists will find
    amusing new analogies to explain concepts they use every day.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望本书能够吸引广泛的读者群体。那些从入门课程中学习过基本编程的从业者，将会发现本书介绍了计算思维，为未来的深入探索打下基础。学生们将会找到一种理解特别难懂或棘手话题的新方法。数学家们将学习到计算机科学出现之前就已经使用的概念的新名称和术语。而经验丰富的计算机科学家们将会发现一些有趣的类比，用以解释他们日常使用的概念。
- en: Language-Agnostic
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与语言无关
- en: This book is designed to apply to a wide range of programming languages. While
    this might come as a disappointment to the more opinionated readers who want to
    either (a) see their favorite language featured throughout these pages or (b)
    argue about the author’s terrible language preferences and how they must reflect
    suboptimal life choices (since programming languages, like sports teams, are always
    a topic for heated debate), the concepts presented in the book are generally applicable
    across a range of languages. You can implement a binary search tree in almost
    any language, for instance. In fact, most programming languages already include
    many of these basic data structures as part of their core language or a standard
    library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在适用于多种编程语言。尽管这可能会让一些意见更为坚定的读者感到失望，他们希望（a）看到自己喜欢的编程语言贯穿整本书，或者（b）就作者的语言偏好展开争论，认为这些偏好反映了低效的生活选择（因为编程语言就像体育队伍一样，总是能引发激烈的争论），但本书中呈现的概念通常适用于多种语言。例如，你几乎可以在任何语言中实现一个二叉搜索树。事实上，大多数编程语言已经将许多这些基本数据结构作为核心语言或标准库的一部分。
- en: The book uses pseudocode examples that are largely based on Python’s general
    syntax, since Python is a widely used and easily readable programming language.
    I denote code blocks via indentation, use standard equality notation (`==` for
    equal and `!=` for not equal), use `True` and `False` to indicate Boolean values,
    denote comments with lines starting with the `#` symbol, and pass composite data
    structures as references. Arrays are zero indexed, and the value at index `i`
    is referenced as `arr[i]`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了大部分基于 Python 通用语法的伪代码示例，因为 Python 是一种广泛使用且易于阅读的编程语言。我通过缩进来表示代码块，使用标准的等式符号（`==`
    表示相等，`!=` 表示不相等），用 `True` 和 `False` 表示布尔值，用 `#` 符号开头的行表示注释，并传递复合数据结构作为引用。数组是从零开始索引的，索引
    `i` 处的值可以表示为 `arr[i]`。
- en: 'However, I also deviate from the Python syntax wherever this aids readability.
    I specify all variables as `Type: Name` to make the types explicit, and I use
    the value `null` to indicate a null pointer. I often use `WHILE` loops over `FOR`
    loops or other compact forms to clearly show how the loop is iterating and its
    termination condition.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，每当有助于提高可读性时，我也会偏离 Python 的语法。我将所有变量指定为 `Type: Name`，以明确类型，并使用 `null` 值来表示空指针。我经常使用
    `WHILE` 循环而不是 `FOR` 循环或其他紧凑的形式，以清晰地展示循环的迭代方式和终止条件。'
- en: 'I’ve intentionally kept the examples in this book simple in order to focus
    on the computational ideas behind them. This means that individual implementations
    may not be fully optimized and will often be more verbose than strictly necessary.
    Throughout the text, I break out different conditions to illustrate the thought
    process behind the approach. At times the implementations vary from programming
    best practices in order to structure the code in a way that matches the explanation.
    In addition, to keep the examples simple, I often leave out the basic validity
    checks that are vital to include in production programs, such as checking that
    our array access is inbounds. Needless to say, treat these examples only as illustrations
    of the concepts at hand, rather than using them verbatim in your own projects.
    This is a good rule in general: never treat pseudocode as a full implementation.
    Always incorporate the relevant testing, validity checks, and other best practices
    when implementing algorithms yourself.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意将本书中的例子保持简洁，以便集中关注它们背后的计算思想。这意味着个别实现可能并未经过充分优化，且往往比严格必要的更冗长。在整个文本中，我会拆分不同的条件，来说明背后思考过程。有时，为了将代码结构与解释相匹配，某些实现会偏离编程最佳实践。此外，为了保持例子简洁，我经常省略那些在生产程序中至关重要的基本有效性检查，比如检查数组访问是否越界。不用说，应该将这些例子仅仅视为概念的说明，而不是照搬到你自己的项目中。一般来说，这是一个好的规则：永远不要把伪代码当作完整的实现。实现算法时，务必融入相关的测试、有效性检查和其他最佳实践。
- en: On Analogies and Brewing Coffee
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于类比和冲泡咖啡
- en: This book makes extensive use of metaphor and analogy, illustrating complex
    technical concepts by comparison to (sometimes absurd) real-world scenarios. Similes
    are scattered through this book like blueberries through a muffin. Each chapter
    explains the intricate working of data structures and algorithms with examples
    ranging from organizing your kitchen to determining whether you’ve ever tried
    a specific brew of coffee, inviting you to consider how these computational concepts
    work in a different way from computer code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书广泛运用隐喻和类比，通过与（有时荒谬的）现实世界场景的比较来说明复杂的技术概念。类比像蓝莓一样散布在本书的每一章中。每一章都通过从整理厨房到判断你是否尝试过某种特定咖啡的例子，来解释数据结构和算法的复杂工作原理，邀请你以不同于计算机代码的方式思考这些计算概念是如何运作的。
- en: The examples will often bend the rules of reality, be oversimplified, or border
    on the ridiculous. For example, we repeatedly consider the question of storing
    and sorting extensive coffee collections, ignoring the tragic fact that coffee
    does go stale. While that means this book is not a strictly realistic guide to
    making the ultimate cup of coffee, the absurd analogies keep things fun and should
    encourage you to think outside your normal approaches. Simplifying the analogies
    allows us to focus on just those aspects that are critical to the computational
    concept. For example, when discussing the use of nearest-neighbor search to find
    a close cup of coffee, I focus on distances (the core computational concept) and
    neglect such complicating factors as fences or rivers. My goal is to tailor the
    analogy to the core of the problem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子往往会违反现实规则，过于简化，甚至有些荒谬。例如，我们反复探讨如何存储和排序大量咖啡收藏，忽略了咖啡确实会变 stale（失去新鲜）。虽然这意味着本书并不是一份严格的终极咖啡制作指南，但这些荒谬的类比让内容更有趣，并应该激励你跳出常规思维方式。简化类比使我们能够集中注意那些对计算概念至关重要的方面。例如，在讨论使用最近邻搜索找到一杯近似咖啡时，我聚焦于“距离”（核心计算概念），忽略了像篱笆或河流这样的复杂因素。我的目标是将类比集中在问题的核心。
- en: I use analogies to augment formal descriptions and precise code. Personally,
    I find it easier to break free from technicalities and minutiae when viewing a
    data structure’s operation in an active, narrative context with people (or even
    overcaffeinated squirrels) interacting with physical objects, rather than sticking
    to the vocabulary of `FOR` loops and variable counters. Visualizing a frantic
    chase through a maze of alleyways provides a different perspective of a graph
    algorithm from the formal context of iterating over abstract nodes and edges.
    I encourage readers to map these analogies to their own broad range of concepts,
    whether part of their daily life or fancies of the absurd.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用类比来补充正式的描述和精确的代码。从个人来说，我发现当以一种活跃的叙述情境来看待数据结构的操作时，更容易摆脱技术细节和琐事——比如让人们（或者甚至是过度喝咖啡的松鼠）与物理对象互动，而不是拘泥于`FOR`循环和变量计数器的术语。将一次在迷宫小巷中的疯狂追逐与图算法的形式化背景——遍历抽象节点和边——对比，能提供一种不同的视角。我鼓励读者将这些类比与他们自己日常生活或荒诞幻想中的广泛概念相对照。
- en: How to Use This Book
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用本书
- en: The book is structured progressively. That is, while each chapter focuses on
    a different computational concept—either a data structure or motivating problem—each
    also builds upon the previous chapters. Most of the later chapters, for example,
    rely on the discussion of memory-linked data structures and the use of pointers
    introduced in Chapter 3. We return to the basic binary search tree structure introduced
    in Chapter 5 again and again as we examine variations of branching data structures.
    Thus, I recommend that you approach the chapters in order.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的结构是逐步递进的。也就是说，虽然每一章聚焦于不同的计算概念——无论是数据结构还是驱动问题——但每一章也都是在前一章的基础上展开的。例如，大多数后续章节依赖于第3章中介绍的内存链接数据结构和指针的使用。当我们探讨分支数据结构的变体时，会反复回到第5章中介绍的基本二叉搜索树结构。因此，我建议你按照顺序逐章阅读。
- en: 'As we explore different data structures and how they apply to various problems,
    we will see consistent themes appear, including:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索不同的数据结构以及它们如何应用于各种问题时，会出现一些持续的主题，包括：
- en: The impact of the data’s structure on algorithms accessing it
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构对访问算法的影响
- en: How to think about performance in the worst case
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何思考最坏情况的性能
- en: The importance of allowing for dynamic changes in your data set and how to efficiently
    enable these changes
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许数据集进行动态变化的重要性，以及如何高效地实现这些变化
- en: Tradeoffs among memory, runtime, code complexity, and accuracy
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存、运行时间、代码复杂性和准确性之间的权衡
- en: How we may need to tune data structures for the problem and what tradeoffs to
    consider
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能需要如何调整数据结构以适应问题，以及需要考虑的权衡
- en: How we can adapt data structures to tackle new problems
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何调整数据结构来解决新的问题
- en: These themes provide both a framework for thinking about the data structures
    and a set of questions to ask when facing a new problem. A critical aspect of
    choosing the data structure is understanding why it performs the way it does and
    how it will apply to new data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题提供了一个思考数据结构的框架，并且为面对新问题时提供了一些要问的问题。选择数据结构的一个关键方面是理解它为何如此表现，以及它如何应用于新的数据。
- en: Most of all, the two questions that you should keep in mind throughout the book
    are “How?” and “Why?” *How* does a given data structure enable a computation?
    *How* do we structure the data to maximize efficiency in a given context? *Why*
    does a given structure enable these computations? *How* does this data structure
    break down in a different context? *Why* is the author using that ridiculous analogy?
    *Why* is the author so obsessed with coffee? Understanding the answers to these
    questions (other than the last one) will provide the foundation you need to effectively
    use already-existing data structures and develop novel techniques in the future.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，你在整个书中应该时刻记住的两个问题是“如何？”和“为什么？”*如何*使得给定的数据结构能够完成某个计算？*如何*在特定的背景下组织数据以最大化效率？*为什么*给定的数据结构能完成这些计算？*如何*在不同的背景下该数据结构会崩溃？*为什么*作者使用那个荒谬的类比？*为什么*作者如此痴迷咖啡？理解这些问题的答案（除了最后一个）将为你有效使用现有数据结构并在未来开发新技术奠定基础。
