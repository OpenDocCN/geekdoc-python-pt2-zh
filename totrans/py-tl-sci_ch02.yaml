- en: '**2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: KEEPING ORGANIZED WITH CONDA ENVIRONMENTS**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each of your Python projects should have its own conda environment. Conda environments
    let you use any version of any package you want, including Python, without the
    risk of compatibility conflicts. You can organize your packages based on project
    needs rather than cluttering your base directory with unnecessary packages. And
    you can share your environments with others, making it possible for them to perfectly
    reproduce your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda Navigator, introduced in the previous chapter, provides an easy point-and-click
    interface for managing environments and packages. For even more control, conda
    lets you perform similar tasks using text commands in Anaconda Prompt (for Windows)
    or in a terminal (for macOS or Linux).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll use both Navigator and conda to create conda environments,
    install packages, manage the packages, remove the environment, and more. Before
    we begin, let’s take a closer look at why a conda environment is useful.
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding Conda Environments**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can think of conda environments as separate Python installations. The *conda
    environment manager*, represented by the cargo ship in [Figure 2-1](ch02.xhtml#ch02fig1),
    treats each environment much like a secure shipping container. Each “container”
    can have its own version of both Python and any other packages you need to run
    for a specific project. These containers are nothing more than dedicated directories
    in your computer’s directory tree.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-1: A conceptual diagram for the conda environment and package managers*'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Figure 2-1](ch02.xhtml#ch02fig1), you can have different versions
    of Python and different versions of the same libraries loaded on your computer.
    If they’re in separate environments, they’ll be isolated and won’t conflict with
    one another. This is important because you might inherit legacy projects that
    run only with older versions of some packages.
  prefs: []
  type: TYPE_NORMAL
- en: The *conda package manager*, represented by the crane in [Figure 2-1](ch02.xhtml#ch02fig1),
    finds and installs packages into your environments. Think of each package as a
    separate item packed in a shipping container like that heavy box of *National
    Geographic* magazines you should’ve recycled years ago.
  prefs: []
  type: TYPE_NORMAL
- en: The package manager ensures that you have the latest stable version of a package
    or of a version that you specify. It also finds and loads all the *dependencies*
    the main package needs to run at the correctly matched versions. A dependency
    is just another Python package that provides supporting functionality. For example,
    Matplotlib (for plotting) and pandas (for data analysis) are both built on NumPy
    (Numerical Python) and won’t run without it. For this reason, it’s best to install
    all the packages that you’re going to need for a project at the same time, if
    possible, to avoid dependency conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re worried that installing packages in each conda environment is poor
    space management, set your mind to rest. No copies are created. Conda downloads
    packages into a package cache, and each environment links to the appropriate packages
    in this cache.
  prefs: []
  type: TYPE_NORMAL
- en: By default, this package cache is in the *pkgs* directory of your Anaconda distribution.
    To find it, open Anaconda Prompt or a terminal (see the instructions in [Chapter
    1](ch01.xhtml)) and enter conda info. Depending on your operating system, you
    should find the package cache at *C:\Users\<username>\anaconda3\pkgs* (Windows),
    *~/opt/anaconda3* (macOS), or */home/<username>/anaconda3/pkgs* (Linux).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, *<username>* here refers to your personal username. The macOS location
    shown is for the graphical installation. If you installed Anaconda using the shell,
    you can find it at */Users/<username>/anaconda3*. In any case, the `conda info`
    command will reveal its location.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*By default, each user has their own package cache that’s not shared with anyone
    else. It’s possible to set up a shared package cache to save disk space and reduce
    installation times. If you want to share packages among multiple users, see the
    instructions at [https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/](https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/).*'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `conda info` command (or `conda info --envs`) to show where
    your conda environments are stored. In Windows, for example, the default location
    is *C:\Users\<username>\anaconda3\envs*.
  prefs: []
  type: TYPE_NORMAL
- en: The base environment is created by default when you install Anaconda, and it
    includes a Python installation and core system libraries and dependencies of conda.
    As a general guideline, *avoid installing additional packages into your base environment*.
    If you need to install additional packages for a new project, first create a new
    conda environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONDA AND PIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll occasionally encounter a package that can’t be installed with conda.
    In this case, you’ll need to do so using the Python *package management system
    (pip)*. Conda and pip work similarly with two exceptions. First, pip works only
    with Python, whereas conda works with multiple languages. Second, pip installs
    packages from the *Python Package Index* (*[https://pypi.org/](https://pypi.org/)*),
    otherwise known as *PyPI*, whereas conda installs packages from the *Anaconda
    repository* (*[https://repo.anaconda.com/](https://repo.anaconda.com/)*) and *[Anaconda.org](http://Anaconda.org)*
    (*[https://anaconda.org/](https://anaconda.org/)*). You can also install packages
    from PyPI in an active conda environment using pip. For your convenience, conda
    will automatically install a copy of pip in each new environment you create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, issues can arise when conda and pip are used together to create
    an environment, especially when the tools are used back to back multiple times,
    establishing a state that can be difficult to reproduce. Most of these issues
    stem from that fact that conda, like other package managers, has limited abilities
    to control packages that it did not install. When using conda and pip together,
    here are the general guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Install packages needing pip only after installing packages available through
    conda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t run pip in the root environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-create the conda environment from scratch if changes are needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store conda and pip requirements in an environment (text) file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details on this issue, see *[https://www.anaconda.com/blog/using-pip-in-a-conda-environment/](https://www.anaconda.com/blog/using-pip-in-a-conda-environment/)*.
    For more on pip, see *[https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment/](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment/)*.
    We’ll look at creating a requirements text file later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Working with Conda Environments Using Navigator**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting up your first conda environment is easy. In the sections that follow,
    we’ll use the Anaconda Navigator GUI to work with conda environments. Later in
    this chapter, we’ll use conda in Anaconda Prompt (or a terminal) to do the same
    things. Anaconda Prompt and Navigator were introduced in [Chapter 1](ch01.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: '***Launching Navigator***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Windows, go to the Start menu and click the Anaconda Navigator desktop app.
    In macOS, open Launchpad and then click the Anaconda-Navigator icon. In Linux,
    open a terminal window and enter anaconda-navigator.
  prefs: []
  type: TYPE_NORMAL
- en: When Navigator starts, it automatically checks for a new version. If you see
    an Update Application message box asking you if you would like to update Navigator,
    click **Yes**. For a review of the Navigator interface, see [Chapter 1](ch01.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating a New Environment***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Navigator, select the **Environments** tab and then click the **Create**
    button. This opens the Create New Environment dialog ([Figure 2-2](ch02.xhtml#ch02fig2)).
    Because this is your first environment, name it ***my_first_env***.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-2: The Navigator Create New Environment dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: Note the Location information in [Figure 2-2](ch02.xhtml#ch02fig2). By default,
    conda environments are stored in the *envs* folder within your Anaconda installation.
    For this reason, you must give each environment a unique name when using Navigator.
    It’s also possible to create environments in other locations using the command
    line interface. We’ll look at this option later in the section “Specifying an
    Environment’s Location” on [page 37](ch02.xhtml#ch00lev2sec20).
  prefs: []
  type: TYPE_NORMAL
- en: The first package installed is Python. By default, this is the same version
    of Python you used when you downloaded and installed Anaconda. If you want to
    install a different version, you can use the pull-down menu to select it.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**. In a minute or so, you should see the new environment on the
    Environments tab. You should now have two environments, *base (root)* and *my_first_env*.
    The arrow to the right of the name indicates that *my_first_env* is now the active
    environment ([Figure 2-3](ch02.xhtml#ch02fig3)). *Active* means that this is the
    environment in which you are now working, and any packages you load will be put
    in this folder. Clicking a name in the list activates that name and deactivates
    any other environments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-3: The newly created active environment (my_first_env) on the Navigator
    Environments tab*'
  prefs: []
  type: TYPE_NORMAL
- en: Also on the Environments tab is a listing of packages installed in *my_first_env*
    and their version numbers ([Figure 2-4](ch02.xhtml#ch02fig4)). At the bottom of
    the window, you can see that 12 packages were installed. These are all packages
    associated with Python. Over time, the number of packages may change, so you may
    see a different number.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-4: The list of initially installed packages on the Navigator Environments
    tab*'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you just created your first conda environment! You can start
    using Python right away. But if you need additional packages, such as pandas and
    NumPy, you must install them in this environment. So let’s get to it.
  prefs: []
  type: TYPE_NORMAL
- en: '***Managing Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After you create an environment, you can use the Environments tab to see which
    packages are installed, check for available packages, find a specific package
    and install it, and update and remove packages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding and Installing Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To find an installed package, activate the environment you want to search by
    clicking its name (see [Figure 2-3](ch02.xhtml#ch02fig3)). If the list of installed
    packages in the pane on the right is long and you don’t want to scroll, start
    typing the name of the package in the Search Packages box. This will reduce the
    number of packages displayed until only the package you want remains.
  prefs: []
  type: TYPE_NORMAL
- en: To find a package that is not installed, change the selection of packages displayed
    in the right pane by clicking the drop-down menu above it and selecting **Not
    installed** (see [Figure 2-5](ch02.xhtml#ch02fig5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-5: The list of available but uninstalled packages on the Navigator
    Environments tab*'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the lower left of [Figure 2-5](ch02.xhtml#ch02fig5), there are currently
    8,601 packages automatically available after you create the new environment (this
    number may change over time, so the one you see might be different). To see more
    packages, you can add a channel using the Channels button on the Environments
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Channels** to open a dialog ([Figure 2-6](ch02.xhtml#ch02fig6)). Then,
    enter **conda-forge** for access to the conda-forge community channel. This channel
    is made up of thousands of contributors who provide packages for a wide range
    of software (for more information, see *[https://conda-forge.org/docs/user/introduction.html](https://conda-forge.org/docs/user/introduction.html)*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-6: Adding conda-forge using the Channels dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: Press ENTER and then click the **Update channels** button to add conda-forge
    ([Figure 2-7](ch02.xhtml#ch02fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-7: Updating channels with the Channels dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: The pane on the right side of the Environments tab should now refresh to show
    that you have tens of thousands of packages available. You can remove channels
    by clicking the corresponding trash cans in the dialog (see [Figure 2-7](ch02.xhtml#ch02fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If a package you want isn’t available from Anaconda, you can try installing
    it from the Python Package Index ([PyPI.org/](http://PyPI.org/)) using pip, which
    conda installs by default in conda environments (see the “Conda and PIP” sidebar
    on [page 24](ch02.xhtml#ch00sidebar10)).*'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that we wanted to add NumPy and pandas. Because NumPy is a requirement
    for pandas, it’s included in the pandas dependencies list. Consequently, you need
    to install only pandas. Enter **pandas** in the search box at the top of the right
    pane ([Figure 2-8](ch02.xhtml#ch02fig8)). Then, click the checkbox next to the
    pandas package and click **Apply** at the lower right. To install multiple packages
    at the same time, click each of the corresponding checkboxes prior to clicking
    Apply.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-8: Finding and installing the pandas package on the Environments
    tab*'
  prefs: []
  type: TYPE_NORMAL
- en: A new dialog opens and, after a few moments, displays a list of packages on
    which pandas is dependent ([Figure 2-9](ch02.xhtml#ch02fig9)). As you can see,
    NumPy is among them. Click the **Apply** button to complete the installation of
    pandas.
  prefs: []
  type: TYPE_NORMAL
- en: If you switch to the Installed list, the number of installed packages will have
    increased, and the list will include both pandas and NumPy. Be aware that you
    might need to clear the Search Packages box to see the full list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-9: The list of packages to be installed including dependencies*'
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that some of the major libraries appear to be duplicated in
    the Not installed list. For example, you can choose between “matplotlib” and “matplotlib-base”
    ([Figure 2-10](ch02.xhtml#ch02fig10)). The “-base” options tend to be lighter
    versions for when a package, like Matplotlib, is used by other packages as a dependency.
    As a result, it might not be fully functional; thus, you should not install this
    “-base” version when installing packages like Matplotlib or NumPy. This way, you
    can be sure that everything will work with no surprises.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-10: There are two choices for the matplotlib library in the list
    of uninstalled packages.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating and Removing Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Over time, newer versions of installed packages may become available. To check
    for these, select the **Updatable** filter at the top of the right pane of the
    Environments tab ([Figure 2-11](ch02.xhtml#ch02fig11)). The list you see might
    not exactly match the one shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-11: The right pane of the Environments tab, showing installed packages
    with available updates*'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, Python is out of date, so let’s update it to the current version.
    If your version is already current, try updating another package in the Updatable
    list.
  prefs: []
  type: TYPE_NORMAL
- en: First, click the checkbox next to Python and then, from the pop-up menu, select
    **Mark for update** ([Figure 2-12](ch02.xhtml#ch02fig12)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-12: Click a package checkbox to open the menu for updating and removing
    packages.*'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Apply** button at the lower right. This will open the Update Packages
    window, showing you which packages will be modified and which will be installed
    ([Figure 2-13](ch02.xhtml#ch02fig13)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-13: The Update Packages window for updating Python*'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Apply** to continue. After a few minutes, Python will vanish from the
    Updatable list. Change the filter to **Installed** and you will see that the version
    of Python has changed. The Python version in the base (root) environment has not
    changed since all the changes you are making are to the *active* conda environment
    only, which is *my_first_env*.
  prefs: []
  type: TYPE_NORMAL
- en: You should be careful about updating packages for no reason, as other packages
    may be dependent on an older version. In the event you do break your environment
    in this way, it’s not the end of the world; you can restore it using an environment
    file, which we’ll discuss later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to install a *specific version* of a package, click the checkbox
    by the installed package name and use the menu in [Figure 2-12](ch02.xhtml#ch02fig12).
    Click **Mark for specific version installation** and then select the version number
    from the pop-up window that appears. Click **Apply** to launch the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the list of updatable packages is long and you don’t want to click each
    checkbox, you can use the command line for efficiency. On the Environments tab,
    click the triangular arrow beside the active environment’s name (see [Figure 2-3](ch02.xhtml#ch02fig3)).
    Then, select **Open Terminal** and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You’ll be shown a list of packages to be updated and asked to proceed or not.
    Later in this chapter, when we look at the command line interface, we’ll talk
    about this command in more detail. We’ll also discuss ways to lock or freeze a
    package so that it doesn’t update.
  prefs: []
  type: TYPE_NORMAL
- en: To remove a package from an environment, click its checkbox, select the **Mark
    for removal option** (see [Figure 2-12](ch02.xhtml#ch02fig12)), and then click
    **Apply**. This will remove the package, *including its dependencies*. That last
    part is important. If you remove pandas from *my_first_env*, you will also remove
    NumPy! To prevent this, you need to explicitly install NumPy before installing
    pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '***Duplicating Environments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Clone and Import buttons at the bottom of the Environments pane ([Figure
    2-14](ch02.xhtml#ch02fig14)) let you make an exact copy of an environment and
    create a new environment from a specifications file, respectively. To clone an
    environment, you first must activate that environment by clicking its name. When
    using Import, you’ll be prompted to name the new environment and point to a specifications
    file. We’ll look at creating a new environment from a file in more depth in the
    section “Duplicating and Sharing Environments” on [page 44](ch02.xhtml#ch00lev2sec22).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-14: Buttons along the bottom of the middle pane of the Environments
    tab help you to manage conda environments.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Backing Up Environments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In newer releases of Anaconda Navigator, you might see a Backup button beside
    the Import button. This button lets you back up your environments to the cloud
    and import them back. You can use this to checkpoint your work, keep a copy for
    disaster recovery, or migrate from machine to machine. You’ll need to have an
    Anaconda Nucleus account. For details, visit *[https://www.anaconda.com/blog/keeping-your-conda-environments-safe-and-secure-with-your-anaconda-nucleus-account/](https://www.anaconda.com/blog/keeping-your-conda-environments-safe-and-secure-with-your-anaconda-nucleus-account/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Removing Environments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To delete a conda environment, first click the name of the environment that
    you want to remove and then click the **Remove** button (with the trash can icon)
    at the bottom of the Environments tab ([Figure 2-14](ch02.xhtml#ch02fig14)). A
    pop-up window will then show you the location of the environment and request confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: It’s good practice to make an environment file before deleting an environment
    so that you can restore it if necessary. We go over how to do this in a later
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Also be aware that environments are folders, and any data that you store in
    that folder will be deleted when you remove the environment. You should keep data
    in a separate folder or folders.
  prefs: []
  type: TYPE_NORMAL
- en: '**Working with Conda Environments Using the Command Line Interface**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also work with conda environments in the *command line interface*, or
    *CLI* (pronounced *Clie*). Advanced users might prefer the control offered by
    this text-based interface to the point-and-click functionality offered by Navigator.
  prefs: []
  type: TYPE_NORMAL
- en: '***Launching the Command Line Interface***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To begin in Windows, use the Start menu to launch Anaconda Prompt; in macOS
    or Linux, open a terminal window. In the CLI, the `conda` command is the primary
    interface for managing environments and installations of various packages. Like
    Navigator, you can use it to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Query and search the Anaconda package index and current Anaconda installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and manage conda environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and update packages into existing conda environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with Navigator, you should start by either creating a new conda environment
    or activating an existing one. [Table 2-1](ch02.xhtml#ch02tab1) lists some of
    the more useful single-line `conda` commands for working with environments. These
    commands let you reproduce and augment the functionality in Navigator. You’ll
    need to replace words in all uppercase with a specific name. For example, for
    ENVNAME, you should substitute the actual name of your environment, such as *my_first_env*.
    You can also abbreviate many command options that begin with two dashes (`--`)
    to a single dash plus the first letter of the option. In other words, you can
    use `-n` instead of `--name`, and `-e` instead of `--envs`. We’ll look at these
    commands in more detail in the sections that follow.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 2-1:** Useful `conda` Commands for Working with Environments'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `conda help` | Display an explanation of conda positional arguments |'
  prefs: []
  type: TYPE_TB
- en: '| `conda info` | Verify installations, version numbers, directory locations
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update --name base conda` | Update conda to the current version |'
  prefs: []
  type: TYPE_TB
- en: '| `conda create --name` ENVNAME `python` | Create a new environment and install
    Python |'
  prefs: []
  type: TYPE_TB
- en: '| `conda create --name` ENVNAME `python=3.`x | Create a new environment with
    a specific Python version |'
  prefs: []
  type: TYPE_TB
- en: '| `conda create --prefix` path\ENVNAME | Create a new environment at a named
    disk location |'
  prefs: []
  type: TYPE_TB
- en: '| `conda activate` ENVNAME | Activate the named environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda activate` path\to\environment-dir | Activate an environment at a named
    disk location |'
  prefs: []
  type: TYPE_TB
- en: '| `conda deactivate` | Deactivate the current environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda list` | List all packages and versions in the active environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda list --name` ENVNAME | List all packages and versions in a named environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda list --revisions` | List the versions of an active environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda install -n` ENVNAME `--``revision` REVNUM | Restore an environment
    to a previous version |'
  prefs: []
  type: TYPE_TB
- en: '| `conda remove --name` ENVNAME `--all` | Delete a deactivated environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda create --clone` ENVNAME `--name` NEWENV | Make an exact copy of an
    environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda env export --name` ENVNAME `> envname.yml` | Export an environment
    to a readable YAML file |'
  prefs: []
  type: TYPE_TB
- en: '| `conda env create --file` ENVNAME`.yml` | Create an environment from a YAML
    file |'
  prefs: []
  type: TYPE_TB
- en: '| `conda list --explicit >` pkgs`.txt` | Export environment with exact versions
    for one OS |'
  prefs: []
  type: TYPE_TB
- en: '| `conda create --name` NEWENV `--file` pkgs`.txt` | Create environment based
    on exact package versions |'
  prefs: []
  type: TYPE_TB
- en: For a complete list of commands, see the “conda cheat sheet” at *[https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf](https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This chapter assumes that you followed the instructions in [Chapter 1](ch01.xhtml)
    for installing Anaconda. Doing so will ensure that Anaconda is correctly added
    with respect to your PATH, the environment variable that specifies a set of directories
    where executable programs are located on your computer. This is important for
    using conda commands in the terminal with macOS and Linux.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating a New Environment***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s create a new conda environment named *my_second_env*, given that we’ve
    already used Navigator to create *my_first_env*. In the Anaconda Prompt window
    or terminal, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will create a new environment with the current version of Python. Enter
    `y` when asked if you want to proceed (and continue to do this throughout the
    chapter).
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can disable the verification prompt by adding the --yes or -y flag to
    the end of a command. This is helpful if you are automating processes, but you
    should avoid it with day-to-day work to lessen the chance of error.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to install a particular version of Python, say 3.9, you can use
    this command (but don’t run it now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command is subtle. Because we used a *single* equal sign (`=`) when assigning
    the Python version, the result is the *latest* version in the Python 3.9 tree
    (such as Python 3.9.4). To get *exactly* Python 3.9, you must use a double equal
    sign (`==`) when assigning the version number.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install multiple packages when creating an environment, list them after
    the Python installation (don’t do this now, either):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To activate the new environment, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s check that the environment was created and is active:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will produce the list shown in [Figure 2-15](ch02.xhtml#ch02fig15). The
    asterisk (*) marks the active environment. You can also see *my_first_env*, which
    we created with Navigator in the previous section, as well as environments that
    I created earlier, some of which we’ll use later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: So that you’re always cognizant of which environment is active, the command
    prompt now includes the name of the environment (first line in [Figure 2-15](ch02.xhtml#ch02fig15)).
  prefs: []
  type: TYPE_NORMAL
- en: To see the list of the packages currently installed in the environment, enter
    conda list. This returns the package names, versions, build, and channel information.
    To see the contents of a *non-active* environment, such as *my_first_env*, use
    conda list -n my_first_env. Remember, `-n` is just shorthand for `--name`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-15: The output of the conda env list command in the Anaconda Prompt
    window*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Specifying an Environment’s Location***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The conda environments that you create are stored by default in the *envs* folder
    beneath your Anaconda installation. For example, on my Windows machine, the environment
    we just created is stored at *C:\Users\hanna\anaconda3\envs\my_second_env*. (My
    wife, Hannah, set up the computer; hence, she’s listed as the user.)
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible, however, to store the environment elsewhere. This lets you place
    the conda environment in a project folder and consistently name it something like
    *conda_env* ([Figure 2-16](ch02.xhtml#ch02fig16)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-16: An example directory tree for storing a conda environment outside
    of the default location*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a conda environment outside of the default *envs* folder, replace
    the `--name` (`-n`) flag with `--prefix` (`-p`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To activate the environment, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Placing your conda environment within a project directory provides several benefits.
    First, you can immediately determine whether a project uses an isolated environment.
    Second, it makes your project self-contained, as opposed to having the environment,
    the data, and things like Jupyter notebooks stored in different, unrelated locations.
    Third, you can use the same name, such as *conda_env*, for all your environments,
    making them instantly recognizable to anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Like environments in the default location, your new environment will show up
    when using the `conda env list` and `conda info -e` commands, though it won’t
    have an official name, such as *my_first_env* or *base* (see the * in [Figure
    2-17](ch02.xhtml#ch02fig17)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/02fig17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-17: The output of the conda info -e command showing the active environment
    on the D:\ drive*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not surprisingly, there are some drawbacks to specifying an install path other
    than the default location when creating conda environments. For instance, conda
    won’t be able to find your environment with the `--name` flag. For example, to
    list the contents of *my_first_env*, located in the default location, you can
    simply enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For environments in other locations, you must use the `--prefix` flag plus
    the full path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Another issue is that your command prompt is now prefixed with the active environment’s
    *absolute path* rather than the environment’s *name*. This can make for some long
    and unwieldy prompts, as seen in the first line in [Figure 2-17](ch02.xhtml#ch02fig17).
  prefs: []
  type: TYPE_NORMAL
- en: You can force conda to always use the environment name for the prompt by modifying
    the `env_prompt` setting in the *.condarc* file. This is the *conda configuration
    file*, an optional runtime configuration file that allows advanced users to configure
    various aspects of conda, such as which channels are searched for packages. You
    can read about it in the documentation at *[https://conda.io/projects/conda/en/latest/user-guide/configuration/index.html](https://conda.io/projects/conda/en/latest/user-guide/configuration/index.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to alter (or create) a .*condarc* file to shorten the long prefix
    in your shell prompt, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now you will see only the environment name in the prompt, regardless of where
    the environment is stored. This won’t be very enlightening if you use the generic
    *conda_env* moniker, and you run the risk of getting confused and working in the
    wrong environment. For this reason, you might want to stick with the long prefix
    format or append each environment name with the project name, such as *conda_env_penguins*
    or *conda_env_covid*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Managing Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After you create an environment, you can use conda to check for all available
    packages, find a specific package and install it, and update and remove packages.
    As noted in the “Launching Navigator” section, you should install all the packages
    you need for a project at the same time to ensure that there are no dependency
    conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 2-2](ch02.xhtml#ch02tab2) lists some useful conda commands for working
    with packages. The table mainly shows commands for working *within* active environments,
    as this is considered a best practice. You’ll need to replace words in all uppercase
    with a specific name.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 2-2:** Useful `conda` Commands for Working with Packages'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `conda search` PKGNAME | Search for a package in currently configured channels
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda search` PKGNAME`=3.9` | Search for a specific version in configured
    channels |'
  prefs: []
  type: TYPE_TB
- en: '| `conda search` PKGNAME `--info` | Get detailed info on a package including
    its dependencies |'
  prefs: []
  type: TYPE_TB
- en: '| `conda install` PKGNAME | Install current version of a package in an active
    environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda install` PKGNAME`=3.4.2` | Install specific package version in an
    active environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda install` PKG1 PKG2 PKG3 | Install multiple packages in an active environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda install -c` CHANNELNAME PKGNAME`=3.4.2` | Install specific version
    from named channel in an active environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda uninstall` PKGNAME | Remove a package from an active environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update` PKGNAME | Update a specific package in an active environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update --all` | Update all updatable packages in an active environment
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda list` | List all packages in an active environment |'
  prefs: []
  type: TYPE_TB
- en: '| `conda list anaconda` | Show version number of installed Anaconda distribution
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda clean --all` | Remove unused cached files including unused packages
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda config --show` | Examine the conda configuration file |'
  prefs: []
  type: TYPE_TB
- en: '| PKGNAME `--version` | Show the version number of an installed package |'
  prefs: []
  type: TYPE_TB
- en: For a complete list of commands, see the “conda Cheat Sheet” at *[https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf](https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The recommended way to install packages using conda is *from within an active
    environment*. Alternatively, you can install packages from outside an environment
    by using `--name` or the `--prefix` flag with a directory path. This approach
    isn’t advisable. Not only is it more trouble, but you run the risk of installing
    packages in the wrong environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate how to find and install packages using conda, let’s add to *my_second_env*
    two packages, Matplotlib (for plotting) and pillow (used for working with images).
    First, activate the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s preferable to specify the version of each package when installing. This
    will help you to explicitly capture what’s in your environment in the event that
    you want to rebuild or share your project in the future. Because we have no need
    to use an old version of Matplotlib or pillow, let’s search for the package to
    see its current version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns a long list of all the available versions of Matplotlib, shown
    truncated for brevity in the example that follows. The far-right column represents
    the channel information. Of course, the version numbers will change through time,
    so you’ll see a different list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The *pkgs/main* channel is the top priority channel in conda’s *defaults* channel,
    which is set by default to the Anaconda Repository. In this example, notice that
    the defaults channel has Matplotlib 3.3.4, whereas the conda-forge channel has
    Matplotlib 3.4.2.
  prefs: []
  type: TYPE_NORMAL
- en: Packages on conda-forge may be more up to date than those on the defaults channel,
    and you can find packages on conda-forge that aren’t in defaults. With the defaults
    channel, however, you can be certain that the available packages have been checked
    for compatibility, thus making it the “safest” alternative.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t specify a channel, Anaconda will automatically use the channel
    at the *top* of the channels configuration list in your *.condarc* file. To see
    your channels list, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'which produces this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As configured in this example, Anaconda will look for packages in the conda-forge
    channel first.
  prefs: []
  type: TYPE_NORMAL
- en: If the package you’re looking for is in the highest priority channel, it will
    be installed, *even if more up-to-date versions are available in the next channel
    in the list*. In this case, if you install Matplotlib without specifying a version
    or channel, you’ll end up with the most up-to-date version available, as conda-forge
    has top priority.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I repeat the previous exercise for the pillow package, I see that both
    channels use the same version (8.2.0), so the channel doesn’t matter. Now, let’s
    install both packages together in *my_second_env*, specifying the latest versions
    (use the version numbers shown here or update them to whatever is current for
    you):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s verify the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You should see the correct versions for the packages as well as the conda-forge
    source channel. The defaults channel, however, will appear as a blank in the “Channel”
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want conda to install the newest version of a package in *any* listed
    channel, you can turn off the channel priority order using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can force conda to use a specific channel by using the `--channel` flag
    and the name of the channel, like this (for the defaults channel):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To get the most up-to-date version available on that channel, you can leave
    off the version number, though this is not advised.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the membership and ordering in the list of channels in your configuration
    file, you can use flags like `--remove`, `--append`, and `--prepend`. Generally,
    you’ll want the defaults channel on top, so let’s move it up by first removing
    it and then adding it back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can add your own channel by signing up at [https://anaconda.org/](https://anaconda.org/)
    and uploading your own conda packages.*'
  prefs: []
  type: TYPE_NORMAL
- en: If you can’t find a package you need through Anaconda, try the Python Package
    Index (*[https://pypi.org/](https://pypi.org/)*). For more on this resource, see
    the “Conda and PIP” sidebar on [page 24](ch02.xhtml#ch00sidebar10). When you install
    a package using pip and then use the `conda list` command, the channel designation
    for that package will be “pypi.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you want to install a base package or set of packages in every
    environment you create, you can edit your configuration file to automatically
    add them. For example, to always install the highest version of Python by default,
    run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now every time you create a new conda environment, Python will be included
    by default. If you do a lot of data science work, you’ll probably want to add
    NumPy, pandas, and a plotting library, as well. You can review the default packages
    list by entering this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To remove a package from the default packages list, use the `--remove` flag
    in place of `--add`. You can also override this option at the command prompt with
    the `--no-default-packages` flag.
  prefs: []
  type: TYPE_NORMAL
- en: For more options for editing your configuration file, enter conda config --help.
    For more information on installing packages and managing channels, go to *[https://docs.conda.io/](https://docs.conda.io/)*
    and search for “installing with conda” and “managing channels,” respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating and Removing Packages**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Over time, newer versions of installed packages may become available. The following
    commands will help you to keep your environment up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, be sure that conda is up to date by running the following (from anywhere):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether an update is available for a specific package, such as pip,
    in an active environment, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If updates are available, you’ll be shown the new package information, such
    as its version, build, memory requirements, and channel, and you’ll be prompted
    to accept or decline the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update all the packages in an active environment to the current version,
    enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To update a non-active environment, enter the following, where ENV_NAME is the
    name of the environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Even though the `update` command tries to make everything as new as it can,
    it might not be able to upgrade all packages to the latest versions. If there
    are conflicting constraints in your environment, Anaconda might use an older version
    of some packages to satisfy dependency constraints when updating.
  prefs: []
  type: TYPE_NORMAL
- en: With great power comes great responsibility. Be careful about updating the Anaconda
    package itself, as upgrades to this metapackage are released less frequently than
    those for other packages. Thus, you can unknowingly downgrade packages with the
    update. Also never try to manage an exact set of packages in the base (root) environment.
    The latter is the job of specific conda environments.
  prefs: []
  type: TYPE_NORMAL
- en: For more on these topics, see *[https://www.anaconda.com/blog/keeping-anaconda-date/](https://www.anaconda.com/blog/keeping-anaconda-date/)*,
    *[https://docs.anaconda.com/anaconda/install/update-version/](https://docs.anaconda.com/anaconda/install/update-version/),*
    and *[https://www.anaconda.com/blog/whats-in-a-name-clarifying-the-anaconda-metapackage/](https://www.anaconda.com/blog/whats-in-a-name-clarifying-the-anaconda-metapackage/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s possible to prevent some packages from updating by creating an exceptions
    list and saving it as a file named pinned.txt in an environment’s conda-meta directory.
    You can learn more at “Preventing packages from updating (pinning)” at [https://docs.conda.io/](https://docs.conda.io/).*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To *remove* a package, such as Matplotlib, from an active environment, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove multiple packages at the same time, list them one after another.
    Let’s do this now for *my_second_env*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove the same package from a non-active environment, provide the name
    of the environment using the `--name` (`-n`) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Remember, working with non-active environments in this way is discouraged due
    to the increased chance for error. Whether you work with Navigator or conda, it’s
    shockingly easy to lose track of which environment you’re working in and cause
    all kinds of mayhem.
  prefs: []
  type: TYPE_NORMAL
- en: To verify the results of updating and removing packages, use the conda list
    command in the active environment.
  prefs: []
  type: TYPE_NORMAL
- en: '***Duplicating and Sharing Environments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can exactly duplicate an environment by either cloning it or using a special
    file that lists its contents, which makes it easy to share environments with others,
    archive them, or restore deleted versions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloning Environments**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The simplest way to duplicate an environment is to use the `--clone` flag.
    For example, to produce an exact copy of *my_second_env* called *my_third_env*,
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the results, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Using an Environment File**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can also duplicate an environment by recording its contents. An *environment
    file* is a text file that lists all the packages and versions that are installed
    in an environment, including those installed using pip. This helps you both restore
    an environment and share it with others.
  prefs: []
  type: TYPE_NORMAL
- en: The environment file is written in *YAML (.yml)*, a human-readable data-serialization
    format used for data storage. YAML originally meant “Yet Another Markup Language”
    but now stands for “YAML Ain’t Markup Language” to stress that it’s more than
    just a document markup tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate an environment file, you must activate and then export the environment.
    Here’s how to make a file for *my_second_env*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can name the file any valid filename, such as *my_second_env.yml*, but be
    careful because an existing file with the same name will be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this file is written to the user directory. For my Windows setup,
    this is *C:\Users\hanna*. Here are the file contents (specific versions and dates
    have been replaced with x, as these values are time dependent and your output
    may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now email this file to a coworker, and they can perfectly reproduce
    your environment. If they use a different operating system, you can use the `--from-history`
    flag to generate a file that will work across platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how the new environment file looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the environment file includes only packages that you’ve explicitly
    asked for, like Python, without their dependencies. Solving for dependencies can
    introduce packages that might not be compatible across platforms, so they are
    not included.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember when I said that it was best practice to specify a version number
    when installing a package, even if you wanted to take the most recent version?
    Well, look at `-python` in the last environment file listing: *there’s no version
    number*. When you use the history flag, the environment file includes *exactly
    what you asked for*. By not specifying a version, you told conda to install the
    current version of Python. If someone uses your file after the release of a new
    version of Python, not only will they not reproduce your environment (assuming
    you haven’t updated it), but they also won’t *know* they haven’t reproduced it!'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have an *environment.yml* file, you can use it to re-create an environment.
    For example, a coworker could duplicate *my_second_env* by entering this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add packages in the file to another environment, by providing
    the environment name, represented here by ENV_NAME:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: For more on environment files, including how to manually produce them, visit
    *[https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment/](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using a Specifications File**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If your environment does not include packages installed using pip, you can
    also use a *specifications file* to reproduce a conda environment on the same
    operating system. To create a specification file, activate an environment, such
    as *my_second_env*, and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output, truncated for brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To re-create *my_second_env* using this text file, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `--explicit` flag ensures that the targeted platform is annotated
    in the file, in this case, `# platform: win-64` in the third line.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Restoring Environments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Because conda keeps a history of all the changes made to an environment, you
    can always roll back to a previous version. To see the list of available versions,
    first activate the environment and then enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the list of revisions, a plus sign ( `+` ) before a package name means that
    it was added, a minus sign ( `–` `)` means that it was uninstalled, and no symbol
    before the name means that it was updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restore the environment to a previous version, such as rev 3, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If you restore to an older revision, this revision will get its own number,
    so you can still restore back to an earlier one. For example, if the revisions
    list shows eight revisions, and you restore to revision 6, when you regenerate
    the revisions list, you’ll see nine revisions. Revision 9 will be identical to
    revision 6.
  prefs: []
  type: TYPE_NORMAL
- en: '***Removing Environments***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To delete a conda environment, you first must deactivate it by running the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to remove the deactivated environment, run this command, substituting
    the name of the environment for ENVNAME:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the removal, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `info` command to verify this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The removed environment should be absent from the environments list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, for environments outside of Anaconda’s *envs* folder, you’ll need
    to include the directory path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '***Cleaning the Package Cache***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Over time, as you create and remove environments and install and uninstall packages,
    your *anaconda3* folder will consume more and more disk space. You can recover
    some of this space by cleaning the package cache. As discussed in “Understanding
    Conda Environments” on [page 22](ch02.xhtml#ch00lev1sec11), this is the folder
    that holds all your installed packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clean the package cache, run the conda clean command from any environment.
    To get a preview of the files it flags for removal, you can make a dry run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To commit, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This will remove the index cache, unused cache packages (packages that are no
    longer linked to any environment), tarballs (files that combine and compress multiple
    files), and lock files from under the *pkgs* directory. Windows users will want
    to reboot after running this command.
  prefs: []
  type: TYPE_NORMAL
- en: For more options when running `conda clean`, see *[https://docs.conda.io/projects/conda/en/latest/commands/clean.html](https://docs.conda.io/projects/conda/en/latest/commands/clean.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every Python project should have its own conda environment to keep your work
    organized, isolated, up to date, reproducible, and sharable. Although Anaconda
    Navigator provides easy point-and-click manipulation of environments, you’ll want
    to learn some command line interface commands for complete control.
  prefs: []
  type: TYPE_NORMAL
