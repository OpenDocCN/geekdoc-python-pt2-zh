- en: '1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1'
- en: DRAWING POLYGONS WITH THE TURTLE MODULE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TURTLE 模块绘制多边形
- en: '*Centuries ago a Westerner heard a Hindu say the Earth rested on the back of
    a turtle. When asked what the turtle was standing on, the Hindu explained, “It’s
    turtles all the way down.”*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*几百年前，一位西方人听到一位印度人说地球就托在一只海龟的背上。当被问到海龟站在什么上面时，这位印度人解释道：“海龟就是站在海龟上，一直到无尽。”*'
- en: '![image](../images/fintro-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fintro-01.jpg)'
- en: Before you can start using math to build all the cool things you see in this
    book, you’ll need to learn how to give instructions to your computer using a programming
    language called Python. In this chapter you’ll get familiar with some basic programming
    concepts like loops, variables, and functions by using Python’s built-in turtle
    tool to draw different shapes. As you’ll see, the turtle module is a fun way to
    learn about Python’s basic features and get a taste of what you’ll be able to
    create with programming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用数学构建本书中展示的所有酷炫东西之前，您需要学习如何使用一种名为 Python 的编程语言向计算机发出指令。在本章中，您将通过使用 Python
    内置的 turtle 工具绘制不同的图形，熟悉一些基本的编程概念，如循环、变量和函数。正如您将看到的，turtle 模块是学习 Python 基本特性的有趣方式，也能让您初步体验到使用编程创建的乐趣。
- en: PYTHON’S TURTLE MODULE
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PYTHON 的 TURTLE 模块
- en: The Python turtle tool is based on the original “turtle” agent from the Logo
    programming language, which was invented in the 1960s to make computer programming
    more accessible to everyone. Logo’s graphical environment made interacting with
    the computer visual and engaging. (Check out Seymour Papert’s brilliant book *Mindstorms*
    for more great ideas for learning math using Logo’s virtual turtles.) The creators
    of the Python programming language liked the Logo turtles so much that they wrote
    a module called *turtle* in Python to copy the Logo turtle functionality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 turtle 工具基于 Logo 编程语言中的原始“海龟”代理，该语言在 1960 年代发明，旨在让每个人都能更容易接触到计算机编程。Logo
    的图形化环境让与计算机的交互变得直观和有趣。（请查阅 Seymour Papert 的精彩著作 *《心智风暴》*，了解更多使用 Logo 虚拟海龟学习数学的绝妙点子。）Python
    编程语言的创造者非常喜欢 Logo 的海龟，于是他们在 Python 中编写了一个名为 *turtle* 的模块，用以复制 Logo 海龟的功能。
- en: Python’s turtle module lets you control a small image shaped like a turtle,
    just like a video game character. You need to give precise instructions to direct
    the turtle around the screen. Because the turtle leaves a trail wherever it goes,
    we can use it to write a program that draws different shapes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 turtle 模块让您控制一个小海龟形状的图像，就像视频游戏中的角色一样。您需要给出精确的指令来引导海龟在屏幕上移动。由于海龟在移动时会留下痕迹，我们可以利用它编写一个程序，绘制不同的图形。
- en: Let’s begin by importing the turtle module!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先导入 turtle 模块！
- en: IMPORTING THE TURTLE MODULE
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入 TURTLE 模块
- en: Open a new Python file in IDLE and save it as *myturtle.py* in the Python folder.
    You should see a blank page. To use turtles in Python, you have to import the
    functions from the turtle module first.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中打开一个新的 Python 文件，并将其保存为 *myturtle.py* 文件，存放在 Python 文件夹中。您应该会看到一个空白页面。要在
    Python 中使用海龟，首先必须导入 turtle 模块中的函数。
- en: A *function* is a set of reusable code for performing a specific action in a
    program. There are many built-in functions you can use in Python, but you can
    also write your own functions (you’ll learn how to write your own functions later
    in this chapter).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数* 是一组可重用的代码，用于在程序中执行特定的操作。Python 中有许多内置函数可供使用，您也可以编写自己的函数（稍后在本章中，您将学习如何编写自己的函数）。'
- en: A *module* in Python is a file that contains predefined functions and statements
    that you can use in another program. For example, the turtle module contains a
    lot of useful code that was automatically downloaded when you installed Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，*模块* 是一个包含预定义函数和语句的文件，您可以在其他程序中使用它。例如，turtle 模块包含了很多有用的代码，当您安装 Python
    时，它会自动下载这些代码。
- en: 'Although functions can be imported from a module in many ways, we’ll use a
    simple one here. In the *myturtle.py* file you just created, enter the following
    at the top:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以通过多种方式从模块中导入函数，但我们在这里使用一种简单的方法。在您刚刚创建的 *myturtle.py* 文件中，输入以下内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `from` command indicates that we’re importing something from outside our
    file. We then give the name of the module we want to import from, which is `turtle`
    in this case. We use the `import` keyword to get the useful code we want *from*
    the turtle module. We use the asterisk (`*`) here as a *wildcard command* that
    means “import everything from that module.” Make sure to put a space between `import`
    and the asterisk.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`from` 命令表示我们正在从外部文件导入某些内容。然后我们给出要导入的模块名称，在这个例子中是 `turtle`。我们使用 `import` 关键字从海龟模块中获取我们需要的有用代码。我们在这里使用星号（`*`）作为
    *通配符命令*，意味着“从该模块导入所有内容”。确保 `import` 和星号之间有一个空格。'
- en: Save the file and make sure it’s in the Python folder; otherwise, the program
    will throw an error.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，并确保它位于 Python 文件夹中；否则，程序会抛出错误。
- en: '**WARNING**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Do not save the file as* turtle.py. *This filename already exists and will
    cause a conflict with the import from the turtle module! Anything else will work:*
    myturtle.py, turtle2.py, mondayturtle.py, *and so on*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要将文件保存为* turtle.py。*这个文件名已经存在，会导致与海龟模块的导入冲突！其他任何文件名都可以使用：* myturtle.py, turtle2.py,
    mondayturtle.py，*等等*。'
- en: MOVING YOUR TURTLE
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动你的海龟
- en: 'Now that you’ve imported the turtle module, you’re ready to enter instructions
    to move the turtle. We’ll use the `forward()` function (abbreviated as `fd`) to
    move the turtle forward a certain number of steps while leaving a trail behind
    it. Note that `forward()` is one of the functions we just imported from the turtle
    module. Enter the following to make the turtle go forward:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经导入了海龟模块，准备输入指令来移动海龟了。我们将使用 `forward()` 函数（缩写为 `fd`）使海龟前进一定步数，并留下一个轨迹。请注意，`forward()`
    是我们刚刚从海龟模块中导入的函数之一。输入以下内容以使海龟前进：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we use the `forward()` function with the number 100 inside parentheses
    to indicate how many steps the turtle should move. In this case, 100 is the *argument*
    we pass to the `forward()` function. All functions take one or more arguments.
    Feel free to pass other numbers to this function. When you press F5 to run the
    program, a new window should open with an arrow in the center, as shown in [Figure
    1-1](ch01.xhtml#ch01fig1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `forward()` 函数，并在括号中输入数字 100，表示海龟应该走多少步。在这种情况下，100是我们传递给 `forward()`
    函数的 *参数*。所有函数都接受一个或多个参数。你可以随意传递其他数字给这个函数。当你按下 F5 运行程序时，一个新窗口应该会打开，中心有一个箭头，如 [图
    1-1](ch01.xhtml#ch01fig1) 所示。
- en: '![image](../images/f005-01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f005-01.jpg)'
- en: '*Figure 1-1: Running your first line of code!*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1: 运行你的第一行代码！*'
- en: 'As you can see, the turtle started in the middle of the screen and walked forward
    100 steps (it’s actually 100 pixels). Notice that the default shape is an arrow,
    not a turtle, and the default direction the arrow is facing is to the right. To
    change the arrow into a turtle, update your code so that it looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，海龟从屏幕中间开始，向前走了100步（实际上是100像素）。注意，默认形状是一个箭头，而不是海龟，且箭头默认朝右。要将箭头改为海龟，可以更新代码，使其如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can probably tell, `shape()` is another function defined in the turtle
    module. It lets you change the shape of the default arrow into other shapes, like
    a circle, a square, or an arrow. Here, the `shape()` function takes the string
    value `'turtle'` as its argument, not a number. (You’ll learn more about strings
    and different data types in the next chapter.) Save and run the *myturtle.py*
    file again. You should see something like [Figure 1-2](ch01.xhtml#ch01fig2).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，`shape()` 是海龟模块中定义的另一个函数。它允许你将默认的箭头形状改为其他形状，如圆形、方形或箭头。在这里，`shape()`
    函数接受字符串值 `'turtle'` 作为参数，而不是数字。（你将在下一章学习更多关于字符串和不同数据类型的内容。）保存并重新运行 *myturtle.py*
    文件，你应该会看到类似于 [图 1-2](ch01.xhtml#ch01fig2) 的效果。
- en: '![image](../images/f006-01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f006-01.jpg)'
- en: '*Figure 1-2: Changing the arrow into a turtle!*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2: 将箭头改为海龟！*'
- en: Now your arrow should look like a tiny turtle!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的箭头应该变成一个小海龟了！
- en: CHANGING DIRECTIONS
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 改变方向
- en: 'The turtle can go only in the direction it’s facing. To change the turtle’s
    direction, you must first make the turtle turn a specified number of degrees using
    the `right()` or `left()` function and then go forward. Update your *myturtle.py*
    program by adding the last two lines of code shown next:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 海龟只能朝它当前面朝的方向前进。要改变海龟的方向，你必须先使用 `right()` 或 `left()` 函数让海龟转动指定的角度，然后才能前进。通过添加接下来显示的最后两行代码，更新你的
    *myturtle.py* 程序：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we’ll use the `right()` function (or `rt()` for short) to make the turtle
    turn right 45 degrees before moving forward by 150 steps. When you run this code,
    the output should look like [Figure 1-3](ch01.xhtml#ch01fig3).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用`right()`函数（或简称`rt()`）让乌龟在向前走150步之前先向右转45度。当你运行这段代码时，输出应该像[图1-3](ch01.xhtml#ch01fig3)一样。
- en: '![image](../images/f006-02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f006-02.jpg)'
- en: '*Figure 1-3: Changing turtle’s direction*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-3：改变乌龟的方向*'
- en: As you can see, the turtle started in the middle of the screen, went forward
    100 steps, turned right 45 degrees, and then went forward another 150 steps. Notice
    that Python runs each line of code in order, from top to bottom.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，乌龟从屏幕中间开始，向前走了100步，右转45度，然后又向前走了150步。注意Python按顺序运行每一行代码，从上到下。
- en: 'EXERCISE 1-1: SQUARE DANCE'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1-1：广场舞
- en: Return to the *myturtle.py* program. Your first challenge is to modify the code
    in the program using only the `forward` and `right` functions so that the turtle
    draws a square.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到*myturtle.py*程序。你面临的第一个挑战是，仅使用`forward`和`right`函数修改程序中的代码，使得乌龟能够画出一个正方形。
- en: REPEATING CODE WITH LOOPS
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用循环重复代码
- en: Every programming language has a way to automatically repeat commands a given
    number of times. This is useful because it saves you from having to type out the
    same code over and over and cluttering your program. It also helps you avoid typos
    that can prevent your program from running properly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有一种自动重复指定次数命令的方法。这非常有用，因为它可以避免你不断输入相同的代码，从而使程序变得冗长。它还可以帮助你避免拼写错误，避免程序无法正常运行。
- en: USING THE FOR LOOP
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用FOR循环
- en: 'In Python we use the `for` loop to repeat code. We also use the `range` keyword
    to specify the number of times we go through the loop. Open a new program file
    in IDLE, save it as *for_loop.py*, and then enter the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们使用`for`循环来重复代码。我们还使用`range`关键字来指定循环执行的次数。打开IDLE中的一个新程序文件，保存为*for_loop.py*，然后输入以下内容：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, the `range()` function creates `i`, or an *iterator*, for each for loop.
    The iterator is a value that increases each time it’s used. The number 2 in parentheses
    is the argument we pass to the function to control its behavior. This is similar
    to the way we passed different values to the `forward()` and `right()` functions
    in previous sections.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`range()`函数为每个`for`循环创建了`i`，即一个*迭代器*。迭代器是一个每次使用时都会增加的值。括号中的数字2是我们传递给函数的参数，用来控制其行为。这类似于我们在前面章节中传递给`forward()`和`right()`函数的不同值。
- en: In this case, `range(2)` creates a sequence of two numbers, 0 and 1\. For each
    of these two numbers, the `for` command performs the action specified after the
    colon, which is to print the word *hello*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`range(2)`创建了一个包含两个数字（0和1）的序列。对于这两个数字中的每一个，`for`命令执行冒号后面指定的动作，也就是打印单词*hello*。
- en: 'Be sure to indent all the lines of the code you want to repeat by pressing
    TAB (one tab is four spaces). Indentation tells Python which lines are inside
    the loop so `for` knows exactly what code to repeat. And don’t forget the colon
    at the end; it tells the computer what’s coming up after it is in the loop. When
    you run the program, you should see the following printed in the shell:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你通过按TAB键（一个TAB等于四个空格）来缩进所有你想要重复执行的代码行。缩进告诉Python哪些行在循环内，这样`for`就能准确地知道要重复哪些代码。别忘了结尾的冒号，它告诉计算机接下来是什么代码将在循环中执行。当你运行程序时，你应该在shell中看到以下内容：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, the program prints `hello` twice because `range(2)` creates
    a sequence containing two numbers, 0 and 1\. This means that the `for` command
    loops over the two items in the sequence, printing “hello” each time. Let’s update
    the number in the parentheses, like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，程序打印了两次`hello`，因为`range(2)`创建了一个包含两个数字（0和1）的序列。这意味着`for`命令会遍历序列中的两个项目，每次打印“hello”。让我们更新括号中的数字，像这样：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you run this program, you should get `hello` ten times, like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，应该会得到10次`hello`，像这样：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s try another example since you’ll be writing a lot of `for` loops in this
    book:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试另一个例子，因为你在本书中将写很多`for`循环：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Because counting begins at 0 rather than 1 in Python, `for i in range(10)`
    gives us the numbers 0 through 9\. This sample code is saying “for each value
    in the range 0 to 9, display the current number.” The `for` loop then repeats
    the code until it runs out of numbers in the range. When you run this code, you
    should get something like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在 Python 中计数是从 0 开始的，而不是从 1 开始，因此 `for i in range(10)` 会给我们提供从 0 到 9 的数字。这段示例代码的意思是“对于范围
    0 到 9 中的每一个值，显示当前数字。”`for` 循环会重复执行代码，直到范围中的数字用完。运行这段代码，你应该会看到类似这样的输出：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the future you’ll have to remember that `i` starts at 0 and ends before
    the last number in a loop using `range`, but for now, if you want something repeated
    four times, you can use this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 未来你需要记住，在使用 `range` 的循环中，`i` 从 0 开始，并且在循环中的最后一个数字之前结束，但目前，如果你希望某些操作重复四次，你可以使用以下方式：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It’s as simple as that! Let’s see how we can put this to use.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单！让我们看看如何将这个方法应用到实际中。
- en: USING A FOR LOOP TO DRAW A SQUARE
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 `for` 循环绘制正方形
- en: In Exercise 1-1 your challenge was to make a square using only the `forward()`
    and `right()` functions. To do this, you had to repeat `forward(100)` and `right(90)`
    four times. But this required entering the same code multiple times, which is
    time-consuming and can lead to mistakes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在练习 1-1 中，你的挑战是仅使用 `forward()` 和 `right()` 函数绘制一个正方形。为此，你必须将 `forward(100)`
    和 `right(90)` 重复四次。但这需要多次输入相同的代码，既浪费时间又容易出错。
- en: 'Let’s use a `for` loop to avoid repeating the same code. Here’s the *myturtle.py*
    program, which uses a `for` loop instead of repeating the `forward()` and `right()`
    functions four times:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `for` 循环来避免重复相同的代码。以下是 *myturtle.py* 程序，它使用 `for` 循环来代替四次重复调用 `forward()`
    和 `right()` 函数：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that `shape('turtle')` should come right after you import the turtle module
    and before you start drawing. The two lines of code inside this `for` loop tell
    the turtle to go forward 100 steps and then turn 90 degrees to the right. (You
    might have to face the same way as the turtle to know which way “right” is!) Because
    a square has four sides, we use `range(4)` to repeat these two lines of code four
    times. Run the program, and you should see something like [Figure 1-4](ch01.xhtml#ch01fig4).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`shape('turtle')` 应该紧跟在导入 turtle 模块之后并在开始绘图之前。`for` 循环中的两行代码告诉海龟向前走 100
    步，然后右转 90 度。（你可能需要站在与海龟相同的方向上才能知道“右”是哪个方向！）因为正方形有四条边，所以我们使用 `range(4)` 来将这两行代码重复四次。运行程序后，你应该会看到类似于
    [图 1-4](ch01.xhtml#ch01fig4) 的效果。
- en: '![image](../images/f009-01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f009-01.jpg)'
- en: '*Figure 1-4: A square made with a `for` loop*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：使用 `for` 循环绘制的正方形*'
- en: You should see that the turtle moves forward and turns to the right a total
    of four times, finally returning to its original position. You successfully drew
    a square using a `for` loop!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到海龟向前移动并向右转四次，最终回到原来的位置。你已经成功使用 `for` 循环绘制了一个正方形！
- en: CREATING SHORTCUTS WITH FUNCTIONS
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用函数创建快捷方式
- en: Now that we’ve written code to draw a square, we can save all that code to a
    magic keyword that we can call any time we want to use that square code again.
    Every programming language has a way to do this, and in Python it’s called a *function*,
    which is the most important feature of computer programming. Functions make code
    compact and easier to maintain, and dividing a problem up into functions often
    allows you to see the best way of solving it. Earlier you used some built-in functions
    that come with the turtle module. In this section you learn how to define your
    own function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经写了代码来绘制一个正方形，我们可以将所有这些代码保存到一个魔法关键词中，随时调用它来再次使用这些正方形代码。每种编程语言都有一种方法来实现这一点，在
    Python 中，它被称为*函数*，这是计算机编程中最重要的特性。函数使代码更加紧凑且易于维护，将一个问题分解成多个函数通常能让你看到最好的解决方法。之前你使用了一些内置函数，它们来自
    turtle 模块。在本节中，你将学习如何定义自己的函数。
- en: 'To define a function you start by giving it a name. This name can be anything
    you want, as long as it’s not already a Python keyword, like `list`, `range`,
    and so on. When you’re naming functions, it’s better to be descriptive so you
    can remember what they’re for when you use them again. Let’s call our function
    `square()` because we’ll be using it to make a square:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个函数，你首先需要给它起个名字。这个名字可以是任何你想要的，只要它不是已经是 Python 关键词，比如 `list`、`range` 等等。在命名函数时，最好具有描述性，这样你在以后使用它们时能记得它们的作用。我们把函数命名为
    `square()`，因为我们将用它来绘制正方形：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `def` command tells Python we’re defining a function, and the word we list
    afterward will become the function name; here, it’s `square()`. Don’t forget the
    parentheses after `square`! They’re a sign in Python that you’re dealing with
    a function. Later we’ll put values inside them, but even without any values inside,
    the parentheses need to be included to let Python know you are defining a function.
    Also, don’t forget the colon at the end of the function definition. Note that
    we indent all the code inside the function to let Python know which code goes
    inside it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`def`命令告诉Python我们正在定义一个函数，之后列出的单词将成为函数名；在这里，它是`square()`。不要忘记`square`后面的括号！它们是Python中表示你在处理一个函数的标志。稍后我们会将值放入括号中，但即使没有任何值，括号也需要包含在内，以告诉Python你在定义一个函数。此外，不要忘记在函数定义末尾加上冒号。请注意，我们会将函数内部的所有代码缩进，以告诉Python哪些代码属于该函数。'
- en: If you run this program now, nothing will happen. You’ve defined a function,
    but you didn’t tell the program to run it yet. To do this, you need to *call*
    the function at the end of the *myturtle.py* file after the function definition.
    Enter the code shown in [Listing 1-1](ch01.xhtml#ch01list1).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行这个程序，什么也不会发生。你已经定义了一个函数，但你还没有告诉程序运行它。要做到这一点，你需要在*myturtle.py*文件的函数定义后面*调用*该函数。输入[Listing
    1-1](ch01.xhtml#ch01list1)中显示的代码。
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 1-1: The `square()` function is called at the end of the file*.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-1：在文件末尾调用`square()`函数*。'
- en: When you call `square()` at the end like this, the program should run properly.
    Now you can use the `square()` function at any point later in the program to quickly
    draw another square.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你像这样在最后调用`square()`时，程序应该会正确运行。现在你可以在程序中的任何地方使用`square()`函数来快速绘制另一个正方形。
- en: You can also use this function in a loop to build something more complicated.
    For example, to draw a square, turn right a little, make another square, turn
    right a little, and repeat those steps multiple times, putting the function inside
    a loop makes sense.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在循环中使用这个函数来构建更复杂的内容。例如，要画一个正方形，稍微右转，画另一个正方形，再稍微右转，重复这些步骤，把函数放进循环中是有意义的。
- en: The next exercise shows an interesting-looking shape that’s made of squares!
    It might take your turtle a while to create this shape, so you can speed it up
    by adding the `speed()` function to *myturtle.py* after `shape('turtle')`. Using
    `speed(0)` makes the turtle move the fastest, whereas `speed(1)` is the slowest.
    Try different speeds, like `speed(5)` and `speed(10)`, if you want.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个练习展示了一种由正方形组成的有趣形状！可能需要一些时间才能让你的海龟完成这个形状，所以你可以通过在`shape('turtle')`后面添加`speed()`函数来加速它。在*myturtle.py*中使用`speed(0)`可以让海龟移动得最快，而`speed(1)`是最慢的。如果你想，也可以尝试不同的速度，比如`speed(5)`和`speed(10)`。
- en: 'EXERCISE 1-2: A CIRCLE OF SQUARES'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-2：正方形的圆
- en: 'Write and run a function that draws 60 squares, turning right 5 degrees after
    each square. Use a loop! Your result should end up looking like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 编写并运行一个函数，绘制60个正方形，每个正方形之后右转5度。使用循环！你的结果应该看起来像这样：
- en: '![image](../images/f011-01.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f011-01.jpg)'
- en: USING VARIABLES TO DRAW SHAPES
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用变量绘制图形
- en: So far all our squares are the same size. To make squares of different sizes,
    we’ll need to vary the distance the turtle walks forward for each side. Instead
    of changing the definition for the `square()` function every time we want a different
    size, we can use a *variable*, which in Python is a word that represents a value
    you can change. This is similar to the way *x* in algebra can represent a value
    that can change in an equation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的所有正方形都是相同大小的。为了画不同大小的正方形，我们需要改变海龟每条边前进的距离。我们不必每次想要不同的大小时都改变`square()`函数的定义，而是可以使用一个*变量*，在Python中，变量是一个可以表示并且可以改变的值。它类似于代数中*x*可以代表一个可以变化的值。
- en: In math class, variables are single letters, but in programming you can give
    a variable any name you want! Like with functions, I suggest naming variables
    something descriptive to make reading and understanding your code easier.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，变量通常是单个字母，但在编程中，你可以给变量任何你想要的名字！就像函数一样，我建议给变量起一个具有描述性的名字，这样可以让代码更容易阅读和理解。
- en: USING VARIABLES IN FUNCTIONS
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在函数中使用变量
- en: 'When you define a function, you can use variables as the function’s parameters
    inside the parentheses. For example, you can change your `square()` function definition
    in the *myturtle.py* program to the following to create squares of any size rather
    than a fixed size:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义一个函数时，你可以在括号内使用变量作为函数的参数。例如，你可以将*myturtle.py*程序中`square()`函数的定义更改为以下内容，以便绘制任何大小的正方形，而不是固定大小：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we use `sidelength` to define the `square()` function. Now when you call
    this function, you have to place a value, which we call an *argument*, inside
    the parentheses, and whatever number is inside the parentheses will be used in
    place of `sidelength`. For example, calling `square(50)` and `square(80)` would
    look like [Figure 1-5](ch01.xhtml#ch01fig5).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用 `sidelength` 来定义 `square()` 函数。现在当你调用这个函数时，你必须在括号内放一个值，我们称这个值为 *参数*，括号中的任何数字都会代替
    `sidelength`。例如，调用 `square(50)` 和 `square(80)` 会像 [图 1-5](ch01.xhtml#ch01fig5)
    所示。
- en: '![image](../images/f012-01.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f012-01.jpg)'
- en: '*Figure 1-5: A square of size 50 and a square of size 80*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-5：大小为 50 和大小为 80 的两个正方形*'
- en: When you use a variable to define a function, you can simply call the `square()`
    function by entering different numbers without having to update the function definition
    each time.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你用变量来定义一个函数时，你可以通过输入不同的数字来直接调用 `square()` 函数，而不需要每次都更新函数定义。
- en: VARIABLE ERRORS
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变量错误
- en: 'At the moment, if we forget to put a value in the parentheses for the function,
    we’ll get this error:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果我们忘记在函数的括号中填写一个值，就会出现这个错误：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This error tells us that we’re missing a value for `sidelength`, so Python
    doesn’t know how big to make the square. To avoid this, we can give a default
    value for the length in the first line of the function definition, like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误告诉我们缺少 `sidelength` 的值，因此 Python 不知道该把正方形做多大。为了避免这个问题，我们可以在函数定义的第一行给这个长度一个默认值，像这样：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we place a default value of 100 in `sidelength`. Now if we put a value
    in the parentheses after `square`, it’ll make a square of that length, but if
    we leave the parentheses empty, it’ll default to a square of `sidelength` 100
    and won’t give us an error. The updated code should produce the drawing shown
    in [Figure 1-6](ch01.xhtml#ch01fig6):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们在 `sidelength` 中放了一个默认值 100。现在，如果我们在 `square` 后的括号中放一个值，它将绘制该长度的正方形；但是如果我们把括号留空，它将默认绘制一个边长为
    100 的正方形，并且不会报错。更新后的代码应该会生成 [图 1-6](ch01.xhtml#ch01fig6) 中的图像：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![image](../images/f012-02.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f012-02.jpg)'
- en: '*Figure 1-6: A default square of size 100, a square of size 50, and a square
    of size 30*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-6：默认大小为 100 的正方形、大小为 50 的正方形和大小为 30 的正方形*'
- en: Setting a default value like this makes it easier to use our function without
    having to worry about getting errors if we do something wrong. In programming
    this is called making the program more *robust*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置这样的默认值，可以更方便地使用我们的函数，而不用担心如果做错了什么会导致错误。在编程中，这被称为让程序变得更 *健壮*。
- en: 'EXERCISE 1-3: TRI AND TRI AGAIN'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-3：尝试并再试
- en: Write `a triangle()` function that will draw a triangle of a given “side length.”
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 `triangle()` 函数，绘制一个给定“边长”的三角形。
- en: EQUILATERAL TRIANGLES
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 等边三角形
- en: A *polygon* is a many-sided figure. An *equilateral triangle* is a special type
    of polygon that has three equal sides. [Figure 1-7](ch01.xhtml#ch01fig7) shows
    what it looks like.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*多边形* 是一个具有多条边的图形。*等边三角形* 是一种特殊的多边形，具有三条相等的边。[图 1-7](ch01.xhtml#ch01fig7) 显示了它的样子。'
- en: '![image](../images/f013-01.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f013-01.jpg)'
- en: '*Figure 1-7: The angles in an equilateral triangle, including one external
    angle*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：等边三角形的角度，包括一个外角*'
- en: 'An equilateral triangle has three equal internal angles of 60 degrees. Here’s
    a rule you might remember from geometry class: all three angles of an equilateral
    triangle add up to 180 degrees. In fact, this is true for all triangles, not just
    equilateral triangles.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 等边三角形的三个内角都为 60 度。你可能记得几何课上有一个规则：等边三角形的三个角度加起来是 180 度。事实上，这对所有三角形都是成立的，不仅仅是等边三角形。
- en: WRITING THE TRIANGLE() FUNCTION
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写 `triangle()` 函数
- en: 'Let’s use what you’ve learned so far to write a function that makes the turtle walk
    in a triangular path. Because each angle in an equilateral triangle is 60 degrees,
    you can update the `right()` movement in your `square()` function to `60`, like
    this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运用你迄今为止学到的知识，编写一个函数，让海龟沿三角形路径行走。由于等边三角形的每个角都是 60 度，你可以将 `square()` 函数中的 `right()`
    移动角度更新为 `60`，像这样：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: But when you save and run this program, you won’t get a triangle. Instead, you'll
    see something like [Figure 1-8](ch01.xhtml#ch01fig8).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当你保存并运行这个程序时，你不会得到一个三角形。相反，你会看到类似 [图 1-8](ch01.xhtml#ch01fig8) 的内容。
- en: '![image](../images/f014-01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f014-01.jpg)'
- en: '*Figure 1-8: A first attempt at drawing a triangle*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-8：第一次尝试绘制三角形*'
- en: 'That looks like we’re starting to draw a hexagon (a six-sided polygon), not
    a triangle. We get a hexagon instead of a triangle because we entered 60 degrees,
    which is the *internal* angle of an equilateral triangle. We need to enter the
    *external* angle to the `right()` function instead, because the turtle *turns*
    the external angle, not the internal angle. This wasn’t a problem with the square
    because it just so happens the internal angle of a square and the external angle
    are the same: 90 degrees.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们开始画的是一个六边形（一个六边形多边形），而不是一个三角形。我们得到了六边形，而不是三角形，因为我们输入的是60度，这是等边三角形的*内角*。我们需要输入的是*外角*，而不是`right()`函数中的内角，因为海龟是根据外角来转动的，而不是内角。对于正方形来说，这不是问题，因为正方形的内角和外角恰好是相同的：90度。
- en: To find the external angle for a triangle, simply subtract the internal angle
    from 180\. This means the external angle of an equilateral triangle is 120 degrees.
    Update 60 in the code to 120, and you should get a triangle.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到三角形的外角，只需用180减去内角。这意味着等边三角形的外角是120度。将代码中的60更新为120，你应该就能得到一个三角形。
- en: 'EXERCISE 1-4: POLYGON FUNCTIONS'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-4：多边形函数
- en: Write a function called `polygon` that takes an integer as an argument and makes
    the turtle draw a polygon with that integer’s number of sides.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 写一个名为`polygon`的函数，它接受一个整数作为参数，并让海龟画出一个有该整数个边的多边形。
- en: MAKING VARIABLES VARY
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使变量变化
- en: 'There’s more we can do with variables: we can automatically increase the variable
    by a certain amount so that each time we run the function, the square is bigger
    than the last. For example, using a `length` variable, we can make a square, then
    increase the `length` variable a little before making the next square by incrementing
    the variable like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对变量做更多的操作：我们可以自动增加变量的值，这样每次运行函数时，正方形就会比上一个大。例如，使用一个`length`变量，我们可以先画一个正方形，然后增加`length`变量一点，再画下一个正方形，像这样增加变量：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As a math guy, this line of code didn’t make sense to me when I first saw it!
    How can “length equal length + 5”? It’s not possible! But code isn’t an equation,
    and an equal sign (`=`) in this case doesn’t mean “this side equals that side.”
    *The equal sign in programming means we’re assigning a value*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个数学爱好者，当我第一次看到这行代码时，它让我感到困惑！“length 等于 length + 5”怎么可能呢？这不可能！但代码不是方程式，在这种情况下，等号（`=`）并不意味着“这边等于那边”。*在编程中，等号表示我们在给变量赋值*。
- en: 'Take the following example. Open the Python shell and enter the following code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下示例为例。打开 Python shell，并输入以下代码：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This means we’re creating a variable called `radius` (if there isn’t one already)
    and assigning it the value 10\. You can always assign a different value to it
    later, like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们正在创建一个名为`radius`的变量（如果它还不存在的话），并将其赋值为10。你以后可以随时给它赋不同的值，比如这样：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Press ENTER and your code will be executed. This means the value 20 will be
    assigned to the `radius` variable. To check whether a variable is equal to something,
    use double equal signs (`==`). For example, to check whether the value of the
    `radius` variable is 20, you can enter this into the shell:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 键，你的代码将会被执行。这意味着值20将被赋给`radius`变量。要检查一个变量是否等于某个值，可以使用双等号（`==`）。例如，要检查`radius`变量的值是否为20，你可以在
    shell 中输入以下内容：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Press ENTER and it should print the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 键，它应该会打印出以下内容：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now the value of the `radius` variable is 20\. It’s often useful to increment
    variables rather than assign them number values manually. You can use a variable
    called `count` to count how many times something happens in a program. It should
    start at 0 and go up by one after every occurrence. To make a variable go up by
    one in value, you add 1 to its value and then assign the new value to the variable,
    like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`radius`变量的值是20。通常，比起手动给变量赋数值，增量操作会更有用。你可以使用一个名为`count`的变量来统计程序中某个事件发生的次数。它应该从0开始，并在每次事件发生后增加1。为了让一个变量增加1，你可以将它的值加1，然后将新值赋给该变量，像这样：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also write this as follows to make the code more compact:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以按以下方式编写代码，使其更加简洁：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This means “add 1 to my count variable.” You can use addition, subtraction,
    multiplication, and division in this notation. Let’s see it in action by running
    this code in the Python shell. We’ll assign `x` the value 12 and `y` the value
    3, and then make `x` go up by `y`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着“给我的计数变量加1”。你可以在这种表示法中使用加法、减法、乘法和除法。让我们通过在 Python shell 中运行这段代码来看看它是如何工作的。我们将`x`赋值为12，`y`赋值为3，然后让`x`增加`y`的值：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Notice `y` didn’t change. We can increment `x` using addition, subtraction,
    multiplication, and division with similar notation:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`y`没有改变。我们可以通过加法、减法、乘法和除法来递增`x`，使用类似的符号表示法：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we’ll set `x` to one less than its current value:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把`x`设置为其当前值减去1：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We know that `x` is 16\. Now let’s set `x` to two times its current value:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道`x`是16。现在我们将`x`设置为其当前值的两倍：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, we can set `x` to a quarter of its value by dividing it by 4:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过将`x`除以4来将其设置为当前值的四分之一：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now you know how to increment a variable using arithmetic operators followed
    by an equal sign. In sum, `x += 3` will make `x` go up by 3, whereas `x -= 1`
    will make it go down by 1, and so on.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何使用算术运算符和等号递增一个变量。总之，`x += 3`将使`x`增加3，而`x -= 1`将使其减少1，以此类推。
- en: 'You can use the following line of code to make the length increment by 5 every
    loop, which will come in handy in the next exercises:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码行让长度在每次循环时增加5，这在接下来的练习中会非常有用：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: With this notation, every time the `length` variable is used, 5 is added to
    the value and saved into the variable.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种符号表示法，每次使用`length`变量时，都会向其值添加5，并将结果保存到该变量中。
- en: 'EXERCISE 1-5: TURTLE SP IRAL'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-5：TURTLE 螺旋
- en: 'Make a function to draw 60 squares, turning 5 degrees after each square and
    making each successive square bigger. Start at a `length` of 5 and increment 5
    units every square. It should look like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个函数来绘制60个正方形，每绘制一个正方形后旋转5度，并使每个连续的正方形变大。从`length`为5开始，每个正方形增加5个单位。它应该像这样：
- en: '![image](../images/f016-01.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f016-01.jpg)'
- en: SUMMARY
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you learned how to use Python’s turtle module and its built-in
    functions like `forward()` and `right()` to draw different shapes. You also saw
    that the turtle can perform many more functions than those we covered here. There
    are dozens more that I encourage you to experiment with before moving on to the
    next chapter. If you do a web search for “python turtle,” the first result will
    probably be the turtle module documentation on the official Python website (*[https://python.org/](https://python.org/)*)
    website. You’ll find all the turtle methods on that page, some of which is shown
    in [Figure 1-9](ch01.xhtml#ch01fig9).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Python 的 turtle 模块及其内置函数，如`forward()`和`right()`来绘制不同的图形。你还看到了
    turtle 能够执行比我们在这里介绍的更多功能。还有很多其他的功能，我鼓励你在进入下一章之前先尝试一下。如果你在网上搜索“python turtle”，第一个结果很可能是官方
    Python 网站上的 turtle 模块文档 (*[https://python.org/](https://python.org/)*)。你将在该页面找到所有
    turtle 方法，其中一些在[图 1-9](ch01.xhtml#ch01fig9)中展示。
- en: '![image](../images/f017-01.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f017-01.jpg)'
- en: '*Figure 1-9: You can find many more turtle functions and methods on the Python
    website!*'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-9：你可以在 Python 网站上找到更多的 turtle 函数和方法！*'
- en: You learned how to define your own functions, thus saving valuable code that
    can be reused at any time. You also learned how to run code multiple times using
    `for` loops without having to rewrite the code. Knowing how to save time and avoid
    mistakes using functions and loops will be useful when you build more complicated
    math tools later on.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何定义自己的函数，从而节省了可以随时重用的宝贵代码。你还学习了如何使用`for`循环多次运行代码，而无需重新编写代码。知道如何使用函数和循环节省时间并避免错误，将在你以后构建更复杂的数学工具时非常有用。
- en: In the next chapter we’ll build on the basic arithmetic operators you used to
    increment variables. You’ll learn more about the basic operators and data types
    in Python and how to use them to build simple computation tools. We’ll also explore
    how to store items in lists and use indices to access list items.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将基于你使用的基本算术运算符来递增变量。你将学习更多关于 Python 中基本运算符和数据类型的知识，以及如何使用它们来构建简单的计算工具。我们还将探索如何将项目存储在列表中，并使用索引访问列表项。
- en: 'EXERCISE 1-6: A STAR IS BORN'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-6：星星的诞生
- en: 'First, write a “star” function that will draw a five-pointed star, like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编写一个“star”函数，它将绘制一个五角星，像这样：
- en: '![image](../images/f018-01.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f018-01.jpg)'
- en: 'Next, write a function called `starSpiral()` that will draw a spiral of stars,
    like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写一个名为`starSpiral()`的函数，它将绘制一个星星螺旋，像这样：
- en: '![image](../images/f018-02.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f018-02.jpg)'
