["```py\n$ **python -m pip install --user matplotlib**\n```", "```py\n$ **python3 -m pip install --user matplotlib**\n```", "```py\nimport matplotlib.pyplot as plt\n\nsquares = [1, 4, 9, 16, 25]\n\n❶ fig, ax = plt.subplots()\nax.plot(squares)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nsquares = [1, 4, 9, 16, 25]\n\nfig, ax = plt.subplots()\n❶ ax.plot(squares, linewidth=3)\n\n# Set chart title and label axes.\n❷ ax.set_title(\"Square Numbers\", fontsize=24)\n❸ ax.set_xlabel(\"Value\", fontsize=14)\nax.set_ylabel(\"Square of Value\", fontsize=14)\n\n# Set size of tick labels.\n❹ ax.tick_params(labelsize=14)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\ninput_values = [1, 2, 3, 4, 5]\nsquares = [1, 4, 9, 16, 25]\n\nfig, ax = plt.subplots()\nax.plot(input_values, squares, linewidth=3)\n\n# Set chart title and label axes.\n*--snip--*\n```", "```py\n>>> **import matplotlib.pyplot as plt**\n>>> **plt.style.available**\n['Solarize_Light2', '_classic_test_patch', '_mpl-gallery',\n`--snip--`\n```", "```py\nimport matplotlib.pyplot as plt\n\ninput_values = [1, 2, 3, 4, 5]\nsquares = [1, 4, 9, 16, 25]\n\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\n*--snip--*\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\nax.scatter(2, 4)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\n❶ ax.scatter(2, 4, s=200)\n\n# Set chart title and label axes.\nax.set_title(\"Square Numbers\", fontsize=24)\nax.set_xlabel(\"Value\", fontsize=14)\nax.set_ylabel(\"Square of Value\", fontsize=14)\n\n# Set size of tick labels.\nax.tick_params(labelsize=14)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\n\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\nax.scatter(x_values, y_values, s=100)\n\n# Set chart title and label axes.\n*--snip--*\n```", "```py\nimport matplotlib.pyplot as plt\n\n❶ x_values = range(1, 1001)\ny_values = [x**2 for x in x_values]\n\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\n❷ ax.scatter(x_values, y_values, s=10)\n\n# Set chart title and label axes.\n*--snip--*\n\n# Set the range for each axis.\n❸ ax.axis([0, 1100, 0, 1_100_000])\n\nplt.show()\n```", "```py\n*--snip--*\n# Set the range for each axis.\nax.axis([0, 1100, 0, 1_100_000])\nax.ticklabel_format(style='plain')\n\nplt.show()\n```", "```py\nax.scatter(x_values, y_values, color='red', s=10)\n```", "```py\nax.scatter(x_values, y_values, color=(0, 0.8, 0), s=10)\n```", "```py\n*--snip--*\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\nax.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues, s=10)\n\n# Set chart title and label axes.\n*--snip--*\n```", "```py\nplt.savefig('squares_plot.png', bbox_inches='tight')\n```", "```py\n❶ from random import choice\n\nclass RandomWalk:\n    \"\"\"A class to generate random walks.\"\"\"\n\n❷     def __init__(self, num_points=5000):\n        \"\"\"Initialize attributes of a walk.\"\"\"\n        self.num_points = num_points\n\n        # All walks start at (0, 0).\n❸         self.x_values = [0]\n        self.y_values = [0]\n```", "```py\ndef fill_walk(self):\n\"\"\"Calculate all the points in the walk.\"\"\"\n\n # Keep taking steps until the walk reaches the desired length.\n❶     while len(self.x_values) < self.num_points:\n\n        # Decide which direction to go, and how far to go.\n❷         x_direction = choice([1, -1])\n        x_distance = choice([0, 1, 2, 3, 4])\n❸         x_step = x_direction * x_distance\n\n        y_direction = choice([1, -1])\n        y_distance = choice([0, 1, 2, 3, 4])\n❹         y_step = y_direction * y_distance\n\n        # Reject moves that go nowhere.\n❺         if x_step == 0 and y_step == 0:\n            continue\n\n        # Calculate the new position.\n❻         x = self.x_values[-1] + x_step\n        y = self.y_values[-1] + y_step\n\n        self.x_values.append(x)\n        self.y_values.append(y)\n```", "```py\nimport matplotlib.pyplot as plt\n\nfrom random_walk import RandomWalk\n\n# Make a random walk.\n❶ rw = RandomWalk()\nrw.fill_walk()\n\n# Plot the points in the walk.\nplt.style.use('classic')\nfig, ax = plt.subplots()\n❷ ax.scatter(rw.x_values, rw.y_values, s=15)\n❸ ax.set_aspect('equal')\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nfrom random_walk import RandomWalk\n\n# Keep making new walks, as long as the program is active.\nwhile True:\n # Make a random walk.\n    *--snip--*\n plt.show()\n\n    keep_running = input(\"Make another walk? (y/n): \")\n    if keep_running == 'n':\n        break\n```", "```py\n*--snip--*\nwhile True:\n # Make a random walk.\n rw = RandomWalk()\n rw.fill_walk()\n\n    # Plot the points in the walk.\n plt.style.use('classic')\n fig, ax = plt.subplots()\n❶     point_numbers = range(rw.num_points)\n    ax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues,\n        edgecolors='none', s=15)\n    ax.set_aspect('equal')\n plt.show()\n  *--snip--*\n```", "```py\n*--snip--*\nwhile True:\n  *--snip--*\n ax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues,\n edgecolors='none', s=15)\n ax.set_aspect('equal')\n\n    # Emphasize the first and last points.\n    ax.scatter(0, 0, c='green', edgecolors='none', s=100)\n    ax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none',\n        s=100)\n\n plt.show()\n  *--snip--*\n```", "```py\n*--snip--*\nwhile True:\n  *--snip--*\n ax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none',\n s=100)\n\n    # Remove the axes.\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\n plt.show()\n  *--snip--*\n```", "```py\n*--snip--*\nwhile True:\n # Make a random walk.\n    rw = RandomWalk(50_000)\n rw.fill_walk()\n\n # Plot the points in the walk.\n plt.style.use('classic')\n fig, ax = plt.subplots()\n point_numbers = range(rw.num_points)\n  ax.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues,\n        edgecolors='none', s=1)\n  *--snip--*\n```", "```py\nfig, ax = plt.subplots(figsize=(15, 9))\n```", "```py\nfig, ax = plt.subplots(figsize=(10, 6), dpi=128)\n```", "```py\n$ **python -m pip install --user plotly**\n$ **python -m pip install --user pandas**\n```", "```py\nfrom random import randint\n\nclass Die:\n    \"\"\"A class representing a single die.\"\"\"\n\n❶     def __init__(self, num_sides=6):\n        \"\"\"Assume a six-sided die.\"\"\"\n        self.num_sides = num_sides\n\n    def roll(self):\n        \"\"\"\"Return a random value between 1 and number of sides.\"\"\"\n❷         return randint(1, self.num_sides)\n```", "```py\nfrom die import Die\n\n# Create a D6.\n❶ die = Die()\n\n# Make some rolls, and store results in a list.\nresults = []\n❷ for roll_num in range(100):\n    result = die.roll()\n    results.append(result)\n\nprint(results)\n```", "```py\n[4, 6, 5, 6, 1, 5, 6, 3, 5, 3, 5, 3, 2, 2, 1, 3, 1, 5, 3, 6, 3, 6, 5, 4,  1, 1, 4, 2, 3, 6, 4, 2, 6, 4, 1, 3, 2, 5, 6, 3, 6, 2, 1, 1, 3, 4, 1, 4, 3, 5, 1, 4, 5, 5, 2, 3, 3, 1, 2, 3, 5, 6, 2, 5, 6, 1, 3, 2, 1, 1, 1, 6, 5, 5, 2, 2, 6, 4, 1, 4, 5, 1, 1, 1, 4, 5, 3, 3, 1, 3, 5, 4, 5, 6, 5, 4, 1, 5, 1, 2]\n```", "```py\n*--snip--*\n# Make some rolls, and store results in a list.\nresults = []\n❶ for roll_num in range(1000):\n result = die.roll()\n results.append(result)\n\n# Analyze the results.\nfrequencies = []\n❷ poss_results = range(1, die.num_sides+1)\nfor value in poss_results:\n❸     frequency = results.count(value)\n❹     frequencies.append(frequency)\n\nprint(frequencies)\n```", "```py\n[155, 167, 168, 170, 159, 181]\n```", "```py\nimport plotly.express as px\n\nfrom die import Die\n*--snip--*\n\nfor value in poss_results:\n frequency = results.count(value)\n frequencies.append(frequency)\n\n# Visualize the results.\nfig = px.bar(x=poss_results, y=frequencies)\nfig.show()\n```", "```py\n*--snip--*\n# Visualize the results.\n❶ title = \"Results of Rolling One D6 1,000 Times\"\n❷ labels = {'x': 'Result', 'y': 'Frequency of Result'}\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\nfig.show()\n```", "```py\nimport plotly.express as px\n\nfrom die import Die\n\n# Create two D6 dice.\ndie_1 = Die()\ndie_2 = Die()\n\n# Make some rolls, and store results in a list.\nresults = []\nfor roll_num in range(1000):\n❶     result = die_1.roll() + die_2.roll()\n results.append(result)\n\n# Analyze the results.\nfrequencies = []\n❷ max_result = die_1.num_sides + die_2.num_sides\n❸ poss_results = range(2, max_result+1)\nfor value in poss_results:\n frequency = results.count(value)\n frequencies.append(frequency)\n\n# Visualize the results.\ntitle = \"Results of Rolling Two D6 Dice 1,000 Times\"\nlabels = {'x': 'Result', 'y': 'Frequency of Result'}\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\nfig.show()\n```", "```py\n*--snip--*\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\n\n# Further customize chart.\nfig.update_layout(xaxis_dtick=1)\n\nfig.show()\n```", "```py\nimport plotly.express as px\n\nfrom die import Die\n\n# Create a D6 and a D10.\ndie_1 = Die()\n❶ die_2 = Die(10)\n\n# Make some rolls, and store results in a list.\nresults = []\nfor roll_num in range(50_000):\n result = die_1.roll() + die_2.roll()\n results.append(result)\n\n# Analyze the results.\n*--snip--*\n\n# Visualize the results.\n❷ title = \"Results of Rolling a D6 and a D10 50,000 Times\"\nlabels = {'x': 'Result', 'y': 'Frequency of Result'}\n*--snip--*\n```", "```py\nfig.write_html('dice_visual_d6d10.xhtml')\n```"]