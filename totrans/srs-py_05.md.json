["```py\n#!/usr/bin/python\nfrom distutils.core import setup\n\nsetup(name=\"rebuildd\",\n      description=\"Debian packages rebuild tool\",\n      author=\"Julien Danjou\",\n      author_email=\"acid@debian.org\",\n      url=\"http://julien.danjou.info/software/rebuildd.html\",\n      packages=['rebuildd'])\n```", "```py\n#!/usr/bin/env python\nimport setuptools\n\nsetuptools.setup(\n    name=\"rebuildd\",\n    version=\"0.2\",\n    author=\"Julien Danjou\",\n    author_email=\"acid@debian.org\",\n    description=\"Debian packages rebuild tool\",\n    license=\"GPL\",\n    url=\"http://julien.danjou.info/software/rebuildd/\",\n    packages=['rebuildd'],\n    classifiers=[\n        \"Development Status :: 2 - Pre-Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: GNU General Public License (GPL)\", \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\"\n    ],\n)\n```", "```py\nimport setuptools\n\nsetuptools.setup()\n```", "```py\n[metadata]\nname = foobar\nauthor = Dave Null\nauthor-email = foobar@example.org\nlicense = MIT\nlong_description = file: README.rst\nurl = http://pypi.python.org/pypi/foobar\nrequires-python = >=2.6\nclassifiers =\n    Development Status :: 4 - Beta\n    Environment :: Console\n    Intended Audience :: Developers\n    Intended Audience :: Information Technology\n    License :: OSI Approved :: Apache Software License\n    Operating System :: OS Independent\n    Programming Language :: Python\n```", "```py\nimport setuptools\n\nsetuptools.setup(setup_requires=['pbr'], pbr=True)\n```", "```py\n   $ python setup.py bdist_wheel\n   running bdist_wheel\n   running build\n   running build_py\n   creating build/lib\n   creating build/lib/daiquiri\n   creating build/lib/daiquiri/tests\n   copying daiquiri/tests/__init__.py -> build/lib/daiquiri/tests\n   --snip--\n   running egg_info\n   writing requirements to daiquiri.egg-info/requires.txt\n   writing daiquiri.egg-info/PKG-INFO\n   writing top-level names to daiquiri.egg-info/top_level.txt\n   writing dependency_links to daiquiri.egg-info/dependency_links.txt\n   writing pbr to daiquiri.egg-info/pbr.json\n   writing manifest file 'daiquiri.egg-info/SOURCES.txt'\n   installing to build/bdist.macosx-10.12-x86_64/wheel\n   running install\n   running install_lib\n   --snip--\n\n   running install_scripts\n   creating build/bdist.macosx-10.12-x86_64/wheel/daiquiri-1.3.0.dist-info/WHEEL\n➊ creating '/Users/jd/Source/daiquiri/dist/daiquiri-1.3.0-py2.py3-none-any.whl'\n   and adding '.' to it\n   adding 'daiquiri/__init__.py'\n   adding 'daiquiri/formatter.py'\n   adding 'daiquiri/handlers.py'\n\n   --snip--\n```", "```py\n$ python wheel-0.21.0-py2.py3-none-any.whl/wheel -h\nusage: wheel [-h]\n\n             {keygen,sign,unsign,verify,unpack,install,install-\nscripts,convert,help}\n             --snip--\n\npositional arguments:\n--snip--\n```", "```py\npython foobar.zip\n```", "```py\nPYTHONPATH=foobar.zip python -m __main__\n```", "```py\npython foobar.zip/mymod\n```", "```py\nPYTHONPATH=foobar.zip python -m mymod.__main__\n```", "```py\npython setup.py bdist_wheel --universal\n```", "```py\n[wheel]\nuniversal=1\n```", "```py\n$ python setup.py sdist\nrunning sdist\n\n[pbr] Generating AUTHORS\nrunning egg_info\nwriting requirements to ceilometer.egg-info/requires.txt\nwriting ceilometer.egg-info/PKG-INFO\nwriting top-level names to ceilometer.egg-info/top_level.txt\nwriting dependency_links to ceilometer.egg-info/dependency_links.txt\nwriting entry points to ceilometer.egg-info/entry_points.txt\n[pbr] Processing SOURCES.txt\n[pbr] In git context, generating filelist from git\nwarning: no previously-included files matching '*.pyc' found anywhere in\ndistribution\nwriting manifest file 'ceilometer.egg-info/SOURCES.txt'\nrunning check\ncopying setup.cfg -> ceilometer-2014.1.a6-g772e1a7\nWriting ceilometer-2014.1.a6-g772e1a7/setup.cfg\n\n--snip--\n\nCreating tar archive\nremoving 'ceilometer-2014.1.a6.g772e1a7' (and everything under it)\n```", "```py\n[distutils]\nindex-servers =\n    testpypi [testpypi]\nusername = <your username>\npassword = <your password>\nrepository = https://testpypi.python.org/pypi\n```", "```py\n$ python setup.py register -r testpypi\nrunning register\nrunning egg_info\nwriting requirements to ceilometer.egg-info/requires.txt\nwriting ceilometer.egg-info/PKG-INFO\nwriting top-level names to ceilometer.egg-info/top_level.txt\nwriting dependency_links to ceilometer.egg-info/dependency_links.txt\nwriting entry points to ceilometer.egg-info/entry_points.txt\n[pbr] Reusing existing SOURCES.txt\nrunning check\nRegistering ceilometer to https://testpypi.python.org/pypi\nServer response (200): OK\n```", "```py\n$ python setup.py sdist upload -r testpypi\nrunning sdist\n[pbr] Writing ChangeLog\n[pbr] Generating AUTHORS\nrunning egg_info\nwriting requirements to ceilometer.egg-info/requires.txt\nwriting ceilometer.egg-info/PKG-INFO\nwriting top-level names to ceilometer.egg-info/top_level.txt\nwriting dependency_links to ceilometer.egg-info/dependency_links.txt\nwriting entry points to ceilometer.egg-info/entry_points.txt\n[pbr] Processing SOURCES.txt\n[pbr] In git context, generating filelist from git\nwarning: no previously-included files matching '*.pyc' found anywhere in\ndistribution\nwriting manifest file 'ceilometer.egg-info/SOURCES.txt'\nrunning check\ncreating ceilometer-2014.1.a6.g772e1a7\n\n--snip--\n\ncopying setup.cfg -> ceilometer-2014.1.a6.g772e1a7\nWriting ceilometer-2014.1.a6.g772e1a7/setup.cfg\nCreating tar archive\nremoving 'ceilometer-2014.1.a6.g772e1a7' (and everything under it)\nrunning upload Submitting dist/ceilometer-2014.1.a6.g772e1a7.tar.gz to https://testpypi\n.python.org/pypi\nServer response (200): OK\n```", "```py\n$ python setup.py bdist_wheel upload -r testpypi\nrunning bdist_wheel\nrunning build\nrunning build_py\nrunning egg_info\nwriting requirements to ceilometer.egg-info/requires.txt\nwriting ceilometer.egg-info/PKG-INFO\nwriting top-level names to ceilometer.egg-info/top_level.txt\nwriting dependency_links to ceilometer.egg-info/dependency_links.txt\nwriting entry points to ceilometer.egg-info/entry_points.txt\n[pbr] Reusing existing SOURCES.txt\ninstalling to build/bdist.linux-x86_64/wheel\nrunning install\nrunning install_lib\ncreating build/bdist.linux-x86_64/wheel\n\n--snip--\n\ncreating build/bdist.linux-x86_64/wheel/ceilometer-2014.1.a6.g772e1a7\n.dist-info/WHEEL\nrunning upload\nSubmitting /home/jd/Source/ceilometer/dist/ceilometer-2014.1.a6\n.g772e1a7-py27-none-any.whl to https://testpypi.python.org/pypi\nServer response (200): OK\n```", "```py\n$ pip install -i https://testpypi.python.org/pypi ceilometer\n```", "```py\n[distutils]\nindex-servers =\n    pypi\n    testpypi\n\n[pypi]\nusername = <your username>\npassword = <your password> [testpypi]\nrepository = https://testpypi.python.org/pypi\nusername = <your username>\npassword = <your password>\n```", "```py\n#!/usr/bin/python\nfrom distutils.core import setup\n\nsetup(name=\"rebuildd\",\n    description=\"Debian packages rebuild tool\",\n    author=\"Julien Danjou\",\n    author_email=\"acid@debian.org\",\n    url=\"http://julien.danjou.info/software/rebuildd.html\",\n    entry_points={\n        'console_scripts': [\n            'rebuildd = rebuildd:main',\n        ],\n    },\n    packages=['rebuildd'])\n```", "```py\n$ epi group list\n---------------------------\n| Name                    |\n--------------------------\n| console_scripts |\n| distutils.commands |\n| distutils.setup_keywords |\n| egg_info.writers |\n| epi.commands |\n| flake8.extension |\n| setuptools.file_finders |\n| setuptools.installation |\n--------------------------\n```", "```py\n$ epi group show console_scripts\n-------------------------------------------------\n| Name     | Module   | Member | Distribution | Error |\n-------------------------------------------------\n| coverage | coverage | main   | coverage 3.4 |       |\n```", "```py\n#!/usr/bin/python\nimport sys\nimport mysoftware\n\nmysoftware.SomeClass(sys.argv).run()\n```", "```py\ndef main():\n    print(\"Client started\")\n```", "```py\ndef main():\n    print(\"Server started\")\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name=\"foobar\",\n    version=\"1\",\n    description=\"Foo!\",\n    author=\"Julien Danjou\",\n    author_email=\"julien@danjou.info\",\n    packages=[\"foobar\"],\n    entry_points={\n        \"console_scripts\": [\n         ➊ \"foobard = foobar.server:main\",\n            \"foobar = foobar.client:main\",\n        ],\n     },\n)\n```", "```py\n#!/usr/bin/python\n# EASY-INSTALL-ENTRY-SCRIPT: 'foobar==1','console_scripts','foobar'\n__requires__ = 'foobar==1'\nimport sys\nfrom pkg_resources import load_entry_point\n\nif __name__ == '__main__':\n    sys.exit(\n        load_entry_point('foobar==1', 'console_scripts', 'foobar')()\n    )\n```", "```py\nimport pkg_resources\nimport time\n\ndef main():\n    seconds_passed = 0\n    while True:\n        for entry_point in pkg_resources.iter_entry_points('pytimed'):\n            try:\n                seconds, callable = entry_point.load()()\n            except:\n                # Ignore failure\n                pass\n            else:\n                if seconds_passed % seconds == 0:\n                    callable()\n        time.sleep(1)\n        seconds_passed += 1\n```", "```py\ndef print_hello():\n    print(\"Hello, world!\")\n\ndef say_hello():\n    return 2, print_hello\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name=\"hello\",\n    version=\"1\",\n    packages=[\"hello\"],\n    entry_points={\n        \"pytimed\": [\n            \"hello = hello:say_hello\",\n        ],\n     },)\n```", "```py\n>>> import pytimed\n>>> pytimed.main()\nHello, world!\nHello, world!\nHello, world!\n```", "```py\nfrom stevedore.extension import ExtensionManager\nimport time\n\ndef main():\n    seconds_passed = 0\n    extensions = ExtensionManager('pytimed', invoke_on_load=True)\n    while True:\n        for extension in extensions:\n            try:\n                seconds, callable = extension.obj except:\n                # Ignore failure\n                pass\n            else:\n                if seconds_passed % seconds == 0:\n                    callable()\n        time.sleep(1)\n        seconds_passed += 1\n```", "```py\nfrom stevedore.driver import DriverManager\nimport time\n\ndef main(name):\n    seconds_passed = 0\n    seconds, callable = DriverManager('pytimed', name, invoke_on_load=True).\ndriver\n    while True:\n        if seconds_passed % seconds == 0:\n            callable()\n        time.sleep(1)\n        seconds_passed += 1\n\nmain(\"hello\")\n```"]