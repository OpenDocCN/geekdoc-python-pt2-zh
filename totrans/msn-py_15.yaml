- en: '**C'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DEBUGGING YOUR LISTINGS**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some of the listings in this book might not work for you the first time. Don’t
    be put off! This is normal when programming, even for experienced coders. It’s
    easy to overlook details that will make a huge difference to the program. Fixing
    errors in a program is called *debugging*.
  prefs: []
  type: TYPE_NORMAL
- en: To minimize problems, I’ve kept the listings as short as possible, so if something
    doesn’t work in a listing, you won’t have to check many instructions. I’ve also
    included warnings in the text when there’s anything particularly tricky that you
    should look out for.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you can’t work out how to fix a program, you can use my version
    of that listing that you downloaded in the book’s resources (see “[What’s in the
    ZIP File](intro.xhtml#lev11)” on [page 8](intro.xhtml#page_8)). If you’ve modified
    the program, try copying and pasting the new bits from my listing into your program.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this appendix, I’ve compiled some tips to help you fix any programs that
    aren’t working for you. When Python spots an error, it usually shows you the line
    in the program where it first noticed something was wrong. That isn’t always the
    line where the mistake actually is: it’s just how far Python got before it noticed
    a problem. If the line shown looks okay, check the previous line first and then
    check the other new instructions in the listing for mistakes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**INDENTATION**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indentation is used to tell Python which bits of the program belong together.
    For example, all the instructions that belong to a function need to be indented
    underneath the `def` instruction that defines the function. Instructions that
    belong to a `while`, `for`, `if`, or `else` command need to be indented too. Listing
    C-1 provides an example, part of the `get_floor_type()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing C-1: An excerpt from the game listing, showing indentation levels*'
  prefs: []
  type: TYPE_NORMAL
- en: All the instructions belong to the function `get_floor_type()` ➊, so they’re
    all indented by at least four spaces (see ➋ and ➍). The `return` instructions
    (➌ and ➎) also belong to the `if` ➋ and `else` ➍ commands above them, so they’re
    indented by another four spaces, making eight spaces in total. When you add the
    colon at the end of the line when typing in the `def`, `if`, and `else` instructions,
    the indentation on the next line is added automatically in IDLE. Use the DELETE
    key to remove indentation you don’t need.
  prefs: []
  type: TYPE_NORMAL
- en: If you get the indentation level wrong for some instructions, the program might
    behave strangely or simply run slower, even if Python doesn’t report any errors.
    So it’s worth double-checking your indentation levels.
  prefs: []
  type: TYPE_NORMAL
- en: If Python does give an error that shows it expected an indented block, it means
    you haven’t indented something that you should have. If Python tells you there’s
    an unexpected indent, you’ve added too many spaces at the start of the instruction,
    or you might have instructions indented at different levels that should be lined
    up. In this book, I’ve used four spaces for each level of indentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**CASE SENSITIVITY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python is case sensitive, which means it matters whether you use uppercase
    (ABC…) or lowercase (abc…) letters. Most of the time, you should use lowercase
    when writing Python code. Here are the exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: The values `True`, `False`, and `None` have a capital letter at the start. When
    you type them correctly, they’ll be orange in IDLE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the variable, dictionary, and list names in the program are uppercase,
    such as `TILE_SIZE` and `PLAYER`. If your capitalization is inconsistent, you
    might get an error message saying that a particular name is not defined. Python
    doesn’t recognize two names with different capitalization as the same name. (Check
    for spelling errors in the name too.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything inside quotation marks may vary in case. This is text the program uses
    to do something and is often written so it looks correct when people read it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python ignores anything after a `#` symbol on the same line, so you can use
    whatever capitalization you like there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PARENTHESES AND BRACKETS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Check that you’re using the correct bracket shapes in the correct order, especially
    if Python tells you there’s a problem with something in a list or dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: Parentheses `()` are used for tuples and for giving information to a function.
    For example, the `range()`, `print()` and `len()` functions use parentheses. So
    do our own functions in the *Escape* game, such as `remove_object()` and `draw_image()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Square brackets `[]` mark the start and the end of a list. Sometimes, you might
    have a list inside another list, so you’ll have several pairs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curly brackets `{}` mark the start and the end of a dictionary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**COLONS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the code line begins with `for`, `while`, `if`, `else` or `def`, it needs
    a colon (`:`) at the end of it. A colon also separates the key from the data in
    a dictionary. The *Escape* listing doesn’t use semicolons (`;`), so if there’s
    one in your code, change it to a colon.
  prefs: []
  type: TYPE_NORMAL
- en: '**COMMAS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Items in a list or tuple need commas between them. When adding new lines to
    a list, make sure you include a comma after the last item before adding new items.
    Look for patterns in the data to help you spot any mistakes involving commas.
    For example, each list in the `props` dictionary and `recipes` list has three
    numbers in it.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMAGES AND SOUNDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If Python tells you that no images or sounds directory was found, check that
    you’ve downloaded the files and are saving your files in the right place. See
    “[Downloading the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7)
    and [Listing 1-1](ch01.xhtml#ch01list1) on [page 19](ch01.xhtml#page_19).
  prefs: []
  type: TYPE_NORMAL
- en: '**SPELLING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IDLE’s color coding can help you spot spelling errors in some instructions.
    Check that the colors on your screen match the colors in the book. Be careful
    when you’re spelling variables and lists: any mistakes might cause the program
    to stop or behave strangely.'
  prefs: []
  type: TYPE_NORMAL
