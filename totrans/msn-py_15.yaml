- en: '**C'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**C**'
- en: DEBUGGING YOUR LISTINGS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试你的代码列表**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Some of the listings in this book might not work for you the first time. Don’t
    be put off! This is normal when programming, even for experienced coders. It’s
    easy to overlook details that will make a huge difference to the program. Fixing
    errors in a program is called *debugging*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的一些代码列表第一次运行时可能不会起作用。不要气馁！这是编程中常见的情况，即使是经验丰富的程序员也会遇到。忽略一些细节可能会导致程序发生重大差异。修复程序中的错误叫做*调试*。
- en: To minimize problems, I’ve kept the listings as short as possible, so if something
    doesn’t work in a listing, you won’t have to check many instructions. I’ve also
    included warnings in the text when there’s anything particularly tricky that you
    should look out for.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽量减少问题，我将代码列表保持得尽可能简短，因此如果某个列表无法正常工作，你不需要检查太多指令。我还在文本中添加了警告，提醒你注意特别棘手的部分。
- en: Remember that if you can’t work out how to fix a program, you can use my version
    of that listing that you downloaded in the book’s resources (see “[What’s in the
    ZIP File](intro.xhtml#lev11)” on [page 8](intro.xhtml#page_8)). If you’ve modified
    the program, try copying and pasting the new bits from my listing into your program.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你无法解决程序的问题，可以使用我在书籍资源中提供的该列表的版本（参见 “[ZIP文件中包含的内容](intro.xhtml#lev11)” 在[第8页](intro.xhtml#page_8)）。如果你修改了程序，可以尝试将我列表中的新部分复制并粘贴到你的程序中。
- en: 'In this appendix, I’ve compiled some tips to help you fix any programs that
    aren’t working for you. When Python spots an error, it usually shows you the line
    in the program where it first noticed something was wrong. That isn’t always the
    line where the mistake actually is: it’s just how far Python got before it noticed
    a problem. If the line shown looks okay, check the previous line first and then
    check the other new instructions in the listing for mistakes.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我整理了一些技巧，帮助你修复任何无法正常工作的程序。当Python发现错误时，通常会显示程序中出现问题的第一行。这并不总是错误实际所在的行：它只是Python发现问题时所能执行到的地方。如果显示的行看起来没问题，首先检查前一行，然后检查列表中的其他新指令是否有错误。
- en: '**INDENTATION**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缩进**'
- en: Indentation is used to tell Python which bits of the program belong together.
    For example, all the instructions that belong to a function need to be indented
    underneath the `def` instruction that defines the function. Instructions that
    belong to a `while`, `for`, `if`, or `else` command need to be indented too. Listing
    C-1 provides an example, part of the `get_floor_type()` function.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进用于告诉Python哪些部分的程序是属于同一组的。例如，所有属于某个函数的指令需要在定义该函数的`def`指令下进行缩进。属于`while`、`for`、`if`或`else`命令的指令也需要进行缩进。列表C-1提供了一个示例，展示了`get_floor_type()`函数的一部分。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing C-1: An excerpt from the game listing, showing indentation levels*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 C-1：游戏列表的摘录，展示了缩进层级*'
- en: All the instructions belong to the function `get_floor_type()` ➊, so they’re
    all indented by at least four spaces (see ➋ and ➍). The `return` instructions
    (➌ and ➎) also belong to the `if` ➋ and `else` ➍ commands above them, so they’re
    indented by another four spaces, making eight spaces in total. When you add the
    colon at the end of the line when typing in the `def`, `if`, and `else` instructions,
    the indentation on the next line is added automatically in IDLE. Use the DELETE
    key to remove indentation you don’t need.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的指令都属于函数`get_floor_type()` ➊，因此它们都至少缩进四个空格（参见 ➋ 和 ➍）。`return`指令（➌ 和 ➎）也属于它们上方的`if`
    ➋ 和 `else` ➍命令，因此它们再缩进四个空格，总共缩进八个空格。当你在输入`def`、`if`和`else`指令时，行尾加上冒号后，下一行的缩进会在IDLE中自动添加。使用DELETE键删除不需要的缩进。
- en: If you get the indentation level wrong for some instructions, the program might
    behave strangely or simply run slower, even if Python doesn’t report any errors.
    So it’s worth double-checking your indentation levels.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些指令的缩进级别设置错误，程序可能会出现异常行为，或者即使Python没有报告错误，也可能运行得更慢。因此，仔细检查你的缩进级别是值得的。
- en: If Python does give an error that shows it expected an indented block, it means
    you haven’t indented something that you should have. If Python tells you there’s
    an unexpected indent, you’ve added too many spaces at the start of the instruction,
    or you might have instructions indented at different levels that should be lined
    up. In this book, I’ve used four spaces for each level of indentation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Python 给出一个错误提示，显示它期望一个缩进块，这意味着你没有缩进应该缩进的内容。如果 Python 告诉你有意外的缩进，说明你在指令开始时添加了过多的空格，或者你可能有指令的缩进层级不一致，应该对齐。在本书中，我使用了四个空格作为每个缩进层级。
- en: '**CASE SENSITIVITY**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**大小写敏感**'
- en: 'Python is case sensitive, which means it matters whether you use uppercase
    (ABC…) or lowercase (abc…) letters. Most of the time, you should use lowercase
    when writing Python code. Here are the exceptions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是大小写敏感的，这意味着你使用大写字母（ABC...）还是小写字母（abc...）都很重要。大多数情况下，你应该在编写 Python 代码时使用小写字母。以下是一些例外情况：
- en: The values `True`, `False`, and `None` have a capital letter at the start. When
    you type them correctly, they’ll be orange in IDLE.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True`、`False` 和 `None` 这些值的首字母是大写的。当你正确输入它们时，它们会在 IDLE 中显示为橙色。'
- en: Some of the variable, dictionary, and list names in the program are uppercase,
    such as `TILE_SIZE` and `PLAYER`. If your capitalization is inconsistent, you
    might get an error message saying that a particular name is not defined. Python
    doesn’t recognize two names with different capitalization as the same name. (Check
    for spelling errors in the name too.)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序中的一些变量、字典和列表名称是大写的，如 `TILE_SIZE` 和 `PLAYER`。如果你的大小写不一致，可能会收到错误信息，提示某个名称未定义。Python
    不会把两个大小写不同的名称识别为相同的名称。（也要检查名称的拼写错误。）
- en: Anything inside quotation marks may vary in case. This is text the program uses
    to do something and is often written so it looks correct when people read it.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何在引号中的内容都可以有大小写变化。这是程序用来执行某些操作的文本，通常写得让它在人类阅读时看起来正确。
- en: Python ignores anything after a `#` symbol on the same line, so you can use
    whatever capitalization you like there.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 会忽略 `#` 符号后面同一行的内容，所以你可以在这里使用任何你喜欢的大小写字母。
- en: '**PARENTHESES AND BRACKETS**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**圆括号和方括号**'
- en: 'Check that you’re using the correct bracket shapes in the correct order, especially
    if Python tells you there’s a problem with something in a list or dictionary:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你是否使用了正确的括号形状，并且顺序正确，特别是当 Python 告诉你列表或字典中的某个地方出错时：
- en: Parentheses `()` are used for tuples and for giving information to a function.
    For example, the `range()`, `print()` and `len()` functions use parentheses. So
    do our own functions in the *Escape* game, such as `remove_object()` and `draw_image()`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆括号 `()` 用于元组和为函数提供信息。例如，`range()`、`print()` 和 `len()` 函数使用圆括号。我们的 *Escape*
    游戏中的函数也使用圆括号，如 `remove_object()` 和 `draw_image()`。
- en: Square brackets `[]` mark the start and the end of a list. Sometimes, you might
    have a list inside another list, so you’ll have several pairs.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号 `[]` 标记列表的开始和结束。有时，你可能会在一个列表中包含另一个列表，这样就会有多个括号对。
- en: Curly brackets `{}` mark the start and the end of a dictionary.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花括号 `{}` 标记字典的开始和结束。
- en: '**COLONS**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**冒号**'
- en: When the code line begins with `for`, `while`, `if`, `else` or `def`, it needs
    a colon (`:`) at the end of it. A colon also separates the key from the data in
    a dictionary. The *Escape* listing doesn’t use semicolons (`;`), so if there’s
    one in your code, change it to a colon.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码行以 `for`、`while`、`if`、`else` 或 `def` 开头时，它需要在行末加上冒号（`:`）。冒号还用于在字典中分隔键和值。*Escape*
    列表不使用分号（`;`），所以如果你的代码中有分号，改成冒号。
- en: '**COMMAS**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**逗号**'
- en: Items in a list or tuple need commas between them. When adding new lines to
    a list, make sure you include a comma after the last item before adding new items.
    Look for patterns in the data to help you spot any mistakes involving commas.
    For example, each list in the `props` dictionary and `recipes` list has three
    numbers in it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 列表或元组中的项需要用逗号分隔。当向列表中添加新行时，确保在添加新项之前，在最后一项后加上逗号。通过观察数据中的模式，可以帮助你发现涉及逗号的错误。例如，`props`
    字典和 `recipes` 列表中的每个列表都包含三个数字。
- en: '**IMAGES AND SOUNDS**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**图像和声音**'
- en: If Python tells you that no images or sounds directory was found, check that
    you’ve downloaded the files and are saving your files in the right place. See
    “[Downloading the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7)
    and [Listing 1-1](ch01.xhtml#ch01list1) on [page 19](ch01.xhtml#page_19).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Python 告诉你找不到图像或声音目录，检查你是否已经下载了文件，并且文件保存的位置是否正确。请参见 “[下载游戏文件](intro.xhtml#lev8)”
    第 7 页和第 19 页的 [示例 1-1](ch01.xhtml#ch01list1)。
- en: '**SPELLING**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拼写**'
- en: 'IDLE’s color coding can help you spot spelling errors in some instructions.
    Check that the colors on your screen match the colors in the book. Be careful
    when you’re spelling variables and lists: any mistakes might cause the program
    to stop or behave strangely.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE 的颜色编码可以帮助你发现一些指令中的拼写错误。检查屏幕上的颜色是否与书中的颜色匹配。拼写变量和列表时要小心：任何错误都可能导致程序停止或出现异常行为。
