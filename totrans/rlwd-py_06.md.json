["```py\n>>> import turtle\n>>> steve = turtle.Turtle('turtle') # Creates a turtle object with turtle shape.\n>>> steve.fd(50) # Moves turtle forward 50 pixels.\n>>> steve.left(90) # Rotates turtle left 90 degrees.\n>>> steve.fd(50)\n>>> steve.left(90)\n>>> steve.fd(50)\n```", "```py\n>>> for i in range(3):\n       steve.fd(50)\n       steve.left(90)\n```", "```py\n\n   >>> import turtle\n   >>> steve = turtle.Turtle('turtle')\n➊ >>> a_stamp = steve.stamp()\n➋ >>> steve.position()\n   ➌ (0.00,0.00)\n   >>> steve.fd(150)\n➍ >>> steve.color('gray')\n   >>> a_stamp = steve.stamp()\n   >>> steve.left(45)\n➎ >>> steve.bk(75)\n   >>> a_stamp = steve.stamp()\n➏ >>> steve.penup()\n   >>> steve.bk(75)\n   >>> steve.color('black')\n➐ >>> steve.setheading(180)\n   >>> a_stamp = steve.stamp()\n➑ >>> steve.pendown()\n   >>> steve.fd(50)\n➒ >>> steve.shape('triangle')\n```", "```py\napollo_8_free_return.py, part 1 \nfrom turtle import Shape, Screen, Turtle, Vec2D as Vec\n\n# User input:\nG = 8 \nNUM_LOOPS = 4100 \nRo_X = 0 \nRo_Y = -85 \nVo_X = 485 \nVo_Y = 0\n```", "```py\napollo_8_free_return.py, part 2\nclass GravSys():\n    \"\"\"Runs a gravity simulation on n-bodies.\"\"\"\n\n    def __init__(self):\n        self.bodies = []\n        self.t = 0\n        self.dt = 0.001    \n\n ➊ def sim_loop(self):\n        \"\"\"Loop bodies in a list through time steps.\"\"\"\n        for _ in range(NUM_LOOPS):\n            self.t += self.dt\n            for body in self.bodies:\n                body.step()\n```", "```py\napollo_8_free_return.py, part 3\nclass Body(Turtle): \n    \"\"\"Celestial object that orbits and projects gravity field.\"\"\" \n    def __init__(self, mass, start_loc, vel, gravsys, shape):\n        super().__init__(shape=shape)\n        self.gravsys = gravsys\n        self.penup()\n        self.mass = mass\n        self.setpos(start_loc)\n        self.vel = vel\n        gravsys.bodies.append(self)\n        #self.resizemode(\"user\")\n        #self.pendown()  # Uncomment to draw path behind object.\n```", "```py\napollo_8_free_return.py, part 4\n    def acc(self):\n        \"\"\"Calculate combined force on body and return vector components.\"\"\"\n        a = Vec(0, 0)\n        for body in self.gravsys.bodies:\n            if body != self:\n                r = body.pos() - self.pos()\n                a += (G * body.mass / abs(r)**3) * r\n        return a\n```", "```py\napollo_8_free_return.py, part 5\ndef step(self):\n    \"\"\"Calculate position, orientation, and velocity of a body.\"\"\"\n    dt = self.gravsys.dt\n    a = self.acc()\n    self.vel = self.vel + dt * a\n    self.setpos(self.pos() + dt * self.vel)\n ➊ if self.gravsys.bodies.index(self) == 2:  # Index 2 = CSM.\n        rotate_factor = 0.0006\n        self.setheading((self.heading() - rotate_factor * self.xcor()))\n     ➋ if self.xcor() < -20: \n            self.shape('arrow')\n            self.shapesize(0.5)\n            self.setheading(105)\n```", "```py\napollo_8_free_return.py, part 6\ndef main():  \n    screen = Screen()\n    screen.setup(width=1.0, height=1.0) # For fullscreen.\n    screen.bgcolor('black')\n    screen.title(\"Apollo 8 Free Return Simulation\")\n\n    gravsys = GravSys()\n```", "```py\nscreen.setup(width=800, height=900, startx=100, starty=0)\n```", "```py\napollo_8_free_return.py, part 7\n   image_earth = 'earth_100x100.gif'\n   screen.register_shape(image_earth)\n   earth = Body(1000000, (0, -25), Vec(0, -2.5), gravsys, image_earth)\n   earth.pencolor('white')\n   earth.getscreen().tracer(n=0, delay=0) \n\n➊ image_moon = 'moon_27x27.gif'\n   screen.register_shape(image_moon)\n   moon = Body(32000, (344, 42), Vec(-27, 147), gravsys, image_moon)\n   moon.pencolor('gray')\n```", "```py\napollo_8_free_return.py, part 8\ncsm = Shape('compound')\ncm = ((0, 30), (0, -30), (30, 0))\ncsm.addcomponent(cm, 'white', 'white')\nsm = ((-60, 30), (0, 30), (0, -30), (-60, -30))\ncsm.addcomponent(sm, 'white', 'black')  \nnozzle = ((-55, 0), (-90, 20), (-90, -20))\ncsm.addcomponent(nozzle, 'white', 'white')\nscreen.register_shape('csm', csm)\n```", "```py\napollo_8_free_return.py, part 9\n    ship = Body(1, (Ro_X, Ro_Y), Vec(Vo_X, Vo_Y), gravsys, 'csm')\n    ship.shapesize(0.2)\n    ship.color('white')\n    ship.getscreen().tracer(1, 0)\n    ship.setheading(90)\n\n    gravsys.sim_loop()\n\nif __name__ == '__main__':\n    main()\n```", "```py\nscreen.bye()\n```", "```py\n    self.pendown() # uncomment to draw path behind object\n```"]