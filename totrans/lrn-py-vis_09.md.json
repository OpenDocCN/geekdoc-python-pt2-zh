["```py\nwait = 50001 print('1\\. What do you get if you multiply six by seven?')2 delay(wait)print(' ------------------- ')print('| The answer is 42! |')print('| ------------------ ')print('|/')\n```", "```py\n1\\. What do you get if you multiply six by seven? ------------------- \n| The answer is 42! |\n| ------------------ \n|/\n```", "```py\nwait = 5000def printAnswer(): print(' ------------------- ') print('| The answer is 42! |') print('| ------------------ ') print('|/')print('What do you get if you multiply six by seven?')delay(wait)\nprintAnswer()\n```", "```py\n. . .delay(wait/2)print('2\\. How many US gallons are there in a barrel of oil?')delay(wait)\nprintAnswer()\n```", "```py\nwait = **0**. . .\n```", "```py\n. . .size(561, 768)\nart = loadImage('561px-Van_Eyck_-_Arnolfini_Portrait.jpg')image(art, 0, 0, width, height)\n```", "```py\n. . .def speechBubble(): x = 190 y = 150 txt = 'Check out my hat!' noStroke() pushMatrix() translate(x, y) # tail fill('#FFFFFF') beginShape() vertex(0, 0) # tip vertex(15, -40) vertex(35, -40) endShape(CLOSE) # bubble textSize(15) by = -85 bw = textWidth(txt) pad = 20 rect(0, by, bw+pad*2, 45, 10) fill('#000000') textAlign(LEFT, CENTER) text(txt, pad, by+pad) popMatrix() \nspeechBubble()\n```", "```py\n. . .1 def speechBubble(**x, y, txt**): **#**x = 190 **#**y = 150 **#**txt = 'Check out my hat!' . . .2 speechBubble(**190, 150, 'Check out my hat!'**)\n```", "```py\n. . .\nspeechBubble(315, 650, 'Woof')\n```", "```py\nspeechBubble(315, 650, 'Woof') # positional arguments\nspeechBubble(txt='Woof', x=315, y=650) # keyword arguments\n```", "```py\n. . .def speechBubble(x, y, txt**='Hello'**): . . .\n```", "```py\n. . .\nspeechBubble(445, 125)\n```", "```py\n. . .speechBubble(445, 125, **'Meh'**)\n```", "```py\n. . .def speechBubble(x, y, txt='Hello'**, type='speech'**): . . .\n```", "```py\n . . . # tail if type == 'speech': fill('#FFFFFF') beginShape() vertex(0, 0)  # tip vertex(15, -40) vertex(35, -40) endShape(CLOSE) elif type == 'thought': fill('#FFFFFF') circle(0, 0, 8) circle(10, -20, 20) . . .\n```", "```py\n. . .speechBubble(445, 125, 'Meh'**, 'thought'**)\n```", "```py\nspeechBubble(315, 650, 'Hello', 'thought')\n```", "```py\n# a speech bubble that says, thought\nspeechBubble(315, 640, 'thought')\n```", "```py\nspeechBubble(315, 650, **type=**'thought')\n```", "```py\nx = random(100)square(x, 40, 20)\n```", "```py\n. . .def shout(txt): return txt.upper() + '!!!'. . .\n```", "```py\nspeechBubble(190, 150, shout('Check out my hat'))\n```", "```py\ndef setup(): size(800, 600)def draw(): background('#004477') noFill() strokeWeight(3) stroke('#0099FF') line(width/2, height, width/2, 0) line(0, height/2, width, height/2) # flip the y-axis scale(1, -1) translate(0, -height) # reposition the origin translate(width/2, height/2)\n```", "```py\n. . .\nradius = 200\ntheta = 1def draw(): . . . circle(0, 0, radius*2) stroke('#FFFFFF') pushMatrix() rotate(theta) # approximately 57.3 degrees line(0, 0, radius, 0) popMatrix()\n```", "```py\n . . . # white dot noStroke() fill('#FFFFFF') x = cos(theta) * radius y = sin(theta) * radius circle(x, y, 15)\n```", "```py\n. . .\nperiod = 2.1def draw(): global theta 1 theta += TAU / (frameRate * period) . . .\n```", "```py\ndef circlePoint(t, r): x = cos(t) * r y = sin(t) * r return [x, y]1. . .def draw(): . . . **#**y = sin(theta) * radius **#**x = cos(theta) * radius x, y2 = circlePoint(theta, radius) circle(x, y, 15)\n```", "```py\n . . . x, y = circlePoint(theta, frameCount) circle(x, y, 15)\n```", "```py\ndef ellipsePoint(t, hr, vr): x = cos(t) * hr y = sin(t) * vr return [x, y]. . .\n```", "```py\n . . . x, y = ellipsePoint(theta, radius*1.5, radius) circle(x, y, 15)\n```", "```py\n. . .def draw(): . . . amplitude = radius y = sin(theta) * amplitude circle(0, y, 15)\n```", "```py\n amplitude = radius for i in range(51): 1 f = 0.125 * 2 t = theta + i * f 2 x = -400 + i * 16 3 y = sin(t) * amplitude circle(x, y, 15)\n```", "```py\n amplitude = radius y = sin(theta) * amplitude noFill() stroke('#FFFFFF') strokeJoin(ROUND) bends = 35 beginShape() for i in range(bends): vx = 30 + 60 * (i % 2 - 1) vy = 300 - (300 - y) / (bends - 1) * i vertex(vx, vy) endShape() rect(-100, y-80, 200, 80)\n```", "```py\ndef lissajousPoint(t, A, B): x = cos(t) * A y = sin(t) * B return [x, y]def setup(): size(800, 600) frameRate(30) background('#004477') fill('#FFFFFF') noStroke()\ntheta = 0\nperiod = 10def draw(): global theta theta += TAU / (frameRate * period) # flip the y-axis and reposition the origin scale(1, -1) translate(width/2, height/2-height)  x, y = lissajousPoint(theta, 200, 100) circle(x, y, 15)\n```", "```py\ndef lissajousPoint(t, A, B**, a, b**): x = cos(t *** a**) * A y = sin(t *** b**) * B return [x, y] . . .\n```", "```py\n x, y = lissajousPoint(theta, 200, 100**, 1, 2**)\n```", "```py\n . . . 1 for i in range(10): # curves t = theta + i / 15.0 x1, y1 = lissajousPoint(t, 300, 150, 3, 1) x2, y2 = lissajousPoint(t, 250, 220, 1, 3) # background color 2 fill(0x55000000) noStroke() rect(-width/2, -height/2, width, height) # line colorMode(HSB, 360, 100, 100) 3 h = (frameCount + i * 15) % 360 strokeWeight(7) stroke(h, 100, 100) line(x1, y1, x2, y2)\n```"]