["```py\ninventory = ['key', 'gem', 'sword', 'apple', 'book']\n```", "```py\ntopscore = ['LEO', 54120] \n```", "```py\nrainbow = [ 'red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet',\n]\n```", "```py\nrainbow = ['blue', 'orange', 'yellow']print(rainbow)\n```", "```py\n['blue', 'orange', 'yellow']\n```", "```py\n. . .print(rainbow[0])\n```", "```py\n. . .print(rainbow[1]) # displays: orangeprint(rainbow[2]) # displays: yellow\n```", "```py\n. . .print(rainbow[-1]) # displays: yellowprint(rainbow[-2]) # displays: orangeprint(rainbow[0:2]) # displays: ['blue', 'orange']\n```", "```py\n. . .\nrainbow[0] = 'red'\n```", "```py\nprint(rainbow) # ['red', 'orange', 'yellow']\n```", "```py\nrainbow.append('blue')print(rainbow) # red, orange, yellow, blue\n```", "```py\ncolors = ['indigo', 'violet']\nrainbow.extend(colors)print(rainbow) # red, orange, yellow, blue, indigo, violet\n```", "```py\nyellowindex = rainbow.index('yellow')print(yellowindex) # 2\n```", "```py\nrainbow.insert(3, 'green')print(rainbow) # red, orange, yellow, green, blue, . . .\n```", "```py\ni = rainbow.pop(5)print(i) # indigoprint(rainbow) # red, orange, yellow, green, blue, violet\n```", "```py\ni = rainbow.pop()print(rainbow) # red, orange, yellow, green, blue\n```", "```py\nrainbow.extend(colors)print(rainbow) # red, orange, yellow, green, blue, indigo, violet\nrainbow.remove('indigo')print(rainbow) # red, orange, yellow, green, blue, violet\n```", "```py\nbricks = [ '#FF0000',  '#FF0000'`,` . . .# brick A1fill(bricks[0])rect(0, 0, 30, 10)# brick A2fill(bricks[1])rect(30, 0, 30, 10). . .# brick F10fill(bricks[59])rect(270, 50, 30, 10)\n```", "```py\n. . .size(500, 500)noStroke()background('#004477')\nbands = [ '#FF0000', # red '#FF9900', # orange '#FFFF00', # yellow '#00FF00', # green '#0099FF', # blue '#6633FF' # violet\n]# red bandtranslate(0, 100)fill(bands[0])rect(0, 0, width, 50)\n```", "```py\n. . .**#**fill(bands[0])**#**rect(0, 0, width, 50)for band1 in bands: fill(band) rect(0, 0, width, 50) translate(0, 502)\n```", "```py\n. . .**#**for band in bands:1 **for i, band in enumerate(bands):** fill(band) rect(0, 0, width, 50) 2 **fill('#FFFFFF')** **textSize(25)** **text(i, 20, 35)** translate(0, 50)\n```", "```py\nsize(500, 380)background('#004477')noFill()stroke('#FFFFFF')strokeWeight(3)\nh = 50translate(100, 40)\nbands = 6rect(0, 0, 40, h*bands)\n```", "```py\n. . .\nbands1 = [ '#FF0000', '#FF9900', '#FFFF00', '#00FF00', '#0099FF', '#6633FF'\n]for band in bands1: fill(band) rect(0, 0, 40, h) translate(0, h)\n```", "```py\n. . .\nbands2 = [ [100, 0, 0], [100, 60, 0], [100, 100, 0], [0, 100, 0], [0, 60, 100], [40, 20, 100]\n]\n```", "```py\nprint(bands2[1][1]) # 60\n```", "```py\n. . .colorMode(RGB, 100)resetMatrix()translate(100, 40)for band1 in bands2: r = band[0] g = band[1] b = band[2] 2 sum = r + g + b 3 avg = sum / 3 4 fill(avg, avg, avg) rect(0, 0, sum5, h) translate(0, h)\n```", "```py\n . . . r = band[0] *** 0.64** g = band[1] *** 2.15** b = band[2] *** 0.22** . . .\n```", "```py\n . . . r = band[0] g = band[1] b = band[2] **#**sum = r + g + b **#**avg = sum / 3 **#**fill(avg, avg, avg) **#**rect(0, 0, sum, h) 1 fill('#FF0000') rect(0, 0, r, h) 2 fill('#00FF00') rect(r, 0, g, h) 3 fill('#0099FF') rect(r+g, 0, b, h) translate(0, h)\n```", "```py\n. . .bands2 = [ [100, 0, 0, **'red'**], [100, 60, 0, **'orange'**], [100, 100, 0, **'yellow'**], [0, 100, 0, **'green'**], [0, 60, 100, **'blue'**], [40, 20, 100, **'violet'**]]. . .\n```", "```py\n. . .for band in bands2: . . . fill('#FFFFFF') textAlign(RIGHT) text(band[3], -20, 30) translate(0, h)\n```", "```py\nsize(600, 600)noStroke()background('#000000')# ball and paddlefill('#FFFFFF')circle(350, 440, 18)rect(300, 520, 190, 40)\n```", "```py\nr = '#FF0000' # red\no = '#FF9900' # orange\ny = '#FFFF00' # yellow\ng = '#00FF00' # green\nb = '#0099FF' # blue\np = '#6633FF' # violet\nbricks = [ # col 0  col 1  col 2  col 3 [ [r,1], [o,1], [y,1], [g,1] ], # row 0 [ [o,1], [y,1], [g,1], [b,1] ], # row 1 [ [y,1], [g,1], [b,1], [p,1] ], # row 2 [ [g,1], [b,2], [p,2], [b,1] ], # row 3 [ [b,1], [p,2], [   ], [g,1] ], # row 4 [ [p,1], [   ], [   ], [y,1] ], # row 5 [ [   ], [   ], [   ], [o,1] ], # row 6 [ [g,1], [   ], [   ], [   ] ] # row 7\n]\n```", "```py\n. . .1 print(bricks[0]) # displays row 0 items2 print(bricks[0][0]) # displays the very first brick\n```", "```py\nprint(bricks[0][0][0]) # displays #FF0000\n```", "```py\n. . .\nbw = width / 4\nbh = height / 15translate(0, bh)for row in bricks: for col, brick in enumerate(row): if len(brick): # code to draw a brick x = col * bw\n```", "```py\n. . .\n���:����zc��E9���yoO��F�;#C��@##�&�#�##HV�D��#���X���#�&2XNf�##M�#�#���#J��,8,#`}##�#�4R�f�#E��V���d@��P������G��rjS#gbx�:P+�A��'��Q�IF��5�0�i.�A���sG�P\"����oA~�#. . .\n```", "```py\nlocation,title,creator,album,trackNum\nfile:///music/SpeakToMe.mp3,Speak to Me,Pink Floyd,The Dark Side of the Moon,1\nfile:///music/Breathe.mp3,Breathe,Pink Floyd,The Dark Side of the Moon,2. . .\n```", "```py\ncsv = loadStrings('playlist.csv')for entry in csv: print(entry)\n```", "```py\nlocation,title,creator,album,trackNum\nfile:///music/SpeakToMe.mp3,Speak to Me,Pink Floyd,The Dark Side of the Moon,1\nfile:///music/Breathe.mp3,Breathe,Pink Floyd,The Dark Side of the Moon,2. . .\n```", "```py\n. . .1 for entry in csv[1:]: 2 track = entry.split(',') print('{}. {}'.format(track[4], track[1]))\n```", "```py\n1\\. Speak to Me\n2\\. Breathe. . .\n```", "```py\nRank\tTitle\tSales\tDeveloper(s)\tPublisher(s)\n1\tMinecraft\t180000000\tMojang\tXbox Game Studios\n2\tTetris\t170000000\tElektronorgtechnica\tVarious. . .\n```", "```py\nsize(800, 800)background('#004477')\ntsv = loadStrings('list_of_best-selling_video_games.tsv')noStroke()\n```", "```py\nentry1 = tsv[1].split('\\t') # Minecraft entry\nsales1 = entry1[2] # 180000000print(int(sales1) + 1) # 180000001\n```"]