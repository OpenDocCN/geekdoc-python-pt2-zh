["```py\n❶ class Dog:\n    \"\"\"A simple attempt to model a dog.\"\"\"\n\n❷     def __init__(self, name, age):\n        \"\"\"Initialize name and age attributes.\"\"\"\n❸         self.name = name\n        self.age = age\n\n❹     def sit(self):\n        \"\"\"Simulate a dog sitting in response to a command.\"\"\"\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        \"\"\"Simulate rolling over in response to a command.\"\"\"\n        print(f\"{self.name} rolled over!\")\n```", "```py\nclass Dog:\n *--snip--*\n\n❶ my_dog = Dog('Willie', 6)\n\n❷ print(f\"My dog's name is {my_dog.name}.\")\n❸ print(f\"My dog is {my_dog.age} years old.\")\n```", "```py\nmy_dog.name\n```", "```py\nMy dog's name is Willie.\nMy dog is 6 years old.\n```", "```py\nclass Dog:\n *--snip--*\n\nmy_dog = Dog('Willie', 6)\nmy_dog.sit()\nmy_dog.roll_over()\n```", "```py\nWillie is now sitting.\nWillie rolled over!\n```", "```py\nclass Dog:\n *--snip--*\n\nmy_dog = Dog('Willie', 6)\nyour_dog = Dog('Lucy', 3)\n\nprint(f\"My dog's name is {my_dog.name}.\")\nprint(f\"My dog is {my_dog.age} years old.\")\nmy_dog.sit()\n\nprint(f\"\\nYour dog's name is {your_dog.name}.\")\nprint(f\"Your dog is {your_dog.age} years old.\")\nyour_dog.sit()\n```", "```py\nMy dog's name is Willie.\nMy dog is 6 years old.\nWillie is now sitting.\n\nYour dog's name is Lucy.\nYour dog is 3 years old.\nLucy is now sitting.\n```", "```py\nclass Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n❶     def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n\n❷     def get_descriptive_name(self):\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n return long_name.title()\n\n❸ my_new_car = Car('audi', 'a4', 2024)\nprint(my_new_car.get_descriptive_name())\n```", "```py\n2024 Audi A4\n```", "```py\nclass Car:\n\n def __init__(self, make, model, year):\n \"\"\"Initialize attributes to describe a car.\"\"\"\n self.make = make\n self.model = model\n self.year = year\n❶         self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n *--snip--*\n\n❷     def read_odometer(self):\n        \"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\nmy_new_car = Car('audi', 'a4', 2024)\nprint(my_new_car.get_descriptive_name())\nmy_new_car.read_odometer()\n```", "```py\n2024 Audi A4\nThis car has 0 miles on it.\n```", "```py\nclass Car:\n *--snip--*\n\nmy_new_car = Car('audi', 'a4', 2024)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.odometer_reading = 23\nmy_new_car.read_odometer()\n```", "```py\n2024 Audi A4\nThis car has 23 miles on it.\n```", "```py\nclass Car:\n *--snip--*\n\n    def update_odometer(self, mileage):\n        \"\"\"Set the odometer reading to the given value.\"\"\"\n        self.odometer_reading = mileage\n\nmy_new_car = Car('audi', 'a4', 2024)\nprint(my_new_car.get_descriptive_name())\n\n❶ my_new_car.update_odometer(23)\nmy_new_car.read_odometer()\n```", "```py\n2024 Audi A4\nThis car has 23 miles on it.\n```", "```py\nclass Car:\n *--snip--*\n\n def update_odometer(self, mileage):\n        \"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n❶         if mileage >= self.odometer_reading:\n self.odometer_reading = mileage\n        else:\n❷             print(\"You can't roll back an odometer!\")\n```", "```py\nclass Car:\n    *--snip--*\n\n def update_odometer(self, mileage):\n *--snip--*\n\n    def increment_odometer(self, miles):\n        \"\"\"Add the given amount to the odometer reading.\"\"\"\n        self.odometer_reading += miles\n\n❶ my_used_car = Car('subaru', 'outback', 2019)\nprint(my_used_car.get_descriptive_name())\n\n❷ my_used_car.update_odometer(23_500)\nmy_used_car.read_odometer()\n\nmy_used_car.increment_odometer(100)\nmy_used_car.read_odometer()\n```", "```py\n2019 Subaru Outback\nThis car has 23500 miles on it.\nThis car has 23600 miles on it.\n```", "```py\n❶ class Car:\n \"\"\"A simple attempt to represent a car.\"\"\"\n\n def __init__(self, make, model, year):\n \"\"\"Initialize attributes to describe a car.\"\"\n self.make = make\n self.model = model\n self.year = year\n self.odometer_reading = 0\n\n def get_descriptive_name(self):\n \"\"\"Return a neatly formatted descriptive name.\"\"\"\n long_name = f\"{self.year} {self.make} {self.model}\"\n return long_name.title()\n\n def read_odometer(self):\n \"\"\"Print a statement showing the car's mileage.\"\"\"\n print(f\"This car has {self.odometer_reading} miles on it.\")\n\n def update_odometer(self, mileage):\n \"\"\"Set the odometer reading to the given value.\"\"\"\n if mileage >= self.odometer_reading:\n self.odometer_reading = mileage\n else:\n print(\"You can't roll back an odometer!\")\n\n def increment_odometer(self, miles):\n \"\"\"Add the given amount to the odometer reading.\"\"\"\n self.odometer_reading += miles\n\n❷ class ElectricCar(Car):\n    \"\"\"Represent aspects of a car, specific to electric vehicles.\"\"\"\n\n❸     def __init__(self, make, model, year):\n        \"\"\"Initialize attributes of the parent class.\"\"\"\n❹         super().__init__(make, model, year)\n\n❺ my_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\n```", "```py\n2024 Nissan Leaf\n```", "```py\nclass Car:\n *--snip--*\n\nclass ElectricCar(Car):\n \"\"\"Represent aspects of a car, specific to electric vehicles.\"\"\"\n\n def __init__(self, make, model, year):\n  \"\"\"\n        Initialize attributes of the parent class.\n        Then initialize attributes specific to an electric car.\n        \"\"\"\n super().__init__(make, model, year)\n❶         self.battery_size = 40\n\n❷     def describe_battery(self):\n        \"\"\"Print a statement describing the battery size.\"\"\"\n        print(f\"This car has a {self.battery_size}-kWh battery.\")\n\nmy_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\nmy_leaf.describe_battery()\n```", "```py\n2024 Nissan Leaf\nThis car has a 40-kWh battery.\n```", "```py\nclass ElectricCar(Car):\n *--snip--*\n\n    def fill_gas_tank(self):\n        \"\"\"Electric cars don't have gas tanks.\"\"\"\n        print(\"This car doesn't have a gas tank!\")\n```", "```py\nclass Car:\n *--snip--*\n\nclass Battery:\n    \"\"\"A simple attempt to model a battery for an electric car.\"\"\"\n\n❶     def __init__(self, battery_size=40):\n \"\"\"Initialize the battery's attributes.\"\"\"\n        self.battery_size = battery_size\n\n❷     def describe_battery(self):\n        \"\"\"Print a statement describing the battery size.\"\"\"\n        print(f\"This car has a {self.battery_size}-kWh battery.\")\n\nclass ElectricCar(Car):\n \"\"\"Represent aspects of a car, specific to electric vehicles.\"\"\"\n\n def __init__(self, make, model, year):\n \"\"\"\n Initialize attributes of the parent class.\n Then initialize attributes specific to an electric car.\n \"\"\"\n super().__init__(make, model, year)\n❸         self.battery = Battery()\n\nmy_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\nmy_leaf.battery.describe_battery()\n```", "```py\nmy_leaf.battery.describe_battery()\n```", "```py\n2024 Nissan Leaf\nThis car has a 40-kWh battery.\n```", "```py\nclass Car:\n *--snip--*\n\nclass Battery:\n *--snip--*\n\n    def get_range(self):\n        \"\"\"Print a statement about the range this battery provides.\"\"\"\n        if self.battery_size == 40:\n            range = 150\n        elif self.battery_size == 65:\n            range = 225\n\n        print(f\"This car can go about {range} miles on a full charge.\")\n\nclass ElectricCar(Car):\n *--snip--*\n\nmy_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\nmy_leaf.battery.describe_battery()\n❶ my_leaf.battery.get_range()\n```", "```py\n2024 Nissan Leaf\nThis car has a 40-kWh battery.\nThis car can go about 150 miles on a full charge.\n```", "```py\n❶ \"\"\"A class that can be used to represent a car.\"\"\"\n\nclass Car:\n \"\"\"A simple attempt to represent a car.\"\"\"\n\n def __init__(self, make, model, year):\n \"\"\"Initialize attributes to describe a car.\"\"\"\n self.make = make\n self.model = model\n self.year = year\n self.odometer_reading = 0\n\n def get_descriptive_name(self):\n \"\"\"Return a neatly formatted descriptive name.\"\"\"\n long_name = f\"{self.year} {self.make} {self.model}\"\n return long_name.title()\n\n def read_odometer(self):\n \"\"\"Print a statement showing the car's mileage.\"\"\"\n print(f\"This car has {self.odometer_reading} miles on it.\")\n\n def update_odometer(self, mileage):\n \"\"\"\n Set the odometer reading to the given value.\n Reject the change if it attempts to roll the odometer back.\n \"\"\"\n if mileage >= self.odometer_reading:\n self.odometer_reading = mileage\n else:\n print(\"You can't roll back an odometer!\")\n\n def increment_odometer(self, miles):\n \"\"\"Add the given amount to the odometer reading.\"\"\"\n self.odometer_reading += miles\n```", "```py\n❶ from car import Car\n\nmy_new_car = Car('audi', 'a4', 2024)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.odometer_reading = 23\nmy_new_car.read_odometer()\n```", "```py\n2024 Audi A4\nThis car has 23 miles on it.\n```", "```py\n\"\"\"A set of classes used to represent gas and electric cars.\"\"\"\n\nclass Car:\n *--snip--*\n\nclass Battery:\n \"\"\"A simple attempt to model a battery for an electric car.\"\"\"\n\n def __init__(self, battery_size=40):\n \"\"\"Initialize the battery's attributes.\"\"\"\n self.battery_size = battery_size\n\n def describe_battery(self):\n \"\"\"Print a statement describing the battery size.\"\"\"\n print(f\"This car has a {self.battery_size}-kWh battery.\")\n\n def get_range(self):\n \"\"\"Print a statement about the range this battery provides.\"\"\"\n if self.battery_size == 40:\n range = 150\n elif self.battery_size == 65:\n range = 225\n\n print(f\"This car can go about {range} miles on a full charge.\")\n\nclass ElectricCar(Car):\n \"\"\"Models aspects of a car, specific to electric vehicles.\"\"\"\n\n def __init__(self, make, model, year):\n \"\"\"\n Initialize attributes of the parent class.\n Then initialize attributes specific to an electric car.\n \"\"\"\n super().__init__(make, model, year)\n self.battery = Battery()\n```", "```py\nfrom car import ElectricCar\n\nmy_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\nmy_leaf.battery.describe_battery()\nmy_leaf.battery.get_range()\n```", "```py\n2024 Nissan Leaf\nThis car has a 40-kWh battery.\nThis car can go about 150 miles on a full charge.\n```", "```py\n❶ from car import Car, ElectricCar\n\n❷ my_mustang = Car('ford', 'mustang', 2024)\nprint(my_mustang.get_descriptive_name())\n❸ my_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\n```", "```py\n2024 Ford Mustang\n2024 Nissan Leaf\n```", "```py\n❶ import car\n\n❷ my_mustang = car.Car('ford', 'mustang', 2024)\nprint(my_mustang.get_descriptive_name())\n\n❸ my_leaf = car.ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\n```", "```py\nfrom `module_name` import *\n```", "```py\n\"\"\"A set of classes that can be used to represent electric cars.\"\"\"\n\nfrom car import Car\n\nclass Battery:\n *--snip--*\n\nclass ElectricCar(Car):\n *--snip--*\n```", "```py\n\"\"\"A class that can be used to represent a car.\"\"\"\n\nclass Car:\n *--snip--*\n```", "```py\nfrom car import Car\nfrom electric_car import ElectricCar\n\nmy_mustang = Car('ford', 'mustang', 2024)\nprint(my_mustang.get_descriptive_name())\n\nmy_leaf = ElectricCar('nissan', 'leaf', 2024)\nprint(my_leaf.get_descriptive_name())\n```", "```py\n2024 Ford Mustang\n2024 Nissan Leaf\n```", "```py\nfrom electric_car import ElectricCar as EC\n```", "```py\nmy_leaf = EC('nissan', 'leaf', 2024)\n```", "```py\nimport electric_car as ec\n```", "```py\nmy_leaf = ec.ElectricCar('nissan', 'leaf', 2024)\n```", "```py\n>>> **from random import randint**\n>>> **randint(1, 6)**\n3\n```", "```py\n>>> **from random import choice**\n>>> **players = ['charles', 'martina', 'michael', 'florence', 'eli']**\n>>> **first_up = choice(players)**\n>>> **first_up**\n'florence'\n```"]