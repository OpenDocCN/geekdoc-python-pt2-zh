- en: '**7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7'
- en: MOVING INTO THE SPACE STATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**进入空间站**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Now that we’ve outfitted the space station with scenery, life support systems,
    and other equipment, it’s time to move in. In this chapter, you’ll see yourself
    in the space station for the first time, and you’ll be able to move around and
    explore the rooms. You might feel a bit stiff from the journey to begin with,
    but you’ll soon be walking all over the base.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为空间站配备了景观、生命支持系统和其他设备，是时候开始移动了。在这一章中，你将第一次看到自己在空间站的样子，并且你将能够四处移动并探索房间。刚开始你可能会感觉有些僵硬，但很快你就能在基地四处走动了。
- en: You’ll discover how to animate the astronaut and use the keyboard controls to
    move them around. You’ll also add code to enable the astronaut to move between
    rooms. Is there life on Mars? There is now.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何为宇航员添加动画，并使用键盘控制让他们四处移动。你还将添加代码，使宇航员能够在房间之间移动。火星上有生命吗？现在有了。
- en: '**ARRIVING ON THE SPACE STATION**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**到达空间站**'
- en: We’ll use [Listing 6-6](ch06.xhtml#ch06list6) from [Chapter 6](ch06.xhtml#ch06)
    as a starting point in this chapter, so open *listing6-6.py*. We’ll add code to
    show you in your space suit in the space station. Eventually, you’ll be able to
    move around using the arrow keys.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将以[第6-6节](ch06.xhtml#ch06list6)中的代码作为起点，参考[第6章](ch06.xhtml#ch06)，因此请打开*listing6-6.py*。我们将添加代码，让你在空间站的太空服中显示自己。最终，你将能够使用箭头键移动。
- en: '**DISABLING THE ROOM NAVIGATION CONTROLS IN THE EXPLORER SECTION**'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**禁用探险者区的房间导航控制**'
- en: So far, we’ve been using the arrow keys in the EXPLORER section to show different
    rooms on the map. We’re going to start using those keys to move the astronaut
    around the rooms. First, we need to disable the existing controls. Scroll down
    to the EXPLORER part of the program and highlight the instructions shown in [Listing
    7-1](ch07.xhtml#ch07list1). Click **Format** ▸ **Comment Out Region** to turn
    those instructions into comments so the program will ignore them. (You can also
    just delete them if you prefer.) Save your program as *listing7-1.py*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用EXPLORER区的箭头键来显示地图上的不同房间。接下来，我们将开始使用这些按键来让宇航员在房间之间移动。首先，我们需要禁用现有的控制。向下滚动到程序中的EXPLORER部分，突出显示[Listing
    7-1](ch07.xhtml#ch07list1)中显示的指令。点击**格式** ▸ **注释区域**，将这些指令变成注释，以便程序忽略它们。（如果你愿意，也可以直接删除它们。）将程序保存为*listing7-1.py*。
- en: '*listing7-1.py*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-1.py*'
- en: --snip--
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '##def movement():'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '##def movement():'
- en: '##    global current_room'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '##    global current_room'
- en: '##    old_room = current_room'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '##    old_room = current_room'
- en: '##'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '##'
- en: '##    if keyboard.left:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if keyboard.left:'
- en: '##        current_room -= 1'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '##        current_room -= 1'
- en: '##    if keyboard.right:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if keyboard.right:'
- en: '##        current_room += 1'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '##        current_room += 1'
- en: '##    if keyboard.up:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if keyboard.up:'
- en: '##        current_room -= MAP_WIDTH'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '##        current_room -= MAP_WIDTH'
- en: '##    if keyboard.down:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if keyboard.down:'
- en: '##        current_room += MAP_WIDTH'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '##        current_room += MAP_WIDTH'
- en: '##'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '##'
- en: '##    if current_room > 50:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if current_room > 50:'
- en: '##        current_room = 50'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '##        current_room = 50'
- en: '##    if current_room < 1:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if current_room < 1:'
- en: '##        current_room = 1'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '##        current_room = 1'
- en: '##'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '##'
- en: '##    if current_room != old_room:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '##    if current_room != old_room:'
- en: '##        print("Entering room:" + str(current_room))'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '##        print("进入房间：" + str(current_room))'
- en: '##'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '##'
- en: '##clock.schedule_interval(movement, 0.08)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '##clock.schedule_interval(movement, 0.08)'
- en: --snip--
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 7-1: Turning off the keyboard controls in the* EXPLORER *section*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-1: 关闭* EXPLORER *区的键盘控制*'
- en: Now we can add code that uses the arrow keys to move the astronaut.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加代码，使用箭头键来移动宇航员了。
- en: '**ADDING NEW VARIABLES**'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加新变量**'
- en: Let’s start by setting up some variables. The most important of these are your
    starting coordinates where you’ll teleport in. As before, we add variables to
    the VARIABLES part of the program, near the start. Add the new lines in [Listing
    7-2](ch07.xhtml#ch07list2). Save your program as *listing7-2.py*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先设置一些变量。最重要的变量是你开始传送时的坐标。和之前一样，我们将变量添加到程序的VARIABLES部分，靠近开始的地方。请按照[Listing
    7-2](ch07.xhtml#ch07list2)中所示添加新行。将程序保存为*listing7-2.py*。
- en: '*listing7-2.py*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-2.py*'
- en: --snip--
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: TILE_SIZE = 30
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: TILE_SIZE = 30
- en: ➊ player_y, player_x = 2, 5
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ player_y, player_x = 2, 5
- en: ➋ game_over = False
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ game_over = False
- en: ➌ PLAYER = {
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ PLAYER = {
- en: '"left": [images.spacesuit_left, images.spacesuit_left_1,'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '"left": [images.spacesuit_left, images.spacesuit_left_1,'
- en: images.spacesuit_left_2, images.spacesuit_left_3,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_left_2, images.spacesuit_left_3,
- en: images.spacesuit_left_4
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_left_4
- en: '],'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"right": [images.spacesuit_right, images.spacesuit_right_1,'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"right": [images.spacesuit_right, images.spacesuit_right_1,'
- en: images.spacesuit_right_2, images.spacesuit_right_3,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_right_2, images.spacesuit_right_3,
- en: images.spacesuit_right_4
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_right_4
- en: '],'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"up": [images.spacesuit_back, images.spacesuit_back_1,'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"up": [images.spacesuit_back, images.spacesuit_back_1,'
- en: images.spacesuit_back_2, images.spacesuit_back_3,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_back_2, images.spacesuit_back_3,
- en: images.spacesuit_back_4
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_back_4
- en: '],'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"down": [images.spacesuit_front, images.spacesuit_front_1,'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"down": [images.spacesuit_front, images.spacesuit_front_1,'
- en: images.spacesuit_front_2, images.spacesuit_front_3,
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_front_2, images.spacesuit_front_3,
- en: images.spacesuit_front_4
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: images.spacesuit_front_4
- en: ']'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ➍ player_direction = "down"
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ player_direction = "down"
- en: ➎ player_frame = 0
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ player_frame = 0
- en: ➏ player_image = PLAYER[player_direction][player_frame]
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ➏ player_image = PLAYER[player_direction][player_frame]
- en: player_offset_x, player_offset_y = 0, 0
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_x, player_offset_y = 0, 0
- en: --snip--
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 7-2: Adding player variables*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 7-2：添加玩家变量*'
- en: The VARIABLES section already includes a value for current_room, which is the
    room you’ll start in. (If you changed the value of current_room while experimenting
    in [Chapter 6](ch06.xhtml#ch06), make sure you change it back to 31.) We make
    new player_y and player_x variables ➊ to contain numbers for your starting position
    in the room. Here, we’re setting up two variables in a single line. The numbers
    are put into the variables in the same order they’re listed, so 2 goes into player_y
    (the first number goes into the first variable), and 5 goes into player_x. These
    variables will change as you move around the rooms on the space station and will
    be used to check where you are and draw you in the correct place. Your position
    is measured using the same tile coordinates as for the scenery positions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: VARIABLES 部分已经包括了当前房间（current_room）的值，即你将开始的房间。（如果你在[第6章](ch06.xhtml#ch06)实验时更改了
    current_room 的值，请确保将其恢复为31。）我们创建了新的 player_y 和 player_x 变量 ➊，用来保存你在房间中的起始位置坐标。在这里，我们在一行代码中设置了两个变量。数字按顺序放入变量中，因此2放入
    player_y（第一个数字放入第一个变量），5放入 player_x。随着你在空间站中移动，这些变量会发生变化，并用于检查你的位置以及在正确的位置绘制你。你的位置是使用与景物位置相同的瓦片坐标来衡量的。
- en: We also set up a game_over variable ➋ to tell the program whether the game has
    ended. At the start of the program, we set the variable to False. It will stay
    False until the game ends and then become True. The program checks this variable
    to see whether the player is allowed to move. It would be odd if the player kept
    moving after they died!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了一个 game_over 变量 ➋，用来告诉程序游戏是否结束。程序开始时，我们将该变量设为 False。直到游戏结束，它才会变为 True。程序通过检查这个变量来判断玩家是否允许继续移动。如果玩家在死后还在继续移动，那就太奇怪了！
- en: Next, we’ll set up the images for the player’s walking animation. Animation
    is a trick of the eye. You start with a series of similar pictures with slight
    differences that show small movements. When you switch between them quickly, you
    can fool the eye into thinking the image is moving. In our game, we’ll use a series
    of images of the astronaut walking that show the legs in different positions.
    When we switch between them quickly, the astronaut’s legs will look like they’re
    moving.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置玩家走动动画的图像。动画是一种视觉技巧。你从一系列相似的图片开始，每张图像有微小的差异，显示出小的运动。当你迅速切换它们时，可以欺骗眼睛，让它以为图像在动。在我们的游戏中，我们将使用一系列宇航员走动的图像，显示出不同位置的腿部。当我们快速切换它们时，宇航员的腿部看起来像是在移动。
- en: '**TIP**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The key to making animation work is to make sure the images are similar enough.
    If the images are too different, the effect doesn’t work.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 动画能够生效的关键是确保图像足够相似。如果图像差异太大，效果就不会起作用。
- en: Each image in an animation is known as a *frame*. [Table 7-1](ch07.xhtml#ch07tab1)
    shows the animation frames we’ll use. We’ll number our frames starting at 0, which
    will be the resting position when the astronaut isn’t walking. When the player
    is walking up the screen, we see their back because they’re walking away from
    us in the room.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 动画中的每一帧图像称为 *帧*。[表7-1](ch07.xhtml#ch07tab1)展示了我们将使用的动画帧。我们将从0开始编号我们的帧，这时宇航员处于静止状态，当宇航员在屏幕上方走动时，我们会看到他们的背部，因为他们背对我们在房间中走动。
- en: '**Table 7-1:** The Animation Frames for the Astronaut'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**表7-1：** 宇航员的动画帧'
- en: '| **Key** | **Frame 0** | **Frame 1** | **Frame 2** | **Frame 3** | **Frame
    4** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **帧 0** | **帧 1** | **帧 2** | **帧 3** | **帧 4** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| left | ![image](../images/f0114-01.jpg) | ![image](../images/f0114-02.jpg)
    | ![image](../images/f0114-03.jpg) | ![image](../images/f0114-04.jpg) | ![image](../images/f0114-05.jpg)
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| left | ![image](../images/f0114-01.jpg) | ![image](../images/f0114-02.jpg)
    | ![image](../images/f0114-03.jpg) | ![image](../images/f0114-04.jpg) | ![image](../images/f0114-05.jpg)
    |'
- en: '| right | ![image](../images/f0114-06.jpg) | ![image](../images/f0114-07.jpg)
    | ![image](../images/f0114-08.jpg) | ![image](../images/f0114-09.jpg) | ![image](../images/f0114-10.jpg)
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 向右 | ![image](../images/f0114-06.jpg) | ![image](../images/f0114-07.jpg)
    | ![image](../images/f0114-08.jpg) | ![image](../images/f0114-09.jpg) | ![image](../images/f0114-10.jpg)
    |'
- en: '| up | ![image](../images/f0114-11.jpg) | ![image](../images/f0114-12.jpg)
    | ![image](../images/f0114-13.jpg) | ![image](../images/f0114-14.jpg) | ![image](../images/f0114-15.jpg)
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 向上 | ![image](../images/f0114-11.jpg) | ![image](../images/f0114-12.jpg)
    | ![image](../images/f0114-13.jpg) | ![image](../images/f0114-14.jpg) | ![image](../images/f0114-15.jpg)
    |'
- en: '| down | ![image](../images/f0114-16.jpg) | ![image](../images/f0114-17.jpg)
    | ![image](../images/f0114-18.jpg) | ![image](../images/f0114-19.jpg) | ![image](../images/f0114-20.jpg)
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 向下 | ![image](../images/f0114-16.jpg) | ![image](../images/f0114-17.jpg)
    | ![image](../images/f0114-18.jpg) | ![image](../images/f0114-19.jpg) | ![image](../images/f0114-20.jpg)
    |'
- en: The PLAYER dictionary ➌ stores the animation frames. The direction names—up,
    down, left, and right—are the dictionary keys. Each dictionary entry is a list
    that has the image of the player standing, plus four animation frames for that
    direction of walking (see [Table 7-1](ch07.xhtml#ch07tab1)). The PLAYER dictionary
    will be used together with the direction the player is facing ➍ and the number
    of the animation frame ➎ to display the correct image as the player walks or stands
    still. The player_image variable ➏ stores the current image of the astronaut.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: PLAYER 字典 ➌ 存储动画帧。方向名称——上、下、左、右——是字典的键。每个字典项都是一个列表，包含玩家站立时的图像，以及该方向的四个动画帧（见
    [表 7-1](ch07.xhtml#ch07tab1)）。PLAYER 字典将与玩家面朝的方向 ➍ 和动画帧的编号 ➎ 一起使用，以显示玩家走路或站立时的正确图像。player_image
    变量 ➏ 存储当前的宇航员图像。
- en: '**TIP**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '[Appendix B](appb.xhtml#appb) at the back of the book describes the important
    variables in the *Escape* program, so look there if you can’t remember what a
    particular variable does.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录 B](appb.xhtml#appb) 在书的末尾描述了 *Escape* 程序中的重要变量，如果你记不住某个变量的功能，可以查看那里。'
- en: '**TELEPORTING ONTO THE SPACE STATION**'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**传送到太空站**'
- en: Get ready to beam down! With the starting coordinates in place, let’s add the
    code to make you appear in the space station.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好传送下来！在确定起始坐标后，让我们添加代码，使你出现在太空站中。
- en: '[Listing 7-3](ch07.xhtml#ch07list3) shows the lines you need to add to the
    EXPLORER part of the program. As before, you only need to add the new lines. Don’t
    change the other lines. Just use them to find your way around the program code.
    The first new line ➊ is indented by eight spaces because it’s inside a function
    and also inside a loop. Save your program as *listing7-3.py*.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 7-3](ch07.xhtml#ch07list3) 显示了你需要添加到程序 EXPLORER 部分的代码行。如前所述，你只需要添加新的代码行。不要修改其他行，只用它们来帮助你理解程序代码。第一行新代码
    ➊ 被缩进了八个空格，因为它位于一个函数内部且也在一个循环内。将你的程序保存为 *listing7-3.py*。'
- en: '*listing7-3.py*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-3.py*'
- en: --snip--
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'for y in range(room_height):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'for y in range(room_height):'
- en: 'for x in range(room_width):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'for x in range(room_width):'
- en: 'if room_map[y][x] != 255:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 'if room_map[y][x] != 255:'
- en: image_to_draw = objects[room_map[y][x]][0]
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: image_to_draw = objects[room_map[y][x]][0]
- en: screen.blit(image_to_draw,
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(image_to_draw,
- en: (top_left_x + (x*30),
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: (top_left_x + (x*30),
- en: top_left_y + (y*30) - image_to_draw.get_height()))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_y + (y*30) - image_to_draw.get_height()))
- en: '➊         if player_y == y:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '➊         if player_y == y:'
- en: ➋             image_to_draw = PLAYER[player_direction][player_frame]
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ➋             image_to_draw = PLAYER[player_direction][player_frame]
- en: ➌             screen.blit(image_to_draw,
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ➌             screen.blit(image_to_draw,
- en: (top_left_x + (player_x*30)+(player_offset_x*30),
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (top_left_x + (player_x*30)+(player_offset_x*30),
- en: top_left_y + (player_y*30)+(player_offset_y*30)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_y + (player_y*30)+(player_offset_y*30)
- en: '- image_to_draw.get_height()))'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '- image_to_draw.get_height()))'
- en: --snip--
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 7-3: Drawing the player in the room*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-3: 绘制房间中的玩家*'
- en: These new instructions draw you in the room. The y loop draws the room from
    back to front. The x loop draws the scenery in each row from left to right.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新指令将在房间中绘制你。y 循环从后向前绘制房间。x 循环则从左到右绘制每行的景象。
- en: After each row is drawn, the program checks whether the player is standing in
    that row ➊. This instruction should be lined up with the for x in range(room_width)
    line rather than indented further, because it’s not inside the x loop. It will
    run once, after the x loop has finished.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每绘制一行后，程序检查玩家是否站在该行 ➊。这个指令应该与 for x in range(room_width) 这一行对齐，而不是进一步缩进，因为它不在
    x 循环内。它将在 x 循环完成后执行一次。
- en: If the player *is* in the row the program has just drawn, the next line ➋ puts
    the picture of the player into the variable image_to_draw. The image is taken
    from the PLAYER dictionary of animation frames, using the player’s direction and
    the animation frame number.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家 *确实* 在程序刚刚绘制的行中，下一行 ➋ 会将玩家的图片放入 image_to_draw 变量中。该图片来自 PLAYER 字典中的动画帧，使用玩家的方向和动画帧编号。
- en: The last new line ➌ draws the player using the image_to_draw variable you just
    set up, which contains the picture. It also uses the player’s *x* and *y* position
    variables to work out where to draw the image on the screen. [Chapter 3](ch03.xhtml#ch03)
    explains how the position onscreen is calculated (see “[Working Out Where to Draw
    Each Item](ch03.xhtml#lev58)” on [page 56](ch03.xhtml#page_56)). The player_offset_x
    and player_offset_y variables were set up in [Listing 7-2](ch07.xhtml#ch07list2)
    and are used to position the player partway between tiles as they walk between
    them. You’ll learn more about these variables shortly.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行新代码 ➌ 使用你刚刚设置的 image_to_draw 变量绘制玩家，这个变量包含了图片。它还使用了玩家的 *x* 和 *y* 位置变量来计算在屏幕上绘制图片的位置。[第3章](ch03.xhtml#ch03)
    解释了屏幕位置是如何计算的（参见 “[计算每个物品绘制位置](ch03.xhtml#lev58)” 在 [第56页](ch03.xhtml#page_56)）。player_offset_x
    和 player_offset_y 变量是在 [Listing 7-2](ch07.xhtml#ch07list2) 中设置的，用于在玩家走过瓷砖时将玩家位置放置在瓷砖之间。你将很快了解这些变量。
- en: Get ready to teleport! Brace yourself! Take a deep breath.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 准备传送！做好准备！深呼吸。
- en: Run your program using pgzrun listing7-3.py. If your teleportation was successful,
    you should be on the space station (see [Figure 7-1](ch07.xhtml#ch07fig1)). If
    not, check the program changes you made in this chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `pgzrun listing7-3.py` 运行你的程序。如果你的传送成功，你应该在空间站上（参见[图7-1](ch07.xhtml#ch07fig1)）。如果没有，检查你在本章中所做的程序更改。
- en: One side effect of teleporting is that at first you can’t move. As we add more
    code, you’ll find that the side effect wears off.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 传送的一个副作用是，刚开始时你不能移动。随着代码的添加，你会发现这个副作用会消失。
- en: '![image](../images/fig7-1.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig7-1.jpg)'
- en: '*Figure 7-1: The astronaut arrives!*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：宇航员到达！*'
- en: '**ADDING THE MOVEMENT CODE**'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加移动代码**'
- en: Now we’ll add a totally new section called GAME LOOP. This is the heart of the
    program. The game_loop() function will run several times a second and enable you
    to move. Later in the book, we’ll add more instructions here that enable you to
    do things with the objects you find.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加一个全新的部分，称为 GAME LOOP。这是程序的核心。game_loop() 函数将每秒运行多次，使你能够移动。稍后在书中，我们将添加更多指令，使你能够与找到的物品进行互动。
- en: Add this new section between the MAKE MAP and EXPLORER sections. [Listing 7-4](ch07.xhtml#ch07list4)
    shows you what it looks like. Save the program as *listing7-4.py*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MAKE MAP 和 EXPLORER 部分之间添加这一新部分。[Listing 7-4](ch07.xhtml#ch07list4) 显示了它的样子。将程序保存为
    *listing7-4.py*。
- en: '*listing7-4.py*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-4.py*'
- en: --snip--
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: 'for tile_number in range(1, image_width_in_tiles):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'for tile_number in range(1, image_width_in_tiles):'
- en: room_map[scenery_y][scenery_x + tile_number] = 255
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[scenery_y][scenery_x + tile_number] = 255
- en: '###############'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## GAME LOOP ##'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '## 游戏循环 ##'
- en: '###############'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '➊ def game_loop():'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ def game_loop():'
- en: ➋     global player_x, player_y, current_room
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ➋     全局变量 player_x, player_y, current_room
- en: global from_player_x, from_player_y
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量 from_player_x, from_player_y
- en: global player_image, player_image_shadow
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量 player_image, player_image_shadow
- en: global selected_item, item_carrying, energy
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量 selected_item, item_carrying, energy
- en: global player_offset_x, player_offset_y
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量 player_offset_x, player_offset_y
- en: global player_frame, player_direction
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量 player_frame, player_direction
- en: '➌     if game_over:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '➌     如果 game_over:'
- en: return
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '➍     if player_frame > 0:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '➍     如果 player_frame > 0:'
- en: player_frame += 1
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame += 1
- en: time.sleep(0.05)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: time.sleep(0.05)
- en: 'if player_frame == 5:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 player_frame == 5:'
- en: player_frame = 0
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 0
- en: player_offset_x = 0
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_x = 0
- en: player_offset_y = 0
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_y = 0
- en: '➎ # save player''s current position'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '➎ # 保存玩家当前位置'
- en: old_player_x = player_x
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: old_player_x = player_x
- en: old_player_y = player_y
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: old_player_y = player_y
- en: '➏ # move if key is pressed'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '➏ # 按键时移动'
- en: 'if player_frame == 0:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 player_frame == 0:'
- en: 'if keyboard.right:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 keyboard.right:'
- en: from_player_x = player_x
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_x = player_x
- en: from_player_y = player_y
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_y = player_y
- en: player_x += 1
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: player_x += 1
- en: player_direction = "right"
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: player_direction = "right"
- en: player_frame = 1
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 1
- en: 'elif keyboard.left: #elif stops player making diagonal movements'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif keyboard.left: # elif 防止玩家做出对角移动'
- en: from_player_x = player_x
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_x = player_x
- en: from_player_y = player_y
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_y = player_y
- en: player_x -= 1
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: player_x -= 1
- en: player_direction = "left"
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: player_direction = "left"
- en: player_frame = 1
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 1
- en: 'elif keyboard.up:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif keyboard.up:'
- en: from_player_x = player_x
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_x = player_x
- en: from_player_y = player_y
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_y = player_y
- en: player_y -= 1
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: player_y -= 1
- en: player_direction = "up"
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: player_direction = "up"
- en: player_frame = 1
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 1
- en: 'elif keyboard.down:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif keyboard.down:'
- en: from_player_x = player_x
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_x = player_x
- en: from_player_y = player_y
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: from_player_y = player_y
- en: player_y += 1
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: player_y += 1
- en: player_direction = "down"
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: player_direction = "down"
- en: player_frame = 1
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 1
- en: ➐     # If the player is standing somewhere they shouldn't, move them back.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '➐      # 如果玩家站在不该站的位置，将其移回。'
- en: '# Keep the 2 comments below - you''ll need them later'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '# 保留以下两条注释 - 你稍后会用到它们'
- en: 'if room_map[player_y][player_x] not in items_player_may_stand_on: #\'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'if room_map[player_y][player_x] not in items_player_may_stand_on: #\'
- en: '#           or hazard_map[player_y][player_x] != 0:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '#           or hazard_map[player_y][player_x] != 0:'
- en: player_x = old_player_x
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: player_x = old_player_x
- en: player_y = old_player_y
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: player_y = old_player_y
- en: ➑         player_frame = 0
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ➑          player_frame = 0
- en: '➒     if player_direction == "right" and player_frame > 0:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '➒      if player_direction == "right" and player_frame > 0:'
- en: player_offset_x = -1 + (0.25 * player_frame)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_x = -1 + (0.25 * player_frame)
- en: 'if player_direction == "left" and player_frame > 0:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'if player_direction == "left" and player_frame > 0:'
- en: player_offset_x = 1 - (0.25 * player_frame)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_x = 1 - (0.25 * player_frame)
- en: 'if player_direction == "up" and player_frame > 0:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'if player_direction == "up" and player_frame > 0:'
- en: player_offset_y = 1 - (0.25 * player_frame)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_y = 1 - (0.25 * player_frame)
- en: 'if player_direction == "down" and player_frame > 0:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'if player_direction == "down" and player_frame > 0:'
- en: player_offset_y = -1 + (0.25 * player_frame)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_y = -1 + (0.25 * player_frame)
- en: '###############'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## EXPLORER  ##'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '## EXPLORER  ##'
- en: '###############'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 7-4: Adding player movement*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-4: 添加玩家移动*'
- en: At the very end of the program, you also need to add a new section called START,
    which will make the game_loop() function run every 0.03 seconds. [Listing 7-5](ch07.xhtml#ch07list5)
    shows you the lines to add. This instruction isn’t indented, because it doesn’t
    belong to a function. Python runs the instructions that *aren’t* inside a function
    in the order they appear in the program, from top to bottom. This instruction
    runs after all the variables, map, scenery, and prop data have been set up and
    the functions have been defined in the instructions above. Save your program as
    *listing7-5.py*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的最后，你还需要添加一个名为 START 的新部分，它将使 game_loop() 函数每 0.03 秒运行一次。[Listing 7-5](ch07.xhtml#ch07list5)
    显示了你需要添加的代码行。这个指令没有缩进，因为它不属于任何函数。Python 会按程序中出现的顺序从上到下运行那些*不*在函数内的指令。这个指令会在所有变量、地图、场景和道具数据设置好，函数在上面的指令中定义好之后执行。保存你的程序为
    *listing7-5.py*。
- en: '*listing7-5.py*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-5.py*'
- en: --snip--
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '###############'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##   START   ##'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '##   START   ##'
- en: '###############'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: clock.schedule_interval(game_loop, 0.03)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: clock.schedule_interval(game_loop, 0.03)
- en: --snip--
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 7-5: Setting the* game_loop() *function to run regularly*'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-5: 设置 game_loop() 函数定期运行*'
- en: Run the program using pgzrun listing7-5.py. You should be in the room (as shown
    in [Figure 7-1](ch07.xhtml#ch07fig1)) and be able to move using the arrow keys!
    You might notice your legs disappear when you walk up the screen. This is a side
    effect of teleportation that will wear off when we improve the code for drawing
    rooms in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pgzrun 运行程序 listing7-5.py。你应该在房间里（如[图 7-1](ch07.xhtml#ch07fig1)所示），并能够使用箭头键移动！你可能会注意到当你向上走时，腿部会消失。这是瞬移的副作用，我们将在[第
    8 章](ch08.xhtml#ch08)改进绘制房间的代码时解决这个问题。
- en: At this point, the program won’t work properly if you walk out the door, but
    it should stop you from walking through walls or furniture. If you *can* walk
    through objects, double-check the new code you just added. If you still have problems,
    carefully check the line that sets up the items_player_may_stand_on list at the
    end of the OBJECTS part of the program.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，如果你走出门外，程序不会正常工作，但它应该能阻止你穿过墙壁或家具。如果你*能*穿过物体，请仔细检查你刚刚添加的新代码。如果问题仍然存在，仔细检查程序中
    OBJECTS 部分末尾设置 items_player_may_stand_on 列表的那一行。
- en: '**UNDERSTANDING THE MOVEMENT CODE**'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解运动代码**'
- en: If you want to play the game and customize it with your own designs, you don’t
    need to understand how the code in this chapter works. You can simply replace
    the images and the data for maps, scenery, and props. This movement code, and
    the code for moving between rooms, which you’ll add later in this chapter, should
    keep working. However, if you want to understand how the code works and want to
    see how you could add animation to your programs, I’ll break it down now. This
    code is the real engine of the game, so in many ways it’s the most exciting bit!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想玩这个游戏并用自己的设计进行自定义，你并不需要理解本章代码的工作原理。你只需要替换图像以及地图、景物和道具的数据。这段移动代码和稍后将在本章中添加的房间间移动代码应该能继续工作。不过，如果你想理解代码是如何工作的，并且希望看到如何将动画添加到你的程序中，我现在就来给你分解一下。这段代码才是游戏的真正引擎，所以从许多方面来看，它是最激动人心的部分！
- en: If you’re getting a sense of déjà vu, it’s because you’ve already seen much
    of this code. In [Chapter 2](ch02.xhtml#ch02), for your spacewalk, you used code
    to change the player’s position using keyboard controls and a function called
    game_loop() to control movement. Let’s refresh our memories and see what’s new
    in [Listing 7-4](ch07.xhtml#ch07list4).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有种似曾相识的感觉，那是因为你已经看到过大部分的代码。在[第2章](ch02.xhtml#ch02)中，你使用了代码通过键盘控制来改变玩家的位置，并用一个名为game_loop()的函数来控制运动。让我们回顾一下，看看在[清单7-4](ch07.xhtml#ch07list4)中有什么新的内容。
- en: In [Listing 7-4](ch07.xhtml#ch07list4), we define a function called game_loop()
    ➊ at the start of this new section. The clock.schedule_interval() function we
    added at the end of the program (see [Listing 7-5](ch07.xhtml#ch07list5)) makes
    this game_loop() function run every 0.03 seconds. Each time the game_loop() function
    runs, it checks whether you’ve pressed an arrow key or are walking and, if so,
    updates your position.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单7-4](ch07.xhtml#ch07list4)中，我们在这一新章节的开始定义了一个名为game_loop()的函数➊。我们在程序末尾添加的clock.schedule_interval()函数（见[清单7-5](ch07.xhtml#ch07list5)）使得game_loop()函数每0.03秒执行一次。每次game_loop()函数执行时，它都会检查你是否按下了箭头键或正在走动，如果是，它就会更新你的位置信息。
- en: At the start of game_loop(), we tell Python which variables are global variables
    ➋ (see “[Understanding the Spacewalk Listing](ch01.xhtml#lev30)” on [page 27](ch01.xhtml#page_27)
    for a refresher on why we need to do this). Some of these aren’t used yet, but
    we’ll need them later.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在game_loop()的开始部分，我们告诉Python哪些变量是全局变量➋（关于为何需要这样做，请参考[《理解太空漫步清单》](ch01.xhtml#lev30)，以及[第27页](ch01.xhtml#page_27)）。其中有些变量还没有被使用，但我们稍后会用到它们。
- en: Then we check the game_over variable. If it’s set to True ➌, the game_loop()
    function finishes without running any of its other instructions because the game
    is over. This variable stops the player from moving when the game ends. For now,
    it won’t do anything, because nothing in our program causes the game to end.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查game_over变量。如果它被设置为True➌，game_loop()函数会在没有执行任何其他指令的情况下结束，因为游戏已经结束。这个变量会在游戏结束时阻止玩家继续移动。目前它不会有任何作用，因为我们的程序中还没有任何东西会导致游戏结束。
- en: The game_loop() function checks whether the player is already walking ➍. It
    takes four animation frames to walk one tile across the screen. If the player
    is moving, the player_frame variable contains a number between 1 and 4, which
    represents the animation frame being used. If the player is walking, the program
    increases the player_frame variable by 1 to move to the next animation frame.
    That means the draw() function in the EXPLORER section will show the next animation
    frame the next time it runs.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: game_loop()函数会检查玩家是否已经在走路➍。玩家走一步需要四帧动画。如果玩家在移动，player_frame变量的值将介于1到4之间，表示当前使用的动画帧。如果玩家在走动，程序会将player_frame变量加1，跳到下一帧动画。这意味着EXPLORER部分的draw()函数将在下次运行时显示下一帧动画。
- en: When player_frame reaches 5, it means all the animation frames have been shown
    and the animation has ended. In that case, the program resets player_frame to
    0 to end the animation. When the animation ends, the program also resets the player_offset_x
    and player_offset_y variables. I’ll tell you what these do in a minute.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当player_frame达到5时，意味着所有的动画帧都已经显示完毕，动画也就结束了。此时，程序将player_frame重置为0以结束动画。当动画结束时，程序还会重置player_offset_x和player_offset_y变量。我稍后会告诉你这些变量的作用。
- en: Next, we see whether the player has pressed a key to start a new walking animation.
    Before we let the player move, we save their current position ➎ by storing the
    *x* position in the variable old_player_x and the *y* position in the variable
    old_player_y. We will use these variables to move the player back if they try
    to walk somewhere they shouldn’t, such as into a wall pillar.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查玩家是否按下了一个键来启动新的行走动画。在允许玩家移动之前，我们通过将 *x* 位置存储在 `old_player_x` 变量中、将 *y*
    位置存储在 `old_player_y` 变量中，来保存玩家的当前位置 ➎。如果玩家试图走到不该去的地方（比如撞到墙柱），我们将使用这些变量将玩家移回。
- en: The program then uses a familiar block of code to change the player’s *x* and
    *y* position variables if an arrow key is pressed ➏. We measure the player’s position
    in tiles, the same units we use for positioning the scenery. This is different
    from when we used pixels as the measurement in [Chapter 1](ch01.xhtml#ch01).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，程序使用一段熟悉的代码块来改变玩家的 *x* 和 *y* 位置变量，如果按下了箭头键 ➏。我们以瓦片为单位来测量玩家的位置，这与我们在[第一章](ch01.xhtml#ch01)中使用像素作为度量单位不同。
- en: When the player presses the right arrow key, the program adds 1 to the *x* position.
    If the player presses the left arrow key, it subtracts 1\. We use similar code
    to change the *y* position if the player presses the up or down arrow keys.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家按下右箭头键时，程序会将 *x* 位置加 1。如果玩家按下左箭头键，程序会将 *x* 位置减 1。我们使用类似的代码来改变 *y* 位置，当玩家按下上或下箭头键时。
- en: When the player moves, the global variables from_player_x and from_player_y
    store the position the player is walking from. These variables will be used later
    to check whether the player has been hit by a hazard while walking. The player_direction
    variable is also set to the direction they’re moving, and the player_frame is
    set to 1, the first frame in the animation sequence.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家移动时，`from_player_x` 和 `from_player_y` 这两个全局变量存储玩家起始位置。这些变量稍后将用来检查玩家在行走过程中是否被障碍物击中。`player_direction`
    变量也会被设置为玩家的移动方向，而 `player_frame` 被设置为 1，这是动画序列中的第一帧。
- en: As in [Chapter 1](ch01.xhtml#ch01), we use elif to combine our checks for a
    keypress. This ensures the player cannot change the *x* and *y* positions at the
    same time to move diagonally. In our 3D room, walking diagonally would enable
    the player to walk through obstacles, squeezing through impossible gaps.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在[第一章](ch01.xhtml#ch01)中一样，我们使用 `elif` 来组合检查按键的操作。这确保了玩家不能同时更改 *x* 和 *y* 位置进行对角线移动。在我们的
    3D 房间中，对角线行走会让玩家穿过障碍物，挤过无法通过的缝隙。
- en: After moving the player, we check whether the new position puts them somewhere
    they’re allowed to be ➐. We do this by using room_map to see what item is in the
    position they’re standing at and checking it against the list items_player_may_stand_on.
    There is some code I’ve commented out here too, which we’ll need to enable later
    to stop players from walking through hazards.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动玩家后，我们会检查新位置是否是玩家可以站立的地方 ➐。我们通过使用 `room_map` 来查看玩家所站的位置处有什么物品，并将其与 `items_player_may_stand_on`
    列表进行比对。这里有一些我已注释掉的代码，我们稍后需要启用它，以防止玩家穿过障碍物。
- en: We can use the keyword in to check whether something is in a list. By using
    the keyword not with it, we can see whether something is missing from a list.
    The following line means “If the number in the map where the player is standing
    isn’t in the list of items, the player is allowed to stand on . . .”
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `in` 关键字来检查某个元素是否在列表中。通过与 `not` 结合使用，我们可以检查某个元素是否缺失在列表中。以下代码的意思是：“如果玩家所在的地图位置的数字不在物品列表中，玩家被允许站在
    ...”
- en: 'if room_map[player_y][player_x] not in items_player_may_stand_on:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'if room_map[player_y][player_x] not in items_player_may_stand_on:'
- en: If the player is standing on something that isn’t in the items_player_may_stand_on
    list, we reset the player’s *x* and *y* positions to their position before they
    moved.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家站在的物品不在 `items_player_may_stand_on` 列表中，我们会将玩家的 *x* 和 *y* 位置重置为他们移动前的位置。
- en: All of this happens so fast that the player doesn’t notice anything. If they
    try to walk into a wall, it looks like they never went anywhere! This is a simpler
    way of stopping the player from walking through walls than checking whether each
    movement is allowed before making it.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切发生得非常快，以至于玩家没有察觉。如果他们试图走进一堵墙，看起来就像他们根本没有走动！这种方式比在每次移动前检查是否允许移动更简单地阻止玩家穿墙。
- en: The program also sets the player_frame variable to 0 if the player’s position
    must be reset ➑. This turns off the player animation again.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家的位置需要重置，程序还会将 `player_frame` 变量设置为 0 ➑。这样就会关闭玩家动画。
- en: When you press the right arrow key, the astronaut steps one tile to the right.
    It takes four frames to animate this, so the astronaut is displayed at positions
    that are partway across the tile while this animation plays out. The player_offset_x
    and player_offset_y variables are used to work out where to draw the astronaut.
    These variables are calculated at the end of the game_loop() function ➒. The draw()
    function (see [Listing 7-3](ch07.xhtml#ch07list3)) multiplies the offset values
    by the size of a tile (30 pixels) because images are drawn in pixels. For example,
    if the offset is 0.25 tiles, the astronaut is drawn roughly 7 pixels away from
    the center of the new tile. The computer will round the number because you can’t
    position something using half a pixel.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下右箭头键时，宇航员向右迈出一个瓷砖。动画需要四个帧来完成，因此在动画播放过程中，宇航员会显示在瓷砖的部分位置上。player_offset_x
    和 player_offset_y 变量用于计算应该在哪里绘制宇航员。这些变量在 game_loop() 函数的末尾计算出来 ➒。draw() 函数（见[代码清单
    7-3](ch07.xhtml#ch07list3)）将偏移量值乘以瓷砖的大小（30 像素），因为图像是以像素为单位绘制的。例如，如果偏移量为 0.25 瓷砖，宇航员会大约离新瓷砖的中心
    7 个像素。计算机会四舍五入，因为你不能用半个像素来定位某物。
- en: Look at the left side of [Figure 7-2](ch07.xhtml#ch07fig2). For the first animation
    frame when the astronaut is walking left, we need to add three-quarters of a tile
    to the player’s new tile position (0.75). For the second animation frame, we add
    half a tile (0.5) to the player’s new tile position before drawing it. For the
    third animation frame, we add a quarter of a tile to the player’s new tile position.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 看看[图 7-2](ch07.xhtml#ch07fig2)的左侧。当宇航员向左走的第一个动画帧时，我们需要在玩家的新瓷砖位置上加上三分之四个瓷砖（0.75）。对于第二个动画帧，我们在绘制前将半个瓷砖（0.5）加到玩家的新瓷砖位置上。对于第三个动画帧，我们在玩家的新瓷砖位置上加上一四分之一瓷砖。
- en: '![image](../images/fig7-2.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig7-2.jpg)'
- en: '*Figure 7-2: Understanding how the astronaut is positioned during the animation*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：理解宇航员在动画中的位置*'
- en: 'We can calculate these offset numbers using the frame number. Here’s the calculation
    for walking left:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用帧编号来计算这些偏移量。下面是向左走的计算：
- en: player_offset_x = 1 - (0.25 * player_frame)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_x = 1 - (0.25 * player_frame)
- en: 'Check that this calculation makes sense by working out the numbers on your
    own. For example, here is the calculation when the animation frame is 2:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自己计算这些数字，检查这个计算是否有道理。例如，下面是动画帧为 2 时的计算：
- en: 0.25 × 2 = 0.5
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 0.25 × 2 = 0.5
- en: 1 − 0.5 = 0.5
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 1 − 0.5 = 0.5
- en: In [Figure 7-2](ch07.xhtml#ch07fig2), 0.5 is the correct offset for frame 2.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 7-2](ch07.xhtml#ch07fig2)中，0.5 是帧 2 的正确偏移量。
- en: When the player walks right, we need to subtract part of a tile from the player’s
    position, so the offsets are negative. Look at the right side of [Figure 7-2](ch07.xhtml#ch07fig2).
    For frame 1, adding −0.75 puts the astronaut three-quarters of a tile to the *left*
    of their new position.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家向右走时，我们需要从玩家的位置中减去一部分瓷砖，因此偏移量是负值。看看[图 7-2](ch07.xhtml#ch07fig2)的右侧。对于帧 1，添加
    −0.75 会把宇航员移到其新位置的*左侧*三分之四的瓷砖位置。
- en: 'We can work out the *x* offset for walking right using the frame number too.
    Here’s the formula:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用帧编号来计算向右走的 *x* 偏移量。下面是公式：
- en: player_offset_x = -1 + (0.25 * player_frame)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: player_offset_x = -1 + (0.25 * player_frame)
- en: '**TRAINING MISSION #1**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Can you check that the formula works? Use it to find the offset values for frames
    1 and 3, and check that they match the offset values in [Figure 7-2](ch07.xhtml#ch07fig2).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你能检查这个公式是否有效吗？用它来找到帧 1 和帧 3 的偏移量值，并检查它们是否与[图 7-2](ch07.xhtml#ch07fig2)中的偏移量值相匹配。
- en: The offsets for the *y* direction work the same. When the astronaut is moving
    up, we calculate the *y* offset using the same formula as the left offset. When
    the astronaut is moving down, we calculate the *y* offset using the same formula
    as the right offset.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* 方向的偏移量计算方式相同。当宇航员向上移动时，我们使用与向左偏移量相同的公式计算 *y* 偏移量。当宇航员向下移动时，我们使用与向右偏移量相同的公式计算
    *y* 偏移量。'
- en: 'In summary, the game_loop() function does this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，game_loop() 函数做了这些事情：
- en: If you’re not walking, it starts the walking animation when you press a key.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有走路，当你按下一个键时，它会开始走路动画。
- en: If you are walking, it works out the next animation frame and the positions
    partway across the tile to use when drawing you.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在走路，它会计算下一个动画帧以及在绘制你时使用的部分跨越瓷砖的位置。
- en: If you’ve reached the end of the animation sequence, it resets it so you can
    move again. The movement is fluid, so if you hold down a key, you’ll cycle through
    animation frames 1 to 4 and won’t see the standing position until you stop walking.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经到达动画序列的末尾，它会重置以便你可以再次移动。移动是流畅的，因此如果你按住一个键，你会在动画帧 1 到 4 之间循环，直到你停止行走，才会看到站立姿势。
- en: '**MOVING BETWEEN ROOMS**'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在房间之间移动**'
- en: Now that you’re on your feet, you’ll want to explore the space station fully.
    Let’s add some code to the game_loop() function that lets you walk into the next
    room. Add the new code in [Listing 7-6](ch07.xhtml#ch07list6), which goes after
    we check for keypresses and before we check whether the player is standing somewhere
    they shouldn’t be. Make sure you include the instructions with comment symbols
    (#) at the start. We’ll need them later.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经站起来了，想要充分探索空间站。让我们在 `game_loop()` 函数中添加一些代码，使你可以进入下一个房间。在 [清单 7-6](ch07.xhtml#ch07list6)
    中添加新代码，位置在检查键盘按键之后，并在检查玩家是否站在不该站的位置之前。确保你包括以注释符号（#）开头的指令，我们以后会用到它们。
- en: The grayed-out lines in [Listing 7-6](ch07.xhtml#ch07list6) show you where to
    add the new code. Save your program as *listing7-6.py*. Run it using pgzrun listing7-6.py
    and then walk around the space station! This is a good time to look around, before
    the doors are fitted and certain areas are locked down.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-6](ch07.xhtml#ch07list6) 中灰色的行显示了你可以在哪里添加新代码。将你的程序保存为 *listing7-6.py*。使用
    `pgzrun listing7-6.py` 运行它，然后在空间站中四处走动！这是一个很好的时机，在门被安装之前，看看周围的环境，因为某些区域会被锁住。'
- en: '*listing7-6.py*'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-6.py*'
- en: --snip--
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'def game_loop():'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 'def game_loop():'
- en: --snip--
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: player_direction = "down"
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: player_direction = "down"
- en: player_frame = 1
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 1
- en: '# check for exiting the room'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '# 检查是否退出房间'
- en: '➊     if player_x == room_width: # through door on RIGHT'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '➊     如果 player_x == room_width: # 通过右侧的门'
- en: '#clock.unschedule(hazard_move)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '#clock.unschedule(hazard_move)'
- en: ➋         current_room += 1
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ➋         current_room += 1
- en: ➌         generate_map()
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: ➌         generate_map()
- en: '➍         player_x = 0 # enter at left'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '➍         player_x = 0 # 从左侧进入'
- en: '➎         player_y = int(room_height / 2) # enter at door'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '➎         player_y = int(room_height / 2) # 从门口进入'
- en: ➏         player_frame = 0
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: ➏         player_frame = 0
- en: ➐         #start_room()
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: ➐         #start_room()
- en: ➑         return
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: ➑         return
- en: '➒     if player_x == -1: # through door on LEFT'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '➒     如果 player_x == -1: # 通过左侧的门'
- en: '#clock.unschedule(hazard_move)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '#clock.unschedule(hazard_move)'
- en: current_room -= 1
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: current_room -= 1
- en: generate_map()
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: generate_map()
- en: player_x = room_width - 1  # enter at right
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: player_x = room_width - 1  # 从右侧进入
- en: 'player_y = int(room_height / 2) # enter at door'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'player_y = int(room_height / 2) # 从门口进入'
- en: player_frame = 0
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 0
- en: '#start_room()'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '#start_room()'
- en: return
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '➓     if player_y == room_height: # through door at BOTTOM'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '➓     如果 player_y == room_height: # 通过底部的门'
- en: '#clock.unschedule(hazard_move)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '#clock.unschedule(hazard_move)'
- en: current_room += MAP_WIDTH
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: current_room += MAP_WIDTH
- en: generate_map()
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: generate_map()
- en: 'player_y = 0 # enter at top'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 'player_y = 0 # 从顶部进入'
- en: 'player_x = int(room_width / 2) # enter at door'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 'player_x = int(room_width / 2) # 从门口进入'
- en: player_frame = 0
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 0
- en: '#start_room()'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '#start_room()'
- en: return
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'if player_y == -1: # through door at TOP'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 player_y == -1: # 通过顶部的门'
- en: '#clock.unschedule(hazard_move)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '#clock.unschedule(hazard_move)'
- en: current_room -= MAP_WIDTH
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: current_room -= MAP_WIDTH
- en: generate_map()
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: generate_map()
- en: 'player_y = room_height - 1 # enter at bottom'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'player_y = room_height - 1 # 从底部进入'
- en: 'player_x = int(room_width / 2) # enter at door'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'player_x = int(room_width / 2) # 从门口进入'
- en: player_frame = 0
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 0
- en: '#start_room()'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '#start_room()'
- en: return
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '# If the player is standing somewhere they shouldn''t, move them back.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果玩家站在不该站的位置，将其移回。'
- en: 'if room_map[player_y][player_x] not in items_player_may_stand_on: #\'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 room_map[player_y][player_x] 不在 items_player_may_stand_on 中：#\
- en: '#           or hazard_map[player_y][player_x] != 0:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '#           或者 hazard_map[player_y][player_x] != 0:'
- en: player_x = old_player_x
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: player_x = old_player_x
- en: --snip--
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 7-6: Enabling the player to move between rooms*'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-6：让玩家在房间之间移动*'
- en: To see how this code works, let’s use an example room map. [Figure 7-3](ch07.xhtml#ch07fig3)
    shows a room 9 tiles wide and 9 tiles high with exits on each wall. We’ll use
    this image to understand the player’s position when they’ve left the room.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此代码的工作原理，我们使用一个示例房间地图。[图 7-3](ch07.xhtml#ch07fig3) 显示了一个宽 9 个瓦片、高 9 个瓦片的房间，四面都有出口。我们将使用此图像来理解玩家在离开房间时的位置。
- en: 'As you know, the positions on the map are numbered starting at 0 in the top
    left. The yellow squares show where the player might be if they walked out of
    the room:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知道的，地图上的位置是从左上角的 0 开始编号的。黄色的方块表示玩家如果走出房间，可能的位置：
- en: If the player’s *y* position is −1, they’ve walked out of the top exit.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的 *y* 位置为 −1，则表示他们已走出顶部出口。
- en: If the player’s *x* position is −1, they’ve walked out of the left exit.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的*x*位置为-1，说明他们走出了左侧出口。
- en: If the player’s *y* position is the same as the room_height variable, they’ve
    walked out of the bottom. The tile positions are numbered starting at 0, so if
    the player goes into row 9 in a room that has 9 rows, they’ve already left the
    room.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的*y*位置与room_height变量相同，说明他们已经走出了底部。瓦片位置是从0开始编号的，因此，如果玩家进入一个有9行的房间的第9行，他们已经离开了房间。
- en: Similarly, if the player’s *x* position is the same as the room_width variable,
    they’ve walked out of the right exit.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，如果玩家的*x*位置与room_width变量相同，说明他们走出了右侧出口。
- en: '![image](../images/fig7-3.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig7-3.jpg)'
- en: '*Figure 7-3: Working out whether the player has walked through an exit*'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：判断玩家是否走过出口*'
- en: The new code lines check whether the player position means they’ve walked out
    of the room. If the player’s *x* position is the same as room_width ➊, they’re
    outside the door on the right, as shown in [Figure 7-3](ch07.xhtml#ch07fig3).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 新的代码行检查玩家的位置是否意味着他们已经走出了房间。如果玩家的*x*位置与room_width ➊相同，他们就走出了右侧出口，如[图 7-3](ch07.xhtml#ch07fig3)所示。
- en: 'When a player leaves the room, we need to change the number of the room they’re
    in, which is stored in the current_room variable. When they go through a door
    on the right, the room number increases by 1 ➋. Look at the room map again (flip
    back to [Figure 4-1](ch04.xhtml#ch04fig1) on [page 60](ch04.xhtml#page_60)) to
    see that this makes sense: room numbers increase from left to right. For example,
    if the player is in room 33 and walks through the exit on the right, they end
    up in room 34.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家离开房间时，我们需要更改他们所在房间的房间编号，这个编号存储在current_room变量中。当他们从右侧的门走出去时，房间编号会增加1 ➋。再次查看房间地图（请翻到[图
    4-1](ch04.xhtml#ch04fig1)页面[60](ch04.xhtml#page_60)），看看这是否合理：房间编号是从左到右递增的。例如，如果玩家在房间33并通过右侧出口走出去，他们就会进入房间34。
- en: The program then generates a new room_map list ➌ to use in displaying and navigating
    the new room. The player is repositioned at the opposite side of the room ➍, so
    it looks like they’ve walked through the doorway. If the player exits to the right
    of the room, they enter the next room from the left ➍.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接着生成一个新的room_map列表 ➌，用来显示和导航新的房间。玩家的位置会被重新设置到房间的另一侧 ➍，看起来就像是他们穿过了门口。如果玩家从房间的右侧出口出去，他们会从左侧进入下一个房间
    ➍。
- en: Rooms are lots of different sizes, so we also need to change the player’s *y*
    position to put them in the middle of the doorway. Otherwise, the player might
    emerge from a wall! We set the player’s position to be half the height of the
    room ➎, which means they’re right in the middle of the doorway. When they enter
    the room, we reset the player animation, too ➏.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 房间大小各不相同，所以我们还需要更改玩家的*y*位置，将其放置在门口的正中间。否则，玩家可能会从墙壁中穿出来！我们将玩家的位置设置为房间高度的一半 ➎，这样他们就位于门口的正中间。当他们进入房间时，我们也会重置玩家动画
    ➏。
- en: I’ve included a couple of features here that we’ll need later, so make sure
    you include the clock.unschedule(hazard_move) ➊ and start_room() ➐ instructions.
    The start_room() function will display the room name when the player enters a
    new room. We’ll talk about those instructions more later in the book.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里加入了几个我们稍后会用到的功能，所以请确保你包含了clock.unschedule(hazard_move) ➊和start_room() ➐指令。start_room()函数会在玩家进入新房间时显示房间名称。我们将在本书后面讲解这些指令。
- en: Finally, the return instruction exits the game_loop() function ➑. Any further
    instructions in the function won’t run this time around. When the function starts
    again, it will start from the top as usual.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，return指令会退出game_loop()函数 ➑。该函数中的任何进一步指令在本次循环中都不会执行。当函数重新开始时，它将像往常一样从顶部开始。
- en: 'The next code block ➒ checks whether the player went through the left door.
    To go through the left door, the program does the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码块 ➒会检查玩家是否通过了左侧门。要通过左侧门，程序会执行以下操作：
- en: Checks whether the player_x variable contains -1 (see [Figure 7-3](ch07.xhtml#ch07fig3)).
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查player_x变量是否包含-1（参见[图 7-3](ch07.xhtml#ch07fig3)）。
- en: Subtracts 1 from the current room number to go into the room on the left.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从当前房间编号减去1以进入左侧房间。
- en: Sets the player’s *x* position to be just inside the doorway on the right. This
    position is the room_width minus 1\. (You can check this in [Figure 7-3](ch07.xhtml#ch07fig3).
    In a room that has a room_width of 9, the player’s *x* position should be 8.)
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置玩家的*x*位置为正好在右侧门口内侧的位置。这个位置是room_width减去1。（你可以在[图 7-3](ch07.xhtml#ch07fig3)中检查。在一个room_width为9的房间中，玩家的*x*位置应该是8。）
- en: Sets the player’s *y* position to the middle using the room_height. This is
    the same approach as walking through the right exit.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用room_height将玩家的*y*位置设置到中间。这与走过右侧出口的方式相同。
- en: The same code structure is used for the top and bottom exits ➓. However, the
    program checks the player’s *y* position to see if they used an exit and sets
    their new position to enter through a top or bottom doorway.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部和底部出口使用相同的代码结构➓。但是，程序会检查玩家的*y*位置，看他们是否使用了出口，并将他们的新位置设置为通过顶部或底部门进入。
- en: This time, we change the room number by 5 instead of 1 because that’s how many
    rooms wide the game map is (see [Figure 4-1](ch04.xhtml#ch04fig1)). For example,
    if you’re in room 37 and you go through the top exit, you end up in room 32 (which
    is 37 minus 5). If you’re in room 37 and go through the bottom exit, you end up
    in room 42 (37 plus 5). We stored the number 5 in the variable MAP_WIDTH earlier,
    and the program uses it here.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将房间编号改变了5，而不是1，因为游戏地图的宽度就是5个房间（参见[图 4-1](ch04.xhtml#ch04fig1)）。例如，如果你在房间37并通过顶部出口，你将进入房间32（37减去5）。如果你在房间37并通过底部出口，你将进入房间42（37加上5）。我们之前将数字5存储在变量MAP_WIDTH中，程序在这里使用了它。
- en: Now you’re able to freely explore the space station. In the next chapter, we’ll
    fix the remaining few bugs in the room display.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以自由探索太空站了。在下一章，我们将修复房间显示中的剩余几个bug。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞行了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下选项框以确认你已经学习了本章的关键内容。
- en: '![Images](../images/box.jpg)  The player’s position in the *Escape* game is
    measured in tiles, just like the scenery.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 玩家在*Escape*游戏中的位置以格子为单位，就像风景一样。'
- en: '![Images](../images/box.jpg)  The game_loop() function controls player movement
    and is scheduled to run every 0.03 seconds.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) game_loop()函数控制玩家移动，并计划每0.03秒运行一次。'
- en: '![Images](../images/box.jpg)  If the player moves somewhere they aren’t allowed
    to be, they’re put back in their previous position so fast you won’t see them
    move.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 如果玩家移动到一个不允许进入的位置，他们会被迅速送回到上一个位置，你几乎看不见他们的移动。'
- en: '![Images](../images/box.jpg)  The program checks the player’s *x* and *y* positions
    to see whether they’ve walked out of an exit. If they have, they’ll appear in
    the middle of the opposite exit in the next room.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 程序检查玩家的*x*和*y*位置，以确定他们是否走出了一个出口。如果是，他们将出现在下一个房间相反出口的中间。'
- en: '![Images](../images/box.jpg)  The animation frames are stored in the PLAYER
    dictionary and have a list of images for each direction. The dictionary key is
    the direction name, and an index number gets the particular frame needed.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 动画帧被存储在PLAYER字典中，并为每个方向提供了一系列图像。字典的键是方向名称，通过索引数字可以获得特定的帧。'
- en: '![Images](../images/box.jpg)  Frame 0 is the standing-still position. Frames
    1, 2, 3, and 4 show the astronaut walking.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 第0帧是静止位置。第1、2、3和4帧显示了宇航员行走的动作。'
- en: '![Images](../images/box.jpg)  The game_loop() function increases the animation
    frame number used when the player is walking.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) game_loop()函数增加了玩家行走时使用的动画帧数。'
- en: '![Images](../images/box.jpg)  The player_offset_x and player_offset_y variables
    are used to position the astronaut correctly when walking into a new tile.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) player_offset_x和player_offset_y变量用于在玩家进入新格子时正确定位宇航员。'
- en: '![image](../images/f0126-01.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0126-01.jpg)'
