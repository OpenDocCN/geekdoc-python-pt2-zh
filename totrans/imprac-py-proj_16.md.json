["```py\n962\n997\n1020\n1025\n1031\n```", "```py\n   import sys\n   import math\n➊ from collections import defaultdict\n➋ import matplotlib.pyplot as plt\n\n   # Benford's law percentages for leading digits 1-9\n➌ BENFORD = [30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.6]\n\n➍ def load_data(filename):\n       \"\"\"Open a text file & return a list of strings.\"\"\"\n    ➎ with open(filename) as f:\n           return f.read().strip().split('\\n')\n```", "```py\n➊ def count_first_digits(data_list):\n\n       \"\"\"Count 1st digits in list of numbers; return counts & frequency.\"\"\"\n\n    ➋ first_digits = defaultdict(int)  # default value of int is 0\n\n    ➌ for sample in data_list:\n\n        ➍ if sample == '':\n\n               continue\n\n           try:\n\n               int(sample)\n\n           except ValueError as e:\n\n               print(e, file=sys.stderr)\n\n               print(\"Samples must be integers. Exiting\", file=sys.stderr)\n\n               sys.exit(1)\n\n        ➎ first_digits[sample[0]] += 1\n\n       # check for missing digits\n\n       keys = [str(digit) for digit in range(1, 10)]\n\n       for key in keys:\n\n           if key not in first_digits:\n\n               first_digits[key] = 0\n\n    ➏ data_count = [v for (k, v) in sorted(first_digits.items())]\n\n       total_count = sum(data_count)\n\n       data_pct = [(i / total_count) * 100 for i in data_count]\n\n    ➐ return data_count, data_pct, total_count\n```", "```py\nName of file with COUNT data: bad_data.txt\ninvalid literal for int() with base 10: '0.01'\nSamples must be integers. Exiting.\n```", "```py\n[129, 62, 45, 48, 40, 25, 23, 21, 15]\n```", "```py\n➊ def get_expected_counts(total_count):\n       \"\"\"Return list of expected Benford's law counts for a total sample count.\"\"\"\n    ➋ return [round(p * total_count / 100) for p in BENFORD]\n```", "```py\n➊ def chi_square_test(data_count, expected_counts):\n       \"\"\"Return boolean on chi-square test (8 degrees of freedom & P-val=0.05).\"\"\"\n    ➋ chi_square_stat = 0  # chi-square test statistic\n    ➌ for data, expected in zip(data_count, expected_counts):\n        ➍ chi_square = math.pow(data - expected, 2)\n           chi_square_stat += chi_square / expected\n    ➎ print(\"\\nChi Squared Test Statistic = {:.3f}\".format(chi_square_stat))\n       print(\"Critical value at a P-value of 0.05 is 15.51.\")\n\n    ➏ return chi_square_stat < 15.51\n```", "```py\n➊ def bar_chart(data_pct):\n       \"\"\"Make bar chart of observed vs expected 1st-digit frequency (%).\"\"\"\n    ➋ fig, ax = plt.subplots()\n\n    ➌ index = [i + 1 for i in range(len(data_pct))]  # 1st digits for x-axis\n\n       # text for labels, title, and ticks\n    ➍ fig.canvas.set_window_title('Percentage First Digits')\n    ➎ ax.set_title('Data vs. Benford Values', fontsize=15)\n    ➏ ax.set_ylabel('Frequency (%)', fontsize=16)\n    ➐ ax.set_xticks(index)\n       ax.set_xticklabels(index, fontsize=14)\n```", "```py\n       # build bars\n    ➊ rects = ax.bar(index, data_pct, width=0.95, color='black', label='Data')\n\n       # attach a text label above each bar displaying its height\n    ➋ for rect in rects:\n        ➌ height = rect.get_height()\n        ➍ ax.text(rect.get_x() + rect.get_width()/2, height,\n                   '{:0.1f}'.format(height), ha='center', va='bottom',\n                   fontsize=13)\n\n       # plot Benford values as red dots\n    ➎ ax.scatter(index, BENFORD, s=150, c='red', zorder=2, label='Benford')\n\n       # Hide the right and top spines & add legend\n    ➏ ax.spines['right'].set_visible(False)\n       ax.spines['top'].set_visible(False)\n    ➐ ax.legend(prop={'size':15}, frameon=False)\n\n    ➑ plt.show()\n```", "```py\n   def main():\n       \"\"\"Call functions and print stats.\"\"\"\n       # load data\n       while True:\n        ➊ filename = input(\"\\nName of file with COUNT data: \")\n           try:\n               data_list = load_data(filename)\n           except IOError as e:\n               print(\"{}. Try again.\".format(e), file=sys.stderr)\n           else:\n               break\n    ➋ data_count, data_pct, total_count = count_first_digits(data_list)\n    ➌ expected_counts = get_expected_counts(total_count)\n       print(\"\\nobserved counts = {}\".format(data_count))\n       print(\"expected counts = {}\".format(expected_counts), \"\\n\")\n\n    ➍ print(\"First Digit Probabilities:\")\n    ➎ for i in range(1, 10):\n           print(\"{}: observed: {:.3f}  expected: {:.3f}\".\n                 format(i, data_pct[i - 1] / 100, BENFORD[i - 1] / 100))\n\n    ➏ if chi_square_test(data_count, expected_counts):\n           print(\"Observed distribution matches expected distribution.\")\n       else:\n           print(\"Observed distribution does not match expected.\",\n                 file=sys.stderr)\n\n    ➐ bar_chart(data_pct)\n\n➑ if __name__ == '__main__':\n       main()\n```", "```py\nName of file with COUNT data: C:\\Python35\\Benford\\Illinois_votes.txt\n```"]