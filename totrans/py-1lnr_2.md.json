["```py\nemployees = {'Alice' : 100000,\n\n             'Bob' : 99817,\n\n             'Carol' : 122908,\n\n             'Frank' : 88123,\n\n             'Eve' : 93121}\n\ntop_earners = []\n\nfor key, val in employees.items():\n\n    if val >= 100000:\n\n        top_earners.append((key,val))\n\nprint(top_earners)\n\n# [('Alice', 100000), ('Carol', 122908)]\n```", "```py\n[ expression + context ]\n```", "```py\n[x * 2 for x in range(3)]\n```", "```py\n[0, 2, 4]\n```", "```py\nprint([➊x ➋for x in range(5)])\n\n# [0, 1, 2, 3, 4]\n```", "```py\nprint([➊(x, y) ➋for x in range(3) for y in range(3)])\n\n# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n```", "```py\nprint([➊x ** 2 ➋for x in range(10) if x % 2 > 0])\n\n# [1, 9, 25, 49, 81]\n```", "```py\nprint([➊x.lower() ➋for x in ['I', 'AM', 'NOT', 'SHOUTING']])\n\n# ['i', 'am', 'not', 'shouting']\n```", "```py\n## Data\n\nemployees = {'Alice' : 100000,\n\n             'Bob' : 99817,\n\n             'Carol' : 122908,\n\n             'Frank' : 88123,\n\n             'Eve' : 93121}\n\n## One-Liner\n\ntop_earners = [(k, v) for k, v in employees.items() if v >= 100000]\n\n## Result\n\nprint(top_earners)\n```", "```py\ntop_earners = [ ➊(k, v) ➋for k, v in employees.items() if v >= 100000]\n```", "```py\nprint(top_earners)\n\n# [('Alice', 100000), ('Carol', 122908)]\n```", "```py\n## Data\n\ntext = '''\n\nCall me Ishmael. Some years ago - never mind how long precisely - having\n\nlittle or no money in my purse, and nothing particular to interest me\n\non shore, I thought I would sail about a little and see the watery part\n\nof the world. It is a way I have of driving off the spleen, and regulating\n\nthe circulation. - Moby Dick'''\n\n## One-Liner\n\nw = [[x for x in line.split() if len(x)>3] for line in text.split('\\n')]\n\n## Result\n\nprint(w)\n```", "```py\nfilename = \"readFileDefault.py\" # this code\n\nf = open(filename)\n\nlines = []\n\nfor line in f:\n\n    lines.append(line.strip())\n\nprint(lines)\n\n\"\"\"\n\n['filename = \"readFileDefault.py\" # this code',\n\n'',\n\n'f = open(filename)',\n\n'lines = []',\n\n'for line in f:',\n\n'lines.append(line.strip())',\n\n'',\n\n'print(lines)']\n\n\"\"\"\n```", "```py\nprint([line.strip() for line in open(\"readFile.py\")])\n```", "```py\nprint([line.strip() for line in open(\"readFile.py\")])\n\n# ['print([line.strip() for line in open(\"readFile.py\")])']\n```", "```py\nlambda arguments : return expression\n```", "```py\nlambda x, y: x + y\n```", "```py\n## Data\n\ntxt = ['lambda functions are anonymous functions.',\n\n       'anonymous functions dont have a name.',\n\n       'functions are objects in Python.']\n\n## One-Liner\n\nmark = map(lambda s: (True, s) if 'anonymous' in s else (False, s), txt)\n\n## Result\n\nprint(list(mark))\n```", "```py\n## Result\n\nprint(list(mark))\n\n# [(True, 'lambda functions are anonymous functions.'), \n\n# (True, 'anonymous functions dont have a name.'), \n\n# (False, 'functions are objects in Python.')]\n```", "```py\nx[start:stop:step].\n```", "```py\n  s = 'Eat more fruits!'\n\n  print(s[0:3])\n\n  # Eat\n\n➊ print(s[3:0]) \n\n  # (empty string '')\n\n  print(s[:5])\n\n  # Eat m\n\n  print(s[5:])\n\n  # ore fruits!\n\n➋ print(s[:100]) \n\n  # Eat more fruits!\n\n  print(s[4:8:2])\n\n  # mr\n\n➌ print(s[::3]) \n\n  # E rfi!\n\n➍ print(s[::-1]) \n\n  # !stiurf erom taE\n\n  print(s[6:1:-1]) \n\n  # rom t\n```", "```py\n## Data\n\nletters_amazon = '''\n\nWe spent several years building our own database engine,\n\nAmazon Aurora, a fully-managed MySQL and PostgreSQL-compatible\n\nservice with the same or better durability and availability as\n\nthe commercial engines, but at one-tenth of the cost. We were\n\nnot surprised when this worked.\n\n'''\n\n## One-Liner\n\nfind = lambda x, q: x[x.find(q)-18:x.find(q)+18] if q in x else -1\n\n## Result\n\nprint(find(letters_amazon, 'SQL'))\n```", "```py\n## Result\n\nprint(find(letters_amazon, 'SQL'))\n\n# a fully-managed MySQL and PostgreSQL\n```", "```py\n## Data (daily stock prices ($))\n\nprice = [[9.9, 9.8, 9.8, 9.4, 9.5, 9.7],\n\n         [9.5, 9.4, 9.4, 9.3, 9.2, 9.1],\n\n         [8.4, 7.9, 7.9, 8.1, 8.0, 8.0],\n\n         [7.1, 5.9, 4.8, 4.8, 4.7, 3.9]]\n\n## One-Liner\n\nsample = [line[::2] for line in price]\n\n## Result\n\nprint(sample)\n```", "```py\n## Result\n\nprint(sample)\n\n# [[9.9, 9.8, 9.5], [9.5, 9.4, 9.2], [8.4, 7.9, 8.0], [7.1, 4.8, 4.7]]\n```", "```py\n## Data\n\nvisitors = ['Firefox', 'corrupted', 'Chrome', 'corrupted',\n\n            'Safari', 'corrupted', 'Safari', 'corrupted',\n\n            'Chrome', 'corrupted', 'Firefox', 'corrupted']\n\n## One-Liner\n\nvisitors[1::2] = visitors[::2]\n\n## Result\n\nprint(visitors)\n```", "```py\nvisitors = ['Firefox', 'corrupted', 'Chrome', 'corrupted',\n\n            'Safari', 'corrupted', 'Safari', 'corrupted',\n\n            'Chrome', 'corrupted', 'Firefox', 'corrupted']\n```", "```py\nvisitors = ['Firefox', 'corrupted', 'Chrome', 'corrupted',\n\n            'Safari', 'corrupted', 'Safari', 'corrupted',\n\n            'Chrome', 'corrupted', 'Firefox', 'corrupted']\n```", "```py\n## Result\n\nprint(visitors)\n\n'''\n\n['Firefox', 'Firefox', 'Chrome', 'Chrome',\n\n'Safari', 'Safari', 'Safari', 'Safari',\n\n'Chrome', 'Chrome', 'Firefox', 'Firefox']\n\n'''\n```", "```py\n## Dependencies\n\nimport matplotlib.pyplot as plt\n\n## Data\n\ncardiac_cycle = [62, 60, 62, 64, 68, 77, 80, 76, 71, 66, 61, 60, 62]\n\n## One-Liner\n\nexpected_cycles = cardiac_cycle[1:-2] * 10\n\n## Result\n\nplt.plot(expected_cycles)\n\nplt.show()\n```", "```py\n## Data\n\ncompanies = {\n\n    'CoolCompany' : {'Alice' : 33, 'Bob' : 28, 'Frank' : 29},\n\n    'CheapCompany' : {'Ann' : 4, 'Lee' : 9, 'Chrisi' : 7},\n\n    'SosoCompany' : {'Esther' : 38, 'Cole' : 8, 'Paris' : 18}}\n\n## One-Liner\n\nillegal = [x for x in companies if any(y<9 for y in companies[x].values())]\n\n## Result\n\nprint(illegal)\n```", "```py\n## Result\n\nprint(illegal)\n\n# ['CheapCompany', 'SosoCompany']\n```", "```py\n[1,2,3]\n\n[4,5,6]\n```", "```py\n[(1,4), (2,5), (3,6)]\n```", "```py\n(1,4)\n\n(2,5)\n\n(3,6)\n```", "```py\n[(1,2,3), (4,5,6)]\n```", "```py\nlst_1 = [1, 2, 3]\n\nlst_2 = [4, 5, 6]\n\n# Zip two lists together\n\nzipped = list(zip(lst_1, lst_2))\n\nprint(zipped)\n\n# [(1, 4), (2, 5), (3, 6)]\n\n# Unzip to lists again\n\nlst_1_new, lst_2_new = zip(➊*zipped)\n\nprint(list(lst_1_new))\n\nprint(list(lst_2_new))\n```", "```py\n## Data\n\ncolumn_names = ['name', 'salary', 'job']\n\ndb_rows = [('Alice', 180000, 'data scientist'),\n\n           ('Bob', 99000, 'mid-level manager'),\n\n           ('Frank', 87000, 'CEO')]\n\n## One-Liner\n\ndb = [dict(zip(column_names, row)) for row in db_rows]\n\n## Result\n\nprint(db)\n```", "```py\n## Result\n\nprint(db)\n\n'''\n\n[{'name': 'Alice', 'salary': 180000, 'job': 'data scientist'},\n\n{'name': 'Bob', 'salary': 99000, 'job': 'mid-level manager'},\n\n{'name': 'Frank', 'salary': 87000, 'job': 'CEO'}]\n\n'''\n```", "```py\nmark = [(True, s) if 'anonymous' in s else (False, s) for s in txt]\n```"]