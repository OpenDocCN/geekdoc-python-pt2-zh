["```py\n$ python3 my_module.py\n```", "```py\nif __name__ == '__main__':\n    # only executes if file is run, not imported\n```", "```py\n    from vector import Vector\n```", "```py\nimport vector\n```", "```py\nv = vector.Vector(1, 2)\n```", "```py\nimport vector as vec\n```", "```py\nv = vec.Vector(1, 2)\n```", "```py\nfrom vector import Vector\n```", "```py\nv = Vector(1, 2)\n```", "```py\nfrom vector import Vector as Vec\n```", "```py\nv = Vec(1, 2)\n```", "```py\nimport geom.point\n```", "```py\nfrom geom import point\n```", "```py\np = point.Point(1, 2)\n```", "```py\nimport geom.point as pt\n```", "```py\nfrom geom import point as pt\n```", "```py\np = pt.Point(1, 2)\n```", "```py\nfrom geom.point import Point\n\np = Point(1, 2)\n```", "```py\nfrom geom.point import Point as Pt\n\np = Pt(1, 2)\n```", "```py\nfrom ..geom.point import Point\n\np = Point(1, 2)\n```", "```py\ndef set_data(self, data: [float]):\n    \"\"\"\n    Sets the given list of 'float' numbers as the values of\n    the matrix.\n\n    The matrix is filled with the passed in numbers from left\n    to right and from top to bottom.\n    The length of the passed in list has to be equal to the\n    number of values in the matrix: rows x columns.\n\n    If the size of the list doesn't match the matrix number\n    of elements, an error is raised.\n\n    :param data: [float] with the values\n    :return: this Matrix\n    \"\"\"\n    if len(data) != self.__cols_count * self.__rows_count:\n        raise ValueError('Cannot set data: size mismatch')\n\n    for row in range(self.__rows_count):\n        offset = self.__cols_count * row\n        for col in range(self.__cols_count):\n            self.__data[row][col] = data[offset + col]\n\n    return self\n```", "```py\n>>> from eqs.matrix import Matrix\n>>> help(Matrix.set_data)\n\nHelp on function set_data in module eqs.matrix:\nset_data(self, data: [<class 'float'>])\n    Sets the given list of 'float' numbers as the values of\n    the matrix.\n\n    The matrix is filled with the passed in numbers from left\n    to right and from top to bottom.\n    The length of the passed in list has to be equal to the\n    number of values in the matrix: rows x columns.\n\n    If the size of the list doesn't match the matrix number\n    of elements, an error is raised.\n\n    :param data: [float] with the values\n    :return: this Matrix\n```", "```py\n>>> s1 = set([1, 2, 3])\n```", "```py\n>>> s1 = {1, 2, 3}\n```", "```py\n>>> len(s1)\n3\n```", "```py\n>>> 2 in s1\nTrue\n\n>>> 5 in s1\nFalse\n```", "```py\n>>> s1.add(4)\n# the set is now {1, 2, 3, 4}\n```", "```py\n>>> s1.add(3)\n# the set is still {1, 2, 3, 4}\n```", "```py\n>>> s1.add(3)\n>>> s1.remove(1)\n# the set is now {2, 3, 4}\n```", "```py\n>>> s1 = set([1, 2, 3])\n>>> s2 = set([3, 4])\n>>> s1.difference(s2)\n{1, 2}\n```", "```py\n>>> s1 = set([1, 2, 3])\n>>> s2 = set([3, 4])\n>>> s1.union(s2)\n{1, 2, 3, 4}\n```", "```py\n>>> for element in s1:\n...     print(element)\n...\n3\n1\n2\n```", "```py\n>>> names = ('Anne', 'Emma')\n>>> some_function(names)\n```", "```py\n>>> names = set('Anne', 'Emma')\n>>> some_function(names)\n```", "```py\n>>> me = ('Angel', 31)\n```", "```py\n>>> name = ('Angel',)\n```", "```py\n>>> me = tuple(['Angel', 31])\n```", "```py\n>>> len(count)\n2\n```", "```py\n>>> me.count('Angel')\n1\n\n>>> me.count(50)\n0\n\n>>> ('hey', 'hey', 'hey').count('hey')\n3\n```", "```py\n>>> family = ('Angel', 'Alvaro', 'Mery', 'Paul', 'Isabel', 'Alvaro')\n>>> family.index('Alvaro')\n1\n```", "```py\n>>> 'Isabel' in family\nTrue\n\n>>> 'Elena' in family\nFalse\n```", "```py\n>>> ('ruby', 'ruby') * 4\n('ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby')\n\n>>> ('we', 'found', 'love', 'in', 'a', 'hopeless', 'place') * 16\n('we', 'found', 'love', 'in', 'a', 'hopeless', 'place', 'we', 'found', ...\n```", "```py\n>>> for city in ('San Francisco', 'Barcelona', 'Pamplona'):\n...     print(f'{city} is a beautiful city')\n...\nSan Francisco is a beautiful city\nBarcelona is a beautiful city\nPamplona is a beautiful city\n```", "```py\n>>> cities = ('Pamplona', 'San Francisco', 'Barcelona')\n>>> for index, city in enumerate(cities):\n...     print(f'{city} is #{index + 1} in my favorite cities list')\n...\nPamplona is #1 in my favorite cities list\nSan Francisco is #2 in my favorite cities list\nBarcelona is #3 in my favorite cities list\n```", "```py\n>>> l1 = list(['a', 'b', 'c'])\n```", "```py\n>>> l1 = ['a', 'b', 'c']\n```", "```py\n>>> len(l1)\n3\n```", "```py\n>>> l1[1]\n'b'\n```", "```py\n>>> l1[1] = 'm'\n# the list is now ['a', 'm', 'c']\n```", "```py\n>>> l1[35] = 'x'\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nIndexError: list assignment index out of range\n```", "```py\n>>> l1.append('d')\n# the list is now ['a', 'm', 'c', 'd']\n```", "```py\n>>> for element in l1:\n...     print(element)\n...\na\nm\nc\nd\n```", "```py\n>>> for index, element in enumerate(l1):\n...     print(f'{index} -> {element}')\n...\n0 -> a\n1 -> m\n2 -> c\n3 -> d\n```", "```py\n>>> a = [1, 2, 3, 4]\n>>> b = a[1:3]\n# list b is [2, 3]\n```", "```py\n>>> a = [1, 2, 3, 4]\n\n# these two are equivalent:\n>>> b_1 = a[0:4]\n>>> b_2 = a[:]\n```", "```py\n>>> a = [1, 2, 3, 4]\n>>> b = a[:]\n>>> b[0] = 55\n\n>>> print('list a:', a)\nlist a: [1, 2, 3, 4]\n\n>>> print('list b:', b)\nlist b: [55, 2, 3, 4]\n```", "```py\n>>> a = [1, 2, 3, 4]\n>>> b = a[-2:]\n# list b is [3, 4]\n```", "```py\n>>> colors = dict([('stoke', 'red'), ('fill', 'orange')])\n```", "```py\n>>> colors = {'stoke': 'red', 'fill': 'orange'}\n```", "```py\n>>> colors['stroke']\nred\n```", "```py\n>>> ages = {('Angel', 'Sola'): 31, ('Jen', 'Gil'): 30}\n```", "```py\n>>> age = ages[('Jen', 'Gil')]\n>>> print(f'she is {age} years old')\nshe is 30 years old\n```", "```py\n>>> age = ages[('Steve', 'Perry')]\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nKeyError: ('Steve', 'Perry')\n```", "```py\n>>> ('Steve', 'Perry') in ages\nFalse\n```", "```py\n>>> ages.keys()\ndict_keys([('Angel', 'Sola'), ('Jen', 'Gil')])\n```", "```py\n>>> ages.values()\ndict_values([31, 30])\n```", "```py\n>>> ('Jen', 'Gil') in ages.keys()\nTrue\n\n>>> 45 in ages.values()\nFalse\n```", "```py\n>>> ages = {'Angel': 31, 'Jen': 30}\n```", "```py\n>>> for name in ages.keys():\n...     print(f'we have the age for {name}')\n...\nwe have the age for Angel\nwe have the age for Jen\n```", "```py\n>>> for age in ages.values():\n...     print(f'someone is {age} years old')\n...\nsomeone is 31 years old\nsomeone is 30 years old\n```", "```py\n>>> for name, age in ages.items():\n...     print(f'{name} is {age} years old')\n...\nAngel is 31 years old\nJen is 30 years old\n```", "```py\n>>> anne_info = ('Anne', 'grape juice')\n```", "```py\n>>> name = anne_info[0]\n>>> beverage = anne_info[1]\n```", "```py\n>>> (name, beverage) = anne_info\n\n>>> name\n'Anne'\n\n>>> beverage\n>>> 'grape juice'\n```", "```py\n>>> emma_info = ['Emma', 'hot chocolate']\n```", "```py\n>>> [name, beverage] = emma_info\n\n>>> name\n'Emma'\n\n>>> beverage\n'hot chocolate'\n```", "```py\n[a, _, c] = [1, 2, 3]\n```"]