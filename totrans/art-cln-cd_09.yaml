- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Focus
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this short chapter, you’ll take a quick tour through the most important
    lesson in this book: how to focus. We started this book with a discussion of complexity,
    the origin of many productivity obstacles. Here, we summarize how to tackle complexity
    based on what you’ve learned in this book.'
  prefs: []
  type: TYPE_NORMAL
- en: The Weapon Against Complexity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main thesis of this book is that complexity leads to chaos. Chaos is the
    flip side of focus. To solve the challenges posed by complexity, you need to use
    the powerful weapon of *focus*.
  prefs: []
  type: TYPE_NORMAL
- en: To justify this argument, let’s look at the scientific concept of *entropy*,
    well known in many scientific fields such as thermodynamics and information theory.
    Entropy defines the degree of randomness, disorder, and uncertainty in a system.
    High entropy means high randomness and chaos. Low entropy means order and predictability.
    Entropy is at the heart of the famous second law of thermodynamics that states
    that *the entropy of a system increases with time—resulting in a state of high
    entropy*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-1](#figure9-1) depicts entropy through the example of an arrangement
    of a fixed number of particles. On the left, you see a state with low entropy
    where the structure of the particles resembles a house. The location of each particle
    is predictable and follows a higher-level order and structure. There’s a greater
    plan for how the particles must be arranged. On the right, you see a state with
    high entropy: the house structure has broken down. The pattern of particles has
    lost its order, giving way to chaos. Over time—if no external force exerts energy
    to reduce entropy—entropy will increase, and all order will be destroyed. Ruined
    castles, for example, are a testament to the second law of thermodynamics. You
    may ask: What does thermodynamics have to do with coding productivity? It’ll become
    clear in a moment. Let’s keep thinking from first principles.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram of Low entropy on the left, showing dots in the shape of a house.
    On the right is high entropy, where the dots are floating around with only a vague
    shape of a house. ](image_fi/502185c09/f09001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: Contrasting states of low and high entropy'
  prefs: []
  type: TYPE_NORMAL
- en: Productivity means creating something, whether you’re building a house, writing
    a book, or writing a software app. Essentially, to be productive, you must *reduce
    entropy* so that resources are arranged in a way to make your greater plan whole.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-2](#figure9-2) shows the relationship between entropy and productivity.
    You are a creator and a builder. You take raw resources and move them from a state
    of high entropy into a state of low entropy using focused effort toward the attainment
    of a greater plan. That’s it! This is the secret and everything you need in life
    to be super productive and successful: take time to carefully *plan* your course
    of action, set specific goals, and design regular habits and action steps that
    will give you the result you want. Then apply *focused effort* using all resources
    you possess—time, energy, money, and people—until your plan comes true.'
  prefs: []
  type: TYPE_NORMAL
- en: '![High entropy is on the left, with floating dots above a person dreaming of
    a house shape. An arrow points to a second diagram above the word “force,” where
    the dots are forming distinct structures. Low entropy is on the right, showing
    the dots in a house shape, exemplifying the effect of force on an idea. ](image_fi/502185c09/f09002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: Relationship between entropy and productivity'
  prefs: []
  type: TYPE_NORMAL
- en: It may sound trivial, but most people do this wrong. They may never apply this
    focused effort toward an idea’s attainment, so the idea remains trapped in their
    heads. Others may live from day to day, never planning anything new. Only if you
    do both—plan carefully and focus your effort—will you become a productive person.
    So, to become a builder of, say, a smartphone app, you must bring order to the
    chaos by planning and by applying focused effort until you achieve your goal.
  prefs: []
  type: TYPE_NORMAL
- en: If it is that simple, why isn’t everyone doing it? The primary obstacle, as
    you’ve guessed, is the complexity that often comes from a lack of focus. If you
    have multiple plans or you allow your plans to change more than necessary over
    time, you’re more likely to move just a few steps toward your goal before aborting
    the whole thing. Only if you focus for a long enough time on *one* plan can you
    actually accomplish it. This holds for small accomplishments, such as reading
    a book (you almost have this done!), and big accomplishments, such as writing
    and publishing your first app. Focus is the missing link.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-3](#figure9-3) is a graphic explaining the power of focus, plain
    and simple.'
  prefs: []
  type: TYPE_NORMAL
- en: '![On the left is a circle with arrows pointing out in every direction that
    represents “unfocused efforts without a goal.” on the right is a circle with all
    arrows pointing toward a star that represents your goal. This represents a focused
    effort toward a goal.](image_fi/502185c09/f09003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-3: Same effort, different result'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have limited time and energy. Say you’ve got eight hours of full-on effort
    in a given day. You can decide how to spend those units. Most people spend a little
    time on a lot of activities. For example, Bob may spend one hour in meetings,
    one hour coding, one hour browsing social media, one hour in project discussions,
    one hour chitchatting, one hour editing code documentation, one hour thinking
    about a new project, and one hour writing a novel. Bob is likely to achieve average
    results at best in all the activities he does because he spends so little time
    and effort on each of them. Alice may spend eight hours doing one thing: coding.
    She does it every day. She makes rapid progress toward her goal of publishing
    a successful app. She becomes exceptional in a few things rather than average
    in many things. In fact, she excels in only one powerful skill: coding. And the
    progress toward her goal is unstoppable.'
  prefs: []
  type: TYPE_NORMAL
- en: Unifying the Principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I started writing this book assuming that focus is just one of many productivity
    principles, but it quickly became apparent to me that focus is the unifying principle
    of all the principles outlined in this book. Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The 80/20 Principle**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Focus on the vital few: remember that 20 percent delivers 80 percent of the
    results and ignore the trivial many, increasing your productivity by one or two
    orders of magnitude.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build a Minimal Viable Product**'
  prefs: []
  type: TYPE_NORMAL
- en: Focus on one hypothesis at a time, thereby reducing the complexity of your product,
    reducing feature creep, and maximizing the rate of progress toward product-market
    fit. Before you write any line of code, figure out a clear hypothesis about your
    user’s needs. Remove all features except the absolutely necessary. Less is more!
    Spend more time thinking about what features to implement than actually implementing
    them. Release your MVP quickly and often, and improve it over time by testing
    and adding gradually. Use split testing to test the response of two product variants
    and discard features that don’t lead to improvements in key user metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Write Clean and Simple Code**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Complexity slows your understanding of the code and increases the risk of errors.
    As we learned from Robert C. Martin, “The ratio of time spent reading versus writing
    is well over 10 to 1\. We are constantly reading old code as part of the effort
    to write new code.” Making your code easy to read simplifies the writing of new
    code. In their famous book *The Elements of Style* (Macmillan, 1959), authors
    Strunk and White suggest a timeless principle to improve your writing: *omit needless
    words*. I suggest you extend this principle to programming and *omit needless
    code*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Premature Optimization Is the Root of All Evil**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Focus your optimization efforts where they matter. Premature optimization is
    the act of spending valuable resources on code optimizations that ultimately prove
    to be unnecessary. As Donald Knuth tells us, “Forget about small efficiencies,
    say about 97% of the time: premature optimization is the root of all evil.” I
    discussed my top six performance-tuning tips: take metrics for comparisons, consider
    the 80/20 principle, invest in improving algorithms, apply the less is more principle,
    cache repeated results, and know when to stop—all of which could be summarized
    in a single word, *focus*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Flow**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flow is a state in which you’re completely involved in the task at hand—you’re
    focused and concentrated. Flow researcher Csikszentmihalyi laid out three conditions
    to achieve flow. (1) Your goals must be clear. Every line of code leads you closer
    to the successful completion of the larger code project. (2) The feedback mechanism
    in your environment must be present, and, preferably, immediate. Find people,
    in person or online, to review your work and follow the MVP principle. (3) There’s
    a balance between opportunity and capacity. If the task is too easy, you’ll lose
    the rush of excitement; if it’s too hard, you''ll throw in the towel early. If
    you follow these conditions, you’re more likely to achieve a state of pure focus.
    Ask yourself daily: What can I do *today* to push my software project to the next
    level? This question is challenging but not overwhelming.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do One Thing Well (Unix)**'
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea of the Unix philosophy is to build simple, clear, concise, modular
    code that is easy to extend and maintain. This can mean many different things,
    but the goal is to allow many humans to work together on a codebase by prioritizing
    human over computer efficiency, favoring composability over monolithic design.
    You focus every function on one purpose only. You’ve learned 15 Unix principles
    to write better code, including small is beautiful, make each function do one
    thing well, build a prototype as soon as possible, and fail early and noisily.
    If you keep the *focus* rule at the top of your mind, you’ll do just fine in regard
    to these principles without necessarily needing to memorize every one of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Less Is More in Design**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is about using minimalism to focus your design. Think of the differences
    between Yahoo Search and Google Search, the Blackberry and the iPhone, and OkCupid
    and Tinder: the winners are often those technologies with a radically simple user
    interface. By using a minimalistic web or app design, you focus on the one thing
    you’re doing best. Focus the user’s attention on the unique value your product
    provides!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Complexity is your enemy because it maximizes entropy. As a builder and creator,
    you want to minimize entropy: the pure act of creation is one of minimizing entropy.
    You accomplish this by applying focused effort. Focus is the success secret of
    every creator. Keep in mind what both Warren Buffett and Bill Gates considered
    the secret of their success: *focus*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement focus in your work, ask yourself these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: On which software project do I want to focus my efforts?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which features do I want to focus on to create my MVP?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the minimal number of design elements I can implement to test the viability
    of my product?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who will use my product and why?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What can I remove from my code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do my functions do one thing only?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I achieve the same result in less time?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you keep asking yourself these or similar focusing questions, the money and
    time you spent on this book have been well worth it.
  prefs: []
  type: TYPE_NORMAL
