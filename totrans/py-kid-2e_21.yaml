- en: A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python Keywords
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Keywords* in Python (and most programming languages) are words that have special
    meaning. They are used as part of the programming language itself, and therefore
    must not be used for anything else. For example, if you try to use keywords as
    variables, or use them in the wrong way, you’ll get strange error messages from
    the Python console. This appendix describes each of the Python keywords. You should
    find this to be a handy reference as you continue to program.'
  prefs: []
  type: TYPE_NORMAL
- en: and
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The keyword and is used to join two expressions together in a statement (like
    an if statement) to say that both expressions must be true. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code means that the value of the variable age must be greater than 12 and
    less than 20 before the message will be printed.
  prefs: []
  type: TYPE_NORMAL
- en: as
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The keyword as can be used to give another name to an imported module. For
    example, suppose you had a module with a very long name:'
  prefs: []
  type: TYPE_NORMAL
- en: i_am_a_python_module_that_is_not_very_useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be enormously annoying to need to type this module name every time
    you wanted to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, you can give the module a new, shorter name when you import it, and
    then simply use that new name (like a nickname), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Assert
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The assert keyword is used to say that a value must be true. It’s another way
    of catching errors and problems in code, usually in more advanced programs (which
    is why we don’t use assert in *Python for Kids*). Here’s a simple assert statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we assert that the value of the variable mynumber is less than
    5\. It isn’t, so Python displays an error (called an AssertionError).
  prefs: []
  type: TYPE_NORMAL
- en: ASYNC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The async keyword is used to define something called a *native coroutine*. This
    is an advanced concept used in asynchronous programming (which is doing multiple
    things in parallel, or doing things after some time).
  prefs: []
  type: TYPE_NORMAL
- en: Await
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The await keyword is also used for asynchronous programming (similar to async).
  prefs: []
  type: TYPE_NORMAL
- en: Break
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The break keyword is used to stop some code from running. You might use break
    inside a for loop, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the variable age is set to 10 here, this code will print out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once the value of the variable x reaches 10, the code prints the text “end counting”
    and then breaks out of the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The keyword class is used to define a type of object, like a vehicle, animal,
    or person. Classes can have a function called __init__, which is used to perform
    all the tasks an object of the class needs when it is created. For example, an
    object of the Car class might need a color variable when it’s created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Continue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The continue keyword is a way to “jump” to the next item in a loop so the remaining
    code in the loop block is not executed. Unlike break, we don’t jump out of the
    loop—we just carry on with the next item. For example, if we had a list of items
    and wanted to skip items starting with *b*, we could use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We first create our list of items, and then use a for loop to loop over the
    items and run a block of code for each. If the item starts with the letter *b*,
    we continue to the next item. Otherwise, we print out the item.
  prefs: []
  type: TYPE_NORMAL
- en: DEF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The def keyword is used to define a function. For example, we can create a
    function to convert a number of years into the equivalent number of minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: DEL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The del keyword is used to delete something. For example, if you had a list
    of things you wanted for your birthday in your diary, but then changed your mind
    about one of them, you might cross it off the list and add something new:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/288fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Python, the original list would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You could remove the computer game by using del and the index of the item you
    want to delete. You could then add the new item with the append function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And then print the new list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Elif
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword elif is used as part of an if statement. See the description of
    the if keyword for an example.
  prefs: []
  type: TYPE_NORMAL
- en: Else
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword else is used as part of an if statement. See the description of
    the if keyword for an example.
  prefs: []
  type: TYPE_NORMAL
- en: Except
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The except keyword is used for catching problems in fairly complicated code.
  prefs: []
  type: TYPE_NORMAL
- en: Finally
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword finally is used to make sure that if an error occurs, certain code
    runs (usually to tidy up any mess that a piece of code has left behind). This
    keyword is for more advanced programming.
  prefs: []
  type: TYPE_NORMAL
- en: For
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The for keyword is used to create a loop of code that runs a certain number
    of times. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This for loop executes the block of code (the print statement) five times,
    resulting in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: From
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When importing a module, you can import just the part you need using the from
    keyword. For example, the turtle module introduced in [Chapter 4](ch04.xhtml#ch04)
    has a class called Turtle, which we use to create a Turtle object (which includes
    the canvas on which the turtle moves). Here’s how we import the entire turtle
    module and then use the Turtle class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also import the Turtle class on its own, and then use it directly
    (without referring to the turtle module at all):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You might do this so the next time you look at the top of that program, you
    can see all the functions and classes you’re using (which is particularly useful
    in larger programs that import a lot of modules). However, if you choose to do
    this, you won’t be able to use the parts of the module you haven’t imported. For
    example, the time module has functions called localtime and gmtime, but if you
    import only localtime and then try to use gmtime, you’ll get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The error message name ’gmtime’ is not defined means that Python doesn’t know
    anything about the function gmtime, which is because you haven’t imported it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a particular module has multiple functions that you want to use, and you
    don’t want to refer to them by using module names (for example, time.localtime,
    or time.gmtime), you can import everything in the module by using an asterisk
    (*), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This form imports everything from the time module, and you can now refer to
    the individual functions by name.
  prefs: []
  type: TYPE_NORMAL
- en: Global
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The idea of *scope* in programs is introduced in [Chapter 7](ch07.xhtml#ch07).
    Scope refers to the visibility of a variable. If a variable is defined outside
    a function, it can usually be seen (it’s visible) inside the function. On the
    other hand, if the variable is defined inside a function, usually it can’t be
    seen outside that function. The global keyword is one exception to this rule.
    A variable defined as global can be seen everywhere. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'What do you think happens when you call print(a) and then print(b) after running
    the function test? The first will work, but the second will display an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The variable a has been changed to have global scope inside the function, so
    it’s visible, even once the function has completed; but b is still visible only
    inside the function. (You must use the global keyword before setting the value
    of your variable.)
  prefs: []
  type: TYPE_NORMAL
- en: If
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The if keyword is used to make a decision about something. It can also be used
    with the keywords else and elif (else if). An if statement is a way of saying,
    “If something is true, then perform an action of some kind.” Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This if statement says that if a toy price is over $1,000, display a message
    that it is overpriced; otherwise, if the toy price is over $100, display a message
    that it’s expensive. If neither of those conditions is true, it should display
    the message, “I can afford that toy.”
  prefs: []
  type: TYPE_NORMAL
- en: Import
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The import keyword tells Python to load a module so it can be used. For example,
    the following code tells Python to use the sys module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The in keyword is used in expressions to see if an item is within a collection
    of items. For example, can the number 1 be found in a list (a collection) of numbers?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how to find out if the string ’pants’ is in a list of clothing items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Is
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The is keyword is a bit like the *equal to* operator (==), which is used to
    tell if two things are equal (for example, 10 == 10 is true, and 10 == 11 is false).
    However, there is a fundamental difference between is and ==. If you are comparing
    two objects (such as lists), == may return true, while is may not (even if you
    think the objects are the same). This is an advanced programming concept.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The lambda keyword is used to create anonymous, or inline, functions. This keyword
    is used in more advanced programs.
  prefs: []
  type: TYPE_NORMAL
- en: Nonlocal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The nonlocal keyword is used to include a variable in the scope of a function
    when it’s declared outside the function. This keyword is used in more advanced
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: Not
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If something is true, the not keyword makes it false. For example, if we create
    a variable a and set it to the value True, and then print the value of this variable
    using not, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And similarly for a False value, we get True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This doesn’t seem very useful until you start using the keyword in if statements.
    For example, to find out whether an item is not in a list, we could write something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Or
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The or keyword joins two conditions in a statement (such as an if statement)
    to say that at least one of the conditions should be true. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In this case, if the value of the variable dino is Tyrannosaurus or Allosaurus,
    the program prints Carnivores. If it is Ankylosaurus or Apatosaurus, the program
    prints Herbivores.
  prefs: []
  type: TYPE_NORMAL
- en: Pass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes when you’re developing a program, you want to write only small pieces
    of it to try things out. The problem with doing this is that you can’t have an
    if statement without the block of code that should be run if the condition in
    the if statement is true. You also cannot have a for loop without the block of
    code that should be run in the loop. For example, the following code works just
    fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'But if you don’t fill in the block of code (the body) for the if statement,
    you’ll get an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is the error message Python displays when you should have a block of code
    after a statement of some kind (it won’t even let you type this kind of code if
    you’re using IDLE). In cases like these, you can use the pass keyword to write
    a statement but not provide the block of code that goes with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you want to create a for loop with an if statement inside
    it. Perhaps you haven’t decided what to put in the if statement yet—maybe you’ll
    use the print function, or put in a break, or something else. For now, you can
    use pass, and the code will still work (even if it doesn’t do exactly what you
    want yet). Here’s our if statement again, this time using the pass keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows another use of the pass keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Python still checks whether the x variable contains the value 4 every time
    it executes the block of code in the loop, but it will do nothing as a consequence,
    so it will print every number in the range 0 to 7\. Later, you could add the code
    in the block for the if statement, replacing the pass keyword with something else,
    such as break:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The pass keyword is most commonly used when you’re creating a function but don’t
    want to write the code for it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Raise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The raise keyword can be used to cause an error to happen. That might sound
    like a strange thing to do, but in advanced programming, it can actually be quite
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: Return
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The return keyword is used to return a value from a function. For example,
    you might create a function to calculate the number of seconds you’ve been alive
    up till your last birthday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'When you call this function, the returned value can be assigned to another
    variable or it can be printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Try
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The try keyword begins a block of code that ends with the except and finally
    keywords. Together, these try/except/finally blocks of code are used to handle
    errors in a program, such as making sure that the program displays a useful message
    to the user rather than an unfriendly Python error. They’re very useful in advanced
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: While
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The while keyword is a bit like for, except that a for loop counts through
    a range (of numbers), but a while loop keeps on running while an expression is
    true. Be careful with while loops—if the expression is always true, the loop will
    never end (this is called an *infinite loop*). Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, it will loop forever, or at least until you close the
    Python Shell or press CTRL-C to interrupt it. However, the following code will
    print “hello” nine times (each time adding 1 to the variable x, until x is no
    longer less than 10):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: With
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The with keyword is used with a special kind of object to create a block of
    code, in a similar way to the try and finally keywords, and then manages resources
    for that object. This keyword is used in advanced programs.
  prefs: []
  type: TYPE_NORMAL
- en: Yield
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The yield keyword is a little bit like return, except that it is used with a
    specific class of object called a *generator*. Generators create values on request,
    so in that respect, the range function behaves like a generator.
  prefs: []
  type: TYPE_NORMAL
