["```py\n   --snip--\n       objects[21][0] = frames[airlock_door_frame]\n       objects[21][1] = shadow_frames[airlock_door_frame]\n\n   ###############\n   ##    AIR    ##\n   ###############\n\n   def draw_energy_air():\n       box = Rect((20, 765), (350, 20))\n➊     screen.draw.filled_rect(box, BLACK) # Clear air bar.\n➋     screen.draw.text(\"AIR\", (20, 766), color=BLUE)\n➌     screen.draw.text(\"ENERGY\", (180, 766), color=YELLOW)\n\n➍     if air > 0:\n➎         box = Rect((50, 765), (air, 20))\n➏         screen.draw.filled_rect(box, BLUE) # Draw new air bar.\n\n➐     if energy > 0:\n           box = Rect((250, 765), (energy, 20))\n           screen.draw.filled_rect(box, YELLOW) # Draw new energy bar.\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n       if energy > 0:\n           box = Rect((250, 765), (energy, 20))\n           screen.draw.filled_rect(box, YELLOW) # Draw new energy bar.\n\n➊ def end_the_game(reason):\n       global game_over\n➋     show_text(reason, 1)\n➌     game_over = True\n       sounds.say_mission_fail.play()\n       sounds.gameover.play()\n➍     screen.draw.text(\"GAME OVER\", (120, 400), color = \"white\",\n                        fontsize = 128, shadow = (1, 1), scolor = \"black\")\n\n➎ def air_countdown():\n       global air, game_over\n       if game_over:\n           return # Don't sap air when they're already dead.\n➏     air -= 1\n➐     if air == 20:\n           sounds.say_air_low.play()\n       if air == 10:\n           sounds.say_act_now.play()\n➑     draw_energy_air()\n➒     if air < 1:\n           end_the_game(\"You're out of air!\")\n\n➓ def alarm():\n       show_text(\"Air is running out, \" + PLAYER_NAME\n                 + \"! Get to safety, then radio for help!\", 1)\n       sounds.alarm.play(3)\n       sounds.say_breach.play()\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n--snip--\n###############\n##   START   ##\n###############\n\nclock.schedule_interval(game_loop, 0.03)\ngenerate_map()\nclock.schedule_interval(adjust_wall_transparency, 0.05)\nclock.schedule_unique(display_inventory, 1)\nclock.schedule_unique(draw_energy_air, 0.5)\nclock.schedule_unique(alarm, 10)\n# A higher number below gives a longer time limit.\nclock.schedule_interval(air_countdown, 5)\n```", "```py\n   --snip--\n       sounds.alarm.play(3)\n       sounds.say_breach.play()    \n\n   ###############\n   ##  HAZARDS  ##\n   ###############\n\n   hazard_data = {\n       # room number: [[y, x, direction, bounce addition to direction]]\n➊     28: [[1, 8, 2, 1], [7, 3, 4, 1]], 32: [[1, 5, 1, 1]],\n       34: [[5, 1, 1, 1], [5, 5, 1, 2]], 35: [[4, 4, 1, 2], [2, 5, 2, 2]],\n       36: [[2, 1, 2, 2]], 38: [[1, 4, 3, 2], [5, 8, 1, 2]],\n       40: [[3, 1, 3, 1], [6, 5, 2, 2], [7, 5, 4, 2]],\n       41: [[4, 5, 2, 2], [6, 3, 4, 2], [8, 1, 2, 2]],\n       42: [[2, 1, 2, 2], [4, 3, 2, 2], [6, 5, 2, 2]],\n       46: [[2, 1, 2, 2]],\n       48: [[1, 8, 3, 2], [8, 8, 1, 2], [3, 9, 3, 2]]\n       }\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n       46: [[2, 1, 2, 2]],\n       48: [[1, 8, 3, 2], [8, 8, 1, 2], [3, 9, 3, 2]]\n       }\n\n➊ def deplete_energy(penalty):\n       global energy, game_over\n       if game_over:\n           return # Don't sap energy when they're already dead.\n➋     energy = energy - penalty\n       draw_energy_air()\n       if energy < 1:\n           end_the_game(\"You're out of energy!\")\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n       if energy < 1:\n           end_the_game(\"You're out of energy!\")\n\n   def hazard_start():\n       global current_room_hazards_list, hazard_map\n➊     if current_room in hazard_data.keys():\n➋         current_room_hazards_list = hazard_data[current_room]\n➌         for hazard in current_room_hazards_list:\n               hazard_y = hazard[0]\n               hazard_x = hazard[1]\n➍             hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)\n➎         clock.schedule_interval(hazard_move, 0.15)\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n--snip--\n###############\n## GAME LOOP ##\n###############\n\ndef start_room():\n    global airlock_door_frame\n    show_text(\"You are here: \" + room_name, 0)\n    if current_room == 26: # Room with self-shutting airlock door\n        airlock_door_frame = 0\n        clock.schedule_interval(door_in_room_26, 0.05)\n    hazard_start()\n--snip--\n```", "```py\n--snip--\n    if player_y == -1: # through door at TOP\n        clock.unschedule(hazard_move)\n        current_room -= MAP_WIDTH\n        generate_map()\n        player_y = room_height - 1 # enter at bottom\n        player_x = int(room_width / 2) # enter at door\n        player_frame = 0\n        start_room()\n        return\n--snip--\n```", "```py\n--snip--\n                for tile_number in range(1, image_width_in_tiles):\n                    room_map[prop_y][prop_x + tile_number] = 255    \n\n    hazard_map = [] # empty list\n    for y in range(room_height):\n        hazard_map.append( [0] * room_width )\n\n###############\n## GAME LOOP ##\n###############\n--snip--\n```", "```py\n   --snip--\n               hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)\n           clock.schedule_interval(hazard_move, 0.15)\n\n   def hazard_move():\n       global current_room_hazards_list, hazard_data, hazard_map\n       global old_player_x, old_player_y\n\n       if game_over:\n           return\n       for hazard in current_room_hazards_list:\n           hazard_y = hazard[0]\n           hazard_x = hazard[1]\n           hazard_direction = hazard[2]\n\n➊         old_hazard_x = hazard_x\n           old_hazard_y = hazard_y\n           hazard_map[old_hazard_y][old_hazard_x] = 0\n\n➋         if hazard_direction == 1: # up\n               hazard_y -= 1\n           if hazard_direction == 2: # right\n               hazard_x += 1\n           if hazard_direction == 3: # down\n               hazard_y += 1\n           if hazard_direction == 4: # left\n               hazard_x -= 1\n\n           hazard_should_bounce = False\n\n➌         if (hazard_y == player_y and hazard_x == player_x) or \\\n              (hazard_y == from_player_y and hazard_x == from_player_x\n               and player_frame > 0):\n               sounds.ouch.play()\n               deplete_energy(10)\n               hazard_should_bounce = True\n\n➍         # Stop hazard going out of the doors\n           if hazard_x == room_width:\n               hazard_should_bounce = True\n               hazard_x = room_width - 1\n           if hazard_x == -1:\n               hazard_should_bounce = True\n               hazard_x = 0\n           if hazard_y == room_height:\n               hazard_should_bounce = True\n               hazard_y = room_height - 1\n           if hazard_y == -1:\n               hazard_should_bounce = True\n               hazard_y = 0\n\n➎         # Stop when hazard hits scenery or another hazard.\n           if room_map[hazard_y][hazard_x] not in items_player_may_stand_on \\\n                  or hazard_map[hazard_y][hazard_x] != 0:\n               hazard_should_bounce = True\n\n➏         if hazard_should_bounce:\n               hazard_y = old_hazard_y # Move back to last valid position.\n               hazard_x = old_hazard_x\n➐             hazard_direction += hazard[3]\n➑             if hazard_direction > 4:\n                   hazard_direction -= 4\n               if hazard_direction < 1:\n                   hazard_direction += 4\n➒             hazard[2] = hazard_direction\n➓         hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)\n           hazard[0] = hazard_y\n           hazard[1] = hazard_x\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n--snip--\n                        # Use shadow across width of object.\n                        for z in range(0, shadow_width):\n                            draw_shadow(shadow_image, y, x+z)\n                    else:\n                        draw_shadow(shadow_image, y, x)\n\n            hazard_here = hazard_map[y][x]\n            if hazard_here != 0: # If there's a hazard at this position\n                draw_image(objects[hazard_here][0], y, x)\n\n        if (player_y == y):\n                draw_player()\n--snip--\n```", "```py\n--snip--\n  # If the player is standing somewhere they shouldn't, move them back.\n    if room_map[player_y][player_x] not in items_player_may_stand_on \\\n               or hazard_map[player_y][player_x] != 0:\n        player_x = old_player_x\n        player_y = old_player_y\n        player_frame = 0\n--snip--\n```", "```py\n--snip--\n  # If the player is standing somewhere they shouldn't, move them back.\n    if room_map[player_y][player_x] not in items_player_may_stand_on \\\n               or hazard_map[player_y][player_x] != 0:\n        player_x = old_player_x\n        player_y = old_player_y\n        player_frame = 0\n\n    if room_map[player_y][player_x] == 48: # toxic floor\n        deplete_energy(1)\n\n    if player_direction == \"right\" and player_frame > 0:\n        player_offset_x = -1 + (0.25 * player_frame)\n--snip--\n```", "```py\n--snip--\n#### Teleporter for testing\n#### Remove this section for the real game\n##    if keyboard.x:\n##        current_room = int(input(\"Enter room number:\"))\n##        player_x = 2\n##        player_y = 2\n##        generate_map()\n##        start_room()\n##        sounds.teleport.play()\n#### Teleport section ends\n--snip--\n```", "```py\nin_my_pockets = [55]\n```", "```py\n--snip--\nclock.schedule_unique(alarm, 10)\nclock.schedule_interval(air_countdown, 11) # A higher number gives a longer\ntime limit.\nsounds.mission.play() # Intro music\n```"]