- en: '[Introduction](nsp-venkitachalam503045-0008.xhtml#rintro)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[引言](nsp-venkitachalam503045-0008.xhtml#rintro)'
- en: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
- en: Welcome to the second edition of *Python Playground*! Within these pages, you’ll
    find 15 exciting projects designed to encourage you to explore the world of programming
    with Python. The projects cover a wide range of topics, such as drawing Spirograph-like
    patterns, 3D rendering, projecting laser patterns in sync with music, and speech
    recognition using machine learning. In addition to being fun in and of themselves,
    these projects offer a lot of room for expansion and are designed to be jumping-off
    points for you to explore your own ideas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到《*Python Playground*》的第二版！在这本书中，你将找到15个令人兴奋的项目，旨在鼓励你用Python探索编程的世界。这些项目涵盖了广泛的主题，如绘制类似Spirograph的图案、3D渲染、根据音乐同步投影激光图案，以及使用机器学习进行语音识别。除了本身非常有趣，这些项目还提供了大量的扩展空间，旨在成为你探索自己想法的跳板。
- en: '[Who Is This Book For?](nsp-venkitachalam503045-0008.xhtml#rahintro01)'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[这本书适合谁？](nsp-venkitachalam503045-0008.xhtml#rahintro01)'
- en: '*Python Playground* was written for anyone curious about how to use programming
    to understand and explore ideas. The projects in this book assume that you know
    basic Python syntax and basic programming concepts and that you’re familiar with
    high school mathematics. I’ve done my best to explain in detail the math you need
    for all projects.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 《*Python Playground*》是为任何对如何通过编程理解和探索创意感到好奇的人写的。本书中的项目假设你已经掌握了基本的Python语法和编程概念，并且对高中数学有所了解。我已经尽力详细解释了所有项目所需的数学知识。
- en: This book isn’t intended to be your first book on Python. I won’t walk you through
    the basics. I will, however, show you how to use Python to solve a variety of
    real-world problems in a series of nontrivial projects. As you work through the
    projects, you’ll explore the nuances of the Python programming language and learn
    how to work with some popular Python libraries. But perhaps even more important,
    you’ll learn how to break down a problem into parts, develop an algorithm to solve
    that problem, and then implement a solution from the ground up using Python.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书并不打算成为你学习Python的第一本书。我不会带你走过基础知识的学习。然而，我会向你展示如何使用Python解决一系列实际的非平凡项目。在完成这些项目的过程中，你将深入探索Python编程语言的细微差别，并学习如何使用一些流行的Python库。但或许更重要的是，你将学会如何将问题分解成多个部分，开发出解决问题的算法，然后从头到尾使用Python实现解决方案。
- en: It can be difficult to solve real-world problems because they are often open-ended
    and require expertise in various domains. But Python offers the tools to facilitate
    problem-solving. Overcoming difficulties and finding solutions to real problems
    are the most important parts of your journey on the way to becoming an expert
    programmer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 解决现实世界的问题可能是困难的，因为这些问题通常是开放式的，并且需要多领域的专业知识。但Python提供了工具来促进问题解决。克服困难并找到现实问题的解决方案是你成为专家程序员之路上最重要的部分。
- en: '[What’s in This Book?](nsp-venkitachalam503045-0008.xhtml#rahintro02)'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[这本书的内容是什么？](nsp-venkitachalam503045-0008.xhtml#rahintro02)'
- en: Let’s take a quick tour through the chapters in this book. [Part I](nsp-venkitachalam503045-0011.xhtml#pt01)
    features a few projects to get you started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下这本书中的章节。[第一部分](nsp-venkitachalam503045-0011.xhtml#pt01)包含了一些入门项目，帮助你开始。
- en: '[Chapter 1](nsp-venkitachalam503045-0012.xhtml#ch01): The Koch Snowflake Uses
    recursive functions and `turtle` graphics to draw an interesting fractal shape'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](nsp-venkitachalam503045-0012.xhtml#ch01): 科赫雪花 利用递归函数和`turtle`图形绘制有趣的分形图形'
- en: '[Chapter 2](nsp-venkitachalam503045-0013.xhtml#ch02): Spirographs Harnesses
    parametric equations and `turtle` graphics to draw curves like the ones generated
    with the toy Spirograph'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](nsp-venkitachalam503045-0013.xhtml#ch02): Spirographs 使用参数方程和`turtle`图形绘制类似玩具Spirograph生成的曲线'
- en: '[Part II](nsp-venkitachalam503045-0014.xhtml#pt02) features projects that use
    mathematical models to create computer simulations of real-world phenomena.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](nsp-venkitachalam503045-0014.xhtml#pt02)包含了利用数学模型创建计算机模拟现实世界现象的项目。'
- en: '[Chapter 3](nsp-venkitachalam503045-0015.xhtml#ch03): Conway’s Game of Life
    Implements a famous cellular automaton using `numpy` and `matploblib`, producing
    an evolving, lifelike system based on a few simple rules'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](nsp-venkitachalam503045-0015.xhtml#ch03): 康威的生命游戏 使用`numpy`和`matploblib`实现著名的元胞自动机，基于简单的规则生成一个不断演变的生命系统'
- en: '[Chapter 4](nsp-venkitachalam503045-0016.xhtml#ch04): Musical Overtones with
    Karplus-Strong Realistically simulates the sound of a plucked string instrument
    and plays back the sounds with `pyaudio`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四章](nsp-venkitachalam503045-0016.xhtml#ch04)：卡普鲁斯-斯特朗的音乐泛音真实地模拟了弹拨弦乐器的声音，并通过`pyaudio`回放这些声音'
- en: '[Chapter 5](nsp-venkitachalam503045-0017.xhtml#ch05): Flocking Boids Uses `numpy`
    and `matplotlib` to implement the Boids algorithm and simulate the flocking behavior
    of birds'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第五章](nsp-venkitachalam503045-0017.xhtml#ch05)：鸟群聚集使用`numpy`和`matplotlib`实现了Boids算法，模拟了鸟群的集结行为'
- en: The projects in [Part III](nsp-venkitachalam503045-0018.xhtml#pt03) will introduce
    you to reading and manipulating 2D images with Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三部分](nsp-venkitachalam503045-0018.xhtml#pt03)的项目将介绍如何使用Python读取和操作2D图像'
- en: '[Chapter 6](nsp-venkitachalam503045-0019.xhtml#ch06): ASCII Art Introduces
    `Pillow`, a fork of the Python Imaging Library (PIL), by converting images into
    text-based ASCII art'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第六章](nsp-venkitachalam503045-0019.xhtml#ch06)：ASCII艺术通过将图像转换为基于文本的ASCII艺术，介绍了`Pillow`（Python图像库PIL的一个分支）'
- en: '[Chapter 7](nsp-venkitachalam503045-0020.xhtml#ch07): Photomosaics Stitches
    together a grid of smaller images to create a recognizable larger image'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第七章](nsp-venkitachalam503045-0020.xhtml#ch07)：照片马赛克通过拼接较小的图像网格，创建出一个可识别的大图像'
- en: '[Chapter 8](nsp-venkitachalam503045-0021.xhtml#ch08): Autostereograms Uses
    depth maps and pixel manipulation to embed the illusion of a 3D image in a 2D
    image'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第八章](nsp-venkitachalam503045-0021.xhtml#ch08)：自动立体图使用深度图和像素操作，将3D图像的错觉嵌入到2D图像中'
- en: In [Part IV](nsp-venkitachalam503045-0022.xhtml#pt04), you’ll learn to use shaders
    and the OpenGL library to quickly and efficiently render 3D graphics by working
    directly with your graphics processing unit (GPU).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第四部分](nsp-venkitachalam503045-0022.xhtml#pt04)，你将学习如何使用着色器和OpenGL库，通过直接与图形处理单元（GPU）合作，快速高效地渲染3D图形
- en: '[Chapter 9](nsp-venkitachalam503045-0023.xhtml#ch09): Understanding OpenGL
    Introduces the basics of using OpenGL to create simple 3D graphics'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第九章](nsp-venkitachalam503045-0023.xhtml#ch09)：理解OpenGL介绍了使用OpenGL创建简单3D图形的基础知识'
- en: '[Chapter 10](nsp-venkitachalam503045-0024.xhtml#ch10): Conway’s Game of Life
    on a Torus Revisits the simulation from [Chapter 3](nsp-venkitachalam503045-0015.xhtml#ch03)
    and brings it to life on the surface of a 3D torus'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十章](nsp-venkitachalam503045-0024.xhtml#ch10)：环面上的康威生命游戏重新审视了[第三章](nsp-venkitachalam503045-0015.xhtml#ch03)的模拟，并将其呈现在3D环面表面上'
- en: '[Chapter 11](nsp-venkitachalam503045-0025.xhtml#ch11): Volume Rendering Implements
    a volume ray casting algorithm to render volumetric data, a technique commonly
    used for medical imaging such as MRI and CT scans'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十一章](nsp-venkitachalam503045-0025.xhtml#ch11)：体积渲染实现了一个体积光线投射算法来渲染体积数据，这是一种常用于医学成像（如MRI和CT扫描）的技术'
- en: Finally, in [Part V](nsp-venkitachalam503045-0026.xhtml#pt05), you’ll work with
    a Raspberry Pi and other electronic components to deploy Python on embedded systems.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在[第五部分](nsp-venkitachalam503045-0026.xhtml#pt05)，你将与Raspberry Pi及其他电子组件一起工作，将Python部署到嵌入式系统上
- en: '[Chapter 12](nsp-venkitachalam503045-0027.xhtml#ch12): Karplus-Strong on a
    Raspberry Pi Pico Creates a playable electronic instrument by implementing the
    Karplus-Strong algorithm from [Chapter 4](nsp-venkitachalam503045-0016.xhtml#ch04)
    on a tiny Raspberry Pi Pico microcontroller using MicroPython'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十二章](nsp-venkitachalam503045-0027.xhtml#ch12)：在Raspberry Pi Pico上的卡普鲁斯-斯特朗通过在一个微小的Raspberry
    Pi Pico微控制器上使用MicroPython实现[第四章](nsp-venkitachalam503045-0016.xhtml#ch04)的卡普鲁斯-斯特朗算法，创造一个可演奏的电子乐器'
- en: '[Chapter 13](nsp-venkitachalam503045-0028.xhtml#ch13): Laser Audio Display
    with a Raspberry Pi Harnesses Python on a Raspberry Pi to control two rotating
    mirrors and a laser, producing a laser light show that responds to sound'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十三章](nsp-venkitachalam503045-0028.xhtml#ch13)：使用Raspberry Pi的激光音频显示通过在Raspberry
    Pi上利用Python控制两个旋转镜子和激光器，产生一个响应声音的激光灯光秀'
- en: '[Chapter 14](nsp-venkitachalam503045-0029.xhtml#ch14): IoT Garden Uses Bluetooth
    Low Energy to connect a Raspberry Pi with Adafruit hardware running CircuitPython,
    creating an IoT system to monitor temperature and humidity levels in your garden'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十四章](nsp-venkitachalam503045-0029.xhtml#ch14)：物联网花园使用低功耗蓝牙将Raspberry Pi与运行CircuitPython的Adafruit硬件连接，创建一个物联网系统，用于监测花园中的温度和湿度'
- en: '[Chapter 15](nsp-venkitachalam503045-0030.xhtml#ch15): Audio ML on Pi Introduces
    the exciting world of machine learning with TensorFlow by implementing a speech
    recognition system on your Raspberry Pi'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[第十五章](nsp-venkitachalam503045-0030.xhtml#ch15)：Pi上的音频机器学习通过在Raspberry Pi上实现一个语音识别系统，介绍了使用TensorFlow进行机器学习的激动人心的世界'
- en: Each chapter ends with an “Experiments!” section featuring suggestions for how
    you can expand the project or further explore the topic at hand.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章的结尾都会有一个“实验！”部分，提供如何扩展项目或进一步探索该主题的建议。
- en: '[What’s New to the Second Edition?](nsp-venkitachalam503045-0008.xhtml#rahintro03)'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第二版新增内容](nsp-venkitachalam503045-0008.xhtml#rahintro03)'
- en: This second edition features five new projects, including the Koch snowflake
    project in [Chapter 1](nsp-venkitachalam503045-0012.xhtml#ch01) and the 3D version
    of Conway’s Game of Life in [Chapter 10](nsp-venkitachalam503045-0024.xhtml#ch10).
    The most significant updates are in the hardware section, which has been streamlined
    to focus exclusively on Raspberry Pi–based systems, rather than a mix of Raspberry
    Pi and Arduino. As such, every project in [Part V](nsp-venkitachalam503045-0026.xhtml#pt05)
    either is new ([Chapter 12](nsp-venkitachalam503045-0027.xhtml#ch12), [Chapter
    14](nsp-venkitachalam503045-0029.xhtml#ch14), [Chapter 15](nsp-venkitachalam503045-0030.xhtml#ch15))
    or has been thoroughly redesigned ([Chapter 13](nsp-venkitachalam503045-0028.xhtml#ch13)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二版新增了五个项目，包括[Koch雪花项目](nsp-venkitachalam503045-0012.xhtml#ch01)和[第10章](nsp-venkitachalam503045-0024.xhtml#ch10)中的康威生命游戏3D版。最重要的更新在硬件部分，已精简为专注于基于Raspberry
    Pi的系统，而不再是Raspberry Pi与Arduino的混合。因此，[第V部分](nsp-venkitachalam503045-0026.xhtml#pt05)中的每个项目要么是新项目（[第12章](nsp-venkitachalam503045-0027.xhtml#ch12)，[第14章](nsp-venkitachalam503045-0029.xhtml#ch14)，[第15章](nsp-venkitachalam503045-0030.xhtml#ch15)），要么是经过彻底重新设计的（[第13章](nsp-venkitachalam503045-0028.xhtml#ch13)）。
- en: Relying just on Raspberry Pi simplifies the setup process for the hardware projects,
    and it keeps the book’s focus on Python programming. There’s no longer a need
    to switch between Python and code written in the Arduino programming language
    (a version of C++). With the updated [Part V](nsp-venkitachalam503045-0026.xhtml#pt05),
    you’ll also get a taste for programming with MicroPython and CircuitPython, two
    flavors of Python optimized for running on resource-constrained embedded systems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仅依赖Raspberry Pi简化了硬件项目的设置过程，同时保持了书籍对Python编程的专注。无需再在Python和Arduino编程语言（C++的一个版本）之间切换。随着更新后的[第V部分](nsp-venkitachalam503045-0026.xhtml#pt05)，你还将体验使用MicroPython和CircuitPython进行编程，这两种Python版本针对资源受限的嵌入式系统进行了优化。
- en: 'Other significant updates to the second edition include:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第二版的其他重要更新包括：
- en: • Using `pyaudio` rather than `pygame` to play WAV files in [Chapter 4](nsp-venkitachalam503045-0016.xhtml#ch04)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在[第4章](nsp-venkitachalam503045-0016.xhtml#ch04)中，使用`pyaudio`而不是`pygame`来播放WAV文件。
- en: • Comparing the performance of a linear search algorithm and a k-d tree data
    structure when finding the best image matches for the photomosaic in [Chapter
    7](nsp-venkitachalam503045-0020.xhtml#ch07)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在[第7章](nsp-venkitachalam503045-0020.xhtml#ch07)中，比较了线性搜索算法与k-d树数据结构在寻找最佳图像匹配时的性能，应用于照片拼贴。
- en: • Guidance on how to create your own depth maps for generating autostereograms
    in [Chapter 8](nsp-venkitachalam503045-0021.xhtml#ch08)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在[第8章](nsp-venkitachalam503045-0021.xhtml#ch08)中，指导你如何创建自己的深度图以生成自立体图。
- en: • Streamlined installation instructions in [Appendix A](nsp-venkitachalam503045-0031.xhtml#appa)
    using the standard Anaconda Distribution of Python
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在[附录A](nsp-venkitachalam503045-0031.xhtml#appa)中，精简了使用标准Anaconda Python分发版的安装说明。
- en: Beyond these specific updates, the entire text has been reviewed, corrected,
    and clarified, and the code has been updated as needed to reflect changes to Python
    since the first edition was released.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些具体的更新外，整个文本已被审阅、纠正和澄清，代码也根据需要进行了更新，以反映自第一版发布以来Python的变化。
- en: '[Why Python?](nsp-venkitachalam503045-0008.xhtml#rahintro04)'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[为什么选择Python？](nsp-venkitachalam503045-0008.xhtml#rahintro04)'
- en: Python is an ideal language for exploring programming. As a multiparadigm language,
    it provides you with a lot of flexibility in how you structure your programs.
    You can use Python as a *scripting* language to simply execute code, as a *procedural*
    language to organize your program into a collection of functions that call one
    another, or as an *object-oriented* language that uses classes, inheritance, and
    modules to build up a hierarchy. This flexibility allows you to choose the programming
    style most suited to a particular project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Python是探索编程的理想语言。作为一种多范式语言，它为你提供了很多灵活性，可以根据需要构建程序。你可以将Python用作*脚本*语言来执行代码，作为*过程式*语言将程序组织成相互调用的函数集合，或作为*面向对象*语言使用类、继承和模块来构建层次结构。这种灵活性使你能够选择最适合特定项目的编程风格。
- en: When you develop using a more traditional language like C or C++, you have to
    compile and link your code before you can run it. With Python, you can run it
    directly after editing. (Under the hood, Python compiles your code into an intermediate
    bytecode that is then run by the Python interpreter, but these processes are transparent
    to you, the user.) In practice, the process of modifying and running your code
    over and over is much less cumbersome with Python.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用像C或C++这样的传统语言进行开发时，你必须在运行代码之前先编译并链接它。而使用Python，你可以在编辑后直接运行它。（从内部来看，Python将你的代码编译成中间字节码，然后由Python解释器运行，但这些过程对你，用户来说是透明的。）实际上，使用Python修改并一遍又一遍地运行代码，过程要轻松得多。
- en: Python has a very small set of simple and powerful data structures. If you already
    understand strings, lists, tuples, dictionaries, list comprehensions, and basic
    control structures such as `for` and `while` loops, you’re off to a great start.
    Python’s succinct and expressive syntax makes it easy to do complex operations
    with just a few lines of code. And once you’re familiar with Python’s built-in
    and third-party modules, you’ll have an arsenal of tools to tackle real problems
    like the ones covered in this book. There are standard ways to call C/C++ code
    from Python and vice versa, and because you can find libraries to do almost anything
    in Python, it’s easy to combine Python with other language modules in bigger projects.
    This is why Python is considered a great *glue* language—it makes it easy to combine
    diverse software components. The 3D graphics projects in [Part IV](nsp-venkitachalam503045-0022.xhtml#pt04)
    demonstrate how Python can work side by side with the C-like OpenGL Shading Language,
    and in [Chapter 14](nsp-venkitachalam503045-0029.xhtml#ch14) you’ll even mix in
    a little bit of HTML, CSS, and JavaScript to create a web interface for your IoT
    garden monitor. Real software projects often use a mix of software technologies,
    and Python fits very well into such layered architectures.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一组非常小且简单但功能强大的数据结构。如果你已经理解了字符串、列表、元组、字典、列表推导式以及基本的控制结构如`for`和`while`循环，那么你已经迈出了一个良好的开端。Python简洁且富有表现力的语法，使得用几行代码就能执行复杂的操作。而且，一旦你熟悉了Python的内置模块和第三方模块，你将拥有一个工具库来解决现实中的问题，就像本书中涵盖的那些问题一样。Python有标准的方法调用C/C++代码，反之亦然，并且因为你可以找到几乎做任何事情的Python库，所以在更大的项目中将Python与其他语言模块结合使用是很容易的。这就是为什么Python被认为是一种出色的*粘合*语言——它使得结合不同的软件组件变得简单。[第IV部分](nsp-venkitachalam503045-0022.xhtml#pt04)中的3D图形项目展示了Python如何与类似C的OpenGL着色语言并肩工作，在[第14章](nsp-venkitachalam503045-0029.xhtml#ch14)中，你甚至会混合使用一些HTML、CSS和JavaScript，为你的物联网花园监控器创建一个Web界面。实际的软件项目通常会使用混合的软件技术，Python非常适合这种分层架构。
- en: 'Python also provides a handy tool in the form of the Python interpreter. It
    lets you easily check code syntax, do quick computations, and even test code under
    development. When I write Python code, I keep three windows open: a text editor,
    a shell, and a Python interpreter. As I develop code in the editor, I import my
    functions or classes into the interpreter and test them as I go.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Python还提供了一个方便的工具——Python解释器。它让你轻松检查代码语法，进行快速计算，甚至测试正在开发中的代码。当我编写Python代码时，我会同时打开三个窗口：一个文本编辑器，一个Shell，和一个Python解释器。在编辑器中开发代码时，我将我的函数或类导入到解释器中，并在开发过程中进行测试。
- en: 'I also use the interpreter to get a feel for new modules before I incorporate
    them into my code. For example, while developing code for the IoT garden project
    in [Chapter 14](nsp-venkitachalam503045-0029.xhtml#ch14), I wanted to test the
    `sqlite3` database module. I brought up the Python interpreter and tried the following
    to make sure I understood how to create and add entries to a database:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我还使用解释器在将新模块集成到代码中之前，先对其进行测试。例如，在开发[第14章](nsp-venkitachalam503045-0029.xhtml#ch14)的物联网花园项目代码时，我想测试`sqlite3`数据库模块。我启动了Python解释器，并尝试了以下操作，以确保我理解如何创建和向数据库添加条目：
- en: '>>> `import sqlite3`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `import sqlite3`'
- en: '>>> `con = sqlite3.connect(''test.db'')`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `con = sqlite3.connect(''test.db'')`'
- en: '>>> `cur = con.cursor()`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `cur = con.cursor()`'
- en: '>>> `cur.execute("CREATE TABLE sensor_data (TS datetime, ID text, VAL numeric)")`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `cur.execute("CREATE TABLE sensor_data (TS datetime, ID text, VAL numeric)")`'
- en: '>>> `for i in range(10):`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `for i in range(10):`'
- en: '...   `cur.execute("INSERT into sensor_data VALUES (datetime(''now''),''ABC'', ?)",
    (i, ))`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '...   `cur.execute("INSERT into sensor_data VALUES (datetime(''now''),''ABC'',  ?)",
    (i, ))`'
- en: '>>> `con.commit()`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `con.commit()`'
- en: '>>> `con.close()`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `con.close()`'
- en: '>>> `exit()`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `exit()`'
- en: 'Then, to make sure it worked, I did the following to retrieve some of the data
    I added:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了确保它有效，我做了以下操作来检索一些我添加的数据：
- en: '>>> `con = sqlite3.connect(''test.db'')`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `con = sqlite3.connect(''test.db'')`'
- en: '>>> `cur = con.cursor()`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `cur = con.cursor()`'
- en: '>>> `cur.execute("SELECT * FROM sensor_data WHERE VAL > 5")`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `cur.execute("SELECT * FROM sensor_data WHERE VAL > 5")`'
- en: '>>> `print(cur.fetchall())`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> `print(cur.fetchall())`'
- en: '[(''2021-10-16 13:01:22'', ''ABC'', 6), (''2021-10-16 13:01:22'', ''ABC'',
    7),'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[(''2021-10-16 13:01:22'', ''ABC'', 6), (''2021-10-16 13:01:22'', ''ABC'',
    7),'
- en: ('2021-10-16 13:01:22', 'ABC', 8), ('2021-10-16 13:01:22', 'ABC', 9)]
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ('2021-10-16 13:01:22', 'ABC', 8), ('2021-10-16 13:01:22', 'ABC', 9)]
- en: This example demonstrates the practical use of the Python interpreter as a powerful
    tool for development. You don’t need to write a complete program to do quick experiments;
    just open up the interpreter and get going. This is just one of the many reasons
    why I love Python and why I think you will too.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何使用 Python 解释器作为强大的开发工具。你不需要编写完整的程序来进行快速实验，只需打开解释器并开始操作。这只是我喜欢 Python
    的众多原因之一，也是我认为你也会喜欢它的原因。
- en: '[The Code in This Book](nsp-venkitachalam503045-0008.xhtml#rahintro05)'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[本书中的代码](nsp-venkitachalam503045-0008.xhtml#rahintro05)'
- en: I’ve done my best throughout this book to walk you through the code for each
    project in detail, piece by piece. You can either enter the code yourself or download
    the complete source code (using the Download Zip option) for all programs in the
    book at [https://github.com/mkvenkit/pp2e](https://github.com/mkvenkit/pp2e).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中尽力详细逐步地为你讲解每个项目的代码。你可以自己输入代码，也可以通过[https://github.com/mkvenkit/pp2e](https://github.com/mkvenkit/pp2e)下载书中所有程序的完整源代码（使用下载
    Zip 选项）。
- en: You’ll find several exciting projects in the following pages. I hope you have
    as much fun playing with them as I had creating them. Don’t forget to explore
    further with the experiments presented at the end of each project. I wish you
    many happy hours of programming with *Python Playground*!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在接下来的页面中找到几个令人兴奋的项目。我希望你能像我在创建它们时一样享受这些项目的乐趣。别忘了在每个项目的结尾探索更多的实验。我祝你在使用*Python
    Playground*时度过许多愉快的编程时光！
