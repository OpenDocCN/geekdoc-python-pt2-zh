- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: WRITING IN INVISIBLE INK**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用**隐形墨水写字**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'In the fall of 2012, the crime drama *Elementary* debuted on the CBS television
    network. A reimagining of the Sherlock Holmes mythos set in 21st-century New York,
    it starred Jonny Lee Miller as Holmes and Lucy Liu as his sidekick, Dr. Joan Watson.
    In a 2016 episode (“You’ve Got Me, Who’s Got You?”), Morland Holmes, Sherlock’s
    estranged father, hires Joan to find a mole in his organization. She quickly solves
    the case by discovering a Vigenère cipher in an email. But some fans of the show
    were dissatisfied: the Vigenère cipher is hardly subtle, so how could a man as
    intelligent as Morland Holmes miss finding it on his own?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年秋季，犯罪剧*Elementary*在CBS电视网络首播。该剧是对福尔摩斯神话的重新演绎，设定在21世纪的纽约，由乔尼·李·米勒饰演福尔摩斯，刘玉玲饰演他的伙伴乔安·沃森博士。在2016年的一集中（“你抓住我，谁抓住你？”），福尔摩斯与父亲莫兰德·福尔摩斯关系疏远，他雇佣了沃森帮助他找出组织中的间谍。沃森通过在一封邮件中发现维吉尼亚密码，很快解决了案件。但一些剧迷不满：维吉尼亚密码并不微妙，像莫兰德·福尔摩斯这样聪明的人怎么会没发现呢？
- en: In this project, you’ll reconcile this dilemma using steganography, but not
    with a null cipher as in [Chapter 5](ch05.xhtml#ch05). To hide this message, you’ll
    use a third-party module called python-docx that will allow you to conceal text
    by directly manipulating Microsoft Word documents using Python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用隐写术来解决这个困境，但不像[第5章](ch05.xhtml#ch05)中的空密码那样。为了隐藏这条消息，你将使用一个名为python-docx的第三方模块，通过直接操作Microsoft
    Word文档来隐藏文本。
- en: '**Project #12: Hiding a Vigenère Cipher**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 #12：隐藏维吉尼亚密码**'
- en: In the *Elementary* episode, Chinese investors hire Morland Holmes’s consulting
    company to negotiate with the Colombian government for petroleum licenses and
    drilling rights. A year has passed, and at the last moment a competitor swoops
    in and clinches the deal, leaving the Chinese investors high and dry. Morland
    suspects betrayal by a member of his staff and asks Joan Watson to investigate
    alone. Joan identifies the mole by finding a Vigenère cipher in one of his emails.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Elementary*的这一集中，中国投资者聘请了莫兰德·福尔摩斯的咨询公司，与哥伦比亚政府谈判石油许可证和钻探权。一年过去了，最后一刻，一名竞争对手突然出手，成功达成交易，留下中国投资者空手而回。莫兰德怀疑公司内部有人背叛，并要求沃森独自调查。沃森通过在他的邮件中发现维吉尼亚密码，快速识别出了间谍。
- en: '**SPOILER ALERT**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**剧透警告**'
- en: '*The decrypted contents of the cipher are never mentioned, and the mole is
    murdered in a subsequent episode.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码的解密内容从未被提及，间谍在随后的剧集中被谋杀。*'
- en: The *Vigenère cipher*, also known as the unbreakable cipher, is arguably the
    most famous cipher of all time. Invented in the 16th century by the French scholar
    Blaise de Vigenère, it is a polyalphabetic substitution cipher that, in the most
    commonly used version, employs a single keyword. This keyword, such as *BAGGINS*,
    is printed repeatedly over the plaintext, as in the message shown in [Figure 6-1](ch06.xhtml#ch06fig1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*维吉尼亚密码*，也被称为无法破解的密码，可能是有史以来最著名的密码。它由法国学者布莱兹·德·维吉尼亚（Blaise de Vigenère）于16世纪发明，是一种多表替代密码，在最常用的版本中，使用一个单一的关键词。这个关键词，比如*BAGGINS*，会反复印刷在明文上，如[图6-1](ch06.xhtml#ch06fig1)中所示的消息。'
- en: '![image](../images/f0106-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-01.jpg)'
- en: '*Figure 6-1: A plaintext message with the Vigenère cipher keyword* BAGGINS
    *printed above*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-1：带有维吉尼亚密码关键词*BAGGINS*的明文消息*'
- en: A table, or *tableau*, of the alphabet is then used to encrypt the message.
    [Figure 6-2](ch06.xhtml#ch06fig2) is an example of the first five rows of a Vigenère
    tableau. Notice how the alphabet shifts to the left by one letter with each row.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用字母表的表格或*表格*来加密消息。[图6-2](ch06.xhtml#ch06fig2)是维吉尼亚密码表前五行的示例。注意每一行的字母表都向左移动一个字母。
- en: '![image](../images/f0106-02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-02.jpg)'
- en: '*Figure 6-2: Portion of a Vigenère tableau*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-2：维吉尼亚密码表的一部分*'
- en: The keyword letter above the plaintext letter determines which row to use for
    the encryption. For example, to encrypt the *s* in *speak*, note that the keyword
    letter above it is *B*. Go down to the B row and read across to where the plaintext
    *s* is at the top of the column. Use the *T* at the intersection for the ciphertext
    letter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 明文上方的关键词字母决定了用于加密的行。例如，要加密*speak*中的*s*，请注意其上方的关键词字母是*B*。向下找到B行，然后横向查找明文中*s*所在的列。使用交点处的*T*作为密文字母。
- en: '[Figure 6-3](ch06.xhtml#ch06fig3) shows an example of the full message encrypted
    with the Vigenère cipher. This kind of text would surely draw attention and become
    an object of scrutiny if it were visible in a document!'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-3](ch06.xhtml#ch06fig3)展示了使用维吉尼亚密码加密的完整消息示例。如果这种文本出现在文档中，肯定会引起注意并成为审查的对象！'
- en: '![image](../images/f0107-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0107-01.jpg)'
- en: '*Figure 6-3: A message encrypted with the Vigenère cipher*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-3：使用维吉尼亚密码加密的消息*'
- en: The Vigenère cipher remained unbroken until the mid-19th century, when Charles
    Babbage, inventor of the precursor to the computer, realized that a short keyword
    used with a long message would result in repeating patterns that could reveal
    the length of the keyword and, ultimately, the key itself. The breaking of the
    cipher was a tremendous blow to professional cryptography, and no significant
    advancements were made in the field during the Victorian era of the original Holmes
    and Watson.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 维吉尼亚密码在19世纪中叶之前一直没有被破解，当时计算机前身的发明者查尔斯·巴贝奇意识到，使用一个短关键词配合长消息会导致重复模式，这些模式可以揭示关键词的长度，最终揭示密码本身。破解这个密码对专业密码学是一次巨大的打击，在原版《福尔摩斯与华生》的维多利亚时代，密码学领域没有显著的进展。
- en: The presence of this cipher is what causes “suspension of disbelief” issues
    with the *Elementary* episode. Why would an outside consultant be needed to find
    such a clearly suspicious email? Let’s see if we can come up with a plausible
    explanation using Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个密码的存在正是导致《Elementary》剧集出现“悬置怀疑”问题的原因。为什么需要外部顾问来找到如此明显可疑的电子邮件？让我们看看能否使用Python想出一个合理的解释。
- en: '**THE OBJECTIVE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: Assume you are the corporate mole in the episode and use Python to hide a secret
    message summarizing bid details within an official-looking text document. Start
    with an unencrypted message and finish with an encrypted version.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是剧集中的公司内鬼，使用Python将一个总结招标细节的秘密信息隐藏在一份正式外观的文档中。从一个未加密的消息开始，最终得到一个加密版本。
- en: '**The Platform**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**平台**'
- en: Your program should work with ubiquitous word-processing software, as the output
    needs to be sharable between different corporations. This implies use of the Microsoft
    Office Suite for Windows or compatible versions for macOS or Linux. And restricting
    the output to a standard Word document makes hardware issues Microsoft’s responsibility!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序应该与广泛使用的文字处理软件兼容，因为输出结果需要在不同的公司之间共享。这意味着需要使用Windows版的Microsoft Office套件，或者与macOS或Linux兼容的版本。将输出限制为标准Word文档使得硬件问题成为微软的责任！
- en: Accordingly, this project was developed with Word 2016 for Windows, and the
    results checked with Word for Mac v16.16.2\. If you don’t have a license for Word,
    you can use the free Microsoft Office Online app, available at *[https://products.office.com/en-us/office-online](https://products.office.com/en-us/office-online)*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本项目是用Windows版Word 2016开发的，结果已经在Mac版Word v16.16.2上进行了检查。如果你没有Word的许可，可以使用免费的Microsoft
    Office Online应用，网址为*[https://products.office.com/en-us/office-online](https://products.office.com/en-us/office-online)*。
- en: If you currently use alternatives to Word, like LibreOffice Writer or OpenOffice
    Writer, you can open and view the Word (*.docx*) files used and produced in this
    project; however, the hidden message will most likely be compromised, as discussed
    in “[Detecting the Hidden Message](ch06.xhtml#lev143)” on [page 119](ch06.xhtml#page_119).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你当前使用的是Word的替代品，如LibreOffice Writer或OpenOffice Writer，你可以打开并查看本项目中使用和生成的Word（*.docx*）文件；然而，隐藏的信息很可能会被泄露，正如在“[检测隐藏信息](ch06.xhtml#lev143)”中所讨论的那样，详见[第119页](ch06.xhtml#page_119)。
- en: '**The Strategy**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**策略**'
- en: You’re an accountant with a beginner’s knowledge of Python, and you work for
    a very intelligent and suspicious man. The project you work on is highly proprietary,
    with controls—such as email filters—to maintain confidentiality. And if you manage
    to sneak out a message, a thorough investigation will surely follow. So, you need
    to hide a clearly suspicious message in an email, either directly or as an attachment,
    yet evade initial detection and later internal audits.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一个拥有初学者水平Python知识的会计师，你的老板是一个非常聪明且多疑的人。你所从事的项目高度机密，具有诸如电子邮件过滤器等控制措施，以保持机密性。如果你设法悄悄发送了一条信息，随之而来的肯定会是一场彻底的调查。所以，你需要在一封电子邮件中隐藏一条明显可疑的信息，无论是直接发送还是作为附件，并且要避免初期的检测和后期的内部审计。
- en: 'Here are some constraints:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些限制条件：
- en: You can’t send the message directly to the competing corporation, only to an
    intermediary.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能直接将消息发送给竞争公司，只能发送给中介。
- en: You need to scramble the message to evade the email filters that will search
    for keywords.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将消息混淆，以避开会搜索关键词的电子邮件过滤器。
- en: You need to hide the encrypted message from sight so as not to arouse suspicion.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将加密消息隐藏起来，以免引起怀疑。
- en: The intermediary would be easy to set up, and free encryption sites are easy
    to find on the internet—but the last item is more problematic.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 中介设置起来会很容易，免费的加密网站也很容易在互联网上找到——但最后一项更为棘手。
- en: Steganography is the answer, but as you saw in the previous chapter, hiding
    even a short message in a null cipher is no easy task. Alternative techniques
    involve shifting lines of text vertically or words horizontally by small amounts,
    changing the length of letters, or using the file’s metadata—but you’re an accountant
    with limited knowledge of Python and even less time. If only there were an easy
    way, like invisible ink in the old days.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 隐写术是答案，但正如你在上一章所看到的那样，在一个空白密码中隐藏即便是短消息也绝非易事。替代技术涉及垂直移动文本行或水平微调单词，改变字母的长度，或使用文件的元数据——但你只是一个对Python了解有限、时间更加紧张的会计。如果只有像过去那样简单的方法，比如隐形墨水就好了。
- en: '***Creating Invisible Ink***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建隐形墨水***'
- en: Invisible ink, in this age of electronic ink, might be just crazy enough to
    work! An invisible font would easily foil a visual perusal of online documents
    and won’t even exist in paper printouts. Since the contents would be encrypted,
    digital filters looking for keywords like *bid* or the Spanish names of the producing
    oil basins would find nothing. And best of all, invisible ink is easy to use—just
    set the foreground text to the background color.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电子墨水的时代，隐形墨水可能就足够疯狂而有效！隐形字体很容易阻止对在线文档的视觉审阅，而且在纸质打印件中根本不存在。由于内容已被加密，寻找诸如*投标*或石油产区的西班牙语名称等关键词的数字过滤器将一无所获。最重要的是，隐形墨水使用起来非常简单——只需将前景文本设置为背景色即可。
- en: Formatting text and changing its color requires a word processor like Microsoft
    Word. To make invisible electronic ink in Word, you just need to select a character,
    word, or line and set the font color to white. The recipient of the message would
    then need to select the whole document and use the Highlighter tool (see [Figure
    6-4](ch06.xhtml#ch06fig4)) to paint the selected text black, thus concealing the
    standard black letters and bringing the hidden white letters into view.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化文本并改变其颜色需要像Microsoft Word这样的文字处理软件。在Word中制作隐形电子墨水，你只需选择一个字符、一个单词或一行，并将字体颜色设置为白色。接收者需要选择整个文档并使用高亮工具（见[图6-4](ch06.xhtml#ch06fig4)）将选中的文本涂黑，从而隐藏标准的黑色字母并将隐藏的白色字母呈现出来。
- en: '![image](../images/f0108-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0108-01.jpg)'
- en: '*Figure 6-4: The Text Highlight Color tool in Word 2016*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-4：Word 2016中的文本高亮工具*'
- en: Just selecting the document in Word won’t reveal the white text ([Figure 6-5](ch06.xhtml#ch06fig5)),
    so someone would have to be very suspicious indeed to find these hidden messages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅选择Word中的文档并不能显示白色文本（[图6-5](ch06.xhtml#ch06fig5)），因此，只有非常怀疑的人才能发现这些隐藏的消息。
- en: '![image](../images/f0109-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0109-01.jpg)'
- en: '*Figure 6-5: Top: a portion of a Word document with the fake message visible;
    middle: the document selected with CTRL-A; bottom: the real message revealed using
    the Highlighter tool with the highlight color set to black*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-5：上：显示虚假消息的Word文档部分；中：按CTRL-A选择的文档；下：使用高亮工具并将高亮颜色设置为黑色后显示的真实消息*'
- en: 'Of course, you can accomplish all this in a word processor alone, but there
    are two cases where a Pythonic approach is preferable: 1) when you have to encrypt
    a long message and don’t want to manually insert and hide all the lines and 2)
    when you need to send more than a few messages. As you’ll see, a short Python
    program will greatly simplify the process!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以仅通过文字处理软件完成所有这些操作，但有两种情况下采用Python方法更为合适：1）当你需要加密一条长消息，并且不想手动插入并隐藏所有行；2）当你需要发送超过几条消息时。正如你将看到的，简短的Python程序会极大简化这个过程！
- en: '**Considering Font Types, Kerning, and Tracking**'
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**考虑字体类型、字距调整和字间距**'
- en: Placing the invisible text is a key design decision. One option is to use the
    spaces between the visible words of the fake message, but this could trigger spacing-related
    issues that would make the final product look suspicious.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏文本的位置是一个关键设计决策。一个选项是使用虚假消息中可见单词之间的空格，但这可能会引发与间距相关的问题，使得最终产品看起来可疑。
- en: '*Proportional fonts* use variable character widths to improve readability.
    Example fonts are Arial and Times New Roman. *Monospace fonts* use a constant
    character width to support the alignment of text and the recognition of individual
    characters, especially thin ones such as the ( or { characters. As a result, monospace
    fonts are popular in programming interfaces. Example fonts are Consolas and Courier
    New.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*比例字体*使用可变字符宽度来提高可读性。例如字体包括Arial和Times New Roman。*等宽字体*使用固定的字符宽度来支持文本对齐和单个字符的识别，尤其是像（或{这样的细字符。因此，等宽字体在编程界面中非常流行。例如字体包括Consolas和Courier
    New。'
- en: '*Kerning* is a typographical process for adjusting the spacing and overlap
    between individual character glyphs in order to improve their visual appeal. A
    process called *tracking* is used to adjust the character spacing across entire
    lines or blocks of text for the same purpose. These adjustments aid legibility
    and readability, ensuring that letters aren’t so close together that they’re indistinguishable
    or so far apart that words aren’t recognizable. Note that we read words, not letters.
    If you doubt it, read this: peopl raed wrds nt lttrs. Of corase, contxt hlps.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*字距调整*是通过调整单个字符字形之间的间距和重叠，以改善其视觉效果的排版过程。一个名为*字间距调整*的过程用于调整整个行或块文本的字符间距，目的相同。这些调整有助于可读性和可识别性，确保字母不会因为过于紧密而无法区分，或者因为过于分开而无法识别单词。请注意，我们是阅读单词，而不是字母。如果你对此有疑问，可以读一读这个：peopl
    raed wrds nt lttrs。显然，*上下文*有帮助。'
- en: 'Kerning between pairs of letters is performed first, followed by tracking,
    during which the relative kerning of the letter pairs is preserved. As mentioned
    earlier, these variable widths and automatic corrections can cause problems when
    you’re trying to hide characters between words that use proportional fonts:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 字母对之间的字距调整首先进行，然后是字间距调整，在此过程中字母对的相对字距保持不变。如前所述，当你尝试在使用比例字体的单词之间隐藏字符时，这些可变宽度和自动修正可能会导致问题：
- en: '| To a great mind nothing is little. | *Proportional font with no hidden letters*
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *比例字体，没有隐藏字母* |'
- en: '| To a great mind nothing is little. | *Proportional font with hidden letters
    between words* |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *比例字体，单词之间隐藏了字母* |'
- en: '| To$a3great.mind2nothingKis little. | *Hidden letters revealed ($3.2K)* |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *隐藏的字母已显示（$3.2K）* |'
- en: '|  |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: '| To a great mind nothing is little. | *Monospace font with no hidden letters*
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *等宽字体，没有隐藏字母* |'
- en: '| To a great mind nothing is little. | *Monospace font with hidden letters
    between words.* |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *等宽字体，单词之间隐藏了字母* |'
- en: '| To$a3great.mind2nothingKis little. | *Hidden letters revealed ($3.2K)* |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *隐藏的字母已显示（$3.2K）* |'
- en: If you use a monospace font, the consistent spacing provides a convenient hiding
    place. But since professional correspondence is more likely to use proportional
    fonts, the invisible ink technique should focus on the more easily controlled
    spaces between lines.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用等宽字体，一致的间距提供了一个方便的隐藏位置。但由于专业通信更可能使用比例字体，因此隐形墨水技术应关注行间距，这些空间更容易控制。
- en: Using empty lines between paragraphs is the easiest method to program and to
    read, and it shouldn’t require a long fake message because you can summarize the
    salient points of a bid succinctly. This is important since you don’t want empty
    pages appended to your visible fake message. Consequently, the footprint for your
    hidden message should be smaller than for your fake one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在段落之间使用空行是最简单的编程和阅读方法，而且不需要长时间的虚假信息，因为你可以简明扼要地总结出竞标的要点。这很重要，因为你不希望在可见的虚假信息后附加空白页。因此，你隐藏信息的占位符应比虚假信息的占位符更小。
- en: '**Avoiding Issues**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**避免问题**'
- en: When you’re developing software, a good question to ask repeatedly is “How can
    the user screw this up?” One thing that can go wrong here is that the encryption
    process will change the letters in your hidden message so that kerning and tracking
    adjustments may push a word past the line break, causing an automatic line wrap.
    This will result in uneven and suspicious-looking spaces between paragraphs in
    the fake message. One way to avoid this is to press ENTER a little early as you’re
    typing in each line of the real message. This will leave some space at the end
    of the line to accommodate changes due to encryption. Of course, you’ll still
    need to verify the results. Assuming code works is as risky as assuming James
    Bond is dead!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在开发软件时，一个需要反复问的问题是“用户可能如何弄坏它？”在这里可能出错的一件事是加密过程会改变你隐藏信息中的字母，导致字距和行距调整，可能会将某个单词推到换行符之外，从而引起自动换行。这将导致伪造信息中段落之间出现不均匀和可疑的空格。避免这种情况的方法之一是，在输入每一行真实信息时提前按下
    ENTER 键，这样行末会留出一些空间以适应加密导致的变化。当然，你仍然需要验证结果。假设代码有效的风险，就像假设詹姆斯·邦德已经死了一样！
- en: '***Manipulating Word Documents with python-docx***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 python-docx 操作 Word 文档***'
- en: A free third-party module called python-docx allows Python to manipulate Microsoft
    Word (.*docx*) files. To download and install the third-party modules mentioned
    in this book, you’ll use the Preferred Installer Program (pip), a package management
    system that makes it easy to install Python-based software. For Python 3 on Windows
    and macOS, versions 3.4 and later come with pip preinstalled; for Python 2, pip
    preinstallation starts with version 2.7.9\. Linux users may have to install pip
    separately. If you find you need to install or upgrade pip, see the instructions
    at *[https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/)*
    or do an online search on installing pip on your particular operating system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 python-docx 的免费第三方模块可以让 Python 操作 Microsoft Word（.*docx*）文件。要下载和安装本书中提到的第三方模块，你需要使用首选安装程序（pip），这是一种包管理系统，使安装基于
    Python 的软件变得简单。对于 Windows 和 macOS 上的 Python 3，版本 3.4 及以上自带 pip；对于 Python 2，pip
    从版本 2.7.9 开始预装。Linux 用户可能需要单独安装 pip。如果你发现需要安装或升级 pip，可以查看 *[https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/)*
    上的安装说明，或者在网上搜索适用于你操作系统的 pip 安装方法。
- en: With the pip tool, you can install python-docx by simply running pip install
    python-docx in a command, PowerShell, or terminal window, depending on your operating
    system. Online instructions for python-docx are available at *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip 工具，你可以通过在命令行、PowerShell 或终端窗口中运行 pip install python-docx 来安装 python-docx，具体取决于你的操作系统。关于
    python-docx 的在线说明可以在 *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    上找到。
- en: 'For this project, you need to understand the paragraph and run objects. The
    python-docx module organizes data types using three objects in the following hierarchy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要理解段落对象和行对象。python-docx 模块使用三个对象在以下层级结构中组织数据类型：
- en: 'document: The whole document with a list of paragraph objects'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档：包含一系列段落对象的完整文档。
- en: 'paragraph: A block of text separated by the use of the ENTER key in Word; contains
    a list of run object(s)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 段落：在 Word 中通过按下 ENTER 键分隔的一块文本；包含一个或多个行对象。
- en: 'run: A connected string of text with the same *style*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行：具有相同 *样式* 的一串文本。
- en: 'A paragraph is considered a *block-level* object, which python-docx defines
    as follows: “a block-level item flows the text it contains between its left and
    right edges, adding an additional line each time the text extends beyond its right
    boundary. For a paragraph object, the boundaries are generally the page margins,
    but they can also be column boundaries if the page is laid out in columns, or
    cell boundaries if the paragraph occurs inside a table cell. A table is also a
    block-level object.”'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 段落被视为 *块级* 对象，python-docx 将其定义如下：“块级项目将在其左边缘和右边缘之间流动文本，每当文本超出右边界时，都会增加一行。对于段落对象，边界通常是页面边距，但如果页面以列布局，也可以是列边界，或者如果段落位于表格单元格中，则可以是单元格边界。表格也是块级对象。”
- en: A paragraph object has a variety of attributes that specify its placement within
    a container—typically a page—and the way it divides its contents into separate
    lines. You can access the formatting attributes of a paragraph with the ParagraphFormat
    object available through the ParagraphFormat attribute of the paragraph, and you
    can set all the paragraph attributes using a *paragraph style grouping* or apply
    them directly to a paragraph.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个段落对象有多种属性，指定其在容器中的位置——通常是页面——以及它如何将内容分成不同的行。你可以通过段落的 ParagraphFormat 属性访问段落的格式属性，也可以通过*段落样式分组*来设置所有段落属性，或者直接将它们应用到段落中。
- en: A run is an *inline-level* object that occurs within paragraphs or other block-level
    objects. A run object has a read-only font attribute providing access to a font
    object. A font object provides attributes for getting and setting the character
    formatting for that run. You’ll need this feature for setting your hidden message’s
    text color to white.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 运行是一个*内联级别*的对象，它出现在段落或其他块级对象内。一个运行对象有一个只读字体属性，可以访问一个字体对象。一个字体对象提供了设置该运行字符格式的属性。你需要这个功能来将隐藏消息的文本颜色设置为白色。
- en: '*Style* refers to a collection of attributes in Word for paragraphs and characters
    (run objects) or a combination of both. Style includes familiar attributes such
    as font, color, indention, line spacing, and so on. You may have noticed groupings
    of these displayed in the Styles pane on Word’s Home ribbon (see [Figure 6-6](ch06.xhtml#ch06fig6)).
    Any change in style—to even a single letter—requires the creation of a new run
    object. Currently, only styles that are in the opened *.docx* file are available.
    This may change in future versions of python-docx.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*样式*指的是 Word 中段落和字符（运行对象）的一组属性，或两者的组合。样式包括常见的属性，如字体、颜色、缩进、行间距等。你可能已经注意到，这些属性在
    Word 的“主页”功能区的“样式”窗格中进行了分组（见[图 6-6](ch06.xhtml#ch06fig6)）。任何样式的变化——甚至是一个字母的变化——都需要创建一个新的运行对象。目前，只有在打开的
    *.docx* 文件中的样式可用。这个情况可能会在 future python-docx 版本中有所改变。'
- en: '![image](../images/f0111-01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0111-01.jpg)'
- en: '*Figure 6-6: The Styles pane in Microsoft Word 2016*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-6：Microsoft Word 2016 中的样式窗格*'
- en: You can find full documentation on the use of styles in python-docx at *[http://python-docx.readthedocs.io/en/latest/user/styles-using.html](http://python-docx.readthedocs.io/en/latest/user/styles-using.html)*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[http://python-docx.readthedocs.io/en/latest/user/styles-using.html](http://python-docx.readthedocs.io/en/latest/user/styles-using.html)*
    找到关于如何使用样式的完整文档。
- en: 'Here’s an example of paragraphs and runs as python-docx sees them:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 python-docx 看到的段落和运行的示例：
- en: '*I am a single paragraph of one run because all my text is the same style.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是一段只有一个运行的单一段落，因为我的所有文本都是相同的样式。*'
- en: '*I am a single paragraph with two runs. **I am the second run because my style
    changed to bold.***'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是一段包含两个运行的单一段落。**我是第二个运行，因为我的样式变成了粗体。***'
- en: '*I am a single paragraph with three runs. **I am the second run because my
    style changed to bold. The third run is my last** word.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是一段包含三个运行的单一段落。**我是第二个运行，因为我的样式变成了粗体。第三个运行是我的最后**一个字。*'
- en: If any of this seems unclear, don’t fret. You don’t need to know python-docx
    in any detail. As with any piece of code, you mainly need to know *what you want
    to do*. An online search should yield plenty of useful suggestions and complete
    samples of code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中任何部分看起来不清楚，不用担心。你不需要详细了解 python-docx。像任何一段代码一样，你主要需要知道*你想做什么*。网上搜索应该能提供很多有用的建议和完整的代码示例。
- en: '**NOTE**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For this to work smoothly, don’t change styles within the real (hidden) message
    and make sure you end every line in a hard return by manually pressing the ENTER
    key. Unfortunately, Word doesn’t have a special character for soft returns caused
    by automatic word wrapping. So, you can’t go into an existing Word document with
    automatic line breaks and use Find and Replace to change them all to hard returns.
    Such is the life of a mole.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了让这个过程顺利进行，不要在真实（隐藏）信息中改变样式，并确保每一行都以回车键（ENTER）手动结束。不幸的是，Word 没有自动换行时的软回车特殊字符。所以，你不能进入一个已有的带有自动换行的
    Word 文档，使用查找和替换将它们都改为硬回车。这就是鼹鼠的生活。*'
- en: '***Downloading the Assets***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***下载资源***'
- en: 'The external files you’ll need are downloadable from *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    and should be saved in the same folder as the code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的外部文件可以从 *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    下载，并应保存在与代码相同的文件夹中：
- en: '***template.docx*** An empty Word doc formatted with official Holmes Corporation
    styles, fonts, and margins'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '***template.docx*** 一个空白的 Word 文档，采用 Holmes Corporation 官方样式、字体和页边距格式'
- en: '***fakeMessage.docx*** The fake message, without letterhead and date, in a
    Word document'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '***fakeMessage.docx*** 假消息，没有信头和日期，Word 文档格式'
- en: '***realMessage.docx*** The real message in plaintext, without letterhead and
    date, in a Word document'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '***realMessage.docx*** 真实消息的纯文本，没有信头和日期，Word 文档格式'
- en: '***realMessage_Vig.docx*** The real message encrypted with the Vigenère cipher'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '***realMessage_Vig.docx*** 使用维吉尼亚密码加密的真实消息'
- en: '***example_template_prep.docx*** An example of the fake message used to create
    the template document (the program doesn’t require this file to run)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '***example_template_prep.docx*** 用于创建模板文档的假消息示例（程序运行时不需要此文件）'
- en: '**NOTE**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re using Word 2016, an easy way to make a blank template file is to
    write the fake message (including letterhead) and save the file. Then delete all
    the text and save the file again with a different name. When you assign this blank
    file to a variable with* python-docx*, all the existing styles will be retained.
    Of course, you could use a template file with the letterhead already included,
    but for the purpose of learning more about* python-docx*, we’ll build the letterhead
    here using Python.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的是 Word 2016，一个简单的方法是先写入假消息（包括信头），然后保存文件。接着删除所有文本，再次保存文件并使用不同的文件名。当你使用*
    python-docx *将此空白文件分配给一个变量时，所有现有的样式会被保留。当然，你也可以使用已经包含信头的模板文件，但为了更好地学习*python-docx*，我们将在这里使用
    Python 来构建信头。*'
- en: Take a moment to view these first four documents in Word. These files comprise
    the inputs to the *elementary_ink.py* program. The fake and real messages—the
    second and third items listed—are also shown in [Figures 6-7](ch06.xhtml#ch06fig7)
    and [6-8](ch06.xhtml#ch06fig8).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间查看这四个文档在 Word 中的样子。这些文件是 *elementary_ink.py* 程序的输入。假消息和真实消息——列出的第二和第三项——也在[图
    6-7](ch06.xhtml#ch06fig7) 和 [图 6-8](ch06.xhtml#ch06fig8)中显示。
- en: '![image](../images/f0113-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0113-01.jpg)'
- en: '*Figure 6-7: The “fake” text in the* fakeMessage.docx *file*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-7：假消息中的“假”文本* fakeMessage.docx *文件*'
- en: '![image](../images/f0113-02.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0113-02.jpg)'
- en: '*Figure 6-8: The real message in the* realMessage.docx *file*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-8：真实消息的* realMessage.docx *文件*'
- en: Note that the real message contains some numbers and special characters. These
    won’t be encrypted with the Vigenère tableau we’ll use, and I’ve included them
    to make that point. Ideally, they would be spelled out (for example, “three” for
    “3” and “percent” for “%”) for maximum secrecy when we add the Vigenère cipher
    later.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，真实消息中包含一些数字和特殊字符。这些字符不会被我们将使用的维吉尼亚表格加密，我特意保留它们来强调这一点。理想情况下，应该将它们拼写出来（例如，将“3”写成“三”或将“%”写成“百分比”），以便在后续添加维吉尼亚密码时最大限度地保密。
- en: '**The Pseudocode**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**伪代码**'
- en: The following pseudocode describes how to load the two messages and the template
    document, interleave and hide the real message in blank lines using a white font,
    and then save the hybrid message.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下伪代码描述了如何加载两个消息和模板文档，交错并将真实消息隐藏在空白行中，使用白色字体，然后保存混合消息。
- en: 'Build assets:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 构建资源：
- en: In Word, create an empty doc with desired formatting/styles (template)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Word 中创建一个带有所需格式/样式的空文档（模板）
- en: In Word, create an innocuous fake message that will be visible & have enough     blank
    lines to hold the real message
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Word 中创建一个无害的假消息，该消息将可见并具有足够的空白行来容纳真实消息
- en: In Word, create the real message that will be hidden
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Word 中创建将被隐藏的真实消息
- en: Import docx to allow manipulation of Word docs with Python
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 docx 以允许使用 Python 操作 Word 文档
- en: Use docx module to load the fake & real messages as lists
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 模块将假消息和真实消息加载为列表
- en: Use docx to assign the empty doc to a variable
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 将空白文档分配给一个变量
- en: Use docx to add letterhead banner to empty doc
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 向空白文档添加信头横幅
- en: Make counter variable for lines in real message
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为真实消息中的行创建计数器变量
- en: Define function to format paragraph spacing with docx
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 定义函数以使用 docx 格式化段落间距
- en: 'For line in fake message:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于假消息中的每一行：
- en: 'If line is blank and there are still lines in the real message:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某行为空且真实消息中仍有行：
- en: Use docx & counter to fill blank with line from real message
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 和计数器从真实消息中填充空白行
- en: Use docx to set real message font color to white
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 设置真实消息的字体颜色为白色
- en: Advance counter for real message
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 向真实消息的计数器推进
- en: 'Otherwise:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 否则：
- en: Use docx to write fake line
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 写入假消息的行
- en: Run paragraph spacing function
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 运行段落间距功能
- en: Use docx to save final Word document
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 docx 保存最终的 Word 文档
- en: '**The Code**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码**'
- en: The *elementary_ink.py* program in [Listing 6-1](ch06.xhtml#ch06list1) loads
    the real message, the fake message, and the empty template document. It hides
    the real message in the blank lines of the fake message using a white font, and
    then saves the hybrid message as an innocuous and professional-looking piece of
    correspondence that can be attached to an email. You can download the code from
    *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-1](ch06.xhtml#ch06list1) 中的 *elementary_ink.py* 程序加载真实消息、虚假消息和空白模板文档。它通过使用白色字体将真实消息隐藏在虚假消息的空白行中，然后将合成的消息保存为一封看起来无害且专业的信件，可以附加到电子邮件中。你可以从
    *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    下载代码。'
- en: '***Importing python-docx, Creating Lists, and Adding a Letterhead***'
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***导入 python-docx，创建列表并添加信头***'
- en: '[Listing 6-1](ch06.xhtml#ch06list1) imports python-docx, turns the lines of
    text in the fake and real messages into list items, loads the template document
    that sets the styles, and adds a letterhead.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-1](ch06.xhtml#ch06list1) 导入 python-docx，将虚假和真实消息中的文本行转换为列表项，加载设置样式的模板文档，并添加信头。'
- en: '*elementary_ink.py,* part 1'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*elementary_ink.py,* 第 1 部分'
- en: import docx
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: import docx
- en: ➊ from docx.shared import RGBColor, Pt
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 从 docx.shared 导入 RGBColor、Pt
- en: '➋ # get text from fake message & make each line a list item'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '➋ # 获取虚假消息的文本并将每一行转换为列表项'
- en: fake_text = docx.Document('fakeMessage.docx')
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: fake_text = docx.Document('fakeMessage.docx')
- en: fake_list = []
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: fake_list = []
- en: 'for paragraph in fake_text.paragraphs:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'for paragraph in fake_text.paragraphs:'
- en: fake_list.append(paragraph.text)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: fake_list.append(paragraph.text)
- en: '➌ # get text from real message & make each line a list item'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '➌ # 获取真实消息的文本并将每一行转换为列表项'
- en: real_text = docx.Document('realMessage.docx')
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: real_text = docx.Document('realMessage.docx')
- en: real_list = []
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: real_list = []
- en: 'for paragraph in real_text.paragraphs:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'for paragraph in real_text.paragraphs:'
- en: ➍ if len(paragraph.text) != 0:  # remove blank lines
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '➍ if len(paragraph.text) != 0:  # 删除空行'
- en: real_list.append(paragraph.text)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: real_list.append(paragraph.text)
- en: '➎ # load template that sets style, font, margins, etc.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '➎ # 加载设置样式、字体、边距等的模板'
- en: doc = docx.Document('template.docx')
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: doc = docx.Document('template.docx')
- en: '➏ # add letterhead'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '➏ # 添加信头'
- en: doc.add_heading('Morland Holmes', 0)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: doc.add_heading('莫兰德·霍尔姆斯', 0)
- en: subtitle = doc.add_heading('Global Consulting & Negotiations', 1)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: subtitle = doc.add_heading('全球咨询与谈判', 1)
- en: subtitle.alignment = 1
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: subtitle.alignment = 1
- en: doc.add_heading('', 1)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: doc.add_heading('', 1)
- en: ➐ doc.add_paragraph('December 17, 2015')
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ➐ doc.add_paragraph('2015年12月17日')
- en: doc.add_paragraph('')
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: doc.add_paragraph('')
- en: '*Listing 6-1: Imports* python-docx*, loads important* .docx *files, and adds
    a letterhead*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-1：导入* python-docx*，加载重要的* .docx *文件，并添加信头*'
- en: After importing the docx module—not as “python-docx”—use docx.shared to gain
    access to the color (RGBColor) and length (Pt) objects in the docx module ➊. These
    will allow you to change the font color and set the spacing between lines. The
    next two code blocks load the fake ➋ and real ➌ message Word documents as lists.
    Where the ENTER key was pressed in each Word document determines what items will
    be in these lists. For the real message to be hidden, remove any blank lines so
    that your message will be as short as possible ➍. Now you can use list indexes
    to merge the two messages and keep track of which is which.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入 docx 模块后—而不是“python-docx”—使用 docx.shared 来访问 docx 模块中的颜色（RGBColor）和长度（Pt）对象
    ➊。这些将允许你更改字体颜色并设置行间距。接下来的两个代码块将虚假 ➋ 和真实 ➌ 消息 Word 文档加载为列表。在每个 Word 文档中按下回车键的位置决定了这些列表中的项目。为了隐藏真实消息，删除任何空行，以便你的消息尽可能简短
    ➍。现在，你可以使用列表索引将这两条消息合并，并追踪它们的来源。
- en: Next, load the template document that contains the preestablished styles, fonts,
    and margins ➎. The docx module will write to this variable and ultimately save
    it as the final document.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，加载包含预设样式、字体和边距的模板文档 ➎。docx 模块将写入此变量，最终将其保存为最终文档。
- en: With the inputs loaded and prepped, format the letterhead of the final document
    to match that of the Holmes Corporation ➏. The add_heading() function adds a heading
    style paragraph with text and integer arguments. Integer 0 designates the highest-level
    heading, or Title style, inherited from the template document. The subtitle is
    formatted with 1, the next heading style available, and is center aligned, again
    with the integer 1 (0 = left justified, 2 = right justified). Note that, when
    you add the date, you don’t need to supply an integer ➐. When you don’t provide
    an argument, the default is to inherit from the existing style hierarchy, which
    in the template is left justified. The other statements in this block just add
    blank lines.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 加载并准备好输入后，格式化最终文档的信头，使其与Holmes公司 ➏ 的信头相匹配。add_heading()函数添加一个带有文本和整数参数的标题样式段落。整数0指定最高级别的标题或标题样式，继承自模板文档。副标题使用1进行格式化，这是下一个可用的标题样式，并且居中对齐，再次使用整数1（0
    = 左对齐，2 = 右对齐）。请注意，当添加日期时，不需要提供整数 ➐。如果不提供参数，默认会继承现有的样式层级，在模板中是左对齐的。此块中的其他语句只是添加空白行。
- en: '***Formatting and Interleaving the Messages***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***格式化并交替插入消息***'
- en: '[Listing 6-2](ch06.xhtml#ch06list2) does the real work, formatting the spacing
    between lines and interleaving the messages.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-2](ch06.xhtml#ch06list2)执行了真正的工作，格式化行间距并交替插入消息。'
- en: '*elementary_ink.py,* part 2'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*elementary_ink.py,* 第二部分'
- en: '➊ def set_spacing(paragraph):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ def set_spacing(paragraph):'
- en: '"""Use docx to set line spacing between paragraphs."""'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '"""使用 docx 设置段落之间的行间距。"""'
- en: paragraph_format = paragraph.paragraph_format
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: paragraph_format = paragraph.paragraph_format
- en: paragraph_format.space_before = Pt(0)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: paragraph_format.space_before = Pt(0)
- en: paragraph_format.space_after = Pt(0)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: paragraph_format.space_after = Pt(0)
- en: ➋ length_real = len(real_list)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ length_real = len(real_list)
- en: count_real = 0  # index of current line in real (hidden) message
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'count_real = 0  # 当前行在实际（隐藏）消息中的索引'
- en: '# interleave real and fake message lines'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '# 交替插入真实和虚假消息行'
- en: 'for line in fake_list:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'for line in fake_list:'
- en: '➌ if count_real < length_real and line == "":'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '➌ if count_real < length_real and line == "":'
- en: ➍ paragraph = doc.add_paragraph(real_list[count_real])
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ paragraph = doc.add_paragraph(real_list[count_real])
- en: ➎ paragraph_index = len(doc.paragraphs) - 1
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ paragraph_index = len(doc.paragraphs) - 1
- en: '# set real message color to white'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将真实消息的颜色设置为白色'
- en: run = doc.paragraphs[paragraph_index].runs[0]
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: run = doc.paragraphs[paragraph_index].runs[0]
- en: font = run.font
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: font = run.font
- en: '➏ font.color.rgb = RGBColor(255, 255, 255) # make it red to test'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '➏ font.color.rgb = RGBColor(255, 255, 255) # 将其设为红色进行测试'
- en: ➐ count_real += 1
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ➐ count_real += 1
- en: 'else:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: ➑ paragraph = doc.add_paragraph(line)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ➑ paragraph = doc.add_paragraph(line)
- en: ➒ set_spacing(paragraph)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ➒ set_spacing(paragraph)
- en: ➓ doc.save('ciphertext_message_letterhead.docx')
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ➓ doc.save('ciphertext_message_letterhead.docx')
- en: print("Done")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: print("完成")
- en: '*Listing 6-2: Formats paragraphs and interleaves lines of fake and real messages*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-2：格式化段落并交替插入虚假和真实消息的行*'
- en: Define a function that formats the spacing between paragraphs using python-docx’s
    paragraph_format attribute ➊. Line spacing before and after the hidden line is
    set to 0 points to ensure that the output doesn’t have suspiciously large gaps
    between paragraphs, like the ones on the left-hand side of [Figure 6-9](ch06.xhtml#ch06fig9).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个函数，使用python-docx的paragraph_format属性格式化段落之间的间距 ➊。隐藏行之前和之后的行间距设置为0点，以确保输出中段落之间没有可疑的大间隙，如[图6-9](ch06.xhtml#ch06fig9)左侧所示。
- en: '![image](../images/f0116-01.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0116-01.jpg)'
- en: '*Figure 6-9: Fake message line spacing without* python-docx *paragraph formatting
    (left) vs. with formatting (right)*'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-9：没有* python-docx *段落格式化的虚假消息行间距（左）与有格式化的虚假消息行间距（右）*'
- en: Next, define the working space by getting the length of the list that holds
    the real message ➋. Remember that the hidden real message needs to be shorter
    than the visible fake message so that there are sufficient blank lines to hold
    it. Follow this by initiating a counter. The program will use it to keep track
    of which line (list item) it’s currently processing in the real message.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义工作空间，通过获取存储实际消息的列表的长度 ➋。请记住，隐藏的真实消息需要比可见的虚假消息短，以便有足够的空白行来容纳它。接着初始化计数器，程序将使用它来跟踪当前正在处理的真实消息行（列表项）。
- en: 'Since the list made from the fake message is the longest and sets the dimensional
    space for the real message, loop through the fake message using two conditionals:
    1) whether you’ve reached the end of the real message and 2) whether a line in
    the fake list is blank ➌. If there are still real message lines and the fake message
    line is blank, use count_real as an index for real_list and use python-docx to
    add it to the document ➍.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 由于由假消息生成的列表最长，并且设定了真实消息的空间维度，因此通过两个条件遍历假消息：1）是否已经到达真实消息的末尾；2）假消息列表中的一行是否为空 ➌。如果仍然有真实消息行且假消息行为空，则使用count_real作为真实列表的索引，并使用python-docx将其添加到文档中
    ➍。
- en: Get the index of the line you just added by taking the length of doc.paragraphs
    and subtracting 1 ➎. Then use this index to set the real message line to a run
    object (it will be the first run item [0] in the list, as the real message uses
    a single style) and set its font color to white ➏. Since the program has now added
    a line from the real list in this block, the count_real counter advances by 1
    ➐.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算doc.paragraphs的长度并减去1来获取你刚刚添加的行的索引 ➎。然后使用该索引将真实消息行设置为运行对象（它将在列表中是第一个运行项[0]，因为真实消息使用单一样式），并将其字体颜色设置为白色
    ➏。由于程序现在已经在此块中添加了来自真实列表的一行，因此count_real计数器增加了1 ➐。
- en: The subsequent else block addresses the case where the line chosen from the
    fake list in the for loop isn’t empty. In this case, the fake message line is
    added directly to the paragraph ➑. Finish the for loop by calling the line spacing
    function, set_spacing() ➒.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的else语句块处理从for循环中选取的假消息列表中非空行的情况。在这种情况下，假消息行会直接添加到段落➑中。通过调用行间距函数set_spacing()
    ➒来完成for循环。
- en: Once the length of the real message has been exceeded, the for loop will continue
    to add the remainder of the fake message—in this case, Mr. Kurtz’s signature info—and
    save the document as a Word *.docx* file in the final line ➓. Of course, in real
    life, you’d want to use a less suspicious filename than *ciphertext_message_letterhead.docx*!
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦超过了真实消息的长度，for循环将继续添加假消息的剩余部分——在这种情况下，是库尔茨先生的签名信息——并在最后一行➓将文档保存为Word *.docx*文件。当然，在现实中，你可能会使用一个不那么可疑的文件名，而不是*密文_消息_信头.docx*！
- en: Note that, because you’re using a for loop based on the fake message, appending
    any more hidden lines after the for loop ends—that is, after you reach the end
    of the items in the fake list—is impossible. If you want more space, you must
    enter hard returns at the bottom of the fake message, but be careful not to add
    so many that you force a page break and create a mysterious empty page!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于你使用的是基于假消息的for循环，for循环结束后无法再附加任何更多的隐藏行——也就是说，在你遍历完假消息列表中的所有项后。如果你需要更多的空间，必须在假消息的底部输入硬回车，但要小心不要加得太多，以免强制分页并创建一个神秘的空白页！
- en: Run the program, open the saved Word document, use CTRL-A to select all the
    text, and then set the Highlight color (see [Figure 6-4](ch06.xhtml#ch06fig4))
    to dark gray to see both messages. The secret message should be revealed ([Figure
    6-10](ch06.xhtml#ch06fig10)).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，打开保存的Word文档，使用CTRL-A选择所有文本，然后将高亮颜色设置为深灰色（参见[图6-4](ch06.xhtml#ch06fig4)），以查看两个消息。秘密消息应被揭示出来（[图6-10](ch06.xhtml#ch06fig10)）。
- en: '![image](../images/f0117-01.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0117-01.jpg)'
- en: '*Figure 6-10: Word document highlighted in dark gray to show both the fake
    message and the unencrypted real message*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-10：Word文档用深灰色高亮显示，展示假消息和未加密的真实消息*'
- en: '***Adding the Vigenère Cipher***'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加维吉尼亚密码***'
- en: 'The code so far uses the plaintext version of the real message, so anyone who
    changes the document’s highlight color will be able to read and understand the
    sensitive information in it. Since you know Mr. Kurtz encrypted this using the
    Vigenère cipher, go back and alter the code to replace the plaintext with the
    encrypted text. To do this, find the following line:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的代码使用了真实消息的明文版本，因此任何改变文档高亮颜色的人都能读取并理解其中的敏感信息。既然你知道库尔茨先生使用了维吉尼亚密码加密这个消息，那就回去修改代码，将明文替换为加密文本。为此，找到以下行：
- en: real_text = docx.Document('realMessage.docx')
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: real_text = docx.Document('realMessage.docx')
- en: 'This line loads the real message as plaintext, so change the filename to the
    one shown here in bold:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码加载真实消息的明文，因此请将文件名更改为此处用粗体显示的文件名：
- en: real_text = docx.Document('realMessage_Vig.docx')
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: real_text = docx.Document('realMessage_Vig.docx')
- en: Rerun the program and again reveal the hidden text by selecting the whole document
    and setting the Highlight color to dark gray ([Figure 6-11](ch06.xhtml#ch06fig11)).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行程序，再次通过选择整个文档并将高亮颜色设置为深灰色来揭示隐藏的文本（见[图 6-11](ch06.xhtml#ch06fig11)）。
- en: '![image](../images/f0118-01.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0118-01.jpg)'
- en: '*Figure 6-11: Word document highlighted in dark gray to show both the fake
    message and the encrypted real message*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-11：用深灰色突出显示的 Word 文档，显示虚假消息和加密的真实消息*'
- en: The secret message should be visible but unreadable to anyone who cannot interpret
    the cipher. Compare the encrypted message in [Figure 6-11](ch06.xhtml#ch06fig11)
    to the unencrypted version in [Figure 6-10](ch06.xhtml#ch06fig10). Note that numbers
    and the % sign occur in both versions. These were retained to demonstrate the
    potential pitfalls related to the encryption choice. You would want to augment
    the Vigenère cipher to include these characters—or just spell them out. That way,
    even if your message is discovered, you leave as few clues as possible as to the
    subject matter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密消息应该对无法解读密码的人可见，但无法阅读。比较[图 6-11](ch06.xhtml#ch06fig11)中的加密消息和[图 6-10](ch06.xhtml#ch06fig10)中的未加密版本。请注意，数字和
    % 符号在两个版本中都有出现。它们被保留下来，以展示与加密选择相关的潜在问题。你应该增强维吉尼亚密码，以包括这些字符——或者直接将它们拼写出来。这样，即使你的消息被发现，你也尽可能少地留下关于主题的线索。
- en: If you want to encode your own message with the Vigenère cipher, do an internet
    search for “online Vigenère encoder.” You’ll find multiple sites, such as *[http://www.cs.du.edu/~snarayan/crypt/vigenere.html](http://www.cs.du.edu/~snarayan/crypt/vigenere.html)*,
    that let you type or paste in plaintext. And if you want to write your own Python
    program for encrypting with the Vigenère cipher, see *Cracking Codes with Python*
    (No Starch Press, 2018) by Al Sweigart.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想用维吉尼亚密码编码自己的消息，可以在网上搜索“在线维吉尼亚编码器”。你会找到多个网站，比如 *[http://www.cs.du.edu/~snarayan/crypt/vigenere.html](http://www.cs.du.edu/~snarayan/crypt/vigenere.html)*，它们允许你输入或粘贴明文。如果你想自己写一个用维吉尼亚密码加密的
    Python 程序，可以参考 Al Sweigart 的《*用 Python 破解密码*》（No Starch Press，2018）。
- en: If you play around with your own real messages, encrypted or not, make sure
    you’re using the same font as in the fake message. A font is both a typeface,
    like Helvetica Italic, and a size, such as 12\. Remember from “[Considering Font
    Types, Kerning, and Tracking](ch06.xhtml#lev134)” on [page 109](ch06.xhtml#page_109)
    that if you try to mix fonts, especially proportional and monospace fonts, the
    hidden message lines may wrap, resulting in uneven spacing between paragraphs
    of the real message.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用自己真实的消息进行尝试，无论是否加密，都请确保使用与虚假消息相同的字体。字体既是字型，比如 Helvetica Italic，也是大小，比如 12。记住在“[考虑字体类型、字距和字形](ch06.xhtml#lev134)”一节中，[第109页](ch06.xhtml#page_109)提到过，如果你尝试混合字体，特别是比例字体和等宽字体，隐藏的消息行可能会换行，从而导致真实消息段落之间的间距不均。
- en: '**Detecting the Hidden Message**'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检测隐藏消息**'
- en: Could Joan Watson, or any other detective, have found your hidden message quickly?
    The truth is, probably not. In fact, as I write these words, I am watching an
    episode of *Elementary* where Joan is busy investigating a company by reading
    through a box of email printouts! The use of the Vigenère cipher may have been
    just a bit of lazy writing in an overall intelligently crafted series. Still,
    we can speculate on what might give you away.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Joan Watson 或其他侦探能否迅速找到你的隐藏消息？事实上，可能不行。实际上，在我写下这些文字时，我正在观看一集《*Elementary*》，其中
    Joan 正忙着通过阅读一箱电子邮件打印件来调查一家公司！维吉尼亚密码的使用可能仅仅是一个懒散的写作手法，尽管这是一部整体构思巧妙的剧集。但我们仍然可以推测出可能暴露你消息的原因。
- en: Since the final bid was probably not sent until close to the bid date, the search
    could be limited to correspondence sent *after* the bid was finalized, thereby
    eliminating a lot of noise. Of course, a detective won’t know exactly what they’re
    looking for—or even if there *is* a mole—which leaves a large search space. And
    there’s always the possibility that the information was passed in a phone conversation
    or clandestine meeting.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 由于最终的投标可能直到接近投标日期才发送，因此搜索可以仅限于投标最终确定后发送的通信，从而消除许多噪音。当然，侦探不可能确切知道他们在寻找什么——甚至是否*有*内鬼——这就留下了一个很大的搜索空间。而且总有可能信息是通过电话交谈或秘密会议传递的。
- en: Assuming there was a manageable volume of email and a hidden-message hypothesis
    was being pursued, an investigator might detect your invisible ink in several
    ways. For example, the Word spellchecker will not flag the white, nonsensical
    encrypted words as long as they haven’t been made visible. If, as a check, you
    swiped and reset the font color on some of the hidden words, they will be permanently
    compromised, even after their color has been restored to white. The spellchecker
    will underline them with an incriminating red squiggly line (see [Figure 6-12](ch06.xhtml#ch06fig12)).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 假设邮件的数量在可管理范围内，并且正在进行隐藏信息的假设，调查人员可能会通过多种方式检测到你的隐形墨水。例如，Word 拼写检查器不会标记白色的无意义加密词，前提是这些词尚未被显示出来。如果你检查并重设了某些隐藏词的字体颜色，即使这些词的颜色已经恢复为白色，它们也会被永久性地泄露。拼写检查器将用一个令人怀疑的红色波浪线标出它们（见[图
    6-12](ch06.xhtml#ch06fig12)）。
- en: '![image](../images/f0119-01.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0119-01.jpg)'
- en: '*Figure 6-12: Previously revealed invisible encrypted words underlined by the
    Word Spelling and Grammar tool*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-12：Word 拼写和语法工具下划线显示的先前暴露的隐形加密词*'
- en: If the investigating detective uses an alternative to Word to open the document,
    the product’s spellchecker will most likely reveal the hidden words (see [Figure
    6-13](ch06.xhtml#ch06fig13)). This risk is mitigated somewhat by the dominance
    of Microsoft Word in the marketplace.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调查人员使用非 Word 软件打开文档，该产品的拼写检查器很可能会显示隐藏的单词（见[图 6-13](ch06.xhtml#ch06fig13)）。不过，由于
    Microsoft Word 在市场上的主导地位，这一风险在某种程度上得到缓解。
- en: '![image](../images/f0120-01.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0120-01.jpg)'
- en: '*Figure 6-13: The spellchecker in LibreOffice Writer will highlight the invisible
    words.*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-13：LibreOffice Writer 中的拼写检查器将突出显示隐形单词。*'
- en: Second, using CTRL-A to highlight all the text within Word won’t reveal the
    hidden text, but it would indicate that some blank lines are longer than others
    (see [Figure 6-14](ch06.xhtml#ch06fig14)), suggesting to the very observant that
    something is amiss.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，使用 CTRL-A 全选 Word 中的所有文本并不会显示隐藏的文本，但它会表明某些空白行比其他空白行更长（见[图 6-14](ch06.xhtml#ch06fig14)），这会让细心的观察者意识到可能有什么不对劲。
- en: '![image](../images/f0120-02.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0120-02.jpg)'
- en: '*Figure 6-14: Selecting the whole Word document reveals differences in the
    length of blank lines.*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-14：选择整个 Word 文档可以显示空白行长度的差异。*'
- en: Third, opening the Word document using the preview functionality in some email
    software may reveal the hidden text when the contents are selected through swiping
    or using CTRL-A ([Figure 6-15](ch06.xhtml#ch06fig15)).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，使用某些电子邮件软件的预览功能打开 Word 文档时，当内容通过滑动或使用 CTRL-A 选择时，可能会显示隐藏的文本（见[图 6-15](ch06.xhtml#ch06fig15)）。
- en: '![image](../images/f0121-01.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0121-01.jpg)'
- en: '*Figure 6-15: Selecting the whole document in the Yahoo! Mail Preview panel
    reveals the hidden text.*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-15：在 Yahoo! Mail 预览面板中选择整个文档可以显示隐藏的文本。*'
- en: But while selecting hidden text in the Yahoo! Mail Preview panel reveals the
    text, the same is not true in the Microsoft Outlook Preview panel in [Figure 6-16](ch06.xhtml#ch06fig16).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在 Yahoo! Mail 预览面板中选择隐藏文本会显示文本，而在[图 6-16](ch06.xhtml#ch06fig16)中的 Microsoft
    Outlook 预览面板中则不会显示。
- en: '![image](../images/f0121-02.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0121-02.jpg)'
- en: '*Figure 6-16: Selecting the whole document in the Microsoft Outlook Preview
    panel does not reveal the hidden text.*'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-16：在 Microsoft Outlook 预览面板中选择整个文档无法显示隐藏的文本。*'
- en: Finally, saving the Word document as a plain text (**.txt*) file would remove
    all formatting and leave the hidden text exposed ([Figure 6-17](ch06.xhtml#ch06fig17)).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 Word 文档保存为纯文本（**.txt**）文件会去除所有格式并将隐藏的文本暴露出来（见[图 6-17](ch06.xhtml#ch06fig17)）。
- en: '![image](../images/f0122-01.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0122-01.jpg)'
- en: '*Figure 6-17: Saving the Word document as a plain text (**.txt*) file reveals
    the hidden text.*'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-17：将 Word 文档保存为纯文本（**.txt**）文件可以显示隐藏的文本。*'
- en: To conceal a secret message with steganography, you have to conceal not only
    the *contents* of the message but also the fact that a message even *exists*.
    Our electronic invisible ink can’t always guarantee this, but from a mole’s point
    of view, the weaknesses just listed involve either them making a mistake, which
    could theoretically be controlled, or an investigator taking a dedicated and unlikely
    action, such as swiping text, saving files in a different format, or using a less-common
    word processor. Assuming the mole in *Elementary* considered these acceptable
    risks, electronic invisible ink provides a plausible explanation for why the internal
    company investigation failed.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过隐写术隐藏一条秘密信息，你不仅需要隐藏信息的*内容*，还要隐藏信息*存在*这一事实。我们的电子隐形墨水并不总是能保证这一点，但从间谍的角度来看，刚才列出的弱点要么是他们犯了错误，这在理论上是可以控制的，要么是调查人员采取了专门且不太可能的行动，比如擦除文本、将文件保存为不同格式，或使用不太常见的文字处理软件。假设《Elementary》中间谍考虑到这些是可以接受的风险，电子隐形墨水为公司内部调查失败提供了一个合理的解释。
- en: '**Summary**'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you used steganography to hide an encrypted message within
    a Microsoft Word document. You used a third-party module, called python-docx,
    to directly access and manipulate the document using Python. Similar third-party
    modules are available for working with other popular document types, like Excel
    spreadsheets.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你使用隐写术将加密信息隐藏在 Microsoft Word 文档中。你使用了一个名为 python-docx 的第三方模块，通过 Python
    直接访问和操作该文档。类似的第三方模块也可以用于处理其他流行的文档类型，如 Excel 表格。
- en: '**Further Reading**'
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: You can find online documentation for python-docx at *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    and *[https://pypi.python.org/pypi/python-docx](https://pypi.python.org/pypi/python-docx)*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    和 *[https://pypi.python.org/pypi/python-docx](https://pypi.python.org/pypi/python-docx)*
    上找到 python-docx 的在线文档。
- en: '*Automate the Boring Stuff with Python* (No Starch Press, 2015) by Al Sweigart,
    covers modules that allow Python to manipulate PDFs, Word files, Excel spreadsheets,
    and more. [Chapter 13](ch13.xhtml#ch13) contains a useful tutorial on python-docx,
    and the appendix covers installing third-party modules with pip.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '*用 Python 自动化处理琐事*（No Starch Press，2015）由 Al Sweigart 编写，涵盖了允许 Python 操作 PDF、Word
    文件、Excel 表格等模块。[第13章](ch13.xhtml#ch13)包含了关于 python-docx 的有用教程，附录中介绍了如何使用 pip 安装第三方模块。'
- en: You can find beginner-level Python programs for working with ciphers in *Cracking
    Codes with Python* (No Starch Press, 2018) by Al Sweigart.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Al Sweigart 的 *用 Python 破解密码*（No Starch Press，2018）一书中找到适用于密码学初学者的 Python
    程序。
- en: '*Mysterious Messages* (The Penguin Group, 2009) by Gary Blackwood is an interesting
    and well-illustrated history of steganography and cryptography.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*神秘信息*（The Penguin Group，2009）由 Gary Blackwood 编写，是一本关于隐写术和密码学的有趣且图文并茂的历史书。'
- en: '**Practice Project: Checking the Number of Blank Lines**'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**实践项目：检查空行数量**'
- en: Improve the hidden message program by writing a function that compares the number
    of blank lines in the fake message to the number of lines in the real message.
    If there is insufficient space to hide the real message, have the function warn
    the user and tell them how many blank lines to add to the fake message. Insert
    and call the function in a copy of the *elementary_ink.py* code, just before loading
    the template document. You can find a solution in the appendix and online at *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    in *elementary_ink_practice.py*. For testing, download *realMessageChallenge.docx*
    from the same site and use it for the real message.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写一个函数，比较伪消息中的空行数与真实消息中的行数，来改进隐藏消息的程序。如果没有足够的空间来隐藏真实消息，函数应提醒用户并告诉他们需要向伪消息中添加多少个空行。在
    *elementary_ink.py* 代码的副本中插入并调用该函数，放在加载模板文档之前。你可以在附录中和在线网站 *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    上的 *elementary_ink_practice.py* 中找到解决方案。测试时，从同一网站下载 *realMessageChallenge.docx*
    并将其用作真实消息。
- en: '**Challenge Project: Using Monospace Font**'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**挑战项目：使用等宽字体**'
- en: Rewrite the *elementary_ink.py* code for monospace fonts and hide your own short
    message in the spaces between words. See “[Considering Font Types, Kerning, and
    Tracking](ch06.xhtml#lev134)” on [page 109](ch06.xhtml#page_109) for a description
    of monospace fonts. As always with challenge projects, no solution is provided.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 重写*elementary_ink.py*代码以使用等宽字体，并将你的短消息隐藏在单词之间的空白处。有关等宽字体的描述，请参阅[《考虑字体类型、字距和行距》](ch06.xhtml#lev134)在[第109页](ch06.xhtml#page_109)中的内容。像往常一样，对于挑战项目，不提供解决方案。
