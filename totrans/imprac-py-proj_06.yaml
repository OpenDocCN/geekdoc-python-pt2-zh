- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: WRITING IN INVISIBLE INK**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用**隐形墨水写字**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'In the fall of 2012, the crime drama *Elementary* debuted on the CBS television
    network. A reimagining of the Sherlock Holmes mythos set in 21st-century New York,
    it starred Jonny Lee Miller as Holmes and Lucy Liu as his sidekick, Dr. Joan Watson.
    In a 2016 episode (“You’ve Got Me, Who’s Got You?”), Morland Holmes, Sherlock’s
    estranged father, hires Joan to find a mole in his organization. She quickly solves
    the case by discovering a Vigenère cipher in an email. But some fans of the show
    were dissatisfied: the Vigenère cipher is hardly subtle, so how could a man as
    intelligent as Morland Holmes miss finding it on his own?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年秋季，犯罪剧*Elementary*在CBS电视网络首播。该剧是对福尔摩斯神话的重新演绎，设定在21世纪的纽约，由乔尼·李·米勒饰演福尔摩斯，刘玉玲饰演他的伙伴乔安·沃森博士。在2016年的一集中（“你抓住我，谁抓住你？”），福尔摩斯与父亲莫兰德·福尔摩斯关系疏远，他雇佣了沃森帮助他找出组织中的间谍。沃森通过在一封邮件中发现维吉尼亚密码，很快解决了案件。但一些剧迷不满：维吉尼亚密码并不微妙，像莫兰德·福尔摩斯这样聪明的人怎么会没发现呢？
- en: In this project, you’ll reconcile this dilemma using steganography, but not
    with a null cipher as in [Chapter 5](ch05.xhtml#ch05). To hide this message, you’ll
    use a third-party module called python-docx that will allow you to conceal text
    by directly manipulating Microsoft Word documents using Python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用隐写术来解决这个困境，但不像[第5章](ch05.xhtml#ch05)中的空密码那样。为了隐藏这条消息，你将使用一个名为python-docx的第三方模块，通过直接操作Microsoft
    Word文档来隐藏文本。
- en: '**Project #12: Hiding a Vigenère Cipher**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 #12：隐藏维吉尼亚密码**'
- en: In the *Elementary* episode, Chinese investors hire Morland Holmes’s consulting
    company to negotiate with the Colombian government for petroleum licenses and
    drilling rights. A year has passed, and at the last moment a competitor swoops
    in and clinches the deal, leaving the Chinese investors high and dry. Morland
    suspects betrayal by a member of his staff and asks Joan Watson to investigate
    alone. Joan identifies the mole by finding a Vigenère cipher in one of his emails.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Elementary*的这一集中，中国投资者聘请了莫兰德·福尔摩斯的咨询公司，与哥伦比亚政府谈判石油许可证和钻探权。一年过去了，最后一刻，一名竞争对手突然出手，成功达成交易，留下中国投资者空手而回。莫兰德怀疑公司内部有人背叛，并要求沃森独自调查。沃森通过在他的邮件中发现维吉尼亚密码，快速识别出了间谍。
- en: '**SPOILER ALERT**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**剧透警告**'
- en: '*The decrypted contents of the cipher are never mentioned, and the mole is
    murdered in a subsequent episode.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码的解密内容从未被提及，间谍在随后的剧集中被谋杀。*'
- en: The *Vigenère cipher*, also known as the unbreakable cipher, is arguably the
    most famous cipher of all time. Invented in the 16th century by the French scholar
    Blaise de Vigenère, it is a polyalphabetic substitution cipher that, in the most
    commonly used version, employs a single keyword. This keyword, such as *BAGGINS*,
    is printed repeatedly over the plaintext, as in the message shown in [Figure 6-1](ch06.xhtml#ch06fig1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*维吉尼亚密码*，也被称为无法破解的密码，可能是有史以来最著名的密码。它由法国学者布莱兹·德·维吉尼亚（Blaise de Vigenère）于16世纪发明，是一种多表替代密码，在最常用的版本中，使用一个单一的关键词。这个关键词，比如*BAGGINS*，会反复印刷在明文上，如[图6-1](ch06.xhtml#ch06fig1)中所示的消息。'
- en: '![image](../images/f0106-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-01.jpg)'
- en: '*Figure 6-1: A plaintext message with the Vigenère cipher keyword* BAGGINS
    *printed above*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-1：带有维吉尼亚密码关键词*BAGGINS*的明文消息*'
- en: A table, or *tableau*, of the alphabet is then used to encrypt the message.
    [Figure 6-2](ch06.xhtml#ch06fig2) is an example of the first five rows of a Vigenère
    tableau. Notice how the alphabet shifts to the left by one letter with each row.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用字母表的表格或*表格*来加密消息。[图6-2](ch06.xhtml#ch06fig2)是维吉尼亚密码表前五行的示例。注意每一行的字母表都向左移动一个字母。
- en: '![image](../images/f0106-02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-02.jpg)'
- en: '*Figure 6-2: Portion of a Vigenère tableau*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-2：维吉尼亚密码表的一部分*'
- en: The keyword letter above the plaintext letter determines which row to use for
    the encryption. For example, to encrypt the *s* in *speak*, note that the keyword
    letter above it is *B*. Go down to the B row and read across to where the plaintext
    *s* is at the top of the column. Use the *T* at the intersection for the ciphertext
    letter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 明文上方的关键词字母决定了用于加密的行。例如，要加密*speak*中的*s*，请注意其上方的关键词字母是*B*。向下找到B行，然后横向查找明文中*s*所在的列。使用交点处的*T*作为密文字母。
- en: '[Figure 6-3](ch06.xhtml#ch06fig3) shows an example of the full message encrypted
    with the Vigenère cipher. This kind of text would surely draw attention and become
    an object of scrutiny if it were visible in a document!'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0107-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-3: A message encrypted with the Vigenère cipher*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The Vigenère cipher remained unbroken until the mid-19th century, when Charles
    Babbage, inventor of the precursor to the computer, realized that a short keyword
    used with a long message would result in repeating patterns that could reveal
    the length of the keyword and, ultimately, the key itself. The breaking of the
    cipher was a tremendous blow to professional cryptography, and no significant
    advancements were made in the field during the Victorian era of the original Holmes
    and Watson.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The presence of this cipher is what causes “suspension of disbelief” issues
    with the *Elementary* episode. Why would an outside consultant be needed to find
    such a clearly suspicious email? Let’s see if we can come up with a plausible
    explanation using Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**THE OBJECTIVE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Assume you are the corporate mole in the episode and use Python to hide a secret
    message summarizing bid details within an official-looking text document. Start
    with an unencrypted message and finish with an encrypted version.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**The Platform**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your program should work with ubiquitous word-processing software, as the output
    needs to be sharable between different corporations. This implies use of the Microsoft
    Office Suite for Windows or compatible versions for macOS or Linux. And restricting
    the output to a standard Word document makes hardware issues Microsoft’s responsibility!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Accordingly, this project was developed with Word 2016 for Windows, and the
    results checked with Word for Mac v16.16.2\. If you don’t have a license for Word,
    you can use the free Microsoft Office Online app, available at *[https://products.office.com/en-us/office-online](https://products.office.com/en-us/office-online)*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: If you currently use alternatives to Word, like LibreOffice Writer or OpenOffice
    Writer, you can open and view the Word (*.docx*) files used and produced in this
    project; however, the hidden message will most likely be compromised, as discussed
    in “[Detecting the Hidden Message](ch06.xhtml#lev143)” on [page 119](ch06.xhtml#page_119).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '**The Strategy**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’re an accountant with a beginner’s knowledge of Python, and you work for
    a very intelligent and suspicious man. The project you work on is highly proprietary,
    with controls—such as email filters—to maintain confidentiality. And if you manage
    to sneak out a message, a thorough investigation will surely follow. So, you need
    to hide a clearly suspicious message in an email, either directly or as an attachment,
    yet evade initial detection and later internal audits.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some constraints:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: You can’t send the message directly to the competing corporation, only to an
    intermediary.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to scramble the message to evade the email filters that will search
    for keywords.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to hide the encrypted message from sight so as not to arouse suspicion.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The intermediary would be easy to set up, and free encryption sites are easy
    to find on the internet—but the last item is more problematic.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Steganography is the answer, but as you saw in the previous chapter, hiding
    even a short message in a null cipher is no easy task. Alternative techniques
    involve shifting lines of text vertically or words horizontally by small amounts,
    changing the length of letters, or using the file’s metadata—but you’re an accountant
    with limited knowledge of Python and even less time. If only there were an easy
    way, like invisible ink in the old days.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Invisible Ink***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Invisible ink, in this age of electronic ink, might be just crazy enough to
    work! An invisible font would easily foil a visual perusal of online documents
    and won’t even exist in paper printouts. Since the contents would be encrypted,
    digital filters looking for keywords like *bid* or the Spanish names of the producing
    oil basins would find nothing. And best of all, invisible ink is easy to use—just
    set the foreground text to the background color.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Formatting text and changing its color requires a word processor like Microsoft
    Word. To make invisible electronic ink in Word, you just need to select a character,
    word, or line and set the font color to white. The recipient of the message would
    then need to select the whole document and use the Highlighter tool (see [Figure
    6-4](ch06.xhtml#ch06fig4)) to paint the selected text black, thus concealing the
    standard black letters and bringing the hidden white letters into view.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0108-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-4: The Text Highlight Color tool in Word 2016*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Just selecting the document in Word won’t reveal the white text ([Figure 6-5](ch06.xhtml#ch06fig5)),
    so someone would have to be very suspicious indeed to find these hidden messages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0109-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-5: Top: a portion of a Word document with the fake message visible;
    middle: the document selected with CTRL-A; bottom: the real message revealed using
    the Highlighter tool with the highlight color set to black*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you can accomplish all this in a word processor alone, but there
    are two cases where a Pythonic approach is preferable: 1) when you have to encrypt
    a long message and don’t want to manually insert and hide all the lines and 2)
    when you need to send more than a few messages. As you’ll see, a short Python
    program will greatly simplify the process!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**Considering Font Types, Kerning, and Tracking**'
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Placing the invisible text is a key design decision. One option is to use the
    spaces between the visible words of the fake message, but this could trigger spacing-related
    issues that would make the final product look suspicious.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '*Proportional fonts* use variable character widths to improve readability.
    Example fonts are Arial and Times New Roman. *Monospace fonts* use a constant
    character width to support the alignment of text and the recognition of individual
    characters, especially thin ones such as the ( or { characters. As a result, monospace
    fonts are popular in programming interfaces. Example fonts are Consolas and Courier
    New.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*比例字体*使用可变字符宽度来提高可读性。例如字体包括Arial和Times New Roman。*等宽字体*使用固定的字符宽度来支持文本对齐和单个字符的识别，尤其是像（或{这样的细字符。因此，等宽字体在编程界面中非常流行。例如字体包括Consolas和Courier
    New。'
- en: '*Kerning* is a typographical process for adjusting the spacing and overlap
    between individual character glyphs in order to improve their visual appeal. A
    process called *tracking* is used to adjust the character spacing across entire
    lines or blocks of text for the same purpose. These adjustments aid legibility
    and readability, ensuring that letters aren’t so close together that they’re indistinguishable
    or so far apart that words aren’t recognizable. Note that we read words, not letters.
    If you doubt it, read this: peopl raed wrds nt lttrs. Of corase, contxt hlps.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*字距调整*是通过调整单个字符字形之间的间距和重叠，以改善其视觉效果的排版过程。一个名为*字间距调整*的过程用于调整整个行或块文本的字符间距，目的相同。这些调整有助于可读性和可识别性，确保字母不会因为过于紧密而无法区分，或者因为过于分开而无法识别单词。请注意，我们是阅读单词，而不是字母。如果你对此有疑问，可以读一读这个：peopl
    raed wrds nt lttrs。显然，*上下文*有帮助。'
- en: 'Kerning between pairs of letters is performed first, followed by tracking,
    during which the relative kerning of the letter pairs is preserved. As mentioned
    earlier, these variable widths and automatic corrections can cause problems when
    you’re trying to hide characters between words that use proportional fonts:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 字母对之间的字距调整首先进行，然后是字间距调整，在此过程中字母对的相对字距保持不变。如前所述，当你尝试在使用比例字体的单词之间隐藏字符时，这些可变宽度和自动修正可能会导致问题：
- en: '| To a great mind nothing is little. | *Proportional font with no hidden letters*
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *比例字体，没有隐藏字母* |'
- en: '| To a great mind nothing is little. | *Proportional font with hidden letters
    between words* |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *比例字体，单词之间隐藏了字母* |'
- en: '| To$a3great.mind2nothingKis little. | *Hidden letters revealed ($3.2K)* |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *隐藏的字母已显示（$3.2K）* |'
- en: '|  |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: '| To a great mind nothing is little. | *Monospace font with no hidden letters*
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *等宽字体，没有隐藏字母* |'
- en: '| To a great mind nothing is little. | *Monospace font with hidden letters
    between words.* |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *等宽字体，单词之间隐藏了字母* |'
- en: '| To$a3great.mind2nothingKis little. | *Hidden letters revealed ($3.2K)* |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 对伟大的思想来说，微不足道的事物也是重要的。 | *隐藏的字母已显示（$3.2K）* |'
- en: If you use a monospace font, the consistent spacing provides a convenient hiding
    place. But since professional correspondence is more likely to use proportional
    fonts, the invisible ink technique should focus on the more easily controlled
    spaces between lines.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用等宽字体，一致的间距提供了一个方便的隐藏位置。但由于专业通信更可能使用比例字体，因此隐形墨水技术应关注行间距，这些空间更容易控制。
- en: Using empty lines between paragraphs is the easiest method to program and to
    read, and it shouldn’t require a long fake message because you can summarize the
    salient points of a bid succinctly. This is important since you don’t want empty
    pages appended to your visible fake message. Consequently, the footprint for your
    hidden message should be smaller than for your fake one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在段落之间使用空行是最简单的编程和阅读方法，而且不需要长时间的虚假信息，因为你可以简明扼要地总结出竞标的要点。这很重要，因为你不希望在可见的虚假信息后附加空白页。因此，你隐藏信息的占位符应比虚假信息的占位符更小。
- en: '**Avoiding Issues**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**避免问题**'
- en: When you’re developing software, a good question to ask repeatedly is “How can
    the user screw this up?” One thing that can go wrong here is that the encryption
    process will change the letters in your hidden message so that kerning and tracking
    adjustments may push a word past the line break, causing an automatic line wrap.
    This will result in uneven and suspicious-looking spaces between paragraphs in
    the fake message. One way to avoid this is to press ENTER a little early as you’re
    typing in each line of the real message. This will leave some space at the end
    of the line to accommodate changes due to encryption. Of course, you’ll still
    need to verify the results. Assuming code works is as risky as assuming James
    Bond is dead!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '***Manipulating Word Documents with python-docx***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A free third-party module called python-docx allows Python to manipulate Microsoft
    Word (.*docx*) files. To download and install the third-party modules mentioned
    in this book, you’ll use the Preferred Installer Program (pip), a package management
    system that makes it easy to install Python-based software. For Python 3 on Windows
    and macOS, versions 3.4 and later come with pip preinstalled; for Python 2, pip
    preinstallation starts with version 2.7.9\. Linux users may have to install pip
    separately. If you find you need to install or upgrade pip, see the instructions
    at *[https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/)*
    or do an online search on installing pip on your particular operating system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: With the pip tool, you can install python-docx by simply running pip install
    python-docx in a command, PowerShell, or terminal window, depending on your operating
    system. Online instructions for python-docx are available at *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, you need to understand the paragraph and run objects. The
    python-docx module organizes data types using three objects in the following hierarchy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'document: The whole document with a list of paragraph objects'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'paragraph: A block of text separated by the use of the ENTER key in Word; contains
    a list of run object(s)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'run: A connected string of text with the same *style*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A paragraph is considered a *block-level* object, which python-docx defines
    as follows: “a block-level item flows the text it contains between its left and
    right edges, adding an additional line each time the text extends beyond its right
    boundary. For a paragraph object, the boundaries are generally the page margins,
    but they can also be column boundaries if the page is laid out in columns, or
    cell boundaries if the paragraph occurs inside a table cell. A table is also a
    block-level object.”'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: A paragraph object has a variety of attributes that specify its placement within
    a container—typically a page—and the way it divides its contents into separate
    lines. You can access the formatting attributes of a paragraph with the ParagraphFormat
    object available through the ParagraphFormat attribute of the paragraph, and you
    can set all the paragraph attributes using a *paragraph style grouping* or apply
    them directly to a paragraph.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: A run is an *inline-level* object that occurs within paragraphs or other block-level
    objects. A run object has a read-only font attribute providing access to a font
    object. A font object provides attributes for getting and setting the character
    formatting for that run. You’ll need this feature for setting your hidden message’s
    text color to white.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '*Style* refers to a collection of attributes in Word for paragraphs and characters
    (run objects) or a combination of both. Style includes familiar attributes such
    as font, color, indention, line spacing, and so on. You may have noticed groupings
    of these displayed in the Styles pane on Word’s Home ribbon (see [Figure 6-6](ch06.xhtml#ch06fig6)).
    Any change in style—to even a single letter—requires the creation of a new run
    object. Currently, only styles that are in the opened *.docx* file are available.
    This may change in future versions of python-docx.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0111-01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-6: The Styles pane in Microsoft Word 2016*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: You can find full documentation on the use of styles in python-docx at *[http://python-docx.readthedocs.io/en/latest/user/styles-using.html](http://python-docx.readthedocs.io/en/latest/user/styles-using.html)*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of paragraphs and runs as python-docx sees them:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '*I am a single paragraph of one run because all my text is the same style.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '*I am a single paragraph with two runs. **I am the second run because my style
    changed to bold.***'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '*I am a single paragraph with three runs. **I am the second run because my
    style changed to bold. The third run is my last** word.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: If any of this seems unclear, don’t fret. You don’t need to know python-docx
    in any detail. As with any piece of code, you mainly need to know *what you want
    to do*. An online search should yield plenty of useful suggestions and complete
    samples of code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '*For this to work smoothly, don’t change styles within the real (hidden) message
    and make sure you end every line in a hard return by manually pressing the ENTER
    key. Unfortunately, Word doesn’t have a special character for soft returns caused
    by automatic word wrapping. So, you can’t go into an existing Word document with
    automatic line breaks and use Find and Replace to change them all to hard returns.
    Such is the life of a mole.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '***Downloading the Assets***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The external files you’ll need are downloadable from *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    and should be saved in the same folder as the code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '***template.docx*** An empty Word doc formatted with official Holmes Corporation
    styles, fonts, and margins'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '***fakeMessage.docx*** The fake message, without letterhead and date, in a
    Word document'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '***realMessage.docx*** The real message in plaintext, without letterhead and
    date, in a Word document'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '***realMessage_Vig.docx*** The real message encrypted with the Vigenère cipher'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '***example_template_prep.docx*** An example of the fake message used to create
    the template document (the program doesn’t require this file to run)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re using Word 2016, an easy way to make a blank template file is to
    write the fake message (including letterhead) and save the file. Then delete all
    the text and save the file again with a different name. When you assign this blank
    file to a variable with* python-docx*, all the existing styles will be retained.
    Of course, you could use a template file with the letterhead already included,
    but for the purpose of learning more about* python-docx*, we’ll build the letterhead
    here using Python.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Take a moment to view these first four documents in Word. These files comprise
    the inputs to the *elementary_ink.py* program. The fake and real messages—the
    second and third items listed—are also shown in [Figures 6-7](ch06.xhtml#ch06fig7)
    and [6-8](ch06.xhtml#ch06fig8).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0113-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-7: The “fake” text in the* fakeMessage.docx *file*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0113-02.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-8: The real message in the* realMessage.docx *file*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Note that the real message contains some numbers and special characters. These
    won’t be encrypted with the Vigenère tableau we’ll use, and I’ve included them
    to make that point. Ideally, they would be spelled out (for example, “three” for
    “3” and “percent” for “%”) for maximum secrecy when we add the Vigenère cipher
    later.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '**The Pseudocode**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following pseudocode describes how to load the two messages and the template
    document, interleave and hide the real message in blank lines using a white font,
    and then save the hybrid message.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Build assets:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: In Word, create an empty doc with desired formatting/styles (template)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: In Word, create an innocuous fake message that will be visible & have enough     blank
    lines to hold the real message
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: In Word, create the real message that will be hidden
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Import docx to allow manipulation of Word docs with Python
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Use docx module to load the fake & real messages as lists
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Use docx to assign the empty doc to a variable
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Use docx to add letterhead banner to empty doc
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Make counter variable for lines in real message
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Define function to format paragraph spacing with docx
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'For line in fake message:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'If line is blank and there are still lines in the real message:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Use docx & counter to fill blank with line from real message
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Use docx to set real message font color to white
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Advance counter for real message
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Use docx to write fake line
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Run paragraph spacing function
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Use docx to save final Word document
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '**The Code**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *elementary_ink.py* program in [Listing 6-1](ch06.xhtml#ch06list1) loads
    the real message, the fake message, and the empty template document. It hides
    the real message in the blank lines of the fake message using a white font, and
    then saves the hybrid message as an innocuous and professional-looking piece of
    correspondence that can be attached to an email. You can download the code from
    *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '***Importing python-docx, Creating Lists, and Adding a Letterhead***'
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 6-1](ch06.xhtml#ch06list1) imports python-docx, turns the lines of
    text in the fake and real messages into list items, loads the template document
    that sets the styles, and adds a letterhead.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '*elementary_ink.py,* part 1'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: import docx
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: ➊ from docx.shared import RGBColor, Pt
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '➋ # get text from fake message & make each line a list item'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: fake_text = docx.Document('fakeMessage.docx')
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: fake_list = []
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'for paragraph in fake_text.paragraphs:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: fake_list.append(paragraph.text)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '➌ # get text from real message & make each line a list item'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: real_text = docx.Document('realMessage.docx')
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: real_list = []
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'for paragraph in real_text.paragraphs:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: ➍ if len(paragraph.text) != 0:  # remove blank lines
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: real_list.append(paragraph.text)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '➎ # load template that sets style, font, margins, etc.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: doc = docx.Document('template.docx')
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '➏ # add letterhead'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: doc.add_heading('Morland Holmes', 0)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: subtitle = doc.add_heading('Global Consulting & Negotiations', 1)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: subtitle.alignment = 1
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: doc.add_heading('', 1)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: ➐ doc.add_paragraph('December 17, 2015')
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: doc.add_paragraph('')
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-1: Imports* python-docx*, loads important* .docx *files, and adds
    a letterhead*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: After importing the docx module—not as “python-docx”—use docx.shared to gain
    access to the color (RGBColor) and length (Pt) objects in the docx module ➊. These
    will allow you to change the font color and set the spacing between lines. The
    next two code blocks load the fake ➋ and real ➌ message Word documents as lists.
    Where the ENTER key was pressed in each Word document determines what items will
    be in these lists. For the real message to be hidden, remove any blank lines so
    that your message will be as short as possible ➍. Now you can use list indexes
    to merge the two messages and keep track of which is which.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Next, load the template document that contains the preestablished styles, fonts,
    and margins ➎. The docx module will write to this variable and ultimately save
    it as the final document.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: With the inputs loaded and prepped, format the letterhead of the final document
    to match that of the Holmes Corporation ➏. The add_heading() function adds a heading
    style paragraph with text and integer arguments. Integer 0 designates the highest-level
    heading, or Title style, inherited from the template document. The subtitle is
    formatted with 1, the next heading style available, and is center aligned, again
    with the integer 1 (0 = left justified, 2 = right justified). Note that, when
    you add the date, you don’t need to supply an integer ➐. When you don’t provide
    an argument, the default is to inherit from the existing style hierarchy, which
    in the template is left justified. The other statements in this block just add
    blank lines.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '***Formatting and Interleaving the Messages***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 6-2](ch06.xhtml#ch06list2) does the real work, formatting the spacing
    between lines and interleaving the messages.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '*elementary_ink.py,* part 2'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '➊ def set_spacing(paragraph):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '"""Use docx to set line spacing between paragraphs."""'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_format = paragraph.paragraph_format
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_format.space_before = Pt(0)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: paragraph_format.space_after = Pt(0)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: ➋ length_real = len(real_list)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: count_real = 0  # index of current line in real (hidden) message
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '# interleave real and fake message lines'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'for line in fake_list:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '➌ if count_real < length_real and line == "":'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: ➍ paragraph = doc.add_paragraph(real_list[count_real])
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: ➎ paragraph_index = len(doc.paragraphs) - 1
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '# set real message color to white'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: run = doc.paragraphs[paragraph_index].runs[0]
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: font = run.font
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '➏ font.color.rgb = RGBColor(255, 255, 255) # make it red to test'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: ➐ count_real += 1
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: ➑ paragraph = doc.add_paragraph(line)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: ➒ set_spacing(paragraph)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: ➓ doc.save('ciphertext_message_letterhead.docx')
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: print("Done")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-2: Formats paragraphs and interleaves lines of fake and real messages*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Define a function that formats the spacing between paragraphs using python-docx’s
    paragraph_format attribute ➊. Line spacing before and after the hidden line is
    set to 0 points to ensure that the output doesn’t have suspiciously large gaps
    between paragraphs, like the ones on the left-hand side of [Figure 6-9](ch06.xhtml#ch06fig9).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0116-01.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-9: Fake message line spacing without* python-docx *paragraph formatting
    (left) vs. with formatting (right)*'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Next, define the working space by getting the length of the list that holds
    the real message ➋. Remember that the hidden real message needs to be shorter
    than the visible fake message so that there are sufficient blank lines to hold
    it. Follow this by initiating a counter. The program will use it to keep track
    of which line (list item) it’s currently processing in the real message.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the list made from the fake message is the longest and sets the dimensional
    space for the real message, loop through the fake message using two conditionals:
    1) whether you’ve reached the end of the real message and 2) whether a line in
    the fake list is blank ➌. If there are still real message lines and the fake message
    line is blank, use count_real as an index for real_list and use python-docx to
    add it to the document ➍.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Get the index of the line you just added by taking the length of doc.paragraphs
    and subtracting 1 ➎. Then use this index to set the real message line to a run
    object (it will be the first run item [0] in the list, as the real message uses
    a single style) and set its font color to white ➏. Since the program has now added
    a line from the real list in this block, the count_real counter advances by 1
    ➐.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: The subsequent else block addresses the case where the line chosen from the
    fake list in the for loop isn’t empty. In this case, the fake message line is
    added directly to the paragraph ➑. Finish the for loop by calling the line spacing
    function, set_spacing() ➒.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Once the length of the real message has been exceeded, the for loop will continue
    to add the remainder of the fake message—in this case, Mr. Kurtz’s signature info—and
    save the document as a Word *.docx* file in the final line ➓. Of course, in real
    life, you’d want to use a less suspicious filename than *ciphertext_message_letterhead.docx*!
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Note that, because you’re using a for loop based on the fake message, appending
    any more hidden lines after the for loop ends—that is, after you reach the end
    of the items in the fake list—is impossible. If you want more space, you must
    enter hard returns at the bottom of the fake message, but be careful not to add
    so many that you force a page break and create a mysterious empty page!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Run the program, open the saved Word document, use CTRL-A to select all the
    text, and then set the Highlight color (see [Figure 6-4](ch06.xhtml#ch06fig4))
    to dark gray to see both messages. The secret message should be revealed ([Figure
    6-10](ch06.xhtml#ch06fig10)).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0117-01.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-10: Word document highlighted in dark gray to show both the fake
    message and the unencrypted real message*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '***Adding the Vigenère Cipher***'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The code so far uses the plaintext version of the real message, so anyone who
    changes the document’s highlight color will be able to read and understand the
    sensitive information in it. Since you know Mr. Kurtz encrypted this using the
    Vigenère cipher, go back and alter the code to replace the plaintext with the
    encrypted text. To do this, find the following line:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: real_text = docx.Document('realMessage.docx')
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'This line loads the real message as plaintext, so change the filename to the
    one shown here in bold:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: real_text = docx.Document('realMessage_Vig.docx')
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Rerun the program and again reveal the hidden text by selecting the whole document
    and setting the Highlight color to dark gray ([Figure 6-11](ch06.xhtml#ch06fig11)).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0118-01.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-11: Word document highlighted in dark gray to show both the fake
    message and the encrypted real message*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: The secret message should be visible but unreadable to anyone who cannot interpret
    the cipher. Compare the encrypted message in [Figure 6-11](ch06.xhtml#ch06fig11)
    to the unencrypted version in [Figure 6-10](ch06.xhtml#ch06fig10). Note that numbers
    and the % sign occur in both versions. These were retained to demonstrate the
    potential pitfalls related to the encryption choice. You would want to augment
    the Vigenère cipher to include these characters—or just spell them out. That way,
    even if your message is discovered, you leave as few clues as possible as to the
    subject matter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: If you want to encode your own message with the Vigenère cipher, do an internet
    search for “online Vigenère encoder.” You’ll find multiple sites, such as *[http://www.cs.du.edu/~snarayan/crypt/vigenere.html](http://www.cs.du.edu/~snarayan/crypt/vigenere.html)*,
    that let you type or paste in plaintext. And if you want to write your own Python
    program for encrypting with the Vigenère cipher, see *Cracking Codes with Python*
    (No Starch Press, 2018) by Al Sweigart.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: If you play around with your own real messages, encrypted or not, make sure
    you’re using the same font as in the fake message. A font is both a typeface,
    like Helvetica Italic, and a size, such as 12\. Remember from “[Considering Font
    Types, Kerning, and Tracking](ch06.xhtml#lev134)” on [page 109](ch06.xhtml#page_109)
    that if you try to mix fonts, especially proportional and monospace fonts, the
    hidden message lines may wrap, resulting in uneven spacing between paragraphs
    of the real message.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '**Detecting the Hidden Message**'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Could Joan Watson, or any other detective, have found your hidden message quickly?
    The truth is, probably not. In fact, as I write these words, I am watching an
    episode of *Elementary* where Joan is busy investigating a company by reading
    through a box of email printouts! The use of the Vigenère cipher may have been
    just a bit of lazy writing in an overall intelligently crafted series. Still,
    we can speculate on what might give you away.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Since the final bid was probably not sent until close to the bid date, the search
    could be limited to correspondence sent *after* the bid was finalized, thereby
    eliminating a lot of noise. Of course, a detective won’t know exactly what they’re
    looking for—or even if there *is* a mole—which leaves a large search space. And
    there’s always the possibility that the information was passed in a phone conversation
    or clandestine meeting.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Assuming there was a manageable volume of email and a hidden-message hypothesis
    was being pursued, an investigator might detect your invisible ink in several
    ways. For example, the Word spellchecker will not flag the white, nonsensical
    encrypted words as long as they haven’t been made visible. If, as a check, you
    swiped and reset the font color on some of the hidden words, they will be permanently
    compromised, even after their color has been restored to white. The spellchecker
    will underline them with an incriminating red squiggly line (see [Figure 6-12](ch06.xhtml#ch06fig12)).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0119-01.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-12: Previously revealed invisible encrypted words underlined by the
    Word Spelling and Grammar tool*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: If the investigating detective uses an alternative to Word to open the document,
    the product’s spellchecker will most likely reveal the hidden words (see [Figure
    6-13](ch06.xhtml#ch06fig13)). This risk is mitigated somewhat by the dominance
    of Microsoft Word in the marketplace.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0120-01.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-13: The spellchecker in LibreOffice Writer will highlight the invisible
    words.*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Second, using CTRL-A to highlight all the text within Word won’t reveal the
    hidden text, but it would indicate that some blank lines are longer than others
    (see [Figure 6-14](ch06.xhtml#ch06fig14)), suggesting to the very observant that
    something is amiss.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0120-02.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-14: Selecting the whole Word document reveals differences in the
    length of blank lines.*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Third, opening the Word document using the preview functionality in some email
    software may reveal the hidden text when the contents are selected through swiping
    or using CTRL-A ([Figure 6-15](ch06.xhtml#ch06fig15)).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0121-01.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-15: Selecting the whole document in the Yahoo! Mail Preview panel
    reveals the hidden text.*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: But while selecting hidden text in the Yahoo! Mail Preview panel reveals the
    text, the same is not true in the Microsoft Outlook Preview panel in [Figure 6-16](ch06.xhtml#ch06fig16).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0121-02.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-16: Selecting the whole document in the Microsoft Outlook Preview
    panel does not reveal the hidden text.*'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Finally, saving the Word document as a plain text (**.txt*) file would remove
    all formatting and leave the hidden text exposed ([Figure 6-17](ch06.xhtml#ch06fig17)).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0122-01.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-17: Saving the Word document as a plain text (**.txt*) file reveals
    the hidden text.*'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: To conceal a secret message with steganography, you have to conceal not only
    the *contents* of the message but also the fact that a message even *exists*.
    Our electronic invisible ink can’t always guarantee this, but from a mole’s point
    of view, the weaknesses just listed involve either them making a mistake, which
    could theoretically be controlled, or an investigator taking a dedicated and unlikely
    action, such as swiping text, saving files in a different format, or using a less-common
    word processor. Assuming the mole in *Elementary* considered these acceptable
    risks, electronic invisible ink provides a plausible explanation for why the internal
    company investigation failed.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you used steganography to hide an encrypted message within
    a Microsoft Word document. You used a third-party module, called python-docx,
    to directly access and manipulate the document using Python. Similar third-party
    modules are available for working with other popular document types, like Excel
    spreadsheets.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**Further Reading**'
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find online documentation for python-docx at *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    and *[https://pypi.python.org/pypi/python-docx](https://pypi.python.org/pypi/python-docx)*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '*Automate the Boring Stuff with Python* (No Starch Press, 2015) by Al Sweigart,
    covers modules that allow Python to manipulate PDFs, Word files, Excel spreadsheets,
    and more. [Chapter 13](ch13.xhtml#ch13) contains a useful tutorial on python-docx,
    and the appendix covers installing third-party modules with pip.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: You can find beginner-level Python programs for working with ciphers in *Cracking
    Codes with Python* (No Starch Press, 2018) by Al Sweigart.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '*Mysterious Messages* (The Penguin Group, 2009) by Gary Blackwood is an interesting
    and well-illustrated history of steganography and cryptography.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '**Practice Project: Checking the Number of Blank Lines**'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Improve the hidden message program by writing a function that compares the number
    of blank lines in the fake message to the number of lines in the real message.
    If there is insufficient space to hide the real message, have the function warn
    the user and tell them how many blank lines to add to the fake message. Insert
    and call the function in a copy of the *elementary_ink.py* code, just before loading
    the template document. You can find a solution in the appendix and online at *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    in *elementary_ink_practice.py*. For testing, download *realMessageChallenge.docx*
    from the same site and use it for the real message.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: Using Monospace Font**'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rewrite the *elementary_ink.py* code for monospace fonts and hide your own short
    message in the spaces between words. See “[Considering Font Types, Kerning, and
    Tracking](ch06.xhtml#lev134)” on [page 109](ch06.xhtml#page_109) for a description
    of monospace fonts. As always with challenge projects, no solution is provided.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
