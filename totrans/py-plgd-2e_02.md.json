["```py\ndef factorial(N):\n  ❶ if N == 1:\n        return 1\n    else:\n      ❷ return N * factorial(N-1)\n\n```", "```py\n❶ import turtle\ndef draw_triangle(x1, y1, x2, y2, x3, y3, t):\n    # go to start of triangle\n  ❷ t.up()\n  ❸ t.setpos(x1, y1)\n  ❹ t.down()\n    t.setpos(x2, y2)\n    t.setpos(x3, y3)\n    t.setpos(x1, y1)\n    t.up()\ndef main():\n    print('testing turtle graphics...')\n  ❺ t = turtle.Turtle()\n  ❻ t.hideturtle()\n  ❼ draw_triangle(-100, 0, 0, -173.2, 100, 0, t)\n  ❽ turtle.mainloop()\n# call main\nif __name__ == '__main__':\n    main()\n\n```", "```py\ndef drawKochSF(x1, y1, x2, y2, t):\n    d = math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n    r = d/3.0\n    h = r*math.sqrt(3)/2.0\n    p3 = ((x1 + 2*x2)/3.0, (y1 + 2*y2)/3.0)\n    p1 = ((2*x1 + x2)/3.0, (2*y1 + y2)/3.0)\n    c = (0.5*(x1+x2), 0.5*(y1+y2))\n    n = ((y1-y2)/d, (x2-x1)/d)\n    p2 = (c[0]+h*n[0], c[1]+h*n[1])\n\n```", "```py\n  ❶ if d > 10:\n        # flake #1\n      ❷ drawKochSF(x1, y1, p1[0], p1[1], t)\n        # flake #2\n        drawKochSF(p1[0], p1[1], p2[0], p2[1], t)\n        # flake #3\n        drawKochSF(p2[0], p2[1], p3[0], p3[1], t)\n        # flake #4\n        drawKochSF(p3[0], p3[1], x2, y2, t)\n\n```", "```py\n    else:\n        # draw cone\n        t.up()\n      ❶ t.setpos(p1[0], p1[1])\n        t.down()\n        t.setpos(p2[0], p2[1])\n        t.setpos(p3[0], p3[1])\n        # draw sides\n        t.up()\n      ❷ t.setpos(x1, y1)\n        t.down()\n        t.setpos(p1[0], p1[1])\n        t.up()\n      ❸ t.setpos(p3[0], p3[1])\n        t.down()\n        t.setpos(x2, y2)\n\n```", "```py\ndef main():\n    print('Drawing the Koch Snowflake...')\n    t = turtle.Turtle()\n    t.hideturtle()\n    # draw\n    try:\n      ❶ drawKochSF(-100, 0, 100, 0, t)\n      ❷ drawKochSF(0, -173.2, -100, 0, t)\n      ❸ drawKochSF(100, 0, 0, -173.2, t)\n  ❹ except:\n         print(\"Exception, exiting.\")\n         exit(0)\n    # wait for user to click on screen to exit\n  ❺ turtle.Screen().exitonclick()\n\n```", "```py\n$ `python koch.py`\n\n```", "```py\n\"\"\"\nkoch.py\nA program that draws the Koch snowflake.\nAuthor: Mahesh Venkitachalam\n\"\"\"\nimport turtle\nimport math\n# draw the recursive Koch snowflake\ndef drawKochSF(x1, y1, x2, y2, t):\n    d = math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n    r = d/3.0\n    h = r*math.sqrt(3)/2.0\n    p3 = ((x1 + 2*x2)/3.0, (y1 + 2*y2)/3.0)\n    p1 = ((2*x1 + x2)/3.0, (2*y1 + y2)/3.0)\n    c = (0.5*(x1+x2), 0.5*(y1+y2))\n    n = ((y1-y2)/d, (x2-x1)/d)\n    p2 = (c[0]+h*n[0], c[1]+h*n[1])\n    if d > 10:\n        # flake #1\n        drawKochSF(x1, y1, p1[0], p1[1], t)\n        # flake #2\n        drawKochSF(p1[0], p1[1], p2[0], p2[1], t)\n        # flake #3\n        drawKochSF(p2[0], p2[1], p3[0], p3[1], t)\n        # flake #4\n        drawKochSF(p3[0], p3[1], x2, y2, t)\n    else:\n        # draw cone\n        t.up()\n        t.setpos(p1[0], p1[1])\n        t.down()\n        t.setpos(p2[0], p2[1])\n        t.setpos(p3[0], p3[1])\n        # draw sides\n        t.up()\n        t.setpos(x1, y1)\n        t.down()\n        t.setpos(p1[0], p1[1])\n        t.up()\n        t.setpos(p3[0], p3[1])\n        t.down()\n        t.setpos(x2, y2)\n# main() function\ndef main():\n    print('Drawing the Koch Snowflake...')\n    t = turtle.Turtle()\n    t.hideturtle()\n    # draw\n    try:\n        drawKochSF(-100, 0, 100, 0, t)\n        drawKochSF(0, -173.2, -100, 0, t)\n        drawKochSF(100, 0, 0, -173.2, t)\n    except:\n        print(\"Exception, exiting.\")\n        exit(0)\n    # wait for user to click on screen to exit\n    turtle.Screen().exitonclick()\n# call main\nif __name__ == '__main__':\n    main()\n\n```"]