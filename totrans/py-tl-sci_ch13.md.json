["```py\nclass Frigate(object):\n ➊ designation = 'USS'\n\n ➋ def __init__(self, name):\n        self.name = name\n        self.crew = 200     \n        self.length_ft = 450\n        self.tonnage = 5_000\n        self.fuel_gals = 500_000\n        self.guns = 2\n     ➌ self.ammo = self.guns * 300\n        self.heading = 0\n        self.max_speed = 24\n        self.speed = 0\n```", "```py\n    def helm(self, heading, speed):\n     ➊ self.heading = heading\n        self.speed = speed\n        if self.speed > self.max_speed:\n         ➋ self.speed = self.max_speed\n        print(f\"\\n{self.name} heading = {self.heading} degrees\")\n        print(f\"{self.name} speed = {self.speed} knots\")\n```", "```py\n    def fire_guns(self):\n      ➌ if self.ammo >= self.guns:\n            print(\"\\nBOOM!\")\n          ➍ self.ammo -= self.guns\n            print(f\"\\n{self.name} ammo remaining = {self.ammo} shells\")\n        else:\n            print(\"\\nInsufficient ammunition!\")\n```", "```py\ngarcia = Frigate('garcia')\nprint(f\"\\n----------{Frigate.designation} {garcia.name.upper()}----------\")\nprint(f\"\\nCrew complement = {garcia.crew}\")\ngarcia.fire_guns()\ngarcia.fire_guns()\ngarcia.helm(heading=180, speed=30)\n```", "```py\n----------USS GARCIA----------\n\nCrew complement = 200\n\nBOOM!\n\ngarcia ammo remaining = 598 shells\n\nBOOM! garcia ammo remaining = 596 shells\n\ngarcia heading = 180 degrees\ngarcia speed = 24 knots\n```", "```py\nboone = Frigate('Boone')\nprint(f\"\\n----------{Frigate.designation} {boone.name.upper()}----------\")\nboone.fire_guns()\nboone.fire_guns()\nboone.helm(heading=270, speed=-1)\n```", "```py\n----------USS BOONE----------\n\nBOOM!\n\nBoone ammo remaining = 598 shells\n\nBOOM!\n\nBoone ammo remaining = 596 shells\n\nBoone heading = 270 degrees\nBoone speed = -1 knots\n```", "```py\nclass GMFrigate(Frigate):\n ➊ designation = Frigate.designation\n\n    def __init__(self, name):\n     ➋ Frigate.__init__(Frigate, name)\n     ➌ self.missiles = 100 \n        self.ammo = self.guns * 100\n\n    def fire_missile(self):\n        if self.missiles > 0:\n            print(\"\\nSSSSSSSSSSSttttt!\")\n            self.missiles -= 1\n            print(f\"\\n{self.name} missiles remaining = {self.missiles}\")\n        else:\n            print(\"\\nMissiles depleted\")\n        self.missiles -= 1\n```", "```py\nticonderoga = GMFrigate('Ticonderoga')\nprint(f\"\\n------{ticonderoga.designation} {ticonderoga.name.upper()}------\")\nfor _ in range(3):\n    ticonderoga.fire_guns()\nticonderoga.fire_missile()\nticonderoga.helm(95, 22)\n```", "```py\n------USS TICONDEROGA------\n\nBOOM!\n\nTiconderoga ammo remaining = 198 shells\n\nBOOM!\n\nTiconderoga ammo remaining = 196 shells\n\nBOOM!\n\nTiconderoga ammo remaining = 194 shells\n\nSSSSSSSSSSSttttt!\n\nTiconderoga missiles remaining = 99\n\nTiconderoga heading = 95 degrees\nTiconderoga speed = 22 knots\n```", "```py\n    def __init__(self, name):\n        Frigate.__init__(Frigate, name)\n```", "```py\n    def __init__(self, name):\n        super().__init__(name)\n```", "```py\n   class Corvette:\n       def fire_guns(self):\n           print('boom!')\n\n➊ class Destroyer(Corvette):\n       def fire_guns(self):\n        ➋ super().fire_guns()\n           print('BOOM!')\n```", "```py\nprint('-----A Corvette-----')\ncorvette = Corvette()\ncorvette.fire_guns()\n\nprint('\\n-----A Destroyer-----')\ndestroyer = Destroyer()\ndestroyer.fire_guns()\n```", "```py\n-----A Corvette-----\nboom!\n\n-----A Destroyer-----\nboom!\nBOOM!\n```", "```py\nclass Fleet():\n\n    def __init__(self, name, list_of_ships):\n        self.fleet_name = name\n        self.ships = list_of_ships\n        self.fleet_heading = 0  \n        self.fleet_max_speed = 0  \n        self.fleet_speed = 0\n```", "```py\n    def find_fleet_max_speed(self):\n     ➊ max_speeds = [ship.max_speed for ship in self.ships]\n        print(f'\\nMaximum ship speeds = {max_speeds} knots')\n     ➋ self.fleet_max_speed = min(max_speeds)\n        print(f'Fleet maximum speed = {self.fleet_max_speed} knots')\n\n    def fleet_helm(self, heading, speed):\n        self.fleet_heading = heading\n        self.fleet_speed = speed\n     ➌ if self.fleet_speed > self.fleet_max_speed:\n            self.fleet_speed = self.fleet_max_speed\n        print(f\"\\n{self.fleet_name} heading = {self.fleet_heading} degrees\")\n        print(f\"{self.fleet_name} speed = {self.fleet_speed} knots\") \n        for ship in self.ships:\n            ship.heading = self.fleet_heading\n            ship.speed = self.fleet_speed\n```", "```py\nships = [garcia, boone, ticonderoga]\nseventh = Fleet(\"Seventh\", ships) \nprint(f\"\\nShips in {seventh.fleet_name} fleet:\") \nfor ship in seventh.ships:\n    print(f\"\\t{ship.name.capitalize()}\") \n\nseventh.find_fleet_max_speed()\nseventh.fleet_helm(42, 28)\nprint(f\"\\ngarcia helm = {garcia.heading, garcia.speed}\") print(f\"boone helm = {boone.heading, boone.speed}\")\nprint(f\"ticonderoga helm = {ticonderoga.heading, ticonderoga.speed}\")\n```", "```py\nShips in Seventh fleet:\n     Garcia\n     Boone\n     Ticonderoga\n\nMaximum ship speeds = [24, 24, 24] knots\nFleet maximum speed = 24 knots\n\nSeventh heading = 42 degrees\nSeventh speed = 24 knots\n\ngarcia helm = (42, 24)\nboone helm = (42, 24)\nticonderoga helm = (42, 24)\n```", "```py\ngarcia.helm(heading=50, speed=24)\nprint(f\"\\ngarcia helm = {garcia.heading, garcia.speed}\")\nprint(f\"boone helm = {boone.heading, boone.speed}\")\nprint(f\"ticonderoga helm = {ticonderoga.heading, ticonderoga.speed}\")\n```", "```py\ngarcia heading = 50 degrees\ngarcia speed = 24 knots\n\ngarcia helm = (50, 24)\nboone helm = (42, 24)\nticonderoga helm = (42, 24)\n```", "```py\nIn [1]: def square_it(x):\n   ...:     return x**2\n\nIn [2]: def square_it_again(func):\n   ...:     def wrapper(*args, **kwargs):\n   ...:         result = (func(*args, **kwargs))**2 \n   ...:         return result\n   ...:     return wrapper\n```", "```py\nIn [3]: square = square_it_again(square_it)\n\nIn [4]: type(square)\nOut[4]: function\n```", "```py\nIn [5]: print(square(3))\n81\n```", "```py\n@decorator_func_name\ndef new_func():\n     do something\n```", "```py\nIn [7]: @square_it_again\n   ...: def square_it(x):\n   ...:     return x**2\n```", "```py\nIn [8]: square_it(3)\nOut[8]: 81\n```", "```py\nclass Ship:\n ➊ def __init__(self, name, classification, registry, location):\n        self.name = name\n        self.classification = classification\n        self.registry = registry\n        self.location = location\n    ➋  self.obj_type = 'ship'\n        self.obj_color = 'black'\n```", "```py\ngarcia = Ship('Garcia', 'frigate', 'USA', (20, 15))\nprint(garcia)\n```", "```py\n<__main__.Ship object at 0x0000021F5FF501F0>\n```", "```py\n   from math import dist\n   from dataclasses import dataclass\n\n   @dataclass\n➊ class Ship:\n    ➋ name: str\n       classification: str\n       registry: str\n       location: tuple\n    ➌ obj_type = 'ship'\n       obj_color = 'black'\n```", "```py\n    def distance_to(self, other):\n        distance = round(dist(self.location, other.location), 2)\n        return str(distance) + ' ' + 'km'\n```", "```py\ngarcia = Ship('Garcia', 'frigate', 'USA', (20, 15))\nticonderoga = Ship('Ticonderoga', 'destroyer', 'USA', (5, 10))\nkobayashi = Ship('Kobayashi', 'maru', 'Federation', (10, 22))\n```", "```py\ntest = Ship('Test', 42, 'HMS', (15, 15))\n```", "```py\nprint(garcia)\nShip(name='Garcia', classification='frigate', registry='USA', location=(20, 15))\n```", "```py\nships = [garcia, ticonderoga, kobayashi]\nfor ship in ships:\n    print(f\"The {ship.classification} {ship.name} is visible.\")\n    print(f\"{ship.name} is a {ship.registry} {ship.obj_type}.\")\n    print(f\"The {ship.name} is currently at grid position {ship.location}\\n\")\n\nprint(f\"Garcia is {garcia.distance_to(kobayashi)} from the Kobayashi\")\n```", "```py\nThe frigate Garcia is visible.\nGarcia is a USA ship.\nThe Garcia is currently at grid position (20, 15)\n\nThe destroyer Ticonderoga is visible.\nTiconderoga is a USA ship.\nThe Ticonderoga is currently at grid position (5, 10)\n\nThe maru Kobayashi is visible.\nKobayashi is a Federation ship.\nThe Kobayashi is currently at grid position (10, 22)\n\nGarcia is 12.21 km from the Kobayashi\n```", "```py\nconda activate base\nconda install matplotlib\n```", "```py\n   from math import dist\n   from dataclasses import dataclass\n➊ import matplotlib.pyplot as plt\n\n   @dataclass\n   class Ship:\n       name: str\n       classification: str\n       registry: str\n       location: tuple\n       obj_type = 'ship'\n       obj_color = 'black'\n\n       def distance_to(self, other):\n           distance = round(dist(self.location, other.location), 2)\n           return str(distance) + ' ' + 'km'\n\n   garcia = Ship('Garcia', 'frigate', 'USA', (20, 15))\n   ticonderoga = Ship('Ticonderoga', 'destroyer', 'USA', (5, 10))\n   kobayashi = Ship('Kobayashi', 'maru', 'Federation', (10, 22))\n\n➋ VISIBLE_SHIPS = [garcia, ticonderoga, kobayashi]\n\n➌ def plot_ship_dist(ship1, ship2):\n       sep = ship1.distance_to(ship2)  \n       for ship in VISIBLE_SHIPS:\n        ➍ plt.scatter(ship.location[0], ship.location[1],\n                       marker='d',\n                       color=ship.obj_color)\n           plt.text(ship.location[0], ship.location[1], ship.name)\n    ➎ plt.plot([ship1.location[0], ship2.location[0]],\n                  [ship1.location[1], ship2.location[1]],\n                  color='gray', \n                  linestyle=\"--\")\n       plt.text((ship2.location[0]), (ship2.location[1] - 2), sep, c='gray')\n       plt.xlim(0, 30)\n       plt.ylim([0, 30])\n       plt.show()\n\n➏ plot_ship_dist(kobayashi, garcia)\n```", "```py\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Ship:\n    name: str\n    classification: str\n    registry: str\n    location: tuple\n    obj_type = 'ship'\n    obj_color = 'black'\n ➊ friendly: bool = field(init=False)\n\n ➋ def __post_init__(self):\n        unfriendlies = ('IKS')\n        self.friendly = self.registry not in unfriendlies\n```", "```py\nhomer = Ship('Homer', 'tug', 'USA', (20, 9))\nbortas = Ship('Bortas', 'D5', 'IKS', (15, 25))\n\nprint(homer)\nprint(bortas)\n```", "```py\nShip(name='Homer', classification='tug', registry='USA', location=(20, 9), friendly=True)\nShip(name='Bortas', classification='D5', registry='IKS', location=(15, 25), friendly=False)\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Ship:\n    name: str\n    classification: str\n    registry: str\n    location: tuple\n\n@dataclass\nclass ShipSlots:\n ➊ __slots__ = 'name', 'classification', 'registry', 'location'\n\n    name: str\n    classification: str\n    registry: str\n    location: tuple\n```", "```py\nIn [9]: import ship_slots as slots\n```", "```py\nIn [10]: garcia = slots.Ship('Garcia', 'frigate', 'USS', (10, 20))\n\nIn 11]: garcia\nOut[11]: Ship(name='Garcia', classification='frigate', registry='USS', location=(10, 20))\n```"]