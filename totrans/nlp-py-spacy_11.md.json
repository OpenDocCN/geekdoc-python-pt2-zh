["```py\n$ pip install python-telegram-bot --upgrade\n```", "```py\nimport telegram\n\nbot = telegram.Bot(token='XXXXXX...')\n```", "```py\nprint(bot.get_me())\n```", "```py\n   from telegram.ext import Updater, MessageHandler, Filters\n\n   #function that implements the message handler \n\n➊ def echo(update, context):\n\n     update.message.reply_text(update.message.text)\n\n   #creating an Updater instance\n\n➋ updater = Updater('TOKEN', use_context=True)\n\n   #registering a handler to handle input text messages\n\n   updater.dispatcher.add_handler(MessageHandler(Filters.text, echo))\n\n   #starting polling updates from the messenger \n\n   updater.start_polling()\n\n   updater.idle()\n```", "```py\n   import spacy\n\n   from telegram.ext import Updater, MessageHandler, Filters\n\n   #the callback function that uses spaCy\n\n➊ def utterance(update, context):\n\n     msg = update.message.text\n\n     nlp = spacy.load('en')\n\n     doc = nlp(msg)\n\n     for token in doc:\n\n       if token.dep_ == 'dobj':\n\n         update.message.reply_text('We are processing your request...') \n\n         return\n\n     update.message.reply_text('Please rephrase your request. Be as specific as\n\n     possible!')     \n\n   #the code responsible for interactions with Telegram\n\n   updater = Updater('TOKEN', use_context=True)\n\n   updater.dispatcher.add_handler(MessageHandler(Filters.text, utterance))\n\n   updater.start_polling()\n\n   updater.idle()\n```", "```py\n...\n\ndef extract_intent(doc):\n\n  #Put the code from Chapter 8 here \n\ndef utterance(update, context):\n\n  msg = update.message.text\n\n  nlp = spacy.load('en')\n\n  doc = nlp(msg)\n\n  for token in doc:\n\n    if token.dep_ == 'dobj':\n\n   ➊ intent = extract_intent(doc) \n\n   ➋ if intent == 'orderPizza': \n\n        update.message.reply_text('We need some more information to place your\n\n        order.')\n\n      elif intent == 'showPizza': \n\n        update.message.reply_text('Would you like to look at our menu?')\n\n      else:\n\n        update.message.reply_text('Your intent is not recognized.')\n\n      return\n\n  update.message.reply_text('Please rephrase your request. Be as specific as\n\n  possible!')     \n\n...\n```", "```py\ndef start(update, context):\n\n...\n\n  ➊ return 'ORDERING'\n\ndef intent_ext(update, context):\n\n...\n\n  ➋ if context.user_data.has_key('intent'):\n\n        return 'ADD_INFO'\n\n    else:\n\n        update.message.reply_text('Please rephrase your request.')\n\n        return 'ORDERING'\n\ndef add_info(update, context):\n\n...\n\n    return ConversationHandler.END\n\ndef cancel(update, context):\n\n...\n\n    return ConversationHandler.END\n\n...\n\ndef main():\n\n...\n\n    disp = updater.dispatcher\n\n    conv_handler = ConversationHandler(\n\n        entry_points=[CommandHandler('start', start)],\n\n        states={\n\n            ➌ 'ORDERING': [MessageHandler(Filters.text,\n\n                                        intent_ext)\n\n                        ],\n\n            'ADD_INFO': [MessageHandler(Filters.text,\n\n                                        add_info)\n\n                        ],\n\n        },\n\n        fallbacks=[CommandHandler('cancel', cancel)]\n\n    )\n\n    disp.add_handler(conv_handler)\n\n...\n```", "```py\nimport logging\n\nimport sys\n\nimport spacy\n\nfrom telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler\n\n#allows you to obtain generic debug info\n\nlogger = logging.getLogger(__name__)\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n\ndef extract_intent(doc):\n\n  #Here should be the code created as suggested in the Expanding the Chatbot section earlier\n\n  ...\n\n  return intent\n```", "```py\ndef details_to_str(user_data):\n\n    details = list()\n\n    for key, value in user_data.items():\n\n        details.append('{} - {}'.format(key, value))\n\n    return \"\\n\".join(details).join(['\\n', '\\n'])\n```", "```py\ndef start(update, context):\n\n    update.message.reply_text('Hi! This is a pizza ordering app. Do you want to order something?')\n\n    return 'ORDERING'\n```", "```py\ndef intent_ext(update, context):\n\n  msg = update.message.text\n\n  nlp = spacy.load('en')\n\n  doc = nlp(msg)\n\n  for token in doc:\n\n    if token.dep_ == 'dobj':\n\n      intent = extract_intent(doc) \n\n      if intent == 'orderPizza': \n\n        context.user_data['product'] = 'pizza'\n\n        update.message.reply_text('We need some more information to place your order. What type\n\n        of pizza do you want?')\n\n        return 'ADD_INFO'\n\n      else:\n\n        update.message.reply_text('Your intent is not recognized. Please rephrase your request.')\n\n        return 'ORDERING'\n\n      return\n\n  update.message.reply_text('Please rephrase your request. Be as specific as possible!')\n```", "```py\ndef add_info(update, context):\n\n  msg = update.message.text\n\n  nlp = spacy.load('en')\n\n  doc = nlp(msg)\n\n  for token in doc:\n\n    if token.dep_ == 'dobj':\n\n      dobj = token\n\n      for child in dobj.lefts:\n\n        if child.dep_ == 'amod' or child.dep_ == 'compound': \n\n          context.user_data['type'] = child.text\n\n          user_data = context.user_data\n\n          update.message.reply_text(\"Your order has been placed.\"\n\n                                    \"{}\"\n\n                                    \"Have a nice day!\".format(details_to_str(user_data)))\n\n          return ConversationHandler.END\n\n    update.message.reply_text(\"Cannot extract necessary info. Please try again.\")\n\n    return 'ADD_INFO'\n```", "```py\ndef cancel(update, context):\n\n    update.message.reply_text(\"Have a nice day!\")\n\n    return ConversationHandler.END\n```", "```py\ndef main():\n\n    #Replace TOKEN with a real token \n\n    updater = Updater(\"TOKEN\", use_context=True)\n\n    disp = updater.dispatcher\n\n    conv_handler = ConversationHandler(\n\n        entry_points=[CommandHandler('start', start)],\n\n        states={\n\n            'ORDERING': [MessageHandler(Filters.text,\n\n                                        intent_ext)\n\n                        ],\n\n            'ADD_INFO': [MessageHandler(Filters.text,\n\n                                        add_info)\n\n                        ],\n\n        },\n\n        fallbacks=[CommandHandler('cancel', cancel)]\n\n    )\n\n    disp.add_handler(conv_handler)\n\n    updater.start_polling()\n\n    updater.idle()\n\nif __name__ == '__main__':\n\n    main()\n```"]