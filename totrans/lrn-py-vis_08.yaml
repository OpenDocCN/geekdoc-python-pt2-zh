- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Dictionaries and JSON
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 字典和JSON
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Dictionaries hold collections of items, similar to the ordered lists you learned
    about in Chapter 7. Dictionaries, however, are unordered, and you use an associated
    value to access each item, which makes it easier to remember what the items in
    your dictionary represent. In this chapter, you’ll learn about Python’s dictionary
    syntax and methods, how to combine loops and dictionaries, and how to nest dictionaries
    and lists.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 字典保存着一组项目，类似于你在第7章学习过的有序列表。不过，字典是无序的，你使用关联的值来访问每个项目，这使得你更容易记住字典中项目所代表的内容。在本章中，你将学习Python的字典语法和方法，如何结合循环和字典，以及如何嵌套字典和列表。
- en: 'You’ll also learn how to work with another plaintext file format: *JavaScript
    Object Notation (JSON)*. The syntax isn’t quite as simple as CSV, but it’s better
    suited for handling more complex data structures. You’ll use Python’s built-in
    *json* module to read in dictionary data from a JSON file, and as in Chapter 7,
    you’ll then create a data visualization.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何使用另一种纯文本文件格式：*JavaScript对象表示法（JSON）*。它的语法不像CSV那么简单，但更适合处理复杂的数据结构。你将使用Python内置的*json*模块来从JSON文件中读取字典数据，并且像第7章一样，你将创建一个数据可视化。
- en: Introducing Dictionaries
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入字典
- en: In a dictionary, each unordered item is associated with a value called a *key*.
    A key is usually a short string, and each dictionary item is composed of a key-value
    pair. This means dictionaries are associative, and some programming languages
    refer to dictionary-type structures as *associative arrays*. Dictionaries are
    different from lists, which are numerically indexed, because each element in a
    list corresponds to a number (index) indicating its position in a sequence of
    items.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在字典中，每个无序项目与一个称为*键*的值关联。键通常是一个短字符串，每个字典项目由一个键值对组成。这意味着字典是关联的，一些编程语言将字典类型的结构称为*关联数组*。字典与列表不同，后者是按数字索引的，因为列表中的每个元素对应一个数字（索引），表示它在项目序列中的位置。
- en: As an example of how key-value pairs work, you might use a dictionary to note
    the favorite movie of each of your friends. In such a dictionary, each key would
    be a friend’s name, and each value would be a corresponding film title. To insert
    or retrieve your friend Lee’s favorite movie, you’d use the key `'Lee'`. [Figure
    8-1](#figure8-1) is a conceptual diagram of this dictionary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为键值对如何工作的一个示例，你可以使用字典记录每个朋友的最喜欢的电影。在这样的字典中，每个键将是朋友的名字，每个值将是对应的电影标题。要插入或检索你朋友Lee的最喜欢的电影，你需要使用键`'Lee'`。[图8-1](#figure8-1)是这个字典的概念图。
- en: '![f08001](image_fi/500969c08/f08001.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![f08001](image_fi/500969c08/f08001.png)'
- en: 'Figure 8-1: A diagram of a dictionary indicating the mapping between keys and
    values'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-1：一个字典的示意图，表示键和值之间的映射关系
- en: 'For your first exercise in working with Python dictionaries, you’ll write code
    to manage student records. Create a new sketch named *dictionaries*, andadd the
    following code that shows the difference between a list and dictionary:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在你进行Python字典练习的第一个任务中，你将编写代码来管理学生记录。创建一个名为*dictionaries*的新草图，并添加以下代码，展示列表和字典之间的区别：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, note that dictionaries use curly brackets (`{}`), whereas lists use
    square brackets (`[]`). The list 1 and dictionary 2 variants store the same values:
    `''Sam''` and `24`. However, each dictionary item includes a value *and* a key.
    In this instance, the dictionary keys are `''name''` and `''age''`. Keep in mind
    that sensibly named keys help identify what the values represent. This `student`
    dictionary holds two key-value pairs ([Figure 8-2](#figure8-2)).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意字典使用大括号（`{}`），而列表使用方括号（`[]`）。列表1和字典2的变体存储的是相同的值：`'Sam'`和`24`。然而，每个字典项目包含一个值*和*一个键。在这个例子中，字典的键是`'name'`和`'age'`。记住，合理命名的键有助于识别值所代表的含义。这个`student`字典包含两个键值对（[图8-2](#figure8-2)）。
- en: You’ll use the meaningfully named keys to retrieve values from the `student`
    dictionary. To use the `student` list, you would need to recall the seemingly
    arbitrary positions for each value. Lists are better at handling an ordered sequence
    of items, but if you have a set of unique keys that map to values, use a dictionary.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用有意义的键来从`student`字典中检索值。要使用`student`列表，你需要记住每个值似乎是随意的位置。列表更适合处理有序的项目序列，但如果你有一组唯一的键与值映射，最好使用字典。
- en: '![f08002](image_fi/500969c08/f08002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![f08002](image_fi/500969c08/f08002.png)'
- en: 'Figure 8-2: A dictionary with two key-value pairs'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：一个包含两个键值对的字典
- en: Dictionaries can hold all types of data, including strings, numbers, Booleans,
    lists, and even other dictionaries. You can store as many key-value pairs as you
    like in a dictionary. Technically speaking, there is an upper limit, but if you’re
    managing such large volumes of data, you should probably look at a database solution.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 字典可以存储各种数据类型，包括字符串、数字、布尔值、列表，甚至其他字典。您可以在字典中存储任意数量的键值对。从技术上讲，字典是有上限的，但如果您管理如此大量的数据，可能应该考虑使用数据库解决方案。
- en: Accessing Dictionaries
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问字典
- en: 'To access any dictionary value, use the dictionary name along with the associated
    key in square brackets. Try the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问任何字典的值，请使用字典名称和关联的键，键用方括号括起来。试试以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The comments alongside each `print()` function confirm what should appear in
    your console.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`print()`函数旁边的注释会确认控制台中应该显示的内容。
- en: 'To print the entire dictionary, omit the square brackets and key, leaving only
    the dictionary name:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印整个字典，省略方括号和键，只保留字典名称：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The console should display every key-value pair, complete with the curly brackets,
    colons, and commas.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台应显示每个键值对，连同花括号、冒号和逗号。
- en: The order of the key-value pairs won’t always match the order in which you defined
    them, and this can vary among Python environments. Dictionaries are inherently
    orderless; Python is concerned with the connections between the keys and values.
    If you need to order your dictionary items—by key or value—you can use various
    functions and methods. You’ll see some sorting techniques in “Combining Loops
    and Dictionaries” on page 163.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 键值对的顺序不一定与您定义它们的顺序一致，这在不同的Python环境中可能有所不同。字典本质上是无序的；Python关注的是键与值之间的关联。如果您需要按键或值对字典项进行排序，可以使用各种函数和方法。您将在第163页的“结合循环和字典”中看到一些排序技巧。
- en: 'If you try to reference a nonexistent key—say, `student[''grade'']`—Processing
    displays a `KeyError` message. If you need to check whether a key exists, use
    the `in` operator:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试引用一个不存在的键——比如`student['grade']`——处理时会显示`KeyError`消息。如果您需要检查一个键是否存在，请使用`in`操作符：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `in` checks whether the `'age'` key exists in the `student` dictionary.
    If found, the operation returns `True`, and the `if` statement executes the `print`
    line displaying the `age` value (which is `24` in this case).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`in`操作符检查`''age''`键是否存在于`student`字典中。如果找到，操作返回`True`，并且`if`语句执行`print`行，显示`age`值（在此例中为`24`）。'
- en: Modifying Dictionaries
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改字典
- en: 'Dictionaries are dynamic structures, so you can add and modify key-value pairs
    as you please. To change an existing value, reassign it as you would a list element,
    but use the key as opposed to a numeric index. To illustrate, in your *dictionaries*
    sketch, change the student’s age to `25`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是动态结构，因此您可以随意添加和修改键值对。要更改现有值，像处理列表元素一样重新赋值，但使用键而不是数字索引。举个例子，在您的*字典*示意图中，将学生的年龄改为`25`：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The console output should confirm that the age has changed from `24` to `25`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出应该确认年龄已从`24`更改为`25`。
- en: 'To add a new key-value pair, follow the same process. Add a student ID number
    to the `student` dictionary:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新的键值对，请按照相同的过程进行。向`student`字典中添加学生ID号码：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `id` value here represents a birth date (1995-05-01) 1. The system can
    use this information to calculate the student’s age, so now it’s no longer necessary
    to store the individual’s `age` value. To remove this, use the `del` statement:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`id`值表示出生日期（1995-05-01）1。系统可以利用此信息计算学生的年龄，因此现在不再需要存储个人的`age`值。要删除它，请使用`del`语句：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `del` statement permanently removes the `age` key and its corresponding
    value.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`del`语句永久删除`age`键及其对应的值。'
- en: Nesting Dictionaries and Lists
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套字典和列表
- en: 'Dictionaries can hold other dictionaries or lists, and lists also can hold
    dictionaries. Let’s look at two examples: a dictionary of lists, and a list of
    dictionaries. Both are valid ways to structure data, but as you’ll see, you’ll
    choose one depending on which works best in your particular application.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 字典可以包含其他字典或列表，列表也可以包含字典。让我们来看两个例子：一个字典包含列表，另一个列表包含字典。两者都是有效的数据结构方式，但正如您所见，您将根据哪种方式在特定应用中效果最好来选择。
- en: 'At this point, your program stores the details of a single student. A system
    that can manage just one student isn’t very useful, so to handle multiple students,
    try a *dictionary of lists*. Add the following code to the bottom of your *dictionaries*
    sketch:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你的程序只存储了一个学生的详细信息。一个只管理一个学生的系统并不太实用，因此为了处理多个学生，试试 *字典的列表*。将以下代码添加到你 *字典*
    草图的底部：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `names` list item holds a list of two names 1; the `ids` list holds their
    respective ID numbers 2. To access any list element directly within a dictionary
    item, use the associated key followed by a second pair of square brackets containing
    the element index 3.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`names` 列表项包含两个名字 1；`ids` 列表包含它们各自的 ID 号码 2。要直接访问字典项中的任何列表元素，使用关联的键后跟一对方括号，其中包含元素的索引
    3。'
- en: 'Another approach to structuring this data is with a *list of dictionaries*.
    Rather than separating the student names into one list and the IDs into another,
    you could use a dictionary for each student. Add the following code to the bottom
    of your sketch, effectively overwriting the former `students` dictionary entirely:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种构建数据的方式是使用 *字典的列表*。与其将学生姓名分到一个列表，将 ID 分到另一个列表，不如为每个学生使用一个字典。将以下代码添加到草图的底部，实际上会完全覆盖原来的
    `students` 字典：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This retrieves the name `Lee` by using an element index, followed by another
    pair of square brackets containing the dictionary key 1.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用元素索引，接着是另一对方括号，包含字典键 1，来检索名字 `Lee`。
- en: The latter of the two approaches (the list of dictionaries) is arguably the
    more sensible structure in this scenario. Each item is like a row in a spreadsheet
    that contains the details for a single student, and each student may have a different
    number of columns. This means you can add an extra key-value pair to Sam’s dictionary
    without having to do the same for Lee. Doing this, however, would be tricky using
    the first approach.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种方法中（字典列表）的后者可以说是更合理的结构。每个项就像是电子表格中的一行，包含单个学生的详细信息，而每个学生可能有不同数量的列。这意味着，你可以为
    Sam 的字典添加一个额外的键值对，而无需为 Lee 做同样的事情。然而，使用第一种方法时，这将变得有些棘手。
- en: What you name your keys and how you elect to nest lists and dictionaries should
    help relate your data to real-world models while reducing complexity. Keep your
    key names short and descriptive, and bear in mind that well-structured data will
    make for more self-evident algorithms further along in your program. In other
    words, you’ll end up saving time and energy writing code if it’s structured around
    intuitively organized data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你为键命名的方式以及如何选择嵌套列表和字典，应该有助于将数据与现实世界的模型关联，同时减少复杂性。保持键名简短且具有描述性，并记住，结构良好的数据将为你程序中后续的算法提供更直观的理解。换句话说，如果数据结构直观有序，编写代码时你将节省时间和精力。
- en: Combining Loops and Dictionaries
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环和字典的结合
- en: You’ll often want to loop through your dictionaries. For example, you could
    dynamically generate reports for every student in your system by using a single
    loop to populate a predefined template. Considering that a dictionary can hold
    thousands or even millions of key-value pairs, this is a powerful technique. Because
    of the key-value system, though, iterating dictionaries is a little different
    from iterating lists.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常需要遍历字典。例如，你可以通过使用单个循环填充预定义模板，动态生成系统中每个学生的报告。考虑到字典可以包含成千上万甚至百万个键值对，这是一种强大的技术。然而，由于键值系统的存在，迭代字典与迭代列表略有不同。
- en: You can iterate a dictionary’s keys, values, or key-value pairs with Python’s
    `keys()`, `values()`, and `items()` methods. Note that many list methods—such
    as `append()`, `extend()`, `index()`, `insert()`, and `remove()`—do not work on
    the dictionary data type.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Python 的 `keys()`、`values()` 和 `items()` 方法迭代字典的键、值或键值对。请注意，许多列表方法——如
    `append()`、`extend()`、`index()`、`insert()` 和 `remove()`——无法应用于字典数据类型。
- en: 'To begin, add a new dictionary, named `courses`, to the end of your *dictionaries*
    sketch:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加一个名为 `courses` 的新字典到你 *字典* 草图的末尾：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The dictionary keys represent course titles; the associated values are the professors
    who coordinate each course. Next, you’ll look at ways to combine this dictionary
    with `for` loops.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键代表课程标题；关联的值是协调每门课程的教授。接下来，你将看到如何将这个字典与 `for` 循环结合起来。
- en: Iterating Keys
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 键的迭代
- en: 'You can write a `for` loop that deals only with keys, which is useful if you
    don’t need to work with the values in your dictionary. Key iteration happens implicitly
    wherever you use a `for...in` line with a dictionary. Test this behavior in the
    following example, which should display all of the course titles in your console:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写一个仅处理键的`for`循环，如果你不需要处理字典中的值，这会非常有用。在使用字典的`for...in`语句时，键的迭代是隐式发生的。可以在下面的示例中测试这一行为，它应该在控制台中显示所有课程标题：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With each iteration, Python assigns the next key in `courses` to `course`.
    The `print` line displays each course title on its own line in the console, and
    the loop is complete after all of the keys are exhausted:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，Python会将`courses`中的下一个键分配给`course`。`print`语句将每个课程标题显示在控制台的独立一行中，循环在所有键都被迭代后结束：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Recall that you cannot rely on the ordering of dictionary items. If you want
    to ensure that keys are retrieved in alphanumeric order, wrap a `sorted()` function
    around `courses`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你不能依赖字典项的顺序。如果你想确保按字母数字顺序获取键，可以将`sorted()`函数应用于`courses`：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The amended `for` line prints the keys in the following order:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`for`语句按以下顺序打印键：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you simply need a list of keys, use the `keys()` method, and to sort them,
    include a `sorted()` function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要键的列表，可以使用`keys()`方法，若要对其进行排序，加入`sorted()`函数：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This prints a list of the keys in the console, complete with square brackets
    and commas.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在控制台打印一个包含键的列表，括号和逗号也会显示出来。
- en: Iterating Values
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代值
- en: 'The `values()` method returns all of a dictionary’s values, which is useful
    if you don’t need to work with the keys in your dictionary. Add a new loop to
    your sketch, using the `values()` method to retrieve the names of each professor:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`values()`方法返回字典的所有值，如果你不需要处理字典中的键，这非常有用。向示例中添加一个新循环，使用`values()`方法来获取每个教授的名字：'
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With each iteration, Python assigns the next value in `courses` to `prof`. I’ve
    named this variable `prof` as an abbreviation for *professor* (representing the
    value it will hold). The `print` line displays the name of each course’s professor
    on a new line in the console.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，Python会将`courses`中的下一个值分配给`prof`。我将这个变量命名为`prof`，是*教授*（表示它将包含的值）的缩写。`print`语句将每门课程的教授名称显示在控制台的独立一行中。
- en: Iterating Items
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代项
- en: 'Often you’ll want both the dictionary key and the corresponding value for your
    loop. The `items()` method returns all of the dictionary’s key-value pairs. Before
    writing any loop code, print the items in your `courses` dictionary by using the
    `items()` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你会希望在循环中同时获取字典的键和值。`items()`方法返回字典的所有键值对。在编写任何循环代码之前，可以使用`items()`方法打印`courses`字典中的项：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here’s the console output (it doesn’t fit on a single line, which is indicated
    with the ellipsis):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是控制台输出（由于输出过长，使用省略号表示不能放在一行上）：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should be able to identify each key-value pair, grouped within parentheses.
    The parentheses surrounding each key-value pair denote a *tuple*. This book does
    not cover tuples in detail, so for now, consider them interchangeable with lists.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够识别出每一对键值，它们被括在括号内。每对键值之间的括号表示一个*元组*。本书不会详细讨论元组，所以暂时可以将它们视为与列表等效。
- en: 'Add this loop to print each key-value tuple on its own line in the console:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这个循环，将每个键值元组打印在控制台的单独一行：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When you use an `items()` method with a `for` loop, Python is assigning a tuple
    to your loop variable. I’ve named this `kv` as an abbreviation for *key-value*,
    but you could name it whatever you like. For example, on the *code art* iteration,
    `kv` is equal to `('code art', 'Prof. Sato')`. Run the sketch to confirm that
    the console displays each key-value pair, complete with parentheses and commas.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在`for`循环中使用`items()`方法时，Python会将一个元组分配给你的循环变量。我将其命名为`kv`，是*键值*的缩写，但你可以根据自己的喜好命名。例如，在*代码艺术*迭代中，`kv`等于`('code
    art', 'Prof. Sato')`。运行示例以确认控制台显示每个键值对，并且括号和逗号都显示出来。
- en: 'To make iterating dictionary items more convenient, Python allows you to include
    two variables between the `for` and `in`, one for the key and one for the corresponding
    value. You can name these variables whatever you like, but the order of assignment
    is always *key* first, *value* second; this matches the ordering in the tuple.
    Add this example to assign the course title and professor to separate variables.
    Additionally, this code includes a `sorted()` function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便遍历字典项，Python 允许你在 `for` 和 `in` 之间包括两个变量，一个用于键，另一个用于相应的值。你可以根据自己的喜好命名这些变量，但赋值的顺序始终是
    *key* 在前，*value* 在后；这与元组中的顺序一致。添加此示例以将课程名称和教授姓名分配给不同的变量。此外，此代码包括一个 `sorted()`
    函数：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With each iteration, Python assigns the key (course title) to the first variable
    1 and the value (professor name) to the second variable 2. The console should
    display the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每次迭代时，Python 将键（课程名称）赋值给第一个变量 1，将值（教授姓名）赋值给第二个变量 2。控制台应显示以下内容：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Notice that the `sorted()` function always operates on keys, so the sentences
    are ordered alphabetically by course title, not professor. To reverse the order,
    add a `reversed()` function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`sorted()` 函数始终对键进行操作，因此句子是按照课程名称的字母顺序排序的，而不是按照教授的名字。要反转顺序，可以添加 `reversed()`
    函数：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, the `code art` course will be listed as the last line in your console.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`code art` 课程将作为最后一行显示在你的控制台中。
- en: Working with JSON
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JSON
- en: JavaScript Object Notation was derived from JavaScript, but it’s a language-independent
    data format. Many programming languages support JSON, Python included, and it’s
    popular for web development. You can use JSON to store dictionary-like data in
    plaintext files, with key-value pairs, to construct nested dictionary- and list-style
    structures.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 对象表示法（JSON）来源于 JavaScript，但它是一种独立于语言的数据格式。许多编程语言支持 JSON，包括 Python，它在
    Web 开发中非常流行。你可以使用 JSON 将类似字典的数据存储在纯文本文件中，以键值对的形式，构建嵌套的字典和列表风格的结构。
- en: For this exercise, you’ll use JSON to format data in a plaintext file, just
    as you did with CSV in Chapter 7, except with a different syntax and the *.json*
    file extension. Python’s built-in *json* module will handle the data you read
    in. As mentioned previously, JSON syntax isn’t quite as simple as CSV, but it’s
    more descriptive and versatile.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这次练习，你将使用 JSON 来格式化纯文本文件中的数据，就像在第 7 章中使用 CSV 一样，只是语法不同，并且文件扩展名是 *.json*。Python
    的内置 *json* 模块将处理你读取的数据。如前所述，JSON 语法并不像 CSV 那样简单，但它更具描述性和多功能性。
- en: Understanding JSON Syntax
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 JSON 语法
- en: 'To understand how JSON syntax works, let’s contrast it with CSV. In Chapter
    7, you stored an album track list (for *The Dark Side of the Moon*) in CSV format.
    Here’s an abridged version of that file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 JSON 语法的工作原理，我们可以将其与 CSV 进行对比。在第 7 章中，你将专辑曲目列表（*The Dark Side of the Moon*）以
    CSV 格式进行了存储。以下是该文件的简化版本：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The first line contains the field headings. Lines 2 and beyond provide the details
    of each track.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行包含字段标题。第二行及以后的行提供每个曲目的详细信息。
- en: 'Here’s the same (abridged) track list formatted as JSON:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同（简化版）曲目列表，格式化为 JSON：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Each value has a corresponding key—just like a Python dictionary! If you study
    the code, you’ll realize that it looks like a list of dictionaries written in
    Python. However, subtle differences exist between JSON and Python’s data structure
    syntax. For instance, with JSON, you must use double quotes for strings; in Python,
    you have the option of single quotes. The terminology is a little different too.
    In JSON, curly brackets denote an object (not a dictionary), and square brackets
    define an array (not a list). What you name your keys and how you nest your elements
    is up to you.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个值都有一个对应的键——就像 Python 字典一样！如果你研究代码，你会发现它看起来像是 Python 中的字典列表。然而，JSON 和 Python
    数据结构语法之间存在一些微妙的差异。例如，在 JSON 中，字符串必须使用双引号；而在 Python 中，你可以选择使用单引号。术语上也略有不同。在 JSON
    中，大括号表示对象（而不是字典），而方括号表示数组（而不是列表）。你如何命名键和如何嵌套元素是由你决定的。
- en: 'Because this is a track list for an individual album, every track has the same
    `creator` and `album` information, which seems redundant. To avoid repetition,
    you can restructure your JSON as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个单个专辑的曲目列表，每个曲目都具有相同的 `creator` 和 `album` 信息，这看起来有些冗余。为了避免重复，你可以按以下方式重新结构化你的
    JSON：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The new structure nests the tracks within `tracklist`. The `creator` and `album`
    information is placed at the top level of the structure because it applies to
    every track.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 新结构将曲目嵌套在 `tracklist` 内。`creator` 和 `album` 信息被放置在结构的顶部层级，因为它适用于每个曲目。
- en: You can write your own JSON data, generate it dynamically, or source it online.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写自己的 JSON 数据、动态生成它，或者从网上获取它。
- en: Using Web APIs
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Web APIs
- en: Vast repositories of JSON data, ranging from music metadata to cat facts, are
    available via web APIs. A *web application programming interface (API)* is a web-based
    service you can use to request or post data. For example, you might request data
    from the Twitter API to generate a graph measuring your tweet frequency or to
    program a Twitter bot that autonomously posts tweets of your code art.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 大量的 JSON 数据库，包括音乐元数据到猫咪事实，都可以通过 Web APIs 获得。*Web 应用程序编程接口（API）* 是一种基于 Web 的服务，您可以用它来请求或发布数据。例如，你可以从
    Twitter API 请求数据，生成一个衡量你推文频率的图表，或者编程一个自动发布代码艺术推文的 Twitter 机器人。
- en: 'This book doesn’t cover how to use web APIs. However, if you want to explore
    web APIs, you should know a couple of things. Each API works slightly differently,
    which means you’ll need to refer to the service-specific developer documentation.
    Many APIs are accessible directly via a URL, which allows you to interface with
    them by using your web browser. For example, *OpenAQ* provides air-quality data
    from around the world. If you enter the following URL into your web browser, you’ll
    get a JSON summary of the air-quality data for every city in Norway: [https://api.openaq.org/v1/cities?country=NO](https://api.openaq.org/v1/cities?country=NO).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涵盖如何使用 Web APIs。不过，如果你想探索 Web APIs，应该了解一些基本内容。每个 API 的工作方式略有不同，这意味着你需要查阅特定服务的开发文档。许多
    APIs 可以通过 URL 直接访问，这允许你使用浏览器与它们进行交互。例如，*OpenAQ* 提供来自世界各地的空气质量数据。如果你在浏览器中输入以下 URL，你将得到挪威每个城市的空气质量数据的
    JSON 摘要：[https://api.openaq.org/v1/cities?country=NO](https://api.openaq.org/v1/cities?country=NO)。
- en: The *api.openaq.org* part is the API domain name. The */v1* indicates that you
    are using version 1, the first release of the API. The */cities* part requests
    the data for every city in OpenAQ’s database, but the *?country=NO* limits the
    cities to those located in Norway. For a copy of the data, use the **Save Page
    As** option in your browser menu, or copy and paste the contents into any plaintext
    editor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*api.openaq.org* 部分是 API 的域名。*/v1* 表示你正在使用第 1 版，即该 API 的第一次发布。*/cities* 部分请求
    OpenAQ 数据库中每个城市的数据，但 *?country=NO* 限制了这些城市只包括挪威的城市。要获取数据的副本，请使用浏览器菜单中的 **保存页面为**
    选项，或将内容复制并粘贴到任何文本编辑器中。'
- en: You’re also likely to come across APIs that provide CSV and XML data.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可能会遇到提供 CSV 和 XML 数据的 API。
- en: CSV, JSON, and XML have their own strengths and weaknesses, so weigh the relative
    merits of each format when considering what’s best for your projects. The beauty
    of CSV lies in its simplicity, but it cannot support hierarchically structured
    data. Unlike JSON, which allows you to nest objects within objects several levels
    deep, CSV limits you to a single value per field. XML is an established, widely
    supported, and flexible data exchange format, but it can be overly complex and
    bloated at times. JSON provides somewhat of a middle ground, and it has become
    increasingly popular on the web, as its syntax is more concise than XML’s.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: CSV、JSON 和 XML 各有优缺点，因此在选择最适合你项目的格式时，要权衡每种格式的相对优点。CSV 的优点在于其简洁性，但它无法支持层次结构的数据。与
    JSON 不同，JSON 允许你在对象内嵌套多个层级的对象，而 CSV 限制每个字段只有一个值。XML 是一种成熟、广泛支持且灵活的数据交换格式，但有时它会显得过于复杂和臃肿。JSON
    提供了一种折衷方案，并且在 Web 上变得越来越流行，因为它的语法比 XML 更简洁。
- en: Reading in JSON Data
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取 JSON 数据
- en: 'You can read in JSON data when your sketch runs. In this example, you’ll use
    coffee data stored in a JSON file to generate a chart. Create a new sketch named
    *coffee_chart* with a *data* subfolder, and then complete the following steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的草图运行时，你可以读取 JSON 数据。在这个例子中，你将使用存储在 JSON 文件中的咖啡数据生成一个图表。创建一个名为 *coffee_chart*
    的新草图，并创建一个 *data* 子文件夹，然后完成以下步骤：
- en: Open your browser and go to [https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 [https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/)。
- en: Navigate to *chapter-08-dictionaries_and_json*.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 *chapter-08-dictionaries_and_json*。
- en: Download the *data.zip* file.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 *data.zip* 文件。
- en: Extract the ZIP archive, and move *coffees.json* to the sketch *data* subfolder.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压 ZIP 文件，并将 *coffees.json* 移动到草图的 *data* 子文件夹中。
- en: 'Here is a snippet of the *coffees.json* file contents:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 *coffees.json* 文件内容的一个片段：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Each top-level object holds the details for a different type of coffee. This
    code shows two types of coffee: `Espresso` and `Irish Coffee`. These are the first
    and last recipes; there are nine types of coffee in all. Each `ingredient` object
    has three key-value pairs: an ingredient name 1, quantity in milliliters 2, and
    fill color 3. Note that these quantities are not necessarily accurate, so the
    final chart might not impress baristas and coffee aficionados, but it will look
    pretty cool.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每个顶层对象包含不同类型咖啡的详细信息。这段代码展示了两种咖啡：`Espresso`和`Irish Coffee`。这两种是第一种和最后一种配方；总共有九种咖啡。每个`ingredient`对象有三个键值对：配料名称1、数量（以毫升为单位）2、填充颜色3。请注意，这些数量不一定准确，因此最终的图表可能不会让咖啡师和咖啡爱好者印象深刻，但它会看起来相当酷。
- en: 'The next step is to load the data from the *coffees.json* file. Python’s `open()`
    function can open any file, plaintext or otherwise, and return a file object.
    For a JSON file, load the file object into a Python data structure by using the
    built-in *json* module. Add this code to your sketch:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是从*coffees.json*文件加载数据。Python的`open()`函数可以打开任何文件，无论是纯文本文件还是其他文件，并返回一个文件对象。对于JSON文件，可以使用内置的*json*模块将文件对象加载到Python数据结构中。将以下代码添加到你的草图中：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `import` line imports the *json* module. The `open()` function opens the
    JSON file and assigns the file object to the variable `jsondata`. The `json.load()`
    function converts the JSON to Python data. To confirm it’s working, print the
    quantity of whiskey in the Irish Coffee:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`行导入了*json*模块。`open()`函数打开JSON文件并将文件对象赋值给变量`jsondata`。`json.load()`函数将JSON转换为Python数据。为了确认它是否正常工作，可以打印出爱尔兰咖啡中的威士忌数量：'
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The Irish Coffee is the last element in a list of nine coffees; hence, it has
    an index of `8`. The whiskey content is the second ingredient (`['ingredients'][1]`).
    The final `['quantity']` represents the quantity value of the ingredient, 40 milliliters.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 爱尔兰咖啡是九种咖啡列表中的最后一个元素，因此它的索引是`8`。威士忌内容是第二个配料（`['ingredients'][1]`）。最终的`['quantity']`表示配料的数量值，40毫升。
- en: When you retrieved CSV data by using `loadStrings()`, everything was data-typed
    as a string, numbers included. You had to convert values to integers by using
    the `int()` function before performing any arithmetic; to create lists, you had
    to use a `split()` function. The *json* module, however, handles all of this conversion
    for you. A JSON value like `40`, with no decimal point or quotation marks, is
    interpreted as an integer; comma-separated values within square brackets are turned
    into Python lists automatically; and so forth. Now that you can access the data
    in Python, you can use it to render a chart.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过使用`loadStrings()`获取CSV数据时，所有的数据类型都是字符串，包括数字。你必须使用`int()`函数将数值转换为整数，然后才能进行任何算术运算；要创建列表，你必须使用`split()`函数。然而，*json*模块会为你处理所有这些转换。像`40`这样的JSON值，没有小数点或引号，会被解释为整数；方括号中的逗号分隔值会自动转换为Python列表；等等。现在你可以在Python中访问数据，并使用它来渲染图表。
- en: 'Challenge #9: Coffee Chart'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '挑战 #9：咖啡图表'
- en: You’ll visualize the data for all nine coffees by using nine mugs arranged in
    a 3 × 3 grid fashion. [Figure 8-3](#figure8-3) shows a screenshot of the final
    result.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你将通过使用九个杯子，按照3 × 3的网格方式来可视化所有九种咖啡的数据。[图8-3](#figure8-3)显示了最终结果的截图。
- en: '![f08003](image_fi/500969c08/f08003.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![f08003](image_fi/500969c08/f08003.png)'
- en: 'Figure 8-3: The complete coffee chart'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：完整的咖啡图表
- en: 'Add the following code to define a display window size, background color, and
    some variables, and to lay out nine empty mugs:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码来定义显示窗口的大小、背景颜色和一些变量，并布局九个空杯子：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The lines above the `for` line define the main parameters for the sketch, such
    as the display window size and background color. The `mug` and `spacing` variables
    control the mug sizing and spacing, respectively; the `col` variable serves as
    a column counter. Comments within the `for` loop indicate where the mug and label
    drawing code begins. After drawing each mug 3, Processing translates the drawing
    space 230 pixels to the right and adds 1 to `col`. When `col` reaches 3 2 (every
    third mug), the drawing space is shifted back to the left edge of the display
    window and down one row, and `col` resets to 1\. The ingredients code has been
    left for you to complete; the comment indicates where you should write it 1.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`语句之前的代码定义了草图的主要参数，如显示窗口大小和背景颜色。`mug`和`spacing`变量分别控制马克杯的大小和间距；`col`变量作为列计数器。在`for`循环中的注释指出了绘制马克杯和标签代码的开始位置。绘制每个马克杯3之后，Processing会将绘图空间向右移动230像素，并将`col`加1。当`col`达到3
    2（每第三个马克杯）时，绘图空间会被移回到显示窗口的左边缘，并下移一行，`col`重置为1。配料的代码已经为你留好，注释指出了你应该编写代码的位置1。'
- en: Run the sketch. You should see nine empty mugs with labels. Now, complete the
    chart so it looks like [Figure 8-3](#figure8-3). If you need help, you can access
    the solution at [https://github.com/tabreturn/processing.py-book/tree/master/chapter-08-dictionaries_and_json/coffee_chart/](https://github.com/tabreturn/processing.py-book/tree/master/chapter-08-dictionaries_and_json/coffee_chart/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图。你应该能看到九个空的带标签的马克杯。现在，完成图表，使其看起来像[图8-3](#figure8-3)。如果你需要帮助，可以通过[https://github.com/tabreturn/processing.py-book/tree/master/chapter-08-dictionaries_and_json/coffee_chart/](https://github.com/tabreturn/processing.py-book/tree/master/chapter-08-dictionaries_and_json/coffee_chart/)查看解决方案。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned to organize a collection of items in a dictionary
    that can associate values with meaningfully named keys. Furthermore, you combined
    dictionaries and lists to create more intuitive data structures. You also learned
    how to define, access, modify, and nest dictionaries, and how to loop through
    dictionaries by using keys, then values.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将项目集合组织成字典，这样可以将值与有意义的键关联起来。此外，你还将字典和列表结合起来，创建了更直观的数据结构。你还学会了如何定义、访问、修改和嵌套字典，以及如何通过键和值来遍历字典。
- en: This chapter also introduced you to JSON. You learned how it’s similar to Python
    dictionaries and lists, and how to read in JSON data. You can store dictionary
    and list data in JSON files to separate your Python code from your data. If you’re
    looking for interesting data to work with, many online sources host JSON datasets
    that you can access for free.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了JSON。你了解了它与Python字典和列表的相似之处，以及如何读取JSON数据。你可以将字典和列表数据存储在JSON文件中，从而将Python代码与数据分离。如果你正在寻找有趣的数据来进行处理，许多在线资源都提供了免费的JSON数据集供你访问。
- en: In Chapter 9, you’ll learn how to define and work with functions, which are
    named sections of code. You decide what to name your functions, and whenever you
    want to run a function, you call it by its name. This helps reduce repetition
    in your code because you can repeat a one-line function call instead of many lines
    of code. Think of functions as reusable blocks of code that will make your sketches
    more efficient and easier to maintain. You’ll write functions, including some
    to generate elliptical and wave-like motion, and then you’ll use these functions
    to program animated effects that employ trigonometry.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在第9章，你将学习如何定义和使用函数，它们是命名的代码块。你决定为函数命名，每当你想运行一个函数时，通过其名称来调用它。这有助于减少代码中的重复，因为你可以多次调用一个单行函数，而无需重复编写多行代码。可以将函数看作是可重用的代码块，它们将使你的草图更加高效，易于维护。你将编写函数，包括一些生成椭圆和波浪运动的函数，然后使用这些函数来编程动画效果，运用三角函数进行计算。
