- en: '**16'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16'
- en: THE INFOVIS, SCIVIS, AND DASHBOARDING LIBRARIES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 信息可视化、科学可视化与仪表板库**
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Visualizing data is an integral part of science. Humans are visual creatures
    by nature, and viewing data graphically is more efficient and intuitive than reading
    through lists of strings or numbers. Effective plots help you to clean, prepare,
    and explore data. You can use them to reveal outliers and spurious samples, identify
    patterns, and compare datasets. Perhaps most important, they help you to communicate
    clearly with others and convey your ideas in an easily consumed manner. It’s little
    wonder that graphics have been called the “pinnacle of communication.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是科学的一个重要组成部分。人类天生是视觉生物，以图形方式查看数据比阅读字符串或数字列表更高效、更直观。有效的图表帮助你清理、准备和探索数据。你可以利用它们揭示异常值和虚假样本，识别模式，并比较数据集。也许最重要的是，它们帮助你与他人清晰地沟通，并以一种易于理解的方式传达你的想法。难怪图形被称为“沟通的巅峰”。
- en: Data visualization is a very broad category that includes everything from simple
    charts used for data exploration and reporting, to complex interactive web applications
    that operate in real time. With Python, you can easily cover this range. In fact,
    when it comes to creating graphics, Python suffers from an embarrassment of riches.
    With more than 40 different plotting libraries, there’s something for everyone.
    But that’s part of the problem.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是一个非常广泛的类别，涵盖了从用于数据探索和报告的简单图表，到实时操作的复杂交互式Web应用程序。使用Python，你可以轻松地涵盖这一范围。事实上，当涉及到创建图形时，Python因其丰富的资源而感到困扰。拥有超过40个不同的绘图库，几乎每个人都能找到适合自己的。但这也是问题的一部分。
- en: 'Wading through Python’s plotting APIs is exhausting. Users can be overwhelmed
    by all the choices, which cover a wide range of functionality, both unique and
    overlapping. As a result, they usually focus more on learning APIs than on their
    real job: exploring their data. In fact, this book was inspired by conversations
    with other scientists who were frustrated by this very problem.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 穿越Python的绘图API令人精疲力尽。用户可能会被所有选择所淹没，这些选择涵盖了广泛的功能，既有独特的也有重叠的。结果，他们通常更多地关注学习API，而不是他们真正的工作：探索数据。事实上，本书的灵感来自于与其他科学家讨论这一问题，他们正是因为这个问题感到沮丧。
- en: Another issue with Python’s plotting libraries is that the vast majority force
    you to write code to create even the simplest of visualizations. Compare this
    to software like Tableau or Excel, in which sensible, attractive graphs require
    just a few clicks of a mouse with little cognitive burden on the user.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python的绘图库的另一个问题是，绝大多数都要求你编写代码来创建即使是最简单的可视化。与Tableau或Excel等软件相比，这些软件通过少量鼠标点击就能创建合理且美观的图表，且对用户的认知负担很小。
- en: Fortunately, many users share similar needs, and with a little forethought you
    can avoid going down suboptimal paths. In general, this involves selecting a high-level
    tool that covers the most common tasks succinctly and conveniently, typically
    by providing a simpler API on top of an existing tool.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，许多用户有类似的需求，通过稍微的前瞻性思考，你可以避免走上次优路径。通常，这涉及选择一个涵盖最常见任务的高层工具，简洁且方便，通常通过在现有工具上提供更简单的API来实现。
- en: In the sections that follow, we’ll take a broad look at some of Python’s most
    popular and useful plotting and dashboarding libraries. Then, we’ll review some
    logical questions that should help guide you to the best plotting library, or
    libraries, for your needs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将广泛地了解一些Python中最受欢迎和最有用的绘图和仪表板库。然后，我们将回顾一些逻辑性问题，帮助你找到最适合你需求的绘图库或库。
- en: '**NOTE**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The plotting examples in this chapter are intended to demonstrate the complexity
    of the code and the types of plots produced. You’re not expected to run the code
    snippets, as many of the libraries discussed do not come preinstalled with Anaconda.
    But if you do want to test them for yourself, you can find installation instructions
    in the product web pages. I recommend that you install them all in a dedicated
    conda environment (see [Chapter 2](ch02.xhtml)), rather than dump them in your
    base environment.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章中的绘图示例旨在展示代码的复杂性和生成的图表类型。你不需要运行代码片段，因为许多讨论的库并未预先安装在Anaconda中。但如果你确实想自己测试它们，可以在产品网页上找到安装说明。我建议你将它们全部安装在一个专用的conda环境中（请参见[第2章](ch02.xhtml)），而不是将它们放在基础环境中。*'
- en: '**InfoVis and SciVis Libraries**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**信息可视化和科学可视化库**'
- en: 'We can divide visualizations into three main categories: *InfoVis*, *SciVis*,
    and *GeoVis* ([Figure 16-1](ch16.xhtml#ch016fig1)). InfoVis, short for *Information
    Visualization*, refers to 2D or simple 3D static or interactive representations
    of data. Common examples are statistical plots such as pie charts and histograms.
    SciVis, short for *Scientific Visualization*, refers to graphical representations
    of physically situated data. These visualizations are designed to provide insight
    into the data, especially when it’s studied by novel and unconventional means.
    Examples are magnetic resonance imaging (MRI) and simulations of turbulent fluid
    flow. GeoVis, short for *Geovisualization*, refers to the analysis of geospatial
    (geographically located) data through static and interactive visualization. Examples
    include satellite imagery and map creation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将可视化分为三大类：*InfoVis*、*SciVis* 和 *GeoVis* （见[图 16-1](ch16.xhtml#ch016fig1)）。InfoVis（信息可视化）指的是
    2D 或简单的 3D 静态或交互式数据表示，常见的例子包括统计图表，如饼图和柱状图。SciVis（科学可视化）指的是物理数据的图形表示，这些可视化旨在通过新颖和非常规的手段提供数据洞察。例如磁共振成像（MRI）和湍流流体流动的模拟。GeoVis（地理可视化）指的是通过静态和交互式可视化分析地理位置数据。常见的例子包括卫星图像和地图创建。
- en: '![Image](../images/16fig01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig01.jpg)'
- en: '*Figure 16-1: Three visualization categories with examples*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-1：三种可视化类别及示例*'
- en: '[Tables 16-1](ch16.xhtml#ch016tab1) lists some of Python’s more important InfoVis
    and SciVis plotting libraries. We’ll take a closer look at some of these in the
    sections that follow before turning to the dashboard libraries. Then, in [Chapter
    17](ch17.xhtml), we’ll repeat this exercise for the GeoVis libraries.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 16-1](ch16.xhtml#ch016tab1)列出了 Python 中一些重要的 InfoVis 和 SciVis 绘图库。接下来，我们将详细介绍其中的一些，然后再转向仪表盘库。最后，在[第
    17 章](ch17.xhtml)中，我们将对 GeoVis 库进行类似的探讨。'
- en: '**Table 16-1:** Python’s Major InfoVis and SciVis Libraries'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 16-1：** Python 主要的 InfoVis 和 SciVis 库'
- en: '| **Type** | **Library** | **Description** | **Website** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **库** | **描述** | **网址** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| InfoVis | Matplotlib | Publication-quality 2D and simple 3D plots | *[https://matplotlib.org/](https://matplotlib.org/)*
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| InfoVis | Matplotlib | 适用于出版质量的 2D 和简单 3D 图表 | *[https://matplotlib.org/](https://matplotlib.org/)*
    |'
- en: '| seaborn | Matplotlib wrapper for easier, prettier plots | *[https://seaborn.pydata.org/](https://seaborn.pydata.org/)*
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| seaborn | Matplotlib 封装库，简化且美化绘图 | *[https://seaborn.pydata.org/](https://seaborn.pydata.org/)*
    |'
- en: '| pandas | Matplotlib wrapper for easy DataFrame plotting | *[http://pandas.pydata.org/](http://pandas.pydata.org/)*
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| pandas | Matplotlib 封装库，简化 DataFrame 图表绘制 | *[http://pandas.pydata.org/](http://pandas.pydata.org/)*
    |'
- en: '| Altair | Easy and simple 2D plots for small datasets | *[https://altair-viz.github.io/](https://altair-viz.github.io/)*
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| Altair | 简单易用的 2D 图形，适用于小型数据集 | *[https://altair-viz.github.io/](https://altair-viz.github.io/)*
    |'
- en: '| ggplot | Simple “grammar of graphics” plots with pandas | *[https://yhat.github.io/ggpy/](https://yhat.github.io/ggpy/)*
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| ggplot | 使用 pandas 绘制简单的“图形语法”图表 | *[https://yhat.github.io/ggpy/](https://yhat.github.io/ggpy/)*
    |'
- en: '| Bokeh | Web interactivity tool with large or streaming datasets | *[https://bokeh.org/](https://bokeh.org/)*
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| Bokeh | 大型或流数据集的网页交互工具 | *[https://bokeh.org/](https://bokeh.org/)* |'
- en: '| Chartify | Bokeh wrapper for easier charting | *[https://github.com/spotify/chartify/](https://github.com/spotify/chartify/)*
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Chartify | 基于 Bokeh 的图表封装，简化图表绘制 | *[https://github.com/spotify/chartify/](https://github.com/spotify/chartify/)*
    |'
- en: '| Plotly | Dynamic, interactive graphics for web apps | *[https://plotly.com/python/](https://plotly.com/python/)*
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Plotly | 动态交互图形，适用于网页应用 | *[https://plotly.com/python/](https://plotly.com/python/)*
    |'
- en: '| HoloViews | Viz data structures usable by many libraries | *[http://holoviews.org/](http://holoviews.org/)*
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| HoloViews | 可被多种库使用的可视化数据结构 | *[http://holoviews.org/](http://holoviews.org/)*
    |'
- en: '| hvPlot | Easy interactive plotting library built on HoloViews/Bokeh | *[https://hvplot.holoviz.org/](https://hvplot.holoviz.org/)*
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| hvPlot | 基于 HoloViews/Bokeh 的简易交互绘图库 | *[https://hvplot.holoviz.org/](https://hvplot.holoviz.org/)*
    |'
- en: '| Datashader | Tools for rasterizing giant datasets for easy visualization
    | *[https://datashader.org/](https://datashader.org/)* |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Datashader | 用于将巨大数据集栅格化的工具，便于可视化 | *[https://datashader.org/](https://datashader.org/)*
    |'
- en: '| SciVis | VTK | Visualization toolkit for 3D computer graphics | *[https://vtk.org/](https://vtk.org/)*
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| SciVis | VTK | 3D 计算机图形的可视化工具包 | *[https://vtk.org/](https://vtk.org/)* |'
- en: '| Mayavi | 3D scientific visualization tool with interactivity | *[https://docs.enthought.com/mayavi/](https://docs.enthought.com/mayavi/)*
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Mayavi | 具有交互性的 3D 科学可视化工具 | *[https://docs.enthought.com/mayavi/](https://docs.enthought.com/mayavi/)*
    |'
- en: '| ParaView | 3D scientific visualization tool with interactivity | *[https://www.paraview.org/](https://www.paraview.org/)*
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| ParaView | 具有交互性的 3D 科学可视化工具 | *[https://www.paraview.org/](https://www.paraview.org/)*
    |'
- en: '**NOTE**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re curious about how we got into this mess, take a few minutes to look
    at James Bednar’s blog post “*Python Data Visualization 2018: Why So Many Libraries?”*
    ([https://www.anaconda.com/blog/python-data-visualization-2018-why-so-many-libraries/](https://www.anaconda.com/blog/python-data-visualization-2018-why-so-many-libraries/)).
    You should also check out his ebook, Python Data Visualization*,* and PyViz site
    ([https://pyviz.org/](https://pyviz.org/)*)*, which are designed to help users
    decide on the best open source Python data visualization tools for their purposes,
    with links, overviews, comparisons, examples, and exhaustive tool lists.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你对我们是如何陷入这场混乱的好奇，可以花几分钟看看 James Bednar 的博客文章“*Python 数据可视化 2018：为什么有这么多库？*”([https://www.anaconda.com/blog/python-data-visualization-2018-why-so-many-libraries/](https://www.anaconda.com/blog/python-data-visualization-2018-why-so-many-libraries/))。你还应该查看他的电子书《Python
    数据可视化》和 PyViz 网站 ([https://pyviz.org/](https://pyviz.org/))，这些资源旨在帮助用户为他们的需求选择最佳的开源
    Python 数据可视化工具，包括链接、概述、比较、示例和详尽的工具列表。*'
- en: '***Matplotlib***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Matplotlib***'
- en: The *Matplotlib* library is an open source, comprehensive library for creating
    manuscript-quality static, animated, and interactive visualizations in Python.
    These are mainly 2D plots, such as bar charts, pie charts, scatterplots, and so
    on, though some 3D plotting is possible ([Figure 16-2](ch16.xhtml#ch016fig2)).
    Matplotlib is almost 20 years old and was designed to provide early versions of
    Python with a familiar MATLAB-type interface. MATLAB is a proprietary scientific
    programming language that has been displaced in popularity by Python.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*Matplotlib* 库是一个开源的、综合性的 Python 可视化库，旨在创建手稿级别的静态、动画和交互式可视化。主要是 2D 图表，例如条形图、饼图、散点图等，尽管也有一些
    3D 绘图的可能性（[图 16-2](ch16.xhtml#ch016fig2)）。Matplotlib 已经有近 20 年的历史，最初是为了为早期版本的
    Python 提供一个类似 MATLAB 的界面。MATLAB 是一种专有的科学编程语言，虽然曾经很流行，但现在已被 Python 取而代之。'
- en: '![Image](../images/16fig02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig02.jpg)'
- en: '*Figure 16-2: A small sampling of Matplotlib plot types (courtesy of [https://matplotlib.org/](https://matplotlib.org/))*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-2：Matplotlib 绘图类型的小样本（图片来源：[https://matplotlib.org/](https://matplotlib.org/)）*'
- en: Matplotlib’s focus is on creating static images for use in publications and
    interactive figures for data exploration and analysis. These interactive figures
    use GUI toolkits like Qt, rather than web applications. The library comes preinstalled
    with Anaconda.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的重点是创建用于出版物的静态图像和用于数据探索与分析的交互式图形。这些交互式图形使用像 Qt 这样的 GUI 工具包，而不是 Web
    应用程序。该库已与 Anaconda 一起预安装。
- en: Matplotlib is the King, Grandaddy, and Big Kahuna of Python visualization. It’s
    a massive, exhaustive library, and many alternative products are built on top
    of it, just as others are built on NumPy (including Matplotlib). Likewise, the
    internal visualization tools of libraries like pandas leverage Matplotlib methods.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 是 Python 可视化的王者、祖宗和“大咖”。它是一个庞大且详尽的库，许多替代产品都建立在它之上，就像其他库也建立在 NumPy
    之上（包括 Matplotlib）。同样，像 pandas 这样的库的内部可视化工具也依赖于 Matplotlib 方法。
- en: The Matplotlib motto is that it “makes easy things easy and hard things possible.”
    It works on all operating systems and handles all the common image formats. It
    has broad functionality, allowing you to build just about any kind of chart you
    can imagine, and it’s very compatible with other popular science libraries like
    pandas, NumPy, and scikit-learn, thanks to collaborations between the Matplotlib
    and IPython communities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的座右铭是“让简单的事变得简单，让复杂的事变得可能”。它支持所有操作系统，并处理所有常见的图像格式。它功能广泛，几乎可以构建你能想象的任何类型的图表，而且由于
    Matplotlib 和 IPython 社区的合作，它与其他流行的科学库如 pandas、NumPy 和 scikit-learn 具有高度兼容性。
- en: Matplotlib is a powerful but low-level plotting engine. This means that you
    have lots of flexibility and options for precisely controlling plots by assembling
    them component by component. But this freedom comes with complexity. When creating
    anything beyond a simple plot, your code can become ugly, dense, and tedious.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 是一个强大但低级的绘图引擎。这意味着你有很多灵活性和选项，可以通过逐步组装组件来精确控制图表。但这种自由也带来了复杂性。当创建复杂的图表时，你的代码可能会变得丑陋、密集且冗长。
- en: The unfriendliness of Matplotlib’s API is offset somewhat by its popularity
    and maturity. A simple online search will yield example code for just about any
    plot that you want to make. Its greatest resource is undoubtably the Matplotlib
    *gallery* (*[https://matplotlib.org/gallery/index.html/](https://matplotlib.org/gallery/index.html/)*),
    a “cookbook” of code recipes for making a huge variety of plots.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib的API的难用性在一定程度上被其流行度和成熟度所弥补。简单的在线搜索就能找到几乎任何你想绘制的图形的示例代码。它最宝贵的资源无疑是Matplotlib的*图库*（*[https://matplotlib.org/gallery/index.html/](https://matplotlib.org/gallery/index.html/)*），这是一个包含各种图形绘制代码“食谱”的“烹饪书”。
- en: Other issues with Matplotlib are the appearance and “explorable nature” of its
    plots. Although Matplotlib plots come with interactive features like zooming,
    panning, saving, and posting the cursor’s *location* ([Figure 16-3](ch16.xhtml#ch016fig3)),
    they are somewhat antiquated compared to what’s directly available in more modern
    libraries.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib的其他问题包括其图形的外观和“可探索性”。尽管Matplotlib图形具有交互功能，如缩放、平移、保存和显示光标的*位置*（[图16-3](ch16.xhtml#ch016fig3)），但与更现代的库相比，它们显得有些过时。
- en: '![Image](../images/16fig03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig03.jpg)'
- en: '*Figure 16-3: Matplotlib plot in an external Qt window (left) versus inline
    in a Jupyter notebook (right)*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-3：Matplotlib图形在外部Qt窗口（左）与Jupyter笔记本内联显示（右）的对比*'
- en: By default, Matplotlib’s interactivity is designed to work in *external* windows
    rather than *inline* on the same screen as your code. You can force inline interactivity
    in Jupyter Notebook and JupyterLab, but the results can be buggy. For example,
    the Save button might simply open a blank web page rather than downloading the
    plot. Other libraries also provide more intelligent cursor hovering capabilities
    that can display custom information about posted data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Matplotlib的交互功能是设计为在*外部*窗口中工作，而不是在与你的代码位于同一屏幕上的*内联*模式下。你可以在Jupyter Notebook和JupyterLab中强制使用内联交互，但结果可能会出现故障。例如，保存按钮可能会直接打开一个空白网页，而不是下载图形。其他库还提供了更智能的光标悬停功能，可以显示有关已显示数据的自定义信息。
- en: As a testament to Matplotlib’s dominance and usefulness, a number of external
    packages extend or build on Matplotlib functionality (see *[https://matplotlib.org/3.2.1/thirdpartypackages/](https://matplotlib.org/3.2.1/thirdpartypackages/)*).
    Two of these, *mpldatacursor* and *mplcursors*, let you add *some* interactive
    data cursor functionality to plots using only a few lines of code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Matplotlib主导地位和实用性的证明，许多外部包扩展或建立在Matplotlib的功能之上（参见*[https://matplotlib.org/3.2.1/thirdpartypackages/](https://matplotlib.org/3.2.1/thirdpartypackages/)*）。其中两个包，*mpldatacursor*和*mplcursors*，允许你只用几行代码向图形添加*一些*交互式数据光标功能。
- en: Likewise, there are add-on visualization toolkits that rely on Matplotlib under
    the hood. One of the most important is *seaborn*, which is designed to simplify
    plotting and to generate more attractive plots than those produced by Matplotlib’s
    defaults. Both seaborn and pandas are wrappers over Matplotlib, which lets you
    access some of Matplotlib’s methods with less code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也有一些依赖Matplotlib底层的附加可视化工具包。其中最重要的之一是*seaborn*，它旨在简化绘图，并生成比Matplotlib默认值更具吸引力的图形。seaborn和pandas都是Matplotlib的封装库，使你可以使用更少的代码访问Matplotlib的部分方法。
- en: '***seaborn***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***seaborn***'
- en: The *seaborn* library is a free, open source visualization library built on
    Matplotlib. It provides a higher-level (that is, easier-to-use) interface for
    drawing attractive and informative *statistical* graphics such as bar charts,
    scatterplots, histograms, and so on. It also comes with built-in functions for
    density estimators, confidence bounds, and regression functions. Not surprisingly,
    it’s well integrated with data structures in pandas and NumPy. Seaborn comes preinstalled
    with Anaconda.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*seaborn*库是一个免费的开源可视化库，建立在Matplotlib之上。它提供了一个更高层次的（即更易用的）接口，用于绘制吸引人且信息丰富的*统计*图形，如条形图、散点图、直方图等。它还内置了密度估计器、置信区间和回归函数的功能。不出所料，它与pandas和NumPy中的数据结构有很好的集成。seaborn已在Anaconda中预安装。'
- en: A goal of seaborn is to make visualization a central part of exploring and understanding
    data through the use of dataset-oriented plotting functions. It makes default
    plots more attractive and supports the building of complex visualizations. It
    helps reveal data patterns through the use of high-level multiplot grids and different
    color pallets (visit *[https://seaborn.pydata.org/examples/index.html](https://seaborn.pydata.org/examples/index.html)*
    for some examples).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn的目标之一是通过使用面向数据集的绘图函数，使可视化成为探索和理解数据的核心部分。它使得默认的图表更加美观，并支持构建复杂的可视化。通过使用高级的多图网格和不同的颜色调色板，它帮助揭示数据模式（访问
    *[https://seaborn.pydata.org/examples/index.html](https://seaborn.pydata.org/examples/index.html)*
    以查看更多示例）。
- en: Seaborn is designed to work well with the popular DataFrame objects in pandas,
    and you can easily assign column names to the plot axes. It’s also considered
    preferrable to Matplotlib for making multidimensional plots.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn设计上与pandas中的流行DataFrame对象兼容，你可以轻松地将列名分配给图表的坐标轴。它也被认为比Matplotlib更适合制作多维度的图表。
- en: 'In the example that follows, the last line of code generated an attractive
    scatterplot including a linear regression line with 95 percent confidence interval,
    marginal histograms, and distributions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，最后一行代码生成了一个吸引人的散点图，包括一个带有95％置信区间的线性回归线、边际直方图和分布图：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Image](../images/f0424-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0424-01.jpg)'
- en: One of the best features of seaborn is the *pairplot*. This built-in plot type
    lets you explore the pairwise relationships in an entire dataset in one figure,
    with the option of viewing histograms, layered kernel density estimates, scatterplots,
    and more. Following is an example of a pairplot created using the Palmer Archipelago
    dataset for identifying penguin species. The data is loaded as a pandas DataFrame
    (see the pandas section in [Chapter 15](ch15.xhtml) for an overview of the pandas
    library).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn的最佳特性之一是*pairplot*。这种内置的图表类型让你可以在一张图中探索整个数据集中的成对关系，提供查看直方图、分层核密度估计、散点图等选项。以下是使用Palmer群岛数据集创建的pairplot示例，用于识别企鹅物种。数据被加载为pandas
    DataFrame（有关pandas库的概述，请参见[第15章](ch15.xhtml)）。
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Image](../images/f0425-01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0425-01.jpg)'
- en: 'Another built-in plot type, *stripplot*, is a scatterplot in which one variable
    is categorical. It’s perfect for comparing the lengths of bills among penguin
    species:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个内置的图表类型，*stripplot*，是一种散点图，其中一个变量是分类变量。它非常适合比较不同企鹅物种的喙长：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Image](../images/f0425-02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0425-02.jpg)'
- en: 'Unlike Matplotlib, seaborn lets you manipulate data *during* the plotting operation.
    For example, you can calculate the number of body mass samples in the penguins
    dataset by calling the built-in length function (`len`) from within the `barplot()`
    method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与Matplotlib不同，seaborn允许你在绘图操作*过程中*操作数据。例如，你可以通过在`barplot()`方法中调用内置的长度函数（`len`）来计算企鹅数据集中的体重样本数量：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Image](../images/f0426-01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0426-01.jpg)'
- en: Let’s take a look at how easy it is to customize a plot using seaborn. [Table
    16-2](ch16.xhtml#ch016tab2) lists the top 10 countries most affected by COVID-19
    (based on number of cases) in roughly the first year of the virus’s spread. The
    Fatality Rate column lists the number of deaths per 100 confirmed cases. The Deaths
    per 100,000 column calculates deaths based on a country’s general population.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用seaborn定制图表有多么简单。[表16-2](ch16.xhtml#ch016tab2)列出了COVID-19大流行初期，受影响最严重的前10个国家（按病例数排序）。致死率列列出了每100例确诊病例的死亡人数。每10万人死亡数列根据国家的总人口计算死亡人数。
- en: '**Table 16-2:** COVID-19 Statistics'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**表16-2：** COVID-19统计数据'
- en: '| **Country** | **Region** | **Cases** | **Deaths** | **Deaths/100K popl**
    | **Fatality rate** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **国家** | **地区** | **病例数** | **死亡人数** | **每10万人死亡数** | **致死率** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| United States | North America | 31,197,873 | 562,066 | 171.80 | 0.018 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 美国 | 北美 | 31,197,873 | 562,066 | 171.80 | 0.018 |'
- en: '| India | Asia | 13,527,717 | 170,179 | 12.58 | 0.013 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 印度 | 亚洲 | 13,527,717 | 170,179 | 12.58 | 0.013 |'
- en: '| Brazil | Latin America | 13,482,023 | 353,137 | 168.59 | 0.026 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 巴西 | 拉丁美洲 | 13,482,023 | 353,137 | 168.59 | 0.026 |'
- en: '| France | Europe | 5,119,585 | 98,909 | 147.65 | 0.019 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 法国 | 欧洲 | 5,119,585 | 98,909 | 147.65 | 0.019 |'
- en: '| Russia | Asia | 4,589,209 | 101,282 | 70.10 | 0.022 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 俄罗斯 | 亚洲 | 4,589,209 | 101,282 | 70.10 | 0.022 |'
- en: '| UK | Europe | 4,384,610 | 127,331 | 191.51 | 0.029 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 英国 | 欧洲 | 4,384,610 | 127,331 | 191.51 | 0.029 |'
- en: '| Turkey | Middle East | 3,849,011 | 33,939 | 41.23 | 0.009 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 土耳其 | 中东 | 3,849,011 | 33,939 | 41.23 | 0.009 |'
- en: '| Italy | Europe | 3,769,814 | 114,254 | 189.06 | 0.030 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 意大利 | 欧洲 | 3,769,814 | 114,254 | 189.06 | 0.030 |'
- en: '| Spain | Europe | 3,347,512 | 76,328 | 163.36 | 0.023 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 西班牙 | 欧洲 | 3,347,512 | 76,328 | 163.36 | 0.023 |'
- en: '| Germany | Europe | 3,012,158 | 78,500 | 94.66 | 0.026 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 德国 | 欧洲 | 3,012,158 | 78,500 | 94.66 | 0.026 |'
- en: '| Source: *[https://coronavirus.jhu.edu/data/mortality](https://coronavirus.jhu.edu/data/mortality)*
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 来源: *[https://coronavirus.jhu.edu/data/mortality](https://coronavirus.jhu.edu/data/mortality)*
    |'
- en: 'Let’s save [Table 16-2](ch16.xhtml#ch016tab2) as a comma-separated value (*.csv*)
    file and use it with seaborn to look at the relationship among deaths, the death
    rate per 100,000 people, and the fatality rate:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将[表 16-2](ch16.xhtml#ch016tab2)保存为逗号分隔值（*.csv*）文件，并与 seaborn 一起使用，查看死亡人数、每10万人死亡率和致死率之间的关系：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Image](../images/f0427-01.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0427-01.jpg)'
- en: After importing pandas and seaborn, you set the style of the plot to give it
    a white background with gridlines. The data, in *.csv* format, is then loaded
    as a pandas DataFrame named `df`. Creating a scatterplot (`scatter`) takes a single
    command. The marker color (`hue`) and shape (`style`) are based on the country
    and their size reflects the fatality rate, with a size range of 50 to 200\. You
    finish by creating a legend and calling the plot. Note how, by using the DataFrame
    column names from [Table 16-2](ch16.xhtml#ch016tab2), the code is easy to read
    and understand.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入 pandas 和 seaborn 后，你设置图表的样式，使其背景为白色并带有网格线。然后以 *.csv* 格式加载数据，生成名为 `df` 的
    pandas DataFrame。创建散点图（`scatter`）只需要一个命令。标记的颜色（`hue`）和形状（`style`）基于国家，标记的大小反映了致死率，大小范围为
    50 到 200。最后，你创建一个图例并调用图表。请注意，通过使用[表 16-2](ch16.xhtml#ch016tab2)中的 DataFrame 列名，代码易于阅读和理解。
- en: Despite being an abstraction layer on top of Matplotlib, seaborn provides access
    to underlying Matplotlib objects, so you can still achieve precise control over
    your plots. Of course, you’ll need to know Matplotlib to some degree to tweak
    the seaborn defaults in this manner.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 seaborn 是基于 Matplotlib 的抽象层，但它仍然提供访问底层 Matplotlib 对象的方式，因此你仍然可以精确控制你的图表。当然，你需要对
    Matplotlib 有一定了解，才能以这种方式调整 seaborn 的默认设置。
- en: Seaborn plots are considered more attractive, and thus better for publications
    and presentations, than those produced by Matplotlib. It’s a good choice if all
    you want are static images made with simpler code and better defaults.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 相比 Matplotlib，seaborn 绘制的图表被认为更具吸引力，因此更适合用于出版物和演示文稿。如果你只需要用更简单的代码和更好的默认设置制作静态图像，那么
    seaborn 是一个不错的选择。
- en: '**NOTE**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Even if you choose to use Matplotlib instead of the seaborn wrapper, you can
    still import seaborn and use its themes to improve the visual appearance of your
    plots. For examples, see [https://www.python-graph-gallery.com/106-seaborn-style-on-matplotlib-plot](https://www.python-graph-gallery.com/106-seaborn-style-on-matplotlib-plot)
    and [https://seaborn.pydata.org/generated/seaborn.set_theme.html?highlight=themes](https://seaborn.pydata.org/generated/seaborn.set_theme.html?highlight=themes).*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*即使你选择使用 Matplotlib 而不是 seaborn 封装器，你仍然可以导入 seaborn 并使用其主题来改善图表的视觉效果。例如，参见
    [https://www.python-graph-gallery.com/106-seaborn-style-on-matplotlib-plot](https://www.python-graph-gallery.com/106-seaborn-style-on-matplotlib-plot)
    和 [https://seaborn.pydata.org/generated/seaborn.set_theme.html?highlight=themes](https://seaborn.pydata.org/generated/seaborn.set_theme.html?highlight=themes)。*'
- en: '***The pandas Plotting API***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***pandas 绘图 API***'
- en: The pandas library discussed in the previous chapter has its own plotting API,
    `Pandas.plot()` (*[https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html)*).
    This API has emerged as a de facto standard for creating 2D charts because it
    can use Matplotlib and many other libraries as its plotting backend. This makes
    it possible to learn one set of plotting commands using pandas and then apply
    them with a wide range of libraries for static or interactive plots.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中讨论的 pandas 库有自己的绘图 API，`Pandas.plot()` (*[https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html)*)。这个
    API 已经成为创建 2D 图表的事实标准，因为它可以使用 Matplotlib 和许多其他库作为绘图后端。这使得通过 pandas 学习一套绘图命令后，你可以使用各种库来制作静态或交互式图表。
- en: 'Plotting in pandas is arguably the easiest way to create visualizations using
    Python. It’s especially good at quick “throwaway” plots for data exploration.
    Let’s take a look:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中绘图可以说是使用 Python 创建可视化的最简单方法。它特别适合于快速的“临时”图表，用于数据探索。我们来看看：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Image](../images/f0428-01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0428-01.jpg)'
- en: After importing pandas and making a Python dictionary of some measurements of
    female height verses weight, we turn the dictionary into a pandas DataFrame. The
    last two lines of code can then immediately build two plots! What could be easier?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入 pandas 并创建一个关于女性身高与体重关系的 Python 字典后，我们将字典转换为 pandas DataFrame。然后，代码的最后两行可以立即生成两个图形！还有比这更简单的吗？
- en: 'The plots are very plain and lack any kind of interactivity, but never fear,
    pandas plays well with the other plotting libraries. With little effort, you can
    switch to an alternative plotting tool for additional functionality. By changing
    the plotting backend for pandas to HoloViews, a library we’ll discuss shortly,
    you can produce an interactive plot that lets you zoom, pan, save, and hover the
    cursor over points to see their values. Here’s an example of the code and its
    results:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图形非常简洁，缺乏任何交互功能，但不用担心，pandas 与其他绘图库配合得很好。只需一点点努力，你就可以切换到其他绘图库以获得额外的功能。通过将
    pandas 的绘图后端更改为 HoloViews，我们将很快讨论这个库，你就能生成一个交互式图形，让你缩放、平移、保存，并在点上悬停光标查看其值。下面是代码和结果的示例：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Image](../images/f0429-01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0429-01.jpg)'
- en: Note that, despite changing the plotting library, you didn’t need to change
    a single line of the original plotting code. To see some other drop-in replacements
    for the `Pandas .plot()` API, see *[https://pyviz.org/high-level/index.html#pandas-plot-api/](https://pyviz.org/high-level/index.html#pandas-plot-api/)*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管更改了绘图库，但你并没有需要修改原始绘图代码中的任何一行。要查看一些其他的`Pandas .plot()` API 替代品，请访问 *[https://pyviz.org/high-level/index.html#pandas-plot-api/](https://pyviz.org/high-level/index.html#pandas-plot-api/)*。
- en: '***Altair***'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Altair***'
- en: '*Altair* is an open source statistical visualization library in Python that’s
    closely aligned with pandas DataFrames. It’s popular with people looking for a
    quick way to visualize small datasets.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*Altair* 是一个开源的统计可视化库，专为 Python 设计，与 pandas DataFrame 紧密对接。它受到那些希望快速可视化小型数据集的用户的喜爱。'
- en: Altair handles a lot of plotting details automatically, letting you focus on
    what you want to do rather than the button-pushing “how to do it” part. Much like
    the female height-verses-weight example in the previous section, you only need
    to link your data columns to encoding channels, such as the x- and y-axes, to
    make a plot. But this ease of use comes with a few downsides. The plots are not
    as customizable as those made in Matplotlib, and there’s no 3D plotting capability.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Altair 自动处理了许多绘图细节，让你专注于你想要做的事情，而不是“如何做”的按钮操作部分。就像前一部分中提到的女性身高与体重的例子，你只需将数据列与编码通道（例如
    x 轴和 y 轴）关联，即可制作图形。但这种易用性也带来了一些缺点。与 Matplotlib 绘制的图形相比，它的自定义程度较低，而且不支持 3D 绘图功能。
- en: On the other hand, all Altair plots can be made interactive, meaning that you
    can zoom, pan, highlight plot regions, update linked charts with the selected
    data, enable *tooltips* that let you hover the cursor over points for detailed
    information, and so on. Altair visualizations require a JavaScript frontend to
    display charts and so should be used with Jupyter notebooks or an integrated development
    environment (IDE) with notebook support.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，所有 Altair 图形都可以交互式操作，这意味着你可以缩放、平移、突出显示图形区域，使用选定的数据更新关联图表，启用*工具提示*，让你将光标悬停在点上以查看详细信息，等等。Altair
    可视化需要 JavaScript 前端来显示图表，因此应与 Jupyter notebooks 或支持笔记本功能的集成开发环境（IDE）一起使用。
- en: Unlike Matplotlib and other *imperative* plotting libraries that build plots
    step by step with no intermediate stages, Altair is *declarative* by nature, and
    generates a plot object, in JSON format, from which the plot can be reconstituted.
    JSON, short for JavaScript Object Notation, is a file and data interchange format
    that uses human-readable text to store and transmit data objects. Thus, Altair
    does not produce plots consisting of pixels, but plots consisting of data plus
    a visualization specification.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Matplotlib 和其他*命令式*绘图库不同，Altair 本质上是*声明式*的，它生成一个 JSON 格式的图形对象，图形可以从该对象中重新构建。JSON，全称为
    JavaScript 对象表示法，是一种用于存储和传输数据对象的文件和数据交换格式，采用人类可读的文本格式。由此，Altair 生成的图形并非由像素构成，而是由数据和可视化规格构成的图形。
- en: Because declarative plotting objects store your data and associated metadata,
    it’s easy to manipulate the data during the plot render command or visualize it
    alongside or overlaid with other data. It can also result in very large visualization
    file sizes or entire datasets stored in your Jupyter notebook. Although there
    are some workarounds to help you manage memory and performance issues, the library’s
    documentation recommends plotting no more than 5,000 rows of data (see *[https://altair-viz.github.io/user_guide/faq.html#altair-faq-large-notebook/](https://altair-viz.github.io/user_guide/faq.html#altair-faq-large-notebook/)*).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于声明式绘图对象存储了数据和相关元数据，因此在绘制图表命令期间操纵数据或将其与其他数据一起可视化变得非常容易。它还可能导致非常大的可视化文件大小，或将整个数据集存储在你的
    Jupyter notebook 中。尽管有一些解决方法可以帮助你管理内存和性能问题，但库的文档建议绘制的数据行数不要超过 5000 行（见 *[https://altair-viz.github.io/user_guide/faq.html#altair-faq-large-notebook/](https://altair-viz.github.io/user_guide/faq.html#altair-faq-large-notebook/)*）。
- en: Another drawback of using JSON is that it can be hacked if used with untrusted
    services or untrusted browsers. This can make the hosting web application vulnerable
    to a variety of attacks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JSON 的另一个缺点是，如果与不受信任的服务或浏览器一起使用，它可能会被攻击。这会使托管的网页应用程序容易受到各种攻击。
- en: '***Bokeh***'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Bokeh***'
- en: '*Bokeh* is an open source visualization library that supports the creation
    of interactive, web-ready plots from very large or streaming datasets. Bokeh (pronounced
    “BO-kay”) takes plots defined using Python and automatically renders them in a
    web browser using HTML and JavaScript, the dominant programming languages used
    for interactive web pages. It’s one of the better-maintained and supported libraries
    and comes preinstalled with Anaconda.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bokeh* 是一个开源可视化库，支持从非常大或流式数据集创建交互式的、适合网页展示的图表。Bokeh（发音为“BO-kay”）使用 Python
    定义的图表，并自动通过 HTML 和 JavaScript（这两种是用于交互式网页的主流编程语言）在网页浏览器中渲染它们。它是维护良好且支持较好的库之一，并且已经预装在
    Anaconda 中。'
- en: Bokeh can output JSON objects, HTML documents, or interactive web applications.
    It has a three-level interface that provides increasing control over plots, from
    the simple and quick to the painstakingly detailed. However, unlike Matplotlib,
    Bokeh does not have high-level methods for some common diagrams such as pie charts,
    donut charts, or histograms. This requires extra work and the use of additional
    libraries such as NumPy. Support for 3D plotting is also limited. Thus, from a
    practical standpoint, Bokeh’s native API is mainly useful for publishing plots
    as part of a web app or HTML/JavaScript-based report, or for when you need to
    generate highly interactive plots or dashboards.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Bokeh 可以输出 JSON 对象、HTML 文档或交互式网页应用程序。它有一个三层接口，从简单快速到非常详细，逐步增加对图表的控制。然而，与 Matplotlib
    不同，Bokeh 没有为一些常见图表类型（如饼图、甜甜圈图或直方图）提供高级方法。这需要额外的工作，并且需要使用如 NumPy 等额外的库。对 3D 绘图的支持也有限。因此，从实际角度来看，Bokeh
    的原生 API 主要用于将图表发布为网页应用或基于 HTML/JavaScript 的报告，或者当你需要生成高度交互的图表或仪表板时使用。
- en: Bokeh works well in Jupyter notebooks and lets you use *themes*, for which you
    stipulate up front how you want your plots to look, such as font sizes, axis ticks,
    legends, and so on. Plots also come with a toolbar ([Figure 16-4](ch16.xhtml#ch016fig4))
    for interactivity, including zooming, panning, and saving.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Bokeh 在 Jupyter notebooks 中表现良好，并允许你使用*主题*，你可以提前规定绘图的外观，比如字体大小、坐标轴刻度、图例等等。图表还配备了一个工具栏（[图
    16-4](ch16.xhtml#ch016fig4)），用于交互操作，包括缩放、平移和保存。
- en: '![Image](../images/16fig04.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig04.jpg)'
- en: '*Figure 16-4: The Bokeh plot toolbar (courtesy of [https://bokeh.org/](https://bokeh.org/))*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-4：Bokeh 图表工具栏（由 [https://bokeh.org/](https://bokeh.org/) 提供）*'
- en: Finally, if you keep your data in pandas, you can use a library called Pandas-Bokeh
    (*[https://github.com/PatrikHlobil/Pandas-Bokeh/](https://github.com/PatrikHlobil/Pandas-Bokeh/)),*
    which consumes pandas data objects directly and renders them using Bokeh. This
    results in a higher-level, easier-to-use interface than Bokeh alone. Other high-level
    APIs built on Bokeh include HoloViews, hvPlot, and Chartify for plotting, and
    Panel for creating dashboards. We’ll look at most of these later in the chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你将数据保存在 pandas 中，你可以使用一个名为 Pandas-Bokeh 的库（*[https://github.com/PatrikHlobil/Pandas-Bokeh/](https://github.com/PatrikHlobil/Pandas-Bokeh/)*），该库直接消费
    pandas 数据对象，并使用 Bokeh 渲染它们。这比单独使用 Bokeh 提供了一个更高层次、更易用的接口。基于 Bokeh 构建的其他高级 API
    包括用于绘图的 HoloViews、hvPlot 和 Chartify，以及用于创建仪表板的 Panel。我们将在本章稍后部分介绍这些内容。
- en: '***Plotly***'
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Plotly***'
- en: '*Plotly* is an open source web-based toolkit for making interactive, publication-quality
    graphics. It’s similar to Bokeh in that it builds interactive plots, generating
    the required JavaScript from Python. And like Bokeh and Matplotlib, Plotly is
    a core Python library on which multiple higher-level libraries are built.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*Plotly* 是一个开源的基于网页的工具包，用于制作互动式的、出版质量的图形。它与 Bokeh 类似，都是通过 Python 生成所需的 JavaScript
    来构建交互式图表。像 Bokeh 和 Matplotlib 一样，Plotly 是一个核心 Python 库，许多更高级的库都基于它。'
- en: Plotly graphs are stored in the JSON data format. This makes them portable and
    readable using scripts of other programming languages such as R, Julia, MATLAB,
    and more. Its web-based visualizations can be displayed in Jupyter notebooks,
    saved as standalone HTML files, or incorporated into web applications. Because
    Plotly uses JSON, it suffers similar memory and security issues as Altair (see
    “Altair” on [page 429](ch16.xhtml#ch00lev2sec214)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 图表存储在 JSON 数据格式中。这使得它们可以便捷地通过其他编程语言（如 R、Julia、MATLAB 等）的脚本进行读取和使用。其基于网页的可视化效果可以在
    Jupyter notebook 中展示，保存为独立的 HTML 文件，或嵌入到网页应用程序中。由于 Plotly 使用 JSON，它也面临与 Altair
    类似的内存和安全问题（请参见 [第 429 页](ch16.xhtml#ch00lev2sec214)的“Altair”部分）。
- en: Unlike Matplotlib and seaborn, Plotly is focused on creating dynamic, interactive
    graphics in Python for embedding in web apps. You can create basic plots as well
    as more unique contour plots, dendrograms, and 3D charts ([Figure 16-5](ch16.xhtml#ch016fig5)).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Matplotlib 和 seaborn 不同，Plotly 专注于在 Python 中创建动态的、交互式的图形，以便嵌入到网页应用中。你可以创建基础图表，也可以创建更独特的等高线图、树状图和
    3D 图表（参见 [图 16-5](ch16.xhtml#ch016fig5)）。
- en: '![Image](../images/16fig05.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig05.jpg)'
- en: '*Figure 16-5: A 3D scatterplot made with Plotly Express*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-5：使用 Plotly Express 制作的 3D 散点图*'
- en: '[Figure 16-6](ch16.xhtml#ch016fig6) shows an example of a 3D mesh. You can
    even display LaTeX equations in legends and titles.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-6](ch16.xhtml#ch016fig6) 展示了一个 3D 网格的示例。你甚至可以在图例和标题中显示 LaTeX 方程式。'
- en: '![Image](../images/16fig06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig06.jpg)'
- en: '*Figure 16-6: A sandal plotted as a 3D mesh in Plotly/Dash*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-6：在 Plotly/Dash 中绘制的 3D 网格凉鞋*'
- en: Plotly also recognizes sliders, filters, and mouseover and cursor-click events.
    With only a few lines of code, you can create attractive interactive plots that
    save you time when exploring datasets and can be easily modified and exported.
    The toolkit also permits complex visualizations of multiple sources, in contrast
    to products like Tableau, which accept only one data table as input per chart.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 还支持滑块、过滤器、鼠标悬停和鼠标点击事件。只需几行代码，你就可以创建引人注目的互动图表，这不仅能节省你在数据集探索中的时间，还能轻松修改并导出。这一工具包还支持多个数据源的复杂可视化，而不像
    Tableau 等产品那样每个图表只能接受一个数据表作为输入。
- en: Plotly is written in JavaScript and powers *Dash* (*[https://dash.plotly.com/introduction](https://dash.plotly.com/introduction)*),
    an open source Python framework for building web analytic applications (called
    dashboards). Dash is written on top of Plotly.js and greatly simplifies the building
    of highly customized dashboards in Python. These apps are rendered in a web browser
    and can be deployed to servers and shared through URLs. Dash is cross-platform
    and mobile ready. We’ll look at Dash a little more in “Dashboards” on [page 445](ch16.xhtml#ch00lev1sec99).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 使用 JavaScript 编写，并驱动 *Dash* (*[https://dash.plotly.com/introduction](https://dash.plotly.com/introduction)*)，一个开源
    Python 框架，用于构建网页分析应用程序（称为仪表盘）。Dash 是基于 Plotly.js 的，它大大简化了在 Python 中构建高度自定义的仪表盘。此类应用程序可以在网页浏览器中渲染，并可以部署到服务器并通过
    URL 分享。Dash 是跨平台的，并且支持移动端。我们将在“仪表盘”一章的 [第 445 页](ch16.xhtml#ch00lev1sec99)中进一步讨论
    Dash。
- en: Plotly also comes with a high-level, more intuitive API called *Plotly Express*
    (*[https://plotly.com/python/plotly-express/](https://plotly.com/python/plotly-express/)*)
    that provides shorthand syntax for creating entire figures at once. It has more
    than 30 functions for creating different types of graphics, each carefully designed
    to be as consistent and easy to learn as possible, allowing you to effortlessly
    switch from a scatterplot to a bar chart to a sunburst chart, and so on throughout
    a data exploration session. As such, Plotly Express is the recommended starting
    point for creating common figures with Plotly.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 还提供了一个高层次、更加直观的 API，叫做 *Plotly Express* (*[https://plotly.com/python/plotly-express/](https://plotly.com/python/plotly-express/)*)，它提供了简化语法，可以一次性创建整个图表。它有超过
    30 个函数用于创建不同类型的图形，每个函数都经过精心设计，力求保持一致性并尽可能易于学习，让你能够轻松地在散点图、条形图、旭日图等图形之间切换，适用于数据探索过程中的各个阶段。因此，Plotly
    Express 是使用 Plotly 创建常见图形的推荐起点。
- en: Plotly Express charts are easy to style so that they do really useful things.
    Suppose that you want to look at monthly rainfall totals over a two-decade period
    and see how the months of August and October compare to the rest. With Plotly
    Express, you can easily highlight the lines for these months so that they stand
    out. And with the interactive toolbar, you can toggle spike lines and the hover
    feature to query values ([Figure 16-7](ch16.xhtml#ch016fig7)).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express图表非常容易进行样式设置，以实现非常有用的功能。假设你想查看二十年期间的每月降水总量，并查看8月和10月与其他月份的比较。使用Plotly
    Express，你可以轻松地突出显示这些月份的线条，使其更加显眼。通过交互式工具栏，你可以切换尖峰线和悬停功能，以查询数值（[图16-7](ch16.xhtml#ch016fig7)）。
- en: '![Image](../images/16fig07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig07.jpg)'
- en: '*Figure 16-7: A Plotly Express line chart with highlighted lines, spike lines,
    and hover box*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-7：一个包含突出显示的线条、尖峰线条和悬停框的Plotly Express折线图*'
- en: Another useful feature of Plotly Express is that legends are “alive.” Click
    a category in a legend once and you temporarily remove it from the plot. Click
    it twice and all other lines will vanish, leaving that category isolated. This
    was done for the August (`Aug`) category in [Figure 16-8](ch16.xhtml#ch016fig8).
    You can even animate the plot to see how things change over time. What a great
    way to untangle confusing “spaghetti” plots!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express的另一个有用功能是图例是“动态的”。点击图例中的一个类别一次，你会暂时从图表中移除它。点击两次，所有其他线条将消失，只留下该类别独立显示。这是在[图16-8](ch16.xhtml#ch016fig8)中针对8月（`Aug`）类别完成的。你甚至可以通过动画展示图表，查看随着时间的变化情况。这是理清复杂“意大利面条”图表的好方法！
- en: '![Image](../images/16fig08.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig08.jpg)'
- en: '*Figure 16-8: Double-clicking a legend category isolates that category by removing
    the other data.*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-8：双击图例类别将通过移除其他数据来隔离该类别。*'
- en: Let’s revisit the COVID-19 dataset that captures fatality statistics from the
    first year of the virus’s spread. You’ll want to compare the code and results
    that follow to the seaborn example on [page 427](ch16.xhtml#para01).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视捕捉病毒传播第一年死亡统计数据的COVID-19数据集。你将希望将以下代码和结果与[第427页](ch16.xhtml#para01)中的seaborn示例进行比较。
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Image](../images/f0434-01.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0434-01.jpg)'
- en: Like the previous seaborn code, it’s very readable and easy to understand. Also
    note that Plotly Express has a specific parameter called `data_frame` that lets
    you know without a doubt that it’s built for working with pandas.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的seaborn代码类似，这段代码非常易读且易于理解。还要注意，Plotly Express有一个特定的参数`data_frame`，它明确告诉你，这个库是为处理pandas而设计的。
- en: A nice feature here is that you can easily post the country name over the markers,
    letting you use a consistent marker shape for easy size comparisons. You don’t
    get the automatic “size” legend that you get with seaborn, but Plotly Express
    makes up for this by automatically permitting mouseover events, as shown in the
    plot for the United Kingdom.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个不错的功能是，你可以轻松地在标记上方显示国家名称，让你使用一致的标记形状来进行大小比较。你无法像在seaborn中那样自动获得“大小”图例，但Plotly
    Express通过自动允许鼠标悬停事件来弥补这一点，正如英国数据中的图表所示。
- en: 'Another useful Plotly Express feature is the *facet plot*, which lets you view
    the previous scatterplot by geographical region:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express的另一个有用功能是*面板图*，它让你可以按地理区域查看之前的散点图：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Image](../images/f0435-01.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0435-01.jpg)'
- en: We did this by adding a single argument ➊ to the `px.scatter()` method.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过向`px.scatter()`方法添加一个参数➊来实现这一点。
- en: Plotly Express is designed mainly for exploratory data analysis. Your data must
    be in very specific formats (it’s targeted at pandas DataFrames), your overall
    ability to customize plots is limited, and you might have trouble putting the
    visualizations into a presentation. To be able to do everything you’ll probably
    want to do, you’ll need to occasionally drop down into the full Plotly API or
    use Plotly Express in conjunction with other libraries like Matplotlib or seaborn.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express 主要用于探索性数据分析。你的数据必须采用非常特定的格式（它针对的是pandas DataFrame），你对图表的自定义能力有限，而且你可能会在将可视化结果放入演示文稿时遇到困难。为了能够完成你可能想做的所有操作，你可能需要偶尔切换到完整的Plotly
    API，或者将Plotly Express与其他库（如Matplotlib或seaborn）结合使用。
- en: There also exists an independent third-party wrapper library around Plotly called
    *cufflinks* (*[https://github.com/santosjorge/cufflinks/](https://github.com/santosjorge/cufflinks/)*)
    that provides bindings between Plotly and pandas. This helps you create plots
    from pandas DataFrames using the `Pandas.plot()` interface but with Plotly output.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个独立的第三方包装库围绕 Plotly，名为 *cufflinks* (*[https://github.com/santosjorge/cufflinks/](https://github.com/santosjorge/cufflinks/)*)，它提供了
    Plotly 和 pandas 之间的绑定。这个库帮助你使用 `Pandas.plot()` 接口从 pandas DataFrame 创建图表，但输出结果是
    Plotly 图形。
- en: Both Plotly and Plotly Express facilitate building charts for the web directly
    from pandas DataFrames. And plots you create in Jupyter notebooks can essentially
    be copied and pasted into a Dash app for quick implementation of a dashboard.
    You can see an example of some scientific charts built with Plotly at *[https://plotly.com/python/scientific-charts/](https://plotly.com/python/scientific-charts/)*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 和 Plotly Express 都能够直接从 pandas DataFrame 构建 web 图表。你在 Jupyter notebooks
    中创建的图表可以直接复制粘贴到 Dash 应用中，快速实现仪表盘。你可以在 *[https://plotly.com/python/scientific-charts/](https://plotly.com/python/scientific-charts/)*
    查看一些使用 Plotly 构建的科学图表示例。
- en: '***HoloViews***'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***HoloViews***'
- en: '*HoloViews* is an open source library (note that I didn’t say *plotting* library)
    designed to make visualization simple by abstracting away the process of plotting.
    HoloViews makes it easier to visualize data interactively by providing a set of
    declarative plotting objects that store your data with associated metadata. The
    goal is to support the entire life cycle of scientific research, from initial
    exploration to publication to reproduction of the work and new extensions.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*HoloViews* 是一个开源库（注意，我没有说是 *绘图库*），旨在通过抽象掉绘图过程来简化可视化。HoloViews 通过提供一组声明式绘图对象，方便你交互式地可视化数据，这些对象存储你的数据并附带相关元数据。其目标是支持科学研究的整个生命周期，从最初的探索到发布、再到工作复现以及新的扩展。'
- en: HoloViews lets you combine various container types into data structures for
    visually exploring data. Some example container types are *Layout*, for displaying
    elements side by side as separate subplots; *Overlay*, for displaying elements
    on top of one another; and *DynamicMap*, for dynamic plots that automatically
    update and respond to user interactions. To appreciate the DynamicMap container,
    check out *[https://holoviews.org/user_guide/Streaming_Data.html](https://holoviews.org/user_guide/Streaming_Data.html)*
    and *[https://holoviews.org/user_guide/Responding_to_Events.html](https://holoviews.org/user_guide/Responding_to_Events.html)*
    to view animated examples.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: HoloViews 允许你将各种容器类型组合成数据结构，以便可视化地探索数据。一些示例容器类型包括 *Layout*，用于将元素并排显示为独立的子图；*Overlay*，用于将元素叠加显示；以及
    *DynamicMap*，用于动态图表，能够自动更新并响应用户交互。要体验 DynamicMap 容器，可以查看 *[https://holoviews.org/user_guide/Streaming_Data.html](https://holoviews.org/user_guide/Streaming_Data.html)*
    和 *[https://holoviews.org/user_guide/Responding_to_Events.html](https://holoviews.org/user_guide/Responding_to_Events.html)*
    来查看动画示例。
- en: HoloViews generates final plots using a proper plotting library such as Matplotlib,
    Plotly, or Bokeh, as a backend. This lets you focus on your data rather than waste
    time writing plotting code. And as a plotting “middleman,” HoloViews integrates
    well with libraries like seaborn and pandas and is particularly useful for visualizing
    large datasets—up to billions—using libraries like *Dask* and *Datashader* (such
    as *[https://holoviz.org/tutorial/Plotting.html](https://holoviz.org/tutorial/Plotting.html)*).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: HoloViews 使用适当的绘图库，如 Matplotlib、Plotly 或 Bokeh，作为后端生成最终的图表。这让你能够专注于数据，而不是浪费时间编写绘图代码。作为一个绘图“中介”，HoloViews
    与 seaborn 和 pandas 等库集成良好，特别适合用来可视化大数据集——多达数十亿条——使用如 *Dask* 和 *Datashader* 等库（例如
    *[https://holoviz.org/tutorial/Plotting.html](https://holoviz.org/tutorial/Plotting.html)*）。
- en: One vision of Python’s plotting future is to use a set of libraries to streamline
    the process of working with small and large datasets in a web browser ([Figure
    16-9](ch16.xhtml#ch016fig9)). This would include doing exploratory analysis, making
    simple widget-based tools, or building full-featured dashboards.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Python 绘图未来的一个愿景是使用一组库来简化在 web 浏览器中处理小型和大型数据集的过程（见 [图 16-9](ch16.xhtml#ch016fig9)）。这将包括进行探索性分析、制作简单的基于小部件的工具，或者构建功能齐全的仪表盘。
- en: '![Image](../images/16fig09.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig09.jpg)'
- en: '*Figure 16-9: The HoloViz-maintained libraries (courtesy of [holoviz.org](http://holoviz.org))*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-9：HoloViz 维护的库（由 [holoviz.org](http://holoviz.org) 提供）*'
- en: In this coordinated effort, HoloViews and GeoViews provide a single, concise,
    and high-level API for libraries like Matplotlib, Bokeh, Datashader, Cartopy,
    and Plotly. Panel provides a unified approach to dashboarding, and Datashader
    allows for the plotting of very large datasets. Param supports declaring user-relevant
    parameters for working with widgets inside or outside of a notebook context. This
    arrangement permits you to easily switch between backends without having to learn
    commands for each new plotting library.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一协同努力下，HoloViews 和 GeoViews 提供了一个统一简洁的高级 API，支持像 Matplotlib、Bokeh、Datashader、Cartopy
    和 Plotly 这样的库。Panel 提供了统一的仪表盘方法，而 Datashader 允许绘制非常大的数据集。Param 支持声明用于在笔记本上下文中或外部使用的小部件的用户相关参数。这种安排使你能够轻松地在后端之间切换，而无需学习每个新绘图库的命令。
- en: 'Recognizing that a typical figure is an object composed of many visual representations
    combined together, HoloViews makes it trivial to compose elements in the two most
    common ways: concatenating multiple representations into a single figure or overlaying
    visual elements within the same set of axes. When making multiplot figures, HoloViews
    helps by automatically linking axes and selections across each figure. It’s also
    useful for creating charts that update dynamically, especially those using sliders.
    With the Bokeh backend, you can combine various widgets with zooming and panning
    tools to aid data exploration.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到典型的图形是由许多视觉表现组成的对象，HoloViews 使得组合元素变得非常简单，支持两种最常见的方式：将多个表现合并成一个图形，或在同一坐标轴上叠加视觉元素。在制作多图形图表时，HoloViews
    通过自动链接各个图形中的坐标轴和选择项来提供帮助。它还非常适用于创建动态更新的图表，尤其是使用滑块的图表。借助 Bokeh 后端，你可以结合各种小部件以及缩放和漫游工具来帮助数据探索。
- en: Let’s take a look at a Jupyter Notebook example, adapted from the HoloViews
    gallery (*[https://holoviews.org/gallery/index.html](https://holoviews.org/gallery/index.html)*),
    that uses both HoloViews and Panel to generate a plot. For data, we’ll again use
    the Palmer Archipelago dataset that quantifies the morphologic variations among
    three penguin species. Thanks to Panel, you’ll be able to use drop-down menus
    to switch out and decorate the displayed data inside the single plot.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个 Jupyter Notebook 示例，这个示例改编自 HoloViews 展示页面 (*[https://holoviews.org/gallery/index.html](https://holoviews.org/gallery/index.html)*)，它使用了
    HoloViews 和 Panel 来生成图表。数据方面，我们将再次使用 Palmer Archipelago 数据集，该数据集量化了三种企鹅物种的形态学差异。得益于
    Panel，你将能够使用下拉菜单在单个图表中切换和装饰显示的数据。
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After importing seaborn (for the data), HoloViews, and Panel, you tell HoloViews
    which plotting library to use. Bokeh is the default, but you can easily change
    this to Matplotlib or Plotly by changing the line to `hv.extension('matplotlib')`
    or `hv.extension('plotly')`. Most of the time, changing the backend doesn’t require
    any change to the rest of the code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入 seaborn（用于数据）、HoloViews 和 Panel 后，你告诉 HoloViews 使用哪个绘图库。Bokeh 是默认选项，但你可以通过将代码行更改为
    `hv.extension('matplotlib')` 或 `hv.extension('plotly')` 来轻松更改为 Matplotlib 或 Plotly。通常情况下，改变后端无需更改代码的其余部分。
- en: 'The next line ➊ is optional but demonstrates a nice feature of HoloViews: the
    ability to set your own defaults for how you want your plots to look. In this
    case, you set the size of the figure, position of the legend, and background grid
    to be used for all scatterplots.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行 ➊ 是可选的，但它展示了 HoloViews 的一个不错功能：设置自定义默认值，以决定你希望图表的外观。在这种情况下，你设置了图形的大小、图例的位置以及所有散点图使用的背景网格。
- en: Next, you load the penguins dataset, which conveniently ships with the seaborn
    library as a pandas DataFrame. To provide the user with menu choices, go through
    the columns in the `penguins` DataFrame and assign the contents to either a list
    called `discrete` or a list called `continuous`. The `discrete` list holds objects,
    such as species name, island name, or the penguin’s sex. The `continuous` list
    is for numerical data, like the bill lengths and bill depths.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你加载企鹅数据集，该数据集方便地随 `seaborn` 库一起以 pandas DataFrame 格式提供。为了给用户提供菜单选项，遍历 `penguins`
    DataFrame 中的列，并将内容分别赋值给名为 `discrete` 和 `continuous` 的列表。`discrete` 列表包含对象，如物种名称、岛屿名称或企鹅的性别。`continuous`
    列表则用于数值数据，如喙长和喙深。
- en: Starting at ➋, you must specify what choices the Panel widget will show for
    the x- and y-axes and the marker size and color, including the default options
    for what’s initially shown. After this, you define a function to create the figure
    ➌ and return a HoloViews *Points* element. The final two lines create the figure
    with the menu widgets.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ➋ 开始，您必须指定 Panel 小部件将为 x 轴和 y 轴以及标记的大小和颜色显示哪些选项，包括最初显示的默认选项。之后，您定义一个函数来创建图形
    ➌ 并返回一个 HoloViews *Points* 元素。最后两行代码使用菜单小部件创建图形。
- en: The output from this program is shown in [Figure 16-10](ch16.xhtml#ch016fig10).
    Note the pull-down menus along the left side of the plot and the interactive toolbar
    along the right. Because we set the `size` and `color` default values to `'None'`,
    the points all look the same.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序的输出如[图 16-10](ch16.xhtml#ch016fig10)所示。注意图表左侧的下拉菜单和右侧的交互式工具栏。因为我们将 `size`
    和 `color` 的默认值设置为 `'None'`，所以所有数据点看起来都相同。
- en: You can now use the menu widgets to color the points by species ([Figure 16-11](ch16.xhtml#ch016fig11)),
    which generates a legend at the lower-right corner of the plot. Setting the size
    option to body mass allows you to qualitatively incorporate a third measurement
    into the 2D scatterplot. Now you can see that the Gentoo species is clearly larger
    than the other two.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用菜单小部件按物种为数据点上色（见[图 16-11](ch16.xhtml#ch016fig11)），这会在图表的右下角生成一个图例。将大小选项设置为体重允许您将第三个度量标准定性地融入到二维散点图中。现在您可以看到，*Gentoo*
    物种明显比另外两个物种大。
- en: '![Image](../images/16fig10.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig10.jpg)'
- en: '*Figure 16-10: Bill depth versus bill length for three different penguin species*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-10：三种不同企鹅物种的喙深度与喙长度关系*'
- en: '![Image](../images/16fig11.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig11.jpg)'
- en: '*Figure 16-11: Bill depth versus bill length, colored by species and sized
    by body mass*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-11：按物种着色并根据体重调整大小的喙深度与喙长度关系*'
- en: In [Figure 16-12](ch16.xhtml#ch016fig12), we’ve used the drop-down menus to
    change out both the data and size parameters. As you can see, this is a great
    way to interactively explore and familiarize yourself with a dataset without generating
    lots of plots.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 16-12](ch16.xhtml#ch016fig12)中，我们使用了下拉菜单更改了数据和大小参数。正如您所看到的，这是一个非常好的方式，可以在不生成大量图表的情况下，交互式地探索并熟悉数据集。
- en: '![Image](../images/16fig12.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig12.jpg)'
- en: '*Figure 16-12: Bill length versus body mass, colored by species and sized by
    flipper length*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-12：按物种着色并根据鳍长调整大小的喙长度与体重关系*'
- en: A key point here is that the code references the DataFrame to make a HoloViews
    *Points element*. This object is basically the DataFrame plus knowledge of what
    goes on the x- and y-axes. This makes the DataFrame plottable. But unlike plot
    objects in other libraries, the `hv.Points` element holds onto your raw data.
    This makes it usable later in a processing pipeline (for a dynamic demonstration,
    see the HoloViews Showcase at *[http://holoviews.org/Tutorials/Showcase.html](http://holoviews.org/Tutorials/Showcase.html)*).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的一个关键点是，代码引用了 DataFrame 来创建一个 HoloViews *Points* 元素。这个对象基本上是 DataFrame，并且知道哪些数据映射到
    x 轴和 y 轴。这使得 DataFrame 可以被绘制。但与其他库中的图表对象不同，`hv.Points` 元素会保留原始数据。这使得它在后续的处理管道中仍然可用（要查看动态演示，请访问
    HoloViews Showcase: *[http://holoviews.org/Tutorials/Showcase.html](http://holoviews.org/Tutorials/Showcase.html)*）。'
- en: Just as Plotly has Plotly Express, the HoloViz libraries have *hvPlot*, a simpler
    plotting alternative built on top of HoloViews. This fully interactive high-level
    API complements the primarily static plots available from libraries built on Matplotlib,
    such as pandas and GeoPandas, that require support from additional libraries for
    interactive web-based plotting. It’s designed for the PyData ecosystem and its
    core data containers, which allow users to work with a wide array of data types
    ([Figure 16-13](ch16.xhtml#ch016fig13)).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Plotly 有 Plotly Express 一样，HoloViz 库也有 *hvPlot*，这是一个建立在 HoloViews 基础上的更简单的绘图替代方案。这个完全交互式的高级
    API 补充了基于 Matplotlib 构建的库（如 pandas 和 GeoPandas）提供的主要是静态的图表，这些库需要额外的支持库来进行基于 Web
    的交互式绘图。它专为 PyData 生态系统设计，并与其核心数据容器兼容，这些容器允许用户处理各种数据类型（见[图 16-13](ch16.xhtml#ch016fig13)）。
- en: '![Image](../images/16fig13.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig13.jpg)'
- en: '*Figure 16-13: The hvPlot library provides a high-level plotting API for HoloViews.*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-13：hvPlot 库为 HoloViews 提供了一个高级绘图 API*'
- en: 'The hvPlot library’s interactive Bokeh-based API supports panning, zooming,
    hovering, and clickable/selectable legends. In the following example, hvPlot is
    used in conjunction with pandas to produce an interactive plot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: hvPlot 库的交互式 Bokeh 基础 API 支持平移、缩放、悬停和可点击/可选择的图例。在以下示例中，hvPlot 与 pandas 配合使用，生成一个交互式图表：
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Image](../images/f0440-01.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0440-01.jpg)'
- en: This is just as simple as plotting in pandas, but note the toolbar along the
    right side of the chart with icons for panning, zooming, saving, and hovering.
    The latter lets you query the graph details using the cursor, as shown by the
    pop-up window for the computer science variable. These options aren’t available
    when plotting from native pandas.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像在 pandas 中绘图一样简单，但请注意图表右侧的工具栏，其中有平移、缩放、保存和悬停图标。悬停时，你可以使用光标查询图形的详细信息，如计算机科学变量的弹出窗口所示。这些选项在使用原生
    pandas 绘图时是不可用的。
- en: For more on these libraries, check out *HoloViz* (*[https://holoviz.org/](https://holoviz.org/)*),
    the coordinated effort to make browser-based data visualization in Python easier
    to use, easier to learn, and more powerful.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 若想了解更多关于这些库的信息，请查看 *HoloViz* (*[https://holoviz.org/](https://holoviz.org/)*)，这是一个旨在让
    Python 中的基于浏览器的数据可视化更加易用、易学并更强大的协调性努力。
- en: '***Datashader***'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Datashader***'
- en: '*Datashader* is an open source library designed for visualizing very large
    datasets. Rather than passing the entire dataset from the Python server to a browser
    for rendering, Datashader rasterizes (pixelates) it to a much smaller heatmap
    or image, which is then transferred for rendering. Whereas popular libraries like
    Matplotlib can suffer from performance issues with only 100,000 points, Datashader
    can handle hundreds of millions, even billions, of them. For example, [Figure
    16-14](ch16.xhtml#ch016fig14) plots 300 million data points.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*Datashader* 是一个开源库，旨在可视化非常大的数据集。Datashader 并不是将整个数据集从 Python 服务器传输到浏览器进行渲染，而是将其栅格化（像素化）成一个更小的热图或图像，然后再传输进行渲染。与
    Matplotlib 等流行库在处理仅 10 万个点时可能遇到的性能问题不同，Datashader 可以处理数亿甚至数十亿个数据点。例如，[图 16-14](ch16.xhtml#ch016fig14)绘制了
    3 亿个数据点。'
- en: '![Image](../images/16fig14.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig14.jpg)'
- en: '*Figure 16-14: A Datashader-created plot of 300 million data points from the
    2010 census (courtesy of Datashader)*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-14：Datashader 创建的 3 亿数据点的图表，数据来源于 2010 年人口普查（感谢 Datashader 提供）*'
- en: Datashader makes it possible to work with very large datasets on standard hardware
    such as your laptop. Although the computationally intensive steps are written
    in Python, they’re transparently compiled to machine code using a tool called
    *Numba* (*[https://numba.pydata.org/](https://numba.pydata.org/)*) and distributed
    across multiple processors using Dask.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Datashader 使得在标准硬件（如笔记本电脑）上处理非常大的数据集成为可能。尽管计算密集型步骤是用 Python 编写的，但它们通过名为 *Numba*
    (*[https://numba.pydata.org/](https://numba.pydata.org/)*) 的工具透明地编译为机器代码，并通过 Dask
    分布到多个处理器上。
- en: The Datashader documentation highlights the tool’s function in a preprocessing
    stage for plotting. What this means is that Datashader is often used with other
    plotting libraries to perform the heavy lifting associated with large datasets.
    Thus, although it’s more focused on performance and efficiency than on directly
    generating basic statistical plots, it can work with other tools to help you plot
    large datasets—say, in a scattergram—by handling the common over-posting of points
    problem, where the density of the distributed points is obscured ([Figure 16-15](ch16.xhtml#ch016fig15)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Datashader 文档强调了该工具在绘图预处理阶段的功能。这意味着 Datashader 通常与其他绘图库一起使用，处理与大数据集相关的繁重工作。因此，尽管它更注重性能和效率，而非直接生成基础统计图表，但它可以与其他工具配合，帮助你绘制大数据集——比如在散点图中——通过处理常见的过度绘制问题，解决分布点密度被掩盖的问题（如[图
    16-15](ch16.xhtml#ch016fig15)所示）。
- en: '![Image](../images/16fig15.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig15.jpg)'
- en: '*Figure 16-15: Datashader (right) handles over-posted points well (courtesy
    [https://holoviews.org/](https://holoviews.org/)).*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-15：Datashader（右侧）很好地处理了过度绘制的点（感谢 [https://holoviews.org/](https://holoviews.org/)
    提供）。*'
- en: In another example, imagine that you’re using Bokeh to copy your data directly
    into the browser so that a user can interact with the data even without a live
    Python process running. If the dataset contains millions or billions of samples,
    you’ll run up against the limitations of the web browser. But with Datashader,
    you can prerender this huge dataset into a fixed-size raster image that captures
    the data’s distribution. Bokeh’s interactive plot can then dynamically re-render
    these images when zooming and panning, making it easier to work with the huge
    dataset in the web browser ([Figure 16-16](ch16.xhtml#ch016fig16)).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个示例中，假设你使用 Bokeh 将数据直接传输到浏览器，这样即便没有 Python 进程在后台运行，用户也能与数据进行交互。如果数据集包含数百万或数十亿个样本，你将面临
    Web 浏览器的限制。但使用 Datashader，你可以将这个庞大的数据集预渲染为固定大小的栅格图像，从而捕捉数据的分布。然后，Bokeh 的交互式图表可以在缩放和平移时动态重新渲染这些图像，使得在
    Web 浏览器中处理庞大数据集变得更加容易（[图 16-16](ch16.xhtml#ch016fig16)）。
- en: '![Image](../images/16fig16.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig16.jpg)'
- en: '*Figure 16-16: Generating interactive Datashader-based plots using HoloViews
    + Bokeh (courtesy of [https://datashader.org/](https://datashader.org/))*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-16：使用 HoloViews + Bokeh 生成基于 Datashader 的交互式图表（图像来源：[https://datashader.org/](https://datashader.org/))*'
- en: You can see a fantastic instance of Datashader in action in the “gerrymandering”
    example at *[https://examples.pyviz.org/](https://examples.pyviz.org/)*. Working
    in concert with HoloViews and multiple plotting libraries, Datashader produces
    a map of Houston’s population, color-coded by ethnicity, that turns plotting into
    fine art, with a gorgeous watercolor-like rendering that has to be seen in color
    to be appreciated.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://examples.pyviz.org/](https://examples.pyviz.org/)* 的“选区划分”（gerrymandering）示例中看到
    Datashader 实际应用的精彩实例。Datashader 与 HoloViews 和多个绘图库协同工作，生成了一张展示休斯顿人口的地图，按种族进行颜色编码，将绘图转化为精美的艺术作品，呈现出一种如水彩画般的效果，只有在彩色显示时才能真正感受到其美妙。
- en: For a nice example of using Datashader with statistical plots, see *[https://holoviews.org/user_guide/Large_Data.html](https://holoviews.org/user_guide/Large_Data.html)*.
    Peter Wang, co-creator of Datashader, gives an easily digestible video overview
    of the library at *[https://www.youtube.com/watch?v=fB3cUrwxMVY/](https://www.youtube.com/watch?v=fB3cUrwxMVY/)*.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 查看一个很好的示例，展示了如何将 Datashader 与统计图表结合使用，参考 *[https://holoviews.org/user_guide/Large_Data.html](https://holoviews.org/user_guide/Large_Data.html)*。Datashader
    的共同创始人 Peter Wang 在 *[https://www.youtube.com/watch?v=fB3cUrwxMVY/](https://www.youtube.com/watch?v=fB3cUrwxMVY/)*
    上提供了一个易于理解的库概述视频。
- en: In all of these examples, be aware that you’ll lose some interactivity with
    Datashader. You’ll still be able to zoom and pan, but mouseover events and the
    like will no longer work without special support, because the browser doesn’t
    hold all of your datapoints ready for inspection. In return, you’ll be able to
    visualize millions of datapoints without watching your computer grind to a halt.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些示例中，请注意你将失去 Datashader 一些交互性。你仍然可以进行缩放和平移，但鼠标悬停事件等将不再有效，除非有特殊支持，因为浏览器并不会将所有数据点加载以供检查。作为回报，你可以在不让计算机崩溃的情况下可视化数百万个数据点。
- en: '***Mayavi and ParaView***'
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Mayavi 和 ParaView***'
- en: A common scientific practice is to visualize point clouds, such as those you
    might find in a Light Detection and Ranging (LIDAR) scan. General-purpose workhorse
    libraries like Matplotlib are capable of performing this task to a certain degree,
    but performance deteriorates quickly when interactively visualizing point clouds
    and other 3D plots. Matplotlib, for example, will be slow and might even crash
    your computer if you try to interact with a large number of samples. Even if the
    3D representations successfully render, they won’t look very nice, and you’ll
    probably have trouble understanding what you see.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的科学实践是可视化点云数据，比如你可能在激光雷达（LIDAR）扫描中遇到的数据。像 Matplotlib 这样的通用工作库能够在一定程度上执行这个任务，但当你尝试交互式地可视化点云和其他
    3D 图表时，性能会迅速下降。例如，如果你尝试与大量样本进行交互，Matplotlib 可能会变得很慢，甚至崩溃你的计算机。即使 3D 表现成功渲染，它们看起来也不会很好，可能很难理解你所看到的内容。
- en: Datashader can help with this, but for graphics-intensive 3D and 4D visualizations
    such as those used for physical processes, you need a dedicated library like Mayavi
    (pronounced MA-ya-vee) that can handle *physically situated* regular and irregularly
    gridded data. This discriminates Mayavi from Datashader somewhat, as the latter
    is focused more on visualizations of information in *arbitrary spaces*, not necessarily
    the three-dimensional physical world.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Datashader可以提供帮助，但对于需要大量图形处理的3D和4D可视化（例如用于物理过程的可视化），你需要一个专门的库，如Mayavi（发音为MA-ya-vee），它能够处理*物理位置*的规则和不规则网格数据。这使得Mayavi与Datashader有所不同，因为后者更多地专注于在*任意空间*中的信息可视化，而不一定是三维的物理世界。
- en: Mayavi2 is an open source, general-purpose, cross-platform tool for 3D scientific
    data visualization. It’s been designed with scripting and extensibility in mind
    from the ground up. You can import Mayavi2 into a Python script and use it as
    a simple plotting library like Matplotlib. It also provides an application ([Figure
    16-17](ch16.xhtml#ch016fig17)) that is usable by itself.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Mayavi2是一个开源的通用跨平台工具，用于3D科学数据可视化。它从一开始就考虑到了脚本编写和可扩展性。你可以将Mayavi2导入Python脚本中，像使用Matplotlib一样将其用作一个简单的绘图库。它还提供了一个应用程序（[图16-17](ch16.xhtml#ch016fig17)），可以单独使用。
- en: Mayavi2 is written in Python, uses powerful Visualization Toolkit (VTK) libraries,
    and provides a GUI via Tkinter. It’s cross-platform and runs on any platform where
    both Python and VTK are available (almost any Unix, macOS, or Windows systems).
    To a limited extent, you can use Mayavi in Jupyter notebooks. To see some examples
    of Mayavi2 plots, visit the gallery at *[https://docs.enthought.com/mayavi/mayavi/auto/examples.html](https://docs.enthought.com/mayavi/mayavi/auto/examples.html)*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Mayavi2是用Python编写的，使用强大的可视化工具包（VTK）库，并通过Tkinter提供图形用户界面（GUI）。它是跨平台的，可以在任何同时支持Python和VTK的系统上运行（几乎所有Unix、macOS或Windows系统）。在一定程度上，你可以在Jupyter笔记本中使用Mayavi。想要查看一些Mayavi2图表示例，请访问*
    [https://docs.enthought.com/mayavi/mayavi/auto/examples.html](https://docs.enthought.com/mayavi/mayavi/auto/examples.html)*。
- en: '![Image](../images/16fig17.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig17.jpg)'
- en: '*Figure 16-17: Mayavi2 application for 3D visualization. Note the Python console
    in the lower-right corner.*'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-17：Mayavi2应用程序用于3D可视化。注意右下角的Python控制台。*'
- en: An alternative to Mayavi2 is *ParaView* (Figure 2-18). Although designed for
    3D, it does 2D as well, is very interactive, and has a Python scripting interface.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Mayavi2的替代方案是*ParaView*（图2-18）。虽然设计用于3D，但它也能处理2D，具有高度的交互性，并且提供Python脚本接口。
- en: '![Image](../images/16fig18.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig18.jpg)'
- en: '*Figure 16-18: ParaView application for 3D visualization. Note the Python console
    in the lower-left corner.*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-18：ParaView应用程序用于3D可视化。注意左下角的Python控制台。*'
- en: ParaView was developed by Sandia National Laboratories, whereas Mayavi is a
    product of Enthought, whose Canopy distribution is a direct competitor of Anaconda.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ParaView由桑迪亚国家实验室开发，而Mayavi是Enthought公司推出的产品，其Canopy发行版是Anaconda的直接竞争对手。
- en: '**Dashboards**'
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**仪表盘**'
- en: A *dashboard* is a type of easy-to-read interactive GUI, often presented in
    real time. Dashboards are usually displayed on a single web page linked to a database,
    which allows the displayed information to be constantly updated. Example scientific
    dashboards include weather stations, earthquake monitoring, and spacecraft tracking
    ([Figure 16-19](ch16.xhtml#ch016fig19)).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*仪表盘*是一种易于阅读的交互式图形用户界面，通常实时展示。仪表盘通常显示在一个链接到数据库的网页上，这样展示的信息就能不断更新。科学领域的仪表盘示例包括天气站、地震监测和航天器跟踪（[图16-19](ch16.xhtml#ch016fig19)）。'
- en: '![Image](../images/16fig19.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig19.jpg)'
- en: '*Figure 16-19: NASA spacecraft tracking dashboard (courtesy of [https://www.nasa.gov](https://www.nasa.gov))*'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-19：NASA航天器跟踪仪表盘（图片来源：[https://www.nasa.gov](https://www.nasa.gov))*'
- en: Dashboards can really open up the usability and interactivity of your data,
    especially for nontechnical users. They also make the data accessible from anywhere,
    as long as you have an internet connection. This can be important when collaborating
    with external parties or providing results to scattered stakeholders.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘确实可以大大提高数据的可用性和交互性，尤其是对于非技术用户。只要有互联网连接，它们还可以让数据随时随地都能访问。这在与外部合作方协作或向分散的利益相关者提供结果时尤其重要。
- en: Dashboards need to perform multiple tasks like analyzing and visualizing data,
    listening for and accepting user requests, and returning web pages via a web server.
    You can cobble together different libraries to handle these, or you can just use
    a dedicated dashboarding library.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘需要执行多个任务，如分析和可视化数据、监听并接受用户请求、以及通过Web服务器返回网页。你可以将不同的库组合起来处理这些任务，或者你可以直接使用专门的仪表盘库。
- en: 'Python supports higher-level web-based dashboarding with five main libraries:
    Dash, Streamlit, Voilà, Panel, and Bokeh ([Table 16-4](ch16.xhtml#ch016tab4)).
    These libraries let you create dashboards with pure Python, so you don’t have
    to learn the underlying enabling languages like JavaScript and HTML. We looked
    at Bokeh earlier, so here we’ll focus on the other four.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持五个主要库进行高级Web仪表盘开发：Dash、Streamlit、Voilà、Panel和Bokeh（[表16-4](ch16.xhtml#ch016tab4)）。这些库允许你使用纯Python创建仪表盘，因此你不必学习像JavaScript和HTML这样的底层启用语言。我们之前已经看过Bokeh，因此这里我们将重点介绍其他四个。
- en: '**Table 16-4:** Python’s Most Important Dashboarding Libraries'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**表16-4：** Python最重要的仪表盘库'
- en: '| **Library** | **Description** | **Website** |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| **库** | **描述** | **网址** |'
- en: '| --- | --- | --- |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Plotly Dash | Advanced production-grade/enterprise dashboards | *[https://plotly.com/dash/](https://plotly.com/dash/)*
    |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| Plotly Dash | 高级生产级/企业仪表盘 | *[https://plotly.com/dash/](https://plotly.com/dash/)*
    |'
- en: '| Streamlit | Fast and easy web apps from multiple plotting libraries | *[https://streamlit.io/](https://streamlit.io/)*
    |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| Streamlit | 快速、简便的Web应用，支持多种绘图库 | *[https://streamlit.io/](https://streamlit.io/)*
    |'
- en: '| Voilà | Jupyter notebook rendering as standalone web apps | *[https://voila.readthedocs.io/](https://voila.readthedocs.io/)*
    |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| Voilà | 将Jupyter Notebook呈现为独立的Web应用 | *[https://voila.readthedocs.io/](https://voila.readthedocs.io/)*
    |'
- en: '| Panel | Interactive web apps with nearly any library | *[https://panel.holoviz.org/](https://panel.holoviz.org/)*
    |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| Panel | 使用几乎任何库的交互式Web应用 | *[https://panel.holoviz.org/](https://panel.holoviz.org/)*
    |'
- en: '| Bokeh | Web interactivity with large or streaming datasets | *[https://bokeh.org/](https://bokeh.org/)*
    |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| Bokeh | 适用于大规模或流式数据集的Web交互性 | *[https://bokeh.org/](https://bokeh.org/)*
    |'
- en: Before we take a quick look at these four tools, note that it’s possible to
    do some aspects of dashboarding in other libraries. The plotting stalwart Matplotlib
    supports several GUI toolkit interfaces, such as Qt, that can generate native
    applications you can use as an alternative to a web-based dashboard. Whereas several
    libraries make use of JavaScript to help build dashboards, *Bowtie* (*[https://bowtie-py.readthedocs.io/](https://bowtie-py.readthedocs.io/)*)
    lets you build them using pure Python. You can use *ipywidgets* with Jupyter Notebook
    to build a dashboard, but you need to use a separate deployable server, like Voilà,
    to share it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们快速了解这四个工具之前，请注意，实际上在其他库中也可以实现仪表盘的某些功能。图形绘制的老牌库Matplotlib支持多种GUI工具包接口，如Qt，可以生成本地应用程序，作为基于Web的仪表盘的替代方案。而多个库利用JavaScript来帮助构建仪表盘，*Bowtie*（*
    [https://bowtie-py.readthedocs.io/](https://bowtie-py.readthedocs.io/) *）则让你使用纯Python来构建仪表盘。你可以在Jupyter
    Notebook中使用*ipywidgets*来构建仪表盘，但你需要使用一个单独的可部署服务器，如Voilà，来共享它。
- en: For more insight, PyViz hosts a page on dashboarding that includes blog posts,
    links to comparison articles, and lists of alternative or supporting tools. You
    can find it at *[https://pyviz.org/dashboarding/](https://pyviz.org/dashboarding/)*.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多了解，PyViz提供了一个仪表盘页面，包括博客文章、比较文章的链接以及替代或辅助工具的列表。你可以在* [https://pyviz.org/dashboarding/](https://pyviz.org/dashboarding/)
    *找到它。
- en: '**NOTE**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Bokeh, which we looked at previously, includes a widget and app library and
    a server for both plots and dashboards. It also supports live streaming of large
    datasets. However, if you intend to develop complex data visuals with Bokeh, you’ll
    need some knowledge of JavaScript. Panel is built on Bokeh, just as seaborn is
    built on Matplotlib, and in the same way provides a higher-level toolkit to make
    dashboarding easier. It also supports multiple plotting libraries in addition
    to Bokeh.*'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们之前看过的Bokeh，包含了一个小部件和应用库，以及一个用于图表和仪表盘的服务器。它还支持大规模数据集的实时流式传输。然而，如果你打算使用Bokeh开发复杂的数据可视化，你需要一些JavaScript的知识。Panel是建立在Bokeh上的，就像seaborn是建立在Matplotlib上的一样，它提供了一个更高级的工具包，使得构建仪表盘变得更容易。它还支持除了Bokeh之外的多个绘图库。*'
- en: '***Dash***'
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Dash***'
- en: '*Dash* is an open source Python framework developed by Plotly as a complete
    solution for deploying web analytic applications. Dash is built on Plotly.js,
    React.js, and *Flask* (a lower-level framework for building web apps from the
    ground up). Dash apps are rendered in a web browser deployed to servers and shared
    through a URL. This makes Dash platform agnostic and mobile ready. In 2020, Plotly
    released *JupyterDash* (*[https://github.com/plotly/jupyter-dash/](https://github.com/plotly/jupyter-dash/)*),
    a new library designed for building Dash apps from Jupyter environments.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*Dash* 是一个开源 Python 框架，由 Plotly 开发，作为部署 web 分析应用程序的完整解决方案。Dash 建立在 Plotly.js、React.js
    和 *Flask*（一个用于从零开始构建 web 应用的低级框架）之上。Dash 应用程序在 web 浏览器中渲染，部署到服务器并通过 URL 共享。这使得
    Dash 平台独立，并且支持移动设备。在 2020 年，Plotly 发布了 *JupyterDash* (*[https://github.com/plotly/jupyter-dash/](https://github.com/plotly/jupyter-dash/)*)，一个新的库，旨在从
    Jupyter 环境中构建 Dash 应用。'
- en: With Dash, it’s possible to build a responsive, custom interface with pure Python
    in just a few hours. *Responsive*, by the way, means that the web page will render
    well on a variety of devices and screen sizes. Dash uses simple patterns to abstract
    away much of the dashboard-building process, such as generating the required JavaScript,
    React components, HTML, and server API. In fact, you can basically copy and paste
    Plotly graphs straight from a Jupyter notebook into a Dash app.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dash，你可以仅用几个小时就构建一个响应式的定制界面。顺便提一下，*响应式* 意味着网页可以在各种设备和屏幕尺寸上良好渲染。Dash 使用简单的模式来抽象化大部分仪表板构建过程，例如生成所需的
    JavaScript、React 组件、HTML 和服务器 API。实际上，你基本上可以将 Plotly 图表直接从 Jupyter notebook 复制并粘贴到
    Dash 应用中。
- en: As far as how your dashboard looks, Dash provides an attractive out-of-the-box
    default stylesheet but also allows you to easily add third-party styling. *Dash-bootstrap-components*
    (*[https://dash-bootstrap-components.opensource.faculty.ai/](https://dash-bootstrap-components.opensource.faculty.ai/)*)
    is an open source library that makes it easier to build consistently styled apps
    with complex, responsive layouts. You can also use any of the themes from Bootswatch
    themes (*[https://www.bootstrapcdn.com/bootswatch/](https://www.bootstrapcdn.com/bootswatch/)*).
    These time-saving add-ons will let you build professional-looking dashboards with
    little effort.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板的外观方面，Dash 提供了一个吸引人的开箱即用默认样式表，但也允许你轻松添加第三方样式。*Dash-bootstrap-components*
    (*[https://dash-bootstrap-components.opensource.faculty.ai/](https://dash-bootstrap-components.opensource.faculty.ai/)*）是一个开源库，它使得构建具有复杂响应式布局、一致风格的应用变得更容易。你还可以使用来自
    Bootswatch 主题的任何主题 (*[https://www.bootstrapcdn.com/bootswatch/](https://www.bootstrapcdn.com/bootswatch/)*）。这些节省时间的附加工具可以让你以最小的努力构建专业外观的仪表板。
- en: Because of its relative maturity, expanding user community, and adoption by
    large enterprise organizations, Dash now has a large library of specialized modules,
    a host of repositories, and great documentation and tutorials to aid with the
    construction of customized dashboards. Whereas most scientists might aim to produce
    simple single-page dashboards, Dash can also build multipage, scalable, high-performance
    dashboards capable of incorporating organization style guides in the final layouts.
    This is a distinguishing feature of Dash versus friendlier tools like Streamlit
    and Voilà.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其相对成熟、用户社区的扩展以及大型企业组织的采用，Dash 现在拥有大量专业模块库、多个仓库以及出色的文档和教程，帮助构建定制化仪表板。而大多数科学家可能只会制作简单的单页仪表板，Dash
    也能够构建多页、可扩展、高性能的仪表板，并能够将组织风格指南融入最终的布局中。这是 Dash 与像 Streamlit 和 Voilà 这样更简便工具的区别所在。
- en: On the flip side, Dash is primarily designed for Plotly, though it’s possible
    to use other third-party plotting libraries (see *[https://github.com/plotly/dash-alternative-viz-demo/](https://github.com/plotly/dash-alternative-viz-demo/)*).
    Dash also requires you to work with HTML and Cascading Style Sheets (CSS) syntax,
    which isn’t something Python users generally want to do. This has led to the development
    of simpler tools, like Streamlit, which we’ll look at next.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Dash 主要是为 Plotly 设计的，尽管也可以使用其他第三方绘图库（参见 *[https://github.com/plotly/dash-alternative-viz-demo/](https://github.com/plotly/dash-alternative-viz-demo/)*）。Dash
    还要求你使用 HTML 和层叠样式表（CSS）语法，这不是 Python 用户通常愿意做的事情。这导致了更简单工具的出现，例如 Streamlit，接下来我们将介绍它。
- en: '***Streamlit***'
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Streamlit***'
- en: '*Streamlit* is a relatively new open source library for quickly building attractive
    dashboard web applications. As an all-in-one tool, it addresses web serving as
    well as data analysis.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '*Streamlit* 是一个相对较新的开源库，用于快速构建吸引人的仪表板 web 应用程序。作为一个一体化工具，它解决了 web 服务和数据分析的问题。'
- en: Streamlit’s simple API lets you concentrate on your data analysis and visualization
    rather than on frontend and backend technology issues. Sharing and deploying is
    fast and easy, and the learning curve is arguably the shortest of any of Python’s
    dashboarding tools. As a result, Streamlit’s popularity has risen rapidly, and
    new features are constantly being added.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 的简单 API 让你可以专注于数据分析和可视化，而不是前端和后端技术问题。共享和部署都非常快速且简单，而且学习曲线可以说是 Python
    中所有仪表板工具中最短的。因此，Streamlit 的受欢迎程度迅速上升，并且不断有新功能被添加。
- en: Whereas Dash focuses on production and enterprise settings, Streamlit is designed
    for rapid prototyping. It lets you do more with less code, and unlike Dash, which
    is designed to work primarily with Plotly, Streamlit lets you easily mix and match
    plots from multiple libraries, including Plotly, Altair, Bokeh, seaborn, and Matplotlib.
    This gives you the option to choose the best tool for the particular plotting
    job and allows contributing team members to use their preferred plotting library.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Dash 主要针对生产和企业环境不同，Streamlit 设计用于快速原型开发。它让你用更少的代码做更多的事情，而且与 Dash 主要与 Plotly
    配合工作不同，Streamlit 允许你轻松地混合和匹配来自多个库的图表，包括 Plotly、Altair、Bokeh、seaborn 和 Matplotlib。这使你可以根据具体的绘图任务选择最合适的工具，并允许团队成员使用他们偏好的绘图库。
- en: For existing Python scripts, Streamlit is arguably the best way to quickly and
    easily turn them into interactive dashboards. However, it provides no support
    for Jupyter Notebook, and you’ll encounter some friction moving your code into
    Streamlit. On the other hand, it’s very compatible with major libraries like scikit-learn,
    TensorFlow/Keras, NumPy, OpenCV, PyTorch, pandas, and more. If you’re happy with
    Streamlit’s design defaults and don’t need to do a lot of customization, it’s
    a great choice for getting a dashboard up and running quickly.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现有的 Python 脚本，Streamlit 可以说是将其快速且轻松转化为交互式仪表板的最佳方法。然而，它不支持 Jupyter Notebook，且在将代码迁移到
    Streamlit 时，你可能会遇到一些障碍。另一方面，它与诸如 scikit-learn、TensorFlow/Keras、NumPy、OpenCV、PyTorch、pandas
    等主流库高度兼容。如果你对 Streamlit 的默认设计感到满意，并且不需要做太多定制，它是一个快速启动仪表板的绝佳选择。
- en: '***Voilà***'
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Voilà***'
- en: '*Voilà* is an open source library that lets you quickly convert a Jupyter notebook
    into a stand-alone interactive dashboard sharable with others. As a thin layer
    built over Jupyter, it represents a very specific use case rather than a complete
    dashboarding solution.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*Voilà* 是一个开源库，可以让你快速将 Jupyter 笔记本转化为独立的交互式仪表板，并与他人共享。作为建立在 Jupyter 上的薄层，它代表了一个非常具体的用例，而不是一个完整的仪表板解决方案。'
- en: Voilà allows nontechnical people associated with your project to use your Jupyter
    notebooks without having to know Python or Jupyter or have them installed on their
    computer. And if you already have a notebook with all the interactivity you need,
    it’s the shortest path to turning your work into a dashboard.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà 允许与项目相关的非技术人员使用你的 Jupyter 笔记本，而无需了解 Python 或 Jupyter，也无需在他们的电脑上安装这些工具。如果你已经有了包含所需所有交互性的笔记本，它是将工作转化为仪表板的最短路径。
- en: Voilà is mostly about rendering. A common approach is to add interactivity (widgets)
    to a Jupyter notebook using a Python library like bqplot, Plotly, or ipywidgets,
    all of which are supported by Voilà. (We looked at ipywidgets in [Chapter 5](ch05.xhtml)
    on Jupyter Notebook.) You might then need to format the notebook to suppress and
    hide unused code and markdowns.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà 主要用于渲染。一个常见的方法是使用像 bqplot、Plotly 或 ipywidgets 这样的 Python 库，向 Jupyter notebook
    中添加交互性（小部件），这些都受到 Voilà 的支持。（我们在[第 5 章](ch05.xhtml)中介绍了 ipywidgets）。你可能需要格式化笔记本，以便隐藏和抑制未使用的代码和
    Markdown。
- en: Voilà runs the code in the notebook, collects the outputs, and converts them
    to HTML. By default, the notebook code cells are hidden from view. The outputs
    are displayed vertically in the order in which they appear in the notebook ([Figure
    16-20](ch16.xhtml#ch016fig20)), but you can use *widget layout templates* to change
    the position of the cell outputs, for example, by dragging them into a horizontal
    configuration. The page is then saved as a web application where the widgets on
    the page have access to the underlying Jupyter kernel.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà 运行笔记本中的代码，收集输出并将其转换为 HTML。默认情况下，笔记本的代码单元会被隐藏。输出按其在笔记本中出现的顺序垂直显示（[图 16-20](ch16.xhtml#ch016fig20)），但是你可以使用
    *小部件布局模板* 来改变单元输出的位置，例如将它们拖动到水平布局中。然后，页面被保存为一个 Web 应用，其中页面上的小部件可以访问底层 Jupyter
    内核。
- en: At this point, the dashboard is only on your computer. For others to have access,
    you need to deploy your dashboard on the cloud using a public cloud computing
    platform such as Binder, Heroku, Amazon Web Services (AWS), Google Cloud Platform
    (GCP), IBM Cloud, or Microsoft Azure.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，仪表板仅在你的计算机上。为了让其他人可以访问，你需要通过使用公共云计算平台（如 Binder、Heroku、Amazon Web Services
    (AWS)、Google Cloud Platform (GCP)、IBM Cloud 或 Microsoft Azure）将仪表板部署到云端。
- en: '*Binder*, a free open source web application for managing digital repositories,
    is one of the most accessible ways to deploy Voilà applications. Use cases involve
    workshops, scientific workflows, and streamlined sharing among teams. Heroku (*[https://www.heroku.com/](https://www.heroku.com/)*)
    is also a good choice for the less tech-savvy and those with limited budgets.
    It manages the supporting hardware and server infrastructure allowing you to focus
    on perfecting your app. On the downside, the app might run slowly due to low network
    performance. You can see more deployment options at *[https://voila.readthedocs.io/en/stable/deploy.html](https://voila.readthedocs.io/en/stable/deploy.html)*.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '*Binder* 是一个免费的开源网络应用程序，用于管理数字存储库，它是部署 Voilà 应用程序最容易接入的方式之一。使用场景包括研讨会、科学工作流和团队之间的简化共享。Heroku
    (*[https://www.heroku.com/](https://www.heroku.com/))* 对于技术不熟悉和预算有限的人也是一个不错的选择。它管理支持的硬件和服务器基础设施，让你可以专注于完善你的应用程序。缺点是，由于网络性能较低，应用程序可能运行较慢。你可以在
    *[https://voila.readthedocs.io/en/stable/deploy.html](https://voila.readthedocs.io/en/stable/deploy.html)*
    查看更多部署选项。'
- en: Voilà produces dashboards broadly similar to Streamlit and can be simpler to
    use, assuming that you already have a Jupyter notebook ready to go. Jupyter aficionados
    will also appreciate that Voilà shares Jupyter’s widget library, whereas Streamlit
    requires you to learn its own set of custom widgets. You can see some example
    dashboards at *[https://voila-gallery.org/](https://voila-gallery.org/)*.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà 生成的仪表板与 Streamlit 类似，并且使用起来更简单，前提是你已经准备好了 Jupyter 笔记本。Jupyter 爱好者还会欣赏
    Voilà 共享 Jupyter 的小部件库，而 Streamlit 则要求你学习自己的一套自定义小部件。你可以在 *[https://voila-gallery.org/](https://voila-gallery.org/)*
    查看一些示例仪表板。
- en: '![Image](../images/16fig20.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig20.jpg)'
- en: '*Figure 16-20: Dashboard elements retain Jupyter Notebook arrangement (courtesy
    of [https://voila-gallery.org](https://voila-gallery.org)).*'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-20：仪表板元素保持 Jupyter Notebook 的排列方式（图片来自 [https://voila-gallery.org](https://voila-gallery.org)）。*'
- en: '***Panel***'
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Panel***'
- en: '*Panel* is an open source Python library that lets you create custom interactive
    web apps and dashboards by connecting user-defined widgets to plots, images, tables,
    or text. Created and supported by Anaconda, Panel is part of the HoloViz family
    of unified plotting tools (see [Figure 16-9](ch16.xhtml#ch016fig9)) and uses the
    Bokeh server.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '*Panel* 是一个开源的 Python 库，允许你通过将用户定义的小部件连接到图表、图像、表格或文本，创建自定义的互动式网页应用和仪表板。由 Anaconda
    创建和支持，Panel 是 HoloViz 统一绘图库的一部分（见 [图 16-9](ch16.xhtml#ch016fig9)），并使用 Bokeh 服务器。'
- en: Panel helps support your entire workflow so that you never need to commit to
    only one way of using your data and your analyses, and you don’t need to rewrite
    your code just to make it usable in a different way. You can move seamlessly from
    exploring data, creating reproducible steps, and telling a story in a notebook
    to creating a dashboard for a target audience, or even creating a notebook from
    a dashboard.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Panel 帮助支持你的整个工作流，使你无需仅仅依赖一种方式来使用数据和分析，且不需要为了让代码适应不同的使用方式而重写代码。你可以无缝地从数据探索、创建可复现的步骤，到在笔记本中讲述故事，再到为目标观众创建仪表板，甚至从仪表板中创建笔记本。
- en: Panel automatically creates frontends based on Python syntax without requiring
    you to write in HTML or create style sheets with CSS. It integrates better with
    Jupyter Notebook than Dash or Streamlit. It’s arguably the next choice if you’re
    already using Jupyter Notebook, and Voilà is not flexible enough for your needs.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Panel 根据 Python 语法自动创建前端，而无需编写 HTML 或创建 CSS 样式表。它比 Dash 或 Streamlit 更好地与 Jupyter
    Notebook 集成。如果你已经在使用 Jupyter Notebook，而 Voilà 又不够灵活，那么它无疑是下一个选择。
- en: Like Streamlit, Panel works with visualizations from multiple libraries, including
    Bokeh, Matplotlib, HoloViews, and more, making them instantly viewable either
    individually or when combined with interactive widgets that control them. Being
    integrated with the HoloViz family, including GeoViews, Panel is especially good
    for handling geospatial data.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Streamlit 类似，Panel 可以与多个库的可视化配合使用，包括 Bokeh、Matplotlib、HoloViews 等，使其能够立即查看，无论是单独显示还是与控制它们的交互式小部件结合显示。由于与
    HoloViz 家族（包括 GeoViews）集成，Panel 在处理地理空间数据方面特别出色。
- en: Panel objects are reactive, immediately updating to reflect changes to their
    state. This makes it easy to compose viewable objects and link them into simple
    one-off apps to do a specific exploratory task. You then can reuse the same objects
    in more complex combinations to build more ambitious apps. You can also share
    information between multiple pages so that you can build full-featured multipage
    apps. To see some example dashboards and how Panel works with multiple plotting
    libraries, visit *[https://panel.holoviz.org/gallery/index.html](https://panel.holoviz.org/gallery/index.html)*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Panel 对象是响应式的，会立即更新以反映其状态的变化。这使得组合可视化对象并将它们链接成简单的单次应用程序来执行特定的探索任务变得容易。然后，你可以在更复杂的组合中重用相同的对象来构建更具雄心的应用程序。你还可以在多个页面之间共享信息，以便构建功能全面的多页应用程序。要查看一些示例仪表盘以及
    Panel 如何与多个绘图库一起工作，请访问 *[https://panel.holoviz.org/gallery/index.html](https://panel.holoviz.org/gallery/index.html)*。
- en: '**Choosing a Plotting Library**'
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**选择绘图库**'
- en: Even the simplest plotting libraries in Python require a bit of time and effort
    to learn, so you can’t realistically learn them all. But with so many plotting
    choices available, how do you choose among them?
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是 Python 中最简单的绘图库，也需要一定的时间和精力来学习，因此你不可能实际学习所有的库。但有这么多的绘图库可供选择，你如何从中选择？
- en: The throwaway answer is that it depends on what you’re trying to do. But there’s
    more to it than that. You need to look beyond your immediate needs. What will
    you be doing next year? What are your teammates and clients using? How do you
    position yourself for the long term, to reduce the number of libraries you need
    to learn?
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简化的回答是，这取决于你想做什么。但事情并不仅仅如此。你需要超越眼前的需求。你明年会做什么？你的队友和客户使用什么？你如何为长期发展做好准备，减少需要学习的库的数量？
- en: 'The following sections are designed to help you choose the best library, or
    combination of libraries, for you. They include the libraries we’ve discussed
    so far and address the following criteria:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分旨在帮助你选择最适合你的库，或库的组合。它们包括我们迄今讨论过的库，并涵盖以下标准：
- en: '**Size of dataset** The number of data points you need to plot'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据集大小** 你需要绘制的数据点数量'
- en: '**Types of plots** The types of plots you plan to make, from statistical charts
    to complex 3D visualizations'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**图表类型** 你计划制作的图表类型，从统计图表到复杂的 3D 可视化'
- en: '**Format** The way you plan to present the data, such as static plots, Jupyter
    notebooks, interactive dashboards, and so on'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式** 你计划展示数据的方式，例如静态图表、Jupyter 笔记本、交互式仪表盘等。'
- en: '**Versatility** A library’s range of capabilities, such as ease of use, the
    ability to make sophisticated plots, and dashboarding support'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**多功能性** 一个库的能力范围，例如易用性、制作复杂图表的能力以及仪表盘支持'
- en: '**Maturity** The age of the library'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**成熟度** 库的年龄'
- en: For the first four criteria, we’ll look at native, out-of-the-box functionality.
    Although it’s always possible to extend the capabilities of a given library by
    using another library (for example, to enable interactivity), the assumption here
    is that the average user will want to avoid these types of complications.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前四个标准，我们将关注原生的、开箱即用的功能。尽管通过使用其他库（例如，启用交互性）来扩展给定库的功能总是可能的，但这里的假设是，普通用户希望避免这类复杂性。
- en: And remember, we’re only discussing a subset of the most popular plotting libraries.
    If you have highly specialized requirements, you’ll need to perform an online
    search to find the most appropriate tool available.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们这里只讨论最流行的绘图库的一个子集。如果你有高度专业化的需求，你需要进行在线搜索，找到最合适的工具。
- en: '***Size of Dataset***'
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据集大小***'
- en: The most important starting consideration for choosing a plotting library is
    the size of the datasets that you plan to use. In today’s world of big data, you
    can’t afford poor performance or memory issues during visualization. Although
    there are ways to decimate and otherwise manipulate large datasets so that they
    behave as smaller sets, you generally want to avoid this if possible.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 选择绘图库的最重要的起点考虑因素是你计划使用的数据集的大小。在当今的大数据时代，你无法承受在可视化过程中出现性能不佳或内存问题。尽管有一些方法可以减少和操作大数据集，使其表现得像较小的数据集，但通常你希望尽可能避免这样做。
- en: '[Figure 16-21](ch16.xhtml#ch016fig21) presents a rough range of data sizes
    that you can practically plot with different libraries. These are more *relative*
    than *absolute*, as maximum limits can depend on the type of plot you’re making,
    the hardware you’re using, browser performance, whether you’re working in a Jupyter
    notebook, and so on.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-21](ch16.xhtml#ch016fig21) 展示了不同库可以绘制的实际数据规模的大致范围。这些范围更偏向于*相对*而非*绝对*，因为最大限制可能取决于你所做的绘图类型、使用的硬件、浏览器性能、是否在
    Jupyter notebook 中工作等因素。'
- en: '![Image](../images/16fig21.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig21.jpg)'
- en: '*Figure 16-21: InfoVis and SciVis libraries versus size of dataset (in number
    of samples)*'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-21: InfoVis 和 SciVis 库与数据集大小（以样本数计）对比*'
- en: Most of the InfoVis libraries we’ve discussed can plot somewhere between a hundred
    thousand and a million data points. Bokeh supports both Canvas- and WebGL-based
    plotting, and the default Canvas plotting limit may be in the hundreds of thousands.
    But if the WebGL JavaScript API (*[https://get.webgl.org/](https://get.webgl.org/)*)
    is used for Bokeh, assuming it’s supported for the particular type of plot involved,
    the limit should be similar to that for Matplotlib and Plotly.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的大多数 InfoVis 库能够绘制十万到百万个数据点之间的数据。Bokeh 支持基于 Canvas 和 WebGL 的绘图，默认的 Canvas
    绘图限制可能在数十万之内。但是，如果使用 WebGL JavaScript API（*[https://get.webgl.org/](https://get.webgl.org/)）*来绘制
    Bokeh 图形，假设它支持特定类型的绘图，那么其限制应与 Matplotlib 和 Plotly 相似。
- en: Larger datasets require Datashader, which renders plots as images. The SciVis
    libraries Mayavi and ParaView can handle billions of samples using compiled data
    libraries and native GUI apps. Because HoloViews can use Matplotlib, Bokeh, or
    Plotly as its plotting backend, as well as use Datashader, it can theoretically
    cover the whole range shown in [Figure 16-21](ch16.xhtml#ch016fig21).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 更大的数据集需要使用 Datashader，它将绘图渲染为图像。SciVis 库 Mayavi 和 ParaView 可以使用编译过的数据库和原生 GUI
    应用程序处理数十亿个样本。由于 HoloViews 可以使用 Matplotlib、Bokeh 或 Plotly 作为其绘图后端，并且支持 Datashader，因此理论上它能够覆盖
    [图 16-21](ch16.xhtml#ch016fig21) 所展示的整个范围。
- en: '***Types of Plots***'
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***绘图类型***'
- en: Knowing the types of plots that you plan to make, along with their degree of
    interactivity, will help you in selecting the most user-friendly tool for your
    needs. [Figure 16-22](ch16.xhtml#ch016fig22) shows the capabilities of plotting
    libraries, with simple statistical plots on the left and complex 3D visualizations
    on the right.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你计划制作的绘图类型，以及它们的互动性程度，有助于你选择最适合你需求的工具。[图 16-22](ch16.xhtml#ch016fig22) 展示了绘图库的能力，左侧为简单的统计图，右侧为复杂的
    3D 可视化图。
- en: '![Image](../images/16fig22.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/16fig22.jpg)'
- en: '*Figure 16-22: InfoVis and SciVis libraries versus type of plot*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-22: InfoVis 和 SciVis 库与绘图类型对比*'
- en: All of the InfoVis libraries can handle statistical plotting. Even the SciVis
    tools Mayavi and ParaView have this capability to some extent, though they’re
    hardly the best choice. Likewise, although several InfoVis libraries can generate
    3D scatterplots ([Figure 16-5](ch16.xhtml#ch016fig5)) and meshes ([Figures 16-2](ch16.xhtml#ch016fig2)
    and [16-6](ch16.xhtml#ch016fig6)), you still need Mayavi or ParaView for high-performance
    visualization of large and complex 3D plots (such as [Figures 16-17](ch16.xhtml#ch016fig17)
    and [16-18](ch16.xhtml#ch016fig18)). Of the three major plotting libraries, only
    Bokeh has no built-in 3D capability, though it can be extended by installing other
    libraries.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 InfoVis 库都能处理统计绘图。即使是 SciVis 工具 Mayavi 和 ParaView 在某种程度上也具备这个能力，尽管它们并非最佳选择。同样，虽然几个
    InfoVis 库可以生成 3D 散点图（[图 16-5](ch16.xhtml#ch016fig5)）和网格（[图 16-2](ch16.xhtml#ch016fig2)
    和 [16-6](ch16.xhtml#ch016fig6)），但对于大规模和复杂的 3D 图（如 [图 16-17](ch16.xhtml#ch016fig17)
    和 [16-18](ch16.xhtml#ch016fig18)），你仍然需要 Mayavi 或 ParaView 来进行高性能的可视化。在三大绘图库中，只有
    Bokeh 没有内置的 3D 功能，尽管可以通过安装其他库进行扩展。
- en: '***Format***'
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***格式***'
- en: Knowing how you will present your visualizations will help you choose a library
    while keeping things as simple as possible. With the exception of the specialty
    products like Mayavi, ParaView, and the dashboarding tools, you can use most libraries
    to generate static plots and images to print or use in a report. You’ll want to
    verify that you can output the smooth SVG format if you need it, though most support
    this option. [Figure 16-23](ch16.xhtml#ch016fig23) shows more sophisticated options,
    ranging from Jupyter notebooks to highly interactive web applications viewed in
    a browser.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你如何展示可视化将帮助你选择一个库，同时保持尽可能简单。除了如 Mayavi、ParaView 和仪表盘工具等特殊产品外，大多数库都可以用来生成静态图形和图像，供打印或报告使用。不过，你需要确认是否能够输出平滑的
    SVG 格式，尽管大多数库都支持这一选项。[图 16-23](ch16.xhtml#ch016fig23)展示了更复杂的选项，范围从 Jupyter 笔记本到可以在浏览器中查看的高度互动的
    Web 应用程序。
- en: '![Image](../images/16fig23.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig23.jpg)'
- en: '*Figure 16-23: The InfoVis and SciVis libraries versus publishing format*'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-23：InfoVis 和 SciVis 库与发布格式*'
- en: The dashboarding libraries are displayed so that the simplest, least flexible
    ones are shifted to the left and the more powerful and customizable are shifted
    to the right. Voilà, for example, works only with Jupyter Notebook, whereas Dash
    can produce enterprise-level visualizations. Bokeh operates over *WebSockets*,
    a library for maintaining a persistent connection between a client and server,
    allowing for constantly connected sessions that you can easily use for multiple
    back-and-forth interactions.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘库的展示方式是将最简单、最不灵活的库放到左侧，而将功能更强大、可定制性更高的库放到右侧。例如，Voilà 仅与 Jupyter Notebook
    配合使用，而 Dash 可以生成企业级的可视化图表。Bokeh 通过 *WebSockets* 操作，这是一种用于维持客户端和服务器之间持久连接的库，允许你进行多个双向交互时保持连接。
- en: '***Versatility***'
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多功能性***'
- en: Sometimes organically and sometimes by design, plotting libraries grow into
    “families” of a sort ([Figure 16-24](ch16.xhtml#ch016fig24)). The Plotly family,
    for example, has Plotly Express for quick and simple plotting, and Dash for dashboarding.
    In similar fashion, HoloViews has hvPlot and Panel, and pandas and seaborn make
    plotting with Matplotlib as easy as possible. With a truly versatile family, you
    can quickly produce plots using simple syntax, drop down into the core library
    to add sophisticated elements, and seamlessly share the result as a dashboard
    on the web.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 有时是自然演变，有时是设计使然，绘图库会成长为一种“家族”形式（[图 16-24](ch16.xhtml#ch016fig24)）。例如，Plotly
    家族包含 Plotly Express（用于快速简便的绘图）和 Dash（用于仪表盘）。类似地，HoloViews 包含 hvPlot 和 Panel，而
    pandas 和 seaborn 则让使用 Matplotlib 绘图变得尽可能简单。拥有真正多功能的家族，你可以通过简单的语法快速生成图形，深入核心库添加复杂的元素，并无缝地将结果作为
    Web 仪表盘分享。
- en: Even though it’s possible to mix and match these to a point, having to learn
    the syntax for multiple libraries is not very appealing. Both Plotly and HoloViews
    give you full built-in soup-to-nuts functionality, but that doesn’t mean you’re
    limited to just two options. The Matplotlib family can “adopt” a dashboarding
    library, such as Streamlit, Panel, or Voilà, whereas Chartify, Pandas-Bokeh, and
    hvPlot can serve as an “easy” option for Bokeh.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在一定程度上可以混合使用这些库，但需要学习多个库的语法并不太吸引人。Plotly 和 HoloViews 都为你提供了完整的内置功能，但这并不意味着你只能选择这两个选项。Matplotlib
    系列可以“集成”一个仪表盘库，如 Streamlit、Panel 或 Voilà，而 Chartify、Pandas-Bokeh 和 hvPlot 则可以作为
    Bokeh 的“简易”选项。
- en: '![Image](../images/16fig24.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig24.jpg)'
- en: '*Figure 16-24: Versatility of the InfoVis and SciVis libraries*'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-24：InfoVis 和 SciVis 库的多功能性*'
- en: '***Maturity***'
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***成熟度***'
- en: '[Figure 16-25](ch16.xhtml#ch016fig25) captures the relative age of the plotting
    libraries. The longer a library has been around, the more likely it is to be reliable,
    well documented, and have an established user base that produces helpful tutorials,
    example galleries, and extensions. Over time, users encounter bugs, learn usage
    patterns, and share their experiences. As a result, you’ll be able to find answers
    to most questions at help sites like Stack Overflow (*[https://stackoverflow.com/](https://stackoverflow.com/)*).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-25](ch16.xhtml#ch016fig25)展示了各绘图库的相对使用年限。一个库存在的时间越长，它就越有可能是可靠的、文档齐全的，并且有一个成熟的用户基础，这些用户会提供有用的教程、示例图库和扩展功能。随着时间的推移，用户遇到
    bug，学习使用模式，并分享他们的经验。因此，你可以在像 Stack Overflow（* [https://stackoverflow.com/](https://stackoverflow.com/)*）这样的帮助网站上找到大多数问题的答案。'
- en: Paraview, Matplotlib, and pandas have been around for a long time, whereas libraries
    like Voilà and Panel are more recent. Keep in mind that maturity is a somewhat
    scalable criterion. Wildly popular libraries will mature quickly. A good example
    of this is the newer dashboarding libraries Dash and Streamlit, with rapidly growing
    user bases constantly adding new features and supplementing the documentation.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Paraview、Matplotlib 和 pandas 已经存在了很长时间，而像 Voilà 和 Panel 这样的库则相对较新。请记住，成熟度是一个有一定可扩展性的标准。非常受欢迎的库会迅速成熟。一个很好的例子就是较新的仪表板库
    Dash 和 Streamlit，它们拥有快速增长的用户群体，不断添加新特性并完善文档。
- en: '![Image](../images/16fig25.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/16fig25.jpg)'
- en: '*Figure 16-25: Relative age of the InfoVis and SciVis libraries*'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-25：InfoVis 和 SciVis 库的相对年龄*'
- en: '***Making the Final Choice***'
  id: totrans-285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***做出最终选择***'
- en: Although it’s true that the best plotting library might be dependent on your
    use case as well as your background and skill level, no one wants to jump from
    tool to tool with each new project. Still, there’s a good chance you won’t be
    able to get by with a single visualization library, especially if you need to
    do a range of things, including visualizing complicated 3D simulations.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最好的绘图库可能依赖于你的使用场景以及你的背景和技能水平，但没有人愿意在每个新项目中都跳来跳去地更换工具。尽管如此，很可能你不能仅凭一个可视化库就应付所有需求，尤其是当你需要做多种工作时，包括可视化复杂的
    3D 模拟。
- en: If you expect to use Python *a lot*, you should look for a library, such as
    Matplotlib, Plotly, or the HoloViz family, that covers as much area as possible
    in [Figures 16-21](ch16.xhtml#ch016fig21) through [16-25](ch16.xhtml#ch016fig25).
    These libraries may be more difficult to learn, but it will be worth it in the
    long run.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算*大量*使用 Python，你应该寻找像 Matplotlib、Plotly 或 HoloViz 家族这样的库，覆盖 [图16-21](ch16.xhtml#ch016fig21)
    到 [图16-25](ch16.xhtml#ch016fig25) 中的尽可能多的内容。这些库可能更难学习，但从长远来看，它是值得的。
- en: The case for learning Matplotlib is always strong due to its maturity, versatility,
    good integration with the ecosystem, and the fact that so many other libraries
    are built upon it. As a default plotting tool, it’s a safe choice, but if you
    strongly favor a simpler library, all is not lost. As mentioned previously, [Figures
    16-21](ch16.xhtml#ch016fig21) through [16-24](ch16.xhtml#ch016fig24) assume that
    you’re using the *native capability* of the posted libraries. They further assume
    that you want functionality, like zooming and panning, to work out of the box.
    But many other libraries exist that, with little effort, can *extend* their native
    capabilities. Earlier, you saw how, with one extra line of code, HoloViews could
    add interactivity to the static plots generated by the pandas plotting API.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Matplotlib 的理由一直都很强大，主要由于它的成熟度、多功能性、与生态系统的良好集成，以及许多其他库是基于它构建的。作为默认的绘图工具，它是一个安全的选择，但如果你更倾向于一个更简单的库，情况也并非完全没有希望。如前所述，[图16-21](ch16.xhtml#ch016fig21)
    到 [图16-24](ch16.xhtml#ch016fig24) 假设你正在使用所发布库的*原生功能*。它们进一步假设你希望像缩放和平移这样的功能能够开箱即用。但实际上，许多其他库也存在，并且只需要稍加努力，就可以*扩展*它们的原生功能。之前你已经看到，借助一行额外的代码，HoloViews
    就能为 pandas 绘图 API 生成的静态图形增加交互性。
- en: With Anaconda, it’s easy to install plotting libraries and play with them in
    Jupyter Notebook. You should take the time to experiment a little using online
    tutorials. If you find that you prefer a fairly simple library or one not discussed
    here, search for libraries that can add any missing capability. You may be able
    to cobble together a Frankenstein product that perfectly fits your needs.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Anaconda，你可以轻松地安装绘图库并在 Jupyter Notebook 中进行试验。你应该利用在线教程，花时间做一些实验。如果你发现你更喜欢一个相对简单的库，或者一个在这里没有讨论的库，寻找可以添加任何缺失功能的库。你也许能拼凑出一个完美符合你需求的
    Frankenstein 产品。
- en: 'As a final comment: the HoloViz concept is intriguing. Its goal is to provide
    a unified, consistent, and forward-looking plotting solution for Python. It’s
    worth serious consideration, especially if you have a long career ahead of you.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的评论：HoloViz 的概念很有趣。它的目标是为 Python 提供一个统一、一致且面向未来的绘图解决方案。特别是如果你有一个长远的职业生涯，这个方案值得认真考虑。
- en: '**NOTE**'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**注释**'
- en: '*After you choose a plotting library, you’ll still need to pick a type of plot
    to use with your data. A great place to start is the From Data to Viz website
    at [https://www.data-to-viz.com/](https://www.data-to-viz.com/). Here you’ll find
    a decision tree that will help you determine the most appropriate chart based
    on the format of your dataset. You’ll also find a Caveats page that will help
    you understand and avoid some of the most common data presentation mistakes.*'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '*在选择绘图库后，你仍然需要选择一种绘图类型来与数据配合使用。一个很好的起点是[From Data to Viz网站](https://www.data-to-viz.com/)。在这里，你可以找到一个决策树，帮助你根据数据集的格式确定最合适的图表类型。你还会找到一个“注意事项”页面，帮助你理解并避免一些最常见的数据展示错误。*'
- en: '**Summary**'
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, we reviewed the InfoVis libraries, used for 2D or simple 3D
    static or interactive representations of data, as well as the more sophisticated
    SciVis libraries, used for graphical representations of physically situated data.
    Because the InfoVis libraries address common displays such as bar charts and scattergrams,
    there are many libraries from which to choose.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们回顾了InfoVis库，它们用于二维或简单三维的静态或交互式数据表示，以及更复杂的SciVis库，用于物理数据的图形表示。由于InfoVis库涉及常见的显示方式，如条形图和散点图，因此有许多库可以选择。
- en: The most popular InfoVis library is Matplotlib. Due to its maturity and flexibility,
    other plotting libraries, like seaborn, “wrap” Matplotlib to make it easier to
    use and to provide additional themes and styles. Newer plotting libraries such
    as Bokeh, Plotly, and Holoviews, provide much of the functionality of Matplotlib
    but also focus on web apps and the building of interactive dashboards. Other tools,
    like Datashader, address the need to efficiently plot large volumes of data.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的InfoVis库是Matplotlib。由于它的成熟性和灵活性，其他绘图库，如seaborn，基于Matplotlib进行了“封装”，使其更易于使用，并提供了额外的主题和样式。像Bokeh、Plotly和Holoviews这样的新型绘图库，提供了Matplotlib的大部分功能，但还专注于Web应用程序和交互式仪表板的构建。其他工具，如Datashader，则解决了高效绘制大量数据的需求。
- en: The choice of a go-to plotting library is a personal one influenced by the tasks
    that you need to complete and the effort you’re willing to apply. Because most
    users will want to focus on learning as few packages as possible, the best solution
    is to choose a plotting “family” that provides broad coverage of plot types, formats,
    dataset sizes, and so on. This will need to be weighed against the value of a
    mature (but possibly disjointed) solution that comes with lots of support versus
    newer, less well-documented libraries that try to provide a seamless, holistic
    approach that will stand the test of time.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个常用的绘图库是个人的决定，受你需要完成的任务和你愿意投入的精力的影响。因为大多数用户希望尽量学习尽可能少的库，最佳的解决方案是选择一个绘图库“家族”，它能提供广泛的图表类型、格式、数据集大小等支持。这需要权衡与一个成熟（但可能不太连贯）的解决方案相比，后者提供大量支持，而新颖的、文档较少的库则试图提供一个无缝的、整体的方法，能够经得起时间的考验。
