["```py\n      intent = extract_intent(doc) \n\n      if intent == 'orderPizza': \n\n        print('We need you to answer some questions to place your order.') \n\n        ...\n\n      elif intent == 'showPizza': \n\n        print('Would you like to look at our menu?')\n\n        ...\n```", "```py\n   import spacy\n\n   nlp = spacy.load('en')\n\n➊ doc = nlp(u'show me the best hotel in berlin')\n\n➋ for token in doc:\n\n     if token.dep_ == 'dobj':\n\n       print(➌token.head.text + token.text.capitalize())\n```", "```py\nshowHotel\n```", "```py\nI want a pizza and cola.\n```", "```py\n   doc = nlp(u'I want a pizza and cola.')\n\n   #extract the direct object and the conjunct associated with it\n\n   for token in doc:\n\n     if token.dep_ == 'dobj':\n\n       dobj = [token.text]\n\n       conj = [t.text for t in ➊token.conjuncts]\n\n   #compose the list of the extracted elements\n\n➋ dobj_conj = dobj + conj \n\n   print(dobj_conj)\n```", "```py\n['pizza', 'cola']\n```", "```py\nverb = dobj.head\n```", "```py\nI want to place an order for a pizza.\n```", "```py\n   #apply the pipeline to the sample sentence\n\n   doc = nlp(u'I want to place an order for a pizza.')\n\n   # extract the direct object and its transitive verb\n\n   dobj = ''\n\n   tverb = ''\n\n   for token in doc:\n\n  ➊ if token.dep_ == 'dobj':\n\n       dobj = token\n\n       tverb = token.head \n\n   # extract the verb for the intent's definition\n\n   intentVerb = ''\n\n   verbList = ['want', 'like', 'need', 'order']\n\n➋ if tverb.text in verbList: \n\n     intentVerb = tverb\n\n➌ else:\n\n     if tverb.head.dep_ == 'ROOT':\n\n       intentVerb = tverb.head\n\n   # extract the object for the intent's definition\n\n   intentObj = ''\n\n   objList = ['pizza', 'cola']\n\n➍ if dobj.text in objList: \n\n     intentObj = dobj\n\n   else:\n\n     for child in dobj.children:\n\n       if child.dep_ == 'prep': \n\n        ➎ intentObj = list(child.children)[0]\n\n           break\n\n    ➏ elif child.dep_ == 'compound': \n\n           intentObj = child\n\n           break\n\n   # print the intent expressed in the sample sentence \n\n   print(intentVerb.text + intentObj.text.capitalize())\n```", "```py\nwantPizza\n```", "```py\nI want a dish. I'd like to order a pizza. Give me a pie.\n```", "```py\n   #apply the pipeline to the sample sentence\n\n   doc = nlp(u'I want a dish.')\n\n   #extract the transitive verb and its direct object from the dependency tree\n\n➊ for token in doc:\n\n     if token.dep_ == 'dobj':\n\n       verb = token.head.text \n\n       dobj = token.text\n\n   #create a list of tuples for possible verb synonyms\n\n➋ verbList = [('order','want','give','make'),('show','find')]\n\n   #find the tuple containing the transitive verb extracted from the sample\n\n➌ verbSyns = [item for item in verbList if verb in item]\n\n   #create a list of tuples for possible direct object synonyms\n\n➍ dobjList = [('pizza','pie','dish'),('cola','soda')]\n\n   #find the tuple containing the direct object extracted from the sample\n\n   dobjSyns = [item for item in dobjList if dobj in item]\n\n   #replace the transitive verb and the direct object with synonyms supported by\n\n   the application\n\n   #and compose the string that represents the intent \n\n➎ intent = verbSyns[0][0] + dobjSyns[0][0].capitalize()\n\n   print(intent)\n```", "```py\norderPizza\n```", "```py\nI want an apple.\n```", "```py\ndoc = nlp(u'I feel like eating a pie.')\n```", "```py\nfor token in doc:\n\n  if token.dep_ == 'dobj':\n\n    dobj = token\n```", "```py\ntokens = nlp(u'food')\n```", "```py\nif dobj.similarity(tokens[0]) > 0.6:\n\n  question = 'Would you like to look at our menu?'\n```", "```py\nI have finished my pizza. I want another one.\n```", "```py\ndoc = nlp(u'I have finished my pizza. I want another one.')\n```", "```py\nverbList = [('order','want','give','make'),('show','find')]\n\ndobjList = [('pizza','pie','pizzaz'),('cola','soda')]\n```", "```py\nI want another one. I want it again. I want the same. I want more.\n```", "```py\nsubstitutes = ('one','it','same','more')\n```", "```py\nintent = {'verb': '', 'dobj': ''}\n```", "```py\nfor sent in doc.sents:\n\n  for token in sent:\n\n    if token.dep_ == 'dobj':\n\n      verbSyns = [item for item in verbList if token.head.text in item]\n\n   ➊ dobjSyns = [item for item in dobjList if token.text in item]\n\n      substitute =  [item for item in substitutes if token.text in item]\n\n      if ➋(dobjSyns != [] or substitute != []) and ➌verbSyns != []:\n\n          intent['verb'] = verbSyns[0][0]\n\n   ➍ if dobjSyns != []:\n\n          intent['dobj'] = dobjSyns[0][0]\n```", "```py\nI want an apple.\n```", "```py\nI like it.\n```", "```py\nintentStr = intent['verb'] + intent['dobj'].capitalize()\n```", "```py\nprint(intentStr)\n```", "```py\norderPizza\n```", "```py\nI have finished my pizza. It was delicious. I want another one.\n```"]