- en: D
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D
- en: Using Git for Version Control
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 进行版本控制
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Version control software allows you to take snapshots of a project whenever
    it’s in a working state. When you make changes to a project—for example, when
    you implement a new feature—you can go back to a previous working state if the
    project’s current state isn’t functioning well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制软件允许你在项目处于工作状态时拍摄快照。当你对项目进行更改时——例如，添加一个新功能——如果项目当前的状态无法正常工作，你可以回到先前的工作状态。
- en: Using version control software gives you the freedom to work on improvements
    and make mistakes without worrying about ruining your project. This is especially
    critical in large projects, but can also be helpful in smaller projects, even
    when you’re working on programs contained in a single file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用版本控制软件使你可以自由地进行改进和犯错，而不必担心破坏项目。这个功能在大型项目中尤为重要，但在较小的项目中也同样有帮助，甚至当你只是在处理单个文件中的程序时。
- en: In this appendix, you’ll learn to install Git and use it for version control
    in the programs you’re working on now. *Git* is the most popular version control
    software in use today. Many of its advanced tools help teams collaborate on large
    projects, but its most basic features also work well for solo developers. Git
    implements version control by tracking the changes made to every file in a project;
    if you make a mistake, you can just return to a previously saved state.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，你将学习如何安装 Git，并在当前项目中使用它进行版本控制。*Git* 是目前最流行的版本控制软件。它的许多高级工具帮助团队在大型项目中协作，但其最基本的功能也非常适合单独开发者使用。Git
    通过跟踪项目中每个文件的更改来实现版本控制；如果你犯了错误，只需返回到先前保存的状态。
- en: Installing Git
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Git
- en: Git runs on all operating systems, but there are different approaches to installing
    it on each system. The following sections provide specific instructions for each
    operating system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Git 可在所有操作系统上运行，但每个系统的安装方法有所不同。以下各节提供了针对每个操作系统的具体安装说明。
- en: Git is included on some systems by default, and is often bundled with other
    packages that you might have already installed. Before trying to install Git,
    see if it’s already on your system. Open a new terminal window and issue the command
    `git --version`. If you see output listing a specific version number, Git is installed
    on your system. If you see a message prompting you to install or update Git, follow
    the onscreen instructions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Git 在一些系统中默认包含，并且常常与其他你可能已经安装的软件包一起捆绑。安装 Git 之前，先检查一下系统中是否已经安装了它。打开一个新的终端窗口并运行命令
    `git --version`。如果输出显示了特定的版本号，则表示 Git 已经安装。如果看到提示你安装或更新 Git 的信息，请按照屏幕上的指示操作。
- en: If you don’t see any onscreen instructions and you’re using Windows or macOS,
    you can download an installer from [https://git-scm.com](https://git-scm.com).
    If you’re a Linux user with an apt-compatible system, you can install Git with
    the command `sudo apt install git`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到屏幕上的任何提示，并且使用的是 Windows 或 macOS，可以从 [https://git-scm.com](https://git-scm.com)
    下载一个安装程序。如果你是使用 apt 兼容系统的 Linux 用户，可以通过命令 `sudo apt install git` 安装 Git。
- en: Configuring Git
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Git
- en: 'Git keeps track of who makes changes to a project, even when only one person
    is working on the project. To do this, Git needs to know your username and email.
    You must provide a username, but you can make up a fake email address:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Git 跟踪谁对项目进行了更改，即使只有一个人在项目中工作。为此，Git 需要知道你的用户名和电子邮件地址。你必须提供一个用户名，但可以随意编造一个假的电子邮件地址：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you forget this step, Git will prompt you for this information when you make
    your first commit.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了这一步，Git 会在你第一次提交时提示你提供这些信息。
- en: 'It’s also best to set the default name for the main branch in each project.
    A good name for this branch is `main`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最好为每个项目设置主分支的默认名称。一个好的名称是 `main`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This configuration means that each new project you use Git to manage will start
    out with a single branch of commits called *main*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置意味着，你使用 Git 管理的每个新项目将以一个名为 *main* 的单一分支提交开始。
- en: Making a Project
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个项目
- en: 'Let’s make a project to work with. Create a folder somewhere on your system
    called *git_practice*. Inside the folder, make a simple Python program:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个项目来进行操作。在你的系统上创建一个名为 *git_practice* 的文件夹。在该文件夹内，创建一个简单的 Python 程序：
- en: '**hello_git.py**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**hello_git.py**'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We’ll use this program to explore Git’s basic functionality.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个程序来探索 Git 的基本功能。
- en: Ignoring Files
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忽略文件
- en: 'Files with the extension *.pyc* are automatically generated from *.py* files,
    so we don’t need Git to keep track of them. These files are stored in a directory
    called *__pycache__*. To tell Git to ignore this directory, make a special file
    called *.gitignore*—with a dot at the beginning of the filename and no file extension—and
    add the following line to it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展名为*.pyc*的文件是从*.py*文件自动生成的，所以我们不需要Git来跟踪它们。这些文件被存储在一个名为*__pycache__*的目录中。为了告诉Git忽略这个目录，我们创建一个名为*.gitignore*的特殊文件——文件名以点号开头且没有扩展名，并将以下行添加到文件中：
- en: '**.gitignore**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**.gitignore**'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This file tells Git to ignore any file in the *__pycache__* directory. Using
    a *.gitignore* file will keep your project clutter-free and easier to work with.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件告诉Git忽略任何位于*__pycache__*目录中的文件。使用*.gitignore*文件可以保持项目整洁，更容易进行操作。
- en: You might need to modify your file browser’s settings so hidden files (files
    whose names begin with a dot) will be shown. In Windows Explorer, check the box
    in the View menu labeled **Hidden Items**. On macOS, press ⌘-SHIFT-. (dot). On
    Linux, look for a setting labeled Show Hidden Files.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要修改文件浏览器的设置，以便显示隐藏文件（文件名以点号开头）。在Windows资源管理器中，勾选“查看”菜单中的**隐藏的项目**框。在macOS中，按⌘-SHIFT-.（点号）。在Linux中，查找名为“显示隐藏文件”的设置。
- en: Initializing a Repository
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化仓库
- en: 'Now that you have a directory containing a Python file and a *.gitignore* file,
    you can initialize a Git repository. Open a terminal, navigate to the *git_practice*
    folder, and run the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个包含Python文件和*.gitignore*文件的目录，你可以初始化一个Git仓库。打开终端，进入*git_practice*文件夹，并运行以下命令：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output shows that Git has initialized an empty repository in *git_practice*.
    A *repository* is the set of files in a program that Git is actively tracking.
    All the files Git uses to manage the repository are located in the hidden directory
    *.git*, which you won’t need to work with at all. Just don’t delete that directory,
    or you’ll lose your project’s history.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示Git已经在*git_practice*中初始化了一个空的仓库。一个*仓库*是Git正在积极跟踪的程序文件集合。Git用来管理仓库的所有文件都位于一个隐藏的目录*.git*中，你不需要直接与这个目录交互。只要不要删除这个目录，否则你将丢失项目的历史记录。
- en: Checking the Status
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查状态
- en: 'Before doing anything else, let’s look at the project’s status:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何操作之前，让我们先查看一下项目的状态：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Git, a *branch* is a version of the project you’re working on; here you can
    see that we’re on a branch named `main` ❶. Each time you check your project’s
    status, it should show that you’re on the branch `main`. You then see that we’re
    about to make the initial commit. A *commit* is a snapshot of the project at a
    particular point in time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，一个*分支*是你正在工作的项目版本；在这里你可以看到我们在一个名为`main`的分支上❶。每次检查项目的状态时，它应该显示你在`main`分支上。接着你可以看到我们即将进行初始提交。一个*提交*是项目在某一特定时刻的快照。
- en: Git informs us that untracked files are in the project ❷, because we haven’t
    told it which files to track yet. Then we’re told that there’s nothing added to
    the current commit, but untracked files are present that we might want to add
    to the repository ❸.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Git告知我们项目中有未被跟踪的文件❷，因为我们还没有告诉它要跟踪哪些文件。接着我们被告知，当前提交没有任何内容，但存在一些未跟踪的文件，我们可能想要将它们添加到仓库中❸。
- en: Adding Files to the Repository
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加文件到仓库
- en: 'Let’s add the two files to the repository and check the status again:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这两个文件添加到仓库中，再次检查状态：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The command `git add .` adds to the repository all files within a project that
    aren’t already being tracked ❶, as long as they’re not listed in *.gitignore*.
    It doesn’t commit the files; it just tells Git to start paying attention to them.
    When we check the status of the project now, we can see that Git recognizes some
    changes that need to be committed ❷. The label *new file* means these files were
    newly added to the repository ❸.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`git add .`将所有项目中尚未被跟踪的文件添加到仓库中❶，只要它们没有被列在*.gitignore*文件中。它不会提交这些文件；只是告诉Git开始关注它们。当我们现在检查项目的状态时，可以看到Git已经识别出一些需要提交的更改❷。标签*新文件*表示这些文件是新添加到仓库中的❸。
- en: Making a Commit
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交更改
- en: 'Let’s make the first commit:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行第一次提交：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We issue the command `git commit -m "``message``"` ❶ to make a snapshot of the
    project. The `-m` flag tells Git to record the message that follows (`Started`
    project.) in the project’s log. The output shows that we’re on the `main` branch
    ❷ and that two files have changed ❸.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用命令`git commit -m "``message``"`❶来对项目进行快照。`-m`标志告诉Git记录后续的消息（`Started` project.）到项目日志中。输出显示我们在`main`分支上❷，并且有两个文件发生了变化❸。
- en: When we check the status now, we can see that we’re on the `main` branch, and
    we have a clean working tree ❹. This is the message you should see each time you
    commit a working state of your project. If you get a different message, read it
    carefully; it’s likely you forgot to add a file before making a commit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在检查状态时，可以看到我们位于 `main` 分支，并且工作树是干净的 ❹。这是你每次提交项目工作状态时应该看到的信息。如果你看到不同的信息，仔细阅读它；很可能是你在提交前忘记添加某个文件。
- en: Checking the Log
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查日志
- en: 'Git keeps a log of all commits made to the project. Let’s check the log:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Git 会记录所有对项目所做的提交日志。让我们查看日志：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Each time you make a commit, Git generates a unique, 40-character reference
    ID. It records who made the commit, when it was made, and the message recorded.
    You won’t always need all of this information, so Git provides an option to print
    a simpler version of the log entries:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你进行提交时，Git 会生成一个独特的 40 字符的参考 ID。它记录谁进行了提交、何时进行的提交以及记录的消息。你并不总是需要所有这些信息，因此
    Git 提供了一个选项来打印更简洁的日志条目：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `--pretty=oneline` flag provides the two most important pieces of information:
    the reference ID of the commit and the message recorded for the commit.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`--pretty=oneline` 标志提供了两条最重要的信息：提交的参考 ID 和为该提交记录的消息。'
- en: The Second Commit
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二次提交
- en: 'To see the real power of version control, we need to make a change to the project
    and commit that change. Here we’ll just add another line to *hello_git.py*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到版本控制的真正强大之处，我们需要对项目进行更改并提交该更改。在这里，我们将只是再给 *hello_git.py* 添加一行：
- en: '**hello_git.py**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**hello_git.py**'
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When we check the status of the project, we’ll see that Git has noticed the
    file that changed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查项目的状态时，我们会看到 Git 已经注意到文件发生了变化：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We see the branch we’re working on ❶, the name of the file that was modified
    ❷, and that no changes have been committed ❸. Let’s commit the change and check
    the status again:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到当前工作的分支 ❶、被修改的文件名 ❷，以及没有提交的更改 ❸。让我们提交这个更改，然后再次检查状态：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We make a new commit, passing the `-am` flags when we use the command `git commit`
    ❶. The `-a` flag tells Git to add all modified files in the repository to the
    current commit. (If you create any new files between commits, reissue the `git
    add .` command to include the new files in the repository.) The `-m` flag tells
    Git to record a message in the log for this commit.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行一次新的提交，在使用 `git commit` 命令时传入 `-am` 标志 ❶。`-a` 标志告诉 Git 将所有修改过的文件添加到当前的提交中。（如果你在两次提交之间创建了新文件，请重新发出
    `git add .` 命令，将新文件包含进来。）`-m` 标志告诉 Git 在日志中记录这个提交的消息。
- en: When we check the project’s status, we see that we once again have a clean working
    tree ❷. Finally, we see the two commits in the log ❸.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查项目的状态时，我们看到我们再次拥有一个干净的工作树 ❷。最后，我们在日志中看到这两个提交 ❸。
- en: Abandoning Changes
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 放弃更改
- en: 'Now let’s look at how to abandon a change and go back to the previous working
    state. First, add a new line to *hello_git.py*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下如何放弃更改并回到上一个工作状态。首先，给 *hello_git.py* 添加一行：
- en: '**hello_git.py**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**hello_git.py**'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save and run this file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并运行这个文件。
- en: 'We check the status and see that Git notices this change:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查状态时发现 Git 已经注意到这个更改：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Git sees that we modified *hello_git.py* ❶, and we can commit the change if
    we want to. But this time, instead of committing the change, we’ll go back to
    the last commit when we knew our project was working. We won’t do anything to
    *hello_git.py*: we won’t delete the line or use the Undo feature in the text editor.
    Instead, enter the following commands in your terminal session:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Git 发现我们修改了 *hello_git.py* ❶，如果需要，我们可以提交这个更改。但是这次，我们不会提交这个更改，而是回到上次提交的状态，那个时候我们知道项目是正常工作的。我们不会对
    *hello_git.py* 做任何操作：既不删除这行，也不使用文本编辑器的撤销功能。相反，在你的终端会话中输入以下命令：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The command `git restore` `filename` allows you to abandon all changes since
    the last commit in a specific file. The command `git restore .` abandons all changes
    made in all files since the last commit; this action restores the project to the
    last committed state.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `git restore` `filename` 允许你放弃自上次提交以来某个特定文件的所有更改。命令 `git restore .` 放弃自上次提交以来在所有文件中做的所有更改；此操作将项目恢复到最后一次提交的状态。
- en: 'When you return to your text editor, you’ll see that *hello_git.py* has changed
    back to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当你回到文本编辑器时，你会看到 *hello_git.py* 已经恢复成了这个样子：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Although going back to a previous state might seem trivial in this simple project,
    if we were working on a large project with dozens of modified files, all the files
    that had changed since the last commit would be restored. This feature is incredibly
    useful: you can make as many changes as you want when implementing a new feature,
    and if they don’t work, you can discard them without affecting the project. You
    don’t have to remember those changes and manually undo them. Git does all of that
    for you.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在这个简单项目中回到之前的状态看起来似乎很不起眼，但如果我们在一个有数十个修改文件的大项目中工作，自上次提交以来所有变动的文件都会被恢复。这个功能非常有用：你可以在实现新特性时进行尽可能多的更改，如果它们不起作用，你可以丢弃这些更改而不影响项目。你不需要记住那些更改并手动撤销，Git会为你做这一切。
- en: Checking Out Previous Commits
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检出之前的提交
- en: 'You can revisit any commit in your log, using the `checkout` command, by using
    the first six characters of a reference ID. After checking out and reviewing an
    earlier commit, you can return to the latest commit or abandon your recent work
    and pick up development from the earlier commit:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`checkout`命令并利用参考ID的前六个字符，重新访问日志中的任何提交。在检出并查看一个较早的提交后，你可以返回到最新的提交，或者放弃最近的工作，从较早的提交开始继续开发：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When you check out a previous commit, you leave the main branch and enter what
    Git refers to as a *detached HEAD* state ❶. *HEAD* is the current committed state
    of the project; you’re *detached* because you’ve left a named branch (`main`,
    in this case).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你检出一个之前的提交时，你将离开主分支，进入Git所说的*detached HEAD*状态❶。*HEAD*是项目当前已提交的状态；你之所以*detached*，是因为你已经离开了一个命名的分支（此处为`main`）。
- en: 'To get back to the `main` branch, you follow the suggestion ❷ to undo the previous
    operation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回到`main`分支，你可以按照建议❷撤销之前的操作：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command brings you back to the `main` branch. Unless you want to work
    with some more advanced features of Git, it’s best not to make any changes to
    your project when you’ve checked out a previous commit. However, if you’re the
    only one working on a project and you want to discard all of the more recent commits
    and go back to a previous state, you can reset the project to a previous commit.
    Working from the `main` branch, enter the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将你带回`main`分支。除非你想使用Git的更高级功能，否则在检出一个之前的提交后，最好不要对你的项目进行任何更改。不过，如果你是唯一一个在项目上工作的人，并且想要放弃所有最近的提交，回到之前的状态，你可以将项目重置到一个之前的提交。工作在`main`分支时，输入以下命令：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We first check the status to make sure we’re on the `main` branch ❶. When we
    look at the log, we see both commits ❷. We then issue the `git reset --hard` command
    with the first six characters of the reference ID of the commit we want to go
    back to permanently ❸. We check the status again and see we’re on the `main` branch
    with nothing to commit ❹. When we look at the log again, we see that we’re at
    the commit we wanted to start over from ❺.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查状态，确保我们在`main`分支❶。当我们查看日志时，看到两个提交❷。然后，我们使用`git reset --hard`命令，并输入想要永久回退的提交的参考ID前六个字符❸。我们再次检查状态，看到我们处于`main`分支且没有需要提交的内容❹。当我们再次查看日志时，发现我们已经回到想要重新开始的提交❺。
- en: Deleting the Repository
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除仓库
- en: Sometimes you’ll mess up your repository’s history and won’t know how to recover
    it. If this happens, first consider asking for help using the approaches discussed
    in Appendix C. If you can’t fix it and you’re working on a solo project, you can
    continue working with the files but get rid of the project’s history by deleting
    the *.git* directory. This won’t affect the current state of any of the files,
    but it will delete all commits, so you won’t be able to check out any other states
    of the project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能会弄乱仓库的历史，甚至不知道如何恢复。如果发生这种情况，首先可以考虑按照附录C中讨论的方法寻求帮助。如果你无法修复它，而且是在做一个独立项目，你可以继续使用文件，但通过删除*.git*目录来摆脱项目的历史。这不会影响任何文件的当前状态，但会删除所有提交，因此你将无法检出项目的其他状态。
- en: 'To do this, either open a file browser and delete the *.git* repository or
    delete it from the command line. Afterward, you’ll need to start over with a fresh
    repository to start tracking your changes again. Here’s what this entire process
    looks like in a terminal session:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，你可以打开文件浏览器并删除*.git*仓库，或者通过命令行删除它。之后，你需要从一个新的仓库开始，重新开始跟踪更改。下面是在终端会话中执行此操作的过程：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We first check the status and see that we have a clean working directory ❶.
    Then we use the command `rm -rf .git/` to delete the *.git* directory (`del .git`
    on Windows) ❷. When we check the status after deleting the *.git* folder, we’re
    told that this is not a Git repository ❸. All the information Git uses to track
    a repository is stored in the *.git* folder, so removing it deletes the entire
    repository.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查状态，发现工作目录是干净的 ❶。然后我们使用命令`rm -rf .git/`删除*.git*目录（在Windows上使用`del .git`）
    ❷。删除*.git*文件夹后检查状态，系统提示这不是一个Git仓库 ❸。Git用来跟踪仓库的所有信息都存储在*.git*文件夹中，因此删除它会删除整个仓库。
- en: We’re then free to use `git init` to start a fresh repository ❹. Checking the
    status shows that we’re back at the initial stage, awaiting the first commit ❺.
    We add the files and make the first commit ❻. Checking the status now shows us
    that we’re on the new `main` branch with nothing to commit ❼.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们可以使用`git init`来初始化一个新的仓库 ❹。检查状态显示我们回到了初始阶段，等待第一次提交 ❺。我们添加文件并进行第一次提交 ❻。现在检查状态时显示我们处于新的`main`分支，且没有需要提交的内容
    ❼。
- en: Using version control takes a bit of practice, but once you start using it,
    you’ll never want to work without it again.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用版本控制需要一些练习，但一旦开始使用，你就再也不想没有它了。
