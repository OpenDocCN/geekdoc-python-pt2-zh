["```py\n6\n\n20\n\n50\n\n4\n\n19\n\n15\n\n1\n```", "```py\n>>> [20, 50, 4, 19, 15, 1]\n\n[20, 50, 4, 19, 15, 1]\n```", "```py\n>>> ['one', 'two', 'hello']\n\n['one', 'two', 'hello']\n```", "```py\n>>> ['hello', 50, 365.25]\n\n['hello', 50, 365.25]\n```", "```py\n>>> [1, 2, 3] + [4, 5, 6]\n\n[1, 2, 3, 4, 5, 6]\n\n>>> [1, 2, 3] * 4\n\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n```", "```py\n>>> 'one' in ['one', 'two', 'hello']\n\nTrue\n\n>>> 'n' in ['one', 'two', 'three']\n\nFalse\n```", "```py\n>>> len(['one', 'two', 'hello'])\n\n3\n```", "```py\n>>> for value in [20, 50, 4, 19, 15, 1]:\n\n...     print(value)\n\n...\n\n20\n\n50\n\n4\n\n19\n\n15\n\n1\n```", "```py\n>>> lst1 = [1, 2, 3]\n\n>>> lst2 = [4, 5, 6]\n\n>>> lst1 + lst2\n\n[1, 2, 3, 4, 5, 6]\n```", "```py\n>>> lst1\n\n[1, 2, 3]\n\n>>> lst2\n\n[4, 5, 6]\n```", "```py\n>>> lst3 = lst1 + lst2\n\n>>> lst3\n\n[1, 2, 3, 4, 5, 6]\n```", "```py\n>>> list('abcde')\n\n['a', 'b', 'c', 'd', 'e']\n```", "```py\n>>> lst = [50, 30, 81, 40]\n\n>>> lst[1]\n\n30\n\n>>> lst[-2]\n\n81\n\n>>> lst[1:3]\n\n[30, 81]\n```", "```py\n>>> lst = ['one', 'two', 'hello']\n\n>>> lst[2]\n\n'hello'\n\n>>> lst[2][1]\n\n'e'\n```", "```py\nlst = [a list of numbers]\n\ntotal = 0\n\ni = 1\n\nwhile i <= len(lst):\n\n    total = total + i\n\n    i = i + 1\n```", "```py\n>>> s = 'hello'\n\n>>> s[0] = 'j'\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nTypeError: 'str' object does not support item assignment\n```", "```py\n>>> lst = ['h', 'e', 'l', 'l', 'o']\n\n>>> lst\n\n['h', 'e', 'l', 'l', 'o']\n\n >>> lst[0] = 'j'\n\n>>> lst\n\n['j', 'e', 'l', 'l', 'o']\n\n>>> lst[2] = 'x'\n\n>>> lst\n\n['j', 'e', 'x', 'l', 'o']\n```", "```py\n   >>> x = [1, 2, 3, 4, 5]\n\n❶ >>> y = x\n\n   >>> x[0] = 99\n\n   >>> x\n\n   [99, 2, 3, 4, 5]\n```", "```py\n>>> y\n\n[99, 2, 3, 4, 5]\n```", "```py\n>>> x = [1, 2, 3, 4, 5]\n\n>>> y = x[:]\n\n>>> x[0] = 99\n\n>>> x\n\n[99, 2, 3, 4, 5]\n\n>>> y\n\n[1, 2, 3, 4, 5]\n```", "```py\nlst = ['abc', 'def', 'ghi']\n\nlst[1] = 'wxyz'\n\nprint(len(lst))\n```", "```py\n>>> dir('')\n\n['__add__', '__class__', '__contains__', '__delattr__',\n\n<more stuff with underscores>\n\n'capitalize', 'casefold', 'center', 'count', 'encode',\n\n'endswith', 'expandtabs', 'find', 'format',\n\n'format_map', 'index', 'isalnum', 'isalpha', 'isascii',\n\n'isdecimal', 'isdigit', 'isidentifier', 'islower',\n\n'isnumeric', 'isprintable', 'isspace', 'istitle',\n\n'isupper', 'join', 'ljust', 'lower', 'lstrip',\n\n'maketrans', 'partition', 'replace', 'rfind', 'rindex',\n\n'rjust', 'rpartition', 'rsplit', 'rstrip', 'split',\n\n'splitlines', 'startswith', 'strip', 'swapcase', 'title',\n\n'translate', 'upper', 'zfill']\n```", "```py\n>>> help(''.count)\n\nHelp on built-in function count:\n\ncount(...) method of builtins.str instance\n\n  ❶ S.count(sub[, start[, end]]) -> int\n\n     Return the number of non-overlapping occurrences of\n\n     substring sub in string S[start:end].  Optional\n\n     arguments start and end are interpreted as in\n\n     slice notation.\n```", "```py\n>>> help(''.center)\n\nHelp on built-in function center:\n\ncenter(width, fillchar=' ', /) method of builtins.str instance\n\n    Return a centered string of length width.\n\n    Padding is done using the specified fill character\n\n    (default is a space).\n```", "```py\n'cave'.center(8, 'x')\n```", "```py\n20 50 4 19 15 1\n```", "```py\n1 4 15 19 20 50\n```", "```py\n>>> positions = []\n\n>>> positions.append(20)\n\n>>> positions\n\n[20]\n\n>>> positions.append(50)\n\n>>> positions\n\n[20, 50]\n\n>>> positions.append(4)\n\n>>> positions\n\n[20, 50, 4]\n```", "```py\n>>> positions\n\n[20, 50, 4]\n\n>>> positions = positions.append(19)\n\n>>> positions\n```", "```py\n>>> print(positions)\n\nNone\n```", "```py\n>>> lst1 = [1, 2, 3]\n\n>>> lst2 = [4, 5, 6]\n\n>>> lst1.extend(lst2)\n\n>>> lst1\n\n[1, 2, 3, 4, 5, 6]\n\n>>> lst2\n\n[4, 5, 6]\n```", "```py\n>>> lst = [10, 20, 30, 40]\n\n>>> lst.insert(1, 99)\n\n>>> lst\n\n[10, 99, 20, 30, 40]\n```", "```py\n>>> positions = [20, 50, 4, 19, 15, 1]\n\n>>> positions.sort()\n\n>>> positions\n\n[1, 4, 15, 19, 20, 50]\n```", "```py\n>>> positions.sort(reverse=True)\n\n>>> positions\n\n[50, 20, 19, 15, 4, 1]\n```", "```py\n>>> lst = [50, 30, 81, 40]\n\n>>> lst.pop()\n\n40\n```", "```py\n>>> lst.pop(0)\n\n50\n```", "```py\n>>> lst\n\n[30, 81]\n\n>>> value = lst.pop()\n\n>>> value\n\n81\n\n>>> lst\n\n[30]\n```", "```py\n>>> lst = [50, 30, 81, 40, 50]\n\n>>> lst.remove(50)\n\n>>> lst\n\n[30, 81, 40, 50]\n\n>>> lst.remove(50)\n\n>>> lst\n\n[30, 81, 40]\n\n>>> lst.remove(50)\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nValueError: list.remove(x): x not in list\n```", "```py\nlst = [2, 4, 6, 8]\n\nlst.remove(4)\n\nlst.pop(2)\n```", "```py\n>>> positions = [1, 4, 15, 19, 20, 50]\n\n>>> positions\n\n[1, 4, 15, 19, 20, 50]\n```", "```py\n>>> left = (positions[1] - positions[0]) / 2\n\n>>> right = (positions[2] - positions[1]) / 2\n\n>>> min_size = left + right\n\n>>> min_size\n\n7.0\n```", "```py\n   n = int(input())\n\n❶ positions = []\n\n❷ for i in range(n):\n\n    ❸ positions.append(int(input()))\n\n❹ positions.sort()\n\n❺ left = (positions[1] - positions[0]) / 2\n\n   right = (positions[2] - positions[1]) / 2\n\n   min_size = left + right\n\n❻ for i in range(2, n - 1):\n\n       left = (positions[i] - positions[i - 1]) / 2\n\n       right = (positions[i + 1] - positions[i]) / 2\n\n       size = left + right\n\n    ❼ if size < min_size:\n\n           min_size = size\n\n   print(min_size)\n```", "```py\n    position = input()\n\n    position = int(position)\n\n    positions.append(position)\n```", "```py\n   n = int(input())\n\n   positions = []\n\n   for i in range(n):\n\n       positions.append(int(input()))\n\n   positions.sort()\n\n   min_size = 1000000000.0\n\n❶ for i in range(1, n - 1):\n\n       left = (positions[i] - positions[i - 1]) / 2\n\n       right = (positions[i + 1] - positions[i]) / 2\n\n       size = left + right\n\n       if size < min_size:\n\n           min_size = size\n\n   print(min_size)\n```", "```py\n>>> min('qwerty')\n\n'e'\n\n>>> min([15.5, 7.0, 2.5, 7.5])\n\n2.5\n```", "```py\nn = int(input())\n\npositions = []\n\nfor i in range(n):\n\n    positions.append(int(input()))\n\npositions.sort()\n\nsizes = []\n\nfor i in range(1, n - 1):\n\n    left = (positions[i] - positions[i - 1]) / 2\n\n    right = (positions[i + 1] - positions[i]) / 2\n\n    size = left + right\n\n    sizes.append(size)\n\nmin_size = min(sizes)\n\nprint(min_size)\n```", "```py\n0.2 0.08 0.4 0.32\n```", "```py\n>>> s = '0.2 0.08 0.4 0.32'\n\n>>> s.split()\n\n['0.2', '0.08', '0.4', '0.32']\n```", "```py\n>>> proportions = s.split()\n\n>>> proportions\n\n['0.2', '0.08', '0.4', '0.32']\n\n>>> proportions[1]\n\n'0.08'\n\n>>> proportions[2]\n\n'0.4'\n```", "```py\n>>> info = 'Toronto,Ontario,Canada'\n\n>>> info.split(',')\n\n['Toronto', 'Ontario', 'Canada']\n```", "```py\n>>> lst = ['Toronto', 'Ontario', 'Canada']\n\n>>> ','.join(lst)\n\n 'Toronto,Ontario,Canada'\n\n>>> '**'.join(lst)\n\n'Toronto**Ontario**Canada'\n```", "```py\n>>> '*'.join('abcd')\n\n'a*b*c*d'\n```", "```py\n>>> s = '0.2 0.08 0.4 0.32'\n\n>>> proportions = s.split()\n\n>>> proportions\n\n['0.2', '0.08', '0.4', '0.32']\n```", "```py\n>>> float('45.6')\n\n45.6\n```", "```py\n>>> for value in proportions:\n\n...     value = float(value)\n```", "```py\n>>> proportions\n\n['0.2', '0.08', '0.4', '0.32']\n```", "```py\n>>> for value in proportions:\n\n...     value = float(value)\n\n...     type(value)\n\n...\n\n<class 'float'>\n\n<class 'float'>\n\n<class 'float'>\n\n<class 'float'>\n```", "```py\n>>> proportions\n\n['0.2', '0.08', '0.4', '0.32']\n\n>>> for i in range(len(proportions)):\n\n...     proportions[i] = float(proportions[i])\n\n...\n\n>>> proportions\n\n[0.2, 0.08, 0.4, 0.32]\n```", "```py\n504\n\n0.2 0.08 0.4 0.32\n\n125\n```", "```py\n❶ YEAR_COSTS = [12, 10, 7, 5]\n\n❷ for dataset in range(10):\n\n       trip_cost = int(input())\n\n    ❸ proportions = input().split()\n\n       num_students = int(input())\n\n    ❹ for i in range(len(proportions)):\n\n           proportions[i] = float(proportions[i])\n\n    ❺ students_per_year = []\n\n       for proportion in proportions:\n\n        ❻ students = int(num_students * proportion)\n\n           students_per_year.append(students)\n\n       total_raised = 0\n\n ❼ for i in range(len(students_per_year)):\n\n           total_raised = total_raised + students_per_year[i] * YEAR_COSTS[i]\n\n    ❽ if total_raised / 2 < trip_cost:\n\n           print('YES')\n\n       else:\n\n           print('NO')\n```", "```py\n[25, 10, 50, 40]\n```", "```py\n[12, 10, 7, 5]\n```", "```py\n50\n\n0.7 0.1 0.1 0.1\n\n9\n```", "```py\n>>> students_per_year = [6, 0, 0, 0]\n\n>>> sum(students_per_year)\n\n6\n\n>>> students_per_year = [25, 10, 50, 40]\n\n>>> sum(students_per_year)\n\n125\n```", "```py\n>>> students_per_year = [6, 0, 0, 0]\n\n>>> max(students_per_year)\n\n6\n\n>>> students_per_year = [25, 10, 50, 40]\n\n>>> max(students_per_year)\n\n50\n```", "```py\n>>> students_per_year = [6, 0, 0, 0]\n\n>>> students_per_year.index(6)\n\n0\n\n>>> students_per_year.index(0)\n\n1\n\n>>> students_per_year.index(50)\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nValueError: 50 is not in list\n```", "```py\nYEAR_COSTS = [12, 10, 7, 5]\n\nfor dataset in range(10):\n\n    trip_cost = int(input())\n\n    proportions = input().split()\n\n    num_students = int(input())\n\n    for i in range(len(proportions)):\n\n        proportions[i] = float(proportions[i])\n\n    students_per_year = []\n\n    for proportion in proportions:\n\n        students = int(num_students * proportion)\n\n        students_per_year.append(students)\n\n ❶ counted = sum(students_per_year)\n\n    uncounted = num_students - counted\n\n    most = max(students_per_year)\n\n    where = students_per_year.index(most)\n\n ❷ students_per_year[where] = students_per_year[where] + uncounted\n\n    total_raised = 0\n\n    for i in range(len(students_per_year)):\n\n        total_raised = total_raised + students_per_year[i] * YEAR_COSTS[i]\n\n    if total_raised / 2 < trip_cost:\n\n        print('YES')\n\n    else:\n\n        print('NO')\n```", "```py\n6 4\n\n1 13 2 1 1 8\n\n2 12 10 5 11 4\n\n39 6 13 52 3 3\n\n15 8 6 2 7 14\n```", "```py\n>>> grid = [[ 1, 13,  2,  1,  1,  8],\n\n...         [ 2, 12, 10,  5, 11,  4],\n\n...         [39,  6, 13, 52,  3,  3],\n\n...         [15,  8,  6,  2,  7, 14]]\n```", "```py\n>>> grid[0]\n\n[1, 13, 2, 1, 1, 8]\n\n>>> grid[2]\n\n[39, 6, 13, 52, 3, 3]\n```", "```py\n>>> grid[1][2]\n\n10\n```", "```py\n   >>> column = []\n\n   >>> for i in range(len(grid)):\n\n❶ ...     column.append(grid[i][1])\n\n   ...\n\n   >>> column\n\n   [13, 12, 6, 8]\n```", "```py\n>>> sum(grid[0])\n\n26\n```", "```py\n>>> total = 0\n\n>>> for value in grid[0]:\n\n...     total = total + value\n\n ...\n\n>>> total\n\n26\n```", "```py\n>>> total = 0\n\n>>> for i in range(len(grid)):\n\n...     total = total + grid[i][1]\n\n...\n\n>>> total\n\n39\n```", "```py\nlst = [[1, 1],\n\n       [2, 3, 4]]\n\nx = 0\n\nfor i in range(len(lst)):\n\n    for j in range(len(lst[0])):\n\n        x = x + lst[i][j]\n\nprint(x)\n```", "```py\nlst = [[5, 10], [15, 20]]\n\nx = lst[0]\n\nx[0] = 99\n\nprint(lst)\n\nlst = [[5, 10], [15, 20]]\n\ny = lst[0]\n\ny = y + [99]\n\nprint(lst)\n```", "```py\nfor dataset in range(10):\n\n ❶ lst = input().split()\n\n    franchisees = int(lst[0])\n\n    days = int(lst[1])\n\n    grid = []\n\n ❷ for i in range(days):\n\n        row = input().split()\n\n     ❸ for j in range(franchisees):\n\n            row[j] = int(row[j])\n\n     ❹ grid.append(row)\n\n    bonuses = 0\n\n ❺ for row in grid:\n\n     ❻ total = sum(row)\n\n        if total % 13 == 0:\n\n            bonuses = bonuses + total // 13\n\n ❼ for col_index in range(franchisees):\n\n        total = 0\n\n     ❽ for row_index in range(days):\n\n            total = total + grid[row_index][col_index]\n\n        if total % 13 == 0:\n\n            bonuses = bonuses + total // 13\n\n    print(bonuses)\n```"]