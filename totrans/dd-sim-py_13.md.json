["```py\nimport time\nsleepy = ['no pause', time.sleep(1), time.sleep(2)]\n# ...three second pause...\nprint(sleepy[0])  # prints 'no pause'\n```", "```py\nfrom itertools import product\nfrom string import ascii_uppercase as alphabet\n\ndef gen_license_plates():\n    for letters in ❶ product(alphabet, repeat=3):\n        letters = ❷ \"\".join(letters)\n        if letters == 'GOV':\n            continue\n\n      ❸ for numbers in range(1000):\n            yield f'{letters} {numbers:03}'\n```", "```py\nlicense_plates = gen_license_plates()\n```", "```py\nfor plate in license_plates:\n    print(plate)\n```", "```py\nAAA 000\nAAA 001\nAAA 002\n`# --snip--`\nZZZ 997\nZZZ 998\nZZZ 999\n```", "```py\nregistrations = {}\n\ndef new_registration(owner):\n    if owner not in registrations:\n        plate = ❶ next(license_plates)\n        registrations[owner] = plate\n        return plate\n    return None\n```", "```py\n# Fast-forward through several results for testing purposes.\nfor _ in range(4441888):\n    next(license_plates)\n```", "```py\nname = \"Jason C. McDonald\"\nmy_plate = new_registration(name)\nprint(my_plate)\nprint(registrations[name])\n```", "```py\nGOW 888\nGOW 888\n```", "```py\nfrom random import choice\n\ncolors = ['red', 'green', 'blue', 'silver', 'white', 'black']\nvehicles = ['car', 'truck', 'semi', 'motorcycle', None]\n```", "```py\nclass Traffic:\n    def __iter__(self):\n        return self\n```", "```py\n def __next__(self):\n        vehicle = choice(vehicles)\n\n        if vehicle is None:\n            raise StopIteration\n\n        color = choice(colors)\n\n        return f\"{color} {vehicle}\"\n```", "```py\n# merge into traffic\ncount = 0\nfor count, vehicle in enumerate(Traffic(), start=1):\n    print(f\"Wait for {vehicle}...\")\n\nprint(f\"Merged after {count} vehicles!\")\n```", "```py\nWait for green car...\nWait for red truck...\nWait for silver car...\nMerged after 3 vehicles!\n```", "```py\nfrom random import choice\n\ncolors = ['red', 'green', 'blue', 'silver', 'white', 'black']\nvehicles = ['car', 'truck', 'semi', 'motorcycle', None]\n```", "```py\ndef traffic():\n    while True:\n        vehicle = choice(vehicles)\n\n        if vehicle is None:\n            return\n\n        color = choice(colors)\n        yield f\"{color} {vehicle}\"\n```", "```py\n# merge into traffic\ncount = 0\nfor count, vehicle in enumerate(**traffic()**, start=1):\n    print(f\"Wait for {vehicle}...\")\n\nprint(f\"Merged after {count} vehicles!\")\n```", "```py\nWait for white truck...\nWait for silver semi...\nMerged after 2 vehicles!\n```", "```py\nfrom random import choice\n\ncolors = ['red', 'green', 'blue', 'silver', 'white', 'black']\nvehicles = ['car', 'truck', 'semi', 'motorcycle', None]\n```", "```py\ndef traffic():\n    while True:\n        vehicle = choice(vehicles)\n        color = choice(colors)\n        yield f\"{color} {vehicle}\"\n```", "```py\ndef car_wash(traffic, limit):\n    count = 0\n    for vehicle in traffic:\n        print(f\"Washing {vehicle}.\")\n        count += 1\n        if count >= limit:\n            traffic.close()\n```", "```py\ncar_wash(traffic(), 10)\n```", "```py\n**queue = traffic()**\ncar_wash(**queue**, 10)\n```", "```py\n**next(queue)**  # raises StopIteration, since car_wash called close()\n```", "```py\nWashing red motorcycle.\nWashing red semi.\n`# --snip--`\nWashing green semi.\nWashing red truck.\n```", "```py\ndef traffic():\n    while True:\n        vehicle = choice(vehicles)\n        color = choice(colors)\n        **try:**\n            yield f\"{color} {vehicle}\"\n        **except GeneratorExit:**\n            **print(\"No more vehicles.\")**\n            **raise**\n```", "```py\nWashing green semi.\nWashing black truck.\n`# --snip--`\nWashing blue motorcycle.\nWashing silver semi.\nNo more vehicles.\n```", "```py\nfrom random import choice\ncolors = ['red', 'green', 'blue', 'silver', 'white', 'black']\nvehicles = ['car', 'truck', 'semi', 'motorcycle', None]\n\ndef traffic():\n    while True:\n        vehicle = choice(vehicles)\n        color = choice(colors)\n try:\n            yield f\"{color} {vehicle}\"\n      ❶ except ValueError:\n          ❷ print(f\"Skipping {color} {vehicle}...\")\n          ❸ continue\n        except GeneratorExit:\n            print(\"No more vehicles.\")\n            raise\n```", "```py\ndef wash_vehicle(vehicle):\n    if 'semi' in vehicle:\n        raise ValueError(\"Cannot wash vehicle.\")\n    print(f\"Washing {vehicle}.\")\n```", "```py\ndef car_wash(traffic, limit):\n    count = 0\n    for vehicle in traffic:\n        try:\n            wash_vehicle(vehicle)\n        except Exception as e:\n          ❶ traffic.throw(e)\n        else:\n            count += 1\n        if count >= limit:\n            traffic.close()\n```", "```py\nqueue = traffic()\ncar_wash(queue, 10)\n```", "```py\nWashing white car.\nWashing red motorcycle.\nSkipping green semi...\nWashing red truck.\nWashing green car.\nWashing blue truck.\nWashing blue truck.\nSkipping white semi...\nWashing green truck.\nWashing green motorcycle.\nWashing black motorcycle.\nWashing red truck.\nNo more vehicles.\n```", "```py\nfrom random import choice, randint\n\ncolors = ['red', 'green', 'blue', 'silver', 'white', 'black']\nvehicles = ['car', 'truck', 'semi', 'motorcycle', None]\n```", "```py\ndef biker_gang():\n    for _ in range(randint(2, 10)):\n        color = ❶ choice(colors)\n      ❷ yield f\"{color} motorcycle\"\n```", "```py\ndef traffic():\n    while True:\n        **if randint(1, 50) == 50:**\n❶ **yield from biker_gang()**\n❷ **continue**\n\n        vehicle = choice(vehicles)\n        color = choice(colors)\n        yield f\"{color} {vehicle}\"\n```", "```py\ncount = 0\nfor count, vehicle in enumerate(traffic()):\n    print(f\"{vehicle}\")\n    if count == 100:\n        break\n```", "```py\nblack motorcycle\ngreen truck\n`# --snip--`\nred car\nblack motorcycle\nblack motorcycle\nblue motorcycle\nwhite motorcycle\ngreen motorcycle\nblue motorcycle\nwhite motorcycle\nsilver semi\n`# --snip--`\nblue truck\nsilver truck\n```", "```py\ndef license_plates():\n    for num in range(1000):\n        yield f'ABC {num:03}'\n```", "```py\nfor plate in license_plates():\n    print(plate)\n```", "```py\nABC 000\nABC 001\nABC 002\n`# --snip--`\nABC 997\nABC 998\nABC 999\n```", "```py\n**license_plates = (**\nf'ABC {number:03}' \n    for number in range(1000)\n**)**\n```", "```py\nfor plate in license_plates: \n    print(plate)\n```", "```py\nimport time\nsleepy = **(time.sleep(t) for t in range(0, 3))**\n```", "```py\nprint(\"Calling...\")\nnext(sleepy)\nprint(\"Done!\")\n```", "```py\nimport time\nsleepy = **(time.sleep(t) for t in [1, 2, 3, 4, 5])**\n```", "```py\n**from itertools import product**\n**from string import ascii_uppercase as alphabet**\n\nlicense_plates = (\n    f'**{** ❶ **\"\".join(letters)}** {number:03}'\n    **for letters in** ❷ **product(alphabet, repeat=3)**\n  ❸ for number in range(1000)\n)\n```", "```py\nregistrations = {}\n\ndef new_registration(owner):\n    if owner not in registrations:\n        plate = next(license_plates)\n        registrations[owner] = plate\n        return True\n    return False\n\n# Fast-forward through several results for testing purposes.\nfor _ in range(4441888):\n    next(license_plates)\n\nname = \"Jason C. McDonald\"\nmy_plate = new_registration(name)\nprint(registrations[name])\n```", "```py\nGOV 888\n```", "```py\nfrom itertools import product\nfrom string import ascii_uppercase as alphabet\n\nlicense_plates = (\n    f'{\"\".join(letters)} {numbers:03}'\n    for letters in product(alphabet, repeat=3)\n    **if letters != ('G', 'O', 'V')**\n    for numbers in range(1000)\n)\n```", "```py\ndef license_plate_generator():\n    for letters in product(alphabet, repeat=3):\n        if letters != ('G', 'O', 'V'):\n            for numbers in range(1000):\n                yield f'{\"\".join(letters)} {numbers:03}'\n```", "```py\nGOW 888\n```", "```py\ndivis_by_three = (n for n in range(100) if n % 3 == 0)\n```", "```py\ndivis_by_three = (n for n in range(100) if n % 3 == 0 **else \"redacted\"**)\n```", "```py\nSyntaxError: invalid syntax\n```", "```py\ndef divis_by_three():\n    for n in range(100):\n        if n % 3 == 0:\n        else:  # SyntaxError!\n            \"redacted\"\n            yield n\n```", "```py\ndef divis_by_three():\n    for n in range(100):\n        yield n if n % 3 == 0 else \"redacted\"\n```", "```py\ndivis_by_three = (n **if n % 3 == 0 else \"redacted\"** for n in range(100))\n```", "```py\ndivis_by_three = (n if n % 3 == 0 for n in range(100))\n```", "```py\nSyntaxError: invalid syntax\n```", "```py\ndef divis_by_three():\n    for n in range(100):\n        yield n if n % 3 == 0  # syntax error\n```", "```py\ndef divis_by_three():\n    for n in range(100):\n        if n % 3 == 0:\n            yield n\n```", "```py\ndivis_by_three = (n for n in range(100) if n % 3 == 0)\n```", "```py\nfrom itertools import product\nfrom string import ascii_uppercase as alphabet\n\nlicense_plates = (\n    **f'**❶ **{**letters**}** {numbers:03}'\n    for letters in **(**\n        **\"\".join(chars)**\n        **for chars in** product(alphabet, repeat=3)\n    **)**\n    if letters != 'GOV'\n    for numbers in range(1000)\n)\n```", "```py\norders = ['cold brew', 'lemongrass tea', 'chai latte', 'medium drip',\n          'french press', 'mocha cappuccino', 'pumpkin spice latte',\n          'double-shot espresso', 'dark roast drip', 'americano']\n\ndrip_orders = [ ❶ order ❷ for order in orders ❸ if 'drip' in order]\n\nprint(f'There are {len(drip_orders)} orders for drip coffee.')\n```", "```py\nodd_remainders = {100 % divisor for divisor in range(1, 100, 2)}\nprint(odd_remainders)\n```", "```py\n{0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21,\n22, 23, 25, 26, 27, 29, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49}\n```", "```py\nsquares = {n : n ** 2 for n in range(1,101)}\nprint(squares[2])\nprint(squares[7])\nprint(squares[11])\n```", "```py\n4\n49\n121\n```", "```py\nprimary = [\n    c\n    for m in status['members']\n    if m['stateStr'] == 'PRIMARY'\n    for c in rs_config['members']\n    if m['name'] == c['host']\n    ]\n\nsecondary = [\n    c\n    for m in status['members']\n    if m['stateStr'] == 'SECONDARY'\n    for c in rs_config['members']\n    if m['name'] == c['host']\n    ]\n\nhidden = [\n    m\n    for m in rs_config['members']\n    if m['hidden']\n    ]\n```", "```py\ncropids = [self.roidb[inds[i]]['chip_order'][\n    self.crop_idx[inds[i]] % len(self.roidb[inds[i]]['chip_order'])]\n for i in range(cur_from, cur_to)\n]\n```", "```py\nsome_list = getTheDataFromWhereever()\n[API.download().process(foo) for foo in some_list]\n```", "```py\nsome_list = getTheDataFromWhereever()\nfor foo in some_list:\n    API.download().process(foo)\n```", "```py\nfrom random import choice\n\ndef color_counter(color):\n    matches = 0\n    while True:\n      ❶ vehicle = yield\n        if color in vehicle:\n            matches += 1\n        print(f\"{matches} so far.\")\n```", "```py\ncolors = ['red', 'green', 'blue', 'silver', 'white', 'black']\nvehicles = ['car', 'truck', 'semi', 'motorcycle']\n\ndef traffic():\n    while True:\n        vehicle = choice(vehicles)\n        color = choice(colors)\n        yield f\"{color} {vehicle}\"\n```", "```py\ncounter = color_counter('red')\n```", "```py\ncounter.send(None)  # prime the coroutine\n```", "```py\nnext(counter)  # prime the coroutine\n```", "```py\nfor count, vehicle in enumerate(traffic(), start=1):\n    if count < 100:\n        counter.send(vehicle)\n    else:\n        counter.close()\n        break\n```", "```py\n0 so far.\n0 so far.\n1 so far.\n`# --snip--`\n19 so far.\n19 so far.\n19 so far.\n```", "```py\ndef color_counter(color):\n    matches = 0\n    while True:\n        vehicle = yield **matches**\n        if color in vehicle:\n            matches += 1\n```", "```py\n**matches = 0**\nfor count, vehicle in enumerate(traffic(), start=1):\n    if count < 100:\n        **matches =** counter.send(vehicle)\n    else:\n        counter.close()\n        break\n\n**print(f\"There were {matches} matches.\")**\n```", "```py\nThere were 18 matches.\n```", "```py\ndef coroutine():\n    ret = None\n    while True:\n        print(\"...\")\n      ❶ recv = ❷ yield ret\n      ❸ print(f\"recv: {recv}\")\n      ❹ ret = recv\n\nco = coroutine()\ncurrent = ❺ co.send(None)\n❻ print(f\"current (ret): {current}\")\n\nfor i in range(10):\n  ❼ current = ❽ co.send(i)\n  ❾ print(f\"current (ret): {current}\")\n\nco.close()\n```"]