- en: '**1**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**STARTING YOUR PROJECT**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始你的项目**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In this first chapter, we’ll look at a few aspects of starting a project and
    what you should think about before you begin, such as which Python version to
    use, how to structure your modules, how to effectively number software versions,
    and how to ensure best coding practices with automatic error checking.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论开始一个项目时的几个方面，以及在开始之前你应该考虑的内容，例如选择使用哪个 Python 版本、如何构建模块、如何有效地编号软件版本，以及如何通过自动错误检查确保最佳编码实践。
- en: '**Versions of Python**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Python 的版本**'
- en: Before beginning a project, you’ll need to decide what version(s) of Python
    it will support. This is not as simple a decision as it may seem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始一个项目之前，你需要决定它将支持哪些版本的 Python。这并不是一个看似简单的决定。
- en: It’s no secret that Python supports several versions at the same time. Each
    minor version of the interpreter gets bug-fix support for 18 months and security
    support for 5 years. For example, Python 3.7, released on June 27, 2018, will
    be supported until Python 3.8 is released, which should be around October 2019\.
    Around December 2019, a last bug-fix release of Python 3.7 will occur, and everyone
    will be expected to switch to Python 3.8\. Each new version of Python introduces
    new features and deprecates old ones. [Figure 1-1](ch01.xhtml#ch1fig1) illustrates
    this timeline.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 同时支持多个版本这并不是什么秘密。每个小版本的解释器都会提供 18 个月的错误修复支持和 5 年的安全支持。例如，Python 3.7 于
    2018 年 6 月 27 日发布，将一直支持到 Python 3.8 发布，预计在 2019 年 10 月发布。大约在 2019 年 12 月，将会发布
    Python 3.7 的最后一个错误修复版本，之后大家都需要切换到 Python 3.8。每个新版本的 Python 都会引入新功能，并淘汰旧功能。[图 1-1](ch01.xhtml#ch1fig1)展示了这一时间表。
- en: '![image](../images/f01-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-01.jpg)'
- en: '*Figure 1-1: Python release timeline*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：Python 发布时间表*'
- en: On top of that, we should take into consideration the Python 2 versus Python
    3 problem. People working with (very) old platforms may still require Python 2
    support because Python 3 has not been made available on those platforms, but the
    rule of thumb is to forget Python 2 if you can.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要考虑 Python 2 和 Python 3 的问题。使用（非常）旧平台的人可能仍然需要 Python 2 的支持，因为这些平台上没有提供
    Python 3，但基本原则是，如果可以的话，就不要考虑 Python 2。
- en: 'Here is a quick way to figure out which version you need:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个快速方法来判断你需要哪个版本：
- en: Versions 2.6 and older are now obsolete, so I do not recommend you worry about
    supporting them at all. If you do intend to support these older versions for whatever
    reason, be warned that you’ll have a hard time ensuring that your program supports
    Python 3.x as well. Having said that, you might still run into Python 2.6 on some
    older systems—if that’s the case, sorry!
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 2.6 及更早版本现在已经过时，因此我不建议你为这些版本提供支持。如果你出于某些原因确实打算支持这些旧版本，请注意，确保你的程序也支持 Python
    3.x 将会非常困难。话虽如此，你仍然可能会在某些老旧系统上遇到 Python 2.6——如果是这样，那就抱歉了！
- en: Version 2.7 is and will remain the last version of Python 2.x. Every system
    is basically running or able to run Python 3 one way or the other nowadays, so
    unless you’re doing archeology, you shouldn’t need to worry about supporting Python
    2.7 in new programs. Python 2.7 will cease to be supported after the year 2020,
    so the last thing you want to do is build a new software based on it.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 2.7 是 Python 2.x 的最后一个版本。现在，每个系统基本上都能够运行或者已经运行 Python 3，所以除非你是在做考古学工作，否则不需要担心在新程序中支持
    Python 2.7。Python 2.7 将在 2020 年后停止支持，因此最后你想做的事情就是基于它构建新软件。
- en: Version 3.7 is the most recent version of the Python 3 branch as of this writing,
    and that’s the one that you should target. However, if your operating system ships
    version 3.6 (most operating systems, except Windows, ship with 3.6 or later),
    make sure your application will also work with 3.6.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至目前，Python 3 分支的最新版本是 3.7，这也是你应该目标的版本。然而，如果你的操作系统出厂时自带版本是 3.6（大多数操作系统，除了 Windows，都自带
    3.6 或更高版本），请确保你的应用程序也能兼容 3.6。
- en: Techniques for writing programs that support both Python 2.7 and 3.x will be
    discussed in [Chapter 13](ch13.xhtml#ch13).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 Python 2.7 和 3.x 的程序编写技巧将在[第13章](ch13.xhtml#ch13)中讨论。
- en: Finally, note that this book has been written with Python 3 in mind.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，本书是针对 Python 3 编写的。
- en: '**Laying Out Your Project**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目布局**'
- en: Starting a new project is always a bit of a puzzle. You can’t be sure how your
    project will be structured, so you might not know how to organize your files.
    However, once you have a proper understanding of best practices, you’ll understand
    which basic structure to start with. Here I’ll give some tips on dos and don’ts
    for laying out your project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新项目总是有点像拼图。你不能确定项目的具体结构，所以你可能不知道该如何组织文件。然而，一旦你对最佳实践有了正确的理解，你就会知道应该从哪种基本结构开始。在这里，我将提供一些关于如何布局项目的建议，包含一些应该做和不应该做的事项。
- en: '***What to Do***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***应该做的事情***'
- en: 'First, consider your project structure, which should be fairly simple. Use
    packages and hierarchy wisely: a deep hierarchy can be a nightmare to navigate,
    while a flat hierarchy tends to become bloated.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，考虑你的项目结构，应该保持相对简单。明智地使用包和层级结构：过深的层级结构可能会变得难以导航，而扁平的层级结构则往往会变得臃肿。
- en: Then, avoid making the common mistake of storing unit tests outside the package
    directory. These tests should definitely be included in a subpackage of your software
    so that they aren’t automatically installed as a *tests* top-level module by `setuptools`
    (or some other packaging library) by accident. By placing them in a subpackage,
    you ensure they can be installed and eventually used by other packages so users
    can build their own unit tests.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，避免犯一个常见的错误，即将单元测试存储在包目录之外。这些测试应该被包含在软件的子包中，以确保它们不会被`setuptools`（或其他打包库）误自动安装为*tests*顶级模块。通过将它们放入子包中，你确保它们可以被安装并最终供其他包使用，从而让用户可以构建自己的单元测试。
- en: '[Figure 1-2](ch01.xhtml#ch1fig2) illustrates what a standard file hierarchy
    should look like.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-2](ch01.xhtml#ch1fig2)展示了标准的文件层次结构应该是什么样的。'
- en: '![image](../images/f01-02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-02.jpg)'
- en: '*Figure 1-2: Standard package directory*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-2：标准包目录*'
- en: The standard name for a Python installation script is *setup.py*. It comes with
    its companion *setup.cfg*, which should contain the installation script configuration
    details. When run, *setup.py* will install your package using the Python distribution
    utilities.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python安装脚本的标准名称是*setup.py*。它配套有*setup.cfg*，其中应包含安装脚本的配置细节。运行时，*setup.py*将使用Python的分发工具安装你的包。
- en: You can also provide important information to users in *README.rst* (or *README.txt*,
    or whatever filename suits your fancy). Finally, the *docs* directory should contain
    the package’s documentation in *reStructuredText* format, which will be consumed
    by Sphinx (see [Chapter 3](ch03.xhtml#ch03)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在*README.rst*（或*README.txt*，或任何你喜欢的文件名）中提供给用户的重要信息。最后，*docs*目录应包含包的文档，采用*reStructuredText*格式，这些文档将被Sphinx使用（见[第3章](ch03.xhtml#ch03)）。
- en: Packages will often have to provide extra data for the software to use, such
    as images, shell scripts, and so forth. Unfortunately, there’s no universally
    accepted standard for where these files should be stored, so you should just put
    them wherever makes the most sense for your project depending on their functions.
    For example, web application templates could go in a *templates* directory in
    your package root directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 包通常需要提供额外的数据供软件使用，例如图像、shell脚本等。不幸的是，没有一个被普遍接受的标准来确定这些文件应该存放在哪里，所以你应该根据文件的功能，将它们放在对你的项目最有意义的位置。例如，Web应用程序的模板可以放在包根目录中的*templates*目录下。
- en: 'The following top-level directories also frequently appear:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下顶级目录也经常出现：
- en: '*etc* for sample configuration files'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*etc* 用于示例配置文件'
- en: '*tools* for shell scripts or related tools'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tools* 用于 shell 脚本或相关工具'
- en: '*bin* for binary scripts you’ve written that will be installed by *setup.py*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*bin* 用于你编写的二进制脚本，这些脚本将通过*setup.py*进行安装'
- en: '***What Not to Do***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***不应该做的事情***'
- en: 'There is a particular design issue that I often encounter in project structures
    that have not been fully thought out: some developers will create files or modules
    based on the type of code they will store. For example, they might create *functions.py*
    or *exceptions.py* files. This is a *terrible* approach and doesn’t help any developer
    when navigating the code. When reading a codebase, the developer expects a functional
    area of a program to be confined in a particular file. The code organization doesn’t
    benefit from this approach, which forces readers to jump between files for no
    good reason.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常在没有充分考虑的项目结构中遇到一个特定的设计问题：一些开发者会根据他们将存储的代码类型创建文件或模块。例如，他们可能会创建*functions.py*或*exceptions.py*文件。这是一种*糟糕*的做法，在开发者浏览代码时没有任何帮助。当阅读代码库时，开发者期望程序的功能区块被限制在特定的文件中。这种代码组织方式并没有带来任何好处，反而迫使读者无缘无故地在多个文件之间跳转。
- en: Organize your code based on *features*, not on types.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*功能*而非类型来组织你的代码。
- en: It is also a bad idea to create a module directory that contains only an *__init__.py*
    file, because it’s unnecessary nesting. For example, you shouldn’t create a directory
    named *hooks* with a single file named *hooks/__init__.py* in it, where *hooks.py*
    would have been enough. If you create a directory, it should contain several other
    Python files that belong to the category the directory represents. Building a
    deep hierarchy unnecessarily is confusing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个仅包含*__init__.py*文件的模块目录也是一个坏主意，因为这会造成不必要的嵌套。例如，你不应该创建一个名为*hooks*的目录，里面只有一个名为*hooks/__init__.py*的文件，而实际上*hooks.py*就足够了。如果你创建一个目录，它应该包含属于该目录代表的类别的多个其他Python文件。不必要地构建深层次的层级结构会让人困惑。
- en: 'You should also be very careful about the code that you put in the *__init__.py*
    file. This file will be called and executed the first time that a module contained
    in the directory is loaded. Placing the wrong things in your *__init__.py* can
    have unwanted side effects. In fact, *__init__.py* files should be empty most
    of the time, unless you know what you’re doing. Don’t try to remove *__init__.py*
    files altogether though, or you won’t be able to import your Python module at
    all: Python requires an *__init__.py* file to be present for the directory to
    be considered a submodule.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该非常小心你放入*__init__.py*文件中的代码。这个文件将在第一次加载目录中包含的模块时被调用并执行。将错误的内容放入*__init__.py*文件中可能会产生不良的副作用。事实上，除非你知道自己在做什么，否则*__init__.py*文件通常应该是空的。不过，不要试图完全删除*__init__.py*文件，否则你将根本无法导入你的Python模块：Python要求目录中存在*__init__.py*文件才能将其视为子模块。
- en: '**Version Numbering**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**版本编号**'
- en: Software versions need to be stamped so users know which is the more recent
    version. For every project, users must be able to organize the timeline of the
    evolving code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 软件版本需要打上印记，以便用户知道哪个是更新的版本。对于每个项目，用户必须能够组织不断发展的代码时间线。
- en: There is an infinite number of ways to organize your version numbers. However,
    PEP 440 introduces a version format that every Python package, and ideally every
    application, should follow so that other programs and packages can easily and
    reliably identify which versions of your package they require.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 组织版本号的方式有无数种。然而，PEP 440引入了一种版本格式，每个Python包，理想情况下每个应用程序，都应该遵循该格式，以便其他程序和包可以轻松可靠地识别他们需要的包的版本。
- en: 'PEP 440 defines the following regular expression format for version numbering:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 440定义了以下用于版本编号的正则表达式格式：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This allows for standard numbering such as `1.2` or `1.2.3`. There are a few
    further details to note:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许使用标准编号，如`1.2`或`1.2.3`。还有一些细节需要注意：
- en: Version `1.2` is equivalent to `1.2.0`, `1.3.4` is equivalent to `1.3.4.0`,
    and so forth.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本`1.2`等同于`1.2.0`，`1.3.4`等同于`1.3.4.0`，依此类推。
- en: Versions matching `N[.N]+` are considered *final* releases.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与`N[.N]+`匹配的版本被认为是*最终*版本。
- en: Date-based versions such as `2013.06.22` are considered invalid. Automated tools
    designed to detect PEP 440–format version numbers will (or should) raise an error
    if they detect a version number greater than or equal to `1980`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于日期的版本号，如`2013.06.22`，被认为是无效的。旨在检测PEP 440格式版本号的自动化工具会（或者应该）在检测到版本号大于或等于`1980`时引发错误。
- en: 'Final components can also use the following format:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终组件也可以使用以下格式：
- en: '`N[.N]+aN` (for example, `1.2a1`) denotes an alpha release; this is a version
    that might be unstable and missing features.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`N[.N]+aN`（例如，`1.2a1`）表示一个alpha版本；这个版本可能不稳定并且缺少一些功能。'
- en: '`N[.N]+bN` (for example, `2.3.1b2`) denotes a beta release, a version that
    might be feature complete but still buggy.'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`N[.N]+bN`（例如，`2.3.1b2`）表示一个beta版本，一个可能功能完整但仍然存在bug的版本。'
- en: '`N[.N]+cN` or `N[.N]+rcN` (for example, `0.4rc1`) denotes a (release) candidate.
    This is a version that might be released as the final product unless significant
    bugs emerge. The `rc` and `c` suffixes have the same meaning, but if both are
    used, `rc` releases are considered newer than `c` releases.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`N[.N]+cN` 或 `N[.N]+rcN`（例如，`0.4rc1`）表示一个（发布）候选版本。这是一个可能作为最终产品发布的版本，除非出现重大bug。`rc`和`c`后缀有相同的含义，但如果两者都使用，`rc`版本被视为比`c`版本更新。'
- en: 'The following suffixes can also be used:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还可以使用以下后缀：
- en: The suffix *.postN* (for example, `1.4.post2`) indicates a post release. Post
    releases are typically used to address minor errors in the publication process,
    such as mistakes in release notes. You shouldn’t use the *.postN* suffix when
    releasing a bug-fix version; instead, increment the minor version number.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀*.postN*（例如，`1.4.post2`）表示一个发布后版本。发布后版本通常用于解决发布过程中的小错误，如发布说明中的错误。在发布修复版本时，不应使用*.postN*后缀；应当增加次版本号。
- en: 'The suffix*.devN* (for example, `2.3.4.dev3`) indicates a developmental release.
    It indicates a prerelease of the version that it qualifies: for example, *2.3.4.dev3*
    indicates the third developmental version of the *2.3.4* release, prior to any
    alpha, beta, candidate, or final release. This suffix is discouraged because it
    is harder for humans to parse.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀*.devN*（例如，`2.3.4.dev3`）表示开发版本。它表示一个预发布版本，该版本在正式的alpha、beta、候选版本或最终版本之前发布。例如，*2.3.4.dev3*表示*2.3.4*发布的第三个开发版本。此后缀不建议使用，因为它对人类解析起来较为困难。
- en: This scheme should be sufficient for most common use cases.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该方案应该足以应对大多数常见的使用场景。
- en: '**NOTE**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You might have heard of Semantic Versioning, which provides its own guidelines
    for version numbering. This specification partially overlaps with PEP 440, but
    unfortunately, they’re not entirely compatible. For example, Semantic Versioning’s
    recommendation for prerelease versioning uses a scheme such as `1.0.0-alpha+001`
    that is not compliant with PEP 440.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可能听说过语义化版本控制，它为版本编号提供了自己的指南。该规范部分与PEP 440重叠，但不完全兼容。例如，语义化版本控制推荐的预发布版本使用类似`1.0.0-alpha+001`的方案，这与PEP
    440不兼容。*'
- en: 'Many *distributed version control system (DVCS)* platforms, such as Git and
    Mercurial, are able to generate version numbers using an identifying hash (for
    Git, refer to `git describe`). Unfortunately, this system isn’t compatible with
    the scheme defined by PEP 440: for one thing, identifying hashes aren’t orderable.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 许多*分布式版本控制系统（DVCS）*平台，如Git和Mercurial，能够使用标识哈希生成版本号（对于Git，请参见`git describe`）。不幸的是，这种系统与PEP
    440定义的方案不兼容：其中一个问题是，标识哈希无法排序。
- en: '**Coding Style and Automated Checks**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编码风格与自动化检查**'
- en: 'Coding style is a touchy subject, but one we should talk about before we dive
    further into Python. Unlike many programming languages, Python uses *indentation*
    to define blocks. While this offers a simple solution to the age-old question
    “Where should I put my braces?” it introduces a new question: “How should I indent?”'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 编码风格是一个敏感话题，但在我们深入讨论Python之前，我们应该先谈谈它。与许多编程语言不同，Python使用*缩进*来定义代码块。虽然这为“我该把大括号放在哪里？”这个古老问题提供了简单的解决方案，但也带来了一个新问题：“我该如何缩进？”
- en: 'That was one of the first questions raised in the community, so the Python
    folks, in their vast wisdom, came up with the *PEP 8: Style Guide for Python Code*
    (*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '这是社区提出的第一个问题之一，因此Python的开发者们在他们深邃的智慧下，提出了*PEP 8: Python代码风格指南*（*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*）。'
- en: 'This document defines the standard style for writing Python code. The list
    of guidelines boils down to:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档定义了编写Python代码的标准风格。指南的核心内容如下：
- en: Use four spaces per indentation level.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个缩进级别使用四个空格。
- en: Limit all lines to a maximum of 79 characters.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制所有行的最大字符数为79个字符。
- en: Separate top-level function and class definitions with two blank lines.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶级函数和类定义之间应使用两个空行分隔。
- en: Encode files using ASCII or UTF-8.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ASCII或UTF-8编码文件。
- en: Use one module import per `import` statement and per line. Place import statements
    at the top of the file, after comments and docstrings, grouped first by standard,
    then by third party, and finally by local library imports.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`import`语句和每一行只导入一个模块。将导入语句放在文件顶部，注释和文档字符串之后，先按标准库导入，再按第三方库导入，最后按本地库导入。
- en: Do not use extraneous whitespaces between parentheses, square brackets, or braces
    or before commas.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在括号、方括号或大括号之间或逗号前使用多余的空格。
- en: Write class names in camel case (e.g., `CamelCase`), suffix exceptions with
    `Error` (if applicable), and name functions in lowercase with words and underscores
    (e.g., `separated_by_underscores`). Use a leading underscore for `_private` attributes
    or methods.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名使用驼峰命名法（例如，`CamelCase`），异常的后缀加上`Error`（如果适用），函数名使用小写字母并用下划线分隔（例如，`separated_by_underscores`）。对`_private`属性或方法使用前导下划线。
- en: These guidelines really aren’t hard to follow, and they make a lot of sense.
    Most Python programmers have no trouble sticking to them as they write code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指南其实并不难遵循，而且非常有道理。大多数Python程序员在编写代码时都能轻松遵守这些规范。
- en: 'However, *errare humanum est*, and it’s still a pain to look through your code
    to make sure it fits the PEP 8 guidelines. Luckily, there’s a `pep8` tool (found
    at *[https://pypi.org/project/pep8/](https://pypi.org/project/pep8/)*) that can
    automatically check any Python file you send its way. Install `pep8` with `pip`,
    and then you can use it on a file like so:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，*人非圣贤*，仔细检查代码以确保符合PEP 8规范仍然是一件麻烦事。幸运的是，有一个`pep8`工具（可以在*[https://pypi.org/project/pep8/](https://pypi.org/project/pep8/)*找到），它可以自动检查你发送的任何Python文件。通过`pip`安装`pep8`，然后你可以像下面这样使用它：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here I use `pep8` on my file *hello.py*, and the output indicates which lines
    and columns do not conform to PEP 8 and reports each issue with a code—here it’s
    line 4 and column 1\. Violations of *MUST* statements in the specification are
    reported as *errors*, and their error codes start with an *E*. Minor issues are
    reported as *warnings*, and their error codes start with a *W*. The three-digit
    code following that first letter indicates the exact kind of error or warning.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的文件*hello.py*中，我使用了`pep8`，输出结果显示了不符合PEP 8规范的行和列，并报告了每个问题的代码——这里是第4行和第1列。违反规范中*MUST*语句的部分会被报告为*错误*，其错误代码以*E*开头。较小的问题会被报告为*警告*，其错误代码以*W*开头。紧随其后的三位数字表示错误或警告的具体类型。
- en: 'The hundreds digit tells you the general category of an error code: for example,
    errors starting with `E2` indicate issues with whitespace, errors starting with
    `E3` indicate issues with blank lines, and warnings starting with `W6` indicate
    deprecated features being used. These codes are all listed in the `pep8` readthedocs
    documentation (*[https://pep8.readthedocs.io/](https://pep8.readthedocs.io/)*).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 百位数字告诉你错误代码的大致类别：例如，以`E2`开头的错误表示空格问题，以`E3`开头的错误表示空行问题，以`W6`开头的警告表示使用了废弃的功能。这些代码都列在`pep8`的readthedocs文档中（*[https://pep8.readthedocs.io/](https://pep8.readthedocs.io/)*）。
- en: '***Tools to Catch Style Errors***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***捕捉样式错误的工具***'
- en: The community still debates whether validating against PEP 8 code, which is
    not part of the Standard Library, is good practice. My advice is to consider running
    a PEP 8 validation tool against your source code on a regular basis. You can do
    this easily by integrating it into your continuous integration system. While this
    approach may seem a bit extreme, it’s a good way to ensure that you continue to
    respect the PEP 8 guidelines in the long term. We’ll discuss in “Using `virtualenv`
    with `tox`” on [page 92](ch06.xhtml#page_92) how you can integrate `pep8` with
    `tox` to automate these checks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 社区仍在争论是否应该验证PEP 8代码，虽然它不是标准库的一部分。我的建议是定期运行PEP 8验证工具检查你的源代码。你可以通过将其集成到持续集成系统中来轻松实现这一点。虽然这种做法可能看起来有些极端，但它是确保你在长期内始终遵守PEP
    8指南的好方法。在《在`tox`中使用`virtualenv`》一节中，我们将在[第92页](ch06.xhtml#page_92)讨论如何将`pep8`与`tox`集成，以自动执行这些检查。
- en: Most open source projects enforce PEP 8 conformance through automatic checks.
    Using these automatic checks from the very beginning of the project might frustrate
    newcomers, but it also ensures that the codebase always looks the same in every
    part of the project. This is very important for a project of any size where there
    are multiple developers with differing opinions on, for example, whitespace ordering.
    You know what I mean.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开源项目通过自动检查来强制执行 PEP 8 合规性。虽然从项目一开始就使用这些自动检查可能会让新人感到沮丧，但它也确保了代码库在项目的每个部分看起来都是一致的。这对于任何有多个开发者的大型项目来说非常重要，因为开发者们可能在空格排序等方面有不同的意见。你懂我的意思。
- en: 'It’s also possible to set your code to ignore certain kinds of errors and warnings
    by using the `--ignore` option, like so:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用 `--ignore` 选项将某些类型的错误和警告从代码中排除，像这样：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will ignore any code E3 errors inside my *hello.py* file. The `--ignore`
    option allows you to effectively ignore parts of the PEP 8 specification that
    you don’t want to follow. If you’re running `pep8` on an existing codebase, it
    also allows you to ignore certain kinds of problems so you can focus on fixing
    issues one category at a time.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将忽略我 *hello.py* 文件中的所有 E3 错误。`--ignore` 选项允许你有效地忽略你不想遵循的 PEP 8 规范部分。如果你在现有的代码库上运行
    `pep8`，它还允许你忽略某些类型的问题，这样你可以专注于一次修复一个类别的问题。
- en: '**NOTE**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you write C code for Python (e.g., modules), the PEP 7 standard describes
    the coding style that you should follow.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你为 Python 编写 C 代码（例如模块），PEP 7 标准描述了你应该遵循的编码风格。*'
- en: '***Tools to Catch Coding Errors***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***捕获编码错误的工具***'
- en: 'Python also has tools that check for actual coding errors rather than style
    errors. Here are some notable examples:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还有一些工具检查实际的编码错误，而不是风格错误。以下是一些 notable（值得注意）的例子：
- en: '*Pyflakes* (*[https://launchpad.net/pyflakes/](https://launchpad.net/pyflakes/)*):
    Extendable via plugins.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pyflakes* (*[https://launchpad.net/pyflakes/](https://launchpad.net/pyflakes/)*):
    可以通过插件进行扩展。'
- en: '*Pylint* (*[https://pypi.org/project/pylint/](https://pypi.org/project/pylint/)*):
    Checks PEP 8 conformance while performing code error checks by default; can be
    extended via plugins.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pylint* (*[https://pypi.org/project/pylint/](https://pypi.org/project/pylint/)*):
    默认情况下检查 PEP 8 合规性，并执行代码错误检查；可以通过插件进行扩展。'
- en: These tools all make use of static analysis—that is, they parse the code and
    analyze it rather than running it outright.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具都利用静态分析——也就是说，它们解析代码并进行分析，而不是直接执行代码。
- en: If you choose to use Pyflakes, note that it doesn’t check PEP 8 conformance
    on its own, so you’d need the second `pep8` tool to cover both.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择使用 Pyflakes，请注意，它不会自行检查 PEP 8 合规性，因此你需要使用第二个 `pep8` 工具来覆盖两者。
- en: 'To simplify things, Python has a project named `flake8` (*[https://pypi.org/project/flake8/](https://pypi.org/project/flake8/)*)
    that combines `pyflakes` and `pep8` into a single command. It also adds some new
    fancy features: for example, it can skip checks on lines containing `# noqa` and
    is extensible via plugins.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，Python 有一个名为 `flake8` 的项目（* [https://pypi.org/project/flake8/](https://pypi.org/project/flake8/)*），它将
    `pyflakes` 和 `pep8` 合并为一个命令。它还添加了一些新特性：例如，它可以跳过包含 `# noqa` 的行的检查，并且可以通过插件进行扩展。
- en: There are a large number of plugins available for `flake8` that you can use
    out of the box. For example, installing *flake8-import-order* (with `pip install
    flake8-import-order`) will extend `flake8` so that it also checks whether your
    `import` statements are sorted alphabetically in your source code. Yes, some projects
    want that.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的插件可供 `flake8` 使用，你可以开箱即用。例如，安装 *flake8-import-order*（通过 `pip install flake8-import-order`）将扩展
    `flake8`，使其检查源代码中的 `import` 语句是否按字母顺序排序。是的，某些项目需要这样做。
- en: In most open source projects, `flake8` is heavily used for code style verification.
    Some large open source projects have even written their own plugins for `flake8`,
    adding checks for errors such as odd usage of `except`, Python 2/3 portability
    issues, import style, dangerous string formatting, possible localization issues,
    and more.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数开源项目中，`flake8` 被广泛用于代码风格验证。一些大型开源项目甚至编写了自己的 `flake8` 插件，增加了如异常处理使用不当、Python
    2/3 可移植性问题、导入风格、危险的字符串格式化、可能的本地化问题等错误检查。
- en: If you’re starting a new project, I strongly recommend that you use one of these
    tools for automatic checking of your code quality and style. If you already have
    a codebase that didn’t implement automatic code checking, a good approach is to
    run your tool of choice with most of the warnings disabled and fix issues one
    category at a time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在启动一个新项目，我强烈建议你使用这些工具来自动检查代码质量和风格。如果你已经有了一个没有实现自动代码检查的代码库，一个不错的方法是使用你选择的工具，在大多数警告被禁用的情况下运行，并一次解决一个类别的问题。
- en: Though none of these tools may be a *perfect* fit for your project or your preferences,
    `flake8` is a good way to improve the quality of your code and make it more durable.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些工具可能并不是与你的项目或偏好 *完美* 贴合，但 `flake8` 是提升代码质量并让其更具持久性的好方法。
- en: '**NOTE**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Many text editors, including the famous GNU Emacs and vim, have plugins available
    (such as Flycheck) that can run tools such as pep8 or flake8 directly in your
    code buffer, interactively highlighting any part of your code that isn’t PEP 8
    compliant. This is a handy way to fix most style errors as you write your code.*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*许多文本编辑器，包括著名的 GNU Emacs 和 vim，都有可用的插件（例如 Flycheck），可以直接在你的代码缓冲区中运行工具，如 pep8
    或 flake8，并互动式地高亮显示任何不符合 PEP 8 的代码部分。这是一种在编写代码时修复大多数风格错误的方便方法。*'
- en: We’ll talk about extending this toolset in [Chapter 9](ch09.xhtml#ch09) with
    our own plugin to verify correct method declaration.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 9 章](ch09.xhtml#ch09)中讨论如何通过我们自己的插件扩展这个工具集，以验证正确的方法声明。
- en: '**Joshua Harlow on Python**'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Joshua Harlow 论 Python**'
- en: Joshua Harlow is a Python developer. He was one of the technical leads on the
    OpenStack team at Yahoo! between 2012 and 2016 and now works at GoDaddy. Josh
    is the author of several Python libraries such as *Taskflow*, *automaton,* and
    *Zake*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Joshua Harlow 是一名 Python 开发者。他曾在 2012 至 2016 年间担任 Yahoo! OpenStack 团队的技术负责人，现在在
    GoDaddy 工作。Josh 是多个 Python 库的作者，如 *Taskflow*、*automaton* 和 *Zake*。
- en: '**What got you into using Python?**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**是什么让你开始使用 Python 的？**'
- en: I started programming in Python 2.3 or 2.4 back in about 2004 during an internship
    at IBM near Poughkeepsie, New York (most of my relatives and family are from upstate
    NY, shout out to them!). I forget exactly what I was doing there, but it involved
    wxPython and some Python code that they were working on to automate some system.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我大约在 2004 年的 IBM 实习期间开始使用 Python 2.3 或 2.4，地点在纽约州 Poughkeepsie（我的大部分亲戚和家人都来自纽约州北部，向他们致敬！）。我已经忘记当时具体做了什么，但涉及到了
    wxPython 和一些他们用来自动化某些系统的 Python 代码。
- en: After that internship I returned to school, went on to graduate school at the
    Rochester Institute of Technology, and ended up working at Yahoo!.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在那次实习之后，我回到了学校，去罗切斯特理工学院继续深造，并最终在 Yahoo! 工作。
- en: I eventually ended up in the CTO team, where I and a few others were tasked
    with figuring out which open source cloud platform to use. We landed on OpenStack,
    which is written almost entirely in Python.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终加入了 CTO 团队，我和其他几个人的任务是决定使用哪个开源云平台。我们选择了 OpenStack，它几乎完全是用 Python 编写的。
- en: '**What do you love and hate about the Python language?**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**你喜欢和讨厌 Python 语言的哪些方面？**'
- en: 'Some of the things I love (not a comprehensive listing):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢的一些东西（不是全面列举）：
- en: Its simplicity—Python is really easy for beginners to engage with and for experienced
    developers to stay engaged with.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的简洁性——Python 对初学者非常友好，对于有经验的开发者也容易保持兴趣。
- en: Style checking—reading code you wrote later on is a big part of developing software
    and having consistency that can be enforced by tools such as `flake8`, `pep8`,
    and Pylint really helps.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风格检查——稍后阅读自己写的代码是软件开发的重要部分，通过像 `flake8`、`pep8` 和 Pylint 这样的工具强制执行一致性非常有帮助。
- en: The ability to pick and choose programming styles and mix them up as you see
    fit.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挑选和选择编程风格并根据需要进行混合的能力。
- en: 'Some of the things I dislike (not a comprehensive listing):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢的一些东西（不是全面列举）：
- en: The somewhat painful Python 2 to 3 transition (version 3.6 has paved over most
    of the issues here).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Python 2 到 3 的过渡有些痛苦（不过版本 3.6 已经解决了大部分问题）。
- en: Lambdas are too simplistic and should be made more powerful.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 函数过于简化，应该让它们更强大。
- en: The lack of a decent package installer—I feel `pip` needs some work, like developing
    a real dependency resolver.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏一个好的包管理器——我觉得 `pip` 还需要一些改进，比如开发一个真正的依赖解析器。
- en: The global interpreter lock (GIL) and the need for it. It makes me sad . . .
    [more on the GIL in [Chapter 11](ch11.xhtml#ch11)].
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局解释器锁（GIL）以及它的必要性。它让我感到难过... [更多关于 GIL 的内容，请参见[第 11 章](ch11.xhtml#ch11)]。
- en: The lack of native support for multithreading—currently you need the addition
    of an explicit `asyncio` model.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏对多线程的原生支持——目前需要额外引入显式的 `asyncio` 模式。
- en: The fracturing of the Python community; this is mainly around the split between
    CPython and PyPy (and other variants).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 社区的分裂；这主要围绕着 CPython 和 PyPy（以及其他变种）之间的分裂。
- en: '**You work on debtcollector, a Python module for managing deprecation warnings.
    How is the process of starting a new library?**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**你在开发 debtcollector，这是一个管理弃用警告的 Python 模块。启动一个新库的过程是怎样的？**'
- en: The simplicity mentioned above makes it really easy to get a new library going
    and to publish it so others can use it. Since that code came out of one of the
    other libraries that I work on (taskflow^([1](footnote.xhtml#foot1))) it was relatively
    easy to transplant and extend that code without having to worry about the API
    being badly designed. I am very glad others (inside the OpenStack community or
    outside of it) have found a need/use for it, and I hope that library grows to
    accommodate more styles of deprecation patterns that other libraries (and applications?)
    find useful.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上面提到的简化使得创建一个新的库并发布它变得非常容易，这样其他人也可以使用它。由于这段代码来自我参与的另一个库（taskflow^([1](footnote.xhtml#foot1)))，所以在不必担心
    API 设计不合理的情况下，移植并扩展这段代码相对容易。我很高兴其他人（无论是 OpenStack 社区内还是外部）都找到了它的需求/用途，并希望这个库能扩展，适应更多其他库（和应用程序？）发现有用的弃用模式。
- en: '**What is Python missing, in your opinion?**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**你认为 Python 缺少什么？**'
- en: Python could perform better under just-in-time (JIT) compilation. Most newer
    languages being created (such as Rust, Node.js using the Chrome V8 JavaScript
    engine, and others) have many of Python’s capabilities but are also JIT compiled.
    It would be really be great if the default CPython could also be JIT compiled
    so that Python could compete with these newer languages on performance.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在即时编译（JIT）方面的表现可以更好。目前，大多数新兴的编程语言（例如 Rust、使用 Chrome V8 JavaScript 引擎的
    Node.js 等）具备了 Python 的许多功能，但它们也是即时编译的。如果默认的 CPython 也能进行 JIT 编译，那就太好了，这样 Python
    就能在性能上与这些新语言竞争。
- en: Python also really needs a strong set of concurrency patterns; not just the
    low level `asyncio` and threading styles of patterns, but higher-level concepts
    that help make applications that work performantly at larger scale. The Python
    library `goless` does port over some of the concepts from Go, which does provide
    a built-in concurrency model. I believe these higher-level patterns need to be
    available as first-class patterns that are built in to the Standard Library and
    maintained so that developers can use them where they see fit. Without these,
    I don’t see how Python can compete with other languages that do provide them.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Python 确实非常需要一套强大的并发模式；不仅是底层的 `asyncio` 和线程模式，还包括那些能够帮助在大规模下高效运行应用程序的更高层次概念。Python
    库 `goless` 迁移了一些 Go 的概念，Go 提供了内建的并发模型。我认为这些更高层次的模式应该作为一等公民，内建到标准库中并得到维护，这样开发者可以在合适的地方使用它们。如果没有这些，我看不出
    Python 如何与提供这些特性的其他语言竞争。
- en: Until next time, keep coding and be happy!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下次再见，继续编码，保持愉快！
