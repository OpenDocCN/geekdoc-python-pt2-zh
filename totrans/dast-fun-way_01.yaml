- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Information in Memory
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 内存中的信息
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Any remotely interesting computer program needs to be able to store and access
    data from memory. This data might be the text in a document, the information on
    a web page, or the details of every variety of coffee we’ve ever sampled stored
    within a database. In each case, the data is fundamental to the program performing
    its intended function.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 任何稍微有趣的计算机程序都需要能够从内存中存储和访问数据。这些数据可能是文档中的文本、网页上的信息，或者存储在数据库中的我们品尝过的各种咖啡的详细信息。在每种情况下，数据对程序执行其预定功能至关重要。
- en: These examples only represent the data that users see and think about. The program
    must also track numerous pieces of data behind the scenes, such as how many times
    we have passed through a loop, the current location of our character in a game,
    or the current system time. Without this data, a program can’t represent changes
    to its internal state.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例仅代表用户看到并思考的数据。程序还必须跟踪许多幕后数据，比如我们通过一个循环的次数、游戏中角色的当前位置，或当前的系统时间。如果没有这些数据，程序就无法表示其内部状态的变化。
- en: In this chapter, we examine the very basics of storing data in memory. We’ll
    look at how the simplest data structures—plain old variables, composite data structures,
    and arrays—store their data. We’ll also introduce the book’s pseudocode conventions.
    For readers who have experience programming, this chapter’s key concepts might
    already be familiar. Even so, they’re a critical starting point for our journey
    and worth a review since they provide the foundations to build more powerful and
    exciting data structures.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍存储数据到内存的基本知识。我们将探讨最简单的数据结构——普通变量、复合数据结构和数组——如何存储它们的数据。我们还将介绍本书的伪代码约定。对于有编程经验的读者，本章的关键概念可能已经熟悉。尽管如此，这些概念依然是我们旅程的关键起点，值得回顾，因为它们为构建更强大、更激动人心的数据结构提供了基础。
- en: Variables
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Individual pieces of data are often stored in *variables*, which are essentially
    names representing the location (or *address*) of a piece of data in the computer’s
    memory*.* Readers with even a passing exposure to programming will already be
    familiar with variables: they are a foundational concept in computer science,
    necessary for even the simplest programs. Variables enable programs to track information
    that changes throughout the course of the program. Need to count how many times
    you have passed through a `FOR` loop? Track the player’s score in a game? Count
    how many spelling errors you’ve made while writing an introductory chapter about
    variables? Use a variable.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 单个数据项通常存储在*变量*中，变量本质上是表示计算机内存中某个数据位置（或*地址*）的名称。即便是对编程略有了解的读者也应该对变量有所了解：它们是计算机科学中的基础概念，是即使是最简单程序所必需的。变量使程序能够跟踪在程序执行过程中发生变化的信息。需要计算你通过了多少次`FOR`循环吗？跟踪游戏中玩家的得分？计算你在写关于变量的引言章节时犯了多少拼写错误？使用变量。
- en: 'Without variables, a programmer can’t track, evaluate, or update the program’s
    internal state. When you create a variable, the system allocates and assigns it
    a location behind the scenes. You are then free to write data to that location
    using a variable name of your choice and look it up using the same name. As long
    as you know the variable’s name, you don’t need to know the memory location of
    the data. We can visualize the computer’s memory as a long column of bins. Each
    variable occupies one or more contiguous bins, depending on the size of the variable,
    as shown in [Figure 1-1](#figure1-1) for three variables: `Level`, `Score`, and
    `AveScore`. In this illustration, the average score (`AveScore`) is a floating-point
    number (a number with a decimal) that uses two bins of memory.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 没有变量，程序员无法跟踪、评估或更新程序的内部状态。当你创建一个变量时，系统会在幕后分配并为其指定一个位置。然后，你可以自由地使用你选择的变量名将数据写入该位置，并使用相同的名称查找它。只要你知道变量的名称，就不需要知道数据的内存位置。我们可以将计算机的内存想象成一个长长的箱子列。每个变量根据其大小占用一个或多个连续的箱子，如[图
    1-1](#figure1-1)所示，显示了三个变量：`Level`、`Score`和`AveScore`。在这个示意图中，平均分数（`AveScore`）是一个浮点数（带有小数的数字），它使用了两个内存箱子。
- en: '![A diagram showing that the level variable with value 20 occupies one bin,
    the score variable with value 109 occupies one bin, and the average score variable
    stores with value 100 point 111111 occupies two bins.](image_fi/502604c01/f01001.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![一张图显示，值为20的level变量占用一个箱子，值为109的score变量占用一个箱子，值为100.111111的平均分数变量占用两个箱子。](image_fi/502604c01/f01001.png)'
- en: 'Figure 1-1: Computer memory depicted as a column of bins'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-1：计算机内存以一列箱子的形式呈现
- en: 'In some ways, variables are like the little paper labels on file folders, like
    the ones in [Figure 1-2](#figure1-2): once we have attached the label, we don’t
    need to remember the folders’ order or exactly how we stored them. We just look
    up the folder by its label—but this means that it’s important to use informative
    names. The author’s own filing cabinet is crammed full of overloaded folders with
    names such as *Stuff*, *Misc*, *Important*, and *Other Stuff*, making it difficult
    to know what is stored inside. Likewise, vague variable names make it hard to
    guess what values they represent.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上讲，变量就像文件夹上的小纸标签，就像在[图 1-2](#figure1-2)中所示的那样：一旦我们贴上标签，就不需要记住文件夹的顺序或具体的存储方式。我们只需通过标签查找文件夹——但这也意味着使用具有信息量的名称非常重要。作者自己的文件柜里塞满了标签模糊的文件夹，标签上写着*Stuff*、*Misc*、*Important*
    和 *Other Stuff*，让人很难知道里面存了什么。同样，模糊的变量名也使得很难猜测它们代表的值。
- en: '![Files with their label tabs sticking up so the files can be easily found.
    From front to back, labels say Level, Top Score, Score, and Other Stuff.](image_fi/502604c01/f01002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![带有标签标签的文件，标签突出，便于快速找到文件。从前到后，标签依次为 Level、Top Score、Score 和 Other Stuff。](image_fi/502604c01/f01002.png)'
- en: 'Figure 1-2: Variables, like the labels on file folders, provide a convenient
    way to find and access your stored values.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-2：变量就像文件夹上的标签一样，提供了一种方便的方式来查找和访问存储的值。
- en: In many programming languages, variables have an associated type that denotes
    exactly what type of data they store, such as integers, “floats” for floating-point
    values, or Booleans for true or false values. These types tell the program how
    much memory the variable occupies and how to use it. A Boolean variable, for example,
    stores a limited range of values and often requires only a small amount of memory.
    A double-precision floating-point number might store a much larger and more precise
    number and so would use multiple bins. The syntax of defining types, and even
    whether types need to be explicitly defined, varies among programming languages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多编程语言中，变量有一个关联的类型，用来标明它们存储的数据类型，例如整数、用于浮动值的“浮点数”或表示真假值的布尔类型。这些类型告诉程序变量占用的内存大小及其使用方式。例如，布尔变量存储的值范围有限，通常只需要很少的内存。而双精度浮点数可能存储一个更大且更精确的数值，因此需要占用多个内存单元。定义类型的语法，甚至是否需要显式定义类型，在不同的编程语言中都有所不同。
- en: 'Throughout this book, we will use the language-independent `<type>: <name>`
    pseudocode format to specify our variables in examples. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '在本书中，我们将使用语言无关的 `<type>: <name>` 伪代码格式来指定示例中的变量。例如：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Sometimes a variable will be of the general type `Type` to indicate that it
    could take on a range of types depending on the implementation. We’ll operate
    on the variables using syntax typical of most programming languages, including
    the use of `=` for assignment:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，变量会被定义为一般类型 `Type`，表示它可能根据实现的不同而具有一系列类型。我们将使用大多数编程语言中的典型语法来操作这些变量，包括使用 `=`
    进行赋值：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For numeric types, including integers and floats, we’ll use standard arithmetic
    operations, such as `+`, `-`, `*`, and `/`. For Boolean data types, we’ll use
    Boolean operations, such as `AND`, `OR`, and `NOT`. The syntax you’ll need to
    use in your programs will vary depending on your programming language (and is
    a common focal point in fights over the relative merits of different languages).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数字类型，包括整数和浮点数，我们将使用标准的算术运算符，如 `+`、`-`、`*` 和 `/`。对于布尔数据类型，我们将使用布尔运算符，如 `AND`、`OR`
    和 `NOT`。你在程序中需要使用的语法将取决于你使用的编程语言（这也是不同编程语言优劣之争的常见焦点）。
- en: Composite Data Structures
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合数据结构
- en: 'Many programming languages provide the ability to create *composite data structures*,
    such as astruct or an object, which gather multiple individual variables into
    a single group. Composite data structures provide an easy way to gather related
    pieces of data and pass them around together. For example, we might define a `CoffeeRecord`
    to track some information about the kinds of coffees we have sampled:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言提供了创建*复合数据结构*的功能，如结构体或对象，它们将多个单独的变量组合成一个整体。复合数据结构提供了一种便捷的方式来收集相关的数据片段并将它们一起传递。例如，我们可能会定义一个
    `CoffeeRecord` 来跟踪我们品尝过的咖啡种类的一些信息：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instead of maintaining six individual variables to track a coffee’s properties,
    we store all of that information in a single composite data structure, `CoffeeRecord`.
    Of course, a true coffee connoisseur would likely track a few hundred additional
    properties, as well as exact information about the date, time, location, and weather
    conditions related to the coffee consumption. Coffee is, after all, a complex
    subject and deserves thorough documentation. Each additional property further
    underscores the importance of using a composite data structure: the alternative
    of passing around hundreds of related variables not only is tedious but also increases
    the probability that the programmer will make a mistake, such as passing variables
    to a function in the wrong order.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与其维护六个单独的变量来跟踪一杯咖啡的属性，我们将所有这些信息存储在一个单一的复合数据结构中，`CoffeeRecord`。当然，真正的咖啡鉴赏家可能会跟踪几百个附加属性，以及与咖啡消费相关的日期、时间、地点和天气条件的精确信息。毕竟，咖啡是一个复杂的主题，值得详细记录。每一个附加属性进一步强调了使用复合数据结构的重要性：传递几百个相关变量不仅麻烦，而且还增加了程序员犯错的概率，比如把变量传递给函数的顺序错误。
- en: Business cards provide a real-world example of composite data structures. Each
    individual card is a packet of data containing multiple pieces of information
    such as your name, phone number, and email address. Bundling this information
    into a single card increases the efficiency of tracking it and passing it around.
    Imagine the mess and confusion of handing a colleague five different scraps of
    paper, each containing a single datapoint.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 名片提供了一个现实世界的复合数据结构示例。每张名片都是一个包含多个信息的数据包，比如你的名字、电话号码和电子邮件地址。将这些信息捆绑到一张名片中，能够提高跟踪和传递的效率。想象一下，如果你要将五张不同的纸条，每张纸条上只包含一个数据点，交给同事时，那将是多么混乱和困惑。
- en: In many programming languages, including Java and Python, data composites can
    take the form of *objects*, which contain both the data and functions for operating
    on their own data. The object’s functions use special syntax to access that object’s
    data, such as the `self` reference in Python. An object can also provide different
    visibility rules that specify whether its internal data is publicly accessible
    outside the object’s own functions or only privately accessible.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多编程语言中，包括 Java 和 Python，数据复合体可以采取*对象*的形式，包含数据和用于操作数据的函数。对象的函数使用特殊的语法来访问该对象的数据，比如
    Python 中的 `self` 引用。一个对象还可以提供不同的可见性规则，指定它的内部数据是否可以在对象的函数外部公开访问，或者只能私下访问。
- en: 'In an attempt to be general, we will treat composite data structures in their
    most general form: as a collection of data. While example code snippets in this
    book and elsewhere may implement the composite data structures as objects, the
    algorithms can be adapted to use non-object representations as well. In code that
    uses composite data structures or objects, we use the syntax of `composite.field`
    to indicate accessing a particular field of a composite data structure. For example,
    using the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽量保持通用性，我们将复合数据结构视为它们最通用的形式：作为一组数据。尽管本书及其他地方的示例代码可能将复合数据结构实现为对象，但这些算法也可以调整为使用非对象的表示形式。在使用复合数据结构或对象的代码中，我们使用
    `composite.field` 的语法来表示访问复合数据结构的特定字段。例如，使用以下代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: we set the `name` field of the record `latest_record` in our coffee log to have
    the value `Sublime Blend`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将咖啡记录 `latest_record` 中的 `name` 字段设置为 `Sublime Blend`。
- en: Arrays
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: An *array* is generally used to store multiple related values. For example,
    we might want to track the amount of coffee consumed daily over a year. We could
    brute-force the storage by creating 365 individual variables, such as `AmountDay1`,
    `AmountDay2`, `AmountDay3`, and so forth, but this is tedious to type and doesn’t
    allow us to use any structure for the data. `AmountDay2` is only a textual tag,
    so the program doesn’t know that `AmountDay1` stores information for the day before
    and `AmountDay3` for the day after; only the programmer knows this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组*通常用于存储多个相关的值。例如，我们可能想要跟踪一整年每天消耗的咖啡量。我们可以通过创建365个单独的变量，例如 `AmountDay1`、`AmountDay2`、`AmountDay3`
    等，来强行存储这些数据，但这既麻烦又无法为数据使用任何结构。`AmountDay2` 只是一个文本标签，程序并不知道 `AmountDay1` 存储的是前一天的信息，`AmountDay3`
    存储的是后一天的信息；只有程序员知道这一点。'
- en: Arrays provide a simple mechanism for storing multiple values in adjacent and
    indexable bins. An array is effectively a row of variables—a contiguous block
    of equal-sized bins in the computer’s memory, as in [Figure 1-3](#figure1-3).
    Like individual variables, arrays occupy a chunk of memory and can sit adjacent
    to arbitrary other information. Each of the array’s bins can store a value of
    the given type, such as a number, a character, pointer, or even other (fixed-size)
    data structures.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数组提供了一种简单的机制，用于将多个值存储在相邻且可以索引的箱子中。数组实际上是一排变量——在计算机内存中连续的相同大小的箱子，如[图 1-3](#figure1-3)所示。与单个变量类似，数组占用一块内存，并且可以与其他任意信息相邻。数组中的每个箱子可以存储给定类型的值，例如数字、字符、指针，甚至其他（固定大小的）数据结构。
- en: '![A column of 12 bins. An array occupies the middle 5 bins. The 4 bins below
    and the 3 bins above the array are labeled Other Stuff.](image_fi/502604c01/f01003.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![一列12个箱子。一个数组占据了中间的5个箱子，数组下方的4个箱子和上方的3个箱子标记为“其他物品”。](image_fi/502604c01/f01003.png)'
- en: 'Figure 1-3: Arrays as bins in the computer’s memory'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-3：计算机内存中的数组作为箱子
- en: Arrays appear throughout our real-world daily lives as well. The row of lockers
    lining a high school hallway, for example, is a physical array for storing students’
    coats and books. We can access any individual storage container by just opening
    the corresponding locker.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数组在我们现实生活中也无处不在。例如，学校走廊上的一排储物柜就是一个物理数组，用于存放学生的外套和书籍。我们可以通过打开相应的储物柜来访问任何一个独立的存储容器。
- en: The structure of an array allows you to access any value, also known as an *element*,
    within the array by specifying its location, or *index*. The bins occupy adjacent
    locations in the computer’s memory, so we can access individual bins by computing
    their offset from the first element and reading the memory in that location. This
    requires just a single addition and memory lookup regardless of which bin we access.
    This structure makes arrays especially convenient for storing items that have
    an ordered relationship, such as our daily coffee intake tracker.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的结构使得你可以通过指定其位置或*索引*，访问数组中的任何值，也叫做*元素*。这些箱子占据计算机内存中的相邻位置，因此我们可以通过计算它们与第一个元素的偏移量来访问单个箱子，并读取该位置的内存。这只需要一次加法运算和内存查找，无论我们访问哪个箱子。这个结构使得数组特别适合存储具有顺序关系的项目，例如我们的每日咖啡摄入量跟踪器。
- en: Formally, we reference the value at index `i` of array `A` as `A[i]`. In our
    locker example, the index would be the number displayed on the front of the locker.
    Most programming languages use *zero-indexed arrays*, which means the first value
    of the array resides at index 0, the second at index 1, and so forth, as shown
    in [Figure 1-4](#figure1-4).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正式地，我们用 `A[i]` 来引用数组 `A` 中索引为 `i` 的值。在我们的储物柜示例中，索引就是储物柜正面显示的数字。大多数编程语言使用*零索引数组*，这意味着数组的第一个值位于索引0，第二个值位于索引1，以此类推，如[图
    1-4](#figure1-4)所示。
- en: '![A diagram showing a series of values stored in nine bins. Below the values
    are their index values. The first index value on the left is zero. The index values
    increase by 1 and end with 8 on the right.](image_fi/502604c01/f01004.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![一张图表展示了一系列存储在九个箱子中的值。每个值下方是其索引值。最左侧的索引值为零，索引值依次增加，右侧为8。](image_fi/502604c01/f01004.png)'
- en: 'Figure 1-4: A zero-indexed array'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-4：零索引数组
- en: We will use zero-indexed arrays throughout this book, to stick to general computing
    convention. [Figure 1-5](#figure1-5) represents how zero-indexed arrays appear
    in the computer’s memory, where the white spaces are the elements of the array.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将使用零索引数组，以遵循一般计算机的惯例。[图 1-5](#figure1-5) 展示了零索引数组在计算机内存中的表现，其中白色区域为数组的元素。
- en: '![ A column of 12 bins. An array occupies the middle 5 bins. These 5 bins are
    labeled A zero through A 4.](image_fi/502604c01/f01005.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![一列12个箱子。一个数组占据了中间的5个箱子，这5个箱子标记为A零到A四。](image_fi/502604c01/f01005.png)'
- en: 'Figure 1-5: A zero-indexed array arranged in computer memory'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-5：零索引数组在计算机内存中的排列
- en: 'Zero-indexing conveniently allows us to compute an element’s location in memory
    as an offset from where the array starts in memory. The location of the *i*th
    item in the array can be computed by:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 零索引允许我们方便地计算元素在内存中的位置，作为从数组在内存中开始位置的偏移量。数组中第 *i* 项的位置信息可以通过以下方式计算：
- en: '*Location*(*item* i) = *Location*(*start of array*) + *Size of each element*
    × i'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*位置*(*项* i) = *位置*(*数组开始*) + *每个元素的大小* × i'
- en: The location of the element at index zero is the start of the array. For example,
    the fifth element of the example array `A` in [Figure 1-5](#figure1-5) would be
    `A[4]`, and, going by the values indexed in [Figure 1-4](#figure1-4), contain
    the value 9.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 索引为零的元素位置是数组的起始位置。例如，[图1-5](#figure1-5)中的示例数组`A`的第五个元素就是`A[4]`，并且根据[图1-4](#figure1-4)中的索引值，它包含值9。
- en: 'In most programming languages, we get and set values in an array using a combination
    of the array’s name and the index. For example, we might set the value of the
    bin with index 5 equal to 16:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程语言中，我们通过数组的名称和索引的组合来获取和设置数组中的值。例如，我们可以将索引为5的箱子的值设置为16：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For our coffee-tracking example, we could define an array `Amount` to store
    the number of cups consumed in a day and store the corresponding counts in `Amount[0]`
    through `Amount[364]`. The single array allows us to access 365 distinct values,
    in order, through a single variable name. We have transitioned from a series of
    similarly named, but independent, variables to a mathematical offset of a single
    location. To understand the power of this, consider our school lockers. Naming
    individual lockers “Jeremy’s Locker” or “Locker for the third student with a last
    name starting with K” would make them nearly impossible to find quickly. Rather
    than simply accessing a specific index, students would have to check a large number
    of lockers, comparing textual tags until they found the correct match. With array
    indexing, the students can just use its offset to determine where the locker is
    and access it directly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的咖啡追踪示例，我们可以定义一个数组`Amount`来存储每天消费的杯数，并将相应的数量存储在`Amount[0]`到`Amount[364]`中。这个单一的数组让我们可以通过一个变量名顺序访问365个不同的值。我们已经从一系列类似名称的、但独立的变量，过渡到了单一位置的数学偏移。为了理解这一点，考虑一下我们的学校储物柜。如果把每个储物柜命名为“Jeremy的储物柜”或“姓氏以K开头的第三个学生的储物柜”，它们几乎不可能快速找到。学生们不能简单地通过访问特定索引，而是需要检查大量储物柜，比较文本标签，直到找到正确的匹配。通过数组索引，学生们只需使用偏移量就能确定储物柜的位置并直接访问它。
- en: Although we often visualize and discuss arrays as the whole data structure,
    it is important to remember that each bin behaves like an individual variable.
    When we want to make a global change to the array, such as shifting the elements
    forward one position, we need to apply the change individually to each bin as
    shown in [Figure 1-6](#figure1-6).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们通常把数组视为整个数据结构来讨论和可视化，但重要的是要记住，每个箱子都像一个独立的变量。当我们想对数组进行全局更改时，比如将元素向前移动一个位置，我们需要像[图1-6](#figure1-6)中所示的那样，分别对每个箱子应用更改。
- en: '![A diagram showing 8 bins. Arrows indicate that the values in the bins are
    all shifting to the left by 1 bin.](image_fi/502604c01/f01006.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图示显示了8个箱子。箭头表示箱子中的值都向左移动了1个箱子。](image_fi/502604c01/f01006.png)'
- en: 'Figure 1-6: Shifting elements in an array forward, bin by bin'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-6：将元素在数组中逐个向前移动
- en: Arrays aren’t like books on a bookshelf. We can’t shove the entire collection
    over at once to make room for the newest edition of *Coffee Lover’s Guide to the
    Best Free-Trade Coffees*. Arrays are more like a row of storefronts. We can’t
    just squeeze a new coffee shop between our favorite neighborhood bookseller and
    barbershop. To make space, we’d need to shift the storefronts down one by one,
    by emptying each store and moving its contents into the adjacent building.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数组不像书架上的书籍。我们不能一次性把整个集合推到一边，为最新版本的*《咖啡爱好者指南：最佳自由贸易咖啡》*腾出空间。数组更像是一排店面。我们不能仅仅把一家新的咖啡店挤到我们最喜欢的邻里书商和理发店之间。为了腾出空间，我们需要一个一个地将店面往后移，先清空每个商店，再把其中的物品移到邻近的建筑里。
- en: 'In fact, we have to juggle values simply to swap two values in an array. To
    swap the values at some indices `i` and `j`, for instance, we need to first assign
    one of them to a temporary variable:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们必须处理一些值才能交换数组中的两个值。例如，要交换索引`i`和`j`上的值，我们需要先将其中一个值赋给一个临时变量：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Otherwise, we would overwrite the value in one of the bins and the two bins
    would end up with the same value. Similarly, if we are swapping the locations
    of the coffee shop and bookseller, we first need to move the contents of the bookstore
    into an empty third location in order to make space for the contents of the coffee
    shop. Only after we’ve moved the coffee shop can we move the bookstore’s contents
    from the temporary third location into the coffee shop’s former location.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们将会覆盖其中一个箱子里的值，导致两个箱子拥有相同的值。同样地，如果我们要交换咖啡店和书商的位置，我们首先需要将书店的内容移到一个空的第三位置，以便为咖啡店的内容腾出空间。只有在我们将咖啡店的内容移动后，才能把书店的内容从临时的第三位置移到咖啡店原来的位置。
- en: Insertion Sort
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入排序
- en: The best way to understand the impact an array’s structure has on how it can
    be used is to examine it in the context of an actual algorithm. *Insertion sort*
    is an algorithm to sort the values in an array. It works on any type of value
    that can be ordered. We could sort integers, strings, or even the coffees in our
    pantry by expiration date.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 了解数组结构如何影响其使用的最佳方式是将其放在实际算法的背景下进行考察。*插入排序* 是一种用于排序数组中值的算法。它适用于任何可以排序的值类型。我们可以排序整数、字符串，甚至按过期日期排序我们储藏室中的咖啡。
- en: Insertion sort works by sorting a subset of the array and expanding this sorted
    range until the entire array is in order. The algorithm iterates through each
    element in the unsorted array and moves it down into the correct location of the
    sorted section. At the start of iteration `i`, the items in bins 0 through `i`
    − 1 are all in sorted order. The algorithm then takes the item at index `i`, finds
    the correct location in the sorted prefix, and inserts it, shifting the necessary
    items down to make room. The sorted prefix has now grown by one—bins 0 through
    `i` are in sorted order. We can start at `i` = 1 by declaring the first element
    to be our initial sorted prefix.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 插入排序通过排序数组的一个子集并扩展已排序的范围，直到整个数组排序完成。该算法遍历未排序数组中的每个元素，并将其移动到已排序部分的正确位置。在第`i`次迭代开始时，箱子
    0 到 `i` − 1 中的项目已经排序好。然后，算法会取出索引为 `i` 的元素，找到其在已排序前缀中的正确位置并插入，同时将必要的元素向下移动以腾出空间。已排序的前缀现在已经扩展了一个—箱子
    0 到 `i` 的项目已排序好。我们可以从 `i` = 1 开始，声明第一个元素为初始已排序前缀。
- en: Say we want to sort our coffee collection in order of freshness—after all, it
    would be tragic to leave a bag of premium coffee languishing at the back of the
    pantry until it was stale. We need to move the earliest best-by dates to the left
    side of the shelf where they can be readily accessible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想按照新鲜度对咖啡集合进行排序——毕竟，如果把一袋优质咖啡留在储藏室的最深处直到过期，那真是太遗憾了。我们需要把最早的最佳食用日期移到架子的左侧，以便它们随时可用。
- en: We begin our coffee insertion sort by proclaiming a single bag at the front
    to be *sorted* and using this range as our sorted prefix. We then look at the
    second bag on the shelf and compare dates to determine whether it should go before
    the first one. After we swap the order, or determine that a swap isn’t necessary,
    we can confidently proclaim that the first two elements are sorted. We have a
    subset that’s fully sorted. We then progress to the third bag and determine where
    it should sit relative to the first two, perhaps making a few swaps in the process.
    This process continues down the shelf until we’ve achieved perfect coffee organization.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过声明将前面的一个袋子视为*已排序*，并以此范围作为我们的已排序前缀，开始我们的咖啡插入排序。然后，我们查看架子上的第二个袋子，比较日期以确定它是否应该排在第一个袋子之前。在我们交换顺序，或者确定不需要交换之后，我们可以自信地宣告前两个元素已经排序好。我们已经拥有一个完全排序的子集。接着，我们继续处理第三个袋子，确定它应该相对于前两个袋子的位置，可能在过程中会进行一些交换。这个过程一直持续，直到我们完成咖啡的完美组织。
- en: We can implement insertion sort with a pair of nested loops, as shown in [Listing
    1-1](#listing1-1).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一对嵌套循环来实现插入排序，如[清单 1-1](#listing1-1)所示。
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 1-1: Implementing insertion sort with nested loops'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-1：使用嵌套循环实现插入排序
- en: The outer loop with iterator `i` starts at the first unsorted element, `i =
    1` and progresses through each value in the unsorted range ❶. The inner loop with
    iterator `j` shifts the current value down into the sorted prefix ❷. At each step,
    we check the position within the sorted prefix by comparing the `current` value
    to the preceding location in the prefix, index `j`. If the element at `j` is larger,
    the two values are in the wrong order and must be swapped. Since we are storing
    the current value in a separate variable `current`, we copy the data from the
    preceding bin directly. There is no need to do a full swap. The inner loop continues
    until it shifts the current value to the front of the array or it finds a preceding
    value that is smaller, which indicates the current value is in the correct location
    of the sorted prefix. We only need to write the current value at the end of the
    loop when it is in the correct location. The outer loop then proceeds to the next
    unsorted value.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 外部循环的迭代器 `i` 从第一个未排序的元素 `i = 1` 开始，并向前遍历未排序范围中的每个值 ❶。内部循环的迭代器 `j` 将当前值移动到已排序前缀中
    ❷。在每一步中，我们通过将 `current` 值与前一个位置（即前缀中的索引 `j`）进行比较，来检查已排序前缀中的位置。如果 `j` 位置的元素较大，说明这两个值顺序错误，需要交换。由于我们将当前值存储在一个单独的变量
    `current` 中，我们可以直接复制前一个桶中的数据，而不需要进行完整的交换。内部循环会持续进行，直到将当前值移到数组的前面，或者找到一个较小的前置值，这表明当前值已经在已排序前缀的正确位置。只有当当前值处于正确的位置时，我们才会在循环结束时写入当前值。然后，外部循环会继续处理下一个未排序的值。
- en: We can visualize the behavior of the algorithm as shown in [Figure 1-7](#figure1-7).
    Each row shows the state of the array at the beginning of the iteration. The shaded
    box represents the current item being shifted into position, and the arrows represent
    the corresponding shifts.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如[图 1-7](#figure1-7)所示，直观地展示算法的行为。每一行显示的是迭代开始时数组的状态。阴影框代表当前正在移动到合适位置的元素，箭头表示相应的移动。
- en: '![A diagram showing 8 bins through 8 iterations. At the start, the value at
    the zero index is 61 and is assumed to be sorted. The second value  is 82, which
    is left where it is. The third value is 67, which is swapped with 82\. The fourth
    value is 4, which is moved to index zero; the three preceding values are shifted
    one place forward to make room. And so forth until all eight values are in order
    from least to greatest.](image_fi/502604c01/f01007.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![一个图示显示通过 8 次迭代的 8 个桶。开始时，零索引处的值为 61，假定它已排序。第二个值是 82，它保持不变。第三个值是 67，它与 82
    交换位置。第四个值是 4，它被移动到索引零处；前三个值依次向前移动一位，为 4 腾出空间。依此类推，直到所有八个值按从小到大的顺序排列。](image_fi/502604c01/f01007.png)'
- en: 'Figure 1-7: Visualization of an insertion sort algorithm'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-7：插入排序算法的可视化
- en: Insertion sort isn’t particularly efficient. When inserting elements into the
    array, we could end up shifting around significant portions of the array. In the
    worst case, the cost of the algorithm scales proportionally with the square of
    the number of items—for every item in the list, we shift all the items in front
    of it. If we double the size of the array, we increase the worst-case cost by
    a factor of four. While this may not be a huge cost in our coffee pantry, where
    we are likely to keep only a small number of coffees that we can consume before
    they go stale, the quadratic cost of the algorithm skyrockets in many applications.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 插入排序并不是特别高效。在将元素插入数组时，我们可能需要移动数组中的大部分元素。在最坏的情况下，算法的开销与元素数量的平方成正比——每插入一个元素，我们需要将其前面的所有元素向后移动。如果我们将数组的大小翻倍，最坏情况下的开销会增加四倍。虽然在我们的咖啡储藏室里，这可能不会造成很大问题，因为我们可能只会保存少量咖啡，并且能在咖啡变质前消费掉它们，但算法的平方开销在许多应用中会急剧上升。
- en: Yet insertion sort provides an important insight into how arrays function. Within
    this simple algorithm we illustrate several attributes of the array, including
    the power of being able to access items by their index, the ability to swap values
    when inserting new elements, and the valuable ability to iterate over entries.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，插入排序提供了关于数组如何工作的一个重要见解。在这个简单的算法中，我们展示了数组的几个特性，包括通过索引访问元素的能力、在插入新元素时交换值的能力，以及遍历条目的宝贵能力。
- en: Strings
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: '*Strings* are ordered lists of characters that can often be thought of as a
    special kind of arrays. Each bin in the string holds a single character, be that
    a letter, number, symbol, space, or one of a limited set of special indicators.
    A special character is often used to indicate the end of the string, as represented
    by the `/` in the last bin in [Figure 1-8](#figure1-8). Characters in strings
    can often be accessed directly using their index.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*是有序的字符列表，通常可以被视为一种特殊类型的数组。字符串中的每个槽位包含一个单独的字符，无论是字母、数字、符号、空格，还是有限集合中的特殊指示符。通常使用特殊字符表示字符串的结束，例如在[图
    1-8](#figure1-8)中的最后一个槽位使用的`/`。字符串中的字符通常可以通过其索引直接访问。'
- en: '![A diagram showing 13 characters, indexed zero to 12\.  The characters spell
    Hello World, exclamation mark, and the last character is a slash.](image_fi/502604c01/f01008.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![一张图示，展示了13个字符，索引从0到12。字符拼写为“Hello World”，感叹号，最后一个字符是斜杠。](image_fi/502604c01/f01008.png)'
- en: 'Figure 1-8: A string spelling “Hello world!”'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-8：一个拼写为“Hello world!”的字符串
- en: In some programming languages, strings are directly implemented as simple arrays
    of characters. In others, strings may be objects, and the string class serves
    as a wrapper around an array or other data structure holding the characters. The
    wrapper class for a string provides additional functionality, such as the ability
    to dynamically resize the string or search for a substring. In either case, it
    is useful to think about how the general array-like structure impacts operations
    on the string. When we display a string on the computer screen, we are effectively
    iterating through each of its characters and displaying them one at a time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些编程语言中，字符串直接实现为简单的字符数组。而在其他语言中，字符串可能是对象，字符串类充当字符数组或其他数据结构的包装器。字符串的包装类提供了附加功能，例如动态调整字符串大小或查找子字符串的能力。在任何情况下，思考一般的类似数组的结构如何影响字符串操作是有用的。当我们在计算机屏幕上显示字符串时，我们实际上是在逐个字符地迭代并依次显示它们。
- en: The common test of equality is more interesting to consider. Unlike integers,
    which can be directly compared with a single operation, strings must be compared
    by iterating through each character. The program compares it individually to its
    counterpart and returns whether it finds a mismatch.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 检查相等性的一般测试更具趣味性。与整数可以通过单一操作直接比较不同，字符串必须通过迭代每个字符进行比较。程序逐个比较字符并返回是否发现不匹配。
- en: '[Listing 1-2](#listing1-2) shows the algorithm for checking the equality of
    two strings. The algorithm starts by comparing the strings’ size. If they are
    not the same length, the algorithm stops there. If they are the same length, the
    algorithm iterates through each position and compares the respective letters of
    each string. We can terminate the loop as soon as we find a single mismatch. Only
    if we make it all the way to the end of the strings without a mismatch can we
    declare the strings equal.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 1-2](#listing1-2)展示了检查两个字符串相等性的算法。该算法首先比较字符串的大小。如果它们的长度不同，算法就会停止。如果它们长度相同，算法会逐个位置进行迭代并比较每个字符串中的相应字符。当我们发现第一个不匹配时，就可以终止循环。只有当我们在没有发现不匹配的情况下遍历完整个字符串，我们才可以声明两个字符串相等。'
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 1-2: The algorithm for checking the equality of two strings'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-2：检查两个字符串相等性的算法
- en: '[Figure 1-9](#figure1-9) demonstrates how this algorithm operates on two strings.
    The equality sign indicates which pairs of characters matched when compared. The
    X represents the first mismatched pair, where the test terminates.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-9](#figure1-9)展示了这个算法如何作用于两个字符串。等号表示在比较时匹配的字符对。X表示第一个不匹配的字符对，在此处测试终止。'
- en: '![Two strings, Hello world and Hello friend. Equal signs show the first 6 characters
    are the same. An X in position 7 shows the W and F are different.](image_fi/502604c01/f01009.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![两个字符串，Hello world和Hello friend。等号显示前6个字符相同。位置7的X表示W和F不同。](image_fi/502604c01/f01009.png)'
- en: 'Figure 1-9: A comparison of two strings'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-9：两个字符串的比较
- en: The worst-case computational cost of string comparison grows proportionally
    with the length of the strings. While the work required to compare two small strings
    can be negligible, the same operation on two long strings can be time-consuming.
    For comparison, imagine the tedium of scanning through two editions of the same
    book, letter by letter, looking for each difference in the arrangement of text
    from one book to the next. In the best case, we find a mismatch early. In the
    worst case, we need to examine the majority of the book.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串比较的最坏情况下的计算成本随着字符串长度的增加而成比例增长。虽然比较两个小字符串所需的工作可能微不足道，但对两个长字符串进行相同操作则可能会耗时。为了做个比较，想象一下通过两本相同书籍逐字扫描，寻找每个不同之处的乏味过程。最好的情况是，我们可以很早就发现不匹配的地方。最坏的情况是，我们需要检查整本书的大部分内容。
- en: Many programming languages, such as Python, provide a string class that allows
    direct comparisons, so we never need to implement the comparison code in [Listing
    1-2](#listing1-2) directly. Still, underneath the simple comparison function lies
    a loop that iterates over all the letters. Without understanding this vital detail,
    it is possible to vastly underestimate the cost of string comparisons.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言，如 Python，提供了一个字符串类，允许直接进行比较，因此我们不需要在[清单 1-2](#listing1-2)中直接实现比较代码。然而，在简单的比较函数下面，实际上有一个循环在迭代所有字母。如果不了解这个关键细节，就有可能严重低估字符串比较的成本。
- en: Why This Matters
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这很重要
- en: Variables and arrays are staples of introductory programming classes and thus
    might seem less than exciting, but they are important to examine because they
    provide the very foundations for computer programming and data structures. These
    concepts also provide the baseline against which to evaluate dynamic data structures
    and their impact on algorithms. In later chapters, we will see how dynamic data
    structures can offer different tradeoffs among efficiency, flexibility, and complexity.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和数组是编程入门课程中的基础，因此它们可能看起来不太令人兴奋，但它们值得深入研究，因为它们为计算机编程和数据结构提供了根本的基础。这些概念还为评估动态数据结构及其对算法的影响提供了基准。在后面的章节中，我们将看到动态数据结构如何在效率、灵活性和复杂性之间提供不同的权衡。
