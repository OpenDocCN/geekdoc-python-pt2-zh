["```py\nimport geopandas as gpd\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld.plot();\n```", "```py\nimport geopandas as gpd\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld = world[(world.name != 'Antarctica')]  # Omit Antarctica.\nworld.plot(column='pop_est', \n           legend=True,\n           legend_kwds={'label': \"Population by Country in Billions\",\n                        'orientation': \"horizontal\"});\n```", "```py\nworld = world[(world.pop_est > 300000000) & (world.name != 'Antarctica')]\n```", "```py\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\nax = plt.axes(projection=ccrs.Robinson())\nax.coastlines()\nplt.show()\n```", "```py\nimport geopandas as gpd\nimport geoplot as gplt\nimport geoplot.crs as gcrs\n\ncontiguous_usa = gpd.read_file(gplt.datasets.get_path('contiguous_usa'))\ngplt.cartogram(contiguous_usa, scale='population', \n               projection=gcrs.AlbersEqualArea(), \n               color='black');\n```", "```py\n➊ import pandas as pd\n   import plotly.express as px\n\n   f = \"https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv\"\n   df = pd.read_csv(f, encoding=\"iso-8859-1\")\n➋ fig = px.scatter_geo(data_frame=df,\n                        lat='Latitude',\n                        lon='Longitude',\n                        hover_name='Type',\n                        hover_data={'Type':False,\n                                    'Country':True, \n                                    'Volcano Name':True},\n                        symbol='Type',\n                        color='Type',\n                        projection='orthographic')\n   fig.show()\n```", "```py\nimport pandas as pd\nimport plotly.graph_objects as go\n\ndf = pd.read_csv(\n\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\nfig = go.Figure(data=[go.Surface(z=df.values)])\nfig.update_layout(title='Volcano', \n                  autosize=False,\n                  width=600, height=600,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()\n```", "```py\nimport folium\n\nmap = folium.Map(location=[29.7, -95.2147])\nmap\n```", "```py\nimport folium\n\nmap = folium.Map(location=[37.15, -111.1], tiles='stamen terrain') \nfolium.Marker(location=[37.1, -111.17],\n              popup=\"Water Sample #2\",\n              icon=folium.Icon(color=\"black\")).add_to(map)\nmap\n```", "```py\nimport pandas as pd\nimport folium\nfrom folium import plugins\n\nf = \"https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv\"\ndf = pd.read_csv(f, encoding=\"iso-8859-1\")\nmap = folium.Map(tile='Stamen Terrain', control_scale=True)\nfor index, row in df.iterrows():\n    volcano_icon = folium.features.CustomIcon('volcano_icon.png', \n                                              icon_size=(25, 25))\n    folium.Marker(location=(row['Latitude'], row['Longitude']),\n                  popup=row['Type'],\n                  icon=volcano_icon, tooltip=(row['Type'], \n                           row['Country'], \n                           row['Volcano Name'])\n                 ).add_to(map)\nmini_map = folium.plugins.MiniMap(toggle_display=True)\nmap.add_child(mini_map)\nmap\n```", "```py\nfrom ipyleaflet import Map, MeasureControl, basemaps\n\nm = Map(basemap=basemaps.OpenTopoMap,center=(19.0933, 19.2431), zoom=11)\nmeasure = MeasureControl(position='bottomleft', \n                         active_color = 'black',\n                         primary_length_unit = 'kilometers')\nm.add_control(measure)\nmeasure.completed_color = 'red'\nm\n```", "```py\nfrom ipyleaflet import Map, basemaps, basemap_to_tiles, SplitMapControl\n\nm = Map(center=(42.6824, 365.581), zoom=5)\nleft_layer = basemap_to_tiles(basemaps.Esri.WorldStreetMap)\nright_layer = basemap_to_tiles(basemaps.NASAGIBS.ViirsEarthAtNight2012)\ncontrol = SplitMapControl(left_layer=left_layer, right_layer=right_layer)\nm.add_control(control)\nm\n```", "```py\nimport geoviews as gv\nimport geoviews.feature as gf\nfrom cartopy import crs\n\ngv.extension('bokeh')\n(gf.ocean + gf.land + gf.ocean * gf.land * gf.coastline * gf.borders).opts(\n'Feature', projection=crs.Geostationary(), global_extent=True, height=325).cols(3)\n```", "```py\nimport geopandas as gpd\nimport geoviews as gv\nfrom cartopy import crs\n\ngv.extension('bokeh')\ngv.Polygons(gpd.read_file(gpd.datasets.get_path('naturalearth_lowres')),\n            vdims=['pop_est', ('name', 'Country')]).opts(width=600,\n            projection=crs.Robinson())\n```", "```py\n   import pandas as pd\n   import holoviews as hv\n   import hvplot.pandas\n\n   f = \"https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv\"\n   df = pd.read_csv(f, encoding=\"iso-8859-1\")\n\n   # Reassign the dataframe with only 3 volcano types:\n➊ df = df[(df['Type'] == 'Cone') | \n           (df['Type'] == 'Stratovolcano') | \n           (df['Type'] == 'Shield volcano')] \n➋ marker = hv.dim('Type').categorize({'Cone': 'triangle', \n                                       'Shield volcano': 'circle', \n                                       'Stratovolcano': 'square'}) \n   size = hv.dim('Type').categorize({'Cone': 6,\n                                     'Shield volcano': 5,\n                                     'Stratovolcano': 4})\n   df.hvplot.points('Longitude', 'Latitude', \n                    color='Type',\n                    marker=marker,\n                    size=size,\n                    hover_cols=['Volcano Name'],\n                    coastline=True)\n```", "```py\n   import pandas as pd\n   import pydeck as pdk\n\n   f = \"https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv\"\n   df = pd.read_csv(f, encoding=\"iso-8859-1\")\n➊ layer = pdk.Layer('ScatterplotLayer', \n                     df, \n                     get_position=['Longitude', 'Latitude'], \n                     auto_highlight=True,\n                     get_radius=10_000, \n                     radius_min_pixels=1,\n                     radius_max_pixels=10_000,  \n                     get_fill_color='[255, 255, 255]',\n                     pickable=True)\n➋ view_state = pdk.ViewState(longitude=42.59, latitude=11.82, \n                              zoom=5, min_zoom=1, max_zoom=8, \n                              pitch=0, bearing=0)\n   r = pdk.Deck(layers=[layer], initial_view_state=view_state)\n➌ r.to_html(\"scatterplot_layer.html\")\n```", "```py\ncolor_lookup = pdk.data_utils.assign_random_colors(df['Type'])\ndf['color'] = df.apply(lambda row: color_lookup.get(row['Type']), axis=1)\n```"]