["```py\npip install playsound\npip install pyttsx3\n```", "```py\npip install pypiwin32\n```", "```py\nsentry.py, part 1\n   import os\n   import time\n➊ from datetime import datetime\n   from playsound import playsound\n   import pyttsx3\n   import cv2 as cv\n\n➋ engine = pyttsx3.init()\n   engine.setProperty('rate', 145)  \n   engine.setProperty('volume', 1.0) \n\n   root_dir = os.path.abspath('.')\n   gunfire_path = os.path.join(root_dir, 'gunfire.wav')\n   tone_path = os.path.join(root_dir, 'tone.wav')\n\n➌ path= \"C:/Python372/Lib/site-packages/cv2/data/\"\n   face_cascade = cv.CascadeClassifier(path + \n                                       'haarcascade_frontalface_default.xml')\n   eye_cascade = cv.CascadeClassifier(path + 'haarcascade_eye.xml')\n\n➍ os.chdir('corridor_5')\n   contents = sorted(os.listdir())\n```", "```py\nengine.setProperty('voice',\n'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_EN-US_ZIRA_11.0')\n```", "```py\n>>> import sysconfig\n>>> path = sysconfig.get_paths()['purelib'] + '/cv2/data'\n>>> path\n'C:\\\\Python372\\\\Lib\\\\site-packages/cv2/data'\n```", "```py\nsentry.py, part 2 \nfor image in contents:\n ➊ print(f\"\\nMotion detected...{datetime.now()}\")\n    discharge_weapon = True\n ➋ engine.say(\"You have entered an active fire zone. \\\n                Stop and face the gun immediately. \\\n                When you hear the tone, you have 5 seconds to pass.\")\n    engine.runAndWait()\n    time.sleep(3)\n\n ➌ img_gray = cv.imread(image, cv.IMREAD_GRAYSCALE)\n    height, width = img_gray.shape\n    cv.imshow(f'Motion detected {image}', img_gray)\n    cv.waitKey(2000)\n    cv.destroyWindow(f'Motion detected {image}')\n\n ➍ face_rect_list = []  \n    face_rect_list.append(face_cascade.detectMultiScale(image=img_gray,\n                                                        scaleFactor=1.1,\n                                                        minNeighbors=5))\n```", "```py\n    img_gray = cv.imread(image)\n    height, width = img_gray.shape[:2]\n```", "```py\n[array([[383, 169,  54,  54]], dtype=int32)]\n```", "```py\nsentry.py, part 3 \n    print(f\"Searching {image} for eyes.\")\n    for rect in face_rect_list:\n        for (x, y, w, h) in rect:\n         ➊ rect_4_eyes = img_gray[y:y+h, x:x+w]\n            eyes = eye_cascade.detectMultiScale(image=rect_4_eyes, \n                                                scaleFactor=1.05,\n                                                minNeighbors=2)\n         ➋ for (xe, ye, we, he) in eyes:\n                print(\"Eyes detected.\")\n                center = (int(xe + 0.5 * we), int(ye + 0.5 * he))\n                radius = int((we + he) / 3)\n                cv.circle(rect_4_eyes, center, radius, 255, 2)\n                cv.rectangle(img_gray, (x, y), (x+w, y+h), (255, 255, 255), 2)\n             ➌ discharge_weapon = False\n                break\n```", "```py\nsentry.py, part 4\n    if discharge_weapon == False:\n        playsound(tone_path, block=False)    \n        cv.imshow('Detected Faces', img_gray)\n        cv.waitKey(2000)\n        cv.destroyWindow('Detected Faces')\n        time.sleep(5)\n\n    else:\n        print(f\"No face in {image}. Discharging weapon!\")\n        cv.putText(img_gray, 'FIRE!', (int(width / 2) - 20, int(height / 2)),\n                                       cv.FONT_HERSHEY_PLAIN, 3, 255, 3)\n        playsound(gunfire_path, block=False)\n        cv.imshow('Mutant', img_gray)\n        cv.waitKey(2000)\n        cv.destroyWindow('Mutant')\n        time.sleep(3)\n\nengine.stop()\n```", "```py\nplaysound('C:/Python372/book/mutants/gunfire.wav', block=False)\n```", "```py\nvideo_face_detect.py\n   import cv2 as cv\n\n   path = \"C:/Python372/Lib/site-packages/cv2/data/\"\n   face_cascade = cv.CascadeClassifier(path + 'haarcascade_frontalface_alt.xml')\n\n➊ cap = cv.VideoCapture(0)\n\n   while True:\n       _, frame = cap.read()\n       face_rects = face_cascade.detectMultiScale(frame, scaleFactor=1.2,\n                                                  minNeighbors=3)    \n\n       for (x, y, w, h) in face_rects:\n           cv.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)\n\n       cv.imshow('frame', frame)\n    ➋ if cv.waitKey(1) & 0xFF == ord('q'):\n          break\n\n cap.release()\n cv.destroyAllWindows()\n```", "```py\n    frame = cv.resize(frame, None, fx=0.5, fy=0.5,\n                      interpolation=cv.INTER_AREA)\n```", "```py\nblurred_image = cv.blur(image, (20, 20))\n```"]