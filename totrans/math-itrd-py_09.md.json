["```py\ndef cAdd(a,b):\n    '''adds two complex numbers'''\n    return [a[0]+b[0],a[1]+b[1]]\n```", "```py\n>>> u = [1,2]\n>>> v = [3,4]\n>>> cAdd(u,v)\n[6, 4]\n```", "```py\ndef cMult(u,v):\n    '''Returns the product of two complex numbers'''\n    return [u[0]*v[0]-u[1]*v[1],u[1]*v[0]+u[0]*v[1]]\n```", "```py\n>>> u = [1,2]\n>>> v = [3,4]\n>>> cMult(u,v)\n[-5, 10]\n```", "```py\n>>> cMult([3,4],[0,1])\n[-4, 3]\n```", "```py\nfrom math import sqrt\n```", "```py\ndef magnitude(z):\n    return sqrt(z[0]**2 + z[1]**2)\n```", "```py\n>>> magnitude([2,1])\n2.23606797749979\n```", "```py\n>>> z = [0.25,1.5]\n```", "```py\n>>> z2 = cMult(z,z)\n>>> z2\n[-2.1875, 0.75]\n```", "```py\n>>> cAdd(z2,z)\n[-1.9375, 2.25]\n```", "```py\n>>> magnitude([-1.9375,2.25])\n2.969243380054926\n```", "```py\n>>> z = [0.25,0.75]\n>>> z2 = cMult(z,z)\n>>> z3 = cAdd(z2,z)\n>>> magnitude(z3)\n1.1524430571616109\n```", "```py\n>>> z1 = z\n```", "```py\n>>> z2 = cMult(z3,z3)\n>>> z3 = cAdd(z2,z1)\n>>> magnitude(z3)\n0.971392565148097\n```", "```py\ndef mandelbrot(z,num):\n    '''runs the process num times\n    and returns the diverge count '''\n  ➊ count=0\n    #define z1 as z\n    z1=z\n    #iterate num times\n  ➋ while count <= num:\n        #check for divergence\n        if magnitude(z1) > 2.0:\n        #return the step it diverged on\n            return count\n        #iterate z\n      ➌ z1=cAdd(cMult(z1,z1),z)\n        count+=1\n    #if z hasn't diverged by the end\n    return num\n```", "```py\n0.7905694150420949\n1.1524430571616109\n 0.971392565148097\n1.1899160852817983\n2.122862368187107\n```", "```py\n*mandelbrot.pyde*\n#range of x-values\nxmin = -2\nxmax = 2\n\n#range of y-values\nymin = -2\nymax = 2\n #calculate the range\nrangex = xmax - xmin\nrangey = ymax - ymin\n\ndef setup():\n    global xscl, yscl\n    size(600,600)\n    noStroke()\n    xscl = float(rangex)/width\n    yscl = float(rangey)/height\n\ndef draw():\n    z = [0.25,0.75]\n    println(mandelbrot(z,10))\n```", "```py\n*mandelbrot.pyde*\ndef draw():\n    #origin in center:\n    translate(width/2,height/2)\n    #go over all x's and y's on the grid\n  ➊ for x in range(width):\n        for y in range(height):\n         ➋ z = [(xmin + x * xscl) ,\n                 (ymin + y * yscl) ]\n            #put it into the mandelbrot function\n         ➌ col=mandelbrot(z,100)\n            #if mandelbrot returns 0\n            if col == 100:\n                fill(0) #make the rectangle black\n            else:\n                fill(255) #make the rectangle white\n            #draw a tiny rectangle\n            rect(x,y,1,1)\n```", "```py\n#range of x-values\nxmin = -0.25\nxmax = 0.25\n\n#range of y-values\nymin = -1\nymax = -0.5\n```", "```py\ndef setup():\n    size(600,600)\n    colorMode(HSB)\n    noStroke()\n```", "```py\n            if col == 100:\n                fill(0)\n            else:\n                fill(3*col,255,255)\n            #draw a tiny rectangle\n            rect(x*xscl,y*yscl,1,1)\n```", "```py\n                fill(255-15*col,255,255)\n```", "```py\n*julia.pyde*\ndef julia(z,c,num):\n    '''runs the process num times\n    and returns the diverge count'''\n    count = 0\n    #define z1 as z\n    z1 = z\n    #iterate num times\n    while count <= num:\n        #check for divergence\n        if magnitude(z1) > 2.0:\n            #return the step it diverged on\n            return count\n        #iterate z\n      ➊ z1 = cAdd(cMult(z1,z1),c)\n        count += 1\n```", "```py\ndef draw():\n    #origin in center:\n    translate(width/2,height/2)\n    #go over all x's and y's on the grid\n    x = xmin\n while x < xmax:\n        y = ymin\n        while y < ymax:\n            z = [x,y]\n          ➊ c = [-0.8,0.156]\n            #put it into the julia program\n            col = julia(z,c,100)\n            #if julia returns 100\n            if col == 100:\n                fill(0)\n            else:\n                #map the color from 0 to 100\n                #to 0 to 255\n                #coll = map(col,0,100,0,300)\n                fill(3*col,255,255)\n            rect(x*xscl,y*yscl,1,1)\n            y += 0.01\n        x += 0.01\n```"]