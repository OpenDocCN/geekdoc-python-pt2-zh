- en: '**19'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**19'
- en: DEMYSTIFYING MATPLOTLIB**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**解密 MATPLOTLIB**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Even among the large number of plotting packages available in Python, Matplotlib
    stands out. Launched in 2003 to provide a MATLAB-like graphing interface for science
    and engineering, it now dominates plotting in Python. It has spawned numerous
    visualization add-ons, like seaborn, and provides the underlying plotting functionality
    for popular analytical tools like pandas. With knowledge of Matplotlib, you can
    generate quick and simple plots as well as elaborate, complex charts while controlling
    every aspect of the display.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 Python 中有大量的绘图包可供选择，Matplotlib 依然脱颖而出。它于 2003 年推出，旨在为科学和工程提供类似 MATLAB 的绘图接口，现在它已经主导了
    Python 中的绘图工作。它催生了许多可视化扩展包，如 seaborn，并为像 pandas 这样的流行分析工具提供了底层绘图功能。掌握 Matplotlib
    后，你可以快速生成简单的图表，也能制作复杂的精致图表，同时控制显示的每一个细节。
- en: The Matplotlib library comes preinstalled with Anaconda. Thanks to its maturity,
    popularity, and open source status, it has a large supporting community ready
    to offer you advice and code samples. The best resource is the famous Matplotlib
    gallery (*[https://matplotlib.org/stable/gallery/index.html](https://matplotlib.org/stable/gallery/index.html)*),
    which contains code “recipes” for making just about any kind of plot you can imagine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 库已随 Anaconda 预安装。得益于其成熟、流行和开源的特点，它拥有一个庞大的支持社区，随时为你提供建议和代码示例。最好的资源是著名的
    Matplotlib 画廊（*[https://matplotlib.org/stable/gallery/index.html](https://matplotlib.org/stable/gallery/index.html)*），它包含了制作几乎所有你能想象到的图表的代码“食谱”。
- en: Like any powerful piece of software, Matplotlib can be, as one author put it,
    “syntactically tedious.” The simplest plots are easy, but difficulty ramps up
    quickly. And even though resources like the Matplotlib gallery provide helpful
    code examples, if you want something slightly different than what’s provided,
    you might find yourself scratching your head. In fact, many people use Matplotlib
    by copying and pasting other people’s code and then hacking at the edges until
    they get something they like. As a user once told me, “No matter how many times
    I use Matplotlib, it always feels like the first time!”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何强大的软件一样，Matplotlib 有时被一位作者形容为“语法上乏味”。最简单的图表很容易制作，但难度很快上升。尽管像 Matplotlib
    画廊这样的资源提供了有用的代码示例，但如果你需要一些与提供的示例稍有不同的内容，可能会让你一头雾水。事实上，许多人通过复制和粘贴他人的代码，然后在边缘进行修改，直到得到他们想要的效果。正如一位用户曾告诉我：“无论我用多少次
    Matplotlib，它总是让我感觉像是第一次使用！”
- en: Fortunately, you can greatly alleviate this pain by taking the time to learn
    some key aspects of the package. So, in this chapter, we’ll study the fundamentals
    of Matplotlib plots, including its two plotting interfaces and methods for making
    multipanel, animated, and customized plots. Armed with this knowledge, you may
    find Matplotlib a tool to embrace instead of to avoid or use reluctantly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，通过花时间学习一些 Matplotlib 的关键要素，你可以大大减轻这种困扰。因此，在本章中，我们将研究 Matplotlib 图表的基础，包括它的两个绘图接口和制作多面板、动画以及自定义图表的方法。有了这些知识，你可能会发现
    Matplotlib 是一个值得掌握的工具，而不是一个需要回避或勉强使用的工具。
- en: However, if you don’t aspire to be a plotting warrior, take a look at the easier
    seaborn wrapper in the next chapter. And if seaborn is more than you need, there’s
    also the easier—though less flexible—pandas plotting option.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你不打算成为绘图高手，可以查看下一章中更简单的 seaborn 包装器。如果 seaborn 对你来说过于复杂，还有一个更简单——虽然灵活性较低——的
    pandas 绘图选项。
- en: '**Anatomy of a Plot**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**图表的结构**'
- en: The first step in understanding Matplotlib is mastering the sometimes-awkward
    nomenclature used for its plots. To that end, let’s dissect a plot and its components.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Matplotlib 的第一步是掌握其图表中使用的有时令人困惑的术语。为此，让我们解析一个图表及其组成部分。
- en: Plots in Matplotlib are held within a `Figure` object (on left in [Figure 19-1](ch19.xhtml#ch019fig1)).
    This is a blank canvas that represents the top-level container for all plot elements.
    Besides providing the canvas on which the plot is drawn, the `Figure` object also
    controls things like the size of the plot, its aspect ratio, the spacing between
    multiple plots drawn on the same canvas, and the ability to output the plot as
    an image.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 中的图表保存在一个 `Figure` 对象中（见 [图 19-1](ch19.xhtml#ch019fig1) 左侧）。这是一个空白画布，代表所有图表元素的最顶层容器。除了提供绘制图表的画布外，`Figure`
    对象还控制图表的大小、长宽比、多个图表在同一画布上的间距，以及将图表输出为图像的功能。
- en: '![Image](../images/19fig01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig01.jpg)'
- en: '*Figure 19-1: The Figure, Axes, and Axis components of a Matplotlib plot*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-1：Matplotlib 图表中的 Figure、Axes 和 Axis 组件*'
- en: The plots themselves—that is, the things that you and I think of as *figures*—are
    represented by the `Axes` class ([Figure 19-1](ch19.xhtml#ch019fig1), center).
    This class includes most of the figure *elements*, such as lines, polygons, markers
    (points), text, titles, and so on, as well as the methods that act *on* them.
    It also sets the coordinate system. A `Figure` can contain multiple `Axes` objects,
    but each `Axes` object can belong to only one `Figure`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图表本身——也就是你我认为的*图形*——由 `Axes` 类表示（[图 19-1](ch19.xhtml#ch019fig1)，中央）。这个类包括大多数图形*元素*，如线条、多边形、标记（点）、文本、标题等，以及作用*于*它们的方法。它还设置坐标系统。一个
    `Figure` 可以包含多个 `Axes` 对象，但每个 `Axes` 对象只能属于一个 `Figure`。
- en: The `Axes` object should not be confused with the `Axis` element that represents
    the numerical values on, say, the x- or y-axis of a chart ([Figure 19-1](ch19.xhtml#ch019fig1),
    right). This includes the tick marks, labels, and limits. All these elements are
    contained within the `Axes` class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Axes` 对象不应与表示图表中 x 轴或 y 轴上数值的 `Axis` 元素混淆（[图 19-1](ch19.xhtml#ch019fig1)，右）。这包括刻度线、标签和坐标范围。所有这些元素都包含在
    `Axes` 类中。'
- en: Each of the components in [Figure 19-1](ch19.xhtml#ch019fig1) exists within
    a hierarchical structure ([Figure 19-2](ch19.xhtml#ch019fig2)). The lowest layer
    includes elements in [Figure 19-1](ch19.xhtml#ch019fig1) such as each axis, the
    axis tick marks, and labels, and the curve (`Line2D`). The highest level is the
    `Figure` object, which serves as a container for everything below it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-1](ch19.xhtml#ch019fig1) 中的每个组件都存在于一个层级结构中（[图 19-2](ch19.xhtml#ch019fig2)）。最底层包括[图
    19-1](ch19.xhtml#ch019fig1)中的元素，如每个坐标轴、坐标轴刻度线和标签，以及曲线（`Line2D`）。最高层是 `Figure`
    对象，它作为所有下层元素的容器。'
- en: '![Image](../images/19fig02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig02.jpg)'
- en: '*Figure 19-2: The hierarchy of the plot components in [Figure 19-1](ch19.xhtml#ch019fig1)*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-2：在[图 19-1](ch19.xhtml#ch019fig1)中，图表组件的层级结构*'
- en: Because a `Figure` object can hold multiple `Axes` objects, you could have more
    than one `Axes` object point to the `Figure` in [Figure 19-2](ch19.xhtml#ch019fig2).
    The common example is subplots, in which one `Figure` canvas holds two or more
    different plots side by side.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因为一个 `Figure` 对象可以包含多个 `Axes` 对象，你可以在[图 19-2](ch19.xhtml#ch019fig2)中让多个 `Axes`
    对象指向同一个 `Figure`。一个常见的例子是子图，其中一个 `Figure` 画布包含两个或更多不同的图表并排显示。
- en: '**The pyplot and Object-Oriented Approaches**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**pyplot 和面向对象的方法**'
- en: There are two primary interfaces for plotting with Matplotlib. Using the first,
    referred to as the *pyplot approach*, you rely on Matplotlib’s internal `pyplot`
    module to *automatically* create and manage `Figure` and `Axes` objects, which
    you then manipulate with `pyplot` methods for plotting. Designed mainly for dealing
    with single plots, the `pyplot` approach reduces the amount of code that you need
    to know and write. It’s a MATLAB-like API that can be very convenient for quick,
    interactive work.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 有两种主要的绘图接口。使用第一种接口，称为*pyplot 方法*，你依赖 Matplotlib 的内部 `pyplot` 模块*自动*创建和管理
    `Figure` 和 `Axes` 对象，然后使用 `pyplot` 方法进行绘图。这种方法主要用于处理单个图表，减少了你需要了解和编写的代码量。它是一个类似
    MATLAB 的 API，非常适合快速交互式工作。
- en: Using the second approach, called the *object-oriented style*, you *explicitly*
    create `Figure` and `Axes` objects and then call methods on the resulting objects.
    This gives you the most control over customizing your plots and keeping track
    of multiple plots in a large program. It’s also easier to understand interactions
    with other libraries if you first create an `Axes` object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第二种方法，即*面向对象风格*，你*显式地*创建 `Figure` 和 `Axes` 对象，然后在这些对象上调用方法。这种方法让你对定制图表和在大型程序中跟踪多个图表有最好的控制权。如果你首先创建一个
    `Axes` 对象，理解与其他库的交互也会更容易。
- en: In the sections that follow, we’ll look at both approaches. However, according
    to the Matplotlib documentation, to maintain consistency you should *choose one
    approach and stick to it*. They suggest using the object-oriented style, particularly
    for complicated plots as well as for methods and scripts that are intended to
    be reused as part of a larger project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论这两种方法。然而，根据 Matplotlib 文档，为了保持一致性，你应该*选择一种方法并坚持使用*。他们建议使用面向对象风格，特别是对于复杂的图表以及那些作为更大项目一部分需要重用的方法和脚本。
- en: It can certainly be argued that one of the reasons beginners find Matplotlib
    intimidating is that they see a mixture of these approaches in existing code,
    such as on question-and-answer sites like Stack Overflow. Because this is unavoidable,
    I suggest that you read over the descriptions for both approaches so that you
    can make an informed decision on which one to choose for yourself and you’ll have
    an awareness of the alternate approach when you encounter it in legacy code or
    in tutorials.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其实可以说，初学者觉得 Matplotlib 难以掌握的一个原因是他们在现有代码中看到这些方法的混合，例如在像 Stack Overflow 这样的问答网站上。由于这种情况是不可避免的，我建议你通读这两种方法的描述，这样你就可以做出明智的选择，并且在遇到遗留代码或教程时，能够了解另一种方法。
- en: '**Using the pyplot Approach**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 pyplot 方法**'
- en: To generate a simple plot using the `pyplot` approach, let’s use the Jupyter
    Qt console. To launch a console from your base environment, open an Anaconda prompt
    (in Windows) or a terminal (in macOS or Linux).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 `pyplot` 方法生成一个简单的图表，让我们使用 Jupyter Qt 控制台。在基础环境中打开 Anaconda 提示符（在 Windows
    中）或终端（在 macOS 或 Linux 中）来启动控制台。
- en: 'First, run the following (you can ignore this command if your prompt includes
    “base” in the name):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行以下命令（如果你的提示符中包括“base”，可以忽略这个命令）：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, enter the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下内容：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, import Matplotlib’s `pyplot` module into the console. For convenience
    and by convention, you should use the alias `plt`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 Matplotlib 的 `pyplot` 模块导入到控制台中。为了方便起见，并且根据惯例，你应该使用别名 `plt`：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By default, plots in the console will display *inline* (within the console).
    To enable plot interactivity, such as zooming and panning, you can use the magic
    command `%matplotlib qt`. Subsequent plots will render in an external Qt window,
    which comes with a toolbar. To restore inline plotting, use the `%matplotlib inline`
    magic command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，控制台中的绘图会显示为*内联*（即在控制台内）。为了启用图表交互功能，比如缩放和平移，可以使用魔法命令`%matplotlib qt`。之后的图表将在外部
    Qt 窗口中呈现，并附带一个工具栏。要恢复内联绘图，请使用魔法命令`%matplotlib inline`。
- en: '**NOTE**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In Jupyter Notebook, you can also use %matplotlib notebook to enable in-cell
    interactivity. This can cause some latency in drawing plots, however, as rendering
    is done on the server side.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 Jupyter Notebook 中，你还可以使用 `%matplotlib notebook` 来启用单元格内交互。这可能会导致绘图时出现一些延迟，因为渲染是在服务器端完成的。*'
- en: 'Now, import NumPy and use it to generate a simple 1D array for plotting:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导入 NumPy 并使用它生成一个简单的 1D 数组用于绘图：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To plot the data, pass it to the aptly named `plot()` method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制数据，将其传递给命名恰当的 `plot()` 方法：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The semicolon at the end of the line suppresses display of the `Figure` object’s
    name, which you don’t need. You should now see [Figure 19-3](ch19.xhtml#ch019fig3)
    in the console.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 行尾的分号抑制了`Figure`对象名称的显示，而这个名称并不需要。你现在应该能在控制台看到[图 19-3](ch19.xhtml#ch019fig3)。
- en: '![Image](../images/19fig03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig03.jpg)'
- en: '*Figure 19-3: A simple autogenerated line plot*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-3：一个简单的自动生成的线性图*'
- en: 'Two things are worth noting here: we didn’t explicitly refer to `Figure` or
    `Axes` objects in the code, as `pyplot` took care of these behind the scenes.
    Nor did we specify what elements to show in the plot, including the ticks and
    values displayed along the x- and y-axes. Instead, Matplotlib looked at your data
    and made intelligent choices about the type of plot you wanted and how to annotate
    it.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有两点需要注意：在代码中我们没有显式地引用 `Figure` 或 `Axes` 对象，因为 `pyplot` 在幕后处理了这些问题。我们也没有指定要在图中显示哪些元素，包括沿
    x 轴和 y 轴显示的刻度和数值。相反，Matplotlib 根据你的数据智能地选择了你需要的图表类型并进行了注解。
- en: Along these lines, the `plot()` method makes line charts, `scatter()` makes
    scatterplots, `bar()` makes bar charts, `hist()` makes histograms, `pie()` makes
    pie charts, and so on. We’ll look at many of these in the sections to come, and
    you can also visit *[https://matplotlib.org/stable/plot_types/index](https://matplotlib.org/stable/plot_types/index)*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这种方式，`plot()` 方法绘制折线图，`scatter()` 绘制散点图，`bar()` 绘制条形图，`hist()` 绘制直方图，`pie()`
    绘制饼图，等等。我们将在接下来的章节中深入了解这些内容，你也可以访问 *[https://matplotlib.org/stable/plot_types/index](https://matplotlib.org/stable/plot_types/index)*。
- en: The automatic nature of these methods is useful when you want to quickly explore
    a dataset, but the resulting plots are generally too plain for presentations or
    reports. One issue is that the default configuration of methods like `plt.plot()`
    assumes that you want the size of each axis to match the range of the input data
    (such as x from 5 to 8, rather than 0 to 10, if the data is limited to values
    between 5 and 8). It also assumes that you don’t want a legend, title, or axis
    labels, and that you want lines and markers drawn in blue. This isn’t always the
    case, so `pyplot` provides many methods to embellish charts with titles, axis
    labels, grids, and so on. We’ll look at these next.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的自动化特性在您想快速探索数据集时非常有用，但生成的图形通常过于简单，不适合用于演示或报告。一个问题是，像`plt.plot()`这样的默认方法假设您希望每个坐标轴的大小与输入数据的范围相匹配（例如，当数据仅限于
    5 到 8 之间时，x 轴范围从 5 到 8，而不是从 0 到 10）。它还假设您不需要图例、标题或坐标轴标签，并且希望线条和标记绘制为蓝色。实际情况并非总是如此，因此
    `pyplot` 提供了许多方法来为图表添加标题、坐标轴标签、网格等内容。接下来，我们将查看这些方法。
- en: '***Creating and Manipulating Plots with pyplot Methods***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 pyplot 方法创建和操作图形***'
- en: Despite being considered a simpler approach than the object-oriented style,
    `pyplot` can still produce some very elaborate plots. To demonstrate, let’s use
    some `pyplot` methods to create a more sophisticated plot than the one shown in
    [Figure 19-3](ch19.xhtml#ch019fig3).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管被认为比面向对象的风格更简单，`pyplot` 仍然可以生成一些非常复杂的图形。为了演示这一点，让我们使用一些 `pyplot` 方法创建一个比 [图
    19-3](ch19.xhtml#ch019fig3) 中展示的图形更复杂的图形。
- en: 'A *catenary* is the shape that a chain assumes when it’s hung from both of
    its ends. It’s a common shape in nature and architecture, examples being a square
    sail under wind pressure and the famous Gateway Arch in St. Louis, Missouri. You
    can generate a catenary by entering the following code in the console window,
    where `cosh(x)` represents the hyperbolic cosine of the `x` values:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*悬链线*是链条在两端悬挂时所呈现的形状。这是一种在自然和建筑中常见的形状，例如风压下的方形帆和密苏里州圣路易斯的著名拱门。您可以通过在控制台窗口中输入以下代码来生成悬链线，其中
    `cosh(x)` 表示 `x` 值的双曲余弦：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, let’s plot the catenary using a black line with a width of 3 and add a
    title, axis labels, limits to the axis values, and a background grid. Be sure
    to use CTRL-ENTER after the first six lines to prevent premature generation of
    the plot. After the last line, you can press ENTER.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用宽度为 3 的黑色线条绘制悬链线，并添加标题、坐标轴标签、坐标轴值的限制以及背景网格。在前六行代码之后，务必按下 CTRL-ENTER，以防止图形过早生成。最后一行之后，您可以按下
    ENTER。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the line color, `'k'` represents the single character shorthand notation
    for “black.” You can see more color choices at *[https://matplotlib.org/stable/tutorials/colors/colors.html](https://matplotlib.org/stable/tutorials/colors/colors.html)*
    and more on `plot()` parameters at *[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html)*.
    Your output should look like [Figure 19-4](ch19.xhtml#ch019fig4).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于线条颜色，`'k'` 是“黑色”的单字符简写符号。您可以在 *[https://matplotlib.org/stable/tutorials/colors/colors.html](https://matplotlib.org/stable/tutorials/colors/colors.html)*
    查看更多颜色选择，并在 *[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html)*
    上查看 `plot()` 的更多参数。您的输出应该如下所示：[图 19-4](ch19.xhtml#ch019fig4)。
- en: In Matplotlib, the elements rendered on a figure canvas, such as a title, legend,
    or line, are called `Artist` objects. Standard graphical objects, like rectangles
    circles, and text, are referred to as *primitive* `Artists`. The objects that
    hold the primitives, like the `Figure`, `Axes`, and `Axis` objects, are called
    *container* `Artists`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 中，渲染在图形画布上的元素，例如标题、图例或线条，称为 `Artist` 对象。标准的图形对象，如矩形、圆形和文本，称为 *原始*
    `Artist`。保存这些原始对象的容器，如 `Figure`、`Axes` 和 `Axis` 对象，称为 *容器* `Artist`。
- en: '![Image](../images/19fig04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig04.jpg)'
- en: '*Figure 19-4: A line plot of a catenary*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-4：悬链线的线图*'
- en: Some of the more common `pyplot` methods for making plots and working with `Artists`
    are listed in [Tables 19-1](ch19.xhtml#ch019tab1) and [19-2](ch19.xhtml#ch019tab2),
    respectively. To see the full list, visit *[https://matplotlib.org/stable/api/pyplot_summary.html](https://matplotlib.org/stable/api/pyplot_summary.html)*.
    Clicking the method names in this online list will take you to detailed information
    on the method parameters, along with example applications. To read more about
    `Artists` in general, visit *[https://matplotlib.org/stable/tutorials/intermediate/artists.html](https://matplotlib.org/stable/tutorials/intermediate/artists.html)*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的 `pyplot` 方法用于制作图形和操作 `Artists`，列在 [表 19-1](ch19.xhtml#ch019tab1) 和 [19-2](ch19.xhtml#ch019tab2)
    中。要查看完整列表，请访问 *[https://matplotlib.org/stable/api/pyplot_summary.html](https://matplotlib.org/stable/api/pyplot_summary.html)*。点击此在线列表中的方法名称将跳转到有关方法参数和示例应用的详细信息。要了解有关
    `Artists` 的更多内容，请访问 *[https://matplotlib.org/stable/tutorials/intermediate/artists.html](https://matplotlib.org/stable/tutorials/intermediate/artists.html)*。
- en: '**Table 19-1:** Useful `pyplot` Methods for Creating Plots'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 19-1：** 创建图形的常用 `pyplot` 方法'
- en: '| **Method** | **Description** | **Example** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `bar` | Make a bar chart | `plt.bar(x, height, width=0.8)` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `bar` | 制作条形图 | `plt.bar(x, height, width=0.8)` |'
- en: '| `barh` | Make a horizontal bar chart | `plt.barh(x, height)` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `barh` | 制作水平条形图 | `plt.barh(x, height)` |'
- en: '| `contour` | Draw a contour map | `plt.contour(X, Y, Z)` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `contour` | 绘制等高线图 | `plt.contour(X, Y, Z)` |'
- en: '| `contourf` | Draw a filled contour map | `plt.contourf(X, Y, Z, cmap=''Greys'')`
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `contourf` | 绘制填充的等高线图 | `plt.contourf(X, Y, Z, cmap=''Greys'')` |'
- en: '| `hist` | Make a 2D histogram | `plt.hist(x, bins)` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `hist` | 制作二维直方图 | `plt.hist(x, bins)` |'
- en: '| `pie` | Display a pie chart | `plt.pie(x=[8, 80, 9], labels=[''A'', ''B'',
    ''C''])` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `pie` | 显示饼图 | `plt.pie(x=[8, 80, 9], labels=[''A'', ''B'', ''C''])` |'
- en: '| `plot` | Plot data as lines/markers | `plt.plot(x, y, ''r+'') # Red crosses`
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `plot` | 绘制数据线/标记 | `plt.plot(x, y, ''r+'') # 红色交叉点` |'
- en: '| `Polar` | Make a polar plot | `plt.polar(theta, r, ''bo'') # Blue dots` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `Polar` | 制作极坐标图 | `plt.polar(theta, r, ''bo'') # 蓝色点` |'
- en: '| `Scatter` | Make a scatterplot | `plt.scatter(x, y, marker=''o'')` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `Scatter` | 绘制散点图 | `plt.scatter(x, y, marker=''o'')` |'
- en: '| `stem` | Plot vertical lines to y coordinate | `plt.stem(x, y)` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `stem` | 绘制到 y 坐标的垂直线 | `plt.stem(x, y)` |'
- en: '**Table 19-2:** Useful `pyplot` Methods for Manipulating Plots'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 19-2：** 操作图形的常用 `pyplot` 方法'
- en: '| **Method** | **Description** | **Example** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `annotate` | Add text, arrows to `Axes` | `plt.annotate(''text'', (x, y))`
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `annotate` | 向 `Axes` 添加文本和箭头 | `plt.annotate(''text'', (x, y))` |'
- en: '| `axis` | Set axis properties (min, max) | `plt.axis([xmin, xmax, ymin, ymax])`
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `axis` | 设置坐标轴属性（最小值，最大值） | `plt.axis([xmin, xmax, ymin, ymax])` |'
- en: '| `axhline` | Add a horizontal line | `plt.axhline(y_loc, lw=5)` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `axhline` | 添加一条水平线 | `plt.axhline(y_loc, lw=5)` |'
- en: '| `axvline` | Add a vertical line | `plt.axvline(x_loc, lw=3, c=''red'')` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `axvline` | 添加一条垂直线 | `plt.axvline(x_loc, lw=3, c=''red'')` |'
- en: '| `close` | Close a plot | `plt.close()` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `close` | 关闭图形 | `plt.close()` |'
- en: '| `draw` | Update if interactive mode off | `plt.draw()` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `draw` | 如果交互模式关闭，则更新 | `plt.draw()` |'
- en: '| `figure` | Create or activate a figure | `plt.figure(figsize=(4.0, 6.0))`
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `figure` | 创建或激活一个图形 | `plt.figure(figsize=(4.0, 6.0))` |'
- en: '| `grid` | Add grid lines | `plt.grid()` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `grid` | 添加网格线 | `plt.grid()` |'
- en: '| `imshow` | Display data as an image | `pic = plt.imread(''img.png'')``plt.imshow(pic,
    cmap=''gray''))` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `imshow` | 将数据显示为图像 | `pic = plt.imread(''img.png'')``plt.imshow(pic, cmap=''gray''))`
    |'
- en: '| `legend` | Place a legend on the Axes | `plt.plot(data, label=''Data'')``plt.legend()`
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `legend` | 在坐标轴上放置图例 | `plt.plot(data, label=''Data'')``plt.legend()` |'
- en: '| `loglog` | Use log scaling on each axis | `plt.loglog()` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `loglog` | 对每个轴使用对数刻度 | `plt.loglog()` |'
- en: '| `minorticks_off` | Remove minor ticks from axis | `plt.minorticks_off()`
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `minorticks_off` | 移除坐标轴的次刻度 | `plt.minorticks_off()` |'
- en: '| `minorticks_on` | Display minor ticks on axis | `plt.minorticks_on()` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `minorticks_on` | 显示坐标轴上的次刻度 | `plt.minorticks_on()` |'
- en: '| `savefig` | Save as *.jpg*, *.png*, *.pdf*, and so on | `plt.savefig(''filename.jpg'')`
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `savefig` | 保存为 *.jpg*, *.png*, *.pdf* 等格式 | `plt.savefig(''filename.jpg'')`
    |'
- en: '| `semilogx` | Use log scaling on x-axis | `plt.semilogx()` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `semilogx` | 对 x 轴使用对数刻度 | `plt.semilogx()` |'
- en: '| `semiology` | Use log scaling on y-axis | `plt.semilogy()` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `semiology` | 对 y 轴使用对数刻度 | `plt.semilogy()` |'
- en: '| `set_cmap` | Set colormap | `plt.set_cmap(''Greens'')` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `set_cmap` | 设置颜色映射 | `plt.set_cmap(''Greens'')` |'
- en: '| `show` | Show plot run from terminal or when interactive mode is off | `plt.show()`
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 在终端或交互模式关闭时显示图形 | `plt.show()` |'
- en: '| `subplot` | Create subplots on a figure | `plt.subplot(nrows, ncols, index)`
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `subplot` | 在图形上创建子图 | `plt.subplot(nrows, ncols, index)` |'
- en: '| `text` | Add text to the `Axes` | `plt.text(x, y, ''text'')` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 向`Axes`中添加文本 | `plt.text(x, y, ''text'')` |'
- en: '| `tight_layout` | Adjust padding in subplots | `plt.tight_layout(pad=3)` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `tight_layout` | 调整子图间的填充 | `plt.tight_layout(pad=3)` |'
- en: '| `title` | Add a title to the `Axes` | `plt.title(''text'')` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `title` | 向`Axes`添加标题 | `plt.title(''text'')` |'
- en: '| `xkcd` | Turn on xkcd sketch-style* | `plt.xkcd()` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `xkcd` | 打开xkcd草图风格* | `plt.xkcd()` |'
- en: '| `xlabel` | Set the x-axis label | `plt.xlabel(''text'')` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `xlabel` | 设置x轴标签 | `plt.xlabel(''text'')` |'
- en: '| `xlim` | Set x-axis limits | `plt.xlim(xmin, xmax)` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `xlim` | 设置x轴限制 | `plt.xlim(xmin, xmax)` |'
- en: '| `xticks` | Set tick information | `plt.xticks([0, 2], rotation=30)` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `xticks` | 设置刻度信息 | `plt.xticks([0, 2], rotation=30)` |'
- en: '| `ylabel` | Set the y-axis label | `plt.ylabel(''text'')` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `ylabel` | 设置y轴标签 | `plt.ylabel(''text'')` |'
- en: '| `ylim` | Set y-axis limits | `plt.ylim(ymin, ymax)` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `ylim` | 设置y轴限制 | `plt.ylim(ymin, ymax)` |'
- en: '| `yticks` | Set tick information | `plt.yticks([0, 2], rotation=30)` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `yticks` | 设置刻度信息 | `plt.yticks([0, 2], rotation=30)` |'
- en: '| *For best results, the Humor Sans font should be installed. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| *为了最佳效果，应安装Humor Sans字体。 |'
- en: Note that the code examples in the tables represent simple cases. Most methods
    take many arguments, letting you fine tune your plots with respect to properties
    like font style and size, line widths and colors, rotation angles, exploded views,
    and much more (see *[https://matplotlib.org/stable/api/pyplot_summary.html](https://matplotlib.org/stable/api/pyplot_summary.html)*).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，表格中的代码示例代表简单的情况。大多数方法接受多个参数，使你可以精细调整图表的属性，如字体样式和大小、线宽和颜色、旋转角度、爆炸视图等（参见*[https://matplotlib.org/stable/api/pyplot_summary.html](https://matplotlib.org/stable/api/pyplot_summary.html)*）。
- en: '***Working with Subplots***'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***与子图的工作***'
- en: So far, we’ve been working with single figures, but there’ll be times when you’ll
    want to compare two plots side by side, or bundle several charts into a summary
    display. For these occasions, Matplotlib provides the `subplot()` method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理单个图形，但有时你可能希望将两个图表并排比较，或者将多个图表打包成一个汇总显示。在这些情况下，Matplotlib提供了`subplot()`方法。
- en: 'To see how this works, let’s begin by generating data for two different sine
    waves:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这个是如何工作的，我们首先生成两条不同的正弦波数据：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'One way to compare these waveforms is to plot them in the same `Axes`, like
    so:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 比较这些波形的一种方法是将它们绘制在同一个`Axes`中，如下所示：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This produces the output in [Figure 19-5](ch19.xhtml#ch019fig5). By default,
    the curves plot with different colors in the Qt console, but because this is a
    black-and-white book, we used a different line width (`lw`) and line style (`ls`)
    for the `amplitude_halved` data to distinguish it from the `amplitude` data. The
    `label` parameter in `plt.plot()` also permits the use of a legend. For the list
    of characters available for marker and line styles, visit *[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html)*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生[图19-5](ch19.xhtml#ch019fig5)中的输出。默认情况下，曲线在Qt控制台中使用不同的颜色绘制，但因为这是一本黑白书籍，我们使用了不同的线宽（`lw`）和线条样式（`ls`）来区分`amplitude_halved`数据和`amplitude`数据。`plt.plot()`中的`label`参数也允许使用图例。有关标记和线条样式的字符列表，请访问*[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html)*。
- en: '![Image](../images/19fig05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig05.jpg)'
- en: '*Figure 19-5: Two sine waves drawn in the same Axes object*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-5：两条正弦波绘制在同一个Axes对象中*'
- en: If you’re comparing more than a few curves, a single plot can become cluttered
    and difficult to read. In those cases, you’ll want to use separate stacked plots
    created by the `subplot()` method. [Figure 19-6](ch19.xhtml#ch019fig6) describes
    the syntax for this method, in which four subplots (`Axes`) are placed in a single
    `Figure` container.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要比较的曲线多于几条，单个图表可能会变得混乱，难以阅读。在这种情况下，你可能希望使用由`subplot()`方法创建的独立堆叠图表。[图19-6](ch19.xhtml#ch019fig6)描述了此方法的语法，其中四个子图（`Axes`）被放置在同一个`Figure`容器中。
- en: '![Image](../images/19fig06.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig06.jpg)'
- en: '*Figure 19-6: Understanding the subplot() method*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-6：理解subplot()方法*'
- en: The subplots will be arranged in a grid, and the first two arguments passed
    to the `subplot()` method specify the dimensions of this grid. The first argument
    represents the number of rows in the grid, the second, the number of columns,
    and the third argument is the index of the *active* subplot (highlighted in gray
    in the figure).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 子图将按网格排列，传递给`subplot()`方法的前两个参数指定该网格的尺寸。第一个参数表示网格的行数，第二个参数表示列数，第三个参数是*活动*子图的索引（在图中以灰色高亮显示）。
- en: The active subplot is the one you are currently plotting in when you call a
    method like `plot()` or `scatter()`. Unlike most things in Python, the first index
    is 1, not 0.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 活动子图是你在调用像 `plot()` 或 `scatter()` 这样的函数时当前正在绘制的子图。与 Python 中的大多数情况不同，索引从 1 开始，而不是
    0。
- en: Matplotlib uses a concept called the *current figure* to keep track of which
    `Axes` is currently being worked. For example, when you call `plt.plot()`, `pyplot`
    creates a new “current figure” `Axes` to plot on. That’s why you must press CTRL-ENTER
    in the console when working on a plot. As soon as you press ENTER, the plot is
    complete, and a new “current figure” is queued up. When you’re working with multiple
    subplots, the `index` argument tells `pyplot` which subplot represents the “current
    figure.”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 使用一个名为 *当前图形* 的概念来追踪当前正在绘制的 `Axes`。例如，当你调用 `plt.plot()` 时，`pyplot`
    会创建一个新的“当前图形” `Axes` 来绘制。这就是为什么在控制台工作时你必须按 CTRL-ENTER。一旦按下 ENTER，图形就完成了，一个新的“当前图形”会被排队。当你处理多个子图时，`index`
    参数告诉 `pyplot` 哪个子图代表“当前图形”。
- en: '**NOTE**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For convenience, you don’t need to use commas with the subplot() arguments.
    For example, plt.subplot(223) works the same as plt.subplot(2, 2, 3), although
    it’s arguably less readable.*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了方便起见，你不需要在 subplot() 参数中使用逗号。例如，plt.subplot(223) 和 plt.subplot(2, 2, 3)
    效果相同，尽管前者的可读性较差。*'
- en: 'Now, let’s plot our sine waves as two separate stacked plots. The process will
    be to call the `subplot()` method and alter its active subplot argument to change
    the current subplot. For each current subplot, the `plot()` method will post the
    data specific to that subplot, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将正弦波绘制为两个独立的堆叠图。过程是调用 `subplot()` 方法并修改其活动子图参数，以更改当前子图。对于每个当前子图，`plot()`
    方法会将该子图特定的数据绘制出来，如下所示：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that if you don’t set the `y` limits on the second plot, `pyplot` will
    automatically scale the graph so that the two subplots look identical. Because
    we manually set the scale using the `ylim()` method, it’s clear that the second
    sine wave has half the amplitude of the first ([Figure 19-7](ch19.xhtml#ch019fig7)).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你没有设置第二个图的 `y` 限制，`pyplot` 会自动缩放图形，使两个子图看起来相同。因为我们使用 `ylim()` 方法手动设置了缩放，所以可以清楚地看到第二个正弦波的振幅是第一个的一半（[图
    19-7](ch19.xhtml#ch019fig7)）。
- en: '![Image](../images/19fig07.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig07.jpg)'
- en: '*Figure 19-7: Sine waves displayed in two horizontal subplots*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-7：正弦波显示在两个水平子图中*'
- en: These plots appear a bit cramped. Let’s give them some breathing room by calling
    the `tight_layout()` method and passing it a `pad` value. The larger the `pad`
    value, the larger the space between plots, though there is a limit to how much
    space can be accommodated. Additional arguments are available that let you fine
    tune the display; for example, by padding the height and width between edges of
    adjacent subplots using `h_pad` and `w_pad`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图形看起来有点拥挤。让我们通过调用 `tight_layout()` 方法并传递一个 `pad` 值来为它们腾出一些空间。`pad` 值越大，子图之间的间隔就越大，但也有一个最大限制。还可以使用其他参数来微调显示；例如，使用
    `h_pad` 和 `w_pad` 来调整相邻子图之间边缘的高度和宽度。
- en: 'Use the arrow keys to bring up the previous code and add the `tight_layout()`
    method, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方向键调出前一个代码，并添加 `tight_layout()` 方法，如下所示：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This produces the plot in [Figure 19-8](ch19.xhtml#ch019fig8). Now it’s clear
    which x-axis goes with which subplot.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成图形 [图 19-8](ch19.xhtml#ch019fig8)。现在可以清楚地看到哪个 x 轴对应哪个子图。
- en: '![Image](../images/19fig08.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig08.jpg)'
- en: '*Figure 19-8: The result of calling tight_layout() on the figure*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-8：调用 tight_layout() 后的结果*'
- en: You’ve just seen how the `subplot()` method lets you subdivide a figure into
    different drawing areas and then focus the plotting commands on a single subplot.
    To help you manage even more sophisticated plots, Matplotlib provides the `GridSpec`
    class, which we’ll look at next.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚看到 `subplot()` 方法如何让你将一个图形细分为不同的绘图区域，并将绘图命令集中在单个子图上。为了帮助你管理更复杂的图形，Matplotlib
    提供了 `GridSpec` 类，我们接下来会了解它。
- en: '**TEST YOUR KNOWLEDGE**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的知识**'
- en: '1.  An `Axes` object represents:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 1. `Axes` 对象表示：
- en: a.  The x-, y-, and z-axes of a plot
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: a. 绘图的 x、y 和 z 轴
- en: b.  Individual elements of a plot, such as titles and legends
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: b. 绘图的单独元素，例如标题和图例
- en: c.  The container for individual figure elements
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: c. 单个图形元素的容器
- en: d.  A blank canvas
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: d. 一个空白画布
- en: '2.  True or False: For complicated plots, and for methods and scripts that
    are intended to be reused as part of a larger project, the Matplotlib documentation
    recommends that you use the object-oriented style.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  对还是错：对于复杂的图形，以及那些打算作为更大项目的一部分进行重用的方法和脚本，Matplotlib文档建议你使用面向对象的风格。
- en: 3.  Which code produces a grid of subplots four columns wide, three rows high,
    and with the second subplot active?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  哪段代码生成一个宽4列高3行的子图网格，并激活第二个子图？
- en: a.  `plt.subplot(3, 4, 1)`
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `plt.subplot(3, 4, 1)`
- en: b.  `plt.subplots(3, 4, 2)`
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: b.  `plt.subplots(3, 4, 2)`
- en: c.  `plt.subplot(4, 3, 2)`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: c.  `plt.subplot(4, 3, 2)`
- en: d.  `plt.subplot(342)`
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: d.  `plt.subplot(342)`
- en: '4.  The `%matplotlib qt` magic command is used to:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  `%matplotlib qt`魔法命令用于：
- en: a.  Enable graphics within the console
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: a.  在控制台中启用图形显示
- en: b.  Allow interactive graphics within Jupyter Notebook
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: b.  允许在Jupyter Notebook中进行交互式图形操作
- en: c.  Open an external window with interactive controls
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: c.  打开一个具有交互控件的外部窗口
- en: d.  Restore inline graphics after using an external window
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: d.  在使用外部窗口后恢复内联图形
- en: '5.  Make a Python dictionary of rocket heights using this data: Atlas: 57,
    Falcon9: 70, Saturn V: 111, Starship: 120\. Plot a bar chart of the data, label
    the y-axis to indicate height in meters, and set the bar width to 0.3.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '5.  使用以下数据创建一个火箭高度的Python字典：Atlas: 57, Falcon9: 70, Saturn V: 111, Starship:
    120。绘制一个柱状图，y轴标注为米单位，并将柱宽设置为0.3。'
- en: '***Building Multipanel Displays Using GridSpec***'
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用GridSpec构建多面板显示***'
- en: The `matplotlib.gridspec` module includes a `GridSpec` class that lets you split
    a `Figure` into a grid of subareas. This, in turn, helps you to create subplots
    that have different widths and heights. The resulting *multipanel* displays are
    useful for summarizing information in presentations and reports.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.gridspec`模块包含一个`GridSpec`类，允许你将一个`Figure`划分为多个子区域。这有助于你创建具有不同宽度和高度的子图。最终的*多面板*显示对于在演示和报告中总结信息非常有用。'
- en: '**Constructing a Martian Multipanel Display**'
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**构建火星多面板显示**'
- en: 'Let’s work through an example: imagine that you’re studying an ancient lakebed
    on Mars. You want to summarize some of your findings about hematite, goethite,
    and jarosite, three iron-bearing minerals associated with aqueous environments.
    You’ve sketched a layout for a compilation figure ([Figure 19-9](ch19.xhtml#ch019fig9)),
    and now you want to create it using Matplotlib.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来操作：假设你正在研究火星上的一个古老湖床。你想总结一些关于赤铁矿、菱铁矿和黄铁矿的发现，这三种铁矿物与水环境有关。你已经草拟了一个汇编图的布局（[图19-9](ch19.xhtml#ch019fig9)），现在你想用Matplotlib来创建它。
- en: '![Image](../images/19fig09.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig09.jpg)'
- en: '*Figure 19-9: A sketch of the summary figure for a Mars study (generated with
    the xkdc() method from [Table 19-2](ch19.xhtml#ch019tab2))*'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-9：火星研究汇总图的草图（由[表19-2](ch19.xhtml#ch019tab2)中的xkdc()方法生成）*'
- en: '**NOTE**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you want to save the code, you can create this project in the Spyder text
    editor or Jupyter Notebook rather than in the console. You’ve already played with
    Matplotlib in these applications in [Chapters 4](ch04.xhtml), [5](ch05.xhtml),
    and [6](ch06.xhtml). If you’re working in Jupyter Notebook, all of the code that
    defines a plot should be contained in the same cell.*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想保存代码，你可以在Spyder文本编辑器或Jupyter Notebook中创建这个项目，而不是在控制台中。你已经在[第4章](ch04.xhtml)、[第5章](ch05.xhtml)和[第6章](ch06.xhtml)的这些应用程序中使用过Matplotlib。如果你在Jupyter
    Notebook中工作，所有定义图形的代码应该包含在同一个单元格内。*'
- en: 'To start, if you haven’t done so already, import NumPy and Matplotlib:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果你还没有这样做，导入NumPy和Matplotlib：
- en: '[PRE11]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, call `GridSpec` to create a 3×3 grid and assign the resulting object to
    a variable named `gs`, for *grid spec*. In the console, use CTRL-ENTER after this
    statement, as we’ll now start defining the subplots:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，调用`GridSpec`来创建一个3×3的网格，并将结果对象赋值给名为`gs`的变量，代表*网格规范*。在控制台中，输入此语句后，使用CTRL-ENTER，我们将开始定义子图：
- en: '[PRE12]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code creates a grid with three rows and three columns. To place
    a subplot within this grid, you index the `gs` object. Unlike with the `subplot()`
    method, indexes start with 0, rather than 1.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个包含三行三列的网格。要将子图放置在此网格中，你需要索引`gs`对象。与`subplot()`方法不同，索引从0开始，而不是从1开始。
- en: '[Figure 19-10](ch19.xhtml#ch019fig10) shows the subplot locations along with
    their grid indexes. To place the upper-left subplot (to hold the histogram, as
    illustrated in [Figure 19-9](ch19.xhtml#ch019fig9)), use `gs[0, :2]`. This references
    the first row `[0]` and columns one and two `[:2]`. Thus, the subplot spans the
    first two columns of row one. Likewise, `gs[:2, 2]` spans the first two rows of
    column three, and `gs[2, 1]` places that subplot in the center of row three.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-10](ch19.xhtml#ch019fig10)展示了子图位置及其网格索引。要放置左上角的子图（用于展示直方图，如[图 19-9](ch19.xhtml#ch019fig9)所示），使用
    `gs[0, :2]`。这表示第一行 `[0]` 和第一、第二列 `[:2]`，因此该子图跨越第一行的前两列。同样，`gs[:2, 2]` 跨越第三列的前两行，而
    `gs[2, 1]` 将子图放置在第三行的中间。'
- en: '![Image](../images/19fig10.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig10.jpg)'
- en: '*Figure 19-10: Subplots for the sketch in [Figure 19-9](ch19.xhtml#ch019fig9)
    with their GridSpec indexes annotated*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-10：带有网格规格索引标注的[图 19-9](ch19.xhtml#ch019fig9)草图子图*'
- en: 'Before building a subplot in the summary figure, you’ll need to specify its
    grid location using the indexes in [Figure 19-10](ch19.xhtml#ch019fig10). Let’s
    do this now for the histogram. Because we don’t have any real Mars data, we’ll
    use a dummy dataset drawn from a normal distribution (using the NumPy `random.normal()`
    method):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建总结图中的子图之前，您需要使用[图 19-10](ch19.xhtml#ch019fig10)中的索引指定它的网格位置。现在我们为直方图做这个操作。由于我们没有真实的火星数据，因此我们将使用从正态分布中抽取的虚拟数据集（使用
    NumPy 的 `random.normal()` 方法）：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The arguments for the `np.random.normal()` method are the mean, standard deviation,
    and number of draws from the normal distribution. The `plt.hist()` method takes
    this output, along with the number of bins for the histogram.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.random.normal()` 方法的参数包括均值、标准差和从正态分布中抽取的样本数。`plt.hist()` 方法使用这个输出，以及直方图的分箱数。'
- en: This will produce the chart in [Figure 19-11](ch19.xhtml#ch019fig11), though
    you won’t see this until the entire plot is finished. Your view might look slightly
    different given that the histogram data is generated randomly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成[图 19-11](ch19.xhtml#ch019fig11)中的图表，尽管直到整个绘图完成之前，你是看不到这个图的。由于直方图数据是随机生成的，因此你的视图可能与此略有不同。
- en: '![Image](../images/19fig11.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig11.jpg)'
- en: '*Figure 19-11: The histogram subplot*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-11：直方图子图*'
- en: 'Next, we’ll build the contour map below the histogram. Note that we can build
    the subplots in whatever order we want, but following a logical order makes it
    easier to go back and edit the code later. As always, start by locating the subplot
    on the grid using `plt.subplot()`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在直方图下方构建等高线图。请注意，我们可以按照任何顺序构建子图，但遵循逻辑顺序可以让后续修改代码时更容易。像往常一样，首先通过 `plt.subplot()`
    定位子图在网格上的位置：
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To demonstrate placing text on plots, add an annotation identifying the location
    of Sample A ➊. The `text()` method used to do this needs at least an x, y location
    and a text string. The circle and line part of the string (`o--`) represents a
    pointer to the sample location. Many other arguments are available for the `text()`
    method, including ones for `fontsize`, `color`, and `rotation`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何在图形上放置文本，添加一个标注，标明样本 A ➊ 的位置。使用的 `text()` 方法至少需要 x, y 坐标和文本字符串。字符串中的圆圈和线条部分（`o--`）表示指向样本位置的指针。`text()`
    方法还有许多其他参数，包括 `fontsize`、`color` 和 `rotation` 等。
- en: Next, generate some dummy coordinates and a *mesh grid* ➋ using NumPy. The `meshgrid()`
    method creates a rectangular grid out of two given one-dimensional arrays representing
    Cartesian or matrix indexing. From this grid we can use an equation to generate
    corresponding `Z` values. Calling the `pyplot` `contourf()` method and passing
    it the coordinates and a gray colormap generates filled contours. Finish by posting
    the colorbar.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 NumPy 生成一些虚拟坐标和 *网格网格* ➋。`meshgrid()` 方法基于给定的两个一维数组创建一个矩形网格，这些数组表示笛卡尔坐标或矩阵索引。通过这个网格，我们可以使用一个方程生成相应的
    `Z` 值。调用 `pyplot` 的 `contourf()` 方法并传入坐标和灰度色图，可以生成填充的等高线图。最后，展示色标。
- en: This code will produce a map like the one presented in [Figure 19-12](ch19.xhtml#ch019fig12).
    If you want to get fancy, you can use an arrow artist to point to the sample location
    (see *[https://matplotlib.org/stable/tutorials/text/annotations.html#annotating-with-arrow/](https://matplotlib.org/stable/tutorials/text/annotations.html#annotating-with-arrow/)*).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成类似于[图 19-12](ch19.xhtml#ch019fig12)所示的地图。如果你想让它更炫酷，可以使用箭头艺术家指向样本位置（请参见
    *[https://matplotlib.org/stable/tutorials/text/annotations.html#annotating-with-arrow/](https://matplotlib.org/stable/tutorials/text/annotations.html#annotating-with-arrow/)*）。
- en: '![Image](../images/19fig12.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig12.jpg)'
- en: '*Figure 19-12: The contour map subplot*'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-12：等高线图子图*'
- en: Next, we’ll generate the scatterplot in the upper-right corner of [Figure 19-9](ch19.xhtml#ch019fig9).
    This will plot the concentration of hematite versus goethite at Location 1\. Start
    by assigning the grid location, and then add a title and labels for the x-axis
    and y-axis.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将生成[图 19-9](ch19.xhtml#ch019fig9)右上角的散点图。这将绘制位置 1 的赤铁矿浓度与菱铁矿浓度的关系。首先分配网格位置，然后添加标题以及
    x 轴和 y 轴的标签。
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To generate scatterplots, you pass the `plt.scatter()` method a sequence of
    x, y values. In this case, we’ll randomly generate these on the fly using NumPy’s
    normal and uniform distribution methods, respectively. For the normal method,
    the arguments are the mean, standard deviation, and number of draws. For the uniform
    method, they represent the low and high values and number of draws.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成散点图，你需要将`plt.scatter()`方法传递一个x、y值的序列。在本例中，我们将使用NumPy的正态分布和均匀分布方法随机生成这些值。对于正态分布方法，参数是均值、标准差和抽样数量。对于均匀分布方法，参数分别表示低值和高值以及抽样数量。
- en: This will ultimately produce the subplot in [Figure 19-13](ch19.xhtml#ch019fig13).
    Again, because the data is randomly generated, every scatterplot will look different.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这最终会生成[图 19-13](ch19.xhtml#ch019fig13)中的子图。同样，由于数据是随机生成的，每个散点图都会看起来不同。
- en: '**NOTE**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For datasets with more than a few thousand points, passing a marker type to
    plt.plot() can be much more efficient than using plt.scatter(). The reason for
    this is because plt.plot() renders points as clones, whereas plt.scatter() renders
    each point individually, to permit altering marker sizes to reflect data values
    or to differentiate datasets.*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于包含几千个数据点以上的数据集，将标记类型传递给plt.plot()比使用plt.scatter()更高效。原因是plt.plot()将点渲染为克隆，而plt.scatter()则单独渲染每个点，以便调整标记的大小以反映数据值或区分数据集。*'
- en: '![Image](../images/19fig13.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig13.jpg)'
- en: '*Figure 19-13: The scatterplot subplot*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-13：散点图子图*'
- en: Now, let’s build three pie charts that record the percentage of hematite, goethite,
    and jarosite in samples A, B, and C. We’ll string these along the bottom of the
    summary figure.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建三个饼图，记录样本 A、B 和 C 中赤铁矿、菱铁矿和黄铁矿的百分比。我们将这些饼图沿汇总图的底部排列。
- en: 'Each pie chart will use the same wedge labels (representing the categories
    in the chart), so these should be assigned at the outset to avoid repeating code.
    In addition, we’ll use the `plt.pie()` method’s `explode` parameter to separate
    the pie wedges. To specify the size of the gap between the wedges, we’ll use a
    list named `explode`, which emphasizes the jarosite wedge by pulling it slightly
    out of the rest of the pie:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 每个饼图将使用相同的扇区标签（表示图表中的类别），因此这些标签应在一开始就分配，以避免重复代码。此外，我们将使用`plt.pie()`方法的`explode`参数来分开饼图的扇区。为了指定扇区之间的间隙大小，我们将使用一个名为`explode`的列表，该列表通过稍微将黄铁矿扇区从其余部分拉出，来突出显示它：
- en: '[PRE16]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To make a pie chart, pass the `plt.pie()` method the `labels` (representing
    the categories in the chart), the `sizes` (representing the percentages of each
    category), and the `explode` list:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作饼图，需要将`plt.pie()`方法传递`labels`（表示图表中的类别）、`sizes`（表示每个类别的百分比）和`explode`列表：
- en: '[PRE17]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Complete the figure by calling the `tight_layout()` method to add some space
    between the subplots. After this last line, if you’re in the console, press ENTER
    or SHIFT-ENTER to generate the final multipanel plot, which you can see in [Figure
    19-14](ch19.xhtml#ch019fig14).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`tight_layout()`方法来完成图形，以在子图之间添加一些间距。完成此最后一行后，如果你在控制台中，按ENTER或SHIFT-ENTER生成最终的多面板图形，你可以在[图
    19-14](ch19.xhtml#ch019fig14)中查看它。
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Image](../images/19fig14.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig14.jpg)'
- en: '*Figure 19-14: The final multipanel summary plot*'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-14：最终的多面板汇总图*'
- en: Thanks to `GridSpec`, the summary display contains subplots that span multiple
    rows and columns.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`GridSpec`，汇总显示包含了跨越多行和多列的子图。
- en: '**Changing the Width and Height of the Subplots**'
  id: totrans-197
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更改子图的宽度和高度**'
- en: Within certain bounds, you can set the width and height of the rows and columns
    produced by `GridSpec`. You can do this through the `width_ratios` and `height_ratios`
    parameters, which each accept a list of numbers. Only the *ratios* between these
    numbers matter. For example, to set the width ratios for each column in our 3×3
    grid, `[1, 2, 4]` is the same as `[2, 4, 8]`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些范围内，你可以设置`GridSpec`生成的行和列的宽度和高度。你可以通过`width_ratios`和`height_ratios`参数来实现，这些参数接受一个数字列表。只有这些数字之间的*比例*才重要。例如，要为我们的3×3网格设置每列的宽度比例，`[1,
    2, 4]`与`[2, 4, 8]`是等效的。
- en: 'To demonstrate, enter the following code to alter our Martian multipanel display:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，输入以下代码来修改我们的火星多面板显示：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `widths` list addresses column widths, starting at index 0\. The `heights`
    list repeats this for row heights.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`widths`列表处理列宽，从索引0开始。`heights`列表则重复这一过程，用于行高。'
- en: 'Now, bring up the code from the previous section (using the arrow key if in
    the console) and edit the call to `plt.GridSpec`, as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，调出上一节的代码（如果在控制台中，使用箭头键），并编辑`plt.GridSpec`的调用，如下所示：
- en: '[PRE20]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Rerun the code and you should see the plot in [Figure 19-15](ch19.xhtml#ch019fig15).
    Note the changes such as the shorter histogram and the taller contour map.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行代码，你应该能在[图 19-15](ch19.xhtml#ch019fig15)中看到图形。注意像是较短的直方图和较高的等高线图等变化。
- en: '![Image](../images/19fig15.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig15.jpg)'
- en: '*Figure 19-15: The multipanel display with new row and column widths and heights*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-15：具有新行和列宽度及高度的多面板显示*'
- en: To read more about `GridSpec` and see some example use cases, visit *[https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html)*.
    For a tutorial on the `pyplot` approach, see *[https://matplotlib.org/stable/tutorials/introductory/pyplot.html](https://matplotlib.org/stable/tutorials/introductory/pyplot.html)*.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`GridSpec`的信息并查看一些示例用法，请访问*[https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html)*。有关`pyplot`方法的教程，请参阅*[https://matplotlib.org/stable/tutorials/introductory/pyplot.html](https://matplotlib.org/stable/tutorials/introductory/pyplot.html)*。
- en: '**Using the Object-Oriented Style**'
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用面向对象风格**'
- en: The object-oriented plotting style generally requires a bit more code than the
    previously described `pyplot` approach, but it lets you get the absolute most
    out of Matplotlib. By explicitly creating `Figure` and `Axes` objects, you’ll
    be able to more easily control your plots, better understand interactions with
    other libraries, create plots with multiple x- and y-axes, and more.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的绘图风格通常需要比之前描述的`pyplot`方法更多的代码，但它能让你最大限度地利用Matplotlib。通过显式创建`Figure`和`Axes`对象，你将能更轻松地控制图形，更好地理解与其他库的交互，创建具有多个x轴和y轴的图形，等等。
- en: '**NOTE**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You’ll appreciate the object-oriented style more if you’re familiar with object-oriented
    programming. This programming paradigm is covered in [Chapter 13](ch13.xhtml).*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你熟悉面向对象编程，你会更欣赏面向对象风格。这个编程范式在[第13章](ch13.xhtml)中有详细介绍。*'
- en: To familiarize ourselves with the object-oriented style, let’s re-create the
    simple plot from [Figure 19-3](ch19.xhtml#ch019fig3). If you’re using the Qt console,
    restart it now.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉面向对象风格，我们重新创建[图 19-3](ch19.xhtml#ch019fig3)中的简单图形。如果你正在使用Qt控制台，现在请重新启动它。
- en: 'The Matplotlib `import` statement stays the same regardless of the plotting
    approach:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 不管使用哪种绘图方法，Matplotlib的`import`语句保持不变：
- en: '[PRE21]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, regenerate the dataset with NumPy:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用NumPy重新生成数据集：
- en: '[PRE22]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To start using the object-oriented style, enter the following and press CTRL-ENTER
    in the console:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用面向对象的风格，输入以下内容并在控制台中按CTRL-ENTER：
- en: '[PRE23]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As soon as you see this line of code in a program, you know you’re dealing with
    the object-oriented style. The `plt.subplots()` method creates a `Figure` instance
    and a set of subplots (a NumPy array of `Axes` objects). If a number of subplots
    is not specified, a single subplot is returned by default. Because two objects
    are returned, you need to unpack the results to two variables, called `fig` and
    `ax` by convention. Remember that, with the `pyplot` approach, these two entities
    are created behind the scenes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在程序中看到这行代码，你就知道你正在处理面向对象风格。`plt.subplots()`方法创建一个`Figure`实例和一组子图（一个`Axes`对象的NumPy数组）。如果没有指定子图的数量，默认返回一个子图。因为返回了两个对象，你需要将结果解包到两个变量中，按照约定命名为`fig`和`ax`。记住，在`pyplot`方法中，这两个实体是在幕后创建的。
- en: 'To display the plot, add the following line and then press ENTER:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示图形，添加以下行并按ENTER：
- en: '[PRE24]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This produces the plot in [Figure 19-16](ch19.xhtml#ch019fig16), which is identical
    to the one in [Figure 19-3](ch19.xhtml#ch019fig3).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成与[图 19-3](ch19.xhtml#ch019fig3)中相同的图形，正如[图 19-16](ch19.xhtml#ch019fig16)所示。
- en: '![Image](../images/19fig16.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/19fig16.jpg)'
- en: '*Figure 19-16: A simple line plot generated using the object-oriented style*'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-16：使用面向对象风格生成的简单折线图*'
- en: 'Because you assigned the plot to a `fig` variable, you can regenerate it by
    simply entering `fig` in the console:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你将图形分配给了`fig`变量，所以你可以通过简单地在控制台中输入`fig`来重新生成它：
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The object-oriented plotting style really isn’t mysterious. The key is to assign
    the `Figure` and `Axes` objects created by `pyplot` to variables. You’ll no longer
    get the benefit of the automated features of `pyplot`, but in return you open
    the door to a host of object attributes and methods for customizing plots.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的绘图风格其实并不神秘。关键在于将`pyplot`创建的`Figure`和`Axes`对象赋值给变量。你将不再获得`pyplot`的自动化特性，但作为回报，你将打开一扇定制图表的对象属性和方法的大门。
- en: '***Creating and Manipulating Plots with the Object-Oriented Style***'
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用面向对象风格创建和操作图表***'
- en: To better understand the object-oriented style, let’s use it to re-create the
    catenary example from “Creating and Manipulating Plots with pyplot Methods” on
    [page 542](ch19.xhtml#ch00lev2sec252). To demonstrate some of the style’s enhanced
    functionality, we’ll force the y-axis to pass through the center of the plot.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解面向对象风格，让我们用它重新创建《使用pyplot方法创建和操作图表》中的悬链线示例，见[第542页](ch19.xhtml#ch00lev2sec252)。为了展示该风格的一些增强功能，我们将强制y轴穿过图表的中心。
- en: 'If you’re using the Qt console, restart the kernel now. Then, import NumPy
    and Matplotlib and regenerate the catenary data:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Qt控制台，现在请重新启动内核。然后，导入NumPy和Matplotlib，并重新生成悬链线数据：
- en: '[PRE26]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To create a single plot, enter the following and then press CTRL-ENTER (in
    the console):'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建单个图表，输入以下内容，然后按CTRL-ENTER（在控制台中）：
- en: '[PRE27]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, call the `AXES` object’s `set()` method and pass it keyword arguments
    for a title, axis labels, and axis limits. This is a convenience method that lets
    you set multiple properties at once rather than calling specific methods for each.
    You can use either a single line that wraps, or press ENTER after each comma to
    produce a more readable vertical stack, as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，调用`AXES`对象的`set()`方法，并传递关键字参数来设置标题、坐标轴标签和坐标轴范围。这个便捷方法可以让你一次性设置多个属性，而无需为每个属性单独调用特定的方法。你可以使用一行长代码，或者在每个逗号后按ENTER键，生成一个更具可读性的垂直堆叠，如下所示：
- en: '[PRE28]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now let’s move the y-axis to the center of the chart instead of along the side.
    In Matplotlib, *spines* are the lines connecting the axis tick marks and noting
    the boundaries of the area containing the plotted data. The default position for
    these is around a plot with the ticks and labels along the left and bottom margins
    (see [Figure 19-16](ch19.xhtml#ch019fig16)). But spines can also be placed at
    arbitrary positions. With the object-oriented style, we can accomplish this using
    the `set_position()` method of the `Spine` subclass.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将y轴移动到图表的中心，而不是沿着一侧。在Matplotlib中，*脊柱*是连接坐标轴刻度线并标记包含绘制数据区域边界的线。这些脊柱默认位于图表的四周，刻度和标签位于左侧和底部边缘（见[图
    19-16](ch19.xhtml#ch019fig16)）。但是，脊柱也可以放置在任意位置。通过面向对象风格，我们可以使用`Spine`子类的`set_position()`方法来实现这一点。
- en: 'The following code first moves the left (y) axis to the 0 value on the x-axis.
    Then, the line width is set to `2` so that the axis stands out a bit from the
    background grid that we’re going to use later:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码首先将左侧（y轴）移动到x轴上的0值。然后，设置线条宽度为`2`，使得该坐标轴能够稍微从背景网格中突出，背景网格稍后将被使用：
- en: '[PRE29]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following line turns off the right boundary of the plot by setting its
    color to none:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行通过将颜色设置为无，关闭绘图的右边界：
- en: '[PRE30]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The next three lines repeat this overall process for the bottom axis and top
    axis, respectively:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三行分别重复此过程，用于底部坐标轴和顶部坐标轴：
- en: '[PRE31]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To finish the plot, add the background grid and call the plot method, passing
    it the x and y data and setting the line width to `3` and the color to black (`''k''`):'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成绘图，添加背景网格并调用绘图方法，传入x和y数据，将线条宽度设置为`3`，颜色设置为黑色（`'k'`）：
- en: '[PRE32]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This produces the plot in [Figure 19-17](ch19.xhtml#ch019fig17).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成[图 19-17](ch19.xhtml#ch019fig17)中的图表。
- en: '![Image](../images/19fig17.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig17.jpg)'
- en: '*Figure 19-17: The line plot of a catenary built using the object-oriented
    style*'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-17：使用面向对象风格构建的悬链线折线图*'
- en: If you omit the code related to the spines, you can reproduce the plot in [Figure
    19-4](ch19.xhtml#ch019fig4) with essentially the same amount of code as used by
    the `pyplot` approach. Thus, the verbosity of the object-oriented style has much
    to do with the fact that you can do more with it, and people generally take advantage
    of this.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你省略与坐标轴脊柱相关的代码，你可以使用与`pyplot`方法相同的代码量，重新生成[图 19-4](ch19.xhtml#ch019fig4)中的图表。因此，面向对象风格的冗长与其能够提供更多功能密切相关，人们通常会利用这一点。
- en: Methods available in the `pyplot` approach have an equivalent in the object-oriented
    style. Unfortunately, the method names are often different. For example, `title()`
    in `pyplot` becomes `set_title()`, and `xticks()` becomes `set_xticks()`. This
    is one reason why it’s good to pick one approach and stick with it.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `pyplot` 方法的对象导向风格有等效的方法。不幸的是，方法名称往往不同。例如，`pyplot` 中的 `title()` 在面向对象风格中变为
    `set_title()`，`xticks()` 变为 `set_xticks()`。这也是为什么最好选择一种风格并坚持使用它的原因之一。
- en: Some of the more common methods for making object-oriented plots are listed
    in [Table 19-3](ch19.xhtml#ch019tab3). You can find additional methods, such as
    for making box plots, violin plots, and more, at *[https://matplotlib.org/stable/plot_types/index.html](https://matplotlib.org/stable/plot_types/index.html)*
    and in the Matplotlib gallery, referenced previously in this chapter on [page
    538](ch19.xhtml#page_538).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的面向对象绘图方法列在[表 19-3](ch19.xhtml#ch019tab3)中。你还可以在 *[https://matplotlib.org/stable/plot_types/index.html](https://matplotlib.org/stable/plot_types/index.html)*
    和本章中 Matplotlib 画廊的[第 538 页](ch19.xhtml#page_538)找到更多方法，如绘制箱形图、小提琴图等。
- en: '**Table 19-3:** Useful Object-Oriented Methods for Creating Plots'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 19-3：** 用于创建图形的有用面向对象方法'
- en: '| **Method** | **Description** | **Example** |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `bar` | Make a bar chart | `ax.bar(x, height)` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `bar` | 绘制条形图 | `ax.bar(x, height)` |'
- en: '| `barh` | Make a horizontal bar chart | `ax.barh(x, height)` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `barh` | 绘制水平条形图 | `ax.barh(x, height)` |'
- en: '| `contour` | Draw a contour map | `ax.contour(X, Y, Z)` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `contour` | 绘制等高线图 | `ax.contour(X, Y, Z)` |'
- en: '| `contourf` | Draw a filled contour map | `ax.contourf(X, Y, Z, cmap=''Greys'')`
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `contourf` | 绘制填充的等高线图 | `ax.contourf(X, Y, Z, cmap=''Greys'')` |'
- en: '| `hist` | Make a 2D histogram | `ax.hist(x, bins)` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `hist` | 绘制二维直方图 | `ax.hist(x, bins)` |'
- en: '| `pie` | Display a pie chart | `ax.pie(x=[8, 80, 9], labels=[''A'', ''B'',
    ''C''])` |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `pie` | 显示饼图 | `ax.pie(x=[8, 80, 9], labels=[''A'', ''B'', ''C''])` |'
- en: '| `plot` | Plot data as lines/markers | `ax.plot(x, y, ''r+'') # Red crosses`
    |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `plot` | 绘制数据为线条/标记 | `ax.plot(x, y, ''r+'') # 红色叉号` |'
- en: '| `polar` | Make a polar plot | `fig, ax = plt.subplots(subplot_kw={''projection'':
    ''polar''})``ax.plot(theta, r, ''bo'') # Blue dots` |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `polar` | 绘制极坐标图 | `fig, ax = plt.subplots(subplot_kw={''projection'': ''polar''})``ax.plot(theta,
    r, ''bo'') # 蓝色圆点` |'
- en: '| `scatter` | Make a scatterplot | `ax.scatter(x, y, marker=''o'')` |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `scatter` | 绘制散点图 | `ax.scatter(x, y, marker=''o'')` |'
- en: '| `stem` | Plot vertical lines to y coordinate | `ax.stem(x, y)` |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `stem` | 绘制垂直线到 y 坐标 | `ax.stem(x, y)` |'
- en: Common methods for working with `Figure` and `Axes` objects are listed in [Tables
    19-4](ch19.xhtml#ch019tab4) and [19-5](ch19.xhtml#ch019tab5), respectively. In
    many cases, these work like the `pyplot` methods in [Table 19-2](ch19.xhtml#ch019tab2),
    though the method names might be different.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 `Figure` 和 `Axes` 对象的常见方法列在[表 19-4](ch19.xhtml#ch019tab4)和[表 19-5](ch19.xhtml#ch019tab5)中。在很多情况下，这些方法的作用类似于[表
    19-2](ch19.xhtml#ch019tab2)中的 `pyplot` 方法，尽管方法名称可能不同。
- en: '**Table 19-4:** Useful Object-Oriented Methods for Working with `Figure` Objects'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 19-4：** 用于处理 `Figure` 对象的有用面向对象方法'
- en: '| **Method** | **Description** | **Example** |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `add_subplot` | Add or retrieve an `Axes` | `ax = fig.add_subplot(2, 2, 1)`
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `add_subplot` | 添加或获取 `Axes` | `ax = fig.add_subplot(2, 2, 1)` |'
- en: '| `close()` | Close a figure | `plt.close(fig2)` |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `close()` | 关闭一个图形 | `plt.close(fig2)` |'
- en: '| `colorbar` | Add a colorbar to an `Axes` | `fig.colorbar(image, ax=ax)` |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `colorbar` | 向 `Axes` 添加颜色条 | `fig.colorbar(image, ax=ax)` |'
- en: '| `constrained_layout` | Auto-adjust fit of subplots | `fig, ax = plt.subplots(constrained_layout=True)`
    |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `constrained_layout` | 自动调整子图布局 | `fig, ax = plt.subplots(constrained_layout=True)`
    |'
- en: '| `gca` | Get the current `Axes` instance on the current figure | `fig.gca()`
    |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `gca` | 获取当前图形中的当前 `Axes` 实例 | `fig.gca()` |'
- en: '| `savefig` | Save as *.jpg*, *.png*, *.pdf*, and so on | `fig.savefig(''filename.jpg'')`
    |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `savefig` | 保存为 *.jpg*、*.png*、*.pdf* 等格式 | `fig.savefig(''filename.jpg'')`
    |'
- en: '| `set_size_inches` | Set `Figure` size in inches | `fig.set_size_inches(6,
    4)` |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `set_size_inches` | 设置 `Figure` 的大小（以英寸为单位） | `fig.set_size_inches(6, 4)`
    |'
- en: '| `set_dpi` | Set `Figure` dots per inch | `fig.set_dpi(200) # Default is 100.`
    |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `set_dpi` | 设置 `Figure` 的每英寸点数 | `fig.set_dpi(200) # 默认是100.` |'
- en: '| `show` | Show plot run from terminal or when interactive mode is off | `plt.show()`
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 显示图形，适用于终端运行或当交互模式关闭时 | `plt.show()` |'
- en: '| `subplots` | Create `Figure` with `Axes` | `fig, ax = plt.subplots(2, 2)`
    |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `subplots` | 创建带有 `Axes` 的 `Figure` | `fig, ax = plt.subplots(2, 2)` |'
- en: '| `suptitle` | Add a super title to a `Figure` | `fig.suptitle(''text'')` |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `suptitle` | 向 `Figure` 添加超级标题 | `fig.suptitle(''text'')` |'
- en: '| `tight_layout` | Auto-adjust subplots fit | `fig.tight_layout()` |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `tight_layout` | 自动调整子图适应 | `fig.tight_layout()` |'
- en: '**Table 19-5:** Useful Object-Oriented Methods for Working with `Axes` Objects'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 19-5：** 操作 `Axes` 对象的有用面向对象方法'
- en: '| **Method** | **Description** | **Example** |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `annotate` | Add text and arrows to `Axes` | `ax.annotate(''text'', xy=(5,
    2))` |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `annotate` | 向 `Axes` 添加文本和箭头 | `ax.annotate(''text'', xy=(5, 2))` |'
- en: '| `axis` | Get or set axis properties | `ax.axis([xmin, xmax, ymin, ymax])`
    |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `axis` | 获取或设置轴的属性 | `ax.axis([xmin, xmax, ymin, ymax])` |'
- en: '| `axhline` | Add a horizontal line | `ax.axhline(y_loc, lw=5)` |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `axhline` | 添加水平线 | `ax.axhline(y_loc, lw=5)` |'
- en: '| `axvline` | Add a vertical line | `ax.axvline(x_loc, lw=3, c=''red'')` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `axvline` | 添加垂直线 | `ax.axvline(x_loc, lw=3, c=''red'')` |'
- en: '| `grid` | Add grid lines | `ax.grid()` |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `grid` | 添加网格线 | `ax.grid()` |'
- en: '| `imshow` | Display data as an image | `pic = plt.imread(''img.png'')``ax.imshow(pic,
    cmap=''gray''))` |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `imshow` | 以图像形式显示数据 | `pic = plt.imread(''img.png'')``ax.imshow(pic, cmap=''gray''))`
    |'
- en: '| `legend` | Place a legend on the `Axes` | `ax.plot(data, label=''Data'')``ax.legend()`
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `legend` | 在 `Axes` 上放置图例 | `ax.plot(data, label=''Data'')``ax.legend()`
    |'
- en: '| `loglog` | Use log scaling on each axis | `ax.loglog()` |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `loglog` | 在每个轴上使用对数缩放 | `ax.loglog()` |'
- en: '| `minorticks_on` | Display minor ticks on axis | `ax.yaxis.get_ticklocs(minor=True)``ax.minorticks_on()`
    |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `minorticks_on` | 显示轴的次刻度 | `ax.yaxis.get_ticklocs(minor=True)``ax.minorticks_on()`
    |'
- en: '| `minorticks_off` | Remove minor ticks from axis | `plt.minorticks_off()`
    |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `minorticks_off` | 移除轴的次刻度 | `plt.minorticks_off()` |'
- en: '| `semilogx` | Use log scaling on x-axis | `ax.semilogx()` |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `semilogx` | 对 x 轴使用对数缩放 | `ax.semilogx()` |'
- en: '| `semiology` | Use log scaling on y-axis | `ax.semilogy()` |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `semiology` | 对 y 轴使用对数缩放 | `ax.semilogy()` |'
- en: '| `set` | Set multiple properties at once | `ax.set(title, ylabel, xlim, alpha)`
    |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `set` | 一次设置多个属性 | `ax.set(title, ylabel, xlim, alpha)` |'
- en: '| `set_title()` | Set the `Axes` title | `ax.set_title(''text'', loc=''center'')`
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `set_title()` | 设置 `Axes` 标题 | `ax.set_title(''text'', loc=''center'')` |'
- en: '| `set_xticks()` | Set x-axis tick marks | `xticks = np.arange(0, 100, 10)
    ax.set_xticks(xticks)` |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `set_xticks()` | 设置 x 轴刻度标记 | `xticks = np.arange(0, 100, 10) ax.set_xticks(xticks)`
    |'
- en: '| `set_yticks()` | Set y-axis tick marks | `yticks = np.arange(0, 100, 10)
    ax.set_yticks(yticks)` |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `set_yticks()` | 设置 y 轴刻度标记 | `yticks = np.arange(0, 100, 10) ax.set_yticks(yticks)`
    |'
- en: '| `set_xticklabels` | Set x-axis labels after calling `set_xticks()` | `labels
    = [a'', ''b'', ''c'', ''d'']``ax.set_xticklabels(labels)` |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `set_xticklabels` | 在调用 `set_xticks()` 后设置 x 轴标签 | `labels = [a'', ''b'',
    ''c'', ''d'']``ax.set_xticklabels(labels)` |'
- en: '| `set_yticklabels` | Set y-axis labels after calling `set_yticks()` | `ax.set_yticklabels([1,
    2, 3, 4])` |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `set_yticklabels` | 在调用 `set_yticks()` 后设置 y 轴标签 | `ax.set_yticklabels([1,
    2, 3, 4])` |'
- en: '| `tick_params` | Change ticks, labels, and grid | `ax.tick_params(labelcolor=
    ''red'')` |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `tick_params` | 更改刻度、标签和网格 | `ax.tick_params(labelcolor= ''red'')` |'
- en: '| `twinx` | New y-axis with shared x-axis | `ax.twinx()` |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `twinx` | 创建一个新的 y 轴，和 x 轴共享 | `ax.twinx()` |'
- en: '| `twiny` | New x-axis with shared y-axis | `ax.twiny()` |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `twiny` | 创建一个新的 x 轴，和 y 轴共享 | `ax.twiny()` |'
- en: '| `set_xlabel()` | Set label for x-axis | `ax.set_xlabel(''text'', loc=''left'')`
    |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `set_xlabel()` | 设置 x 轴标签 | `ax.set_xlabel(''text'', loc=''left'')` |'
- en: '| `set_ylabel()` | Set label for y-axis | `ax.set_ylabel(''text'', loc=''top'')`
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `set_ylabel()` | 设置 y 轴标签 | `ax.set_ylabel(''text'', loc=''top'')` |'
- en: '| `set_xlim()` | Set limits of x-axis | `ax.set_xlim(-5, 5)` |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `set_xlim()` | 设置 x 轴的范围 | `ax.set_xlim(-5, 5)` |'
- en: '| `set_ylim()` | Set limits of y-axis | `ax.set_ylim(0, 10)` |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `set_ylim()` | 设置 y 轴的范围 | `ax.set_ylim(0, 10)` |'
- en: '| `set_xscale()` | Set the x-axis scale | `ax.set_xscale(''log'')` |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `set_xscale()` | 设置 x 轴的尺度 | `ax.set_xscale(''log'')` |'
- en: '| `set_yscale()` | Set the y-axis scale | `ax.set_yscale(''linear'')` |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `set_yscale()` | 设置 y 轴的尺度 | `ax.set_yscale(''linear'')` |'
- en: '| `text` | Add text to the `Axes` | `ax.text(x, y, ''text'')` |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 向 `Axes` 添加文本 | `ax.text(x, y, ''text'')` |'
- en: '| `xaxis.grid()` | Add x-axis grid lines | `ax.xaxis.grid(True, which=''major'')`
    |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `xaxis.grid()` | 添加 x 轴网格线 | `ax.xaxis.grid(True, which=''major'')` |'
- en: '| `yaxis.grid()` | Add y-axis grid lines | `ax.yaxis.grid(True, which=''minor'')`
    |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `yaxis.grid()` | 添加 y 轴网格线 | `ax.yaxis.grid(True, which=''minor'')` |'
- en: As mentioned in the `pyplot` section, the code examples in all these tables
    represent simple cases. Most methods take many arguments, letting you fine tune
    your plots with respect to properties like font style and size, line widths and
    colors, rotation angles, exploded views, and much more. To learn more, visit the
    Matplotlib documentation at *[https://matplotlib.org/](https://matplotlib.org/)*.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 `pyplot` 部分中提到的，这些表格中的代码示例代表的是简单的案例。大多数方法接受多个参数，使您能够微调图表的属性，例如字体样式和大小、线宽和颜色、旋转角度、爆炸视图等。要了解更多内容，请访问
    Matplotlib 文档：[https://matplotlib.org/](https://matplotlib.org/)。
- en: '***Working with Subplots***'
  id: totrans-314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***与子图的操作***'
- en: Like the `pyplot` approach, the object-oriented style supports the use of subplots
    (see “Working with Subplots” on [page 545](ch19.xhtml#ch00lev2sec253)). Although
    there are multiple ways to assign subplots to `Figure` and `Axes` objects, the
    `plt.subplots()` method is convenient and returns a NumPy array that lets you
    select subplots using standard indexing or with unique names such as `axs[0, 0]`
    or `ax1`. Another benefit is that you can preview the subplots’ geometry prior
    to plotting any data.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 与`pyplot`方法类似，面向对象风格支持使用子图（参见[第545页](ch19.xhtml#ch00lev2sec253)的“与子图一起工作”）。虽然有多种方法可以将子图分配给`Figure`和`Axes`对象，但`plt.subplots()`方法非常方便，返回一个NumPy数组，允许你使用标准索引或使用诸如`axs[0,
    0]`或`ax1`之类的唯一名称选择子图。另一个好处是，你可以在绘制任何数据之前预览子图的几何形状。
- en: '**NOTE**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The object-oriented method for creating subplots is spelled subplots, whereas
    the pyplot approach uses subplot.*'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '*面向对象方法创建子图的函数是subplots，而pyplot方法使用subplot。*'
- en: Calling `plt.subplots()` with no arguments generates a single empty plot ([Figure
    19-18](ch19.xhtml#ch019fig18)). Technically, this produced a 1×1 `AxesSubplot`
    object.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 调用没有参数的`plt.subplots()`会生成一个空的单一图表（[图19-18](ch19.xhtml#ch019fig18)）。从技术上讲，这会生成一个1×1的`AxesSubplot`对象。
- en: '[PRE33]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Image](../images/19fig18.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig18.jpg)'
- en: '*Figure 19-18: Empty plot produced using the subplots()method of the object-oriented
    style*'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-18：使用面向对象风格的subplots()方法生成的空图表*'
- en: Producing multiple subplots is like the `plt.subplot()` method, only without
    an index argument for the active subplot. The first argument indicates the number
    of rows; the second specifies the number of columns. By convention, multiple `Axes`
    are given the plural name, `axs`, rather than `axes` so as to avoid confusion
    with a single instance of `Axes`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 生成多个子图类似于`plt.subplot()`方法，只是没有用于活动子图的索引参数。第一个参数表示行数；第二个参数表示列数。通常，多个`Axes`被赋予复数形式的名称`axs`，而不是`axes`，以避免与单个`Axes`实例混淆。
- en: 'Passing the `plt.subplots()` method two arguments lets you control the number
    of subplots and their geometry. The following code generates the 2×2 grid of subplots
    shown in [Figure 19-19](ch19.xhtml#ch019fig19) and stores a list of two `AxesSubplot`
    objects in the `axs` variable:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 传递两个参数给`plt.subplots()`方法可以控制子图的数量及其几何形状。以下代码生成了[图19-19](ch19.xhtml#ch019fig19)中所示的2×2子图网格，并将两个`AxesSubplot`对象的列表存储在`axs`变量中：
- en: '[PRE34]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Image](../images/19fig19.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig19.jpg)'
- en: '*Figure 19-19: Four subplots in a 2×2 arrangement*'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-19：2×2排列中的四个子图*'
- en: 'To activate a subplot, you can use its index. In this example, we plot on the
    second subplot in the first row, producing [Figure 19-20](ch19.xhtml#ch019fig20):'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活一个子图，你可以使用它的索引。在这个例子中，我们绘制第一行第二个子图，生成[图19-20](ch19.xhtml#ch019fig20)：
- en: '[PRE35]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![Image](../images/19fig20.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig20.jpg)'
- en: '*Figure 19-20: Plotting using subplot index [0, 1]*'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-20：使用子图索引[0, 1]进行绘图*'
- en: 'Alternatively, you can name and store the subplots individually by using tuple
    unpacking for multiple `Axes`. Each row of subplots will need to be in its own
    tuple. You can then select a subplot using a name, versus a less-readable index.
    The following code reproduces [Figure 19-20](ch19.xhtml#ch019fig20):'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以通过使用元组拆包来单独命名和存储多个`Axes`的子图。每一行的子图需要放在自己的元组中。然后，你可以使用名称选择子图，而不是使用不易读的索引。以下代码重现了[图19-20](ch19.xhtml#ch019fig20)：
- en: '[PRE36]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, the `subplots()` method takes additional keywords, including figure
    keywords, that let you do things like share an axis among plots, adjust the figure
    size and layout, and so on ([Figure 19-21](ch19.xhtml#ch019fig21)):'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`subplots()`方法还接受其他关键词参数，包括图形关键词，允许你进行一些操作，比如在图表间共享坐标轴、调整图形的大小和布局等（[图19-21](ch19.xhtml#ch019fig21)）：
- en: '[PRE37]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: For more on these keywords, see the method’s documentation at *[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html)*.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于这些关键词的信息，请参阅该方法的文档，地址为 *[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html)*。
- en: '![Image](../images/19fig21.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig21.jpg)'
- en: '*Figure 19-21: A 2×2 grid of subplots that share x- and y-axes*'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-21：共享x轴和y轴的2×2子图网格*'
- en: '***Building Multipanel Displays Using GridSpec***'
  id: totrans-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用GridSpec构建多面板显示***'
- en: The `matplotlib.gridspec` module (described in “Building Multipanel Displays
    Using GridSpec” on [page 549](ch19.xhtml#ch00lev2sec254)) also works with the
    object-oriented style. Let’s use it now to reproduce the Martian multipanel display
    in [Figure 19-14](ch19.xhtml#ch019fig14). This will let you directly compare the
    `pyplot` and object-oriented approaches.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '**Reconstructing the Martian Multipanel Display**'
  id: totrans-340
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To start fresh, restart the kernel in an open console (**Kernel** ▸ **Restart
    Current Kernel**) or exit and reopen the console. If you’re restarting, use CTRL-L
    to clear the window. To restart in Jupyter Notebook, use **Kernel** ▸ **Restart
    & Clear Output**.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, import NumPy and Matplotlib and set up a 3×3 grid using `GridSpec`. In
    the console, press CTRL-ENTER after line `In [39]` to prevent generation of the
    plot (in Notebook, use ENTER):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, build the histogram subplot. Name it `ax1` and position it using the
    grid indexes in [Figure 19-10](ch19.xhtml#ch019fig10):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Continuing to use CTRL-ENTER in the console, build the contour map, as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, we’ll build the scatterplot located in the upper-right corner of the
    display:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the code for the pie wedge labels and the gaps between pie wedges. This
    reduces code duplication because these variables are the same for all the charts:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finish the charts and then call the `Figure` object’s `tight_layout()` method
    to prevent the plots from crowding one another. Generate the display by pressing
    ENTER or SHIFT-ENTER in the console, and CTRL-ENTER in Jupyter Notebook:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note that the main changes from the `pyplot` approach are some method names,
    such as `set_title()` for `title()`, and the use of subplot names. The resulting
    display should be identical to [Figure 19-14](ch19.xhtml#ch019fig14), except for
    some variations in the randomly generated data.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: To change the width and height of the subplots, refer to the section “Changing
    the Width and Height of the Subplots” on [page 554](ch19.xhtml#ch00lev3sec81).
    This task works the same for both plotting approaches.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: The `matplotlib.gridspec` module gives you a lot of control over the placement
    of subplots in multipanel displays. As always with Python, however, there are
    multiple ways to do the same thing, and we’ll look at one of these alternatives
    next.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '**Higher-Level Alternatives to GridSpec**'
  id: totrans-357
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The Matplotlib library includes some higher-level alternatives to using `GridSpec`.
    With the `subplot_mosaic()` method, for example, you can lay out your grid using
    logical names like `upper_left` and `right`. You then can use these to index the
    `axs` object, as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This produces the display in [Figure 19-22](ch19.xhtml#ch019fig22). The subplots
    are laid out in the order in which they are assigned in line `In [40]`.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig22.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-22: Subplots created using the plt.subplot_mosaic() method*'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: To read more about `subplot_mosaic()` and other multipaneling options, see the
    sections “Working with Multiple Figures and Axes” at *[https://matplotlib.org/stable/tutorials/introductory/usage.html#sphx-glr-tutorials-introductory-usage-py/](https://matplotlib.org/stable/tutorials/introductory/usage.html#sphx-glr-tutorials-introductory-usage-py/)*
    and “Arranging Multiple Axes in a Figure” at *[https://matplotlib.org/stable/tutorials/intermediate/arranging_axes.html](https://matplotlib.org/stable/tutorials/intermediate/arranging_axes.html)*.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '***Insetting Plots***'
  id: totrans-364
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An *inset* plot—that is, a plot within a plot—is useful for showing greater
    detail in part of an enclosing plot, a different treatment of the same data, the
    geographical location of the data, and so on. An inset plot is like a subplot,
    but it’s built using a different technique.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'To make an inset, you first make a `Figure` object and then add `Axes` to it
    using the `add_axes()` method. Enter the following code in the console or in Notebook;
    ignore the imports if you’ve already executed them in your current session:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, set up the `Figure` and `Axes` objects. In this case, `ax2` represents
    the inset plot:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The arcane-looking list passed to the `add_axes()` method represents the `Axes`
    `rect` parameter. This defines the dimensions of the rectangular `Axes` object.
    The values range from 0 to 1 and represent, respectively, the left, bottom, width,
    and height of the rectangle.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: 'Now make the main plot and the inset:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You should get a plot like the one depicted in [Figure 19-23](ch19.xhtml#ch019fig23).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig23.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-23: A plot with an inset plot*'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '***Plotting in 3D***'
  id: totrans-376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Although designed primarily for 2D plotting, Matplotlib includes an `Axes3D`
    class that supports 3D scatterplots, histograms, surfaces, contour maps, and more.
    Here’s an example:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The key is to pass the `projection=''3d''` keyword when creating an `Axes`
    object ➊. You can also use this alternate two-line syntax if you find it easier
    to read:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Both will yield the plot shown in [Figure 19-24](ch19.xhtml#ch019fig24).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig24.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-24: A 3D line plot*'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: To read more about 3D plotting, visit *[https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html](https://matplotlib.org/stable/tutorials/toolkits/mplot3d.html)*.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '***Animating Plots***'
  id: totrans-385
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Scientists commonly study dynamic phenomena such as ocean currents and caribou
    migrations. Whether based on actual observations or simulated behavior, the ability
    to visualize movement in plots, a process called *animation*, can lead to insights
    and better understanding of the phenomena. Animations also enhance presentations,
    helping your audience to better understand the points you’re trying to convey.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect, Matplotlib provides numerous ways for animating plots.
    For simple animations, you can manually update and plot variables by iterating
    in a loop. For convenience and for working with more complicated animations, you
    can use the `matplotlib.animation` module (*[https://matplotlib.org/stable/api/animation_api.html](https://matplotlib.org/stable/api/animation_api.html)*).
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期待的，Matplotlib 提供了多种方式来动画化图表。对于简单的动画，你可以通过在循环中手动更新和绘制变量。为了方便并处理更复杂的动画，你可以使用`matplotlib.animation`模块
    (*[https://matplotlib.org/stable/api/animation_api.html](https://matplotlib.org/stable/api/animation_api.html)*).
- en: The `animation` module contains the `FuncAnimation` class, which animates a
    visualization by repeatedly calling a function. The `ArtistAnimation` class makes
    an animation using a fixed set of `Artist` objects such as a precomputed list
    of images. In general, `FuncAnimation` is simpler to use and more efficient. We
    won’t cover `ArtistAnimation` here.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation`模块包含`FuncAnimation`类，它通过重复调用一个函数来动画化一个可视化。`ArtistAnimation`类通过使用固定的一组`Artist`对象（例如预计算的图像列表）来制作动画。通常，`FuncAnimation`更易于使用且效率更高。我们在这里不讨论`ArtistAnimation`。'
- en: '**Animating Plots Using a for Loop**'
  id: totrans-389
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用 for 循环动画化图表**'
- en: 'Perhaps the simplest way to animate a plot is to use a `for` loop. Let’s give
    this a try using the sine wave example from “Working with Subplots” on [page 545](ch19.xhtml#ch00lev2sec253).
    In the console, enter the following code, using CTRL-ENTER after the first line
    and ENTER after the last line:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最简单的动画化图表的方法是使用`for`循环。让我们尝试使用《处理子图》中的正弦波示例，[第545页](ch19.xhtml#ch00lev2sec253)。在控制台中输入以下代码，在第一行后使用
    CTRL-ENTER，在最后一行后使用 ENTER：
- en: '[PRE50]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Start by importing NumPy and Matplotlib, as usual, but this time, add the Standard
    Library’s `time` module ➊. The `time.sleep()` method will let us control the speed
    of the animation later.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时，像往常一样导入 NumPy 和 Matplotlib，但这次需要加入标准库的`time`模块 ➊。`time.sleep()`方法将帮助我们稍后控制动画的速度。
- en: We’ll show the animation in the external Qt window, so call the `%matplotlib`
    `qt` magic command. If you’re working in Jupyter Notebook, you can use the `%matplotlib
    notebook` command to show the animation within the notebook.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在外部 Qt 窗口中展示动画，所以调用`%matplotlib` `qt`魔法命令。如果你在 Jupyter Notebook 中工作，你可以使用`%matplotlib
    notebook`命令在 notebook 中显示动画。
- en: Next, reproduce the time (`t`) and `amplitude` data from before and then assign
    the `fig` and `ax` variables. To animate plots using a `for` loop, you need to
    update the displayed data before each iteration of the loop. Because we’re plotting
    a line, assign a `line` variable to the plot ➋. Note the comma after `line`, which
    indicates that this is a tuple unpacking process.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，重新生成之前的时间（`t`）和`amplitude`数据，然后分配`fig`和`ax`变量。要使用`for`循环动画化图表，你需要在每次循环迭代之前更新显示的数据。因为我们绘制的是一条线，所以需要为图表分配一个`line`变量
    ➋。注意`line`后的逗号，这表示这是一个元组解包过程。
- en: Start a `for` loop that runs 30 times. With each loop, shift the time series
    one second by adding the loop number (`i`) to the y data using the equation `np.sin(t
    + i)`. Assign the result to the `updated_amp` variable. To update the `line` object
    prior to plotting, call its `set_ydata()`method and pass it the `updated_amp`
    variable ➌.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个运行 30 次的`for`循环。在每次循环中，通过将循环次数（`i`）添加到 y 数据中，使用方程`np.sin(t + i)`将时间序列向前移动一秒。将结果赋值给`updated_amp`变量。在绘图之前，调用`line`对象的`set_ydata()`方法并传入`updated_amp`变量
    ➌。
- en: To update a `Figure` object that has been altered but not automatically redrawn,
    call `canvas.draw()`. Follow this with the `canvas_flush_events()`method, which
    clears the plot so that the next iteration can start with a blank screen.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新已经更改但没有自动重绘的`Figure`对象，调用`canvas.draw()`。接着使用`canvas_flush_events()`方法，清除当前图表，以便下一次迭代可以从空白屏幕开始。
- en: Finish by calling the `time.sleep()` method and passing it `0.1`. This is the
    number of seconds to suspend program execution. Feel free to play around with
    this number to see the effect on the animation; the larger the number, the slower
    it will proceed.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`time.sleep()`方法并传入`0.1`。这是暂停程序执行的秒数。可以随意调整这个数字，看看它对动画的影响；数字越大，动画进行得越慢。
- en: To run the animation, in the console, press ENTER; in Jupyter Notebook, press
    CTRL-ENTER. To return to inline plotting, remember to use the `%matplotlib inline`
    magic command.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行动画，在控制台中按下 ENTER；在 Jupyter Notebook 中按下 CTRL-ENTER。要返回内联绘图，记得使用`%matplotlib
    inline`魔法命令。
- en: 'You also can accomplish this type of real-time animation by using the `pyplot`
    approach. Here’s an example in which we continuously update a scatterplot by adding
    a new point calculated with the quadratic equation. Run it in the Qt console or
    the Spyder text editor:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note the use of `plt.pause()` in place of `time.sleep()`. The `plt.pause()`
    method takes seconds as an argument and runs the GUI event loop for this time
    interval. An active figure will be updated and displayed before the pause, and
    the GUI event loop (if any) will run during the pause.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: As the animation runs, the x- and y-axes automatically adjust to accommodate
    the expanding plot limits. When the animation finishes, you should see a plot
    like the one shown in [Figure 19-25](ch19.xhtml#ch019fig25).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig25.jpg)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-25: The finished pyplot animation*'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: For complex animations, the Matplotlib documentation recommends using the `matplotlib.animation`
    module rather than a `for` loop. We’ll cover this technique next.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '**Animating Plots Using the FuncAnimation Class**'
  id: totrans-406
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `FuncAnimation` class makes an animation by repeatedly calling a function.
    It provides a more formal and flexible approach than the `for` loop process used
    in the previous section.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s animate two lines in the same plot using the object-oriented style. Enter
    the following in the console or Jupyter Notebook (if you’re using Notebook, replace
    the `%matplotlib qt` magic with `%matplotlib notebook`):'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Add `FuncAnimation` from the `matplotlib.animation` module to the imports ➊.
    Next, use NumPy to generate some data for plotting. The `scaler` array will let
    you alter the `x` and `y` data, giving you something new to print as the animation
    runs ➋.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Set up the `fig` and `ax` objects and then make a plot for each line, setting
    the color for the first to black and the second to red. Also set the line width
    of the first line to 2, and the line style for the second to dashed.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: For both lines, add a zero index `[0]` to the end of the plotting code ➌. The
    plot command returns a sequence of line objects, and we want only the first item
    in the sequence. This represents an alternative to the tuple unpacking approach
    (`line, = ax.plot(t, amplitude)`) used to animate the sine wave in the previous
    section.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to define a function that will update the data to create each
    frame of the animation. We’ll call this function `animate`, with a parameter named
    `frame`. The argument for this parameter will be the `scalar` array, which will
    be passed by the `frames` parameter in the `FuncAnimation()` class.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: Use the `set_ydata()` method on each line and pass it the `y` data divided by
    the `scaler` array. For the second line, multiply `scaler` by a negative scalar
    so that `line2` will look different than `line1`.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: To complete the code, call `FuncAnimation()` and pass it the `Figure` object
    on which it will draw (`fig`), the user-defined function (`animate`), and a `frames`
    and `interval` argument. The frames argument represents the source of the data
    passed to the user-defined function for each frame of the animation. It can be
    either an iterable, an integer, a generator function, or `None`. The `interval`
    argument sets the delay time between frames in milliseconds. Increasing this number
    will slow down the animation.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '*You can assign the scalar NumPy array directly to the frames parameter, like
    so: FuncAnimation(fig, animate, frames=np.arange(1, 10, 0.1), interval=20). Although
    this removes the need for the scalar variable, the code is arguably less readable.*'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Run the code by pressing ENTER in the console, or CTRL-ENTER in Jupyter Notebook.
    You should see two animated line plots, as shown in [Figure 19-26](ch19.xhtml#ch019fig26).
    To stop the animation, click the **Close** button at the upper right of the plot
    window. Otherwise, when calling `FuncAnimation()`, set `repeat=False` to stop
    the animation after a single run-through.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig26.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-26: A screen capture from the functional animation*'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'An optional parameter in `FuncAnimation()` worth mentioning is `fargs`. Short
    for *functional arguments*, you use this when your user-defined function takes
    multiple arguments. The first parameter is always reserved for the `frames` parameter
    in `FuncAnimation()`, but you can pass subsequent parameters (those that follow
    `frames`) as an ordered tuple of arguments, such as the following:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, to save the animation as a .*gif*, use the `save()` method with optional
    frames per second (`fps`) and dots-per-inch (`dpi`) arguments, as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Other supported file formats include *.avi*, *.mp4*, *.mov*, and other save
    options include the methods `to_html5_video()` and `to_jshtml()`. To learn more
    about the methods and parameters of `FuncAnimation`, visit *[https://matplotlib.org/stable/api/_as_gen/matplotlib.animation.FuncAnimation.html](https://matplotlib.org/stable/api/_as_gen/matplotlib.animation.FuncAnimation.html)*.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling Plots**'
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up until now, you’ve changed the default settings for a plot, such as the line
    width or marker color, by passing new values as you made the plot. But what if
    you want to set these values for multiple plots *at the same time* so that all
    your lines are colored black? Or what if you’d like to *cycle through* a defined
    order of colors?
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Well, one way to do this is to set the parameters at runtime, using an instance
    of the `RcParams` class. The name of this class stands for *runtime configuration
    parameters*, and you run it from a notebook, script, or console using either the
    `pyplot` approach or the object-oriented style. It stores settings in the `matplotlib.rcParams`
    variable, which is a dictionary-like object.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: There’s a very long list of configurable parameters, which you can view in multiple
    ways. To see a list of valid parameters, visit *[https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams/](https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams/)*.
    To see more details about the parameters, run `import matplotlib as mpl` followed
    by `print(mpl.matplotlib_fname())`. This will reveal the path to the *matplotlibrc*
    file on your computer, which you then can open and view.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 有一长串可配置的参数，你可以通过多种方式查看。要查看有效的参数列表，请访问 *[https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams/](https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams/)*。要查看有关这些参数的更多详细信息，运行
    `import matplotlib as mpl`，然后运行 `print(mpl.matplotlib_fname())`。这将显示你计算机上 *matplotlibrc*
    文件的路径，你可以打开并查看该文件。
- en: '***Changing Runtime Configuration Parameters***'
  id: totrans-430
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***更改运行时配置参数***'
- en: 'Let’s look at a `pyplot` example in which we standardize the size of figures,
    use black for all plotted lines, and cycle through two different line styles.
    This means that the first line plotted will always have a certain consistent style,
    and that the second plotted will have another consistent style. In the console,
    enter the following:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个 `pyplot` 示例，在这个示例中，我们标准化了图形的大小，使用黑色绘制所有线条，并循环使用两种不同的线条样式。这意味着绘制的第一条线将始终采用某种一致的样式，而第二条线将采用另一种一致的样式。在控制台中输入以下内容：
- en: '[PRE55]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Notice here that we import Matplotlib as `mpl`. Importing Matplotlib in this
    manner gives us access to more features than in the `pyplot` module alone. We
    also import `cycler`. The `Cycler` class will let us specify which colors and
    other style properties we want to cycle through when making multidata plots. You
    can read about it at *[https://matplotlib.org/stable/tutorials/intermediate/color_cycle.html](https://matplotlib.org/stable/tutorials/intermediate/color_cycle.html)*.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的是，我们将 Matplotlib 导入为 `mpl`。以这种方式导入 Matplotlib 可以让我们访问比仅使用 `pyplot` 模块更多的功能。我们还导入了
    `cycler`。`Cycler` 类将让我们在制作多数据图时指定想要循环使用的颜色和其他样式属性。你可以在 *[https://matplotlib.org/stable/tutorials/intermediate/color_cycle.html](https://matplotlib.org/stable/tutorials/intermediate/color_cycle.html)*
    中阅读相关内容。
- en: 'To access a property in `rcParams`, treat it like a dictionary key. You can
    find the valid parameter names by entering `mpl.rcParams.keys()` or by visiting
    the sources listed in the previous section. In the next three lines, we set the
    figure size, line color, and line styles:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 `rcParams` 中的一个属性，可以像访问字典键一样处理它。你可以通过输入 `mpl.rcParams.keys()` 或访问上一节中列出的来源来查找有效的参数名称。在接下来的三行中，我们设置了图形大小、线条颜色和线条样式：
- en: '[PRE56]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '**NOTE**'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can also set parameters through pyplot, using syntax like plt.rcParams[''lines.color'']
    = ''black''.*'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以通过 pyplot 设置参数，使用类似 `plt.rcParams[''lines.color''] = ''black''` 的语法。*'
- en: To cycle through the line styles, use the `axes.prop_cycle` key and then pass
    the `cycler` factory function the parameter (`'linestyle'`) and a list of the
    styles (solid and dotted). These defaults have now been reset for all plots that
    you will make in the current session.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 要循环使用线条样式，可以使用 `axes.prop_cycle` 键，然后将 `cycler` 工厂函数传递给参数（`'linestyle'`）和样式列表（实线和虚线）。这些默认设置已经为你当前会话中的所有图形重置。
- en: 'Finish by generating some data and plotting it:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，生成一些数据并绘制它：
- en: '[PRE57]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Normally, this code would produce a plot with two solid lines, one blue and
    one orange. Now, however, you get two black lines distinguished by different line
    styles ([Figure 19-27](ch19.xhtml#ch019fig27)).
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这段代码会生成一个有两条实线的图形，一条蓝色，另一条橙色。然而，现在，你会看到两条黑色的线，通过不同的线条样式区分（[图 19-27](ch19.xhtml#ch019fig27)）。
- en: '![Image](../images/19fig27.jpg)'
  id: totrans-442
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/19fig27.jpg)'
- en: '*Figure 19-27: A plot built with global figure size, line color, and line style
    parameters*'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-27：使用全局图形大小、线条颜色和线条样式参数构建的图形*'
- en: Note that if you were to plot *three* lines in the previous plot, the third
    line would cycle back to using the solid line style, and you’d have one dotted
    and two solid lines. If you want three different styles, you’ll need to add the
    extra style to the cycler.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你在之前的图形中绘制 *三* 条线，那么第三条线将回到使用实线样式，你将会看到一条虚线和两条实线。如果你想要三种不同的样式，你需要将额外的样式添加到循环器中。
- en: 'For convenience, Matplotlib comes with functions for simultaneously modifying
    multiple settings in a single group using keyword arguments. Here’s an example,
    using the previous plotting data, in which we start by resetting the Matplotlib
    “factory defaults”:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，Matplotlib 提供了通过关键字参数同时修改多个设置的函数。以下是一个例子，使用之前的绘图数据，我们首先重置 Matplotlib 的“工厂默认设置”：
- en: '[PRE58]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, let’s use the `rc()` convenience function to change the default line width
    to `5` and the line style to dash-dot:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This produces the plot in [Figure 19-28](ch19.xhtml#ch019fig28).
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig28.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-28: The new plotting parameters set with a convenience function*'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use a style for only a specific block of code, the style package
    provides a context manager for limiting your changes to a specific scope. For
    more on this, see “Temporary Styling” at *[https://matplotlib.org/stable/tutorials/introductory/customizing.html](https://matplotlib.org/stable/tutorials/introductory/customizing.html)*.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating and Using a Style File***'
  id: totrans-453
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can save changes to the Matplotlib default style in a file. This lets you
    standardize plots for a report or presentation and share the customization within
    a project team. It also reduces code redundancy and complexity by letting you
    preset certain plot parameters and encapsulate them in an external file.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a simple style file that sets some standards for plots, such as
    the figure size and resolution, use of a background grid, and the typeface and
    size to use for titles, axes labels, and tick labels. In the Spyder text editor,
    or any text editor, enter the following:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**NOTE**'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '*For guidance on creating style files, use the matplotlibrc file on your computer,
    mentioned previously. You can also find a copy at [https://matplotlib.org/stable/tutorials/introductory/customizing.html](https://matplotlib.org/stable/tutorials/introductory/customizing.html).*'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'For Matplotlib to easily find this file, you need to save it in a specific
    location. First, find the location of the *matplotlibrc* file by entering the
    following in the console:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This shows you the path to the *mpl-data* folder, which contains the *matplotlibrc*
    file and a folder named *stylelib*, among others. Save your style file into the
    *stylelib* folder as *scientific_style.mplstyle* (replacing the .*txt* extension).
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '*If Matplotlib has trouble finding this file later, you might need to restart
    the kernel. In the console, click ***Kernel*** ▸ ***Restart Current Kernel***.
    In Jupyter Notebook, click ***Kernel*** ▸ ***Restart***.*'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s use this file to create a standardized plot. After importing `pyplot`,
    use its `style.use()` method to load the style file *without* its file extension:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Next, generate an empty figure using the object-oriented style. You should see
    a plot like [Figure 19-29](ch19.xhtml#ch019fig29).
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '![Image](../images/19fig29.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-29: An empty standardized plot generated by the style file*'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: When you saved your style file, you might have noticed that the *stylelib* folder
    was full of preexisting *mplstyle* files. These files create many different plot
    formats, and you can look through them for clues on how to write your own style
    files. In the next section, we’ll use one of these files to override some of Matplotlib’s
    default values.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: '***Applying Style Sheets***'
  id: totrans-471
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Besides letting you customize your own plots, Matplotlib provides predefined
    *style sheets* that you can import by using `style.use()`. Style sheets look the
    same as the *matplotlibrc* file, but within one, you can set only `rcParams` that
    are related to the actual style of the plot. This makes style sheets portable
    between different machines because there’s no need to worry about uninstalled
    dependencies. Only a few `rcParams` can’t be reset, and you can view a list of
    these at *[https://matplotlib.org/stable/api/style_api.html#matplotlib.style.use/](https://matplotlib.org/stable/api/style_api.html#matplotlib.style.use/)*.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: You can see examples of the available style sheets at *[https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html)*.
    These take the form of a strip of thumbnails, as shown in [Figure 19-30](ch19.xhtml#ch019fig30).
    Some of the style sheets emulate popular plotting libraries like seaborn and ggplot.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig30.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-30: Example of the grayscale style sheet*'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '*An important style sheet to be aware of is the *s*eaborn-colorblind sheet.
    This style sheet uses “colorblind-safe” colors designed for the 5 to 10 percent
    of the population that suffers from color blindness.*'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try out a scatterplot using the grayscale style sheet that ships with
    Matplotlib. First, in either the console or Jupyter Notebook, import NumPy and
    Matplotlib and then call the grayscale file:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now, generate some dummy data for making two different point clouds:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Finish by setting up and executing the plot using the `pyplot` approach. Use
    log scales for both axes.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: You should see a plot similar to the one in [Figure 19-31](ch19.xhtml#ch019fig31).
    The point locations might differ due to the use of randomly generated data.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/19fig31.jpg)'
  id: totrans-485
  prefs: []
  type: TYPE_IMG
- en: '*Figure 19-31: A scatterplot made using the grayscale style sheet*'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: Note the use of the `alpha` keyword when calling `plt.scatter()` ➊. The `alpha`
    attribute controls opacity, letting you regulate the transparency of a line or
    marker. A value of `1` is completely opaque.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: Making one dataset slightly transparent helps to resolve *over-posting*, wherein
    markers from one dataset plot on top of markers from other datasets, obscuring
    the over-posted markers. Semi-transparent markers also become darker as they stack
    on top of one another, letting you visualize data density (such as the blacker
    circles in [Figure 19-31](ch19.xhtml#ch019fig31)).
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '*To control the plot order of markers, use the zorder parameter (such as zorder=2)
    when calling plt.scatter(). Artists with higher zorder values will post over those
    with lower values.*'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to our style sheet: if you open the *grayscale.mplstyle*, you’ll see that
    it looks a lot like the *scientific_style.mplstyle* file that we made in “Creating
    and Using a Style File” on [page 576](ch19.xhtml#ch00lev2sec262). So, if an existing
    style sheet is not quite right for your purposes, you can always copy the file,
    edit it, and save it as a new style sheet!'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '**TEST YOUR KNOWLEDGE**'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '6.  True or False: The ability to manipulate spines is an advantage of the
    `pyplot` approach.'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: 7.  Add the summary title “Martian Goethite, Hematite, and Jarosite Distributions”
    to the display in [Figure 19-14](ch19.xhtml#ch019fig14). Use whichever plotting
    approach you prefer.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '8.  Use the following code to produce three datasets for plotting: `np.random.normal(0,
    1, 50).cumsum()`. Generate three subplots in a row and use a `for` loop to populate
    each with a different dataset. Give each subplot a unique title and plot the data
    using black crosses.'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: 9.  Generate a 2D NumPy array of randomized data using `np.random.rand(4, 4)`.
    Then, plot a heatmap using `heat = ax.imshow(data)`. Animate the heatmap using
    a `for` loop and a `range` of 30.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 10.  Use the equation `velocity = 9.81 * time` to calculate the speed of a falling
    object. Let the object fall for 15 seconds, and for every second, post its position
    and velocity in a single plot, using a different y-axis for each.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  id: totrans-498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal of this chapter was to introduce the powerful Matplotlib plotting library
    and (hopefully) address some of its more frustrating aspects. A major source of
    confusion is that there are two main interfaces for making plots; for consistency,
    you should choose one and stick with it.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: The `pyplot` approach works with implicit, “currently active,” `Figure` and
    `Axes` objects, in which the `Figure` is a blank canvas, and the `Axes` holds
    plot elements like lines, legends, titles, and so on. To simplify plotting, `pyplot`
    creates these objects behind the scenes.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: The `pyplot` approach works well when using Matplotlib interactively and in
    small scripts, but when building larger applications, the object-oriented style
    is preferred. Explicitly assigning `Figure` and `Axes` objects to variables will
    help you keep track of multiple plots and ensure that the code producing them
    is as clear as possible. You’ll also have more control over certain plot elements.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: For simpler, more automated plotting than the `pyplot` approach, you can use
    the seaborn package, which is a wrapper around Matplotlib. Additionally, the pandas
    data analysis package wraps Matplotlib for even easier, though less sophisticated,
    plotting. [Chapter 16](ch16.xhtml) included overviews of seaborn and pandas plotting,
    and we’ll look at them again in the next chapter.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: For further study and to learn advanced Matplotlib features, check out the tutorials
    and user guide at the official website (*[https://matplotlib.org/](https://matplotlib.org/)*)
    and at Real Python (*[https://realpython.com/python-matplotlib-guide/](https://realpython.com/python-matplotlib-guide/)*).
    You can find useful cheat sheets at *[https://matplotlib.org/cheatsheets/](https://matplotlib.org/cheatsheets/)*.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
