["```py\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```", "```py\n>>> import itertools\n>>> itertools\n<module 'itertools' from '/usr/.../>\n```", "```py\n>>> itertools = __import__(\"itertools\")\n>>> itertools\n<module 'itertools' from '/usr/.../>\n```", "```py\n>>> import itertools as it\n>>> it\n<module 'itertools' from '/usr/.../>\n```", "```py\n>>> it = __import__(\"itertools\")\n>>> it\n<module 'itertools' from '/usr/.../>\n```", "```py\n>>> random = __import__(\"RANDOM\".lower())\n>>> random\n<module 'random' from '/usr/.../>\n```", "```py\n>>> import sys\n>>> import os\n>>> sys.modules['os']\n<module 'os' from '/usr/lib/python2.7/os.pyc'>\n```", "```py\n>>> import sys\n>>> sys.path.append('/foo/bar')\n```", "```py\n$ PYTHONPATH=/foo/bar python\n>>> import sys\n>>> '/foo/bar' in sys.path\nTrue\n```", "```py\nclass MetaImporter(object):\n    def find_on_path(self, fullname):\n        fls = [\"%s/__init__.hy\", \"%s.hy\"]\n        dirpath = \"/\".join(fullname.split(\".\"))\n\n        for pth in sys.path:\n            pth = os.path.abspath(pth)\n            for fp in fls:\n                composed_path = fp % (\"%s/%s\" % (pth, dirpath))\n                if os.path.exists(composed_path):\n                    return composed_path\n\n    def find_module(self, fullname, path=None):\n        path = self.find_on_path(fullname)\n        if path:\n            return MetaLoader(path)\n\nsys.meta_path.append(MetaImporter())\n```", "```py\nclass MetaLoader(object):\n    def __init__(self, path):\n        self.path = path\n\n    def is_package(self, fullname):\n        dirpath = \"/\".join(fullname.split(\".\"))\n        for pth in sys.path:\n            pth = os.path.abspath(pth)\n            composed_path = \"%s/%s/__init__.hy\" % (pth, dirpath)\n            if os.path.exists(composed_path):\n                return True\n        return False\n\n    def load_module(self, fullname):\n        if fullname in sys.modules: return sys.modules[fullname]\n\n        if not self.path:\n            return\n\n        sys.modules[fullname] = None\n     ➊ mod = import_file_to_module(fullname, self.path)\n\n        ispkg = self.is_package(fullname)\n\n        mod.__file__ = self.path\n        mod.__loader__ = self\n        mod.__name__ = fullname\n\n        if ispkg:\n            mod.__path__ = []\n            mod.__package__ = fullname\n        else:\n            mod.__package__ = fullname.rpartition('.')[0]\n\n        sys.modules[fullname] = mod\n        return mod\n```", "```py\n$ pip install --user voluptuous\nDownloading/unpacking voluptuous\n  Downloading voluptuous-0.8.3.tar.gz\n  Storing download in cache at ./.cache/pip/https%3A%2F%2Fpypi.python.org%2Fpa\nckages%2Fsource%2Fv%2Fvoluptuous%2Fvoluptuous-0.8.3.tar.gz\n  Running setup.py egg_info for package voluptuous\n\nRequirement already satisfied (use --upgrade to upgrade): distribute in /usr/\nlib/python2.7/dist-packages (from voluptuous)\nInstalling collected packages: voluptuous\n  Running setup.py install for voluptuous\n\nSuccessfully installed voluptuous\nCleaning up...\n```", "```py\n$ pip freeze\nBabel==1.3\nJinja2==2.7.1\ncommando=0.3.4\n--snip--\n```", "```py\n$ pip uninstall pika-pool\nUninstalling pika-pool-0.1.3:\n  /usr/local/lib/python2.7/site-packages/pika_pool-0.1.3.dist-info/\nDESCRIPTION.rst\n  /usr/local/lib/python2.7/site-packages/pika_pool-0.1.3.dist-info/INSTALLER\n  /usr/local/lib/python2.7/site-packages/pika_pool-0.1.3.dist-info/METADATA\n\n--snip--\nProceed (y/n)? y\n  Successfully uninstalled pika-pool-0.1.3\n```", "```py\n$ pip install -e .\nObtaining file:///Users/jd/Source/daiquiri\nInstalling collected packages: daiquiri\n  Running setup.py develop for daiquiri\nSuccessfully installed daiquiri\n```", "```py\n$ cat /usr/local/lib/python2.7/site-packages/daiquiri.egg-link\n/Users/jd/Source/daiquiri\n```", "```py\n$ python -c \"import sys; print('/Users/jd/Source/daiquiri' in sys.path)\"\nTrue\n```", "```py\n$ pip install -e git+https://github.com/jd/daiquiri.git\\#egg=daiquiri\nObtaining daiquiri from git+https://github.com/jd/daiquiri.git#egg=daiquiri\n  Cloning https://github.com/jd/daiquiri.git to ./src/daiquiri\nInstalling collected packages: daiquiri\n  Running setup.py develop for daiquiri\nSuccessfully installed daiquiri\n```"]