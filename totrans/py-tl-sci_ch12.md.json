["```py\nIn [1]: import os\n\nIn [2]: os.getcwd()\nOut[2]: 'C:\\\\Users\\\\hanna\\\\file_play'\n```", "```py\nIn [3]: os.chdir('C:\\\\Users\\\\hanna')\n\nIn [4]: os.getcwd()\nOut[4]: 'C:\\\\Users\\\\hanna'\n```", "```py\nIn [5]: os.chdir(r'C:\\Users\\hanna')\n\nIn [6]: os.getcwd()\nOut[6]: 'C:\\\\Users\\\\hanna'\n```", "```py\nIn [13]: path = '/Users/'\n\nIn [14]: path2 = os.path.join(path, 'hanna', 'file_play')\n\nIn [15]: path2\nOut[15]: '/Users/hanna\\\\file_play'\n\nIn [16]: os.chdir(path2)\n\nIn [17]: os.getcwd()\nOut[17]: 'C:\\\\Users\\\\hanna\\\\file_play'\n```", "```py\nIn [18]: path = 'C//Users//hanna'\n\nIn [19]: os.path.normpath(path)\nOut[19]: 'C\\\\Users\\\\hanna'\n```", "```py\nIn [20]: import os\n\nIn [21]: os.getcwd()\nOut[21]: 'C:\\\\Users\\\\hanna'\n\nIn [22]: os.chdir('file_play')\n\nIn [23]: os.getcwd()\nOut[23]: 'C:\\\\Users\\\\hanna\\\\file_play'\n```", "```py\nIn [24]: os.path.abspath('.')\nOut[24]: 'C:\\\\Users\\\\hanna\\\\file_play'\n```", "```py\nIn [25]: os.makedirs(r'test1/test2/test3')\n```", "```py\nIn [26]: from pathlib import Path\n\nIn [27]: a_path = Path('folder1', 'folder2', 'file1.txt')\n\nIn [28]: a_path\nOut[28]: WindowsPath('folder1/folder2/file1.txt')\n```", "```py\nIn [29]: print(a_path)\nfolder1\\folder2\\file1.txt\n```", "```py\nIn [30]: home = Path.home()\n\nIn [31]: another_path = Path(home, 'folder1', 'folder2', 'file1.txt')\n\nIn [32]: print(another_path)\nC:\\Users\\hanna\\folder1\\folder2\\file1.txt\n```", "```py\nIn [33]: another_path = Path.home() / 'folder1' / 'folder2' / 'file1.txt'\n\nIn [34]: another_path\nOut[34]: WindowsPath('C:/Users/hanna/folder1/folder2/file1.txt')\n```", "```py\nIn [35]: print(another_path.parent)\nC:\\Users\\hanna\\folder1\\folder2\n```", "```py\nIn [36]: print(another_path.parent.parent.parent)\nC:\\Users\\hanna\n```", "```py\nIn [37]: import shutil\n\nIn [38]: gb = 10**9\n\nIn [39]: total, used, free = shutil.disk_usage('.')\n\nIn [40]: print(f\"Total memory (GB): {total / gb:.2f}\")\nTotal memory (GB): 238.06\n\nIn [41]: print(f\"Used memory (GB): {used / gb:.2f}\")\nUsed memory (GB): 146.85\n\nIn [42]: print(f\"Free memory (GB): {free / gb:.2f}\")\nFree memory (GB): 91.22\n```", "```py\nIn [43]: shutil.move('.\\\\test1\\\\test2', '.\\\\')\nOut[43]: '.\\\\test2'\n```", "```py\nThis is the first line.\nThis is the second line.\nThis is the third line.\n```", "```py\nIn [44]: f = open('lines.txt', 'r')\n\nIn [45]: f\nOut[45]: <_io.TextIOWrapper name='lines.txt' mode='r' encoding='cp1252'>\n```", "```py\nIn [46]: f.close()\n```", "```py\nIn [47]: f = open('lines.txt', 'r')\n\nIn [48]: f.read(1)\nOut[48]: 'T'\n\nIn [49]: f.read(10)\nOut[49]: 'his is the'\n```", "```py\nIn [50]: f.tell()\nOut[50]: 11\n```", "```py\nIn [51]: f.seek(12)\nOut[51]: 12\n\nIn [52]: f.read(1)\nOut[52]: 'f'\n\nIn [53]: f.close()\n```", "```py\nIn [54]: f = open('lines.txt', 'r')\n\nIn [55]: f.read()\nOut[55]: 'This is the first line.\\nThis is the second line.\\nThis is the third\nline.'\n\nIn [56]: f.close()\n```", "```py\nIn [57]: f = open('lines.txt', 'r')\n\nIn [58]: print(f.read()) This is the first line.\nThis is the second line.\nThis is the third line.\n\nIn[59]: f.close()\n```", "```py\nIn [60]: f = open('lines.txt', 'r')\n\nIn [61]: print(f.readline())\nThis is the first line.\n\nIn [62]: print(f.readline())\nThis is the second line.\n\nIn [63]: print(f.readline())\nThis is the third line.\n\nIn [64]: f.close()\n```", "```py\nIn [65]: f = open('lines.txt', 'r')\n\nIn [66]: f.readline(1)\nOut[66]: 'T'\n\nIn [67]: f.readline(10)\nOut[67]: 'his is the'\n\nIn [68]: f.close()\n```", "```py\nIn [69]: f = open('lines.txt', 'r')\n\nIn [70]: lines = f.readlines()\n\nIn [71]: lines\nOut[71]: \n['This is the first line.\\n', 'This is the second line.\\n',\n'This is the third line.']\n\nIn [72]: f.close()\n```", "```py\nIn [73]: len(lines)\nOut[73]: 3\n\nIn [74]: for line in lines:\n    ...:     print(line)\nThis is the first line.\n\nThis is the second line.\n\nThis is the third line.\n```", "```py\nIn [75]: lines = [line.rstrip() for line in open('lines.txt', 'r')]\n\nIn [76]: lines\nOut[76]: \n['This is the first line.',\n'This is the second line.',\n'This is the third line.']\n```", "```py\nIn [77]: with open('lines.txt') as f:\n    ...:     lines = f.read()\n    ...:     print(lines)\nThis is the first line.\nThis is the second line.\nThis is the third line.\n```", "```py\nIn [78]: f = open('lines.txt', 'r')\n\nIn [79]: f.closed\nOut[79]: False\n\nIn [80]: f.close()\n\nIn [81]: f.closed\nOut[82]: True\n```", "```py\nIn [83]: f = open('haiku.txt', 'w')\n```", "```py\nIn [84]: f.write('Faraway cloudbanks\\n')\nOut[84]: 19\n\nIn [85]: f.write('That I let myself pretend\\n')\nOut[85]: 26\n\nIn [86]: f.write('Are distant mountains')\nOut[86]: 21\n\nIn [87]: f.close()\n```", "```py\nIn [88]: with open('haiku.txt', 'r') as f:\n    ...:     print(f.read()) Faraway cloudbanks\nThat I let myself pretend\nAre distant mountains\n```", "```py\nIn [89]: poem = ['In city fields\\n',\n    ...:         'Contemplating cherry trees\\n',\n    ...:         'Strangers are like friends\\n']\n\nIn [90]: with open('haiku.txt', 'w') as f:\n    ...:     f.writelines(poem)\n\nIn [91]: with open('haiku.txt', 'r') as f:\n    ...:     print(f.read())\nIn city fields\nContemplating cherry trees\nStrangers are like friends\n```", "```py\nIn [92]: with open('haiku.txt', 'a') as f:\n    ...:     f.write('                        --Issa')\n\nIn [93]: with open('haiku.txt', 'r') as f:\n    ...:     print(f.read())\nIn city fields\nContemplating cherry trees\nStrangers are like friends\n                        --Issa\n```", "```py\nIn [94]: with open('a_random_thought.txt', 'w') as f:\n    ...:     f.writelines(line for line in poem if line.startswith('C'))\n\nIn [95]: with open('a_random_thought.txt', 'r') as f:\n    ...:     print(f.read())\nContemplating cherry trees\n```", "```py\nIn [96]: from pathlib import Path\n\nIn [97]: p = Path('lines.txt')\n\nIn [98]: p.read_text()\nOut[98]: 'This is the first line.\\nThis is the second line.\\nThis is the third\nline.'\n```", "```py\nIn [99]: path = Path(Path.cwd() / 'test1' / 'another_haiku.txt')\n\nIn [100]: lines2 = 'Desolate moors fray\\nBlack cloudbank, broken, scatters\\nIn the pines, the\ngraves' In [101]: path.write_text(lines2)\nOut[101]: 78\n\nIn [102]: print(path.read_text())\nDesolate moors fray\nBlack cloudbank, broken, scatters\nIn the pines, the graves\n```", "```py\nIn [103]: import pickle\n\nIn [104]: dragon_prefix = ['Hungarian', 'Chinese', 'Peruvian']\n\nIn [105]: dragon_suffix = ['Horntail', 'Fireball', 'Vipertooth']\n\nIn [106]: f = open('dragons.dat', 'wb')\n\nIn [107]: pickle.dump(dragon_prefix, f)\n\nIn [108]: pickle.dump(dragon_suffix, f)\n\nIn [109]: f.close()\n```", "```py\nIn [110]: f = open('dragons.dat', 'rb')\n\nIn [111]: dragon_prefix = pickle.load(f)\n\nIn [112]: dragon_suffix = pickle.load(f)\n\nIn [113]: print(dragon_prefix)\n['Hungarian', 'Chinese', 'Peruvian']\n\nIn [114]: print(dragon_suffix)\n['Horntail', 'Fireball', 'Vipertooth']\n\nIn [115]: f.close()\n```", "```py\nIn [116]: import shelve\n\nIn [117]: s = shelve.open('dragon_shelf', 'c')\n\nIn [118]: type(s)\nOut[118]: shelve.DbfilenameShelf\n```", "```py\nIn [119]: s['prefix'] = ['Hungarian', 'Chinese', 'Peruvian']\n\nIn [120]: s['suffix'] = ['Horntail', 'Fireball', 'Vipertooth']\n\nIn [121]: s.close()\n```", "```py\nIn [122]: s = shelve.open('dragon_shelf', 'r')\n\nIn [123]: type(s['prefix'])\nOut[123]: list\n\nIn [124]: print(f\"Dragon suffixes: {s['suffix']}\")\nDragon suffixes: ['Horntail', 'Fireball', 'Vipertooth']\n\nIn [125]: s.close()\n```", "```py\nIn [126]: with shelve.open('dragon_shelf', 'r') as s:\n     ...:     print(type(s['prefix']))\n<class 'list'>\n```", "```py\nValueError: invalid operation on closed shelf\n```", "```py\nIn [127]: with shelve.open('dragon_shelf', 'r') as s:\n     ...:     print(list(s.keys()))\n['prefix', 'suffix']\n```", "```py\nIn [128]: with shelve.open('dragon_shelf', 'r') as s:\n     ...:     print(s.items())\nItemsView(<shelve.DbfilenameShelf object at 0x000001D3956BAF70>)\n```", "```py\nIn [129]: with shelve.open('dragon_shelf', 'r') as s:\n     ...:     for item in s.items():\n     ...:         print(item)\n('prefix', ['Hungarian', 'Chinese', 'Peruvian'])\n('suffix', ['Horntail', 'Fireball', 'Vipertooth'])\n```", "```py\nIn [130]: import json\n\nIn [131]: crew = dict(Mercury=1, Gemini=2, Apollo=3)\n\nIn [132]: crew\nOut[132]: {'Mercury': 1, 'Gemini': 2, 'Apollo': 3}\n\nIn [133]: capsules_data = json.dumps(crew)\n\nIn [134]: capsules_data\nOut[134]: '{\"Mercury\": 1, \"Gemini\": 2, \"Apollo\": 3}'\n\nIn [135]: with open('capsules_data.json', 'w') as f:\n    ...:      f.write(capsules_data)\n```", "```py\nIn [136]: with open('capsules_data.json', 'r') as f:\n     ...:     crew = json.load(f)\n\nIn [137]: print(f\"The Mercury capsule had {crew['Mercury']} seat.\")\nThe Mercury capsule had 1 seat.\n\nIn [138]: print(f\"The Apollo capsule had {crew['Apollo']} seats.\")\nThe Apollo capsule had 3 seats.\n```", "```py\nIn [139]: import json\n\nIn [140]: t = (1, 2, 3)\n\nIn [141]: type(t)\nOut[141]: tuple\n\nIn [142]: t_json = json.dumps(t)\n\nIn [143]: t_json\nOut[143]: '[1, 2, 3]'\n\nIn [144]: t2 = json.loads(t_json)\n\nIn [145]: t2\nOut[145]: [1, 2, 3]\n\nIn [146]: type(t2)\nOut[146]: list\n```", "```py\nIn [147]: t2 = tuple(t2)\n\nIn [148]: t2\nOut[148]: (1, 2, 3)\n\nIn [149]: type(t2)\nOut[149]: tuple\n```", "```py\nIn [150]: try:\n     ...:     with open('fluffybunnyfeet.lol', 'r') as f:\n     ...:         data = f.read() ...: except OSError as e:\n     ...:     print(e)\n     ...: else:\n     ...:     print('File successfully loaded.')\n     ...: finally:\n     ...:     print('File load process complete.')\n[Errno 2] No such file or directory: 'fluffybunnyfeet.lol'\nFile load process complete.\n```", "```py\nIn [151]: try:\n     ...:     with open('haiku.txt', 'r') as f:\n     ...:         data = f.read()\n     ...: except OSError as e:\n     ...:     print(e)\n     ...: else:\n     ...:     print('File successfully loaded.')\n     ...: finally:\n     ...:     print('File load process complete.')\nFile successfully loaded.\nFile load process complete.\n```"]