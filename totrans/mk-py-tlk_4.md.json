["```py\n**pip install yahoo_fin**\n```", "```py\nfrom yahoo_fin import stock_info as si\n\n# Start an infinite loop\n1 while True:\n    # Obtain ticker symbol from you\n ticker = input(\"Which stock (ticker symbol) are you looking for?\\n\")\n    # If you want to stop, type in \"done\"\n  2 if ticker == \"done\":\n        break\n    # Otherwise, type in a stock ticker symbol\n    else:\n        # Obtain stock price from Yahoo!\n      3 price = si.get_live_price(ticker)\n        # Print out the stock price\n        print(f\"The stock price for {ticker} is {price}.\")\n```", "```py\nWhich stock (ticker symbol) are you looking for?\n**MSFT**\nThe stock price for MSFT is 183.25.\n\nWhich stock (ticker symbol) are you looking for?\n**AAPL**\nThe stock price for AAPL is 317.94000244140625.\n\nWhich stock (ticker symbol) are you looking for?\n**done**\n```", "```py\n{\n    \"explains\":[\n\n    ],\n    \"count\":18,\n    \"quotes\":[\n    {\n        \"exchange\":\"NYQ\",\n        \"shortname\":\"Bank of America Corporation\",\n        \"quoteType\":\"EQUITY\",\n      1 \"symbol\":\"BAC\",\n        \"index\":\"quotes\",\n        \"score\":208707.0,\n        \"typeDisp\":\"Equity\",\n        \"longname\":\"Bank of America Corporation\",\n        \"isYahooFinance\":true\n      },\n       {\n        \"exchange\":\"NYQ\",\n        \"shortname\":\"Bank of America Corporation Non\",\n        \"quoteType\":\"EQUITY\",\n        \"symbol\":\"BAC-PL\",\n        \"index\":\"quotes\",\n        \"score\":20322.0,\n        \"typeDisp\":\"Equity\",\n        \"longname\":\"Bank of America Corporation\",\n        \"isYahooFinance\":true\n      },\n      {\n        \"exchange\":\"NYQ\",\n        \"shortname\":\"Bank of America Corporation Dep\",\n \"quoteType\":\"EQUITY\",\n        \"symbol\":\"BAC-PC\",\n        \"index\":\"quotes\",\n        \"score\":20183.0,\n        \"typeDisp\":\"Equity\",\n        \"longname\":\"Bank of America Corporation\",\n        \"isYahooFinance\":true\n      },\n\n`--snip--`\n}\n```", "```py\nimport requests\n\n# Start an infinite loop\n1 while True:\n    # Obtain company name from you\n    firm = input(\"Which company's ticker symbol are you looking for?\\n\")\n    # If you want to stop, type in \"done\"\n    if firm == \"done\":\n        break\n    # Otherwise, type in a company name\n  2 else:\n      3 try:\n            # Extract the source code from the website\n            url = 'https://query1.finance.yahoo.com/v1/finance/search?q='+firm\n            response = requests.get(url)\n            # Read the JSON data\n            response_json = response.json()\n            # Obtain the value corresponding to \"quotes\"\n          4 quotes = response_json['quotes']\n            # Get the ticker symbol\n            ticker = quotes[0]['symbol']\n            # Print out the ticker\n            print(f\"The ticker symbol for {firm} is {ticker}.\")\n        except:\n            print(\"Sorry, not a valid entry!\")\n        continue\n```", "```py\nWhich company's ticker symbol are you looking for?\n**ford motor**\nThe ticker symbol for ford motor is F.\n\nWhich company's ticker symbol are you looking for?\n**walt disney company**\nThe ticker symbol for walt disney company is DIS.\n\nWhich company's ticker symbol are you looking for?\n**apple**\nThe ticker symbol for apple is AAPL.\n\nWhich company's ticker symbol are you looking for?\n**done**\n```", "```py\nimport requests\nfrom yahoo_fin import stock_info as si\n\nfrom mptpkg import voice_to_text, print_say\n\n# Start an infinite loop\n1 while True:\n    # Obtain company name from you\n    print_say(\"Which company's stock price do you want to know?\")\n    firm = voice_to_text()\n    print_say(f\"You just said {firm}.\")\n    # If you want to stop, type in \"stop listening\"\n    if firm == \"stop listening\":\n        print_say(\"OK, goodbye then!\")\n        break\n    # Otherwise, say a company name\n  2 else:\n      try:\n            # Extract the source code from the website\n            url = 'https://query1.finance.yahoo.com/v1/finance/search?q='+firm\n            response = requests.get(url)\n            # Read the JSON data\n            response_json = response.json()\n            # Obtain the value corresponding to \"quotes\"\n            quotes = response_json['quotes']\n            # Get the ticker symbol\n            ticker = quotes[0]['symbol']\n\n            # Obtain live stock price from Yahoo!\n          3 price = round(float(si.get_live_price(ticker)),2)\n            # Speak the stock price\n            print_say(f\"The stock price for {firm} is {price}.\")        \n        # In case the price cannot be found, the script will tell you\n        except:\n             print_say(\"Sorry, I cannot find what you are looking for!\")        \n        continue\n```", "```py\nWhich company's stock price do you want to know?\nYou just said **JPMorgan Chase**.\nThe stock price for JPMorgan Chase is 97.31.\n\nWhich company's stock price do you want to know?\nYou just said **Goldman Sachs**.\nThe stock price for Goldman Sachs is 196.49.\n\nWhich company's stock price do you want to know?\nYou just said **stop listening**.\nOK, goodbye then! \n```", "```py\n**conda install pandas** \n**conda install matplotlib** \n**pip install pandas_datareader** \n```", "```py\nimport matplotlib.pyplot as plt\nfrom pandas_datareader import data as pdr\nimport matplotlib.dates as mdates\n\n# Set the start and end dates\n1 start_date = \"2020-09-01\"\nend_date = \"2021-02-28\"\n\n# Choose stock ticker symbol\n2 ticker = \"TSLA\"\n# Get stock price\n3 stock = pdr.get_data_yahoo(ticker, start=start_date, end=end_date)\nprint(stock)\n# Obtain dates\n4 stock['Date']=stock.index.map(mdates.date2num)\n# Choose figure size\n5 fig = plt.figure(dpi=128, figsize=(10, 6))\n# Format date to place on the x-axis\n6 formatter = mdates.DateFormatter('%m/%d/%Y')\nplt.gca().xaxis.set_major_formatter(formatter)\n# Plot data\n7 plt.plot(stock['Date'], stock['Adj Close'], c='blue')\n# Format plot\n8 plt.title(\"The Stock Price of Tesla\", fontsize=16)\nplt.xlabel('Date', fontsize=10)\nfig.autofmt_xdate()\nplt.ylabel(\"Price\", fontsize=10)\n9 plt.show()\n```", "```py\n High         Low  ...     Volume   Adj Close\nDate                                ...                       \n2020-09-01  502.489990  470.510010  ...   90119400  475.049988\n2020-09-02  479.040009  405.119995  ...   96176100  447.369995\n2020-09-03  431.799988  402.000000  ...   87596100  407.000000\n2020-09-04  428.000000  372.019989  ...  110321900  418.320007\n2020-09-08  368.739990  329.880005  ...  115465700  330.209991\n               ...         ...  ...        ...         ...\n2021-02-22  768.500000  710.200012  ...   37269700  714.500000\n2021-02-23  713.609985  619.000000  ...   66606900  698.840027\n2021-02-24  745.000000  694.169983  ...   36767000  742.020020\n2021-02-25  737.210022  670.580017  ...   39023900  682.219971\n2021-02-26  706.700012  659.510010  ...   41011300  675.500000\n\n[123 rows x 6 columns]\n```", "```py\n**pip install mplfinance**\n```", "```py\nimport matplotlib.pyplot as plt\nfrom pandas_datareader import data as pdr\nimport matplotlib.dates as mdates\nfrom mplfinance.original_flavor import candlestick_ohlc\n\n# Set the start and end date\nstart_date = \"2021-02-01\"\nend_date = \"2021-02-28\"\n# Choose stock ticker symbol\nticker = \"AMZN\"\n# Get stock price\nstock = pdr.get_data_yahoo(ticker, start=start_date, end=end_date)\n# Obtain dates\nstock['Date'] = stock.index.map(mdates.date2num)\n# Choose the four daily prices: open, high, low, and close\n1 df_ohlc = stock[['Date','Open', 'High', 'Low', 'Close']]\n# Choose figure size\nfigure, fig = plt.subplots(dpi=128, figsize = (8,4))\n# Format dates\nformatter = mdates.DateFormatter('%m/%d/%Y')\n# Choose x-axis\nfig.xaxis.set_major_formatter(formatter)\nfig.xaxis_date()\n2 plt.setp(fig.get_xticklabels(), rotation = 10)\n# Create the candlestick chart\n3 candlestick_ohlc(fig, \n                 df_ohlc.values, \n                 width=0.8, \n                 colorup='black', \n                 colordown='gray')\n# Put text in the chart that black color means close > open\n4 plt.figtext(0.3,0.2,'Black: Close > Open')\n# Put text in the chart that gray color means close < open\nplt.figtext(0.3,0.15,'Gray: Close < Open')\n# Put chart title and axis labels\n5 plt.title(f'Candlesticks Chart for {ticker}')\nplt.ylabel('Price')\nplt.xlabel('Date')\nplt.show()\n```", "```py\n`--snip--`\nfrom datetime import date, timedelta \n\nfrom mptpkg import print_say\n\n1 def price_plot(firm):\n    try:\n        # Extract the source code from the website\n      2 url = 'https://query1.finance.yahoo.com/v1/finance/search?q='+firm\n        response = requests.get(url)\n        # Read the JSON data\n        response_json = response.json()\n        # Obtain the value corresponding to \"quotes\"\n        quotes = response_json['quotes']\n        # Get the ticker symbol\n        ticker = quotes[0]['symbol']\n        # Set the start and end date\n      3 end_date = date.today().strftime(\"%Y-%m-%d\")\n        start_date = (date.today() - timedelta(days=180)).strftime(\"%Y-%m-%d\")\n        # Get stock price\n        stock = pdr.get_data_yahoo(ticker, start=start_date, end=end_date)\n        # Obtain dates\n        stock['Date']=stock.index.map(mdates.date2num)\n        # Choose figure size\n      4 fig = plt.figure(dpi=128, figsize=(10, 6))\n        # Format date to place on the x-axis\n        formatter = mdates.DateFormatter('%m/%d/%Y')\n        plt.gca().xaxis.set_major_formatter(formatter)\n        # Plot data\n        plt.plot(stock['Date'], stock['Adj Close'], c='blue')\n        # Format plot\n        plt.title\\\n        (f\"The Stock Price of {firm} in the Last Six Months\", fontsize=16)\n\n plt.xlabel('Date', fontsize=10)\n        fig.autofmt_xdate()\n        plt.ylabel(\"Price\", fontsize=10)\n        plt.show()    \n        # Let you know that the plot is ready via voice and print\n      5 print_say(f\"OK, here is the stock price plot for {firm}.\")\n    except:\n        print_say(\"Sorry, not a valid entry!\")\n```", "```py\nfrom mplfinance.original_flavor import candlestick_ohlc\nfrom mptpkg import print_say\nfrom datetime import date, timedelta\n*--snip--*\n1 def candle_stick(firm):\n\n`--snip--`\n        # Set the start and end date\n        start_date = (date.today() - timedelta(days=14)).strftime(\"%Y-%m-%d\")\n        end_date = date.today().strftime(\"%Y-%m-%d\")\n`--snip--`\n        # Choose the four daily prices: open, high, low, and close\n      2 df_ohlc = stock[['Date','Open', 'High', 'Low', 'Close']]\n        # Choose figure size\n        figure, fig = plt.subplots(dpi=128, figsize = (8,4))\n`--snip--`\n        plt.show()\n      3 print_say(f\"Here is the candlestick chart for {firm}.\")\n`--snip--`\n    except:\n        print_say(\"Sorry, not a valid entry!\")\n```", "```py\nfrom myplot import price_plot\nfrom mychart import candle_stick\nfrom mptpkg import voice_to_text, print_say\n\n# Start an infinite loop\n1 while True:\n    # Obtain voice input from you\n    print_say(\"How may I help you?\")\n    inp = voice_to_text()\n    print_say(f\"You said {inp}.\")\n    # If you want to stop, say \"stop listening\"\n  2 if \"stop listening\" in inp:\n        print_say(\"Nice talking to you, goodbye!\")\n        break\n    # If \"price pattern for\" in voice, activate plot functionality\n  3 elif \"price pattern for\" in inp:\n        pos = inp.find('price pattern for ')\n        firm = inp[pos+len('price pattern for '):]\n        price_plot(firm)\n        continue\n    # If \"candlestick chart for\" in voice, activate chart functionality \n  4 elif \"chart for\" in inp:\n        pos = inp.find('chart for ')\n        firm = inp[pos+len('chart for '):]\n        candle_stick(firm)\n        continue\n    # Otherwise, go to the next iteration\n    else:\n        continue\n```", "```py\nHow may I help you?\nYou said **price pattern for Oracle.**\nOK, here is the stock price plot for Oracle.\n\nHow may I help you?\nYou said **chart for Intel.**\nHere is the candlestick chart for Intel.\n\nHow may I help you?\nYou said **stop listening.**\nNice talking to you, goodbye!\n```", "```py\n**conda install statsmodels** \n```", "```py\nfrom datetime import date, timedelta\n\nimport statsmodels.api as sm\nfrom pandas_datareader import data as pdr\n\n# Set the start and end dates\nend_date = date.today().strftime(\"%Y-%m-%d\")\nstart_date = (date.today() - timedelta(days=180)).strftime(\"%Y-%m-%d\")\nmarket = \"^GSPC\" \nticker = \"MSFT\"\n# Retrieve prices\nsp = pdr.get_data_yahoo(market, start=start_date, end=end_date)\nstock = pdr.get_data_yahoo(ticker, start=start_date, end=end_date)\n# Calculate returns for sp500 and the stock\nsp['ret_sp'] = (sp['Adj Close']/sp['Adj Close'].shift(1))-1\nstock['ret_stock'] = (stock['Adj Close']/stock['Adj Close'].shift(1))-1\n# Merge the two datasets, keep only returns\ndf = sp[['ret_sp']].merge(stock[['ret_stock']],\\\n        left_index=True, right_index=True) \n\n# Add risk-free rate (assume constant for simplicity) \n1 df['rf'] = 0.00001\n# We need a constant to run regressions\ndf['const'] = 1 \ndf['exret_stock'] = df.ret_stock - df.rf\ndf['exret_sp'] = df.ret_sp - df.rf\n# Remove missing values\ndf.dropna(inplace=True) \n# Calculate the stock's alpha and beta\n2 reg = sm.OLS(endog=df['exret_stock'],\\\n             exog=df[['const', 'exret_sp']], missing='drop')\nresults = reg.fit()\nprint(results.summary())\n3 alpha = round(results.params['const']*100,3)\nbeta = round(results.params['exret_sp'],2)\n# Print the values of alpha and beta\nprint(f'The alpha of the stock of {ticker} is {alpha} percent.')\nprint(f'The beta of the stock of {ticker} is {beta}.')\n```", "```py\nThe alpha of the stock MSFT is 0.202 percent.\nThe beta of the stock MSFT is 1.1.\n```", "```py\nfrom datetime import date, timedelta \nimport statsmodels.api as sm\nfrom pandas_datareader import data as pdr\nimport requests\n\nfrom mptpkg import voice_to_text, print_say\n\n1 def alpha_beta(firm):\n    try:\n        # Extract the source code from the website\n      2 url = 'https://query1.finance.yahoo.com/v1/finance/search?q='+firm\n        response = requests.get(url)\n        # Read the JSON data\n        response_json = response.json()\n        # Obtain the value corresponding to \"quotes\"\n        quotes = response_json['quotes']\n        # Get the ticker symbol\n        ticker = quotes[0]['symbol']\n`--snip--`\n    # Speak the values of alpha and beta\n  3 print_say(f'The alpha of the stock of {firm} is {alpha} percent.')\n    print_say(f'The beta of the stock of {firm} is {beta}.')\n\n# Start an infinite loop\n4 while True:\n    # Obtain voice input from you\n    print_say(\"How may I help you?\")\n    inp = voice_to_text()\n    print_say(f\"You said {inp}.\")\n    # If you want to stop, say \"stop listening\"\n    if inp == \"stop listening\":\n        print_say(\"Nice talking to you; goodbye!\")\n        break\n    # If keywords in command, go to the stock report functionality\n    elif \"stock report for\" in inp:\n        # Locate the company name \n        pos = inp.find('stock report for ')\n      5 firm = inp[pos+len('stock report for '):]\n        alpha_beta(firm)\n        continue\n    # Otherwise, go to the next iteration\n    else:\n        continue\n```", "```py\nHow may I help you?\nYou said **stock report for alibaba.**\nThe alpha of the stock alibaba is 0.059 percent.\nThe beta of the stock alibaba is 0.61.\n\nHow may I help you?\nYou said **stop listening.**\nNice talking to you; goodbye!\n```", "```py\n{\n  1 \"time\":{\n      \"updated\":\"Mar 3, 2021 09:58:00 UTC\",\n      \"updatedISO\":\"2021-03-03T09:58:00+00:00\",\n      \"updateduk\":\"Mar 3, 2021 at 09:58 GMT\"\n   },\n  2 \"disclaimer\":\"This data was produced from the CoinDesk \n    Bitcoin Price Index (USD). Non-USD currency data converted \n    using hourly conversion rate from openexchangerates.org\",\n  3 \"chartName\":\"Bitcoin\",\n  4 \"bpi\":{\n      \"USD\":{\n         \"code\":\"USD\",\n         \"symbol\":\"&#36;\",\n         \"rate\":\"51,462.6831\",\n         \"description\":\"United States Dollar\",\n         \"rate_float\":51462.6831\n      },\n      \"GBP\":{\n         \"code\":\"GBP\",\n         \"symbol\":\"&pound;\",\n         \"rate\":\"36,859.0146\",\n         \"description\":\"British Pound Sterling\",\n         \"rate_float\":36859.0146\n      },\n      \"EUR\":{\n         \"code\":\"EUR\",\n         \"symbol\":\"&euro;\",\n         \"rate\":\"42,617.8433\",\n         \"description\":\"Euro\",\n         \"rate_float\":42617.8433\n      }\n   }\n}\n```", "```py\nimport requests\n\n# Specify the url to find the bitcoin price\nurl = 'https://api.coindesk.com/v1/bpi/currentprice.json'\n# Retrieve the live information from bitcoin url\nresponse = requests.get(url)\n# Read the JSON data\nresponse_json = response.json()\n# Obtain the USD dictionary\nusd = response_json['bpi']['USD']\n# Get the price\nprice = usd['rate_float']\nprint(f\"The Bitcoin price is {price} dollars.\")\n```", "```py\nThe Bitcoin price is 51462.6831 dollars.\n```", "```py\n**sudo apt-get install python3-tk**\n```", "```py\nimport tkinter as tk\n\n# Create the root window\nroot = tk.Tk()\n# Specify the title and size of the root window\nroot.title(\"A Label Inside a Root Window\")\nroot.geometry(\"800x200\")\n# Create a label inside the root window\nlabel = tk.Label(text=\"this is a label\", fg=\"Red\", font=(\"Helvetica\", 80))\nlabel.pack()\n# Run the game loop\nroot.mainloop()\n```", "```py\nimport tkinter as tk\nimport requests\n\n1 import arrow\n\n# Specify the url to find the Bitcoin price\nurl = 'https://api.coindesk.com/v1/bpi/currentprice.json'\n# Create a root window to hold all widgets\n2 root = tk.Tk()\n# Specify the title and size of the root window\nroot.title(\"Bitcoin Watch\")\nroot.geometry(\"1000x400\")\n# Create a first label using the Label() function\n3 label = tk.Label(text=\"\", fg=\"Blue\", font=(\"Helvetica\", 80))\nlabel.pack()\n# Create a second label\nlabel2 = tk.Label(text=\"\", fg=\"Red\", font=(\"Helvetica\", 60))\nlabel2.pack()\n\n# Define the bitcoin_watch() function\n4 def bitcoin_watch():\n    # Get the live information from Bitcoin url\n    response = requests.get(url)\n    response_json = response.json()\n    price = response_json['bpi']['USD']['rate_float']\n    # Obtain current date and time information         \n    tdate = arrow.now().format('MMMM DD, YYYY')\n    tm = arrow.now().format('hh:mm:ss A')\n    # Put the date and time information in the first label\n  5 label.configure(text=tdate + \"\\n\" + tm)\n    # Put price info in the second label        \n    label2.configure(text=f'Bitcoin: {price}', justify=tk.LEFT)\n    # Call the bitcoin_watch() function after 1000 milliseconds\n  6 root.after(1000, bitcoin_watch)\n\n# Call the bitcoin_watch() function\nbitcoin_watch()\n\n# Run the game loop\nroot.mainloop()\n```", "```py\n`--snip--`\nfrom mptpkg import print_say\n\n# Specify the url to find the Bitcoin price\nurl = 'https://api.coindesk.com/v1/bpi/currentprice.json'\n`--snip--` \n# Create a second label\nlabel2 = tk.Label(text=\"\", fg=\"Red\", font=(\"Helvetica\", 60))\nlabel2.pack()\n# Set up the price bounds\nresponse = requests.get(url)\nresponse_json = response.json()\n1 oldprice = response_json['bpi']['USD']['rate_float']\nmaxprice = oldprice * 1.05\nminprice = oldprice * 0.95\n2 print_say(f'The Bitcoin price is now {oldprice}!')\n\n# Define the bitcoin_watch() function\ndef bitcoin_watch():\n  3 global oldprice\n    # Get the live information from Bitcoin url\n    response = requests.get(url)\n    response_json = response.json()\n    price = response_json['bpi']['USD']['rate_float']\n    # If there is update in price, announce it    \n  4 if price != oldprice:\n        oldprice = price\n        print_say(f'The Bitcoin price is now {oldprice}!')\n    # If price goes out of bounds, announce it    \n  5 if price > maxprice:\n        print_say('The Bitcoin price has gone above the upper bound!')\n    if price < price:\n        print_say('The Bitcoin price has gone below the lower bound!')\n        # Obtain current date and time information         \n    tdate = arrow.now().format('MMMM DD, YYYY')\n    tm = arrow.now().format('hh:mm:ss A')\n`--snip--`\n```", "```py\nThe Bitcoin price is now 51418.8064!\nThe Bitcoin price is now 51377.4967!\nThe Bitcoin price is now 51419.3027!\n```", "```py\nimport tkinter as tk\n\nimport arrow\nfrom yahoo_fin import stock_info as si\n\nfrom mptpkg import print_say\n\n# Create a root window hold all widgets\n1 root = tk.Tk()\n# Specify the title and size of the root window\nroot.title(\"U.S. Stock Market Watch\")\nroot.geometry(\"1100x750\")\n# Create a first label using the Label() function\nlabel = tk.Label(text=\"\", fg=\"Blue\", font=(\"Helvetica\", 80))\nlabel.pack()\n# Create a second label\nlabel2 = tk.Label(text=\"\", fg=\"Red\", font=(\"Helvetica\", 60))\nlabel2.pack()\n# Set up tickers and names\ntickers = ['^DJI', '^GSPC', 'AAPL', 'AMZN', 'TSLA']\nnames = ['DOW JONES', 'S&P500', 'Apple', 'Amazon', 'Tesla']\n# Set up the oldprice values and price bounds\n2 oldprice = []\nmaxprice = []\nminprice = []\nfor i in range(5):\n    p = round(float(si.get_live_price(tickers[i])), 2)\n    oldprice.append(p)\n    maxprice.append(p * 1.05)\n    minprice.append(p * 0.95)\n    if i <= 1:\n        print_say(f'The latest value for {names[i]} is {p}!')\n    else:\n        print_say(f'The latest stock price for {names[i]} is {p} dollars!')\n\n# Define the stock_watch() function\n3 def stock_watch():\n    # Declare global variables \n    global oldprice, maxprice, minprice\n    # Obtain live information about the DOW JONES index from Yahoo\n  4 p1 = round(float(si.get_live_price(\"^DJI\")), 2)\n    m1 = f'DOW JONES: {p1}'\n    # Obtain live information about the SP500 index from Yahoo \n    p2 = round(float(si.get_live_price(\"^GSPC\")), 2)\n    m2 = f'S&P500: {p2}'\n    # Obtain live price information for Apple stock from Yahoo\n    p3 = round(float(si.get_live_price(\"AAPL\")), 2)\n    m3 = f'Apple: {p3}'\n    # Obtain live price information for Amazon stock from Yahoo\n    p4 = round(float(si.get_live_price(\"AMZN\")), 2)\n    m4 = f'Amazon: {p4}'\n    # Obtain live price information for Tesla stock from Yahoo\n    p5 = round(float(si.get_live_price(\"TSLA\")), 2)\n    m5 = f'Tesla: {p5}'\n    # Put the five prices in a list p\n  5 p = [p1, p2, p3, p4, p5]\n    # Obtain current date and time information\n    tdate = arrow.now().format('MMMM DD, YYYY')\n    tm = arrow.now().format('hh:mm:ss A')\n    # Put the date and time information in the first label\n    label.configure(text=tdate + \"\\n\" + tm)\n    # Put all the five messages on the stock market in the second label\n    label2.configure(text=m1 +\\\n         \"\\n\" + m2 + \"\\n\" + m3 + \"\\n\" + m4 + \"\\n\" + m5, justify=tk.LEFT)\n    # If there is update in the market, announce it\n  6 for i in range(5):\n        if p[i] != oldprice[i]:\n            oldprice[i] = p[i]\n            if i <= 1:\n                print_say(f'The latest value for {names[i]} is {p[i]}!')\n            else:\n                print_say\\\n                (f'The latest stock price for {names[i]} is {p[i]} dollars!')\n    # If price goes out of bounds, announce it\n 7 for i in range(5):\n        if p[i] > maxprice[i]:\n            print_say(f'{names[i]} has moved above the upper bound!')\n        if p[i] < minprice[i]:\n            print_say(f'{names[i]} has moved below the lower bound!')\n    # Call the stock_watch() function\n  8 root.after(120000, stock_watch)\n\n# Call the stock_watch() function\nstock_watch()\n# Run the game loop\nroot.mainloop()\n```", "```py\nThe latest value for DOW JONES is 31477.02!\nThe latest value for S&P500 is 3861.02!\nThe latest stock price for Apple is 124.65 dollars!\nThe latest stock price for Amazon is 3062.5 dollars!\nThe latest stock price for Tesla is 692.41 dollars!\nThe latest value for DOW JONES is 31460.43!\nThe latest value for S&P500 is 3859.14!\nThe latest stock price for Apple is 124.49 dollars!\nThe latest stock price for Amazon is 3062.32 dollars!\nThe latest stock price for Tesla is 690.8 dollars!\nThe latest value for DOW JONES is 31434.83!\nThe latest value for S&P500 is 3853.88!\nThe latest stock price for Apple is 124.26 dollars!\nThe latest stock price for Amazon is 3052.31 dollars!\nThe latest stock price for Tesla is 687.56 dollars!\n```", "```py\n**pip install gTTS**\n```", "```py\n**pip install --upgrade gTTS**\n```", "```py\n**conda install -c conda-forge pydub**\n**conda install -c conda-forge ffmpeg**\n```", "```py\nfrom io import BytesIO\n\nfrom gtts import gTTS\nfrom pydub import AudioSegment\nfrom pydub.playback import play\n\n# Convert text to speech in Spanish\ntts = gTTS(text='Buenos días',lang='es')\n# Create a temporary file \nvoice = BytesIO()\n# Save the voice output as an audio file\ntts.write_to_fp(voice)\n# Play the audio file\nvoice.seek(0)\nplay(AudioSegment.from_mp3(voice))\n```", "```py\nfrom io import BytesIO\n\nfrom gtts import gTTS\nfrom pydub import AudioSegment\nfrom pydub.playback import play\n\n# Create a dictionary of languages and the corresponding codes\n1 lang_abbre = {\"english\":\"en\",\n            \"chinese\":\"zh\",\n \"spanish\":\"es\",\n            \"french\":\"fr\",\n            \"japanese\":\"ja\",\n            \"portuguese\":\"pt\",\n            \"russian\":\"ru\",\n            \"korean\":\"ko\",\n            \"german\":\"de\",\n            \"italian\":\"it\"}\n2 lang = input(\"What language do you want to use?\\n\")\nphrase = input(\"What phrase do you want to convert to voice?\\n\")\n# Convert text to speech\ntts = gTTS(text=phrase,lang=lang_abbre[lang])\n# Create a temporary file \nvoice = BytesIO()\n# Save the voice output as an audio file\ntts.write_to_fp(voice)\n# Play the audio file\nvoice.seek(0)\nplay(AudioSegment.from_mp3(voice))\n```", "```py\nWhat language do you want to use?\n**chinese**\n\nWhat phrase do you want to convert to voice?\n**嗨,你好吗?**\n```", "```py\nimport speech_recognition as sr\n\n# Initiate speech recognition\nspeech = sr.Recognizer()\n# Use it to capture spoken Japanese \nprint('Python is listening in Japanese...')\nwith sr.Microphone() as source:\n    speech.adjust_for_ambient_noise(source)\n    try:\n        audio = speech.listen(source)\n      1 my_input = speech.recognize_google(audio, language=\"ja\")\n        print(f\"you said: {my_input}\")    \n    except sr.UnknownValueError:\n        pass\n```", "```py\nPython is listening in Japanese...\nyou said: ありがとうございます\n```", "```py\nfrom io import BytesIO\n```", "```py\n import speech_recognition as sr\nfrom gtts import gTTS\nfrom pydub import AudioSegment\nfrom pydub.playback import play\nimport Wikipedia\n\nfrom mptpkg import print_say\n\n# Create a dictionary of languages and the corresponding codes\nlang_abbre = {\"english\":\"en\",\n            \"chinese\":\"zh\",\n            \"spanish\":\"es\",\n            \"french\":\"fr\",\n            \"japanese\":\"ja\",\n            \"portuguese\":\"pt\",\n            \"russian\":\"ru\",\n            \"korean\":\"ko\",\n            \"german\":\"de\",\n            \"italian\":\"it\"}\nLang = input(\"What language do you want to use?\\n\")\n\n# Initiate speech recognition\nspeech = sr.Recognizer()\n# Request a query in a specified language\n1 print_say(f\"Say what you want to know in {lang}...\")\n# Capture your voice query in the language of your choice\n2 with sr.Microphone() as source:\n    speech.adjust_for_ambient_noise(source)\n    while True:\n        try:\n            audio = speech.listen(source)\n            my_input = speech.recognize_google(audio, language=lang_abbre[lang])\n break\n        except sr.UnknownValueError:\n            print_say(\"Sorry, I cannot understand what you said!\")\n# Print out what you said\n3 print(f\"you said: {my_input}\")\n# Obtain answer from Wikipedia and print out\nwikipedia.set_lang(lang_abbre[lang])\nAns = wikipedia.summary(my_input)[0:200]\nprint(ans)\n# Convert text to speech in the language of your choice\n4 tts = gTTS(text=ans,lang=lang_abbre[lang])\n# Create a temporary file \nVoice = BytesIO()\n# Save the voice output as an audio file\ntts.write_to_fp(voice)\n# Play the audio file\nvoice.seek(0)\nplay(AudioSegment.from_mp3(voice))\n```", "```py\nWhat language do you want to use?\n**chinese**\nSay what you want to know in chinese...\n美利堅合眾國（英語：United States of America, 縮寫為USA,一般稱為United States(U.S.或US),或America),中文通稱「美國」,是由其下轄50个州、華盛頓哥倫比亞特區、五个自治领土及外岛共同組成的聯邦共和国。美國本土48州和联邦特区位於北美洲中部，東臨大西洋，北面是加拿大，南部和墨西哥及墨西哥灣接壤，本土位於溫帶、副熱帶地區。阿拉斯加州位於北美大陸西\n```", "```py\n**pip install translate** \n```", "```py\n# Import the Translator function from the translate module\nfrom translate import Translator\n\n# Specify the input and output languages\ntranslator = Translator(from_lang=\"en\",to_lang=\"zh\")\n# Do the actual translation\ntranslation = translator.translate(\"hello all\")\nprint(translation)\n# Specify the input and output languages\ntranslator = Translator(from_lang=\"zh\",to_lang=\"en\")\n# Do the actual translation\ntranslation = translator.translate(\"请再说一遍\")\nprint(translation)\n```", "```py\n大家好！\nplease say it again\n```", "```py\nfrom io import BytesIO\n\nfrom translate import Translator\nimport speech_recognition as sr\nfrom gtts import gTTS\nfrom pydub import AudioSegment\nfrom pydub.playback import play\n\n# Initiate speech recognition\nspeech = sr.Recognizer()\n# Prompt you to say something in English\nprint('say something in English')\n# Capture spoken English \nwith sr.Microphone() as source:\n    speech.adjust_for_ambient_noise(source)\n    try:\n        audio = speech.listen(source)\n        my_input = speech.recognize_google(audio, language=\"en\")\n        print(f\"you said: {my_input}\")    \n    except sr.UnknownValueError:\n        pass\n# Specify the input and output languages\n1 translator = Translator(from_lang=\"en\",to_lang=\"es\")\n# Do the actual translation\ntranslation = translator.translate(my_input)\n2 print(translation)\n# Convert text to speech in Spanish\ntts = gTTS(text=translation,lang='es')\n# Create a temporary file \nvoice = BytesIO()\n# Save the voice output as an audio file\n3 tts.write_to_fp(voice)\n# Play the audio file\nvoice.seek(0)\nplay(AudioSegment.from_mp3(voice))\n# Prompt you to say something in Spanish\n4 print('say something in Spanish')\n# Capture spoken Spanish \nwith sr.Microphone() as source:\n    speech.adjust_for_ambient_noise(source)\n    try:\n        audio = speech.listen(source)\n        my_input = speech.recognize_google(audio, language=\"es\")\n        print(f\"you said: {my_input}\")    \n    except sr.UnknownValueError:\n        pass\n# Specify the input and output languages\nTranslator = Translator(from_lang=\"es\",to_lang=\"en\")\n# Do the actual translation\ntranslation = translator.translate(my_input)\nprint(translation)\n# Convert text to speech in Spanish\ntts = gTTS(text=translation,lang='en')\n# Create a temporary file \nvoice = BytesIO()\n# Save the voice output as an audio file\ntts.write_to_fp(voice)\n# Play the audio file\nvoice.seek(0)\nplay(AudioSegment.from_mp3(voice))\n```", "```py\nsay something in English\nyou said: **today is a great day**\nHoy es un gran día.\n\nsay something in Spanish\nyou said: **uno dos tres**\n1 2 3\n```", "```py\nfrom .mysr import voice_to_text\nfrom .mysay import print_say\n`--snip--`\nfrom .myknowall import know_all\n```", "```py\nfrom .mymusic import music_play, music_stop\nfrom .mynews import news_brief, news_stop\nfrom .myradio import live_radio, radio_stop\nfrom .myttt import ttt\nfrom .myconn import conn\nfrom .mystock import stock_market, stock_price\nfrom .mytranslate import voice_translate\n```", "```py\n**import random**\n**import json**\n\n# Ensure the following functions are imported in /mpt/mptpkg/__init__.py\nfrom mptpkg import voice_to_text, print_say, wakeup, timer,\\\nalarm, joke, email, know_all, music_play, music_stop,\\\nnews_brief, news_stop, live_radio, radio_stop, ttt,\\\nconn, stock_price, stock_market, voice_translate\n\n**# Open chats.json and put it in a dictionary**\n**with open('chats.json','r') as content:**\n **chats = json.load(content)**\n# Put the script in standby\nwhile True:\n`--snip--`\n # The script goes back to standby if you choose\n if \"back\" in inp and \"stand\" in inp:\n print_say('OK, back to standby, let me know if you need help!')\n break\n        # Activate chatting \n        elif inp in list(chats.keys()):\n            print_say(random.choice(chats[inp]))\n            continue  \n        # Activate music \n elif \"music by\" in inp:\n            music_play(inp)\n            # Say stop to stop the music anytime\n            while True:\n                background = voice_to_text().lower()\n                if \"stop\" in background:\n                    music_stop()\n                    break\n                else:\n                    continue\n        # Activate news \n        elif \"npr news\" in inp:\n            news_brief()\n            # Say stop to stop the news anytime\n            while True:\n                background = voice_to_text().lower()\n                if \"stop\" in background:\n                    news_stop()\n                    break\n                else:\n                    continue\n        # Activate the radio\n        # Put chromedriver.exe in the same folder as this script  \n        elif \"live radio\" in inp:\n            live_radio()\n            # Say stop to stop the radio anytime\n            while True:\n                background = voice_to_text().lower()\n                if \"stop\" in background:\n                    radio_stop()\n                    break\n                else:\n                    continue\n        # Activate the tic-tac-toe game\n        elif \"tic\" in inp and \"tac\" in inp and \"toe\" in inp:\n            ttt()\n            continue\n        # Activate the Connect Four game\n        elif \"connect\" in inp and ('4' in inp or 'four' in inp):\n            conn()\n            continue\n        # Activate the stock price functionality\n        elif \"stock price of\" in inp:\n            stock_price(inp)\n            continue\n        # Get market indexes\n        elif \"stock market\" in inp:\n            stock_market()\n            continue\n        # Activate the voice translator\n          elif \"how to say\" in inp and \" in \" in inp:\n            voice_translate(inp)\n            continue\n # Activate the timer \n elif \"timer for\" in inp and (\"hour\" in inp or \"minute\" in inp):\n timer(inp)\n continue\n`--snip--`\n```", "```py\n{\n\"how are you\":[\"i am good\",\"i am fine\"],\n\"who are you\":[\"i am a Python script\",\"i am a computer script\"],\n\"what are your hobbies\":[\"a script doesn't have hobbies\"],\n\"what's your favorite color\":[\"blue\",\"white\"],\n\"hi\":[\"hi\",\"hello\"],\n\"hello\":[\"hello\",\"hi\"],\n\"what can you do\":[\"lots of things, try me\"],\n\"how old are you\":[\"a script doesn't have age\",\n\"good question, I don't really know the answer to that\"]}\n```", "```py\nimport import random\nimport json\n`--snip--`\nwith open('chats.json', 'r') as content:\n    chats = json.load(content)\n`--snip--`\n        # Activate chatting \n      1 elif inp in list(chats.keys()):\n            print_say(random.choice(chats[inp]))\n            continue\n`--snip--`\n```", "```py\n[\"how are you\", \"who are you\", \"what are your hobbies\", \"what's your favorite \ncolor\", \"hi\", \"hello\", \"what can you do\", \"how old are you\"] \n```", "```py\n`--snip--`\nhow may I help you?\nyou just said **hello**\nhello\n\nhow may I help you?\nyou just said **who are you**\ni am a computer script\n\nhow may I help you?\nyou just said **what can you do**\nlots of things, try me\n\nhow may I help you?\nyou just said **how old are you**\na script doesn't have age\n`--snip--`\n```", "```py\nimport os\nimport random\n1 from pygame import mixer\n\nfrom mptpkg import print_say\n\n# Define a function to play music\n2 def music_play(v_inp):\n    # Extract artist name\n    pos = v_inp.find(\"music by \")\n    v_inp = v_inp[pos+len('music by '):]\n    # Separate first and last names\n    names = v_inp.split()\n    # Extract the first name\n    firstname = names[0]\n    # Extract the last name\n    if len(names)>1:\n        Lastname = names[1]\n    # If no last name, use first name as placeholder\n    else:\n        lastname = firstname\n    # Create a list to contain songs \n    mysongs = []\n    # If either first name or last name in the filename, put in list\n    with os.scandir(\"../ch05/chat\") as files:\n        for file in files:\n            if (firstname in file.name.lower() or lastname\\\n                in file.name.lower()) and \"mp3\" in file.name:\n                mysongs.append(file.name)\n    # Let you know if no song by the artist\n    if len(mysongs) == 0:\n        print_say(f\"I cannot find any song by {names}.\")\n    else:\n        # Randomly select one from the list and play\n        mysong = random.choice(mysongs)\n        print_say(f\"play the song {mysong} for you.\")\n        mixer.init()\n        mixer.music.load(f'../ch05/chat/{mysong}')\n        mixer.music.play()\n\n# Define a function to stop music\n3 def music_stop(): \n try:\n        mixer.music.stop()\n    except:\n        print('no music to stop')\n```", "```py\n`--snip--`\nfrom mptpkg import music_play, music_stop\n`--snip--`\n        # Activate music \n      1 elif \"music by\" in inp:\n            music_play(inp)\n            # Say stop to stop the music any time\n 2 while True:\n                background = voice_to_text().lower()\n                if \"stop\" in background:\n                    music_stop()\n                    break\n                else:\n                    continue\n`--snip--`\n```", "```py\n`--snip--`\nhow may I help you?\nyou just said **play music by katy perry**\nplay the song KatyPerry- Hey Hey Hey.mp3 for you\n```", "```py\nfrom random import choice\n\nimport requests\nimport bs4\n1 from pygame import mixer\n\n# Define news_brief() function\n2 def news_brief():\n    # Locate the website for the NPR news brief\n    url = 'https://www.npr.org/podcasts/500005/npr-news-now'\n    # Convert the source code to a soup string\n    response = requests.get(url)\n    response.raise_for_status()\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    # Locate the tag that contains the mp3 files\n    casts = soup.findAll('a', {'class': 'audio-module-listen'})\n    # Obtain the weblink for the mp3 file related to the latest news brief\n    cast = casts[0]['href']\n    pos = cast.find(\"?\")\n    # Download the mp3 file\n  3 mymp3 = cast[0:pos]\n    x = choice(range(1000000))\n    mymp3_file = requests.get(mymp3)\n    with open(f'f{x}.mp3','wb') as f:\n        f.write(mymp3_file.content)\n    # Play the mp3 file\n    mixer.init()\n    mixer.music.load(f'f{x}.mp3')\n  4 mixer.music.play()\n\n# Define the news_stop() function\n5 def news_stop():\n    try:\n        mixer.music.stop()\n    except:\n        print('no news to stop')\n```", "```py\n`--snip--`\nfrom mptpkg import news_brief, news_stop\n`--snip--`\n        # Activate news \n        elif \"npr news\" in inp:\n            news_brief()\n            # Say stop to stop the news any time\n            while True:\n                background = voice_to_text().lower()\n                if \"stop\" in background:\n                    news_stop()\n                    break\n                else:\n                    continue \n`--snip--`\n```", "```py\n# Put chromedriver.exe in the same folder as vpa_final.py \nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n1 def live_radio():\n    global button\n    chrome_options = Options()  \n    chrome_options.add_argument(\"--headless\")\n    browser = webdriver.Chrome(executable_path='./chromedriver',\\\n                               chrome_options=chrome_options)\n    browser.get(\"https://onlineradiobox.com/us/\")\n    button = browser.find_element_by_xpath('//*[@id=\"b_top_play\"]')\n    button.click()\n\n2 def radio_stop():\n    global button\n    try:\n        button.click()\n    except:\n        print('no radio to stop')\n```", "```py\n`--snip--`\nfrom mptpkg import live_radio, radio_stop\n`--snip--`\n        # Activate the radio \n        # Put chromedriver.exe in the same folder as this script\n        elif \"live radio\" in inp:\n            live_radio()\n            # Say stop to stop the radio anytime\n            while True:\n                background = voice_to_text().lower()\n                if \"stop\" in background:\n                    radio_stop()\n                    break\n                else:\n                    continue \n`--snip--`\n```", "```py\n`--snip--`\ndef ttt():\n    t.setup(600,600,100,200)\n`--snip--`\n    # Define the smart_computer() function\n  1 def smart_computer():\n        if turn == \"blue\":\n            nonturn = \"white\"\n        else:\n            nonturn = \"blue\"\n        # Choose center at the first move\n        if \"5\" in validinputs:\n            return \"5\"\n`--snip--`\n        for move in valids:\n            tooccupy = deepcopy(occupied)\n            tooccupy[turn].append(move)\n            if win_game(tooccupy,turn) == True:\n                winner.append(move)\n`--snip--`\n    # Obtain move from a human player\n  2 def person():\n        print_say(f\"Player {turn}, what's your move?\")\n        return voice_to_text().lower()\n    # Obtain a move from a simple computer\n  3 def simple_computer():\n        return choice(validinputs)\n    # Ask you for your choice of opponent\n  4 while True:\n        print_say('''Do you want your opponent to be a person,\n        a simple computer, or a smart computer?''')\n        which_player = voice_to_text().lower()\n        print_say(f\"You said {which_player}.\")\n        if 'person' in which_player:\n            player = person\n            break\n        elif 'simple' in which_player:\n            player = simple_computer\n            break\n        elif 'smart' in which_player:\n            player = smart_computer\n            break\n    # Ask if you want to play first or second\n  5 while True:\n        print_say(\"Do you want to play first or second?\")\n        preference = voice_to_text().lower()\n        print_say(f\"You said {preference}.\")\n        if 'first' in preference:\n            preference = 1\n            break\n        elif 'second' in preference:\n            preference = 2\n            break\n\n # Add a dictionary of words to replace\n    to_replace = {'number ':'', 'cell ':'', 'column ':'',\n                  'one':'1', 'two':'2', 'three':'3',\n                  'four':'4', 'for':'4', 'five':'5',\n                  'six':'6', 'seven':'7', 'eight':'8','nine':'9'}\n   # Start game loop \n    while True:\n        # See whose turn to play\n      6 if (preference+rounds)%2 == 0:\n            print_say(f\"Player {turn}, what's your move?\")\n            inp = voice_to_text().lower()\n        else:\n          7 inp = player()\n            if inp == None:\n                inp = choice(validinputs)\n      8 print_say(f\"Player {turn} chooses {inp}.\")\n`--snip--`\n        # If the move is a not valid one, remind\n      9 if inp not in validinputs:\n            print_say(\"Sorry, that's an invalid move!\") \n        # If the move is valid, go ahead  \n        else:\n            # Go to the cell and place a dot of the player's color\n`--snip--`\n  a try:\n        bye()\n    except Terminator:\n        print('exit turtle')\n```", "```py\n`--snip--`\nfrom mptpkg import ttt\n`--snip--`\n        # Activate the tic-tac-toe game\n        elif \"tic\" in inp and \"tac\" in inp and \"toe\" in inp:\n            ttt()\n            continue \n`--snip--`\n```", "```py\n`--snip--`\nHow may I help you?\nYou just said **play tic-tac-toe**.\n\nDo you want your opponent to be a person, a simple computer, or a smart computer?\nYou said **simple computer**.\n\nDo you want to play first or second?\nYou said **first**.\n\nPlayer blue, what's your move?\nPlayer blue chooses **5**.\nPlayer white chooses 9.\n\nPlayer blue, what's your move?\nPlayer blue chooses **number 7**.\nPlayer white chooses 6.\n\nPlayer blue, what's your move?\nPlayer blue chooses **number three**.\nCongrats player blue, you won!\n\nHow may I help you?\n`--snip--`\n```", "```py\n`--snip--`\nfrom mptpkg import conn\n*--snip**--*\n        # Activate Connect Four \n        elif \"connect\" in inp and ('4' in inp or 'four' in inp):\n            conn()\n            continue \n`--snip--`\n```", "```py\n`--snip--`\nHow may I help you?\nYou just said **play connect four**.\n\nDo you want your opponent to be a person, a simple computer, or a smart computer?\nYou said **smart computer**.\n\nDo you want to play first or second?\nYou said **second**.\nPlayer red chooses 4.\n\nPlayer yellow, what's your move?\nPlayer yellow chooses **number three**.\nPlayer red chooses 1.\n\nPlayer yellow, what's your move?\nPlayer yellow chooses **number three**.\nPlayer red chooses 5.\n\nPlayer yellow, what's your move?\nPlayer yellow chooses **number three**.\nPlayer red chooses 3.\n\nPlayer yellow, what's your move?\nPlayer yellow chooses **number two**.\nPlayer red chooses 7.\n\nPlayer yellow, what's your move?\nPlayer yellow chooses **number two**.\nPlayer red chooses 6.\nCongrats player red, you won!\n\nHow may I help you?\n`--snip--`\n```", "```py\nimport requests\nfrom yahoo_fin import stock_info as si\n\nfrom mptpkg import print_say\n\n# Define stock_price() function\n1 def stock_price(v_inp):\n    # Extract company name\n    pos = v_inp.find(\"stock price of\")\n    myfirm = v_inp[pos+len(\"stock price of \"):]\n    # Extract the source code from the website\n # Prevent crashing in case there is no result\n    try:\n        # Extract the source code from the website\n      2 url = 'https://query1.finance.yahoo.com/v1/finance/search?q='+myfirm\n        response = requests.get(url)\n        # Read the JSON data\n        response_json = response.json()\n        # Obtain the value corresponding to \"quotes\"\n        quotes = response_json['quotes']\n        # Get the ticker symbol\n        ticker = quotes[0]['symbol']\n        # Obtain real-time stock price from Yahoo\n      3 price = round(float(si.get_live_price(ticker)),2)\n        # Speak the stock price\n        print_say(f\"the stock price for {myfirm} is {price} dollars\")\n        # If price is not found, the script will tell you\n    except:\n        print_say(\"sorry, I cannot find what you are looking for!\")\n\n# Define stock_market() function\n4 def stock_market():\n    # Obtain real-time index values from Yahoo\n    dow = round(float(si.get_live_price('^DJI')),2)\n    sp500 = round(float(si.get_live_price('^GSPC')),2)\n    # Announces the index values\n    print_say(f\"The Dow Jones Industry Average is {dow}.\")\n    print_say(f\"The S&P 500 is {sp500}.\")\n```", "```py\n`--snip--`\nfrom mptpkg import stock_market, stock_price\n`--snip--`\n        # Activate the stock price functionality\n        elif \"stock price of\" in inp:\n            stock_price(inp)\n            continue\n        # Get market indexes\n elif \"stock market\" in inp:\n            stock_market()\n            continue\n`--snip--`\n```", "```py\n`--snip--`\nhow may I help you?\nyou just said **tell me the stock price of general motors**\nthe stock price for general motors is 24.39 dollars\n\nhow may I help you?\nyou just said **tell me about the stock market**\nthe Dow Jones Industry Average is 26075.3\nthe S&P 500 is 3185.04\n\nhow may I help you?\n`--snip--`\n```", "```py\nfrom mptpkg import print_say\n\n1 lang_abbre = {\"english\":\"en\",\n            \"chinese\":\"zh\",\n \"spanish\":\"es\",\n            \"french\":\"fr\",\n            \"japanese\":\"ja\",\n            \"portuguese\":\"pt\",\n            \"russian\":\"ru\",\n            \"korean\":\"ko\",\n            \"german\":\"de\",\n            \"italian\":\"it\"}\n\n# Import the platform module to identify your OS\nimport platform\n\n# If you are using Windows, use gtts\nif platform.system() == \"Windows\": \n    import random\n\n    from translate import Translator\n    from gtts import gTTS\n    from pydub import AudioSegment\n    from pydub.playback import play\n\n  2 def voice_translate(inp):\n        # Extract the phrase and the language name\n        ps1 = inp.find('how to say')\n        ps2 = inp.rfind(' in ')\n        try:\n            eng_phrase = inp[ps1+10:ps2]\n            tolang = inp[ps2+4:]\n            translator = Translator(from_lang=\"english\",to_lang=tolang)\n            translation = translator.translate(eng_phrase)\n            tts = gTTS(text=translation, lang=lang_abbre[tolang])\n            print_say(f\"The {tolang} for {eng_phrase} is\")\n            print(translation)\n            x = random.choice(range(1000000))\n            tts.save(f'file{x}.mp3')\n            play(AudioSegment.from_mp3(f\"file{x}.mp3\"))\n        except:\n            print_say(\"Sorry, cannot find what you are looking for!\")\n\n# If you are not using Windows, use gtts-cli\nif  platform.system() == \"Darwin\" or platform.system() == \"Linux\":\n    import os\n    from translate import Translator\n    from gtts import gTTS\n\n    def voice_translate(inp):\n        # Extract the phrase and the language name\n        ps1 = inp.find('how to say')\n        ps2 = inp.rfind(' in ')\n        try:\n            eng_phrase = inp[ps1+10:ps2]\n            tolang = inp[ps2+4:]\n            translator = Translator(from_lang=\"english\",to_lang=tolang)\n            translation = translator.translate(eng_phrase)\n            print_say(f\"The {tolang} for {eng_phrase} is\")\n print(translation)\n            tr = translation.replace('\"','')\n            ab = lang_abbre[tolang]\n          3 os.system(f'gtts-cli --nocheck \"{tr}\" --lang {ab} | mpg123 -q -')\n        except:\n            print_say(\"sorry, cannot find what you are looking for!\")\n```", "```py\n`--snip--`\nfrom mptpkg import voice_translate\n`--snip--`\n        # Activate the voice translator \n        elif \"how to say\" in inp and \" in \" in inp:\n            voice_translate(inp)\n            continue\n`--snip--`\n```", "```py\n`--snip--`\nhow may I help you?\nyou just said **how to say good afternoon in japanese**\nthe japanese for good afternoon is \nこんにちは\n`--snip--`\n```"]