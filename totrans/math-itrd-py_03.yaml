- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: MAKING TEDIOUS ARITHMETIC FUN WITH LISTS AND LOOPS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用列表和循环让繁琐的算术变得有趣
- en: '*“You mean I have to go again tomorrow?” —Aidan Farrell after the first day
    of school*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*“你是说我明天还得再来一次？” — 艾丹·法雷尔在第一天上学后*'
- en: '![image](../images/fintro-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fintro-01.jpg)'
- en: 'Most people think of doing arithmetic when they think of math: adding, subtracting,
    multiplying, and dividing. Although doing arithmetic is pretty easy using calculators
    and computers, it can still involve a lot of repetitive tasks. For example, to
    add 20 different numbers using a calculator, you have to enter the + operator
    19 times!'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在想到数学时，会想到算术：加法、减法、乘法和除法。虽然使用计算器和计算机做算术相当简单，但它仍然可能涉及很多重复的任务。例如，要使用计算器加上20个不同的数字，你必须输入加号运算符19次！
- en: In this chapter you learn how to automate some of the tedious parts of arithmetic
    using Python. First, you learn about math operators and the different data types
    you can use in Python. Then you learn how to store and calculate values using
    variables. You also learn to use lists and loops to repeat code. Finally, you
    combine these programming concepts to write functions that automatically perform
    complicated calculations for you. You’ll see that Python can be a much more powerful
    calculator than any calculator you can buy—and best of all, it’s free!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用 Python 自动化一些繁琐的算术操作。首先，你将了解数学运算符和 Python 中可以使用的不同数据类型。然后，你将学习如何使用变量来存储和计算值。你还将学习如何使用列表和循环来重复代码。最后，你将结合这些编程概念，编写函数来自动执行复杂的计算。你会发现，Python
    可以比任何你能买到的计算器更强大，最棒的是，它是免费的！
- en: BASIC OPERATORS
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本运算符
- en: 'Doing arithmetic in the interactive Python shell is easy: you just enter the
    expression and press ENTER when you want to do the calculation. Table 2-1 shows
    some of the most common mathematical operators.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式 Python shell 中做算术很容易：你只需输入表达式，按下 ENTER 键即可进行计算。表 2-1 显示了一些最常见的数学运算符。
- en: '**Table 2-1:** Common Mathematical Operators in Python'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2-1：Python 中常见的数学运算符**'
- en: '| **Operator** | **Syntax** |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **语法** |'
- en: '| Addition | + |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 加法 | + |'
- en: '| Subtraction | – |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 减法 | – |'
- en: '| Multiplication | * |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 乘法 | * |'
- en: '| Division | / |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 除法 | / |'
- en: '| Exponent | ** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | ** |'
- en: Open your Python shell and try out some basic arithmetic with the example in
    [Listing 2-1](ch02.xhtml#ch02list1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的 Python shell，尝试一下[清单 2-1](ch02.xhtml#ch02list1)中的基本算术示例。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 2-1: Trying out some basic math operators*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-1：尝试一些基本的数学运算符*'
- en: The answer should appear as the output. You can use spaces to make the code
    more readable (`6 + 5`) or not (`6+5`), but it won’t make any difference to Python
    when you’re doing arithmetic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 答案应作为输出显示。你可以使用空格使代码更具可读性（`6 + 5`），也可以不使用空格（`6+5`），但是在做算术时，Python 对这些空格不会有任何影响。
- en: Keep in mind that division in Python 2 is a little tricky. For example, Python 2
    will take `46/13` and think you’re interested only in integers, thus giving you
    a whole number (3) for the answer instead of returning a decimal value, like in
    [Listing 2-1](ch02.xhtml#ch02list1). Because you downloaded Python 3, you shouldn’t
    have that problem. But the graphics package we’ll see later uses Python 2, so
    we’ll have to make sure we ask for decimals when we divide.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在 Python 2 中，除法有点棘手。例如，Python 2 会对 `46/13` 进行整数除法，只返回整数结果（3），而不是返回小数值，如在[清单
    2-1](ch02.xhtml#ch02list1)中所示。因为你安装的是 Python 3，所以不应遇到这个问题。不过我们接下来看到的图形包使用的是 Python
    2，因此我们在除法时必须确保要求返回小数结果。
- en: OPERATING ON VARIABLES
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对变量进行操作
- en: You can also use operators on variables. In [Chapter 1](ch01.xhtml#ch01) you
    learned to use variables when defining a function. Like variables in algebra,
    variables in programming allow long, complicated calculations to be broken into
    several stages by storing results that can be used again later. [Listing 2-2](ch02.xhtml#ch02list2)
    shows how you can use variables to store numbers and operate on them, no matter
    what their value is.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在变量上使用运算符。在[第1章](ch01.xhtml#ch01)中，你学习了在定义函数时使用变量。像代数中的变量一样，编程中的变量可以通过存储结果并在之后再次使用，从而将复杂的计算分解为多个阶段。[清单
    2-2](ch02.xhtml#ch02list2)展示了如何使用变量存储数字并对其进行操作，无论其值是什么。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 2-2: Storing results in variables*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-2：在变量中存储结果*'
- en: Here, we assign the value 5 to the `x` variable, then increment it by 2, so
    `x` becomes 7\. We then assign the value 12 to the variable `length`. When we
    add `x` and `length`, we’re adding 7 + 12, so the result is 19.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将值 5 赋给 `x` 变量，然后将其增加 2，使得 `x` 变成 7。接着，我们将值 12 赋给变量 `length`。当我们将 `x`
    和 `length` 相加时，我们在加 7 + 12，所以结果是 19。
- en: USING OPERATORS TO WRITE THE AVERAGE() FUNCTION
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用运算符编写 `average()` 函数
- en: 'Let’s practice using operators to find the mean of a series of numbers. As
    you may know from math class, to find the mean you add all the numbers together
    and divide them by how many numbers there are in the series. For example, if your
    numbers are 10 and 20, you add 10 and 20 and divide the sum by 2, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习使用运算符来计算一系列数字的平均值。正如你可能知道的，计算平均值的方法是将所有数字相加，再除以数字的个数。例如，如果你的数字是 10 和 20，你将
    10 和 20 相加并将和除以 2，如下所示：
- en: (10 + 20) / 2 = 15
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (10 + 20) / 2 = 15
- en: 'If your numbers are 9, 15, and 23, you add them together and divide the sum
    by 3:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数字是 9、15 和 23，你将它们相加并将和除以 3：
- en: (9 + 15 + 23) / 3 = 47 / 3 = 15.67
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: (9 + 15 + 23) / 3 = 47 / 3 = 15.67
- en: 'This can be tedious to do by hand but simple to do with code. Let’s start a
    Python file called *arithmetic.py* and write a function to find the average of
    two numbers. You should be able to run the function and give it two numbers as
    arguments, without any operators, and have it print the average, like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 手动做这件事可能会很繁琐，但用代码就简单多了。我们先创建一个名为 *arithmetic.py* 的 Python 文件，并编写一个函数来计算两个数字的平均值。你应该能够运行这个函数并传入两个数字作为参数，不需要任何运算符，最终输出平均值，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s give it a try.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来试一下。
- en: MIND THE ORDER OF OPERATIONS!
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意运算顺序！
- en: 'Our `average()` function transforms two numbers, `a` and `b`, into half their
    sum and then returns that value using the `return` keyword. Here’s the code for
    our function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `average()` 函数将两个数字 `a` 和 `b` 转换为它们和的一半，然后使用 `return` 关键字返回该值。这里是我们函数的代码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We define a function called `average()`, which requires two numbers, `a` and
    `b`, as inputs. We write that the function should return the sum of the two numbers
    divided by 2\. However, when we test the function in the shell, we get the wrong
    output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为 `average()` 的函数，它需要两个数字 `a` 和 `b` 作为输入。我们编写该函数返回这两个数字的和除以 2。然而，当我们在
    shell 中测试这个函数时，得到的结果是错误的：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s because we didn’t take the *order of operations* into account when writing
    our function. As you probably remember from math class, multiplication and division
    take precedence over addition and subtraction, so in this case division is performed
    first. This function is dividing `b` by 2 and *then* adding `a`. So how do we
    fix this?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以这样，是因为我们在编写函数时没有考虑到 *运算顺序*。你可能还记得数学课上，乘法和除法优先于加法和减法，所以在这个例子中，除法是先执行的。这个函数是先将
    `b` 除以 2，然后 *再* 加上 `a`。那么我们该如何修正这个问题呢？
- en: USING PARENTHESES WITH OPERATORS
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用括号与运算符
- en: 'We need to use parentheses to tell Python to add the two numbers first, before
    dividing:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用括号来告诉 Python 先加两个数字，再进行除法运算：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now the function should add `a` and `b` before dividing by 2\. Here’s what
    happens when we run the function in the shell:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，函数应该先加 `a` 和 `b`，再除以 2。以下是在 shell 中运行函数时发生的情况：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you perform this same calculation by hand, you can see the output is correct!
    Try the `average()` function using different numbers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你手动执行相同的计算，你会发现输出是正确的！尝试使用不同的数字来调用 `average()` 函数。
- en: DATA TYPES IN PYTHON
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PYTHON 中的数据类型
- en: Before we continue doing arithmetic on numbers, let’s explore some basic Python
    data types. Different data types have different capabilities, and you can’t always
    perform the same operations on all of them, so it’s important to know how each
    data type works.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续对数字进行算术运算之前，让我们先了解一些基本的 Python 数据类型。不同的数据类型有不同的能力，并且你不能对所有数据类型执行相同的操作，因此了解每种数据类型的工作原理非常重要。
- en: INTEGERS AND FLOATS
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 整数与浮点数
- en: 'Two Python data types you commonly perform operations on are integers and floats.
    *Integers* are whole numbers. *Floats* are numbers containing decimals. You can
    change integers to floats, and vice versa, by using the `float()` and `int()`
    functions, respectively, like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你常常需要对两个数据类型进行操作，它们是整数和浮点数。*整数*是没有小数部分的数字。*浮点数*是包含小数的数字。你可以通过使用 `float()`
    和 `int()` 函数，分别将整数转换为浮点数，反之亦然，像这样：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example we use `x = 3` to assign the value 3 to the variable `x`. We
    then convert `x` into a float using `float(x)` and assign the result (`3.0`) to
    the variable `y`. Finally, we convert `y` into an integer and assign the result
    (`3`) to the variable `z`. This shows how you can easily switch between floats
    and ints.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `x = 3` 将值 3 赋给变量 `x`。然后我们使用 `float(x)` 将 `x` 转换为浮动类型，并将结果（`3.0`）赋给变量
    `y`。最后，我们将 `y` 转换为整数并将结果（`3`）赋给变量 `z`。这展示了如何在浮动类型和整数之间轻松转换。
- en: STRINGS
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串
- en: '*Strings* are ordered alphanumeric characters, which can be a series of letters,
    like words, or numbers. You define a string by enclosing the characters in single
    (`''''`) or double quotes (`""`), like so:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串* 是按顺序排列的字母数字字符，可以是字母组成的词，或者是数字。你可以通过将字符放在单引号（`''''`）或双引号（`""`）中来定义字符串，例如：'
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we store the string `"hello"` in variable `a`. When we add variable `a`
    to itself, we get a new string, `''hellohello''`, which is a combination of two
    `hello`s. Keep in mind that you can’t add strings and number data types (integers
    and floats) together, though. If you try adding the integer `2` and the string
    `"hello"`, you’ll get this error message:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将字符串 `"hello"` 存储在变量 `a` 中。当我们将变量 `a` 与自身相加时，我们得到一个新字符串 `'hellohello'`，它是两个
    `hello` 的组合。请记住，字符串和数字数据类型（整数和浮动类型）不能相加。如果你尝试将整数 `2` 与字符串 `"hello"` 相加，你将得到以下错误信息：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, if a number is a string (or enclosed in quotes), you can add it to
    another string, like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果一个数字是字符串（或者用引号括起来），你可以将它与另一个字符串相加，例如：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example both `'123'` and `'4'` are strings made up of numbers, not number
    data types. So when you add the two together you get a longer string (`'1234'`)
    that is a combination of the two strings. You can do the same with the strings
    `'hello'` and `' 123'`, even though one is made of letters and the other is made
    of numbers. Joining strings to create a new string is called *concatenation*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`'123'` 和 `'4'` 都是由数字组成的字符串，而不是数字数据类型。因此，当你将这两个字符串相加时，你得到一个更长的字符串（`'1234'`），它是这两个字符串的组合。你也可以用字符串
    `'hello'` 和 `' 123'` 做同样的事情，尽管一个是字母组成，另一个是数字组成。将字符串连接起来形成一个新字符串叫做 *连接*。
- en: 'You can also multiply a string by an integer to repeat the string, like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将字符串乘以一个整数来重复该字符串，例如：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But you can’t subtract, multiply, or divide a string by another string. Enter
    the following in the shell to see what happens:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不能将一个字符串减去、乘以或除以另一个字符串。在命令行中输入以下内容，看看会发生什么：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, when you try to multiply `'dog'` and `'bark'`, you get an error
    telling you that you can’t multiply two string data types.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，当你尝试将 `'dog'` 和 `'bark'` 相乘时，你会得到一个错误，告诉你不能将两个字符串数据类型相乘。
- en: BOOLEANS
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布尔值
- en: '*Booleans* are true/false values, which means they can be only one or the other
    and nothing in between. Boolean values have to be capitalized in Python and are
    often used to compare the values of two things. To compare values you can use
    the greater-than (`>`) and less-than (`<`) symbols, like so:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*布尔值* 是真/假的值，这意味着它们只能是其中之一，没有中间值。布尔值在 Python 中必须大写，通常用于比较两个事物的值。要比较值，你可以使用大于（`>`）和小于（`<`）符号，如下所示：'
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Because 3 is greater than 2, this expression returns `True`. But checking whether
    two values are equal requires two equal signs (`==`), because one equal sign simply
    assigns a value to a variable. Here’s an example of how this works:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 3 大于 2，所以这个表达式返回 `True`。但是检查两个值是否相等需要两个等号（`==`），因为一个等号只是将值赋给变量。这里是一个例子，展示了如何工作：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First we assign the value 5 to variable `b` using one equal sign. Then we use
    two equal signs to check whether `b` is equal to 5, which returns `True`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用一个等号将值 5 赋给变量 `b`。然后我们使用两个等号检查 `b` 是否等于 5，这会返回 `True`。
- en: CHECKING DATA TYPES
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查数据类型
- en: 'You can always check which data type you’re dealing with by using the `type()`
    function with a variable. Python conveniently tells you what data type the value
    in the variable is. For example, let’s assign a Boolean value to a variable, like
    this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将一个变量传递给 `type()` 函数来始终检查你正在处理的数据类型。Python 会方便地告诉你该变量中的值是什么数据类型。例如，我们可以将一个布尔值赋给一个变量，如下所示：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When you pass variable `a` into the `type()` function, Python tells you that
    the value in `a` is a Boolean.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将变量 `a` 传递给 `type()` 函数时，Python 会告诉你变量 `a` 中的值是布尔类型。
- en: 'Try checking the data type of an integer:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试检查一个整数的数据类型：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following checks whether 0.5 is a float:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码检查 0.5 是否是浮动类型：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This example confirms that alphanumeric symbols inside quotes are a string:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子确认了引号中的字母数字符号是字符串：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that you know the different data types in Python and how to check the data
    type of a value you’re working with, let’s start automating simple arithmetic
    tasks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Python 中的不同数据类型以及如何检查你正在处理的值的数据类型，让我们开始自动化简单的算术任务吧。
- en: USING LISTS TO STORE VALUES
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用列表存储值
- en: 'So far we’ve used variables to hold a single value. A *list* is a type of variable
    that can hold multiple values, which is useful for automating repetitive tasks.
    To declare a list in Python, you simply create a name for the list, use the `=`
    command like you do with variables, and then enclose the items you want to place
    in the list in square brackets, `[]`, separating each item using a comma, like
    this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直使用变量来保存单个值。*列表*是一种可以保存多个值的变量类型，这在自动化重复任务时非常有用。要在 Python 中声明一个列表，你只需要为列表创建一个名称，像使用变量一样使用`=`命令，然后将你想放入列表的元素用方括号`[]`括起来，并用逗号分隔每个元素，如下所示：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Often it’s useful to create an empty list so you can add values, such as numbers,
    coordinates, and objects, to it later. To do this, just create the list as you
    would normally but without any values, as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 经常会创建一个空列表，这样以后可以向其中添加值，比如数字、坐标和对象。为了做到这一点，只需像平常一样创建列表，但不添加任何值，如下所示：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This creates an empty list called `b`, which you can fill with different values.
    Let’s see how to add things to a list.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建一个空列表`b`，你可以将不同的值填充到其中。让我们看看如何向列表添加元素。
- en: ADDING ITEMS TO A LIST
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向列表添加元素
- en: 'To add an item to a list, use the `append()` function, as shown here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要向列表添加一个元素，请使用`append()`函数，如下所示：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: First, type the name of the list (`b`) you want to add to, followed by a period,
    and then use `append()` to name the item you want to add inside parentheses. You
    can see the list now contains just the number 4.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，键入你想要添加元素的列表名称（`b`），然后加一个句点，接着使用`append()`并在括号内指定你想添加的元素。你可以看到列表现在仅包含数字4。
- en: 'You can also add items to lists that aren’t empty, like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以向非空列表添加元素，像这样：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Items appended to an existing list appear at the end of the list. As you can
    see, your list doesn’t have to be just numbers. Here, we append the Boolean value
    `True` to a list containing the numbers 4 and 5.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到现有列表的元素会出现在列表的末尾。如你所见，列表不一定只能包含数字。这里，我们将布尔值`True`添加到包含数字4和5的列表中。
- en: 'A single list can hold more than one data type, too. For example, you can add
    text as strings, as shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 单个列表也可以包含多个数据类型。例如，你可以像这里这样将文本作为字符串添加进去：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To add a string, you need to include either double or single quotes around
    the text. Otherwise, Python looks for a variable named `hello`, which may or may
    not exist, thus causing an error or unexpected behavior. Now you have four items
    in list `b`: two numbers, a Boolean value, and a string.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个字符串，你需要在文本周围加上双引号或单引号。否则，Python 会查找名为`hello`的变量，这个变量可能存在也可能不存在，从而导致错误或意外的行为。现在你在列表`b`中有四个元素：两个数字，一个布尔值和一个字符串。
- en: OPERATING ON LISTS
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列表操作
- en: Like on strings, you can use addition and multiplication operators on lists,
    but you can’t simply add a number and a list. Instead, you have to append it using
    concatenation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 和字符串一样，你可以在列表上使用加法和乘法运算符，但你不能直接将数字和列表相加。相反，你必须使用连接操作符将其附加到列表上。
- en: 'For example, you can add two lists together using the `+` operator, like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用`+`操作符将两个列表相加，像这样：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can also multiply a list by a number, like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过一个数字来乘以一个列表，像这样：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, multiplying the number 2 by list `d` doubles the number of items
    in the original list.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，将数字2与列表`d`相乘会使原始列表中的元素数量翻倍。
- en: 'But when we try to add a number and a list using the + operator, we get an
    error called a TypeError:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当我们尝试用加号操作符将数字和列表相加时，会出现一个错误，称为类型错误（TypeError）：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is because you can’t add a number and a list using the addition symbol.
    Although you can add two lists together, append an item to a list, and even multiply
    a list by a number, you can concatenate a list only to another list.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你不能用加号将数字和列表相加。虽然你可以将两个列表相加，将一个元素添加到列表中，甚至将一个列表与一个数字相乘，但你只能将列表连接到另一个列表。
- en: REMOVING ITEMS FROM A LIST
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从列表中移除元素
- en: 'Removing an item from a list is just as easy: you can use the `remove()` function
    with the item you want to remove as the argument, as shown next. Make sure to
    refer to the item you’re removing exactly as it appears in the code; otherwise,
    Python won’t understand what to delete.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中移除一个元素也很简单：你可以使用`remove()`函数，传入你要移除的元素作为参数，如下所示。确保引用你要移除的元素时与代码中完全一致，否则
    Python 无法理解应该删除什么。
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this example, `b.remove(5)` removes `5` from the list, but notice that the
    rest of the items stay in the same order. The fact that the order is maintained
    like this will become important later.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`b.remove(5)`从列表中移除`5`，但注意，其他项的顺序保持不变。顺序被保持这一点将变得很重要。
- en: USING LISTS IN LOOPS
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在循环中使用列表
- en: 'Often in math you need to apply the same action to multiple numbers. For example,
    an algebra book might define a function and ask you to plug a bunch of different
    numbers into the function. You can do this in Python by storing the numbers in
    a list and then using the `for` loop you learned about in [Chapter 1](ch01.xhtml#ch01)
    to perform the same action on each item in the list. Remember, when you perform
    an action repeatedly, it’s known as *iterating*. The iterator is the variable
    `i` in `for i in range(10)`, which we’ve used in previous programs, but it doesn’t
    always have to be called `i`; it can be called anything you want, as in this example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，你常常需要对多个数字应用相同的操作。例如，一本代数书可能定义了一个函数，并要求你将一堆不同的数字代入该函数。你可以通过将数字存储在列表中，然后使用在[第1章](ch01.xhtml#ch01)中学习到的`for`循环，对列表中的每一项执行相同的操作来完成此任务。记住，当你反复执行某个操作时，这叫做*迭代*。迭代器是`for
    i in range(10)`中的变量`i`，我们在之前的程序中使用过，但它不一定总是叫`i`；它可以是任何你想要的名字，就像这个例子：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here, the iterator is called `thing` and it’s applying the `print()` function
    to each item in the list `a`. Notice that the items are printed in order, with
    each item on a new line. To print everything on the same line, you need to add
    an `end` argument and an empty string to your `print()` function, like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，迭代器被称为`thing`，它对列表`a`中的每一项应用`print()`函数。注意，项是按顺序打印的，每项占一行。如果要将所有内容打印在同一行，你需要在`print()`函数中添加`end`参数并设置为空字符串，如下所示：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This prints all the items on the same line, but all the values run together,
    making it hard to distinguish between them. The default value for the `end` argument
    is the line break, as you saw in the preceding example, but you can insert any
    character or punctuation you want by putting it in the quotes. Here I’ve added
    a comma instead:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将所有项打印在同一行，但所有值会连在一起，使得它们难以区分。`end`参数的默认值是换行符，如你在前面的例子中看到的那样，但你可以通过在引号中插入任何字符或标点来更改它。这里我添加了一个逗号：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now each item is separated by a comma, which is much easier to read.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每项之间用逗号分隔，这样更容易阅读。
- en: ACCESSING INDIVIDUAL ITEMS WITH LIST INDICES
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用列表索引访问单个项
- en: 'You can refer to any element in a list by specifying the name of the list and
    then entering its index in square brackets. The *index* is an item’s place or
    position number in the list. The first index of a list is 0\. An index enables
    us to use a meaningful name to store a series of values and access them easily
    within our program. Try this code out in IDLE to see indices in action:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定列表的名称，然后在方括号中输入索引来引用列表中的任何元素。*索引*是列表中项的位置或编号。列表的第一个索引是0。索引使我们能够使用有意义的名称来存储一系列值，并在程序中轻松访问它们。你可以在IDLE中尝试以下代码，看看索引是如何工作的：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The index can also be a variable or an iterator, as shown here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 索引也可以是一个变量或迭代器，如下所示：
- en: '[PRE32]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: ACCESSING INDEX AND VALUE WITH ENUMERATE()
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`enumerate()`获取索引和值
- en: 'To get both the index and the value of an item in a list, you can use a handy
    function called `enumerate()`. Here’s how it works:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取列表中项的索引和值，你可以使用一个方便的函数，叫做`enumerate()`。它的工作原理如下：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, `name` is the value of the item in the list and `i` is the index. The
    important thing to remember with `enumerate()` is that the index comes first,
    then the value. You’ll see this later on when we put objects into a list and then
    access both an object and its exact place in the list.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`name`是列表中项的值，而`i`是索引。使用`enumerate()`时需要记住的重要事项是，索引先出现，然后是值。你将在后面看到，当我们将对象放入列表并同时访问对象及其在列表中的位置时，这一点非常重要。
- en: INDICES START AT ZERO
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 索引从零开始
- en: 'In [Chapter 1](ch01.xhtml#ch01) you learned that the `range(n)` function generates
    a sequence of numbers starting with 0 and up to, but excluding, `n`. Similarly,
    list indices start at 0, not 1, so the index of the first element is `0`. Try
    the following to see how this works:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.xhtml#ch01)中，你学习了`range(n)`函数，它生成一个从0开始，到`n`（但不包括`n`）的数字序列。类似地，列表索引从0开始，而不是1，因此第一个元素的索引是`0`。尝试以下操作，看看它是如何工作的：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here, we create a list called `b` and then ask Python to show us the item at
    index `0` in list `b`, which is the first position. We therefore get `4`. When
    we ask for the item in list `b` at position `2`, we get `'hello'`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个名为 `b` 的列表，然后请求 Python 显示列表 `b` 中索引为 `0` 的项目，也就是第一个位置。因此，我们得到 `4`。当我们请求列表
    `b` 中索引为 `2` 的项目时，我们得到 `'hello'`。
- en: ACCESSING A RANGE OF LIST ITEMS
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 访问一系列列表项目
- en: 'You can use the range (`:`) syntax inside the brackets to access a range of
    elements in a list. For example, to return everything from the second item of
    a list to the sixth, for example, use the following syntax:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在方括号内使用范围（`:`）语法来访问列表中的一系列元素。例如，要返回从列表中的第二项到第六项的所有元素，可以使用以下语法：
- en: '[PRE35]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: It’s important to know that the `1:6` range syntax includes the *first* index
    in that range, `1`, but *excludes* the last index, `6`. That means the range `1:6`
    actually gives us the items with indexes `1` to `5`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`1:6` 范围语法包含该范围中的 *第一个* 索引 `1`，但 *不包括* 最后一个索引 `6`。这意味着范围 `1:6` 实际上给我们返回的是索引
    `1` 到 `5` 之间的项目。
- en: 'If you don’t specify the ending index of the range, Python defaults to the
    length of the list. It returns all elements, from the first index to the end of
    the list, by default. For example, you can access everything from the second element
    of list `b` (index `1`) to the end of the list using the following syntax:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定范围的结束索引，Python 会默认使用列表的长度。默认情况下，它返回从第一个索引到列表末尾的所有元素。例如，你可以使用以下语法访问列表
    `b` 中从第二个元素（索引 `1`）到列表末尾的所有内容：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you don’t specify the beginning, Python defaults to the first item in the
    list, and it won’t include the ending index, as shown here:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定起始位置，Python 会默认从列表的第一个项目开始，并且不会包括结束索引，如下所示：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In this example, `b[:1]` includes the first item (index `0`) but not the item
    with index `1`. One very useful thing to know is that you can access the last
    terms in a list even if you don’t know how long it is by using negative numbers.
    To access the last item, you’d use `-1`, and to access the second-to-last item,
    you’d use `-2`, like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`b[:1]` 包含第一个项目（索引 `0`），但不包括索引为 `1` 的项目。一个非常有用的知识是，你可以通过使用负数来访问列表中的最后几个元素，即使你不知道它的长度。要访问最后一项，你可以使用
    `-1`，要访问倒数第二项，你可以使用 `-2`，像这样：
- en: '[PRE38]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This can be really useful when you are using lists made by other people or using
    really long lists where it’s hard to keep track of all the index positions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用他人制作的列表或使用非常长的列表时，这非常有用，因为在这些情况下很难跟踪所有的索引位置。
- en: FINDING OUT THE INDEX OF AN ITEM
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找项目的索引
- en: 'If you know that a certain value is in the list but don’t know its index, you
    can find its location by giving the list name, followed by the `index` function,
    and placing the value you’re searching for as its argument inside parentheses.
    In the shell, create list `c`, as shown here, and try the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道某个值在列表中，但不知道它的索引，可以通过给出列表名称，后跟`index`函数，并将你要搜索的值作为其参数放在括号中来找到它的位置。在 Shell
    中，创建列表 `c`，如下面所示，然后尝试以下操作：
- en: '[PRE39]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You can see that asking for the value `1` returns the index `0`, because it’s the
    first item in the list. When you ask for the index of `'hello'`, you’re told it’s
    `3`. That last attempt, however, results in an error message. As you can see from
    the last line in the error message, the cause of the error is that `4`, the value
    we are looking for, is not in the list, so Python can’t give us its index.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，查询值 `1` 返回索引 `0`，因为它是列表中的第一个项目。当你查询 `'hello'` 的索引时，它告诉你是 `3`。然而，最后一次尝试会导致错误信息。如错误信息的最后一行所示，错误的原因是我们要找的值
    `4` 不在列表中，因此 Python 无法返回它的索引。
- en: 'To check whether an item exists in a list, use the `in` keyword, like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查某个项目是否存在于列表中，使用 `in` 关键字，像这样：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here, Python returns `True` if an item is in the list and `False` if the item
    is not in the list.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果某个项目在列表中，Python 会返回 `True`，如果不在列表中，则返回 `False`。
- en: STRINGS USE INDICES, TOO
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串也使用索引
- en: 'Everything you’ve learned about list indices applies to strings, too. A string
    has a length, and all the characters in the string are indexed. Enter the following
    in the shell to see how this works:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你学到的关于列表索引的所有知识同样适用于字符串。一个字符串有一个长度，字符串中的所有字符都有索引。在 Shell 中输入以下命令，看看它是如何工作的：
- en: '[PRE41]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here, you can see that the string `'Python'` is made of six characters. Each
    character has an index, which you can access using the same syntax you used for
    lists.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到字符串 `'Python'` 由六个字符组成。每个字符都有一个索引，你可以使用与访问列表相同的语法来访问它们。
- en: SUMMATION
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: When you’re adding a bunch of numbers inside a loop, it’s useful to keep track
    of the running total of those numbers. Keeping a running total like this is an
    important math concept called *summation*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在循环中加一堆数字时，跟踪这些数字的累加和非常有用。保持累加和是一个重要的数学概念，叫做 *求和*。
- en: 'In math class you often see summation associated with a capital sigma, which
    is the Greek letter *S* (for sum). The notation looks like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，你经常会看到求和符号与一个大写的希腊字母 sigma 关联，代表 *S*（和）。其表示形式如下：
- en: '![Image](../images/e032-01.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/e032-01.jpg)'
- en: The summation notation means that you replace *n* with *i* starting at the minimum
    value (listed below the sigma) and going up to the maximum value (listed above
    the sigma). Unlike in Python’s `range(n)`, the summation notation includes the
    maximum value.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 求和符号表示你将 *n* 替换为 *i*，从最小值（列在 sigma 下方）开始，一直到最大值（列在 sigma 上方）。与 Python 的 `range(n)`
    不同，求和符号包括最大值。
- en: CREATING THE RUNNING_SUM VARIABLE
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 `RUNNING_SUM` 变量
- en: 'To write a summation program in Python, we can create a variable called `running_sum`
    (`sum` is taken already as a built-in Python function). We set it to a value of
    zero to begin with and then increment the `running_sum` variable each time a value
    is added. For this we use the `+=` notation again. Enter the following in the
    shell to see an example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 中编写求和程序，我们可以创建一个名为 `running_sum` 的变量（`sum` 已经是 Python 内置的函数）。我们首先将其初始化为零，然后每次添加值时递增
    `running_sum` 变量。为此，我们再次使用 `+=` 符号。你可以在命令行中输入以下内容查看示例：
- en: '[PRE42]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You learned how to use the `+=` command as a shortcut: using `running_sum +=
    3` is the same as `running_sum = running_sum + 3`. Let’s increment the running
    sum by 3 a bunch of times to test it out. To do this, add the following code to
    the *arithmetic.py* program:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何使用 `+=` 命令作为快捷方式：使用 `running_sum += 3` 等同于 `running_sum = running_sum
    + 3`。让我们通过多次递增累加和来测试它。为此，请将以下代码添加到 *arithmetic.py* 程序中：
- en: '[PRE43]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We first create a `running_sum` variable with the value `0` and then run the
    `for` loop 10 times using `range(10)` ➊. The indented content of the loop adds 3
    to the value of `running_sum` on each run of the loop ➋. After the loop runs 10
    times, Python jumps to the final line of code, which in this case is the `print`
    statement that displays the value of `running_sum` at the end of 10 loops.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个值为 `0` 的 `running_sum` 变量，然后使用 `range(10)` 运行 `for` 循环 10 次 ➊。循环体中的缩进部分在每次循环时都会将
    3 加到 `running_sum` 的值中 ➋。当循环执行完 10 次后，Python 会跳转到最后一行代码，这里是 `print` 语句，用于显示 `running_sum`
    在 10 次循环后的值。
- en: 'From this, you might be able to figure out what the final sum is, and here’s
    the output:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可能能够推算出最终的和，下面是输出结果：
- en: '[PRE44]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In other words, 10 multiplied by 3 is 30, so the output makes sense!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，10 乘以 3 等于 30，因此输出是有道理的！
- en: WRITING THE MYSUM() FUNCTION
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写 `MYSUM()` 函数
- en: 'Let’s expand our running sum program into a function called `mySum()`, which
    takes an integer as a parameter and returns the sum of all the numbers from 1
    up to the number specified, like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的累加和程序扩展为一个名为 `mySum()` 的函数，它接受一个整数作为参数，并返回从 1 到指定数字的所有数字的和，如下所示：
- en: '[PRE45]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'First, we declare the value of the running sum and then increment it in the
    loop:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明累加和的值，然后在循环中递增它：
- en: '[PRE46]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: To define the `mySum()` function, we start the running sum off at 0\. Then we
    set up a range of values for `i`, from 1 to `num`. Keep in mind that `range(1,num)`
    won’t include `num` itself! Then we add `i` to the running sum after every loop.
    When the loop is finished, it should return the value of the running sum.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义 `mySum()` 函数，我们将累加和从 0 开始。然后，我们设置一个 `i` 的取值范围，从 1 到 `num`。请注意，`range(1,num)`
    不包括 `num` 本身！接着，我们在每次循环后将 `i` 加到累加和中。当循环结束时，它应该返回累加和的值。
- en: 'Run the function with a much larger number in the shell. It should be able
    to return the sum of all the numbers, from 1 to that number, in a flash:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个更大的数字在命令行中运行该函数。它应该能迅速返回从 1 到该数字的所有数字的和：
- en: '[PRE47]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Pretty convenient! To solve for the sum of our more difficult sigma problem
    from earlier, simply change your loop to go from 0 to 20 (including 20) and add
    the square of `i` plus 1 every loop:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 非常方便！要解决我们之前提到的更复杂的 sigma 问题，只需将循环修改为从 0 到 20（包括 20），并在每次循环时加上 `i` 的平方加 1：
- en: '[PRE48]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'I changed the loop so it would start at 0, as the sigma notation indicates:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我将循环修改为从 0 开始，正如 sigma 符号所示：
- en: '![Image](../images/e033-01.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/e033-01.jpg)'
- en: 'When we run this, we get the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个时，得到的结果是：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'EXERCISE 2-1: FINDING THE SUM'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 2-1：求和
- en: Find the sum of all the numbers from 1 to 100\. How about from 1 to 1,000? See
    a pattern?
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 求1到100的所有数字之和。那1到1,000呢？有没有发现什么规律？
- en: FINDING THE AVERAGE OF A LIST OF NUMBERS
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求一组数字的平均值
- en: Now that you have a few new skills under your belt, let’s improve our average
    function. We can write a function that uses lists to find the average of any list
    of numbers, without us having to specify how many there are.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了一些新技能，让我们来改进我们的平均值函数。我们可以编写一个函数，使用列表来计算任何数字列表的平均值，而无需指定数字的数量。
- en: 'In math class you learn that to find the average of a bunch of numbers, you
    divide the sum of those numbers by how many numbers there are. In Python you can
    use a function called `sum()` to add up all the numbers in a list, like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，你学到要计算一组数字的平均值，方法是将这些数字的和除以数字的个数。在 Python 中，你可以使用名为`sum()`的函数来将列表中所有数字相加，像这样：
- en: '[PRE50]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now we just have to find out the number of items in the list. In the `average()`
    function we wrote earlier in this chapter, we knew there were only two numbers.
    But what if there are more? Fortunately, we can use the `len()` function to count
    the number of items in a list. Here’s an example:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要找出列表中的项数。在本章前面编写的`average()`函数中，我们知道只有两个数字。但如果有更多呢？幸运的是，我们可以使用`len()`函数来计算列表中的项数。下面是一个示例：
- en: '[PRE51]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'As you can see, you simply enter the function and pass the list as the argument.
    This means that we can use both the `sum()` and `len()` functions to find the
    average of the items in the list by dividing the sum of the list by the length
    of the list. Using these built-in keywords, we can create a concise version of
    the average function, which would look something like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你只需输入函数并将列表作为参数传递。这意味着我们可以同时使用`sum()`和`len()`函数，通过将列表的和除以列表的长度来求得列表中项的平均值。利用这些内置的关键字，我们可以创建一个简洁的平均值函数，它的样子可能是这样的：
- en: '[PRE52]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'When you call the function in the shell, you should get the following output:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在命令行中调用这个函数时，你应该得到以下输出：
- en: '[PRE53]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The good thing about this version of the average function is that it works for
    a short list of numbers as well as for a long one!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的平均值函数的好处是，它既适用于短列表，也适用于长列表！
- en: 'EXERCISE 2-2: FINDING THE AVERAGE'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 2-2：求平均值
- en: 'Find the average of the numbers in the list below:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 求下面列表中数字的平均值：
- en: '[PRE54]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: SUMMARY
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you learned about data types like integers, floats, and Booleans.
    You learned to create a list, add and remove elements from a list, and find specific
    items in a list using indices. Then you learned how to use loops, lists, and variables
    to solve arithmetic problems, such as finding the average of a bunch of numbers
    and keeping a running sum.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了数据类型，如整数、浮点数和布尔值。你学会了如何创建列表、添加和删除列表中的元素，并使用索引查找列表中的特定项。接着，你学习了如何使用循环、列表和变量来解决算术问题，比如求一组数字的平均值和保持累计和。
- en: In the next chapter you’ll learn about conditionals, another important programming
    concept you’ll need to learn to tackle the rest of this book.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习条件语句，这是另一个重要的编程概念，学习它你才能应对本书的其余部分。
