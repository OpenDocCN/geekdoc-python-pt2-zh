["```py\nprint(\"Learn your emergency evacuation drill\")\n```", "```py\n➊ def add(first_number, second_number):\n➋     total = first_number + second_number\n➌     print(first_number, \"+\", second_number, \"=\", total)\n\n➍ add(5, 7)\n   add(2012, 137)\n   add(1234, 4321)\n```", "```py\n5 + 7 = 12\n2012 + 137 = 2149\n1234 + 4321 = 5555\n```", "```py\n   --snip--\n\n   ###############\n   ## VARIABLES ##\n   ###############\n\n   --snip--\n\n   player_image = PLAYER[player_direction][player_frame]\n   player_offset_x, player_offset_y = 0, 0\n\n➊ PLAYER_SHADOW = {\n       \"left\": [images.spacesuit_left_shadow, images.spacesuit_left_1_shadow,\n                images.spacesuit_left_2_shadow, images.spacesuit_left_3_shadow,\n                images.spacesuit_left_3_shadow\n                ],\n       \"right\": [images.spacesuit_right_shadow, images.spacesuit_right_1_shadow,\n                 images.spacesuit_right_2_shadow,\n                 images.spacesuit_right_3_shadow, images.spacesuit_right_3_shadow\n                 ],\n       \"up\": [images.spacesuit_back_shadow, images.spacesuit_back_1_shadow,\n              images.spacesuit_back_2_shadow, images.spacesuit_back_3_shadow,\n              images.spacesuit_back_3_shadow\n              ],\n       \"down\": [images.spacesuit_front_shadow, images.spacesuit_front_1_shadow,\n                images.spacesuit_front_2_shadow, images.spacesuit_front_3_shadow,\n                images.spacesuit_front_3_shadow\n                ]\n       }\n\n➋ player_image_shadow = PLAYER_SHADOW[\"down\"][0]\n\n➌ PILLARS = [\n       images.pillar, images.pillar_95, images.pillar_80,\n       images.pillar_60, images.pillar_50\n       ]\n\n➍ wall_transparency_frame = 0\n\n➎ BLACK = (0, 0, 0)\n   BLUE = (0, 155, 255)\n   YELLOW = (255, 255, 0)\n   WHITE = (255, 255, 255)\n   GREEN = (0, 255, 0)\n   RED = (128, 0, 0)\n\n   ###############\n   ##    MAP    ##\n   ###############\n\n   --snip--\n```", "```py\n(255, 0, 0)\n```", "```py\n--snip--\n###############\n##   START   ##\n###############\n\nclock.schedule_interval(game_loop, 0.03)\ngenerate_map()\n```", "```py\n   --snip--\n\n       if player_direction == \"down\" and player_frame > 0:\n           player_offset_y = -1 + (0.25 * player_frame)\n\n   ###############\n   ##  DISPLAY  ##\n   ###############\n\n➊ def draw_image(image, y, x):\n➋     screen.blit(\n           image,\n           (top_left_x + (x * TILE_SIZE),\n            top_left_y + (y * TILE_SIZE) - image.get_height())\n           )\n\n➌ def draw_shadow(image, y, x):\n       screen.blit(\n           image,\n           (top_left_x + (x * TILE_SIZE),\n            top_left_y + (y * TILE_SIZE))\n           )\n\n   def draw_player():\n➍     player_image = PLAYER[player_direction][player_frame]\n➎     draw_image(player_image, player_y + player_offset_y,\n                  player_x + player_offset_x)\n➏     player_image_shadow = PLAYER_SHADOW[player_direction][player_frame]\n➐     draw_shadow(player_image_shadow, player_y + player_offset_y,\n                   player_x + player_offset_x)\n\n   ###############\n   ##   START   ##\n   ###############\n\n   clock.schedule_interval(game_loop, 0.03)\n   generate_map()\n```", "```py\ndraw_image(player_image, 5, 2)\n```", "```py\n   --snip--\n\n   def draw_player():\n       player_image = PLAYER[player_direction][player_frame]\n       draw_image(player_image, player_y + player_offset_y,\n                  player_x + player_offset_x)\n       player_image_shadow = PLAYER_SHADOW[player_direction][player_frame]\n       draw_shadow(player_image_shadow, player_y + player_offset_y,\n                   player_x + player_offset_x)\n   def draw():\n       if game_over:\n           return\n\n➊     # Clear the game arena area.\n       box = Rect((0, 150), (800, 600))\n       screen.draw.filled_rect(box, RED)\n       box = Rect ((0, 0), (800, top_left_y + (room_height - 1)*30))\n\n➋     screen.surface.set_clip(box)\n       floor_type = get_floor_type()\n\n➌     for y in range(room_height): # Lay down floor tiles, then items on floor.\n           for x in range(room_width):\n               draw_image(objects[floor_type][0], y, x)\n               # Next line enables shadows to fall on top of objects on floor\n               if room_map[y][x] in items_player_may_stand_on:\n                   draw_image(objects[room_map[y][x]][0], y, x)\n\n➍     # Pressure pad in room 26 is added here, so props can go on top of it.\n       if current_room == 26:\n           draw_image(objects[39][0], 8, 2)\n           image_on_pad = room_map[8][2]\n           if image_on_pad > 0:\n               draw_image(objects[image_on_pad][0], 8, 2)\n\n➎     for y in range(room_height):\n           for x in range(room_width):\n               item_here = room_map[y][x]\n               # Player cannot walk on 255: it marks spaces used by wide objects.\n               if item_here not in items_player_may_stand_on + [255]:\n                   image = objects[item_here][0]\n\n➏                 if (current_room in outdoor_rooms\n                       and y == room_height - 1\n                       and room_map[y][x] == 1) or \\\n                       (current_room not in outdoor_rooms\n                       and y == room_height - 1\n                       and room_map[y][x] == 1\n                       and x > 0\n                       and x < room_width - 1):\n                       # Add transparent wall image in the front row.\n                       image = PILLARS[wall_transparency_frame]\n\n                   draw_image(image, y, x)\n\n➐                 if objects[item_here][1] is not None: # If object has a shadow\n                       shadow_image = objects[item_here][1]\n                       # if shadow might need horizontal tiling\n➑                     if shadow_image in [images.half_shadow,\n                                           images.full_shadow]:\n                           shadow_width = int(image.get_width() / TILE_SIZE)\n                           # Use shadow across width of object.\n                           for z in range(0, shadow_width):\n                               draw_shadow(shadow_image, y, x+z)\n                       else:\n                           draw_shadow(shadow_image, y, x)\n\n➒         if (player_y == y):\n                   draw_player()\n\n➓     screen.surface.set_clip(None)\n\n   ###############\n   ##   START   ##\n   ###############\n\n   clock.schedule_interval(game_loop, 0.03)\n   generate_map()\n```", "```py\nbox = Rect((left position, top position), (width, height))\n```", "```py\nscreen.draw.filled_rect(box, color)\n```", "```py\n   --snip--\n\n   def generate_map():\n\n   --snip--\n\n               for tile_number in range(1, image_width_in_tiles):\n                   room_map[scenery_y][scenery_x + tile_number] = 255\n\n➊     center_y = int(HEIGHT / 2) # Center of game window\n➋     center_x = int(WIDTH / 2)\n➌     room_pixel_width = room_width * TILE_SIZE # Size of room in pixels\n➍     room_pixel_height = room_height * TILE_SIZE\n➎     top_left_x = center_x - 0.5 * room_pixel_width\n➏     top_left_y = (center_y - 0.5 * room_pixel_height) + 110\n```", "```py\n   --snip--\n\n   ###############\n   ##  DISPLAY  ##\n   ###############\n\n   --snip--\n\n       screen.surface.set_clip(None)\n\n   def adjust_wall_transparency():\n       global wall_transparency_frame\n\n➊     if (player_y == room_height - 2\n➋         and room_map[room_height - 1][player_x] == 1\n➌         and wall_transparency_frame < 4):  \n➍         wall_transparency_frame += 1 # Fade wall out.\n\n➎     if ((player_y < room_height - 2\n➏             or room_map[room_height - 1][player_x] != 1)\n➐             and wall_transparency_frame > 0):\n➑         wall_transparency_frame -= 1 # Fade wall in.\n\n   ###############\n   ##   START   ##\n   ###############\n\n   clock.schedule_interval(game_loop, 0.03)\n   generate_map()\n➒ clock.schedule_interval(adjust_wall_transparency, 0.05)\n```", "```py\n   --snip--\n\n       if ((player_y < room_height - 2\n               or room_map[room_height - 1][player_x] != 1)\n               and wall_transparency_frame > 0):\n           wall_transparency_frame -= 1 # Fade wall in.\n\n➊ def show_text(text_to_show, line_number):\n       if game_over:\n           return\n➋     text_lines = [15, 50]\n➌     box = Rect((0, text_lines[line_number]), (800, 35))\n➍     screen.draw.filled_rect(box, BLACK)\n➎     screen.draw.text(text_to_show,\n                        (20, text_lines[line_number]), color=GREEN)\n\n   ###############\n   ##   START   ##\n   ###############\n\n   --snip--\n```", "```py\nshow_text(\"message\", line number)\n```", "```py\n--snip--\n\n###############\n## GAME LOOP ##\n###############\n\ndef start_room():\n    show_text(\"You are here: \" + room_name, 0)\n\ndef game_loop():\n--snip--\n```", "```py\n--snip--\n    if player_y == -1: # through door at TOP\n        #clock.unschedule(hazard_move)\n        current_room -= MAP_WIDTH\n        generate_map()\n        player_y = room_height - 1 # enter at bottom\n        player_x = int(room_width / 2) # enter at door\n        player_frame = 0\n        start_room()\n        return\n--snip--\n```"]