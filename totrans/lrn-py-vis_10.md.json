["```py\nclass Amoeba(object): def __init__(self): print('amoeba initialized')\n```", "```py\nclass Amoeba(object):     def __init__(self): print('amoeba initialized')\na1 = Amoeba()\n```", "```py\nclass Amoeba(object): def __init__(self**, x, y, diameter**): print('amoeba initialized')a1 = Amoeba(**400, 200, 100**)\n```", "```py\nclass Amoeba(object): def __init__(self, x, y, diameter): print('amoeba initialized') self.x = x self.y = y self.d = diametera1 = Amoeba(400, 200, 100)\n```", "```py\na3 = Amoeba(600, 250, 200)\n```", "```py\n. . .def setup(): size(800, 400) frameRate(120)def draw(): background('#004477') # cell membrane fill(0x880099FF) stroke('#FFFFFF') strokeWeight(3) circle(a1.x,  a1.y,  a1.d)\n```", "```py\n . . . self.x = x self.y = y self.d =  diameter self.nucleus = '#FF0000'. . .\n```", "```py\n. . .def draw(): background('#004477') # nucleus fill(a1.nucleus) noStroke() circle(a1.x, a1.y, a1.d/2.5) # cell membrane. . .\n```", "```py\n . . . # nucleus a1.nucleus = '#00FF00' fill(a1.nucleus) . . .\n```", "```py\nclass Amoeba(object): def __init__(self, x, y, diameter): print('amoeba initialized') self.x = x self.y = y self.d = diameter self.nucleus = { 'fill': ['#FF0000', '#FF9900', '#FFFF00', '#00FF00', '#0099FF'][int(random(5))], 'x': self.d * random(-0.15, 0.15), 'y': self.d * random(-0.15, 0.15), 'd': self.d / random(2.5, 4) }. . .\n```", "```py\n. . .def draw(): background('#004477') # nucleus fill(a1.nucleus['fill']) noStroke() circle( a1.x + a1.nucleus['x'],  a1.y + a1.nucleus['y'],  a1.nucleus['d'] ) # cell membrane . . .\n```", "```py\nclass Amoeba(object): . . . def display(self1): # nucleus fill(self.nucleus['fill']) noStroke() circle( self.x + self.nucleus['x'],           self.y + self.nucleus['y'],           self.nucleus['d'] ) # cell membrane fill(0x880099FF) stroke('#FFFFFF') strokeWeight(3) circle(self.x, self.y, self.d). . .def draw(): background('#004477')\n```", "```py\n. . .def draw(): background('#004477') a1.display()\n```", "```py\nclass Amoeba(object): . . . def circlePoint(self, t, r): x = cos(t) * r y = sin(t) * r return [x, y] . . .\n```", "```py\n . . . def display(self): . . . # cell membrane fill(0x880099FF) stroke('#FFFFFF') strokeWeight(3) r = self.d / 2.0 cpl = r * 0.55 cpx, cpy = self.circlePoint(frameCount/(r/2), r/8) xp, xm = self.x+cpx, self.x-cpx yp, ym = self.y+cpy, self.y-cpy beginShape() vertex( self.x, self.y-r # top vertex ) bezierVertex( xp+cpl, yp-r, xm+r, ym-cpl, self.x+r, self.y # right vertex ) bezierVertex( xp+r, yp+cpl, xm+cpl, ym+r, self.x, self.y+r # bottom vertex ) bezierVertex( xp-cpl, yp+r, xm-r, ym+cpl, self.x-r, self.y # left vertex ) bezierVertex( xp-r, yp-cpl, xm-cpl, ym-r, self.x, self.y-r # (back to) top vertex ) endShape(). . .\n```", "```py\nclass Amoeba(object):  . . . def styleNucleus(self, fill): self.nucleus['fill'] = fill  . . .\n```", "```py\n def styleNucleus(self, fill**, diameter**): self.nucleus['fill'] = fill if diameter > self.d/4 and diameter < self.d/2.5: self.nucleus['d'] = diameter\n```", "```py\nfrom amoeba import Amoebaa1 = Amoeba(400, 200, 100)  def setup(): size(800, 400) frameRate(120)def draw(): background('#004477') a1.display()\n```", "```py\nv = PVector(4, 3)\n```", "```py\nmagnitude = v.mag()print(magnitude) # displays 5.0\n```", "```py\nclass Amoeba(object): def __init__(self, x, y, diameter**, xspeed, yspeed**): . . . self.propulsion = PVector(xspeed, yspeed)\n```", "```py\n. . .a1 = Amoeba(400, 200, 100**, 3, -1**). . .def draw(): background('#004477') a1.x += a1.propulsion.x a1.y += a1.propulsion.y a1.display()\n```", "```py\nclass Amoeba(object):     def __init__(self, x, y, diameter): print('amoeba initialized') self.location = PVector(x, y) . . .\n```", "```py\n . . . a1.**location**.x += a1.propulsion.x a1.**location**.y += a1.propulsion.y . . .\n```", "```py\n. . .def draw(): background('#004477') a1.location += a1.propulsion a1.display()\n```", "```py\n. . .\ncurrent = PVector(1, -2). . .def draw(): background('#004477') a1.location += a1.propulsion a1.location += current a1.display()\n```", "```py\nprint(current - a1.propulsion)\n```", "```py\n. . .current = PVector(**1**, **-2**). . .def draw(): background('#004477') pointer = PVector(mouseX, mouseY) difference = pointer - a1.location a1.location += difference . . .\n```", "```py\n. . .def draw(): . . . 1 **#**a1.location += difference 2 **a1.propulsion += difference.limit(0.03)** 3 a1.location += a1.propulsion**.limit(3)** a1.location += current a1.display()\n```", "```py\nclass Amoeba(object): def __init__(self, x, y, diameter, xspeed, yspeed): . . . self.maxpropulsion = self.propulsion.mag()\n```", "```py\n. . .a1 = Amoeba(400, 200, 100, **0.3**, **-0.1**)current = PVector(**0.1**, **-0.2**). . .def draw():  . . . a1.propulsion += difference.limit(**a1.maxpropulsion/100**) a1.location += a1.propulsion.limit(**a1.maxpropulsion**) . . .\n```", "```py\na1 = Amoeba(400, 200, 100, 0.3, -0.1)\nsam = Amoeba(643, 105, 56, 0.4, -0.4)\nbob = Amoeba(295, 341, 108, -0.3, -0.1)\nlee = Amoeba(97, 182, 198, -0.1, 0.2)\n. . .\n```", "```py\ndef draw():  . . . a1.display() sam.display() bob.display() lee.display() . . .\n```", "```py\nfrom amoeba import Amoeba\namoebas = []for i in range(8): diameter = random(50, 200) speed = 1000 / (diameter * 50) x, y = random(800), random(400) amoebas.append(Amoeba(x, y, diameter, speed, speed)). . .\n```", "```py\n. . .def draw(): background('#004477') pointer = PVector(mouseX, mouseY) for a in amoebas: difference = pointer - a.location a.propulsion += difference.limit(a.maxpropulsion/100) a.location += a.propulsion.limit(a.maxpropulsion) a.location += current a.display()\n```", "```py\n . . . for a in amoebas: . . . r = a.d / 2 if a.location.x - r > width:    a.location.x = 0 - r if a.location.x + r < 0:        a.location.x = width + r if a.location.y - r > height:   a.location.y = 0 - r if a.location.y + r < 0:        a.location.y = height + r\n```", "```py\n . . . for a in amoebas: . . . for b in amoebas: if a is b: continue # your solution goes here\n```"]