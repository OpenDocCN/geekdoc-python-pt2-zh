- en: '5'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Asking Questions with if and else
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In programming, we often ask yes or no questions, and do something based on
    the answer. For example, we might ask, “Are you older than 20?” and, if the answer
    is yes, respond with “You are too old!” These sorts of questions are called *conditions*,
    and we combine conditions and their responses into if statements. Conditions can
    be more complicated than a single question, and if statements can be combined
    with multiple questions and different responses based on the answer to each question.
    In this chapter, you’ll learn to use if statements to build programs.
  prefs: []
  type: TYPE_NORMAL
- en: If Statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We might write an if statement in Python like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'An if statement is made up of the if keyword, followed by a condition and a
    colon (:), as in this if age > 20: statement. The lines following the colon must
    be in a block; if the answer to the question is yes (or True), the commands in
    the block will run. Now, let’s explore how to write blocks and conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0056-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*True is a* Boolean *value, named after mathematician George Boole. Booleans
    can only have one of two values: True or False.*'
  prefs: []
  type: TYPE_NORMAL
- en: A Block Is a Group of Programming Statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A *block* of code is a grouped set of programming statements. For example,
    when if age > 20: is True, you might want to do more than just print “You are
    too old!” Perhaps you want to print out more sentences, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This block of code is made up of three print calls that are run only if the
    condition age > 20 is found to be True. Each line in the block has four spaces
    at the beginning. Let’s look at that code again, with visible spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Python, *whitespace*—such as a tab (inserted when you press the TAB key)
    or a space (inserted when you press the spacebar)—is meaningful. Code that is
    at the same position (or indented the same number of spaces from the left margin)
    is grouped into a block. Whenever you start a new line with more spaces than the
    previous one, you are starting a new block. This new block is also part of the
    previous block, like [Figure 5-1](ch05.xhtml#ch05fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/05fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-1: How blocks of code work*'
  prefs: []
  type: TYPE_NORMAL
- en: We group statements into blocks because they are related and need to be run
    together. When you change the indentation of code, you’re generally creating new
    blocks. [Figure 5-2](ch05.xhtml#ch05fig02) shows how three blocks are created
    just by changing the indentation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/05fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-2: A second example showing how blocks of code work*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, even though blocks 2 and 3 have the same indentation, they are considered
    different blocks because there is a block with less indentation (fewer spaces)
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'A block with four spaces on one line and six spaces on the next will produce
    an *indentation error* when you run it. This is because Python expects you to
    use the same number of spaces for all lines in a block. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ve made the spaces visible so you can see the differences. Notice that the
    second print line has six spaces instead of four. When we try to run this code,
    Python highlights the problem line with a red block and displays an explanatory
    SyntaxError message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Python didn’t expect to see two extra spaces at the beginning of the second
    print line.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Use consistent spacing to make your code easier to read. If you start writing
    a program and put four spaces at the beginning of a block, keep using four spaces
    at the beginning of the other blocks in your program. Be sure to indent each line
    in one block with the same number of spaces.*'
  prefs: []
  type: TYPE_NORMAL
- en: Conditions Help Us Compare Things
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *condition* is a programming expression that compares things and tells us
    whether the criteria set by the comparison are True (yes) or False (no). For example,
    age > 10 is a condition that asks, “Is the value of the age variable greater than
    10?” Another condition might be hair_color == ’mauve’, or, “Is the value of the
    hair_color variable mauve?”
  prefs: []
  type: TYPE_NORMAL
- en: We use symbols in Python—called *operators*—to create our conditions, such as
    *equal to*, *greater than*, and *less than*. [Table 5-1](ch05.xhtml#ch05tab01)
    lists common operators.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 5-1:** Symbols for Conditions'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Symbol** | **Definition** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| == | Equal to |'
  prefs: []
  type: TYPE_TB
- en: '| != | Not equal to |'
  prefs: []
  type: TYPE_TB
- en: '| > | Greater than |'
  prefs: []
  type: TYPE_TB
- en: '| < | Less than |'
  prefs: []
  type: TYPE_TB
- en: '| >= | Greater than or equal to |'
  prefs: []
  type: TYPE_TB
- en: '| <= | Less than or equal to |'
  prefs: []
  type: TYPE_TB
- en: For example, if you are 10 years old, the condition your_age == 10 would return
    True; otherwise, it would return False. If you are 12 years old, the condition
    your_age > 10 would return True.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Be sure to use a double equal sign (==) when defining an equal-to condition.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try some examples. Here, we set our age as equal to 10 and then write
    a conditional statement that will print “You are too old for my jokes!” if age
    is greater than 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What happens when we type this into the Python Shell and press ENTER?
  prefs: []
  type: TYPE_NORMAL
- en: Nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Because the value returned by age is not greater than 10, Python does not run
    the print block. However, if we had set age to 20, the message would print.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s change the previous example to use a greater-than-or-equal-to (>=)
    condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0060-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should see “You are too old for my jokes!” printed to the screen because
    the value of age is equal to 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s try using an equal-to (==) condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You should see the message “What’s brown and sticky? A stick!!” printed to the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: If-Then-Else Statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to using if statements to do something when a condition is met (True),
    we can also use if statements to do something when a condition is not true. For
    example, we might print one message to the screen if your age is 12 and another
    if it’s not 12.
  prefs: []
  type: TYPE_NORMAL
- en: The trick here is to use an if-then-else statement, which essentially says,
    “If something is true, then do this; else, do that.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create an if-then-else statement. Enter the following into the Python
    Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we’ve set age to 12, and the condition is asking whether age is equal
    to 12, you should see the first print message on the screen. Now try changing
    the value of age to a number other than 12, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0061-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This time, you should see the second print message.
  prefs: []
  type: TYPE_NORMAL
- en: IF AND ELIF STATEMENTS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can extend an if statement even further with elif, which is short for *else-if*.
    These statements differ from if-then-else statements in that there can be more
    than one elif in the same statement. For example, we can check if a person’s age
    is 10, 11, or 12 (and so on) and have our program do something different based
    on the answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the if statement on the second line checks if the value of
    age is equal to 10\. If so, the print function that follows is run. However, because
    we’ve set age equal to 12, the computer jumps to the next part of the if statement
    (the first elif or *else if*) and checks if the value of age is equal to 11\.
    It isn’t, so the computer jumps to the next elif to see if age is equal to 12\.
    It is, so this time the computer executes the following print call.
  prefs: []
  type: TYPE_NORMAL
- en: When you enter this code in IDLE, it will automatically indent, so be sure to
    press the BACKSPACE key (or DELETE key if you’re using a Mac) once you’ve typed
    each print statement. That way, your if, elif, and else statements will start
    at the far-left margin. This is the same position the if statement would be in,
    if the prompt (>>>) were absent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0062-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Combining Conditions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can combine conditions using the keywords and and or, which produces shorter
    and simpler code. Here’s an example using or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this code, if any of the conditions on the first line are true (if age is
    10, 11, 12, or 13), the print statement on the following line will run.
  prefs: []
  type: TYPE_NORMAL
- en: If the conditions in the first line are not true (else), Python displays Huh?
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To shrink this example even further, we could use the and keyword, along with
    the greater-than-or-equal-to operator (>=) and less-than-or-equal-to operator
    (<=), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, if age is greater than or equal to 10 and less than or equal to 13, the
    print statement on the following line will run. For example, if the value of age
    is 12, then What is 13 + 49 + 84 + 155 + 97? A headache! will be printed to the
    screen because 12 is more than 10 and less than 13.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0063-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Variables with No Value—None
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just as we can assign numbers, strings, and lists to a variable, we can also
    assign nothing, or an empty value. In Python, an empty value is referred to as
    None. It’s important to note that the value None is different from the value 0
    because it is the *absence* of a value rather than a number with a value of 0\.
    Here’s an example where we set a variable to None:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Assigning None to a variable tells Python that the variable no longer has any
    value (or rather, that it no longer labels a value). It’s also a way to define
    a variable without setting its value. This might be useful when you know you’ll
    need a variable later in your program but you want to define all variables at
    the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Programmers often define their variables at the beginning of a program (or
    a function) to have a quick reference of all the variables used in a chunk of
    code.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check for None in an if statement as well, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is useful when you want to calculate a value for a variable only if it
    hasn’t already been calculated yet. In this scenario, checking for None tells
    Python to do the calculation only if the variable doesn’t have a value.
  prefs: []
  type: TYPE_NORMAL
- en: The Difference Between Strings and Numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*User input* is what a person enters on the keyboard—whether that’s a character,
    a pressed arrow or ENTER key, or anything else. In Python, user input is a string,
    meaning when you type the number 10 on your keyboard, Python saves the number
    10 as a string, not a number.'
  prefs: []
  type: TYPE_NORMAL
- en: Compare the number 10 and the string '10'. While we see the only difference
    between the two being that one is surrounded by quotes, to a computer, they are
    completely different.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s compare the value of the variable age to a number in an
    if statement, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we set the variable age to the number 10 first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the print statement executes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we set age to the string ‘10’ (with quotes), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, the print statement doesn’t run because Python doesn’t see the string
    as a number.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0065-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fortunately, Python has functions that can turn strings into numbers and numbers
    into strings. For example, you can convert the string ‘10’ into a number with
    the int function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The variable converted_age now holds the number 10 (rather than a string).
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert a number into a string, use str like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now converted_age holds the string ‘10’ instead of the number 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the if age == 10 statement that didn’t print anything when the variable
    was set to a string (age = ’10’)? If we convert the variable first, we get an
    entirely different result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'But know this: if you try to convert a number with a decimal point (also called
    *floating point numbers*, because the dot can “move” around in a number), you’ll
    get an error because the int function expects an *integer* (a number without a
    decimal place):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Python sends a ValueError to tell you that the value you’ve tried to use isn’t
    appropriate. To fix this, use float instead of int, as the float function can
    handle numbers that aren’t integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll also get a ValueError if you try to convert a string that doesn’t contain
    a number in digits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Because we used the word ten rather than the number 10, Python throws up its
    hands.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned to use if statements to create blocks of code that
    are executed only when particular conditions are true. You saw how to extend if
    statements by using elif so that different sections of code will execute as a
    result of different conditions, and how to use the else keyword to execute code
    if none of the conditions turn out to be true.
  prefs: []
  type: TYPE_NORMAL
- en: You combined conditions by using the and and or keywords to check if numbers
    fall in a range, and changed strings into numbers with the int, str, and float
    functions. You also discovered that None can reset variables to their initial,
    empty state.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try the following puzzles using if and conditions. The solutions can be downloaded
    at *[http://python-for-kids.com](http://python-for-kids.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: '#1: Are You Rich?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What do you think the following code will do? Try to figure out the answer without
    typing it into the Python Shell and then check your work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '#2: Twinkies!'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create an if statement that checks whether a number of Twink-ies (in the variable
    twinkies) is less than 100 or greater than 500\. Your program should print the
    message “Too few or too many” if the condition is True.
  prefs: []
  type: TYPE_NORMAL
- en: '#3: Just the Right Number'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create an if statement that checks whether the amount of money contained in
    the money variable is between 100 and 500 or between 1,000 and 5,000.
  prefs: []
  type: TYPE_NORMAL
- en: '#4: I Can Fight Those Ninjas'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create an if statement that prints “That’s too many” if the variable ninjas
    contains a number less than 50; prints “It’ll be a struggle, but I can take ’em”
    if it’s less than 30; and prints “I can fight those ninjas!” if it’s less than
    10\. You might try out your code with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
