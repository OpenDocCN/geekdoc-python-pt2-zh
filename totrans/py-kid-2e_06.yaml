- en: '5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '5'
- en: Asking Questions with if and else
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 if 和 else 提问
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common.jpg)'
- en: In programming, we often ask yes or no questions, and do something based on
    the answer. For example, we might ask, “Are you older than 20?” and, if the answer
    is yes, respond with “You are too old!” These sorts of questions are called *conditions*,
    and we combine conditions and their responses into if statements. Conditions can
    be more complicated than a single question, and if statements can be combined
    with multiple questions and different responses based on the answer to each question.
    In this chapter, you’ll learn to use if statements to build programs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，我们经常提出“是”或“否”的问题，并根据答案执行某些操作。例如，我们可能会问：“你是否超过 20 岁？”如果答案是“是”，则回应“你太老了！”这类问题叫做*条件*，我们将条件及其响应组合到
    if 语句中。条件可以比一个简单的问题更复杂，if 语句可以结合多个问题，并根据每个问题的答案执行不同的响应。在本章中，你将学习如何使用 if 语句来构建程序。
- en: If Statements
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if 语句
- en: 'We might write an if statement in Python like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会在 Python 中写出这样的 if 语句：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An if statement is made up of the if keyword, followed by a condition and a
    colon (:), as in this if age > 20: statement. The lines following the colon must
    be in a block; if the answer to the question is yes (or True), the commands in
    the block will run. Now, let’s explore how to write blocks and conditions.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 语句由 if 关键字组成，后面跟着条件和冒号（:），例如 this if age > 20: 语句。冒号后面的行必须属于一个代码块；如果问题的答案是“是的”（或
    True），那么代码块中的命令将会执行。现在，让我们探索如何编写代码块和条件。'
- en: '![Image](Images/f0056-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0056-01.jpg)'
- en: '**NOTE**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*True is a* Boolean *value, named after mathematician George Boole. Booleans
    can only have one of two values: True or False.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*True 是一个* 布尔 *值，以数学家 George Boole 命名。布尔值只能有两个值：True 或 False。*'
- en: A Block Is a Group of Programming Statements
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个代码块是一个编程语句的集合
- en: 'A *block* of code is a grouped set of programming statements. For example,
    when if age > 20: is True, you might want to do more than just print “You are
    too old!” Perhaps you want to print out more sentences, like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '一个*代码块*是一个编程语句的集合。例如，当 if age > 20: 为 True 时，你可能不仅仅想打印出“You are too old！”也许你想打印更多的句子，例如：'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This block of code is made up of three print calls that are run only if the
    condition age > 20 is found to be True. Each line in the block has four spaces
    at the beginning. Let’s look at that code again, with visible spaces:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块由三个 print 调用组成，只有当条件 age > 20 被判断为 True 时才会执行。代码块中的每一行前面都有四个空格。让我们再看看这段代码，并显示空格：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Python, *whitespace*—such as a tab (inserted when you press the TAB key)
    or a space (inserted when you press the spacebar)—is meaningful. Code that is
    at the same position (or indented the same number of spaces from the left margin)
    is grouped into a block. Whenever you start a new line with more spaces than the
    previous one, you are starting a new block. This new block is also part of the
    previous block, like [Figure 5-1](ch05.xhtml#ch05fig01).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，*空白字符*——比如制表符（按下 TAB 键时插入）或空格（按下空格键时插入）——是有意义的。处于相同位置（或从左边距缩进相同数量的空格）的代码会被归为一个代码块。每当你用比上一行更多的空格开始新的一行时，就意味着你开始了一个新的代码块。这个新代码块也是前一个代码块的一部分，就像[图
    5-1](ch05.xhtml#ch05fig01)所示。
- en: '![Image](Images/05fig01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/05fig01.jpg)'
- en: '*Figure 5-1: How blocks of code work*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：代码块如何工作*'
- en: We group statements into blocks because they are related and need to be run
    together. When you change the indentation of code, you’re generally creating new
    blocks. [Figure 5-2](ch05.xhtml#ch05fig02) shows how three blocks are created
    just by changing the indentation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将语句归为代码块，因为它们是相关的，且需要一起执行。当你改变代码的缩进时，通常是在创建新的代码块。[图 5-2](ch05.xhtml#ch05fig02)展示了仅通过改变缩进就可以创建三个代码块。
- en: '![Image](Images/05fig02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/05fig02.jpg)'
- en: '*Figure 5-2: A second example showing how blocks of code work*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2：第二个示例展示了代码块如何工作*'
- en: Here, even though blocks 2 and 3 have the same indentation, they are considered
    different blocks because there is a block with less indentation (fewer spaces)
    between them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，尽管第 2 和第 3 个代码块具有相同的缩进，它们仍然被视为不同的代码块，因为它们之间存在一个缩进较少（空格较少）的代码块。
- en: 'A block with four spaces on one line and six spaces on the next will produce
    an *indentation error* when you run it. This is because Python expects you to
    use the same number of spaces for all lines in a block. Here’s an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含四个空格的代码块在一行上，而下一行包含六个空格时，在运行时会产生*缩进错误*。这是因为 Python 期望在一个代码块中的所有行使用相同数量的空格。以下是一个示例：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I’ve made the spaces visible so you can see the differences. Notice that the
    second print line has six spaces instead of four. When we try to run this code,
    Python highlights the problem line with a red block and displays an explanatory
    SyntaxError message:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将空格显示出来，以便你看到差异。注意，第二行的 print 前面有六个空格，而不是四个。我们尝试运行这段代码时，Python 会用红色方块高亮显示出问题的那一行，并显示一个解释性的语法错误（SyntaxError）消息：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Python didn’t expect to see two extra spaces at the beginning of the second
    print line.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python 没有预期在第二行的 print 前面看到两个额外的空格。
- en: '**NOTE**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Use consistent spacing to make your code easier to read. If you start writing
    a program and put four spaces at the beginning of a block, keep using four spaces
    at the beginning of the other blocks in your program. Be sure to indent each line
    in one block with the same number of spaces.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用一致的空格来使代码更易读。如果你在开始编写程序时在一个代码块的开头使用了四个空格，那么在程序中的其他代码块开头也应该继续使用四个空格。确保每个代码块中的每一行都使用相同数量的空格进行缩进。*'
- en: Conditions Help Us Compare Things
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件帮助我们比较事物
- en: A *condition* is a programming expression that compares things and tells us
    whether the criteria set by the comparison are True (yes) or False (no). For example,
    age > 10 is a condition that asks, “Is the value of the age variable greater than
    10?” Another condition might be hair_color == ’mauve’, or, “Is the value of the
    hair_color variable mauve?”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*条件*是一个编程表达式，用来比较事物，并告诉我们比较设定的标准是否为真（是）或假（否）。例如，age > 10 是一个条件，询问“age 变量的值是否大于
    10？”另一个条件可能是 hair_color == ''mauve''，即“hair_color 变量的值是否是紫色？”'
- en: We use symbols in Python—called *operators*—to create our conditions, such as
    *equal to*, *greater than*, and *less than*. [Table 5-1](ch05.xhtml#ch05tab01)
    lists common operators.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Python 中使用符号——称为 *运算符*——来创建条件，比如 *等于*、*大于* 和 *小于*。[表 5-1](ch05.xhtml#ch05tab01)
    列出了常见的运算符。
- en: '**Table 5-1:** Symbols for Conditions'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 5-1：** 条件符号'
- en: '| **Symbol** | **Definition** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **定义** |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| == | Equal to |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| == | 等于 |'
- en: '| != | Not equal to |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| != | 不等于 |'
- en: '| > | Greater than |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| > | 大于 |'
- en: '| < | Less than |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| < | 小于 |'
- en: '| >= | Greater than or equal to |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| >= | 大于或等于 |'
- en: '| <= | Less than or equal to |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| <= | 小于或等于 |'
- en: For example, if you are 10 years old, the condition your_age == 10 would return
    True; otherwise, it would return False. If you are 12 years old, the condition
    your_age > 10 would return True.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你 10 岁，条件 your_age == 10 会返回 True；否则，它会返回 False。如果你 12 岁，条件 your_age >
    10 会返回 True。
- en: '**NOTE**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Be sure to use a double equal sign (==) when defining an equal-to condition.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*定义等于条件时，务必使用双等号（==）。*'
- en: 'Let’s try some examples. Here, we set our age as equal to 10 and then write
    a conditional statement that will print “You are too old for my jokes!” if age
    is greater than 10:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些示例。在这里，我们将年龄设置为 10，并写一个条件语句，如果年龄大于 10，就打印“你太老，不能理解我的笑话！”：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What happens when we type this into the Python Shell and press ENTER?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Python Shell 中输入这些并按下 ENTER 时会发生什么？
- en: Nothing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 什么也没有。
- en: Because the value returned by age is not greater than 10, Python does not run
    the print block. However, if we had set age to 20, the message would print.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 age 返回的值不大于 10，Python 不会执行 print 代码块。但是，如果我们将 age 设置为 20，消息就会被打印出来。
- en: 'Now let’s change the previous example to use a greater-than-or-equal-to (>=)
    condition:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将前一个示例改成使用大于或等于（>=）条件：
- en: '![Image](Images/f0060-01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0060-01.jpg)'
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should see “You are too old for my jokes!” printed to the screen because
    the value of age is equal to 10.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到“你太老，不能理解我的笑话！”被打印到屏幕上，因为 age 的值等于 10。
- en: 'Next, let’s try using an equal-to (==) condition:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们尝试使用等于（==）条件：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should see the message “What’s brown and sticky? A stick!!” printed to the
    screen.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到消息“什么又棕又黏？一根棍子！！”被打印到屏幕上。
- en: If-Then-Else Statements
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: If-Then-Else 语句
- en: In addition to using if statements to do something when a condition is met (True),
    we can also use if statements to do something when a condition is not true. For
    example, we might print one message to the screen if your age is 12 and another
    if it’s not 12.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 if 语句在条件成立（True）时执行某些操作，我们还可以在条件不成立时使用 if 语句来执行操作。例如，如果你的年龄是 12，则打印一条消息，否则打印另一条消息。
- en: The trick here is to use an if-then-else statement, which essentially says,
    “If something is true, then do this; else, do that.”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的技巧是使用 if-then-else 语句，它的基本意思是，“如果某事为真，那么做这个；否则，做那个。”
- en: 'Let’s create an if-then-else statement. Enter the following into the Python
    Shell:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 if-then-else 语句。在 Python Shell 中输入以下内容：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Because we’ve set age to 12, and the condition is asking whether age is equal
    to 12, you should see the first print message on the screen. Now try changing
    the value of age to a number other than 12, like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将 `age` 设置为 12，并且条件检查 `age` 是否等于 12，所以你应该在屏幕上看到第一个打印消息。现在尝试将 `age` 的值更改为
    12 以外的数字，如下所示：
- en: '![Image](Images/f0061-01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0061-01.jpg)'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This time, you should see the second print message.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你应该看到第二个打印消息。
- en: IF AND ELIF STATEMENTS
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IF 和 ELIF 语句
- en: 'We can extend an if statement even further with elif, which is short for *else-if*.
    These statements differ from if-then-else statements in that there can be more
    than one elif in the same statement. For example, we can check if a person’s age
    is 10, 11, or 12 (and so on) and have our program do something different based
    on the answer:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 `elif` 扩展 `if` 语句，`elif` 是 *else-if* 的缩写。这些语句与 `if-then-else` 语句不同，因为同一个语句中可以有多个
    `elif`。例如，我们可以检查一个人的年龄是否为 10、11 或 12（等等），并根据答案让程序做不同的事情：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, the if statement on the second line checks if the value of
    age is equal to 10\. If so, the print function that follows is run. However, because
    we’ve set age equal to 12, the computer jumps to the next part of the if statement
    (the first elif or *else if*) and checks if the value of age is equal to 11\.
    It isn’t, so the computer jumps to the next elif to see if age is equal to 12\.
    It is, so this time the computer executes the following print call.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，第二行的 `if` 语句检查 `age` 的值是否等于 10。如果是，那么后面的 `print` 函数就会执行。然而，因为我们将 `age`
    设置为 12，所以计算机会跳到 `if` 语句的下一个部分（第一个 `elif` 或 *else if*）并检查 `age` 是否等于 11。结果不是，所以计算机会跳到下一个
    `elif` 检查 `age` 是否等于 12。它是，所以这次计算机会执行接下来的 `print` 调用。
- en: When you enter this code in IDLE, it will automatically indent, so be sure to
    press the BACKSPACE key (or DELETE key if you’re using a Mac) once you’ve typed
    each print statement. That way, your if, elif, and else statements will start
    at the far-left margin. This is the same position the if statement would be in,
    if the prompt (>>>) were absent.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 IDLE 中输入这段代码时，它会自动缩进，所以确保在输入每个 `print` 语句后按下 BACKSPACE 键（如果你使用的是 Mac，按 DELETE
    键）。这样，`if`、`elif` 和 `else` 语句将从最左侧的边缘开始。这与没有提示符（>>>）时 `if` 语句的位置相同。
- en: '![Image](Images/f0062-01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0062-01.jpg)'
- en: Combining Conditions
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合条件
- en: 'You can combine conditions using the keywords and and or, which produces shorter
    and simpler code. Here’s an example using or:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `and` 和 `or` 关键字组合条件，这样可以生成更短更简洁的代码。以下是一个使用 `or` 的示例：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this code, if any of the conditions on the first line are true (if age is
    10, 11, 12, or 13), the print statement on the following line will run.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，如果第一行的任何条件为真（即年龄为 10、11、12 或 13），则下一行的 `print` 语句将会执行。
- en: If the conditions in the first line are not true (else), Python displays Huh?
    on the screen.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一行的条件不成立（`else`），Python 将在屏幕上显示 "Huh?"。
- en: 'To shrink this example even further, we could use the and keyword, along with
    the greater-than-or-equal-to operator (>=) and less-than-or-equal-to operator
    (<=), as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步缩小这个例子，我们可以使用 `and` 关键字，结合大于或等于运算符 (>=) 和小于或等于运算符 (<=)，如下所示：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, if age is greater than or equal to 10 and less than or equal to 13, the
    print statement on the following line will run. For example, if the value of age
    is 12, then What is 13 + 49 + 84 + 155 + 97? A headache! will be printed to the
    screen because 12 is more than 10 and less than 13.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，如果 `age` 大于或等于 10 且小于或等于 13，下一行的 `print` 语句将会执行。例如，如果 `age` 的值是 12，那么 "What
    is 13 + 49 + 84 + 155 + 97? A headache!" 会被打印到屏幕上，因为 12 大于 10 且小于 13。
- en: '![Image](Images/f0063-01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0063-01.jpg)'
- en: Variables with No Value—None
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有值的变量—None
- en: 'Just as we can assign numbers, strings, and lists to a variable, we can also
    assign nothing, or an empty value. In Python, an empty value is referred to as
    None. It’s important to note that the value None is different from the value 0
    because it is the *absence* of a value rather than a number with a value of 0\.
    Here’s an example where we set a variable to None:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们可以将数字、字符串和列表赋值给变量一样，我们也可以赋值为空值，或者说一个空的值。在 Python 中，空值称为 `None`。需要注意的是，`None`
    的值与 0 的值不同，因为它表示的是 *没有* 值，而不是一个值为 0 的数字。以下是一个将变量设置为 `None` 的示例：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Assigning None to a variable tells Python that the variable no longer has any
    value (or rather, that it no longer labels a value). It’s also a way to define
    a variable without setting its value. This might be useful when you know you’ll
    need a variable later in your program but you want to define all variables at
    the beginning.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将None赋值给变量意味着告诉Python该变量不再有任何值（或者说，它不再代表某个值）。这也是一种定义变量但不设置其值的方法。当你知道在程序后续部分会使用该变量时，提前定义所有变量可能会很有用。
- en: '**NOTE**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Programmers often define their variables at the beginning of a program (or
    a function) to have a quick reference of all the variables used in a chunk of
    code.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*程序员通常在程序（或函数）开始时定义他们的变量，以便快速查看代码块中使用的所有变量。*'
- en: 'You can check for None in an if statement as well, as in the following example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在if语句中检查None，像下面的例子一样：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is useful when you want to calculate a value for a variable only if it
    hasn’t already been calculated yet. In this scenario, checking for None tells
    Python to do the calculation only if the variable doesn’t have a value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只想在变量尚未计算时才计算一个值时，这会很有用。在这种情况下，检查None会告诉Python仅在变量没有值时才进行计算。
- en: The Difference Between Strings and Numbers
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串与数字的区别
- en: '*User input* is what a person enters on the keyboard—whether that’s a character,
    a pressed arrow or ENTER key, or anything else. In Python, user input is a string,
    meaning when you type the number 10 on your keyboard, Python saves the number
    10 as a string, not a number.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*用户输入*是指用户在键盘上输入的内容——无论是字符、按下的箭头键、回车键还是其他任何内容。在Python中，用户输入是一个字符串，这意味着当你在键盘上输入数字10时，Python会将数字10保存为字符串，而不是数字。'
- en: Compare the number 10 and the string '10'. While we see the only difference
    between the two being that one is surrounded by quotes, to a computer, they are
    completely different.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 比较数字10和字符串‘10’。虽然我们看到两者唯一的区别是一个被引号包围，但对于计算机来说，它们是完全不同的。
- en: 'For example, let’s compare the value of the variable age to a number in an
    if statement, like so:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以将变量age的值与一个数字进行比较，在if语句中，像这样：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we set the variable age to the number 10 first:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们先将变量age设置为数字10：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, the print statement executes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，print语句执行了。
- en: 'Next, we set age to the string ‘10’ (with quotes), like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将age设置为字符串‘10’（带引号），像这样：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the print statement doesn’t run because Python doesn’t see the string
    as a number.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，print语句没有执行，因为Python并不认为字符串是一个数字。
- en: '![Image](Images/f0065-01.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0065-01.jpg)'
- en: 'Fortunately, Python has functions that can turn strings into numbers and numbers
    into strings. For example, you can convert the string ‘10’ into a number with
    the int function:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python有一些函数可以将字符串转化为数字，也可以将数字转化为字符串。例如，你可以使用int函数将字符串‘10’转换为数字：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The variable converted_age now holds the number 10 (rather than a string).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 变量converted_age现在保存的是数字10（而不是字符串）。
- en: 'To convert a number into a string, use str like so:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个数字转换为字符串，可以使用str，像这样：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now converted_age holds the string ‘10’ instead of the number 10.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，converted_age保存的是字符串‘10’而不是数字10。
- en: 'Remember the if age == 10 statement that didn’t print anything when the variable
    was set to a string (age = ’10’)? If we convert the variable first, we get an
    entirely different result:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 记得之前提到的if age == 10语句吗？当变量被设置为字符串（age = '10'）时，它没有打印任何内容。如果我们先转换变量，结果就完全不同了：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'But know this: if you try to convert a number with a decimal point (also called
    *floating point numbers*, because the dot can “move” around in a number), you’ll
    get an error because the int function expects an *integer* (a number without a
    decimal place):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但是请注意：如果你尝试将一个带有小数点的数字（也称为*浮动点数*，因为小数点可以在数字中“移动”）转换成整数，你会遇到错误，因为int函数期望的是一个*整数*（没有小数点的数字）：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Python sends a ValueError to tell you that the value you’ve tried to use isn’t
    appropriate. To fix this, use float instead of int, as the float function can
    handle numbers that aren’t integers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python会抛出一个ValueError来告诉你，你尝试使用的值不合适。要解决这个问题，可以使用float而不是int，因为float函数能够处理非整数的数字：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You’ll also get a ValueError if you try to convert a string that doesn’t contain
    a number in digits:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试将一个不包含数字的字符串转换成数字，也会遇到ValueError：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Because we used the word ten rather than the number 10, Python throws up its
    hands.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了单词“ten”而不是数字10，Python无法处理这个情况。
- en: What You Learned
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: In this chapter, you learned to use if statements to create blocks of code that
    are executed only when particular conditions are true. You saw how to extend if
    statements by using elif so that different sections of code will execute as a
    result of different conditions, and how to use the else keyword to execute code
    if none of the conditions turn out to be true.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何使用if语句来创建只有在特定条件为真时才执行的代码块。你还了解了如何通过使用elif扩展if语句，从而根据不同的条件执行不同的代码块，以及如何使用else关键字在条件都不成立时执行代码。
- en: You combined conditions by using the and and or keywords to check if numbers
    fall in a range, and changed strings into numbers with the int, str, and float
    functions. You also discovered that None can reset variables to their initial,
    empty state.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过使用and和or关键字将条件组合起来，以检查数字是否在某个范围内，并使用int、str和float函数将字符串转换为数字。你还发现None可以将变量重置为其初始的空状态。
- en: Programming Puzzles
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程谜题
- en: Try the following puzzles using if and conditions. The solutions can be downloaded
    at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用if语句和条件来解答以下谜题。答案可以在 *[http://python-for-kids.com](http://python-for-kids.com)*
    下载。
- en: '#1: Are You Rich?'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1: 你富有吗？'
- en: What do you think the following code will do? Try to figure out the answer without
    typing it into the Python Shell and then check your work.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为下面的代码会做什么？尝试在不输入到Python Shell中的情况下猜测答案，然后检查你的结果。
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '#2: Twinkies!'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2: Twinkies！'
- en: Create an if statement that checks whether a number of Twink-ies (in the variable
    twinkies) is less than 100 or greater than 500\. Your program should print the
    message “Too few or too many” if the condition is True.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个if语句，检查Twinkie的数量（保存在变量twinkies中）是否小于100或大于500。如果条件为真，程序应该打印出“Too few or
    too many”（太少或太多）。
- en: '#3: Just the Right Number'
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3: 正确的数量'
- en: Create an if statement that checks whether the amount of money contained in
    the money variable is between 100 and 500 or between 1,000 and 5,000.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个if语句，检查money变量中包含的钱是否在100到500之间，或者在1,000到5,000之间。
- en: '#4: I Can Fight Those Ninjas'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4: 我能打败那些忍者'
- en: 'Create an if statement that prints “That’s too many” if the variable ninjas
    contains a number less than 50; prints “It’ll be a struggle, but I can take ’em”
    if it’s less than 30; and prints “I can fight those ninjas!” if it’s less than
    10\. You might try out your code with this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个if语句，当变量ninjas的值小于50时打印出“That's too many”（太多了）；当值小于30时打印出“It’ll be a struggle,
    but I can take ’em”（会有点困难，但我能打败他们）；当值小于10时打印出“I can fight those ninjas!”（我能打败那些忍者）。你可以尝试以下代码：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
