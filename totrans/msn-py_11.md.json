["```py\n   --snip--\n       elif item_player_is_on == 16:\n           energy += 1\n           if energy > 100:\n               energy = 100\n           use_message = \"You munch the lettuce and get a little energy back\"\n           draw_energy_air()\n\n➊     elif item_player_is_on == 42:\n➋         if current_room == 27:\n➌             open_door(26)\n➍         props[25][0] = 0 # Door from RM32 to engineering bay\n           props[26][0] = 0 # Door inside engineering bay\n➎         clock.schedule_unique(shut_engineering_door, 60)\n           use_message = \"You press the button\"\n           show_text(\"Door to engineering bay is open for 60 seconds\", 1)\n           sounds.say_doors_open.play()\n           sounds.doors.play()\n\n       elif item_carrying == 68 or item_player_is_on == 68:\n           energy = 100\n           use_message = \"You use the food to restore your energy\"\n           remove_object(68)\n           draw_energy_air()\n\n   --snip--\n\n      for recipe in RECIPES:\n           ingredient1 = recipe[0]\n           ingredient2 = recipe[1]\n   --snip--\n               add_object(combination)\n               sounds.combine.play()\n\n       # {key object number: door object number}\n➏     ACCESS_DICTIONARY = { 79:22, 80:23, 81:24 }\n➐     if item_carrying in ACCESS_DICTIONARY:\n           door_number = ACCESS_DICTIONARY[item_carrying]\n➑         if props[door_number][0] == current_room:\n               use_message = \"You unlock the door!\"\n➒             sounds.say_doors_open.play()\n               sounds.doors.play()\n               open_door(door_number)\n\n       show_text(use_message, 0)\n       time.sleep(0.5)\n\n   --snip--\n```", "```py\n   --snip--\n           sounds.completion.play()\n           sounds.say_mission_complete.play()\n\n   ###############\n   ##   DOORS   ##\n   ###############\n\n➊ def open_door(opening_door_number):\n       global door_frames, door_shadow_frames\n       global door_frame_number, door_object_number\n➋     door_frames = [images.door1, images.door2, images.door3,\n                      images.door4, images.floor]\n       # (Final frame restores shadow ready for when door reappears).\n       door_shadow_frames = [images.door1_shadow, images.door2_shadow,\n                             images.door3_shadow, images.door4_shadow,\n                             images.door_shadow]\n       door_frame_number = 0\n       door_object_number = opening_door_number\n➌     do_door_animation()\n\n➍ def close_door(closing_door_number):\n       global door_frames, door_shadow_frames\n       global door_frame_number, door_object_number, player_y\n➎     door_frames = [images.door4, images.door3, images.door2,\n                      images.door1, images.door]\n       door_shadow_frames = [images.door4_shadow, images.door3_shadow,\n                             images.door2_shadow, images.door1_shadow,\n                             images.door_shadow]\n       door_frame_number = 0\n       door_object_number = closing_door_number\n       # If player is in same row as a door, they must be in open doorway\n➏     if player_y == props[door_object_number][1]:\n➐         if player_y == 0: # if in the top doorway\n➑             player_y = 1 # move them down\n           else:\n➒             player_y = room_height - 2 # move them up\n➓     do_door_animation()\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n               player_y = room_height - 2 # move them up\n       do_door_animation()\n\n   def do_door_animation():\n       global door_frames, door_frame_number, door_object_number, objects\n➊     objects[door_object_number][0] = door_frames[door_frame_number]\n       objects[door_object_number][1] = door_shadow_frames[door_frame_number]\n➋     door_frame_number += 1\n➌     if door_frame_number == 5:\n➍         if door_frames[-1] == images.floor:\n➎             props[door_object_number][0] = 0 # remove door from props list\n           # Regenerate room map from the props\n           # to put the door in the room if required.\n➏         generate_map()\n➐     else:\n➑         clock.schedule(do_door_animation, 0.15)\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n       else:\n           clock.schedule(do_door_animation, 0.15)\n\n   def shut_engineering_door():\n       global current_room, door_room_number, props\n➊     props[25][0] = 32 # Door from room 32 to the engineering bay.\n➋     props[26][0] = 27 # Door inside engineering bay.\n➌     generate_map() # Add door to room_map for if in affected room.\n➍     if current_room == 27:\n➎         close_door(26)\n➏     if current_room == 32:\n➐         close_door(25)\n       show_text(\"The computer tells you the doors are closed.\", 1)\n       sounds.say_doors_closed.play()\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n   --snip--\n\n       if keyboard.u:\n           use_object()\n\n   ## Teleporter for testing\n   ## Remove this section for the real game\n➊     if keyboard.x:\n➋         current_room = int(input(\"Enter room number:\"))\n➌         player_x = 2\n           player_y = 2\n➍         generate_map()\n➎         start_room()\n           sounds.teleport.play()\n   ## Teleport section ends\n\n   --snip--\n```", "```py\n   --snip--\n       show_text(\"The computer tells you the doors are closed.\", 1)\n       sounds.say_doors_closed.play()\n\n   def door_in_room_26():\n       global airlock_door_frame, room_map\n➊     frames = [images.door, images.door1, images.door2,\n                 images.door3,images.door4, images.floor\n                 ]\n\n       shadow_frames = [images.door_shadow, images.door1_shadow,\n                        images.door2_shadow, images.door3_shadow,\n                        images.door4_shadow, None]\n\n➋     if current_room != 26:\n           clock.unschedule(door_in_room_26)\n           return\n\n       # prop 21 is the door in Room 26.\n➌     if ((player_y == 8 and player_x == 2) or props[63] == [26, 8, 2]) \\\n               and props[21][0] == 26:\n➍         airlock_door_frame += 1\n\n➎         if airlock_door_frame == 5:\n               props[21][0] = 0 # Remove door from map when fully open.\n               room_map[0][1] = 0\n               room_map[0][2] = 0\n               room_map[0][3] = 0\n\n➏     if ((player_y != 8 or player_x != 2) and props[63] != [26, 8, 2]) \\\n               and airlock_door_frame > 0:\n           if airlock_door_frame == 5:\n               # Add door to props and map so animation is shown.\n               props[21][0] = 26\n               room_map[0][1] = 21\n               room_map[0][2] = 255\n               room_map[0][3] = 255\n           airlock_door_frame -= 1\n\n➐     objects[21][0] = frames[airlock_door_frame]\n       objects[21][1] = shadow_frames[airlock_door_frame]\n\n   ###############\n   ##   START   ##\n   ###############\n   --snip--\n```", "```py\n--snip--\n###############\n## GAME LOOP ##\n###############\n\ndef start_room():\n    global airlock_door_frame\n    show_text(\"You are here: \" + room_name, 0)\n    if current_room == 26: # Room with self-shutting airlock door\n        airlock_door_frame = 0\n        clock.schedule_interval(door_in_room_26, 0.05)\n\n--snip--\n```"]