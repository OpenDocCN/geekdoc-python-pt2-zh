["```py\nconda create --name my_second_env\n```", "```py\nconda activate my_second_env\n```", "```py\nconda install notebook\n```", "```py\nconda install notebook=6.4.1\n```", "```py\njupyter notebook\n```", "```py\nconda create --name my_jupe_env\n```", "```py\nconda activate my_jupe_env\n```", "```py\nconda install ipykernel\n```", "```py\nconda deactivate\nconda install nb_conda_kernels\n```", "```py\njupyter notebook\n```", "```py\nconda activate base\n```", "```py\nconda install nb_conda_kernels\n```", "```py\nmkdir C:\\Users\\hanna\\my_nb_proj\nmkdir C:\\Users\\hanna\\my_nb_proj\\notebooks\nmkdir C:\\Users\\hanna\\my_nb_proj\\data\n```", "```py\nconda create --prefix C:\\Users\\hanna\\my_nb_proj\\my_nb_proj_env\nconda activate C:\\Users\\hanna\\my_nb_proj\\my_nb_proj_env\nconda install ipykernel pandas seaborn\n```", "```py\nconda activate base\ncd C:\\Users\\hanna\\my_nb_proj\\notebooks\n```", "```py\ncd my_nb_proj\\notebooks\n```", "```py\njupyter notebook\n```", "```py\n## Old Faithful geyser eruption dataset\n### (Weisberg (2005) in *Applied Linear Regression*)\n```", "```py\n%matplotlib inline\nimport pandas as pd\nimport seaborn as sns df = sns.load_dataset('geyser')  # Times are in minutes.\ndisplay(df.head())\ndf = df.rename(columns={'kind': 'eruption_cycle'})\n```", "```py\nsns.violinplot(x=df.eruption_cycle, y=df.duration, inner=None);\n```", "```py\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = ″all″\n```", "```py\n![title](https://www.nps.gov/npgallery/GetAsset/393757C9-1DD8\n-B71B-0BEF06BE19C76D4D/proxy/hires)\n```", "```py\n<img src=https://www.nps.gov/npgallery/GetAsset/393757C9-1DD8-B71B\n-0BEF06BE19C76D4D/proxy/hires width=″250″>\n```", "```py\nconda activate base\n```", "```py\nconda install -c conda-forge jupyter_contrib_nbextensions\n```", "```py\njupyter contrib nbextension install --user\n```", "```py\njupyter nbextension enable <extension_name>\n```", "```py\njupyter nbextension disable <extension_name>\n```", "```py\nconda install -c conda-forge ipywidgets\n```", "```py\nconda install -n base -c conda-forge widgetsnbextension\nconda install -p C:\\Users\\hanna\\my_nb_proj\\my_nb_proj_env -c conda-forge ipywidgets\n```", "```py\ncd C:\\Users\\hanna\\my_nb_proj\\notebooks\njupyter notebook\n```", "```py\n   import numpy as np\n   import matplotlib.pyplot as plt\n➊ from ipywidgets import interact\n\n   x = np.linspace(0, 6)\n\n   def sine_wave(w=1.0):\n       plt.plot(x, np.sin(w * x))\n       plt.show()\n\n➋ interact(sine_wave);\n```", "```py\n➊ @interact(w=1.0)\n   def sine_wave(w):\n       plt.plot(x, np.sin(w * x))\n       plt.show()\n```", "```py\ndef languages(descriptor):\n    return descriptor\n\noptions = {′The King′: ′Python′, ′Not bad′: ′Julia′, ′Up and Coming′: ′Go′}\ninteract(languages, descriptor=options);\n```", "```py\nfrom ipywidgets import interactive\n\ndef my_function(x):\n    return x\n\nwidget = interactive(my_function, x=5)\ndisplay(widget)\n```", "```py\nprint(widget.result)\n```", "```py\nimport ipywidgets as widgets\n\nslider = widgets.IntSlider(value=0,\n                           min=0, \n                           max=20, \n                           step=2, \n                           description='A Slider',\n                           orientation='horizontal')\ndisplay(slider)\n```", "```py\nprint(f″Slider value = {slider.value}″)\n```", "```py\nSlider value = 0\n```", "```py\n   import ipywidgets as widgets\n➊ from IPython.display import clear_output\n\n   button1 = widgets.Button(description='Python')\n   button2 = widgets.Button(description='Go')\n   button3 = widgets.Button(description='Rust')\n➋ output = widgets.Output()\n\n   print(″Pick your favorite language:″)\n   display(button1, button2, button3, output)\n\n➌ def event_handler(button):\n       with output:\n           clear_output()\n           print(″Your favorite language is {}″.format(button.description))\n\n➍ button1.on_click(event_handler)\n   button2.on_click(event_handler)\n   button3.on_click(event_handler)\n```", "```py\nlayout = widgets.Layout(width='300px', height='50px', border='solid 2px')\nbutton1 = widgets.Button(description='Python', layout=layout)\n```", "```py\nbutton1 = widgets.Button(description='Python', button_style='danger')\n```", "```py\nbutton1 = widgets.Button(description='Python')\nbutton1.style.button_color = 'pink'\n```", "```py\n#!/usr/bin/env python\n# coding: utf-8\n\n#  ## Old Faithful geyser eruption dataset   \n#  ### (Weisberg (2005) in *Applied Linear Regression*)\n\n# In[1]:\nget_ipython().run_line_magic('matplotlib', 'inline')\nimport pandas as pd\nimport seaborn as sns\n\ndf = sns.load_dataset('geyser')  # Times are in minutes.\ndisplay(df.head())\ndf = df.rename(columns={'kind': 'eruption_cycle'})\n\n# In[2]:\nsns.violinplot(x=df.eruption_cycle, y=df.duration, inner=None);\n\n# ![title](https://www.nps.gov/npgallery/GetAsset/393757C9-1DD8-B71B-0BEF06BE19C76D4D/proxy/\nhires)\n```", "```py\nconda install -c conda-forge rise\n```", "```py\nconda activate base\ncd C:\\Users\\hanna\\my_nb_proj\\notebooks\njupyter notebook\n```", "```py\n# Spira mirabilis:  The Miraculous Spiral\n```", "```py\n### - Why does a hurricane look like a galaxy? Or the chambers in a nautilus\nshell resemble the swirls in a pinecone?  \n\n### - Growth in nature is a geometric progression, and spirals that increase\ngeometrically are *logarithmic*. \n\n### - Logarithmic spirals can be plotted using Python with the polar equation:  \n## $r = ae^{b\\theta}$  \n*Where:\nr = radius   \na is the scaling factor (size of spiral)   \nb is the growth factor that controls the ″openness″  \n$\\theta$ controls length of spiral*\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact\n\ndef log_spiral(a=1, b=0.2, t=4):\n    theta_radians = np.arange(0, t * np.pi, 0.1)\n    radii = [a * np.exp(b * rad) for rad in theta_radians]\n    plt.polar(theta_radians, radii, 'o', c='black')\n\ninteract(log_spiral);\n```", "```py\n#### a: (scaling factor) controls size\n#### b: (growth factor) controls openness\n#### t: (theta) controls length\n```", "```py\n# The End\n```"]