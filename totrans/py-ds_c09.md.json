["```py\n$ **pip install -U googlemaps**\n```", "```py\nimport googlemaps\n\ngmaps = googlemaps.Client(key='`YOUR_API_KEY_HERE`')\naddress = '1600 Amphitheatre Parkway, Mountain View, CA'\ngeocode_result = gmaps.geocode(address)\n\nprint(geocode_result[0]['geometry']['location'].values())\n```", "```py\ndict_values([37.422388, -122.0841883])\n```", "```py\n$ **pip install python-telegram-bot –upgrade**\n```", "```py\nfrom telegram.ext import Updater, MessageHandler, Filters\nfrom datetime import datetime\nimport csv\n\n❶ def get_location(update, context):\n  msg = None\n  if update.edited_message:\n    msg = update.edited_message\n  else:\n    msg = update.message\n❷ gps = msg.location\n  sender = msg.from_user.username\n  tm = datetime.now().strftime(\"%H:%M:%S\")\n  with open(r'`/HOME/PI/LOCATION_BOT/LOG.CSV`', 'a') as f:\n    writer = csv.writer(f)\n  ❸ writer.writerow([sender, gps.latitude, gps.longitude, tm])\n  ❹ context.bot.send_message(chat_id=msg.chat_id, text=str(gps))\n\ndef main():\n❺ updater = Updater('`TOKEN`', use_context=True)\n❻ updater.dispatcher.add_handler(MessageHandler(Filters.location,\n                                 get_location))\n  ❼ updater.start_polling()\n  ❽ updater.idle()\n\nif __name__ == '__main__':\n    main()\n```", "```py\ncab_26,43.602508,39.715685,14:47:44\ncab_112,43.582243,39.752077,14:47:55\ncab_26,43.607480,39.721521,14:49:11\ncab_112,43.579258,39.758944,14:49:51\ncab_112,43.574906,39.766325,14:51:53\ncab_26,43.612203,39.720491,14:52:48\n```", "```py\n**$ pip install geopy**\n**$ pip install shapely**\n```", "```py\nimport pandas as pd\ndf = pd.read_csv(\"`HOME/PI/LOCATION_BOT/LOG.CSV`\", names=['cab', 'lat',\n                                                        'long', 'tm'])\n```", "```py\nimport pandas as pd\nlocations = [\n  ('cab_26',43.602508,39.715685,'14:47:44'),\n  ('cab_112',43.582243,39.752077,'14:47:55'),\n  ('cab_26',43.607480,39.721521,'14:49:11'),\n  ('cab_112',43.579258,39.758944,'14:49:51'),\n  ('cab_112',43.574906,39.766325,'14:51:53'),\n ('cab_26',43.612203,39.720491,'14:52:48')\n]\n\ndf = pd.DataFrame(locations, columns =['cab', 'lat', 'long', 'tm'])\n```", "```py\nlatestrows = df.sort_values(['cab','tm'],ascending=False).drop_duplicates('cab')\n```", "```py\n cab        lat       long        tm\n5   cab_26  43.612203  39.720491  14:52:48\n3  cab_112  43.574906  39.766325  14:51:53\n```", "```py\nlatestrows = latestrows.values.tolist()\n```", "```py\nfrom geopy.distance import distance\npick_up = 43.578854, 39.754995\n\nfor i,row in enumerate(latestrows):\n❶ dist = distance(pick_up, (row[1],row[2])).m\n  print(row[0] + ':', round(dist))\n  latestrows[i].append(round(dist))\n```", "```py\ncab_112: 1015\ncab_26: 4636\n```", "```py\nclosest = min(latestrows, key=lambda x: x[4])\nprint('The closest cab is: ', closest[0], ' - the distance in meters: ', closest[4])\n```", "```py\nThe closest cab is:  cab_112  - the distance in meters:  1015\n```", "```py\n❶ from shapely.geometry import Point, Polygon\n\ncoords = [(46.082991, 38.987384), (46.075489, 38.987599), (46.079395, \n           38.997684), (46.073822, 39.007297), (46.081741, 39.008842)]\n❷ poly = Polygon(coords)\n❸ cab_26 = Point(46.073852, 38.991890)\ncab_112 = Point(46.078228, 39.003949)\npick_up = Point(46.080074, 38.991289)\n\n❹ print('cab_26 within the polygon:', cab_26.within(poly))\nprint('cab_112 within the polygon:', cab_112.within(poly))\nprint('pick_up within the polygon:', pick_up.within(poly))\n```", "```py\ncab_26 within the polygon: False\ncab_112 within the polygon: True\npick_up within the polygon: True\n```", "```py\nfrom shapely.geometry import Point, Polygon\nfrom geopy.distance import distance\n\ncoords = [(46.082991, 38.987384), (46.075489, 38.987599), (46.079395,\n           38.997684), (46.073822, 39.007297), (46.081741, 39.008842)]\n❶ poly = Polygon(coords)\n❷ cab_26 = Point(46.073852, 38.991890)\npick_up = Point(46.080074, 38.991289)\nentry_point = Point(46.075357, 39.000298)\n\nif cab_26.within(poly):\n❸ dist = distance((pick_up.x, pick_up.y), (cab_26.x,cab_26.y)).m\nelse:\n❹ dist = distance((cab_26.x,cab_26.y), (entry_point.x,entry_point.y)).m +\n         distance((entry_point.x,entry_point.y), (pick_up.x, pick_up.y)).m\n\nprint(round(dist))\n```", "```py\n1544\n```", "```py\nimport pandas as pd\norders = [\n  ('order_039', 'open', 'cab_14'),\n ('order_034', 'open', 'cab_79'),\n  ('order_032', 'open', 'cab_104'),\n  ('order_026', 'closed', 'cab_79'),\n  ('order_021', 'open', 'cab_45'),\n  ('order_018', 'closed', 'cab_26'),\n  ('order_008', 'closed', 'cab_112')\n]\n\ndf_orders = pd.DataFrame(orders, columns =['order','status','cab'])\ndf_orders_open = df_orders[df_orders['status']=='open']\nunavailable_list = df_orders_open['cab'].values.tolist()\nprint(unavailable_list)\n```", "```py\n['cab_14', 'cab_79', 'cab_104', 'cab_45']\n```", "```py\nfrom geopy.distance import distance\npick_up = 46.083822, 38.967845\ncab_26 = 46.073852, 38.991890\ncab_112 = 46.078228, 39.003949\ncab_104 = 46.071226, 39.004947\ncab_14 = 46.004859, 38.095825\ncab_79 = 46.088621, 39.033929\ncab_45 = 46.141225, 39.124934\ncabs = {'cab_26': cab_26, 'cab_112': cab_112, 'cab_14': cab_14,\n        'cab_104': cab_104, 'cab_79': cab_79, 'cab_45': cab_45}\ndist_list = []\n\nfor cab_name, cab_loc in cabs.items():\n  if cab_name not in unavailable_list:\n    dist = distance(pick_up, cab_loc).m\n    dist_list.append((cab_name, round(dist)))\n\nprint(dist_list)\nprint(min(dist_list, key=lambda x: x[1]))\n```", "```py\n[('cab_26', 2165), ('cab_112', 2861)]\n('cab_26', 2165)\n```", "```py\ncabs_list = [\n  ('cab_14',1),\n  ('cab_79',0),\n  ('cab_104',0),\n  ('cab_45',1),\n  ('cab_26',0),\n  ('cab_112',1)\n]\n```", "```py` ```", "```py    You now merge these DataFrames based on the `cab` column:    ```", "```py    You use an inner join, meaning only cabs included in both `df_cabs` and `df_dist` make it into the new DataFrame. In practice, since `df_dist` contains only cabs that are currently available, this excludes unavailable cabs from the result set. The merged DataFrame now includes both spatial data (each cab’s distance to the pick-up place) and nonspatial data (whether or not each cab has a baby seat):    ```", "```py    You convert the DataFrame into a list of tuples, which you then filter, leaving only the rows where the `seat` field is set to `1`:    ```", "```py    You use the DataFrame’s `itertuples()` method to convert each row into a tuple, then you wrap the tuples into a list with the `list()` function.    The final step is to determine the row with the lowest value in the distance field, which is identified by index `2`:    ```", "```py    Here’s the result:    ```", "```py    Compare this to the result shown at the end of the previous section. As you can see, the need for a baby seat led us to choose a different cab for the job.    ## Summary    Using the real-world example of a taxi service, this chapter illustrated how you can perform spatial data analyses. To start with, you looked at an example of turning a human-readable address into geo coordinates using Google’s Geocoding API and the googlemaps Python library. Then you learned to use a Telegram bot to collect location data from smartphones. Next, you used the geopy and Shapely libraries to perform fundamental geospatial operations, such as measuring the distance between points and determining if points are within a certain area. With the help of these libraries, built-in Python data structures, and pandas DataFrames, you designed an application to identify the best cab for a given pick-up based on various spatial and nonspatial criteria. ```"]