- en: '**7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VISUALIZATIONS**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/comm1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Perhaps the simplest way to discover insights in data is to represent that data
    graphically. Visualizations, like the one shown in [Figure 7-1](../Text/ch07.xhtml#ch07fig01),
    allow you to immediately identify patterns within your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn how to generate visualizations for the syntactic
    structure of a sentence and the named entities in a document using spaCy’s built-in
    visualizers: the displaCy dependency visualizer and the displaCy named entity
    visualizer.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by exploring interactive demos of these visualizers, which are available
    on the Explosion AI website (Explosion AI is the maker of spaCy), to understand
    what the spaCy visualizers can accomplish. Next, you’ll learn to spin up a displaCy
    web server on your machine, allowing you to programmatically visualize a Doc object
    from within spaCy. You’ll also learn how to customize your visualizations. Finally,
    you’ll learn how to use displaCy to render manually prepared data without having
    to pass in a Doc object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting Started with spaCy’s Built-In Visualizers**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s begin by exploring how the displaCy dependency visualizer and the displaCy
    named entity visualizer work. The quickest way to get started with spaCy’s built-in
    visualizers is to take advantage of their interactive demos available at *[https://explosion.ai/demos/](https://explosion.ai/demos/)*.
    On this page, you’ll find links to the demo pages for the two displaCy visualizers
    along with some other demo links.
  prefs: []
  type: TYPE_NORMAL
- en: '***displaCy Dependency Visualizer***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The displaCy dependency visualizer generates a syntactic dependency visualization
    for a submitted text. To use its interactive demo, navigate to *[https://explosion.ai/demos/displacy/](https://explosion.ai/demos/displacy/)*.
    Replace the sample sentence in the “Text to parse” text box with your text, and
    then click the search icon (magnifying glass) at the right of the box to generate
    a visualization. The result might look like [Figure 7-1](../Text/ch07.xhtml#ch07fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fig7-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: The displaCy dependency visualizer on the Explosion AI website*'
  prefs: []
  type: TYPE_NORMAL
- en: The dependency visualizer shows the part-of-speech tags and syntactic dependencies
    in a submitted text, displaying its syntactic structure immediately.
  prefs: []
  type: TYPE_NORMAL
- en: The visualizer allows you to customize your graphic with the “Merge Punctuation”
    and “Merge Phrases” checkboxes. “Merge Punctuation” merges a punctuation mark
    to the preceding token, making a visualization more compact and therefore more
    readable. “Merge Phrases” merges each noun phrase into a single token, as shown
    in the example in [Figure 7-1](../Text/ch07.xhtml#ch07fig01). Both options are
    set by default.
  prefs: []
  type: TYPE_NORMAL
- en: You can change either or both of these defaults by deselecting the corresponding
    box or boxes. For example, if you deselect the “Merge Phrases” box for “I want
    a Greek pizza now,” you’ll see a more detailed dependency parsing for this sentence
    that shows you the dependencies within the noun phrase “a Greek pizza.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping the “Merge Phrases” box selected allows you to get a more compact dependency
    tree, which can be especially useful when dealing with a sentence containing several
    noun phrases. For example, consider the following sentence: “I see a few young
    people working in their vegetable field.” It contains two noun phrases: “a few
    young people” and “their vegetable field.” The first one is the direct object
    of the verb “see,” and the second is the object of the preposition in the prepositional
    phrase that modifies the verb “work,” showing the dependency labels `dobj` and
    `pobj`, respectively. Strictly speaking, these dependency labels are related to
    the nouns in the corresponding phrases rather than to an entire sentence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the “Merge Punctuation” and “Merge Phrases” options, you can
    choose a statistical language model to use from the list of available models.
    This option allows you to try a model for dependency parsing without downloading
    and installing it in your environment. Currently, you can choose from the following
    models: `en_core_web_sm`, `en_core_web_md`, and `en_core_web_lg`, as well as small
    (`sm`) models for other European languages, such as German, Spanish, Portuguese,
    French, Italian, and Dutch.'
  prefs: []
  type: TYPE_NORMAL
- en: '***displaCy Named Entity Visualizer***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The displaCy named entity visualizer generates a named entity visualization
    for a submitted text. You’ll find its interactive demo at *[https://explosion.ai/demos/displacy-ent/](https://explosion.ai/demos/displacy-ent/)*.
    From a user’s standpoint, it works similarly to the displaCy dependency visualizer
    demo discussed in the previous section. To generate a visualization for a text,
    enter it into the text box, and then click the search icon. The visualizer will
    process your query and output an original text at the bottom of the window, highlighting
    the named entities discovered along with their labels, as shown in [Figure 7-2](../Text/ch07.xhtml#ch07fig02).
  prefs: []
  type: TYPE_NORMAL
- en: You can choose what types of named entities the application should recognize
    in a submitted text by selecting or deselecting the boxes under “Entity labels”.
    In the example shown in [Figure 7-2](../Text/ch07.xhtml#ch07fig02), you add `PERCENT`
    and `CARDINAL` to the list of entity label types chosen by default. Adding the
    `PERCENT` entity type tells the visualizer to recognize phrases expressing a percentage
    or that include the “%” symbol. Adding the `CARDINAL` entity type guarantees that
    the visualizer will recognize phrases related to numerals in the submitted text.
  prefs: []
  type: TYPE_NORMAL
- en: Which boxes you should select depends on your context. When processing a financial
    report, you might select the `money` and `date` boxes. But if the report includes
    records of the financial activities of more than one company, you might also want
    to select the `ORG` entity label box to instruct the visualizer to highlight company
    names in the text.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fig7-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: The displaCy named entity visualizer on the Explosion AI website*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visualizing from Within spaCy**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting with spaCy v2.0, the displaCy visualizers are integrated into the core
    library. This means that you can start using them from within your Python code
    immediately after installing spaCy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, you must use the following process: start a built-in web server,
    and then send a Doc object (or a list of Doc objects) to it for rendering. The
    server will generate a visualization for the submitted Doc, which you can then
    view in your browser. We’ll walk through several examples in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Visualizing Dependency Parsing***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following script shows the simplest way to generate a dependency tree visualization
    for a sentence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We create a Doc object to submit to displaCy ➊. Then we import the displaCy
    library from the core library ➋, after which we can start a displaCy web server,
    passing the Doc object to it. Both operations are done by calling the `displacy.serve()`
    method ➌. By setting parameter style to `'dep'`, we instruct displaCy to use the
    dependency visualizer ➍, generating a dependency tree visualization for the text
    in the Doc object. If you’re interested in implementing the checkbox options explored
    earlier in this chapter, reference “[Try This](../Text/ch07.xhtml#lev97)” on [page
    104](../Text/ch07.xhtml#page_104).
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you run this code in a Python session or as a separate script, the
    execution enters an infinite loop and shows messages from the displaCy web server.
    The initial messages you should see are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This means that the server has generated a dependency tree visualization for
    the submitted text and serves HTTP requests on port 5000 (the default port) on
    your host. In practical terms, this means you can point your browser to *http://localhost:5000*
    to view the visualization. In this example, it should look like [Figure 7-3](../Text/ch07.xhtml#ch07fig03).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fig7-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: An example of a dependency tree visualization you can generate
    from within your Python code and then view in your browser*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To shut down the displaCy server, enter CTRL-C in the terminal in which you
    executed the script that started the server. As a result, you should see the following
    final message from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After shutting down the server, you won’t be able to generate a new copy of
    the visualization in your browser, but you’ll be able to view the copies you’ve
    already generated.
  prefs: []
  type: TYPE_NORMAL
- en: '***Try This***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try using the named entity visualizer by altering the script for the dependency
    visualizer in the previous section. To instruct displaCy to apply the named entity
    visualizer, set the `displacy.serve()` method’s style parameter to `'ent'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To produce a more interesting visualization, you might use longer text containing,
    perhaps, more than one sentence. For example, try using the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After calling the `displacy.serve()` method on the Doc object, point your browser
    to *http://localhost:5000* to view the visualization. Pay attention to the named
    entities and their types recognized by the entity recognizer in this sample text.
    In particular, you should see that the entity recognizer finds the names of persons,
    products, and companies, as well as phrases related to dates, numbers, and money.
  prefs: []
  type: TYPE_NORMAL
- en: '***Sentence-by-Sentence Visualizations***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Visualizing dependency trees works fine when you’re working with a single sentence.
    But the graphics can get long and space consuming when you’re visualizing a long
    text, making them difficult to read when displayed in one row. Although displaCy
    generates separate visualizations for each sentence, when you pass in a Doc containing
    more than one sentence, it lays them out in a single row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of passing in a Doc object, you might want to visualize sentence-by-sentence.
    For example, this might be useful when you need to extract the meaning from an
    entire discourse and want to explore a sequence of sentences. Starting with version
    2.0.12, displaCy allows you to pass in Span objects and then lays out the visualizations
    in rows. You can pass in a list of `doc.sents` if you want to create one visualization
    for each sentence found in `doc.sents`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As discussed in [Chapter 3](../Text/ch03.xhtml#ch03), the Doc object’s `doc.sents`
    property is an iterator over the sentences in a Doc object. For this reason, you
    can’t use this property to refer to sentences by index, but you can iterate over
    them in a loop or create a list of Span objects where each span represents a sentence.
    In this code, we convert the sentences in the Doc into a list of Span objects ➊.
    Then we pass in that spans list to `displacy.serve()` to visualize ➋.
  prefs: []
  type: TYPE_NORMAL
- en: This should generate one visualization for each sentence, laid out in rows,
    allowing you to view them by scrolling vertically.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customizing Your Visualizations with the Options Argument**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the docs and style arguments that you saw in the examples so
    far, the `displacy.serve()` method can take several other arguments. The `options`
    argument is perhaps one of the most interesting because it allows you to define
    a dictionary of settings to customize the layout of the visualization. We’ll cover
    some of the most useful `options` settings in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Dependency Visualizer Options***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Long sentences can be difficult to view when they’re displayed in one row. In
    such cases, you can create visualizations in *compact mode*, which takes less
    space. For that you need to set the `'compact'` option to `True` in the `options`
    argument, as illustrated in this script. The script also changes the font that
    the visualizer uses. (The entire list of available options in the displaCy API
    documentation is at *[https://spacy.io/api/top-level/#options-dep/](https://spacy.io/api/top-level/#options-dep/)*.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `displacy.serve()` method expects the `options` argument to be a dictionary.
    In this example, we set only two options: the `''compact''` option to `True` ➊
    and the `''font''` option to `''Tahoma''` ➋, changing their defaults in both cases.
    (The visualizer lets you use most standard web fonts, such as Arial, Courier,
    and so on.) We then pass the dictionary of options in as the `options` argument
    ➌.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-4](../Text/ch07.xhtml#ch07fig04) shows what your browser should display
    when you point it to *http://localhost:5000* after running the script.'
  prefs: []
  type: TYPE_NORMAL
- en: The square arcs you see in the figure might look unusual, but they make the
    overall visualization more compact, which often can spare you from having to scroll
    to see the entire diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fig7-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-4: An example of a customized dependency visualization*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Try This***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the dependency visualizer’s interactive demo discussed in “displaCy Dependency
    Visualizer” on [page 98](../Text/ch07.xhtml#page_98), you used the “Merge Phrases”
    and “Merge Punctuation” options. In spaCy, you can merge noun phrases into one
    token with the `collapse_phrases` option (Figure 7-1 shows the equivalent option
    on the displaCy visualizer website.), which is set to `False` by default. The
    `collapse_punct` option, which is responsible for attaching punctuation to tokens,
    is set to `True` by default.
  prefs: []
  type: TYPE_NORMAL
- en: Change the code in the previous script so it sets the `collapse_phrases` option
    to `True` in the set of passed-in options. Run the script, and then view the generated
    visualization in your browser to make sure the noun phrases are displayed as a
    single token.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Named Entity Visualizer Options***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The list of named entity visualizer options (available at *[https://spacy.io/api/top-level/#displacy_options-ent/](https://spacy.io/api/top-level/#displacy_options-ent/)*)
    is much shorter than the list of dependency visualizer options. When using the
    entity visualizer, you can choose which entity types to highlight with the `'ents'`
    option and override default colors with the `'colors'` option.
  prefs: []
  type: TYPE_NORMAL
- en: The first option is the more important of the two, because it allows you to
    instruct the visualizer to highlight entities of selected types only. The following
    example illustrates a case when you might want to limit the entity types that
    the visualizer displays.
  prefs: []
  type: TYPE_NORMAL
- en: In this script, we don’t provide any options for the entity visualizer, which
    means it will highlight entities of all types in the submitted Doc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We use the Doc’s `user_data` attribute to set a title for the Doc ➊. The displaCy
    visualizer automatically puts the text in this attribute as a headline for the
    visualization. Adding a title to a visualization is optional but can be useful
    when you need to annotate your visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: We set the style parameter of `displacy.serve()` to `'ent'` ➋, instructing displaCy
    to use the named entity visualizer. The resulting visualization should look like
    the one in [Figure 7-5](../Text/ch07.xhtml#ch07fig05) (although these images are
    in grayscale, the website uses color).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fig7-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-5: An example of a named entity visualization generated with default
    options*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The visualization looks fine in general. But in this context, highlighting
    the ordinal number “fourth” is probably unnecessary. It’s hard to figure out why
    we might need to extract that information in this context. With the `''ents''`
    option, we select the entity types that we want the visualizer to highlight. The
    following code illustrates how to implement this. To see how it works, we replace
    the last line of code in the previous script with the following two lines of code,
    and then run the updated script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This time, the visualizer shouldn’t recognize any entities except for those
    that are of the `ORG`, `PRODUCT`, or `DATE` type ➊. This example also illustrates
    the use of the `'colors'` option that allows us to change the default colors assigned
    to entity types. In this example, we map the `ORG` and `PRODUCT` types to the
    color `"aqua"` ➋.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using the `''colors''` option, you can map entity types to web color names
    or hex color codes. In the example on [page 105](../Text/ch07.xhtml#page_105),
    using the hex code `"``#00FFFF``"` would be equal to using the color name `"``aqua``"`.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-6](../Text/ch07.xhtml#ch07fig06) illustrates what the resulting visualization
    should look like.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/fig7-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-6: An example of an entity visualization generated with the ''ents''
    and ''colors'' options specified*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this visualization is almost identical to the one shown in [Figure
    7-5](../Text/ch07.xhtml#ch07fig05). But this time the visualizer doesn’t highlight
    the entity of type `ORDINAL`, because the `'ents'` option list we’ve passed in
    doesn’t include this type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exporting a Visualization to a File**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the examples so far, we’ve used the displaCy web server to view the visualizations
    being generated. As you learned in these examples, you can open the visualization
    generated with the `displacy.serve()` method in your browser as long as the server
    started with this same invocation of `displacy.serve()` is running.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `displacy.render()` method, you can avoid this limitation and create
    a visualization for later use. The `displacy.render()` method allows you to render
    the markup wrapped as an HTML page and then save it in a separate file. Later,
    you can open this file in any browser without having to invoke a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script shows how to use the `displacy.render()` method for the
    named entity visualization shown in [Figure 7-5](../Text/ch07.xhtml#ch07fig05):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can divide the code in this script into three parts, each of which begins
    with a comment line. The first block should be familiar. Here, we create a text
    processing pipeline and then apply it to a text. Then we use the Doc’s `user_data`
    attribute to set a headline for the Doc ➊.
  prefs: []
  type: TYPE_NORMAL
- en: In the second block, we render a named entity visualization for the Doc created
    in the previous step, using the `displacy.render()` method ➋. Unlike `displacy.serve()`,
    `displacy.render()` doesn’t run a web server but generates the HTML markup for
    a visualization. By setting the page argument to `True`, we instruct `displacy.render()`
    to generate the markup wrapped as a full HTML page ➌.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final block, we import the `Path` class from the `pathlib` module introduced
    in Python 3.4 ➍. We can use `Path` to perform system calls on path objects. In
    this example, we instantiate this class on the following path: */visualizations/ent_visual.html*
    ➎, assuming we already have the */visualizations* folder available in our local
    filesystem (otherwise, an exception is thrown). Then we open the *ent_visual.html*
    file (it will be created if it doesn’t already exist) in the */visualizations*
    folder and write the HTML page generated in the previous step to it ➏.'
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, this script generates an HTML file containing a named entity visualization
    for the submitted text and saves that file in your filesystem. If you move to
    the folder where the file has been saved and double-click the file, it opens in
    your browser.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using displaCy to Manually Render Data**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The displaCy visualizers allow you to manually create a dataset that you can
    then render rather than passing in data as either a doc or span. This can be useful
    when you need, for example, to visualize output from other NLP libraries or when
    you need to create a visualization using a set of custom tags or custom dependency
    labels. (I’ll discuss how to make these custom tags and labels in [Chapter 10](../Text/ch10.xhtml#ch10).)
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let’s manually render the sentence “I want a Greek pizza.”
  prefs: []
  type: TYPE_NORMAL
- en: '***Formatting the Data***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To begin with, you need to put your data in displaCy’s format: a dictionary
    containing two lists: `"words"` and `"arcs"`, as illustrated in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sent` dictionary contains two lists: `"words"` and `"arcs"`, each of which,
    in turn, includes a set of dictionaries. A dictionary in the `"words"` list assigns
    a tag to a certain token in the sentence ➊, and a dictionary in the `"arcs"` list
    defines an arc in the dependency tree, connecting two syntactically related words
    in the sentence ➋. In this example, five words are in the sentence and four syntactic
    relations are defined on them. That’s why the dictionary contains five items in
    the `"words"` list and four items in the `"arcs"` list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a dictionary with the data, we need to generate a dependency
    parsing visualization for the sample sentence; we can use the following code to
    render it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that we don’t have to import the entire spaCy library. All we need to do
    is import the `displacy` module from it ➊. Then we invoke the `displacy``.serve()`
    method, passing in the `sent` dictionary as the first parameter in place of a
    Doc object ➋. The third parameter, `manual`, tells displaCy that we created the
    dataset for rendering manually ➌, so displaCy doesn’t need to extract the data
    from a Doc object.
  prefs: []
  type: TYPE_NORMAL
- en: '***Try This***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you choose to manually create a dictionary with data to render into a visualization,
    you can use custom tags, specifying, for example, that the visualizer should use
    fine-grained part-of-speech tags instead of the coarse-grained tags used by default.
  prefs: []
  type: TYPE_NORMAL
- en: You could accomplish this task by simply setting the `fine_grained` option to
    `True` when passing in a Doc object for rendering, but for practice, try to implement
    this manually.
  prefs: []
  type: TYPE_NORMAL
- en: In the example from “[Formatting the Data](../Text/ch07.xhtml#lev101)” on [page
    108](../Text/ch07.xhtml#page_108), change the tags in the `"words"` list of the
    `"sent"` dictionary so their values are fine-grained tags. Next, start the displaCy
    server and instruct it to generate a visualization based on the data specified
    in the `"sent"` dictionary. Then point your browser to *http://localhost:5000*
    to view the visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ve seen syntactic structure visualizations in previous chapters, but in
    this chapter, you learned how to generate those visualizations using the displaCy
    dependency visualizer. You also learned to generate graphics of named entity information
    with the displaCy named entity visualizer.
  prefs: []
  type: TYPE_NORMAL
