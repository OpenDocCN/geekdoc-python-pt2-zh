["```py\n**https://api.github.com/search/repositories?q=language:python+sort:stars**\n```", "```py\n{\n❶   \"total_count\": 8961993,\n❷   \"incomplete_results\": true,\n❸   \"items\": [\n    {\n      \"id\": 54346799,\n      \"node_id\": \"MDEwOlJlcG9zaXRvcnk1NDM0Njc5OQ==\",\n      \"name\": \"public-apis\",\n      \"full_name\": \"public-apis/public-apis\",\n `--snip--`\n```", "```py\n$ **python -m pip install --user requests**\n```", "```py\n$ **python3 -m pip install --user requests**\n```", "```py\nimport requests\n\n# Make an API call and check the response.\n❶ url = \"https://api.github.com/search/repositories\"\nurl += \"?q=language:python+sort:stars+stars:>10000\"\n\n❷ headers = {\"Accept\": \"application/vnd.github.v3+json\"}\n❸ r = requests.get(url, headers=headers)\n❹ print(f\"Status code: {r.status_code}\")\n\n# Convert the response object to a dictionary.\n❺ response_dict = r.json()\n\n# Process results.\nprint(response_dict.keys())\n```", "```py\nStatus code: 200\ndict_keys(['total_count', 'incomplete_results', 'items'])\n```", "```py\nimport requests\n\n# Make an API call and store the response.\n*--snip--*\n\n# Convert the response object to a dictionary.\nresponse_dict = r.json()\n❶ print(f\"Total repositories: {response_dict['total_count']}\")\nprint(f\"Complete results: {not response_dict['incomplete_results']}\")\n\n# Explore information about the repositories.\n❷ repo_dicts = response_dict['items']\nprint(f\"Repositories returned: {len(repo_dicts)}\")\n\n# Examine the first repository.\n❸ repo_dict = repo_dicts[0]\n❹ print(f\"\\nKeys: {len(repo_dict)}\")\n❺ for key in sorted(repo_dict.keys()):\n    print(key)\n```", "```py\nStatus code: 200\n❶ Total repositories: 248\n❷ Complete results: True\nRepositories returned: 30\n\n❸ Keys: 78\nallow_forking\narchive_url\narchived\n`--snip--`\nurl\nvisiblity\nwatchers\nwatchers_count\n```", "```py\n*--snip--*\n# Examine the first repository.\nrepo_dict = repo_dicts[0]\n\nprint(\"\\nSelected information about first repository:\")\n❶ print(f\"Name: {repo_dict['name']}\")\n❷ print(f\"Owner: {repo_dict['owner']['login']}\")\n❸ print(f\"Stars: {repo_dict['stargazers_count']}\")\nprint(f\"Repository: {repo_dict['html_url']}\")\n❹ print(f\"Created: {repo_dict['created_at']}\")\n❺ print(f\"Updated: {repo_dict['updated_at']}\")\nprint(f\"Description: {repo_dict['description']}\")\n```", "```py\nStatus code: 200\nTotal repositories: 248\nComplete results: True\nRepositories returned: 30\n\nSelected information about first repository:\nName: public-apis\nOwner: public-apis\nStars: 191493\nRepository: https://github.com/public-apis/public-apis\nCreated: 2016-03-20T23:49:42Z\nUpdated: 2022-05-12T06:37:11Z\nDescription: A collective list of free APIs\n```", "```py\n*--snip--*\n# Explore information about the repositories.\nrepo_dicts = response_dict['items']\nprint(f\"Repositories returned: {len(repo_dicts)}\")\n\n❶ print(\"\\nSelected information about each repository:\")\n❷ for repo_dict in repo_dicts:\n print(f\"\\nName: {repo_dict['name']}\")\n print(f\"Owner: {repo_dict['owner']['login']}\")\n print(f\"Stars: {repo_dict['stargazers_count']}\")\n print(f\"Repository: {repo_dict['html_url']}\")\n print(f\"Description: {repo_dict['description']}\")\n```", "```py\nStatus code: 200\nTotal repositories: 248\nComplete results: True\nRepositories returned: 30\n\nSelected information about each repository:\n\nName: public-apis\nOwner: public-apis\nStars: 191494\nRepository: https://github.com/public-apis/public-apis\nDescription: A collective list of free APIs\n\nName: system-design-primer\nOwner: donnemartin\nStars: 179952\nRepository: https://github.com/donnemartin/system-design-primer\nDescription: Learn how to design large-scale systems. Prep for the system\n  design interview.  Includes Anki flashcards.\n`--snip--`\n\nName: PayloadsAllTheThings\nOwner: swisskyrepo\nStars: 37227\nRepository: https://github.com/swisskyrepo/PayloadsAllTheThings\nDescription: A list of useful payloads and bypass for Web Application Security\n  and Pentest/CTF\n```", "```py\n{\n  \"resources\": {\n    `--snip--`\n❶     \"search\": {\n❷       \"limit\": 10,\n❸       \"remaining\": 9,\n❹       \"reset\": 1652338832,\n      \"used\": 1,\n      \"resource\": \"search\"\n    },\n    `--snip--`\n```", "```py\nimport requests\nimport plotly.express as px\n\n# Make an API call and check the response.\nurl = \"https://api.github.com/search/repositories\"\nurl += \"?q=language:python+sort:stars+stars:>10000\"\n\nheaders = {\"Accept\": \"application/vnd.github.v3+json\"}\nr = requests.get(url, headers=headers)\n❶ print(f\"Status code: {r.status_code}\")\n\n# Process overall results.\nresponse_dict = r.json()\n❷ print(f\"Complete results: {not response_dict['incomplete_results']}\")\n\n# Process repository information.\nrepo_dicts = response_dict['items']\n❸ repo_names, stars = [], []\nfor repo_dict in repo_dicts:\n    repo_names.append(repo_dict['name'])\n    stars.append(repo_dict['stargazers_count'])\n\n# Make visualization.\n❹ fig = px.bar(x=repo_names, y=stars)\nfig.show()\n```", "```py\n*--snip--*\n# Make visualization.\ntitle = \"Most-Starred Python Projects on GitHub\"\nlabels = {'x': 'Repository', 'y': 'Stars'}\nfig = px.bar(x=repo_names, y=stars, title=title, labels=labels)\n\n❶ fig.update_layout(title_font_size=28, xaxis_title_font_size=20,\n        yaxis_title_font_size=20)\n\nfig.show()\n```", "```py\n*--snip--*\n# Process repository information.\nrepo_dicts = response_dict['items']\n❶ repo_names, stars, hover_texts = [], [], []\nfor repo_dict in repo_dicts:\n repo_names.append(repo_dict['name'])\n stars.append(repo_dict['stargazers_count'])\n\n    # Build hover texts.\n❷     owner = repo_dict['owner']['login']\n    description = repo_dict['description']\n❸     hover_text = f\"{owner}<br />{description}\"\n    hover_texts.append(hover_text)\n\n# Make visualization.\ntitle = \"Most-Starred Python Projects on GitHub\"\nlabels = {'x': 'Repository', 'y': 'Stars'}\n❹ fig = px.bar(x=repo_names, y=stars, title=title, labels=labels,\n        hover_name=hover_texts)\n\nfig.update_layout(title_font_size=28, xaxis_title_font_size=20,\n yaxis_title_font_size=20)\n\nfig.show()\n```", "```py\n*--snip--*\n# Process repository information.\nrepo_dicts = response_dict['items']\n❶ repo_links, stars, hover_texts = [], [], []\nfor repo_dict in repo_dicts:\n    # Turn repo names into active links.\n    repo_name = repo_dict['name']\n❷     repo_url = repo_dict['html_url']\n❸     repo_link = f\"<a href='{repo_url}'>{repo_name}</a>\"\n    repo_links.append(repo_link)\n\n stars.append(repo_dict['stargazers_count'])\n  *--snip--*\n\n# Make visualization.\ntitle = \"Most-Starred Python Projects on GitHub\"\nlabels = {'x': 'Repository', 'y': 'Stars'}\nfig = px.bar(x=repo_links, y=stars, title=title, labels=labels,\n hover_name=hover_texts)\n\nfig.update_layout(title_font_size=28, xaxis_title_font_size=20,\n yaxis_title_font_size=20)\n\nfig.show()\n```", "```py\n*--snip--*\nfig.update_layout(title_font_size=28, xaxis_title_font_size=20,\n yaxis_title_font_size=20)\n\nfig.update_traces(marker_color='SteelBlue', marker_opacity=0.6)\n\nfig.show()\n```", "```py\nhttps://hacker-news.firebaseio.com/v0/item/31353677.json\n```", "```py\nimport requests\nimport json\n\n# Make an API call, and store the response.\nurl = \"https://hacker-news.firebaseio.com/v0/item/31353677.json\"\nr = requests.get(url)\nprint(f\"Status code: {r.status_code}\")\n\n# Explore the structure of the data.\nresponse_dict = r.json()\nresponse_string = json.dumps(response_dict, indent=4)\n❶ print(response_string)\n```", "```py\n{\n    \"by\": \"sohkamyung\",\n❶     \"descendants\": 302,\n    \"id\": 31353677,\n❷     \"kids\": [\n        31354987,\n        31354235,\n        `--snip--`\n    ],\n    \"score\": 785,\n    \"time\": 1652361401,\n❸     \"title\": \"Astronomers reveal first image of the black hole\n        at the heart of our galaxy\",\n    \"type\": \"story\",\n❹     \"url\": \"https://public.nrao.edu/news/.../\"\n}\n```", "```py\nhttps://hacker-news.firebaseio.com/v0/topstories.json\n```", "```py\nfrom operator import itemgetter\n\nimport requests\n\n# Make an API call and check the response.\n❶ url = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\nr = requests.get(url)\nprint(f\"Status code: {r.status_code}\")\n\n# Process information about each submission.\n❷ submission_ids = r.json()\n❸ submission_dicts = []\nfor submission_id in submission_ids[:5]:\n    # Make a new API call for each submission.\n❹     url = f\"https://hacker-news.firebaseio.com/v0/item/{submission_id}.json\"\n    r = requests.get(url)\n    print(f\"id: {submission_id}\\tstatus: {r.status_code}\")\n    response_dict = r.json()\n\n    # Build a dictionary for each article.\n❺     submission_dict = {\n        'title': response_dict['title'],\n        'hn_link': f\"https://news.ycombinator.com/item?id={submission_id}\",\n        'comments': response_dict['descendants'],\n    }\n❻     submission_dicts.append(submission_dict)\n\n❼ submission_dicts = sorted(submission_dicts, key=itemgetter('comments'),\n                            reverse=True)\n\n❽ for submission_dict in submission_dicts:\n    print(f\"\\nTitle: {submission_dict['title']}\")\n    print(f\"Discussion link: {submission_dict['hn_link']}\")\n    print(f\"Comments: {submission_dict['comments']}\")\n```", "```py\nStatus code: 200\nid: 31390506    status: 200\nid: 31389893    status: 200\nid: 31390742    status: 200\n`--snip--`\n\nTitle: Fly.io: The reclaimer of Heroku's magic\nDiscussion link: https://news.ycombinator.com/item?id=31390506\nComments: 134\n\nTitle: The weird Hewlett Packard FreeDOS option\nDiscussion link: https://news.ycombinator.com/item?id=31389893\nComments: 64\n\nTitle: Modern JavaScript Tutorial\nDiscussion link: https://news.ycombinator.com/item?id=31390742\nComments: 20\n`--snip--`\n```"]