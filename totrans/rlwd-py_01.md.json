["```py\n$ python -m pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose\n```", "```py\n>>> import numpy\n```", "```py\npip install opencv-contrib-python\n```", "```py\npython -m pip install opencv-contrib-python\n```", "```py\npy -3.7 -m pip install --user opencv-contrib-python\n```", "```py\nconda install opencv\n```", "```py\n>>> import cv2\n```", "```py\nbayes.py, part 1\nimport sys\nimport random\nimport itertools\nimport numpy as np\nimport cv2 as cv\n\nMAP_FILE = 'cape_python.png'\n\nSA1_CORNERS = (130, 265, 180, 315)  # (UL-X, UL-Y, LR-X, LR-Y)\nSA2_CORNERS = (80, 255, 130, 305)  # (UL-X, UL-Y, LR-X, LR-Y)\nSA3_CORNERS = (105, 205, 155, 255)  # (UL-X, UL-Y, LR-X, LR-Y)\n```", "```py\nbayes.py, part 2\nclass Search():\n    \"\"\"Bayesian Search & Rescue game with 3 search areas.\"\"\"\n\n    def __init__(self, name):\n        self.name = name\n\n     ➊ self.img = cv.imread(MAP_FILE, cv.IMREAD_COLOR)\n        if self.img is None:\n            print('Could not load map file {}'.format(MAP_FILE),\n                  file=sys.stderr)\n            sys.exit(1)\n\n     ➋ self.area_actual = 0 \n        self.sailor_actual = [0, 0] # As \"local\" coords within search area\n\n     ➌ self.sa1 = self.img[SA1_CORNERS[1] : SA1_CORNERS[3], \n                            SA1_CORNERS[0] : SA1_CORNERS[2]]\n\n        self.sa2 = self.img[SA2_CORNERS[1] : SA2_CORNERS[3], \n                            SA2_CORNERS[0] : SA2_CORNERS[2]]\n\n        self.sa3 = self.img[SA3_CORNERS[1] : SA3_CORNERS[3], \n                            SA3_CORNERS[0] : SA3_CORNERS[2]]\n\n     ➍ self.p1 = 0.2\n        self.p2 = 0.5\n        self.p3 = 0.3\n\n        self.sep1 = 0\n        self.sep2 = 0\n        self.sep3 = 0\n```", "```py\nbayes.py, part 3\ndef draw_map(self, last_known):\n    \"\"\"Display basemap with scale, last known xy location, search areas.\"\"\"\n    cv.line(self.img, (20, 370), (70, 370), (0, 0, 0), 2)\n    cv.putText(self.img, '0', (8, 370), cv.FONT_HERSHEY_PLAIN, 1, (0, 0, 0))\n    cv.putText(self.img, '50 Nautical Miles', (71, 370),\n               cv.FONT_HERSHEY_PLAIN, 1, (0, 0, 0))\n\n➊ cv.rectangle(self.img, (SA1_CORNERS[0], SA1_CORNERS[1]),\n                           (SA1_CORNERS[2], SA1_CORNERS[3]), (0, 0, 0), 1)\n   cv.putText(self.img, '1',\n              (SA1_CORNERS[0] + 3, SA1_CORNERS[1] + 15),\n              cv.FONT_HERSHEY_PLAIN, 1, 0)\n   cv.rectangle(self.img, (SA2_CORNERS[0], SA2_CORNERS[1]),\n                (SA2_CORNERS[2], SA2_CORNERS[3]), (0, 0, 0), 1)\n   cv.putText(self.img, '2',\n              (SA2_CORNERS[0] + 3, SA2_CORNERS[1] + 15),\n              cv.FONT_HERSHEY_PLAIN, 1, 0)\n   cv.rectangle(self.img, (SA3_CORNERS[0], SA3_CORNERS[1]),\n                (SA3_CORNERS[2], SA3_CORNERS[3]), (0, 0, 0), 1)\n   cv.putText(self.img, '3',\n              (SA3_CORNERS[0] + 3, SA3_CORNERS[1] + 15),\n              cv.FONT_HERSHEY_PLAIN, 1, 0)\n\n➋ cv.putText(self.img, '+', (last_known),\n              cv.FONT_HERSHEY_PLAIN, 1, (0, 0, 255))\n   cv.putText(self.img, '+ = Last Known Position', (274, 355),\n              cv.FONT_HERSHEY_PLAIN, 1, (0, 0, 255))\n   cv.putText(self.img, '* = Actual Position', (275, 370),\n              cv.FONT_HERSHEY_PLAIN, 1, (255, 0, 0))\n\n➌ cv.imshow('Search Area', self.img)\n   cv.moveWindow('Search Area', 750, 10)\n   cv.waitKey(500)\n```", "```py\nbayes.py, part 4\ndef sailor_final_location(self, num_search_areas):\n    \"\"\"Return the actual x,y location of the missing sailor.\"\"\"   \n    # Find sailor coordinates with respect to any Search Area subarray.\n    self.sailor_actual[0] = np.random.choice(self.sa1.shape[1], 1)\n    self.sailor_actual[1] = np.random.choice(self.sa1.shape[0], 1)\n\n➊ area = int(random.triangular(1, num_search_areas + 1))\n\n    if area == 1:\n        x = self.sailor_actual[0] + SA1_CORNERS[0]\n        y = self.sailor_actual[1] + SA1_CORNERS[1]\n     ➋ self.area_actual = 1\n    elif area == 2:\n        x = self.sailor_actual[0] + SA2_CORNERS[0]\n        y = self.sailor_actual[1] + SA2_CORNERS[1]\n        self.area_actual = 2\n    elif area == 3:\n        x = self.sailor_actual[0] + SA3_CORNERS[0]\n        y = self.sailor_actual[1] + SA3_CORNERS[1]\n        self.area_actual = 3\n    return x, y\n```", "```py\n>>> print(np.shape(self.SA1))\n(50, 50, 3)\n```", "```py\nbayes.py, part 5\n   def calc_search_effectiveness(self):\n       \"\"\"Set decimal search effectiveness value per search area.\"\"\"\n       self.sep1 = random.uniform(0.2, 0.9)\n       self.sep2 = random.uniform(0.2, 0.9)\n       self.sep3 = random.uniform(0.2, 0.9)\n\n➊ def conduct_search(self, area_num, area_array, effectiveness_prob):\n       \"\"\"Return search results and list of searched coordinates.\"\"\"\n       local_y_range = range(area_array.shape[0])\n       local_x_range = range(area_array.shape[1])\n     ➋ coords = list(itertools.product(local_x_range, local_y_range))\n       random.shuffle(coords)\n       coords = coords[:int((len(coords) * effectiveness_prob))]\n     ➌ loc_actual = (self.sailor_actual[0], self.sailor_actual[1])\n       if area_num == self.area_actual and loc_actual in coords:\n           return 'Found in Area {}.'.format(area_num), coords    \n       else:\n           return 'Not Found', coords\n```", "```py\n>>> import itertools\n>>> x_range = [1, 2, 3]\n>>> y_range = [4, 5, 6]\n>>> coords = list(itertools.product(x_range, y_range))\n>>> coords\n[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\n```", "```py\nbayes.py, part 6\n    def revise_target_probs(self):\n        \"\"\"Update area target probabilities based on search effectiveness.\"\"\" \n        denom = self.p1 * (1 - self.sep1) + self.p2 * (1 - self.sep2) \\\n                + self.p3 * (1 - self.sep3)\n        self.p1 = self.p1 * (1 - self.sep1) / denom\n        self.p2 = self.p2 * (1 - self.sep2) / denom\n        self.p3 = self.p3 * (1 - self.sep3) / denom\n\ndef draw_menu(search_num):\n    \"\"\"Print menu of choices for conducting area searches.\"\"\"\n    print('\\nSearch {}'.format(search_num))\n    print(\n        \"\"\"\n        Choose next areas to search:\n\n        0 - Quit\n        1 - Search Area 1 twice\n        2 - Search Area 2 twice\n        3 - Search Area 3 twice\n        4 - Search Areas 1 & 2\n        5 - Search Areas 1 & 3\n        6 - Search Areas 2 & 3\n        7 - Start Over\n        \"\"\"\n        )\n```", "```py\nbayes.py, part 7 \ndef main():    \n    app = Search('Cape_Python')\n    app.draw_map(last_known=(160, 290))\n    sailor_x, sailor_y = app.sailor_final_location(num_search_areas=3)\n    print(\"-\" * 65)\n    print(\"\\nInitial Target (P) Probabilities:\")\n    print(\"P1 = {:.3f}, P2 = {:.3f}, P3 = {:.3f}\".format(app.p1, app.p2, app.p3))\n    search_num = 1\n```", "```py\nbayes.py, part 8 \nwhile True:\n    app.calc_search_effectiveness()\n    draw_menu(search_num)\n    choice = input(\"Choice: \")\n\n    if choice == \"0\":\n        sys.exit()\n➊ elif choice == \"1\":\n       results_1, coords_1 = app.conduct_search(1, app.sa1, app.sep1)\n       results_2, coords_2 = app.conduct_search(1, app.sa1, app.sep1)\n    ➋ app.sep1 = (len(set(coords_1 + coords_2))) / (len(app.sa1)**2)\n       app.sep2 = 0\n       app.sep3 = 0\n\n    elif choice == \"2\":\n        results_1, coords_1 = app.conduct_search(2, app.sa2, app.sep2)\n        results_2, coords_2 = app.conduct_search(2, app.sa2, app.sep2)\n        app.sep1 = 0\n        app.sep2 = (len(set(coords_1 + coords_2))) / (len(app.sa2)**2)\n        app.sep3 = 0\n\n    elif choice == \"3\":\n        results_1, coords_1 = app.conduct_search(3, app.sa3, app.sep3)\n        results_2, coords_2 = app.conduct_search(3, app.sa3, app.sep3)\n        app.sep1 = 0\n        app.sep2 = 0\n        app.sep3 = (len(set(coords_1 + coords_2))) / (len(app.sa3)**2)\n\n➌ elif choice == \"4\":\n       results_1, coords_1 = app.conduct_search(1, app.sa1, app.sep1)\n       results_2, coords_2 = app.conduct_search(2, app.sa2, app.sep2)\n       app.sep3 = 0\n\n   elif choice == \"5\":\n       results_1, coords_1 = app.conduct_search(1, app.sa1, app.sep1)\n       results_2, coords_2 = app.conduct_search(3, app.sa3, app.sep3)\n       app.sep2 = 0\n\n   elif choice == \"6\":\n       results_1, coords_1 = app.conduct_search(2, app.sa2, app.sep2)\n       results_2, coords_2 = app.conduct_search(3, app.sa3, app.sep3)\n       app.sep1 = 0\n\n➍ elif choice == \"7\":\n       main()\n\n   else:\n       print(\"\\nSorry, but that isn't a valid choice.\", file=sys.stderr)\n       continue\n```", "```py\nbayes.py, part 9 \n        app.revise_target_probs()  # Use Bayes' rule to update target probs.\n\n        print(\"\\nSearch {} Results 1 = {}\"\n              .format(search_num, results_1), file=sys.stderr)\n        print(\"Search {} Results 2 = {}\\n\"\n              .format(search_num, results_2), file=sys.stderr)\n        print(\"Search {} Effectiveness (E):\".format(search_num))\n        print(\"E1 = {:.3f}, E2 = {:.3f}, E3 = {:.3f}\"\n              .format(app.sep1, app.sep2, app.sep3))\n\n     ➊ if results_1 == 'Not Found' and results_2 == 'Not Found':\n            print(\"\\nNew Target Probabilities (P) for Search {}:\"\n                  .format(search_num + 1))\n            print(\"P1 = {:.3f}, P2 = {:.3f}, P3 = {:.3f}\"\n                  .format(app.p1, app.p2, app.p3))\n        else:\n            cv.circle(app.img, (sailor_x, sailor_y), 3, (255, 0, 0), -1)\n         ➋ cv.imshow('Search Area', app.img)\n            cv.waitKey(1500)\n            main()\n        search_num += 1\n\nif __name__ == '__main__':\n    main()\n```", "```py\nSearch 2 Results 1 = Not Found\nSearch 2 Results 2 = Not Found\n\nSearch 2 Effectiveness (E):\nE1 = 0.000, E2 = 0.234, E3 = 0.610\n\nNew Target Probabilities (P) for Search 3:\nP1 = 0.382, P2 = 0.395, P3 = 0.223\n```", "```py\nActual Search 1 Effectiveness (E):\nE1 = 0.190, E2 = 0.000, E3 = 0.000\n\nNew Planned Search Effectiveness and Target Probabilities (P) for Search 2:\nE1 = 0.509, E2 = 0.826, E3 = 0.686\nP1 = 0.168, P2 = 0.520, P3 = 0.312\n\nSearch 2\n\n    Choose next areas to search:\n\n    0 - Quit\n\n    1 - Search Area 1 twice\n      Probability of detection: 0.164\n\n    2 - Search Area 2 twice\n      Probability of detection: 0.674\n\n    3 - Search Area 3 twice\n      Probability of detection: 0.382\n\n    4 - Search Areas 1 & 2\n      Probability of detection: 0.515\n\n    5 - Search Areas 1 & 3\n      Probability of detection: 0.3\n\n    6 - Search Areas 2 & 3\n      Probability of detection: 0.643\n\n    7 - Start Over\n\nChoice:\n```"]