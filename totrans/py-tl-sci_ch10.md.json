["```py\nIn [1]: if 42 < 2:\n    ...:      print(\"That's crazy!\")\nIn [2]:\n```", "```py\nIn [3]: number = 2\n\nIn [4]: if number <= 3:\n   ...:      print(number)\n   ...: else:\n   ...:      print('Out of range.')\n2\n```", "```py\nIn [5]: genus = ′rattus′\n\nIn [6]: species = 'norvegicus'\n\nIn [7]: if genus == 'rattus':\n    ...:      if species == 'norvegicus':\n    ...:           print('The common brown rat.')\nThe common brown rat.\n```", "```py\nIn [8]: core = 300\n\nIn [9]: if core < 200:\n    ...:      print(\"Core is shut down\")\n    ...: elif 200 <= core < 300:\n    ...:      print(\"Core is below optimum\")\n    ...: elif core == 300:\n    ...:      print(\"Core is at optimum\")\n    ...: elif 300 < core < 1800:\n    ...:      print(\"Core is above optimum\") ...: else:\n    ...:      print(\"Meltdown! Run for your life!\")\nCore is at optimum\n```", "```py\nIn [10]: core = 200\n\nIn [11]: if core < 200:\n    ...:      print(\"Core is shutdown\")\n    ...: elif 200 < core < 300:\n    ...:      print(\"Core is below optimum\")\n    ...: elif core == 300:\n    ...:      print(\"Core is at optimum\")\n    ...: elif 300 < core < 1800:\n    ...:      print(\"Core is above optimum\")\n    ...: else:\n    ...:      print(\"Meltdown! Run your life!\")\nMeltdown! Run your life!\n```", "```py\nIn [12]: dogs = ('poodle', 'bulldog', 'husky')\n\nIn [13]: cats = ('persian', 'siamese', 'burmese')\n\nIn [14]: popular_breeds = ('poodle', 'persian', 'siamese')\n\nIn [15]: dog_count = 0 In [16]: cat_count = 0\n\nIn [17]: popular_breeds_count = 0\n\nIn [18]: animal = 'poodle'\n\nIn [19]: if animal in dogs:\n    ...:      dog_count += 1\n    ...: elif animal in cats:\n    ...:      cat_count += 1\n    ...: elif animal in popular_breeds:\n    ...:      popular_breeds_count += 1\n\nIn [20]: dog_count\nOut[20]: 1\n\nIn [21]: cat_count\nOut[21]: 0\n\nIn [22]: popular_breeds_count\nOut[22]: 0\n```", "```py\ntrue expression if condition else false expression\n```", "```py\nIn [23]: core = 1801\n\nIn [24]: 'Run for your lives!' if core >= 1800 else 'So far so good!'\nOut[24]: 'Run for your lives!'\n```", "```py\nIn [25]: not False\nOut[25]: True\n```", "```py\nIn [26]: 'a' == 'a' and 10 > 2\nOut[26]: True\n\nIn [27]: (10 > 2) and (42 > 2) and ('a' == 'b')\nOut[27]: False\n\nIn [28]: (10 < 2) or ('a' != 'b')\nOut[28]: True\n```", "```py\nIn [29]: legs = 4\n\nIn [30]: sound = 'bark'\n\nIn [31]: if legs == 4 and sound == 'bark':\n    ...:      print('a dog')\n    ...: elif legs == 4 and sound == 'meow':\n    ...:      print('a cat')\na dog\n```", "```py\nIn [32]: today = 'Sunday'\n\nIn [33]: if today in ('Saturday', 'Sunday'):\n    ...:      print('Enjoy your weekend!')\nEnjoy your weekend!\n```", "```py\nIn [34]: today = 'Saturday'\n\nIn [35]: if today == 'Saturday' or 'Sunday':\n    ...:      print('Enjoy your weekend!')\nEnjoy your weekend!\n```", "```py\nwhile some condition is True:\n   do something\n```", "```py\nfor something in something:\n  do something\n```", "```py\nIn [36]: password = ''\n\nIn [37]: count = 0 In [38]: ➊ while password != 'Python':\n    ...:        password = input(\"Enter your password: \")\n    ...:        count += 1\n    ...:    ➋ if count > 3:\n    ...:           print(\"No more tries.\")\n    ...:           break\n```", "```py\nrange(start, stop, step).\n```", "```py\nIn [39]: for i in range(5):\n    ...:      print(i)\n0\n1\n2\n3\n4\n```", "```py\nIn [40]: for i in range(1, 6, 2):\n    ...:      print(i)\n1\n3\n5\n```", "```py\nIn [41]: my_list = ['a', 'b', 'c', 'd', 'e']\n\nIn [42]: for i in range(len(my_list)):\n    ...:      print(my_list[i])\na\nb\nc\nd\ne\n```", "```py\nIn [43]: for item in my_list:\n    ...:      print(item)\na\nb\nc\nd\ne\n```", "```py\nIn [44]: for letter in \"Python\":\n    ...:      print(letter)\nP\ny\nt\nh\no\nn\n```", "```py\nIn [45]: equipment_list = ['binoculars', 'rock hammer', 'hand lens']\n\nIn [46]: for index, item in enumerate(equipment_list, start=1):\n    ...:      print(index, item)\n1 binoculars\n2 rock hammer\n3 hand lens\n```", "```py\nIn [47]: mythbusters = ['Kari', 'Grant', 'Tory']\n\nIn [48]: MYTHBUSTERS = ['Adam', 'Jamie']\n\nIn [49]: for star in mythbusters:\n    ...:      for big_star in MYTHBUSTERS:\n    ...:           if big_star == 'Adam':\n    ...:                break\n    ...:      print(star, big_star)\nKari Adam\nGrant Adam\nTory Adam\n```", "```py\nIn [50]: while True:\n    ...:      name = input('Enter your username: ')\n    ...:      if name != 'Alice':\n    ...:        ➊ continue\n    ...:   ➋ pwd = input('Enter your password: ')\n    ...:      if pwd == 'Star_Lord':\n    ...:        ➌ break\n    ...:      else:\n    ...:           print('That password is incorrect')\n```", "```py\nIn [51]: word = 'Python'\nIn [52]: count = 0\nIn [53]: while count < len(word):\n    ...:      if count < 3:\n    ...:           print(word[count])\n    ...:   ➊ elif count == 3:\n    ...:           pass\n    ...:      else:\n    ...:           print(word[count])\n    ...:      count += 1\nP\ny\nt\no\nn\n```", "```py\nnew_list = [item for item in iterable if item satisfies condition]\n```", "```py\nnew_list = [expression for item in iterable if condition]\n```", "```py\nIn [54]: word = 'Python'\n\nIn [55]: letters = [letter.upper() for letter in word]\n\nIn [56]: letters\nOut[56]: ['P', 'Y', 'T', 'H', 'O', 'N']\n```", "```py\nIn [57]: cap = [letter.upper() for letter in word if letter.isupper()]\n\nIn [58]: cap\nOut[58]: ['P']\n```", "```py\nIn [59]: cap = []\n\nIn [60]: for letter in word:\n    ...:      if letter.isupper():\n    ...:           cap.append(letter)\n```", "```py\nIn [61]: first = ['Python is']\n\nIn [62]: last = ['fun', 'easy', 'neat'] In [63]: print([f + ' ' + l for f in first for l in last])\n['Python is fun', 'Python is easy', 'Python is neat']\n```", "```py\nnew_dict = {k:v for (k, v) in dictionary if k, v satisfy condition}\n```", "```py\nnew_dict = {k-expr:v-expr for (k, v) in dictionary if condition}\n```", "```py\nnew_dict = {item:item-expr for item in iterable if condition}\n```", "```py\nIn [64]: inputs = [1, 2, 3, 4, 5, 6]\n\nIn [65]: new_dict = {item:item**2 for item in inputs if item % 2 == 0}\n\nIn [66]: new_dict\nOut[66]: {2: 4, 4: 16, 6: 36}\n```", "```py\nIn [67]: mineral = 'talc', 'gypsum', 'calcite'\n\nIn [68]: hardness = 1, 2, 3\n\nIn [69]: mohs = {m: h for (m, h) in zip(mineral, hardness)}\n\nIn [70]: mohs\nOut[70]: {'talc': 1, 'gypsum': 2, 'calcite': 3}\n```", "```py\nIn [71]: mohs = dict(zip(mineral, hardness))\n```", "```py\nnew_set = {item for item in iterable if item satisfies condition}\n```", "```py\nnew_set = {expression for item in iterable if condition}\n```", "```py\nIn [72]: pond_animals = ['turtle', 'duck', 'frog', 'turtle', 'snail', 'duck']\n\nIn [73]: unique_animals = {animal for animal in pond_animals}\n\nIn [74]: unique_animals\nOut[74]: {'duck', 'frog', 'snail', 'turtle'}\n```", "```py\nIn [75]: unique_word_lengths = {len(word) for word in pond_animals}\n\nIn [76]: unique_word_lengths\nOut[76]: {4, 5, 6}\n```", "```py\nIn [77]: try:\n    ...:      age = int(input(\"Enter your age in years: \"))\n    ...: except:\n    ...:      print(\"Please start again and enter a whole number.\")\n\nEnter your age in years: Harry\nPlease start again and enter a whole number.\n```", "```py\nIn [78]: try:\n    ...:     age = int(input(\"Enter your age in years: \"))\n    ...: except ValueError:\n    ...:     print(\"Please start again and enter a whole number.\")\n```", "```py\nIn [79]: except (ValueError, TypeError):\n```", "```py\ntry:\n   something...\nexcept ValueError:\n   do something... except TypeError:\n   do something else...\n```", "```py\nIn [80]: try:\n     ...:     age = int(input(\"Enter your age in years: \"))\n     ...: except ValueError as e:\n     ...:      print(e)\n     ...:      print(\"Please start again and enter a whole number.\")\n\nEnter your age in years: Steve\ninvalid literal for int() with base 10: \"Steve\"\nPlease start again and enter a whole number.\n```", "```py\nIn [81]: try:\n    ...:     age = int(input(\"Enter your age in years: \"))\n    ...: except ValueError as e:\n    ...:     print(f'\\n{e}')\n    ...:     print(\"Please start again and enter a whole number.\")\n    ...: else:\n    ...:     print(f\"You entered an age of {age} years\")\n\nEnter your age in years: 42\nYou entered an age of 42 years\n```", "```py\nword = input(\"Enter Harry's last name: \")\nif word.lower()!= 'potter':\n    raise Exception('I was looking for Potter!')\n```", "```py\nEnter Harry's last name: Houdini\nTraceback (most recent call last):\n\n--snip--\n\n  File \"C:/Users/hanna/file_play/junk.py\", line 1, in <module>\n    raise Exception('I was looking for Potter!')\n\nException: I was looking for Potter!\n```", "```py\nnumber = 'Steve'\nif isinstance(number, int):\n    pass\nelse:\n    raise TypeError(\"Only integers are accepted.\")\n```", "```py\nIn [82]: data = [24, 42, 5, 26, None, 101]\n```", "```py\nIn [83]: for sample in data:\n    ...:     print(f'{sample / 2}’)\n12.0\n21.0\n2.5\n13.0\nTraceback (most recent call last):\n\nFile \"C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_5140/163932511.py\", line 2, in <module> print(f’{sample / 2}’)\n\nTypeError: unsupported operand type(s) for /: 'NoneType' and 'int'\n```", "```py\nIn [84]: for sample in data:\n    ...:     try:\n    ...:         x = sample / 2\n    ...:         print(x)\n    ...:     except TypeError:\n    ...:         print(\"missing data\")\n12.0\n21.0\n2.5\n13.0\nmissing data\n50.5\n```", "```py\nIn [85]: for sample in data:\n    ...:     try:\n    ...:         x = sample / 2\n    ...:         print(x)\n    ...:      except TypeError:\n    ...:         continue\n12.0\n21.0\n2.5\n13.0\n50.5\n```", "```py\n   import logging\n➊ logging.basicConfig(level=logging.DEBUG,\n                       format='%(asctime)s %(levelname)s - %(message)s')\n   word = 'scarecrow'\n   VOWELS = 'aeiouy'\n   num_vowels = 0\n\n   for letter in word:\n       if letter in VOWELS:\n           num_vowels += 1\n    ➋ logging.debug('letter & vowel count = %s-%s', letter, num_vowels)\n```", "```py\nIn [86]: runfile(′C:/Users/hanna/.spyder-py3/temp.py′, wdir=′C:/Users/hanna/.spyder-py3′)\n202x-09-27 14:37:30,578 DEBUG - letter & vowel count = s-0\n202x-09-27 14:37:30,580 DEBUG - letter & vowel count = c-0\n202x-09-27 14:37:30,581 DEBUG - letter & vowel count = a-1\n202x-09-27 14:37:30,581 DEBUG - letter & vowel count = r-1\n202x-09-27 14:37:30,582 DEBUG - letter & vowel count = e-2\n202x-09-27 14:37:30,582 DEBUG - letter & vowel count = c-2\n202x-09-27 14:37:30,582 DEBUG - letter & vowel count = r-2\n202x-09-27 14:37:30,583 DEBUG - letter & vowel count = o-3\n202x-09-27 14:37:30,583 DEBUG - letter & vowel count = w-3\n```", "```py\nlogging.basicConfig(filename='vowel_counter_log.txt',\n                    level=logging.DEBUG,\n                    format='%(asctime)s %(levelname)s - %(message)s')\n```", "```py\nimport logging\nlogging.disable(logging.CRITICAL)\n```", "```py\nimport logging\n#logging.disable(logging.CRITICAL)\n```"]