- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Analyzing Time Series Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分析时间序列数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: '*Time series data*, or *timestamped data*, is a set of data points indexed
    in chronological order. Common examples include economic indices, weather records,
    and patient health indicators, all captured over time. This chapter covers techniques
    for analyzing time series data and extracting meaningful statistics from it using
    the pandas library. We’ll focus on analyzing stock market data, but the same techniques
    can be applied to all kinds of time series data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*时间序列数据*，或称为*时间戳数据*，是一组按时间顺序排列的数据点。常见的例子包括经济指数、天气记录和患者健康指标，所有这些都是随着时间的推移而收集的。本章介绍了使用pandas库分析时间序列数据并从中提取有意义统计信息的技术。我们将重点分析股市数据，但这些技术也可以应用于各种时间序列数据。'
- en: Regular vs. Irregular Time Series
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规律与不规律时间序列
- en: 'A time series can be created for any variable that changes over time, and those
    changes can be recorded either at regular or irregular time intervals. Regular
    intervals are more common. In finance, for example, it’s typical to use a time
    series to track the price of a stock from one day to the next, as shown here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列可以为任何随时间变化的变量创建，这些变化可以在规律或不规律的时间间隔内记录。规律时间间隔更为常见。例如在金融领域，通常使用时间序列来跟踪股票价格从一天到下一天的变化，正如这里所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the `Date` column in this time series contains timestamps, arranged
    in chronological order, for a sequence of consecutive days. The corresponding
    data points, often referred to as *observations*, are presented in the `Closing
    Price` column. Time series of this type are said to be *regular* or *continuous*
    because the observations are made continuously through time at regular intervals.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个时间序列中的`Date`列包含了按时间顺序排列的一系列时间戳，代表连续几天的事件。相应的数据点，通常被称为*观测值*，展示在`Closing
    Price`列中。这类时间序列被称为*规律*或*连续*的，因为观测值是连续地在规律的时间间隔内收集的。
- en: 'Another example of a regular time series would be a collection of latitude
    and longitude coordinates for a vehicle, recorded every minute, as shown here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个规律时间序列的例子是记录一个车辆的经纬度坐标，每分钟记录一次，如下所示：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here the timestamps are times, not dates, but they still proceed in chronological
    order, minute by minute.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，时间戳是时间而不是日期，但它们依然按时间顺序进行，逐分钟记录。
- en: 'Unlike regular time series, *irregular time series* are used to record sequences
    of events as they occur or are planned to occur, not at regular intervals. As
    a simple example, consider the agenda of a conference:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与规律时间序列不同，*不规则时间序列*用于记录事件发生或计划发生的顺序，而不是在规律的时间间隔内。以一个简单的例子为例，考虑一个会议的议程：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The timestamps for this series of data points are irregularly distributed, based
    on the amount of time each event is expected to take.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据点序列的时间戳是不规则分布的，基于每个事件预计需要的时间。
- en: Irregular time series are commonly used in applications where the data comes
    unpredictably. For software developers, a typical irregular time series would
    be a log of errors encountered while running a server or executing an application.
    It’s hard to predict when the errors will occur, and they almost certainly won’t
    happen at regular intervals. To give another example, an application that tracks
    electricity consumption may use an irregular time series to record anomalies such
    as bursts and failures that occur randomly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不规则时间序列通常用于数据不可预测的应用中。对于软件开发人员来说，一个典型的不规则时间序列是记录在运行服务器或执行应用程序时遇到的错误日志。很难预测这些错误何时发生，而且它们几乎肯定不会按规律的时间间隔发生。再举一个例子，一个跟踪电力消耗的应用程序可能会使用不规则时间序列来记录随机发生的异常，如突发和故障。
- en: What regular and irregular time series have in common is that data points in
    them are listed in chronological order. Indeed, time series analysis hinges on
    this key feature. Strict chronological order is what allows you to consistently
    compare events or values within a time series, identifying key statistics and
    trends.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 规律和不规律时间序列的共同点在于它们的数据点都是按时间顺序排列的。实际上，时间序列分析正是基于这一关键特性。严格的时间顺序使你能够始终如一地比较时间序列中的事件或数值，从而识别关键统计信息和趋势。
- en: In the case of stock data, for example, the chronological order lets you track
    a stock’s performance over time. In the case of the minute-by-minute geo coordinates
    of a vehicle, you might use adjacent pairs of coordinates to calculate the distance
    driven each minute and then use that distance to compare the vehicle’s average
    speed from one minute to the next. Meanwhile, the chronological order of the conference
    agenda lets you immediately see the expected duration of each event.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以股票数据为例，时间顺序让你能够跟踪股票的表现。对于逐分钟的车辆地理坐标数据，你可能会使用相邻的坐标对来计算每分钟行驶的距离，然后用这个距离来比较车辆在相邻两分钟之间的平均速度。同时，会议议程的时间顺序让你能够立即看到每个事件的预计持续时间。
- en: 'In some cases, the timestamps themselves may not actually be needed to analyze
    the time series; all that matters is that the records in the series are in chronological
    order. Consider the following irregular time series of two consecutive error messages
    your script might return when trying to connect to a MySQL database with the wrong
    password:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，时间戳本身可能并不需要用于分析时间序列；重要的是确保序列中的记录按时间顺序排列。考虑以下不规则时间序列，它包含你在尝试使用错误密码连接到
    MySQL 数据库时，脚本可能返回的两个连续错误信息：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second error message tells you that the variable named `cursor` hasn’t
    been defined. However, the root of the problem can be understood only if you look
    at the preceding error message: since the password was incorrect, no connection
    could be established to the database, so no `cursor` object could be created.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个错误信息告诉你名为`cursor`的变量尚未定义。然而，只有查看前面的错误信息，你才能理解问题的根源：由于密码错误，无法与数据库建立连接，因此无法创建`cursor`对象。
- en: Analyzing a sequence of error messages is a common task for programmers, but
    it’s usually done manually, without any coding. For the rest of the chapter, we’ll
    focus on time series with numeric data points, since these can readily be analyzed
    using Python scripts. In particular, we’ll look at how to extract meaningful information
    from regular time series containing stock market data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 分析一系列错误信息是程序员常见的任务，但通常是手动完成的，且没有任何编码。在本章的其余部分，我们将重点讨论带有数值数据点的时间序列，因为这些数据可以通过
    Python 脚本轻松分析。特别是，我们将讨论如何从包含股市数据的常规时间序列中提取有意义的信息。
- en: Common Time Series Analysis Techniques
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的时间序列分析技巧
- en: Suppose you want to analyze a time series of daily closing stock prices for
    a given stock over a certain period of time. In this section, you’ll learn some
    common techniques to use in your analysis, but first you’ll need some stock data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想分析某只股票在一段时间内的每日收盘价时间序列。在这一节中，你将学习一些常见的分析技巧，但首先你需要一些股票数据。
- en: 'As you saw in Chapters 3 and 5, you can obtain stock market data within a Python
    script using the yfinance library. Here, for example, you gather the stock data
    for the TSLA (Tesla, Inc.) ticker for the last five trading days:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在第3章和第5章中所见，你可以通过 Python 脚本使用 yfinance 库获取股市数据。例如，在这里你收集了过去五个交易日的 TSLA（特斯拉公司）股票数据：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result takes the form of a pandas DataFrame and will look something like
    the following (your dates and the data returned will vary):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以 pandas DataFrame 形式呈现，类似于以下内容（你的日期和返回的数据会有所不同）：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, the DataFrame is indexed by date, meaning the data is a proper,
    chronologically arranged time series. There are columns for the opening and closing
    price as well as the day’s high and low prices. Meanwhile, the `Volume` column
    shows the total number of shares traded that day, and the two rightmost columns
    provide details about the dividends and splits the company has given to its shareholders.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，DataFrame 以日期为索引，这意味着数据是一个正确的、按时间顺序排列的时间序列。这里有开盘价、收盘价以及当天的最高价和最低价列。同时，`Volume`
    列显示当天交易的总股数，最右边的两列提供了公司向股东发放的股息和分拆的详细信息。
- en: 'You likely won’t need all of these columns for your analysis. In fact, for
    now you just need the `Close` column. Here you print it out as a pandas Series:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不需要所有这些列来进行分析。事实上，现在你只需要`Close`这一列。在这里，你将其打印为 pandas Series：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Series will look similar to the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该 Series 将类似于以下内容：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you’re ready to begin your time series analysis. We’ll focus on two common
    techniques: calculating percentage changes over time and performing aggregate
    calculations within a rolling time window. You’ll see how these techniques can
    work together to reveal trends in the data.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你准备开始时间序列分析了。我们将重点关注两种常见技术：计算随时间变化的百分比变化，以及在滚动时间窗口内进行汇总计算。你将看到这些技术如何相互配合，揭示数据中的趋势。
- en: Calculating Percentage Changes
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算百分比变化
- en: Perhaps the most typical time series analysis technique is to track how much
    the observed data changes over time. In the case of stock market data, this might
    involve calculating the percentage change of a stock value over a certain time
    interval. This way, you can quantify how the stock is performing and develop a
    short-term investment strategy.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最典型的时间序列分析技术之一是跟踪观察数据随时间的变化。在股票市场数据的情况下，这可能涉及计算某个时间间隔内股票价值的百分比变化。通过这种方式，你可以量化股票的表现，并制定短期投资策略。
- en: Technically speaking, a percentage change is the difference (expressed as a
    percent) between values from two different points in time. To calculate such a
    change, you therefore need to be able to shift data points in time. That is, you
    shift the older data point forward in time so it aligns with the newer data point;
    then you can compare the data points and calculate the percentage change.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，百分比变化是两个不同时间点的值之间的差异（以百分比表示）。因此，要计算这样的变化，你需要能够将数据点在时间上进行偏移。也就是说，你将较旧的数据点向前移动，使其与较新的数据点对齐；然后你可以比较这些数据点并计算百分比变化。
- en: 'When a time series is implemented as a pandas Series or DataFrame, you can
    use the `shift()` method to shift data points in time by the desired number of
    periods. Continuing with our TSLA ticker example, you might want to know how much
    the stock’s closing price has changed over a period of two days. In this case,
    you’d use `shift(2)` to bring the closing price from two days earlier in line
    with the closing price for a given day. To get a feel for how shifting works,
    here you shift the `Close` column forward two days, save the result as `2DaysShift`,
    and concatenate the result with the original `Close` column:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间序列作为pandas Series或DataFrame实现时，你可以使用`shift()`方法将数据点按所需的时间周期进行偏移。以我们的TSLA股票为例，你可能想知道股票的收盘价在两天期间内发生了多少变化。在这种情况下，你可以使用`shift(2)`方法将两天前的收盘价与某一天的收盘价对齐。为了更好地理解偏移的工作原理，你可以将`Close`列向前偏移两天，将结果保存为`2DaysShift`，然后将其与原始的`Close`列连接起来：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output should look something like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果应该类似于以下内容：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the values in the `Close` column are echoed in the `2DaysShift`
    column, offset by two days. The first two values in `2DaysShift` are `NaN` because
    you don’t have prices from two days earlier for the first two days in the time
    series.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`Close`列中的值在`2DaysShift`列中有对应的反映，但偏移了两天。`2DaysShift`中的前两个值为`NaN`，因为在时间序列的前两天没有两天前的股价数据。
- en: 'To find the percentage change between the price from two days earlier and the
    price for a given day, you could take the difference between the given day’s value
    and the earlier value and divide it by the earlier value:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算某一天的股价与两天前的股价之间的百分比变化，你可以计算当天的股价与两天前股价的差值，并将其除以两天前的股价：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In financial analysis, however, it’s common to instead divide the new value
    by the old value and take the natural logarithm of the result. This calculation
    provides an almost exact approximation of the percentage change when the change
    is within the range +/– 5 percent, and it remains very close up to +/– 20 percent.
    Here, you calculate the two-day percentage difference using the natural logarithm
    and store the result as a new column called `2daysRise` in the `df` DataFrame:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在财务分析中，通常的做法是将新值除以旧值，然后对结果取自然对数。当变化在+/- 5%范围内时，这种计算方法几乎能精确地近似百分比变化，且在+/-
    20%的范围内仍然非常接近。这里，你使用自然对数计算两天的百分比差异，并将结果存储为`2daysRise`这一新的列，添加到`df`数据框中：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You obtain a day’s closing price and divide it by the closing price two trading
    days earlier, accessed using `shift(2)`. Then you use NumPy’s `log()` function
    to take the natural logarithm of the result. Now you can print the `Close` and
    `2daysRise` columns of the DataFrame:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你获取当天的收盘价，并将其除以两天前的收盘价，使用`shift(2)`方法访问。然后，你可以使用NumPy的`log()`函数对结果取自然对数。现在，你可以打印`Close`列和`2daysRise`列的内容：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The outputted time series will look similar to the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的时间序列将类似于以下内容：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `2daysRise` column shows the percentage change of the stock compared to
    two days earlier. Once again, the first two values in the column are `NaN` because
    you don’t have prices from two days earlier for the first two days in the time
    series.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`2daysRise` 列显示与两天前相比的股票涨幅百分比。再次强调，列中的前两个值是 `NaN`，因为在时间序列的前两天没有两天前的价格数据。'
- en: Rolling Window Calculations
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滚动窗口计算
- en: 'Another common time series analysis technique is to compare each value with
    the average value over *n* periods. This is called a *rolling window calculation*:
    you create a time window of a fixed size and perform an aggregate calculation
    on the values within that time window as it moves, or *rolls*, across the time
    series. In the case of stock data, you might use a rolling window calculation
    to find the average closing price of the two previous days, then compare the current
    day’s closing price with that average. This would give you a sense of the stock
    price’s stability over time.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的时间序列分析技术是将每个值与过去 *n* 个周期的平均值进行比较。这被称为 *滚动窗口计算*：你创建一个固定大小的时间窗口，并在时间窗口内的值上执行聚合计算，随着时间窗口在时间序列中“滚动”或*滑动*。以股票数据为例，你可以使用滚动窗口计算来找出前两天的平均收盘价，然后将当前日期的收盘价与该平均值进行比较。这将帮助你了解股票价格随时间的稳定性。
- en: 'Every pandas object has a `rolling()` method for looking at a rolling window
    of values. Here, you use it in combination with `shift()` and `mean()` to find
    the average Tesla stock price for the previous two days:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 pandas 对象都有一个 `rolling()` 方法，用于查看值的滚动窗口。在这里，你将其与 `shift()` 和 `mean()` 结合使用，以查找前两天的特斯拉股票价格平均值：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the first line, you use `shift(1)` to shift the data points in the series
    by one day. You do this because you want to exclude the current day’s price when
    calculating an average to be compared with it. Next, you form the rolling window
    with `rolling(2)`, indicating that you want to draw on two consecutive rows when
    you make your calculations. Finally, you invoke the `mean()` method to calculate
    an average for each pair of consecutive rows covered by the rolling window. You
    store the results in a new column called `2daysAvg`, which you print, along with
    the `Close` column. The resulting DataFrame will look something like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，你使用 `shift(1)` 将数据点在时间序列中平移一天。这样做是因为你希望在计算平均值时排除当前日期的价格，这样就可以与它进行比较。接下来，使用
    `rolling(2)` 来形成滚动窗口，表示在进行计算时希望参考连续的两行数据。最后，调用 `mean()` 方法来计算每对连续行的平均值。你将结果存储在一个名为
    `2daysAvg` 的新列中，并与 `Close` 列一起打印出来。结果的 DataFrame 看起来类似于下面的样子：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The prices in the `2daysAvg` column are averages of the two previous trading
    days. For example, the value assigned to `2022-01-12` is the average of the prices
    on `2022-01-10` and `2022-01-11`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`2daysAvg` 列中的价格是前两天的平均值。例如，`2022-01-12` 的值是 `2022-01-10` 和 `2022-01-11` 价格的平均值。'
- en: Calculating the Percentage Change of a Rolling Average
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算滚动平均的百分比变化
- en: 'Given a rolling average of the previous two days’ closing prices, the next
    logical step is to calculate the percentage change between each day’s price and
    its associated rolling average. Here you perform that calculation, once again
    using the natural logarithm to approximate the percentage change:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 给定前两天的收盘价滚动平均，下一步逻辑是计算每一天的价格与其相关联的滚动平均之间的百分比变化。在这里，你执行了该计算，再次使用自然对数来近似百分比变化：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You store the results in a new column called `2daysAvgRise`. Then you print
    the `Close`, `2daysRise`, and `2daysAvgRise` columns together. The output will
    look similar to this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你将结果存储在一个名为 `2daysAvgRise` 的新列中。然后你将 `Close`、`2daysRise` 和 `2daysAvgRise` 列一起打印出来。输出将类似于下面的样子：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For this particular time series, both of the newly created metrics, `2daysRise`
    and `2daysAvgRise`, show both negative and positive values. This indicates that
    the stock’s closing price was volatile throughout the period of observation. Of
    course, your own results might reveal a different trend.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的时间序列，两个新创建的指标，`2daysRise` 和 `2daysAvgRise`，都显示了负值和正值。这表明股票的收盘价在观察期内波动较大。当然，你自己的结果可能会显示不同的趋势。
- en: Multivariate Time Series
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多变量时间序列
- en: A *multivariate time series* is a time series with more than one variable that
    changes over time. When you first obtained the Tesla stock data through the yfinance
    library, for example, it came as a multivariate time series, since it included
    not just the stock’s closing price but also the opening price, high and low prices,
    and several other data points for each day. In this case, the multivariate time
    series tracked multiple features of the same object, an individual stock. Other
    multivariate time series may track the same feature of several different objects,
    such as the closing prices of multiple stocks gathered for the same period of
    time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*多变量时间序列*是指在时间轴上有多个变化变量的时间序列。例如，当你第一次通过yfinance库获取特斯拉的股票数据时，它就是一个多变量时间序列，因为它不仅包括股票的收盘价，还包括开盘价、最高价、最低价以及每天的其他数据点。在这种情况下，多变量时间序列追踪的是同一对象——一只股票的多个特征。其他的多变量时间序列可能追踪的是不同对象的相同特征，比如在相同时间段内收集的多只股票的收盘价。'
- en: 'In the following script, you create this second type of a multivariate time
    series, obtaining five days’ worth of stock data for multiple tickers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的脚本中，你创建了第二种类型的多变量时间序列，获取了多个股票代码的五天股价数据：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You first define the `stocks` DataFrame ❶, where you’ll accumulate the closing
    prices for multiple tickers. Then you define a list of tickers ❷ and iterate over
    the list ❸, using the yfinance library to obtain the last five days of data for
    each ticker. Within the loop, you reduce the `hist` DataFrame returned by yfinance
    to a single-column DataFrame containing the closing prices of the given stock,
    along with the corresponding timestamps as the index ❹. You then check if the
    `stocks` DataFrame is empty ❺. If it is, it’s your first time through the loop,
    so you initialize the `stocks` DataFrame with the `hist` DataFrame ❻. On subsequent
    iterations, `stocks` won’t be empty, so you join the current `hist` DataFrame
    to the `stocks` DataFrame, adding another ticker’s closing prices to the dataset
    ❼. The `if/else` structure is needed because you can’t perform a join operation
    on an empty DataFrame.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先定义`stocks`数据框❶，在其中累积多个股票代码的收盘价。然后你定义一个股票代码列表❷，并遍历该列表❸，使用yfinance库获取每个股票代码的最后五天数据。在循环内，你将yfinance返回的`hist`数据框缩减为一个单列数据框，其中包含给定股票的收盘价，并将相应的时间戳作为索引❹。然后你检查`stocks`数据框是否为空❺。如果为空，说明这是你第一次进入循环，因此你用`hist`数据框初始化`stocks`数据框❻。在后续的循环中，`stocks`将不为空，因此你将当前的`hist`数据框与`stocks`数据框连接，将另一个股票的收盘价添加到数据集中❼。需要使用`if/else`结构，因为你不能在空的数据框上执行连接操作。
- en: 'The resulting `stocks` DataFrame will look similar to the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`stocks`数据框将类似于以下内容：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You have a multivariate time series, with the different columns showing the
    closing prices of different stocks, all across the same span of time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你拥有一个多变量时间序列，不同的列显示了不同股票的收盘价，所有数据都覆盖相同的时间跨度。
- en: Processing Multivariate Time Series
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理多变量时间序列
- en: 'Processing multivariate time series is similar to working with single-variable
    time series except that you have to deal with several variables within each row.
    Therefore, your calculations often occur inside a loop iterating over the columns
    in the series. For example, suppose you want to filter the `stocks` DataFrame,
    weeding out the tickers whose prices dropped more than some threshold (say, 3
    percent) below the previous day’s price at least once in the given period. Here
    you iterate over the columns and analyze the data for each ticker to determine
    which stocks should be kept in the DataFrame:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 处理多变量时间序列类似于处理单变量时间序列，不同之处在于你需要处理每一行中的多个变量。因此，你的计算通常是在一个循环中进行，遍历序列中的各个列。例如，假设你想过滤`stocks`数据框，剔除那些股票价格在给定时间段内至少有一天比前一天的价格下降超过某个阈值（比如3%）的股票。在这里，你遍历各列，分析每个股票的数据，决定哪些股票应该保留在数据框中：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: First, you create a list to accumulate the column names you want to keep ❶.
    Then you iterate over the columns of the `stocks` DataFrame ❷, determining whether
    each column contains any values that are more than 3 percent lower than the value
    in the previous row. Specifically, you use the `[]` operator to filter the DataFrame
    and the `shift()` method to compare each day’s closing price to that of the previous
    day. If a column doesn’t contain any values that meet the filtering condition
    (that is, if the filtered column is empty), you append the column name to the
    `stocks_to_keep` list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建一个列表来累积你想保留的列名 ❶。然后，你遍历 `stocks` 数据框的列 ❷，判断每列是否包含任何低于前一行数值 3% 的值。具体而言，你使用
    `[]` 运算符来筛选数据框，并使用 `shift()` 方法将每一天的收盘价与前一天的收盘价进行比较。如果某列没有包含任何满足筛选条件的值（即如果该列为空），你就将列名添加到
    `stocks_to_keep` 列表中。
- en: 'Given the `stocks` DataFrame shown previously, the resulting `stocks_to_keep`
    list will look as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前显示的 `stocks` 数据框，最终的 `stocks_to_keep` 列表将如下所示：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, TSLA and MSFT aren’t in the list, because they contained one
    or more values that fell more than 3 percent below the previous day’s closing
    price. Of course, your own results will vary; you might end up with an empty list
    or a list that includes all the tickers. In those cases, try experimenting with
    the filtering threshold. If the list is empty, try decreasing the threshold from
    0.97 to 0.96 or lower. In contrast, if the list includes all the tickers, try
    increasing the threshold.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，TSLA 和 MSFT 不在列表中，因为它们包含一个或多个值，跌幅超过了前一天收盘价的 3%。当然，你自己的结果可能会有所不同；你可能会得到一个空列表，或者包含所有股票代码的列表。在这种情况下，可以尝试调整筛选阈值。如果列表为空，尝试将阈值从
    0.97 降到 0.96 或更低。相反，如果列表包含所有股票代码，尝试增加阈值。
- en: 'Here you print the `stocks` DataFrame so that it includes only the columns
    from the `stocks_to_keep` list:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你打印 `stocks` 数据框，使其仅包含 `stocks_to_keep` 列表中的列：
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In my case, the output looks like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，输出如下所示：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As expected, the `TSLA` and `MSFT` columns have been filtered out because they
    contain one or more values that exceed the 3 percent threshold of volatility.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，`TSLA` 和 `MSFT` 列已经被筛选掉，因为它们包含一个或多个超过 3% 波动阈值的值。
- en: Analyzing Dependencies Between Variables
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析变量之间的依赖关系
- en: One common task when analyzing multivariate time series is to identify relationships
    between different variables in the dataset. These relationships may or may not
    exist. For example, there’s likely some degree of dependency between a stock’s
    opening and closing prices since on a given day the closing price rarely differs
    from the opening price by more than a few percent. On the other hand, you may
    not find a dependency between the closing prices of two stocks from different
    sectors of the economy.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析多变量时间序列时，一个常见的任务是识别数据集中不同变量之间的关系。这些关系可能存在也可能不存在。例如，股票的开盘价和收盘价之间可能有一定程度的依赖关系，因为在一天的交易中，收盘价通常不会与开盘价相差超过几个百分点。另一方面，可能在不同行业的两只股票的收盘价之间并不存在依赖关系。
- en: 'In this section, we’ll look at some techniques for verifying the existence
    of a relationship between time series variables. To demonstrate, we’ll examine
    whether there’s a dependency between the change in a stock’s price and its sales
    volume. To start with, run the following script to obtain a month’s worth of stock
    data for your analysis:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些验证时间序列变量之间关系的技巧。为了演示，我们将检查股票价格的变化与销售量之间是否存在依赖关系。首先，运行以下脚本以获取一个月的股票数据用于分析：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you’ve already seen, yfinance generates a multivariate time series in the
    form of a DataFrame with many columns. For the purpose of this example, you only
    need two of them: `Close` and `Volume`. Here, you reduce the DataFrame accordingly
    and change the `Close` column’s name to `Price`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经看到的，yfinance 生成了一个多变量时间序列，其形式为具有多列的 DataFrame。为了这个示例，你只需要其中的两列：`Close`
    和 `Volume`。在这里，你根据需要缩减数据框，并将 `Close` 列的名称更改为 `Price`：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To determine if there’s a relationship between the `Price` and `Volume` columns,
    you should calculate the percentage change in each column from day to day. Here
    you calculate the daily percentage change in the `Price` column using `shift(1)`
    and NumPy’s `log()` function, as discussed previously, and store the result in
    a new `priceRise` column:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定`Price`和`Volume`列之间是否存在关系，你应该计算每列从一天到下一天的百分比变化。在这里，你使用`shift(1)`和NumPy的`log()`函数来计算`Price`列的每日百分比变化，如之前所述，并将结果存储在新的`priceRise`列中：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You use the same technique to create a `volumeRise` column, which shows the
    percentage change in volume compared to the previous day:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用相同的方法来创建一个`volumeRise`列，显示与前一天相比的交易量百分比变化：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As noted earlier, the natural logarithm provides a close approximation of the
    percentage change within a range of +/– 20 percent. While some values in the `volumeRise`
    column may well exceed this range, you still can use `log()` here because a high
    degree of accuracy isn’t required in this example; stock market analysis is typically
    more focused on predicting trends than finding exact values.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，自然对数可以在+/-20%的范围内提供接近百分比变化的近似值。虽然`volumeRise`列中的某些值可能超出了这一范围，但你仍然可以在这里使用`log()`，因为在这个示例中不要求非常高的精度；股市分析通常更侧重于预测趋势，而不是找到准确的数值。
- en: 'If you now print the `df` DataFrame, it will look something like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在打印`df`数据框，它大致会是这样：
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If there were a dependency between price and volume, you would expect above-average
    changes in price (that is, increased volatility) to correlate with above-average
    changes in volume. To see if this is the case, you should set some threshold for
    the `priceRise` column and view only those rows where the percentage change in
    price is above that threshold. Looking through the values in the `priceRise` column
    in this particular output, for example, you might choose a 5 percent threshold.
    Another dataset may suggest another threshold, such as 3 or 7 percent. The idea
    is that only a few records should cross the threshold, so as a general rule, the
    more volatile the stock, the higher the threshold should be.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果价格和交易量之间存在依赖关系，你会预期价格的高波动（即增加的波动性）会与交易量的高变化相关。为了检查这种情况，你应该为`priceRise`列设定一个阈值，并只查看那些价格变化超过该阈值的行。例如，查看此输出中特定的`priceRise`列的值时，你可能会选择5%的阈值。另一个数据集可能会建议3%或7%的阈值。关键是，只有少数记录应该超过阈值，因此一般来说，股票波动性越大，阈值应该越高。
- en: 'Here you print just those rows where `priceRise` exceeds the threshold:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你只打印出那些`priceRise`超过阈值的行：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You use the `abs()` function to get the absolute value of a percentage change
    so that, for example, both `0.06` and `-0.06` satisfy the condition specified
    here. Given the sample data shown previously, you end up with the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`abs()`函数来获取百分比变化的绝对值，这样，举例来说，`0.06`和`-0.06`都能满足此处指定的条件。根据之前显示的示例数据，你最终得到如下结果：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, you calculate the average volume change over the entire series:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你计算整个系列的平均交易量变化：
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For this particular series, the result is the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的系列，结果如下：
- en: '[PRE32]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, you calculate the average volume change for just those rows with above-average
    changes in price. If the result is greater than the average volume change across
    the entire series, you’ll know there’s a connection between increased volatility
    and increased volume:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你计算仅针对那些价格变化超出平均水平的行的平均交易量变化。如果结果大于整个系列的平均交易量变化，你就可以知道波动性增加和交易量增加之间存在关系：
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This is what you get for this particular series:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在此系列中获得的内容：
- en: '[PRE34]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As you can see, the average volume change calculated over the filtered series
    is much higher than the average volume change calculated over the entire series.
    This suggests there may be a positive correlation between price volatility and
    sales volume volatility.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在过滤后的系列中计算的平均交易量变化要远高于整个系列的平均交易量变化。这表明价格波动性和销售量波动性之间可能存在正相关关系。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: As you learned in this chapter, a time series is a dataset organized in chronological
    order, where one or more variables change over time. Taking stock market data
    as an example, you looked at some techniques for using pandas to analyze time
    series data in order to derive useful statistics from it. You learned to shift
    data points in a time series in order to calculate changes over time. You also
    learned to perform rolling window calculations, or aggregations within a fixed-size
    time interval that moves across the whole series. Together, these techniques help
    you make judgments about trends in the data. Finally, you looked at methods for
    identifying dependencies between different variables in a multivariate time series.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章中所学到的，时间序列是一种按时间顺序组织的数据集，其中一个或多个变量随时间变化。以股市数据为例，你了解了一些使用pandas分析时间序列数据的技术，以便从中得出有用的统计信息。你学会了如何在时间序列中移动数据点，以便计算随时间的变化。你还学会了执行滚动窗口计算，或在固定时间间隔内进行聚合，该时间间隔会在整个序列中滑动。结合这些技术，你可以对数据中的趋势做出判断。最后，你了解了识别多变量时间序列中不同变量之间依赖关系的方法。
