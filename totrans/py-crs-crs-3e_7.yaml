- en: E
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: E
- en: Troubleshooting Deployments
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除部署
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Deploying an app is tremendously satisfying when it works, especially if you’ve
    never done it before. However, there are many obstacles that can arise in the
    deployment process, and unfortunately, some of these issues can be difficult to
    identify and address. This appendix will help you understand modern approaches
    to deployment and give you specific ways to troubleshoot the deployment process
    when things aren’t working.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序在成功时是非常令人满意的，尤其是如果你以前从未做过。但是，在部署过程中可能会出现许多障碍，不幸的是，这些问题中的一些可能难以识别和解决。本附录将帮助你理解现代部署方法，并在出现问题时提供具体的故障排除方法。
- en: If the additional information in this appendix isn’t enough to help you get
    through the deployment process successfully, see the online resources at [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e);
    the updates there will almost certainly help you carry out a successful deployment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本附录中的额外信息不足以帮助你顺利完成部署过程，请查看[https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e)上的在线资源；那里更新的内容几乎肯定会帮助你成功完成部署。
- en: Understanding Deployments
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解部署
- en: 'When you’re trying to troubleshoot a particular deployment attempt, it’s helpful
    to have a clear understanding of how a typical deployment works. *Deployment*
    refers to the process of taking a project that works on your local system, and
    copying that project to a remote server in a way that allows it to respond to
    requests from any user on the internet. The remote environment differs from a
    typical local system in a number of important ways: it’s probably not the same
    operating system (OS) as the one you’re using, and it’s most likely one of many
    virtual servers on a single physical server.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你试图故障排除特定的部署尝试时，清楚地理解一个典型的部署过程是很有帮助的。*部署*是指将一个在本地系统上正常工作的项目复制到远程服务器的过程，以便它可以响应来自互联网上任何用户的请求。远程环境与典型的本地系统在多个重要方面有所不同：它可能不是你正在使用的相同操作系统（OS），而且它很可能是单一物理服务器上的多个虚拟服务器之一。
- en: 'When you deploy a project, or *push* it to the remote server, the following
    steps need to be taken:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你部署一个项目，或将其*推送*到远程服务器时，需要执行以下步骤：
- en: Create a virtual server on a physical machine at a datacenter.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据中心的物理机器上创建一个虚拟服务器。
- en: Establish a connection between the local system and the remote server.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立本地系统和远程服务器之间的连接。
- en: Copy the project’s code to the remote server.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目的代码复制到远程服务器。
- en: Identify all of the project’s dependencies and install them on the remote server.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定项目的所有依赖项，并将它们安装在远程服务器上。
- en: Set up a database and run any existing migrations.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库并运行现有的迁移。
- en: Copy static files (CSS, JavaScript files, and media files) to a place where
    they can be served efficiently.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将静态文件（CSS、JavaScript 文件和媒体文件）复制到可以高效提供服务的位置。
- en: Start a server to handle incoming requests.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动一个服务器来处理传入的请求。
- en: Start routing incoming requests to the project, once it’s ready to handle requests.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦项目准备好处理请求，开始将传入的请求路由到该项目。
- en: When you consider all that goes into a deployment, it’s no wonder deployments
    often fail. Fortunately, once you gain an understanding of what should be happening,
    you’ll stand a better chance of identifying what went wrong. If you can identify
    what went wrong, you might be able to identify a fix that will make the next deployment
    attempt successful.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑到部署过程中涉及的所有步骤时，部署失败并不令人意外。幸运的是，一旦你理解了部署应该发生的过程，你就更有可能找出出错的地方。如果你能识别出问题所在，或许能够找到一个解决方法，让下一次的部署尝试成功。
- en: You can develop locally on one kind of OS and push to a server running a different
    OS. It’s important to know what kind of system you’re pushing to, because that
    can inform some of your troubleshooting work. At the time of this writing, a basic
    remote server on Platform.sh runs Debian Linux; most remote servers are Linux-based
    systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在一种操作系统上进行本地开发，然后将其推送到运行不同操作系统的服务器上。了解你推送到的系统类型很重要，因为这可以指导你的一些故障排除工作。在本文写作时，Platform.sh上的基础远程服务器运行Debian
    Linux；大多数远程服务器都是基于Linux的系统。
- en: Basic Troubleshooting
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础故障排除
- en: Some troubleshooting steps are specific to each OS, but we’ll get to that in
    a moment. First, let’s consider the steps everyone should try when troubleshooting
    a deployment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些故障排除步骤是特定于每个操作系统的，但我们稍后会讨论这些内容。首先，让我们考虑在故障排除部署时每个人都应该尝试的步骤。
- en: 'Your best resource is the output generated during the attempted push. This
    output can look intimidating; if you’re new to deploying apps, it can look highly
    technical, and there’s usually a lot of it. The good news is you don’t need to
    understand everything in the output. You should have two goals when skimming log
    output: identify any deployment steps that worked, and identify any steps that
    didn’t. If you can do this, you might be able to figure out what to change in
    your project, or in your deployment process, to make your next push successful.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你最好的资源就是在尝试推送时生成的输出。这个输出可能看起来令人畏惧；如果你是应用部署的新手，它可能看起来非常技术化，而且通常会有很多内容。好消息是，你不需要理解输出中的所有内容。你在浏览日志输出时应该有两个目标：识别任何成功的部署步骤，并识别任何失败的步骤。如果你能做到这一点，你也许能够找出需要在项目或部署过程中更改的地方，从而使下一次推送成功。
- en: Follow Onscreen Suggestions
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按照屏幕上的建议操作
- en: 'Sometimes, the platform you’re pushing to will generate a message that has
    a clear suggestion for how to address the issue. For example, here’s the message
    you’ll see if you create a Platform.sh project before initializing a Git repository,
    and then try to push the project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你推送的平台会生成一条消息，给出如何解决问题的明确建议。例如，如果你在初始化 Git 仓库之前创建了一个 Platform.sh 项目，然后尝试推送该项目，你将看到以下消息：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’re trying to push a project, but the local project hasn’t been associated
    with a remote project yet. So, the Platform.sh CLI asks which remote project we
    want to push to ❶. We enter `0`, to select the only project listed. But next,
    we see a `RootNotFoundException` ❷. This happens because Platform.sh looks for
    a *.git* directory when it inspects the local project, to figure out how to connect
    the local project with the remote project. In this case, since there was no *.git*
    directory when the remote project was created, that connection was never established.
    The CLI suggests a fix ❸; it’s telling us that we can specify the remote project
    that should be associated with this local project, using the `project:set-remote`
    command.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在尝试推送一个项目，但本地项目尚未与远程项目关联。所以，Platform.sh CLI 会询问我们想要推送到哪个远程项目❶。我们输入`0`，选择唯一列出的项目。但接下来，我们看到一个`RootNotFoundException`
    ❷。发生这种情况是因为 Platform.sh 在检查本地项目时会查找 *.git* 目录，以便弄清楚如何将本地项目与远程项目连接起来。在这种情况下，由于创建远程项目时没有
    *.git* 目录，因此该连接从未建立。CLI 提供了一个修复建议❸；它告诉我们可以使用 `project:set-remote` 命令指定应与此本地项目关联的远程项目。
- en: 'Let’s try this suggestion:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试这个建议：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous output, the CLI showed the ID of this remote project, `votohz4451jyg`.
    So we run the command that’s suggested, using this ID, and the CLI is able to
    make the connection between the local project and the remote project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的输出中，CLI 显示了该远程项目的 ID，`votohz4451jyg`。所以我们运行了建议的命令，使用这个 ID，CLI 成功地将本地项目与远程项目连接起来。
- en: 'Now let’s try to push the project again:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次尝试推送项目：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This was a successful push; following the onscreen suggestion worked.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一次成功的推送；按照屏幕上的建议操作有效。
- en: You should be careful about running commands that you don’t fully understand.
    However, if you have good reason to believe that a command can do little harm,
    and if you trust the source of the recommendation, it might be reasonable to try
    the suggestions offered by the tools you’re using.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该小心运行你不完全理解的命令。然而，如果你有充分的理由相信某个命令的危害很小，并且你信任推荐的来源，那么尝试使用工具提供的建议可能是合理的。
- en: Read the Log Output
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读日志输出
- en: 'As mentioned earlier, the log output that you see when you run a command like
    `platform push` can be both informative and intimidating. Read through the following
    snippet of log output, taken from a different attempt at using `platform push`,
    and see if you can spot the issue:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，运行类似 `platform push` 的命令时，日志输出既可以提供信息，也可能让人感到畏惧。请阅读以下日志输出片段，这是另一次使用 `platform
    push` 的尝试，看看你能否找出问题所在：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When a deployment attempt fails, a good strategy is to look through the log
    output and see if you can spot anything that looks like warnings or errors. Warnings
    are fairly common; they’re often messages about upcoming changes in a project’s
    dependencies, to help developers address issues before they cause actual failures.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当部署尝试失败时，一个好的策略是查看日志输出，看看是否能发现任何类似警告或错误的信息。警告是相当常见的；它们通常是关于项目依赖项即将发生变化的消息，帮助开发人员在问题导致实际故障之前解决问题。
- en: A successful push may have warnings, but it shouldn’t have any errors. In this
    case, Platform.sh couldn’t find a way to install the requirement `gunicorrn`.
    This is a typo in the *requirements_remote.txt* file, which was supposed to include
    `gunicorn` (with one *r*). It’s not always easy to spot the root issue in log
    output, especially when the problem causes a bunch of cascading errors and warnings.
    Just like when reading a traceback on your local system, it’s a good idea to look
    closely at the first few errors that are listed, and also the last few errors.
    Most of the errors in between tend to be internal packages complaining that something
    went wrong, and passing messages about the error to other internal packages. The
    actual error we can fix is usually one of the first or last errors listed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的推送可能会有警告，但不应包含任何错误。在这种情况下，Platform.sh 无法找到安装要求 `gunicorrn` 的方法。这是 *requirements_remote.txt*
    文件中的一个拼写错误，原本应该包含 `gunicorn`（少一个 *r*）。在日志输出中，通常不容易直接找到根本问题，尤其是当问题导致一系列级联错误和警告时。就像在本地系统上查看回溯信息一样，最好仔细查看列出的前几个错误和最后几个错误。中间的大多数错误往往是内部包在抱怨某些东西出了问题，并将错误信息传递给其他内部包。我们通常可以解决的实际错误，通常是列出的第一个或最后一个错误。
- en: Sometimes, you’ll be able to spot the error, and other times, you’ll have no
    idea what the output means. It’s certainly worth a try, and using log output to
    successfully diagnose an error is a tremendously satisfying feeling. As you spend
    more time looking through log output, you’ll get better at identifying the information
    that’s most meaningful to you.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可以很容易发现错误，但有时候，你根本不明白输出的含义。这绝对值得一试，利用日志输出成功诊断错误是一种非常满足的感觉。当你花更多时间查看日志输出时，你会变得更擅长识别对你最有意义的信息。
- en: OS-Specific Troubleshooting
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统特定的故障排除
- en: You can develop on any operating system you like and push to any host you like.
    The tools for pushing projects have developed enough that they’ll modify your
    project as needed to run correctly on the remote system. However, there are some
    OS-specific issues that can arise.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任何你喜欢的操作系统上进行开发，并推送到任何你喜欢的主机上。推送项目的工具已经足够成熟，它们会根据需要修改你的项目，以确保能够在远程系统上正确运行。然而，仍然可能会出现一些特定操作系统的问题。
- en: 'In the Platform.sh deployment process, one of the most likely sources of difficulties
    is installing the CLI. Here’s the command to do so:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Platform.sh 的部署过程中，最可能遇到的困难之一是安装 CLI。下面是安装命令：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The command starts with `curl`, a tool that lets you request remote resources,
    accessed through a URL, within a terminal. Here, it’s being used to download the
    CLI installer from a Platform.sh server. The `-fsS` section of the command is
    a set of flags that modify how curl runs. The `f` flag tells curl to suppress
    most error messages, so the CLI installer can handle them instead of reporting
    them all to you. The `s` flag tells curl to run silently; it lets the CLI installer
    decide what information to show in the terminal. The `S` flag tells curl to show
    an error message if the overall command fails. The `| php` at the end of the command
    tells your system to run the downloaded installer file using a PHP interpreter,
    because the Platform.sh CLI is written in PHP.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令以 `curl` 开头，`curl` 是一个让你在终端中通过 URL 请求远程资源的工具。这里，它用于从 Platform.sh 服务器下载 CLI
    安装程序。命令中的 `-fsS` 部分是一个标志集，用来修改 `curl` 的运行方式。`f` 标志告诉 `curl` 抑制大多数错误消息，这样 CLI 安装程序可以处理这些错误，而不是把所有错误报告给你。`s`
    标志告诉 `curl` 静默运行；它允许 CLI 安装程序决定在终端中显示什么信息。`S` 标志告诉 `curl` 如果整体命令失败，则显示错误消息。命令结尾的
    `| php` 告诉系统使用 PHP 解释器运行下载的安装程序文件，因为 Platform.sh 的 CLI 是用 PHP 编写的。
- en: This means your system needs curl and PHP in order to install the Platform.sh
    CLI. To use the CLI, you’ll also need Git, and a terminal that can run Bash commands.
    *Bash* is a language that’s available in most server environments. Most modern
    systems have plenty of room for multiple tools like this to be installed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的系统需要安装 `curl` 和 PHP 才能安装 Platform.sh CLI。要使用该 CLI，你还需要 Git 和能够运行 Bash
    命令的终端。*Bash* 是一种大多数服务器环境中都可以使用的语言。大多数现代系统都有足够的空间安装这些工具。
- en: The following sections will help you address these requirements for your OS.
    If you don’t already have Git installed, see the instructions for installing Git
    on page 484 in Appendix D and then go to the section here that’s applicable to
    your OS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将帮助你解决适用于你操作系统的相关需求。如果你尚未安装 Git，请参考附录 D 中第 484 页的 Git 安装说明，然后查看适用于你操作系统的部分。
- en: Deploying from Windows
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Windows 部署
- en: Windows has seen a resurgence in popularity with programmers in recent years.
    Windows has integrated many different elements of other operating systems, providing
    users with a number of options for how to do local development work and interact
    with remote systems.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，Windows 在程序员中重新获得了广泛的关注。Windows 集成了许多其他操作系统的不同元素，提供了多种方式让用户进行本地开发工作并与远程系统交互。
- en: One of the most significant difficulties in deploying from Windows is that the
    core Windows operating system is not the same as what a Linux-based remote server
    uses. A base Windows system has a different set of tools and languages than a
    base Linux system, so to carry out deployment work from Windows, you’ll need to
    choose how to integrate Linux-based tool sets into your local environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Windows 部署的最大困难之一是，核心的 Windows 操作系统与 Linux 基础的远程服务器所使用的系统不同。一个基础的 Windows
    系统拥有与基础 Linux 系统不同的工具和语言，因此，要从 Windows 执行部署工作，你需要选择如何将基于 Linux 的工具集集成到本地环境中。
- en: Windows Subsystem for Linux
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows Subsystem for Linux
- en: One popular approach is to use *Windows Subsystem for Linux* (*WSL*), an environment
    that allows Linux to run directly on Windows. If you have WSL set up, using the
    Platform.sh CLI on Windows becomes as easy as using it on Linux. The CLI won’t
    know it’s running on Windows; it will just see the Linux environment you’re using
    it in.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一种流行的方法是使用 *Windows Subsystem for Linux* (*WSL*)，它是一个允许 Linux 在 Windows 上直接运行的环境。如果你已经设置好
    WSL，那么在 Windows 上使用 Platform.sh CLI 就和在 Linux 上一样简单。CLI 并不会知道它是在 Windows 上运行，它只会看到你正在使用的
    Linux 环境。
- en: 'Setting up WSL is a two-step process: you first install WSL, and then choose
    a Linux distribution to install into the WSL environment. Setting up a WSL environment
    is more than can be described here; if you’re interested in this approach and
    don’t already have it set up, see the documentation at [https://docs.microsoft.com/en-us/windows/wsl/about](https://docs.microsoft.com/en-us/windows/wsl/about).
    Once you have WSL set up, you can follow the instructions in the Linux section
    of this appendix to continue your deployment work.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 WSL 是一个两步过程：首先安装 WSL，然后选择一个 Linux 发行版并将其安装到 WSL 环境中。设置 WSL 环境的过程较为复杂，无法在这里详细描述；如果你对这种方法感兴趣并且尚未设置，可以查看
    [https://docs.microsoft.com/en-us/windows/wsl/about](https://docs.microsoft.com/en-us/windows/wsl/about)
    上的文档。一旦你设置好了 WSL，就可以按照本附录中 Linux 部分的说明继续部署工作。
- en: Git Bash
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Git Bash
- en: Another approach to building a local environment that you can deploy from uses
    *Git Bash*, a terminal environment that’s compatible with Bash but runs on Windows.
    Git Bash is installed along with Git when you use the installer from [https://git-scm.com](https://git-scm.com).
    This approach can work, but it isn’t as streamlined as WSL. In this approach,
    you’ll have to use a Windows terminal for some steps and a Git Bash terminal for
    others.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种构建本地环境的方法是使用 *Git Bash*，它是一个与 Bash 兼容的终端环境，但可以在 Windows 上运行。当你从 [https://git-scm.com](https://git-scm.com)
    使用安装程序时，Git Bash 会和 Git 一起安装。这个方法是可行的，但没有 WSL 那么简化。在这种方法中，你需要在一些步骤中使用 Windows
    终端，而在其他步骤中则使用 Git Bash 终端。
- en: First you’ll need to install PHP. You can do this with *XAMPP*, a package that
    bundles PHP with a few other developer-focused tools. Go to [https://apachefriends.org](https://apachefriends.org)
    and click the button to download XAMPP for Windows. Open the installer and run
    it; if you see a warning about User Account Control (UAC) restrictions, click
    **OK**. Accept all of the installer’s defaults.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装 PHP。你可以通过 *XAMPP* 来完成这一点，它是一个将 PHP 和其他一些开发者工具捆绑在一起的套件。访问 [https://apachefriends.org](https://apachefriends.org)，点击按钮下载适用于
    Windows 的 XAMPP。打开安装程序并运行它；如果看到有关用户帐户控制（UAC）限制的警告，点击 **OK**。接受所有安装程序的默认设置。
- en: When the installer finishes running, you’ll need to add PHP to your system’s
    path; this will tell Windows where to look when you want to run PHP. In the Start
    menu, enter `path` and click **Edit the System Environment Variables**; click
    the button labeled **Environment Variables**. You should see the variable `Path`
    highlighted; click **Edit** under this pane. Click **New** to add a new path to
    the current list of paths. Assuming you kept the default settings when running
    the XAMPP installer, add `C:\xampp\php` in the box that appears, then click **OK**.
    When you’re finished, close all of the system dialogs that are still open.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装程序运行完成后，你需要将 PHP 添加到系统的路径中；这将告诉 Windows 在你想运行 PHP 时该去哪里查找。在开始菜单中输入`path`，然后点击**编辑系统环境变量**；点击标记为**环境变量**的按钮。你应该看到变量`Path`被高亮显示；在此面板下点击**编辑**。点击**新建**，将一个新的路径添加到当前的路径列表中。假设你在运行
    XAMPP 安装程序时保持了默认设置，在出现的框中添加`C:\xampp\php`，然后点击**确定**。完成后，关闭所有仍然打开的系统对话框。
- en: 'With these requirements taken care of, you can install the Platform.sh CLI.
    You’ll need to use a Windows terminal with administrator privileges; enter `command`
    into the Start menu, and under the Command Prompt app, click **Run as administrator**.
    In the terminal that appears, enter the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理好这些需求之后，你可以安装 Platform.sh CLI。你需要使用具有管理员权限的 Windows 终端；在开始菜单中输入`command`，然后在命令提示符应用下，点击**以管理员身份运行**。在弹出的终端中，输入以下命令：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will install the Platform.sh CLI, as described earlier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装 Platform.sh CLI，正如前面所描述的那样。
- en: Finally, you’ll work in Git Bash. To open a Git Bash terminal, go to the Start
    menu and search for `git bash`. Click the **Git Bash app** that appears; you should
    see a terminal window open. You can use traditional Linux-based commands like
    `ls` in this terminal, as well as Windows-based commands like `dir`. To make sure
    the installation was successful, issue the `platform list` command. You should
    see a list of all the commands in the Platform.sh CLI. From this point forward,
    carry out all of your deployment work using the Platform.sh CLI inside a Git Bash
    terminal window.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将在 Git Bash 中进行操作。要打开 Git Bash 终端，进入开始菜单并搜索`git bash`。点击出现的**Git Bash 应用程序**，你应该会看到一个终端窗口打开。在这个终端中，你可以使用传统的基于
    Linux 的命令，如`ls`，以及基于 Windows 的命令，如`dir`。为了确保安装成功，执行`platform list`命令。你应该看到 Platform.sh
    CLI 中所有命令的列表。从此以后，所有的部署工作都将在 Git Bash 终端窗口内使用 Platform.sh CLI 完成。
- en: Deploying from macOS
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 macOS 部署
- en: The macOS operating system is not based on Linux, but they were both developed
    on similar principles. What this means, practically, is that a lot of the commands
    and workflows that you use on macOS will work in a remote server environment as
    well. You might need to install some developer-focused resources in order to have
    all of these tools available in your local macOS environment. If you get a prompt
    to install the *command line developer tools* at any point in your work, click
    **Install** to approve the installation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 操作系统并不是基于 Linux，但它们都遵循相似的原则开发。实际上，这意味着你在 macOS 上使用的许多命令和工作流程也可以在远程服务器环境中使用。你可能需要安装一些面向开发者的资源，才能在本地的
    macOS 环境中使用这些工具。如果在工作中任何时候出现提示要求安装*命令行开发工具*，点击**安装**以批准安装。
- en: The most likely difficulty when installing the Platform.sh CLI is making sure
    PHP is installed. If you see a message that the `php` command is not found, you’ll
    need to install PHP. One of the easiest ways to install PHP is by using the *Homebrew*
    package manager, which facilitates the installation of a wide variety of packages
    that programmers depend on. If you don’t already have Homebrew installed, visit
    [https://brew.sh](https://brew.sh) and follow the instructions to install it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Platform.sh CLI 时最可能遇到的困难是确保 PHP 已安装。如果你看到提示`php`命令未找到，你需要安装 PHP。安装 PHP 的一种最简单方法是使用*Homebrew*包管理器，它简化了程序员所依赖的各种软件包的安装。如果你还没有安装
    Homebrew，可以访问[https://brew.sh](https://brew.sh)并按照指示安装。
- en: 'Once Homebrew is installed, use the following command to install PHP:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Homebrew 安装完成，使用以下命令来安装 PHP：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will take a while to run, but once it has completed, you should be able
    to successfully install the Platform.sh CLI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一段时间才能完成，但完成后，你应该能够成功安装 Platform.sh CLI。
- en: Deploying from Linux
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Linux 部署
- en: 'Because most server environments are Linux-based, you should have very little
    difficulty installing and using the Platform.sh CLI. If you try to install the
    CLI on a system with a fresh installation of Ubuntu, it will tell you exactly
    which packages you need:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大多数服务器环境都是基于Linux的，所以你应该很容易安装和使用Platform.sh CLI。如果你尝试在新安装的Ubuntu系统上安装CLI，它会告诉你需要哪些软件包：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The actual output will have more information about a few other packages that
    would work, plus some version information. The following command will install
    curl and PHP:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 实际输出会提供更多关于其他一些可用软件包的信息，并包含一些版本信息。以下命令将安装curl和PHP：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After running this command, the Platform.sh CLI installation command should
    run successfully. Since your local environment is quite similar to most Linux-based
    hosting environments, much of what you learn about working in your terminal will
    carry over to working in a remote environment as well.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，Platform.sh CLI安装命令应该会成功运行。由于你的本地环境与大多数基于Linux的托管环境非常相似，因此你在终端中学习的许多内容也将适用于远程环境。
- en: Other Deployment Approaches
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他部署方法
- en: 'If Platform.sh doesn’t work for you, or if you want to try a different approach,
    there are many hosting platforms to choose from. Some work similarly to the process
    described in Chapter 20, and some have a much different approach to carrying out
    the steps described at the beginning of this appendix:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Platform.sh不适合你，或者你想尝试不同的方法，市面上有许多托管平台可以选择。有些平台的工作方式与第20章中描述的过程类似，而有些则采用与本附录开头描述的步骤完全不同的方法：
- en: Platform.sh allows you to use a browser to carry out the steps we used the CLI
    for. If you like browser-based interfaces better than terminal-based workflows,
    you may prefer this approach.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Platform.sh允许你使用浏览器来执行我们使用CLI进行的步骤。如果你更喜欢基于浏览器的界面，而不是终端工作流，可能会更喜欢这种方法。
- en: There are a number of other hosting providers that offer both CLI- and browser-based
    approaches. Some of these providers offer terminals within their browser, so you
    don’t have to install anything on your system.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有许多其他托管服务提供商，提供CLI和基于浏览器的方法。有些提供商在其浏览器内提供终端，因此你无需在系统上安装任何东西。
- en: Some providers allow you to push your project to a remote code hosting site
    like GitHub, and then connect your GitHub repository to the hosting site. The
    host then pulls your code from GitHub, instead of requiring you to push your code
    from your local system directly to the host. Platform.sh supports this kind of
    workflow as well.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些提供商允许你将项目推送到像GitHub这样的远程代码托管站点，然后将你的GitHub仓库连接到托管站点。主机会从GitHub拉取代码，而不是要求你将代码从本地系统直接推送到主机。Platform.sh也支持这种工作流程。
- en: Some providers offer an array of services that you select from, in order to
    put together an infrastructure that works for your project. This typically requires
    you to have a deeper understanding of the deployment process, and what a remote
    server needs in order to serve a project. These hosts include Amazon Web Services
    (AWS) and Microsoft’s Azure platform. It can be much harder to track your costs
    in these kinds of platforms, because each service can accrue charges independently.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些提供商提供一系列服务供你选择，以便组建适合你项目的基础设施。这通常需要你对部署过程有更深入的了解，以及远程服务器为服务项目所需的内容。这些主机包括Amazon
    Web Services（AWS）和微软的Azure平台。在这些平台上，追踪费用可能更困难，因为每项服务都可能独立产生费用。
- en: Many people host their projects on a virtual private server (VPS). In this approach,
    you rent a virtual server that acts just like a remote computer, log in to the
    server, install the software needed to run your project, copy your code over,
    set the right connections, and allow your server to start accepting requests.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很多人将他们的项目托管在虚拟私人服务器（VPS）上。在这种方法中，你租用一个虚拟服务器，它就像一台远程计算机，你可以登录到服务器，安装运行项目所需的软件，复制代码，设置正确的连接，并允许服务器开始接收请求。
- en: New hosting platforms and approaches appear on a regular basis; find one that
    looks appealing to you, and invest the time to learn that provider’s deployment
    process. Maintain your project long enough so that you get to know what works
    well with your provider’s approach and what doesn’t. No hosting platform is going
    to be perfect; you’ll need to make an ongoing judgement call about whether the
    provider you’re currently using is good enough for your use case.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 新的托管平台和方法定期出现；找到一个对你有吸引力的，并投入时间学习该提供商的部署流程。保持你的项目足够长的时间，直到你了解什么方法适合你的提供商，什么方法不适合。没有任何托管平台是完美的；你需要持续评估你目前使用的提供商是否足够适合你的使用场景。
- en: I’ll offer one last word of caution about choosing a deployment platform and
    an overall approach to deployment. Some people will enthusiastically steer you
    toward overly complex deployment approaches and services that are meant to make
    your project highly reliable and capable of serving millions of users simultaneously.
    Many programmers spend lots of time, money, and energy building out a complex
    deployment strategy, only to find that hardly anyone is using their project. Most
    Django projects can be set up on a small hosting plan and tuned to serve thousands
    of requests per minute. If your project is getting anything less than this level
    of traffic, take the time to configure your deployment to work well on a minimal
    platform before investing in infrastructure that’s meant for some of the largest
    sites in the world.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我将对选择部署平台和整体部署方法给出最后的警告。有些人会热衷于引导你选择过于复杂的部署方法和服务，这些方法和服务旨在让你的项目具有高度可靠性，并能够同时为数百万用户提供服务。许多程序员花费大量时间、金钱和精力来构建复杂的部署策略，结果却发现几乎没有人使用他们的项目。大多数Django项目可以在一个小型托管计划上设置，并调整到每分钟处理成千上万的请求。如果你的项目的流量低于这个水平，在投资那些适用于全球最大网站的基础设施之前，先花时间配置一个能在最小平台上顺利运行的部署。
- en: Deployment is incredibly challenging at times, but just as satisfying when your
    live project works well. Enjoy the challenge, and ask for help when you need it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 部署有时极具挑战性，但当你的实时项目运作顺利时，也同样令人满足。享受这个挑战，遇到困难时，及时寻求帮助。
