["```py\n  from functools import reduce\n\n➊ from eqs import Matrix, Vector as EqVector\n  from .node import StrNode\n  from .bar import StrBar\n\n  class Structure:\n   ➋ __DOF_PER_NODE = 2\n\n     def __init__(self, nodes: [StrNode], bars: [StrBar]):\n        self.__bars = bars\n        self.__nodes = nodes\n\n      ➌ self.__dofs_dict = None\n        self.__system_matrix: Matrix = None\n        self.__system_vector: EqVector = None\n        self.__global_displacements: EqVector = None\n\n    --snip--\n```", "```py\nfrom <module> import <identifier> as <alias>\n```", "```py\nclass Structure:\n    --snip--\n\n    def solve_structure(self):\n        self.__assign_degrees_of_freedom()\n        self.__solve_system_of_equations()\n        return self.__make_structure_solution()\n```", "```py\nclass Structure:\n    --snip--\n\n    def __assign_degrees_of_freedom(self):\n        self.__dofs_dict = {}\n        for i, node in enumerate(self.__nodes):\n            self.__dofs_dict[node.id] = (2 * i, 2 * i + 1)\n```", "```py\ndofs_dict = {\n    1: (0, 1),\n    2: (2, 3),\n    3: (4, 5)\n}\n```", "```py\nfrom functools import reduce\n\nfrom eqs import Matrix, Vector as EqVector, cholesky_solve\nfrom .node import StrNode\nfrom .bar import StrBar\n\nclass Structure:\n    --snip--\n\n    def __solve_system_of_equations(self):\n        size = self.nodes_count * self.__DOF_PER_NODE\n        self.__assemble_system_matrix(size)\n        self.__assemble_system_vector(size)\n        self.__apply_external_constraints()\n        self.__global_displacements = cholesky_solve(\n            self.__system_matrix,\n            self.__system_vector\n        )\n```", "```py\nclass Structure:\n    --snip--\n\n    def __assemble_system_matrix(self, size: int):\n        matrix = Matrix(size, size)\n\n        for bar in self.__bars:\n         ➊ bar_matrix = bar.global_stiffness_matrix()\n         ➋ dofs = self.__bar_dofs(bar)\n\n           for row, row_dof in enumerate(dofs):\n               for col, col_dof in enumerate(dofs):\n                   matrix.add_to_value(\n                    ➌ bar_matrix.value_at(row, col),\n                      row_dof,\n                      col_dof\n                   )\n\n     ➍ self.__system_matrix = matrix\n\n    def __bar_dofs(self, bar: StrBar):\n        start_dofs = self.__dofs_dict[bar.start_node.id]\n        end_dofs = self.__dofs_dict[bar.end_node.id]\n        return start_dofs + end_dofs\n```", "```py\nclass Structure:\n    --snip--\n\n    def __assemble_system_vector(self, size: int):\n        vector = EqVector(size)\n\n        for node in self.__nodes:\n            net_load = node.net_load\n            (dof_x, dof_y) = self.__dofs_dict[node.id]\n\n            vector.add_to_value(net_load.u, dof_x)\n            vector.add_to_value(net_load.v, dof_y)\n\n        self.__system_vector = vector\n```", "```py\nclass Structure:\n    --snip--\n\n    def __apply_external_constraints(self):\n        for node in self.__nodes:\n         ➊ (dof_x, dof_y) = self.__dofs_dict[node.id]\n\n         ➋ if node.dx_constrained:\n                self.__system_matrix.set_identity_row(dof_x)\n                self.__system_matrix.set_identity_col(dof_x)\n                self.__system_vector.set_value(0, dof_x)\n\n         ➌ if node.dy_constrained:\n                self.__system_matrix.set_identity_row(dof_y)\n                self.__system_matrix.set_identity_col(dof_y)\n                self.__system_vector.set_value(0, dof_y)\n```", "```py\nfrom functools import reduce\n\nfrom eqs import Matrix, Vector as EqVector, cholesky_solve\nfrom geom2d import Vector\nfrom structures.solution.bar import StrBarSolution\nfrom structures.solution.node import StrNodeSolution\nfrom structures.solution.structure import StructureSolution\nfrom .bar import StrBar\nfrom .node import StrNode\n\nclass Structure:\n    --snip--\n\n    def __make_structure_solution(self) -> StructureSolution:\n        nodes = [\n         ➊ self.__node_to_solution(node)\n            for node in self.__nodes\n        ]\n\n     ➋ nodes_dict = {}\n        for node in nodes:\n            nodes_dict[node.id] = node\n        bars = [\n         ➌ StrBarSolution(\n                bar,\n                nodes_dict[bar.start_node.id],\n                nodes_dict[bar.end_node.id]\n            )\n            for bar in self.__bars\n        ]\n\n     ➍ return StructureSolution(nodes, bars)\n\n    def __node_to_solution(self, node: StrNode) -> StrNodeSolution:\n     ➎ (dof_x, dof_y) = self.__dofs_dict[node.id]\n     ➏ disp = Vector(\n            self.__global_displacements.value_at(dof_x),\n            self.__global_displacements.value_at(dof_y)\n        )\n     ➐ return StrNodeSolution(node, disp)\n```", "```py\nfrom functools import reduce\n\nfrom eqs import Matrix, Vector as EqVector, cholesky_solve\nfrom geom2d import Vector\nfrom structures.solution.bar import StrBarSolution\nfrom structures.solution.node import StrNodeSolution\nfrom structures.solution.structure import StructureSolution\nfrom .bar import StrBar\nfrom .node import StrNode\n\nclass Structure:\n    __DOF_PER_NODE = 2\n\n    def __init__(self, nodes: [StrNode], bars: [StrBar]):\n        self.__bars = bars\n        self.__nodes = nodes\n\n        self.__dofs_dict = None\n        self.__system_matrix: Matrix = None\n        self.__system_vector: EqVector = None\n        self.__global_displacements: EqVector = None\n\n    @property\n    def nodes_count(self):\n        return len(self.__nodes)\n\n    @property\n    def bars_count(self):\n        return len(self.__bars)\n\n    @property\n    def loads_count(self):\n        return reduce(\n            lambda count, node: count + node.loads_count,\n            self.__nodes,\n            0\n        )\n\n    def solve_structure(self) -> StructureSolution:\n        self.__assign_degrees_of_freedom()\n        self.__solve_system_of_equations()\n        return self.__make_structure_solution()\n\n    def __assign_degrees_of_freedom(self):\n        self.__dofs_dict = {}\n        for i, node in enumerate(self.__nodes):\n            self.__dofs_dict[node.id] = (2 * i, 2 * i + 1)\n\n    def __solve_system_of_equations(self):\n        size = self.nodes_count * self.__DOF_PER_NODE\n        self.__assemble_system_matrix(size)\n        self.__assemble_system_vector(size)\n        self.__apply_external_constraints()\n        self.__global_displacements = cholesky_solve(\n            self.__system_matrix,\n            self.__system_vector\n        )\n\n    def __assemble_system_matrix(self, size: int):\n        matrix = Matrix(size, size)\n\n        for bar in self.__bars:\n            bar_matrix = bar.global_stiffness_matrix()\n            dofs = self.__bar_dofs(bar)\n\n            for row, row_dof in enumerate(dofs):\n                for col, col_dof in enumerate(dofs):\n                    matrix.add_to_value(\n                        bar_matrix.value_at(row, col),\n                        row_dof,\n                        col_dof\n                    )\n\n        self.__system_matrix = matrix\n\n    def __bar_dofs(self, bar: StrBar):\n        start_dofs = self.__dofs_dict[bar.start_node.id]\n        end_dofs = self.__dofs_dict[bar.end_node.id]\n        return start_dofs + end_dofs\n\n    def __assemble_system_vector(self, size: int):\n        vector = EqVector(size)\n\n        for node in self.__nodes:\n            net_load = node.net_load\n            (dof_x, dof_y) = self.__dofs_dict[node.id]\n\n            vector.add_to_value(net_load.u, dof_x)\n            vector.add_to_value(net_load.v, dof_y)\n\n        self.__system_vector = vector\n\n    def __apply_external_constraints(self):\n        for node in self.__nodes:\n            (dof_x, dof_y) = self.__dofs_dict[node.id]\n\n            if node.dx_constrained:\n                self.__system_matrix.set_identity_row(dof_x)\n                self.__system_matrix.set_identity_col(dof_x)\n                self.__system_vector.set_value(0, dof_x)\n\n            if node.dy_constrained:\n                self.__system_matrix.set_identity_row(dof_y)\n                self.__system_matrix.set_identity_col(dof_y)\n                self.__system_vector.set_value(0, dof_y)\n\n    def __make_structure_solution(self) -> StructureSolution:\n        nodes = [\n            self.__node_to_solution(node)\n            for node in self.__nodes\n        ]\n\n        nodes_dict = {}\n        for node in nodes:\n            nodes_dict[node.id] = node\n\n        bars = [\n            StrBarSolution(\n                bar,\n                nodes_dict[bar.start_node.id],\n                nodes_dict[bar.end_node.id]\n            )\n            for bar in self.__bars\n        ]\n\n        return StructureSolution(nodes, bars)\n\n    def __node_to_solution(self, node: StrNode) -> StrNodeSolution:\n        (dof_x, dof_y) = self.__dofs_dict[node.id]\n        disp = Vector(\n            self.__global_displacements.value_at(dof_x),\n            self.__global_displacements.value_at(dof_y)\n        )\n        return StrNodeSolution(node, disp)\n```", "```py\ndef bounds_rect(self, margin, scale=1):\n    d_pos = [\n        node.displaced_pos_scaled(scale)\n        for node in self.nodes\n    ]\n    return make_rect_containing_with_margin(d_pos, margin)\n```", "```py\n>>> from unittest.mock import Mock\n>>> mock = Mock()\n>>> mock()\n<Mock name='mock()' id='4548720456'>\n\n>>> mock.some_method('foo', 23)\n<Mock name='mock.some_method()' id='4436512848'>\n```", "```py\n>>> mock.some_method.assert_called()\n>>> mock.some_method.assert_called_once()\n>>> mock.some_method.assert_called_with('foo', 23)\n```", "```py\n>>> mock.some_method.assert_called_with('bar', 577)\n```", "```py\nTraceback (most recent call last):\n--snip--\nAssertionError: Expected call: some_method('bar', 577)\nActual call: some_method('foo', 123)\n```", "```py\n>>> mock.foo.assert_called()\n```", "```py\nTraceback (most recent call last):\n--snip--\nAssertionError: Expected 'foo' to have been called.\n```", "```py\n>>> mock.assert_called()\n```", "```py\n>>> from unittest.mock import Mock\n>>> from geom2d import Vector\n>>> vector_mock = Mock(spec=Vector)\n>>> isinstance(vector_mock, Vector)\nTrue\n```", "```py\n>>> vector_mock.rotated_radians(0.25)\n<Mock name='mock.rotated_radians()' id='4498122344'>\n```", "```py\n>>> vector_mock.defrangulate()\n```", "```py\nTraceback (most recent call last):\n--snip--\nAttributeError: Mock object has no attribute 'defrangulate'\n```", "```py\n>>> vector_mock.rotated_radians.return_value = Vector(0, 0)\n>>> vector_mock.rotated_radians(0.25)\n<geom2d.vector.Vector object at 0x10bbaa4a8>\n```", "```py\n>>> vector_mock.cosine.side_effect = ValueError\n>>> vector_mock.cosine()\nTraceback (most recent call last):\n--snip--\nValueError\n```", "```py\n>>> vector_mock.cosine.side_effect = ValueError('Oops')\n>>> vector_mock.cosine()\nTraceback (most recent call last):\n--snip--\nValueError: Oops\n```", "```py\n>>> vector_mock.scaled_by.side_effect = lambda factor: factor\n>>> vector_mock.scaled_by(45)\n45\n```", "```py\n>>> from unittest.mock import DEFAULT\n>>> def side_effect(factor):\n...    print(f'mock called with factor: {factor}')\n...    return DEFAULT\n\n>>> vector_mock.scaled_by.side_effect = side_effect\n>>> vector_mock.scaled_by.return_value = Vector(1, 2)\n\n>>> vector_mock.scaled_by(2)\nmock called with factor: 2\n<geom2d.vector.Vector object at 0x10c4a7f28>\n```", "```py\nfrom unittest.mock import patch\n\n@patch('geom2d.circles.make_circle_from_points')\ndef test_something(make_circle_mock):\n    make_circle_mock(1, 2, 3)\n    make_circle_mock.assert_called_with(1, 2, 3)\n```", "```py\ndef bounds_rect(self, margin, scale=1):\n    d_pos = [\n        node.displaced_pos_scaled(scale)\n        for node in self.nodes\n    ]\n    return make_rect_containing_with_margin(d_pos, margin)\n```", "```py\nimport unittest\nfrom unittest.mock import patch, Mock\n\nfrom geom2d import Point\nfrom structures.solution.node import StrNodeSolution\nfrom structures.solution.structure import StructureSolution\n\nclass StructureSolutionTest(unittest.TestCase):\n\n    p_one = Point(2, 3)\n    p_two = Point(5, 1)\n\n    def setUp(self):\n        self.n_one = Mock(spec=StrNodeSolution)\n        self.n_one.displaced_pos_scaled.return_value = self.p_one\n        self.n_two = Mock(spec=StrNodeSolution)\n        self.n_two.displaced_pos_scaled.return_value = self.p_two\n```", "```py\nclass StructureSolutionTest(unittest.TestCase):\n   --snip--\n\n    def test_node_displaced_scaled_positions_called(self):\n        solution = StructureSolution([self.n_one, self.n_two], [])\n        solution.bounds_rect(margin=10, scale=4)\n\n        self.n_one.displaced_pos_scaled.assert_called_once_with(4)\n        self.n_two.displaced_pos_scaled.assert_called_once_with(4)\n```", "```py\ndef bounds_rect(self, margin, scale=1):\n    d_pos = [\n        # wrong! used 'margin' instead of 'scale'\n        node.displaced_pos_scaled(margin)\n        for node in self.nodes\n    ]\n    # wrong! used 'scale' instead of 'margin'\n    return make_rect_containing_with_margin(d_pos, scale)\n```", "```py\nExpected call: make_rect_containing_with_margin([\n    <geom2d.point.Point object at 0x10575a630>,\n    <geom2d.point.Point object at 0x10575a6a0>], 10)\nActual call: make_rect_containing_with_margin([\n    <geom2d.point.Point object at 0x10575a630>,\n    <geom2d.point.Point object at 0x10575a6a0>], 4)\n```", "```py\nclass StructureSolutionTest(unittest.TestCase):\n   --snip--\n\n    @patch('structures.solution.structure.make_rect_containing_with_margin')\n    def test_make_rect_called(self, make_rect_mock):\n        solution = StructureSolution([self.n_one, self.n_two], [])\n        solution.bounds_rect(margin=10, scale=4)\n\n        make_rect_mock.assert_called_once_with(\n            [self.p_one, self.p_two],\n            10\n        )\n```", "```py\n$ python3 -m unittest structures/tests/structure_solution_test.py\n```", "```py\nimport unittest\nfrom unittest.mock import patch, Mock\n\nfrom geom2d import Point\nfrom structures.solution.node import StrNodeSolution\nfrom structures.solution.structure import StructureSolution\n\nclass StructureSolutionTest(unittest.TestCase):\n\n    p_one = Point(2, 3)\n    p_two = Point(5, 1)\n\n    def setUp(self):\n        self.n_one = Mock(spec=StrNodeSolution)\n        self.n_one.displaced_pos_scaled.return_value = self.p_one\n        self.n_two = Mock(spec=StrNodeSolution)\n        self.n_two.displaced_pos_scaled.return_value = self.p_two\n\n    def test_node_displaced_scaled_positions_called(self):\n        solution = StructureSolution([self.n_one, self.n_two], [])\n        solution.bounds_rect(margin=10, scale=4)\n\n        self.n_one.displaced_pos_scaled.assert_called_once_with(4)\n        self.n_two.displaced_pos_scaled.assert_called_once_with(4)\n\n    @patch('structures.solution.structure.make_rect_containing_with_margin')\n    def test_make_rect_called(self, make_rect_mock):\n        solution = StructureSolution([self.n_one, self.n_two], [])\n        solution.bounds_rect(margin=10, scale=4)\n\n        make_rect_mock.assert_called_once_with(\n            [self.p_one, self.p_two],\n            10\n        )\n```", "```py\nsolution = StructureSolution([self.n_one, self.n_two], [])\nsolution.bounds_rect(margin=10, scale=4)\n```", "```py\nimport unittest\nfrom unittest.mock import patch\n\nfrom eqs import Matrix\nfrom geom2d import Point, Vector\nfrom eqs.vector import Vector as EqVector\nfrom structures.model.node import StrNode\nfrom structures.model.bar import StrBar\nfrom structures.model.structure import Structure\n\nclass StructureTest(unittest.TestCase):\n\n    def setUp(self):\n        section = 5\n        young = 10\n        load = Vector(500, -1000)\n\n        self.n_1 = StrNode(1, Point(0, 0))\n        self.n_2 = StrNode(2, Point(0, 200))\n        self.n_3 = StrNode(3, Point(400, 200), [load])\n        self.b_12 = StrBar(1, self.n_1, self.n_2, section, young)\n        self.b_23 = StrBar(2, self.n_2, self.n_3, section, young)\n        self.b_13 = StrBar(3, self.n_1, self.n_3, section, young)\n\n     ➊ self.structure = Structure(\n            [self.n_1, self.n_2, self.n_3],\n            [self.b_12, self.b_23, self.b_13]\n        )\n\n    def test_nodes_count(self):\n     ➋ self.assertEqual(3,  self.structure.nodes_count)\n\n    def test_bars_count(self):\n     ➌ self.assertEqual(3, self.structure.bars_count)\n\n    def test_loads_count(self):\n     ➍ self.assertEqual(1, self.structure.loads_count)\n```", "```py\nclass StructureTest(unittest.TestCase):\n    --snip--\n\n ➊ @patch('structures.model.structure.cholesky_solve')\n    def test_assemble_system_matrix(self, cholesky_mock):\n        eal3 = 0.1118033989\n        c2_eal3 = .8 * eal3\n        s2_eal3 = .2 * eal3\n        cs_eal3 = .4 * eal3\n     ➋ expected_mat = Matrix(6, 6).set_data([\n            c2_eal3, cs_eal3, 0, 0, -c2_eal3, -cs_eal3,\n            cs_eal3, .25 + s2_eal3, 0, -.25, -cs_eal3, -s2_eal3,\n            0, 0, .125, 0, -.125, 0,\n            0, -.25, 0, .25, 0, 0,\n            -c2_eal3, -cs_eal3, -.125, 0, .125 + c2_eal3, cs_eal3,\n            -cs_eal3, -s2_eal3, 0, 0, cs_eal3, s2_eal3\n        ])\n\n        self.structure.solve_structure()\n     ➌ [actual_mat, _] = cholesky_mock.call_args[0]\n\n     ➍ cholesky_mock.assert_called_once()\n     ➎ self.assertEqual(expected_mat, actual_mat)\n```", "```py\nclass StructureTest(unittest.TestCase):\n    --snip--\n\n ➊ @patch('structures.model.structure.cholesky_solve')\n    def test_system_matrix_constraints(self, cholesky_mock):\n     ➋ self._set_external_constraints()\n\n        eal3 = 0.1118033989\n        c2_eal3 = .8 * eal3\n        s2_eal3 = .2 * eal3\n        cs_eal3 = .4 * eal3\n     ➌ expected_mat = Matrix(6, 6).set_data([\n            1, 0, 0, 0, 0, 0,\n            0, 1, 0, 0, 0, 0,\n            0, 0, 1, 0, 0, 0,\n            0, 0, 0, 1, 0, 0,\n            0, 0, 0, 0, .125 + c2_eal3, cs_eal3,\n            0, 0, 0, 0, cs_eal3, s2_eal3\n        ])\n\n        self.structure.solve_structure()\n        [actual_mat, _] = cholesky_mock.call_args[0]\n\n        cholesky_mock.assert_called_once()\n     ➍ self.assertEqual(expected_mat, actual_mat)\n```", "```py\nclass StructureTest(unittest.TestCase):\n    --snip--\n\n    def _set_external_constraints(self):\n        self.n_1.dx_constrained = True\n        self.n_1.dy_constrained = True\n        self.n_2.dx_constrained = True\n        self.n_2.dy_constrained = True\n```", "```py\nclass StructureTest(unittest.TestCase):\n    --snip--\n\n ➊ @patch('structures.model.structure.cholesky_solve')\n    def test_assemble_system_vector(self, cholesky_mock):\n     ➋ expected_vec = EqVector(6).set_data([\n            0, 0, 0, 0, 500, -1000\n        ])\n\n        self.structure.solve_structure()\n     ➌ [_, actual_vec] = cholesky_mock.call_args[0]\n\n     ➍ self.assertEqual(expected_vec, actual_vec)\n```", "```py\n$ python3 -m unittest structures/tests/structure_test.py\n```", "```py\nRan 6 tests in 0.004s\n\nOK\n```"]