- en: Part II
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Projects
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You now know enough about Python to start building interactive
    and meaningful projects. Creating your own projects will teach you new skills
    and solidify your understanding of the concepts introduced in Part I.
  prefs: []
  type: TYPE_NORMAL
- en: Part II contains three kinds of projects, and you can choose to do any or all
    of these projects in whichever order you like. Here’s a brief description of each
    project to help you decide which to dig into first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alien Invasion: Making a Game with Python'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Alien Invasion project (**Chapters 12**, **13**, and **14**), you’ll
    use the Pygame package to develop a 2D game. The goal of the game is to shoot
    down a fleet of aliens as they drop down the screen, in levels that increase in
    speed and difficulty. At the end of the project, you’ll have learned skills that
    will enable you to develop your own 2D games in Pygame.
  prefs: []
  type: TYPE_NORMAL
- en: Data Visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Data Visualization projects start in **Chapter 15**, where you’ll learn
    to generate data and create a series of functional and beautiful visualizations
    of that data using Matplotlib and Plotly. **Chapter 16** teaches you to access
    data from online sources and feed it into a visualization package to create plots
    of weather data and a map of global earthquake activity. Finally, **Chapter 17**
    shows you how to write a program to automatically download and visualize data.
    Learning to make visualizations allows you to explore the field of data science,
    which is one of the highest-demand areas of programming today.
  prefs: []
  type: TYPE_NORMAL
- en: Web Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Web Application project (**Chapters 18**, **19**, and **20**), you’ll
    use the Django package to create a simple web application that allows users to
    keep a journal about different topics they’ve been learning about. Users will
    create an account with a username and password, enter a topic, and then make entries
    about what they’re learning. You’ll also deploy your app to a remote server so
    anyone in the world can access it.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this project, you’ll be able to start building your own simple
    web applications, and you’ll be ready to delve into more thorough resources on
    building applications with Django.
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Ship That Fires Bullets
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s build a game called *Alien Invasion*! We’ll use Pygame, a collection of
    fun, powerful Python modules that manage graphics, animation, and even sound,
    making it easier for you to build sophisticated games. With Pygame handling tasks
    like drawing images to the screen, you can focus on the higher-level logic of
    game dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll set up Pygame and then create a rocket ship that moves
    right and left and fires bullets in response to player input. In the next two
    chapters, you’ll create a fleet of aliens to destroy, and then continue to refine
    the game by setting limits on the number of ships you can use and adding a scoreboard.
  prefs: []
  type: TYPE_NORMAL
- en: While building this game, you’ll also learn how to manage large projects that
    span multiple files. We’ll refactor a lot of code and manage file contents to
    organize the project and make the code efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Making games is an ideal way to have fun while learning a language. It’s deeply
    satisfying to play a game you wrote, and writing a simple game will teach you
    a lot about how professionals develop games. As you work through this chapter,
    enter and run the code to identify how each code block contributes to overall
    gameplay. Experiment with different values and settings to better understand how
    to refine interactions in your games.
  prefs: []
  type: TYPE_NORMAL
- en: Planning Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re building a large project, it’s important to prepare a plan before
    you begin to write code. Your plan will keep you focused and make it more likely
    that you’ll complete the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s write a description of the general gameplay. Although the following description
    doesn’t cover every detail of *Alien Invasion*, it provides a clear idea of how
    to start building the game:'
  prefs: []
  type: TYPE_NORMAL
- en: In *Alien Invasion*, the player controls a rocket ship that appears at the bottom
    center of the screen. The player can move the ship right and left using the arrow
    keys and shoot bullets using the spacebar. When the game begins, a fleet of aliens
    fills the sky and moves across and down the screen. The player shoots and destroys
    the aliens. If the player destroys all the aliens, a new fleet appears that moves
    faster than the previous fleet. If any alien hits the player’s ship or reaches
    the bottom of the screen, the player loses a ship. If the player loses three ships,
    the game ends.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For the first development phase, we’ll make a ship that can move right and left
    when the player presses the arrow keys and fire bullets when the player presses
    the spacebar. After setting up this behavior, we can create the aliens and refine
    the gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you begin coding, install Pygame. We’ll do this the same way we installed
    pytest in Chapter 11: with pip. If you skipped Chapter 11 or need a refresher
    on pip, see “Installing pytest with pip” on page 210.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Pygame, enter the following command at a terminal prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you use a command other than `python` to run programs or start a terminal
    session, such as `python3`, make sure you use that command instead.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Game Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll begin building the game by creating an empty Pygame window. Later, we’ll
    draw the game elements, such as the ship and the aliens, on this window. We’ll
    also make our game respond to user input, set the background color, and load a
    ship image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Pygame Window and Responding to User Input
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll make an empty Pygame window by creating a class to represent the game.
    In your text editor, create a new file and save it as *alien_invasion.py*; then
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, we import the `sys` and `pygame` modules. The `pygame` module contains
    the functionality we need to make a game. We’ll use tools in the `sys` module
    to exit the game when the player quits.
  prefs: []
  type: TYPE_NORMAL
- en: '*Alien Invasion* starts as a class called `AlienInvasion`. In the `__init__()`
    method, the `pygame.init()` function initializes the background settings that
    Pygame needs to work properly ❶. Then we call `pygame.display.set_mode()` to create
    a display window ❷, on which we’ll draw all the game’s graphical elements. The
    argument `(1200, 800)` is a tuple that defines the dimensions of the game window,
    which will be 1,200 pixels wide by 800 pixels high. (You can adjust these values
    depending on your display size.) We assign this display window to the attribute
    `self.screen`, so it will be available in all methods in the class.'
  prefs: []
  type: TYPE_NORMAL
- en: The object we assigned to `self.screen` is called a surface. A *surface* in
    Pygame is a part of the screen where a game element can be displayed. Each element
    in the game, like an alien or a ship, is its own surface. The surface returned
    by `display.set_mode()` represents the entire game window. When we activate the
    game’s animation loop, this surface will be redrawn on every pass through the
    loop, so it can be updated with any changes triggered by user input.
  prefs: []
  type: TYPE_NORMAL
- en: The game is controlled by the `run_game()` method. This method contains a `while`
    loop ❸ that runs continually. The `while` loop contains an event loop and code
    that manages screen updates. An *event* is an action that the user performs while
    playing the game, such as pressing a key or moving the mouse. To make our program
    respond to events, we write an *event loop* to *listen* for events and perform
    appropriate tasks depending on the kinds of events that occur. The `for` loop
    ❹ nested inside the `while` loop is an event loop.
  prefs: []
  type: TYPE_NORMAL
- en: To access the events that Pygame detects, we’ll use the `pygame.event.get()`
    function. This function returns a list of events that have taken place since the
    last time this function was called. Any keyboard or mouse event will cause this
    `for` loop to run. Inside the loop, we’ll write a series of `if` statements to
    detect and respond to specific events. For example, when the player clicks the
    game window’s close button, a `pygame.QUIT` event is detected and we call `sys.exit()`
    to exit the game ❺.
  prefs: []
  type: TYPE_NORMAL
- en: The call to `pygame.display.flip()` ❻ tells Pygame to make the most recently
    drawn screen visible. In this case, it simply draws an empty screen on each pass
    through the `while` loop, erasing the old screen so only the new screen is visible.
    When we move the game elements around, `pygame.display.flip()` continually updates
    the display to show the new positions of game elements and hide the old ones,
    creating the illusion of smooth movement.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the file, we create an instance of the game and then call `run_game()`.
    We place `run_game()` in an `if` block that only runs if the file is called directly.
    When you run this *alien_invasion.py* file, you should see an empty Pygame window.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the Frame Rate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ideally, games should run at the same speed, or *frame rate*, on all systems.
    Controlling the frame rate of a game that can run on multiple systems is a complex
    issue, but Pygame offers a relatively simple way to accomplish this goal. We’ll
    make a clock, and ensure the clock ticks once on each pass through the main loop.
    Anytime the loop processes faster than the rate we define, Pygame will calculate
    the correct amount of time to pause so that the game runs at a consistent rate.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll define the clock in the `__init__()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After initializing `pygame`, we create an instance of the class `Clock`, from
    the `pygame.time` module. Then we’ll make the clock tick at the end of the `while`
    loop in `run_game()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `tick()` method takes one argument: the frame rate for the game. Here I’m
    using a value of 60, so Pygame will do its best to make the loop run exactly 60
    times per second.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Background Color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pygame creates a black screen by default, but that’s boring. Let’s set a different
    background color. We’ll do this at the end of the `__init__()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Colors in Pygame are specified as RGB colors: a mix of red, green, and blue.
    Each color value can range from 0 to 255\. The color value `(255, 0, 0)` is red,
    `(0, 255, 0)` is green, and `(0, 0, 255)` is blue. You can mix different RGB values
    to create up to 16 million colors. The color value `(230, 230, 230)` mixes equal
    amounts of red, blue, and green, which produces a light gray background color.
    We assign this color to `self.bg_color` ❶.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We fill the screen with the background color using the `fill()` method ❷, which
    acts on a surface and takes only one argument: a color.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Settings Class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each time we introduce new functionality into the game, we’ll typically create
    some new settings as well. Instead of adding settings throughout the code, let’s
    write a module called `settings` that contains a class called `Settings` to store
    all these values in one place. This approach allows us to work with just one `settings`
    object anytime we need to access an individual setting. This also makes it easier
    to modify the game’s appearance and behavior as our project grows. To modify the
    game, we’ll change the relevant values in *settings.py*, which we’ll create next,
    instead of searching for different settings throughout the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named *settings.py* inside your *alien_invasion* folder,
    and add this initial `Settings` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**settings.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To make an instance of `Settings` in the project and use it to access our settings,
    we need to modify *alien_invasion.py* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We import `Settings` into the main program file. Then we create an instance
    of `Settings` and assign it to `self.settings` ❶, after making the call to `pygame.init()`.
    When we create a screen ❷, we use the `screen_width` and `screen_height` attributes
    of `self.settings`, and then we use `self.settings` to access the background color
    when filling the screen ❸ as well.
  prefs: []
  type: TYPE_NORMAL
- en: When you run *alien_invasion.py* now you won’t yet see any changes, because
    all we’ve done is move the settings we were already using elsewhere. Now we’re
    ready to start adding new elements to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Ship Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s add the ship to our game. To draw the player’s ship on the screen, we’ll
    load an image and then use the Pygame `blit()` method to draw the image.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re choosing artwork for your games, be sure to pay attention to licensing.
    The safest and cheapest way to start is to use freely licensed graphics that you
    can use and modify, from a website like [https://opengameart.org](https://opengameart.org).
  prefs: []
  type: TYPE_NORMAL
- en: You can use almost any type of image file in your game, but it’s easiest when
    you use a bitmap (*.bmp*) file because Pygame loads bitmaps by default. Although
    you can configure Pygame to use other file types, some file types depend on certain
    image libraries that must be installed on your computer. Most images you’ll find
    are in *.jpg* or *.png* formats, but you can convert them to bitmaps using tools
    like Photoshop, GIMP, and Paint.
  prefs: []
  type: TYPE_NORMAL
- en: Pay particular attention to the background color in your chosen image. Try to
    find a file with a transparent or solid background that you can replace with any
    background color, using an image editor. Your games will look best if the image’s
    background color matches your game’s background color. Alternatively, you can
    match your game’s background to the image’s background.
  prefs: []
  type: TYPE_NORMAL
- en: For *Alien Invasion*, you can use the file *ship.bmp* ([Figure 12-1](#figure12-1)),
    which is available in this book’s resources at [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e).
    The file’s background color matches the settings we’re using in this project.
    Make a folder called *images* inside your main *alien_invasion* project folder.
    Save the file *ship.bmp* in the *images* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f12001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-1: The ship for *Alien Invasion*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Ship Class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After choosing an image for the ship, we need to display it on the screen.
    To use our ship, we’ll create a new `ship` module that will contain the class
    `Ship`. This class will manage most of the behavior of the player’s ship:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ship.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Pygame is efficient because it lets you treat all game elements like rectangles
    (*rects*), even if they’re not exactly shaped like rectangles. Treating an element
    as a rectangle is efficient because rectangles are simple geometric shapes. When
    Pygame needs to figure out whether two game elements have collided, for example,
    it can do this more quickly if it treats each object as a rectangle. This approach
    usually works well enough that no one playing the game will notice that we’re
    not working with the exact shape of each game element. We’ll treat the ship and
    the screen as rectangles in this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We import the `pygame` module before defining the class. The `__init__()` method
    of `Ship` takes two parameters: the `self` reference and a reference to the current
    instance of the `AlienInvasion` class. This will give `Ship` access to all the
    game resources defined in `AlienInvasion`. We then assign the screen to an attribute
    of `Ship` ❶, so we can access it easily in all the methods in this class. We access
    the screen’s `rect` attribute using the `get_rect()` method and assign it to `self.screen_rect`
    ❷. Doing so allows us to place the ship in the correct location on the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: To load the image, we call `pygame.image.load()` ❸ and give it the location
    of our ship image. This function returns a surface representing the ship, which
    we assign to `self.image`. When the image is loaded, we call `get_rect()` to access
    the ship surface’s `rect` attribute so we can later use it to place the ship.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re working with a `rect` object, you can use the *x*- and *y*-coordinates
    of the top, bottom, left, and right edges of the rectangle, as well as the center,
    to place the object. You can set any of these values to establish the current
    position of the `rect`. When you’re centering a game element, work with the `center`,
    `centerx`, or `centery` attributes of a `rect`. When you’re working at an edge
    of the screen, work with the `top`, `bottom`, `left`, or `right` attributes. There
    are also attributes that combine these properties, such as `midbottom`, `midtop`,
    `midleft`, and `midright`. When you’re adjusting the horizontal or vertical placement
    of the `rect`, you can just use the `x` and `y` attributes, which are the *x*-
    and *y*-coordinates of its top-left corner. These attributes spare you from having
    to do calculations that game developers formerly had to do manually, and you’ll
    use them often.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll position the ship at the bottom center of the screen. To do so, make the
    value of `self.rect.midbottom` match the `midbottom` attribute of the screen’s
    `rect` ❹. Pygame uses these `rect` attributes to position the ship image so it’s
    centered horizontally and aligned with the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we define the `blitme()` method ❺, which draws the image to the screen
    at the position specified by `self.rect`.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the Ship to the Screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let’s update *alien_invasion.py* so it creates a ship and calls the ship’s
    `blitme()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We import `Ship` and then make an instance of `Ship` after the screen has been
    created ❶. The call to `Ship()` requires one argument: an instance of `AlienInvasion`.
    The `self` argument here refers to the current instance of `AlienInvasion`. This
    is the parameter that gives `Ship` access to the game’s resources, such as the
    `screen` object. We assign this `Ship` instance to `self.ship`.'
  prefs: []
  type: TYPE_NORMAL
- en: After filling the background, we draw the ship on the screen by calling `ship.blitme()`,
    so the ship appears on top of the background ❷.
  prefs: []
  type: TYPE_NORMAL
- en: When you run *alien_invasion.py* now, you should see an empty game screen with
    the rocket ship sitting at the bottom center, as shown in [Figure 12-2](#figure12-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f12002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-2: *Alien Invasion* with the ship at the bottom center of the screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refactoring: The _check_events() and _update_screen() Methods'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In large projects, you’ll often refactor code you’ve written before adding more
    code. Refactoring simplifies the structure of the code you’ve already written,
    making it easier to build on. In this section, we’ll break the `run_game()` method,
    which is getting lengthy, into two helper methods. A *helper method* does work
    inside a class but isn’t meant to be used by code outside the class. In Python,
    a single leading underscore indicates a helper method.
  prefs: []
  type: TYPE_NORMAL
- en: The _check_events() Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll move the code that manages events to a separate method called `_check_events()`.
    This will simplify `run_game()` and isolate the event management loop. Isolating
    the event loop allows you to manage events separately from other aspects of the
    game, such as updating the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the `AlienInvasion` class with the new `_check_events()` method, which
    only affects the code in `run_game()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We make a new `_check_events()` method ❷ and move the lines that check whether
    the player has clicked to close the window into this new method.
  prefs: []
  type: TYPE_NORMAL
- en: To call a method from within a class, use dot notation with the variable `self`
    and the name of the method ❶. We call the method from inside the `while` loop
    in `run_game()`.
  prefs: []
  type: TYPE_NORMAL
- en: The _update_screen() Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To further simplify `run_game()`, we’ll move the code for updating the screen
    to a separate method called `_update_screen()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We moved the code that draws the background and the ship and flips the screen
    to `_update_screen()`. Now the body of the main loop in `run_game()` is much simpler.
    It’s easy to see that we’re looking for new events, updating the screen, and ticking
    the clock on each pass through the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve already built a number of games, you’ll probably start out by breaking
    your code into methods like these. But if you’ve never tackled a project like
    this, you probably won’t know exactly how to structure your code at first. This
    approach gives you an idea of a realistic development process: you start out writing
    your code as simply as possible, and then refactor it as your project becomes
    more complex.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve restructured the code to make it easier to add to, we can work
    on the dynamic aspects of the game!
  prefs: []
  type: TYPE_NORMAL
- en: Piloting the Ship
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll give the player the ability to move the ship right and left. We’ll
    write code that responds when the player presses the right or left arrow key.
    We’ll focus first on movement to the right, and then we’ll apply the same principles
    to control movement to the left. As we add this code, you’ll learn how to control
    the movement of images on the screen and respond to user input.
  prefs: []
  type: TYPE_NORMAL
- en: Responding to a Keypress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever the player presses a key, that keypress is registered in Pygame as
    an event. Each event is picked up by the `pygame.event.get()` method. We need
    to specify in our `_check_events()` method what kinds of events we want the game
    to check for. Each keypress is registered as a `KEYDOWN` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Pygame detects a `KEYDOWN` event, we need to check whether the key that
    was pressed is one that triggers a certain action. For example, if the player
    presses the right arrow key, we want to increase the ship’s `rect.x` value to
    move the ship to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Inside `_check_events()` we add an `elif` block to the event loop, to respond
    when Pygame detects a `KEYDOWN` event ❶. We check whether the key pressed, `event.key`,
    is the right arrow key ❷. The right arrow key is represented by `pygame.K_RIGHT`.
    If the right arrow key was pressed, we move the ship to the right by increasing
    the value of `self.ship.rect.x` by 1 ❸.
  prefs: []
  type: TYPE_NORMAL
- en: When you run *alien_invasion.py* now, the ship should move to the right one
    pixel every time you press the right arrow key. That’s a start, but it’s not an
    efficient way to control the ship. Let’s improve this control by allowing continuous
    movement.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing Continuous Movement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the player holds down the right arrow key, we want the ship to continue
    moving right until the player releases the key. We’ll have the game detect a `pygame.KEYUP`
    event so we’ll know when the right arrow key is released; then we’ll use the `KEYDOWN`
    and `KEYUP` events together with a flag called `moving_right` to implement continuous
    motion.
  prefs: []
  type: TYPE_NORMAL
- en: When the `moving_right` flag is `False`, the ship will be motionless. When the
    player presses the right arrow key, we’ll set the flag to `True`, and when the
    player releases the key, we’ll set the flag to `False` again.
  prefs: []
  type: TYPE_NORMAL
- en: The `Ship` class controls all attributes of the ship, so we’ll give it an attribute
    called `moving_right` and an `update()` method to check the status of the `moving_right`
    flag. The `update()` method will change the position of the ship if the flag is
    set to `True`. We’ll call this method once on each pass through the `while` loop
    to update the position of the ship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the changes to `Ship`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ship.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We add a `self.moving_right` attribute in the `__init__()` method and set it
    to `False` initially ❶. Then we add `update()`, which moves the ship right if
    the flag is `True` ❷. The `update()` method will be called from outside the class,
    so it’s not considered a helper method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to modify `_check_events()` so that `moving_right` is set to `True`
    when the right arrow key is pressed and `False` when the key is released:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we modify how the game responds when the player presses the right arrow
    key: instead of changing the ship’s position directly, we merely set `moving_right`
    to `True` ❶. Then we add a new `elif` block, which responds to `KEYUP` events
    ❷. When the player releases the right arrow key (`K_RIGHT`), we set `moving_right`
    to `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we modify the `while` loop in `run_game()` so it calls the ship’s `update()`
    method on each pass through the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The ship’s position will be updated after we’ve checked for keyboard events
    and before we update the screen. This allows the ship’s position to be updated
    in response to player input and ensures the updated position will be used when
    drawing the ship to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: When you run *alien_invasion.py* and hold down the right arrow key, the ship
    should move continuously to the right until you release the key.
  prefs: []
  type: TYPE_NORMAL
- en: Moving Both Left and Right
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the ship can move continuously to the right, adding movement to the
    left is straightforward. Again, we’ll modify the `Ship` class and the `_check_events()`
    method. Here are the relevant changes to `__init__()` and `update()` in `Ship`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ship.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In `__init__()`, we add a `self.moving_left` flag. In `update()`, we use two
    separate `if` blocks, rather than an `elif`, to allow the ship’s `rect.x` value
    to be increased and then decreased when both arrow keys are held down. This results
    in the ship standing still. If we used `elif` for motion to the left, the right
    arrow key would always have priority. Using two `if` blocks makes the movements
    more accurate when the player might momentarily hold down both keys when changing
    directions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have to make two additions to `_check_events()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If a `KEYDOWN` event occurs for the `K_LEFT` key, we set `moving_left` to `True`.
    If a `KEYUP` event occurs for the `K_LEFT` key, we set `moving_left` to `False`.
    We can use `elif` blocks here because each event is connected to only one key.
    If the player presses both keys at once, two separate events will be detected.
  prefs: []
  type: TYPE_NORMAL
- en: When you run *alien_invasion.py* now, you should be able to move the ship continuously
    to the right and left. If you hold down both keys, the ship should stop moving.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll further refine the ship’s movement. Let’s adjust the ship’s speed
    and limit how far the ship can move so it can’t disappear off the sides of the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Ship’s Speed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, the ship moves one pixel per cycle through the `while` loop, but
    we can take finer control of the ship’s speed by adding a `ship_speed` attribute
    to the `Settings` class. We’ll use this attribute to determine how far to move
    the ship on each pass through the loop. Here’s the new attribute in *settings.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**settings.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We set the initial value of `ship_speed` to `1.5`. When the ship moves now,
    its position is adjusted by 1.5 pixels (rather than 1 pixel) on each pass through
    the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re using a float for the speed setting to give us finer control of the ship’s
    speed when we increase the tempo of the game later on. However, `rect` attributes
    such as `x` store only integer values, so we need to make some modifications to
    `Ship`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ship.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We create a `settings` attribute for `Ship`, so we can use it in `update()`
    ❶. Because we’re adjusting the position of the ship by fractions of a pixel, we
    need to assign the position to a variable that can have a float assigned to it.
    You can use a float to set an attribute of a `rect`, but the `rect` will only
    keep the integer portion of that value. To keep track of the ship’s position accurately,
    we define a new `self.x` ❷. We use the `float()` function to convert the value
    of `self.rect.x` to a float and assign this value to `self.x`.
  prefs: []
  type: TYPE_NORMAL
- en: Now when we change the ship’s position in `update()`, the value of `self.x`
    is adjusted by the amount stored in `settings.ship_speed` ❸. After `self.x` has
    been updated, we use the new value to update `self.rect.x`, which controls the
    position of the ship ❹. Only the integer portion of `self.x` will be assigned
    to `self.rect.x`, but that’s fine for displaying the ship.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can change the value of `ship_speed`, and any value greater than 1 will
    make the ship move faster. This will help make the ship respond quickly enough
    to shoot down aliens, and it will let us change the tempo of the game as the player
    progresses in gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting the Ship’s Range
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point, the ship will disappear off either edge of the screen if you
    hold down an arrow key long enough. Let’s correct this so the ship stops moving
    when it reaches the screen’s edge. We do this by modifying the `update()` method
    in `Ship`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ship.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This code checks the position of the ship before changing the value of `self.x`.
    The code `self.rect.right` returns the *x*-coordinate of the right edge of the
    ship’s `rect`. If this value is less than the value returned by `self.screen_rect.right`,
    the ship hasn’t reached the right edge of the screen ❶. The same goes for the
    left edge: if the value of the left side of the `rect` is greater than 0, the
    ship hasn’t reached the left edge of the screen ❷. This ensures the ship is within
    these bounds before adjusting the value of `self.x`.'
  prefs: []
  type: TYPE_NORMAL
- en: When you run *alien_invasion.py* now, the ship should stop moving at either
    edge of the screen. This is pretty cool; all we’ve done is add a conditional test
    in an `if` statement, but it feels like the ship hits a wall or force field at
    either edge of the screen!
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring _check_events()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `_check_events()` method will increase in length as we continue to develop
    the game, so let’s break `_check_events()` into two separate methods: one that
    handles `KEYDOWN` events and another that handles `KEYUP` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We make two new helper methods: `_check_keydown_events()` and `_check_keyup_events()`.
    Each needs a `self` parameter and an `event` parameter. The bodies of these two
    methods are copied from `_check_events()`, and we’ve replaced the old code with
    calls to the new methods. The `_check_events()` method is simpler now with this
    cleaner code structure, which will make it easier to develop further responses
    to player input.'
  prefs: []
  type: TYPE_NORMAL
- en: Pressing Q to Quit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we’re responding to keypresses efficiently, we can add another way
    to quit the game. It gets tedious to click the X at the top of the game window
    to end the game every time you test a new feature, so we’ll add a keyboard shortcut
    to end the game when the player presses Q:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In `_check_keydown_events()`, we add a new block that ends the game when the
    player presses Q. Now, when testing, you can press Q to close the game instead
    of using your cursor to close the window.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Game in Fullscreen Mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pygame has a fullscreen mode that you might like better than running the game
    in a regular window. Some games look better in fullscreen mode, and on some systems,
    the game may perform better overall in fullscreen mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the game in fullscreen mode, make the following changes in `__init__()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alien_invasion.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When creating the screen surface, we pass a size of `(0, 0)` and the parameter
    `pygame.FULLSCREEN` ❶. This tells Pygame to figure out a window size that will
    fill the screen. Because we don’t know the width and height of the screen ahead
    of time, we update these settings after the screen is created ❷. We use the `width`
    and `height` attributes of the screen’s `rect` to update the `settings` object.
  prefs: []
  type: TYPE_NORMAL
- en: If you like how the game looks or behaves in fullscreen mode, keep these settings.
    If you liked the game better in its own window, you can revert back to the original
    approach where we set a specific screen size for the game.
  prefs: []
  type: TYPE_NORMAL
- en: A Quick Recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next section, we’ll add the ability to shoot bullets, which involves
    adding a new file called *bullet.py* and making some modifications to some of
    the files we’re already using. Right now, we have three files containing a number
    of classes and methods. To be clear about how the project is organized, let’s
    review each of these files before adding more functionality.
  prefs: []
  type: TYPE_NORMAL
- en: alien_invasion.py
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main file, *alien_invasion.py*, contains the `AlienInvasion` class. This
    class creates a number of important attributes used throughout the game: the settings
    are assigned to `settings`, the main display surface is assigned to `screen`,
    and a `ship` instance is created in this file as well. The main loop of the game,
    a `while` loop, is also stored in this module. The `while` loop calls `_check_events()`,
    `ship.update()`, and `_update_screen()`. It also ticks the clock on each pass
    through the loop.'
  prefs: []
  type: TYPE_NORMAL
- en: The `_check_events()` method detects relevant events, such as keypresses and
    releases, and processes each of these types of events through the methods `_check_keydown_events()`
    and `_check_keyup_events()`. For now, these methods manage the ship’s movement.
    The `AlienInvasion` class also contains `_update_screen()`, which redraws the
    screen on each pass through the main loop.
  prefs: []
  type: TYPE_NORMAL
- en: The *alien_invasion.py* file is the only file you need to run when you want
    to play *Alien Invasion*. The other files, *settings.py* and *ship.py*, contain
    code that is imported into this file.
  prefs: []
  type: TYPE_NORMAL
- en: settings.py
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *settings.py* file contains the `Settings` class. This class only has an
    `__init__()` method, which initializes attributes controlling the game’s appearance
    and the ship’s speed.
  prefs: []
  type: TYPE_NORMAL
- en: ship.py
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *ship.py* file contains the `Ship` class. The `Ship` class has an `__init__()`
    method, an `update()` method to manage the ship’s position, and a `blitme()` method
    to draw the ship to the screen. The image of the ship is stored in *ship.bmp*,
    which is in the *images* folder.
  prefs: []
  type: TYPE_NORMAL
- en: Shooting Bullets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s add the ability to shoot bullets. We’ll write code that fires a bullet,
    which is represented by a small rectangle, when the player presses the spacebar.
    Bullets will then travel straight up the screen until they disappear off the top
    of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Bullet Settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the end of the `__init__()` method, we’ll update *settings.py* to include
    the values we’ll need for a new `Bullet` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**settings.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: These settings create dark gray bullets with a width of `3` pixels and a height
    of `15` pixels. The bullets will travel slightly faster than the ship.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Bullet Class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now create a *bullet.py* file to store our `Bullet` class. Here’s the first
    part of *bullet.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bullet.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `Bullet` class inherits from `Sprite`, which we import from the `pygame.sprite`
    module. When you use sprites, you can group related elements in your game and
    act on all the grouped elements at once. To create a bullet instance, `__init__()`
    needs the current instance of `AlienInvasion`, and we call ``super() to inherit
    properly from `Sprite`. We also set attributes for the screen and settings objects,
    and for the bullet’s color.``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25] def update(self):     """Move the bullet up the screen."""     # Update
    the exact position of the bullet. ❶     self.y -= self.settings.bullet_speed     #
    Update the rect position. ❷     self.rect.y = self.y  def draw_bullet(self):     """Draw
    the bullet to the screen.""" ❸     pygame.draw.rect(self.screen, self.color, self.rect)
    [PRE26] *--snip--* from ship import Ship from bullet import Bullet [PRE27]  def
    __init__(self):   *--snip--*  self.ship = Ship(self)   self.bullets = pygame.sprite.Group()
    [PRE28]  def run_game(self):  """Start the main loop for the game."""  while True:  self._check_events()  self.ship.update()   self.bullets.update()  self._update_screen()  self.clock.tick(60)
    [PRE29]  def _check_keydown_events(self, event):   *--snip--*  elif event.key
    == pygame.K_q:  sys.exit() ❶         elif event.key == pygame.K_SPACE:             self._fire_bullet()   def
    _check_keyup_events(self, event):   *--snip--*      def _fire_bullet(self):         """Create
    a new bullet and add it to the bullets group.""" ❷         new_bullet = Bullet(self)
    ❸         self.bullets.add(new_bullet)   def _update_screen(self):  """Update
    images on the screen, and flip to the new screen."""  self.screen.fill(self.settings.bg_color)
    ❹       for bullet in self.bullets.sprites():             bullet.draw_bullet()  self.ship.blitme()   pygame.display.flip()
    *--snip--* [PRE30]  def run_game(self):  """Start the main loop for the game."""  while
    True:  self._check_events()  self.ship.update()  self.bullets.update()              #
    Get rid of bullets that have disappeared. ❶             for bullet in self.bullets.copy():
    ❷                 if bullet.rect.bottom <= 0: ❸                     self.bullets.remove(bullet)
    ❹             print(len(self.bullets))   self._update_screen()  self.clock.tick(60)
    [PRE31]  # Bullet settings   *--snip--*  self.bullet_color = (60, 60, 60)   self.bullets_allowed
    = 3 [PRE32]  def _fire_bullet(self):  """Create a new bullet and add it to the
    bullets group."""   if len(self.bullets) < self.settings.bullets_allowed:  new_bullet
    = Bullet(self)  self.bullets.add(new_bullet) [PRE33]  def _update_bullets(self):         """Update
    position of bullets and get rid of old bullets."""         # Update bullet positions.  self.bullets.update()   #
    Get rid of bullets that have disappeared.  for bullet in self.bullets.copy():  if
    bullet.rect.bottom <= 0:  self.bullets.remove(bullet) [PRE34]  while True:  self._check_events()  self.ship.update()   self._update_bullets()  self._update_screen()  self.clock.tick(60)
    [PRE35]`  [PRE36] import pygame from pygame.sprite import Sprite  class Alien(Sprite):     """A
    class to represent a single alien in the fleet."""      def __init__(self, ai_game):         """Initialize
    the alien and set its starting position."""         super().__init__()         self.screen
    = ai_game.screen          # Load the alien image and set its rect attribute.         self.image
    = pygame.image.load(''images/alien.bmp'')         self.rect = self.image.get_rect()          #
    Start each new alien near the top left of the screen. ❶         self.rect.x =
    self.rect.width         self.rect.y = self.rect.height          # Store the alien''s
    exact horizontal position. ❷         self.x = float(self.rect.x) [PRE37] *--snip--*
    from bullet import Bullet from alien import Alien [PRE38]  def __init__(self):   *--snip--*  self.ship
    = Ship(self)  self.bullets = pygame.sprite.Group()         self.aliens = pygame.sprite.Group()          self._create_fleet()
    [PRE39]  def _create_fleet(self):         """Create the fleet of aliens."""         #
    Make an alien.         alien = Alien(self)         self.aliens.add(alien) [PRE40]  def
    _update_screen(self):   *--snip--*  self.ship.blitme()   self.aliens.draw(self.screen)   pygame.display.flip()
    [PRE41]  def _create_fleet(self):  """Create the fleet of aliens."""         #
    Create an alien and keep adding aliens until there''s no room left.         #
    Spacing between aliens is one alien width.  alien = Alien(self)         alien_width
    = alien.rect.width  ❶         current_x = alien_width ❷         while current_x
    < (self.settings.screen_width - 2 * alien_width): ❸             new_alien = Alien(self)
    ❹             new_alien.x = current_x             new_alien.rect.x = current_x             self.aliens.add(new_alien)
    ❺             current_x += 2 * alien_width [PRE42] while current_x < self.settings.screen_width:
    [PRE43]  def _create_fleet(self):   *--snip--*  while current_x < (self.settings.screen_width
    - 2 * alien_width):             self._create_alien(current_x)             current_x
    += 2 * alien_width  ❶     def _create_alien(self, x_position):         """Create
    an alien and place it in the row."""  new_alien = Alien(self)         new_alien.x
    = x_position         new_alien.rect.x = x_position  self.aliens.add(new_alien)
    [PRE44]  def _create_fleet(self):  """Create the fleet of aliens."""  # Create
    an alien and keep adding aliens until there''s no room left.         # Spacing
    between aliens is one alien width and one alien height.  alien = Alien(self) ❶         alien_width,
    alien_height = alien.rect.size  ❷         current_x, current_y = alien_width,
    alien_height ❸         while current_y < (self.settings.screen_height - 3 * alien_height):             while
    current_x < (self.settings.screen_width - 2 * alien_width): ❹                 self._create_alien(current_x,
    current_y)                 current_x += 2 * alien_width  ❺             # Finished
    a row; reset x value, and increment y value.             current_x = alien_width             current_y
    += 2 * alien_height [PRE45]  def _create_alien(self, x_position, y_position):         """Create
    an alien and place it in the fleet."""  new_alien = Alien(self)  new_alien.x =
    x_position  new_alien.rect.x = x_position         new_alien.rect.y = y_position  self.aliens.add(new_alien)
    [PRE46]  def __init__(self):   *--snip--*         # Alien settings         self.alien_speed
    = 1.0 [PRE47]  def __init__(self, ai_game):  """Initialize the alien and set its
    starting position."""  super().__init__()  self.screen = ai_game.screen         self.settings
    = ai_game.settings         *--snip--*  def update(self):     """Move the alien
    to the right.""" ❶     self.x += self.settings.alien_speed ❷     self.rect.x =
    self.x [PRE48]  while True:  self._check_events()  self.ship.update()  self._update_bullets()             self._update_aliens()  self._update_screen()  self.clock.tick(60)
    [PRE49]  def _update_aliens(self):         """Update the positions of all aliens
    in the fleet."""         self.aliens.update() [PRE50] # Alien settings self.alien_speed
    = 1.0 self.fleet_drop_speed = 10 # fleet_direction of 1 represents right; -1 represents
    left. self.fleet_direction = 1 [PRE51] def check_edges(self):     """Return True
    if alien is at edge of screen."""     screen_rect = self.screen.get_rect() ❶     return
    (self.rect.right >= screen_rect.right) or (self.rect.left <= 0)  def update(self):     """Move
    the alien right or left.""" ❷     self.x += self.settings.alien_speed * self.settings.fleet_direction     self.rect.x
    = self.x [PRE52]  def _check_fleet_edges(self):         """Respond appropriately
    if any aliens have reached an edge.""" ❶         for alien in self.aliens.sprites():             if
    alien.check_edges(): ❷                 self._change_fleet_direction()                 break      def
    _change_fleet_direction(self):  """Drop the entire fleet and change the fleet''s
    direction."""         for alien in self.aliens.sprites(): ❸             alien.rect.y
    += self.settings.fleet_drop_speed         self.settings.fleet_direction *= -1
    [PRE53]  def _update_aliens(self):         """Check if the fleet is at an edge,
    then update positions."""         self._check_fleet_edges()         self.aliens.update()
    [PRE54]  def _update_bullets(self):  """Update position of bullets and get rid
    of old bullets."""   *--snip--*          # Check for any bullets that have hit
    aliens.         #   If so, get rid of the bullet and the alien.         collisions
    = pygame.sprite.groupcollide(                 self.bullets, self.aliens, True,
    True) [PRE55]  def _update_bullets(self):   *--snip--* ❶         if not self.aliens:  #
    Destroy existing bullets and create new fleet. ❷             self.bullets.empty()             self._create_fleet()
    [PRE56]  # Bullet settings         self.bullet_speed = 2.5         self.bullet_width
    = 3   *--snip--* [PRE57]  def _update_bullets(self):   *--snip--*  # Get rid of
    bullets that have disappeared.  for bullet in self.bullets.copy():  if bullet.rect.bottom
    <= 0:  self.bullets.remove(bullet)    self._check_bullet_alien_collisions()    def
    _check_bullet_alien_collisions(self):         """Respond to bullet-alien collisions."""         #
    Remove any bullets and aliens that have collided.  collisions = pygame.sprite.groupcollide(  self.bullets,
    self.aliens, True, True)   if not self.aliens:  # Destroy existing bullets and
    create new fleet.  self.bullets.empty()  self._create_fleet() [PRE58]  def _update_aliens(self):   *--snip--*  self.aliens.update()          #
    Look for alien-ship collisions. ❶         if pygame.sprite.spritecollideany(self.ship,
    self.aliens): ❷             print("Ship hit!!!") [PRE59] class GameStats:     """Track
    statistics for Alien Invasion."""      def __init__(self, ai_game):         """Initialize
    statistics."""         self.settings = ai_game.settings ❶         self.reset_stats()      def
    reset_stats(self):         """Initialize statistics that can change during the
    game."""         self.ships_left = self.settings.ship_limit [PRE60] # Ship settings         self.ship_speed
    = 1.5         self.ship_limit = 3 [PRE61] import sys from time import sleep  import
    pygame  from settings import Settings from game_stats import GameStats from ship
    import Ship *--snip--* [PRE62]  def __init__(self):   *--snip--*  self.screen
    = pygame.display.set_mode(  (self.settings.screen_width, self.settings.screen_height))  pygame.display.set_caption("Alien
    Invasion")          # Create an instance to store game statistics.         self.stats
    = GameStats(self)   self.ship = Ship(self)   *--snip--* [PRE63]  def _ship_hit(self):         """Respond
    to the ship being hit by an alien."""         # Decrement ships_left. ❶         self.stats.ships_left
    -= 1          # Get rid of any remaining bullets and aliens. ❷         self.bullets.empty()         self.aliens.empty()          #
    Create a new fleet and center the ship. ❸         self._create_fleet()         self.ship.center_ship()   #
    Pause. ❹         sleep(0.5) [PRE64]  def _update_aliens(self):   *--snip--*  if
    pygame.sprite.spritecollideany(self.ship, self.aliens):             self._ship_hit()
    [PRE65] def center_ship(self):         """Center the ship on the screen."""         self.rect.midbottom
    = self.screen_rect.midbottom         self.x = float(self.rect.x) [PRE66]  def
    _check_aliens_bottom(self):         """Check if any aliens have reached the bottom
    of the screen."""         for alien in self.aliens.sprites(): ❶             if
    alien.rect.bottom >= self.settings.screen_height:                 # Treat this
    the same as if the ship got hit.                 self._ship_hit()                 break
    [PRE67]  def _update_aliens(self):   *--snip--*  # Look for alien-ship collisions.  if
    pygame.sprite.spritecollideany(self.ship, self.aliens):  self._ship_hit()          #
    Look for aliens hitting the bottom of the screen.         self._check_aliens_bottom()
    [PRE68]  def __init__(self):   *--snip--*         # Start Alien Invasion in an
    active state.         self.game_active = True [PRE69]  def _ship_hit(self):  """Respond
    to ship being hit by alien."""         if self.stats.ships_left > 0:             #
    Decrement ships_left.  self.stats.ships_left -= 1   *--snip--*  # Pause.  sleep(0.5)         else:             self.game_active
    = False [PRE70]  def run_game(self):  """Start the main loop for the game."""  while
    True:  self._check_events()         if self.game_active:  self.ship.update()  self._update_bullets()  self._update_aliens()   self._update_screen()  self.clock.tick(60)
    [PRE71]  def __init__(self):  """Initialize the game, and create game resources."""  pygame.init()  *--snip--*          #
    Start Alien Invasion in an inactive state.         self.game_active = False [PRE72]
    import pygame.font  class Button:     """A class to build buttons for the game."""  ❶     def
    __init__(self, ai_game, msg):         """Initialize button attributes."""         self.screen
    = ai_game.screen         self.screen_rect = self.screen.get_rect()          #
    Set the dimensions and properties of the button. ❷         self.width, self.height
    = 200, 50         self.button_color = (0, 135, 0)         self.text_color = (255,
    255, 255) ❸         self.font = pygame.font.SysFont(None, 48)          # Build
    the button''s rect object and center it. ❹         self.rect = pygame.Rect(0,
    0, self.width, self.height)         self.rect.center = self.screen_rect.center          #
    The button message needs to be prepped only once. ❺         self._prep_msg(msg)
    [PRE73] def _prep_msg(self, msg):         """Turn msg into a rendered image and
    center text on the button.""" ❶         self.msg_image = self.font.render(msg,
    True, self.text_color,                 self.button_color) ❷         self.msg_image_rect
    = self.msg_image.get_rect()         self.msg_image_rect.center = self.rect.center
    [PRE74] def draw_button(self):         """Draw blank button and then draw message."""         self.screen.fill(self.button_color,
    self.rect)         self.screen.blit(self.msg_image, self.msg_image_rect) [PRE75]
    *--snip--* from game_stats import GameStats from button import Button [PRE76]  def
    __init__(self):   *--snip--*  self.game_active = False          # Make the Play
    button.         self.play_button = Button(self, "Play") [PRE77]  def _update_screen(self):   *--snip--*  self.aliens.draw(self.screen)          #
    Draw the play button if the game is inactive.         if not self.game_active:             self.play_button.draw_button()   pygame.display.flip()
    [PRE78]  def _check_events(self):  """Respond to keypresses and mouse events."""  for
    event in pygame.event.get():  if event.type == pygame.QUIT:   *--snip--* ❶             elif
    event.type == pygame.MOUSEBUTTONDOWN: ❷                 mouse_pos = pygame.mouse.get_pos()
    ❸                 self._check_play_button(mouse_pos) [PRE79]  def _check_play_button(self,
    mouse_pos):         """Start a new game when the player clicks Play.""" ❶         if
    self.play_button.rect.collidepoint(mouse_pos):             self.game_active =
    True [PRE80]  def _check_play_button(self, mouse_pos):  """Start a new game when
    the player clicks Play."""  if self.play_button.rect.collidepoint(mouse_pos):             #
    Reset the game statistics. ❶             self.stats.reset_stats()  self.game_active
    = True   # Get rid of any remaining bullets and aliens. ❷             self.bullets.empty()             self.aliens.empty()              #
    Create a new fleet and center the ship. ❸             self._create_fleet()             self.ship.center_ship()
    [PRE81]  def _check_play_button(self, mouse_pos):  """Start a new game when the
    player clicks Play.""" ❶         button_clicked = self.play_button.rect.collidepoint(mouse_pos)
    ❷         if button_clicked and not self.game_active:  # Reset the game statistics.  self.stats.reset_stats()   *--snip--*
    [PRE82]  def _check_play_button(self, mouse_pos):  """Start a new game when the
    player clicks Play."""  button_clicked = self.play_button.rect.collidepoint(mouse_pos)  if
    button_clicked and not self.game_active:   *--snip--*             # Hide the mouse
    cursor.             pygame.mouse.set_visible(False) [PRE83]  def _ship_hit(self):  """Respond
    to ship being hit by alien."""  if self.stats.ships_left > 0:   *--snip--*  else:  self.game_active
    = False   pygame.mouse.set_visible(True) [PRE84] def __init__(self):     """Initialize
    the game''s static settings."""     # Screen settings  self.screen_width = 1200  self.screen_height
    = 800  self.bg_color = (230, 230, 230)   # Ship settings  self.ship_limit = 3   #
    Bullet settings  self.bullet_width = 3  self.bullet_height = 15  self.bullet_color
    = 60, 60, 60  self.bullets_allowed = 3   # Alien settings  self.fleet_drop_speed
    = 10      # How quickly the game speeds up ❶     self.speedup_scale = 1.1  ❷     self.initialize_dynamic_settings()
    [PRE85]  def initialize_dynamic_settings(self):      """Initialize settings that
    change throughout the game."""      self.ship_speed = 1.5      self.bullet_speed
    = 2.5      self.alien_speed = 1.0       # fleet_direction of 1 represents right;
    -1 represents left.      self.fleet_direction = 1 [PRE86]  def increase_speed(self):      """Increase
    speed settings."""      self.ship_speed *= self.speedup_scale      self.bullet_speed
    *= self.speedup_scale      self.alien_speed *= self.speedup_scale [PRE87]  def
    _check_bullet_alien_collisions(self):   *--snip--*  if not self.aliens:  # Destroy
    existing bullets and create new fleet.  self.bullets.empty()  self._create_fleet()   self.settings.increase_speed()
    [PRE88]  def _check_play_button(self, mouse_pos):  """Start a new game when the
    player clicks Play."""  button_clicked = self.play_button.rect.collidepoint(mouse_pos)  if
    button_clicked and not self.game_active:   # Reset the game settings.             self.settings.initialize_dynamic_settings()   *--snip--*
    [PRE89] class GameStats:   *--snip--*  def reset_stats(self):  """Initialize statistics
    that can change during the game."""  self.ships_left = self.ai_settings.ship_limit         self.score
    = 0 [PRE90] import pygame.font  class Scoreboard:     """A class to report scoring
    information."""  ❶     def __init__(self, ai_game):         """Initialize scorekeeping
    attributes."""         self.screen = ai_game.screen         self.screen_rect =
    self.screen.get_rect()         self.settings = ai_game.settings         self.stats
    = ai_game.stats          # Font settings for scoring information. ❷         self.text_color
    = (30, 30, 30) ❸         self.font = pygame.font.SysFont(None, 48)   # Prepare
    the initial score image. ❹         self.prep_score() [PRE91] def prep_score(self):     """Turn
    the score into a rendered image.""" ❶     score_str = str(self.stats.score) ❷         self.score_image
    = self.font.render(score_str, True,                 self.text_color, self.settings.bg_color)      #
    Display the score at the top right of the screen. ❸     self.score_rect = self.score_image.get_rect()
    ❹     self.score_rect.right = self.screen_rect.right - 20 ❺     self.score_rect.top
    = 20 [PRE92] def show_score(self):         """Draw score to the screen."""         self.screen.blit(self.score_image,
    self.score_rect) [PRE93] *--snip--* from game_stats import GameStats from scoreboard
    import Scoreboard *--snip--* [PRE94]  def __init__(self):   *--snip--*  pygame.display.set_caption("Alien
    Invasion")          # Create an instance to store game statistics,         #   and
    create a scoreboard.         self.stats = GameStats(self)         self.sb = Scoreboard(self)   *--snip--*
    [PRE95]  def _update_screen(self):   *--snip--*  self.aliens.draw(self.screen)          #
    Draw the score information.         self.sb.show_score()   # Draw the play button
    if the game is inactive.   *--snip--* [PRE96]  def initialize_dynamic_settings(self):   *--snip--*          #
    Scoring settings      self.alien_points = 50 [PRE97]  def _check_bullet_alien_collisions(self):  """Respond
    to bullet-alien collisions."""  # Remove any bullets and aliens that have collided.  collisions
    = pygame.sprite.groupcollide(  self.bullets, self.aliens, True, True)          if
    collisions:             self.stats.score += self.settings.alien_points             self.sb.prep_score()   *--snip--*
    [PRE98]  def _check_play_button(self, mouse_pos):   *--snip--*  if button_clicked
    and not self.game_active:   *--snip--*  # Reset the game statistics.  self.stats.reset_stats()             self.sb.prep_score()   *--snip--*
    [PRE99]  def _check_bullet_alien_collisions(self):   *--snip--*  if collisions:             for
    aliens in collisions.values():                 self.stats.score += self.settings.alien_points
    * len(aliens)  self.sb.prep_score()   *--snip--* [PRE100] class Settings:  """A
    class to store all settings for Alien Invasion."""   def __init__(self):   *--snip--*         #
    How quickly the game speeds up  self.speedup_scale = 1.1   # How quickly the alien
    point values increase ❶         self.score_scale = 1.5   self.initialize_dynamic_settings()   def
    initialize_dynamic_settings(self):   *--snip--*   def increase_speed(self):         """Increase
    speed settings and alien point values."""  self.ship_speed *= self.speedup_scale  self.bullet_speed
    *= self.speedup_scale  self.alien_speed *= self.speedup_scale  ❷         self.alien_points
    = int(self.alien_points * self.score_scale) [PRE101]  def increase_speed(self):   *--snip--*  self.alien_points
    = int(self.alien_points * self.score_scale)   print(self.alien_points) [PRE102]  def
    prep_score(self):  """Turn the score into a rendered image."""         rounded_score
    = round(self.stats.score, -1)         score_str = f"{rounded_score:,}"  self.score_image
    = self.font.render(score_str, True,  self.text_color, self.settings.bg_color)   *--snip--*
    [PRE103]  def __init__(self, ai_game):   *--snip--*      # High score should never
    be reset.      self.high_score = 0 [PRE104]  def __init__(self, ai_game):   *--snip--*      #
    Prepare the initial score images.  self.prep_score() ❶      self.prep_high_score()
    [PRE105]  def prep_high_score(self):      """Turn the high score into a rendered
    image.""" ❶      high_score = round(self.stats.high_score, -1)      high_score_str
    = f"{high_score:,}" ❷      self.high_score_image = self.font.render(high_score_str,
    True,          self.text_color, self.settings.bg_color)       # Center the high
    score at the top of the screen.      self.high_score_rect = self.high_score_image.get_rect()
    ❸         self.high_score_rect.centerx = self.screen_rect.centerx ❹      self.high_score_rect.top
    = self.score_rect.top [PRE106]  def show_score(self):  """Draw score to the screen."""  self.screen.blit(self.score_image,
    self.score_rect)      self.screen.blit(self.high_score_image, self.high_score_rect)
    [PRE107]  def check_high_score(self): """Check to see if there''s a new high score."""         if
    self.stats.score > self.stats.high_score:             self.stats.high_score =
    self.stats.score             self.prep_high_score() [PRE108]  def _check_bullet_alien_collisions(self):   *--snip--*  if
    collisions:  for aliens in collisions.values():  self.stats.score += self.settings.alien_points
    * len(aliens)  self.sb.prep_score()      self.sb.check_high_score()         *--snip--*
    [PRE109]  def reset_stats(self):  """Initialize statistics that can change during
    the game."""  self.ships_left = self.settings.ship_limit  self.score = 0      self.level
    = 1 [PRE110]  def __init__(self, ai_game):   *--snip--*  self.prep_high_score()      self.prep_level()
    [PRE111] def prep_level(self):         """Turn the level into a rendered image."""         level_str
    = str(self.stats.level) ❶         self.level_image = self.font.render(level_str,
    True,                 self.text_color, self.settings.bg_color)          # Position
    the level below the score.         self.level_rect = self.level_image.get_rect()
    ❷         self.level_rect.right = self.score_rect.right ❸         self.level_rect.top
    = self.score_rect.bottom + 10 [PRE112]  def show_score(self):         """Draw
    scores and level to the screen."""  self.screen.blit(self.score_image, self.score_rect)  self.screen.blit(self.high_score_image,
    self.high_score_rect)      self.screen.blit(self.level_image, self.level_rect)
    [PRE113]  def _check_bullet_alien_collisions(self):   *--snip--*  if not self.aliens:    #
    Destroy existing bullets and create new fleet.  self.bullets.empty()  self._create_fleet()  self.settings.increase_speed()              #
    Increase level.             self.stats.level += 1             self.sb.prep_level()
    [PRE114]  def _check_play_button(self, mouse_pos):   *--snip--*  if button_clicked
    and not self.game_active:   *--snip--*             self.sb.prep_score()             self.sb.prep_level()             *--snip--*
    [PRE115] import pygame from pygame.sprite import Sprite  ❶ class Ship(Sprite):  """A
    class to manage the ship."""   def __init__(self, ai_game):  """Initialize the
    ship and set its starting position.""" ❷         super().__init__()   *--snip--*
    [PRE116] import pygame.font from pygame.sprite import Group  from ship import
    Ship [PRE117]  def __init__(self, ai_game):  """Initialize scorekeeping attributes."""   self.ai_game
    = ai_game  self.screen = ai_game.screen   *--snip--*  self.prep_level()         self.prep_ships()
    [PRE118] def prep_ships(self):         """Show how many ships are left.""" ❶         self.ships
    = Group() ❷         for ship_number in range(self.stats.ships_left):             ship
    = Ship(self.ai_game) ❸             ship.rect.x = 10 + ship_number * ship.rect.width
    ❹             ship.rect.y = 10 ❺             self.ships.add(ship) [PRE119]  def
    show_score(self):         """Draw scores, level, and ships to the screen."""  self.screen.blit(self.score_image,
    self.score_rect)  self.screen.blit(self.high_score_image, self.high_score_rect)  self.screen.blit(self.level_image,
    self.level_rect)      self.ships.draw(self.screen) [PRE120]  def _check_play_button(self,
    mouse_pos):   *--snip--*  if button_clicked and not self.game_active:   *--snip--*             self.sb.prep_level()             self.sb.prep_ships()             *--snip--*
    [PRE121]  def _ship_hit(self):  """Respond to ship being hit by alien."""  if
    self.stats.ships_left > 0:             # Decrement ships_left, and update scoreboard.  self.stats.ships_left
    -= 1             self.sb.prep_ships()             `--snip--` [PRE122] $ **python
    -m pip install --user matplotlib** [PRE123] $ **python3 -m pip install --user
    matplotlib** [PRE124] import matplotlib.pyplot as plt  squares = [1, 4, 9, 16,
    25]  ❶ fig, ax = plt.subplots() ax.plot(squares)  plt.show() [PRE125] import matplotlib.pyplot
    as plt  squares = [1, 4, 9, 16, 25]  fig, ax = plt.subplots() ❶ ax.plot(squares,
    linewidth=3)  # Set chart title and label axes. ❷ ax.set_title("Square Numbers",
    fontsize=24) ❸ ax.set_xlabel("Value", fontsize=14) ax.set_ylabel("Square of Value",
    fontsize=14)  # Set size of tick labels. ❹ ax.tick_params(labelsize=14)  plt.show()
    [PRE126] import matplotlib.pyplot as plt  input_values = [1, 2, 3, 4, 5] squares
    = [1, 4, 9, 16, 25]  fig, ax = plt.subplots() ax.plot(input_values, squares, linewidth=3)  #
    Set chart title and label axes. *--snip--* [PRE127] >>> **import matplotlib.pyplot
    as plt** >>> **plt.style.available** [''Solarize_Light2'', ''_classic_test_patch'',
    ''_mpl-gallery'', `--snip--` [PRE128] import matplotlib.pyplot as plt  input_values
    = [1, 2, 3, 4, 5] squares = [1, 4, 9, 16, 25]  plt.style.use(''seaborn'') fig,
    ax = plt.subplots() *--snip--* [PRE129] import matplotlib.pyplot as plt  plt.style.use(''seaborn'')
    fig, ax = plt.subplots() ax.scatter(2, 4)  plt.show() [PRE130] import matplotlib.pyplot
    as plt  plt.style.use(''seaborn'') fig, ax = plt.subplots() ❶ ax.scatter(2, 4,
    s=200)  # Set chart title and label axes. ax.set_title("Square Numbers", fontsize=24)
    ax.set_xlabel("Value", fontsize=14) ax.set_ylabel("Square of Value", fontsize=14)  #
    Set size of tick labels. ax.tick_params(labelsize=14)  plt.show() [PRE131] import
    matplotlib.pyplot as plt  x_values = [1, 2, 3, 4, 5] y_values = [1, 4, 9, 16,
    25]  plt.style.use(''seaborn'') fig, ax = plt.subplots() ax.scatter(x_values,
    y_values, s=100)  # Set chart title and label axes. *--snip--* [PRE132] import
    matplotlib.pyplot as plt  ❶ x_values = range(1, 1001) y_values = [x**2 for x in
    x_values]  plt.style.use(''seaborn'') fig, ax = plt.subplots() ❷ ax.scatter(x_values,
    y_values, s=10)  # Set chart title and label axes. *--snip--*  # Set the range
    for each axis. ❸ ax.axis([0, 1100, 0, 1_100_000])  plt.show() [PRE133] *--snip--*
    # Set the range for each axis. ax.axis([0, 1100, 0, 1_100_000]) ax.ticklabel_format(style=''plain'')  plt.show()
    [PRE134] ax.scatter(x_values, y_values, color=''red'', s=10) [PRE135] ax.scatter(x_values,
    y_values, color=(0, 0.8, 0), s=10) [PRE136] *--snip--* plt.style.use(''seaborn'')
    fig, ax = plt.subplots() ax.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues,
    s=10)  # Set chart title and label axes. *--snip--* [PRE137] plt.savefig(''squares_plot.png'',
    bbox_inches=''tight'') [PRE138] ❶ from random import choice  class RandomWalk:     """A
    class to generate random walks."""  ❷     def __init__(self, num_points=5000):         """Initialize
    attributes of a walk."""         self.num_points = num_points          # All walks
    start at (0, 0). ❸         self.x_values = [0]         self.y_values = [0] [PRE139]
    def fill_walk(self): """Calculate all the points in the walk."""   # Keep taking
    steps until the walk reaches the desired length. ❶     while len(self.x_values)
    < self.num_points:          # Decide which direction to go, and how far to go.
    ❷         x_direction = choice([1, -1])         x_distance = choice([0, 1, 2,
    3, 4]) ❸         x_step = x_direction * x_distance          y_direction = choice([1,
    -1])         y_distance = choice([0, 1, 2, 3, 4]) ❹         y_step = y_direction
    * y_distance          # Reject moves that go nowhere. ❺         if x_step == 0
    and y_step == 0:             continue          # Calculate the new position. ❻         x
    = self.x_values[-1] + x_step         y = self.y_values[-1] + y_step          self.x_values.append(x)         self.y_values.append(y)
    [PRE140] import matplotlib.pyplot as plt  from random_walk import RandomWalk  #
    Make a random walk. ❶ rw = RandomWalk() rw.fill_walk()  # Plot the points in the
    walk. plt.style.use(''classic'') fig, ax = plt.subplots() ❷ ax.scatter(rw.x_values,
    rw.y_values, s=15) ❸ ax.set_aspect(''equal'') plt.show() [PRE141] import matplotlib.pyplot
    as plt  from random_walk import RandomWalk  # Keep making new walks, as long as
    the program is active. while True:  # Make a random walk.     *--snip--*  plt.show()      keep_running
    = input("Make another walk? (y/n): ")     if keep_running == ''n'':         break
    [PRE142] *--snip--* while True:  # Make a random walk.  rw = RandomWalk()  rw.fill_walk()      #
    Plot the points in the walk.  plt.style.use(''classic'')  fig, ax = plt.subplots()
    ❶     point_numbers = range(rw.num_points)     ax.scatter(rw.x_values, rw.y_values,
    c=point_numbers, cmap=plt.cm.Blues,         edgecolors=''none'', s=15)     ax.set_aspect(''equal'')  plt.show()   *--snip--*
    [PRE143] *--snip--* while True:   *--snip--*  ax.scatter(rw.x_values, rw.y_values,
    c=point_numbers, cmap=plt.cm.Blues,  edgecolors=''none'', s=15)  ax.set_aspect(''equal'')      #
    Emphasize the first and last points.     ax.scatter(0, 0, c=''green'', edgecolors=''none'',
    s=100)     ax.scatter(rw.x_values[-1], rw.y_values[-1], c=''red'', edgecolors=''none'',         s=100)   plt.show()   *--snip--*
    [PRE144] *--snip--* while True:   *--snip--*  ax.scatter(rw.x_values[-1], rw.y_values[-1],
    c=''red'', edgecolors=''none'',  s=100)      # Remove the axes.     ax.get_xaxis().set_visible(False)     ax.get_yaxis().set_visible(False)   plt.show()   *--snip--*
    [PRE145] *--snip--* while True:  # Make a random walk.     rw = RandomWalk(50_000)  rw.fill_walk()   #
    Plot the points in the walk.  plt.style.use(''classic'')  fig, ax = plt.subplots()  point_numbers
    = range(rw.num_points)   ax.scatter(rw.x_values, rw.y_values, c=point_numbers,
    cmap=plt.cm.Blues,         edgecolors=''none'', s=1)   *--snip--* [PRE146] fig,
    ax = plt.subplots(figsize=(15, 9)) [PRE147] fig, ax = plt.subplots(figsize=(10,
    6), dpi=128) [PRE148] $ **python -m pip install --user plotly** $ **python -m
    pip install --user pandas** [PRE149] from random import randint  class Die:     """A
    class representing a single die."""  ❶     def __init__(self, num_sides=6):         """Assume
    a six-sided die."""         self.num_sides = num_sides      def roll(self):         """"Return
    a random value between 1 and number of sides.""" ❷         return randint(1, self.num_sides)
    [PRE150] from die import Die  # Create a D6. ❶ die = Die()  # Make some rolls,
    and store results in a list. results = [] ❷ for roll_num in range(100):     result
    = die.roll()     results.append(result)  print(results) [PRE151] [4, 6, 5, 6,
    1, 5, 6, 3, 5, 3, 5, 3, 2, 2, 1, 3, 1, 5, 3, 6, 3, 6, 5, 4,  1, 1, 4, 2, 3, 6,
    4, 2, 6, 4, 1, 3, 2, 5, 6, 3, 6, 2, 1, 1, 3, 4, 1, 4, 3, 5, 1, 4, 5, 5, 2, 3,
    3, 1, 2, 3, 5, 6, 2, 5, 6, 1, 3, 2, 1, 1, 1, 6, 5, 5, 2, 2, 6, 4, 1, 4, 5, 1,
    1, 1, 4, 5, 3, 3, 1, 3, 5, 4, 5, 6, 5, 4, 1, 5, 1, 2] [PRE152] *--snip--* # Make
    some rolls, and store results in a list. results = [] ❶ for roll_num in range(1000):  result
    = die.roll()  results.append(result)  # Analyze the results. frequencies = []
    ❷ poss_results = range(1, die.num_sides+1) for value in poss_results: ❸     frequency
    = results.count(value) ❹     frequencies.append(frequency)  print(frequencies)
    [PRE153] [155, 167, 168, 170, 159, 181] [PRE154] import plotly.express as px  from
    die import Die *--snip--*  for value in poss_results:  frequency = results.count(value)  frequencies.append(frequency)  #
    Visualize the results. fig = px.bar(x=poss_results, y=frequencies) fig.show()
    [PRE155] *--snip--* # Visualize the results. ❶ title = "Results of Rolling One
    D6 1,000 Times" ❷ labels = {''x'': ''Result'', ''y'': ''Frequency of Result''}
    fig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels) fig.show()
    [PRE156] import plotly.express as px  from die import Die  # Create two D6 dice.
    die_1 = Die() die_2 = Die()  # Make some rolls, and store results in a list. results
    = [] for roll_num in range(1000): ❶     result = die_1.roll() + die_2.roll()  results.append(result)  #
    Analyze the results. frequencies = [] ❷ max_result = die_1.num_sides + die_2.num_sides
    ❸ poss_results = range(2, max_result+1) for value in poss_results:  frequency
    = results.count(value)  frequencies.append(frequency)  # Visualize the results.
    title = "Results of Rolling Two D6 Dice 1,000 Times" labels = {''x'': ''Result'',
    ''y'': ''Frequency of Result''} fig = px.bar(x=poss_results, y=frequencies, title=title,
    labels=labels) fig.show() [PRE157] *--snip--* fig = px.bar(x=poss_results, y=frequencies,
    title=title, labels=labels)  # Further customize chart. fig.update_layout(xaxis_dtick=1)  fig.show()
    [PRE158] import plotly.express as px  from die import Die  # Create a D6 and a
    D10. die_1 = Die() ❶ die_2 = Die(10)  # Make some rolls, and store results in
    a list. results = [] for roll_num in range(50_000):  result = die_1.roll() + die_2.roll()  results.append(result)  #
    Analyze the results. *--snip--*  # Visualize the results. ❷ title = "Results of
    Rolling a D6 and a D10 50,000 Times" labels = {''x'': ''Result'', ''y'': ''Frequency
    of Result''} *--snip--* [PRE159] fig.write_html(''dice_visual_d6d10.html'') [PRE160]
    "USW00025333","SITKA AIRPORT, AK US","2021-01-01",,"44","40" [PRE161] from pathlib
    import Path import csv  ❶ path = Path(''weather_data/sitka_weather_07-2021_simple.csv'')
    lines = path.read_text().splitlines()  ❷ reader = csv.reader(lines) ❸ header_row
    = next(reader) print(header_row) [PRE162] [''STATION'', ''NAME'', ''DATE'', ''TAVG'',
    ''TMAX'', ''TMIN''] [PRE163] *--snip--* reader = csv.reader(lines) header_row
    = next(reader)  for index, column_header in enumerate(header_row):     print(index,
    column_header) [PRE164] 0 STATION 1 NAME 2 DATE 3 TAVG 4 TMAX 5 TMIN [PRE165]
    *--snip--* reader = csv.reader(lines) header_row = next(reader)  # Extract high
    temperatures. ❶ highs = [] ❷ for row in reader: ❸     high = int(row[4])     highs.append(high)  print(highs)
    [PRE166] [61, 60, 66, 60, 65, 59, 58, 58, 57, 60, 60, 60, 57, 58, 60, 61, 63,
    63, 70, 64, 59, 63, 61, 58, 59, 64, 62, 70, 70, 73, 66] [PRE167] from pathlib
    import Path import csv  import matplotlib.pyplot as plt  path = Path(''weather_data/sitka_weather_07-2021_simple.csv'')
    lines = path.read_text().splitlines()   *--snip--*  # Plot the high temperatures.
    plt.style.use(''seaborn'') fig, ax = plt.subplots() ❶ ax.plot(highs, color=''red'')  #
    Format plot. ❷ ax.set_title("Daily High Temperatures, July 2021", fontsize=24)
    ❸ ax.set_xlabel('''', fontsize=16) ax.set_ylabel("Temperature (F)", fontsize=16)
    ax.tick_params(labelsize=16)  plt.show() [PRE168] "USW00025333","SITKA AIRPORT,
    AK US","2021-07-01",,"61","53" [PRE169] >>> **from datetime import datetime**
    >>> **first_date = datetime.strptime(''2021-07-01'', ''%Y-%m-%d'')** >>> **print(first_date)**
    2021-07-01 00:00:00 [PRE170] from pathlib import Path import csv from datetime
    import datetime  import matplotlib.pyplot as plt  path = Path(''weather_data/sitka_weather_07-2021_simple.csv'')
    lines = path.read_text().splitlines()  reader = csv.reader(lines) header_row =
    next(reader)  # Extract dates and high temperatures. ❶ dates, highs = [], [] for
    row in reader: ❷     current_date = datetime.strptime(row[2], ''%Y-%m-%d'')  high
    = int(row[4])     dates.append(current_date)  highs.append(high)  # Plot the high
    temperatures. plt.style.use(''seaborn'') fig, ax = plt.subplots() ❸ ax.plot(dates,
    highs, color=''red'')  # Format plot. ax.set_title("Daily High Temperatures, July
    2021", fontsize=24) ax.set_xlabel('''', fontsize=16) ❹ fig.autofmt_xdate() ax.set_ylabel("Temperature
    (F)", fontsize=16) ax.tick_params(labelsize=16)  plt.show() [PRE171] *--snip--*
    path = Path(''weather_data/sitka_weather_2021_simple.csv'') lines = path.read_text().splitlines()
    *--snip--* # Format plot. ax.set_title("Daily High Temperatures, 2021", fontsize=24)
    ax.set_xlabel('''', fontsize=16) *--snip--* [PRE172] *--snip--* reader = csv.reader(lines)
    header_row = next(reader)  # Extract dates, and high and low temperatures. ❶ dates,
    highs, lows = [], [], [] for row in reader:  current_date = datetime.strptime(row[2],
    ''%Y-%m-%d'')  high = int(row[4]) ❷     low = int(row[5])  dates.append(current_date)  highs.append(high)     lows.append(low)  #
    Plot the high and low temperatures. plt.style.use(''seaborn'') fig, ax = plt.subplots()
    ax.plot(dates, highs, color=''red'') ❸ ax.plot(dates, lows, color=''blue'')  #
    Format plot. ❹ ax.set_title("Daily High and Low Temperatures, 2021", fontsize=24)
    *--snip--* [PRE173] *--snip--* # Plot the high and low temperatures. plt.style.use(''seaborn'')
    fig, ax = plt.subplots() ❶ ax.plot(dates, highs, color=''red'', alpha=0.5) ax.plot(dates,
    lows, color=''blue'', alpha=0.5) ❷ ax.fill_between(dates, highs, lows, facecolor=''blue'',
    alpha=0.1) *--snip--* [PRE174] from pathlib import Path import csv  path = Path(''weather_data/death_valley_2021_simple.csv'')
    lines = path.read_text().splitlines()  reader = csv.reader(lines) header_row =
    next(reader)  for index, column_header in enumerate(header_row):     print(index,
    column_header) [PRE175] 0 STATION 1 NAME 2 DATE 3 TMAX 4 TMIN 5 TOBS [PRE176]
    *--snip--* path = Path(''weather_data/death_valley_2021_simple.csv'') lines =
    path.read_text().splitlines()   *--snip--* # Extract dates, and high and low temperatures.
    dates, highs, lows = [], [], [] for row in reader:  current_date = datetime.strptime(row[2],
    ''%Y-%m-%d'')     high = int(row[3])     low = int(row[4])  dates.append(current_date)
    *--snip--* [PRE177] Traceback (most recent call last):   File "death_valley_highs_lows.py",
    line 17, in <module>     high = int(row[3]) ❶ ValueError: invalid literal for
    int() with base 10: '''' [PRE178] *--snip--* for row in reader:  current_date
    = datetime.strptime(row[2], ''%Y-%m-%d'') ❶     try:  high = int(row[3])  low
    = int(row[4])     except ValueError: ❷  print(f"Missing data for {current_date}")
    ❸     else:  dates.append(current_date)  highs.append(high)  lows.append(low)  #
    Plot the high and low temperatures. *--snip--*  # Format plot. ❹ title = "Daily
    High and Low Temperatures, 2021\nDeath Valley, CA" ax.set_title(title, fontsize=20)
    ax.set_xlabel('''', fontsize=16) *--snip--* [PRE179] Missing data for 2021-05-04
    00:00:00 [PRE180] {"type":"FeatureCollection","metadata":{"generated":1649052296000,...
    {"type":"Feature","properties":{"mag":1.6,"place":"63 km SE of Ped... {"type":"Feature","properties":{"mag":2.2,"place":"27
    km SSE of Ca... {"type":"Feature","properties":{"mag":3.7,"place":"102 km SSE
    of S... {"type":"Feature","properties":{"mag":2.92000008,"place":"49 km SE...
    {"type":"Feature","properties":{"mag":1.4,"place":"44 km NE of Sus... `--snip--`
    [PRE181] from pathlib import Path import json  # Read data as a string and convert
    to a Python object. path = Path(''eq_data/eq_data_1_day_m1.geojson'') contents
    = path.read_text() ❶ all_eq_data = json.loads(contents)  # Create a more readable
    version of the data file. ❷ path = Path(''eq_data/readable_eq_data.geojson'')
    ❸ readable_contents = json.dumps(all_eq_data, indent=4) path.write_text(readable_contents)
    [PRE182] {     "type": "FeatureCollection", ❶     "metadata": {         "generated":
    1649052296000,         "url": "https://earthquake.usgs.gov/earthquakes/.../1.0_day.geojson",         "title":
    "USGS Magnitude 1.0+ Earthquakes, Past Day",         "status": 200,         "api":
    "1.10.3",         "count": 160     }, ❷     "features": [     *--snip--* [PRE183]  *--snip--*         {             "type":
    "Feature", ❶             "properties": {                 "mag": 1.6,  `--snip--`
    ❷                 "title": "M 1.6 - 27 km NNW of Susitna, Alaska"             },
    ❸             "geometry": {                 "type": "Point",                 "coordinates":
    [ ❹                     -150.7585, ❺                     61.7591,                     56.3  ]             },             "id":
    "ak0224bju1jx"         }, [PRE184] from pathlib import Path import json  # Read
    data as a string and convert to a Python object. path = Path(''eq_data/eq_data_1_day_m1.geojson'')
    contents = path.read_text() all_eq_data = json.loads(contents)  # Examine all
    earthquakes in the dataset. all_eq_dicts = all_eq_data[''features''] print(len(all_eq_dicts))
    [PRE185] 160 [PRE186] *--snip--* all_eq_dicts = all_eq_data[''features'']  ❶ mags
    = [] for eq_dict in all_eq_dicts: ❷     mag = eq_dict[''properties''][''mag'']     mags.append(mag)  print(mags[:10])
    [PRE187] [1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4, 4.6, 4.5, 1.9, 1.8] [PRE188] *--snip--*
    all_eq_dicts = all_eq_data[''features'']  mags, lons, lats = [], [], [] for eq_dict
    in all_eq_dicts:  mag = eq_dict[''properties''][''mag''] ❶     lon = eq_dict[''geometry''][''coordinates''][0]     lat
    = eq_dict[''geometry''][''coordinates''][1]  mags.append(mag)     lons.append(lon)  lats.append(lat)  print(mags[:10])
    print(lons[:5]) print(lats[:5]) [PRE189] [1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4,
    4.6, 4.5, 1.9, 1.8] [-150.7585, -153.4716, -148.7531, -159.6267, -155.248336791992]
    [61.7591, 59.3152, 63.1633, 54.5612, 18.7551670074463] [PRE190] from pathlib import
    Path import json  import plotly.express as px  *--snip--* for eq_dict in all_eq_dicts:   *--snip--*  title
    = ''Global Earthquakes'' ❶ fig = px.scatter_geo(lat=lats, lon=lons, title=title)
    fig.show() [PRE191] *--snip--* # Read data as a string and convert to a Python
    object. path = Path(''eq_data/eq_data_30_day_m1.geojson'') contents = path.read_text()
    *--snip--*  title = ''Global Earthquakes'' fig = px.scatter_geo(lat=lats, lon=lons,
    size=mags, title=title) fig.show() [PRE192] *--snip--* fig = px.scatter_geo(lat=lats,
    lon=lons, size=mags, title=title, ❶         color=mags, ❷         color_continuous_scale=''Viridis'',
    ❸         labels={''color'':''Magnitude''}, ❹         projection=''natural earth'',     )
    fig.show() [PRE193] >>> **import plotly.express as px** >>> **px.colors.named_colorscales()**
    [''aggrnyl'', ''agsunset'', ''blackbody'', ..., ''mygbm''] [PRE194] *--snip--*
    ❶ mags, lons, lats, eq_titles = [], [], [], []  mag = eq_dict[''properties''][''mag'']  lon
    = eq_dict[''geometry''][''coordinates''][0]  lat = eq_dict[''geometry''][''coordinates''][1]
    ❷     eq_title = eq_dict[''properties''][''title'']  mags.append(mag)  lons.append(lon)  lats.append(lat)     eq_titles.append(eq_title)  title
    = ''Global Earthquakes'' fig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title,   *--snip--*  projection=''natural
    earth'', ❸         hover_name=eq_titles,  ) fig.show() [PRE195] **https://api.github.com/search/repositories?q=language:python+sort:stars**
    [PRE196] { ❶   "total_count": 8961993, ❷   "incomplete_results": true, ❸   "items":
    [     {       "id": 54346799,       "node_id": "MDEwOlJlcG9zaXRvcnk1NDM0Njc5OQ==",       "name":
    "public-apis",       "full_name": "public-apis/public-apis",  `--snip--` [PRE197]
    $ **python -m pip install --user requests** [PRE198] $ **python3 -m pip install
    --user requests** [PRE199] import requests  # Make an API call and check the response.
    ❶ url = "https://api.github.com/search/repositories" url += "?q=language:python+sort:stars+stars:>10000"  ❷
    headers = {"Accept": "application/vnd.github.v3+json"} ❸ r = requests.get(url,
    headers=headers) ❹ print(f"Status code: {r.status_code}")  # Convert the response
    object to a dictionary. ❺ response_dict = r.json()  # Process results. print(response_dict.keys())
    [PRE200] Status code: 200 dict_keys([''total_count'', ''incomplete_results'',
    ''items'']) [PRE201] import requests  # Make an API call and store the response.
    *--snip--*  # Convert the response object to a dictionary. response_dict = r.json()
    ❶ print(f"Total repositories: {response_dict[''total_count'']}") print(f"Complete
    results: {not response_dict[''incomplete_results'']}")  # Explore information
    about the repositories. ❷ repo_dicts = response_dict[''items''] print(f"Repositories
    returned: {len(repo_dicts)}")  # Examine the first repository. ❸ repo_dict = repo_dicts[0]
    ❹ print(f"\nKeys: {len(repo_dict)}") ❺ for key in sorted(repo_dict.keys()):     print(key)
    [PRE202] Status code: 200 ❶ Total repositories: 248 ❷ Complete results: True Repositories
    returned: 30  ❸ Keys: 78 allow_forking archive_url archived `--snip--` url visiblity
    watchers watchers_count [PRE203] *--snip--* # Examine the first repository. repo_dict
    = repo_dicts[0]  print("\nSelected information about first repository:") ❶ print(f"Name:
    {repo_dict[''name'']}") ❷ print(f"Owner: {repo_dict[''owner''][''login'']}") ❸
    print(f"Stars: {repo_dict[''stargazers_count'']}") print(f"Repository: {repo_dict[''html_url'']}")
    ❹ print(f"Created: {repo_dict[''created_at'']}") ❺ print(f"Updated: {repo_dict[''updated_at'']}")
    print(f"Description: {repo_dict[''description'']}") [PRE204] Status code: 200
    Total repositories: 248 Complete results: True Repositories returned: 30  Selected
    information about first repository: Name: public-apis Owner: public-apis Stars:
    191493 Repository: https://github.com/public-apis/public-apis Created: 2016-03-20T23:49:42Z
    Updated: 2022-05-12T06:37:11Z Description: A collective list of free APIs [PRE205]
    *--snip--* # Explore information about the repositories. repo_dicts = response_dict[''items'']
    print(f"Repositories returned: {len(repo_dicts)}")  ❶ print("\nSelected information
    about each repository:") ❷ for repo_dict in repo_dicts:  print(f"\nName: {repo_dict[''name'']}")  print(f"Owner:
    {repo_dict[''owner''][''login'']}")  print(f"Stars: {repo_dict[''stargazers_count'']}")  print(f"Repository:
    {repo_dict[''html_url'']}")  print(f"Description: {repo_dict[''description'']}")
    [PRE206] Status code: 200 Total repositories: 248 Complete results: True Repositories
    returned: 30  Selected information about each repository:  Name: public-apis Owner:
    public-apis Stars: 191494 Repository: https://github.com/public-apis/public-apis
    Description: A collective list of free APIs  Name: system-design-primer Owner:
    donnemartin Stars: 179952 Repository: https://github.com/donnemartin/system-design-primer
    Description: Learn how to design large-scale systems. Prep for the system   design
    interview.  Includes Anki flashcards. `--snip--`  Name: PayloadsAllTheThings Owner:
    swisskyrepo Stars: 37227 Repository: https://github.com/swisskyrepo/PayloadsAllTheThings
    Description: A list of useful payloads and bypass for Web Application Security   and
    Pentest/CTF [PRE207] {   "resources": {     `--snip--` ❶     "search": { ❷       "limit":
    10, ❸       "remaining": 9, ❹       "reset": 1652338832,       "used": 1,       "resource":
    "search"     },     `--snip--` [PRE208] import requests import plotly.express
    as px  # Make an API call and check the response. url = "https://api.github.com/search/repositories"
    url += "?q=language:python+sort:stars+stars:>10000"  headers = {"Accept": "application/vnd.github.v3+json"}
    r = requests.get(url, headers=headers) ❶ print(f"Status code: {r.status_code}")  #
    Process overall results. response_dict = r.json() ❷ print(f"Complete results:
    {not response_dict[''incomplete_results'']}")  # Process repository information.
    repo_dicts = response_dict[''items''] ❸ repo_names, stars = [], [] for repo_dict
    in repo_dicts:     repo_names.append(repo_dict[''name''])     stars.append(repo_dict[''stargazers_count''])  #
    Make visualization. ❹ fig = px.bar(x=repo_names, y=stars) fig.show() [PRE209]
    *--snip--* # Make visualization. title = "Most-Starred Python Projects on GitHub"
    labels = {''x'': ''Repository'', ''y'': ''Stars''} fig = px.bar(x=repo_names,
    y=stars, title=title, labels=labels)  ❶ fig.update_layout(title_font_size=28,
    xaxis_title_font_size=20,         yaxis_title_font_size=20)  fig.show() [PRE210]
    *--snip--* # Process repository information. repo_dicts = response_dict[''items'']
    ❶ repo_names, stars, hover_texts = [], [], [] for repo_dict in repo_dicts:  repo_names.append(repo_dict[''name''])  stars.append(repo_dict[''stargazers_count''])      #
    Build hover texts. ❷     owner = repo_dict[''owner''][''login'']     description
    = repo_dict[''description''] ❸     hover_text = f"{owner}<br />{description}"     hover_texts.append(hover_text)  #
    Make visualization. title = "Most-Starred Python Projects on GitHub" labels =
    {''x'': ''Repository'', ''y'': ''Stars''} ❹ fig = px.bar(x=repo_names, y=stars,
    title=title, labels=labels,         hover_name=hover_texts)  fig.update_layout(title_font_size=28,
    xaxis_title_font_size=20,  yaxis_title_font_size=20)  fig.show() [PRE211] *--snip--*
    # Process repository information. repo_dicts = response_dict[''items''] ❶ repo_links,
    stars, hover_texts = [], [], [] for repo_dict in repo_dicts:     # Turn repo names
    into active links.     repo_name = repo_dict[''name''] ❷     repo_url = repo_dict[''html_url'']
    ❸     repo_link = f"<a href=''{repo_url}''>{repo_name}</a>"     repo_links.append(repo_link)   stars.append(repo_dict[''stargazers_count''])   *--snip--*  #
    Make visualization. title = "Most-Starred Python Projects on GitHub" labels =
    {''x'': ''Repository'', ''y'': ''Stars''} fig = px.bar(x=repo_links, y=stars,
    title=title, labels=labels,  hover_name=hover_texts)  fig.update_layout(title_font_size=28,
    xaxis_title_font_size=20,  yaxis_title_font_size=20)  fig.show() [PRE212] *--snip--*
    fig.update_layout(title_font_size=28, xaxis_title_font_size=20,  yaxis_title_font_size=20)  fig.update_traces(marker_color=''SteelBlue'',
    marker_opacity=0.6)  fig.show() [PRE213] https://hacker-news.firebaseio.com/v0/item/31353677.json
    [PRE214] import requests import json  # Make an API call, and store the response.
    url = "https://hacker-news.firebaseio.com/v0/item/31353677.json" r = requests.get(url)
    print(f"Status code: {r.status_code}")  # Explore the structure of the data. response_dict
    = r.json() response_string = json.dumps(response_dict, indent=4) ❶ print(response_string)
    [PRE215] {     "by": "sohkamyung", ❶     "descendants": 302,     "id": 31353677,
    ❷     "kids": [         31354987,         31354235,         `--snip--`     ],     "score":
    785,     "time": 1652361401, ❸     "title": "Astronomers reveal first image of
    the black hole         at the heart of our galaxy",     "type": "story", ❹     "url":
    "https://public.nrao.edu/news/.../" } [PRE216] https://hacker-news.firebaseio.com/v0/topstories.json
    [PRE217] from operator import itemgetter  import requests  # Make an API call
    and check the response. ❶ url = "https://hacker-news.firebaseio.com/v0/topstories.json"
    r = requests.get(url) print(f"Status code: {r.status_code}")  # Process information
    about each submission. ❷ submission_ids = r.json() ❸ submission_dicts = [] for
    submission_id in submission_ids[:5]:     # Make a new API call for each submission.
    ❹     url = f"https://hacker-news.firebaseio.com/v0/item/{submission_id}.json"     r
    = requests.get(url)     print(f"id: {submission_id}\tstatus: {r.status_code}")     response_dict
    = r.json()      # Build a dictionary for each article. ❺     submission_dict =
    {         ''title'': response_dict[''title''],         ''hn_link'': f"https://news.ycombinator.com/item?id={submission_id}",         ''comments'':
    response_dict[''descendants''],     } ❻     submission_dicts.append(submission_dict)  ❼
    submission_dicts = sorted(submission_dicts, key=itemgetter(''comments''),                             reverse=True)  ❽
    for submission_dict in submission_dicts:     print(f"\nTitle: {submission_dict[''title'']}")     print(f"Discussion
    link: {submission_dict[''hn_link'']}")     print(f"Comments: {submission_dict[''comments'']}")
    [PRE218] Status code: 200 id: 31390506    status: 200 id: 31389893    status:
    200 id: 31390742    status: 200 `--snip--`  Title: Fly.io: The reclaimer of Heroku''s
    magic Discussion link: https://news.ycombinator.com/item?id=31390506 Comments:
    134  Title: The weird Hewlett Packard FreeDOS option Discussion link: https://news.ycombinator.com/item?id=31389893
    Comments: 64  Title: Modern JavaScript Tutorial Discussion link: https://news.ycombinator.com/item?id=31390742
    Comments: 20 `--snip--` [PRE219] learning_log$ **python -m venv ll_env** learning_log$
    [PRE220] learning_log$ **source ll_env/bin/activate** (ll_env)learning_log$ [PRE221]
    (ll_env)learning_log$ **deactivate** learning_log$ [PRE222] (ll_env)learning_log$
    **pip install --upgrade pip** (ll_env)learning_log$ **pip install django** Collecting
    django `--snip--` Installing collected packages: sqlparse, asgiref, django Successfully
    installed asgiref-3.5.2 django-4.1 sqlparse-0.4.2 (ll_env)learning_log$ [PRE223]
    ❶ (ll_env)learning_log$ **django-admin startproject ll_project .** ❷ (ll_env)learning_log$
    **ls** ll_env ll_project manage.py ❸ (ll_env)learning_log$ **ls ll_project** __init__.py
    asgi.py settings.py urls.py wsgi.py [PRE224] (ll_env)learning_log$ **python manage.py
    migrate** ❶ Operations to perform:  Apply all migrations: admin, auth, contenttypes,
    sessions Running migrations:   Applying contenttypes.0001_initial... OK   Applying
    auth.0001_initial... OK  `--snip--`   Applying sessions.0001_initial... OK ❷ (ll_env)learning_log$
    **ls** db.sqlite3 ll_env ll_project manage.py [PRE225] (ll_env)learning_log$ **python
    manage.py runserver** Watching for file changes with StatReloader Performing system
    checks...  ❶ System check identified no issues (0 silenced). May 19, 2022 - 21:52:35
    ❷ Django version 4.1, using settings ''ll_project.settings'' ❸ Starting development
    server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. [PRE226] learning_log$
    **source ll_env/bin/activate** (ll_env)learning_log$ **python manage.py startapp
    learning_logs** ❶ (ll_env)learning_log$ **ls** db.sqlite3 learning_logs ll_env
    ll_project manage.py ❷ (ll_env)learning_log$ **ls learning_logs/** __init__.py
    admin.py apps.py migrations models.py tests.py views.py [PRE227] from django.db
    import models  # Create your models here. [PRE228] from django.db import models  class
    Topic(models.Model):     """A topic the user is learning about.""" ❶     text
    = models.CharField(max_length=200) ❷     date_added = models.DateTimeField(auto_now_add=True)  ❸     def
    __str__(self):         """Return a string representation of the model."""         return
    self.text [PRE229] `--snip--` INSTALLED_APPS = [     ''django.contrib.admin'',     ''django.contrib.auth'',     ''django.contrib.contenttypes'',     ''django.contrib.sessions'',     ''django.contrib.messages'',     ''django.contrib.staticfiles'',
    ] `--snip--` [PRE230] *--snip--* INSTALLED_APPS = [     # My apps.     ''learning_logs'',   #
    Default django apps.  ''django.contrib.admin'',   *--snip--* ] *--snip--* [PRE231]
    (ll_env)learning_log$ **python manage.py makemigrations learning_logs** Migrations
    for ''learning_logs'':   learning_logs/migrations/0001_initial.py     - Create
    model Topic (ll_env)learning_log$ [PRE232] (ll_env)learning_log$ **python manage.py
    migrate** Operations to perform:   Apply all migrations: admin, auth, contenttypes,
    learning_logs, sessions Running migrations:   Applying learning_logs.0001_initial...
    OK [PRE233] (ll_env)learning_log$ **python manage.py createsuperuser** ❶ Username
    (leave blank to use ''eric''): **ll_admin** ❷ Email address: ❸ Password: Password
    (again): Superuser created successfully. (ll_env)learning_log$ [PRE234] from django.contrib
    import admin  # Register your models here. [PRE235] from django.contrib import
    admin  from .models import Topic  admin.site.register(Topic) [PRE236] from django.db
    import models  class Topic(models.Model):   *--snip--*  ❶ class Entry(models.Model):     """Something
    specific learned about a topic.""" ❷     topic = models.ForeignKey(Topic, on_delete=models.CASCADE)
    ❸     text = models.TextField()     date_added = models.DateTimeField(auto_now_add=True)  ❹     class
    Meta:         verbose_name_plural = ''entries''      def __str__(self):         """Return
    a simple string representing the entry.""" ❺         return f"{self.text[:50]}..."
    [PRE237] (ll_env)learning_log$ **python manage.py makemigrations learning_logs**
    Migrations for ''learning_logs'': ❶   learning_logs/migrations/0002_entry.py     -
    Create model Entry (ll_env)learning_log$ **python manage.py migrate** Operations
    to perform:  `--snip--` ❷   Applying learning_logs.0002_entry... OK [PRE238] from
    django.contrib import admin  from .models import Topic, Entry  admin.site.register(Topic)
    admin.site.register(Entry) [PRE239] (ll_env)learning_log$ **python manage.py shell**
    ❶ >>> **from learning_logs.models import Topic** >>> **Topic.objects.all()** <QuerySet
    [<Topic: Chess>, <Topic: Rock Climbing>]> [PRE240] >>> **topics = Topic.objects.all()**
    >>> **for topic in topics:** ...     **print(topic.id, topic)** ... 1 Chess 2
    Rock Climbing [PRE241] >>> **t = Topic.objects.get(id=1)** >>> **t.text** ''Chess''
    >>> **t.date_added** datetime.datetime(2022, 5, 20, 3, 33, 36, 928759,     tzinfo=datetime.timezone.utc)
    [PRE242] ❶ >>> **t.entry_set.all()** <QuerySet [<Entry: The opening is the first
    part of the game, roughly...>, <Entry: In the opening phase of the game, it''s
    important t...>]> [PRE243] ❶ from django.contrib import admin from django.urls
    import path  ❷ urlpatterns = [ ❸     path(''admin/'', admin.site.urls), ] [PRE244]
    from django.contrib import admin from django.urls import path, include  urlpatterns
    = [  path(''admin/'', admin.site.urls),   path('''', include(''learning_logs.urls'')),
    ] [PRE245] ❶ """Defines URL patterns for learning_logs."""  ❷ from django.urls
    import path  ❸ from . import views  ❹ app_name = ''learning_logs'' ❺ urlpatterns
    = [     # Home page ❻     path('''', views.index, name=''index''), ] [PRE246]
    from django.shortcuts import render  # Create your views here. [PRE247] from django.shortcuts
    import render  def index(request):     """The home page for Learning Log."""     return
    render(request, ''learning_logs/index.html'') [PRE248] <p>Learning Log</p>  <p>Learning
    Log helps you keep track of your learning, for any topic you''re interested in.</p>
    [PRE249] <p> ❶   <a href="{% url ''learning_logs:index'' %}">Learning Log</a>
    </p>  ❷ {% block content %}{% endblock content %} [PRE250] <a href="`link_url`">`link
    text`</a> [PRE251] ❶ {% extends ''learning_logs/base.html'' %}  ❷ {% block content
    %}  <p>Learning Log helps you keep track of your learning, for any topic you''re  interested
    in.</p> ❸ {% endblock content %} [PRE252] """Defines URL patterns for learning_logs."""
    *--snip--* urlpatterns = [  # Home page  path('''', views.index, name=''index''),     #
    Page that shows all topics.     path(''topics/'', views.topics, name=''topics''),
    ] [PRE253] from django.shortcuts import render  ❶ from .models import Topic  def
    index(request):   *--snip--*  ❷ def topics(request):     """Show all topics."""
    ❸     topics = Topic.objects.order_by(''date_added'') ❹     context = {''topics'':
    topics} ❺     return render(request, ''learning_logs/topics.html'', context) [PRE254]
    {% extends ''learning_logs/base.html'' %}  {% block content %}    <p>Topics</p>  ❶   <ul>
    ❷     {% for topic in topics %} ❸       <li>{{ topic.text }}</li> ❹     {% empty
    %}       <li>No topics have been added yet.</li> ❺     {% endfor %} ❻   </ul>  {%
    endblock content %} [PRE255] {% for `item` in `list` %}   `do something with each
    item` {% endfor %} [PRE256] <p> ❶   <a href="{% url ''learning_logs:index'' %}">Learning
    Log</a> - ❷   <a href="{% url ''learning_logs:topics'' %}">Topics</a> </p>  {%
    block content %}{% endblock content %} [PRE257] *--snip--* urlpatterns = [   *--snip--*     #
    Detail page for a single topic.     path(''topics/<int:topic_id>/'', views.topic,
    name=''topic''), ] [PRE258] `--snip--` ❶ def topic(request, topic_id):     """Show
    a single topic and all its entries.""" ❷     topic = Topic.objects.get(id=topic_id)
    ❸     entries = topic.entry_set.order_by(''-date_added'') ❹     context = {''topic'':
    topic, ''entries'': entries} ❺     return render(request, ''learning_logs/topic.html'',
    context) [PRE259] {% extends ''learning_logs/base.html'' %}  {% block content
    %}  ❶   <p>Topic: {{ topic.text }}</p>    <p>Entries:</p> ❷   <ul> ❸     {% for
    entry in entries %}       <li> ❹         <p>{{ entry.date_added|date:''M d, Y
    H:i'' }}</p> ❺         <p>{{ entry.text|linebreaks }}</p>       </li> ❻     {%
    empty %}  <li>There are no entries for this topic yet.</li>     {% endfor %}   </ul>  {%
    endblock content %} [PRE260] *--snip--*     {% for topic in topics %}       <li>         <a
    href="{% url ''learning_logs:topic'' topic.id %}">           {{ topic.text }}</a></li>       </li>  {%
    empty %} *--snip--* [PRE261] from django import forms  from .models import Topic  ❶
    class TopicForm(forms.ModelForm):     class Meta: ❷         model = Topic ❸         fields
    = [''text''] ❹         labels = {''text'': ''''} [PRE262] *--snip--* urlpatterns
    = [   *--snip--*   # Page for adding a new topic.     path(''new_topic/'', views.new_topic,
    name=''new_topic''), ] [PRE263] from django.shortcuts import render, redirect  from
    .models import Topic from .forms import TopicForm  *--snip--* def new_topic(request):     """Add
    a new topic.""" ❶     if request.method != ''POST'':         # No data submitted;
    create a blank form. ❷         form = TopicForm()     else:         # POST data
    submitted; process data. ❸         form = TopicForm(data=request.POST) ❹         if
    form.is_valid(): ❺             form.save() ❻             return redirect(''learning_logs:topics'')      #
    Display a blank or invalid form. ❼     context = {''form'': form}     return render(request,
    ''learning_logs/new_topic.html'', context) [PRE264] {% extends "learning_logs/base.html"
    %}  {% block content %}   <p>Add a new topic:</p>  ❶   <form action="{% url ''learning_logs:new_topic''
    %}" method=''post''> ❷     {% csrf_token %} ❸     {{ form.as_div }} ❹     <button
    name="submit">Add topic</button>   </form>  {% endblock content %} [PRE265] {%
    extends "learning_logs/base.html" %}  {% block content %}   <p>Topics</p>   <ul>   *--snip--*  </ul>    <a
    href="{% url ''learning_logs:new_topic'' %}">Add a new topic</a>  {% endblock
    content %} [PRE266] from django import forms  from .models import Topic, Entry  class
    TopicForm(forms.ModelForm):   *--snip--*  class EntryForm(forms.ModelForm):     class
    Meta:         model = Entry         fields = [''text''] ❶         labels = {''text'':
    ''''} ❷         widgets = {''text'': forms.Textarea(attrs={''cols'': 80})} [PRE267]
    *--snip--* urlpatterns = [   *--snip--*     # Page for adding a new entry.     path(''new_entry/<int:topic_id>/'',
    views.new_entry, name=''new_entry''), ] [PRE268] from django.shortcuts import
    render, redirect  from .models import Topic from .forms import TopicForm, EntryForm  *--snip--*
    def new_entry(request, topic_id):     """Add a new entry for a particular topic."""
    ❶     topic = Topic.objects.get(id=topic_id)  ❷     if request.method != ''POST'':         #
    No data submitted; create a blank form. ❸         form = EntryForm()     else:         #
    POST data submitted; process data. ❹         form = EntryForm(data=request.POST)         if
    form.is_valid(): ❺             new_entry = form.save(commit=False) ❻             new_entry.topic
    = topic             new_entry.save() ❼             return redirect(''learning_logs:topic'',
    topic_id=topic_id)      # Display a blank or invalid form.     context = {''topic'':
    topic, ''form'': form}     return render(request, ''learning_logs/new_entry.html'',
    context) [PRE269] {% extends "learning_logs/base.html" %}  {% block content %}  ❶   <p><a
    href="{% url ''learning_logs:topic'' topic.id %}">{{ topic }}</a></p>    <p>Add
    a new entry:</p> ❷   <form action="{% url ''learning_logs:new_entry'' topic.id
    %}" method=''post''>     {% csrf_token %}     {{ form.as_div }}     <button name=''submit''>Add
    entry</button>   </form>  {% endblock content %} [PRE270] {% extends "learning_logs/base.html"
    %}  {% block content %}   <p>Topic: {{ topic }}</p>   <p>Entries:</p>   <p>     <a
    href="{% url ''learning_logs:new_entry'' topic.id %}">Add new entry</a>   </p>   <ul>   *--snip--*  </ul>  {%
    endblock content %} [PRE271] *--snip--* urlpatterns = [   *--snip--*     # Page
    for editing an entry.     path(''edit_entry/<int:entry_id>/'', views.edit_entry,
    name=''edit_entry''), ] [PRE272] from django.shortcuts import render, redirect  from
    .models import Topic, Entry from .forms import TopicForm, EntryForm *--snip--*  def
    edit_entry(request, entry_id):     """Edit an existing entry.""" ❶     entry =
    Entry.objects.get(id=entry_id)     topic = entry.topic      if request.method
    != ''POST'':         # Initial request; pre-fill form with the current entry.
    ❷         form = EntryForm(instance=entry)     else:         # POST data submitted;
    process data. ❸         form = EntryForm(instance=entry, data=request.POST)         if
    form.is_valid(): ❹             form.save() ❺             return redirect(''learning_logs:topic'',
    topic_id=topic.id)      context = {''entry'': entry, ''topic'': topic, ''form'':
    form}     return render(request, ''learning_logs/edit_entry.html'', context) [PRE273]
    {% extends "learning_logs/base.html" %}  {% block content %}    <p><a href="{%
    url ''learning_logs:topic'' topic.id %}">{{ topic }}</a></p>    <p>Edit entry:</p>  ❶   <form
    action="{% url ''learning_logs:edit_entry'' entry.id %}" method=''post''>     {%
    csrf_token %}     {{ form.as_div }} ❷     <button name="submit">Save changes</button>   </form>  {%
    endblock content %} [PRE274] *--snip--*  {% for entry in entries %}  <li>  <p>{{
    entry.date_added|date:''M d, Y H:i'' }}</p>  <p>{{ entry.text|linebreaks }}</p>   <p>           <a
    href="{% url ''learning_logs:edit_entry'' entry.id %}">            Edit entry</a></p>  </li>
    *--snip--* [PRE275] (ll_env)learning_log$ **python manage.py startapp accounts**
    (ll_env)learning_log$ **ls** ❶ accounts db.sqlite3 learning_logs ll_env ll_project
    manage.py (ll_env)learning_log$ **ls accounts** ❷ __init__.py admin.py apps.py
    migrations models.py tests.py views.py [PRE276] *--snip--* INSTALLED_APPS = [  #
    My apps  ''learning_logs'',     ''accounts'',   # Default django apps.   *--snip--*
    ] *--snip--* [PRE277] from django.contrib import admin from django.urls import
    path, include  urlpatterns = [  path(''admin/'', admin.site.urls),     path(''accounts/'',
    include(''accounts.urls'')),  path('''', include(''learning_logs.urls'')), ] [PRE278]
    """Defines URL patterns for accounts."""  from django.urls import path, include  app_name
    = ''accounts'' urlpatterns = [     # Include default auth urls.     path('''',
    include(''django.contrib.auth.urls'')), ] [PRE279] {% extends ''learning_logs/base.html''
    %}  {% block content %}  ❶   {% if form.errors %}     <p>Your username and password
    didn''t match. Please try again.</p>   {% endif %}  ❷   <form action="{% url ''accounts:login''
    %}" method=''post''>     {% csrf_token %} ❸     {{ form.as_div }}  ❹     <button
    name="submit">Log in</button>   </form>  {% endblock content %} [PRE280] *--snip--*
    # My settings. LOGIN_REDIRECT_URL = ''learning_logs:index'' [PRE281] <p>  <a href="{%
    url ''learning_logs:index'' %}">Learning Log</a> -   <a href="{% url ''learning_logs:topics''
    %}">Topics</a> - ❶   {% if user.is_authenticated %} ❷     Hello, {{ user.username
    }}.   {% else %} ❸     <a href="{% url ''accounts:login'' %}">Log in</a>   {%
    endif %} </p>  {% block content %}{% endblock content %} [PRE282] *--snip--* {%
    block content %}{% endblock content %}  {% if user.is_authenticated %} ❶   <hr
    /> ❷   <form action="{% url ''accounts:logout'' %}" method=''post''>     {% csrf_token
    %}     <button name=''submit''>Log out</button>   </form> {% endif %} [PRE283]
    *--snip--* # My settings. LOGIN_REDIRECT_URL = ''learning_logs:index'' LOGOUT_REDIRECT_URL
    = ''learning_logs:index'' [PRE284] """Defines URL patterns for accounts."""  from
    django.urls import path, include  from . import views  app_name = accounts urlpatterns
    = [  # Include default auth urls.  path('''', include(''django.contrib.auth.urls'')),     #
    Registration page.     path(''register/'', views.register, name=''register''),
    ] [PRE285] from django.shortcuts import render, redirect from django.contrib.auth
    import login from django.contrib.auth.forms import UserCreationForm  def register(request):     """Register
    a new user."""     if request.method != ''POST'':         # Display blank registration
    form. ❶         form = UserCreationForm()     else:         # Process completed
    form. ❷         form = UserCreationForm(data=request.POST)  ❸         if form.is_valid():
    ❹             new_user = form.save()             # Log the user in and then redirect
    to home page. ❺             login(request, new_user) ❻             return redirect(''learning_logs:index'')      #
    Display a blank or invalid form.     context = {''form'': form}     return render(request,
    ''registration/register.html'', context) [PRE286] {% extends "learning_logs/base.html"
    %}  {% block content %}    <form action="{% url ''accounts:register'' %}" method=''post''>     {%
    csrf_token %}     {{ form.as_div }}      <button name="submit">Register</button>   </form>  {%
    endblock content %} [PRE287] *--snip--*  {% if user.is_authenticated %}  Hello,
    {{ user.username }}.  {% else %}   <a href="{% url ''accounts:register'' %}">Register</a>
    -  <a href="{% url ''accounts:login'' %}">Log in</a>  {% endif %} *--snip--* [PRE288]
    from django.shortcuts import render, redirect from django.contrib.auth.decorators
    import login_required  from .models import Topic, Entry *--snip--*  @login_required
    def topics(request):  """Show all topics."""   *--snip--* [PRE289] *--snip--*
    # My settings. LOGIN_REDIRECT_URL = ''learning_logs:index'' LOGOUT_REDIRECT_URL
    = ''learning_logs:index'' LOGIN_URL = ''accounts:login'' [PRE290] *--snip--* @login_required
    def topics(request):   *--snip--*  @login_required def topic(request, topic_id):   *--snip--*  @login_required
    def new_topic(request):   *--snip--*  @login_required def new_entry(request, topic_id):   *--snip--*  @login_required
    def edit_entry(request, entry_id):   *--snip--* [PRE291] from django.db import
    models from django.contrib.auth.models import User  class Topic(models.Model):  """A
    topic the user is learning about."""  Text = models.CharField(max_length=200)  date_added
    = models.DateTimeField(auto_now_add=True)     owner = models.ForeignKey(User,
    on_delete=models.CASCADE)   def __str__(self):  """Return a string representing
    the topic."""  Return self.text  class Entry(models.Model):   *--snip--* [PRE292]
    (ll_env)learning_log$ **python manage.py shell** ❶ >>> **from django.contrib.auth.models
    import User** ❷ >>> **User.objects.all()** <QuerySet [<User: ll_admin>, <User:
    eric>, <User: willie>]> ❸ >>> **for user in User.objects.all():** ...     **print(user.username,
    user.id)** ... ll_admin 1 eric 2 willie 3 >>> [PRE293] ❶ (ll_env)learning_log$
    **python manage.py makemigrations learning_logs** ❷ It is impossible to add a
    non-nullable field ''owner'' to topic without specifying a default. This is because...
    ❸ Please select a fix:  1) Provide a one-off default now (will be set on all existing
    rows with a     null value for this column)  2) Quit and manually define a default
    value in models.py. ❹ Select an option: **1** ❺ Please enter the default value
    now, as valid Python The datetime and django.utils.timezone modules are available...
    Type ''exit'' to exit this prompt ❻ >>> **1** Migrations for ''learning_logs'':   learning_logs/migrations/0003_topic_owner.py
    - Add field owner to topic (ll_env)learning_log$ [PRE294] (ll_env)learning_log$
    **python manage.py migrate** Operations to perform:   Apply all migrations: admin,
    auth, contenttypes, learning_logs, sessions Running migrations: ❶   Applying learning_logs.0003_topic_owner...
    OK (ll_env)learning_log$ [PRE295] >>> **from learning_logs.models import Topic**
    >>> **for topic in Topic.objects.all():** ...     **print(topic, topic.owner)**
    ... Chess ll_admin Rock Climbing ll_admin >>> [PRE296] *--snip--* @login_required
    def topics(request):  """Show all topics."""     topics = Topic.objects.filter(owner=request.user).order_by(''date_added'')  context
    = {''topics'': topics}  return render(request, ''learning_logs/topics.html'',
    context) *--snip--* [PRE297] from django.shortcuts import render, redirect from
    django.contrib.auth.decorators import login_required ❶ from django.http import
    Http404  *--snip--* @login_required def topic(request, topic_id):  """Show a single
    topic and all its entries."""  topic = Topic.objects.get(id=topic_id)     # Make
    sure the topic belongs to the current user. ❷     if topic.owner != request.user:         raise
    Http404   entries = topic.entry_set.order_by(''-date_added'')  context = {''topic'':
    topic, ''entries'': entries}  return render(request, ''learning_logs/topic.html'',
    context) *--snip--* [PRE298] *--snip--* @login_required def edit_entry(request,
    entry_id):  """Edit an existing entry."""  entry = Entry.objects.get(id=entry_id)  topic
    = entry.topic     if topic.owner != request.user:         raise Http404      if
    request.method != ''POST'':   *--snip--* [PRE299] *--snip--* @login_required def
    new_topic(request):   *--snip--*  else:  # POST data submitted; process data.  form
    = TopicForm(data=request.POST)  if form.is_valid(): ❶             new_topic =
    form.save(commit=False) ❷             new_topic.owner = request.user ❸             new_topic.save()  return
    redirect(''learning_logs:topics'')   # Display a blank or invalid form.  context
    = {''form'': form}  return render(request, ''learning_logs/new_topic.html'', context)   *--snip--*
    [PRE300] (ll_env)learning_log$ **pip install django-bootstrap5** `--snip--` Successfully
    installed beautifulsoup4-4.11.1 django-bootstrap5-21.3     soupsieve-2.3.2.post1
    [PRE301] *--snip--* INSTALLED_APPS = [  # My apps.  ''learning_logs'',  ''accounts'',      #
    Third party apps.     ''django_bootstrap5'',   # Default django apps.  ''django.contrib.admin'',   *--snip--*
    [PRE302] ❶ <!doctype html> ❷ <html lang="en"> ❸ <head>   <meta charset="utf-8">   <meta
    name="viewport" content="width=device-width, initial-scale=1"> ❹   <title>Learning
    Log</title>  ❺   {% load django_bootstrap5 %}   {% bootstrap_css %}   {% bootstrap_javascript
    %}  </head> [PRE303] *--snip--* </head> <body>  ❶   <nav class="navbar navbar-expand-md
    navbar-light bg-light mb-4 border">     <div class="container-fluid"> ❷       <a
    class="navbar-brand" href="{% url ''learning_logs:index'' %}">           Learning
    Log</a>  ❸       <button class="navbar-toggler" type="button" data-bs-toggle="collapse"         data-bs-target="#navbarCollapse"
    aria-controls="navbarCollapse"         aria-expanded="false" aria-label="Toggle
    navigation">         <span class="navbar-toggler-icon"></span>       </button>  ❹       <div
    class="collapse navbar-collapse" id="navbarCollapse"> ❺         <ul class="navbar-nav
    me-auto mb-2 mb-md-0"> ❻           <li class="nav-item"> ❼             <a class="nav-link"
    href="{% url ''learning_logs:topics'' %}">               Topics</a></li>         </ul>
    <!-- End of links on left side of navbar -->       </div> <!-- Closes collapsible
    parts of navbar -->      </div> <!-- Closes navbar''s container -->   </nav> <!--
    End of navbar -->  ❽ {% block content %}{% endblock content %}  </body> </html>
    [PRE304] <!-- This is an HTML comment. --> [PRE305]  *--snip--*  </ul> <!-- End
    of links on left side of navbar -->          <!-- Account-related links --> ❶         <ul
    class="navbar-nav ms-auto mb-2 mb-md-0">  ❷           {% if user.is_authenticated
    %}             <li class="nav-item"> ❸               <span class="navbar-text
    me-2">Hello, {{ user.username }}.                 </span></li> ❹           {%
    else %}             <li class="nav-item">               <a class="nav-link" href="{%
    url ''accounts:register'' %}">                   Register</a></li>             <li
    class="nav-item">               <a class="nav-link" href="{% url ''accounts:login''
    %}">                   Log in</a></li>           {% endif %}          </ul> <!--
    End of account-related links -->   </div> <!-- Closes collapsible parts of navbar
    -->   *--snip--* [PRE306]  *--snip--*  </ul> <!-- End of account-related links
    -->          {% if user.is_authenticated %}           <form action="{% url ''accounts:logout''
    %}" method=''post''>             {% csrf_token %} ❶             <button name=''submit''
    class=''btn btn-outline-secondary btn-sm''>                 Log out</button>           </form>         {%
    endif %}   </div> <!-- Closes collapsible parts of navbar -->   *--snip--* [PRE307]  *--snip--*  </nav>
    <!-- End of navbar -->  ❶   <main class="container"> ❷     <div class="pb-2 mb-2
    border-bottom">       {% block page_header %}{% endblock page_header %}     </div>
    ❸     <div>       {% block content %}{% endblock content %}     </div>   </main>  </body>
    </html> [PRE308] {% extends "learning_logs/base.html" %}  ❶ {% block page_header
    %} ❷   <div class="p-3 mb-4 bg-light border rounded-3">     <div class="container-fluid
    py-4"> ❸       <h1 class="display-3">Track your learning.</h1>  ❹       <p class="lead">Make
    your own Learning Log, and keep a list of the       topics you''re learning about.
    Whenever you learn something new       about a topic, make an entry summarizing
    what you''ve learned.</p>  ❺       <a class="btn btn-primary btn-lg mt-1"         href="{%
    url ''accounts:register'' %}">Register &raquo;</a>     </div>   </div> {% endblock
    page_header %} [PRE309] {% extends ''learning_logs/base.html'' %} ❶ {% load django_bootstrap5
    %}  ❷ {% block page_header %}   <h2>Log in to your account.</h2> {% endblock page_header
    %}  {% block content %}   <form action="{% url ''accounts:login'' %}" method=''post''>  {%
    csrf_token %} ❸     {% bootstrap_form form %} ❹     {% bootstrap_button button_type="submit"
    content="Log in" %}  </form>  {% endblock content %} [PRE310] {% extends ''learning_logs/base.html''
    %}  {% block page_header %} ❶   <h1>Topics</h1> {% endblock page_header %}  {%
    block content %}  ❷   <ul class="list-group border-bottom pb-2 mb-4">  {% for
    topic in topics %} ❸       <li class="list-group-item border-0">         <a href="{%
    url ''learning_logs:topic'' topic.id %}">           {{ topic.text }}</a>       </li>  {%
    empty %} ❹       <li class="list-group-item border-0">No topics have been added
    yet.</li>  {% endfor %}  </ul>   <a href="{% url ''learning_logs:new_topic'' %}">Add
    a new topic</a>  {% endblock content %} [PRE311] {% extends ''learning_logs/base.html''
    %}  ❶ {% block page_header %}   <h1>{{ topic.text }}</h1> {% endblock page_header
    %}  {% block content %}  <p>  <a href="{% url ''learning_logs:new_entry'' topic.id
    %}">Add new entry</a>  </p>   {% for entry in entries %} ❷     <div class="card
    mb-3">       <!-- Card header with timestamp and edit link --> ❸       <h4 class="card-header">         {{
    entry.date_added|date:''M d, Y H:i'' }} ❹         <small><a href="{% url ''learning_logs:edit_entry''
    entry.id %}">           edit entry</a></small>       </h4>       <!-- Card body
    with entry text --> ❺       <div class="card-body">{{ entry.text|linebreaks }}</div>     </div>  {%
    empty %} ❻     <p>There are no entries for this topic yet.</p>  {% endfor %}  {%
    endblock content %} [PRE312] $ curl -fsS https://platform.sh/cli/installer | php
    [PRE313] (ll_env)learning_log$ **pip install platformshconfig** [PRE314] (ll_env)learning_log$
    **pip freeze > requirements.txt** [PRE315] asgiref==3.5.2 beautifulsoup4==4.11.1
    Django==4.1 django-bootstrap5==21.3 platformshconfig==2.4.0 soupsieve==2.3.2.post1
    sqlparse==0.4.2 [PRE316] # Requirements for live project. gunicorn psycopg2 [PRE317]
    ❶ name: "ll_project" type: "python:3.10"  ❷ relationships:     database: "db:postgresql"  #
    The configuration of the app when it''s exposed to the web. ❸ web:     upstream:         socket_family:
    unix     commands: ❹         start: "gunicorn -w 4 -b unix:$SOCKET ll_project.wsgi:application"
    ❺     locations:         "/":             passthru: true         "/static":  root:
    "static"             expires: 1h             allow: true  # The size of the persistent
    disk of the application (in MB). ❻ disk: 512 [PRE318] *--snip--* disk: 512  #
    Set a local read/write mount for logs. ❶ mounts:     "logs":         source: local         source_path:
    logs  # The hooks executed at various points in the lifecycle of the application.
    ❷ hooks:     build: | ❸         pip install --upgrade pip         pip install
    -r requirements.txt         pip install -r requirements_remote.txt          mkdir
    logs ❹         python manage.py collectstatic         rm -rf logs ❺     deploy:
    |         python manage.py migrate [PRE319] # Each route describes how an incoming
    URL will be processed by Platform.sh.  "https://{default}/":     type: upstream     upstream:
    "ll_project:http"  "https://www.{default}/":     type: redirect     to: "https://{default}/"
    [PRE320] # Each service listed will be deployed in its own container as part of
    your #   Platform.sh project.  db:     type: postgresql:12     disk: 1024 [PRE321]
    *--snip--* # Platform.sh settings. ❶ from platformshconfig import Config  config
    = Config() ❷ if config.is_valid_platform(): ❸     ALLOWED_HOSTS.append(''.platformsh.site'')  ❹     if
    config.appDir:         STATIC_ROOT = Path(config.appDir) / ''static'' ❺     if
    config.projectEntropy:         SECRET_KEY = config.projectEntropy      if not
    config.in_build(): ❻         db_settings = config.credentials(''database'')         DATABASES
    = {             ''default'': {                 ''ENGINE'': ''django.db.backends.postgresql'',                 ''NAME'':
    db_settings[''path''],                 ''USER'': db_settings[''username''],                 ''PASSWORD'':
    db_settings[''password''],                 ''HOST'': db_settings[''host''],                 ''PORT'':
    db_settings[''port''],             },         } [PRE322] (ll_env)learning_log$
    **git --version** git version 2.30.1 (Apple Git-130) [PRE323] (ll_env)learning_log$
    **git config --global user.name "eric"** (ll_env)learning_log$ **git config --global
    user.email "eric@example.com"** [PRE324] ll_env/ __pycache__/ *.sqlite3 [PRE325]
    ❶ (ll_env)learning_log$ **git init** Initialized empty Git repository in /Users/eric/.../learning_log/.git/
    ❷ (ll_env)learning_log$ **git add .** ❸ (ll_env)learning_log$ **git commit -am
    "Ready for deployment to Platform.sh."** [main (root-commit) c7ffaad] Ready for
    deployment to Platform.sh.  42 files changed, 879 insertions(+)  create mode 100644
    .gitignore  create mode 100644 .platform.app.yaml  `--snip--`  create mode 100644
    requirements_remote.txt ❹ (ll_env)learning_log$ **git status** On branch main
    nothing to commit, working tree clean (ll_env)learning_log$ [PRE326] (ll_env)learning_log$
    **platform login** Opened URL: http://127.0.0.1:5000 Please use the browser to
    log in. `--snip--` ❶ Do you want to create an SSH configuration file automatically?
    [Y/n] **Y** [PRE327] (ll_env)learning_log$ **platform create** * Project title
    (--title) Default: Untitled Project ❶ > **ll_project**  * Region (--region) The
    region where the project will be hosted   `--snip--`   [us-3.platform.sh] Moses
    Lake, United States (AZURE) [514 gC02eq/kWh] ❷ > **us-3.platform.sh** * Plan (--plan)
    Default: development Enter a number to choose:   [0] development   `--snip--`
    ❸ > **0**  * Environments (--environments) The number of environments Default:
    3 ❹ > **3**  * Storage (--storage) The amount of storage per environment, in GiB
    Default: 5 ❺ > **5** [PRE328] Default branch (--default-branch) The default Git
    branch name for the project (the production environment) Default: main ❶ > **main**  Git
    repository detected: /Users/eric/.../learning_log ❷ Set the new project ll_project
    as the remote for this repository? [Y/n] **Y**  The estimated monthly cost of
    this project is: $10 USD ❸ Are you sure you want to continue? [Y/n] **Y**  The
    Platform.sh Bot is activating your project        ▀▄   ▄▀     █▄█▀███▀█▄█     ▀█████████▀      ▄▀     ▀▄  The
    project is now ready! [PRE329] (ll_env)learning_log$ **platform push** ❶ Are you
    sure you want to push to the main (production) branch? [Y/n] **Y** `--snip--`
    The authenticity of host ''git.us-3.platform.sh (...)'' can''t be established.
    RSA key fingerprint is SHA256:Tvn...7PM ❷ Are you sure you want to continue connecting
    (yes/no/[fingerprint])? **Y** Pushing HEAD to the existing environment main   `--snip--`   To
    git.us-3.platform.sh:3pp3mqcexhlvy.git    * [new branch]      HEAD -> main [PRE330]
    (ll_env)learning_log$ **platform url** Enter a number to open a URL   [0] https://main-bvxea6i-wmye2fx7wwqgu.us-3.platformsh.site/   `--snip--`  >
    **0** [PRE331] (ll_env)learning_log$ **platform environment:ssh**   ___ _      _    __                    _
    | _ \ |__ _| |_ / _|___ _ _ _ __    __| |_ |  _/ / _` |  _|  _/ _ \ ''_| ''  \
    _(_-< '' \ |_| |_\__,_|\__|_| \___/_| |_|_|_(_)__/_||_|   Welcome to Platform.sh.  ❶
    web@ll_project.0:~$ **ls** accounts  learning_logs  ll_project  logs  manage.py  requirements.txt     requirements_remote.txt  static
    ❷ web@ll_project.0:~$ **python manage.py createsuperuser** ❸ Username (leave blank
    to use ''web''): **ll_admin_live** Email address: Password: Password (again):
    Superuser created successfully. ❹ web@ll_project.0:~$ **exit** logout Connection
    to ssh.us-3.platform.sh closed. ❺ (ll_env)learning_log$ [PRE332] *--snip--* if
    config.is_valid_platform():  ALLOWED_HOSTS.append(''.platformsh.site'')     DEBUG
    = False     *--snip--* [PRE333] ❶ (ll_env)learning_log$ **git commit -am "Set
    DEBUG False on live site."** [main d2ad0f7] Set DEBUG False on live site.   1
    file changed, 1 insertion(+) ❷ (ll_env)learning_log$ **git status** On branch
    main nothing to commit, working tree clean (ll_env)learning_log$ [PRE334] (ll_env)learning_log$
    **platform push** Are you sure you want to push to the main (production) branch?
    [Y/n] **Y** Pushing HEAD to the existing environment main `--snip--`   To git.us-3.platform.sh:wmye2fx7wwqgu.git      fce0206..d2ad0f7  HEAD
    -> main (ll_env)learning_log$ [PRE335] {% extends "learning_logs/base.html" %}  {%
    block page_header %}   <h2>The item you requested is not available. (404)</h2>
    {% endblock page_header %} [PRE336] {% extends "learning_logs/base.html" %}  {%
    block page_header %}   <h2>There has been an internal error. (500)</h2> {% endblock
    page_header %} [PRE337] *--snip--* TEMPLATES = [  {  ''BACKEND'': ''django.template.backends.django.DjangoTemplates'',         ''DIRS'':
    [BASE_DIR / ''templates''],  ''APP_DIRS'': True,   *--snip--*  }, ] *--snip--*
    [PRE338] ❶ (ll_env)learning_log$ **git add .** ❷ (ll_env)learning_log$ **git commit
    -am "Added custom 404 and 500 error pages."**  3 files changed, 11 insertions(+),
    1 deletion(-)  create mode 100644 templates/404.html  create mode 100644 templates/500.html
    ❸ (ll_env)learning_log$ **platform push** `--snip--`   To git.us-3.platform.sh:wmye2fx7wwqgu.git      d2ad0f7..9f042ef  HEAD
    -> main (ll_env)learning_log$ [PRE339] (ll_env)learning_log$ **platform project:delete**
    [PRE340] (ll_env)learning_log$ **git remote** platform (ll_env)learning_log$ **git
    remote remove platform** [PRE341]`'
  prefs: []
  type: TYPE_NORMAL
