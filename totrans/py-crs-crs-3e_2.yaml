- en: Part II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分
- en: Projects
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 项目
- en: Congratulations! You now know enough about Python to start building interactive
    and meaningful projects. Creating your own projects will teach you new skills
    and solidify your understanding of the concepts introduced in Part I.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！现在你已经掌握了足够的 Python 知识，可以开始构建互动性强且富有意义的项目。创建自己的项目将帮助你学习新技能，并加深对第一部分所介绍概念的理解。
- en: Part II contains three kinds of projects, and you can choose to do any or all
    of these projects in whichever order you like. Here’s a brief description of each
    project to help you decide which to dig into first.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分包含三种项目，你可以按任意顺序选择做任何一个或所有这些项目。以下是每个项目的简要描述，帮助你决定先做哪个。
- en: 'Alien Invasion: Making a Game with Python'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外星入侵：用 Python 制作游戏
- en: In the Alien Invasion project (**Chapters 12**, **13**, and **14**), you’ll
    use the Pygame package to develop a 2D game. The goal of the game is to shoot
    down a fleet of aliens as they drop down the screen, in levels that increase in
    speed and difficulty. At the end of the project, you’ll have learned skills that
    will enable you to develop your own 2D games in Pygame.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在外星入侵项目中（**第12章**、**第13章**和**第14章**），你将使用 Pygame 包来开发一个 2D 游戏。游戏的目标是击落从屏幕上方掉下来的外星人舰队，随着游戏的进行，关卡速度和难度会逐步增加。项目结束时，你将学会开发自己的
    2D 游戏所需的技能。
- en: Data Visualization
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化
- en: The Data Visualization projects start in **Chapter 15**, where you’ll learn
    to generate data and create a series of functional and beautiful visualizations
    of that data using Matplotlib and Plotly. **Chapter 16** teaches you to access
    data from online sources and feed it into a visualization package to create plots
    of weather data and a map of global earthquake activity. Finally, **Chapter 17**
    shows you how to write a program to automatically download and visualize data.
    Learning to make visualizations allows you to explore the field of data science,
    which is one of the highest-demand areas of programming today.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化项目从**第15章**开始，在这一章中，你将学习如何生成数据并使用 Matplotlib 和 Plotly 创建一系列功能强大且美观的数据可视化。**第16章**教你如何从在线源获取数据，并将其输入到可视化包中，生成天气数据图表和全球地震活动地图。最后，**第17章**展示了如何编写程序自动下载和可视化数据。学习制作可视化图表将让你探索数据科学领域，这是目前编程中需求量最大的领域之一。
- en: Web Applications
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 应用
- en: In the Web Application project (**Chapters 18**, **19**, and **20**), you’ll
    use the Django package to create a simple web application that allows users to
    keep a journal about different topics they’ve been learning about. Users will
    create an account with a username and password, enter a topic, and then make entries
    about what they’re learning. You’ll also deploy your app to a remote server so
    anyone in the world can access it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 应用项目中（**第18章**、**第19章**和**第20章**），你将使用 Django 包来创建一个简单的 web 应用，允许用户记录他们正在学习的不同主题。用户将创建一个账户，设置用户名和密码，输入一个主题，然后记录他们正在学习的内容。你还将把应用部署到远程服务器，这样全世界的人都能访问它。
- en: After completing this project, you’ll be able to start building your own simple
    web applications, and you’ll be ready to delve into more thorough resources on
    building applications with Django.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个项目后，你将能够开始构建自己的简单 web 应用，并且准备深入了解更多关于使用 Django 构建应用的资源。
- en: '12'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: A Ship That Fires Bullets
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 发射子弹的舰船
- en: '![](Images/chapterart.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Let’s build a game called *Alien Invasion*! We’ll use Pygame, a collection of
    fun, powerful Python modules that manage graphics, animation, and even sound,
    making it easier for you to build sophisticated games. With Pygame handling tasks
    like drawing images to the screen, you can focus on the higher-level logic of
    game dynamics.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来制作一个叫做*外星入侵*的游戏！我们将使用 Pygame，这是一个包含有趣而强大的 Python 模块集合，可以管理图形、动画，甚至声音，帮助你更容易地构建复杂的游戏。通过
    Pygame 处理像绘制图像到屏幕这样的任务，你可以专注于游戏动态的更高级逻辑。
- en: In this chapter, you’ll set up Pygame and then create a rocket ship that moves
    right and left and fires bullets in response to player input. In the next two
    chapters, you’ll create a fleet of aliens to destroy, and then continue to refine
    the game by setting limits on the number of ships you can use and adding a scoreboard.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将设置 Pygame，然后创建一艘能够左右移动并根据玩家输入发射子弹的火箭。在接下来的两章中，你将创建一个外星人舰队来摧毁，然后通过限制可用舰船数量并添加记分板来进一步完善游戏。
- en: While building this game, you’ll also learn how to manage large projects that
    span multiple files. We’ll refactor a lot of code and manage file contents to
    organize the project and make the code efficient.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作这个游戏的过程中，你还将学会如何管理跨多个文件的大型项目。我们会重构大量代码并管理文件内容，以便组织项目并提高代码效率。
- en: Making games is an ideal way to have fun while learning a language. It’s deeply
    satisfying to play a game you wrote, and writing a simple game will teach you
    a lot about how professionals develop games. As you work through this chapter,
    enter and run the code to identify how each code block contributes to overall
    gameplay. Experiment with different values and settings to better understand how
    to refine interactions in your games.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 制作游戏是学习一门语言的理想方式，同时还能玩得很开心。能玩自己写的游戏非常令人满足，写一个简单的游戏将教你很多关于专业开发人员如何制作游戏的知识。在你完成本章时，输入并运行代码，了解每个代码块如何促进整体游戏玩法。通过实验不同的值和设置，更好地理解如何完善游戏中的互动。
- en: Planning Your Project
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目规划
- en: When you’re building a large project, it’s important to prepare a plan before
    you begin to write code. Your plan will keep you focused and make it more likely
    that you’ll complete the project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你构建大型项目时，开始编写代码之前制定一个计划非常重要。你的计划将帮助你保持专注，并增加你完成项目的可能性。
- en: 'Let’s write a description of the general gameplay. Although the following description
    doesn’t cover every detail of *Alien Invasion*, it provides a clear idea of how
    to start building the game:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个关于总体游戏玩法的描述。虽然以下描述没有涵盖*Alien Invasion*的所有细节，但它为你提供了如何开始制作游戏的清晰思路：
- en: In *Alien Invasion*, the player controls a rocket ship that appears at the bottom
    center of the screen. The player can move the ship right and left using the arrow
    keys and shoot bullets using the spacebar. When the game begins, a fleet of aliens
    fills the sky and moves across and down the screen. The player shoots and destroys
    the aliens. If the player destroys all the aliens, a new fleet appears that moves
    faster than the previous fleet. If any alien hits the player’s ship or reaches
    the bottom of the screen, the player loses a ship. If the player loses three ships,
    the game ends.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在*Alien Invasion*中，玩家控制一艘出现在屏幕底部中央的火箭船。玩家可以使用箭头键左右移动船只，使用空格键发射子弹。游戏开始时，一支外星人舰队填满了天空并在屏幕上方和下方移动。玩家射击并摧毁外星人。如果玩家摧毁了所有外星人，一支新的舰队将出现，移动速度比前一支舰队更快。如果任何外星人撞击到玩家的船只或到达屏幕底部，玩家将失去一艘船。若玩家失去三艘船，游戏结束。
- en: For the first development phase, we’ll make a ship that can move right and left
    when the player presses the arrow keys and fire bullets when the player presses
    the spacebar. After setting up this behavior, we can create the aliens and refine
    the gameplay.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发的第一阶段，我们将制作一个船只，当玩家按下箭头键时，船只可以左右移动，按下空格键时发射子弹。设置好这个行为后，我们可以创建外星人并完善游戏玩法。
- en: Installing Pygame
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Pygame
- en: 'Before you begin coding, install Pygame. We’ll do this the same way we installed
    pytest in Chapter 11: with pip. If you skipped Chapter 11 or need a refresher
    on pip, see “Installing pytest with pip” on page 210.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始编码之前，安装Pygame。我们将像第11章中安装pytest一样通过pip来安装。如果你跳过了第11章或需要回顾pip的使用方法，请参见第210页的“使用pip安装pytest”。
- en: 'To install Pygame, enter the following command at a terminal prompt:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Pygame，请在终端提示符下输入以下命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you use a command other than `python` to run programs or start a terminal
    session, such as `python3`, make sure you use that command instead.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用除`python`以外的命令来运行程序或启动终端会话，比如`python3`，请确保使用那个命令。
- en: Starting the Game Project
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始游戏项目
- en: We’ll begin building the game by creating an empty Pygame window. Later, we’ll
    draw the game elements, such as the ship and the aliens, on this window. We’ll
    also make our game respond to user input, set the background color, and load a
    ship image.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个空的Pygame窗口来开始构建游戏。稍后，我们会在这个窗口中绘制游戏元素，比如船只和外星人。我们还会让游戏响应用户输入，设置背景颜色，并加载船只图像。
- en: Creating a Pygame Window and Responding to User Input
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Pygame窗口并响应用户输入
- en: 'We’ll make an empty Pygame window by creating a class to represent the game.
    In your text editor, create a new file and save it as *alien_invasion.py*; then
    enter the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个类来表示游戏，来制作一个空的Pygame窗口。在你的文本编辑器中，创建一个新文件并将其保存为*alien_invasion.py*；然后输入以下内容：
- en: '**alien_invasion.py**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, we import the `sys` and `pygame` modules. The `pygame` module contains
    the functionality we need to make a game. We’ll use tools in the `sys` module
    to exit the game when the player quits.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入`sys`和`pygame`模块。`pygame`模块包含了制作游戏所需的功能。我们将使用`sys`模块中的工具，当玩家退出游戏时退出程序。
- en: '*Alien Invasion* starts as a class called `AlienInvasion`. In the `__init__()`
    method, the `pygame.init()` function initializes the background settings that
    Pygame needs to work properly ❶. Then we call `pygame.display.set_mode()` to create
    a display window ❷, on which we’ll draw all the game’s graphical elements. The
    argument `(1200, 800)` is a tuple that defines the dimensions of the game window,
    which will be 1,200 pixels wide by 800 pixels high. (You can adjust these values
    depending on your display size.) We assign this display window to the attribute
    `self.screen`, so it will be available in all methods in the class.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*外星人入侵*是一个名为`AlienInvasion`的类。在`__init__()`方法中，`pygame.init()`函数初始化了 Pygame
    正常运行所需的背景设置❶。接着我们调用`pygame.display.set_mode()`来创建一个显示窗口❷，在这个窗口中我们将绘制所有的游戏图形元素。参数`(1200,
    800)`是一个元组，定义了游戏窗口的尺寸，宽度为1200像素，高度为800像素。（你可以根据显示器的尺寸调整这些值。）我们将这个显示窗口赋值给属性`self.screen`，这样它就可以在类的所有方法中使用。'
- en: The object we assigned to `self.screen` is called a surface. A *surface* in
    Pygame is a part of the screen where a game element can be displayed. Each element
    in the game, like an alien or a ship, is its own surface. The surface returned
    by `display.set_mode()` represents the entire game window. When we activate the
    game’s animation loop, this surface will be redrawn on every pass through the
    loop, so it can be updated with any changes triggered by user input.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们赋值给`self.screen`的对象被称为一个表面。在 Pygame 中，*表面*是屏幕的一部分，游戏元素可以在其上显示。游戏中的每个元素，比如外星人或飞船，都是一个独立的表面。`display.set_mode()`返回的表面代表了整个游戏窗口。当我们激活游戏的动画循环时，这个表面将在每次通过循环时被重绘，以便根据用户输入的变化更新显示内容。
- en: The game is controlled by the `run_game()` method. This method contains a `while`
    loop ❸ that runs continually. The `while` loop contains an event loop and code
    that manages screen updates. An *event* is an action that the user performs while
    playing the game, such as pressing a key or moving the mouse. To make our program
    respond to events, we write an *event loop* to *listen* for events and perform
    appropriate tasks depending on the kinds of events that occur. The `for` loop
    ❹ nested inside the `while` loop is an event loop.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏由`run_game()`方法控制。这个方法包含一个持续运行的`while`循环❸。`while`循环中包含了事件循环和管理屏幕更新的代码。*事件*是用户在玩游戏时执行的动作，例如按键或移动鼠标。为了让程序响应事件，我们编写一个*事件循环*来*监听*事件，并根据发生的事件类型执行相应的任务。`while`循环中的嵌套`for`循环❹就是一个事件循环。
- en: To access the events that Pygame detects, we’ll use the `pygame.event.get()`
    function. This function returns a list of events that have taken place since the
    last time this function was called. Any keyboard or mouse event will cause this
    `for` loop to run. Inside the loop, we’ll write a series of `if` statements to
    detect and respond to specific events. For example, when the player clicks the
    game window’s close button, a `pygame.QUIT` event is detected and we call `sys.exit()`
    to exit the game ❺.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问 Pygame 检测到的事件，我们将使用`pygame.event.get()`函数。这个函数返回自上次调用该函数以来发生的事件列表。任何键盘或鼠标事件都会触发此`for`循环。在循环内，我们会编写一系列的`if`语句来检测并响应特定事件。例如，当玩家点击游戏窗口的关闭按钮时，会检测到一个`pygame.QUIT`事件，我们会调用`sys.exit()`来退出游戏❺。
- en: The call to `pygame.display.flip()` ❻ tells Pygame to make the most recently
    drawn screen visible. In this case, it simply draws an empty screen on each pass
    through the `while` loop, erasing the old screen so only the new screen is visible.
    When we move the game elements around, `pygame.display.flip()` continually updates
    the display to show the new positions of game elements and hide the old ones,
    creating the illusion of smooth movement.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`pygame.display.flip()`❻会告诉 Pygame 将最近绘制的屏幕显示出来。在这个例子中，它在每次通过`while`循环时简单地绘制一个空白屏幕，擦除旧的屏幕内容，只显示新的屏幕。当我们移动游戏元素时，`pygame.display.flip()`会不断更新显示，展示游戏元素的新位置并隐藏旧的位置，从而创造出平滑运动的假象。
- en: At the end of the file, we create an instance of the game and then call `run_game()`.
    We place `run_game()` in an `if` block that only runs if the file is called directly.
    When you run this *alien_invasion.py* file, you should see an empty Pygame window.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的末尾，我们创建一个游戏实例，然后调用`run_game()`。我们将`run_game()`放在一个`if`块中，只有在文件被直接调用时才会运行。当你运行这个*alien_invasion.py*文件时，你应该会看到一个空的Pygame窗口。
- en: Controlling the Frame Rate
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制帧率
- en: Ideally, games should run at the same speed, or *frame rate*, on all systems.
    Controlling the frame rate of a game that can run on multiple systems is a complex
    issue, but Pygame offers a relatively simple way to accomplish this goal. We’ll
    make a clock, and ensure the clock ticks once on each pass through the main loop.
    Anytime the loop processes faster than the rate we define, Pygame will calculate
    the correct amount of time to pause so that the game runs at a consistent rate.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，游戏应该在所有系统上以相同的速度，或*帧率*运行。控制能够在多个系统上运行的游戏的帧率是一个复杂的问题，但Pygame提供了一种相对简单的方法来实现这一目标。我们将创建一个时钟，确保时钟在每次经过主循环时都滴答一次。任何时候循环处理的速度超过我们定义的速率时，Pygame都会计算出正确的暂停时间，以确保游戏以一致的速率运行。
- en: 'We’ll define the clock in the `__init__()` method:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`__init__()`方法中定义时钟：
- en: '**alien_invasion.py**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After initializing `pygame`, we create an instance of the class `Clock`, from
    the `pygame.time` module. Then we’ll make the clock tick at the end of the `while`
    loop in `run_game()`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化`pygame`后，我们创建`Clock`类的实例，来自`pygame.time`模块。然后我们会在`run_game()`中的`while`循环结束时让时钟滴答作响：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `tick()` method takes one argument: the frame rate for the game. Here I’m
    using a value of 60, so Pygame will do its best to make the loop run exactly 60
    times per second.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`tick()`方法接受一个参数：游戏的帧率。这里我使用的是60的值，Pygame会尽力确保循环每秒执行60次。'
- en: Setting the Background Color
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置背景颜色
- en: Pygame creates a black screen by default, but that’s boring. Let’s set a different
    background color. We’ll do this at the end of the `__init__()` method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Pygame默认创建一个黑色屏幕，但这太单调了。让我们设置一个不同的背景色。我们将在`__init__()`方法的末尾进行此设置。
- en: '**alien_invasion.py**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Colors in Pygame are specified as RGB colors: a mix of red, green, and blue.
    Each color value can range from 0 to 255\. The color value `(255, 0, 0)` is red,
    `(0, 255, 0)` is green, and `(0, 0, 255)` is blue. You can mix different RGB values
    to create up to 16 million colors. The color value `(230, 230, 230)` mixes equal
    amounts of red, blue, and green, which produces a light gray background color.
    We assign this color to `self.bg_color` ❶.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Pygame中的颜色是以RGB颜色指定的：红色、绿色和蓝色的混合。每个颜色值的范围是0到255。颜色值`(255, 0, 0)`是红色，`(0, 255,
    0)`是绿色，`(0, 0, 255)`是蓝色。你可以混合不同的RGB值来创建最多1600万种颜色。颜色值`(230, 230, 230)`混合了等量的红色、绿色和蓝色，产生一种浅灰色的背景色。我们将此颜色赋值给`self.bg_color`❶。
- en: 'We fill the screen with the background color using the `fill()` method ❷, which
    acts on a surface and takes only one argument: a color.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`fill()`方法❷填充屏幕背景色，该方法作用于一个表面并只接受一个参数：颜色。
- en: Creating a Settings Class
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个Settings类
- en: Each time we introduce new functionality into the game, we’ll typically create
    some new settings as well. Instead of adding settings throughout the code, let’s
    write a module called `settings` that contains a class called `Settings` to store
    all these values in one place. This approach allows us to work with just one `settings`
    object anytime we need to access an individual setting. This also makes it easier
    to modify the game’s appearance and behavior as our project grows. To modify the
    game, we’ll change the relevant values in *settings.py*, which we’ll create next,
    instead of searching for different settings throughout the project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们为游戏引入新功能时，我们通常也会创建一些新的设置。为了避免在代码中到处添加设置，我们将编写一个名为`settings`的模块，其中包含一个名为`Settings`的类，将所有这些值存储在一个地方。这种方法使我们每次需要访问单个设置时，只需操作一个`settings`对象。这也使得随着项目的增长，我们更容易修改游戏的外观和行为。为了修改游戏，我们将更改接下来要创建的*settings.py*中的相关值，而不是在整个项目中搜索不同的设置。
- en: 'Create a new file named *settings.py* inside your *alien_invasion* folder,
    and add this initial `Settings` class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的*alien_invasion*文件夹中创建一个新的文件，命名为*settings.py*，并添加这个初始的`Settings`类：
- en: '**settings.py**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To make an instance of `Settings` in the project and use it to access our settings,
    we need to modify *alien_invasion.py* as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在项目中创建`Settings`类的实例并使用它来访问我们的设置，我们需要按照以下方式修改*alien_invasion.py*：
- en: '**alien_invasion.py**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We import `Settings` into the main program file. Then we create an instance
    of `Settings` and assign it to `self.settings` ❶, after making the call to `pygame.init()`.
    When we create a screen ❷, we use the `screen_width` and `screen_height` attributes
    of `self.settings`, and then we use `self.settings` to access the background color
    when filling the screen ❸ as well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `Settings` 导入主程序文件。然后我们创建一个 `Settings` 的实例，并将其赋值给 `self.settings` ❶，在调用
    `pygame.init()` 之后。创建屏幕 ❷ 时，我们使用 `self.settings` 的 `screen_width` 和 `screen_height`
    属性，然后在填充屏幕时使用 `self.settings` 来访问背景颜色 ❸。
- en: When you run *alien_invasion.py* now you won’t yet see any changes, because
    all we’ve done is move the settings we were already using elsewhere. Now we’re
    ready to start adding new elements to the screen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在运行 *alien_invasion.py* 时，你不会看到任何变化，因为我们所做的只是将之前已经使用的设置移到其他地方。现在我们准备开始将新的元素添加到屏幕上。
- en: Adding the Ship Image
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加飞船图像
- en: Let’s add the ship to our game. To draw the player’s ship on the screen, we’ll
    load an image and then use the Pygame `blit()` method to draw the image.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将飞船添加到我们的游戏中。为了在屏幕上绘制玩家的飞船，我们将加载一张图像，然后使用 Pygame 的 `blit()` 方法来绘制图像。
- en: When you’re choosing artwork for your games, be sure to pay attention to licensing.
    The safest and cheapest way to start is to use freely licensed graphics that you
    can use and modify, from a website like [https://opengameart.org](https://opengameart.org).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为你的游戏选择艺术作品时，务必注意版权许可。最安全、最便宜的起步方式是使用可以自由使用和修改的授权图像，像 [https://opengameart.org](https://opengameart.org)
    这样的网站提供了这类资源。
- en: You can use almost any type of image file in your game, but it’s easiest when
    you use a bitmap (*.bmp*) file because Pygame loads bitmaps by default. Although
    you can configure Pygame to use other file types, some file types depend on certain
    image libraries that must be installed on your computer. Most images you’ll find
    are in *.jpg* or *.png* formats, but you can convert them to bitmaps using tools
    like Photoshop, GIMP, and Paint.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以在游戏中使用任何类型的图像文件，但使用位图 (*.bmp*) 文件最为简便，因为 Pygame 默认加载位图。虽然你可以配置 Pygame 使用其他文件类型，但某些文件类型依赖于特定的图像库，这些库必须安装在你的计算机上。大多数你能找到的图像文件都是
    *.jpg* 或 *.png* 格式，但你可以使用 Photoshop、GIMP 或 Paint 等工具将它们转换为位图。
- en: Pay particular attention to the background color in your chosen image. Try to
    find a file with a transparent or solid background that you can replace with any
    background color, using an image editor. Your games will look best if the image’s
    background color matches your game’s background color. Alternatively, you can
    match your game’s background to the image’s background.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意你选择的图像的背景颜色。尽量找一个带有透明或纯色背景的文件，你可以使用图像编辑器将其替换为任何背景颜色。如果图像的背景颜色与你游戏的背景颜色匹配，游戏的效果会更好。或者，你也可以将游戏的背景颜色与图像的背景颜色匹配。
- en: For *Alien Invasion*, you can use the file *ship.bmp* ([Figure 12-1](#figure12-1)),
    which is available in this book’s resources at [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e).
    The file’s background color matches the settings we’re using in this project.
    Make a folder called *images* inside your main *alien_invasion* project folder.
    Save the file *ship.bmp* in the *images* folder.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *Alien Invasion*，你可以使用文件 *ship.bmp*（[图 12-1](#figure12-1)），该文件在本书的资源页面提供，地址为
    [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e)。该文件的背景颜色与我们在这个项目中使用的设置相匹配。请在主
    *alien_invasion* 项目文件夹内创建一个名为 *images* 的文件夹，并将文件 *ship.bmp* 保存在 *images* 文件夹中。
- en: '![](Images/f12001.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f12001.png)'
- en: 'Figure 12-1: The ship for *Alien Invasion*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-1：*Alien Invasion* 的飞船
- en: Creating the Ship Class
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建飞船类
- en: 'After choosing an image for the ship, we need to display it on the screen.
    To use our ship, we’ll create a new `ship` module that will contain the class
    `Ship`. This class will manage most of the behavior of the player’s ship:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择了飞船的图像之后，我们需要将其显示在屏幕上。为了使用我们的飞船，我们将创建一个新的 `ship` 模块，其中包含类 `Ship`。这个类将管理玩家飞船的大部分行为：
- en: '**ship.py**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**ship.py**'
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Pygame is efficient because it lets you treat all game elements like rectangles
    (*rects*), even if they’re not exactly shaped like rectangles. Treating an element
    as a rectangle is efficient because rectangles are simple geometric shapes. When
    Pygame needs to figure out whether two game elements have collided, for example,
    it can do this more quickly if it treats each object as a rectangle. This approach
    usually works well enough that no one playing the game will notice that we’re
    not working with the exact shape of each game element. We’ll treat the ship and
    the screen as rectangles in this class.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Pygame非常高效，因为它允许你将所有游戏元素视为矩形（*rects*），即使它们的形状并不完全是矩形。将元素视为矩形是高效的，因为矩形是简单的几何形状。例如，当Pygame需要判断两个游戏元素是否发生碰撞时，如果将每个对象视为矩形，它可以更快速地进行判断。这种方法通常足够有效，以至于没有玩家会注意到我们并没有使用每个游戏元素的精确形状。我们将在这个类中将飞船和屏幕视为矩形。
- en: 'We import the `pygame` module before defining the class. The `__init__()` method
    of `Ship` takes two parameters: the `self` reference and a reference to the current
    instance of the `AlienInvasion` class. This will give `Ship` access to all the
    game resources defined in `AlienInvasion`. We then assign the screen to an attribute
    of `Ship` ❶, so we can access it easily in all the methods in this class. We access
    the screen’s `rect` attribute using the `get_rect()` method and assign it to `self.screen_rect`
    ❷. Doing so allows us to place the ship in the correct location on the screen.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在定义类之前导入了`pygame`模块。`Ship`的`__init__()`方法接受两个参数：`self`引用和`AlienInvasion`类当前实例的引用。这将使得`Ship`能够访问在`AlienInvasion`中定义的所有游戏资源。然后，我们将屏幕赋值给`Ship`的一个属性❶，这样就可以在这个类中的所有方法中轻松访问它。我们使用`get_rect()`方法访问屏幕的`rect`属性，并将其赋值给`self.screen_rect`❷。这样，我们就可以将飞船放置在屏幕上的正确位置。
- en: To load the image, we call `pygame.image.load()` ❸ and give it the location
    of our ship image. This function returns a surface representing the ship, which
    we assign to `self.image`. When the image is loaded, we call `get_rect()` to access
    the ship surface’s `rect` attribute so we can later use it to place the ship.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加载图像，我们调用`pygame.image.load()`❸并提供飞船图像的位置。此函数返回一个表示飞船的表面，我们将其赋值给`self.image`。当图像加载完成后，我们调用`get_rect()`访问飞船表面的`rect`属性，以便稍后使用它来定位飞船。
- en: When you’re working with a `rect` object, you can use the *x*- and *y*-coordinates
    of the top, bottom, left, and right edges of the rectangle, as well as the center,
    to place the object. You can set any of these values to establish the current
    position of the `rect`. When you’re centering a game element, work with the `center`,
    `centerx`, or `centery` attributes of a `rect`. When you’re working at an edge
    of the screen, work with the `top`, `bottom`, `left`, or `right` attributes. There
    are also attributes that combine these properties, such as `midbottom`, `midtop`,
    `midleft`, and `midright`. When you’re adjusting the horizontal or vertical placement
    of the `rect`, you can just use the `x` and `y` attributes, which are the *x*-
    and *y*-coordinates of its top-left corner. These attributes spare you from having
    to do calculations that game developers formerly had to do manually, and you’ll
    use them often.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理`rect`对象时，可以使用矩形的顶部、底部、左侧和右侧的* x *和* y *坐标，以及矩形的中心来定位对象。你可以设置这些值中的任何一个来确定`rect`的当前位置。当你需要将游戏元素居中时，可以操作`rect`的`center`、`centerx`或`centery`属性。当你需要在屏幕的边缘工作时，可以操作`top`、`bottom`、`left`或`right`属性。还有一些结合了这些属性的属性，如`midbottom`、`midtop`、`midleft`和`midright`。当你调整`rect`的水平或垂直位置时，你可以直接使用`x`和`y`属性，它们是矩形左上角的*
    x *和* y *坐标。这些属性让你无需像过去那样进行繁琐的计算，游戏开发者以前必须手动完成的计算现在由这些属性简化，你将会频繁使用它们。
- en: We’ll position the ship at the bottom center of the screen. To do so, make the
    value of `self.rect.midbottom` match the `midbottom` attribute of the screen’s
    `rect` ❹. Pygame uses these `rect` attributes to position the ship image so it’s
    centered horizontally and aligned with the bottom of the screen.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将飞船放置在屏幕的底部中央。为此，将`self.rect.midbottom`的值与屏幕`rect`的`midbottom`属性匹配❹。Pygame使用这些`rect`属性来定位飞船图像，使其在水平方向居中，并与屏幕的底部对齐。
- en: Finally, we define the `blitme()` method ❺, which draws the image to the screen
    at the position specified by `self.rect`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义了`blitme()`方法❺，它将图像绘制到指定位置的屏幕上，位置由`self.rect`指定。
- en: Drawing the Ship to the Screen
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将飞船绘制到屏幕上
- en: 'Now let’s update *alien_invasion.py* so it creates a ship and calls the ship’s
    `blitme()` method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新*alien_invasion.py*，使其创建一个飞船并调用飞船的`blitme()`方法：
- en: '**alien_invasion.py**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We import `Ship` and then make an instance of `Ship` after the screen has been
    created ❶. The call to `Ship()` requires one argument: an instance of `AlienInvasion`.
    The `self` argument here refers to the current instance of `AlienInvasion`. This
    is the parameter that gives `Ship` access to the game’s resources, such as the
    `screen` object. We assign this `Ship` instance to `self.ship`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`Ship`，然后在屏幕创建后实例化一个`Ship`对象❶。调用`Ship()`时需要一个参数：`AlienInvasion`的实例。这里的`self`参数指的是当前`AlienInvasion`的实例。这是允许`Ship`访问游戏资源的参数，例如`screen`对象。我们将这个`Ship`实例赋值给`self.ship`。
- en: After filling the background, we draw the ship on the screen by calling `ship.blitme()`,
    so the ship appears on top of the background ❷.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在填充背景之后，我们通过调用`ship.blitme()`将船只绘制到屏幕上，这样船只就会出现在背景之上❷。
- en: When you run *alien_invasion.py* now, you should see an empty game screen with
    the rocket ship sitting at the bottom center, as shown in [Figure 12-2](#figure12-2).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在运行*alien_invasion.py*时，应该会看到一个空的游戏画面，火箭船位于屏幕的底部中央，如[图 12-2](#figure12-2)所示。
- en: '![](Images/f12002.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f12002.png)'
- en: 'Figure 12-2: *Alien Invasion* with the ship at the bottom center of the screen'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-2：*外星入侵*游戏，船只位于屏幕底部中央
- en: 'Refactoring: The _check_events() and _update_screen() Methods'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构：`_check_events()`和`_update_screen()`方法
- en: In large projects, you’ll often refactor code you’ve written before adding more
    code. Refactoring simplifies the structure of the code you’ve already written,
    making it easier to build on. In this section, we’ll break the `run_game()` method,
    which is getting lengthy, into two helper methods. A *helper method* does work
    inside a class but isn’t meant to be used by code outside the class. In Python,
    a single leading underscore indicates a helper method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型项目中，你通常会在添加更多代码之前重构你之前编写的代码。重构可以简化你已编写代码的结构，使其更易于扩展。在本节中，我们将把越来越冗长的`run_game()`方法分解为两个辅助方法。*辅助方法*在类内部工作，但不打算被类外的代码使用。在Python中，单个前导下划线表示一个辅助方法。
- en: The _check_events() Method
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`_check_events()`方法'
- en: We’ll move the code that manages events to a separate method called `_check_events()`.
    This will simplify `run_game()` and isolate the event management loop. Isolating
    the event loop allows you to manage events separately from other aspects of the
    game, such as updating the screen.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将管理事件的代码移到一个名为`_check_events()`的独立方法中。这将简化`run_game()`，并将事件管理循环单独隔离开来。隔离事件循环使你能够将事件管理与游戏的其他方面分开，例如更新屏幕。
- en: 'Here’s the `AlienInvasion` class with the new `_check_events()` method, which
    only affects the code in `run_game()`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含新`_check_events()`方法的`AlienInvasion`类，它仅影响`run_game()`中的代码：
- en: '**alien_invasion.py**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We make a new `_check_events()` method ❷ and move the lines that check whether
    the player has clicked to close the window into this new method.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的`_check_events()`方法❷，并将检查玩家是否点击关闭窗口的代码移到这个新方法中。
- en: To call a method from within a class, use dot notation with the variable `self`
    and the name of the method ❶. We call the method from inside the `while` loop
    in `run_game()`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要从类中调用方法，可以使用点符号，结合变量`self`和方法名称❶。我们在`run_game()`中的`while`循环内调用这个方法。
- en: The _update_screen() Method
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`_update_screen()`方法'
- en: 'To further simplify `run_game()`, we’ll move the code for updating the screen
    to a separate method called `_update_screen()`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步简化`run_game()`，我们将更新屏幕的代码移到一个名为`_update_screen()`的独立方法中：
- en: '**alien_invasion.py**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We moved the code that draws the background and the ship and flips the screen
    to `_update_screen()`. Now the body of the main loop in `run_game()` is much simpler.
    It’s easy to see that we’re looking for new events, updating the screen, and ticking
    the clock on each pass through the loop.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绘制背景、船只和翻转屏幕的代码移到了`_update_screen()`方法中。现在`run_game()`主循环的主体部分变得更加简洁。很容易看出，我们在每次循环中都在寻找新的事件、更新屏幕，并且每次都在更新时钟。
- en: 'If you’ve already built a number of games, you’ll probably start out by breaking
    your code into methods like these. But if you’ve never tackled a project like
    this, you probably won’t know exactly how to structure your code at first. This
    approach gives you an idea of a realistic development process: you start out writing
    your code as simply as possible, and then refactor it as your project becomes
    more complex.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经构建过多个游戏，你可能会通过将代码分解为像这样的多个方法来开始。但如果你从未处理过这样的项目，你可能一开始并不清楚如何结构化你的代码。这种方法给了你一个现实的开发流程的概念：你一开始会尽可能简单地写代码，然后随着项目变得更加复杂，再进行重构。
- en: Now that we’ve restructured the code to make it easier to add to, we can work
    on the dynamic aspects of the game!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经重新组织了代码，使其更易于扩展，我们可以着手处理游戏的动态方面了！
- en: Piloting the Ship
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 驾驶飞船
- en: Next, we’ll give the player the ability to move the ship right and left. We’ll
    write code that responds when the player presses the right or left arrow key.
    We’ll focus first on movement to the right, and then we’ll apply the same principles
    to control movement to the left. As we add this code, you’ll learn how to control
    the movement of images on the screen and respond to user input.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将赋予玩家左右移动飞船的能力。我们将编写代码，以便玩家按下右箭头或左箭头时做出响应。我们首先专注于向右移动，然后将相同的原则应用于控制向左移动。在添加这些代码的过程中，你将学习如何控制屏幕上图像的移动并响应用户输入。
- en: Responding to a Keypress
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应按键输入
- en: Whenever the player presses a key, that keypress is registered in Pygame as
    an event. Each event is picked up by the `pygame.event.get()` method. We need
    to specify in our `_check_events()` method what kinds of events we want the game
    to check for. Each keypress is registered as a `KEYDOWN` event.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每当玩家按下某个键时，Pygame 会将该按键注册为一个事件。每个事件都由 `pygame.event.get()` 方法捕捉。我们需要在 `_check_events()`
    方法中指定我们希望游戏检查的事件类型。每个按键都被注册为一个 `KEYDOWN` 事件。
- en: 'When Pygame detects a `KEYDOWN` event, we need to check whether the key that
    was pressed is one that triggers a certain action. For example, if the player
    presses the right arrow key, we want to increase the ship’s `rect.x` value to
    move the ship to the right:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Pygame 检测到 `KEYDOWN` 事件时，我们需要检查按下的键是否触发某个特定的动作。例如，如果玩家按下右箭头键，我们希望增加飞船的 `rect.x`
    值以将飞船向右移动：
- en: '**alien_invasion.py**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Inside `_check_events()` we add an `elif` block to the event loop, to respond
    when Pygame detects a `KEYDOWN` event ❶. We check whether the key pressed, `event.key`,
    is the right arrow key ❷. The right arrow key is represented by `pygame.K_RIGHT`.
    If the right arrow key was pressed, we move the ship to the right by increasing
    the value of `self.ship.rect.x` by 1 ❸.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `_check_events()` 中，我们在事件循环里添加一个 `elif` 块，以便在 Pygame 检测到 `KEYDOWN` 事件时做出响应
    ❶。我们检查按下的键 `event.key` 是否是右箭头键 ❷。右箭头键由 `pygame.K_RIGHT` 表示。如果按下了右箭头键，我们通过将 `self.ship.rect.x`
    的值增加 1 来向右移动飞船 ❸。
- en: When you run *alien_invasion.py* now, the ship should move to the right one
    pixel every time you press the right arrow key. That’s a start, but it’s not an
    efficient way to control the ship. Let’s improve this control by allowing continuous
    movement.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 *alien_invasion.py* 时，飞船应该会在每次按下右箭头键时向右移动一个像素。虽然这已经是一个开始，但这并不是控制飞船的高效方式。我们可以通过允许连续移动来改进这种控制。
- en: Allowing Continuous Movement
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许连续移动
- en: When the player holds down the right arrow key, we want the ship to continue
    moving right until the player releases the key. We’ll have the game detect a `pygame.KEYUP`
    event so we’ll know when the right arrow key is released; then we’ll use the `KEYDOWN`
    and `KEYUP` events together with a flag called `moving_right` to implement continuous
    motion.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家按住右箭头键时，我们希望飞船继续向右移动，直到玩家松开按键。我们将让游戏检测 `pygame.KEYUP` 事件，以便知道何时松开右箭头键；然后我们将结合
    `KEYDOWN` 和 `KEYUP` 事件，以及一个名为 `moving_right` 的标志来实现连续移动。
- en: When the `moving_right` flag is `False`, the ship will be motionless. When the
    player presses the right arrow key, we’ll set the flag to `True`, and when the
    player releases the key, we’ll set the flag to `False` again.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `moving_right` 标志为 `False` 时，飞船将停止移动。当玩家按下右箭头键时，我们将把标志设置为 `True`，当玩家松开按键时，我们会将标志重新设置为
    `False`。
- en: The `Ship` class controls all attributes of the ship, so we’ll give it an attribute
    called `moving_right` and an `update()` method to check the status of the `moving_right`
    flag. The `update()` method will change the position of the ship if the flag is
    set to `True`. We’ll call this method once on each pass through the `while` loop
    to update the position of the ship.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ship` 类控制飞船的所有属性，因此我们将为它添加一个名为 `moving_right` 的属性，以及一个 `update()` 方法来检查 `moving_right`
    标志的状态。`update()` 方法将在标志被设置为 `True` 时改变飞船的位置。我们将在每次通过 `while` 循环时调用此方法，以更新飞船的位置。'
- en: 'Here are the changes to `Ship`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对 `Ship` 类的修改：
- en: '**ship.py**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**ship.py**'
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We add a `self.moving_right` attribute in the `__init__()` method and set it
    to `False` initially ❶. Then we add `update()`, which moves the ship right if
    the flag is `True` ❷. The `update()` method will be called from outside the class,
    so it’s not considered a helper method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`__init__()`方法中添加一个`self.moving_right`属性，并将其初始值设置为`False` ❶。然后我们添加`update()`方法，如果标志为`True`，则将船向右移动
    ❷。`update()`方法将在类外部调用，因此它不被视为辅助方法。
- en: 'Now we need to modify `_check_events()` so that `moving_right` is set to `True`
    when the right arrow key is pressed and `False` when the key is released:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改`_check_events()`，以便当按下右箭头键时将`moving_right`设置为`True`，并在松开该键时将其设置为`False`：
- en: '**alien_invasion.py**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we modify how the game responds when the player presses the right arrow
    key: instead of changing the ship’s position directly, we merely set `moving_right`
    to `True` ❶. Then we add a new `elif` block, which responds to `KEYUP` events
    ❷. When the player releases the right arrow key (`K_RIGHT`), we set `moving_right`
    to `False`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了游戏对玩家按下右箭头键时的响应：我们不直接改变船的位置，而是仅仅将`moving_right`设置为`True` ❶。然后我们添加一个新的`elif`块，响应`KEYUP`事件
    ❷。当玩家松开右箭头键（`K_RIGHT`）时，我们将`moving_right`设置为`False`。
- en: 'Next, we modify the `while` loop in `run_game()` so it calls the ship’s `update()`
    method on each pass through the loop:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们修改`run_game()`中的`while`循环，使其在每次循环时调用船的`update()`方法：
- en: '**alien_invasion.py**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The ship’s position will be updated after we’ve checked for keyboard events
    and before we update the screen. This allows the ship’s position to be updated
    in response to player input and ensures the updated position will be used when
    drawing the ship to the screen.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查完键盘事件并更新屏幕之前，船的位置将被更新。这使得船的位置能够响应玩家的输入，并确保更新后的位置信息在绘制船只时被使用。
- en: When you run *alien_invasion.py* and hold down the right arrow key, the ship
    should move continuously to the right until you release the key.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行*alien_invasion.py*并按住右箭头键时，船应该持续向右移动，直到你松开键盘。
- en: Moving Both Left and Right
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同时向左和向右移动
- en: 'Now that the ship can move continuously to the right, adding movement to the
    left is straightforward. Again, we’ll modify the `Ship` class and the `_check_events()`
    method. Here are the relevant changes to `__init__()` and `update()` in `Ship`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在船可以持续向右移动，添加向左的移动就变得简单了。我们将再次修改`Ship`类和`_check_events()`方法。以下是`__init__()`和`update()`方法在`Ship`中的相关修改：
- en: '**ship.py**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**ship.py**'
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In `__init__()`, we add a `self.moving_left` flag. In `update()`, we use two
    separate `if` blocks, rather than an `elif`, to allow the ship’s `rect.x` value
    to be increased and then decreased when both arrow keys are held down. This results
    in the ship standing still. If we used `elif` for motion to the left, the right
    arrow key would always have priority. Using two `if` blocks makes the movements
    more accurate when the player might momentarily hold down both keys when changing
    directions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__init__()`中，我们添加了一个`self.moving_left`标志。在`update()`中，我们使用两个独立的`if`块，而不是`elif`，以允许在按住两个箭头键时船的`rect.x`值先增加再减少。这将导致船停在原地。如果我们使用`elif`来控制向左移动，那么右箭头键会总是具有优先权。使用两个`if`块可以在玩家可能同时按住两个键改变方向时，使运动更加准确。
- en: 'We have to make two additions to `_check_events()`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`_check_events()`中做出两处修改：
- en: '**alien_invasion.py**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If a `KEYDOWN` event occurs for the `K_LEFT` key, we set `moving_left` to `True`.
    If a `KEYUP` event occurs for the `K_LEFT` key, we set `moving_left` to `False`.
    We can use `elif` blocks here because each event is connected to only one key.
    If the player presses both keys at once, two separate events will be detected.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生了`KEYDOWN`事件并按下`K_LEFT`键，我们将`moving_left`设置为`True`。如果发生`KEYUP`事件并松开`K_LEFT`键，我们将`moving_left`设置为`False`。由于每个事件仅与一个键相关联，我们可以在这里使用`elif`块。如果玩家同时按下两个键，将会检测到两个独立的事件。
- en: When you run *alien_invasion.py* now, you should be able to move the ship continuously
    to the right and left. If you hold down both keys, the ship should stop moving.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在运行*alien_invasion.py*时，你应该能够让船持续向右和向左移动。如果同时按住两个键，船应该停止移动。
- en: Next, we’ll further refine the ship’s movement. Let’s adjust the ship’s speed
    and limit how far the ship can move so it can’t disappear off the sides of the
    screen.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进一步精细调整船的移动。让我们调整船的速度，并限制船的最大移动范围，防止它消失在屏幕两侧。
- en: Adjusting the Ship’s Speed
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整船的速度
- en: 'Currently, the ship moves one pixel per cycle through the `while` loop, but
    we can take finer control of the ship’s speed by adding a `ship_speed` attribute
    to the `Settings` class. We’ll use this attribute to determine how far to move
    the ship on each pass through the loop. Here’s the new attribute in *settings.py*:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，飞船每次循环通过`while`循环时都会移动一个像素，但我们可以通过为`Settings`类添加一个`ship_speed`属性来更精细地控制飞船的速度。我们将使用这个属性来决定每次通过循环时飞船应该移动的距离。以下是*settings.py*中的新属性：
- en: '**settings.py**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We set the initial value of `ship_speed` to `1.5`. When the ship moves now,
    its position is adjusted by 1.5 pixels (rather than 1 pixel) on each pass through
    the loop.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`ship_speed`的初始值设置为`1.5`。现在飞船移动时，每经过一次循环，它的位置会调整1.5个像素（而不是1个像素）。
- en: 'We’re using a float for the speed setting to give us finer control of the ship’s
    speed when we increase the tempo of the game later on. However, `rect` attributes
    such as `x` store only integer values, so we need to make some modifications to
    `Ship`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用浮动值来设置速度，以便在后续提高游戏节奏时能更精确地控制飞船的速度。然而，`rect`属性（如`x`）仅存储整数值，因此我们需要对`Ship`进行一些修改：
- en: '**ship.py**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**ship.py**'
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We create a `settings` attribute for `Ship`, so we can use it in `update()`
    ❶. Because we’re adjusting the position of the ship by fractions of a pixel, we
    need to assign the position to a variable that can have a float assigned to it.
    You can use a float to set an attribute of a `rect`, but the `rect` will only
    keep the integer portion of that value. To keep track of the ship’s position accurately,
    we define a new `self.x` ❷. We use the `float()` function to convert the value
    of `self.rect.x` to a float and assign this value to `self.x`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`Ship`类创建了一个`settings`属性，这样我们就可以在`update()`中使用它 ❶。由于我们是通过像素的小数部分来调整飞船的位置，我们需要将位置赋值给一个可以存储浮动值的变量。你可以使用浮动值来设置`rect`的属性，但`rect`只会保留该值的整数部分。为了准确跟踪飞船的位置，我们定义了一个新的`self.x`
    ❷。我们使用`float()`函数将`self.rect.x`的值转换为浮动值，并将该值赋给`self.x`。
- en: Now when we change the ship’s position in `update()`, the value of `self.x`
    is adjusted by the amount stored in `settings.ship_speed` ❸. After `self.x` has
    been updated, we use the new value to update `self.rect.x`, which controls the
    position of the ship ❹. Only the integer portion of `self.x` will be assigned
    to `self.rect.x`, but that’s fine for displaying the ship.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们在`update()`中改变飞船的位置时，`self.x`的值会根据`settings.ship_speed`中存储的数值进行调整 ❸。在更新`self.x`后，我们使用新值来更新`self.rect.x`，该值控制飞船的位置
    ❹。只有`self.x`的整数部分会被赋值给`self.rect.x`，但这对于显示飞船的位置是足够的。
- en: Now we can change the value of `ship_speed`, and any value greater than 1 will
    make the ship move faster. This will help make the ship respond quickly enough
    to shoot down aliens, and it will let us change the tempo of the game as the player
    progresses in gameplay.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以改变`ship_speed`的值，任何大于1的值都会使飞船的速度变快。这将帮助飞船足够快速地反应，射击外星人，并且可以随着玩家的游戏进度调整游戏的节奏。
- en: Limiting the Ship’s Range
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制飞船的移动范围
- en: 'At this point, the ship will disappear off either edge of the screen if you
    hold down an arrow key long enough. Let’s correct this so the ship stops moving
    when it reaches the screen’s edge. We do this by modifying the `update()` method
    in `Ship`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果你长按方向键，飞船将会消失在屏幕的任一边缘。让我们修正这个问题，确保飞船在到达屏幕边缘时停止移动。我们通过修改`Ship`中的`update()`方法来做到这一点：
- en: '**ship.py**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**ship.py**'
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code checks the position of the ship before changing the value of `self.x`.
    The code `self.rect.right` returns the *x*-coordinate of the right edge of the
    ship’s `rect`. If this value is less than the value returned by `self.screen_rect.right`,
    the ship hasn’t reached the right edge of the screen ❶. The same goes for the
    left edge: if the value of the left side of the `rect` is greater than 0, the
    ship hasn’t reached the left edge of the screen ❷. This ensures the ship is within
    these bounds before adjusting the value of `self.x`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在改变`self.x`的值之前检查飞船的位置。代码`self.rect.right`返回飞船`rect`右边缘的*x*坐标。如果这个值小于`self.screen_rect.right`返回的值，说明飞船尚未到达屏幕的右边缘
    ❶。左边缘也是如此：如果`rect`左侧的值大于0，说明飞船还没有到达屏幕的左边缘 ❷。这样就能确保飞船在调整`self.x`的值之前，始终在这些边界范围内。
- en: When you run *alien_invasion.py* now, the ship should stop moving at either
    edge of the screen. This is pretty cool; all we’ve done is add a conditional test
    in an `if` statement, but it feels like the ship hits a wall or force field at
    either edge of the screen!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在运行*alien_invasion.py*时，飞船应该会在屏幕的边缘停止移动。这很酷；我们所做的只是添加了一个条件判断，但感觉飞船在屏幕的两端撞上了墙或力场！
- en: Refactoring _check_events()
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重构_check_events()
- en: 'The `_check_events()` method will increase in length as we continue to develop
    the game, so let’s break `_check_events()` into two separate methods: one that
    handles `KEYDOWN` events and another that handles `KEYUP` events:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 随着游戏的不断开发，`_check_events()`方法会变得越来越长，因此我们将把`_check_events()`拆分成两个独立的方法：一个处理`KEYDOWN`事件，另一个处理`KEYUP`事件：
- en: '**alien_invasion.py**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We make two new helper methods: `_check_keydown_events()` and `_check_keyup_events()`.
    Each needs a `self` parameter and an `event` parameter. The bodies of these two
    methods are copied from `_check_events()`, and we’ve replaced the old code with
    calls to the new methods. The `_check_events()` method is simpler now with this
    cleaner code structure, which will make it easier to develop further responses
    to player input.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个新的辅助方法：`_check_keydown_events()`和`_check_keyup_events()`。每个方法都需要一个`self`参数和一个`event`参数。这两个方法的代码体是从`_check_events()`复制过来的，我们将旧的代码替换为对新方法的调用。现在，`_check_events()`方法结构更简洁，这将使我们更容易开发进一步响应玩家输入的功能。
- en: Pressing Q to Quit
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按Q退出
- en: 'Now that we’re responding to keypresses efficiently, we can add another way
    to quit the game. It gets tedious to click the X at the top of the game window
    to end the game every time you test a new feature, so we’ll add a keyboard shortcut
    to end the game when the player presses Q:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有效地响应键盘按键，可以再添加一种退出游戏的方式。每次测试新功能时，点击游戏窗口顶部的X关闭游戏会显得很麻烦，因此我们将添加一个快捷键，当玩家按下Q时可以退出游戏：
- en: '**alien_invasion.py**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In `_check_keydown_events()`, we add a new block that ends the game when the
    player presses Q. Now, when testing, you can press Q to close the game instead
    of using your cursor to close the window.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在`_check_keydown_events()`中，我们添加了一个新模块，当玩家按下Q键时结束游戏。现在，测试时你可以按Q关闭游戏，而无需使用鼠标关闭窗口。
- en: Running the Game in Fullscreen Mode
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在全屏模式下运行游戏
- en: Pygame has a fullscreen mode that you might like better than running the game
    in a regular window. Some games look better in fullscreen mode, and on some systems,
    the game may perform better overall in fullscreen mode.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Pygame有一个全屏模式，可能比在普通窗口中运行游戏更适合你。某些游戏在全屏模式下表现更好，而且在某些系统上，全屏模式下的游戏可能整体表现更好。
- en: 'To run the game in fullscreen mode, make the following changes in `__init__()`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要在全屏模式下运行游戏，请在`__init__()`中做以下更改：
- en: '**alien_invasion.py**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**alien_invasion.py**'
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When creating the screen surface, we pass a size of `(0, 0)` and the parameter
    `pygame.FULLSCREEN` ❶. This tells Pygame to figure out a window size that will
    fill the screen. Because we don’t know the width and height of the screen ahead
    of time, we update these settings after the screen is created ❷. We use the `width`
    and `height` attributes of the screen’s `rect` to update the `settings` object.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建屏幕表面时，我们传入`(0, 0)`的尺寸和参数`pygame.FULLSCREEN` ❶。这告诉Pygame计算出一个可以填满屏幕的窗口尺寸。由于我们事先不知道屏幕的宽度和高度，因此在屏幕创建后更新这些设置
    ❷。我们使用屏幕`rect`的`width`和`height`属性来更新`settings`对象。
- en: If you like how the game looks or behaves in fullscreen mode, keep these settings.
    If you liked the game better in its own window, you can revert back to the original
    approach where we set a specific screen size for the game.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢游戏在全屏模式下的显示或行为，可以保留这些设置。如果你更喜欢游戏在独立窗口中运行，可以恢复到之前的方法，我们为游戏设置了特定的屏幕尺寸。
- en: A Quick Recap
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速回顾
- en: In the next section, we’ll add the ability to shoot bullets, which involves
    adding a new file called *bullet.py* and making some modifications to some of
    the files we’re already using. Right now, we have three files containing a number
    of classes and methods. To be clear about how the project is organized, let’s
    review each of these files before adding more functionality.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将增加射击子弹的功能，这涉及到添加一个名为*bullet.py*的新文件，并对我们已经使用的部分文件进行一些修改。目前，我们有三个文件，其中包含多个类和方法。为了清楚了解项目的组织方式，让我们在添加更多功能之前，先回顾一下这些文件。
- en: alien_invasion.py
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: alien_invasion.py
- en: 'The main file, *alien_invasion.py*, contains the `AlienInvasion` class. This
    class creates a number of important attributes used throughout the game: the settings
    are assigned to `settings`, the main display surface is assigned to `screen`,
    and a `ship` instance is created in this file as well. The main loop of the game,
    a `while` loop, is also stored in this module. The `while` loop calls `_check_events()`,
    `ship.update()`, and `_update_screen()`. It also ticks the clock on each pass
    through the loop.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 主要文件 *alien_invasion.py* 包含 `AlienInvasion` 类。该类创建了多个在游戏中使用的重要属性：设置被分配给 `settings`，主显示表面分配给
    `screen`，并且在此文件中创建了一个 `ship` 实例。游戏的主循环，一个 `while` 循环，也存储在这个模块中。`while` 循环调用 `_check_events()`、`ship.update()`
    和 `_update_screen()`，并且每次通过循环时都会更新时钟。
- en: The `_check_events()` method detects relevant events, such as keypresses and
    releases, and processes each of these types of events through the methods `_check_keydown_events()`
    and `_check_keyup_events()`. For now, these methods manage the ship’s movement.
    The `AlienInvasion` class also contains `_update_screen()`, which redraws the
    screen on each pass through the main loop.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`_check_events()` 方法检测相关事件，如按键和释放，并通过 `_check_keydown_events()` 和 `_check_keyup_events()`
    方法处理这些事件。目前，这些方法管理船只的移动。`AlienInvasion` 类还包含 `_update_screen()`，它在每次通过主循环时重新绘制屏幕。'
- en: The *alien_invasion.py* file is the only file you need to run when you want
    to play *Alien Invasion*. The other files, *settings.py* and *ship.py*, contain
    code that is imported into this file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*alien_invasion.py* 文件是你在玩 *Alien Invasion* 时唯一需要运行的文件。其他文件，如 *settings.py*
    和 *ship.py*，包含的代码会被导入到这个文件中。'
- en: settings.py
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: settings.py
- en: The *settings.py* file contains the `Settings` class. This class only has an
    `__init__()` method, which initializes attributes controlling the game’s appearance
    and the ship’s speed.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*settings.py* 文件包含 `Settings` 类。该类只有一个 `__init__()` 方法，用于初始化控制游戏外观和船只速度的属性。'
- en: ship.py
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ship.py
- en: The *ship.py* file contains the `Ship` class. The `Ship` class has an `__init__()`
    method, an `update()` method to manage the ship’s position, and a `blitme()` method
    to draw the ship to the screen. The image of the ship is stored in *ship.bmp*,
    which is in the *images* folder.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*ship.py* 文件包含 `Ship` 类。`Ship` 类有一个 `__init__()` 方法，一个 `update()` 方法用于管理船只的位置，以及一个
    `blitme()` 方法用于将船只绘制到屏幕上。船只的图像存储在 *ship.bmp* 文件中，该文件位于 *images* 文件夹中。'
- en: Shooting Bullets
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发射子弹
- en: Now let’s add the ability to shoot bullets. We’ll write code that fires a bullet,
    which is represented by a small rectangle, when the player presses the spacebar.
    Bullets will then travel straight up the screen until they disappear off the top
    of the screen.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加发射子弹的功能。当玩家按下空格键时，我们将编写代码来发射一颗子弹，子弹用一个小矩形表示。子弹将直线向上移动，直到它从屏幕顶部消失。
- en: Adding the Bullet Settings
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加子弹设置
- en: 'At the end of the `__init__()` method, we’ll update *settings.py* to include
    the values we’ll need for a new `Bullet` class:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `__init__()` 方法的结尾，我们将更新 *settings.py*，以包括我们为新的 `Bullet` 类所需的值：
- en: '**settings.py**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: These settings create dark gray bullets with a width of `3` pixels and a height
    of `15` pixels. The bullets will travel slightly faster than the ship.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置创建了宽度为 `3` 像素、高度为 `15` 像素的深灰色子弹。子弹的速度会稍微快于船只。
- en: Creating the Bullet Class
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Bullet 类
- en: 'Now create a *bullet.py* file to store our `Bullet` class. Here’s the first
    part of *bullet.py*:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个 *bullet.py* 文件来存储我们的 `Bullet` 类。以下是 *bullet.py* 的第一部分：
- en: '**bullet.py**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**bullet.py**'
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `Bullet` class inherits from `Sprite`, which we import from the `pygame.sprite`
    module. When you use sprites, you can group related elements in your game and
    act on all the grouped elements at once. To create a bullet instance, `__init__()`
    needs the current instance of `AlienInvasion`, and we call ``super() to inherit
    properly from `Sprite`. We also set attributes for the screen and settings objects,
    and for the bullet’s color.``
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bullet` 类继承自 `Sprite`，我们从 `pygame.sprite` 模块中导入它。当你使用精灵时，可以将游戏中的相关元素分组，并对所有分组元素进行操作。为了创建一个子弹实例，`__init__()`
    需要当前的 `AlienInvasion` 实例，我们调用 `super()` 来正确地继承自 `Sprite`。我们还为屏幕和设置对象设置属性，以及子弹的颜色。'
- en: '[PRE25] def update(self):     """Move the bullet up the screen."""     # Update
    the exact position of the bullet. ❶     self.y -= self.settings.bullet_speed     #
    Update the rect position. ❷     self.rect.y = self.y  def draw_bullet(self):     """Draw
    the bullet to the screen.""" ❸     pygame.draw.rect(self.screen, self.color, self.rect)
    [PRE26] *--snip--* from ship import Ship from bullet import Bullet [PRE27]  def
    __init__(self):   *--snip--*  self.ship = Ship(self)   self.bullets = pygame.sprite.Group()
    [PRE28]  def run_game(self):  """Start the main loop for the game."""  while True:  self._check_events()  self.ship.update()   self.bullets.update()  self._update_screen()  self.clock.tick(60)
    [PRE29]  def _check_keydown_events(self, event):   *--snip--*  elif event.key
    == pygame.K_q:  sys.exit() ❶         elif event.key == pygame.K_SPACE:             self._fire_bullet()   def
    _check_keyup_events(self, event):   *--snip--*      def _fire_bullet(self):         """Create
    a new bullet and add it to the bullets group.""" ❷         new_bullet = Bullet(self)
    ❸         self.bullets.add(new_bullet)   def _update_screen(self):  """Update
    images on the screen, and flip to the new screen."""  self.screen.fill(self.settings.bg_color)
    ❹       for bullet in self.bullets.sprites():             bullet.draw_bullet()  self.ship.blitme()   pygame.display.flip()
    *--snip--* [PRE30]  def run_game(self):  """Start the main loop for the game."""  while
    True:  self._check_events()  self.ship.update()  self.bullets.update()              #
    Get rid of bullets that have disappeared. ❶             for bullet in self.bullets.copy():
    ❷                 if bullet.rect.bottom <= 0: ❸                     self.bullets.remove(bullet)
    ❹             print(len(self.bullets))   self._update_screen()  self.clock.tick(60)
    [PRE31]  # Bullet settings   *--snip--*  self.bullet_color = (60, 60, 60)   self.bullets_allowed
    = 3 [PRE32]  def _fire_bullet(self):  """Create a new bullet and add it to the
    bullets group."""   if len(self.bullets) < self.settings.bullets_allowed:  new_bullet
    = Bullet(self)  self.bullets.add(new_bullet) [PRE33]  def _update_bullets(self):         """Update
    position of bullets and get rid of old bullets."""         # Update bullet positions.  self.bullets.update()   #
    Get rid of bullets that have disappeared.  for bullet in self.bullets.copy():  if
    bullet.rect.bottom <= 0:  self.bullets.remove(bullet) [PRE34]  while True:  self._check_events()  self.ship.update()   self._update_bullets()  self._update_screen()  self.clock.tick(60)
    [PRE35]`  [PRE36] import pygame from pygame.sprite import Sprite  class Alien(Sprite):     """A
    class to represent a single alien in the fleet."""      def __init__(self, ai_game):         """Initialize
    the alien and set its starting position."""         super().__init__()         self.screen
    = ai_game.screen          # Load the alien image and set its rect attribute.         self.image
    = pygame.image.load(''images/alien.bmp'')         self.rect = self.image.get_rect()          #
    Start each new alien near the top left of the screen. ❶         self.rect.x =
    self.rect.width         self.rect.y = self.rect.height          # Store the alien''s
    exact horizontal position. ❷         self.x = float(self.rect.x) [PRE37] *--snip--*
    from bullet import Bullet from alien import Alien [PRE38]  def __init__(self):   *--snip--*  self.ship
    = Ship(self)  self.bullets = pygame.sprite.Group()         self.aliens = pygame.sprite.Group()          self._create_fleet()
    [PRE39]  def _create_fleet(self):         """Create the fleet of aliens."""         #
    Make an alien.         alien = Alien(self)         self.aliens.add(alien) [PRE40]  def
    _update_screen(self):   *--snip--*  self.ship.blitme()   self.aliens.draw(self.screen)   pygame.display.flip()
    [PRE41]  def _create_fleet(self):  """Create the fleet of aliens."""         #
    Create an alien and keep adding aliens until there''s no room left.         #
    Spacing between aliens is one alien width.  alien = Alien(self)         alien_width
    = alien.rect.width  ❶         current_x = alien_width ❷         while current_x
    < (self.settings.screen_width - 2 * alien_width): ❸             new_alien = Alien(self)
    ❹             new_alien.x = current_x             new_alien.rect.x = current_x             self.aliens.add(new_alien)
    ❺             current_x += 2 * alien_width [PRE42] while current_x < self.settings.screen_width:
    [PRE43]  def _create_fleet(self):   *--snip--*  while current_x < (self.settings.screen_width
    - 2 * alien_width):             self._create_alien(current_x)             current_x
    += 2 * alien_width  ❶     def _create_alien(self, x_position):         """Create
    an alien and place it in the row."""  new_alien = Alien(self)         new_alien.x
    = x_position         new_alien.rect.x = x_position  self.aliens.add(new_alien)
    [PRE44]  def _create_fleet(self):  """Create the fleet of aliens."""  # Create
    an alien and keep adding aliens until there''s no room left.         # Spacing
    between aliens is one alien width and one alien height.  alien = Alien(self) ❶         alien_width,
    alien_height = alien.rect.size  ❷         current_x, current_y = alien_width,
    alien_height ❸         while current_y < (self.settings.screen_height - 3 * alien_height):             while
    current_x < (self.settings.screen_width - 2 * alien_width): ❹                 self._create_alien(current_x,
    current_y)                 current_x += 2 * alien_width  ❺             # Finished
    a row; reset x value, and increment y value.             current_x = alien_width             current_y
    += 2 * alien_height [PRE45]  def _create_alien(self, x_position, y_position):         """Create
    an alien and place it in the fleet."""  new_alien = Alien(self)  new_alien.x =
    x_position  new_alien.rect.x = x_position         new_alien.rect.y = y_position  self.aliens.add(new_alien)
    [PRE46]  def __init__(self):   *--snip--*         # Alien settings         self.alien_speed
    = 1.0 [PRE47]  def __init__(self, ai_game):  """Initialize the alien and set its
    starting position."""  super().__init__()  self.screen = ai_game.screen         self.settings
    = ai_game.settings         *--snip--*  def update(self):     """Move the alien
    to the right.""" ❶     self.x += self.settings.alien_speed ❷     self.rect.x =
    self.x [PRE48]  while True:  self._check_events()  self.ship.update()  self._update_bullets()             self._update_aliens()  self._update_screen()  self.clock.tick(60)
    [PRE49]  def _update_aliens(self):         """Update the positions of all aliens
    in the fleet."""         self.aliens.update() [PRE50] # Alien settings self.alien_speed
    = 1.0 self.fleet_drop_speed = 10 # fleet_direction of 1 represents right; -1 represents
    left. self.fleet_direction = 1 [PRE51] def check_edges(self):     """Return True
    if alien is at edge of screen."""     screen_rect = self.screen.get_rect() ❶     return
    (self.rect.right >= screen_rect.right) or (self.rect.left <= 0)  def update(self):     """Move
    the alien right or left.""" ❷     self.x += self.settings.alien_speed * self.settings.fleet_direction     self.rect.x
    = self.x [PRE52]  def _check_fleet_edges(self):         """Respond appropriately
    if any aliens have reached an edge.""" ❶         for alien in self.aliens.sprites():             if
    alien.check_edges(): ❷                 self._change_fleet_direction()                 break      def
    _change_fleet_direction(self):  """Drop the entire fleet and change the fleet''s
    direction."""         for alien in self.aliens.sprites(): ❸             alien.rect.y
    += self.settings.fleet_drop_speed         self.settings.fleet_direction *= -1
    [PRE53]  def _update_aliens(self):         """Check if the fleet is at an edge,
    then update positions."""         self._check_fleet_edges()         self.aliens.update()
    [PRE54]  def _update_bullets(self):  """Update position of bullets and get rid
    of old bullets."""   *--snip--*          # Check for any bullets that have hit
    aliens.         #   If so, get rid of the bullet and the alien.         collisions
    = pygame.sprite.groupcollide(                 self.bullets, self.aliens, True,
    True) [PRE55]  def _update_bullets(self):   *--snip--* ❶         if not self.aliens:  #
    Destroy existing bullets and create new fleet. ❷             self.bullets.empty()             self._create_fleet()
    [PRE56]  # Bullet settings         self.bullet_speed = 2.5         self.bullet_width
    = 3   *--snip--* [PRE57]  def _update_bullets(self):   *--snip--*  # Get rid of
    bullets that have disappeared.  for bullet in self.bullets.copy():  if bullet.rect.bottom
    <= 0:  self.bullets.remove(bullet)    self._check_bullet_alien_collisions()    def
    _check_bullet_alien_collisions(self):         """Respond to bullet-alien collisions."""         #
    Remove any bullets and aliens that have collided.  collisions = pygame.sprite.groupcollide(  self.bullets,
    self.aliens, True, True)   if not self.aliens:  # Destroy existing bullets and
    create new fleet.  self.bullets.empty()  self._create_fleet() [PRE58]  def _update_aliens(self):   *--snip--*  self.aliens.update()          #
    Look for alien-ship collisions. ❶         if pygame.sprite.spritecollideany(self.ship,
    self.aliens): ❷             print("Ship hit!!!") [PRE59] class GameStats:     """Track
    statistics for Alien Invasion."""      def __init__(self, ai_game):         """Initialize
    statistics."""         self.settings = ai_game.settings ❶         self.reset_stats()      def
    reset_stats(self):         """Initialize statistics that can change during the
    game."""         self.ships_left = self.settings.ship_limit [PRE60] # Ship settings         self.ship_speed
    = 1.5         self.ship_limit = 3 [PRE61] import sys from time import sleep  import
    pygame  from settings import Settings from game_stats import GameStats from ship
    import Ship *--snip--* [PRE62]  def __init__(self):   *--snip--*  self.screen
    = pygame.display.set_mode(  (self.settings.screen_width, self.settings.screen_height))  pygame.display.set_caption("Alien
    Invasion")          # Create an instance to store game statistics.         self.stats
    = GameStats(self)   self.ship = Ship(self)   *--snip--* [PRE63]  def _ship_hit(self):         """Respond
    to the ship being hit by an alien."""         # Decrement ships_left. ❶         self.stats.ships_left
    -= 1          # Get rid of any remaining bullets and aliens. ❷         self.bullets.empty()         self.aliens.empty()          #
    Create a new fleet and center the ship. ❸         self._create_fleet()         self.ship.center_ship()   #
    Pause. ❹         sleep(0.5) [PRE64]  def _update_aliens(self):   *--snip--*  if
    pygame.sprite.spritecollideany(self.ship, self.aliens):             self._ship_hit()
    [PRE65] def center_ship(self):         """Center the ship on the screen."""         self.rect.midbottom
    = self.screen_rect.midbottom         self.x = float(self.rect.x) [PRE66]  def
    _check_aliens_bottom(self):         """Check if any aliens have reached the bottom
    of the screen."""         for alien in self.aliens.sprites(): ❶             if
    alien.rect.bottom >= self.settings.screen_height:                 # Treat this
    the same as if the ship got hit.                 self._ship_hit()                 break
    [PRE67]  def _update_aliens(self):   *--snip--*  # Look for alien-ship collisions.  if
    pygame.sprite.spritecollideany(self.ship, self.aliens):  self._ship_hit()          #
    Look for aliens hitting the bottom of the screen.         self._check_aliens_bottom()
    [PRE68]  def __init__(self):   *--snip--*         # Start Alien Invasion in an
    active state.         self.game_active = True [PRE69]  def _ship_hit(self):  """Respond
    to ship being hit by alien."""         if self.stats.ships_left > 0:             #
    Decrement ships_left.  self.stats.ships_left -= 1   *--snip--*  # Pause.  sleep(0.5)         else:             self.game_active
    = False [PRE70]  def run_game(self):  """Start the main loop for the game."""  while
    True:  self._check_events()         if self.game_active:  self.ship.update()  self._update_bullets()  self._update_aliens()   self._update_screen()  self.clock.tick(60)
    [PRE71]  def __init__(self):  """Initialize the game, and create game resources."""  pygame.init()  *--snip--*          #
    Start Alien Invasion in an inactive state.         self.game_active = False [PRE72]
    import pygame.font  class Button:     """A class to build buttons for the game."""  ❶     def
    __init__(self, ai_game, msg):         """Initialize button attributes."""         self.screen
    = ai_game.screen         self.screen_rect = self.screen.get_rect()          #
    Set the dimensions and properties of the button. ❷         self.width, self.height
    = 200, 50         self.button_color = (0, 135, 0)         self.text_color = (255,
    255, 255) ❸         self.font = pygame.font.SysFont(None, 48)          # Build
    the button''s rect object and center it. ❹         self.rect = pygame.Rect(0,
    0, self.width, self.height)         self.rect.center = self.screen_rect.center          #
    The button message needs to be prepped only once. ❺         self._prep_msg(msg)
    [PRE73] def _prep_msg(self, msg):         """Turn msg into a rendered image and
    center text on the button.""" ❶         self.msg_image = self.font.render(msg,
    True, self.text_color,                 self.button_color) ❷         self.msg_image_rect
    = self.msg_image.get_rect()         self.msg_image_rect.center = self.rect.center
    [PRE74] def draw_button(self):         """Draw blank button and then draw message."""         self.screen.fill(self.button_color,
    self.rect)         self.screen.blit(self.msg_image, self.msg_image_rect) [PRE75]
    *--snip--* from game_stats import GameStats from button import Button [PRE76]  def
    __init__(self):   *--snip--*  self.game_active = False          # Make the Play
    button.         self.play_button = Button(self, "Play") [PRE77]  def _update_screen(self):   *--snip--*  self.aliens.draw(self.screen)          #
    Draw the play button if the game is inactive.         if not self.game_active:             self.play_button.draw_button()   pygame.display.flip()
    [PRE78]  def _check_events(self):  """Respond to keypresses and mouse events."""  for
    event in pygame.event.get():  if event.type == pygame.QUIT:   *--snip--* ❶             elif
    event.type == pygame.MOUSEBUTTONDOWN: ❷                 mouse_pos = pygame.mouse.get_pos()
    ❸                 self._check_play_button(mouse_pos) [PRE79]  def _check_play_button(self,
    mouse_pos):         """Start a new game when the player clicks Play.""" ❶         if
    self.play_button.rect.collidepoint(mouse_pos):             self.game_active =
    True [PRE80]  def _check_play_button(self, mouse_pos):  """Start a new game when
    the player clicks Play."""  if self.play_button.rect.collidepoint(mouse_pos):             #
    Reset the game statistics. ❶             self.stats.reset_stats()  self.game_active
    = True   # Get rid of any remaining bullets and aliens. ❷             self.bullets.empty()             self.aliens.empty()              #
    Create a new fleet and center the ship. ❸             self._create_fleet()             self.ship.center_ship()
    [PRE81]  def _check_play_button(self, mouse_pos):  """Start a new game when the
    player clicks Play.""" ❶         button_clicked = self.play_button.rect.collidepoint(mouse_pos)
    ❷         if button_clicked and not self.game_active:  # Reset the game statistics.  self.stats.reset_stats()   *--snip--*
    [PRE82]  def _check_play_button(self, mouse_pos):  """Start a new game when the
    player clicks Play."""  button_clicked = self.play_button.rect.collidepoint(mouse_pos)  if
    button_clicked and not self.game_active:   *--snip--*             # Hide the mouse
    cursor.             pygame.mouse.set_visible(False) [PRE83]  def _ship_hit(self):  """Respond
    to ship being hit by alien."""  if self.stats.ships_left > 0:   *--snip--*  else:  self.game_active
    = False   pygame.mouse.set_visible(True) [PRE84] def __init__(self):     """Initialize
    the game''s static settings."""     # Screen settings  self.screen_width = 1200  self.screen_height
    = 800  self.bg_color = (230, 230, 230)   # Ship settings  self.ship_limit = 3   #
    Bullet settings  self.bullet_width = 3  self.bullet_height = 15  self.bullet_color
    = 60, 60, 60  self.bullets_allowed = 3   # Alien settings  self.fleet_drop_speed
    = 10      # How quickly the game speeds up ❶     self.speedup_scale = 1.1  ❷     self.initialize_dynamic_settings()
    [PRE85]  def initialize_dynamic_settings(self):      """Initialize settings that
    change throughout the game."""      self.ship_speed = 1.5      self.bullet_speed
    = 2.5      self.alien_speed = 1.0       # fleet_direction of 1 represents right;
    -1 represents left.      self.fleet_direction = 1 [PRE86]  def increase_speed(self):      """Increase
    speed settings."""      self.ship_speed *= self.speedup_scale      self.bullet_speed
    *= self.speedup_scale      self.alien_speed *= self.speedup_scale [PRE87]  def
    _check_bullet_alien_collisions(self):   *--snip--*  if not self.aliens:  # Destroy
    existing bullets and create new fleet.  self.bullets.empty()  self._create_fleet()   self.settings.increase_speed()
    [PRE88]  def _check_play_button(self, mouse_pos):  """Start a new game when the
    player clicks Play."""  button_clicked = self.play_button.rect.collidepoint(mouse_pos)  if
    button_clicked and not self.game_active:   # Reset the game settings.             self.settings.initialize_dynamic_settings()   *--snip--*
    [PRE89] class GameStats:   *--snip--*  def reset_stats(self):  """Initialize statistics
    that can change during the game."""  self.ships_left = self.ai_settings.ship_limit         self.score
    = 0 [PRE90] import pygame.font  class Scoreboard:     """A class to report scoring
    information."""  ❶     def __init__(self, ai_game):         """Initialize scorekeeping
    attributes."""         self.screen = ai_game.screen         self.screen_rect =
    self.screen.get_rect()         self.settings = ai_game.settings         self.stats
    = ai_game.stats          # Font settings for scoring information. ❷         self.text_color
    = (30, 30, 30) ❸         self.font = pygame.font.SysFont(None, 48)   # Prepare
    the initial score image. ❹         self.prep_score() [PRE91] def prep_score(self):     """Turn
    the score into a rendered image.""" ❶     score_str = str(self.stats.score) ❷         self.score_image
    = self.font.render(score_str, True,                 self.text_color, self.settings.bg_color)      #
    Display the score at the top right of the screen. ❸     self.score_rect = self.score_image.get_rect()
    ❹     self.score_rect.right = self.screen_rect.right - 20 ❺     self.score_rect.top
    = 20 [PRE92] def show_score(self):         """Draw score to the screen."""         self.screen.blit(self.score_image,
    self.score_rect) [PRE93] *--snip--* from game_stats import GameStats from scoreboard
    import Scoreboard *--snip--* [PRE94]  def __init__(self):   *--snip--*  pygame.display.set_caption("Alien
    Invasion")          # Create an instance to store game statistics,         #   and
    create a scoreboard.         self.stats = GameStats(self)         self.sb = Scoreboard(self)   *--snip--*
    [PRE95]  def _update_screen(self):   *--snip--*  self.aliens.draw(self.screen)          #
    Draw the score information.         self.sb.show_score()   # Draw the play button
    if the game is inactive.   *--snip--* [PRE96]  def initialize_dynamic_settings(self):   *--snip--*          #
    Scoring settings      self.alien_points = 50 [PRE97]  def _check_bullet_alien_collisions(self):  """Respond
    to bullet-alien collisions."""  # Remove any bullets and aliens that have collided.  collisions
    = pygame.sprite.groupcollide(  self.bullets, self.aliens, True, True)          if
    collisions:             self.stats.score += self.settings.alien_points             self.sb.prep_score()   *--snip--*
    [PRE98]  def _check_play_button(self, mouse_pos):   *--snip--*  if button_clicked
    and not self.game_active:   *--snip--*  # Reset the game statistics.  self.stats.reset_stats()             self.sb.prep_score()   *--snip--*
    [PRE99]  def _check_bullet_alien_collisions(self):   *--snip--*  if collisions:             for
    aliens in collisions.values():                 self.stats.score += self.settings.alien_points
    * len(aliens)  self.sb.prep_score()   *--snip--* [PRE100] class Settings:  """A
    class to store all settings for Alien Invasion."""   def __init__(self):   *--snip--*         #
    How quickly the game speeds up  self.speedup_scale = 1.1   # How quickly the alien
    point values increase ❶         self.score_scale = 1.5   self.initialize_dynamic_settings()   def
    initialize_dynamic_settings(self):   *--snip--*   def increase_speed(self):         """Increase
    speed settings and alien point values."""  self.ship_speed *= self.speedup_scale  self.bullet_speed
    *= self.speedup_scale  self.alien_speed *= self.speedup_scale  ❷         self.alien_points
    = int(self.alien_points * self.score_scale) [PRE101]  def increase_speed(self):   *--snip--*  self.alien_points
    = int(self.alien_points * self.score_scale)   print(self.alien_points) [PRE102]  def
    prep_score(self):  """Turn the score into a rendered image."""         rounded_score
    = round(self.stats.score, -1)         score_str = f"{rounded_score:,}"  self.score_image
    = self.font.render(score_str, True,  self.text_color, self.settings.bg_color)   *--snip--*
    [PRE103]  def __init__(self, ai_game):   *--snip--*      # High score should never
    be reset.      self.high_score = 0 [PRE104]  def __init__(self, ai_game):   *--snip--*      #
    Prepare the initial score images.  self.prep_score() ❶      self.prep_high_score()
    [PRE105]  def prep_high_score(self):      """Turn the high score into a rendered
    image.""" ❶      high_score = round(self.stats.high_score, -1)      high_score_str
    = f"{high_score:,}" ❷      self.high_score_image = self.font.render(high_score_str,
    True,          self.text_color, self.settings.bg_color)       # Center the high
    score at the top of the screen.      self.high_score_rect = self.high_score_image.get_rect()
    ❸         self.high_score_rect.centerx = self.screen_rect.centerx ❹      self.high_score_rect.top
    = self.score_rect.top [PRE106]  def show_score(self):  """Draw score to the screen."""  self.screen.blit(self.score_image,
    self.score_rect)      self.screen.blit(self.high_score_image, self.high_score_rect)
    [PRE107]  def check_high_score(self): """Check to see if there''s a new high score."""         if
    self.stats.score > self.stats.high_score:             self.stats.high_score =
    self.stats.score             self.prep_high_score() [PRE108]  def _check_bullet_alien_collisions(self):   *--snip--*  if
    collisions:  for aliens in collisions.values():  self.stats.score += self.settings.alien_points
    * len(aliens)  self.sb.prep_score()      self.sb.check_high_score()         *--snip--*
    [PRE109]  def reset_stats(self):  """Initialize statistics that can change during
    the game."""  self.ships_left = self.settings.ship_limit  self.score = 0      self.level
    = 1 [PRE110]  def __init__(self, ai_game):   *--snip--*  self.prep_high_score()      self.prep_level()
    [PRE111] def prep_level(self):         """Turn the level into a rendered image."""         level_str
    = str(self.stats.level) ❶         self.level_image = self.font.render(level_str,
    True,                 self.text_color, self.settings.bg_color)          # Position
    the level below the score.         self.level_rect = self.level_image.get_rect()
    ❷         self.level_rect.right = self.score_rect.right ❸         self.level_rect.top
    = self.score_rect.bottom + 10 [PRE112]  def show_score(self):         """Draw
    scores and level to the screen."""  self.screen.blit(self.score_image, self.score_rect)  self.screen.blit(self.high_score_image,
    self.high_score_rect)      self.screen.blit(self.level_image, self.level_rect)
    [PRE113]  def _check_bullet_alien_collisions(self):   *--snip--*  if not self.aliens:    #
    Destroy existing bullets and create new fleet.  self.bullets.empty()  self._create_fleet()  self.settings.increase_speed()              #
    Increase level.             self.stats.level += 1             self.sb.prep_level()
    [PRE114]  def _check_play_button(self, mouse_pos):   *--snip--*  if button_clicked
    and not self.game_active:   *--snip--*             self.sb.prep_score()             self.sb.prep_level()             *--snip--*
    [PRE115] import pygame from pygame.sprite import Sprite  ❶ class Ship(Sprite):  """A
    class to manage the ship."""   def __init__(self, ai_game):  """Initialize the
    ship and set its starting position.""" ❷         super().__init__()   *--snip--*
    [PRE116] import pygame.font from pygame.sprite import Group  from ship import
    Ship [PRE117]  def __init__(self, ai_game):  """Initialize scorekeeping attributes."""   self.ai_game
    = ai_game  self.screen = ai_game.screen   *--snip--*  self.prep_level()         self.prep_ships()
    [PRE118] def prep_ships(self):         """Show how many ships are left.""" ❶         self.ships
    = Group() ❷         for ship_number in range(self.stats.ships_left):             ship
    = Ship(self.ai_game) ❸             ship.rect.x = 10 + ship_number * ship.rect.width
    ❹             ship.rect.y = 10 ❺             self.ships.add(ship) [PRE119]  def
    show_score(self):         """Draw scores, level, and ships to the screen."""  self.screen.blit(self.score_image,
    self.score_rect)  self.screen.blit(self.high_score_image, self.high_score_rect)  self.screen.blit(self.level_image,
    self.level_rect)      self.ships.draw(self.screen) [PRE120]  def _check_play_button(self,
    mouse_pos):   *--snip--*  if button_clicked and not self.game_active:   *--snip--*             self.sb.prep_level()             self.sb.prep_ships()             *--snip--*
    [PRE121]  def _ship_hit(self):  """Respond to ship being hit by alien."""  if
    self.stats.ships_left > 0:             # Decrement ships_left, and update scoreboard.  self.stats.ships_left
    -= 1             self.sb.prep_ships()             `--snip--` [PRE122] $ **python
    -m pip install --user matplotlib** [PRE123] $ **python3 -m pip install --user
    matplotlib** [PRE124] import matplotlib.pyplot as plt  squares = [1, 4, 9, 16,
    25]  ❶ fig, ax = plt.subplots() ax.plot(squares)  plt.show() [PRE125] import matplotlib.pyplot
    as plt  squares = [1, 4, 9, 16, 25]  fig, ax = plt.subplots() ❶ ax.plot(squares,
    linewidth=3)  # Set chart title and label axes. ❷ ax.set_title("Square Numbers",
    fontsize=24) ❸ ax.set_xlabel("Value", fontsize=14) ax.set_ylabel("Square of Value",
    fontsize=14)  # Set size of tick labels. ❹ ax.tick_params(labelsize=14)  plt.show()
    [PRE126] import matplotlib.pyplot as plt  input_values = [1, 2, 3, 4, 5] squares
    = [1, 4, 9, 16, 25]  fig, ax = plt.subplots() ax.plot(input_values, squares, linewidth=3)  #
    Set chart title and label axes. *--snip--* [PRE127] >>> **import matplotlib.pyplot
    as plt** >>> **plt.style.available** [''Solarize_Light2'', ''_classic_test_patch'',
    ''_mpl-gallery'', `--snip--` [PRE128] import matplotlib.pyplot as plt  input_values
    = [1, 2, 3, 4, 5] squares = [1, 4, 9, 16, 25]  plt.style.use(''seaborn'') fig,
    ax = plt.subplots() *--snip--* [PRE129] import matplotlib.pyplot as plt  plt.style.use(''seaborn'')
    fig, ax = plt.subplots() ax.scatter(2, 4)  plt.show() [PRE130] import matplotlib.pyplot
    as plt  plt.style.use(''seaborn'') fig, ax = plt.subplots() ❶ ax.scatter(2, 4,
    s=200)  # Set chart title and label axes. ax.set_title("Square Numbers", fontsize=24)
    ax.set_xlabel("Value", fontsize=14) ax.set_ylabel("Square of Value", fontsize=14)  #
    Set size of tick labels. ax.tick_params(labelsize=14)  plt.show() [PRE131] import
    matplotlib.pyplot as plt  x_values = [1, 2, 3, 4, 5] y_values = [1, 4, 9, 16,
    25]  plt.style.use(''seaborn'') fig, ax = plt.subplots() ax.scatter(x_values,
    y_values, s=100)  # Set chart title and label axes. *--snip--* [PRE132] import
    matplotlib.pyplot as plt  ❶ x_values = range(1, 1001) y_values = [x**2 for x in
    x_values]  plt.style.use(''seaborn'') fig, ax = plt.subplots() ❷ ax.scatter(x_values,
    y_values, s=10)  # Set chart title and label axes. *--snip--*  # Set the range
    for each axis. ❸ ax.axis([0, 1100, 0, 1_100_000])  plt.show() [PRE133] *--snip--*
    # Set the range for each axis. ax.axis([0, 1100, 0, 1_100_000]) ax.ticklabel_format(style=''plain'')  plt.show()
    [PRE134] ax.scatter(x_values, y_values, color=''red'', s=10) [PRE135] ax.scatter(x_values,
    y_values, color=(0, 0.8, 0), s=10) [PRE136] *--snip--* plt.style.use(''seaborn'')
    fig, ax = plt.subplots() ax.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues,
    s=10)  # Set chart title and label axes. *--snip--* [PRE137] plt.savefig(''squares_plot.png'',
    bbox_inches=''tight'') [PRE138] ❶ from random import choice  class RandomWalk:     """A
    class to generate random walks."""  ❷     def __init__(self, num_points=5000):         """Initialize
    attributes of a walk."""         self.num_points = num_points          # All walks
    start at (0, 0). ❸         self.x_values = [0]         self.y_values = [0] [PRE139]
    def fill_walk(self): """Calculate all the points in the walk."""   # Keep taking
    steps until the walk reaches the desired length. ❶     while len(self.x_values)
    < self.num_points:          # Decide which direction to go, and how far to go.
    ❷         x_direction = choice([1, -1])         x_distance = choice([0, 1, 2,
    3, 4]) ❸         x_step = x_direction * x_distance          y_direction = choice([1,
    -1])         y_distance = choice([0, 1, 2, 3, 4]) ❹         y_step = y_direction
    * y_distance          # Reject moves that go nowhere. ❺         if x_step == 0
    and y_step == 0:             continue          # Calculate the new position. ❻         x
    = self.x_values[-1] + x_step         y = self.y_values[-1] + y_step          self.x_values.append(x)         self.y_values.append(y)
    [PRE140] import matplotlib.pyplot as plt  from random_walk import RandomWalk  #
    Make a random walk. ❶ rw = RandomWalk() rw.fill_walk()  # Plot the points in the
    walk. plt.style.use(''classic'') fig, ax = plt.subplots() ❷ ax.scatter(rw.x_values,
    rw.y_values, s=15) ❸ ax.set_aspect(''equal'') plt.show() [PRE141] import matplotlib.pyplot
    as plt  from random_walk import RandomWalk  # Keep making new walks, as long as
    the program is active. while True:  # Make a random walk.     *--snip--*  plt.show()      keep_running
    = input("Make another walk? (y/n): ")     if keep_running == ''n'':         break
    [PRE142] *--snip--* while True:  # Make a random walk.  rw = RandomWalk()  rw.fill_walk()      #
    Plot the points in the walk.  plt.style.use(''classic'')  fig, ax = plt.subplots()
    ❶     point_numbers = range(rw.num_points)     ax.scatter(rw.x_values, rw.y_values,
    c=point_numbers, cmap=plt.cm.Blues,         edgecolors=''none'', s=15)     ax.set_aspect(''equal'')  plt.show()   *--snip--*
    [PRE143] *--snip--* while True:   *--snip--*  ax.scatter(rw.x_values, rw.y_values,
    c=point_numbers, cmap=plt.cm.Blues,  edgecolors=''none'', s=15)  ax.set_aspect(''equal'')      #
    Emphasize the first and last points.     ax.scatter(0, 0, c=''green'', edgecolors=''none'',
    s=100)     ax.scatter(rw.x_values[-1], rw.y_values[-1], c=''red'', edgecolors=''none'',         s=100)   plt.show()   *--snip--*
    [PRE144] *--snip--* while True:   *--snip--*  ax.scatter(rw.x_values[-1], rw.y_values[-1],
    c=''red'', edgecolors=''none'',  s=100)      # Remove the axes.     ax.get_xaxis().set_visible(False)     ax.get_yaxis().set_visible(False)   plt.show()   *--snip--*
    [PRE145] *--snip--* while True:  # Make a random walk.     rw = RandomWalk(50_000)  rw.fill_walk()   #
    Plot the points in the walk.  plt.style.use(''classic'')  fig, ax = plt.subplots()  point_numbers
    = range(rw.num_points)   ax.scatter(rw.x_values, rw.y_values, c=point_numbers,
    cmap=plt.cm.Blues,         edgecolors=''none'', s=1)   *--snip--* [PRE146] fig,
    ax = plt.subplots(figsize=(15, 9)) [PRE147] fig, ax = plt.subplots(figsize=(10,
    6), dpi=128) [PRE148] $ **python -m pip install --user plotly** $ **python -m
    pip install --user pandas** [PRE149] from random import randint  class Die:     """A
    class representing a single die."""  ❶     def __init__(self, num_sides=6):         """Assume
    a six-sided die."""         self.num_sides = num_sides      def roll(self):         """"Return
    a random value between 1 and number of sides.""" ❷         return randint(1, self.num_sides)
    [PRE150] from die import Die  # Create a D6. ❶ die = Die()  # Make some rolls,
    and store results in a list. results = [] ❷ for roll_num in range(100):     result
    = die.roll()     results.append(result)  print(results) [PRE151] [4, 6, 5, 6,
    1, 5, 6, 3, 5, 3, 5, 3, 2, 2, 1, 3, 1, 5, 3, 6, 3, 6, 5, 4,  1, 1, 4, 2, 3, 6,
    4, 2, 6, 4, 1, 3, 2, 5, 6, 3, 6, 2, 1, 1, 3, 4, 1, 4, 3, 5, 1, 4, 5, 5, 2, 3,
    3, 1, 2, 3, 5, 6, 2, 5, 6, 1, 3, 2, 1, 1, 1, 6, 5, 5, 2, 2, 6, 4, 1, 4, 5, 1,
    1, 1, 4, 5, 3, 3, 1, 3, 5, 4, 5, 6, 5, 4, 1, 5, 1, 2] [PRE152] *--snip--* # Make
    some rolls, and store results in a list. results = [] ❶ for roll_num in range(1000):  result
    = die.roll()  results.append(result)  # Analyze the results. frequencies = []
    ❷ poss_results = range(1, die.num_sides+1) for value in poss_results: ❸     frequency
    = results.count(value) ❹     frequencies.append(frequency)  print(frequencies)
    [PRE153] [155, 167, 168, 170, 159, 181] [PRE154] import plotly.express as px  from
    die import Die *--snip--*  for value in poss_results:  frequency = results.count(value)  frequencies.append(frequency)  #
    Visualize the results. fig = px.bar(x=poss_results, y=frequencies) fig.show()
    [PRE155] *--snip--* # Visualize the results. ❶ title = "Results of Rolling One
    D6 1,000 Times" ❷ labels = {''x'': ''Result'', ''y'': ''Frequency of Result''}
    fig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels) fig.show()
    [PRE156] import plotly.express as px  from die import Die  # Create two D6 dice.
    die_1 = Die() die_2 = Die()  # Make some rolls, and store results in a list. results
    = [] for roll_num in range(1000): ❶     result = die_1.roll() + die_2.roll()  results.append(result)  #
    Analyze the results. frequencies = [] ❷ max_result = die_1.num_sides + die_2.num_sides
    ❸ poss_results = range(2, max_result+1) for value in poss_results:  frequency
    = results.count(value)  frequencies.append(frequency)  # Visualize the results.
    title = "Results of Rolling Two D6 Dice 1,000 Times" labels = {''x'': ''Result'',
    ''y'': ''Frequency of Result''} fig = px.bar(x=poss_results, y=frequencies, title=title,
    labels=labels) fig.show() [PRE157] *--snip--* fig = px.bar(x=poss_results, y=frequencies,
    title=title, labels=labels)  # Further customize chart. fig.update_layout(xaxis_dtick=1)  fig.show()
    [PRE158] import plotly.express as px  from die import Die  # Create a D6 and a
    D10. die_1 = Die() ❶ die_2 = Die(10)  # Make some rolls, and store results in
    a list. results = [] for roll_num in range(50_000):  result = die_1.roll() + die_2.roll()  results.append(result)  #
    Analyze the results. *--snip--*  # Visualize the results. ❷ title = "Results of
    Rolling a D6 and a D10 50,000 Times" labels = {''x'': ''Result'', ''y'': ''Frequency
    of Result''} *--snip--* [PRE159] fig.write_html(''dice_visual_d6d10.html'') [PRE160]
    "USW00025333","SITKA AIRPORT, AK US","2021-01-01",,"44","40" [PRE161] from pathlib
    import Path import csv  ❶ path = Path(''weather_data/sitka_weather_07-2021_simple.csv'')
    lines = path.read_text().splitlines()  ❷ reader = csv.reader(lines) ❸ header_row
    = next(reader) print(header_row) [PRE162] [''STATION'', ''NAME'', ''DATE'', ''TAVG'',
    ''TMAX'', ''TMIN''] [PRE163] *--snip--* reader = csv.reader(lines) header_row
    = next(reader)  for index, column_header in enumerate(header_row):     print(index,
    column_header) [PRE164] 0 STATION 1 NAME 2 DATE 3 TAVG 4 TMAX 5 TMIN [PRE165]
    *--snip--* reader = csv.reader(lines) header_row = next(reader)  # Extract high
    temperatures. ❶ highs = [] ❷ for row in reader: ❸     high = int(row[4])     highs.append(high)  print(highs)
    [PRE166] [61, 60, 66, 60, 65, 59, 58, 58, 57, 60, 60, 60, 57, 58, 60, 61, 63,
    63, 70, 64, 59, 63, 61, 58, 59, 64, 62, 70, 70, 73, 66] [PRE167] from pathlib
    import Path import csv  import matplotlib.pyplot as plt  path = Path(''weather_data/sitka_weather_07-2021_simple.csv'')
    lines = path.read_text().splitlines()   *--snip--*  # Plot the high temperatures.
    plt.style.use(''seaborn'') fig, ax = plt.subplots() ❶ ax.plot(highs, color=''red'')  #
    Format plot. ❷ ax.set_title("Daily High Temperatures, July 2021", fontsize=24)
    ❸ ax.set_xlabel('''', fontsize=16) ax.set_ylabel("Temperature (F)", fontsize=16)
    ax.tick_params(labelsize=16)  plt.show() [PRE168] "USW00025333","SITKA AIRPORT,
    AK US","2021-07-01",,"61","53" [PRE169] >>> **from datetime import datetime**
    >>> **first_date = datetime.strptime(''2021-07-01'', ''%Y-%m-%d'')** >>> **print(first_date)**
    2021-07-01 00:00:00 [PRE170] from pathlib import Path import csv from datetime
    import datetime  import matplotlib.pyplot as plt  path = Path(''weather_data/sitka_weather_07-2021_simple.csv'')
    lines = path.read_text().splitlines()  reader = csv.reader(lines) header_row =
    next(reader)  # Extract dates and high temperatures. ❶ dates, highs = [], [] for
    row in reader: ❷     current_date = datetime.strptime(row[2], ''%Y-%m-%d'')  high
    = int(row[4])     dates.append(current_date)  highs.append(high)  # Plot the high
    temperatures. plt.style.use(''seaborn'') fig, ax = plt.subplots() ❸ ax.plot(dates,
    highs, color=''red'')  # Format plot. ax.set_title("Daily High Temperatures, July
    2021", fontsize=24) ax.set_xlabel('''', fontsize=16) ❹ fig.autofmt_xdate() ax.set_ylabel("Temperature
    (F)", fontsize=16) ax.tick_params(labelsize=16)  plt.show() [PRE171] *--snip--*
    path = Path(''weather_data/sitka_weather_2021_simple.csv'') lines = path.read_text().splitlines()
    *--snip--* # Format plot. ax.set_title("Daily High Temperatures, 2021", fontsize=24)
    ax.set_xlabel('''', fontsize=16) *--snip--* [PRE172] *--snip--* reader = csv.reader(lines)
    header_row = next(reader)  # Extract dates, and high and low temperatures. ❶ dates,
    highs, lows = [], [], [] for row in reader:  current_date = datetime.strptime(row[2],
    ''%Y-%m-%d'')  high = int(row[4]) ❷     low = int(row[5])  dates.append(current_date)  highs.append(high)     lows.append(low)  #
    Plot the high and low temperatures. plt.style.use(''seaborn'') fig, ax = plt.subplots()
    ax.plot(dates, highs, color=''red'') ❸ ax.plot(dates, lows, color=''blue'')  #
    Format plot. ❹ ax.set_title("Daily High and Low Temperatures, 2021", fontsize=24)
    *--snip--* [PRE173] *--snip--* # Plot the high and low temperatures. plt.style.use(''seaborn'')
    fig, ax = plt.subplots() ❶ ax.plot(dates, highs, color=''red'', alpha=0.5) ax.plot(dates,
    lows, color=''blue'', alpha=0.5) ❷ ax.fill_between(dates, highs, lows, facecolor=''blue'',
    alpha=0.1) *--snip--* [PRE174] from pathlib import Path import csv  path = Path(''weather_data/death_valley_2021_simple.csv'')
    lines = path.read_text().splitlines()  reader = csv.reader(lines) header_row =
    next(reader)  for index, column_header in enumerate(header_row):     print(index,
    column_header) [PRE175] 0 STATION 1 NAME 2 DATE 3 TMAX 4 TMIN 5 TOBS [PRE176]
    *--snip--* path = Path(''weather_data/death_valley_2021_simple.csv'') lines =
    path.read_text().splitlines()   *--snip--* # Extract dates, and high and low temperatures.
    dates, highs, lows = [], [], [] for row in reader:  current_date = datetime.strptime(row[2],
    ''%Y-%m-%d'')     high = int(row[3])     low = int(row[4])  dates.append(current_date)
    *--snip--* [PRE177] Traceback (most recent call last):   File "death_valley_highs_lows.py",
    line 17, in <module>     high = int(row[3]) ❶ ValueError: invalid literal for
    int() with base 10: '''' [PRE178] *--snip--* for row in reader:  current_date
    = datetime.strptime(row[2], ''%Y-%m-%d'') ❶     try:  high = int(row[3])  low
    = int(row[4])     except ValueError: ❷  print(f"Missing data for {current_date}")
    ❸     else:  dates.append(current_date)  highs.append(high)  lows.append(low)  #
    Plot the high and low temperatures. *--snip--*  # Format plot. ❹ title = "Daily
    High and Low Temperatures, 2021\nDeath Valley, CA" ax.set_title(title, fontsize=20)
    ax.set_xlabel('''', fontsize=16) *--snip--* [PRE179] Missing data for 2021-05-04
    00:00:00 [PRE180] {"type":"FeatureCollection","metadata":{"generated":1649052296000,...
    {"type":"Feature","properties":{"mag":1.6,"place":"63 km SE of Ped... {"type":"Feature","properties":{"mag":2.2,"place":"27
    km SSE of Ca... {"type":"Feature","properties":{"mag":3.7,"place":"102 km SSE
    of S... {"type":"Feature","properties":{"mag":2.92000008,"place":"49 km SE...
    {"type":"Feature","properties":{"mag":1.4,"place":"44 km NE of Sus... `--snip--`
    [PRE181] from pathlib import Path import json  # Read data as a string and convert
    to a Python object. path = Path(''eq_data/eq_data_1_day_m1.geojson'') contents
    = path.read_text() ❶ all_eq_data = json.loads(contents)  # Create a more readable
    version of the data file. ❷ path = Path(''eq_data/readable_eq_data.geojson'')
    ❸ readable_contents = json.dumps(all_eq_data, indent=4) path.write_text(readable_contents)
    [PRE182] {     "type": "FeatureCollection", ❶     "metadata": {         "generated":
    1649052296000,         "url": "https://earthquake.usgs.gov/earthquakes/.../1.0_day.geojson",         "title":
    "USGS Magnitude 1.0+ Earthquakes, Past Day",         "status": 200,         "api":
    "1.10.3",         "count": 160     }, ❷     "features": [     *--snip--* [PRE183]  *--snip--*         {             "type":
    "Feature", ❶             "properties": {                 "mag": 1.6,  `--snip--`
    ❷                 "title": "M 1.6 - 27 km NNW of Susitna, Alaska"             },
    ❸             "geometry": {                 "type": "Point",                 "coordinates":
    [ ❹                     -150.7585, ❺                     61.7591,                     56.3  ]             },             "id":
    "ak0224bju1jx"         }, [PRE184] from pathlib import Path import json  # Read
    data as a string and convert to a Python object. path = Path(''eq_data/eq_data_1_day_m1.geojson'')
    contents = path.read_text() all_eq_data = json.loads(contents)  # Examine all
    earthquakes in the dataset. all_eq_dicts = all_eq_data[''features''] print(len(all_eq_dicts))
    [PRE185] 160 [PRE186] *--snip--* all_eq_dicts = all_eq_data[''features'']  ❶ mags
    = [] for eq_dict in all_eq_dicts: ❷     mag = eq_dict[''properties''][''mag'']     mags.append(mag)  print(mags[:10])
    [PRE187] [1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4, 4.6, 4.5, 1.9, 1.8] [PRE188] *--snip--*
    all_eq_dicts = all_eq_data[''features'']  mags, lons, lats = [], [], [] for eq_dict
    in all_eq_dicts:  mag = eq_dict[''properties''][''mag''] ❶     lon = eq_dict[''geometry''][''coordinates''][0]     lat
    = eq_dict[''geometry''][''coordinates''][1]  mags.append(mag)     lons.append(lon)  lats.append(lat)  print(mags[:10])
    print(lons[:5]) print(lats[:5]) [PRE189] [1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4,
    4.6, 4.5, 1.9, 1.8] [-150.7585, -153.4716, -148.7531, -159.6267, -155.248336791992]
    [61.7591, 59.3152, 63.1633, 54.5612, 18.7551670074463] [PRE190] from pathlib import
    Path import json  import plotly.express as px  *--snip--* for eq_dict in all_eq_dicts:   *--snip--*  title
    = ''Global Earthquakes'' ❶ fig = px.scatter_geo(lat=lats, lon=lons, title=title)
    fig.show() [PRE191] *--snip--* # Read data as a string and convert to a Python
    object. path = Path(''eq_data/eq_data_30_day_m1.geojson'') contents = path.read_text()
    *--snip--*  title = ''Global Earthquakes'' fig = px.scatter_geo(lat=lats, lon=lons,
    size=mags, title=title) fig.show() [PRE192] *--snip--* fig = px.scatter_geo(lat=lats,
    lon=lons, size=mags, title=title, ❶         color=mags, ❷         color_continuous_scale=''Viridis'',
    ❸         labels={''color'':''Magnitude''}, ❹         projection=''natural earth'',     )
    fig.show() [PRE193] >>> **import plotly.express as px** >>> **px.colors.named_colorscales()**
    [''aggrnyl'', ''agsunset'', ''blackbody'', ..., ''mygbm''] [PRE194] *--snip--*
    ❶ mags, lons, lats, eq_titles = [], [], [], []  mag = eq_dict[''properties''][''mag'']  lon
    = eq_dict[''geometry''][''coordinates''][0]  lat = eq_dict[''geometry''][''coordinates''][1]
    ❷     eq_title = eq_dict[''properties''][''title'']  mags.append(mag)  lons.append(lon)  lats.append(lat)     eq_titles.append(eq_title)  title
    = ''Global Earthquakes'' fig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title,   *--snip--*  projection=''natural
    earth'', ❸         hover_name=eq_titles,  ) fig.show() [PRE195] **https://api.github.com/search/repositories?q=language:python+sort:stars**
    [PRE196] { ❶   "total_count": 8961993, ❷   "incomplete_results": true, ❸   "items":
    [     {       "id": 54346799,       "node_id": "MDEwOlJlcG9zaXRvcnk1NDM0Njc5OQ==",       "name":
    "public-apis",       "full_name": "public-apis/public-apis",  `--snip--` [PRE197]
    $ **python -m pip install --user requests** [PRE198] $ **python3 -m pip install
    --user requests** [PRE199] import requests  # Make an API call and check the response.
    ❶ url = "https://api.github.com/search/repositories" url += "?q=language:python+sort:stars+stars:>10000"  ❷
    headers = {"Accept": "application/vnd.github.v3+json"} ❸ r = requests.get(url,
    headers=headers) ❹ print(f"Status code: {r.status_code}")  # Convert the response
    object to a dictionary. ❺ response_dict = r.json()  # Process results. print(response_dict.keys())
    [PRE200] Status code: 200 dict_keys([''total_count'', ''incomplete_results'',
    ''items'']) [PRE201] import requests  # Make an API call and store the response.
    *--snip--*  # Convert the response object to a dictionary. response_dict = r.json()
    ❶ print(f"Total repositories: {response_dict[''total_count'']}") print(f"Complete
    results: {not response_dict[''incomplete_results'']}")  # Explore information
    about the repositories. ❷ repo_dicts = response_dict[''items''] print(f"Repositories
    returned: {len(repo_dicts)}")  # Examine the first repository. ❸ repo_dict = repo_dicts[0]
    ❹ print(f"\nKeys: {len(repo_dict)}") ❺ for key in sorted(repo_dict.keys()):     print(key)
    [PRE202] Status code: 200 ❶ Total repositories: 248 ❷ Complete results: True Repositories
    returned: 30  ❸ Keys: 78 allow_forking archive_url archived `--snip--` url visiblity
    watchers watchers_count [PRE203] *--snip--* # Examine the first repository. repo_dict
    = repo_dicts[0]  print("\nSelected information about first repository:") ❶ print(f"Name:
    {repo_dict[''name'']}") ❷ print(f"Owner: {repo_dict[''owner''][''login'']}") ❸
    print(f"Stars: {repo_dict[''stargazers_count'']}") print(f"Repository: {repo_dict[''html_url'']}")
    ❹ print(f"Created: {repo_dict[''created_at'']}") ❺ print(f"Updated: {repo_dict[''updated_at'']}")
    print(f"Description: {repo_dict[''description'']}") [PRE204] Status code: 200
    Total repositories: 248 Complete results: True Repositories returned: 30  Selected
    information about first repository: Name: public-apis Owner: public-apis Stars:
    191493 Repository: https://github.com/public-apis/public-apis Created: 2016-03-20T23:49:42Z
    Updated: 2022-05-12T06:37:11Z Description: A collective list of free APIs [PRE205]
    *--snip--* # Explore information about the repositories. repo_dicts = response_dict[''items'']
    print(f"Repositories returned: {len(repo_dicts)}")  ❶ print("\nSelected information
    about each repository:") ❷ for repo_dict in repo_dicts:  print(f"\nName: {repo_dict[''name'']}")  print(f"Owner:
    {repo_dict[''owner''][''login'']}")  print(f"Stars: {repo_dict[''stargazers_count'']}")  print(f"Repository:
    {repo_dict[''html_url'']}")  print(f"Description: {repo_dict[''description'']}")
    [PRE206] Status code: 200 Total repositories: 248 Complete results: True Repositories
    returned: 30  Selected information about each repository:  Name: public-apis Owner:
    public-apis Stars: 191494 Repository: https://github.com/public-apis/public-apis
    Description: A collective list of free APIs  Name: system-design-primer Owner:
    donnemartin Stars: 179952 Repository: https://github.com/donnemartin/system-design-primer
    Description: Learn how to design large-scale systems. Prep for the system   design
    interview.  Includes Anki flashcards. `--snip--`  Name: PayloadsAllTheThings Owner:
    swisskyrepo Stars: 37227 Repository: https://github.com/swisskyrepo/PayloadsAllTheThings
    Description: A list of useful payloads and bypass for Web Application Security   and
    Pentest/CTF [PRE207] {   "resources": {     `--snip--` ❶     "search": { ❷       "limit":
    10, ❸       "remaining": 9, ❹       "reset": 1652338832,       "used": 1,       "resource":
    "search"     },     `--snip--` [PRE208] import requests import plotly.express
    as px  # Make an API call and check the response. url = "https://api.github.com/search/repositories"
    url += "?q=language:python+sort:stars+stars:>10000"  headers = {"Accept": "application/vnd.github.v3+json"}
    r = requests.get(url, headers=headers) ❶ print(f"Status code: {r.status_code}")  #
    Process overall results. response_dict = r.json() ❷ print(f"Complete results:
    {not response_dict[''incomplete_results'']}")  # Process repository information.
    repo_dicts = response_dict[''items''] ❸ repo_names, stars = [], [] for repo_dict
    in repo_dicts:     repo_names.append(repo_dict[''name''])     stars.append(repo_dict[''stargazers_count''])  #
    Make visualization. ❹ fig = px.bar(x=repo_names, y=stars) fig.show() [PRE209]
    *--snip--* # Make visualization. title = "Most-Starred Python Projects on GitHub"
    labels = {''x'': ''Repository'', ''y'': ''Stars''} fig = px.bar(x=repo_names,
    y=stars, title=title, labels=labels)  ❶ fig.update_layout(title_font_size=28,
    xaxis_title_font_size=20,         yaxis_title_font_size=20)  fig.show() [PRE210]
    *--snip--* # Process repository information. repo_dicts = response_dict[''items'']
    ❶ repo_names, stars, hover_texts = [], [], [] for repo_dict in repo_dicts:  repo_names.append(repo_dict[''name''])  stars.append(repo_dict[''stargazers_count''])      #
    Build hover texts. ❷     owner = repo_dict[''owner''][''login'']     description
    = repo_dict[''description''] ❸     hover_text = f"{owner}<br />{description}"     hover_texts.append(hover_text)  #
    Make visualization. title = "Most-Starred Python Projects on GitHub" labels =
    {''x'': ''Repository'', ''y'': ''Stars''} ❹ fig = px.bar(x=repo_names, y=stars,
    title=title, labels=labels,         hover_name=hover_texts)  fig.update_layout(title_font_size=28,
    xaxis_title_font_size=20,  yaxis_title_font_size=20)  fig.show() [PRE211] *--snip--*
    # Process repository information. repo_dicts = response_dict[''items''] ❶ repo_links,
    stars, hover_texts = [], [], [] for repo_dict in repo_dicts:     # Turn repo names
    into active links.     repo_name = repo_dict[''name''] ❷     repo_url = repo_dict[''html_url'']
    ❸     repo_link = f"<a href=''{repo_url}''>{repo_name}</a>"     repo_links.append(repo_link)   stars.append(repo_dict[''stargazers_count''])   *--snip--*  #
    Make visualization. title = "Most-Starred Python Projects on GitHub" labels =
    {''x'': ''Repository'', ''y'': ''Stars''} fig = px.bar(x=repo_links, y=stars,
    title=title, labels=labels,  hover_name=hover_texts)  fig.update_layout(title_font_size=28,
    xaxis_title_font_size=20,  yaxis_title_font_size=20)  fig.show() [PRE212] *--snip--*
    fig.update_layout(title_font_size=28, xaxis_title_font_size=20,  yaxis_title_font_size=20)  fig.update_traces(marker_color=''SteelBlue'',
    marker_opacity=0.6)  fig.show() [PRE213] https://hacker-news.firebaseio.com/v0/item/31353677.json
    [PRE214] import requests import json  # Make an API call, and store the response.
    url = "https://hacker-news.firebaseio.com/v0/item/31353677.json" r = requests.get(url)
    print(f"Status code: {r.status_code}")  # Explore the structure of the data. response_dict
    = r.json() response_string = json.dumps(response_dict, indent=4) ❶ print(response_string)
    [PRE215] {     "by": "sohkamyung", ❶     "descendants": 302,     "id": 31353677,
    ❷     "kids": [         31354987,         31354235,         `--snip--`     ],     "score":
    785,     "time": 1652361401, ❸     "title": "Astronomers reveal first image of
    the black hole         at the heart of our galaxy",     "type": "story", ❹     "url":
    "https://public.nrao.edu/news/.../" } [PRE216] https://hacker-news.firebaseio.com/v0/topstories.json
    [PRE217] from operator import itemgetter  import requests  # Make an API call
    and check the response. ❶ url = "https://hacker-news.firebaseio.com/v0/topstories.json"
    r = requests.get(url) print(f"Status code: {r.status_code}")  # Process information
    about each submission. ❷ submission_ids = r.json() ❸ submission_dicts = [] for
    submission_id in submission_ids[:5]:     # Make a new API call for each submission.
    ❹     url = f"https://hacker-news.firebaseio.com/v0/item/{submission_id}.json"     r
    = requests.get(url)     print(f"id: {submission_id}\tstatus: {r.status_code}")     response_dict
    = r.json()      # Build a dictionary for each article. ❺     submission_dict =
    {         ''title'': response_dict[''title''],         ''hn_link'': f"https://news.ycombinator.com/item?id={submission_id}",         ''comments'':
    response_dict[''descendants''],     } ❻     submission_dicts.append(submission_dict)  ❼
    submission_dicts = sorted(submission_dicts, key=itemgetter(''comments''),                             reverse=True)  ❽
    for submission_dict in submission_dicts:     print(f"\nTitle: {submission_dict[''title'']}")     print(f"Discussion
    link: {submission_dict[''hn_link'']}")     print(f"Comments: {submission_dict[''comments'']}")
    [PRE218] Status code: 200 id: 31390506    status: 200 id: 31389893    status:
    200 id: 31390742    status: 200 `--snip--`  Title: Fly.io: The reclaimer of Heroku''s
    magic Discussion link: https://news.ycombinator.com/item?id=31390506 Comments:
    134  Title: The weird Hewlett Packard FreeDOS option Discussion link: https://news.ycombinator.com/item?id=31389893
    Comments: 64  Title: Modern JavaScript Tutorial Discussion link: https://news.ycombinator.com/item?id=31390742
    Comments: 20 `--snip--` [PRE219] learning_log$ **python -m venv ll_env** learning_log$
    [PRE220] learning_log$ **source ll_env/bin/activate** (ll_env)learning_log$ [PRE221]
    (ll_env)learning_log$ **deactivate** learning_log$ [PRE222] (ll_env)learning_log$
    **pip install --upgrade pip** (ll_env)learning_log$ **pip install django** Collecting
    django `--snip--` Installing collected packages: sqlparse, asgiref, django Successfully
    installed asgiref-3.5.2 django-4.1 sqlparse-0.4.2 (ll_env)learning_log$ [PRE223]
    ❶ (ll_env)learning_log$ **django-admin startproject ll_project .** ❷ (ll_env)learning_log$
    **ls** ll_env ll_project manage.py ❸ (ll_env)learning_log$ **ls ll_project** __init__.py
    asgi.py settings.py urls.py wsgi.py [PRE224] (ll_env)learning_log$ **python manage.py
    migrate** ❶ Operations to perform:  Apply all migrations: admin, auth, contenttypes,
    sessions Running migrations:   Applying contenttypes.0001_initial... OK   Applying
    auth.0001_initial... OK  `--snip--`   Applying sessions.0001_initial... OK ❷ (ll_env)learning_log$
    **ls** db.sqlite3 ll_env ll_project manage.py [PRE225] (ll_env)learning_log$ **python
    manage.py runserver** Watching for file changes with StatReloader Performing system
    checks...  ❶ System check identified no issues (0 silenced). May 19, 2022 - 21:52:35
    ❷ Django version 4.1, using settings ''ll_project.settings'' ❸ Starting development
    server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. [PRE226] learning_log$
    **source ll_env/bin/activate** (ll_env)learning_log$ **python manage.py startapp
    learning_logs** ❶ (ll_env)learning_log$ **ls** db.sqlite3 learning_logs ll_env
    ll_project manage.py ❷ (ll_env)learning_log$ **ls learning_logs/** __init__.py
    admin.py apps.py migrations models.py tests.py views.py [PRE227] from django.db
    import models  # Create your models here. [PRE228] from django.db import models  class
    Topic(models.Model):     """A topic the user is learning about.""" ❶     text
    = models.CharField(max_length=200) ❷     date_added = models.DateTimeField(auto_now_add=True)  ❸     def
    __str__(self):         """Return a string representation of the model."""         return
    self.text [PRE229] `--snip--` INSTALLED_APPS = [     ''django.contrib.admin'',     ''django.contrib.auth'',     ''django.contrib.contenttypes'',     ''django.contrib.sessions'',     ''django.contrib.messages'',     ''django.contrib.staticfiles'',
    ] `--snip--` [PRE230] *--snip--* INSTALLED_APPS = [     # My apps.     ''learning_logs'',   #
    Default django apps.  ''django.contrib.admin'',   *--snip--* ] *--snip--* [PRE231]
    (ll_env)learning_log$ **python manage.py makemigrations learning_logs** Migrations
    for ''learning_logs'':   learning_logs/migrations/0001_initial.py     - Create
    model Topic (ll_env)learning_log$ [PRE232] (ll_env)learning_log$ **python manage.py
    migrate** Operations to perform:   Apply all migrations: admin, auth, contenttypes,
    learning_logs, sessions Running migrations:   Applying learning_logs.0001_initial...
    OK [PRE233] (ll_env)learning_log$ **python manage.py createsuperuser** ❶ Username
    (leave blank to use ''eric''): **ll_admin** ❷ Email address: ❸ Password: Password
    (again): Superuser created successfully. (ll_env)learning_log$ [PRE234] from django.contrib
    import admin  # Register your models here. [PRE235] from django.contrib import
    admin  from .models import Topic  admin.site.register(Topic) [PRE236] from django.db
    import models  class Topic(models.Model):   *--snip--*  ❶ class Entry(models.Model):     """Something
    specific learned about a topic.""" ❷     topic = models.ForeignKey(Topic, on_delete=models.CASCADE)
    ❸     text = models.TextField()     date_added = models.DateTimeField(auto_now_add=True)  ❹     class
    Meta:         verbose_name_plural = ''entries''      def __str__(self):         """Return
    a simple string representing the entry.""" ❺         return f"{self.text[:50]}..."
    [PRE237] (ll_env)learning_log$ **python manage.py makemigrations learning_logs**
    Migrations for ''learning_logs'': ❶   learning_logs/migrations/0002_entry.py     -
    Create model Entry (ll_env)learning_log$ **python manage.py migrate** Operations
    to perform:  `--snip--` ❷   Applying learning_logs.0002_entry... OK [PRE238] from
    django.contrib import admin  from .models import Topic, Entry  admin.site.register(Topic)
    admin.site.register(Entry) [PRE239] (ll_env)learning_log$ **python manage.py shell**
    ❶ >>> **from learning_logs.models import Topic** >>> **Topic.objects.all()** <QuerySet
    [<Topic: Chess>, <Topic: Rock Climbing>]> [PRE240] >>> **topics = Topic.objects.all()**
    >>> **for topic in topics:** ...     **print(topic.id, topic)** ... 1 Chess 2
    Rock Climbing [PRE241] >>> **t = Topic.objects.get(id=1)** >>> **t.text** ''Chess''
    >>> **t.date_added** datetime.datetime(2022, 5, 20, 3, 33, 36, 928759,     tzinfo=datetime.timezone.utc)
    [PRE242] ❶ >>> **t.entry_set.all()** <QuerySet [<Entry: The opening is the first
    part of the game, roughly...>, <Entry: In the opening phase of the game, it''s
    important t...>]> [PRE243] ❶ from django.contrib import admin from django.urls
    import path  ❷ urlpatterns = [ ❸     path(''admin/'', admin.site.urls), ] [PRE244]
    from django.contrib import admin from django.urls import path, include  urlpatterns
    = [  path(''admin/'', admin.site.urls),   path('''', include(''learning_logs.urls'')),
    ] [PRE245] ❶ """Defines URL patterns for learning_logs."""  ❷ from django.urls
    import path  ❸ from . import views  ❹ app_name = ''learning_logs'' ❺ urlpatterns
    = [     # Home page ❻     path('''', views.index, name=''index''), ] [PRE246]
    from django.shortcuts import render  # Create your views here. [PRE247] from django.shortcuts
    import render  def index(request):     """The home page for Learning Log."""     return
    render(request, ''learning_logs/index.html'') [PRE248] <p>Learning Log</p>  <p>Learning
    Log helps you keep track of your learning, for any topic you''re interested in.</p>
    [PRE249] <p> ❶   <a href="{% url ''learning_logs:index'' %}">Learning Log</a>
    </p>  ❷ {% block content %}{% endblock content %} [PRE250] <a href="`link_url`">`link
    text`</a> [PRE251] ❶ {% extends ''learning_logs/base.html'' %}  ❷ {% block content
    %}  <p>Learning Log helps you keep track of your learning, for any topic you''re  interested
    in.</p> ❸ {% endblock content %} [PRE252] """Defines URL patterns for learning_logs."""
    *--snip--* urlpatterns = [  # Home page  path('''', views.index, name=''index''),     #
    Page that shows all topics.     path(''topics/'', views.topics, name=''topics''),
    ] [PRE253] from django.shortcuts import render  ❶ from .models import Topic  def
    index(request):   *--snip--*  ❷ def topics(request):     """Show all topics."""
    ❸     topics = Topic.objects.order_by(''date_added'') ❹     context = {''topics'':
    topics} ❺     return render(request, ''learning_logs/topics.html'', context) [PRE254]
    {% extends ''learning_logs/base.html'' %}  {% block content %}    <p>Topics</p>  ❶   <ul>
    ❷     {% for topic in topics %} ❸       <li>{{ topic.text }}</li> ❹     {% empty
    %}       <li>No topics have been added yet.</li> ❺     {% endfor %} ❻   </ul>  {%
    endblock content %} [PRE255] {% for `item` in `list` %}   `do something with each
    item` {% endfor %} [PRE256] <p> ❶   <a href="{% url ''learning_logs:index'' %}">Learning
    Log</a> - ❷   <a href="{% url ''learning_logs:topics'' %}">Topics</a> </p>  {%
    block content %}{% endblock content %} [PRE257] *--snip--* urlpatterns = [   *--snip--*     #
    Detail page for a single topic.     path(''topics/<int:topic_id>/'', views.topic,
    name=''topic''), ] [PRE258] `--snip--` ❶ def topic(request, topic_id):     """Show
    a single topic and all its entries.""" ❷     topic = Topic.objects.get(id=topic_id)
    ❸     entries = topic.entry_set.order_by(''-date_added'') ❹     context = {''topic'':
    topic, ''entries'': entries} ❺     return render(request, ''learning_logs/topic.html'',
    context) [PRE259] {% extends ''learning_logs/base.html'' %}  {% block content
    %}  ❶   <p>Topic: {{ topic.text }}</p>    <p>Entries:</p> ❷   <ul> ❸     {% for
    entry in entries %}       <li> ❹         <p>{{ entry.date_added|date:''M d, Y
    H:i'' }}</p> ❺         <p>{{ entry.text|linebreaks }}</p>       </li> ❻     {%
    empty %}  <li>There are no entries for this topic yet.</li>     {% endfor %}   </ul>  {%
    endblock content %} [PRE260] *--snip--*     {% for topic in topics %}       <li>         <a
    href="{% url ''learning_logs:topic'' topic.id %}">           {{ topic.text }}</a></li>       </li>  {%
    empty %} *--snip--* [PRE261] from django import forms  from .models import Topic  ❶
    class TopicForm(forms.ModelForm):     class Meta: ❷         model = Topic ❸         fields
    = [''text''] ❹         labels = {''text'': ''''} [PRE262] *--snip--* urlpatterns
    = [   *--snip--*   # Page for adding a new topic.     path(''new_topic/'', views.new_topic,
    name=''new_topic''), ] [PRE263] from django.shortcuts import render, redirect  from
    .models import Topic from .forms import TopicForm  *--snip--* def new_topic(request):     """Add
    a new topic.""" ❶     if request.method != ''POST'':         # No data submitted;
    create a blank form. ❷         form = TopicForm()     else:         # POST data
    submitted; process data. ❸         form = TopicForm(data=request.POST) ❹         if
    form.is_valid(): ❺             form.save() ❻             return redirect(''learning_logs:topics'')      #
    Display a blank or invalid form. ❼     context = {''form'': form}     return render(request,
    ''learning_logs/new_topic.html'', context) [PRE264] {% extends "learning_logs/base.html"
    %}  {% block content %}   <p>Add a new topic:</p>  ❶   <form action="{% url ''learning_logs:new_topic''
    %}" method=''post''> ❷     {% csrf_token %} ❸     {{ form.as_div }} ❹     <button
    name="submit">Add topic</button>   </form>  {% endblock content %} [PRE265] {%
    extends "learning_logs/base.html" %}  {% block content %}   <p>Topics</p>   <ul>   *--snip--*  </ul>    <a
    href="{% url ''learning_logs:new_topic'' %}">Add a new topic</a>  {% endblock
    content %} [PRE266] from django import forms  from .models import Topic, Entry  class
    TopicForm(forms.ModelForm):   *--snip--*  class EntryForm(forms.ModelForm):     class
    Meta:         model = Entry         fields = [''text''] ❶         labels = {''text'':
    ''''} ❷         widgets = {''text'': forms.Textarea(attrs={''cols'': 80})} [PRE267]
    *--snip--* urlpatterns = [   *--snip--*     # Page for adding a new entry.     path(''new_entry/<int:topic_id>/'',
    views.new_entry, name=''new_entry''), ] [PRE268] from django.shortcuts import
    render, redirect  from .models import Topic from .forms import TopicForm, EntryForm  *--snip--*
    def new_entry(request, topic_id):     """Add a new entry for a particular topic."""
    ❶     topic = Topic.objects.get(id=topic_id)  ❷     if request.method != ''POST'':         #
    No data submitted; create a blank form. ❸         form = EntryForm()     else:         #
    POST data submitted; process data. ❹         form = EntryForm(data=request.POST)         if
    form.is_valid(): ❺             new_entry = form.save(commit=False) ❻             new_entry.topic
    = topic             new_entry.save() ❼             return redirect(''learning_logs:topic'',
    topic_id=topic_id)      # Display a blank or invalid form.     context = {''topic'':
    topic, ''form'': form}     return render(request, ''learning_logs/new_entry.html'',
    context) [PRE269] {% extends "learning_logs/base.html" %}  {% block content %}  ❶   <p><a
    href="{% url ''learning_logs:topic'' topic.id %}">{{ topic }}</a></p>    <p>Add
    a new entry:</p> ❷   <form action="{% url ''learning_logs:new_entry'' topic.id
    %}" method=''post''>     {% csrf_token %}     {{ form.as_div }}     <button name=''submit''>Add
    entry</button>   </form>  {% endblock content %} [PRE270] {% extends "learning_logs/base.html"
    %}  {% block content %}   <p>Topic: {{ topic }}</p>   <p>Entries:</p>   <p>     <a
    href="{% url ''learning_logs:new_entry'' topic.id %}">Add new entry</a>   </p>   <ul>   *--snip--*  </ul>  {%
    endblock content %} [PRE271] *--snip--* urlpatterns = [   *--snip--*     # Page
    for editing an entry.     path(''edit_entry/<int:entry_id>/'', views.edit_entry,
    name=''edit_entry''), ] [PRE272] from django.shortcuts import render, redirect  from
    .models import Topic, Entry from .forms import TopicForm, EntryForm *--snip--*  def
    edit_entry(request, entry_id):     """Edit an existing entry.""" ❶     entry =
    Entry.objects.get(id=entry_id)     topic = entry.topic      if request.method
    != ''POST'':         # Initial request; pre-fill form with the current entry.
    ❷         form = EntryForm(instance=entry)     else:         # POST data submitted;
    process data. ❸         form = EntryForm(instance=entry, data=request.POST)         if
    form.is_valid(): ❹             form.save() ❺             return redirect(''learning_logs:topic'',
    topic_id=topic.id)      context = {''entry'': entry, ''topic'': topic, ''form'':
    form}     return render(request, ''learning_logs/edit_entry.html'', context) [PRE273]
    {% extends "learning_logs/base.html" %}  {% block content %}    <p><a href="{%
    url ''learning_logs:topic'' topic.id %}">{{ topic }}</a></p>    <p>Edit entry:</p>  ❶   <form
    action="{% url ''learning_logs:edit_entry'' entry.id %}" method=''post''>     {%
    csrf_token %}     {{ form.as_div }} ❷     <button name="submit">Save changes</button>   </form>  {%
    endblock content %} [PRE274] *--snip--*  {% for entry in entries %}  <li>  <p>{{
    entry.date_added|date:''M d, Y H:i'' }}</p>  <p>{{ entry.text|linebreaks }}</p>   <p>           <a
    href="{% url ''learning_logs:edit_entry'' entry.id %}">            Edit entry</a></p>  </li>
    *--snip--* [PRE275] (ll_env)learning_log$ **python manage.py startapp accounts**
    (ll_env)learning_log$ **ls** ❶ accounts db.sqlite3 learning_logs ll_env ll_project
    manage.py (ll_env)learning_log$ **ls accounts** ❷ __init__.py admin.py apps.py
    migrations models.py tests.py views.py [PRE276] *--snip--* INSTALLED_APPS = [  #
    My apps  ''learning_logs'',     ''accounts'',   # Default django apps.   *--snip--*
    ] *--snip--* [PRE277] from django.contrib import admin from django.urls import
    path, include  urlpatterns = [  path(''admin/'', admin.site.urls),     path(''accounts/'',
    include(''accounts.urls'')),  path('''', include(''learning_logs.urls'')), ] [PRE278]
    """Defines URL patterns for accounts."""  from django.urls import path, include  app_name
    = ''accounts'' urlpatterns = [     # Include default auth urls.     path('''',
    include(''django.contrib.auth.urls'')), ] [PRE279] {% extends ''learning_logs/base.html''
    %}  {% block content %}  ❶   {% if form.errors %}     <p>Your username and password
    didn''t match. Please try again.</p>   {% endif %}  ❷   <form action="{% url ''accounts:login''
    %}" method=''post''>     {% csrf_token %} ❸     {{ form.as_div }}  ❹     <button
    name="submit">Log in</button>   </form>  {% endblock content %} [PRE280] *--snip--*
    # My settings. LOGIN_REDIRECT_URL = ''learning_logs:index'' [PRE281] <p>  <a href="{%
    url ''learning_logs:index'' %}">Learning Log</a> -   <a href="{% url ''learning_logs:topics''
    %}">Topics</a> - ❶   {% if user.is_authenticated %} ❷     Hello, {{ user.username
    }}.   {% else %} ❸     <a href="{% url ''accounts:login'' %}">Log in</a>   {%
    endif %} </p>  {% block content %}{% endblock content %} [PRE282] *--snip--* {%
    block content %}{% endblock content %}  {% if user.is_authenticated %} ❶   <hr
    /> ❷   <form action="{% url ''accounts:logout'' %}" method=''post''>     {% csrf_token
    %}     <button name=''submit''>Log out</button>   </form> {% endif %} [PRE283]
    *--snip--* # My settings. LOGIN_REDIRECT_URL = ''learning_logs:index'' LOGOUT_REDIRECT_URL
    = ''learning_logs:index'' [PRE284] """Defines URL patterns for accounts."""  from
    django.urls import path, include  from . import views  app_name = accounts urlpatterns
    = [  # Include default auth urls.  path('''', include(''django.contrib.auth.urls'')),     #
    Registration page.     path(''register/'', views.register, name=''register''),
    ] [PRE285] from django.shortcuts import render, redirect from django.contrib.auth
    import login from django.contrib.auth.forms import UserCreationForm  def register(request):     """Register
    a new user."""     if request.method != ''POST'':         # Display blank registration
    form. ❶         form = UserCreationForm()     else:         # Process completed
    form. ❷         form = UserCreationForm(data=request.POST)  ❸         if form.is_valid():
    ❹             new_user = form.save()             # Log the user in and then redirect
    to home page. ❺             login(request, new_user) ❻             return redirect(''learning_logs:index'')      #
    Display a blank or invalid form.     context = {''form'': form}     return render(request,
    ''registration/register.html'', context) [PRE286] {% extends "learning_logs/base.html"
    %}  {% block content %}    <form action="{% url ''accounts:register'' %}" method=''post''>     {%
    csrf_token %}     {{ form.as_div }}      <button name="submit">Register</button>   </form>  {%
    endblock content %} [PRE287] *--snip--*  {% if user.is_authenticated %}  Hello,
    {{ user.username }}.  {% else %}   <a href="{% url ''accounts:register'' %}">Register</a>
    -  <a href="{% url ''accounts:login'' %}">Log in</a>  {% endif %} *--snip--* [PRE288]
    from django.shortcuts import render, redirect from django.contrib.auth.decorators
    import login_required  from .models import Topic, Entry *--snip--*  @login_required
    def topics(request):  """Show all topics."""   *--snip--* [PRE289] *--snip--*
    # My settings. LOGIN_REDIRECT_URL = ''learning_logs:index'' LOGOUT_REDIRECT_URL
    = ''learning_logs:index'' LOGIN_URL = ''accounts:login'' [PRE290] *--snip--* @login_required
    def topics(request):   *--snip--*  @login_required def topic(request, topic_id):   *--snip--*  @login_required
    def new_topic(request):   *--snip--*  @login_required def new_entry(request, topic_id):   *--snip--*  @login_required
    def edit_entry(request, entry_id):   *--snip--* [PRE291] from django.db import
    models from django.contrib.auth.models import User  class Topic(models.Model):  """A
    topic the user is learning about."""  Text = models.CharField(max_length=200)  date_added
    = models.DateTimeField(auto_now_add=True)     owner = models.ForeignKey(User,
    on_delete=models.CASCADE)   def __str__(self):  """Return a string representing
    the topic."""  Return self.text  class Entry(models.Model):   *--snip--* [PRE292]
    (ll_env)learning_log$ **python manage.py shell** ❶ >>> **from django.contrib.auth.models
    import User** ❷ >>> **User.objects.all()** <QuerySet [<User: ll_admin>, <User:
    eric>, <User: willie>]> ❸ >>> **for user in User.objects.all():** ...     **print(user.username,
    user.id)** ... ll_admin 1 eric 2 willie 3 >>> [PRE293] ❶ (ll_env)learning_log$
    **python manage.py makemigrations learning_logs** ❷ It is impossible to add a
    non-nullable field ''owner'' to topic without specifying a default. This is because...
    ❸ Please select a fix:  1) Provide a one-off default now (will be set on all existing
    rows with a     null value for this column)  2) Quit and manually define a default
    value in models.py. ❹ Select an option: **1** ❺ Please enter the default value
    now, as valid Python The datetime and django.utils.timezone modules are available...
    Type ''exit'' to exit this prompt ❻ >>> **1** Migrations for ''learning_logs'':   learning_logs/migrations/0003_topic_owner.py
    - Add field owner to topic (ll_env)learning_log$ [PRE294] (ll_env)learning_log$
    **python manage.py migrate** Operations to perform:   Apply all migrations: admin,
    auth, contenttypes, learning_logs, sessions Running migrations: ❶   Applying learning_logs.0003_topic_owner...
    OK (ll_env)learning_log$ [PRE295] >>> **from learning_logs.models import Topic**
    >>> **for topic in Topic.objects.all():** ...     **print(topic, topic.owner)**
    ... Chess ll_admin Rock Climbing ll_admin >>> [PRE296] *--snip--* @login_required
    def topics(request):  """Show all topics."""     topics = Topic.objects.filter(owner=request.user).order_by(''date_added'')  context
    = {''topics'': topics}  return render(request, ''learning_logs/topics.html'',
    context) *--snip--* [PRE297] from django.shortcuts import render, redirect from
    django.contrib.auth.decorators import login_required ❶ from django.http import
    Http404  *--snip--* @login_required def topic(request, topic_id):  """Show a single
    topic and all its entries."""  topic = Topic.objects.get(id=topic_id)     # Make
    sure the topic belongs to the current user. ❷     if topic.owner != request.user:         raise
    Http404   entries = topic.entry_set.order_by(''-date_added'')  context = {''topic'':
    topic, ''entries'': entries}  return render(request, ''learning_logs/topic.html'',
    context) *--snip--* [PRE298] *--snip--* @login_required def edit_entry(request,
    entry_id):  """Edit an existing entry."""  entry = Entry.objects.get(id=entry_id)  topic
    = entry.topic     if topic.owner != request.user:         raise Http404      if
    request.method != ''POST'':   *--snip--* [PRE299] *--snip--* @login_required def
    new_topic(request):   *--snip--*  else:  # POST data submitted; process data.  form
    = TopicForm(data=request.POST)  if form.is_valid(): ❶             new_topic =
    form.save(commit=False) ❷             new_topic.owner = request.user ❸             new_topic.save()  return
    redirect(''learning_logs:topics'')   # Display a blank or invalid form.  context
    = {''form'': form}  return render(request, ''learning_logs/new_topic.html'', context)   *--snip--*
    [PRE300] (ll_env)learning_log$ **pip install django-bootstrap5** `--snip--` Successfully
    installed beautifulsoup4-4.11.1 django-bootstrap5-21.3     soupsieve-2.3.2.post1
    [PRE301] *--snip--* INSTALLED_APPS = [  # My apps.  ''learning_logs'',  ''accounts'',      #
    Third party apps.     ''django_bootstrap5'',   # Default django apps.  ''django.contrib.admin'',   *--snip--*
    [PRE302] ❶ <!doctype html> ❷ <html lang="en"> ❸ <head>   <meta charset="utf-8">   <meta
    name="viewport" content="width=device-width, initial-scale=1"> ❹   <title>Learning
    Log</title>  ❺   {% load django_bootstrap5 %}   {% bootstrap_css %}   {% bootstrap_javascript
    %}  </head> [PRE303] *--snip--* </head> <body>  ❶   <nav class="navbar navbar-expand-md
    navbar-light bg-light mb-4 border">     <div class="container-fluid"> ❷       <a
    class="navbar-brand" href="{% url ''learning_logs:index'' %}">           Learning
    Log</a>  ❸       <button class="navbar-toggler" type="button" data-bs-toggle="collapse"         data-bs-target="#navbarCollapse"
    aria-controls="navbarCollapse"         aria-expanded="false" aria-label="Toggle
    navigation">         <span class="navbar-toggler-icon"></span>       </button>  ❹       <div
    class="collapse navbar-collapse" id="navbarCollapse"> ❺         <ul class="navbar-nav
    me-auto mb-2 mb-md-0"> ❻           <li class="nav-item"> ❼             <a class="nav-link"
    href="{% url ''learning_logs:topics'' %}">               Topics</a></li>         </ul>
    <!-- End of links on left side of navbar -->       </div> <!-- Closes collapsible
    parts of navbar -->      </div> <!-- Closes navbar''s container -->   </nav> <!--
    End of navbar -->  ❽ {% block content %}{% endblock content %}  </body> </html>
    [PRE304] <!-- This is an HTML comment. --> [PRE305]  *--snip--*  </ul> <!-- End
    of links on left side of navbar -->          <!-- Account-related links --> ❶         <ul
    class="navbar-nav ms-auto mb-2 mb-md-0">  ❷           {% if user.is_authenticated
    %}             <li class="nav-item"> ❸               <span class="navbar-text
    me-2">Hello, {{ user.username }}.                 </span></li> ❹           {%
    else %}             <li class="nav-item">               <a class="nav-link" href="{%
    url ''accounts:register'' %}">                   Register</a></li>             <li
    class="nav-item">               <a class="nav-link" href="{% url ''accounts:login''
    %}">                   Log in</a></li>           {% endif %}          </ul> <!--
    End of account-related links -->   </div> <!-- Closes collapsible parts of navbar
    -->   *--snip--* [PRE306]  *--snip--*  </ul> <!-- End of account-related links
    -->          {% if user.is_authenticated %}           <form action="{% url ''accounts:logout''
    %}" method=''post''>             {% csrf_token %} ❶             <button name=''submit''
    class=''btn btn-outline-secondary btn-sm''>                 Log out</button>           </form>         {%
    endif %}   </div> <!-- Closes collapsible parts of navbar -->   *--snip--* [PRE307]  *--snip--*  </nav>
    <!-- End of navbar -->  ❶   <main class="container"> ❷     <div class="pb-2 mb-2
    border-bottom">       {% block page_header %}{% endblock page_header %}     </div>
    ❸     <div>       {% block content %}{% endblock content %}     </div>   </main>  </body>
    </html> [PRE308] {% extends "learning_logs/base.html" %}  ❶ {% block page_header
    %} ❷   <div class="p-3 mb-4 bg-light border rounded-3">     <div class="container-fluid
    py-4"> ❸       <h1 class="display-3">Track your learning.</h1>  ❹       <p class="lead">Make
    your own Learning Log, and keep a list of the       topics you''re learning about.
    Whenever you learn something new       about a topic, make an entry summarizing
    what you''ve learned.</p>  ❺       <a class="btn btn-primary btn-lg mt-1"         href="{%
    url ''accounts:register'' %}">Register &raquo;</a>     </div>   </div> {% endblock
    page_header %} [PRE309] {% extends ''learning_logs/base.html'' %} ❶ {% load django_bootstrap5
    %}  ❷ {% block page_header %}   <h2>Log in to your account.</h2> {% endblock page_header
    %}  {% block content %}   <form action="{% url ''accounts:login'' %}" method=''post''>  {%
    csrf_token %} ❸     {% bootstrap_form form %} ❹     {% bootstrap_button button_type="submit"
    content="Log in" %}  </form>  {% endblock content %} [PRE310] {% extends ''learning_logs/base.html''
    %}  {% block page_header %} ❶   <h1>Topics</h1> {% endblock page_header %}  {%
    block content %}  ❷   <ul class="list-group border-bottom pb-2 mb-4">  {% for
    topic in topics %} ❸       <li class="list-group-item border-0">         <a href="{%
    url ''learning_logs:topic'' topic.id %}">           {{ topic.text }}</a>       </li>  {%
    empty %} ❹       <li class="list-group-item border-0">No topics have been added
    yet.</li>  {% endfor %}  </ul>   <a href="{% url ''learning_logs:new_topic'' %}">Add
    a new topic</a>  {% endblock content %} [PRE311] {% extends ''learning_logs/base.html''
    %}  ❶ {% block page_header %}   <h1>{{ topic.text }}</h1> {% endblock page_header
    %}  {% block content %}  <p>  <a href="{% url ''learning_logs:new_entry'' topic.id
    %}">Add new entry</a>  </p>   {% for entry in entries %} ❷     <div class="card
    mb-3">       <!-- Card header with timestamp and edit link --> ❸       <h4 class="card-header">         {{
    entry.date_added|date:''M d, Y H:i'' }} ❹         <small><a href="{% url ''learning_logs:edit_entry''
    entry.id %}">           edit entry</a></small>       </h4>       <!-- Card body
    with entry text --> ❺       <div class="card-body">{{ entry.text|linebreaks }}</div>     </div>  {%
    empty %} ❻     <p>There are no entries for this topic yet.</p>  {% endfor %}  {%
    endblock content %} [PRE312] $ curl -fsS https://platform.sh/cli/installer | php
    [PRE313] (ll_env)learning_log$ **pip install platformshconfig** [PRE314] (ll_env)learning_log$
    **pip freeze > requirements.txt** [PRE315] asgiref==3.5.2 beautifulsoup4==4.11.1
    Django==4.1 django-bootstrap5==21.3 platformshconfig==2.4.0 soupsieve==2.3.2.post1
    sqlparse==0.4.2 [PRE316] # Requirements for live project. gunicorn psycopg2 [PRE317]
    ❶ name: "ll_project" type: "python:3.10"  ❷ relationships:     database: "db:postgresql"  #
    The configuration of the app when it''s exposed to the web. ❸ web:     upstream:         socket_family:
    unix     commands: ❹         start: "gunicorn -w 4 -b unix:$SOCKET ll_project.wsgi:application"
    ❺     locations:         "/":             passthru: true         "/static":  root:
    "static"             expires: 1h             allow: true  # The size of the persistent
    disk of the application (in MB). ❻ disk: 512 [PRE318] *--snip--* disk: 512  #
    Set a local read/write mount for logs. ❶ mounts:     "logs":         source: local         source_path:
    logs  # The hooks executed at various points in the lifecycle of the application.
    ❷ hooks:     build: | ❸         pip install --upgrade pip         pip install
    -r requirements.txt         pip install -r requirements_remote.txt          mkdir
    logs ❹         python manage.py collectstatic         rm -rf logs ❺     deploy:
    |         python manage.py migrate [PRE319] # Each route describes how an incoming
    URL will be processed by Platform.sh.  "https://{default}/":     type: upstream     upstream:
    "ll_project:http"  "https://www.{default}/":     type: redirect     to: "https://{default}/"
    [PRE320] # Each service listed will be deployed in its own container as part of
    your #   Platform.sh project.  db:     type: postgresql:12     disk: 1024 [PRE321]
    *--snip--* # Platform.sh settings. ❶ from platformshconfig import Config  config
    = Config() ❷ if config.is_valid_platform(): ❸     ALLOWED_HOSTS.append(''.platformsh.site'')  ❹     if
    config.appDir:         STATIC_ROOT = Path(config.appDir) / ''static'' ❺     if
    config.projectEntropy:         SECRET_KEY = config.projectEntropy      if not
    config.in_build(): ❻         db_settings = config.credentials(''database'')         DATABASES
    = {             ''default'': {                 ''ENGINE'': ''django.db.backends.postgresql'',                 ''NAME'':
    db_settings[''path''],                 ''USER'': db_settings[''username''],                 ''PASSWORD'':
    db_settings[''password''],                 ''HOST'': db_settings[''host''],                 ''PORT'':
    db_settings[''port''],             },         } [PRE322] (ll_env)learning_log$
    **git --version** git version 2.30.1 (Apple Git-130) [PRE323] (ll_env)learning_log$
    **git config --global user.name "eric"** (ll_env)learning_log$ **git config --global
    user.email "eric@example.com"** [PRE324] ll_env/ __pycache__/ *.sqlite3 [PRE325]
    ❶ (ll_env)learning_log$ **git init** Initialized empty Git repository in /Users/eric/.../learning_log/.git/
    ❷ (ll_env)learning_log$ **git add .** ❸ (ll_env)learning_log$ **git commit -am
    "Ready for deployment to Platform.sh."** [main (root-commit) c7ffaad] Ready for
    deployment to Platform.sh.  42 files changed, 879 insertions(+)  create mode 100644
    .gitignore  create mode 100644 .platform.app.yaml  `--snip--`  create mode 100644
    requirements_remote.txt ❹ (ll_env)learning_log$ **git status** On branch main
    nothing to commit, working tree clean (ll_env)learning_log$ [PRE326] (ll_env)learning_log$
    **platform login** Opened URL: http://127.0.0.1:5000 Please use the browser to
    log in. `--snip--` ❶ Do you want to create an SSH configuration file automatically?
    [Y/n] **Y** [PRE327] (ll_env)learning_log$ **platform create** * Project title
    (--title) Default: Untitled Project ❶ > **ll_project**  * Region (--region) The
    region where the project will be hosted   `--snip--`   [us-3.platform.sh] Moses
    Lake, United States (AZURE) [514 gC02eq/kWh] ❷ > **us-3.platform.sh** * Plan (--plan)
    Default: development Enter a number to choose:   [0] development   `--snip--`
    ❸ > **0**  * Environments (--environments) The number of environments Default:
    3 ❹ > **3**  * Storage (--storage) The amount of storage per environment, in GiB
    Default: 5 ❺ > **5** [PRE328] Default branch (--default-branch) The default Git
    branch name for the project (the production environment) Default: main ❶ > **main**  Git
    repository detected: /Users/eric/.../learning_log ❷ Set the new project ll_project
    as the remote for this repository? [Y/n] **Y**  The estimated monthly cost of
    this project is: $10 USD ❸ Are you sure you want to continue? [Y/n] **Y**  The
    Platform.sh Bot is activating your project        ▀▄   ▄▀     █▄█▀███▀█▄█     ▀█████████▀      ▄▀     ▀▄  The
    project is now ready! [PRE329] (ll_env)learning_log$ **platform push** ❶ Are you
    sure you want to push to the main (production) branch? [Y/n] **Y** `--snip--`
    The authenticity of host ''git.us-3.platform.sh (...)'' can''t be established.
    RSA key fingerprint is SHA256:Tvn...7PM ❷ Are you sure you want to continue connecting
    (yes/no/[fingerprint])? **Y** Pushing HEAD to the existing environment main   `--snip--`   To
    git.us-3.platform.sh:3pp3mqcexhlvy.git    * [new branch]      HEAD -> main [PRE330]
    (ll_env)learning_log$ **platform url** Enter a number to open a URL   [0] https://main-bvxea6i-wmye2fx7wwqgu.us-3.platformsh.site/   `--snip--`  >
    **0** [PRE331] (ll_env)learning_log$ **platform environment:ssh**   ___ _      _    __                    _
    | _ \ |__ _| |_ / _|___ _ _ _ __    __| |_ |  _/ / _` |  _|  _/ _ \ ''_| ''  \
    _(_-< '' \ |_| |_\__,_|\__|_| \___/_| |_|_|_(_)__/_||_|   Welcome to Platform.sh.  ❶
    web@ll_project.0:~$ **ls** accounts  learning_logs  ll_project  logs  manage.py  requirements.txt     requirements_remote.txt  static
    ❷ web@ll_project.0:~$ **python manage.py createsuperuser** ❸ Username (leave blank
    to use ''web''): **ll_admin_live** Email address: Password: Password (again):
    Superuser created successfully. ❹ web@ll_project.0:~$ **exit** logout Connection
    to ssh.us-3.platform.sh closed. ❺ (ll_env)learning_log$ [PRE332] *--snip--* if
    config.is_valid_platform():  ALLOWED_HOSTS.append(''.platformsh.site'')     DEBUG
    = False     *--snip--* [PRE333] ❶ (ll_env)learning_log$ **git commit -am "Set
    DEBUG False on live site."** [main d2ad0f7] Set DEBUG False on live site.   1
    file changed, 1 insertion(+) ❷ (ll_env)learning_log$ **git status** On branch
    main nothing to commit, working tree clean (ll_env)learning_log$ [PRE334] (ll_env)learning_log$
    **platform push** Are you sure you want to push to the main (production) branch?
    [Y/n] **Y** Pushing HEAD to the existing environment main `--snip--`   To git.us-3.platform.sh:wmye2fx7wwqgu.git      fce0206..d2ad0f7  HEAD
    -> main (ll_env)learning_log$ [PRE335] {% extends "learning_logs/base.html" %}  {%
    block page_header %}   <h2>The item you requested is not available. (404)</h2>
    {% endblock page_header %} [PRE336] {% extends "learning_logs/base.html" %}  {%
    block page_header %}   <h2>There has been an internal error. (500)</h2> {% endblock
    page_header %} [PRE337] *--snip--* TEMPLATES = [  {  ''BACKEND'': ''django.template.backends.django.DjangoTemplates'',         ''DIRS'':
    [BASE_DIR / ''templates''],  ''APP_DIRS'': True,   *--snip--*  }, ] *--snip--*
    [PRE338] ❶ (ll_env)learning_log$ **git add .** ❷ (ll_env)learning_log$ **git commit
    -am "Added custom 404 and 500 error pages."**  3 files changed, 11 insertions(+),
    1 deletion(-)  create mode 100644 templates/404.html  create mode 100644 templates/500.html
    ❸ (ll_env)learning_log$ **platform push** `--snip--`   To git.us-3.platform.sh:wmye2fx7wwqgu.git      d2ad0f7..9f042ef  HEAD
    -> main (ll_env)learning_log$ [PRE339] (ll_env)learning_log$ **platform project:delete**
    [PRE340] (ll_env)learning_log$ **git remote** platform (ll_env)learning_log$ **git
    remote remove platform** [PRE341]`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
