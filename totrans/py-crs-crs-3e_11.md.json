["```py\nfrom django import forms\n\nfrom .models import Topic\n\n❶ class TopicForm(forms.ModelForm):\n    class Meta:\n❷         model = Topic\n❸         fields = ['text']\n❹         labels = {'text': ''}\n```", "```py\n*--snip--*\nurlpatterns = [\n  *--snip--*\n  # Page for adding a new topic.\n    path('new_topic/', views.new_topic, name='new_topic'),\n]\n```", "```py\nfrom django.shortcuts import render, redirect\n\nfrom .models import Topic\nfrom .forms import TopicForm\n\n*--snip--*\ndef new_topic(request):\n    \"\"\"Add a new topic.\"\"\"\n❶     if request.method != 'POST':\n        # No data submitted; create a blank form.\n❷         form = TopicForm()\n    else:\n        # POST data submitted; process data.\n❸         form = TopicForm(data=request.POST)\n❹         if form.is_valid():\n❺             form.save()\n❻             return redirect('learning_logs:topics')\n\n    # Display a blank or invalid form.\n❼     context = {'form': form}\n    return render(request, 'learning_logs/new_topic.xhtml', context)\n```", "```py\n{% extends \"learning_logs/base.xhtml\" %}\n\n{% block content %}\n  <p>Add a new topic:</p>\n\n❶   <form action=\"{% url 'learning_logs:new_topic' %}\" method='post'>\n❷     {% csrf_token %}\n❸     {{ form.as_div }}\n❹     <button name=\"submit\">Add topic</button>\n  </form>\n\n{% endblock content %}\n```", "```py\n{% extends \"learning_logs/base.xhtml\" %}\n\n{% block content %}\n\n <p>Topics</p>\n\n <ul>\n  *--snip--*\n </ul>\n\n  <a href=\"{% url 'learning_logs:new_topic' %}\">Add a new topic</a>\n\n{% endblock content %}\n```", "```py\nfrom django import forms\n\nfrom .models import Topic, Entry\n\nclass TopicForm(forms.ModelForm):\n  *--snip--*\n\nclass EntryForm(forms.ModelForm):\n    class Meta:\n        model = Entry\n        fields = ['text']\n❶         labels = {'text': ''}\n❷         widgets = {'text': forms.Textarea(attrs={'cols': 80})}\n```", "```py\n*--snip--*\nurlpatterns = [\n  *--snip--*\n    # Page for adding a new entry.\n    path('new_entry/<int:topic_id>/', views.new_entry, name='new_entry'),\n]\n```", "```py\nfrom django.shortcuts import render, redirect\n\nfrom .models import Topic\nfrom .forms import TopicForm, EntryForm\n\n*--snip--*\ndef new_entry(request, topic_id):\n    \"\"\"Add a new entry for a particular topic.\"\"\"\n❶     topic = Topic.objects.get(id=topic_id)\n\n❷     if request.method != 'POST':\n        # No data submitted; create a blank form.\n❸         form = EntryForm()\n    else:\n        # POST data submitted; process data.\n❹         form = EntryForm(data=request.POST)\n        if form.is_valid():\n❺             new_entry = form.save(commit=False)\n❻             new_entry.topic = topic\n            new_entry.save()\n❼             return redirect('learning_logs:topic', topic_id=topic_id)\n\n    # Display a blank or invalid form.\n    context = {'topic': topic, 'form': form}\n    return render(request, 'learning_logs/new_entry.xhtml', context)\n```", "```py\n{% extends \"learning_logs/base.xhtml\" %}\n\n{% block content %}\n\n❶   <p><a href=\"{% url 'learning_logs:topic' topic.id %}\">{{ topic }}</a></p>\n\n  <p>Add a new entry:</p>\n❷   <form action=\"{% url 'learning_logs:new_entry' topic.id %}\" method='post'>\n    {% csrf_token %}\n    {{ form.as_div }}\n    <button name='submit'>Add entry</button>\n  </form>\n\n{% endblock content %}\n```", "```py\n{% extends \"learning_logs/base.xhtml\" %}\n\n{% block content %}\n\n <p>Topic: {{ topic }}</p>\n\n <p>Entries:</p>\n  <p>\n    <a href=\"{% url 'learning_logs:new_entry' topic.id %}\">Add new entry</a>\n  </p>\n\n <ul>\n  *--snip--*\n </ul>\n\n{% endblock content %}\n```", "```py\n*--snip--*\nurlpatterns = [\n  *--snip--*\n    # Page for editing an entry.\n    path('edit_entry/<int:entry_id>/', views.edit_entry, name='edit_entry'),\n]\n```", "```py\nfrom django.shortcuts import render, redirect\n\nfrom .models import Topic, Entry\nfrom .forms import TopicForm, EntryForm\n*--snip--*\n\ndef edit_entry(request, entry_id):\n    \"\"\"Edit an existing entry.\"\"\"\n❶     entry = Entry.objects.get(id=entry_id)\n    topic = entry.topic\n\n    if request.method != 'POST':\n        # Initial request; pre-fill form with the current entry.\n❷         form = EntryForm(instance=entry)\n    else:\n        # POST data submitted; process data.\n❸         form = EntryForm(instance=entry, data=request.POST)\n        if form.is_valid():\n❹             form.save()\n❺             return redirect('learning_logs:topic', topic_id=topic.id)\n\n    context = {'entry': entry, 'topic': topic, 'form': form}\n    return render(request, 'learning_logs/edit_entry.xhtml', context)\n```", "```py\n{% extends \"learning_logs/base.xhtml\" %}\n\n{% block content %}\n\n  <p><a href=\"{% url 'learning_logs:topic' topic.id %}\">{{ topic }}</a></p>\n\n  <p>Edit entry:</p>\n\n❶   <form action=\"{% url 'learning_logs:edit_entry' entry.id %}\" method='post'>\n    {% csrf_token %}\n    {{ form.as_div }}\n❷     <button name=\"submit\">Save changes</button>\n  </form>\n\n{% endblock content %}\n```", "```py\n*--snip--*\n {% for entry in entries %}\n <li>\n <p>{{ entry.date_added|date:'M d, Y H:i' }}</p>\n <p>{{ entry.text|linebreaks }}</p>\n  <p>\n          <a href=\"{% url 'learning_logs:edit_entry' entry.id %}\">\n           Edit entry</a></p>\n </li>\n*--snip--*\n```", "```py\n(ll_env)learning_log$ **python manage.py startapp accounts**\n(ll_env)learning_log$ **ls**\n❶ accounts db.sqlite3 learning_logs ll_env ll_project manage.py\n(ll_env)learning_log$ **ls accounts**\n❷ __init__.py admin.py apps.py migrations models.py tests.py views.py\n```", "```py\n*--snip--*\nINSTALLED_APPS = [\n # My apps\n 'learning_logs',\n    'accounts',\n\n # Default django apps.\n  *--snip--*\n]\n*--snip--*\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')),\n path('', include('learning_logs.urls')),\n]\n```", "```py\n\"\"\"Defines URL patterns for accounts.\"\"\"\n\nfrom django.urls import path, include\n\napp_name = 'accounts'\nurlpatterns = [\n    # Include default auth urls.\n    path('', include('django.contrib.auth.urls')),\n]\n```", "```py\n{% extends 'learning_logs/base.xhtml' %}\n\n{% block content %}\n\n❶   {% if form.errors %}\n    <p>Your username and password didn't match. Please try again.</p>\n  {% endif %}\n\n❷   <form action=\"{% url 'accounts:login' %}\" method='post'>\n    {% csrf_token %}\n❸     {{ form.as_div }}\n\n❹     <button name=\"submit\">Log in</button>\n  </form>\n\n{% endblock content %}\n```", "```py\n*--snip--*\n# My settings.\nLOGIN_REDIRECT_URL = 'learning_logs:index'\n```", "```py\n<p>\n <a href=\"{% url 'learning_logs:index' %}\">Learning Log</a> -\n  <a href=\"{% url 'learning_logs:topics' %}\">Topics</a> -\n❶   {% if user.is_authenticated %}\n❷     Hello, {{ user.username }}.\n  {% else %}\n❸     <a href=\"{% url 'accounts:login' %}\">Log in</a>\n  {% endif %}\n</p>\n\n{% block content %}{% endblock content %}\n```", "```py\n*--snip--*\n{% block content %}{% endblock content %}\n\n{% if user.is_authenticated %}\n❶   <hr />\n❷   <form action=\"{% url 'accounts:logout' %}\" method='post'>\n    {% csrf_token %}\n    <button name='submit'>Log out</button>\n  </form>\n{% endif %}\n```", "```py\n*--snip--*\n# My settings.\nLOGIN_REDIRECT_URL = 'learning_logs:index'\nLOGOUT_REDIRECT_URL = 'learning_logs:index'\n```", "```py\n\"\"\"Defines URL patterns for accounts.\"\"\"\n\nfrom django.urls import path, include\n\nfrom . import views\n\napp_name = accounts\nurlpatterns = [\n # Include default auth urls.\n path('', include('django.contrib.auth.urls')),\n    # Registration page.\n    path('register/', views.register, name='register'),\n]\n```", "```py\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login\nfrom django.contrib.auth.forms import UserCreationForm\n\ndef register(request):\n    \"\"\"Register a new user.\"\"\"\n    if request.method != 'POST':\n        # Display blank registration form.\n❶         form = UserCreationForm()\n    else:\n        # Process completed form.\n❷         form = UserCreationForm(data=request.POST)\n\n❸         if form.is_valid():\n❹             new_user = form.save()\n            # Log the user in and then redirect to home page.\n❺             login(request, new_user)\n❻             return redirect('learning_logs:index')\n\n    # Display a blank or invalid form.\n    context = {'form': form}\n    return render(request, 'registration/register.xhtml', context)\n```", "```py\n{% extends \"learning_logs/base.xhtml\" %}\n\n{% block content %}\n\n  <form action=\"{% url 'accounts:register' %}\" method='post'>\n    {% csrf_token %}\n    {{ form.as_div }}\n\n    <button name=\"submit\">Register</button>\n  </form>\n\n{% endblock content %}\n```", "```py\n*--snip--*\n {% if user.is_authenticated %}\n Hello, {{ user.username }}.\n {% else %}\n  <a href=\"{% url 'accounts:register' %}\">Register</a> -\n <a href=\"{% url 'accounts:login' %}\">Log in</a>\n {% endif %}\n*--snip--*\n```", "```py\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\n\nfrom .models import Topic, Entry\n*--snip--*\n\n@login_required\ndef topics(request):\n \"\"\"Show all topics.\"\"\"\n  *--snip--*\n```", "```py\n*--snip--*\n# My settings.\nLOGIN_REDIRECT_URL = 'learning_logs:index'\nLOGOUT_REDIRECT_URL = 'learning_logs:index'\nLOGIN_URL = 'accounts:login'\n```", "```py\n*--snip--*\n@login_required\ndef topics(request):\n  *--snip--*\n\n@login_required\ndef topic(request, topic_id):\n  *--snip--*\n\n@login_required\ndef new_topic(request):\n  *--snip--*\n\n@login_required\ndef new_entry(request, topic_id):\n  *--snip--*\n\n@login_required\ndef edit_entry(request, entry_id):\n  *--snip--*\n```", "```py\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Topic(models.Model):\n \"\"\"A topic the user is learning about.\"\"\"\n Text = models.CharField(max_length=200)\n date_added = models.DateTimeField(auto_now_add=True)\n    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n\n def __str__(self):\n \"\"\"Return a string representing the topic.\"\"\"\n Return self.text\n\nclass Entry(models.Model):\n  *--snip--*\n```", "```py\n(ll_env)learning_log$ **python manage.py shell**\n❶ >>> **from django.contrib.auth.models import User**\n❷ >>> **User.objects.all()**\n<QuerySet [<User: ll_admin>, <User: eric>, <User: willie>]>\n❸ >>> **for user in User.objects.all():**\n...     **print(user.username, user.id)**\n...\nll_admin 1\neric 2\nwillie 3\n>>>\n```", "```py\n❶ (ll_env)learning_log$ **python manage.py makemigrations learning_logs**\n❷ It is impossible to add a non-nullable field 'owner' to topic without\nspecifying a default. This is because...\n❸ Please select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a\n    null value for this column)\n 2) Quit and manually define a default value in models.py.\n❹ Select an option: **1**\n❺ Please enter the default value now, as valid Python\nThe datetime and django.utils.timezone modules are available...\nType 'exit' to exit this prompt\n❻ >>> **1**\nMigrations for 'learning_logs':\n  learning_logs/migrations/0003_topic_owner.py\n- Add field owner to topic\n(ll_env)learning_log$\n```", "```py\n(ll_env)learning_log$ **python manage.py migrate**\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, learning_logs, sessions\nRunning migrations:\n❶   Applying learning_logs.0003_topic_owner... OK\n(ll_env)learning_log$\n```", "```py\n>>> **from learning_logs.models import Topic**\n>>> **for topic in Topic.objects.all():**\n...     **print(topic, topic.owner)**\n...\nChess ll_admin\nRock Climbing ll_admin\n>>>\n```", "```py\n*--snip--*\n@login_required\ndef topics(request):\n \"\"\"Show all topics.\"\"\"\n    topics = Topic.objects.filter(owner=request.user).order_by('date_added')\n context = {'topics': topics}\n return render(request, 'learning_logs/topics.xhtml', context)\n*--snip--*\n```", "```py\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\n❶ from django.http import Http404\n\n*--snip--*\n@login_required\ndef topic(request, topic_id):\n \"\"\"Show a single topic and all its entries.\"\"\"\n topic = Topic.objects.get(id=topic_id)\n    # Make sure the topic belongs to the current user.\n❷     if topic.owner != request.user:\n        raise Http404\n\n entries = topic.entry_set.order_by('-date_added')\n context = {'topic': topic, 'entries': entries}\n return render(request, 'learning_logs/topic.xhtml', context)\n*--snip--*\n```", "```py\n*--snip--*\n@login_required\ndef edit_entry(request, entry_id):\n \"\"\"Edit an existing entry.\"\"\"\n entry = Entry.objects.get(id=entry_id)\n topic = entry.topic\n    if topic.owner != request.user:\n        raise Http404\n\n    if request.method != 'POST':\n  *--snip--*\n```", "```py\n*--snip--*\n@login_required\ndef new_topic(request):\n  *--snip--*\n else:\n # POST data submitted; process data.\n form = TopicForm(data=request.POST)\n if form.is_valid():\n❶             new_topic = form.save(commit=False)\n❷             new_topic.owner = request.user\n❸             new_topic.save()\n return redirect('learning_logs:topics')\n\n # Display a blank or invalid form.\n context = {'form': form}\n return render(request, 'learning_logs/new_topic.xhtml', context)\n  *--snip--*\n```"]