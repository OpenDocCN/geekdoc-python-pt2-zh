["```py\n\"USW00025333\",\"SITKA AIRPORT, AK US\",\"2021-01-01\",,\"44\",\"40\"\n```", "```py\nfrom pathlib import Path\nimport csv\n\n❶ path = Path('weather_data/sitka_weather_07-2021_simple.csv')\nlines = path.read_text().splitlines()\n\n❷ reader = csv.reader(lines)\n❸ header_row = next(reader)\nprint(header_row)\n```", "```py\n['STATION', 'NAME', 'DATE', 'TAVG', 'TMAX', 'TMIN']\n```", "```py\n*--snip--*\nreader = csv.reader(lines)\nheader_row = next(reader)\n\nfor index, column_header in enumerate(header_row):\n    print(index, column_header)\n```", "```py\n0 STATION\n1 NAME\n2 DATE\n3 TAVG\n4 TMAX\n5 TMIN\n```", "```py\n*--snip--*\nreader = csv.reader(lines)\nheader_row = next(reader)\n\n# Extract high temperatures.\n❶ highs = []\n❷ for row in reader:\n❸     high = int(row[4])\n    highs.append(high)\n\nprint(highs)\n```", "```py\n[61, 60, 66, 60, 65, 59, 58, 58, 57, 60, 60, 60, 57, 58, 60, 61, 63, 63, 70, 64, 59, 63, 61, 58, 59, 64, 62, 70, 70, 73, 66]\n```", "```py\nfrom pathlib import Path\nimport csv\n\nimport matplotlib.pyplot as plt\n\npath = Path('weather_data/sitka_weather_07-2021_simple.csv')\nlines = path.read_text().splitlines()\n  *--snip--*\n\n# Plot the high temperatures.\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\n❶ ax.plot(highs, color='red')\n\n# Format plot.\n❷ ax.set_title(\"Daily High Temperatures, July 2021\", fontsize=24)\n❸ ax.set_xlabel('', fontsize=16)\nax.set_ylabel(\"Temperature (F)\", fontsize=16)\nax.tick_params(labelsize=16)\n\nplt.show()\n```", "```py\n\"USW00025333\",\"SITKA AIRPORT, AK US\",\"2021-07-01\",,\"61\",\"53\"\n```", "```py\n>>> **from datetime import datetime**\n>>> **first_date = datetime.strptime('2021-07-01', '%Y-%m-%d')**\n>>> **print(first_date)**\n2021-07-01 00:00:00\n```", "```py\nfrom pathlib import Path\nimport csv\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n\npath = Path('weather_data/sitka_weather_07-2021_simple.csv')\nlines = path.read_text().splitlines()\n\nreader = csv.reader(lines)\nheader_row = next(reader)\n\n# Extract dates and high temperatures.\n❶ dates, highs = [], []\nfor row in reader:\n❷     current_date = datetime.strptime(row[2], '%Y-%m-%d')\n high = int(row[4])\n    dates.append(current_date)\n highs.append(high)\n\n# Plot the high temperatures.\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\n❸ ax.plot(dates, highs, color='red')\n\n# Format plot.\nax.set_title(\"Daily High Temperatures, July 2021\", fontsize=24)\nax.set_xlabel('', fontsize=16)\n❹ fig.autofmt_xdate()\nax.set_ylabel(\"Temperature (F)\", fontsize=16)\nax.tick_params(labelsize=16)\n\nplt.show()\n```", "```py\n*--snip--*\npath = Path('weather_data/sitka_weather_2021_simple.csv')\nlines = path.read_text().splitlines()\n*--snip--*\n# Format plot.\nax.set_title(\"Daily High Temperatures, 2021\", fontsize=24)\nax.set_xlabel('', fontsize=16)\n*--snip--*\n```", "```py\n*--snip--*\nreader = csv.reader(lines)\nheader_row = next(reader)\n\n# Extract dates, and high and low temperatures.\n❶ dates, highs, lows = [], [], []\nfor row in reader:\n current_date = datetime.strptime(row[2], '%Y-%m-%d')\n high = int(row[4])\n❷     low = int(row[5])\n dates.append(current_date)\n highs.append(high)\n    lows.append(low)\n\n# Plot the high and low temperatures.\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\nax.plot(dates, highs, color='red')\n❸ ax.plot(dates, lows, color='blue')\n\n# Format plot.\n❹ ax.set_title(\"Daily High and Low Temperatures, 2021\", fontsize=24)\n*--snip--*\n```", "```py\n*--snip--*\n# Plot the high and low temperatures.\nplt.style.use('seaborn')\nfig, ax = plt.subplots()\n❶ ax.plot(dates, highs, color='red', alpha=0.5)\nax.plot(dates, lows, color='blue', alpha=0.5)\n❷ ax.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1)\n*--snip--*\n```", "```py\nfrom pathlib import Path\nimport csv\n\npath = Path('weather_data/death_valley_2021_simple.csv')\nlines = path.read_text().splitlines()\n\nreader = csv.reader(lines)\nheader_row = next(reader)\n\nfor index, column_header in enumerate(header_row):\n    print(index, column_header)\n```", "```py\n0 STATION\n1 NAME\n2 DATE\n3 TMAX\n4 TMIN\n5 TOBS\n```", "```py\n*--snip--*\npath = Path('weather_data/death_valley_2021_simple.csv')\nlines = path.read_text().splitlines()\n  *--snip--*\n# Extract dates, and high and low temperatures.\ndates, highs, lows = [], [], []\nfor row in reader:\n current_date = datetime.strptime(row[2], '%Y-%m-%d')\n    high = int(row[3])\n    low = int(row[4])\n dates.append(current_date)\n*--snip--*\n```", "```py\nTraceback (most recent call last):\n  File \"death_valley_highs_lows.py\", line 17, in <module>\n    high = int(row[3])\n❶ ValueError: invalid literal for int() with base 10: ''\n```", "```py\n*--snip--*\nfor row in reader:\n current_date = datetime.strptime(row[2], '%Y-%m-%d')\n❶     try:\n high = int(row[3])\n low = int(row[4])\n    except ValueError:\n❷  print(f\"Missing data for {current_date}\")\n❸     else:\n dates.append(current_date)\n highs.append(high)\n lows.append(low)\n\n# Plot the high and low temperatures.\n*--snip--*\n\n# Format plot.\n❹ title = \"Daily High and Low Temperatures, 2021\\nDeath Valley, CA\"\nax.set_title(title, fontsize=20)\nax.set_xlabel('', fontsize=16)\n*--snip--*\n```", "```py\nMissing data for 2021-05-04 00:00:00\n```", "```py\n{\"type\":\"FeatureCollection\",\"metadata\":{\"generated\":1649052296000,...\n{\"type\":\"Feature\",\"properties\":{\"mag\":1.6,\"place\":\"63 km SE of Ped...\n{\"type\":\"Feature\",\"properties\":{\"mag\":2.2,\"place\":\"27 km SSE of Ca...\n{\"type\":\"Feature\",\"properties\":{\"mag\":3.7,\"place\":\"102 km SSE of S...\n{\"type\":\"Feature\",\"properties\":{\"mag\":2.92000008,\"place\":\"49 km SE...\n{\"type\":\"Feature\",\"properties\":{\"mag\":1.4,\"place\":\"44 km NE of Sus...\n`--snip--`\n```", "```py\nfrom pathlib import Path\nimport json\n\n# Read data as a string and convert to a Python object.\npath = Path('eq_data/eq_data_1_day_m1.geojson')\ncontents = path.read_text()\n❶ all_eq_data = json.loads(contents)\n\n# Create a more readable version of the data file.\n❷ path = Path('eq_data/readable_eq_data.geojson')\n❸ readable_contents = json.dumps(all_eq_data, indent=4)\npath.write_text(readable_contents)\n```", "```py\n{\n    \"type\": \"FeatureCollection\",\n❶     \"metadata\": {\n        \"generated\": 1649052296000,\n        \"url\": \"https://earthquake.usgs.gov/earthquakes/.../1.0_day.geojson\",\n        \"title\": \"USGS Magnitude 1.0+ Earthquakes, Past Day\",\n        \"status\": 200,\n        \"api\": \"1.10.3\",\n        \"count\": 160\n    },\n❷     \"features\": [\n    *--snip--*\n```", "```py\n *--snip--*\n        {\n            \"type\": \"Feature\",\n❶             \"properties\": {\n                \"mag\": 1.6,\n `--snip--`\n❷                 \"title\": \"M 1.6 - 27 km NNW of Susitna, Alaska\"\n            },\n❸             \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [\n❹                     -150.7585,\n❺                     61.7591,\n                    56.3\n ]\n            },\n            \"id\": \"ak0224bju1jx\"\n        },\n```", "```py\nfrom pathlib import Path\nimport json\n\n# Read data as a string and convert to a Python object.\npath = Path('eq_data/eq_data_1_day_m1.geojson')\ncontents = path.read_text()\nall_eq_data = json.loads(contents)\n\n# Examine all earthquakes in the dataset.\nall_eq_dicts = all_eq_data['features']\nprint(len(all_eq_dicts))\n```", "```py\n160\n```", "```py\n*--snip--*\nall_eq_dicts = all_eq_data['features']\n\n❶ mags = []\nfor eq_dict in all_eq_dicts:\n❷     mag = eq_dict['properties']['mag']\n    mags.append(mag)\n\nprint(mags[:10])\n```", "```py\n[1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4, 4.6, 4.5, 1.9, 1.8]\n```", "```py\n*--snip--*\nall_eq_dicts = all_eq_data['features']\n\nmags, lons, lats = [], [], []\nfor eq_dict in all_eq_dicts:\n mag = eq_dict['properties']['mag']\n❶     lon = eq_dict['geometry']['coordinates'][0]\n    lat = eq_dict['geometry']['coordinates'][1]\n mags.append(mag)\n    lons.append(lon)\n lats.append(lat)\n\nprint(mags[:10])\nprint(lons[:5])\nprint(lats[:5])\n```", "```py\n[1.6, 1.6, 2.2, 3.7, 2.92000008, 1.4, 4.6, 4.5, 1.9, 1.8]\n[-150.7585, -153.4716, -148.7531, -159.6267, -155.248336791992]\n[61.7591, 59.3152, 63.1633, 54.5612, 18.7551670074463]\n```", "```py\nfrom pathlib import Path\nimport json\n\nimport plotly.express as px\n\n*--snip--*\nfor eq_dict in all_eq_dicts:\n  *--snip--*\n\ntitle = 'Global Earthquakes'\n❶ fig = px.scatter_geo(lat=lats, lon=lons, title=title)\nfig.show()\n```", "```py\n*--snip--*\n# Read data as a string and convert to a Python object.\npath = Path('eq_data/eq_data_30_day_m1.geojson')\ncontents = path.read_text()\n*--snip--*\n\ntitle = 'Global Earthquakes'\nfig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title)\nfig.show()\n```", "```py\n*--snip--*\nfig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title,\n❶         color=mags,\n❷         color_continuous_scale='Viridis',\n❸         labels={'color':'Magnitude'},\n❹         projection='natural earth',\n    )\nfig.show()\n```", "```py\n>>> **import plotly.express as px**\n>>> **px.colors.named_colorscales()**\n['aggrnyl', 'agsunset', 'blackbody', ..., 'mygbm']\n```", "```py\n*--snip--*\n❶ mags, lons, lats, eq_titles = [], [], [], []\n mag = eq_dict['properties']['mag']\n lon = eq_dict['geometry']['coordinates'][0]\n lat = eq_dict['geometry']['coordinates'][1]\n❷     eq_title = eq_dict['properties']['title']\n mags.append(mag)\n lons.append(lon)\n lats.append(lat)\n    eq_titles.append(eq_title)\n\ntitle = 'Global Earthquakes'\nfig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title,\n  *--snip--*\n projection='natural earth',\n❸         hover_name=eq_titles,\n )\nfig.show()\n```"]