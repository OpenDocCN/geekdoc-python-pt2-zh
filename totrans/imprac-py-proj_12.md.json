["```py\nInvestment type: bonds\nStarting value: $1,000,000\nAnnual withdrawal: $40,000\nYears in retirement (min-ml-max): 17-25-40\nNumber of runs: 20,000\n\nOdds of running out of money: 36.1%\n\nAverage outcome: $883,843\nMinimum outcome: $0\nMaximum outcome: $7,607,789\n```", "```py\nGet user input for investment type (all stocks, all bonds, or a blend)\nMap investment type choice to a list of historical returns\nGet user input for the starting value of investments\nGet user input for the initial yearly withdrawal amount\nGet user input for the minimum, most likely, and maximum duration of retirement\nGet user input on number of cases to run\nStart list to hold outcomes\nLoop through cases:\n    For each case:\n        Extract random contiguous sample of returns list for duration period\n        Extract same interval from inflation list\n        For each year in sample:\n            If year not equal to year 1:\n                Adjust withdrawal for inflation\n            Subtract withdrawal from investments\n            Adjust investments for returns\n            If investments <= 0:\n                Investments = 0\n                Break\n    Append investments value to outcomes list\nDisplay input parameters\nCalculate and display the probability of ruin\nCalculate and display statistics\nDisplay a subset of outcomes as a bar chart\n```", "```py\n11.6\n37.5\n43.8\n-8.3\n-25.1\n-43.8\n-8.6\n```", "```py\n   import sys\n\n   import random\n\n➊ import matplotlib.pyplot as plt\n\n➋ def read_to_list(file_name):\n\n       \"\"\"Open a file of data in percent, convert to decimal & return a list.\"\"\"\n\n       ➌ with open(file_name) as in_file:\n\n           ➍ lines = [float(line.strip()) for line in in_file]\n\n           ➎ decimal = [round(line / 100, 5) for line in lines]\n\n           ➏ return decimal\n\n➐ def default_input(prompt, default=None):\n\n       \"\"\"Allow use of default values in input.\"\"\"\n\n➑     prompt = '{} [{}]: '.format(prompt, default)\n\n➒     response = input(prompt)\n\n➓     if not response and default:\n\n           return default\n\n       else:\n\n           return response\n```", "```py\n   # load data files with original data in percent form\n➊ print(\"\\nNote: Input data should be in percent, not decimal!\\n\")\n   try:\n       bonds = read_to_list('10-yr_TBond_returns_1926-2013_pct.txt')\n       stocks = read_to_list('SP500_returns_1926-2013_pct.txt')\n       blend_40_50_10 = read_to_list('S-B-C_blend_1926-2013_pct.txt')\n       blend_50_50 = read_to_list('S-B_blend_1926-2013_pct.txt')\n       infl_rate = read_to_list('annual_infl_rate_1926-2013_pct.txt')\n   except IOError as e:\n       print(\"{}. \\nTerminating program.\".format(e), file=sys.stderr)\n       sys.exit(1)\n\n   # get user input; use dictionary for investment-type arguments\n➋ investment_type_args = {'bonds': bonds, 'stocks': stocks,\n                           'sb_blend': blend_50_50, 'sbc_blend': blend_40_50_10}\n\n➌ # print input legend for user\n   print(\"   stocks = SP500\")\n   print(\"    bonds = 10-yr Treasury Bond\")\n   print(\" sb_blend = 50% SP500/50% TBond\")\n   print(\"sbc_blend = 40% SP500/50% TBond/10% Cash\\n\")\n   print(\"Press ENTER to take default value shown in [brackets]. \\n\")\n\n   # get user input\n➍ invest_type = default_input(\"Enter investment type: (stocks, bonds, sb_blend,\"\\\n                               \" sbc_blend): \\n\", 'bonds').lower()\n➎ while invest_type not in investment_type_args:\n       invest_type = input(\"Invalid investment. Enter investment type \" \\\n                           \"as listed in prompt: \")\n\n   start_value = default_input(\"Input starting value of investments: \\n\", \\\n                               '2000000')\n➏ while not start_value.isdigit():\n       start_value = input(\"Invalid input! Input integer only: \")\n\n➐ withdrawal = default_input(\"Input annual pre-tax withdrawal\" \\\n                              \" (today's $): \\n\", '80000')\n   while not withdrawal.isdigit():\n       withdrawal = input(\"Invalid input! Input integer only: \")\n\n   min_years = default_input(\"Input minimum years in retirement: \\n\", '18')\n   while not min_years.isdigit():\n       min_years = input(\"Invalid input! Input integer only: \")\n\n   most_likely_years = default_input(\"Input most-likely years in retirement: \\n\",\n                                     '25')\n   while not most_likely_years.isdigit():\n       most_likely_years = input(\"Invalid input! Input integer only: \")\n\n   max_years = default_input(\"Input maximum years in retirement: \\n\", '40')\n   while not max_years.isdigit():\n       max_years = input(\"Invalid input! Input integer only: \")\n\n   num_cases = default_input(\"Input number of cases to run: \\n\", '50000')\n   while not num_cases.isdigit():\n       num_cases = input(\"Invalid input! Input integer only: \")\n```", "```py\n   # check for other erroneous input\n➊ if not int(min_years) < int(most_likely_years) < int(max_years) \\\n       or int(max_years) > 99:\n    ➋ print(\"\\nProblem with input years.\", file=sys.stderr)\n       print(\"Requires Min < ML < Max with Max <= 99.\", file=sys.stderr)\n       sys.exit(1)\n```", "```py\n➊ def montecarlo(returns):\n       \"\"\"Run MCS and return investment value at end-of-plan and bankrupt count.\"\"\"\n    ➋ case_count = 0\n       bankrupt_count = 0\n       outcome = []\n\n    ➌ while case_count < int(num_cases):\n           investments = int(start_value)\n        ➍ start_year = random.randrange(0, len(returns))\n        ➎ duration = int(random.triangular(int(min_years), int(max_years),\n                                            int(most_likely_years)))\n        ➏ end_year = start_year + duration\n        ➐ lifespan = [i for i in range(start_year, end_year)]\n           bankrupt = 'no'\n\n           # build temporary lists for each case\n        ➑ lifespan_returns = []\n           lifespan_infl = []\n           for i in lifespan:\n            ➒ lifespan_returns.append(returns[i % len(returns)])\n               lifespan_infl.append(infl_rate[i % len(infl_rate)])\n```", "```py\n        # loop through each year of retirement for each case run\n        ➊ for index, i in enumerate(lifespan_returns):\n            ➋ infl = lifespan_infl[index]\n\n            ➌ # don't adjust for inflation the first year\n               if index == 0:\n                   withdraw_infl_adj = int(withdrawal)\n               else:\n                   withdraw_infl_adj = int(withdraw_infl_adj * (1 + infl))\n\n            ➍ investments -= withdraw_infl_adj\n               investments = int(investments * (1 + i))\n\n            ➎ if investments <= 0:\n                   bankrupt = 'yes'\n                   break\n\n        ➏ if bankrupt == 'yes':\n               outcome.append(0)\n               bankrupt_count += 1\n           else:\n               outcome.append(investments)\n\n        ➐ case_count += 1\n\n    ➑ return outcome, bankrupt_count\n```", "```py\n➊ def bankrupt_prob(outcome, bankrupt_count):\n       \"\"\"Calculate and return chance of running out of money & other stats.\"\"\"\n    ➋ total = len(outcome)\n    ➌ odds = round(100 * bankrupt_count / total, 1)\n\n    ➍ print(\"\\nInvestment type: {}\".format(invest_type))\n       print(\"Starting value: ${:,}\".format(int(start_value)))\n       print(\"Annual withdrawal: ${:,}\".format(int(withdrawal)))\n       print(\"Years in retirement (min-ml-max): {}-{}-{}\"\n             .format(min_years, most_likely_years, max_years))\n       print(\"Number of runs: {:,}\\n\".format(len(outcome)))\n       print(\"Odds of running out of money: {}%\\n\".format(odds))\n       print(\"Average outcome: ${:,}\".format(int(sum(outcome) / total)))\n       print(\"Minimum outcome: ${:,}\".format(min(i for i in outcome)))\n       print(\"Maximum outcome: ${:,}\".format(max(i for i in outcome)))\n\n    ➎ return odds\n```", "```py\n➊ def main():\n       \"\"\"Call MCS & bankrupt functions and draw bar chart of results.\"\"\"\n    ➋ outcome, bankrupt_count = montecarlo(investment_type_args[invest_type])\n       odds = bankrupt_prob(outcome, bankrupt_count)\n\n    ➌ plotdata = outcome[:3000]  # only plot first 3000 runs\n\n    ➍ plt.figure('Outcome by Case (showing first {} runs)'.format(len(plotdata)),\n                  figsize=(16, 5))  # size is width, height in inches\n    ➎ index = [i + 1 for i in range(len(plotdata))]\n    ➏ plt.bar(index, plotdata, color='black')\n       plt.xlabel('Simulated Lives', fontsize=18)\n       plt.ylabel('$ Remaining', fontsize=18)\n    ➐ plt.ticklabel_format(style='plain', axis='y')\n    ➑ ax = plt.gca()\n       ax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\"\n                                                            .format(int(x))))\n       plt.title('Probability of running out of money = {}%'.format(odds),\n                 fontsize=20, color='red')\n    ➒ plt.show()\n\n   # run program\n➓ if __name__ == '__main__':\n       main()\n```", "```py\n   start_value = default_input(\"Input starting value of investments: \\n\", \\\n                               '2000000')\n   while not start_value.isdigit():\n       start_value = input(\"Invalid input! Input integer only: \")\n\n➊ withdrawal_1 = default_input(\"Input annual pre-tax withdrawal for \" \\\n                                 \"first 5 yrs(today's $): \\n\", '100000')\n   while not withdrawal_1.isdigit():\n       withdrawal_1 = input(\"Invalid input! Input integer only: \")\n\n➋ withdrawal_2 = default_input(\"Input annual pre-tax withdrawal for \" \\\n                                \"remainder (today's $): \\n\", '80000')\n   while not withdrawal_2.isdigit():\n       withdrawal_2 = input(\"Invalid input! Input integer only: \")\n\n   min_years = default_input(\"Input minimum years in retirement: \\n\", '18')\n```", "```py\n            # don't adjust for inflation the first year\n\n            if index == 0:\n\n             ➊ withdraw_infl_adj_1 = int(withdrawal_1)\n\n             ➋ withdraw_infl_adj_2 = int(withdrawal_2)\n\n            else:\n\n             ➌ withdraw_infl_adj_1 = int(withdraw_infl_adj_1 * (1 + infl))\n\n             ➍ withdraw_infl_adj_2 = int(withdraw_infl_adj_2 * (1 + infl))\n\n         ➎ if index < 5:\n\n             ➏ withdraw_infl_adj = withdraw_infl_adj_1\n\n            else:\n\n                withdraw_infl_adj = withdraw_infl_adj_2\n\n            investments -= withdraw_infl_adj\n\n            investments = int(investments * (1 + i))\n```", "```py\n    print(\"Annual withdrawal first 5 yrs: ${:,}\".format(int(withdrawal_1)))\n    print(\"Annual withdrawal after 5 yrs: ${:,}\".format(int(withdrawal_2)))\n```"]