- en: '**INTRODUCTION**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you’ve learned the basics of coding in Python, you’re ready to write complete
    programs that take on real-world tasks. In *Real-World Python*, you’ll write programs
    to win the moon race with Apollo 8, help Clyde Tombaugh discover Pluto, select
    landing sites for a Mars rover, locate exoplanets, send super-secret messages
    to your friends, battle monstrous mutants, save shipwrecked sailors, escape the
    walking dead, and more, all using the Python programming language. In the process,
    you’ll apply powerful computer vision, natural language processing, and scientific
    modules, such as OpenCV, NLTK, NumPy, pandas, and matplotlib, as well as a host
    of other packages designed to make your computing life easier.
  prefs: []
  type: TYPE_NORMAL
- en: '**Who Should Read This Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can think of this as a sophomore Python book. It isn’t a tutorial on programming
    basics but rather a way for you to continue training using a project-based approach.
    This way, you won’t have to waste your money or shelf space rehashing concepts
    you’ve already learned. I’ll still explain every step of the projects, and you’ll
    receive detailed instructions about using the libraries and modules, including
    how to install them.
  prefs: []
  type: TYPE_NORMAL
- en: These projects will appeal to anyone who wants to use programming to conduct
    experiments, test theories, simulate nature, or just have fun. As you work through
    them, you’ll increase your knowledge of Python libraries and modules and learn
    handy shortcuts, useful functions, and helpful techniques. Rather than focus on
    isolated modular code snippets, these projects teach you how to build complete,
    working programs involving real-world applications, datasets, and issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Python?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is a high-level, interpretive, general-purpose programming language.
    It’s free, highly interactive, and portable across all major platforms and micro-
    controllers such as the Raspberry Pi. Python supports both functional and object-oriented
    programming and can interact with code written in many other programming languages,
    such as C++.
  prefs: []
  type: TYPE_NORMAL
- en: Because Python is accessible to beginners and useful to experts, it has penetrated
    schools, universities, large corporations, financial institutions, and most, if
    not all, fields of science. As a result, it’s now the most popular language for
    machine learning, data science, and artificial intelligence applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**What’s in This Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following is an overview of the chapters in this book. You don’t have to
    work through them sequentially, but I’ll explain new modules and techniques more
    thoroughly when they’re first introduced.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: Saving Shipwrecked Sailors with Bayes’ Rule](ch01.xhtml)** Use
    Bayesian probability to efficiently direct Coast Guard search and rescue efforts
    off Cape Python. Gain experience with OpenCV, NumPy, and the itertools module.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Attributing Authorship with Stylometry](ch02.xhtml)** Use natural
    language processing to determine whether Sir Arthur Conan Doyle or H. G. Wells
    wrote the novel *The Lost World*. Gain experience with NLTK, matplotlib, and stylometric
    techniques such as stop words, parts of speech, lexical richness, and Jaccard
    similarity.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: Summarizing Speeches with Natural Language Processing](ch03.xhtml)**
    Scrape famous speeches off the internet and automatically produce a summary of
    the salient points. Then turn the text of a novel into a cool display for advertising
    or promotional material. Gain experience with BeautifulSoup, Requests, regex,
    NLTK, Collections, wordcloud, and matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: Sending Super-Secret Messages with a Book Cipher](ch04.xhtml)**
    Share unbreakable ciphers with your friends by digitally reproducing the one-time
    pad approach used in Ken Follet’s best-selling spy novel, *The Key to Rebecca*.
    Gain experience with the Collections module.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: Finding Pluto](ch05.xhtml)** Reproduce the blink comparator device
    used by Clyde Tombaugh to discover Pluto in 1930\. Then use modern computer vision
    techniques to automatically find and track subtle transients, such as comets and
    asteroids, moving against a starfield. Gain experience with OpenCV and NumPy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6](ch06.xhtml): Winning the Moon Race with Apollo 8** Take the gamble
    and help America win the moon race with Apollo 8\. Plot and execute the clever
    free return flight path that convinced NASA to go to the moon a year early and
    effectively killed the Soviet space program. Gain experience using the turtle
    module.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Selecting Martian Landing Sites](ch07.xhtml)** Scope out potential
    landing sites for a Mars lander based on realistic mission objectives. Display
    the candidate sites on a Mars map, along with a summary of site statistics. Gain
    experience with OpenCV, the Python Imaging Library, NumPy, and tkinter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Detecting Distant Exoplanets](ch08.xhtml)** Simulate an exoplanet’s
    passing before its sun, plot the resulting changes in relative brightness, and
    estimate the diameter of the planet. Finish by simulating the direct observation
    of an exoplanet by the new James Webb Space Telescope, including estimating the
    length of the planet’s day. Use OpenCV, NumPy, and matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: Identifying Friend or Foe](ch09.xhtml)** Program a robot sentry
    gun to visually distinguish between Space Force Marines and evil mutants. Gain
    experience with OpenCV, NumPy, playsound, pyttsxw, and datetime.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10: Restricting Access with Face Recognition](ch10.xhtml)** Restrict
    access to a secure lab using face recognition. Use OpenCV, NumPy, playsound, pyttsxw,
    and datetime.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11: Creating an Interactive Zombie Escape Map](ch11.xhtml)** Build
    a population density map to help the survivors in the TV show *The Walking Dead*
    escape Atlanta for the safety of the American West. Gain experience with pandas,
    bokeh, holoviews, and webbrowser.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12: Are We Living in a Computer Simulation?](ch12.xhtml)** Identify
    a way for simulated beings—perhaps us—to find evidence that they’re living in
    a computer simulation. Use turtle, statistics, and perf_counter.'
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter ends with at least one practice or challenge project. You can find
    solutions to the practice projects in the appendix or online. These aren’t the
    only solutions, or necessarily the best ones; you may come up with better ones
    on your own.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the challenge projects, however, you’re on your own. It’s sink
    or swim, which is a great way to learn! My hope is that this book motivates you
    to create new projects, so think of the challenge projects as seeds for the fertile
    ground of your own imagination.
  prefs: []
  type: TYPE_NORMAL
- en: You can download all of the book’s code, including solutions to the practice
    projects, from the book’s website at *[https://nostarch.com/real-world-python/](https://nostarch.com/real-world-python/)*.
    You’ll also find the errata sheet there, along with any other updates.
  prefs: []
  type: TYPE_NORMAL
- en: It’s almost impossible to write a book like this without some initial errors.
    If you see a problem, please pass it on to the publisher at *[errata@nostarch.com](mailto:errata@nostarch.com)*.
    We’ll add any necessary corrections to the errata and include the fix in future
    printings of the book, and you will gain eternal glory.
  prefs: []
  type: TYPE_NORMAL
- en: '***Python Version, Platform, and IDE***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I built all the projects in this book with Python v3.7.2 in a Microsoft Windows
    10 environment. If you’re using a different operating system, no problem: I suggest
    compatible modules for other platforms, where appropriate.'
  prefs: []
  type: TYPE_NORMAL
- en: The code examples in this book are from either the Python IDLE text editor or
    the interactive shell. IDLE stands for *integrated development and learning environment*.
    It’s an *integrated development environment (IDE)* with an *L* added so that the
    acronym references Eric Idle of *Monty Python* fame. The interactive shell, also
    called the *interpreter*, is a window that lets you immediately execute commands
    and test code without needing to create a file.
  prefs: []
  type: TYPE_NORMAL
- en: IDLE has numerous drawbacks, such as the lack of a line-number column, but it’s
    free and bundled with Python, so everyone has access to it. You’re welcome to
    use whichever IDE you want. Popular choices include Visual Studio Code, Atom,
    Geany (pronounced “genie”), PyCharm, and Sublime Text. These work with a wide
    range of operating systems, including Linux, macOS, and Windows. Another IDE,
    PyScripter, works only with Windows. For an extensive listing of available Python
    editors and compatible platforms, visit *[https://wiki.python.org/moin/PythonEditors/](https://wiki.python.org/moin/PythonEditors/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing Python***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can choose to install Python directly on your machine or through a distribution.
    To install directly, find the installation instructions for your operating system
    at *[https://www.python.org/downloads/](https://www.python.org/downloads/)*. Linux
    and macOS machines usually come with Python preinstalled, but you may want to
    upgrade this installation. With each new Python release, some features are added
    and some are deprecated, so I recommend upgrading if your version predates Python
    v3.6.
  prefs: []
  type: TYPE_NORMAL
- en: The download button on the Python site ([Figure 1](ch00.xhtml#ch00fig1)) may
    install 32-bit Python by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/FM-fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Downloads page for [Python.org](http://Python.org), with the “easy
    button” for the Windows platform'
  prefs: []
  type: TYPE_NORMAL
- en: If you want the 64-bit version, scroll down to the listing of specific releases
    ([Figure 2](ch00.xhtml#ch00fig2)) and click the link with the same version number.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/FM-fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Listing of specific releases from the [Python.org](http://Python.org)
    downloads page'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the specific release will take you to the screen shown in [Figure 3](ch00.xhtml#ch00fig3).
    From here, click the 64-bit executable installer, which will launch an installation
    wizard. Follow the wizard directions and take the default suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/FM-fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: File listing for Python 3.8.2 version on [Python.org](http://Python.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the projects in this book call for nonstandard packages that you’ll
    need to install individually. This isn’t difficult, but you can make things easier
    by installing a Python distribution that efficiently loads and manages hundreds
    of Python packages. Think of this as one-stop shopping. The package managers in
    these distributions will automatically find and download the latest version of
    a package, including all of its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda is a popular free distribution of Python provided by Continuum Analytics.
    You can download it from *[https://www.anaconda.com/](https://www.anaconda.com/)*.
    Another is Enthought Canopy, though only the basic version is free. You can find
    it at *[https://www.enthought.com/product/canopy/](https://www.enthought.com/product/canopy/)*.
    Whether you install Python and its packages individually or through a distribution,
    you should encounter no problems working through the projects in the book.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running Python***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After installation, Python should show up in your operating system’s list of
    applications. When you launch it, the shell window should appear (shown in the
    background of [Figure 4](ch00.xhtml#ch00fig4)). You can use this interactive environment
    to run and test code snippets. But to write larger programs, you’ll use a text
    editor, which lets you save your code, as shown in [Figure 4](ch00.xhtml#ch00fig4)
    (foreground).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/FM-fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: The native Python shell window (background) and text editor (foreground)'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new file in the IDLE text editor, click **File**▸**New File**. To
    open an existing file, click **File**▸**Open** or **File**▸**Recent Files**. From
    here, you can run your code by clicking **Run**▸**Run Module** or by pressing
    F5 after clicking in the editor window. Note that your environment may look different
    from [Figure 4](ch00.xhtml#ch00fig4) if you chose to use a package manager like
    Anaconda or an IDE like PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: You can also start a Python program by typing the program name in PowerShell
    or Terminal. You’ll need to be in the directory where your Python program is located.
    For example, if you didn’t launch the Windows PowerShell from the proper directory,
    you’ll need to change the directory path using the cd command ([Figure 5](ch00.xhtml#ch00fig5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/FM-fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Changing directories and running a Python program in the Windows
    PowerShell'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more, see *[https://pythonbasics.org/execute-python-scripts/](https://pythonbasics.org/execute-python-scripts/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using a Virtual Environment***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Finally, you may want to install the dependencies for each chapter in a separate
    virtual environment. In Python, a *virtual environment* is a self-contained directory
    tree that includes a Python installation and a number of additional packages.
    They’re useful when you have multiple versions of Python installed, as some packages
    may work with one version but break with others. Additionally, it’s possible to
    have projects that need different versions of the same package. Keeping these
    installations separate prevents compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: The projects in this book don’t require the use of virtual environments, and
    if you follow my instructions, you’ll install the required packages system- wide.
    However, if you do need to isolate the packages from your operating system, consider
    installing a different virtual environment for each chapter of the book (see *[https://docs.python.org/3.8/library/venv.html#module-venv](https://docs.python.org/3.8/library/venv.html#module-venv)*
    and *[https://docs.python.org/3/tutorial/venv.html](https://docs.python.org/3/tutorial/venv.html)*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Onward!**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of the projects in this book rely on statistical and scientific concepts
    that are hundreds of years old but impractical to apply by hand. But with the
    introduction of the personal computer in 1975, our ability to store, process,
    and share information has increased by many orders of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: In the 200,000-year history of modern humans, only those of us living in the
    last 45 years have had the privilege of using this magical device and realizing
    dreams long out of reach. To quote Shakespeare, “We few. We happy few.”
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make the most of the opportunity. In the pages that follow, you’ll easily
    accomplish tasks that frustrated past geniuses. You’ll scratch the surface of
    some of the amazing feats we’ve recently achieved. And you might even start to
    imagine discoveries yet to come.
  prefs: []
  type: TYPE_NORMAL
