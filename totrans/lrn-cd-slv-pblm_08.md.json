["```py\ndef clean(address):\n\n    \"\"\"\n\n    address is a string email address.\n\n    Return cleaned address.\n\n    \"\"\"\n\n    # Remove from '+' up to but not including '@'\n\n ❶ plus_index = address.find('+')\n\n    if plus_index != -1:\n\n     ❷ at_index = address.find('@')\n\n        address = address[:plus_index] + address[at_index:]\n\n    # Remove dots before @ symbol\n\n    at_index = address.find('@')\n\n    before_at = ''\n\n    i = 0\n\n    while i < at_index:\n\n     ❸ if address[i] != '.':\n\n            before_at = before_at + address[i]\n\n        i = i + 1\n\n ❹ cleaned = before_at + address[at_index:]\n\n    # Convert to lowercase\n\n ❺ cleaned = cleaned.lower()\n\n    return cleaned\n```", "```py\n>>> 'abc+def'.find('+')\n\n3\n\n>>> 'abcdef'.find('+')\n\n-1\n```", "```py\n>>> clean('daniel.zingaro+book@gmail.com')\n\n'danielzingaro@gmail.com'\n\n>>> clean('da.nielz.in.gar.o..@gmail.com')\n\n'danielzingaro@gmail.com'\n\n>>> clean('DAnIELZIngARO+Flurry@gmAIL.COM')\n\n'danielzingaro@gmail.com'\n\n>>> clean('a.b.c@d.e.f')\n\n'abc@d.e.f'\n```", "```py\n>>> clean('danielzingaro@gmail.com')\n\n'danielzingaro@gmail.com'\n```", "```py\n# Main Program\n\nfor dataset in range(10):\n\n    n = int(input())\n\n ❶ addresses = []\n\n    for i in range(n):\n\n        address = input()\n\n        address = clean(address)\n\n     ❷ if not address in addresses:\n\n            addresses.append(address)\n\n ❸ print(len(addresses))\n```", "```py\ndef search(collection, value):\n\n    \"\"\"\n\n    search many times for value in collection.\n\n    \"\"\"\n\n    for i in range(50000):\n\n        found = value in collection\n```", "```py\n>>> search(list(range(1, 5001)), 5000)\n```", "```py\n>>> search(list(range(1, 10001)), 10000)\n```", "```py\n>>> search(list(range(1, 20001)), 20000)\n```", "```py\n>>> search(list(range(1, 50001)), 50000)\n```", "```py\n>>> {13, 15, 30, 45, 61}\n\n{45, 13, 15, 61, 30}\n```", "```py\n>>> {1, 1, 3, 2, 3, 1, 3, 3, 3}\n\n{1, 2, 3}\n```", "```py\n>>> {1, 2, 3} == {1, 2, 3}\n\nTrue\n\n>>> {1, 1, 3, 2, 3, 1, 3, 3, 3} == {1, 2, 3}\n\nTrue\n\n>>> {1, 2} == {1, 2, 3}\n\nFalse\n```", "```py\n>>> {'abc@d.e.f', 'danielzingaro@gmail.com'}\n\n{'abc@d.e.f', 'danielzingaro@gmail.com'}\n```", "```py\n>>> {[1, 2], [3, 4]}\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nTypeError: unhashable type: 'list'\n```", "```py\n>>> lst = [{1, 2, 3}, {4, 5, 6}]\n\n>>> lst\n\n[{1, 2, 3}, {4, 5, 6}]\n\n>>> len(lst)\n\n2\n\n>>> lst[0]\n\n{1, 2, 3}\n```", "```py\n>>> len({2, 4, 6, 8})\n\n4\n```", "```py\n>>> for value in {2, 4, 6, 8}:\n\n...     print('I found', value)\n\n...\n\nI found 8\n\nI found 2\n\nI found 4\n\nI found 6\n```", "```py\n>>> type({2, 4, 6, 8})\n\n<class 'set'>\n\n>>> {}\n\n{}\n\n>>> type({})\n\n<class 'dict'>\n```", "```py\n>>> set()\n\nset()\n\n>>> type(set())\n\n<class 'set'>\n```", "```py\n>>> s = set()\n\n>>> s\n\nset()\n\n>>> s.add(2)\n\n>>> s\n\n{2}\n\n>>> s.add(4)\n\n>>> s\n\n{2, 4}\n\n>>> s.add(6)\n\n>>> s\n\n{2, 4, 6}\n\n>>> s.add(8)\n\n>>> s\n\n{8, 2, 4, 6}\n\n>>> s.add(8)\n\n>>> s\n\n{8, 2, 4, 6}\n```", "```py\n>>> s.remove(4)\n\n>>> s\n\n{8, 2, 6}\n\n>>> s.remove(8)\n\n>>> s\n\n{2, 6}\n\n>>> s = {2, 6}\n\n>>> s.remove(8)\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nKeyError: 8\n```", "```py\ns1 = {1, 3, 5, 7, 9}\n\ns2 = {1, 2, 4, 6, 8, 10}\n\ns3 = {1, 4, 9, 16, 25}\n\ns1.update(s2)\n\ns1.intersection(s3)\n\nprint(s1)\n```", "```py\n   >>> search(list(range(1, 50001)), 50000)\n\n❶ >>> search(set(range(1, 50001)), 50000)\n```", "```py\n>>> search(set(range(1, 500001)), 500000)\n```", "```py\n# Main Program\n\nfor dataset in range(10):\n\n    n = int(input())\n\n ❶ addresses = set()\n\n    for i in range(n):\n\n        address = input()\n\n        address = clean(address)\n\n     ❷ addresses.add(address)\n\n    print(len(addresses))\n```", "```py\n    p most common word(s):\n    ```", "```py\n1\n\n14 1\n\nstorm\n\ncut\n\nmagma\n\ncut\n\nbrook\n\ngully\n\ngully\n\nstorm\n\ncliff\n\ncut\n\nblast\n\nbrook\n\ncut\n\ngully\n```", "```py\n   1st most common word(s):\n\n   cut\n\n❶\n```", "```py\n>>> {'cut':4, 'gully':3}\n\n{'cut': 4, 'gully': 3}\n```", "```py\n>>> {'cut':4, 'gully':3}\n\n{'gully': 3, 'cut': 4}\n```", "```py\n>>> {'cut':4, 'gully':3} == {'cut':4, 'gully':3}\n\nTrue\n\n>>> {'cut':4, 'gully':3} == {'gully': 3, 'cut': 4}\n\nTrue\n\n>>> {'cut':4, 'gully':3} == {'gully': 3, 'cut': 10}\n\nFalse\n\n>>> {'cut':4, 'gully':3} == {'cut': 4}\n\nFalse\n```", "```py\n>>> {'storm': 1, 'storm': 2}\n\n{'storm': 2}\n```", "```py\n>>> {'storm': 2, 'brook': 2}\n\n{'storm': 2, 'brook': 2}\n```", "```py\n>>> {['storm', 'brook']: 2}\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nTypeError: unhashable type: 'list'\n\n>>> {2: ['storm', 'brook']}\n\n{2: ['storm', 'brook']}\n```", "```py\n>>> len({'cut':4, 'gully':3})\n\n2\n\n>>> len({2: ['storm', 'brook']})\n\n1\n```", "```py\n>>> {}\n\n{}\n\n>>> type({})\n\n<class 'dict'>\n```", "```py\n{'MLB': {'Bluejays': [1992, 1993],\n\n         'Orioles': [1966, 1970, 1983]},\n\n 'NFL': {'Patriots': ['too many']}}\n```", "```py\n>>> d = {'cut':4, 'gully':3}\n\n>>> d\n\n{'cut': 4, 'gully': 3}\n\n>>> d['cut']\n\n4\n\n>>> d['gully']\n\n3\n```", "```py\n>>> d['storm']\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nKeyError: 'storm'\n```", "```py\n>>> if 'cut' in d:\n\n...     print(d['cut'])\n\n...\n\n4\n\n>>> if 'storm' in d:\n\n...     print(d['storm'])\n\n...\n```", "```py\n>>> print(d.get('cut'))\n\n4\n\n>>> print(d.get('storm'))\n\nNone\n```", "```py\n>>> d = {}\n\n>>> d['gully'] = 1\n\n>>> d\n\n{'gully': 1}\n\n>>> d['cut'] = 1\n\n>>> d\n\n{'gully': 1, 'cut': 1}\n\n>>> d['cut'] = 4\n\n>>> d\n\n{'gully': 1, 'cut': 4}\n\n>>> d['gully'] = d['gully'] + 1\n\n>>> d\n\n{'gully': 2, 'cut': 4}\n\n>>> d['gully'] = d['gully'] + 1\n\n>>> d\n\n{'gully': 3, 'cut': 4}\n```", "```py\nd = {3: 4}\n\nd[5] = d.get(4, 8)\n\nd[4] = d.get(3, 9)\n\nprint(d)\n```", "```py\n>>> d = {'cut': 4, 'gully': 3, 'storm': 2, 'brook': 2}\n\n>>> for word in d:\n\n...     print('a key is', word)\n\n...\n\na key is cut\n\na key is gully\n\na key is storm\n\na key is brook\n```", "```py\n>>> for word in d:\n\n...     print('key', word, 'has value', d[word])\n\n...\n\nkey cut has value 4\n\nkey gully has value 3\n\nkey storm has value 2\n\nkey brook has value 2\n```", "```py\n>>> d.keys()\n\ndict_keys(['cut', 'gully', 'storm', 'brook'])\n\n>>> d.values()\n\ndict_values([4, 3, 2, 2])\n```", "```py\n>>> keys = list(d.keys())\n\n>>> keys\n\n['cut', 'gully', 'storm', 'brook']\n\n>>> values = list(d.values())\n\n>>> values\n\n[4, 3, 2, 2]\n```", "```py\n>>> keys.sort()\n\n>>> keys\n\n['brook', 'cut', 'gully', 'storm']\n\n>>> for word in keys:\n\n...     print('key', word, 'has value', d[word])\n\n...\n\nkey brook has value 2\n\nkey cut has value 4\n\nkey gully has value 3\n\nkey storm has value 2\n```", "```py\n>>> for num in d.values():\n\n...     print('number', num)\n\n...\n\nnumber 4\n\nnumber 3\n\nnumber 2\n\nnumber 2\n```", "```py\n>>> pairs = list(d.items())\n\n>>> pairs\n\n[('cut', 4), ('gully', 3), ('storm', 2), ('brook', 2)]\n```", "```py\n>>> for pair in pairs:\n\n...     print('key', pair[0], 'has value', pair[1])\n\n...\n\nkey cut has value 4\n\nkey gully has value 3\n\nkey storm has value 2\n\nkey brook has value 2\n```", "```py\n>>> pairs\n\n[('cut', 4), ('gully', 3), ('storm', 2), ('brook', 2)]\n```", "```py\n>>> type(pairs[0])\n\n<class 'tuple'>\n```", "```py\n>>> pairs[0][0] = 'river'\n\nTraceback (most recent call last):\n\n  File \"<stdin>\", line 1, in <module>\n\nTypeError: 'tuple' object does not support item assignment\n```", "```py\n>>> (4,)\n\n(4,)\n\n>>> (4, 5)\n\n(4, 5)\n\n>>> (4, 5, 6)\n\n(4, 5, 6)\n```", "```py\n>>> d = {'storm': 1, 'cut': 1, 'magma': 1}\n\n>>> word = 'cut'  # 'cut' is already in the dictionary\n\n>>> if not word in d:\n\n...     d[word] = 1\n\n... else:\n\n...     d[word] = d[word] + 1\n\n...\n\n>>> d\n\n{'storm': 1, 'cut': 2, 'magma': 1}\n\n>>> word = 'brook'  # 'brook' is not in the dictionary\n\n>>> if not word in d:\n\n...     d[word] = 1\n\n... else:\n\n...     d[word] = d[word] + 1\n\n...\n\n>>> d\n\n{'storm': 1, 'cut': 2, 'magma': 1, 'brook': 1}\n```", "```py\n >>> d['brook']\n\n1\n```", "```py\n{'storm': 2, 'cut': 4, 'magma': 1, 'brook': 2,\n\n 'gully': 3, 'cliff': 1, 'blast': 1}\n```", "```py\n{2: ['storm', 'brook'], 4: ['cut'], 1: ['magma', 'cliff', 'blast'],\n\n 3: ['gully']}\n```", "```py\ndef invert_dictionary(d):\n\n    \"\"\"\n\n    d is a dictionary mapping strings to numbers.\n\n    Return the inverted dictionary of d.\n\n    \"\"\"\n\n    inverted = {}\n\n ❶ for key in d:\n\n     ❷ num = d[key]\n\n        if not num in inverted:\n\n         ❸ inverted[num] = [key]\n\n        else:\n\n         ❹ inverted[num].append(key)\n\n    return inverted\n```", "```py\n>>> d = {'a': 1, 'b': 1, 'c': 1}\n\n>>> invert_dictionary(d)\n\n{1: ['a', 'b', 'c']}\n\n>>> d = {'storm': 2, 'cut': 4, 'magma': 1, 'brook': 2,\n\n...      'gully': 3, 'cliff': 1, 'blast': 1}\n\n>>> invert_dictionary(d)\n\n{2: ['storm', 'brook'], 4: ['cut'], 1: ['magma', 'cliff', 'blast'],\n\n 3: ['gully']}\n```", "```py\n   def invert_dictionary(d):\n\n       \"\"\"\n\n       d is a dictionary mapping strings to numbers.\n\n       Return the inverted dictionary of d.\n\n       \"\"\"\n\n       inverted = {}\n\n       for key in d:\n\n           num = d[key]\n\n           if not num in inverted:\n\n               inverted[num] = [key]\n\n           else:\n\n               inverted[num].append(key)\n\n       return inverted\n\n❶ def with_suffix(num):\n\n       \"\"\"\n\n       num is an integer >= 1.\n\n       Return a string of num with its suffix added; e.g. '5th'.\n\n       \"\"\"\n\n    ❷ s = str(num)\n\n    ❸ if s[-1] == '1' and s[-2:] != '11':\n\n           return s + 'st'\n\n       elif s[-1] == '2' and s[-2:] != '12':\n\n           return s + 'nd'\n\n       elif s[-1] == '3' and s[-2:] != '13':\n\n           return s + 'rd'\n\n       else:\n\n           return s + 'th'\n\n❹ def most_common_words(num_to_words, k):\n\n       \"\"\"\n\n       num_to_words is a dictionary mapping number of occurrences to\n\n           lists of words.\n\n       k is an integer >= 1.\n\n       Return a list of the kth most-common words in num_to_words.\n\n       \"\"\"\n\n       nums = list(num_to_words.keys())\n\n       nums.sort(reverse=True)\n\n       total = 0\n\n       i = 0\n\n       done = False\n\n    ❺ while i < len(nums) and not done:\n\n           num = nums[i]\n\n        ❻ if total + len(num_to_words[num]) >= k:\n\n               done = True\n\n           else:\n\n               total = total + len(num_to_words[num])\n\n               i = i + 1\n\n    ❼ if total == k - 1 and i < len(nums):\n\n           return num_to_words[nums[i]]\n\n       else:\n\n           return []\n\n❽ n = int(input())\n\n   for dataset in range(n):\n\n       lst = input().split()\n\n       m = int(lst[0])\n\n       k = int(lst[1])\n\n       word_to_num = {}\n\n       for i in range(m):\n\n           word = input()\n\n           if not word in word_to_num:\n\n               word_to_num[word] = 1\n\n           else:\n\n               word_to_num[word] = word_to_num[word] + 1\n\n    ❾ num_to_words = invert_dictionary(word_to_num)\n\n       ordinal = with_suffix(k)\n\n       words = most_common_words(num_to_words, k)\n\n       print(f'{ordinal} most common word(s):')\n\n       for word in words:\n\n           print(word)\n\n       print()\n```", "```py\n1st most common word(s):\n```", "```py\n2nd most common word(s):\n```", "```py\n{4: ['cut'],\n\n 3: ['gully'],\n\n 2: ['storm', 'brook'],\n\n 1: ['magma', 'cliff', 'blast']}\n```", "```py\n12\n\nSCRANTON PA\n\nMANISTEE MI\n\nNASHUA NH\n\nPARKER SC\n\nLAFAYETTE CO\n\nWASHOUGAL WA\n\nMIDDLEBOROUGH MA\n\nMADISON MI\n\nMILFORD MA\n\nMIDDLETON MA\n\nCOVINGTON LA\n\nLAKEWOOD CO\n```", "```py\n{'SCPA': 1, 'MAMI': 2, 'NANH': 1, 'PASC': 1, 'LACO': 2,\n\n 'MIMA': 3, 'COLA': 1}\n```", "```py\n   input_file = open('citystate.in', 'r')\n\n   output_file = open('citystate.out', 'w')\n\n   n = int(input_file.readline())\n\n❶ combo_to_num = {}\n\n   for i in range(n):\n\n       lst = input_file.readline().split()\n\n    ❷ city = lst[0][:2]\n\n       state = lst[1]\n\n    ❸ if city != state:\n\n           combo = city + state\n\n           if not combo in combo_to_num:\n\n               combo_to_num[combo] = 1\n\n           else:\n\n               combo_to_num[combo] = combo_to_num[combo] + 1\n\n   total = 0\n\n❹ for combo in combo_to_num:\n\n    ❺ other_combo = combo[2:] + combo[:2]\n\n       if other_combo in combo_to_num:\n\n        ❻ total = total + combo_to_num[combo] * combo_to_num[other_combo]\n\n❼ output_file.write(str(total // 2) + '\\n')\n\n   input_file.close()\n\n   output_file.close()\n```"]