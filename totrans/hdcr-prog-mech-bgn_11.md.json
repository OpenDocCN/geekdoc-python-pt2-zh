["```py\n<svg  width=\"500\" height=\"500\">\n    <circle cx=\"200\" cy=\"200\" r=\"100\" fill=\"#ff000077\" />\n    <circle cx=\"300\" cy=\"200\" r=\"100\" fill=\"#00ff0077\" />\n    <circle cx=\"250\" cy=\"300\" r=\"100\" fill=\"#0000ff77\" />\n</svg>\n```", "```py\n width=\"500\" height=\"500\"\n```", "```py\n<circle cx=\"200\" cy=\"200\" r=\"100\" fill=\"#ff000077\" />\n<circle cx=\"300\" cy=\"200\" r=\"100\" fill=\"#00ff0077\" />\n<circle cx=\"250\" cy=\"300\" r=\"100\" fill=\"#0000ff77\" />\n```", "```py\nviewBox=\"x y w h\"\n```", "```py\n<svg \n    width=\"500\"\n    height=\"500\"\n    viewBox=\"100 100 300 300\">\n    <circle cx=\"200\" cy=\"200\" r=\"100\" fill=\"#ff000077\" />\n    <circle cx=\"300\" cy=\"200\" r=\"100\" fill=\"#00ff0077\" />\n    <circle cx=\"250\" cy=\"300\" r=\"100\" fill=\"#0000ff77\" />\n</svg>\n```", "```py\ntransform=\"matrix(sx shy shx sy tx ty)\"\n```", "```py\ntransform=\"matrix(a b c d e f)\"\n```", "```py\n<svg \n    width=\"500\"\n    height=\"500\"\n    transform=\"matrix(1 0 1 1 0 0)\"\n    <circle cx=\"200\" cy=\"200\" r=\"100\" fill=\"#ff000077\" />\n    <circle cx=\"300\" cy=\"200\" r=\"100\" fill=\"#00ff0077\" />\n    <circle cx=\"250\" cy=\"300\" r=\"100\" fill=\"#0000ff77\" />\n</svg>\n```", "```py\ntransform=\"matrix(1 0 0 -1 0 0)\"\n```", "```py\n>>> template = 'Hello, my name is {{name}}'\n```", "```py\n>>> template.replace('{{name}}', 'Angel')\n'Hello, my name is Angel'\n```", "```py\n>>> template.replace('{{name}}', 'Angel').replace('Hello', 'Hi there')\n'Hi there, my name is Angel'\n```", "```py\n<circle cx=\"{{cx}}\" cy=\"{{cy}}\" r=\"{{r}}\" />\n```", "```py\nfrom os import path\n\nimport pkg_resources as res\n\ndef read_template(file_name: str):\n    file_path = path.join('templates', file_name)\n    bytes_str = res.resource_string(__name__, file_path)\n    return bytes_str.decode('UTF-8')\n```", "```py\n<svg  version=\"1.1\"\n     width=\"{{width}}\"\n     height=\"{{height}}\"\n     viewBox=\"{{viewBox}}\"\n     transform=\"matrix({{transf}})\">\n    {{content}}\n</svg>\n```", "```py\n>>> from graphic.svg.read import read_template\n>>> read_template('img')\n'<svg  version=\"1.1\"\\n  width=\"{{width}}\"...'\n```", "```py\nfrom geom2d import AffineTransform, Rect, Point, Size\nfrom graphic.svg.read import read_template\n\ndef svg_content(\n        size: Size,\n        primitives: [str],\n        viewbox_rect=None,\n        transform=None\n):\n ➊ viewbox_rect = viewbox_rect or __default_viewbox_rect(size)\n ➋ transform = transform or AffineTransform()\n ➌ template = read_template('img') return template \\\n        .replace('{{width}}', str(size.width)) \\\n        .replace('{{height}}', str(size.height)) \\\n     ➍ .replace('{{content}}', '\\n\\t'.join(primitives)) \\\n     ➎ .replace('{{viewBox}}', __viewbox_from_rect(viewbox_rect)) \\\n     ➏ .replace('{{transf}}', __transf_matrix_vals(transform))\n```", "```py\n--snip--\n\ndef __default_viewbox_rect(size: Size):\n    return Rect(Point(0, 0), size)\n\ndef __viewbox_from_rect(rect: Rect):\n    x = rect.origin.x\n    y = rect.origin.y\n    width = rect.size.width\n    height = rect.size.height\n\n    return f'{x} {y} {width} {height}'\n\ndef __transf_matrix_vals(t: AffineTransform):\n    return f'{t.sx} {t.shy} {t.shx} {t.sy} {t.tx} {t.ty}'\n```", "```py\nname=\"value\"\n```", "```py\n<circle cx=\"10\" cy=\"15\" r=\"40\" stroke=\"green\" />\n```", "```py\nfrom geom2d.affine_transf import AffineTransform\n\ndef stroke_color(color: str):\n    return f'stroke=\"{color}\"'\n\ndef stroke_width(width: float):\n    return f'stroke-width=\"{str(width)}\"'\n\ndef fill_color(color: str):\n    return f'fill=\"{color}\"'\n\ndef fill_opacity(opacity: float):\n    return f'fill-opacity=\"{str(opacity)}\"'\n\ndef affine_transform(t: AffineTransform):\n    values = f'{t.sx} {t.shy} {t.shx} {t.sy} {t.tx} {t.ty}'\n    return f'transform=\"matrix({values})\"'\n\ndef font_size(size: float):\n    return f'font-size=\"{size}px\"'\n\ndef font_family(font: str):\n    return f'font-family=\"{font}\"'\n\ndef attrs_to_str(attrs_list: [str]):\n    return ' '.join(attrs_list)\n```", "```py\n>>> words = ['svg', 'is', 'a', 'nice', 'format']\n>>> ' '.join(words)\n'svg is a nice format'\n```", "```py\n>>> from graphic.svg.image import svg_content\n>>> from geom2d import Size\n>>> svg_content(Size(200, 150), [])\n```", "```py\n<svg  version=\"1.1\"\n     width=\"200\"\n     height=\"150\"\n     viewBox=\"0 0 200 150\"\n     transform=\"matrix(1 0 0 1 0 0)\">\n</svg>\n```", "```py\n<line x1=\"{{x1}}\" y1=\"{{y1}}\" x2=\"{{x2}}\" y2=\"{{y2}}\" {{attrs}}/>\n```", "```py\nfrom geom2d import Segment\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n\ndef segment(seg: Segment, attributes=()):\n    return __segment_template \\\n        .replace('{{x1}}', str(seg.start.x)) \\\n        .replace('{{y1}}', str(seg.start.y)) \\\n        .replace('{{x2}}', str(seg.end.x)) \\\n        .replace('{{y2}}', str(seg.end.y)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n```", "```py\n>>> from geom2d import Segment, make_point\n>>> from graphic import svg\n>>> seg = Segment(make_point(1, 4), make_point(2, 5))\n>>> attrs = [svg.attributes.stroke_color('#cacaca')]\n>>> svg.primitives.segment(seg, attrs)\n'<line x1=\"1\" y1=\"4\" x2=\"2\" y2=\"5\" stroke=\"#cacaca\"/>'\n```", "```py\n<rect x=\"{{x}}\" y=\"{{y}}\"\n      width=\"{{width}}\" height=\"{{height}}\"\n      {{attrs}}/>\n```", "```py\nfrom geom2d import Rect, Segment\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n\n--snip--\n\ndef rectangle(rect: Rect, attributes=()):\n    return __rect_template \\\n        .replace('{{x}}', str(rect.origin.x)) \\\n        .replace('{{y}}', str(rect.origin.y)) \\\n        .replace('{{width}}', str(rect.size.width)) \\\n        .replace('{{height}}', str(rect.size.height)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n```", "```py\n>>> from geom2d import Rect, Point, Size\n>>> from graphic.svg.primitives import rectangle\n>>> r = Rect(Point(3, 4), Size(10, 20))\n>>> rectangle(r)\n'<rect x=\"3\" y=\"4\" width=\"10\" height=\"20\" />'\n```", "```py\n<circle cx=\"{{cx}}\" cy=\"{{cy}}\" r=\"{{r}}\" {{attrs}}/>\n```", "```py\nfrom geom2d import Circle, Rect, Segment\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n__circle_template = read_template('circle')\n\n--snip--\n\ndef circle(circ: Circle, attributes=()):\n    return __circle_template \\\n        .replace('{{cx}}', str(circ.center.x)) \\\n        .replace('{{cy}}', str(circ.center.y)) \\\n        .replace('{{r}}', str(circ.radius)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n```", "```py\n>>> from geom2d import Circle, Point\n>>> from graphic.svg.primitives import circle\n>>> c = Circle(Point(3, 4), 10)\n>>> circle(c)\n'<circle cx=\"3\" cy=\"4\" r=\"10\" />'\n```", "```py\n<polygon points=\"{{points}}\" {{attrs}}/>\n```", "```py\nfrom geom2d import Circle, Rect, Segment, Polygon\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n__circle_template = read_template('circle')\n__polygon_template = read_template('polygon')\n\n--snip--\n\ndef polygon(pol: Polygon, attributes=()):\n    return __polygon_template \\\n        .replace('{{points}}', __format_points(pol.vertices)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n```", "```py\n--snip--\n\ndef __format_points(points: [Point]):\n    return ' '.join([f'{p.x},{p.y}' for p in points])\n```", "```py\n' '.join(...)\n```", "```py\n[f'\\{p.x\\},\\{p.y\\}' for p in points]\n```", "```py\n<polygon points=\"1, 2 5, 6 8, 9\" />\n```", "```py\n<polyline points=\"{{points}}\" {{attrs}}/>\n```", "```py\nfrom geom2d import Circle, Rect, Segment, Polygon\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n__circle_template = read_template('circle')\n__polygon_template = read_template('polygon')\n__polyline_template = read_template('polyline')\n\n--snip--\n\ndef polyline(points: [Point], attributes=()):\n    return __polyline_template \\\n        .replace('{{points}}', __format_points(points)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n```", "```py\n>>> from geom2d import Polygon, Point\n>>> from graphic.svg.primitives import polygon, polyline\n>>> points = [Point(1, 2), Point(3, 4), Point(5, 6)]\n\n>>> polygon(Polygon(points))\n'<polygon points=\"1, 2 3, 4 5, 6\" />'\n\n>>> polyline(points)\n'<polyline points=\"1,2 3,4 5,6\" />'\n```", "```py\n<text x=\"{{x}}\" y=\"{{y}}\" dx=\"{{dx}}\" dy=\"{{dy}}\" {{attrs}}>\n    {{text}}\n</text>\n```", "```py\nfrom geom2d import Circle, Rect, Segment, Polygon, Vector\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n__circle_template = read_template('circle')\n__polygon_template = read_template('polygon')\n__polyline_template = read_template('polyline')\n__text_template = read_template('text')\n\n--snip--\n\ndef text(txt: str, pos: Point, disp: Vector, attrs_list=()):\n    return __text_template \\\n        .replace('{{x}}', str(pos.x)) \\\n        .replace('{{y}}', str(pos.y)) \\\n        .replace('{{dx}}', str(disp.u)) \\\n        .replace('{{dy}}', str(disp.v)) \\\n        .replace('{{text}}', txt) \\\n        .replace('{{attrs}}', attrs_to_str(attrs_list))\n```", "```py\n>>> from geom2d import Point, Vector\n>>> from graphic.svg.primitives import text\n>>> text('Hello, SVG', Point(10, 15), Vector(5, 6))\n'<text x=\"10\" y=\"15\" dx=\"5\" dy=\"6\" >\\n    Hello, SVG\\n</text>'\n```", "```py\n<text x=\"10\" y=\"15\" dx=\"5\" dy=\"6\" >\n    Hello, SVG\n</text>\n```", "```py\n<g {{attrs}}>\n    {{content}}\n</g>\n```", "```py\nfrom geom2d import Circle, Rect, Segment, Polygon, Vector\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n__circle_template = read_template('circle')\n__polygon_template = read_template('polygon')\n__polyline_template = read_template('polyline')\n__text_template = read_template('text')\n__group_template = read_template('group')\n\n--snip--\n\ndef group(primitives: [str], attributes=()):\n    return __group_template \\\n        .replace('{{content}}', '\\n'.join(primitives)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n```", "```py\n--snip--\n\ndef arrow(\n        _segment: Segment,\n        length: float,\n        height: float,\n        attributes=()\n):\n    director = _segment.direction_vector\n ➊ v_l = director.opposite().with_length(length)\n ➋ v_h1 = director.perpendicular().with_length(height / 2.0)\n ➌ v_h2 = v_h1.opposite()\n\n    return group(\n        [\n\n         ➍ segment(_segment),\n         ➎ polyline([\n                _segment.end.displaced(v_l + v_h1),\n                _segment.end,\n                _segment.end.displaced(v_l + v_h2)\n            ])\n        ],\n        attributes\n    )\n```", "```py\nfrom geom2d import Circle, Rect, Segment, Point, Polygon, Vector\nfrom graphic.svg.attributes import attrs_to_str\nfrom graphic.svg.read import read_template\n\n__segment_template = read_template('line')\n__rect_template = read_template('rect')\n__circle_template = read_template('circle')\n__polygon_template = read_template('polygon')\n__polyline_template = read_template('polyline')\n__text_template = read_template('text')\n__group_template = read_template('group')\n\ndef segment(seg: Segment, attributes=()):\n    return __segment_template \\\n        .replace('{{x1}}', str(seg.start.x)) \\\n        .replace('{{y1}}', str(seg.start.y)) \\\n        .replace('{{x2}}', str(seg.end.x)) \\\n        .replace('{{y2}}', str(seg.end.y)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n\ndef rectangle(rect: Rect, attributes=()):\n    return __rect_template \\\n        .replace('{{x}}', str(rect.origin.x)) \\\n        .replace('{{y}}', str(rect.origin.y)) \\\n        .replace('{{width}}', str(rect.size.width)) \\\n        .replace('{{height}}', str(rect.size.height)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n\ndef circle(circ: Circle, attributes=()):\n    return __circle_template \\\n        .replace('{{cx}}', str(circ.center.x)) \\\n        .replace('{{cy}}', str(circ.center.y)) \\\n        .replace('{{r}}', str(circ.radius)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n\ndef polygon(pol: Polygon, attributes=()):\n    return __polygon_template \\\n        .replace('{{points}}', __format_points(pol.vertices)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n\ndef polyline(points: [Point], attributes=()):\n    return __polyline_template \\\n        .replace('{{points}}', __format_points(points)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n\ndef text(txt: str, pos: Point, disp: Vector, attrs_list=()):\n    return __text_template \\\n        .replace('{{x}}', str(pos.x)) \\\n        .replace('{{y}}', str(pos.y)) \\\n        .replace('{{dx}}', str(disp.u)) \\\n        .replace('{{dy}}', str(disp.v)) \\\n        .replace('{{text}}', txt) \\\n        .replace('{{attrs}}', attrs_to_str(attrs_list))\n\ndef group(primitives: [str], attributes=()):\n    return __group_template \\\n        .replace('{{content}}', '\\n\\t'.join(primitives)) \\\n        .replace('{{attrs}}', attrs_to_str(attributes))\n\ndef arrow(\n        _segment: Segment,\n        length: float,\n        height: float,\n        attributes=()\n):\n    director = _segment.direction_vector\n    v_l = director.opposite().with_length(length)\n    v_h1 = director.perpendicular().with_length(height / 2.0)\n    v_h2 = v_h1.opposite()\n\n    return group(\n        [\n            segment(_segment),\n            polyline([\n                _segment.end.displaced(v_l + v_h1),\n                _segment.end,\n                _segment.end.displaced(v_l + v_h2)\n            ])\n        ],\n        attributes\n    )\n\ndef __format_points(points: [Point]):\n    return ' '.join([f'{p.x},{p.y}' for p in points])\n```", "```py\nfrom graphic import svg\n```", "```py\nfrom .attributes import *\nfrom .image import svg_content\nfrom .primitives import *\n```"]