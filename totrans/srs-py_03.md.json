["```py\n$ sphinx-build doc/source doc/build\n  import pkg_resources\nRunning Sphinx v1.2b1\nloading pickled environment... done\nNo builder selected, using default: html\nbuilding [html]: targets for 1 source files that are out of date\nupdating environment: 0 added, 0 changed, 0 removed\nlooking for now-outdated files... none found\npreparing documents... done\nwriting output... [100%] index\nwriting additional files... genindex search copying static files... done\ndumping search index... done\ndumping object inventory... done\nbuild succeeded.\n```", "```py\nextensions = ['sphinx.ext.autodoc']\n```", "```py\n   .. automodule:: foobar\n➊     :members:\n➋     :undoc-members:\n➌     :show-inheritance:\n```", "```py\nextensions = ['sphinx.ext.autosummary']\n```", "```py\n.. autosummary::\n\n   mymodule\n   mymodule.submodule\n```", "```py\n    To print something to the standard output, use the :py:func:`print`\nfunction:\n>>> print(\"foobar\")\n    foobar\n```", "```py\n$ sphinx-build -b doctest doc/source doc/build\nRunning Sphinx v1.2b1\nloading pickled environment... done\nbuilding [doctest]: targets for 1 source files that are out of date\nupdating environment: 0 added, 0 changed, 0 removed\nlooking for now-outdated files... none found\nrunning tests...\n\nDocument: index\n---------------\n1 items passed all tests:\n   1 tests in default\n1 tests in 1 items.\n1 passed and 0 failed.\nTest passed.\n\nDoctest summary\n===============\n    1 test\n    0 failures in tests\n    0 failures in setup code\n    0 failures in cleanup code\nbuild succeeded.\n```", "```py\ndef setup(app):\n    app.add_directive('rest-controller', RESTControllerDirective)\n```", "```py\nclass Car(object):\n\n    def turn_left(self):\n        \"\"\"Turn the car left.\n\n        .. deprecated:: 1.1\n           Use :func:`turn` instead with the direction argument set to left\n        \"\"\"\n        self.turn(direction='left')\n\n    def turn(self, direction):\n        \"\"\"Turn the car in some direction.\n\n        :param direction: The direction to turn to.\n        :type direction: str\n        \"\"\"\n        # Write actual code for the turn function here instead\n        pass\n```", "```py\nimport warnings\n\nclass Car(object):\n    def turn_left(self):\n        \"\"\"Turn the car left.\n\n     ➊ .. deprecated:: 1.1\n           Use :func:`turn` instead with the direction argument set to \"left\".\n        \"\"\"\n     ➋ warnings.warn(\"turn_left is deprecated; use turn instead\",\n                      DeprecationWarning)\n        self.turn(direction='left')\n\n    def turn(self, direction):\n        \"\"\"Turn the car in some direction.\n\n        :param direction: The direction to turn to.\n        :type direction: str\n        \"\"\"\n        # Write actual code here instead\n        pass\n```", "```py\n>>> Car().turn_left()\n__main__:8: DeprecationWarning: turn_left is deprecated; use turn instead\n```", "```py\n>>> import warnings\n>>> warnings.warn(\"This is deprecated\", DeprecationWarning)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nDeprecationWarning: This is deprecated\n```", "```py\nfrom debtcollector import moves\n\nclass Car(object):\n    @moves.moved_method('turn', version='1.1')\n    def turn_left(self):\n        \"\"\"Turn the car left.\"\"\"\n\n        return self.turn(direction='left')\n    def turn(self, direction):\n        \"\"\"Turn the car in some direction.\n\n        :param direction: The direction to turn to.\n        :type direction: str\n        \"\"\"\n\n        # Write actual code here instead\n        pass\n```"]