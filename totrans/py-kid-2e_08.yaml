- en: '7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recycling Your Code with Functions and Modules
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Think about how much stuff you throw away each day: water bottles, soda cans,
    potato chip bags, plastic sandwich wrappers, bags that held carrot sticks or apple
    slices, shopping bags, newspapers, magazines, and so on. Now imagine all of that
    trash just got dumped in a pile at the end of your driveway, without separating
    out the paper, the plastic, and the tin cans.'
  prefs: []
  type: TYPE_NORMAL
- en: You probably recycle as much as possible, which is good, because no one likes
    to climb over a pile of trash on the way to school. Rather than sitting in an
    enormous, gross pile, recycled glass bottles are melted down and turned into new
    jars and bottles; paper is pulped into recycled paper; and plastic is turned into
    heavier plastic goods. We reuse things we would otherwise throw away.
  prefs: []
  type: TYPE_NORMAL
- en: In the programming world, recycling is just as important. Your program might
    not disappear under a pile of garbage, but if you never reuse any code, you’ll
    type so much that your fingers might eventually wear down to painful stubs! Recycling
    also makes your code shorter and easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0084-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you’ll learn in this chapter, Python offers a number of ways to reuse code.
  prefs: []
  type: TYPE_NORMAL
- en: Using Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Functions* are chunks of code that tell Python to do something. They are one
    way to reuse code—you can use functions in your programs again and again. Python
    has many functions available to use; these are called *built-in* functions, or
    *builtins* (for more information on builtins, see [Appendix B](app02.xhtml#app02)).
    There are also functions available in modules (more on those below), and you can
    even write functions yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We started learning about functions in the previous chapter, when we used range
    and list to make Python count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It’s not too hard to type a list of consecutive numbers yourself, but the larger
    the list, the more you need to type. With functions, you can just as easily create
    a list of a thousand numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example that uses the list and range functions to produce a list
    of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When you’re writing simple programs, functions are handy. Once you start writing
    long, complex programs—like games—functions are *essential* (assuming you want
    to finish writing your program this century).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to write our own functions.
  prefs: []
  type: TYPE_NORMAL
- en: Parts of a Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A function has three parts: a name, parameters, and a body. Here’s an example
    of a simple function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The name of this function is testfunc. It has a single parameter, myname, and
    its body is the block of code immediately following the line beginning with def
    (short for *define*). A *parameter* is a variable that exists only while a function
    is being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the function by calling its name, using parentheses around the
    parameter value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions can take any number of parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When using multiple parameters, make sure you separate the values with a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also create variables first and then call the function with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A function can return a value with a return statement. For example, you could
    write a function to calculate how much money you’re saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes three parameters. It adds the first two (pocket_money and
    paper_route) and subtracts the last (spending). The result is returned and can
    be assigned to a variable (the same way we set other values to variables) or printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We pass in parameters 10, 10, and 5, and the savings function calculates 15
    as the result and then returns the value.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and Scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A variable that’s inside the body of a function can’t be used again once the
    function has finished running because it exists only inside the function. In the
    world of programming, where a variable can be used is called its *scope*. Let’s
    look at a simple function that uses a couple of variables but doesn’t have any
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we create the variable_test function, which multiplies first_variable
    and second_variable and returns the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we call this function using print, we get 200\. However, if we try to print
    the contents of first_variable (or second_variable, for that matter) outside of
    the block of code in the function, we get an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If a variable is defined outside the function, it has a different scope. For
    example, let’s define a variable before we create our function, and then try using
    it inside the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this code, even though the variables first_variable and second_variable can’t
    be used outside the function, the variable another_variable (which was created
    outside the function ➊) can be used inside it ➋.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the result of calling this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, suppose you were building a spaceship out of something economical like
    recycled tin cans. You can flatten two cans a week to create the curved walls
    of your spaceship, but you’ll need about 500 cans to finish the fuselage. Let’s
    try writing a function to print out the total cans flattened each week over a
    year.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0087-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our function will calculate how many cans we’ve flattened each week, with the
    number of cans as a parameter (that makes it easier to change the number of cans
    later):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: On the first line of the function, we create the total_cans variable and set
    its value to 0\. We then create a loop for the weeks in the year and add the number
    of cans flattened each week. This block of code makes up the content of our function,
    and the last two lines make up another block of the for loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try entering that function in the Python Shell and calling it with different
    values for the number of cans, starting with 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This function can be reused with different values for the number of cans per
    week, which is a bit more efficient than retyping the for loop every time you
    want to try it with different numbers. When we run spaceship_building(10), we
    can see we’ll have enough cans to build the spaceship walls at week 50.
  prefs: []
  type: TYPE_NORMAL
- en: Functions can also be grouped together into modules, which makes Python *really*
    useful, as opposed to just mildly useful.
  prefs: []
  type: TYPE_NORMAL
- en: Using Modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Modules* are used to group functions, variables, and other things together
    into larger, more powerful programs. Some modules are built in to Python, and
    others must be downloaded separately. There are modules to help you write games
    (such as tkinter, which is built in, and PyGame, which is not), modules for manipulating
    images (such as Pillow, the Python Imaging Library), and modules for drawing three-dimensional
    graphics (such as Panda3D).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0089-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Modules can be used to do all sorts of useful things. For example, if you were
    designing a simulation game and you wanted the world to change according to the
    real world, you could calculate the current date and time by using the built-in
    time module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The import command tells Python we want to use the time module.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then call functions available in this module by using the dot symbol.
    (We used similar functions to work with the turtle module in [Chapter 4](ch04.xhtml#ch04),
    such as t.forward(50).) For example, here’s how we might call the asctime function
    in the time module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The asctime function is a part of the time module that returns the current date
    and time as a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now suppose you want to ask someone to enter a value, like their date of birth
    or age. You can do this using a print statement to display a message, and the
    sys (short for *system*) module, which contains utilities for interacting with
    the Python system itself. First, we import the sys module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0090-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the sys module is a special object called stdin (for *standard input*),
    which provides a useful function called readline. The readline function is used
    to read a line of text typed on the keyboard until you press ENTER. (We’ll look
    at how objects work in [Chapter 8](ch08.xhtml#ch08).) To test readline, enter
    the following code in the Python Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you then type some words and press ENTER, those words will be printed out
    in the Python Shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think back to the code we wrote in [Chapter 5](ch05.xhtml#ch05), using an if
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Rather than creating the age variable and giving it a specific value before
    the if statement, we can now ask someone to enter the value instead. But first,
    let’s turn the code into a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now you can call the function by entering its name and telling it what number
    to use by entering the number in parentheses. Does it work?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It works! Now let’s make the function ask for a person’s age. (You can add to
    or change a function as many times as you want.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Did you recognize the function int ➊, which converts a string to a number?
    We included that function because sys.stdin. readline() returns whatever someone
    enters as a string, but we want a number so we can compare it with the numbers
    10 and 13 ➋. To try this yourself, call the function without any parameters, and
    then type a number when How old are you? appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The first time we call the function, it displays “How old are you?”; then we
    enter 10, and it prints the joke. The second time, we enter 15 and it prints “Huh?”
  prefs: []
  type: TYPE_NORMAL
- en: The input function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sys.stdin.readline function is not the only way to read input from the
    keyboard. A much simpler option is the built-in input function. The input function
    takes an optional prompt parameter (a string with the message you want to display),
    and then returns whatever is typed until the ENTER key is hit. [Figure 7-1](ch07.xhtml#ch07fig01)
    shows what happens when you run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Image](Images/07fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: Using the input function*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s rewrite the silly_age_joke function to use input instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Apart from having slightly fewer lines, another difference between the earlier
    code and this version is that we add a *newline* character (∖n) at the end of
    our string (‘How old are you?∖n’). A newline simply moves the cursor from one
    line of the display down to the next one. This happens automatically with print,
    but not with the input function.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, this code works exactly the same as before.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned to make reusable chunks of code in Python with
    functions and use functions provided by modules. You saw how the scope of variables
    controls whether they can be seen inside or outside of functions. You also learned
    how to create functions by using the def keyword and how to import modules to
    use their contents.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try the following examples to experiment with creating your own functions. The
    solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: '#1: Basic Moon Weight Function'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In one of [Chapter 6](ch06.xhtml#ch06)’s programming puzzles, we created a
    for loop to determine your weight on the moon over a period of 15 years. That
    for loop could easily be turned into a function. Try creating a function that
    takes a starting weight and increases its amount each year. You might call the
    new function using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '#2: Moon Weight Function and Years'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Take the function you’ve just created and change it to work out the weight
    over different periods, such as 5 years or 20 years. Be sure to change the function
    so it takes three arguments: the initial weight, the weight gained each year,
    and the number of years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '#3: Moon Weight Program'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Instead of using a simple function and passing in the values as parameters,
    you can use sys.stdin.readline() or input() to make a mini-program that prompts
    for the values. In this case, you call the function without any parameters at
    all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will display a message asking for the starting weight, a second
    message asking for the amount the weight will increase each year, and a final
    message asking for the number of years. You would see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to import the sys module before creating your function, if you are
    using sys.stdin.readline():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '#4: Mars Weight Program'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s change our moon weight program to calculate weights on Mars—only this
    time, for your entire family. The function should ask for each family member’s
    weight, calculate how much they would weigh on Mars (by multiplying the number
    by 0.3782), and then add up and display the total weight at the end. You can write
    this code in many ways; what’s important is that it displays the total weight
    at the end.
  prefs: []
  type: TYPE_NORMAL
