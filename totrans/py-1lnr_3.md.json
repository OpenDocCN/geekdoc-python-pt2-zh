["```py\nimport numpy as np\n\n# Creating a 1D array from a list\n\na = np.array([1, 2, 3])\n\nprint(a)\n\n\"\"\"\n\n[1 2 3]\n\n\"\"\"\n\n# Creating a 2D array from a list of lists\n\nb = np.array([[1, 2],\n\n              [3, 4]])\n\nprint(b)\n\n\"\"\"\n\n[[1 2]\n\n [3 4]]\n\n\"\"\"\n\n# Creating a 3D array from a list of lists of lists\n\nc = np.array([[[1, 2], [3, 4]],\n\n              [[5, 6], [7, 8]]])\n\nprint(c)\n\n\"\"\"\n\n[[[1 2]\n\n  [3 4]]\n\n [[5 6]\n\n  [7 8]]]\n\n\"\"\"\n```", "```py\nimport numpy as np\n\na = np.array([[1, 0, 0],\n\n              [1, 1, 1],\n\n              [2, 0, 0]])\n\nb = np.array([[1, 1, 1],\n\n              [1, 1, 2],\n\n              [1, 1, 2]])\n\nprint(a + b)\n\n\"\"\"\n\n[[2 1 1]\n\n [2 2 3]\n\n [3 1 2]]\n\n\"\"\"\n\nprint(a - b)\n\n\"\"\"\n\n[[ 0 -1 -1]\n\n [ 0  0 -1]\n\n [ 1 -1 -2]]\n\n\"\"\"\n\nprint(a * b)\n\n\"\"\"\n\n[[1 0 0]\n\n [1 1 2]\n\n [2 0 0]]\n\n\"\"\"\n\nprint(a / b)\n\n\"\"\"\n\n[[1.  0.  0\\. ]\n\n [1.  1.  0.5]\n\n [2.  0.  0\\. ]]\n\n\"\"\"\n```", "```py\nimport numpy as np\n\na = np.array([[1, 0, 0],\n\n              [1, 1, 1],\n\n              [2, 0, 0]])\n\nprint(np.max(a))\n\n# 2\n\nprint(np.min(a))\n\n# 0\n\nprint(np.average(a))\n\n# 0.6666666666666666\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: yearly salary in ($1000) [2017, 2018, 2019]\n\nalice = [99, 101, 103]\n\nbob = [110, 108, 105]\n\ntim = [90, 88, 85]\n\nsalaries = np.array([alice, bob, tim])\n\ntaxation = np.array([[0.2, 0.25, 0.22],\n\n                     [0.4, 0.5, 0.5],\n\n                     [0.1, 0.2, 0.1]])\n\n## One-liner\n\nmax_income = np.max(salaries - salaries * taxation)\n\n## Result\n\nprint(max_income)\n```", "```py\nprint(salaries - salaries * taxation)\n\n\"\"\"\n\n[[79.2  75.75 80.34]\n\n [66.   54.   52.5 ]\n\n [81.   70.4  76.5 ]]\n\n\"\"\"\n```", "```py\nimport numpy as np\n\na = np.array([55, 56, 57, 58, 59, 60, 61])\n\nprint(a)\n\n# [55 56 57 58 59 60 61]\n\nprint(a[:])\n\n# [55 56 57 58 59 60 61]\n\nprint(a[2:])\n\n# [57 58 59 60 61]\n\nprint(a[1:4]) \n\n# [56 57 58]\n\nprint(a[2:-2])\n\n# [57 58 59]\n\nprint(a[::2])\n\n# [55 57 59 61]\n\nprint(a[1::2])\n\n# [56 58 60]\n\nprint(a[::-1])\n\n# [61 60 59 58 57 56 55]\n\nprint(a[:1:-2])\n\n# [61 59 57]\n\nprint(a[-1:1:-2])\n\n# [61 59 57]\n```", "```py\nimport numpy as np\n\na = np.array([[0, 1, 2, 3],\n\n              [4, 5, 6, 7],\n\n              [8, 9, 10, 11],\n\n              [12, 13, 14, 15]])\n\nprint(a[:, 2])\n\n# Third col: [ 2  6 10 14]\n\nprint(a[1, :])\n\n# Second row: [4 5 6 7]\n\nprint(a[1, ::2])\n\n# Second row, every other element: [4 6]\n\nprint(a[:, :-1])\n\n# All columns except last:\n\n# [[ 0  1  2]\n\n# [ 4  5  6]\n\n# [ 8  9 10]\n\n# [12 13 14]]\n\nprint(a[:-2])\n\n# Same as a[:-2, :]\n\n# [[ 0  1  2  3]\n\n# [ 4  5  6  7]]\n```", "```py\nimport numpy as np\n\na = np.array([1, 2, 3, 4])\n\nprint(a.ndim)\n\n# 1\n\nb = np.array([[2, 1, 2], [3, 2, 3], [4, 3, 4]])\n\nprint(b.ndim)\n\n# 2\n\nc = np.array([[[1, 2, 3], [2, 3, 4], [3, 4, 5]],\n\n              [[1, 2, 4], [2, 3, 5], [3, 4, 6]]])\n\nprint(c.ndim)\n\n# 3\n```", "```py\nimport numpy as np\n\na = np.array([1, 2, 3, 4])\n\nprint(a)\n\n\"\"\"\n\n[1 2 3 4]\n\n\"\"\"\n\nprint(a.shape)\n\n# (4,)\n\nb = np.array([[2, 1, 2], [3, 2, 3], [4, 3, 4]])\n\nprint(b)\n\n\"\"\"\n\n[[2 1 2]\n\n [3 2 3]\n\n [4 3 4]]\n\n\"\"\"\n\nprint(b.shape)\n\n# (3, 3)\n\nc = np.array([[[1, 2, 3], [2, 3, 4], [3, 4, 5]],\n\n              [[1, 2, 4], [2, 3, 5], [3, 4, 6]]])\n\nprint(c)\n\n\"\"\"\n\n[[[1 2 3]\n\n  [2 3 4]\n\n  [3 4 5]]\n\n [[1 2 4]\n\n  [2 3 5]\n\n  [3 4 6]]]\n\n\"\"\"\n\nprint(c.shape)\n\n# (2, 3, 3)\n```", "```py\nimport numpy as np\n\na = np.array([1, 2, 3, 4], dtype=np.int16)\n\nprint(a) # [1 2 3 4]\n\nprint(a.dtype) # int16\n\nb = np.array([1, 2, 3, 4], dtype=np.float64)\n\nprint(b) # [1\\. 2\\. 3\\. 4.]\n\nprint(b.dtype) # float64\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: yearly salary in ($1000) [2025, 2026, 2027]\n\ndataScientist =     [130, 132, 137]\n\nproductManager =    [127, 140, 145]\n\ndesigner =          [118, 118, 127]\n\nsoftwareEngineer =  [129, 131, 137]\n\nemployees = np.array([dataScientist,\n\n                      productManager,\n\n                      designer,\n\n                      softwareEngineer])\n\n## One-liner\n\nemployees[0,::2] = employees[0,::2] * 1.1\n\n## Result\n\nprint(employees)\n```", "```py\nemployees[0,::2] = employees[0,::2] * 1.1\n```", "```py\n[[143 132 150]\n\n [127 140 145]\n\n [118 118 127]\n\n [129 131 137]]\n```", "```py\nnp.array([130 137]) * np.array([1.1, 1.1])\n```", "```py\nprint(employees.dtype)\n\n# int32\n\nemployees[0,::2] = employees[0,::2] * 1.1\n\nprint(employees.dtype)\n\n# int32\n```", "```py\nimport numpy as np\n\nX = np.array([[1, 0, 0],\n\n              [0, 2, 2],\n\n              [3, 0, 0]])\n\nprint(np.nonzero(X))\n```", "```py\n(array([0, 1, 1, 2], dtype=int64), array([0, 1, 2, 0], dtype=int64)).\n```", "```py\nimport numpy as np\n\nX = np.array([[1, 0, 0],\n\n              [0, 2, 2],\n\n              [3, 0, 0]])\n\nprint(X == 2)\n\n\"\"\"\n\n[[False False False]\n\n [False  True  True]\n\n [False False False]]\n\n\"\"\"\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: air quality index AQI data (row = city)\n\nX = np.array(\n\n    [[ 42, 40, 41, 43, 44, 43 ], # Hong Kong\n\n     [ 30, 31, 29, 29, 29, 30 ], # New York\n\n     [ 8, 13, 31, 11, 11, 9 ], # Berlin\n\n     [ 11, 11, 12, 13, 11, 12 ]]) # Montreal\n\ncities = np.array([\"Hong Kong\", \"New York\", \"Berlin\", \"Montreal\"])\n\n## One-liner\n\npolluted = set(cities[np.nonzero(X > np.average(X))[0]])\n\n## Result\n\nprint(polluted)\n```", "```py\n## One-liner\n\npolluted = set(cities[np.nonzero(X > np.average(X))[0]])\n```", "```py\nprint(X > np.average(X))\n\n\"\"\"\n\n[[ True  True  True  True  True  True]\n\n [ True  True  True  True  True  True]\n\n [False False  True False False False]\n\n [False False False False False False]]\n\n\"\"\"\n```", "```py\nprint(np.nonzero(X > np.average(X)))\n\n\"\"\"\n\n(array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2], dtype=int64),\n\narray([0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 2], dtype=int64))\n\n\"\"\"\n```", "```py\nprint(cities[np.nonzero(X > np.average(X))[0]])\n\n\"\"\"\n\n['Hong Kong' 'Hong Kong' 'Hong Kong' 'Hong Kong' 'Hong Kong' 'Hong Kong'\n\n 'New York' 'New York' 'New York' 'New York' 'New York' 'New York'\n\n 'Berlin']\n\n\"\"\"\n```", "```py\nimport numpy as np\n\na = np.array([[1, 2, 3],\n\n              [4, 5, 6],\n\n              [7, 8, 9]])\n\nindices = np.array([[False, False, True],\n\n                    [False, False, False],\n\n                    [True, True, False]])\n\nprint(a[indices])\n\n# [3 7 8]\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: popular Instagram accounts (millions followers)\n\ninst = np.array([[232, \"@instagram\"],\n\n                 [133, \"@selenagomez\"],\n\n                 [59,  \"@victoriassecret\"],\n\n                 [120, \"@cristiano\"],\n\n                 [111, \"@beyonce\"],\n\n                 [76,  \"@nike\"]])\n\n## One-liner\n\nsuperstars = inst[inst[:,0].astype(float) > 100, 1]\n\n## Results\n\nprint(superstars)\n```", "```py\n## One-liner\n\nsuperstars = inst[inst[:,0].astype(float) > 100, 1]\n```", "```py\nprint(inst[:,0].astype(float) > 100)\n\n# [ True  True False  True  True False]\n```", "```py\ninst[inst[:,0].astype(float) > 100, 1]\n```", "```py\n# ['@instagram' '@selenagomez' '@cristiano' '@beyonce']\n```", "```py\nimport numpy as np\n\na = np.array([4] * 16)\n\nprint(a)\n\n# [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n\na[1::] = [42] * 15\n\nprint(a)\n\n# [ 4 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42]\n```", "```py\nimport numpy as np\n\na = np.array([4] * 16)\n\na[1:8:2] = 16\n\nprint(a)\n\n# [ 4 16  4 16  4 16  4 16  4  4  4  4  4  4  4  4]\n```", "```py\na = np.array([1, 2, 3, 4, 5, 6])\n\nprint(a.reshape((2, 3)))\n\n'''\n\n[[1 2 3]\n\n [4 5 6]]\n\n'''\n```", "```py\na = np.array([1, 2, 3, 4, 5, 6])\n\nprint(a.reshape((2, -1)))\n\n'''\n\n[[1 2 3]\n\n [4 5 6]]\n\n'''\n```", "```py\nimport numpy as np\n\n# daily stock prices\n\n# [morning, midday, evening]\n\nsolar_x = np.array(\n\n    [[1, 2, 3], # today\n\n     [2, 2, 5]]) # yesterday\n\n# midday - weighted average\n\nprint(np.average(solar_x, axis=0))\n\n# [1.5 2.  4\\. ]\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Sensor data (Mo, Tu, We, Th, Fr, Sa, Su)\n\ntmp = np.array([1, 2, 3, 4, 3, 4, 4,\n\n                5, 3, 3, 4, 3, 4, 6,\n\n                6, 5, 5, 5, 4, 5, 5])\n\n## One-liner\n\ntmp[6::7] = np.average(tmp.reshape((-1,7)), axis=1)\n\n## Result\n\nprint(tmp)\n```", "```py\nprint(tmp.reshape((-1,7)))\n\n\"\"\"\n\n[[1 2 3 4 3 4 4]\n\n [5 3 3 4 3 4 6]\n\n [6 5 5 5 4 5 5]]\n\n\"\"\"\n```", "```py\nprint(np.average(tmp.reshape((-1,7)), axis=1))\n\n# [3\\. 4\\. 5.]\n```", "```py\n# [1 2 3 4 3 4 3 5 3 3 4 3 4 4 6 5 5 5 4 5 5]\n```", "```py\nimport numpy as np\n\na = np.array([10, 6, 8, 2, 5, 4, 9, 1])\n\nprint(np.sort(a))\n\n# [ 1  2  4  5  6  8  9 10]\n\nprint(np.argsort(a))\n\n# [7 3 5 4 1 2 6 0]\n```", "```py\nimport numpy as np\n\na = np.array([[1, 6, 2],\n\n              [5, 1, 1],\n\n              [8, 0, 1]])\n\nprint(np.sort(a, axis=0))\n\n\"\"\"\n\n[[1 0 1]\n\n [5 1 1]\n\n [8 6 2]]\n\n\"\"\"\n\nprint(np.sort(a, axis=1))\n\n\"\"\"\n\n[[1 2 6]\n\n [1 1 5]\n\n [0 1 8]]\n\n\"\"\"\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: SAT scores for different students\n\nsat_scores = np.array([1100, 1256, 1543, 1043, 989, 1412, 1343])\n\nstudents = np.array([\"John\", \"Bob\", \"Alice\", \"Joe\", \"Jane\", \"Frank\", \"Carl\"])\n\n## One-liner\n\ntop_3 = students[np.argsort(sat_scores)][:-4:-1]\n\n## Result\n\nprint(top_3)\n```", "```py\nprint(np.argsort(sat_scores))\n\n# [4 3 0 1 6 5 2]\n```", "```py\nprint(students[np.argsort(sat_scores)])\n\n# ['Jane' 'Joe' 'John' 'Bob' 'Carl' 'Frank' 'Alice']\n```", "```py\n[students[4]  students[3]  students[0]  students[1]  students[6]  students[5]  students[2]]\n```", "```py\n## One-liner\n\ntop_3 = students[np.argsort(sat_scores)][:-4:-1]\n\n## Result\n\nprint(top_3)\n\n# ['Alice' 'Frank' 'Carl']\n```", "```py\nlambda arguments : expression\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data (row = [title, rating])\n\nbooks = np.array([['Coffee Break NumPy', 4.6],\n\n                  ['Lord of the Rings', 5.0],\n\n                  ['Harry Potter', 4.3],\n\n                  ['Winnie-the-Pooh', 3.9],\n\n                  ['The Clown of God', 2.2],\n\n                  ['Coffee Break Python', 4.7]])\n\n## One-liner\n\npredict_bestseller = lambda x, y : x[x[:,1].astype(float) > y]\n\n## Results\n\nprint(predict_bestseller(books, 3.9))\n```", "```py\nx[➊x[:,1] ➋.astype(float)➌> y]\n```", "```py\n## Results\n\nprint(predict_bestseller(books, 3.9))\n\n\"\"\"\n\n[['Coffee Break NumPy' '4.6']\n\n ['Lord of the Rings' '5.0']\n\n ['Harry Potter' '4.3']\n\n ['Coffee Break Python' '4.7']]\n\n\"\"\"\n```", "```py\n[ 8.78087409 10.95890859  8.90183201  8.42516116  9.26643393 12.52747974\n\n  9.70413087 10.09101284  9.90002825 10.15149208  9.42468412 11.36732294\n\n  9.5603904   9.80945055 10.15792838 10.13521324 11.0435137  10.06329581 \n\n--snip--\n\n 10.74304416 10.47904781]\n```", "```py\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nsequence = np.random.normal(10.0, 1.0, 500)\n\nprint(sequence)\n\nplt.xkcd()\n\nplt.hist(sequence)\n\nplt.annotate(r\"$\\omega_1=9$\", (9, 70))\n\nplt.annotate(r\"$\\omega_2=11$\", (11, 70))\n\nplt.annotate(r\"$\\mu=10$\", (10, 90))\n\nplt.savefig(\"plot.jpg\")\n\nplt.show()\n```", "```py\nimport numpy as np\n\na = np.array([1, -1, 2, -2])\n\nprint(a)\n\n# [ 1 -1  2 -2]\n\nprint(np.abs(a))\n\n# [1 1 2 2]\n```", "```py\nimport numpy as np\n\na = np.array([True, True, True, False])\n\nb = np.array([False, True, True, False])\n\nprint(np.logical_and(a, b))\n\n# [False  True  True False]\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Website analytics data:\n\n## (row = day), (col = users, bounce, duration)\n\na = np.array([[815, 70, 115],\n\n              [767, 80, 50],\n\n              [912, 74, 77],\n\n              [554, 88, 70],\n\n              [1008, 65, 128]])\n\nmean, stdev = np.mean(a, axis=0), np.std(a, axis=0)\n\n# [811.2  76.4  88\\. ], [152.97764543   6.85857128  29.04479299]\n\n## One-liner\n\noutliers = ((np.abs(a[:,0] - mean[0]) > stdev[0])\n\n            * (np.abs(a[:,1] - mean[1]) > stdev[1])\n\n            * (np.abs(a[:,2] - mean[2]) > stdev[2]))\n\n## Result\n\nprint(a[outliers])\n```", "```py\n[[1008   65  128]]\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: row is customer shopping basket\n\n## row = [course 1, course 2, ebook 1, ebook 2]\n\n## value 1 indicates that an item was bought.\n\nbasket = np.array([[0, 1, 1, 0],\n\n                   [0, 0, 0, 1],\n\n                   [1, 1, 0, 0],\n\n                   [0, 1, 1, 1],\n\n                   [1, 1, 1, 0],\n\n                   [0, 1, 1, 0],\n\n                   [1, 1, 0, 1],\n\n                   [1, 1, 1, 1]])\n\n## One-liner\n\ncopurchases = np.sum(np.all(basket[:,2:], axis = 1)) / basket.shape[0]\n\n## Result\n\nprint(copurchases)\n```", "```py\nprint(basket[:,2:])\n\n\"\"\"\n\n[[1 0]\n\n [0 1]\n\n [0 0]\n\n [1 1]\n\n [1 0]\n\n [1 0]\n\n [0 1]\n\n [1 1]]\n\n\"\"\"\n```", "```py\nprint(np.all(basket[:,2:], axis = 1))\n\n# [False False False  True False False False  True]\n```", "```py\n## Dependencies\n\nimport numpy as np\n\n## Data: row is customer shopping basket\n\n## row = [course 1, course 2, ebook 1, ebook 2]\n\n## value 1 indicates that an item was bought.\n\nbasket = np.array([[0, 1, 1, 0],\n\n                   [0, 0, 0, 1],\n\n                   [1, 1, 0, 0],\n\n                   [0, 1, 1, 1],\n\n                   [1, 1, 1, 0],\n\n                   [0, 1, 1, 0],\n\n                   [1, 1, 0, 1],\n\n                   [1, 1, 1, 1]])\n\n## One-liner (broken down in two lines;)\n\ncopurchases = [(i,j,np.sum(basket[:,i] + basket[:,j] == 2))\n\n               for i in range(4) for j in range(i+1,4)]\n\n## Result\n\nprint(max(copurchases, key=lambda x:x[2]))\n```", "```py\n## One-liner (broken down in two lines;)\n\ncopurchases = [(i,j,np.sum(basket[:,i] + basket[:,j] == 2))\n\n               for i in range(4) for j in range(i+1,4)]\n```", "```py\nprint([(i,j) for i in range(4) for j in range(i+1,4)])\n\n# [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]\n```", "```py\nnp.sum(basket[:,i] + basket[:,j] == 2)\n```", "```py\nprint(copurchases)\n\n# [(0, 1, 4), (0, 2, 2), (0, 3, 2), (1, 2, 5), (1, 3, 3), (2, 3, 2)]\n```", "```py\n## Result\n\nprint(max(copurchases, key=lambda x:x[2]))\n```", "```py\n## Result\n\nprint(max(copurchases, key=lambda x:x[2]))\n\n# (1, 2, 5)\n```"]