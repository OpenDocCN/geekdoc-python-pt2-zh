- en: '6'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Going Loopy
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nothing is worse than needing to do the same thing over and over. There’s a
    reason we’re told to count sheep when we’re having trouble falling asleep, and
    it has nothing to do with the amazing sleep-inducing powers of woolly mammals.
    It’s because endless repetition is boring, and your mind can drift off to sleep
    easily if you’re not focusing on something interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Programmers don’t like repeating themselves either, unless they’re also trying
    to fall asleep. Thankfully, most programming languages have a for loop, which
    repeats things like statements and blocks of code automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll look at for loops, as well as another type of loop that
    Python offers: the while loop.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0070-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using for Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To print hello five times in Python, you *could* do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'But this is rather tedious. Instead, you can use a for loop to reduce the amount
    of typing and repetition, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The range function ➊ can create a list of numbers ranging from a starting number
    up to the number right before the ending number. This may seem a little confusing,
    so let’s combine the range function with the list function to see exactly how
    this works. The range function doesn’t actually create a list of numbers; it returns
    an *iterator*, which is a Python object designed to work with loops. However,
    if we combine range with list, we get a list of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our previous example, for x in range(0,5): is actually telling Python to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Start counting from 0 and stop before reaching 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each number we count, store the value in the x variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, Python executes the print(’hello’) statement. Note the four additional
    spaces at the beginning of the line ➋ (as compared to the first line ➊). IDLE
    should have automatically indented this for you. When we hit ENTER after the second
    line, Python prints hello five times.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could also use the variable x in our print statement to count the number
    of hellos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we get rid of the for loop, our code might look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using the for loop saved us from writing eight extra lines of code! It’s best
    practice to avoid doing things more than once, so the for loop is a popular statement
    among programmers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You don’t need to stick to using the range function when making for loops.
    You could also use a list you’ve already created, such as the shopping list from
    [Chapter 3](ch03.xhtml#ch03), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This code tells Python, “For each item in wizard_list, store the value in the
    i variable, and then print the contents of that variable.” If we got rid of the
    for loop, we’d need to do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0072-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once again, for has saved us a lot of typing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create another loop. Type the following code into the Python Shell; it
    should automatically indent the code for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we create a list containing ‘huge’, ‘hairy’, and ‘pants’.
    In the next line, we loop through the items in that list, and then assign each
    item to the i variable. We then print the contents of the variable twice in the
    next two lines. Press ENTER on the next blank line to tell Python to end the block.
    It then runs the code and prints each element of the list twice.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0073-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that if you enter the wrong number of spaces, you’ll end up with an
    error message. If you entered the preceding code with an extra space on the fourth
    line, Python would display an indentation error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you learned in [Chapter 5](ch05.xhtml#ch05), Python expects the number of
    spaces in a block to be consistent. It doesn’t matter how many spaces you insert,
    as long as you use the same number for each new line (this also makes the code
    easier for humans to read).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a more complicated example of a for loop with two blocks of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Where are the blocks in this code? The first block is the first for loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The next block is the single print line in the second for loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Can you figure out what this code is going to do?
  prefs: []
  type: TYPE_NORMAL
- en: After a list called hugehairypants is created, we can tell from the next two
    lines that Python is going to loop through the items in the list and print out
    each one. However, at for j in hugehairypants, it will loop over the list again,
    this time assigning the value to the variable j, and then print each item again.
    These last two lines of code are still part of the first for loop, which means
    they will be executed for each item as the for loop goes through the list.
  prefs: []
  type: TYPE_NORMAL
- en: When this code runs, we should see huge followed by huge, hairy, pants, and
    then hairy followed by huge, hairy, pants, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the code into the Python Shell and see for yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Python enters the first loop and prints an item from the list. Next, it enters
    the second loop and prints all the items in the list. After that, it prints the
    second item in the list with print(i), and then prints the complete list again
    with the print(j) command in the inner loop. Lastly, it prints the third item
    in the list with print(i) again, and then prints the complete list one more time
    with the inner loop. In the output, the lines marked **→** are printed by print(i),
    and the unmarked lines are printed by the print(j) statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try something more practical than printing silly words. Remember the
    calculation we came up with in [Chapter 2](ch02.xhtml#ch02) to figure out how
    many gold coins you’d have at the end of the year if you used your grandfather’s
    duplication machine? It looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This represents 20 found coins plus 10 magic coins multiplied by 365 days in
    the year, minus the 3 coins a week stolen by the raven.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check how your pile of gold coins will increase each week. We can do
    this with a for loop, but first we need to change the value of our magic_coins
    variable so it represents the total number of coins per week. We get 10 magic
    coins per day, and there are 7 days in a week, so magic_coins should be 70:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0076-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see our treasure increase each week by creating another variable, called
    coins, and using a for loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The coins variable is loaded with the value of the found_coins variable ➊; this
    is our starting number. The next line sets up the for loop, which will run the
    commands in the block. Each time it loops, the week variable is loaded with the
    next number in the range of 1 through 52.
  prefs: []
  type: TYPE_NORMAL
- en: The line containing coins = coins + magic_coins - stolen_coins is a bit more
    complicated. Each week we want to add the number of coins we’ve magically created
    and subtract the number of coins the raven has stolen. Think of the coins variable
    as a treasure chest. Every week, the new coins are piled into the chest. So this
    line is telling Python, “Replace the contents of coins with the number of my current
    coins, plus what I’ve created this week.” The equal sign (=) is a bossy piece
    of code that says, “Work out some stuff on the right first, and then save it for
    later, using the name on the left.”
  prefs: []
  type: TYPE_NORMAL
- en: The print statement prints the week number and the total number of coins (so
    far) to the screen. (Consider rereading “Embedding Values in Strings” on [page
    29](ch03.xhtml#ch03lev1sec4).) If you run this program, you’ll see something like
    [Figure 6-1](ch06.xhtml#ch06fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/06fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-1: Running the loop*'
  prefs: []
  type: TYPE_NORMAL
- en: While We’re Talking About Looping . . .
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A for loop isn’t the only kind of loop you can make in Python. There’s also
    the while loop. While a for loop has a specific length, a while loop doesn’t.
    It’s used if you don’t know when the loop needs to stop ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a staircase with 20 steps. The staircase is indoors, and you know you
    can easily climb 20 steps. A for loop is like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now imagine a staircase going up a mountainside. The mountain is really tall,
    and you might run out of energy before you reach the top. Or the weather might
    turn bad, forcing you to stop. This is what a while loop is like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you try to run this code, you’ll get an error, because we haven’t created
    the tired and badweather variables. Although there isn’t enough code here to make
    a working program, it demonstrates a simple while loop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0078-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We start by creating the step variable with step = 0. Next, we create a while
    loop that checks whether the value of step is less than 10,000 (step < 10000),
    which is the number of steps from the bottom of the mountain to the top. As long
    as step is less than 10,000, Python will execute the rest of the code.
  prefs: []
  type: TYPE_NORMAL
- en: With print(step), we print the value of step and then check whether the value
    of the variable tired is True with the if tired == True condition. If it is, we
    use break to exit the loop. The break keyword is a way of jumping out of (or stopping)
    a loop immediately, and it works with both while and for loops.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, break causes Python to jump out of the block and move to any
    commands that appeared after the step = step + 1 line.
  prefs: []
  type: TYPE_NORMAL
- en: The line elif badweather == True checks to see if badweather is set to True;
    if so, break exits the loop. If neither tired nor badweather is True (seen at
    else), we add 1 to the step variable with step = step + 1, and the loop continues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps of a while loop are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the code in the block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'More commonly, a while loop might be created with a few conditions, rather
    than just one, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we create an x variable with the value 45 and a y variable with the value
    80\. The loop checks for two conditions: whether x is less than 50 and whether
    y is less than 100\. While both conditions are true, the lines that follow are
    executed, adding 1 to both variables and then printing them. The output of this
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Can you figure out how this works?
  prefs: []
  type: TYPE_NORMAL
- en: We start counting at 45 for x and at 80 for y, and then *increment* (add 1 to
    each variable) every time the code in the loop is run. The loop will run as long
    as x is less than 50 and y is less than 100\. After looping five times, the value
    in x reaches 50\. Now the first condition (x < 50) is no longer true, so Python
    stops looping.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use a while loop to create a *semi-eternal loop* that could go on
    forever, but continues until something happens in the code to break out of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The condition for the while loop is just True, which is always true, so the
    code in the block will always run (thus, the loop is eternal). Python will break
    out of the loop only if the variable some_value is true.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter, we used two types of loops to perform repetitive tasks: for
    loops and while loops. These are similar but can be used in different ways. We
    told Python what we wanted repeated by writing the tasks inside blocks of code,
    which we put inside loops. We also used the break keyword to stop looping.'
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here are some examples of loops to try out. The solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: '#1: The Hello Loop'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What do you think the following code will do? Guess what will happen, and then
    run the code in Python to see if you’re right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '#2: Even Numbers'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create a loop that prints even numbers until it reaches your age (if your age
    is an odd number, create a loop that prints out odd numbers until it reaches your
    age). For example, it might print out something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '#3: My Five Favorite Ingredients'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create a list containing five different sandwich ingredients, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a loop that prints out the list (including the numbers):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '#4: Your Weight on the Moon'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you were standing on the moon right now, your weight would be 16.5 percent
    of what it is on Earth. You can calculate that by multiplying your Earth weight
    by 0.165.
  prefs: []
  type: TYPE_NORMAL
- en: If you gained two pounds every year for the next 15 years, what would your weight
    be when you visited the moon each year and at the end of the 15 years? Write a
    program using a for loop that prints your moon weight for each year.
  prefs: []
  type: TYPE_NORMAL
