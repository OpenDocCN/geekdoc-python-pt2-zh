- en: '6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6'
- en: Going Loopy
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 循环进行中
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: Nothing is worse than needing to do the same thing over and over. There’s a
    reason we’re told to count sheep when we’re having trouble falling asleep, and
    it has nothing to do with the amazing sleep-inducing powers of woolly mammals.
    It’s because endless repetition is boring, and your mind can drift off to sleep
    easily if you’re not focusing on something interesting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么比需要一遍又一遍地做同样的事情更糟糕了。我们被告知在难以入睡时数羊是有原因的，这与羊毛哺乳动物的神奇催眠能力无关。原因是无休止的重复让人感到无聊，如果你不专注于某些有趣的事情，你的大脑很容易就会漂移进入睡眠状态。
- en: Programmers don’t like repeating themselves either, unless they’re also trying
    to fall asleep. Thankfully, most programming languages have a for loop, which
    repeats things like statements and blocks of code automatically.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员也不喜欢重复自己，除非他们也在试图入睡。幸运的是，大多数编程语言都有 for 循环，它可以自动重复像语句和代码块这样的内容。
- en: 'In this chapter, we’ll look at for loops, as well as another type of loop that
    Python offers: the while loop.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 for 循环以及 Python 提供的另一种循环类型：while 循环。
- en: '![Image](Images/f0070-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0070-01.jpg)'
- en: Using for Loops
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 for 循环
- en: 'To print hello five times in Python, you *could* do the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在 Python 中打印五次 hello，你 *可以* 这样做：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'But this is rather tedious. Instead, you can use a for loop to reduce the amount
    of typing and repetition, like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但这相当繁琐。相反，你可以使用 for 循环来减少打字量和重复，如下所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The range function ➊ can create a list of numbers ranging from a starting number
    up to the number right before the ending number. This may seem a little confusing,
    so let’s combine the range function with the list function to see exactly how
    this works. The range function doesn’t actually create a list of numbers; it returns
    an *iterator*, which is a Python object designed to work with loops. However,
    if we combine range with list, we get a list of numbers:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: range 函数 ➊ 可以创建一个从起始数字到接近结束数字的数字列表。可能这有点令人困惑，所以让我们将 range 函数与 list 函数结合起来，看看它到底是如何工作的。range
    函数实际上并不创建数字列表；它返回一个 *迭代器*，这是一个专为循环设计的 Python 对象。不过，如果我们将 range 与 list 结合使用，就能得到一个数字列表：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In our previous example, for x in range(0,5): is actually telling Python to
    do the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们之前的示例中，for x in range(0,5): 实际上是告诉 Python 执行以下操作：'
- en: Start counting from 0 and stop before reaching 5.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 0 开始计数，并在达到 5 之前停止。
- en: For each number we count, store the value in the x variable.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们计数的每个数字，将其值存储在 x 变量中。
- en: Then, Python executes the print(’hello’) statement. Note the four additional
    spaces at the beginning of the line ➋ (as compared to the first line ➊). IDLE
    should have automatically indented this for you. When we hit ENTER after the second
    line, Python prints hello five times.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Python 执行 print(’hello’) 语句。注意第二行 ➋ 开头的四个额外空格（与第一行 ➊ 相比）。IDLE 应该已经自动为你缩进了。当我们按下
    ENTER 键后，Python 会打印五次 hello。
- en: 'We could also use the variable x in our print statement to count the number
    of hellos:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 print 语句中使用变量 x 来计算 hello 的数量：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we get rid of the for loop, our code might look something like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们去掉 for 循环，代码可能会变成这样：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using the for loop saved us from writing eight extra lines of code! It’s best
    practice to avoid doing things more than once, so the for loop is a popular statement
    among programmers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 for 循环使我们免去了写八行额外代码！避免重复做事是最佳实践，因此 for 循环在程序员中非常流行。
- en: 'You don’t need to stick to using the range function when making for loops.
    You could also use a list you’ve already created, such as the shopping list from
    [Chapter 3](ch03.xhtml#ch03), as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作 for 循环时，你不必坚持使用 range 函数。你还可以使用你已经创建的列表，比如来自[第3章](ch03.xhtml#ch03)的购物清单，如下所示：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code tells Python, “For each item in wizard_list, store the value in the
    i variable, and then print the contents of that variable.” If we got rid of the
    for loop, we’d need to do something like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Python：“对于 wizard_list 中的每一项，将其值存储在 i 变量中，然后打印该变量的内容。”如果去掉 for 循环，我们将需要做如下操作：
- en: '![Image](Images/f0072-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0072-01.jpg)'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once again, for has saved us a lot of typing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再一次，for 循环为我们节省了大量的打字工作。
- en: 'Let’s create another loop. Type the following code into the Python Shell; it
    should automatically indent the code for you:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再创建一个循环。在 Python Shell 中输入以下代码；它应该会自动为你缩进代码：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the first line, we create a list containing ‘huge’, ‘hairy’, and ‘pants’.
    In the next line, we loop through the items in that list, and then assign each
    item to the i variable. We then print the contents of the variable twice in the
    next two lines. Press ENTER on the next blank line to tell Python to end the block.
    It then runs the code and prints each element of the list twice.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们创建了一个包含 ‘huge’、‘hairy’ 和 ‘pants’ 的列表。在接下来的一行中，我们遍历列表中的项目，并将每个项目赋值给变量
    i。然后，在接下来的两行代码中，我们打印变量的内容两次。按下 ENTER 键进入下一行空白行，告诉 Python 结束代码块。接着，它会执行代码并打印列表中的每个元素两次。
- en: '![Image](Images/f0073-01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0073-01.jpg)'
- en: 'Remember that if you enter the wrong number of spaces, you’ll end up with an
    error message. If you entered the preceding code with an extra space on the fourth
    line, Python would display an indentation error:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你输入了错误的空格数量，就会收到错误信息。如果你在第四行输入了额外的空格，Python 会显示缩进错误：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you learned in [Chapter 5](ch05.xhtml#ch05), Python expects the number of
    spaces in a block to be consistent. It doesn’t matter how many spaces you insert,
    as long as you use the same number for each new line (this also makes the code
    easier for humans to read).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[第 5 章](ch05.xhtml#ch05)中学到的，Python 要求代码块中的空格数量保持一致。无论你插入多少空格，只要每一行使用相同的空格数就可以（这也使得代码更易于人类阅读）。
- en: 'Here’s a more complicated example of a for loop with two blocks of code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更复杂的例子，展示了一个包含两个代码块的 for 循环：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Where are the blocks in this code? The first block is the first for loop:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在这段代码中，哪些是代码块呢？第一个代码块是第一个 for 循环：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next block is the single print line in the second for loop:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码块是第二个 for 循环中的单一 print 行：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Can you figure out what this code is going to do?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你能猜到这段代码会做什么吗？
- en: After a list called hugehairypants is created, we can tell from the next two
    lines that Python is going to loop through the items in the list and print out
    each one. However, at for j in hugehairypants, it will loop over the list again,
    this time assigning the value to the variable j, and then print each item again.
    These last two lines of code are still part of the first for loop, which means
    they will be executed for each item as the for loop goes through the list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了一个名为 hugehairypants 的列表后，我们可以从接下来的两行代码中看出，Python 会遍历列表中的项目并打印出每一个。然而，在 `for
    j in hugehairypants` 这一行时，它会再次遍历列表，这次将值赋给变量 j，然后再次打印每个项目。这最后两行代码依然属于第一个 for 循环，这意味着它们会随着
    for 循环遍历列表而为每个项目执行。
- en: When this code runs, we should see huge followed by huge, hairy, pants, and
    then hairy followed by huge, hairy, pants, and so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当这段代码运行时，我们应该看到 huge 后跟 huge，再后面是 hairy，pants，接着是 hairy 后跟 huge，hairy，pants，如此循环。
- en: 'Enter the code into the Python Shell and see for yourself:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码输入 Python Shell，亲自试试看：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Python enters the first loop and prints an item from the list. Next, it enters
    the second loop and prints all the items in the list. After that, it prints the
    second item in the list with print(i), and then prints the complete list again
    with the print(j) command in the inner loop. Lastly, it prints the third item
    in the list with print(i) again, and then prints the complete list one more time
    with the inner loop. In the output, the lines marked **→** are printed by print(i),
    and the unmarked lines are printed by the print(j) statement.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Python 进入第一个循环并打印列表中的一个项目。接着，它进入第二个循环并打印出列表中的所有项目。之后，它用 `print(i)` 打印出列表中的第二个项目，再用
    `print(j)` 打印出完整的列表一次。最后，它再次用 `print(i)` 打印出列表中的第三个项目，再次通过内层循环打印完整列表。在输出中，标有 **→**
    的行是由 `print(i)` 打印的，未标记的行是由 `print(j)` 语句打印的。
- en: 'Let’s try something more practical than printing silly words. Remember the
    calculation we came up with in [Chapter 2](ch02.xhtml#ch02) to figure out how
    many gold coins you’d have at the end of the year if you used your grandfather’s
    duplication machine? It looked like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试做一些比打印愚蠢单词更实际的事情。还记得我们在[第 2 章](ch02.xhtml#ch02)中提出的计算公式吗？它用来算出如果你使用祖父的复制机，年末你会有多少金币？它长这样：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This represents 20 found coins plus 10 magic coins multiplied by 365 days in
    the year, minus the 3 coins a week stolen by the raven.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示 20 个找到的硬币加上 10 个魔法硬币，再乘以一年中的 365 天，减去每周被渡鸦偷走的 3 个硬币。
- en: 'Let’s check how your pile of gold coins will increase each week. We can do
    this with a for loop, but first we need to change the value of our magic_coins
    variable so it represents the total number of coins per week. We get 10 magic
    coins per day, and there are 7 days in a week, so magic_coins should be 70:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你的金币堆每周是如何增长的。我们可以通过 for 循环做到这一点，但首先我们需要修改 magic_coins 变量的值，使其代表每周的金币总数。我们每天获得
    10 枚魔法金币，一周有 7 天，所以 magic_coins 应该是 70：
- en: '![Image](Images/f0076-01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0076-01.jpg)'
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can see our treasure increase each week by creating another variable, called
    coins, and using a for loop:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建另一个变量，称为 coins，并使用 for 循环，看到我们的财富每周增加：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The coins variable is loaded with the value of the found_coins variable ➊; this
    is our starting number. The next line sets up the for loop, which will run the
    commands in the block. Each time it loops, the week variable is loaded with the
    next number in the range of 1 through 52.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: coins 变量加载了 found_coins 变量的值 ➊；这是我们的起始值。接下来的代码设置了 for 循环，它将执行代码块中的命令。每次循环时，week
    变量都会加载 1 到 52 范围内的下一个数字。
- en: The line containing coins = coins + magic_coins - stolen_coins is a bit more
    complicated. Each week we want to add the number of coins we’ve magically created
    and subtract the number of coins the raven has stolen. Think of the coins variable
    as a treasure chest. Every week, the new coins are piled into the chest. So this
    line is telling Python, “Replace the contents of coins with the number of my current
    coins, plus what I’ve created this week.” The equal sign (=) is a bossy piece
    of code that says, “Work out some stuff on the right first, and then save it for
    later, using the name on the left.”
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 coins = coins + magic_coins - stolen_coins 的这一行稍微复杂一些。每周我们都想增加我们魔法创造的金币数量，并减去乌鸦偷走的金币数量。可以把
    coins 变量想象成一个宝箱。每周，新的金币都会被堆进宝箱。所以这一行是在告诉 Python：“用当前金币的数量，加上这周我创造的金币数量，来替换 coins
    的内容。”等号（=）是一个指令，意思是：“先计算右边的内容，然后把结果保存到左边的变量中。”
- en: The print statement prints the week number and the total number of coins (so
    far) to the screen. (Consider rereading “Embedding Values in Strings” on [page
    29](ch03.xhtml#ch03lev1sec4).) If you run this program, you’ll see something like
    [Figure 6-1](ch06.xhtml#ch06fig01).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: print 语句将周数和（到目前为止的）金币总数打印到屏幕上。（请考虑重新阅读《嵌入字符串中的值》一节，见 [第 29 页](ch03.xhtml#ch03lev1sec4)。）如果你运行这个程序，你会看到类似于
    [图 6-1](ch06.xhtml#ch06fig01) 的内容。
- en: '![Image](Images/06fig01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/06fig01.jpg)'
- en: '*Figure 6-1: Running the loop*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：运行循环*'
- en: While We’re Talking About Looping . . .
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 既然我们在谈论循环...
- en: A for loop isn’t the only kind of loop you can make in Python. There’s also
    the while loop. While a for loop has a specific length, a while loop doesn’t.
    It’s used if you don’t know when the loop needs to stop ahead of time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: for 循环并不是你在 Python 中可以创建的唯一类型的循环。还有 while 循环。while 循环不同于 for 循环，它没有固定的长度。如果你事先不知道循环何时停止，就可以使用
    while 循环。
- en: 'Imagine a staircase with 20 steps. The staircase is indoors, and you know you
    can easily climb 20 steps. A for loop is like that:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一段有 20 个台阶的楼梯。楼梯在室内，你知道你可以轻松爬完这 20 个台阶。for 循环就像这样：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now imagine a staircase going up a mountainside. The mountain is really tall,
    and you might run out of energy before you reach the top. Or the weather might
    turn bad, forcing you to stop. This is what a while loop is like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下有一段通往山顶的楼梯。山很高，你可能在到达山顶之前就筋疲力尽了，或者天气变坏，迫使你停下来。这就像一个 while 循环：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you try to run this code, you’ll get an error, because we haven’t created
    the tired and badweather variables. Although there isn’t enough code here to make
    a working program, it demonstrates a simple while loop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试运行这段代码，你会遇到一个错误，因为我们没有创建 tired 和 badweather 变量。虽然这里的代码不够完整，无法运行一个完整的程序，但它演示了一个简单的
    while 循环。
- en: '![Image](Images/f0078-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0078-01.jpg)'
- en: We start by creating the step variable with step = 0. Next, we create a while
    loop that checks whether the value of step is less than 10,000 (step < 10000),
    which is the number of steps from the bottom of the mountain to the top. As long
    as step is less than 10,000, Python will execute the rest of the code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过 step = 0 创建了 step 变量。接下来，我们创建了一个 while 循环，检查 step 的值是否小于 10,000（step
    < 10000），这代表从山脚到山顶的步数。只要 step 小于 10,000，Python 就会执行其余的代码。
- en: With print(step), we print the value of step and then check whether the value
    of the variable tired is True with the if tired == True condition. If it is, we
    use break to exit the loop. The break keyword is a way of jumping out of (or stopping)
    a loop immediately, and it works with both while and for loops.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `print(step)` 打印 `step` 的值，然后使用 `if tired == True` 条件检查变量 `tired` 的值是否为 `True`。如果是，我们使用
    `break` 退出循环。`break` 关键字是一种立即跳出（或停止）循环的方式，适用于 `while` 和 `for` 循环。
- en: In this example, break causes Python to jump out of the block and move to any
    commands that appeared after the step = step + 1 line.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`break` 使得 Python 跳出代码块并跳到步骤 = 步骤 + 1 这一行后面的任何命令。
- en: The line elif badweather == True checks to see if badweather is set to True;
    if so, break exits the loop. If neither tired nor badweather is True (seen at
    else), we add 1 to the step variable with step = step + 1, and the loop continues.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 语句 `elif badweather == True` 检查 `badweather` 是否被设置为 `True`；如果是，`break` 就会退出循环。如果
    `tired` 和 `badweather` 都不为真（在 `else` 中看到），我们使用 `step = step + 1` 将 `step` 增加 1，循环继续。
- en: 'The steps of a while loop are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环的步骤如下：'
- en: Check the condition.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查条件。
- en: Execute the code in the block.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行代码块中的代码。
- en: Repeat.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复。
- en: 'More commonly, a while loop might be created with a few conditions, rather
    than just one, like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的是，可能会创建一个带有多个条件的 `while` 循环，而不仅仅是一个条件，像这样：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, we create an x variable with the value 45 and a y variable with the value
    80\. The loop checks for two conditions: whether x is less than 50 and whether
    y is less than 100\. While both conditions are true, the lines that follow are
    executed, adding 1 to both variables and then printing them. The output of this
    code is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个值为 45 的 x 变量和一个值为 80 的 y 变量。循环检查两个条件：x 是否小于 50，y 是否小于 100。只要两个条件都成立，接下来的代码行就会执行，分别将
    1 加到这两个变量上，然后打印它们。该代码的输出如下：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Can you figure out how this works?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你能弄明白它是如何工作的吗？
- en: We start counting at 45 for x and at 80 for y, and then *increment* (add 1 to
    each variable) every time the code in the loop is run. The loop will run as long
    as x is less than 50 and y is less than 100\. After looping five times, the value
    in x reaches 50\. Now the first condition (x < 50) is no longer true, so Python
    stops looping.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 x = 45 和 y = 80 开始计数，然后每次运行循环中的代码时，*递增*（将 1 加到每个变量）。只要 x 小于 50 且 y 小于 100，循环将继续运行。经过五次循环后，x
    的值达到 50。现在，第一个条件（x < 50）不再成立，因此 Python 停止循环。
- en: We can also use a while loop to create a *semi-eternal loop* that could go on
    forever, but continues until something happens in the code to break out of it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `while` 循环创建一个 *半永恒的循环*，它可能会永远持续下去，但会在代码中的某个地方发生某些事情，导致它跳出循环。
- en: 'Here’s an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The condition for the while loop is just True, which is always true, so the
    code in the block will always run (thus, the loop is eternal). Python will break
    out of the loop only if the variable some_value is true.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `while` 循环的条件是 `True`，它总是成立，因此代码块中的代码将永远运行（因此，这个循环是永恒的）。只有当变量 `some_value`
    为真时，Python 才会跳出循环。
- en: What You Learned
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: 'In this chapter, we used two types of loops to perform repetitive tasks: for
    loops and while loops. These are similar but can be used in different ways. We
    told Python what we wanted repeated by writing the tasks inside blocks of code,
    which we put inside loops. We also used the break keyword to stop looping.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们使用了两种类型的循环来执行重复任务：`for` 循环和 `while` 循环。它们相似，但可以以不同的方式使用。我们通过将任务写在代码块中，然后将这些代码块放入循环中，告诉
    Python 我们想要重复的内容。我们还使用了 `break` 关键字来停止循环。
- en: Programming Puzzles
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程谜题
- en: Here are some examples of loops to try out. The solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些循环示例供你尝试。解决方案可以在 *[http://python-for-kids.com](http://python-for-kids.com)*
    找到。
- en: '#1: The Hello Loop'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1: Hello 循环'
- en: What do you think the following code will do? Guess what will happen, and then
    run the code in Python to see if you’re right.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为以下代码会做什么？猜一猜它会发生什么，然后在 Python 中运行代码看看你猜的是否正确。
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '#2: Even Numbers'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2: 偶数'
- en: 'Create a loop that prints even numbers until it reaches your age (if your age
    is an odd number, create a loop that prints out odd numbers until it reaches your
    age). For example, it might print out something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个循环，打印出偶数，直到达到你的年龄（如果你的年龄是奇数，创建一个循环打印出奇数，直到达到你的年龄）。例如，它可能会打印出如下内容：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '#3: My Five Favorite Ingredients'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3: 我的五个最爱配料'
- en: 'Create a list containing five different sandwich ingredients, such as the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含五种不同三明治配料的列表，如下所示：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now create a loop that prints out the list (including the numbers):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个循环，打印出列表（包括数字）：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '#4: Your Weight on the Moon'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4：你在月球上的体重'
- en: If you were standing on the moon right now, your weight would be 16.5 percent
    of what it is on Earth. You can calculate that by multiplying your Earth weight
    by 0.165.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在站在月球上，你的体重将是地球体重的16.5%。你可以通过将地球体重乘以0.165来计算。
- en: If you gained two pounds every year for the next 15 years, what would your weight
    be when you visited the moon each year and at the end of the 15 years? Write a
    program using a for loop that prints your moon weight for each year.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你每年增加两磅体重，接下来的15年里，你的体重在每年访问月球时以及15年后的体重大概是多少？写一个使用`for`循环的程序，打印出你每年在月球上的体重。
