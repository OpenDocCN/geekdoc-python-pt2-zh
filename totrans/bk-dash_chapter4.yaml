- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">FIRST
    DASH APP</samp>
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">第一个
    Dash 应用</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: In this chapter you’ll build your first Dash app. We’ll analyze the number of
    Twitter likes received by 16 chosen celebrities since 2011\. You can download
    the data with the book’s resources at [*https://<wbr>nostarch<wbr>.com<wbr>/python<wbr>-dash*](https://nostarch.com/python-dash).
    The type of analysis we’ll do is common in the field of social media analytics,
    typically used to better understand audience behavior, the effectiveness of posts,
    and the overall performance of an account.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将构建你的第一个 Dash 应用。我们将分析自 2011 年以来 16 位明星收到的 Twitter 点赞数。你可以通过本书的资源下载数据，网址是
    [*https://<wbr>nostarch<wbr>.com<wbr>/python<wbr>-dash*](https://nostarch.com/python-dash)。我们进行的这种分析在社交媒体分析领域非常常见，通常用于更好地理解受众行为、帖子效果以及账户的整体表现。
- en: 'This first dashboard will plot the number of likes per tweet. Once you master
    this simple plotting process with Dash, you’ll be able to scale your skills to
    plot bigger and more complex data in other areas: Instagram post views, Facebook
    profile visits, LinkedIn post click-through rates, and YouTube video performance.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个仪表盘将绘制每条推文的点赞数。一旦你掌握了使用 Dash 绘制这种简单图表的过程，你就能将你的技能扩展到其他更大、更复杂的数据领域：Instagram
    帖子的浏览量、Facebook 个人主页的访问量、LinkedIn 帖子的点击率，以及 YouTube 视频的表现。
- en: This chapter should give you sufficient knowledge of Dash to create your own
    dashboard app. You’ll learn how to incorporate data into your app, manage numerous
    dashboard app components, build basic charts such as line charts, and add interactive
    capabilities to your dashboard through the callback decorator. First, let’s download
    the code and run the app to see what it does.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为你提供足够的 Dash 知识，以便你创建自己的仪表盘应用。你将学习如何将数据集成到应用中，管理多个仪表盘组件，构建基本图表（如折线图），并通过回调装饰器为仪表盘添加交互功能。首先，让我们下载代码并运行应用，看看它的功能。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the Project</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置项目</samp>
- en: Open PyCharm, create a new project, and call it *my-first-app* (the project
    name should be the suffix text after the last backslash in the Location field
    of the New Project dialog). Set up your virtual environment using the standard
    Virtualenv.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 PyCharm，创建一个新项目，并命名为 *my-first-app*（项目名称应该是新建项目对话框中 Location 字段最后一个反斜杠后的后缀文本）。使用标准的
    Virtualenv 设置你的虚拟环境。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*The code in this chapter assumes you’re using a Python IDE, such as PyCharm.
    If you don’t have an IDE installed and a virtual environment set, refer back to
    [Chapter 2](chapter2.xhtml) and complete your Python setup. If you’re using a
    different coding environment, just adapt the instructions here to your environment.
    The code in this chapter also requires Python 3.6 or higher.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章的代码假设你正在使用 Python IDE，如 PyCharm。如果你没有安装 IDE 或者没有设置虚拟环境，请回到[第 2 章](chapter2.xhtml)并完成
    Python 环境的设置。如果你使用的是其他编程环境，只需根据你的环境调整本章的说明即可。本章的代码还要求 Python 3.6 或更高版本。*'
- en: Next, you need to download this chapter’s dashboard app files into your project
    folder. Instead of cloning the repository as we did in [Chapter 2](chapter2.xhtml),
    we’ll download the ZIP file directly. It’s worth trying various ways to set up
    a project because you’ll probably stumble upon some projects that are not directly
    available as Git repositories. To use the ZIP file, go to the GitHub repository
    at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash),
    click **Code**, and then click **Download ZIP**, as shown in [Figure 4-1](chapter4.xhtml#fig4-1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将本章的仪表盘应用文件下载到你的项目文件夹中。不同于我们在[第 2 章](chapter2.xhtml)中使用 Git 克隆仓库的做法，这次我们将直接下载
    ZIP 文件。尝试不同的项目设置方式是值得的，因为你可能会遇到一些不能直接作为 Git 仓库提供的项目。要使用 ZIP 文件，访问 GitHub 仓库 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)，点击
    **Code**，然后点击 **Download ZIP**，如[图 4-1](chapter4.xhtml#fig4-1)所示。
- en: '![](../images/Figure4-1.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-1: Downloading the
    app code from GitHub</samp>'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-1：从 GitHub 下载应用代码</samp>
- en: 'Once you have the *Plotly-Dash-master.zip* file on your computer, open it and
    go into the *[Chapter-4](chapter4.xhtml)* folder. Copy all the files from that
    folder into your recently created *my-first-app* project folder. The project folder
    should have files in the following structure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将 *Plotly-Dash-master.zip* 文件下载到电脑中，打开它并进入 *[Chapter-4](chapter4.xhtml)*
    文件夹。将该文件夹中的所有文件复制到你最近创建的 *my-first-app* 项目文件夹中。项目文件夹应具有以下结构：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">– my-first-app</samp>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">– my-first-app</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|––assets</samp>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|––assets</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ––mystyles.css</samp>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ––mystyles.css</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|––tweets.csv</samp>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|––tweets.csv</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|––twitter_app.py</samp>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|––twitter_app.py</samp>
- en: The *assets* folder will hold the CSS script. The *tweets.csv* file holds the
    data we’ll use, and *twitter_app.py* is the main app file we’ll use to run the
    app.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*assets* 文件夹将保存 CSS 脚本。*tweets.csv* 文件保存我们将使用的数据，*twitter_app.py* 是我们用来运行应用的主要文件。'
- en: We’ll now install the necessary libraries in our virtual environment. Go to
    the Terminal tab in the bottom part of the PyCharm window, shown in [Figure 4-2](chapter4.xhtml#fig4-2).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在虚拟环境中安装必要的库。转到 PyCharm 窗口底部的 Terminal 标签，见[图 4-2](chapter4.xhtml#fig4-2)。
- en: '![](../images/Figure4-2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-2: Opening the terminal
    in PyCharm</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-2：在 PyCharm 中打开终端</samp>
- en: 'Enter and execute the following lines of code to install pandas and Dash (the
    Plotly package is automatically installed with Dash, so there is no need to install
    Plotly, and the NumPy package is automatically installed with pandas):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并执行以下代码行以安装 pandas 和 Dash（Plotly 包会随 Dash 自动安装，因此无需单独安装 Plotly，NumPy 包也会随
    pandas 自动安装）：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
- en: 'To check that the libraries are installed correctly, enter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查库是否正确安装，请输入：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
- en: This will create a list of all the Python packages currently in your virtual
    environment. If they’re all listed, you can move on. Note that all dependencies
    of pandas and Dash will also be listed, so you might see many more libraries than
    just the two you installed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个列出当前虚拟环境中所有 Python 包的清单。如果所有包都列出，你可以继续。请注意，pandas 和 Dash 的所有依赖项也会被列出，所以你可能会看到比你安装的两个包更多的库。
- en: 'Next, open *twitter_app.py* inside PyCharm and run the script. You should see
    the following message:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 PyCharm 中打开 *twitter_app.py* 并运行脚本。你应该看到以下信息：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">* Serving Flask app "twitter_app"
    (lazy loading)</samp>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">* Serving Flask app "twitter_app"
    (lazy loading)</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">* Environment: production</samp>'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">* Environment: production</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Use a production WSGI server instead.</samp>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Use a production WSGI server instead.</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">* Debug mode: on</samp>'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">* Debug mode: on</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
- en: The warning just reminds us that the app is in a development server and it is
    completely normal. To open your app, click the HTTP link or copy and paste it
    into your browser’s address bar.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个警告只是提醒我们应用正在开发服务器上运行，这是完全正常的。要打开你的应用，点击 HTTP 链接或将其复制并粘贴到浏览器的地址栏中。
- en: Congratulations! You should now see your first Dash app, which should look like
    [Figure 4-3](chapter4.xhtml#fig4-3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在应该能看到你的第一个 Dash 应用，它应该像[图 4-3](chapter4.xhtml#fig4-3)那样。
- en: '![](../images/Figure4-3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-3: The Twitter Likes
    Analysis app</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-3：Twitter 点赞分析应用</samp>
- en: Have fun! Play around with your dashboard app. Change the dropdown values, click
    the links, click on the graph legend, and zoom in to a certain date range by holding
    down the mouse’s left-click button and dragging the mouse. See what information
    you can deduce.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心！在你的仪表盘应用中随便玩玩。改变下拉框的值，点击链接，点击图表图例，并按住鼠标左键拖动鼠标来缩放到某个日期范围。看看你能推导出什么信息。
- en: 'Now let’s take a look at the code of the app. Most Dash apps have a similar
    code layout:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下应用的代码。大多数 Dash 应用程序的代码布局是类似的：
- en: 1.  Import the necessary Python libraries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  导入必要的 Python 库。
- en: 2.  Read in the data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  读取数据。
- en: 3.  Assign a stylesheet to describe how the app should be displayed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  分配样式表以描述应用的显示方式。
- en: 4.  Build the app layout that will define how to display all the elements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  构建应用布局，定义如何显示所有元素。
- en: 5.  Create the callbacks to enable interactivity between the app components.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 5.  创建回调函数，以实现应用组件之间的交互性。
- en: Because Dash apps mostly follow this outline, we’ll go through the code in this
    order.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Dash 应用大多遵循这一大纲，我们将按此顺序来浏览代码。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Importing the Libraries</samp>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">导入库</samp>
- en: Let’s first look at the libraries we’ll use, shown in [Listing 4-1](chapter4.xhtml#List4-1).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先看一下我们将要使用的库，见[列表 4-1](chapter4.xhtml#List4-1)。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html,
    Input, Output</samp>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html,
    Input, Output</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-1: The import section
    of</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-1：来自</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py
    的导入部分</samp>
- en: We first import pandas to handle the data. We then import Plotly, a popular
    Python visualization library. There are two main ways to create graphs in Plotly.
    We’re using *Plotly Express*, a high-level interface for creating graphs in single
    function calls, with very few lines of code. It has enough features to allow you
    to build graphs seamlessly and quickly, and is the easier of the two to use for
    simpler apps.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入 pandas 来处理数据。然后导入 Plotly，这是一个流行的 Python 可视化库。在 Plotly 中有两种主要的创建图表方式。我们使用的是*Plotly
    Express*，这是一个用于通过单次函数调用快速创建图表的高级接口，只需很少的代码行。它有足够的功能，能够让你无缝地快速构建图表，并且是两者中用于简单应用最容易使用的。
- en: The alternative is *Plotly Graph Objects*, a low-level interface for creating
    graphs from the bottom up. When using Graph Objects, you need to define the data,
    layout, and, at times, frames, all of which make the graph-building process more
    involved. That said, its full set of features allows you to customize your graphs
    in ways that add much richness to them, so you might want to use Plotly Graph
    Objects once you’ve mastered Dash basics and you have more complicated graphs
    to build. We’ll use Plotly Express in most cases and revert to Graph Objects in
    more complex situations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是*Plotly Graph Objects*，这是一个从底层构建图表的低级接口。使用 Graph Objects 时，你需要定义数据、布局以及有时的帧，这些都使得图表构建过程更加复杂。然而，它的完整功能集允许你以多种方式自定义图表，从而增加图表的丰富性，所以一旦你掌握了
    Dash 的基础，并且需要构建更复杂的图表时，你可能会选择使用 Plotly Graph Objects。我们在大多数情况下会使用 Plotly Express，只有在更复杂的情况下才会回退到
    Graph Objects。
- en: 'Next, we import some Dash libraries to handle components and dependencies.
    *Components* are the building blocks that can be combined to create rich, complex
    interfaces for your users, such as dropdown menus, range sliders, and radio buttons.
    Dash comes bundled with two key component libraries maintained by Plotly: dash-html-components
    (HTML) and dash-core-components (DCC). The *dash-html-components* library contains
    structural elements such as headings and dividers that style and position elements
    on the page, while *dash-core-components* provides core functionality for your
    app, such as user input fields and figures.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们导入一些 Dash 库来处理组件和依赖项。*组件*是可以组合在一起为用户创建丰富复杂界面的构建模块，例如下拉菜单、范围滑块和单选按钮。Dash
    附带了两个由 Plotly 维护的关键组件库：dash-html-components（HTML）和 dash-core-components（DCC）。*dash-html-components*
    库包含诸如标题和分隔符等结构性元素，用于设置页面上元素的样式和位置，而 *dash-core-components* 提供应用程序的核心功能，如用户输入字段和图形。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Management</samp>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据管理</samp>
- en: In this app, we’re using a CSV spreadsheet as our data source. To use the data,
    we need to read it into memory via pandas, but before that we have to *clean*
    the data. This means preparing the data for analysis and plotting by doing things
    like standardizing capitalization of strings and formats of time, stripping whitespace,
    and adding nulls for missing values. When the data is *dirty*, it’s often unorganized
    and might contain missing values. If you try to use dirty data, the plot may not
    work, the analysis is likely to be inaccurate, and you’ll find filtering difficult.
    Cleaning the data ensures that it is readable, presentable, and plottable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们使用 CSV 电子表格作为数据源。为了使用数据，我们需要通过 pandas 将其读取到内存中，但在此之前，我们必须 *清洗* 数据。这意味着通过执行标准化字符串的大小写、时间格式、去除空格以及为缺失值添加空值等操作，来准备数据以供分析和绘制图表。当数据是
    *脏的* 时，通常它是无序的，并且可能包含缺失值。如果你尝试使用脏数据，图表可能无法正常工作，分析可能不准确，而且你会发现过滤数据很困难。清洗数据确保数据可读、可展示并且可以绘图。
- en: '[Listing 4-2](chapter4.xhtml#List4-2) shows the data management section of
    the code.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 4-2](chapter4.xhtml#List4-2) 显示了代码中的数据管理部分。'
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.read_csv("tweets.csv")</samp>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.read_csv("tweets.csv")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df["name"] = pd.Series(df["name"]).str.lower()</samp>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df["name"] = pd.Series(df["name"]).str.lower()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df["date_time"] = pd.to_datetime(df["date_time"])</samp>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df["date_time"] = pd.to_datetime(df["date_time"])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = (</samp>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = (</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.groupby([df["date_time"].dt.date,
    "name"])[</samp>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.groupby([df["date_time"].dt.date,
    "name"])[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ["number_of_likes", "number_of_shares"]</samp>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ["number_of_likes", "number_of_shares"]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   .mean()</samp>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   .mean()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   .astype(int)</samp>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   .astype(int)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = df.reset_index()</samp>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = df.reset_index()</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-2: The data management
    section of</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-2：数据管理部分来自</samp> <samp
    class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: At ❶ we take the CSV spreadsheet and read it into a pandas DataFrame called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>. The DataFrame at the
    beginning of a Dash app is commonly referred to as a *global DataFrame* and the
    data is a *global variable* (*global* means the object is declared outside a function,
    meaning it’s accessible throughout the app).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ❶ 处，我们获取 CSV 电子表格并将其读取到一个名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    的 pandas DataFrame 中。Dash 应用程序开始时的 DataFrame 通常被称为 *全局 DataFrame*，而数据则是一个 *全局变量*（*全局*意味着对象在函数外部声明，意味着它可以在应用程序中随处访问）。
- en: To clean the data, we change the strings of the celebrity <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column to lowercase so that we can readily compare them, we convert the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp> column into a date recognizable
    by pandas, and we group the data by <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> so that each row
    has a unique date stamp and name. If we did not group the data this way, we would
    end up with multiple rows with the same date and name, which would create a messy
    line chart that’s impossible to read.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清理数据，我们将名人 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 列的字符串转换为小写，以便于比较。我们将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp> 列转换为 pandas 可识别的日期格式，并根据
    <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    对数据进行分组，以确保每一行都有唯一的日期和名称。如果不这样分组数据，就会导致多个相同日期和名称的行，最终生成一个杂乱无章、无法阅读的折线图。
- en: 'To check the data, add the following line of code to the script, right after
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df.reset_index()</samp>:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查数据，在脚本中添加以下代码行，紧接在 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df.reset_index()</samp>
    之后：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.head())</samp>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df.head())</samp>
- en: 'Once you run the script anew, you should see something like the following inside
    the Python terminal:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行脚本后，你应该在 Python 终端中看到类似以下的内容：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_shares</samp> |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_shares</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-06</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">selenagomez</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">278</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">695</samp> |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-06</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">selenagomez</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">278</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">695</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-07</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">jtimberlake</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">62</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">189</samp> |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-07</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">jtimberlake</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">62</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">189</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-07</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">selenagomez</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">201</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">630</samp> |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-07</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">selenagomez</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">201</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">630</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-08</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">jtimberlake</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">27</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">107</samp> |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-08</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">jtimberlake</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">27</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">107</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-08</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">selenagomez</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">349</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">935</samp> |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2010-01-08</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">selenagomez</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">349</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">935</samp> |'
- en: As you can see, the result is a neat pandas DataFrame with rows of data that
    represent the average number of likes and shares per celebrity, per day.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，结果是一个整洁的 pandas DataFrame，其中的每一行数据表示每个名人在每天的点赞和分享的平均数。
- en: It’s always a good practice to read in and prepare your data at the beginning
    of the app because reading data can be a memory-expensive task; by inserting the
    data at the beginning, you ensure that the app loads the data into memory only
    once and does not repeat this process every time a user interacts with the dashboard.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用的开始阶段读取和准备数据总是一个好的做法，因为读取数据可能是一个消耗内存的任务；通过在开始时插入数据，你可以确保应用只会将数据加载到内存中一次，而不会在每次用户与仪表盘交互时重复此过程。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Layout and Styling</samp>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">布局和样式</samp>
- en: The next step is to manage the layout and styling of the app components, such
    as the title, graph, and dropdown menus. We’ll learn more about the components
    in “Dash Components” later in this chapter; here we’ll just focus on the layout
    section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是管理应用组件的布局和样式，比如标题、图表和下拉菜单。我们将在本章稍后的“Dash 组件”部分进一步了解这些组件；在这里，我们将重点关注布局部分。
- en: In a Dash app, the *layout* refers to the alignment of the components within
    the app. The *style* refers to how the elements look, such as the color, size,
    spacing, and other properties (known in Dash as *props*). Styling the app allows
    for a more customized, professional presentation. Without styling, you could end
    up with an app like the one shown in [Figure 4-4](chapter4.xhtml#fig4-4), where
    the title is not centered, the dropdown field stretches over the whole page, and
    there is no space between the link and the dropdown above it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dash 应用中，*布局* 指的是组件在应用中的排列方式。*样式* 指的是元素的外观，比如颜色、大小、间距等属性（在 Dash 中被称为 *props*）。对应用进行样式设计可以实现更加定制化和专业化的展示。如果没有样式设置，你可能会得到像
    [图 4-4](chapter4.xhtml#fig4-4) 中展示的那样的应用，其中标题没有居中，下拉框字段覆盖了整个页面，并且链接与其上方的下拉框之间没有间距。
- en: '![](../images/Figure4-4.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-4: The Twitter Likes
    Analysis app without proper layout and styling</samp>'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-4：没有适当布局和样式的 Twitter 点赞分析应用</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Alignment</samp>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">对齐</samp>
- en: 'Dash apps are web-based, so they use the standard language of web pages: HTML
    (HyperText Markup Language). Luckily, Dash includes the Dash HTML Components module,
    which converts Python to HTML, meaning we can use Python to write our HTML.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 应用是基于 Web 的，因此它使用网页的标准语言：HTML（超文本标记语言）。幸运的是，Dash 包含了 Dash HTML 组件模块，它将
    Python 转换为 HTML，这意味着我们可以使用 Python 来编写 HTML。
- en: One of the most essential components of HTML is the <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>,
    short for *division*, which is simply a container for other elements and a way
    to group elements together. Every component we use in a Dash app will be contained
    inside a <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>, and a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> can contain multiple components.
    We build the <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>, then style
    it to tell the web browser exactly where to position it and how much space it
    should take up.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 最基本的组件之一是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>，即 *division*（区块）的缩写，它只是一个用于容纳其他元素的容器，并且是将元素分组的一种方式。我们在
    Dash 应用中使用的每个组件都将被包含在一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    中，且一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 可以包含多个组件。我们构建 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>，然后对其进行样式设置，以告诉网页浏览器该组件应该放置在哪里，以及应该占据多少空间。
- en: Say we’re creating a dashboard app with three dropdown menus, represented by
    the keyword <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>, as
    in [Listing 4-3](chapter4.xhtml#List4-3).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在创建一个包含三个下拉菜单的仪表盘应用，下拉菜单由关键字 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    表示，如 [清单 4-3](chapter4.xhtml#List4-3) 中所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div([</samp>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-3: Example Div code
    (not part of the main app)</samp>'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-3：示例 Div 代码（非主应用部分）</samp>
- en: The line <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp> creates
    a layout for this Dash app. Everything related to the layout must be placed within
    <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>. We then create
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> that contains three
    dropdown menus.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行 <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp> 为这个 Dash
    应用创建了一个布局。所有与布局相关的内容都必须放在 <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>
    中。然后，我们创建了一个包含三个下拉菜单的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>。
- en: A <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> by default will take
    up the full width of the parent container, meaning it’s assumed to be one big
    cell that takes up the width of the page. As it is, the first <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    will appear in the top left and fill the whole page from left to right. The second
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> will appear right
    below the first <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    and fill the whole width of the page as well, and so on with the third <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>.
    In other words, each <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    will take up the full width of the page and force neighboring elements onto a
    new line.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 会占据父容器的整个宽度，这意味着它被认为是一个占满整个页面宽度的大单元格。这样，第一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 会出现在左上角，并从左到右填满整个页面。第二个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 会出现在第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    的正下方，并同样占满整个页面的宽度，第三个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    依此类推。换句话说，每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 都会占据页面的整个宽度，并将相邻的元素强制移到新的一行。
- en: To best control how much space a <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    is allocated, we should define the web page as a grid of rows and columns and
    place each <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> within a specific
    cell inside that grid. We can quickly define rows and columns using a premade
    CSS stylesheet. CSS (Cascading Style Sheets) is another web language used to define
    how a page should be displayed. We put the stylesheet in an external file or call
    one from an online directory into our app. We’re using a stylesheet from [*https://<wbr>codepen<wbr>.io*](https://codepen.io).
    Written by Chris Parmer, the creator of Plotly Dash, the stylesheet is comprehensive
    and suitable to use for a basic Dash app. In [Listing 4-4](chapter4.xhtml#List4-4),
    we import the CSS. We also tell *twitter_app.py* to grab the CSS stylesheet from
    the web and incorporate it into the app, and we instantiate our app with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Dash</samp>.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最好地控制一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 被分配的空间，我们应该将网页定义为一个由行和列组成的网格，并将每个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 放置在网格中的特定单元格内。我们可以使用预制的
    CSS 样式表快速定义行和列。CSS（层叠样式表）是另一种用于定义页面如何显示的网页语言。我们将样式表放在外部文件中，或从在线目录中调用一个样式表到我们的应用程序中。我们使用的是来自
    [*https://<wbr>codepen<wbr>.io*](https://codepen.io) 的样式表。该样式表由 Plotly Dash 的创始人
    Chris Parmer 编写，内容全面，适合用于基本的 Dash 应用程序。在 [Listing 4-4](chapter4.xhtml#List4-4)
    中，我们导入了 CSS。我们还告诉 *twitter_app.py* 从网络获取 CSS 样式表并将其集成到应用程序中，然后用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash</samp>
    实例化我们的应用程序。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">stylesheets = ['</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://codepen.io/chriddyp/pen/bWLwgP.css']</samp>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">stylesheets = ['</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://codepen.io/chriddyp/pen/bWLwgP.css']</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=stylesheets)</samp>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=stylesheets)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-4: Importing a stylesheet
    into</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-4：将样式表导入</samp> <samp
    class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: Our CSS stylesheet describes the width and height of the columns and rows on
    the page using CSS classes. We just need to refer to these classes within our
    Dash code to place the <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    content in specific cells inside the grid.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 CSS 样式表使用 CSS 类描述页面上列和行的宽度和高度。我们只需要在 Dash 代码中引用这些类，就能将 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    内容放入网格中的特定单元格。
- en: First, we must assign the rows because the columns should be wrapped by rows.
    To do so, we set a string value <samp class="SANS_TheSansMonoCd_W5Regular_11">"row"</samp>
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>. Let’s build
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> example in [Listing
    4-3](chapter4.xhtml#List4-3), assuming this code has imported the custom stylesheet;
    the new code is in bold (see [Listing 4-5](chapter4.xhtml#List4-5)).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须分配行，因为列应该由行包裹。为此，我们将字符串值 <samp class="SANS_TheSansMonoCd_W5Regular_11">"row"</samp>
    设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>。让我们基于 [Listing
    4-3](chapter4.xhtml#List4-3) 中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    示例进行扩展，假设此代码已导入自定义样式表；新代码部分已加粗（参见 [Listing 4-5](chapter4.xhtml#List4-5)）。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div([</samp>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown()),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="row"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="row"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-5: Example Div code
    with className</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">(not part
    of the main app)</samp>'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-5: 带有 className 的示例
    Div 代码</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">(不是应用程序的主要部分)</samp>'
- en: Here we assign one row to the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    that houses all three dropdowns, so all these dropdowns will be displayed in the
    same row on the page ([Figure 4-5](chapter4.xhtml#fig4-5)). <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    is a prop that can be assigned classes from a CSS stylesheet to tell Dash how
    to style an element. Here we assign it the <samp class="SANS_TheSansMonoCd_W5Regular_11">row</samp>
    class, which tells the app that all the components inside this <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    should be on the same row. Every Dash component will have a <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>,
    commonly used to style and define layouts. We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    prop of <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> to describe
    the row and column layout of each <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为包含所有三个下拉框的 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    分配了一行，因此所有这些下拉框将显示在页面的同一行中（[Figure 4-5](chapter4.xhtml#fig4-5)）。<samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    是一个可以从 CSS 样式表分配类的属性，用于告诉 Dash 如何样式化元素。在这里，我们为其分配了 <samp class="SANS_TheSansMonoCd_W5Regular_11">row</samp>
    类，这告诉应用程序该 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 中的所有组件应该位于同一行中。每个
    Dash 组件都有一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>，通常用于样式化和定义布局。我们使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    属性来描述每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 的行和列布局。
- en: After defining the row, we need to define the columns’ widths so that Dash knows
    how many columns of space to allocate to each component within that row. We do
    this for each <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> contained
    in the row, as shown in bold in [Listing 4-6](chapter4.xhtml#List4-6).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 定义行之后，我们需要定义列的宽度，以便 Dash 知道在该行中为每个组件分配多少列空间。我们为行中包含的每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    执行此操作，如 [Listing 4-6](chapter4.xhtml#List4-6) 中加粗部分所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div([</samp>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown(),</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="four columns"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown(),</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="four columns"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown(),</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="four columns"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown(),</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="four columns"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown(),</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="four columns"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(dcc.Dropdown(),</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="four columns"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">], className=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"row")</samp>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">], className=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"row")</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-6: Setting the column
    width (not part of the main app)</samp>'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单4-6：设置列宽（不是主应用的一部分）</samp>
- en: We set the number of columns of space each <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    component should fill with a string value set to <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    and formatted like <samp class="SANS_TheSansMonoCd_W5Regular_11">"one column"</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">"two columns"</samp> and so on.
    Most web pages will have a maximum of 12 columns (and a potentially unlimited
    number of rows), meaning the sum of the components’ column widths must never surpass
    12, so here we set them to fill 4 columns each. Note that we don’t have to fill
    all 12 columns.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 组件设置它应占用的列数空间，通过设置
    <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 为字符串值，并格式化为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"one column"</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">"two
    columns"</samp> 等等。大多数网页的列数最多为12列（且行数可能是无限的），这意味着组件的列宽总和不能超过12，所以我们在这里将它们设置为每个占4列。请注意，我们不需要填满所有12列。
- en: '[Figure 4-5](chapter4.xhtml#fig4-5) shows how this simple page would be displayed.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-5](chapter4.xhtml#fig4-5) 显示了这个简单页面的显示方式。'
- en: '![](../images/Figure4-5.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-5: Demo of three dropdowns
    on one row</samp>'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图4-5：一行三个下拉框的演示</samp>
- en: With all this in mind, let’s have a look at [Listing 4-7](chapter4.xhtml#List4-7),
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> section of our
    *twitter_app.py* file, which has fewer than 12 columns.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些，让我们看看[清单4-7](chapter4.xhtml#List4-7)，我们*twitter_app.py* 文件中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    部分，它包含不到12列。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        dcc.Dropdown(</samp>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        dcc.Dropdown(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           id="my-dropdown",</samp>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           id="my-dropdown",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           multi=True,</samp>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           multi=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           options=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[</samp>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           options=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">              {"label": x, "value":
    x}</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">              {"label": x, "value":
    x}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              for x in sorted(df["name"].unique())</samp>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              for x in sorted(df["name"].unique())</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           ],</samp>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">        value=["taylorswift13",
    "cristiano", "jtimberlake"],</samp>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">        value=["taylorswift13",
    "cristiano", "jtimberlake"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ),</samp>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="three columns",</samp>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="three columns",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        html.A(</samp>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        html.A(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           id="my-link",</samp>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           id="my-link",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           children="Click here
    to Visit Twitter",</samp>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           children="点击这里访问 Twitter",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           href="</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">https://twitter.com/explore",</samp>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           href="</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">https://twitter.com/explore",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           target="_blank",</samp>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           target="_blank",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ),</samp>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="two columns",</samp>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="two columns",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    ),</samp>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="row",</samp>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="row",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-7: The Dropdown</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">section of</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-7：Dropdown</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">部分</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: 'We see that the row contains two <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>s:
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> that offers multiple
    celebrities to choose from ❶ and a link for the user to click ❷. Those two <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>s have the sum of just five
    columns, meaning they’re left-aligned on the page, as shown in [Figure 4-6](chapter4.xhtml#fig4-6).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这一行包含两个<samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>：一个提供多个名人选择的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> ❶ 和一个用户点击的链接 ❷。这两个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>的列数总和为五列，意味着它们在页面上是左对齐的，如[图
    4-6](chapter4.xhtml#fig4-6)所示。
- en: '![](../images/Figure4-6.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-6: Components that
    are five columns wide</samp>'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-6：宽度为五列的组件</samp>
- en: Note that some stylesheets, including the one we’re working with here, require
    us to create the parent <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    first and assign a row to it. Then, within the children of the parent <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>,
    we define the column width of each inner <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些样式表，包括我们正在使用的这个样式表，要求我们首先创建父级的<samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>并为其指定一个行（row）。然后，在父级<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>的子元素中，我们定义每个内部<samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>的列宽。
- en: '<samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Styling: Embellishing
    Your App</samp>'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">样式：美化你的应用</samp>
- en: The styling is what gives life to the app. We can add color, change the font
    and size of the text, underline text, and much more. There are two main ways to
    alter the style of the app. The first is to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    prop inside the Dash HTML component. This allows the user to specify CSS styling
    declarations that will be applied directly to the component.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 样式是赋予应用程序生命的元素。我们可以添加颜色、改变文本的字体和大小、加下划线，等等。改变应用程序样式的主要方式有两种：第一种是在 Dash HTML
    组件中使用<samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>属性。这允许用户指定将直接应用于该组件的CSS样式声明。
- en: The second method is to refer to a CSS stylesheet, like we did to create rows
    and columns. We’ll show you how to integrate the additional stylesheet *mystyles.css*
    into the app; if you downloaded the files as described in “Setting Up the Project”
    earlier in this chapter, this should be in your *assets* folder. Let’s first look
    at how to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp> prop
    to alter the app.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是引用一个 CSS 样式表，类似于我们创建行和列的方式。我们将向你展示如何将额外的样式表 *mystyles.css* 集成到应用中；如果你按照本章前面“设置项目”的说明下载了文件，它应该位于你的
    *assets* 文件夹中。我们首先来看一下如何使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    属性来修改应用。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using the style Prop</samp>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">使用 style 属性</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp> prop expects
    a Python dictionary, with keys that specify what aspect we want to alter and values
    that set the style. In our *twitter_app.py* file, we’ll change the text color
    of the link to red by defining the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    prop within the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp> component
    used for adding URL links, as shown in [Listing 4-8](chapter4.xhtml#List4-8).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp> 属性期望一个 Python 字典，其中的键指定我们想要修改的方面，值设置样式。在我们的
    *twitter_app.py* 文件中，我们将通过在用于添加 URL 链接的 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp>
    组件中定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp> 属性，将链接的文本颜色修改为红色，正如在
    [列表 4-8](chapter4.xhtml#List4-8) 中所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.A(id="my-link", children="Click
    here to Visit Twitter",</samp>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.A(id="my-link", children="点击这里访问
    Twitter",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      href="</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://twitter.com/explore",</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">target="_blank",</samp>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      href="</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://twitter.com/explore",</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">target="_blank",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶   <samp class="SANS_TheSansMonoCd_W5Regular_11">style={"color":
    "red"}),</samp>'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶   <samp class="SANS_TheSansMonoCd_W5Regular_11">style={"color":
    "red"}),</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="two columns")</samp>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="two columns")</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-8: Styling HTML elements
    of</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-8：为</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">中的 HTML 元素设置样式</samp>
- en: At ❶ we assign a dictionary to the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    prop, where the key is <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>
    and the value is <samp class="SANS_TheSansMonoCd_W5Regular_11">red</samp>. This
    tells the browser to render this link with red text.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ❶ 处，我们将一个字典赋值给 <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    属性，其中键为 <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>，值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">red</samp>。这告诉浏览器将该链接的文本呈现为红色。
- en: 'Now we’ll add a yellow background color to the same link by adding another
    key-value pair to the dictionary:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过向字典中添加另一个键值对，为同一个链接添加黄色背景色：
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">style={"color": "red",</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">"backgroundColor": "yellow"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp>'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">style={"color": "red",</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">"backgroundColor": "yellow"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp>'
- en: Notice that the dictionary key is a camelCased string. In Dash, the keys in
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp> dictionary should
    always be camelCased.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，字典的键是驼峰式命名的字符串。在 Dash 中，<samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    字典中的键应该始终使用驼峰式命名。
- en: 'Lastly, we’ll change the link’s font size to 40 pixels:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将把链接的字体大小修改为 40 像素：
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">style={"color": "red", "backgroundColor":
    "yellow",</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">"fontSize": "40px"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp>'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">style={"color": "red", "backgroundColor":
    "yellow",</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">"fontSize": "40px"</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp>'
- en: A beautiful thing about Dash is that styling is not limited to HTML components;
    we can also style the Core components, such as the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>.
    For example, to change the text color of the dropdown options to green, we add
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp> prop within <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp>, as shown in [Listing
    4-9](chapter4.xhtml#List4-9).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 的一个美妙之处在于，样式不仅限于 HTML 组件；我们还可以为核心组件添加样式，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>。例如，要将下拉选项的文本颜色更改为绿色，我们需要在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp> 中添加 <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    属性，正如 [清单 4-9](chapter4.xhtml#List4-9) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dcc.Dropdown(id="my-dropdown",
    multi=True,</samp>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dcc.Dropdown(id="my-dropdown",
    multi=True,</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           options=[{"label":
    x, "value": x}</samp>'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           options=[{"label":
    x, "value": x}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 for x in sorted(df["name"].unique())],</samp>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 for x in sorted(df["name"].unique())],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           value=["taylorswift13",
    "cristiano", "jtimberlake"],</samp>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           value=["taylorswift13",
    "cristiano", "jtimberlake"],</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">style={"color":
    "green"}</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">style={"color":
    "green"}</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="three columns"),</samp>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="three columns"),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-9: Styling Core components
    in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-9：在</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">中样式化核心组件</samp>
- en: The dropdown options shown in the bottom-left corner of [Figure 4-7](chapter4.xhtml#fig4-7)
    will now be green instead of black.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 4-7](chapter4.xhtml#fig4-7) 左下角所示，下拉选项现在将显示为绿色，而不是黑色。
- en: '![](../images/Figure4-7.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-7: Dropdown options
    that appear in green when run on your computer</samp>'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-7：运行在您计算机上的下拉选项，显示为绿色</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Using a Stylesheet</samp>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">使用样式表</samp>
- en: The second way to style app components is to define styles through elements
    or classes. Typically, we use this method when a lot of code is needed for the
    styling. To reduce the amount of code present in the app itself, we use styling
    code in an external CSS stylesheet. CSS stylesheets are also reusable; you can
    define a particular class once and apply it to multiple components.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 样式化应用组件的第二种方法是通过元素或类定义样式。通常，当样式需要大量代码时，我们会使用这种方法。为了减少应用中样式代码的数量，我们将样式代码放在外部的
    CSS 样式表中。CSS 样式表也是可重用的；您可以定义一个特定的类，并将其应用于多个组件。
- en: 'The CSS stylesheet we’ll use is *mystyles.css*, and it should already be in
    the *assets* folder you downloaded with the book’s resources. Open the CSS stylesheet
    inside PyCharm or your preferred text editor by double-clicking it, and you should
    see these lines of code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的 CSS 样式表是 *mystyles.css*，它应该已经在您与本书资源一起下载的 *assets* 文件夹中。通过双击在 PyCharm
    或您首选的文本编辑器中打开该 CSS 样式表，您应该会看到以下代码：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h1 {font-size: 8.6rem; line-height:
    1.35; letter-spacing: -.08rem;</samp>'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h1 {font-size: 8.6rem; line-height:
    1.35; letter-spacing: -.08rem;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">margin-bottom: 1.2rem; margin-top:
    1.2rem;}</samp>'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">margin-bottom: 1.2rem; margin-top:
    1.2rem;}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp> is comment syntax,
    so to enable the styling, delete the <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp> symbols below and
    above the CSS code. Here <samp class="SANS_TheSansMonoCd_W5Regular_11">h1</samp>
    is the *selector*, which specifies the element we want to apply the subsequent
    styles to; in this case, it’s all <samp class="SANS_TheSansMonoCd_W5Regular_11">h1</samp>
    elements. Inside the curly brackets we declare properties and property values
    that will set various styles inside the app. In this example, we set the element’s
    font size to 8.6, the line height to 1.35, the spacing between letters to –0.08,
    and the top and bottom margins to 1.2.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp> 是注释语法，因此，要启用样式，删除 CSS
    代码上下的 <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
    符号。在这里，<samp class="SANS_TheSansMonoCd_W5Regular_11">h1</samp> 是 *选择器*，它指定我们要应用样式的元素；在这种情况下，它是所有的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">h1</samp> 元素。在大括号内部，我们声明属性和属性值，这些属性将设置应用内的各种样式。在这个例子中，我们将元素的字体大小设置为
    8.6，行高设置为 1.35，字母间距设置为 -0.08，上下边距设置为 1.2。
- en: '[Listing 4-10](chapter4.xhtml#List4-10) shows how the <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    heading component in our app uses this CSS stylesheet.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 4-10](chapter4.xhtml#List4-10)展示了我们应用中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    标题组件是如何使用这个 CSS 样式表的。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(html.H1("Twitter Likes
    Analysis of Famous People",</samp>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(html.H1("Twitter 名人点赞分析",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                 style={"textAlign":
    "center"}),</samp>'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                 style={"textAlign":
    "center"}),</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         className="row"),</samp>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         className="row"),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-10: The html.H1 component
    in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-10：在</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
    中的 html.H1 组件
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp> through <samp
    class="SANS_TheSansMonoCd_W5Regular_11">html.H6</samp> components are used to
    define headings, with <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    representing the highest heading level and <samp class="SANS_TheSansMonoCd_W5Regular_11">H6</samp>
    representing the lowest heading level. [Figure 4-8](chapter4.xhtml#fig4-8) shows
    how this header styling should look.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp> 到 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H6</samp>
    组件用于定义标题，其中 <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp> 代表最高级别的标题，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">H6</samp> 代表最低级别的标题。[图 4-8](chapter4.xhtml#fig4-8)
    展示了这种标题样式的效果。
- en: '![](../images/Figure4-8.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-8: App title styled
    with CSS</samp>'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-8：使用 CSS 样式的应用标题</samp>
- en: As you can see if you compare [Figure 4-8](chapter4.xhtml#fig4-8) to [Figure
    4-6](chapter4.xhtml#fig4-6), the result is a much larger font size for the app’s
    title, with more top and bottom margin space around the title and less space between
    the letters. If your app’s title did not change in size, restart your app to see
    the result.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，如果将 [图 4-8](chapter4.xhtml#fig4-8) 与 [图 4-6](chapter4.xhtml#fig4-6) 进行对比，你会发现应用标题的字体大小变大了，标题上下边距增多，字母间距减少。如果应用的标题没有改变大小，请重启应用以查看效果。
- en: 'If you’d like to revert back to a smaller font size for the title, simply comment
    out the CSS code by reinserting the <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp> symbols, as such:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将标题的字体大小恢复到较小的尺寸，只需通过重新插入 <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp> 符号来注释掉 CSS 代码，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">/*</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h1 {font-size: 8.6rem; line-height:
    1.35; letter-spacing: -.08rem;</samp>'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h1 {font-size: 8.6rem; line-height:
    1.35; letter-spacing: -.08rem;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">margin-bottom: 1.2rem; margin-top:
    1.2rem;}</samp>'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">margin-bottom: 1.2rem; margin-top:
    1.2rem;}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
- en: You have learned how to manipulate the style and layout of your app with pure
    Python. This is just the beginning, though. In [Chapter 5](chapter5.xhtml), we
    will dive into dash-bootstrap-components, which will make the layout design and
    styling of the dashboard app even easier and more varied.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何通过纯 Python 操作应用程序的样式和布局。然而，这仅仅是开始。在[第 5 章](chapter5.xhtml)中，我们将深入探讨
    dash-bootstrap-components，它将使仪表板应用程序的布局设计和样式变得更加简单和多样化。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Components</samp>
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 组件</samp>
- en: Here we’ll provide an overview of some common components in Dash, provided by
    the dash-html-components and dash-core-components libraries. There are many other
    component libraries, and you can even write your own! But dash-html-components
    and dash-core-components contain most of the basic functionality we need. The
    HTML components are generally for composing the layout of the web page and include
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Form</samp>,
    among many others. The Core components—such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Checklist</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    and many more—are for creating an interactive experience. All HTML and Core components
    have props that add to their functionality. For a full list of these props and
    their components, visit the Dash documentation on HTML and Core components at
    [*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/dash<wbr>-core<wbr>-components*](https://dash.plotly.com/dash-core-components).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将概述 Dash 中一些常用的组件，这些组件由 dash-html-components 和 dash-core-components 库提供。还有许多其他组件库，甚至可以编写自己的组件！但是
    dash-html-components 和 dash-core-components 包含了我们所需的大部分基本功能。HTML 组件通常用于构建网页布局，包括
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">H1</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Form</samp>
    等组件。Core 组件——如 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Checklist</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    等——用于创建交互式体验。所有 HTML 和 Core 组件都有属性，可以增强其功能。有关这些属性及其组件的完整列表，请访问 Dash 文档中有关 HTML
    和 Core 组件的页面：[*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/dash<wbr>-core<wbr>-components*](https://dash.plotly.com/dash-core-components).
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">HTML Components</samp>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">HTML 组件</samp>
- en: Dash HTML components are written in Python and are automatically converted to
    HTML, so there’s no need to become an expert on HTML or CSS to use Dash apps.
    The following line of code in Python
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Dash HTML 组件是用 Python 编写的，并会自动转换为 HTML，因此使用 Dash 应用程序时无需成为 HTML 或 CSS 的专家。以下这行
    Python 代码
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"><h1> Twitter Likes Analysis of
    Famous People </h1></samp>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"><h1> 名人推特点赞分析 </h1></samp>
- en: 'is roughly equivalent to the following line of HTML that is read by a web browser:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 大致等同于以下这行由网页浏览器读取的 HTML：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1("Twitter Likes Analysis
    of Famous People")</samp>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1("名人推特点赞分析")</samp>
- en: 'Writing a complete dashboard app is now possible in pure Python: Python forever!'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以用纯 Python 编写完整的仪表板应用程序：Python 永远！
- en: 'To create an HTML component, you use dot notation between the <samp class="SANS_TheSansMonoCd_W5Regular_11">html</samp>
    keyword and the component name. For example, for a <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    component you would use <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>,
    as we saw earlier. We also saw two additional HTML components: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp>,
    which creates a top-level heading, and <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp>,
    which creates a hyperlink. Let’s take a closer look at the use of <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp>
    to represent the title of the page, with the title itself written as a string,
    like so:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 HTML 组件，你需要使用点符号（dot notation）来连接 <samp class="SANS_TheSansMonoCd_W5Regular_11">html</samp>
    关键字和组件名称。例如，对于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 组件，你会使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>，正如我们之前所见。我们还看到了两个额外的
    HTML 组件：<samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp>，它创建一个顶级标题，和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp>，它创建一个超链接。让我们更仔细地看看如何使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp> 来表示页面的标题，标题本身以字符串的形式编写，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1("Twitter Likes Analysis
    of Famous People")</samp>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1("Twitter 喜欢分析：名人")</samp>
- en: 'This assigns the string to the <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop, which is usually the first positional argument of any component that accepts
    children. <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>, in this
    context, is a prop that places a component or element (like a text label) within
    another component. Written in full, the previous line looks like this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这将字符串赋值给 <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp> 属性，这通常是接受子组件的任何组件的第一个位置参数。在这个上下文中，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">children</samp> 是一个属性，它将一个组件或元素（例如文本标签）放置在另一个组件内。完整地写出，前一行看起来像这样：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children="Twitter Likes
    Analysis of Famous People")</samp>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children="Twitter 喜欢分析：名人")</samp>
- en: 'In the first three examples of the following code, the <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop adds text to the page. In the last example, with <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp> prop adds the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp> component to the
    page, which has text as well. The <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop can take an integer, a string, a Dash component, or a list of any of these.
    All these examples are possible:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码的前三个示例中，<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp> 属性向页面添加文本。在最后一个示例中，使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp> 时，<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    属性将 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp> 组件添加到页面中，该组件也包含文本。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">children</samp> 属性可以接受整数、字符串、Dash 组件或这些的列表。所有这些示例都是可能的：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children=2),</samp>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children=2),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children="Twitter Likes
    Analysis of Famous People"),</samp>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children=["Twitter 喜欢分析：名人"]),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children=["Twitter Likes
    Analysis of Famous People"]),</samp>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1(children=["Twitter 喜欢分析：名人"]),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[</samp>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1("Twitter Likes Analysis
    of Famous People"),</samp>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1("Twitter 喜欢分析：名人"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H2("Twitter Likes Analysis
    of Famous People")</samp>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H2("Twitter 喜欢分析：名人")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp> component creates
    an <samp class="SANS_TheSansMonoCd_W5Regular_11"><a></samp> HTML5 element, which
    is used to create hyperlinks. In this component, shown in [Listing 4-11](chapter4.xhtml#List4-11),
    we use four props: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">children</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">target</samp>.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp> 组件创建了一个 <samp class="SANS_TheSansMonoCd_W5Regular_11"><a></samp>
    HTML5 元素，用于创建超链接。在此组件中，如 [清单 4-11](chapter4.xhtml#List4-11) 所示，我们使用了四个属性：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">href</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">target</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A(id="my-link", children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Click here to Visit Twitter",</samp>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A(id="my-link", children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"点击这里访问 Twitter",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   href="</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://twitter.com/explore",</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">target="_blank")</samp>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   href="</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://twitter.com/explore",</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">target="_blank")</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-11: The HTML link
    component in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-11：HTML 链接组件在</samp> <samp
    class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: 'The value we assign to <samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp>
    is the full link destination, where the user will end up after clicking the link.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">target</samp> prop indicates
    where the link will open: if its assigned value is <samp class="SANS_TheSansMonoCd_W5Regular_11">_self</samp>,
    the link will open in the same tab of the browser the user is in; if its assigned
    value is <samp class="SANS_TheSansMonoCd_W5Regular_11">_blank</samp>, the link
    will open in a new browser tab. The <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop defines the content of the component, which here is a string value representing
    the link’s text that the user sees on the page.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们赋值给 <samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp> 的值是完整的链接目标地址，用户点击链接后将跳转到该位置。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">target</samp> 属性指示链接将在何处打开：如果其赋值为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">_self</samp>，链接将在当前浏览器标签页中打开；如果赋值为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">_blank</samp>，链接将在新的浏览器标签页中打开。<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    属性定义了组件的内容，在这里是一个表示链接文本的字符串，用户在页面上看到的就是这些文本。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop is important
    because Dash components use <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    to identify and interact with each other, which gives the dashboard app its interactive
    capabilities. We’ll go over this in more detail in “Callback Decorator” later
    in this chapter. For now, just note that the value assigned to <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    must be a unique string so that it can be used to identify the component.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 属性非常重要，因为 Dash 组件使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 来相互识别和交互，这赋予了仪表板应用其交互能力。稍后在本章的“回调装饰器”部分，我们将详细介绍这一点。目前，只需注意，赋值给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 的值必须是唯一的字符串，以便用于识别该组件。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Core Components</samp>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">核心组件</samp>
- en: 'The Dash Core components are prebuilt components from the Dash library that
    allow the user to interact with the app in an intuitive way. In this app we use
    two Core components: <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>. To build or
    access a particular Core component, we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>
    keyword and the dot notation before the component name, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp>.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 核心组件是 Dash 库中的预构建组件，允许用户以直观的方式与应用程序进行交互。在这个应用程序中，我们使用了两个核心组件：<samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>。要构建或访问特定的核心组件，我们使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp> 关键字并使用点号语法来指定组件名称，例如
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp>。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">The Graph Component</samp>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Graph 组件</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component allows
    you to incorporate data visualizations into your app in the form of plots, charts,
    and graphs written with Plotly. It’s one of the most popular of the Core components,
    and you’ll likely see it in every analytic dashboard app.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件允许你将数据可视化图表、图形和图像以
    Plotly 的形式嵌入到你的应用中。它是核心组件中最受欢迎的之一，你很可能会在每个分析仪表板应用中看到它。
- en: 'A <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component has
    two main props: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>. Here’s the template for
    defining a <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件有两个主要的属性：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>。以下是定义
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件的模板：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="line-chart", figure={})</samp>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="line-chart", figure={})</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop gives the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component a unique ID. The
    <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> prop is the placeholder
    for the Plotly chart. Once a Plotly chart is created, we would assign it to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> prop in place of the
    empty dictionary. For example, in our app we create a Plotly line chart with the
    line shown in [Listing 4-12](chapter4.xhtml#List4-12).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 属性为 <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>
    组件提供了一个唯一的 ID。<samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> 属性是
    Plotly 图表的占位符。一旦创建了 Plotly 图表，我们会将其分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>
    属性，替代空字典。例如，在我们的应用中，我们使用 [列表 4-12](chapter4.xhtml#List4-12) 中的代码创建了一个 Plotly 线图。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">snip--</samp>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">--</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">省略--</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.line(data_frame=df_filtered,
    x="date_time", y="number_of_likes",</samp>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.line(data_frame=df_filtered,
    x="date_time", y="number_of_likes",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="name", log_y=True)</samp>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="name", log_y=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-12: Creating a Plotly
    chart in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-12：在</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
    中创建 Plotly 图表
- en: We’ll go through Plotly charts in “Plotly Express Line Charts” later in this
    chapter. For now, this line simply describes how the chart should look and assigns
    it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp> object, making
    it a Plotly figure. We can then insert <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    into <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>’s <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>
    prop to display the line chart on the page. [Listing 4-13](chapter4.xhtml#List4-13)
    shows the code from the *twitter_app.py* file that does just that, assigned to
    <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的“Plotly Express 线图”部分详细介绍 Plotly 图表。现在，这一行代码简单描述了图表的外观，并将其分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    对象，从而将其转化为一个 Plotly 图形。然后，我们可以将 <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    插入到 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>
    属性中，以在页面上显示线图。[列表 4-13](chapter4.xhtml#List4-13) 显示了来自 *twitter_app.py* 文件的代码，它就是这样做的，并将图表分配给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(dcc.Graph(id="line-chart",
    figure=fig), className="row")</samp>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(dcc.Graph(id="line-chart",
    figure=fig), className="row")</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-13: Pulling the chart
    into the Graph component in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-13：将图表引入 Graph 组件中，位于</samp>
    <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: We put the <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component
    inside the <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> component
    and assign it to a single row on the page. Once the complete app script is activated,
    the line chart should display on the page.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件放入 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    组件中，并将其分配给页面上的单个行。一旦完整的应用脚本激活，折线图应该会显示在页面上。
- en: For a complete video tutorial on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>
    component and its usage, see the video “All About the Graph Component” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要观看关于 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件及其用法的完整视频教程，请访问视频
    “关于 Graph 组件的一切” 在 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">The Dropdown Component</samp>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Dropdown 组件</samp>
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> component
    allows users to choose options from a dropdown menu to dynamically filter data
    and update graphs. We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    component by providing values for four props: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">multi</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>, as shown in [Listing
    4-14](chapter4.xhtml#List4-14). This menu is shown in [Figure 4-9](chapter4.xhtml#fig4-9).'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 组件允许用户从下拉菜单中选择选项，以动态过滤数据并更新图表。我们通过为四个属性提供值来定义
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 组件：<samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">multi</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>，如 [列表 4-14](chapter4.xhtml#List4-14)
    所示。此菜单显示在 [图 4-9](chapter4.xhtml#fig4-9) 中。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown(id="my-dropdown",
    multi=True,</samp>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown(id="my-dropdown",
    multi=True,</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">              options=[{"label":
    x, "value": x}</samp>'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">              options=[{"label":
    x, "value": x}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 for x in sorted(df["name"].unique())],</samp>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 for x in sorted(df["name"].unique())],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              value=["taylorswift13",
    "cristiano", "jtimberlake"])</samp>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              value=["taylorswift13",
    "cristiano", "jtimberlake"])</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-14: Creating a Dropdown
    component in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 4-14：在</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">中创建一个 Dropdown 组件</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">multi</samp> prop allows us
    to choose whether the user can select multiple values at once or just one value
    at a time. When this prop is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    the app user can select multiple values. When it’s set to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    the app user can select only one value at a time.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">multi</samp> 属性允许我们选择用户是否可以一次选择多个值或一次只能选择一个值。当此属性设置为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> 时，应用用户可以选择多个值。当设置为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">False</samp> 时，应用用户一次只能选择一个值。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp> prop represents
    the values the user can choose from when they click the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>.
    We assign it a list of dictionaries of <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> keys, where each
    dictionary represents one menu option. The <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    is the name the user sees as the option, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    is the actual data read by the app.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp> 属性表示用户在点击 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 时可以选择的值。我们为其分配一个字典列表，每个字典包含
    <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    键，其中每个字典表示一个菜单选项。<samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> 是用户看到的选项名称，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> 是应用程序读取的实际数据。
- en: '![](../images/Figure4-9.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-9: App dropdown options</samp>'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图4-9：应用程序下拉选项</samp>
- en: In [Listing 4-14](chapter4.xhtml#List4-14), we assigned the list of dictionaries
    using list comprehension, a Python shortcut that creates a new list based on values
    of another list (or any other Python iterable). For every unique value in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> column of our pandas
    DataFrame, this line creates a dictionary of <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> keys.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单4-14](chapter4.xhtml#List4-14)中，我们使用列表推导为我们的pandas DataFrame的<samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>列中的每个唯一值创建一个包含<samp
    class="SANS_TheSansMonoCd_W5Regular_11">label</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>键的字典。
- en: 'If instead we only have a few values, it may be easier to write out each dictionary
    instead of using list comprehension. For example, in [Listing 4-15](chapter4.xhtml#List4-15)
    we build a <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> with
    only two values: <samp class="SANS_TheSansMonoCd_W5Regular_11">taylorswift13</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">cristiano</samp>.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只有几个值，可能更容易逐个编写每个字典，而不是使用列表推导。例如，在[清单4-15](chapter4.xhtml#List4-15)中，我们构建了一个仅包含两个值的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>：<samp class="SANS_TheSansMonoCd_W5Regular_11">taylorswift13</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">cristiano</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown(id="my-dropdown",
    multi=True,</samp>
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown(id="my-dropdown",
    multi=True,</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">             options=[{"label":
    "Taylor", "value": "taylorswift13"},</samp>'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">             options=[{"label":
    "Taylor", "value": "taylorswift13"},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                      {"label":
    "Ronaldo", "value": "cristiano"}]</samp>'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                      {"label":
    "Ronaldo", "value": "cristiano"}]</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-15: A Dropdown example
    not in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单4-15：不在</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
    的一个下拉示例
- en: Here we use the values as they appear in the DataFrame so that filtering is
    easier. But we can then choose a human-friendly representation for the <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key to make it more recognizable to the user. When the user clicks on the dropdown,
    they will see the two options *Taylor* and *Ronaldo*, which are read by the app
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">taylorswift13</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">cristiano</samp>, respectively.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用DataFrame中的值，以便更容易进行过滤。但是，我们可以选择一种用户友好的表示方式，将<samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>键使其对用户更易识别。当用户点击下拉框时，他们将看到两个选项*Taylor*和*Ronaldo*，这些选项分别被应用程序读取为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">taylorswift13</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">cristiano</samp>。
- en: 'The last <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> prop
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> (not to be confused
    with the dictionary <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    key), and it consists of the default value the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    will take when the user starts the app. Since we have a multivalue <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>,
    we use an initial value of three strings from the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column of the DataFrame: <samp class="SANS_TheSansMonoCd_W5Regular_11">taylorswift13</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cristiano</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">jtimberlake</samp>.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个<samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>属性是<samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>（不要与字典中的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">value</samp>键混淆），它包含了用户启动应用程序时<samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>将采用的默认值。由于我们有一个多值<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>，我们使用来自DataFrame的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp>列的三个字符串作为初始值：<samp class="SANS_TheSansMonoCd_W5Regular_11">taylorswift13</samp>，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">cristiano</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">jtimberlake</samp>。
- en: These strings correspond to the values generated in the <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    prop in [Listing 4-14](chapter4.xhtml#List4-14). The strings are preloaded, so
    these three values are automatically chosen before the user even clicks the dropdown
    menu. Once the user chooses a different value in the dropdown menu, these values
    change accordingly.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符串对应于在[列表 4-14](chapter4.xhtml#List4-14)中`options`属性生成的值。这些字符串是预加载的，因此在用户点击下拉菜单之前，这三个值会自动被选择。一旦用户在下拉菜单中选择了不同的值，这些值也会相应地变化。
- en: For a complete video tutorial on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    component and its usage, see the video “Dropdown Selector” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 组件及其用法的完整视频教程，请查看视频“Dropdown
    选择器”在[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Callbacks</samp>
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 回调</samp>
- en: A *Dash callback* enables user interactivity within the dashboard app; it is
    the mechanism that connects the Dash components to each other so that performing
    one action causes something else to happen. When the app user selects a dropdown
    value, the figure is updated; when the user clicks a button, the color of the
    app’s title changes or another graph is added to the page. The possible interactions
    between Dash components are infinite, and without callbacks, the app is static
    and the user cannot modify anything.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *Dash 回调* 使用户能够在仪表板应用中进行交互；它是将 Dash 组件彼此连接的机制，以便执行某个操作会导致其他事情发生。当应用用户选择下拉值时，图表会更新；当用户点击按钮时，应用标题的颜色会改变或另一个图表会被添加到页面。Dash
    组件之间的可能交互是无限的，没有回调，应用程序将是静态的，用户无法修改任何内容。
- en: 'The Dash callback has two parts, the callback decorator that identifies the
    relevant components, defined in the layout section:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 回调有两个部分，一个是回调装饰器，用于识别相关组件，该部分在布局部分定义：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback()</samp>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback()</samp>
- en: 'and the callback function that defines how those Dash components should interact:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 和回调函数，它定义了 Dash 组件之间如何交互：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def function_name(y):</samp>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def function_name(y):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return x</samp>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return x</samp>
- en: This simple app only has one callback, though more complicated apps will have
    many.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的应用程序只有一个回调，虽然更复杂的应用程序会有很多个回调。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Decorator</samp>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调装饰器</samp>
- en: A callback decorator registers the callback function with your Dash app, telling
    it when to call the function and how to use the return value of the function to
    update the app. (We discussed decorators in [Chapter 1](chapter1.xhtml).)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 回调装饰器将回调函数注册到你的 Dash 应用中，告诉它何时调用该函数，以及如何使用函数的返回值来更新应用程序。（我们在[第 1 章](chapter1.xhtml)中讨论了装饰器。）
- en: 'The callback decorator should be placed right above the callback function,
    and there must be no space between the decorator and the function. The decorator
    takes two main arguments: <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>, which refer to
    the component that should change (<samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>)
    in response to the user’s action on a different component (<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>).
    For example, the output might be the line chart, which should change depending
    on the user’s input in the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    component, as shown in [Listing 4-16](chapter4.xhtml#List4-16).'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 回调装饰器应该放置在回调函数的正上方，装饰器和函数之间不能有空格。装饰器有两个主要参数：<samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>，它们分别表示在用户对另一个组件进行操作时，应该改变的组件（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>）和用户操作的组件（<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>）。例如，输出可能是折线图，其变化应根据用户在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 组件中的输入而变化，如[列表 4-16](chapter4.xhtml#List4-16)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="line-chart",
    component_property="figure"),</samp>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="line-chart",
    component_property="figure"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [Input(component_id="my-dropdown",
    component_property="value")],</samp>
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [Input(component_id="my-dropdown",
    component_property="value")],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-16: A callback decorator
    from</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-16: 来自</samp> <samp
    class="SANS_Futura_Std_Book_11">twitter_app.py</samp> 的回调装饰器'
- en: 'Both <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> take two arguments: <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>, which should correspond
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of a particular
    Dash component, and <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>,
    which should correspond to a particular prop of that same component. In [Listing
    4-16](chapter4.xhtml#List4-16), the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    for <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> refers to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">my-dropdown Dropdown</samp> we defined
    earlier. The <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>
    refers specifically to the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    prop of <samp class="SANS_TheSansMonoCd_W5Regular_11">my-dropdown</samp>, which
    is the Twitter users’ data to show, initially set to <samp class="SANS_TheSansMonoCd_W5Regular_11">["taylorswift13",
    "cristiano", "jtimberlake"]</samp>, as in [Listing 4-14](chapter4.xhtml#List4-14).'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    都接受两个参数：<samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>，它应该对应于特定
    Dash 组件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>，它应该对应于该组件的特定属性。在
    [Listing 4-16](chapter4.xhtml#List4-16) 中，<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp> 指的是我们之前定义的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">my-dropdown Dropdown</samp>。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> 具体指的是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">my-dropdown</samp> 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    属性，它表示要显示的 Twitter 用户数据，初始值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">["taylorswift13",
    "cristiano", "jtimberlake"]</samp>，如 [Listing 4-14](chapter4.xhtml#List4-14) 中所示。
- en: In the <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> we refer
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> prop of <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>, which we also defined
    earlier in the layout, as shown in [Listing 4-17](chapter4.xhtml#List4-17).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> 中，我们引用了 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>
    属性，我们在布局中也之前定义了它，如 [Listing 4-17](chapter4.xhtml#List4-17) 中所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="line-chart", figure={})</samp>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="line-chart", figure={})</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-17: The Graph component
    within the layout section in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-17: 在</samp> <samp
    class="SANS_Futura_Std_Book_11">twitter_app.py</samp> 中的布局部分的 Graph 组件'
- en: Here the <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> prop is
    currently an empty dictionary, because the callback function will create a line
    chart based on the input and assign it to <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>.
    Let’s dive into the callback function to fully understand how this happens.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，<samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> 属性目前是一个空字典，因为回调函数将根据输入值创建一个折线图并将其分配给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>。让我们深入了解回调函数，全面理解这一过程是如何发生的。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Function</samp>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调函数</samp>
- en: Our app’s callback function, named <samp class="SANS_TheSansMonoCd_W5Regular_11">update_graph()</samp>,
    holds a series of <samp class="SANS_TheSansMonoCd_W5Regular_11">if-else</samp>
    statements that filter the DataFrame <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    and create a line chart depending on the input values chosen. [Listing 4-18](chapter4.xhtml#List4-18)
    shows the callback function in our app.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的回调函数名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">update_graph()</samp>，它包含一系列的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">if-else</samp> 语句，用于筛选 DataFrame
    <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> 并根据选择的输入值创建折线图。[Listing
    4-18](chapter4.xhtml#List4-18) 显示了我们应用中的回调函数。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(chosen_value):</samp>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(chosen_value):</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   print(f"Values chosen by user:
    {chosen_value}")</samp>'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   print(f"用户选择的值: {chosen_value}")</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if len(chosen_value) == 0:</samp>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if len(chosen_value) == 0:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return {}</samp>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return {}</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      else:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     df_filtered = df[df["name"].isin(chosen_value)]</samp>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     df_filtered = df[df["name"].isin(chosen_value)]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     fig = px.line(</samp>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     fig = px.line(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        data_frame=df_filtered,</samp>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        data_frame=df_filtered,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        x="date_time",</samp>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        x="date_time",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        y="number_of_likes",</samp>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        y="number_of_likes",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        color="name",</samp>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        color="name",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        log_y=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True,</samp>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        log_y=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        labels={</samp>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        labels={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "number_of_likes":
    "Likes",</samp>'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "number_of_likes":
    "点赞数",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "date_time": "Date",</samp>'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "date_time": "日期",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "name": "Celebrity",</samp>'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "name": "名人",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        },</samp>
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-18: The callback
    function in</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-18: twitter_app.py 中的回调函数</samp>
    <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
- en: 'We’ll go over the logic here line by line in a moment. First, though, let’s
    discuss what this function achieves. When executed, <samp class="SANS_TheSansMonoCd_W5Regular_11">update_graph()</samp>
    returns an object named <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>,
    which in this case contains the Plotly Express line chart. The object <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    is returned to the component and property we specified in <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    in the callback decorator. As we know, the callback decorator refers to a Dash
    component in the layout. Here, then, <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    is assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp>
    prop of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component
    in the layout section, so the callback is telling the app to display a line chart.
    Here’s what the <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component
    would look like after the callback function <samp class="SANS_TheSansMonoCd_W5Regular_11">update_graph()</samp>
    executes:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会逐行讲解这里的逻辑。但首先，让我们讨论一下这个函数的作用。执行时，<samp class="SANS_TheSansMonoCd_W5Regular_11">update_graph()</samp>
    会返回一个名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp> 的对象，在本例中，它包含了
    Plotly Express 的折线图。对象 <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    被返回到我们在回调装饰器中指定的组件和属性的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    中。正如我们所知道的，回调装饰器引用了布局中的 Dash 组件。这里，<samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    被赋值给布局部分中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> 属性，因此回调函数告诉应用程序显示折线图。以下是回调函数
    <samp class="SANS_TheSansMonoCd_W5Regular_11">update_graph()</samp> 执行后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件的样子：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="line-chart", figure=fig)</samp>
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="line-chart", figure=fig)</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> prop is now
    assigned the object <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp> instead
    of the empty dictionary we saw originally, in [Listing 4-17](chapter4.xhtml#List4-17).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> 属性现在被分配给了对象 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>，而不是我们在[F显示 4-17](chapter4.xhtml#List4-17)中看到的空字典。
- en: We’ll summarize this because this process is extremely important! Once the callback
    function is activated by user input, it returns an object that is tied to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> in the callback decorator.
    Given that the component property represents an actual prop of a component inside
    the app layout, the result is an app that is constantly being updated through
    user interaction.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将总结这一点，因为这个过程非常重要！一旦用户输入激活回调函数，它会返回一个与回调装饰器中<sup><samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp></sup>
    的<sup><samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp></sup>相关联的对象。考虑到组件属性代表应用布局中某个组件的实际属性，结果就是一个通过用户交互不断更新的应用。
- en: For a complete video tutorial on the Dash callback decorator and its usage,
    see the video “The Dash Callback—Input, Output, State, and More” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解Dash回调装饰器及其使用的完整视频教程，请参阅视频“Dash回调——输入、输出、状态等”：[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Activating the Callback</samp>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">激活回调</samp>
- en: To activate the callback, the user must interact with the component specified
    in <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> inside the callback
    decorator. In this app, the component property represents the value of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>, so every time the app
    user chooses a different dropdown value (a Twitter handle), the callback function
    is triggered.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活回调，用户必须与回调装饰器中指定的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    组件进行交互。在这个应用中，组件的属性表示 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    的值，因此每当应用用户选择不同的下拉值（如Twitter账号）时，回调函数就会被触发。
- en: 'If the callback decorator had three <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>s,
    the user would need to supply three arguments to trigger the callback function.
    In our case, the callback decorator has only one <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>;
    therefore, the callback function will take only one argument: <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp>.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果回调装饰器有三个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>，用户需要提供三个参数来触发回调函数。而在我们的例子中，回调装饰器只有一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>；因此，回调函数只需要一个参数：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp>。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">How the Function Works</samp>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">函数如何工作</samp>
- en: Let’s examine [Listing 4-19](chapter4.xhtml#List4-19), which shows what is happening
    inside the app’s callback function.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一下[F显示 4-19](chapter4.xhtml#List4-19)，它展示了应用回调函数内部发生的情况。
- en: ❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(chosen_value):</samp>
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: ❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(chosen_value):</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        print(f"Values chosen
    by user: {chosen_value}")</samp>'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        print(f"用户选择的值：{chosen_value}")</samp>
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">if len(chosen_value) == 0:</samp>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">if len(chosen_value) == 0:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     return {}</samp>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     return {}</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      df_filtered = df[df["name"].isin(chosen_value)]</samp>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      df_filtered = df[df["name"].isin(chosen_value)]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(</samp>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        data_frame=df_filtered,</samp>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        data_frame=df_filtered,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        x="date_time",</samp>
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        x="date_time",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        y="number_of_likes",</samp>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        y="number_of_likes",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        color="name",</samp>
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        color="name",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        log_y=True,</samp>
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        log_y=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        labels={</samp>
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        labels={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "number_of_likes":
    "Likes",</samp>'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "number_of_likes":
    "点赞数",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "date_time": "Date",</samp>'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "date_time": "日期时间",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "name": "Celebrity",</samp>'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           "name": "名人",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        },</samp>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-19: The callback
    function for</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-19: 回调函数用于</samp> <samp
    class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp> argument
    ❶ refers to the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp>,
    which is a list of Twitter usernames. Whenever a user chooses new options, the
    function is activated. The user can choose any number of available celebrities,
    and the number of items inside the <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp>
    list will increase or decrease accordingly. It may be a list of 3 values, 10 values,
    or even no values. We therefore check the length of the <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp>
    list ❷. If it is equal to zero and so is an empty list, the function returns an
    empty dictionary, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    object returned displays an empty graph.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp> 参数 ❶ 指的是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp> 的值，这是一个 Twitter 用户名的列表。每当用户选择新选项时，函数会被激活。用户可以选择任意数量的可用名人，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp> 列表中的项目数量将相应增加或减少。它可能是一个包含
    3 个值、10 个值，甚至没有值的列表。因此，我们检查 <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp>
    列表的长度 ❷。如果它等于零，意味着是一个空列表，函数将返回一个空字典，并且返回的 <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    对象会显示一个空图表。
- en: If the length of the <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp>
    list does not equal zero, in the <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp>
    branch we use pandas to filter the DataFrame to only those rows that contain the
    selected Twitter usernames. The filtered DataFrame is saved to <samp class="SANS_TheSansMonoCd_W5Regular_11">df_filtered</samp>
    and is then used as the data to create the line chart, which is saved as a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">fig</samp> object. The <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    object is returned to display the line chart on the app page.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">chosen_value</samp> 列表的长度不等于零，在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp> 分支中，我们使用 pandas 过滤 DataFrame，只保留包含选定
    Twitter 用户名的行。过滤后的 DataFrame 被保存为 <samp class="SANS_TheSansMonoCd_W5Regular_11">df_filtered</samp>，然后用作创建折线图的数据，该图被保存为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp> 对象。<samp class="SANS_TheSansMonoCd_W5Regular_11">fig</samp>
    对象被返回，用于在应用页面上显示折线图。
- en: 'One important note on these functions: if the original DataFrame is altered
    in any way, you should always make a copy of the original DataFrame, as we did
    when we created <samp class="SANS_TheSansMonoCd_W5Regular_11">df_filtered</samp>.
    The original DataFrame defined at the beginning of the app, in [Listing 4-2](chapter4.xhtml#List4-2),
    is considered a global variable. Global variables should never be altered, because
    doing so affects the variables seen by other users of the app. For example, if
    one user changed the global variable <samp class="SANS_TheSansMonoCd_W5Regular_11">price_values</samp>
    in a financial dashboard app, all users would see these changed prices. This could
    cause significant damage and confusion.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些函数的一个重要提示：如果原始的 DataFrame 被以任何方式修改，你应该始终创建原始 DataFrame 的副本，正如我们在创建<samp
    class="SANS_TheSansMonoCd_W5Regular_11">df_filtered</samp>时所做的那样。应用开始时定义的原始 DataFrame，在[清单
    4-2](chapter4.xhtml#List4-2)中，是被视为全局变量的。全局变量不应被修改，因为修改它会影响到应用中其他用户所看到的变量。例如，如果某个用户在一个财务仪表板应用中修改了全局变量<samp
    class="SANS_TheSansMonoCd_W5Regular_11">price_values</samp>，所有用户都将看到这些变化的价格。这可能会造成严重的损害和混乱。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Diagram</samp>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调图</samp>
- en: Dash has a powerful callback diagram tool that displays the structure of the
    callback and delineates how elements are tied together. You should use this tool
    when defining callbacks, especially when they have multiple <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>s
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>s, where it is
    harder to grasp the callback structure. To open the callback diagram, click the
    blue button in the bottom-right corner of the app page, shown in [Figure 4-10](chapter4.xhtml#fig4-10).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 有一个强大的回调图工具，可以显示回调的结构，并清晰地描述元素之间的联系。在定义回调时，特别是当回调具有多个<samp class="SANS_TheSansMonoCd_W5Regular_11">输入</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">输出</samp>时，使用此工具非常有帮助，因为这时很难掌握回调结构。要打开回调图，请点击应用页面右下角的蓝色按钮，如[图
    4-10](chapter4.xhtml#fig4-10)所示。
- en: '![](../images/Figure4-10.png)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-10: Click the button
    in the bottom-right corner to open the menu.</samp>'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-10：点击右下角的按钮以打开菜单。</samp>
- en: Then click the gray **Callbacks** button, shown in [Figure 4-11](chapter4.xhtml#fig4-11).
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击灰色的**回调**按钮，如[图 4-11](chapter4.xhtml#fig4-11)所示。
- en: '![](../images/Figure4-11.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-11: Click the Callbacks
    button to see the callback diagram.</samp>'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-11：点击回调按钮查看回调图。</samp>
- en: The result should look like [Figure 4-12](chapter4.xhtml#fig4-12).
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应如[图 4-12](chapter4.xhtml#fig4-12)所示。
- en: '![](../images/Figure4-12.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-12: The callback diagram
    for</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-12：回调图展示了</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: The element on the left is the component property of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>.
    The element in the middle describes the number of times the callback has been
    triggered in this session (once, in this case) as well as the time it took for
    the callback to fully execute (614 ms). The element on the right is the component
    property of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>. The
    diagram helps paint a clear picture of how the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    values (<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>) influence
    the line chart’s figure (<samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的元素是<samp class="SANS_TheSansMonoCd_W5Regular_11">输入</samp>的组件属性。中间的元素描述了回调在本次会话中被触发的次数（在本例中为一次），以及回调完全执行所需的时间（614
    毫秒）。右侧的元素是<samp class="SANS_TheSansMonoCd_W5Regular_11">输出</samp>的组件属性。该图帮助清晰地展示了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">下拉</samp>值（<samp class="SANS_TheSansMonoCd_W5Regular_11">输入</samp>）如何影响折线图的图形（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">输出</samp>）。
- en: Go ahead and trigger the callback by changing the <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    celebrity names on the main app page. See how the green element in the middle
    changes? Explore this diagram by clicking the left and right elements; you should
    see extra information within each element.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 继续通过更改主应用页面上的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>
    名人名字来触发回调。你看到中间的绿色元素发生变化了吗？通过点击左侧和右侧的元素来探索这个图表；你应该会看到每个元素中的额外信息。
- en: Make sure to turn debug mode off with <samp class="SANS_TheSansMonoCd_W5Regular_11">debug</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    before you deploy your app to the web in order to turn off the diagram. Otherwise,
    the end user will have access to the diagram as well.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用部署到网络之前，确保通过将 <samp class="SANS_TheSansMonoCd_W5Regular_11">debug</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    关闭调试模式，以便关闭图表。否则，最终用户也可以访问该图表。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express Line Charts</samp>
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express 折线图</samp>
- en: Here we’ll review how to create Plotly graphs. We’ll focus on line charts, since
    that’s what we use in this app, and we’ll review other types of graphs in future
    chapters.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将回顾如何创建 Plotly 图表。我们将专注于折线图，因为这是我们在这个应用中使用的图表类型，其他类型的图表将在未来的章节中回顾。
- en: 'Plotly Express is a high-level interface for creating graphs quickly and intuitively.
    It contains dozens of figures to choose from, ranging from scientific, statistical,
    and financial graphs to 3D charts and maps. Every figure has numerous attributes
    that allow you to customize figures according to users’ needs. Here’s a complete
    list of the attributes available for the Plotly Express line chart, all currently
    set to <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express 是一个用于快速直观创建图表的高级接口。它包含了数十种图表类型供选择，涵盖了从科学、统计、金融图表到 3D 图表和地图等各种图表。每个图表都有许多属性，允许你根据用户的需求自定义图表。以下是适用于
    Plotly Express 折线图的所有属性的完整列表，目前都设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.line(</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">data_frame=None, x</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">=None,
    y=None</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">, line_group=None,
    color=None, line_dash=None, hover_name=None, hover_data=None, custom_data=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, text=None, facet_row=None, facet_col=None,
    facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None, error_x=None,
    error_x_minus=None, error_y=None, error_y_minus=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None,
    animation_frame=None, animation_group=None, category_orders={}, labels={}, orientation=None,
    color_discrete_sequence=None, color_discrete_map={}, line_dash_sequence=None,
    line_dash_map={}, log_x=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">False,
    log_y=False, range_x=None, range_y=None, line_shape=None, render_mode='auto',
    title=None, template=None,width=None, height=None)</samp>
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.line(</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">data_frame=None, x</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">=None,
    y=None</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">, line_group=None,
    color=None, line_dash=None, hover_name=None, hover_data=None, custom_data=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, text=None, facet_row=None, facet_col=None,
    facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None, error_x=None,
    error_x_minus=None, error_y=None, error_y_minus=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None,
    animation_frame=None, animation_group=None, category_orders={}, labels={}, orientation=None,
    color_discrete_sequence=None, color_discrete_map={}, line_dash_sequence=None,
    line_dash_map={}, log_x=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">False,
    log_y=False, range_x=None, range_y=None, line_shape=None, render_mode='auto',
    title=None, template=None,width=None, height=None)</samp>
- en: 'The beautiful thing about Plotly Express is that, in most cases, all you need
    to know to create a graph are the first three attributes: <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>,
    shown in bold in the example. These represent the DataFrame, the column of data
    to use for the x-axis, and the column to use for the y-axis, respectively. Here
    we plot a really simple line chart:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express 的美妙之处在于，在大多数情况下，创建图表所需了解的仅仅是前三个属性：<samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>，在示例中以粗体显示。这些分别表示数据框、用于
    x 轴的数据列和用于 y 轴的数据列。下面是我们绘制的一个非常简单的折线图：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(data_frame=df, x="some_xaxis_data",
    y="some_yaxis_data")</samp>
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(data_frame=df, x="some_xaxis_data",
    y="some_yaxis_data")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.show()</samp>
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.show()</samp>
- en: This creates the most basic line chart, charting the relationship between two
    data columns, giving us something like [Figure 4-13](chapter4.xhtml#fig4-13).
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了最基本的折线图，绘制了两列数据之间的关系，类似于[图 4-13](chapter4.xhtml#fig4-13)。
- en: '![](../images/Figure4-13.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-13: The simplest line
    chart</samp>'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-13：最简单的折线图</samp>
- en: 'The more comfortable you become with Plotly Express, the more attributes you
    will find yourself adding to the figure. For example, to differentiate groups
    of data with color, we add the <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>
    attribute and assign it a column from the hypothetical DataFrame used:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你越来越熟悉Plotly Express，你会发现自己不断向图表添加更多的属性。例如，为了通过颜色区分不同的数据组，我们添加了<samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>属性，并将其分配给假设DataFrame中的一列：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(data_frame=df, x="some_
    xaxis _data", y="some_yaxis_data",</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">color</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">="some_data"</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(data_frame=df, x="some_
    xaxis _data", y="some_yaxis_data",</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">color</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">="some_data"</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: As a result, we would see something like [Figure 4-14](chapter4.xhtml#fig4-14).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们会看到类似于[图 4-14](chapter4.xhtml#fig4-14)的内容。
- en: '![](../images/Figure4-14.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure4-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-14: Adding a color
    attribute to the simple chart</samp>'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-14：向简单图表添加颜色属性</samp>
- en: 'To change the height of the figure, we add the <samp class="SANS_TheSansMonoCd_W5Regular_11">height</samp>
    attribute and assign it a number of pixels:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变图形的高度，我们添加了<samp class="SANS_TheSansMonoCd_W5Regular_11">height</samp>属性，并为其分配了一个像素值：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(data_frame=df, x="some_xaxis_data",
    y='some_yaxis_data',</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">height=300</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">px.line(data_frame=df, x="some_xaxis_data",
    y='some_yaxis_data',</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">height=300</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: Here we make the height of the entire graph 300 pixels.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们将整个图形的高度设置为300像素。
- en: In our Twitter Likes Analysis app, the line chart includes the <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">y</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp> attributes, as
    well as the <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">log_y</samp> attributes. [Listing 4-20](chapter4.xhtml#List4-20)
    shows our Plotly chart code.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Twitter点赞分析应用中，折线图包括了<data_frame>、<samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">y</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>属性，以及<samp
    class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">log_y</samp>属性。[清单
    4-20](chapter4.xhtml#List4-20)展示了我们的Plotly图表代码。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.line(</samp>
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.line(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=df_filtered,</samp>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=df_filtered,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   x="date_time",</samp>
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   x="date_time",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   y=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"number_of_likes",</samp>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   y=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"number_of_likes",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="name",</samp>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="name",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   log_y=True,</samp>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   log_y=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={</samp>
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "number_of_likes": "Likes",</samp>'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "number_of_likes": "Likes",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "date_time": "Date",</samp>'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "date_time": "Date",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "name": "Celebrity",</samp>'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "name": "Celebrity",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 4-20: The Plotly line
    chart for</samp> <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 4-20：Plotly 折线图用于</samp>
    <samp class="SANS_Futura_Std_Book_11">twitter_app.py</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">log_y</samp> attribute tells
    the app to use a logarithmic scale on the y-axis data. Logarithmic scaling is
    recommended when the chart has a few data points that are much larger or smaller
    than the bulk of the data, as it makes for a clearer visualization. We won’t go
    into the details of logarithmic scales here, but try changing the attribute from
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    and then refresh the app to see the updated graph. Which one do you prefer?
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">log_y</samp> 属性告诉应用使用对数刻度来显示 y
    轴数据。当图表中的一些数据点比大部分数据点要大或小得多时，推荐使用对数刻度，因为它可以提供更清晰的可视化。我们不会在这里详细讨论对数刻度，但可以尝试将该属性从
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> 更改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>，然后刷新应用查看更新后的图表。你更喜欢哪一种？
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp> attribute changes
    the axis labels seen by the app users. The three columns used to plot the line
    chart are <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp> (x-axis),
    <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp> (y-axis),
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> (color). These are
    the names of the columns in the pandas DataFrame, and we must maintain their format
    and spelling to match to the right column. With the <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>
    attribute, we change what the user sees on the app page to make it more user friendly
    so that <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp> simply
    becomes <samp class="SANS_TheSansMonoCd_W5Regular_11">Likes</samp>.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`<samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>` 属性更改了应用用户所看到的轴标签。用于绘制折线图的三列是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">date_time</samp>（x轴）、<samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp>（y轴）和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>（颜色）。这些是 pandas DataFrame
    中列的名称，我们必须保持它们的格式和拼写以确保与正确的列匹配。通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>
    属性，我们改变用户在应用页面上看到的内容，使其更加用户友好，*例如* <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp>
    变成了 <samp class="SANS_TheSansMonoCd_W5Regular_11">Likes</samp>。'
- en: Each attribute is described in detail in the Plotly documentation at [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>-api<wbr>-reference*](https://plotly.com/python-api-reference).
    It’s worth spending time reading the descriptions because it will help you understand
    all the ways you can customize the line chart and other types of figures.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属性在 Plotly 文档中都有详细描述，网址为 [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>-api<wbr>-reference*](https://plotly.com/python-api-reference)。花时间阅读这些描述是值得的，因为它将帮助你了解如何自定义折线图和其他类型的图形。
- en: For a complete video tutorial on the Plotly Express line chart with <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp>,
    see the video “Line Plot (Dropdown)” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 有关带有 <samp class="SANS_TheSansMonoCd_W5Regular_11">Dropdown</samp> 的 Plotly
    Express 折线图的完整视频教程，请观看视频“Line Plot (Dropdown)”在 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Dogma_OT_Bold_B_11">TOOL TIPS</samp>
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">工具提示</samp>
- en: <samp class="SANS_Futura_Std_Book_11">There’s one common attribute that we don’t
    use in the app but is common enough that it’s worth mentioning here:</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp><samp class="SANS_Futura_Std_Book_11">,
    which allows you to provide extra information in tool tips that appear when the
    user hovers over particular elements of the graph with the mouse cursor. You place
    the values assigned to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    <samp class="SANS_Futura_Std_Book_11">inside a list or a dictionary.</samp>
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">有一个我们在应用中没有使用，但足够常见值得在这里提到的属性：</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp><samp class="SANS_Futura_Std_Book_11">，它允许你在用户用鼠标悬停在图表的特定元素上时，在工具提示中提供额外的信息。你可以将分配给</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp> <samp class="SANS_Futura_Std_Book_11">的值放在列表或字典中。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">When you use a list, the graph’s hover
    tool tip will include the values in the list. For example, if we use the</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_shares</samp> <samp class="SANS_Futura_Std_Book_11">column
    as the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    <samp class="SANS_Futura_Std_Book_11">list, the hover tool tip will include those
    pieces of data when the user hovers over the lines of our graph. To try this out,
    make the following change and rerun the app:</samp>
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">当你使用列表时，图表的悬停工具提示将包含列表中的值。例如，如果我们使用</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_shares</samp> <samp class="SANS_Futura_Std_Book_11">列作为</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp> <samp class="SANS_Futura_Std_Book_11">列表，悬停工具提示将在用户悬停在图表的线条上时包含这些数据。要尝试此方法，请做出以下更改并重新运行应用：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.line(data_frame=df_filtered,
    x="date_time", y="number_of_likes",</samp>
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.line(data_frame=df_filtered,
    x="date_time", y="number_of_likes",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">color="name",
    hover_data=["number_of_shares"])</samp>
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">color="name",
    hover_data=["number_of_shares"])</samp>
- en: <samp class="SANS_Futura_Std_Book_11">The following figure shows the difference
    in the hover information.</samp>
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">下图展示了悬停信息的区别。</samp>
- en: '![](../images/pg69.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg69.png)'
- en: <samp class="SANS_Futura_Std_Book_Oblique_I_11">Example tool tip with “number
    of shares” included in hover data</samp>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">示例工具提示，包含“分享次数”在悬停数据中</samp>
- en: <samp class="SANS_Futura_Std_Book_11">Make sure to delete the change when you’re
    done.</samp>
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">完成后，请确保删除此更改。</samp>
- en: <samp class="SANS_Futura_Std_Book_11">When you use a dictionary instead of a
    list, the keys are DataFrame columns and the values are Booleans you use to display
    (</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp class="SANS_Futura_Std_Book_11">)
    or not display (</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp><samp
    class="SANS_Futura_Std_Book_11">) the data in the hover tool tip. For example,
    if you add the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp>
    <samp class="SANS_Futura_Std_Book_11">column</samp> <samp class="SANS_Futura_Std_Book_11">as
    the dictionary key and</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    <samp class="SANS_Futura_Std_Book_11">as the dictionary value, the data representing
    the number of likes per celebrity will no longer show in the hover tool tip:</samp>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">当你使用字典而不是列表时，键是数据框（DataFrame）的列，值是布尔值，用于控制是否在悬停工具提示中显示数据（</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp class="SANS_Futura_Std_Book_11">）或不显示（</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">False</samp><samp class="SANS_Futura_Std_Book_11">）。例如，如果你将</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp> <samp class="SANS_Futura_Std_Book_11">列作为字典的键，并将</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_Futura_Std_Book_11">作为字典的值，那么代表每个名人喜欢数量的数据将不再显示在悬停工具提示中：</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data={"number_of_likes":
    False}</samp>'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data={"number_of_likes":
    False}</samp>'
- en: <samp class="SANS_Futura_Std_Book_11">We can also use the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    <samp class="SANS_Futura_Std_Book_11">dictionary to format the hover data seen
    in the tool tip. For example, by default the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp>
    <samp class="SANS_Futura_Std_Book_11">is displayed with the letter “k” to represent
    10,000 (200,000 is written as 200k). However, if we’d prefer to show the full
    number with a comma as the group separator (200,000), we would use:</samp>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">我们还可以使用</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    <samp class="SANS_Futura_Std_Book_11">字典来格式化在工具提示中显示的悬停数据。例如，默认情况下，</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">number_of_likes</samp> <samp class="SANS_Futura_Std_Book_11">用字母“k”表示10,000（200,000会写作200k）。然而，如果我们更喜欢显示带有逗号作为千位分隔符的完整数字（200,000），我们可以使用：</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data={"number_of_likes":
    '':,''}</samp>'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data={"number_of_likes":
    '':,''}</samp>'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: 'This chapter introduced you to the essential elements of a basic Dash app:
    Python libraries needed to program the app, the data used, Dash HTML and Core
    components, using the layout section to position the app components on the page,
    using callbacks to connect the components to each other and create interactivity,
    and the Plotly Express graphing library. In the next chapter we’ll build on the
    skills learned here to develop more sophisticated Dash apps.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你介绍了一个基础Dash应用的基本元素：编程应用所需的Python库、使用的数据、Dash HTML和Core组件、使用布局部分将应用组件定位到页面上、使用回调函数将组件连接在一起并创建交互性，以及Plotly
    Express绘图库。在下一章，我们将基于这里学到的技能，开发更复杂的Dash应用。
