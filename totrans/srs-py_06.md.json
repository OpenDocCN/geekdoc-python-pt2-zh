["```py\ndef test_true():\n    assert True\n```", "```py\n $ pytest -v test_true.py\n========================== test session starts ===========================\nplatform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0 --\n/usr/local/opt/python/bin/python3.6\ncachedir: .cache\nrootdir: examples, inifile:\ncollected 1 item\n\ntest_true.py::test_true PASSED                                     [100%]\n\n======================== 1 passed in 0.01 seconds ========================\n```", "```py\ndef test_false():\n    assert False\n```", "```py\n $ pytest -v test_true.py\n========================== test session starts ===========================\nplatform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0 -- /usr/\nlocal/opt/python/bin/python3.6\ncachedir: .cache\nrootdir: examples, inifile:\ncollected 2 items\n\ntest_true.py::test_true PASSED                                     [ 50%]\ntest_true.py::test_false FAILED                                    [100%]\n\n================================ FAILURES ================================\n_______________________________ test_false _______________________________\n\n    def test_false():\n>       assert False\nE       assert False\n\ntest_true.py:5: AssertionError\n=================== 1 failed, 1 passed in 0.07 seconds ===================\n```", "```py\ndef test_key():\n    a = ['a', 'b']\n    b = ['b']\n    assert a == b\n```", "```py\n $ pytest test_true.py\n========================== test session starts =========================== platform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0\nrootdir: /Users/jd/Source/python-book/examples, inifile:\nplugins: celery-4.1.0\ncollected 1 item\n\ntest_true.py F                                                     [100%]\n\n================================ FAILURES ================================\n________________________________ test_key ________________________________\n\n    def test_key():\n        a = ['a', 'b']\n        b = ['b']\n>       assert a == b\nE       AssertionError: assert ['a', 'b'] == ['b']\nE         At index 0 diff: 'a' != 'b'\nE         Left contains more items, first extra item: 'b'\nE         Use -v to get the full diff\n\ntest_true.py:10: AssertionError\n======================== 1 failed in 0.07 seconds ========================\n```", "```py\nimport pytest\n\ntry:\n    import mylib\nexcept ImportError:\n    mylib = None\n\n@pytest.mark.skip(\"Do not run this\")\ndef test_fail():\n    assert False\n\n@pytest.mark.skipif(mylib is None, reason=\"mylib is not available\")\ndef test_mylib():\n    assert mylib.foobar() == 42 def test_skip_at_runtime():\n    if True:\n        pytest.skip(\"Finally I don't want to run it\")\n```", "```py\n $ pytest -v examples/test_skip.py\n========================== test session starts ===========================\nplatform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0 -- /usr/\nlocal/opt/python/bin/python3.6\ncachedir: .cache\nrootdir: examples, inifile:\ncollected 3 items\n\nexamples/test_skip.py::test_fail SKIPPED\n[ 33%]\nexamples/test_skip.py::test_mylib SKIPPED\n[ 66%]\nexamples/test_skip.py::test_skip_at_runtime SKIPPED\n[100%]\n\n================= 3 skipped in 0.01 seconds =================\n```", "```py\n$ pytest -v examples/test_skip.py -k test_fail\n========================== test session starts ===========================\nplatform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0 -- /usr/\nlocal/opt/python/bin/python3.6\ncachedir: .cache\nrootdir: examples, inifile:\ncollected 3 items\n\nexamples/test_skip.py::test_fail SKIPPED\n[100%] === 2 tests deselected ===\n=== 1 skipped, 2 deselected in 0.04 seconds ===\n```", "```py\nimport pytest\n\n@pytest.mark.dicttest\ndef test_something():\n    a = ['a', 'b']\n    assert a == a\n\ndef test_something_else():\n    assert False\n```", "```py\n$ pytest -v test_mark.py -m dicttest\n=== test session starts ===\nplatform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0 -- /usr/\nlocal/opt/python/bin/python3.6\ncachedir: .cache\nrootdir: examples, inifile:\ncollected 2 items\n\ntest_mark.py::test_something PASSED\n[100%]\n\n=== 1 tests deselected ===\n=== 1 passed, 1 deselected in 0.01 seconds ===\n```", "```py\n$ pytest test_mark.py -m 'not dicttest'\n=== test session starts ===\nplatform darwin -- Python 3.6.4, pytest-3.3.2, py-1.5.2, pluggy-0.6.0\nrootdir: examples, inifile:\ncollected 2 items\n\ntest_mark.py F\n[100%]\n\n=== FAILURES ===\ntest_something_else def test_something_else():\n>       assert False\nE       assert False\n\ntest_mark.py:10: AssertionError\n=== 1 tests deselected ===\n=== 1 failed, 1 deselected in 0.07 seconds ===\n```", "```py\nimport pytest\n\n@pytest.fixture\ndef database():\n    return <some database connection>\n\ndef test_insert(database):\n    database.insert(123)\n```", "```py\nimport pytest\n\n@pytest.fixture\ndef database():\n    db = <some database connection>\n    yield db\n    db.close()\n\ndef test_insert(database):\n    database.insert(123)\n```", "```py\nimport pytest\n\n@pytest.fixture(scope=\"module\")\ndef database():\n    db = <some database connection>\n    yield db\n    db.close()\n\ndef test_insert(database):\n    database.insert(123)\n```", "```py\nimport os\n\nimport pytest\n\n@pytest.fixture(autouse=True)\ndef change_user_env():\n    curuser = os.environ.get(\"USER\")\n    os.environ[\"USER\"] = \"foobar\"\n    yield\n    os.environ[\"USER\"] = curuser\n\ndef test_user():\n    assert os.getenv(\"USER\") == \"foobar\"\n```", "```py\nimport pytest\nimport myapp @pytest.fixture(params=[\"mysql\", \"postgresql\"])\ndef database(request):\n    d = myapp.driver(request.param)\n    d.start()\n    yield d\n    d.stop()\n\ndef test_insert(database):\n    database.insert(\"somedata\")\n```", "```py\ntry:\n    from unittest import mock\nexcept ImportError:\n    import mock\n```", "```py\n>>> from unittest import mock\n>>> m = mock.Mock()\n>>> m.some_attribute = \"hello world\" >>> m.some_attribute\n\"hello world\"\n```", "```py\n>>> from unittest import mock\n>>> m = mock.Mock()\n>>> m.some_method.return_value = 42\n>>> m.some_method()\n42\n>>> m.some_method(\"with\", \"arguments\")\n42\n```", "```py\n   >>> from unittest import mock\n   >>> m = mock.Mock()\n   >>> def print_hello():\n   ...     print(\"hello world!\")\n   ...     return 43\n   ...\n➊ >>> m.some_method.side_effect = print_hello\n   >>> m.some_method()\n   hello world!\n   43\n➋ >>> m.some_method.call_count\n   1\n```", "```py\n   >>> from unittest import mock\n   >>> m = mock.Mock()\n➊ >>> m.some_method('foo', 'bar')\n   <Mock name='mock.some_method()' id='26144272'>\n➋ >>> m.some_method.assert_called_once_with('foo', 'bar')\n   >>> m.some_method.assert_called_once_with('foo', ➌mock.ANY)\n   >>> m.some_method.assert_called_once_with('foo', 'baz')\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"/usr/lib/python2.7/dist-packages/mock.py\", line 846, in assert_called_\n   once_with\n       return self.assert_called_with(*args, **kwargs)\n     File \"/usr/lib/python2.7/dist-packages/mock.py\", line 835, in assert_called_\n   with\n       raise AssertionError(msg)\n   AssertionError: Expected call: some_method('foo', 'baz')\n   Actual call: some_method('foo', 'bar')\n```", "```py\n>>> from unittest import mock\n>>> import os\n>>> def fake_os_unlink(path):\n...     raise IOError(\"Testing!\")\n...\n>>> with mock.patch('os.unlink', fake_os_unlink):\n...     os.unlink('foobar')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\n  File \"<stdin>\", line 2, in fake_os_unlink\nIOError: Testing!\n```", "```py\n   from unittest import mock\n\n   import pytest\n   import requests\n\n   class WhereIsPythonError(Exception):\n       pass\n\n➊ def is_python_still_a_programming_language():\n       try:\n           r = requests.get(\"http://python.org\")\n       except IOError:\n           pass\n       else:\n           if r.status_code == 200:\n               return 'Python is a programming language' in r.content\n       raise WhereIsPythonError(\"Something bad happened\")\n\n   def get_fake_get(status_code, content):\n       m = mock.Mock()\n       m.status_code = status_code\n       m.content = content\n\n       def fake_get(url):\n           return m\n\n       return fake_get\n\n   def raise_get(url):\n       raise IOError(\"Unable to fetch url %s\" % url)\n\n➋ @mock.patch('requests.get', get_fake_get(\n       200, 'Python is a programming language for sure'))\n   def test_python_is():\n       assert is_python_still_a_programming_language() is True\n\n   @mock.patch('requests.get', get_fake_get(\n       200, 'Python is no more a programming language'))\n   def test_python_is_not():\n       assert is_python_still_a_programming_language() is False\n\n   @mock.patch('requests.get', get_fake_get(404, 'Whatever'))\n   def test_bad_status_code():\n       with pytest.raises(WhereIsPythonError):\n           is_python_still_a_programming_language()\n\n   @mock.patch('requests.get', raise_get)\n   def test_ioerror():\n       with pytest.raises(WhereIsPythonError):\n           is_python_still_a_programming_language()\n```", "```py\n$ pytest --cov=gnocchiclient gnocchiclient/tests/unit\n---------- coverage: platform darwin, python 3.6.4-final-0 -----------\nName                                          Stmts   Miss Branch BrPart  Cover\n---------------------------\ngnocchiclient/__init__.py                         0      0      0      0   100%\ngnocchiclient/auth.py                            51     23      6      0    49%\ngnocchiclient/benchmark.py                      175    175     36      0     0%\n--snip--\n---------------------------\nTOTAL                                          2040   1868    424      6     8%\n\n=== passed in 5.00 seconds ===\n```", "```py\n$ python3 -m venv myvenv\n$ ls foobar\nbin        include    lib        pyvenv.cfg\n```", "```py\n$ source myvenv/bin/activate\n```", "```py\n> \\myvenv\\Scripts\\activate\n```", "```py\n$ deactivate\n```", "```py\n$ myvenv/bin/python\n```", "```py\n$ source myvenv/bin/activate\n(myvenv) $ pip install six\nDownloading/unpacking six\n  Downloading six-1.4.1.tar.gz\n  Running setup.py egg_info for package six\n\nInstalling collected packages: six\n  Running setup.py install for six\n\nSuccessfully installed six\nCleaning up...\n```", "```py\nvirtualenv myappvenv\nsource myappvenv/bin/activate\npip install -r requirements.txt\ndeactivate\n```", "```py\n$ touch tox.ini\n```", "```py\n% tox\nGLOB sdist-make: /home/jd/project/setup.py\npython create: /home/jd/project/.tox/python\npython inst: /home/jd/project/.tox/dist/project-1.zip\n____________________ summary _____________________\n  python: commands succeeded\n  congratulations :)\n```", "```py\n[testenv]\ncommands=pytest\n```", "```py\n[testenv]\ndeps=pytest\ncommands=pytest\n```", "```py\n % tox -e py26\n GLOB sdist-make: /home/jd/project/setup.py\n py26 create: /home/jd/project/.tox/py26\n py26 installdeps: nose\n py26 inst: /home/jd/project/.tox/dist/rebuildd-1.zip\n py26 runtests: commands[0] | pytests\n --snip--\n== test session starts ==\n=== 5 passed in 4.87 seconds ====\n```", "```py\n[testenv]\ndeps=pytest\ncommands=pytest\n\n[testenv:py36-coverage]\ndeps={[testenv]deps}\n      pytest-cov\ncommands=pytest --cov=myproject\n```", "```py\n[testenv]\ndeps=pytest\ncommands=pytest\n\n[testenv:py21]\nbasepython=python2.1\n```", "```py\n[tox]\nenvlist=py35,py36,pypy\n\n[testenv]\ndeps=pytest\ncommands=pytest\n```", "```py\n[tox]\nenvlist=py35,py36,pypy,pep8\n\n[testenv]\ndeps=pytest\ncommands=pytest\n\n[testenv:pep8]\ndeps=flake8\ncommands=flake8\n```", "```py\nlanguage: python\npython:\n  - \"2.7\"\n  - \"3.6\"\n# command to install dependencies\ninstall: \"pip install -r requirements.txt --use-mirrors\"\n# command to run tests\nscript: pytest\n```", "```py\nsudo: false\nlanguage: python\npython:\n  - \"2.7\"\n  - \"3.4\"\ninstall: pip install tox-travis\nscript: tox\n```"]