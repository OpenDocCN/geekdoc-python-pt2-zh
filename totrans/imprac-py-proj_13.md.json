["```py\n➊ import sys\n   import math\n   import random\n   import pygame as pg\n\n➋ pg.init()  # initialize pygame\n\n➌ # define color table\n   BLACK = (0, 0, 0)\n   WHITE = (255, 255, 255)\n   LT_GRAY = (180, 180, 180)\n   GRAY = (120, 120, 120)\n   DK_GRAY = (80, 80, 80)\n```", "```py\ndef main():\n    pg.init()\n```", "```py\nif __name__ == \"__main__\":\n    pg.init()\n    main()\n```", "```py\n➊ class Particle(pg.sprite.Sprite):\n       \"\"\"Builds ejecta particles for volcano simulation.\"\"\"\n\n    ➋ gases_colors = {'SO2': LT_GRAY, 'CO2': GRAY, 'H2S': DK_GRAY, 'H2O': WHITE}\n\n    ➌ VENT_LOCATION_XY = (320, 300)\n       IO_SURFACE_Y = 308\n       GRAVITY = 0.5  # pixels-per-frame; added to dy each game loop\n       VELOCITY_SO2 = 8  # pixels-per-frame\n\n       # scalars (SO2 atomic weight/particle atomic weight) used for velocity\n    ➍ vel_scalar = {'SO2': 1, 'CO2': 1.45, 'H2S': 1.9, 'H2O': 3.6}\n\n    ➎ def __init__(self, screen, background):\n           super().__init__()\n           self.screen = screen\n           self.background = background\n        ➏ self.image = pg.Surface((4, 4))\n           self.rect = self.image.get_rect()\n        ➐ self.gas = random.choice(list(Particle.gases_colors.keys()))\n           self.color = Particle.gases_colors[self.gas]\n        ➑ self.vel = Particle.VELOCITY_SO2 * Particle.vel_scalar[self.gas]\n        ➒ self.x, self.y = Particle.VENT_LOCATION_XY\n        ➓ self.vector()\n```", "```py\n    ➊ def vector(self):\n           \"\"\"Calculate particle vector at launch.\"\"\"\n        ➋ orient = random.uniform(60, 120)  # 90 is vertical\n        ➌ radians = math.radians(orient)\n        ➍ self.dx = self.vel * math.cos(radians)\n           self.dy = -self.vel * math.sin(radians)\n```", "```py\n    ➊ def update(self):\n           \"\"\"Apply gravity, draw path, and handle boundary conditions.\"\"\"\n        ➋ self.dy += Particle.GRAVITY\n        ➌ pg.draw.line(self.background, self.color,(self.x, self.y),\n                          (self.x + self.dx, self.y + self.dy))\n        ➍ self.x += self.dx\n           self.y += self.dy\n\n        ➎ if self.x < 0 or self.x > self.screen.get_width():\n            ➏ self.kill()\n        ➐ if self.y < 0 or self.y > Particle.IO_SURFACE_Y:\n               self.kill()\n```", "```py\ndef main():\n    \"\"\"Set up and run game screen and loop.\"\"\"\n ➊ screen = pg.display.set_mode((639, 360))\n ➋ pg.display.set_caption('Io Volcano Simulator')\n ➌ background = pg.image.load('tvashtar_plume.gif')\n\n    # Set up color-coded legend\n ➍ legend_font = pg.font.SysFont('None', 24)\n ➎ water_label = legend_font.render('--- H2O', True, WHITE, BLACK)\n    h2s_label = legend_font.render('--- H2S', True, DK_GRAY, BLACK)\n    co2_label = legend_font.render('--- CO2', True, GRAY, BLACK)\n    so2_label = legend_font.render('--- SO2/S2', True, LT_GRAY, BLACK)\n\n ➏ particles = pg.sprite.Group()\n\n ➐ clock = pg.time.Clock()\n```", "```py\n    ➊ while True:\n        ➋ clock.tick(25)\n        ➌ particles.add(Particle(screen, background))\n        ➍ for event in pg.event.get():\n               if event.type == pg.QUIT:\n                   pg.quit()\n                   sys.exit()\n\n        ➎ screen.blit(background, (0, 0))\n           screen.blit(water_label, (40, 20))\n           screen.blit(h2s_label, (40, 40))\n           screen.blit(co2_label, (40, 60))\n           screen.blit(so2_label, (40, 80))\n\n        ➏ particles.update()\n           particles.draw(screen)\n\n        ➐ pg.display.flip()\n\n➑ if __name__ == \"__main__\":\n       main()\n```", "```py\n        self.gas = 'SO2'\n        self.color = random.choice(list(Particle.gases_colors.values()))\n```"]