- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Analyzing Location Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分析位置数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Everything happens somewhere. That’s why the location of an object can be just
    as important as its nonspatial attributes for the purposes of data analysis. In
    fact, spatial and nonspatial data often go hand in hand.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每一件事都有发生的地点。这就是为什么对象的位置在数据分析中可能与其非空间属性一样重要的原因。实际上，空间数据和非空间数据往往是密切相关的。
- en: 'As an example, consider a ride-sharing app. Once you’ve ordered a ride, you
    might want to track the location of the car on a map in real time while it’s heading
    to you. You might also want know some basic nonspatial information about the car
    and driver assigned to your order: the make and model of the car, the driver’s
    rating, and so on.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个共享出行应用。你在订车后，可能想要实时追踪汽车在前往你的途中在地图上的位置。你可能还想了解与订单相关的汽车和司机的一些基本非空间信息：如汽车的品牌和型号，司机的评分等。
- en: In the last chapter, you saw how to work with location data to generate maps.
    In this chapter, you’ll learn more about how to use Python to collect and analyze
    location data, and you’ll see how to integrate both spatial and nonspatial data
    in your analysis. Throughout, we’ll consider the example of a taxi management
    service, and we’ll try to answer the central question of which cab should be assigned
    to a particular job.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你了解了如何使用位置数据生成地图。在这一章中，你将学习如何使用Python收集和分析位置数据，并且你将看到如何将空间数据和非空间数据整合到分析中。贯穿整个过程，我们将考虑一个出租车管理服务的例子，并试图回答哪个出租车应该被指派给特定任务的核心问题。
- en: Obtaining Location Data
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取位置数据
- en: The first step in performing a spatial analysis is to obtain location data for
    the objects of interest. In particular, this location data should take the form
    of *geographical coordinates* (*geo coordinates* for short), or latitude and longitude
    values. This coordinate system enables every location on the planet to be specified
    as a set of numbers, meaning the locations can be analyzed programatically. In
    this section, we’ll consider ways to obtain the geo coordinates of both stationary
    and moving objects. This will demonstrate how our example taxi service might determine
    a customer’s pick-up location as well as the real-time locations of its various
    cabs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 执行空间分析的第一步是获取感兴趣对象的位置数据。具体来说，这些位置数据应该是*地理坐标*（简称*geo坐标*），即纬度和经度值。这种坐标系统使得地球上的每个位置都能用一组数字表示，从而使得这些位置可以通过程序化方式进行分析。在本节中，我们将考虑获取静态和动态物体的geo坐标的方法。这将演示我们的出租车服务如何确定顾客的接送位置以及其各种出租车的实时位置。
- en: Turning a Human-Readable Address into Geo Coordinates
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将人类可读的地址转换为地理坐标
- en: Most humans think in terms of street names and building numbers rather than
    geo coordinates. That’s why it’s common for taxi services, food delivery apps,
    and the like to let users specify pick-up and drop-off locations as street addresses.
    Behind the scenes, however, many of these services convert human-readable addresses
    into the corresponding geo coordinates. That way the app can perform calculations
    with the location data, such as determining the nearest available cab to the specified
    pick-up location.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人习惯于通过街道名称和楼号来思考，而不是地理坐标。这就是为什么出租车服务、外卖应用等通常允许用户指定接送地点为街道地址。然而，在后台，许多这些服务会将人类可读的地址转换为相应的geo坐标。这样，应用就可以利用位置数据进行计算，例如确定离指定接送地点最近的可用出租车。
- en: 'How do you convert from street addresses to geo coordinates? One way is to
    use Geocoding, an API provided by Google for this purpose. To interact with the
    Geocoding API from a Python script, you’ll need to use the googlemaps library.
    Install it using the `pip` command, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将街道地址转换为地理坐标？一种方法是使用地理编码（Geocoding），这是Google提供的一个API。要从Python脚本与Geocoding
    API进行交互，你需要使用googlemaps库。通过以下`pip`命令安装它：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll also need to get an API key for the Geocoding API using a Google Cloud
    account. For information about acquiring an API key, see [https://developers.google.com/maps/documentation/geocoding/get-api-key](https://developers.google.com/maps/documentation/geocoding/get-api-key).
    Details on the API’s cost structure are available at [https://cloud.google.com/maps-platform/pricing](https://cloud.google.com/maps-platform/pricing).
    As of this writing, Google provides a $200 monthly credit to API users, which
    is enough for you to experiment with the code in this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要通过 Google Cloud 账户获取 Geocoding API 的 API 密钥。有关获取 API 密钥的信息，请参见 [https://developers.google.com/maps/documentation/geocoding/get-api-key](https://developers.google.com/maps/documentation/geocoding/get-api-key)。API
    费用结构的详细信息请见 [https://cloud.google.com/maps-platform/pricing](https://cloud.google.com/maps-platform/pricing)。截至本文撰写时，Google
    为 API 用户提供每月 200 美元的信用额度，足够你在本书的代码中进行实验。
- en: 'The following script illustrates a sample call to the Geocoding API using googlemaps.
    This call obtains the latitude and longitude coordinates corresponding to the
    address 1600 Amphitheatre Parkway, Mountain View, CA:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本展示了如何使用 googlemaps 调用 Geocoding API 的示例。此调用获取与地址 1600 Amphitheatre Parkway,
    Mountain View, CA 对应的经纬度坐标：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this script, you establish a connection to the API and send the address
    you want to convert. The API returns a JSON document with a nested structure.
    The geo coordinates are stored under the key `location`, which is a subfield of
    `geometry`. In the last line, you access and print the coordinates, yielding the
    following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在此脚本中，你与 API 建立连接并发送你想要转换的地址。API 返回一个具有嵌套结构的 JSON 文档。地理坐标存储在 `location` 键下，该键是
    `geometry` 的子字段。在最后一行，你访问并打印坐标，输出如下：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Getting the Geo Coordinates of a Moving Object
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取移动物体的地理坐标
- en: You now know how to obtain the geo coordinates of a fixed location via its street
    address, but how can you get the real-time geo coordinates of a moving object,
    such as a taxi? Some taxi services might use specialized GPS devices for this
    purpose, but we’ll focus instead on a low-cost, easy-to-implement solution. All
    that’s required is a smartphone.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何通过街道地址获取一个固定位置的地理坐标，但如何获取一个移动物体的实时地理坐标，比如出租车呢？一些出租车服务可能使用专门的 GPS 设备来实现这一目的，但我们将重点讨论一个低成本、易于实现的解决方案。所需的仅仅是一部智能手机。
- en: Smartphones detect their location with built-in GPS sensors and can be tuned
    to share that information. Here, we’ll look at how to collect smartphone GPS coordinates
    via the popular messaging app Telegram. Using the Telegram Bot API, you’ll create
    a *bot*, an application that runs within Telegram. Bots are commonly used for
    natural language processing, but this one will collect and log the geolocation
    data of Telegram users who choose to share their data with the bot.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机通过内置的 GPS 传感器来检测其位置，并可以调整设置以共享该信息。在这里，我们将探讨如何通过流行的消息应用 Telegram 收集智能手机的
    GPS 坐标。使用 Telegram Bot API，你将创建一个*机器人*，即在 Telegram 中运行的应用程序。机器人通常用于自然语言处理，但这个将用于收集并记录选择与机器人共享数据的
    Telegram 用户的地理位置数据。
- en: Setting Up a Telegram Bot
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置 Telegram 机器人
- en: 'To create a Telegram bot, you’ll need to download the Telegram app and create
    an account. Then follow these steps using either a smartphone or a PC:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 Telegram 机器人，你需要下载 Telegram 应用并创建一个帐户。然后使用智能手机或 PC 按照以下步骤操作：
- en: In the Telegram app, search for @BotFather. BotFather is a Telegram bot that
    manages all the other bots in your account.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Telegram 应用中，搜索 @BotFather。BotFather 是一个 Telegram 机器人，负责管理你账户中的所有其他机器人。
- en: On the BotFather page, click **Start** to see the list of commands that you
    can use to set up your Telegram bots.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 BotFather 页面，点击 **开始**，查看你可以用来设置 Telegram 机器人的命令列表。
- en: Enter `/newbot` in the message box. You’ll be prompted for a name and a username
    for your bot. Then you’ll be given an authorization token for the new bot. Take
    note of this token; you’ll need it when you program the bot.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在消息框中输入 `/newbot`。系统会提示你为你的机器人设置名称和用户名。然后，你会获得新机器人的授权令牌。记下这个令牌；在编写程序时你会用到它。
- en: 'After completing these steps, you can implement the bot with Python using the
    python-telegram-bot library. Install the library like so:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，你可以使用 python-telegram-bot 库用 Python 实现这个机器人。安装库的方法如下：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The tools you’ll need to program the bot are in the library’s `telegram.ext`
    module. It’s built on top of the Telegram Bot API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编写机器人程序所需的工具位于库的 `telegram.ext` 模块中。它是基于 Telegram Bot API 构建的。
- en: Programming the Bot
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写机器人程序
- en: 'Here, you use the `telegram.ext` module of the python-telegram-bot library
    to program the bot to listen for and log GPS coordinates:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用python-telegram-bot库的`telegram.ext`模块来编程，使机器人监听并记录GPS坐标：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `main()` function contains the common invocations found in a script implementing
    a Telegram bot. You start by creating an `Updater` object ❺, passing it your bot’s
    authorization token (generated by BotFather). This object orchestrates the bot
    execution process throughout the script. You then use the `Dispatcher` object
    associated with the `Updater` to add a handler function called `get_location()`
    for incoming messages ❻. By specifying `Filters.location`, you add a filter to
    the handler so it will only be called when the bot receives messages that include
    the sender’s location data. You start the bot by invoking the `start_polling()`
    method of the `Updater` object ❼. Because `start_polling()` is a non-blocking
    method, you also have to call the `Updater` object’s `idle()` method ❽ in order
    to block the script until a message is received.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数包含实现Telegram机器人脚本中常见的调用。你首先创建一个`Updater`对象❺，并传入你的机器人授权令牌（由BotFather生成）。这个对象在脚本中负责协调机器人的执行过程。接着，你使用与`Updater`关联的`Dispatcher`对象，添加一个名为`get_location()`的处理函数，用于处理传入的消息❻。通过指定`Filters.location`，你为该处理函数添加了一个过滤器，使其只在机器人接收到包含发送者位置数据的消息时被调用。你通过调用`Updater`对象的`start_polling()`方法❼来启动机器人。由于`start_polling()`是一个非阻塞方法，你还需要调用`Updater`对象的`idle()`方法❽，以使脚本在收到消息之前保持阻塞状态。'
- en: At the beginning of the script, you define the `get_location()` handler ❶. Within
    the handler, you store the incoming message as `msg`, then you extract the sender’s
    location data using the message’s `location` property ❷. You also log the sender’s
    username and generate a string containing the current time. Then, using Python’s
    `csv` module, you store all this information as a row in a CSV file ❸ at a location
    of your choice. You also transmit the location data back to the sender so they
    know that their location has been received ❹.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的开头，你定义了`get_location()`处理函数❶。在处理函数中，你将传入的消息存储为`msg`，然后使用消息的`location`属性❷提取发送者的位置数据。你还会记录发送者的用户名并生成包含当前时间的字符串。然后，使用Python的`csv`模块，你将所有这些信息作为一行存储在你选择的位置的CSV文件中❸。你还将位置数据传回给发送者，让他们知道他们的位置已经被接收❹。
- en: Getting Data from the Bot
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从机器人获取数据
- en: 'Run the script on an internet-connected machine. Once it’s running, users can
    follow a few simple steps to start sharing their real-time location data with
    the bot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台连接互联网的机器上运行脚本。一旦脚本运行，用户可以按照几个简单的步骤开始与机器人共享实时位置数据：
- en: Create a Telegram account.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Telegram账户。
- en: In Telegram, tap the name of the bot.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Telegram中，点击机器人的名称。
- en: Tap the Paperclip icon and select **Location** from the menu.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击回形针图标，从菜单中选择**位置**。
- en: Choose **Share My Location For** and set how long Telegram will share live location
    data with the bot. Options include 15 minutes, 1 hour, or 8 hours.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**分享我的位置为**，并设置Telegram将与机器人共享实时位置数据的时长。选项包括15分钟、1小时或8小时。
- en: The screenshot in [Figure 9-1](#figure9-1) shows how easy it is to share your
    real-time location in Telegram.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-1](#figure9-1)中的截图展示了在Telegram中分享实时位置是多么简单。'
- en: '![A screenshot of the Telegram app with the Location option selected.](image_fi/502208c09/f09001.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Telegram应用程序的屏幕截图，选择了位置选项。](image_fi/502208c09/f09001.png)'
- en: 'Figure 9-1: Sharing your smartphone’s live location in Telegram'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-1：在Telegram中分享你智能手机的实时位置
- en: 'Once users start sharing their location data, the bot will start sending that
    data to a CSV file in the form of rows that might look as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户开始共享他们的位置数据，机器人将开始以如下所示的行形式将数据发送到CSV文件中：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first field in each row contains a username, the second and third fields
    contain the latitude and longitude of the user’s location, and the fourth field
    contains a timestamp. For some tasks, such as finding the closest car to a certain
    pick-up location, you’d only need the latest row for each car. Other tasks, however,
    such as calculating the overall distance of a ride, would benefit from multiple
    rows of data for the given car, sorted by time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每行的第一个字段包含用户名，第二和第三个字段包含用户位置的纬度和经度，第四个字段包含时间戳。对于某些任务，如寻找离特定接送地点最近的车辆，你只需要每辆车的最新一行数据。然而，对于其他任务，如计算一段行程的总距离，多个时间排序的数据行会更有帮助。
- en: Spatial Data Analysis with geopy and Shapely
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用geopy和Shapely进行空间数据分析
- en: 'Spatial data analysis boils down to answering questions about relationships:
    Which object is closest to a certain location? Are two objects in the same area?
    In this section, you’ll answer these common spatial analysis questions using two
    Python libraries, geopy and Shapely, all within the context of our example taxi
    service.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 空间数据分析归结为回答关于关系的问题：哪个物体离某个位置最近？两个物体是否位于同一区域？在这一部分中，你将使用两个 Python 库——geopy 和
    Shapely，结合我们出租车服务的实例来回答这些常见的空间分析问题。
- en: Since geopy is designed for performing calculations based on geo coordinates,
    it’s particularly suited for answering questions about distance. Meanwhile, Shapely
    specializes in defining and analyzing geometric planes, so it’s ideal for determining
    whether an object falls within a certain area. As you’ll see, both libraries can
    play a role in identifying the best cab for a given job.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 geopy 设计用于基于地理坐标进行计算，因此它特别适合用来回答关于距离的问题。而 Shapely 专注于定义和分析几何平面，因此它非常适合用来判断一个物体是否位于某个特定区域内。正如你将看到的，这两个库可以在识别最佳出租车时发挥作用。
- en: 'Before you proceed, install the libraries as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请按照以下方式安装所需的库：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finding the Closest Object
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻找最接近的物体
- en: 'Continuing with our taxi service example, we’ll look at how to use location
    data to identify the closest cab to a pick-up place. To start, you’ll need some
    sample location data. If you deployed the Telegram bot discussed in the previous
    section, you may already have some data in the form of a CSV file. Here, you load
    the data into a pandas DataFrame so you can easily sort and filter it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 继续以我们出租车服务的例子，我们将学习如何利用位置数据来识别离接客地点最近的出租车。首先，你需要一些示例位置数据。如果你已经部署了前面部分讨论的 Telegram
    机器人，可能已经有了以 CSV 文件形式存在的数据。在这里，你将数据加载到 pandas DataFrame 中，以便轻松地进行排序和过滤：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you didn’t deploy a Telegram bot, you can instead create a list of tuples
    with some sample location data and load it into a DataFrame as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有部署一个 Telegram 机器人，可以创建一个包含一些示例位置数据的元组列表，并将其加载到 DataFrame 中，如下所示：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Either way, you’ll get a DataFrame called `df` with columns for the cab ID,
    latitude, longitude, and timestamp.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，你都会得到一个名为 `df` 的 DataFrame，其中包含出租车 ID、纬度、经度和时间戳等列。
- en: 'The DataFrame has multiple rows for each cab, but to identify the cab closest
    to a pick-up place, you only need each cab’s most recent location. You can filter
    out the unnecessary rows as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该 DataFrame 为每辆出租车包含多行数据，但为了识别离接客地点最近的出租车，你只需要每辆出租车的最新位置。你可以通过如下方式过滤掉不必要的行：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, you sort the rows by the `cab` and `tm` fields in descending order. This
    operation groups the dataset by the `cab` column and puts the latest row for each
    cab first within its group. Then you apply the `drop_duplicates()` method to eliminate
    all but the first row for each cab. The resulting `latestrows` DataFrame looks
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你按 `cab` 和 `tm` 字段对行进行降序排序。此操作通过 `cab` 列对数据集进行分组，并将每个出租车组中最新的行排在前面。然后，你应用
    `drop_duplicates()` 方法删除每个出租车的除第一行以外的所有行。结果 `latestrows` DataFrame 如下所示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You now have a DataFrame with just the most recent location data for each cab.
    For the convenience of future computing, you next convert the DataFrame into a
    simpler Python structure, a list of lists. This way you’ll be able to more easily
    append new fields to each row, such as a field for the distance between the cab
    and the pick-up place:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你拥有了一个仅包含每辆出租车最新位置数据的 DataFrame。为了方便后续计算，你将 DataFrame 转换为一个更简单的 Python 结构——列表的列表。这样，你就可以更容易地将新字段添加到每一行中，例如计算出租车与接客地点之间距离的字段：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `values` property of `latestrows` returns a NumPy representation of the
    DataFrame, which you then convert to a list of lists using `tolist()`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`latestrows` 的 `values` 属性返回一个 NumPy 表示形式的 DataFrame，你可以使用 `tolist()` 将其转换为一个列表的列表。'
- en: 'You’re now ready to calculate the distance between each cab and a pick-up place.
    You’ll use the geopy library, which can accomplish this task with just a few lines
    of code. Here you use the `distance()` function from geopy’s `distance` module
    to make the necessary calculations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你准备好计算每辆出租车与接客地点之间的距离了。你将使用 geopy 库，它可以通过几行代码完成此任务。在这里，你使用 geopy 的 `distance`
    模块中的 `distance()` 函数来进行必要的计算：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For simplicity, you set the pick-up place by manually defining the latitude
    and longitude coordinates. In practice, however, you might use Google’s Geocoding
    API to generate the coordinates automatically from a street address, as discussed
    earlier in the chapter. Next, you iterate over each row in your dataset and calculate
    the distance between each cab and the pick-up place by calling `distance()` ❶.
    This function takes two tuples containing latitude/longitude coordinates as arguments.
    By adding `.m`, you retrieve the distance in meters. For demonstration purposes,
    you’ll print the result of each distance calculation; then you append it to the
    end of the row as a new field. The script produces the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，你通过手动定义纬度和经度坐标来设置接送地点。然而，在实际操作中，你可能会使用Google的地理编码API，从街道地址自动生成坐标，正如本章前面讨论的那样。接下来，你遍历数据集中的每一行，并通过调用`distance()`
    ❶计算每辆出租车与接送地点之间的距离。这个函数接受两个包含纬度/经度坐标的元组作为参数。通过添加`.m`，你可以获取以米为单位的距离。为了演示，你会打印每次距离计算的结果，然后将其附加到行尾作为新字段。脚本输出如下：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Clearly `cab_112` is closer, but how can you determine that programmatically?
    Use Python’s built-in `min()` function, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，`cab_112`更近，但你如何通过编程来确定这一点呢？使用Python内置的`min()`函数，如下所示：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You feed the data to `min()` and use a lambda function to evaluate its sorting
    order based on the item at index `4` of each row. This is the newly appended distance
    calculation. You then print the result in a human-readable format, yielding the
    following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你将数据传递给`min()`并使用一个lambda函数根据每行第`4`列的项目来评估排序顺序。这是新添加的距离计算方法。然后，你将结果以人类可读的格式打印出来，得到如下结果：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, you calculated the straight-line distance between each cab
    and the pick-up location. While this information can certainly be useful, real-world
    cars almost never drive in a perfectly straight line from one place to another.
    The layout of streets means that the actual distance a cab must drive to reach
    a pick-up location will be greater than the straight-line distance. With this
    in mind, next we’ll look at a more reliable way to match pick-up locations to
    cabs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你计算了每辆出租车与接送地点之间的直线距离。虽然这些信息肯定是有用的，但现实中的汽车几乎从不沿着一条完全笔直的路线从一个地方开到另一个地方。街道布局意味着，出租车到达接送地点的实际距离通常会大于直线距离。考虑到这一点，接下来我们将看看一种更可靠的方法来匹配接送地点和出租车。
- en: Finding Objects in a Certain Area
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在特定区域中寻找物体
- en: Often, the right question to ask to determine the best cab for a job isn’t “Which
    cab is the closest?” but rather “Which cab is in a certain area that includes
    the pick-up location?” This isn’t just because the driving distance between two
    points is almost always greater than the straight-line distance between them.
    In practice, barriers such as rivers or railroad tracks often divide geographical
    areas into separate zones that are only connected at a limited number of points
    by bridges, tunnels, and the like. This can make straight-line distances highly
    misleading. Consider the example in [Figure 9-2](#figure9-2).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，确定适合工作任务的最佳出租车时，正确的问题不是“哪辆出租车离得最近？”，而是“哪辆出租车在一个包含接送地点的特定区域内？”这不仅仅是因为两个点之间的驾驶距离几乎总是大于它们之间的直线距离。在实际操作中，河流或铁路等障碍物常常将地理区域划分为独立的区域，这些区域之间通过桥梁、隧道等有限的连接点相连。这使得直线距离往往具有误导性。考虑[图
    9-2](#figure9-2)中的例子。
- en: '![A map  divided  by a river, with location labels for pick-up and cab_112
    on one side of the river, and for cab_26 on the other side. ](image_fi/502208c09/f09002.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![一张被河流分割的地图，接送地点和`cab_112`位于河流的一侧，`cab_26`位于另一侧。](image_fi/502208c09/f09002.png)'
- en: 'Figure 9-2: Obstacles like rivers can make distance measurements misleading.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-2：像河流这样的障碍物可能会导致距离测量产生误导。
- en: As you can see, `cab_26` is spatially closest to the pick-up place in this scenario,
    but because of the river, `cab_112` will likely be able to get there faster. You
    can easily figure this out looking at the map, but how can you reach the same
    conclusion with a Python script? One way is to divide the area into a number of
    smaller *polygons*, or areas enclosed by a set of connected straight lines, and
    then check which cabs are within the same polygon as the pick-up location.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这种情况下，`cab_26`在空间上离接送地点最近，但由于河流的存在，`cab_112`可能能够更快地到达那里。你可以通过查看地图轻松得出这个结论，但如何通过Python脚本得出相同的结论呢？一种方法是将区域划分为多个较小的*多边形*，即由一组连接的直线围成的区域，然后检查哪些出租车位于与接送地点相同的多边形内。
- en: 'In this particular example, you should define a polygon that encompasses the
    pick-up location and has a boundary along the river. You can identify the polygon’s
    boundaries manually through Google Maps: right-click several points that connect
    to form a closed polygon, and note each point’s geo coordinates. Once you have
    the coordinates, you can define the polygon in Python using the Shapely library.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个具体的例子中，你应该定义一个包含接送地点并沿河流有边界的多边形。你可以通过 Google Maps 手动识别多边形的边界：右键点击几个连接起来形成封闭多边形的点，并记录每个点的地理坐标。一旦获取坐标，你就可以在
    Python 中使用 Shapely 库定义该多边形。
- en: 'Here’s how to create a polygon with Shapely and check whether a given point
    is inside that polygon:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用 Shapely 创建一个多边形并检查给定点是否位于该多边形内部的方法：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You first import two Shapely classes, `Point` and `Polygon` ❶, then you create
    a `Polygon` object using a list of latitude/longitude tuples ❷. This object represents
    the area north of the river, including the pick-up location. Next, you create
    several `Point` objects representing the locations of `cab_26`, `cab_112`, and
    the pick-up place, respectively ❸. Finally, you perform a series of spatial queries
    to detect if a certain point is inside the polygon using Shapely’s `within()`
    method ❹. As a result, the script should produce the following output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入两个 Shapely 类，`Point` 和 `Polygon` ❶，然后使用一组纬度/经度元组创建一个 `Polygon` 对象 ❷。这个对象表示位于河流北侧的区域，包括接送地点。接下来，创建多个
    `Point` 对象，分别表示 `cab_26`、`cab_112` 和接送地点的位置 ❸。最后，执行一系列空间查询，通过 Shapely 的 `within()`
    方法检测某个点是否在多边形内部 ❹。最终，脚本应产生以下输出：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Combining Both Approaches
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结合两种方法
- en: So far, we’ve chosen the best cab for a pick-up by calculating linear distances
    and by finding the closest cab within a certain area. In fact, the most accurate
    way to find the right cab may be to use elements of both approaches. This is because
    it isn’t necessarily safe to blindly exclude all the cabs that aren’t in the same
    polygon as the pick-up location. A cab in an adjacent polygon may still be closest
    in terms of actual driving distance even allowing for the possibility that the
    cab must get around a river or other obstacle. The key is to consider the entry
    points between one polygon and another. [Figure 9-3](#figure9-3) shows how we
    might take this into account.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们通过计算线性距离并在特定区域内找到最接近的出租车来选择最佳的接送出租车。事实上，找到合适的出租车的最准确方法可能是结合这两种方法的元素。这是因为盲目排除所有不在接送位置同一多边形中的出租车并不一定安全。即使考虑到出租车可能需要绕过河流或其他障碍物，位于相邻多边形中的出租车也可能是实际驾车距离最短的。关键是考虑一个多边形和另一个多边形之间的入口点。[图
    9-3](#figure9-3)展示了我们如何考虑这一点。
- en: '![The same map as Figure 9-2\. A dotted line follows the shape of the river.
    An equal sign marks a bridge across the river. Arrows go from cab_26 to the bridge
    and from the bridge to pick-up. Another arrow goes from cab_112 to pick-up.](image_fi/502208c09/f09003-r.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![与图 9-2 相同的地图。一条虚线沿河流的形状延展。等号标记了横跨河流的桥梁。箭头从 `cab_26` 指向桥梁，再从桥梁指向接送地点。另一个箭头从
    `cab_112` 指向接送地点。](image_fi/502208c09/f09003-r.png)'
- en: 'Figure 9-3: Using entry points to connect adjacent areas'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-3：使用入口点连接相邻区域
- en: 'The dotted line running across the middle of the figure represents the boundary
    dividing the area into two polygons: the one north of the river and the one south
    of the river. The equal sign laid on the bridge marks the entry point where cabs
    can move from one polygon to the other. For cabs in the polygon bordering that
    of the pick-up place, the distance to the pick-up place is composed of two intervals:
    the interval between the cab’s current location and the entry point, and the interval
    between the entry point and the pick-up place.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图中间的虚线表示将区域分为两个多边形的边界：一个位于河流北侧，另一个位于河流南侧。放置在桥梁上的等号标记了出租车从一个多边形移动到另一个多边形的入口点。对于位于接送地点边界相邻多边形中的出租车，前往接送地点的距离由两个区间组成：出租车当前位置到入口点的区间，以及入口点到接送地点的区间。
- en: 'To find the closest cab, you should therefore determine which polygon each
    cab is in and use that determination to decide how to calculate the distance from
    that cab to the pick-up location: either a direct straight-line distance if the
    cab is in the same polygon as the pick-up location, or the distance by way of
    the entry point if it’s in an adjacent polygon. Here you make that calculation
    just for `cab_26`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到最靠近的出租车，您需要确定每辆出租车所在的多边形，并基于此决定如何计算出租车与接送地点之间的距离：如果出租车在与接送地点相同的多边形内，则计算直接的直线距离；如果出租车在相邻的多边形中，则通过入口点计算距离。这里我们仅对`cab_26`进行这种计算：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The script uses both Shapely and geopy. First you define a Shapely `Polygon`
    object including the pick-up location, as before ❶. You likewise define `Point`
    objects for the cab, the pick-up location, and the entry point ❷. Then you calculate
    the distance in meters with the help of geopy’s `distance()` function. If the
    cab is within the polygon, you find the distance directly between the cab and
    the pick-up location ❸. If not, you first calculate the distance between the cab
    and the entry point and then the distance between the entry point and the pick-up
    place, summing them to get the total distance ❹. Here’s the result:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本同时使用了Shapely和geopy。首先，您定义一个包含接送地点的Shapely `Polygon` 对象，如之前所示 ❶。接着，您定义`Point`对象，分别表示出租车、接送地点和入口点
    ❷。然后，借助geopy的`distance()`函数计算距离（单位为米）。如果出租车在多边形内，您可以直接计算出租车和接送地点之间的距离 ❸。如果不在，您首先计算出租车与入口点之间的距离，再计算入口点与接送地点之间的距离，将两者相加得到总距离
    ❹。以下是结果：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Combining Spatial and Nonspatial Data
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合空间数据与非空间数据
- en: So far in this chapter, you’ve worked exclusively with spatial data, but it’s
    important to realize that spatial analyses often need to factor in nonspatial
    data as well. For example, what’s the use of knowing that a store is located within
    10 miles of your current location if you don’t know whether the item you want
    is currently in stock there? Or, turning back to our taxi example, what’s the
    use of being able to determine the closest cab to a pick-up location if you don’t
    know whether that cab is available or currently serving another order? In this
    section, we’ll examine how to account for nonspatial data as part of a spatial
    analysis.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，在本章中，您主要处理了空间数据，但需要意识到，空间分析往往也需要考虑非空间数据。例如，如果您不知道某个物品在店内是否有货，那么知道商店位于离您当前位置10英里以内又有什么用？又比如，回到出租车的例子，如果您知道如何找出离接送地点最近的出租车，但不知道该出租车是否有空，或者是否正在服务其他订单，又有何意义呢？在本节中，我们将探讨如何将非空间数据纳入空间分析中。
- en: Deriving Nonspatial Attributes
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推导非空间属性
- en: 'Information about the current availability of cabs could be derived from a
    dataset containing ride orders. Once an order is assigned to a cab, this information
    might be placed in an `orders` data structure, where orders are listed as either
    open (in process) or closed (completed). According to this scheme, identifying
    only those orders that are open would tell you which cabs are unavailable to serve
    a new order. Here’s how you could implement this logic in Python:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于当前出租车可用性的信息可以通过包含乘车订单的数据集来获取。一旦订单被分配给某辆出租车，该信息可能会被放入一个`orders`数据结构中，其中订单按状态列出，状态可能是“开放”（进行中）或“关闭”（已完成）。根据这种方案，仅识别出那些“开放”的订单可以告诉您哪些出租车无法接受新的订单。以下是如何在Python中实现这一逻辑：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `orders` list of tuples used in this example might be derived from a more
    complete dataset, such as a collection of all the orders opened within the last
    two hours, that includes additional information about each order (pick-up location,
    drop-off location, start time, end time, and so on). For simplicity, here the
    dataset has already been reduced to just the fields needed for the current task.
    You convert the list into a DataFrame, then filter it to include only the orders
    whose status is `open`. Finally, you convert the DataFrame into a list containing
    only the values from the `cab` column. This list of unavailable cabs looks as
    follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中使用的`orders`元组列表可能来自一个更完整的数据集，例如过去两小时内所有已开订单的集合，数据集包含每个订单的附加信息（如接送地点、送达地点、开始时间、结束时间等）。为了简化起见，这里数据集已被简化为仅包含当前任务所需的字段。您将列表转换为DataFrame，然后筛选出状态为`open`的订单。最后，您将DataFrame转换为仅包含`cab`列值的列表。这个包含不可用出租车的列表如下所示：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Armed with this list, you need to check the other cabs and determine which
    is the closest to the pick-up place. Append this code to the previous script:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有了这个列表之后，你需要检查其他出租车，并确定哪个出租车最接近接送地点。将以下代码附加到之前的脚本：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For the purposes of the example, you manually define the geo coordinates of
    the pick-up place and all the cabs as tuples, and you send the coordinates of
    the cabs to a dictionary, where the keys are the cab names. Then you iterate over
    the dictionary, and for each cab not in `unavailable_list`, you use geopy to calculate
    the distance between the cab and the pick-up place. Finally, you print the entire
    list of available cabs with their distances to the pick-up place, as well as just
    the closest cab, yielding the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了示例的目的，你手动定义了接送地点和所有出租车的地理坐标作为元组，并将出租车的坐标发送到一个字典中，字典的键是出租车名称。然后，你遍历字典，对于每辆不在`unavailable_list`中的出租车，使用
    geopy 计算出租车与接送地点之间的距离。最后，你打印出所有可用出租车的完整列表及其到接送地点的距离，以及仅打印出最近的出租车，输出如下：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, `cab_26` is the closest available cab.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`cab_26`是最近的可用出租车。
- en: Joining Spatial and Nonspatial Datasets
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空间数据和非空间数据的结合
- en: In the previous example, you kept the spatial data (each cab’s location) and
    the nonspatial data (which cabs were available) in separate data structures. Sometimes,
    however, it may be advantageous to combine spatial and nonspatial data in the
    same structure.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，你将空间数据（每辆出租车的位置）和非空间数据（哪些出租车可用）保存在不同的数据结构中。然而，有时将空间数据和非空间数据结合在同一结构中可能会更有利。
- en: 'Consider that a cab may need to satisfy some other conditions apart from availability
    to be assigned to an order. For example, a client may need a cab with a baby seat.
    To find the right cab, you’ll need to rely on a dataset that includes nonspatial
    information about the cabs as well as each cab’s distance from the pick-up location.
    For the former, you may use a dataset that contains just two columns: the cab
    name and the presence of a baby seat. You create it here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到出租车可能需要满足除可用性外的其他条件才能被分配到订单。例如，客户可能需要带有婴儿座椅的出租车。为了找到合适的出租车，你需要依赖一个数据集，该数据集包含出租车的非空间信息，以及每辆出租车与接送地点的距离。对于前者，你可以使用一个仅包含两列的数据集：出租车名称和是否有婴儿座椅。你可以在这里创建它：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Cabs with a `1` in the second column have a baby seat. Next you convert the
    list to a DataFrame. You also create a second DataFrame from `dist_list, the list
    of available cabs and their distances to the pick-up place that you generated
    in the preceding section:`
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第二列中带有`1`的出租车包含婴儿座椅。接下来，你将列表转换为 DataFrame。你还将创建一个第二个 DataFrame，来自`dist_list`，即你在前一部分中生成的可用出租车及其到达接送地点的距离列表：
- en: '[PRE25] df_cabs = pd.DataFrame(cabs_list, columns =[''cab'', ''seat'']) df_dist
    = pd.DataFrame(dist_list, columns =[''cab'', ''dist'']) [PRE26] df = pd.merge(df_cabs,
    df_dist, on=''cab'', how=''inner'') [PRE27]  cab  seat  dist 0   cab_26     0  2165
    1  cab_112     1  2861 [PRE28] result_list = list(df.itertuples(index=False,name=None))
    result_list = [x for x in result_list if x[1] == 1] [PRE29] print(min(result_list,
    key=lambda x: x[2])) [PRE30] (''cab_112'', 1, 2861) [PRE31]`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25] df_cabs = pd.DataFrame(cabs_list, columns =[''cab'', ''seat'']) df_dist
    = pd.DataFrame(dist_list, columns =[''cab'', ''dist'']) [PRE26] df = pd.merge(df_cabs,
    df_dist, on=''cab'', how=''inner'') [PRE27]  cab  seat  dist 0   cab_26     0  2165
    1  cab_112     1  2861 [PRE28] result_list = list(df.itertuples(index=False,name=None))
    result_list = [x for x in result_list if x[1] == 1] [PRE29] print(min(result_list,
    key=lambda x: x[2])) [PRE30] (''cab_112'', 1, 2861) [PRE31]'
