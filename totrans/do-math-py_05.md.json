["```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(2, 4, 6)\n>>> s\n{2, 4, 6}\n```", "```py\n>>> from sympy import FiniteSet\n>>> from fractions import Fraction\n>>> s = FiniteSet(1, 1.5, Fraction(1, 5))\n>>> s\n{1/5, 1, 1.5}\n```", "```py\n>>> s = FiniteSet(1, 1.5, 3)\n>>> len(s)\n3\n```", "```py\n>>> 4 in s\nFalse\n```", "```py\n>>> s = FiniteSet()\n>>> s\nEmptySet()\n```", "```py\n>>> members = [1, 2, 3]\n>>> s = FiniteSet(*members)\n>>> s\n{1, 2, 3}\n```", "```py\n>>> from sympy import FiniteSet\n>>> members = [1, 2, 3, 2]\n>>> FiniteSet(*members)\n{1, 2, 3}\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2, 3)\n>>> for member in s:\n        print(member)\n\n2\n1\n3\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(3, 4, 5)\n>>> t = FiniteSet(5, 4, 3)\n>>> s == t\nTrue\n```", "```py\n>>> s = FiniteSet(1)\n>>> t = FiniteSet(1,2)\n>>> s.is_subset(t)\nTrue\n>>> t.is_subset(s)\nFalse\n```", "```py\n>>> s.is_subset(s)\nTrue\n>>> t.is_subset(t)\nTrue\n```", "```py\n>>> s.is_superset(t)\nFalse\n>>> t.is_superset(s)\nTrue\n```", "```py\n>>> s = FiniteSet(1, 2, 3)\n>>> ps = s.powerset()\n>>> ps\n{{1}, {1, 2}, {1, 3}, {1, 2, 3}, {2}, {2, 3}, {3}, EmptySet()}\n```", "```py\n>>> len(ps)\n8\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2, 3)\n>>> t = FiniteSet(1, 2, 3)\n>>> s.is_proper_subset(t)\nFalse\n>>> t.is_proper_superset(s)\nFalse\n```", "```py\n>>> t = FiniteSet(1, 2, 3, 4)\n>>> s.is_proper_subset(t)\nTrue\n>>> t.is_proper_superset(s)\nTrue\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2, 3)\n>>> t = FiniteSet(2, 4, 6)\n>>> s.union(t)\n{1, 2, 3, 4, 6}\n```", "```py\n>>> s = FiniteSet(1, 2)\n>>> t = FiniteSet(2, 3)\n>>> s.intersect(t)\n{2}\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2, 3)\n>>> t = FiniteSet(2, 4, 6)\n>>> u = FiniteSet(3, 5, 7)\n>>> s.union(t).union(u)\n{1, 2, 3, 4, 5, 6, 7}\n```", "```py\n>>> s.intersect(t).intersect(u)\nEmptySet()\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2)\n>>> t = FiniteSet(3, 4)\n>>> p = s*t\n>>> p\n{1, 2} x {3, 4}\n```", "```py\n>>> for elem in p:\n        print(elem)\n(1, 3)\n(1, 4)\n(2, 3)\n(2, 4)\n```", "```py\n>>> len(p) == len(s)*len(t)\nTrue\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2)\n>>> p = s**3\n>>> p\n{1, 2} x {1, 2} x {1, 2}\n```", "```py\n>>> for elem in p:\n        print(elem)\n(1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 2, 2)\n(2, 1, 1)\n(2, 1, 2)\n(2, 2, 1)\n(2, 2, 2)\n```", "```py\n   from sympy import FiniteSet, pi\n➊ def time_period(length):\n       g = 9.8\n       T = 2*pi*(length/g)**0.5\n       return T\n\n   if __name__ == '__main__':\n➋     L = FiniteSet(15, 18, 21, 22.5, 25)\n       for l in L:\n➌         t = time_period(l/100)\n           print('Length: {0} cm Time Period: {1:.3f} s'. format(float(l), float(t)))\n```", "```py\nLength: 15.0 cm Time Period: 0.777 s\nLength: 18.0 cm Time Period: 0.852 s\nLength: 21.0 cm Time Period: 0.920 s\nLength: 22.5 cm Time Period: 0.952 s\nLength: 25.0 cm Time Period: 1.004 s\n```", "```py\n   from sympy import FiniteSet, pi\n\n   def time_period(length, g):\n\n       T = 2*pi*(length/g)**0.5\n       return T\n\n   if __name__ == '__main__':\n\n       L = FiniteSet(15, 18, 21, 22.5, 25)\n       g_values = FiniteSet(9.8, 9.78, 9.83)\n➊     print('{0:^15}{1:^15}{2:^15}'.format('Length(cm)', 'Gravity(m/s^2)', 'Time Period(s)'))\n➋     for elem in L*g_values:\n➌         l = elem[0]\n➍         g = elem[1]\n           t = time_period(l/100, g)\n\n➎         print('{0:^15}{1:^15}{2:^15.3f}'.format(float(l), float(g), float(t)))\n```", "```py\nLength(cm)   Gravity(m/s^2)   Time Period(s)\n    15.0           9.78             0.778\n    15.0            9.8             0.777\n    15.0           9.83             0.776\n\n    18.0           9.78             0.852\n    18.0            9.8             0.852\n    18.0           9.83             0.850\n    21.0           9.78             0.921\n    21.0            9.8             0.920\n    21.0           9.83             0.918\n    22.5           9.78             0.953\n    22.5            9.8             0.952\n    22.5           9.83             0.951\n    25.0           9.78             1.005\n    25.0            9.8             1.004\n    25.0           9.83             1.002\n```", "```py\ndef probability(space, event):\n    return len(event)/len(space)\n```", "```py\n     def probability(space, event):\n         return len(event)/len(space)\n\n➊   def check_prime(number):\n         if number != 1:\n             for factor in range(2, number):\n                 if number % factor == 0:\n                     return False\n         else:\n             return False\n         return True\n\n     if __name__ == '__main__':\n➋       space = FiniteSet(*range(1, 21))\n         primes = []\n         for num in s:\n➌           if check_prime(num):\n                 primes.append(num)\n➍           event= FiniteSet(*primes)\n         p = probability(space, event)\n\n         print('Sample space: {0}'.format(space))\n         print('Event: {0}'.format(event))\n         print('Probability of rolling a prime: {0:.5f}'.format(p))\n```", "```py\nSample space: {1, 2, 3, ..., 18, 19, 20}\nEvent: {2, 3, 5, 7, 11, 13, 17, 19}\nProbability of rolling a prime: 0.40000\n```", "```py\nif __name__ == '__main__':\n    space = range(1, 21)\n    primes = []\n    for num in space:\n        if check_prime(num):\n            primes.append(num)\n    p = probability(space, primes)\n```", "```py\n   >>> from sympy import FiniteSet\n   >>> s = FiniteSet(1, 2, 3, 4, 5, 6)\n   >>> a = FiniteSet(2, 3, 5)\n   >>> b = FiniteSet(1, 3, 5)\n➊ >>> e = a.union(b)\n   >>> len(e)/len(s)\n   0.6666666666666666\n```", "```py\n>>> from sympy import FiniteSet\n>>> s = FiniteSet(1, 2, 3, 4, 5, 6)\n>>> a = FiniteSet(2, 3, 5)\n>>> b = FiniteSet(1, 3, 5)\n>>> e = a.intersect(b)\n>>> len(e)/len(s)\n0.3333333333333333\n```", "```py\n>>> import random\n>>> random.randint(1, 6)\n4\n```", "```py\n>>> random.randint(1, 6)\n6\n```", "```py\n   '''\n   Roll a die until the total score is 20\n   '''\n\n   import matplotlib.pyplot as plt\n   import random\n\n   target_score = 20\n\n   def roll():\n       return random.randint(1, 6)\n\n   if __name__ == '__main__':\n       score = 0\n       num_rolls = 0\n➊     while score < target_score:\n           die_roll = roll()\n           num_rolls += 1\n           print('Rolled: {0}'.format(die_roll))\n           score += die_roll\n\n       print('Score of {0} reached in {1} rolls'.format(score, num_rolls))\n```", "```py\nRolled: 6\nRolled: 2\nRolled: 5\nRolled: 1\nRolled: 3\nRolled: 4\nScore of 21 reached in 6 rolls\n```", "```py\n   from sympy import FiniteSet\n   import random\n\n   def find_prob(target_score, max_rolls):\n\n       die_sides = FiniteSet(1, 2, 3, 4, 5, 6)\n       # Sample space\n➊     s = die_sides**max_rolls\n       # Find the event set\n       if max_rolls > 1:\n           success_rolls = []\n➋         for elem in s:\n               if sum(elem) >= target_score:\n                   success_rolls.append(elem)\n       else:\n           if target_score > 6:\n➌             success_rolls = []\n           else:\n               success_rolls = []\n               for roll in die_sides:\n➍                 if roll >= target_score:\n                       success_rolls.append(roll)\n➎     e = FiniteSet(*success_rolls)\n       # Calculate the probability of reaching target score\n       return len(e)/len(s)\n\n   if __name__ == '__main__':\n\n       target_score = int(input('Enter the target score: '))\n       max_rolls = int(input('Enter the maximum number of rolls allowed: '))\n\n       p = find_prob(target_score, max_rolls)\n       print('Probability: {0:.5f}'.format(p))\n```", "```py\nEnter the target score: 25\nEnter the maximum number of rolls allowed: 4\nProbability: 0.00000\n\nEnter the target score: 25\nEnter the maximum number of rolls allowed: 5\nProbability: 0.03241\n```", "```py\n   import random\n\n   def toss():\n       # 0 -> Heads, 1-> Tails\n➊     if random.random() < 2/3:\n           return 0\n       else:\n           return 1\n```", "```py\n   '''\n   Simulate a fictional ATM that dispenses dollar bills\n   of various denominations with varying probability\n   '''\n\n   import random\n\n   def get_index(probability):\n       c_probability = 0\n➊     sum_probability = []\n       for p in probability:\n           c_probability += p\n           sum_probability.append(c_probability)\n➋     r = random.random()\n       for index, sp in enumerate(sum_probability):\n➌         if r <= sp:\n               return index\n➍     return len(probability)-1\n\n   def dispense():\n\n       dollar_bills = [5, 10, 20, 50]\n       probability = [1/6, 1/6, 1/3, 2/3]\n       bill_index = get_index(probability)\n       return dollar_bills[bill_index]\n```", "```py\n'''\nDraw a Venn diagram for two sets\n'''\n\nfrom matplotlib_venn import venn2\nimport matplotlib.pyplot as plt\nfrom sympy import FiniteSet\n\ndef draw_venn(sets):\n\n    venn2(subsets=sets)\n    plt.show()\n\nif __name__ == '__main__':\n\n    s1 = FiniteSet(1, 3, 5, 7, 9, 11, 13, 15, 17, 19)\n    s2 = FiniteSet(2, 3, 5, 7, 11, 13, 17, 19)\n\n    draw_venn([s1, s2])\n```", "```py\n>>> venn2(subsets=(a,b), set_labels=('S', 'T'))\n```", "```py\nStudentID,Football,Others\n1,1,0\n2,1,1\n3,0,1\n--snip--\n```", "```py\ndef read_csv(filename):\n    football = []\n    others = []\n    with open(filename) as f:\n        reader = csv.reader(f)\n        next(reader)\n        for row in reader:\n            if row[1] == '1':\n                football.append(row[0])\n            if row[2] == '1':\n                others.append(row[0])\n\n    return football, others\n```", "```py\n>>> e = 1*(1/6) + 2*(1/6) + 3*(1/6) + 4*(1/6) + 5*(1/6) + 6*(1/6)\n>>> e\n3.5\n```", "```py\nExpected value: 3.5\nTrials: 100 Trial average 3.39\nTrials: 1000 Trial average 3.576\nTrials: 10000 Trial average 3.5054\nTrials: 100000 Trial average 3.50201\nTrials: 500000 Trial average 3.495568\n```", "```py\nEnter your starting amount: 10\nTails! Current amount: 8.5\nTails! Current amount: 7.0\nTails! Current amount: 5.5\nTails! Current amount: 4.0\nTails! Current amount: 2.5\nHeads! Current amount: 3.5\nTails! Current amount: 2.0\nTails! Current amount: 0.5\nTails! Current amount: -1.0\nGame over :( Current amount: -1.0. Coin tosses: 9\n```", "```py\n[3, 9, 21, 50, 32, 4, 20, 52, 7, 13, 41, 25, 49, 36, 23, 45, 1, 22, 40, 19, 2,\n35, 28, 30, 39, 44, 29, 38, 48, 16, 15, 18, 46, 31, 14, 33, 10, 6, 24, 5, 43,\n47, 11, 34, 37, 27, 8, 17, 51, 12, 42, 26]\n```", "```py\n   >>> import random\n   >>> x = [1, 2, 3, 4]\n➊ >>> random.shuffle(x)\n   >>> x\n   [4, 2, 1, 3]\n```", "```py\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n```", "```py\n10 of spades\n6 of clubs\njack of spades\n9 of spades\n```", "```py\nRadius: 2\nArea: 12.566370614359172, Estimated (1000 darts): 12.576\nArea: 12.566370614359172, Estimated (100000 darts): 12.58176\nArea: 12.566370614359172, Estimated (1000000 darts): 12.560128\n```"]