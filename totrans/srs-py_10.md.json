["```py\ndef get_fruits(basket, fruit):\n    try:\n        return basket[fruit]\n    except KeyError:\n        return None\n```", "```py\ndef get_fruits(basket, fruit):\n    if fruit in basket:\n        return basket[fruit]\n```", "```py\ndef get_fruits(basket, fruit):\n    return basket.get(fruit)\n```", "```py\ndef get_fruits(basket, fruit):\n    # Return the fruit, or Banana if the fruit cannot be found.\n    return basket.get(fruit, Banana())\n```", "```py\ndef has_invalid_fields(fields):\n    for field in fields: if field not in ['foo', 'bar']:\n            return True\n    return False\n```", "```py\ndef has_invalid_fields(fields):\n    return bool(set(fields) - set(['foo', 'bar']))\n```", "```py\ndef add_animal_in_family(species, animal, family):\n    if family not in species:\n        species[family] = set()\n    species[family].add(animal)\n\nspecies = {}\nadd_animal_in_family(species, 'cat', 'felidea')\n```", "```py\nimport collections\n\ndef add_animal_in_family(species, animal, family):\n    species[family].add(animal)\n\nspecies = collections.defaultdict(set)\nadd_animal_in_family(species, 'cat', 'felidea')\n```", "```py\n>>> import collections\n>>> c = collections.Counter(\"Premature optimization is the root of all evil.\")\n>>> c\n>>> c['P']  # Returns the name of occurrence of the letter 'P'\n1\n>>> c['e']  # Returns the name of occurrence of the letter 'e'\n4\n>>> c.most_common(2)  # Returns the 2 most common letters\n[(' ', 7), ('i', 5)]\n```", "```py\n$ python -m cProfile myscript.py\n         343 function calls (342 primitive calls) in 0.000 seconds\n\n   Ordered by: standard name ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.000    0.000 :0(_getframe)\n        1    0.000    0.000    0.000    0.000 :0(len)\n      104    0.000    0.000    0.000    0.000 :0(setattr)\n        1    0.000    0.000    0.000    0.000 :0(setprofile)\n        1    0.000    0.000    0.000    0.000 :0(startswith)\n      2/1    0.000    0.000    0.000    0.000 <string>:1(<module>)\n        1    0.000    0.000    0.000    0.000 StringIO.py:30(<module>)\n        1    0.000    0.000    0.000    0.000 StringIO.py:42(StringIO)\n```", "```py\n$ pip install pyprof2calltree\n```", "```py\n$ python -m cProfile -o myscript.cprof myscript.py\n$ pyprof2calltree -k -i myscript.cprof\n```", "```py\n>>> def x():\n...     return 42\n...\n>>> import dis\n>>> dis.dis(x)\n  2           0 LOAD_CONST               1 (42)\n              3 RETURN_VALUE\n```", "```py\nabc = ('a', 'b', 'c')\n\ndef concat_a_1():\n    for letter in abc:\n            abc[0] + letter\n\ndef concat_a_2():\n    a = abc[0]\n    for letter in abc:\n            a + letter\n```", "```py\n>>> dis.dis(concat_a_1)\n  2           0 SETUP_LOOP              26 (to 29)\n              3 LOAD_GLOBAL              0 (abc)\n              6 GET_ITER\n        >>    7 FOR_ITER                18 (to 28)\n             10 STORE_FAST               0 (letter)\n\n  3          13 LOAD_GLOBAL              0 (abc)\n             16 LOAD_CONST               1 (0)\n             19 BINARY_SUBSCR\n             20 LOAD_FAST                0 (letter)\n             23 BINARY_ADD\n             24 POP_TOP\n             25 JUMP_ABSOLUTE            7\n        >>   28 POP_BLOCK\n        >>   29 LOAD_CONST               0 (None)\n             32 RETURN_VALUE\n>>> dis.dis(concat_a_2)\n  2           0 LOAD_GLOBAL              0 (abc)\n              3 LOAD_CONST               1 (0)\n              6 BINARY_SUBSCR\n              7 STORE_FAST               0 (a)\n\n  3          10 SETUP_LOOP              22 (to 35)\n             13 LOAD_GLOBAL              0 (abc)\n             16 GET_ITER\n        >>   17 FOR_ITER                14 (to 34)\n             20 STORE_FAST               1 (letter)\n\n  4          23 LOAD_FAST                0 (a)\n             26 LOAD_FAST                1 (letter)\n             29 BINARY_ADD\n             30 POP_TOP\n             31 JUMP_ABSOLUTE           17\n        >>   34 POP_BLOCK >>   35 LOAD_CONST               0 (None)\n             38 RETURN_VALUE\n```", "```py\n>> import dis\n>>> def x():\n...     return 42\n...\n>>> dis.dis(x)\n  2           0 LOAD_CONST               1 (42)\n              3 RETURN_VALUE\n>>> def x():\n...     def y():\n...             return 42\n...     return y()\n...\n>>> dis.dis(x)\n  2           0 LOAD_CONST               1 (<code object y at\nx100ce7e30, file \"<stdin>\", line 2>)\n              3 MAKE_FUNCTION            0\n              6 STORE_FAST               0 (y)\n  4           9 LOAD_FAST                0 (y) 12 CALL_FUNCTION            0\n             15 RETURN_VALUE\n```", "```py\n>>> def x():\n...     a = 42\n...     def y():\n...             return a\n...     return y()\n...\n>>> dis.dis(x)\n  2           0 LOAD_CONST               1 (42)\n              3 STORE_DEREF              0 (a)\n\n  3           6 LOAD_CLOSURE             0 (a)\n              9 BUILD_TUPLE              1\n             12 LOAD_CONST               2 (<code object y at\nx100d139b0, file \"<stdin>\", line 3>)\n             15 MAKE_CLOSURE             0\n             18 STORE_FAST               0 (y)\n\n  5          21 LOAD_FAST                0 (y)\n             24 CALL_FUNCTION            0\n             27 RETURN_VALUE\n```", "```py\n>>> farm = sorted(['haystack', 'needle', 'cow', 'pig'])\n>>> bisect.bisect(farm, 'needle')\n3\n>>> bisect.bisect_left(farm, 'needle')\n2\n>>> bisect.bisect(farm, 'chicken')\n0\n>>> bisect.bisect_left(farm, 'chicken')\n0\n>>> bisect.bisect(farm, 'eggs')\n1\n>>> bisect.bisect_left(farm, 'eggs')\n1\n```", "```py\n>>> farm\n['cow', 'haystack', 'needle', 'pig']\n>>> bisect.insort(farm, 'eggs')\n>>> farm\n['cow', 'eggs', 'haystack', 'needle', 'pig']\n>>> bisect.insort(farm, 'turkey')\n>>> farm\n['cow', 'eggs', 'haystack', 'needle', 'pig', 'turkey']\n```", "```py\nimport bisect\nimport unittest\n\nclass SortedList(list):\n    def __init__(self, iterable):\n        super(SortedList, self).__init__(sorted(iterable))\n\n    def insort(self, item):\n        bisect.insort(self, item) def extend(self, other):\n        for item in other:\n            self.insort(item)\n\n    @staticmethod\n    def append(o):\n        raise RuntimeError(\"Cannot append to a sorted list\")\n\n    def index(self, value, start=None, stop=None):\n        place = bisect.bisect_left(self[start:stop], value)\n        if start:\n            place += start\n        end = stop or len(self)\n        if place < end and self[place] == value:\n            return place\n        raise ValueError(\"%s is not in list\" % value)\n\nclass TestSortedList(unittest.TestCase):\n    def setUp(self):\n        self.mylist = SortedList(\n            ['a', 'c', 'd', 'x', 'f', 'g', 'w']\n        )\n\n    def test_sorted_init(self):\n        self.assertEqual(sorted(['a', 'c', 'd', 'x', 'f', 'g', 'w']),\n                         self.mylist)\n\n    def test_sorted_insort(self):\n        self.mylist.insort('z')\n        self.assertEqual(['a', 'c', 'd', 'f', 'g', 'w', 'x', 'z'],\n                         self.mylist)\n        self.mylist.insort('b')\n        self.assertEqual(['a', 'b', 'c', 'd', 'f', 'g', 'w', 'x', 'z'],\n                         self.mylist)\n\n    def test_index(self):\n        self.assertEqual(0, self.mylist.index('a'))\n        self.assertEqual(1, self.mylist.index('c'))\n        self.assertEqual(5, self.mylist.index('w'))\n        self.assertEqual(0, self.mylist.index('a', stop=0))\n        self.assertEqual(0, self.mylist.index('a', stop=2))\n        self.assertEqual(0, self.mylist.index('a', stop=20))\n        self.assertRaises(ValueError, self.mylist.index, 'w', stop=3)\n        self.assertRaises(ValueError, self.mylist.index, 'a', start=3)\n        self.assertRaises(ValueError, self.mylist.index, 'a', start=333)\n\n    def test_extend(self):\n        self.mylist.extend(['b', 'h', 'j', 'c'])\n        self.assertEqual(\n            ['a', 'b', 'c', 'c', 'd', 'f', 'g', 'h', 'j', 'w', 'x']\n            self.mylist)\n```", "```py\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n```", "```py\n>>> p = Point(1, 2)\n>>> p.__dict__\n{'y': 2, 'x': 1}\n>>> p.z = 42\n>>> p.z\n42\n>>> p.__dict__\n{'y': 2, 'x': 1, 'z': 42}\n```", "```py\nclass Foobar(object):\n    def __init__(self, x):\n        self.x = x\n```", "```py\n$ python -m memory_profiler object.py\nFilename: object.py\n\nLine #    Mem usage    Increment   Line Contents\n     5                             @profile\n     6     9.879 MB     0.000 MB   def main():\n     7    50.289 MB    40.410 MB       f = [ Foobar(42) for i in range(100000) ]\n```", "```py\nstatic PyObject *\ntype_new(PyTypeObject *metatype, PyObject *args, PyObject *kwds)\n{\n    --snip--\n    /* Check for a __slots__ sequence variable in dict, and count it */\n    slots = _PyDict_GetItemId(dict, &PyId___slots__);\n    nslots = 0;\n    if (slots == NULL) {\n        if (may_add_dict)\n            add_dict++;\n        if (may_add_weak)\n            add_weak++;\n    } else {\n        /* Have slots */\n        /* Make it into a tuple */\n        if (PyUnicode_Check(slots))\n            slots = PyTuple_Pack(1, slots);\n        else\n            slots = PySequence_Tuple(slots);\n        /* Are slots allowed? */\n        nslots = PyTuple_GET_SIZE(slots);\n        if (nslots > 0 && base->tp_itemsize != 0) {\n            PyErr_Format(PyExc_TypeError,\n                         \"nonempty __slots__ \"\n                         \"not supported for subtype of '%s'\",\n                         base->tp_name);\n            goto error;\n        }\n        /* Copy slots into a list, mangle names and sort them.\n           Sorted names are needed for __class__ assignment.\n           Convert them back to tuple at the end.\n        */\n        newslots = PyList_New(nslots - add_dict - add_weak);\n        if (newslots == NULL)\n            goto error;\n        if (PyList_Sort(newslots) == -1) {\n            Py_DECREF(newslots);\n            goto error;\n        }\n        slots = PyList_AsTuple(newslots);\n        Py_DECREF(newslots);\n        if (slots == NULL)\n            goto error;\n    }\n    /* Allocate the type object */\n    type = (PyTypeObject *)metatype->tp_alloc(metatype, nslots);\n    --snip--\n    /* Keep name and slots alive in the extended type object */\n    et = (PyHeapTypeObject *)type;\n    Py_INCREF(name);\n    et->ht_name = name;\n    et->ht_slots = slots;\n    slots = NULL;\n    --snip--\n    return (PyObject *)type;\n```", "```py\nclass Foobar(object):\n    __slots__ = ('x',)\n\n    def __init__(self, x):\n        self.x = x\n```", "```py\n% python -m memory_profiler slots.py\nFilename: slots.py\n\nLine #    Mem usage    Increment   Line Contents\n     7                             @profile\n     8     9.879 MB     0.000 MB   def main():\n     9    21.609 MB    11.730 MB       f = [ Foobar(42) for i in range(100000) ]\n```", "```py\n>>> import collections\n>>> Foobar = collections.namedtuple('Foobar', ['x'])\n>>> Foobar = collections.namedtuple('Foobar', ['x', 'y'])\n>>> Foobar(42, 43) Foobar(x=42, y=43)\n>>> Foobar(42, 43).x\n42\n>>> Foobar(42, 43).x = 44\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute\n>>> Foobar(42, 43).z = 0\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Foobar' object has no attribute 'z'\n>>> list(Foobar(42, 43))\n[42, 43]\n```", "```py\n% python -m memory_profiler namedtuple.py\nFilename: namedtuple.py\n\nLine #    Mem usage    Increment   Line Contents\n     4                             @profile\n     5     9.895 MB     0.000 MB   def main():\n     6    23.184 MB    13.289 MB       f = [ Foobar(42) for i in range(100000) ]\n```", "```py\n>>> import math\n>>> _SIN_MEMOIZED_VALUES = {}\n>>> def memoized_sin(x):\n...    if x not in _SIN_MEMOIZED_VALUES:\n...        _SIN_MEMOIZED_VALUES[x] = math.sin(x)\n...    return _SIN_MEMOIZED_VALUES[x]\n>>> memoized_sin(1)\n0.8414709848078965\n>>> _SIN_MEMOIZED_VALUES\n{1: 0.8414709848078965}\n>>> memoized_sin(2)\n0.9092974268256817\n>>> memoized_sin(2)\n0.9092974268256817\n>>> _SIN_MEMOIZED_VALUES\n{1: 0.8414709848078965, 2: 0.9092974268256817}\n>>> memoized_sin(1)\n0.8414709848078965\n>>> _SIN_MEMOIZED_VALUES\n{1: 0.8414709848078965, 2: 0.9092974268256817}\n```", "```py\n>>> import functools\n>>> import math\n>>> @functools.lru_cache(maxsize=2)\n... def memoized_sin(x):\n...     return math.sin(x)\n...\n>>> memoized_sin(2)\n0.9092974268256817\n>>> memoized_sin.cache_info()\nCacheInfo(hits=0, misses=1, maxsize=2, currsize=1)\n>>> memoized_sin(2)\n0.9092974268256817\n>>> memoized_sin.cache_info()\nCacheInfo(hits=1, misses=1, maxsize=2, currsize=1)\n>>> memoized_sin(3)\n0.1411200080598672\n>>> memoized_sin.cache_info()\nCacheInfo(hits=1, misses=2, maxsize=2, currsize=2)\n>>> memoized_sin(4)\n-0.7568024953079282\n>>> memoized_sin.cache_info()\nCacheInfo(hits=1, misses=3, maxsize=2, currsize=2)\n>>> memoized_sin(3)\n0.1411200080598672\n>>> memoized_sin.cache_info()\nCacheInfo(hits=2, misses=3, maxsize=2, currsize=2)\n>>> memoized_sin.cache_clear()\n>>> memoized_sin.cache_info()\nCacheInfo(hits=0, misses=0, maxsize=2, currsize=0)\n```", "```py\n@profile\ndef read_random():\n    with open(\"/dev/urandom\", \"rb\") as source:\n        content = source.read(1024 * 10000)\n        content_to_write = content[1024:]\n    print(\"Content length: %d, content to write length %d\" %\n          (len(content), len(content_to_write)))\n    with open(\"/dev/null\", \"wb\") as target:\n        target.write(content_to_write)\n\nif __name__ == '__main__':\n    read_random()\n```", "```py\n$ python -m memory_profiler memoryview/copy.py\nContent length: 10240000, content to write length 10238976\nFilename: memoryview/copy.py\n\nMem usage    Increment   Line Contents\n                         @profile\n 9.883 MB     0.000 MB   def read_random():\n 9.887 MB     0.004 MB       with open(\"/dev/urandom\", \"rb\") as source:\n19.656 MB     9.770 MB           content = source.read(1024 * 10000)➊\n29.422 MB     9.766 MB           content_to_write = content[1024:]➋\n29.422 MB     0.000 MB       print(\"Content length: %d, content to write length %d\" %\n29.434 MB     0.012 MB             (len(content), len(content_to_write)))\n29.434 MB     0.000 MB       with open(\"/dev/null\", \"wb\") as target:\n29.434 MB     0.000 MB           target.write(content_to_write)\n```", "```py\n   >>> s = b\"abcdefgh\"\n   >>> view = memoryview(s)\n   >>> view[1]\n➊ 98 <1>\n   >>> limited = view[1:3]\n   >>> limited\n   <memory at 0x7fca18b8d460>\n   >>> bytes(view[1:3])\n   b'bc'\n```", "```py\n@profile\ndef read_random():\n    with open(\"/dev/urandom\", \"rb\") as source:\n        content = source.read(1024 * 10000)\n        content_to_write = memoryview(content)[1024:]\n    print(\"Content length: %d, content to write length %d\" %\n          (len(content), len(content_to_write)))\n    with open(\"/dev/null\", \"wb\") as target:\n        target.write(content_to_write)\n\nif __name__ == '__main__':\n    read_random()\n```", "```py\n$ python -m memory_profiler memoryview/copy-memoryview.py\nContent length: 10240000, content to write length 10238976\nFilename: memoryview/copy-memoryview.py\n\nMem usage    Increment   Line Contents\n                         @profile\n 9.887 MB     0.000 MB   def read_random():\n 9.891 MB     0.004 MB ➊     with open(\"/dev/urandom\", \"rb\") as source:\n19.660 MB     9.770 MB ➋        content = source.read(1024 * 10000)\n19.660 MB     0.000 MB           content_to_write = memoryview(content)[1024:]\n19.660 MB     0.000 MB       print(\"Content length: %d, content to write length %d\" %\n19.672 MB     0.012 MB             (len(content), len(content_to_write)))\n19.672 MB     0.000 MB       with open(\"/dev/null\", \"wb\") as target:\n19.672 MB     0.000 MB           target.write(content_to_write)\n```", "```py\n   import socket\n   s = socket.socket(...)\n   s.connect(...)\n➊ data = b\"a\" * (1024 * 100000) <1> while data:\n       sent = s.send(data)\n    ➋ data = data[sent:] <2>\n```", "```py\n   import socket\n   s = socket.socket(...)\n   s.connect(...)\n➊ data = b\"a\" * (1024 * 100000) <1>\n   mv = memoryview(data)\n   while mv:\n       sent = s.send(mv)\n    ➋ mv = mv[sent:] <2>\n```", "```py\n>>> ba = bytearray(8)\n>>> ba\nbytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n>>> with open(\"/dev/urandom\", \"rb\") as source:\n...     source.readinto(ba)\n...\n8\n>>> ba\nbytearray(b'`m.z\\x8d\\x0fp\\xa1')\n```", "```py\n   >>> ba = bytearray(8)\n➊ >>> ba_at_4 = memoryview(ba)[4:]\n   >>> with open(\"/dev/urandom\", \"rb\") as source:\n➋ ...     source.readinto(ba_at_4)\n   ...\n   4\n   >>> ba\n   bytearray(b'\\x00\\x00\\x00\\x00\\x0b\\x19\\xae\\xb2')\n```"]