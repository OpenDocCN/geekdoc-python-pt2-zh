["```py\n[\"The airlock\", 13, 5, True, False]\n```", "```py\n   # Escape - A Python Adventure\n   # by Sean McManus / www.sean.co.uk\n   # Typed in by PUT YOUR NAME HERE\n\n   import time, random, math\n\n   ###############\n   ## VARIABLES ##\n   ###############\n\n   WIDTH = 800 # window size\n   HEIGHT = 800\n\n   #PLAYER variables\n➊ PLAYER_NAME = \"Sean\" # change this to your name!\n   FRIEND1_NAME = \"Karen\" # change this to a friend's name!\n   FRIEND2_NAME = \"Leo\" # change this to another friend's name!\n   current_room = 31 # start room = 31\n\n➋ top_left_x = 100\n   top_left_y = 150\n\n➌ DEMO_OBJECTS = [images.floor, images.pillar, images.soil]\n\n   ###############\n   ##    MAP    ##\n   ###############  \n\n➍ MAP_WIDTH = 5\n   MAP_HEIGHT = 10\n   MAP_SIZE = MAP_WIDTH * MAP_HEIGHT\n\n➎ GAME_MAP = [ [\"Room 0 - where unused objects are kept\", 0, 0, False, False] ]\n\n   outdoor_rooms = range(1, 26)\n➏ for planetsectors in range(1, 26): #rooms 1 to 25 are generated here\n       GAME_MAP.append( [\"The dusty planet surface\", 13, 13, True, True] )\n\n➐ GAME_MAP += [\n           #[\"Room name\", height, width, Top exit?, Right exit?]\n           [\"The airlock\", 13, 5, True, False], # room 26\n           [\"The engineering lab\", 13, 13, False, False], # room 27\n           [\"Poodle Mission Control\", 9, 13, False, True], # room 28\n           [\"The viewing gallery\", 9, 15, False, False], # room 29\n           [\"The crew's bathroom\", 5, 5, False, False], # room 30\n           [\"The airlock entry bay\", 7, 11, True, True], # room 31\n           [\"Left elbow room\", 9, 7, True, False], # room 32\n           [\"Right elbow room\", 7, 13, True, True], # room 33\n           [\"The science lab\", 13, 13, False, True], # room 34\n           [\"The greenhouse\", 13, 13, True, False], # room 35\n           [PLAYER_NAME + \"'s sleeping quarters\", 9, 11, False, False], # room 36\n           [\"West corridor\", 15, 5, True, True], # room 37\n           [\"The briefing room\", 7, 13, False, True], # room 38\n           [\"The crew's community room\", 11, 13, True, False], # room 39\n           [\"Main Mission Control\", 14, 14, False, False], # room 40\n           [\"The sick bay\", 12, 7, True, False], # room 41\n           [\"West corridor\", 9, 7, True, False], # room 42\n           [\"Utilities control room\", 9, 9, False, True], # room 43\n           [\"Systems engineering bay\", 9, 11, False, False], # room 44\n           [\"Security portal to Mission Control\", 7, 7, True, False], # room 45\n➑         [FRIEND1_NAME + \"'s sleeping quarters\", 9, 11, True, True], # room 46\n           [FRIEND2_NAME + \"'s sleeping quarters\", 9, 11, True, True], # room 47\n           [\"The pipeworks\", 13, 11, True, False], # room 48\n           [\"The chief scientist's office\", 9, 7, True, True], # room 49\n           [\"The robot workshop\", 9, 11, True, False] # room 50\n           ]\n\n   # simple sanity check on map above to check data entry\n➒ assert len(GAME_MAP)-1 == MAP_SIZE, \"Map size and GAME_MAP don't match\"\n```", "```py\n###############\n## VARIABLES ##\n###############\n```", "```py\n[\"The dusty planet surface\", 13, 13, True, True]\n```", "```py\n   --snip--\n   # simple sanity check on map above to check data entry\n   assert len(GAME_MAP)-1 == MAP_SIZE, \"Map size and GAME_MAP don't match\"\n\n   ###############\n   ## MAKE MAP  ##\n   ###############\n\n➊ def get_floor_type():\n       if current_room in outdoor_rooms:\n           return 2 # soil\n       else:\n           return 0 # tiled floor       \n\n   def generate_map():\n   # This function makes the map for the current room,\n   # using room data, scenery data and prop data.\n       global room_map, room_width, room_height, room_name, hazard_map\n       global top_left_x, top_left_y, wall_transparency_frame\n➋     room_data = GAME_MAP[current_room]\n       room_name = room_data[0]\n       room_height = room_data[1]\n       room_width = room_data[2]\n\n➌     floor_type = get_floor_type()\n       if current_room in range(1, 21):\n           bottom_edge = 2 #soil\n           side_edge = 2 #soil\n       if current_room in range(21, 26):\n           bottom_edge = 1 #wall\n           side_edge = 2 #soil\n       if current_room > 25:\n           bottom_edge = 1 #wall\n           side_edge = 1 #wall\n\n       # Create top line of room map.\n➍     room_map=[[side_edge] * room_width]\n       # Add middle lines of room map (wall, floor to fill width, wall).\n➎     for y in range(room_height - 2):\n           room_map.append([side_edge]\n                           + [floor_type]*(room_width - 2) + [side_edge])\n       # Add bottom line of room map.\n➏     room_map.append([bottom_edge] * room_width)\n\n       # Add doorways.\n➐     middle_row = int(room_height / 2)\n       middle_column = int(room_width / 2)\n\n➑     if room_data[4]: # If exit at right of this room\n           room_map[middle_row][room_width - 1] = floor_type\n           room_map[middle_row+1][room_width - 1] = floor_type\n           room_map[middle_row-1][room_width - 1] = floor_type\n\n➒     if current_room % MAP_WIDTH != 1: # If room is not on left of map\n           room_to_left = GAME_MAP[current_room - 1]\n           # If room on the left has a right exit, add left exit in this room\n           if room_to_left[4]:\n               room_map[middle_row][0] = floor_type\n               room_map[middle_row + 1][0] = floor_type\n               room_map[middle_row - 1][0] = floor_type\n\n➓     if room_data[3]: # If exit at top of this room\n           room_map[0][middle_column] = floor_type\n           room_map[0][middle_column + 1] = floor_type\n           room_map[0][middle_column - 1] = floor_type\n\n       if current_room <= MAP_SIZE - MAP_WIDTH: # If room is not on bottom row\n           room_below = GAME_MAP[current_room+MAP_WIDTH]\n           # If room below has a top exit, add exit at bottom of this one\n           if room_below[3]:\n               room_map[room_height-1][middle_column] = floor_type\n               room_map[room_height-1][middle_column + 1] = floor_type\n               room_map[room_height-1][middle_column - 1] = floor_type\n```", "```py\n[\n[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\n```", "```py\n[\"The airlock\", 13, 5, True, False]\n```", "```py\n>>> print([1] * 10)\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n```", "```py\nif room_data[4]:\n```", "```py\nif room_data[4] == True:\n```", "```py\n>>> generate_map()\n>>> print(room_map)\n[[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0,\n0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1,\n1, 1, 1]]\n```", "```py\n>>> current_room = 45\n>>> generate_map()\n>>> print(room_map)\n[[1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1],\n[1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1],\n[1, 1, 0, 0, 0, 1, 1]]\n```", "```py\n               room_map[room_height-1][middle_column] = floor_type \n               room_map[room_height-1][middle_column + 1] = floor_type\n               room_map[room_height-1][middle_column - 1] = floor_type\n\n   ###############\n   ## EXPLORER  ##\n   ###############\n\n   def draw():\n       global room_height, room_width, room_map\n➊     generate_map()\n       screen.clear()\n\n➋     for y in range(room_height):\n           for x in range(room_width):\n               image_to_draw = DEMO_OBJECTS[room_map[y][x]]\n               screen.blit(image_to_draw,\n                   (top_left_x + (x*30),\n                   top_left_y + (y*30) - image_to_draw.get_height()))\n\n➌ def movement():\n       global current_room\n       old_room = current_room\n\n       if keyboard.left:\n           current_room -= 1\n       if keyboard.right:\n           current_room += 1\n       if keyboard.up:\n           current_room -= MAP_WIDTH\n       if keyboard.down:\n           current_room += MAP_WIDTH\n\n➍     if current_room > 50:\n➎         current_room = 50\n       if current_room < 1:\n           current_room = 1\n\n➏     if current_room != old_room:\n➐         print(\"Entering room:\" + str(current_room))\n\n➑ clock.schedule_interval(movement, 0.1)\n```"]