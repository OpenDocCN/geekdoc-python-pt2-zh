["```py\n**conda activate chatting**\n```", "```py\n(chatting) c:\\>\n```", "```py\n(chatting) c:\\> **pip install SpeechRecognition** \n```", "```py\n(chatting) c:\\> **conda install pyaudio** \n```", "```py\n**conda activate chatting**\n```", "```py\n**pip install SpeechRecognition** \n```", "```py\n**conda install pyaudio** \n```", "```py\n**import speech_recognition**\n```", "```py\nimport speech_recognition as sr\nspeech = sr.Recognizer()\nprint('Python is listening...')\nwith sr.Microphone() as source:\n    speech.adjust_for_ambient_noise(source)\n    audio = speech.listen(source)\n    inp = speech.recognize_google(audio)\nprint(f'You just said {inp}.') \n```", "```py\nPython is listening...\nYou just said **how are you**.\n```", "```py\nimport speech_recognition as sr\n\nspeech = sr.Recognizer()\nwhile True:\n    print('Python is listening...')\n    inp = \"\" \n with sr.Microphone() as source:\n        speech.adjust_for_ambient_noise(source)\n      1 try:\n            audio = speech.listen(source)\n            inp = speech.recognize_google(audio)\n        except sr.UnknownValueError:\n            pass\n        except sr.RequestError:\n            pass        \n        except sr.WaitTimeoutError:\n            pass\n  2 print(f'You just said {inp}.')\n    if inp == \"stop listening\":\n        print('Goodbye!')\n        break\n```", "```py\nPython is listening...\nYou just said **hello**.\nPython is listening...\nYou just said **how are you**.\nPython is listening...\nYou just said **today is a Saturday**.\nPython is listening...\nYou just said **stop listening**.\nGoodbye!\n```", "```py\n**import webbrowser**\n**webbrowser.open(\"http://\"+\"wsj.com\")**\n```", "```py\nimport webbrowser\nimport speech_recognition as sr\n\nspeech = sr.Recognizer()\n1 def voice_to_text():\n    voice_input = \"\" \n    with sr.Microphone() as source:\n        speech.adjust_for_ambient_noise(source)\n        try:\n            audio = speech.listen(source)\n            voice_input = speech.recognize_google(audio)\n        except sr.UnknownValueError:\n            pass\n        except sr.RequestError:\n            pass        \n        except sr.WaitTimeoutError:\n            pass\n    return voice_input \n2 while True:   \n    print('Python is listening...')\n    inp = voice_to_text()\n    print(f'You just said {inp}.')\n    if inp == \"stop listening\":\n        print('Goodbye!')\n        break\n    elif \"browser\" in inp: \n        inp = inp.replace('browser ','')\n        webbrowser.open(\"http://\"+inp)\n        continue\n```", "```py\nPython is listening...\nYou just said **browser cnn.com**.\nPython is listening...\nYou just said **browser pbs.org**.\nPython is listening...\nYou just said **stop listening**.\nGoodbye!\n```", "```py\n webbrowser.open(\"http://\"+inp)\n```", "```py\n webbrowser.open(\"http://**google.com/search?q=**\"+inp)\n```", "```py\nimport os\nimport pathlib\nimport platform\n\nmyfolder = pathlib.Path.cwd()\nprint(myfolder)\nmyfile = myfolder/'files'/'example.txt'\nprint(myfile)\nif platform.system() == \"Windows\":\n    os.system(f\"explorer {myfile}\") \nelif platform.system() == \"Darwin\":\n    os.system(f\"open {myfile}\") \nelse:\n    os.system(f\"xdg-open {myfile}\") \n```", "```py\nC:\\chat\\mpt\\ch03\nC:\\chat\\mpt\\ch03\\files\\example.txt\n```", "```py\nimport os\nimport pathlib\nimport platform\n\nimport speech_recognition as sr \n\nspeech = sr.Recognizer()\ndirectory = pathlib.Path.cwd()\n\n1 def voice_to_text():\n    voice_input = \"\" \n    with sr.Microphone() as source:\n        speech.adjust_for_ambient_noise(source)\n        try:\n audio = speech.listen(source)\n            voice_input = speech.recognize_google(audio)\n        except sr.UnknownValueError:\n            pass\n        except sr.RequestError:\n            pass        \n        except sr.WaitTimeoutError:\n            pass\n    return voice_input\ndef open_file(filename):\n    if platform.system() == \"Windows\":\n        os.system(f\"explorer {directory}\\\\files\\\\{filename}\") \n    elif platform.system() == \"Darwin\":\n        os.system(f\"open {directory}/files/{filename}\") \n    else:\n        os.system(f\"xdg-open {directory}/files/{filename}\")\n2 while True:\n    print('Python is listening...')\n    inp = voice_to_text().lower()\n    print(f'You just said {inp}.')\n    if inp == \"stop listening\":\n        print('Goodbye!')\n        break\n    elif \"open pdf\" in inp: \n        inp = inp.replace('open pdf ','')\n        myfile = f'{inp}.pdf'\n        open_file(myfile)\n        continue\n    elif \"open word\" in inp: \n        inp = inp.replace('open word ','')\n        myfile = f'{inp}.docx'\n        open_file(myfile)\n        continue\n    elif \"open excel\" in inp: \n        inp = inp.replace('open excel ','')\n        myfile = f'{inp}.xlsx'\n        open_file(myfile)\n        continue\n    elif \"open powerpoint\" in inp: \n        inp = inp.replace('open powerpoint ','')\n        myfile = f'{inp}.pptx'\n        open_file(myfile)\n        continue\n    elif \"open audio\" in inp: \n        inp = inp.replace('open audio ','')\n        myfile = f'{inp}.mp3'\n        open_file(myfile)\n        continue\n```", "```py\nPython is listening...\nYou just said **open pdf desk**.\nPython is listening...\nYou just said **open word lessons**.\nPython is listening...\nYou just said \nPython is listening...\nYou just said **open excel book**.\nPython is listening...\nYou just said **open powerpoint graduation**.\nPython is listening...\nYou just said **open audio presentation**.\nPython is listening...\nYou just said **stop listening**.\nGoodbye!\n```", "```py\n# Get rid of ALSA lib error messages in Linux\n1 import platform\nimport speech_recognition as sr\n\nif  platform.system() == \"Linux\":\n    from ctypes import CFUNCTYPE, c_char_p, c_int, cdll\n\n    # Define error handler\n    error_handler = CFUNCTYPE\\\n    (None, c_char_p, c_int, c_char_p, c_int, c_char_p)\n    # Don't do anything if there is an error message\n  2 def py_error_handler(filename, line, function, err, fmt):\n      pass\n    # Pass to C\n    c_error_handler = error_handler(py_error_handler)\n    asound = cdll.LoadLibrary('libasound.so')\n    asound.snd_lib_error_set_handler(c_error_handler)\n\n# Now define the voice_to_text() function for all platforms\n3 import speech_recognition as sr\n\ndef voice_to_text():\n    voice_input = \"\" \n    with sr.Microphone() as source:\n        speech.adjust_for_ambient_noise(source)\n        try:\n            audio = speech.listen(source)\n            voice_input = speech.recognize_google(audio)\n        except sr.UnknownValueError:\n            pass\n        except sr.RequestError:\n            pass        \n        except sr.WaitTimeoutError:\n            pass\n    return voice_input\n```", "```py\nALSA lib pcm.c:2212:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.rear\nALSA lib pcm.c:2212:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.center_lfe\nALSA lib pcm.c:2212:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.side\nALSA lib audio/pcm_bluetooth.c:1613:(audioservice_expect) \nBT_GET_CAPABILITIES failed : Input/output error(5)\nALSA lib audio/pcm_bluetooth.c:1613:(audioservice_expect) \nBT_GET_CAPABILITIES failed : Input/output error(5)\nALSA lib audio/pcm_bluetooth.c:1613:(audioservice_expect) \nBT_GET_CAPABILITIES failed : Input/output error(5)\nALSA lib audio/pcm_bluetooth.c:1613:(audioservice_expect) \nBT_GET_CAPABILITIES failed : Input/output error(5)\nALSA lib pcm_dmix.c:957:(snd_pcm_dmix_open) \nThe dmix plugin supports only playback stream\nALSA lib pcm_dmix.c:1018:(snd_pcm_dmix_open) unable to open slave\n```", "```py\n# Make sure you put mysr.py in the same folder as this script\nfrom mysr import voice_to_text\n\nwhile True:\n    print('Python is listening...')\n  1 inp = voice_to_text()\n    print(f'You just said {inp}.')\n    if inp == \"stop listening\":\n        print('Goodbye!')\n        break\n```", "```py\nconda activate chatting\n```", "```py\npip install pyttsx3\n```", "```py\nconda activate chatting\n```", "```py\npip install gTTs\n```", "```py\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say(\"hello, how are you?\")\nengine.runAndWait()\n```", "```py\nbrew install mpg123\n```", "```py\nsudo apt-get update\nsudo apt-get install mpg123\n```", "```py\ngtts-cli --nocheck \"hello, how are you?\" | mpg123 -q -\n```", "```py\nimport os\n\nos.system('gtts-cli --nocheck \"hello, how are you?\" | mpg123 -q -')\n```", "```py\nimport pyttsx3\n\nengine = pyttsx3.init()\n1 while True:\n    inp = input(\"What do you want to covert to speech?\\n\")\n    if inp == \"done\":\n         print(f\"You just typed in {inp}; goodbye!\")\n         engine.say(f\"You just typed in {inp}; goodbye!\")\n         engine.runAndWait()        \n         break\n  2 else:\n        print(f\"You just typed in {inp}\")\n        engine.say(f\"You just typed in {inp}\")\n        engine.runAndWait()\n        continue\n```", "```py\nWhat do you want to covert to speech?\n**Python is great!**\nYou just typed in Python is great!\n\nWhat do you want to covert to speech?\n**Hello, world!**\nYou just typed in Hello, world!\n\nWhat do you want to covert to speech?\n**done**\nYou just typed in done; goodbye!\n```", "```py\nimport os\n\nwhile True: 1\n    inp = input(\"What do you want to covert to speech?\\n\")\n    if inp == \"done\":\n        print(f\"You just typed in {inp}; goodbye!\")\n        os.system(f'gtts-cli --nocheck \"You just typed in {inp}; goodbye!\" | mpg123 -q -')\n        break\n    else: 2\n        print(f\"You just typed in {inp}\")\n        os.system(f'gtts-cli --nocheck \"You just typed in {inp}\" | mpg123 -q -')\n        continue\n```", "```py\nWhat do you want to covert to speech?\n**Python is great!**\nYou just typed in Python is great!\n\nWhat do you want to covert to speech?\n**Hello, world!**\nYou just typed in Hello, world!\n\nWhat do you want to covert to speech?\n**done**\nYou just typed in done; goodbye!\n```", "```py\n# Make sure you put mysr.py in the same folder as this script\nfrom mysr import voice_to_text\n\nimport platform 1\nif platform.system() == \"Windows\":\n    import pyttsx3\n    engine = pyttsx3.init()\nelse:\n    import os\n\nwhile True:   \n    print('Python is listening...')\n    inp = voice_to_text() 2\n    if inp == \"stop listening\":\n        print(f'You just said {inp}; goodbye!')\n        if platform.system() == \"Windows\":\n engine.say(f'You just said {inp}; goodbye!')\n            engine.runAndWait()\n        else:\n            os.system(f'gtts-cli --nocheck \"You just said {inp}; goodbye!\" | mpg123 -q -')\n        break\n\n    else:\n        print(f'You just said {inp}')\n        if platform.system() == \"Windows\": 3\n            engine.say(f'You just said {inp}')\n            engine.runAndWait()\n        else:\n            os.system(f'gtts-cli --nocheck \"You just said {inp}\" | mpg123 -q -')\n        continue\n```", "```py\nPython is listening...\nYou just said **hello**\nPython is listening...\nYou just said **how are you**\nPython is listening...\nYou just said **stop listening**; goodbye!\n```", "```py\nimport pyttsx3\n\nengine = pyttsx3.init()\n1 voices = engine.getProperty('voices')\nfor voice in voices:\n    print(voice)\n2 rate = engine.getProperty(\"rate\")\nprint(\"the default speed of the speech is\", rate)\nvol = engine.getProperty(\"volume\")\nprint(\"the default volume of the speech is\", vol)\n```", "```py\n<Voice id=HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_EN-US_DAVID_11.0\n          name=Microsoft David Desktop - English (United States)\n          languages=[]\n          gender=None\n          age=None>\n<Voice id=HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_EN-US_ZIRA_11.0\n          name=Microsoft Zira Desktop - English (United States)\n          languages=[]\n          gender=None\n          age=None>\nthe default speed of the speech is 200\nthe default volume of the speech is 1.0\n```", "```py\nimport pyttsx3\nengine = pyttsx3.init()\nvoice_id = 1\n1 voices = engine.getProperty('voices')\nengine.setProperty('voice', voices[voice_id].id)\nengine.setProperty('rate', 150)\nengine.setProperty('volume', 1.2)\nengine.say(\"This is a test of my speech id, speed, and volume.\")\nengine.runAndWait()\n```", "```py\nimport os\n\nos.system('gtts-cli --nocheck --slow \"hello, how are you?\" | mpg123 -q -')\n```", "```py\n# Import the platform module to identify your OS\nimport platform\n\n# If you are using Windows, use pyttsx3 for text to speech\n1 if platform.system() == \"Windows\":\n    import pyttsx3\n  2 try:\n        engine = pyttsx3.init()\n    except ImportError:\n        pass\n    except RuntimeError:\n        pass    \n    voices = engine.getProperty('voices')\n    engine.setProperty('voice', voices[1].id)\n    engine.setProperty('rate', 150)\n    engine.setProperty('volume', 1.2)\n def print_say(txt):\n        print(txt)\n        engine.say(txt)\n        engine.runAndWait()\n\n# If you are using Mac or Linux, use gtts for text to speech\n3 if  platform.system() == \"Darwin\" or platform.system() == \"Linux\":\n    import os\n\n    def print_say(texts):\n        print(texts)\n        texts = texts.replace('\"','')\n        texts = texts.replace(\"'\",\"\")\n        os.system(f'gtts-cli --nocheck \"{texts}\" | mpg123 -q -')\n```", "```py\n# Put mysr.py and mysay.py in the same folder as this script\nfrom mysr import voice_to_text\nfrom mysay import print_say\n\nwhile True:   \n    print('Python is listening...')\n    inp = voice_to_text()\n    if inp == \"stop listening\":\n        print_say(f'You just said {inp}; goodbye!')\n        break\n    else:\n        print_say(f'You just said {inp}')\n        continue\n```", "```py\nPython is listening...\nYou just said **hello again**\nPython is listening...\nYou just said **this one is using a text-to-speech module**\nPython is listening...\nYou just said **stop listening**; goodbye!\n```", "```py\n# Put mysr.py and mysay.py in the same folder as this script\nfrom mysr import voice_to_text\nfrom mysay import print_say\n\n# Ask the length of the rectangle\n1 print_say('What is the length of the rectangle?')\n# Convert the voice input to a variable inp1\ninp1 = voice_to_text()\nprint_say(f'You just said {inp1}.')\n# Ask the width of the rectangle\nprint_say('What is the width of the rectangle?')\n# Save the answer as inp2\ninp2 = voice_to_text()\nprint_say(f'You just said {inp2}.')\n# Calculate the area\n2 area = float(inp1)*float(inp2)\n# Print and speak the result\nprint_say(f'The area of the rectangle is {area}.')\n```", "```py\nWhat is the length of the rectangle?\nYou just said **5.**\nWhat is the width of the rectangle?\nYou just said **3.**\nThe area of the rectangle is 15.0.\n```", "```py\nStorm Dorian likely to strengthen into hurricane\n\nThomson Reuters\nBY BRENDAN O'BRIEN Aug 25th 2019 3:49PM\n\nTropical Storm Dorian was likely to strengthen into a hurricane during the next two days as it churned westward in the Caribbean Sea, putting Puerto Rico, the Lesser Antilles and the Virgin Islands on alert, forecasters said on Sunday.\n\nThe storm, 465 miles (750 km) east-southeast of Barbados, packed 40 mph winds as it headed west at 14 mph. It was forecast to be near the central Lesser Antilles late on Monday or early Tuesday, the National Hurricane Center (NHC) said in a midday advisory on Sunday.\n\n\"Right now, it's a tropical storm and we are expecting it to strengthen close to or reaching hurricane intensity as it approaches,\" NHC meteorologist Michael Brennan told Reuters.\n\nDorian was expected to turn toward the west-northwest on Monday and continue on that path through Tuesday night, the NHC said.\n\nAs of Sunday afternoon, Barbados was under a tropical storm warning while a tropical storm watch was in effect for St. Lucia and St. Vincent and the Grenadines.\n\nThe NHC was likely to issue additional watches for portions of the Windward and Leeward Islands on Sunday, Brennan said, noting that Puerto Rico, the Virgin Islands and Hispaniola should monitor Dorian's progress.\n\n\"We are approaching the peak of the hurricane season so everybody in the Caribbean and along the U.S. South, Gulf and East Coast needs to be aware and follow these systems,\" Brennan said. Dorian's winds could weaken as it passes south of Puerto Rico and approaches Hispaniola. Many Caribbean islands are likely to receive 2 to 4 inches (5 to 10 cm) of rain, but some part of the\nLesser Antilles islands could get 6 inches, the NHC said.\n```", "```py\n# Put mysay.py in the same folder as this script\nfrom mysay import print_say\nimport pathlib\n\n# Open the file, and read the content of the text file\n1 myfile = pathlib.Path.cwd() / 'files' / 'storm.txt'\nwith open(myfile,'r') as f:\n      content = f.read()\n\n# Let Python speak the text in the file\nprint_say(content)\n```", "```py\nfrom .mysr import voice_to_text\nfrom .mysay import print_say\n```", "```py\nfrom setuptools import setup\nsetup(name='mptpkg',\nversion='0.1',\ndescription='Install local package for Make Python Talk',\nauthor='Mark Liu',\nauthor_email='mark.liu@uky.edu',\npackages=['mptpkg'],\nzip_safe=False)\n```", "```py\n**pip install -e** `path-to-mpt`\n```", "```py\npip install -e C:\\mpt\n```", "```py\npip install -e /home/mark/Desktop/mpt\n```", "```py\n# Import functions from the local package mptpkg\nfrom mptpkg import voice_to_text\nfrom mptpkg import print_say\n\nwhile True:\n    print('Python is listening...')\n    inp = voice_to_text()\n    if inp == \"stop listening\":\n        print_say(f'you just said {inp}; goodbye!')\n        break\n    else:\n        print_say(f'you just said {inp}')\n        continue\n```", "```py\nPython is listening...\nyou just said **how are you**\nPython is listening...\nyou just said **I am testing a python package**\nPython is listening...\nyou just said **stop listening**; goodbye! \n```", "```py\n1 import time\nimport sys\n\n# Import functions from the local package mptpkg\nfrom mptpkg import voice_to_text\nfrom mptpkg import print_say\n\n# Print and announce the rules of the game in a human voice\n2 print_say('''Think of an integer, \n      bigger or equal to 1 but smaller or equal to 9,\n      and write it on a piece of paper''')\nprint_say(\"You have 5 seconds to write your number down\")\n# Wait for five seconds for you to write down the number\ntime.sleep(5)\nprint_say('''Now let's start. I will guess a number and you can say: \n    too high, that is right, or too small''')\n# The script asks in a human voice whether the number is 5\nprint_say(\"Is it 5?\")\n# The script is trying to get your response and save it as re1\n# Your response has to be 'too high', 'that is right', or 'too small'\n3 while True:\n    re1 = voice_to_text()\n    print_say(f\"You said {re1}\")\n    if re1 in (\"too high\", \"that is right\", \"too small\"):\n        break\n# If you say \"that is right\", game over\n    if re1 == \"that is right\":\n        print_say(\"Yay, lucky me!\")\n        sys.exit\n`--snip--`\n```", "```py\n`--snip--`\n# If you say \"too high\", the computer keeps guessing \nelif re1 == \"too high\":\n    # The computer guesses 3 the second round\n    print_say(\"Is it 3?\")\n    # The computer is trying to get your response to the second guess\n    while True:\n        re2 = voice_to_text()\n        print_say(f\"You said {re2}\")\n        if re2 in (\"too high\", \"that is right\", \"too small\"):\n            break\n    # If the second guess is right, game over\n    if re2 == \"that is right\":\n        print_say(\"Yay, lucky me!\")\n        sys.exit\n    # If the second guess is too small, the computer knows it's 4\n    elif re2 == \"too small\":\n        print_say(\"Yay, it is 4!\")\n        sys.exit\n    # If the second guess is too high, the computer guesses the third time\n    elif re2 == \"too high\":\n        # The third guess is 1\n        print_say(\"Is it 1?\")\n        # The computer is getting your response to the third guess\n        while True:\n            re3 = voice_to_text()\n            print_say(f\"You said {re3}\")\n if re3 in (\"too high\", \"that is right\", \"too small\"):\n                break\n        # If the third guess is too small, the computer knows it's 2\n        if re3 == \"too small\":\n            print_say(\"It is 2!\")\n            sys.exit\n        # If the third guess is right, game over\n        elif re3 == \"that is right\":\n            print_say(\"Yay, lucky me!\")\n            sys.exit\n`--snip--`\n```", "```py\n`--snip--`\n# If you say \"too small\", the computer keeps guessing \nelif re1 == \"too small\":\n    # The computer guesses 7 the second round\n    print_say(\"Is it 7?\")\n    # The computer is trying to get your response to the second guess\n    while True:\n        re2 = voice_to_text()\n        print_say(f\"You said {re2}\")\n        if re2 in (\"too high\", \"that is right\", \"too small\"):\n            break\n    # If the second guess is right, game over\n    if re2 == \"that is right\":\n        print_say(\"Yay, lucky me!\")\n        sys.exit\n    # If the second guess is too high, the computer knows it's 6\n    elif re2 == \"too high\":\n        print_say(\"Yay, it is 6!\")\n        sys.exit\n    # If the second guess is too small, the computer guesses the third time\n    elif re2 == \"too small\":\n        # The third guess is 8\n print_say(\"Is it 8?\")\n        while True:\n            re3 = voice_to_text ()\n            print_say(f\"You said {re3}\")\n            if re3 in (\"too high\", \"that is right\", \"too small\"):\n                break\n        # If the third guess is too small, the computer knows it's 9\n        if re3 == \"too small\":\n            print_say(\"It is 9!\")\n            sys.exit\n        # If the third guess is right, game over\n        elif re3 == \"that is right\":\n            print_say(\"Yay, lucky me!\")\n            sys.exit\n```", "```py\nPlease think of an integer,\nbigger or equal to 1 but smaller or equal to 9,\nand write on a piece of paper\nYou have 5 seconds to write it down\nNow let's start. I will guess a number and you can say:\ntoo high, that is right, or too small\nIs it 5?\nYou said **too small**\nIs it 7?\nYou said **too small**\nIs it 8?\nYou said **that is right**\nYay, lucky me!\n```", "```py\n`--snip--`\n1 <div class=\"item-info\">\n    <div class=\"slug-wrap\">\n    <h3 class=\"slug\">\n<a href=\"https://www.npr.org/series/821003492/the-national-conversation-with-\nall-things-considered\">The National Conversation With All Things Considered\n</a>\n</h3>\n    </div>\n2 <h2 class=\"title\">\n<a href=\"https://www.npr.org/2020/04/28/847585398/answering-your-coronavirus-\nquestions-new-symptoms-economy-and-virtual-celebratio\" data-\nmetrics='{\"action\":\"Click Featured Story Headline 1-\n3\",\"category\":\"Aggregation\"}' >Answering Your Coronavirus Questions: New \nSymptoms, Economy And Virtual Celebrations\n</a>\n</h2>\n3 <p class=\"teaser\">\n<a href=\"https://www.npr.org/2020/04/28/847585398/answering-your-coronavirus-\nquestions-new-symptoms-economy-and-virtual-celebratio\"><time datetime=\"2020-\n04-28\"><span class=\"date\">April 28, 2020 &#149; </span></time>On this \nbroadcast of <em>The National Conversation, </em>we answer your questions \nabout the economy, mental health and new symptoms of COVID-19\\. We'll also \nlook at how people are celebrating big life events.\n\n</a>\n</p>\n</div>\n`--snip--`\n```", "```py\n# Import needed modules\nimport requests\nimport bs4\n\n# Obtain the source code from the NPR news website\n1 res = requests.get('https://www.npr.org/sections/news/')\nres.raise_for_status()\n# Use beautiful soup to parse the code\nsoup = bs4.BeautifulSoup(res.text, 'html.parser')\n# Get the div tags that contain titles and teasers\ndiv_tags = soup.find_all('div',class_=\"item-info\")\n# Index different news\n2 news_index = 1\n# Go into each div tag to retrieve the title and the teaser\n3 for div_tag in div_tags:\n    # Print the news index to separate different news\n    print(f'News Summary {news_index}')\n    # Retrieve and print the h2 tag that contains the title\n    h2tag = div_tag.find('h2', class_=\"title\")\n    print(h2tag.text)\n    # Retrieve and print the p tag that contains the teaser\n    ptag = div_tag.find('p', class_=\"teaser\")\n    print(ptag.text)\n    # Limit to the first 10 news summaries\n    news_index += 1\n    if news_index>10:\n        break\n```", "```py\nNews Summary 1\nAnswering Your Coronavirus Questions: New Symptoms, Economy And Virtual Celebrations\nApril 28, 2020 • On this broadcast of The National Conversation, we answer your questions \nabout the economy, mental health and new symptoms of COVID-19\\. We'll also look at how people \nare celebrating big life events.\nNews Summary 2\nMore Essential Than Ever, Low-Wage Workers Demand More\nApril 28, 2020 • In this lockdown, low-wage workers have been publicly declared \"essential\" —\nup there with doctors and nurses. But the workers say their pay, benefits and protections \ndon't reflect it.\nNews Summary 3\nWe Asked All 50 States About Their Contact Tracing Capacity. Here's What We Learned\nApril 28, 2020 • To safely reopen without risking new COVID-19 outbreaks, states need enough \nstaffing to do the crucial work of contact tracing. We surveyed public health agencies to \nfind out how much they have.\nNews Summary 4\nCoronavirus Has Now Killed More Americans Than Vietnam War\nApril 28, 2020 • The number of lives taken by COVID-19 in the U.S. has reached a grim \nmilestone: More people have died of the disease than the 58,220 Americans who perished in the \nVietnam War.\n`--snip--`\n```", "```py\n# Import needed modules\nimport requests\nimport bs4\nimport sys\n\n# Import functions from the local package mptpkg\nfrom mptpkg import voice_to_text\nfrom mptpkg import print_say\n# Define the news_teaser() function\n1 def news_teaser():\n `--snip--`\n      2 print_say(f'News Summary {news_index}')\n        h2tag = div_tag.find('h2', class_=\"title\")\n        print_say(h2tag.text)\n        ptag = div_tag.find('p', class_=\"teaser\")\n        print_say(ptag.text)\n        `--snip--`\n# Print and ask you if you like to hear the news summary\nprint_say(\"Would you like to hear the NPR news summary?\")\n# Capture your voice command\ninp = voice_to_text().lower()\n# If you answer yes, activate the newscast\nif inp == \"yes\":\n    news_teaser()\n# Otherwise, exit the script\nelse: \n    sys.exit\n```", "```py\n**pip install wikipedia**\n```", "```py\nimport wikipedia\n\nmy_query = input(\"What do you want to know?\\n\")\nanswer = wikipedia.summary(my_query)\nprint(answer)\n```", "```py\nWhat do you want to know? \n**U.S. China trade war**\nChina and the United States have been engaged in a trade war through increasing tariffs and other measures since 2018\\. Hong Kong economics professor Lawrence J. Lau argues that a major cause is the growing battle between China and the U.S. for global economic and technological dominance. He argues, \"It is also a reflection of the rise of populism, isolationism, nationalism and protectionism almost everywhere in the world, including in the US.\"\n```", "```py\nimport wikipedia\n\n# Import functions from the local package mptpkg\nfrom mptpkg import voice_to_text\nfrom mptpkg import print_say\n\n# Ask what you want to know\n1 print_say(\"What do you want to know?\")\n# Capture your voice input\n2 my_query = voice_to_text()\nprint_say (f\"you said {my_query}\")\n# Obtain answer from Wikipedia\nans = wikipedia.summary(my_query)\n# Say the answer in a human voice\nprint_say(ans[0:200])\n```", "```py\nWhat do you want to know? \nyou said **U.S. federal reserve bank** \nThe Federal Reserve System (also known as the Federal Reserve or simply the \nFed) is the central banking system of the United States of America. It was \ncreated on December 23,\n1913, with the enactment\n```", "```py\nimport os\n\nwith os.scandir(\"./chat\") as files:\n    for file in files:\n        print(file.name)\n```", "```py\nbook.xlsx \ndesk.pdf \nstorm.txt \ngraduation.pptx\n`--snip--`\nHilaryDuffSparks.mp3 \ncountry\nclassic\nlessons.docx\nSelenaGomezWolves.mp3\nTheHeartWantsWhatItWantsSelenaGomez.mp3\n```", "```py\n# Import the required modules\nimport os\nimport random\nfrom pygame import mixer\n\n# Import functions from the local package mptpkg\nfrom mptpkg import voice_to_text\nfrom mptpkg import print_say\n\n# Start an infinite loop to take your voice commands\n1 while True:\n    print_say(\"how may I help you?\")\n    inp = voice_to_text()\n    print_say(f\"you just said {inp}\")\n    # Stop the script if you say 'stop listening'\n    if inp == \"stop listening\":\n        print_say(\"Goodbye! \")\n        break\n    # If 'play' is in voice command, music mode is activated\n  2 elif \"play\" in inp:\n        # Remove the word play from voice command\n      3 inp = inp.replace('play ','')\n        # Separate first and last names\n        names = inp.split()\n        # Extract the first name\n        Firstname = names[0]\n        # Extract the last name\n        if len(names)>1:\n            lastname = names[1]\n        # If no last name, use the first name as last name;  \n        else:\n            lastname = firstname\n        # Create a list to contain songs \n        mysongs = []\n        # If either first name or last name in the file name, put in list\n        with os.scandir(\"./chat\") as files:\n            for file in files:\n          4 if (firstname in file.name or lastname in file.name) \\\nand \"mp3\" in file.name:\n                mysongs.append(file.name)\n        # Randomly select one from the list and play\n      5 mysong = random.choice(mysongs)\n        print_say(f\"play the song {mysong} for you\")\n        mixer.init()\n        mixer.music.load(f'./chat/{mysong}')\n        mixer.music.play()\n        break\n```", "```py\n# Import needed modules\nimport os\nimport random\nfrom pygame import mixer\n\n# Import functions from the local package mptpkg\nfrom mptpkg import voice_to_text\nfrom mptpkg import print_say\n\nwhile True:\n    print_say(\"how may I help you?\")\n    inp = voice_to_text().lower()\n    print_say(f'you just said {inp}')\n    if inp == \"stop listening\":\n        print_say('Goodbye!')\n        break\n    elif \"play a\" in inp and \"song\" in inp:\n        # Remove 'play a' and 'song' so that only the genre name is left\n      1 inp = inp.replace('play a ','')\n      2 inp = inp.replace(' song','')\n\n        # Go to the genre folder and randomly select a song\n        with os.scandir(f\"./chat/{inp}\") as entries:\n            mysongs = [entry.name for entry in entries]\n        # Use pygame mixer to play the song\n      3 mysong = random.choice(mysongs)\n        print_say(f\"play the song {mysong} for you\")\n        mixer.init()\n        mixer.music.load(f\"./chat/{inp}/{mysong}\")\n        mixer.music.play()\n        break\n```", "```py\n<a class=\"suprablue\" href=\"http://libraries.uky.edu\">Libraries</a>\n```", "```py\n 1 <html> \n      <head> \n    <title>Example: University of Kentucky</title>\n<style>\n.redtext {\n  color: red;\n}\n.leftmargin {\n  margin-left: 10px;\n}\n</style>\n  </head>\n  2 <body> \n    <p>Below are some links:</p>\n      <p><a class=\"redtext\" href=\"http://libraries.uky.edu/\">\n      University of Kentucky Libraries</a></p> \n      <p><a class=\"leftmargin\" href=\"https://directory.uky.edu/\">\n      University of Kentucky Directory</a></p> \n  </body>\n</html>\n```", "```py\n# Import the Beautiful Soup library\nfrom bs4 import BeautifulSoup\n# Open the local HTML file as a text file\n1 textfile = open(\"UKYexample.html\", encoding='utf8')\n# Use the findAll() function to locate all <p> tags\nsoup = BeautifulSoup(textfile, \"html.parser\")\nptags = soup.findAll(\"p\")\n# Print out <p> tags\nprint(ptags)\n# Find the <a> tag nested in the third <p> tag\n2 atag = ptags[2].find('a')\nprint(atag)\n# Print the web address of the hyperlink\nprint(atag['href'])\n# Print the content of the <a> tag\nprint(atag.text)\n```", "```py\n[**<p>**Below are some links:</p>, \n**<p>**<a class=\"redtext\" href=\"http://libraries.uky.edu/\">\nUniversity of Kentucky Libraries</a></p>, \n**<p>**<a class=\"leftmargin\" href=\"https://directory.uky.edu/\">\nUniversity of Kentucky Directory</a></p>]\n```", "```py\nhttps://directory.uky.edu/\n```", "```py\nUniversity of Kentucky Directory\n```", "```py\n[<p>Below are some links:</p>, \n<p><a class=\"redtext\" href=\"http://libraries.uky.edu/\">\nUniversity of Kentucky Libraries</a></p>, \n<p><a class=\"leftmargin\" href=\"https://directory.uky.edu/\">\nUniversity of Kentucky Directory</a></p>]\n<a class=\"leftmargin\" href=\"https://directory.uky.edu/\">\nUniversity of Kentucky Directory</a>\nhttps://directory.uky.edu/\nUniversity of Kentucky Directory\n```", "```py\n`--snip--`\n1 <div class=\"sf-middle\"> \n            2 <div class=\"dashing-li\"> \n          <span class=\"contact_area\">Circulation:</span>\n          <span class=\"contact_methods\">\n              <div class=\"contact_phone\"><a class=\"suprablue\"\n               href=\"tel:8592181881\">(859) 218-1881</a></div>\n              <div class=\"contact_email\"><a class=\"suprablue\"\n               href=\"mailto:lib.circdesk@email.uky.edu\">\n lib.circdesk@email.uky.edu</a></div>\n          </span>\n      </div>\n    3 <div class=\"dashing-li\"> \n          <span class=\"contact_area\">Reference:</span>\n          <span class=\"contact_methods\">\n              <div class=\"contact_phone\"><a class=\"suprablue\" \n               href=\"tel:8592182048\">(859) 218-2048</a></div>\n              <div class=\"contact_email\"><a class=\"suprablue\" \n               href=\"mailto:refdesk@uky.edu\">refdesk@uky.edu</a></div>\n          </span>\n      </div>\n    4 <div class=\"dashing-li\"> \n          <span class=\"contact_area\">Interlibrary Loan:</span>\n          <span class=\"contact_methods\">\n              <div class=\"contact_phone\"><a class=\"suprablue\" \n               href=\"tel:8592181880\">(859) 218-1880</div>\n              <div class=\"contact_email\"><a class=\"suprablue\" \n               href=\"mailto:ILLBorrowing@uky.edu\">\n               ILLBorrowing@uky.edu</a></div>\n          </span>\n      </div>\n      <div class=\"dashing-li-last\">\n          <span class=\"featured_area\">All Other Questions & Comments:\n          </span>\n          <span class=\"featured_email\"><a class=\"suprablue\" \n           href=\"mailto:webadmin@lsv.uky.edu\">\n           WebAdmin@lsv.uky.edu</a></span>\n      </div>\n  </div>\n`--snip--`\n```", "```py\nfrom bs4 import BeautifulSoup\nimport requests\n# Provide the web address of the live web\nurl = 'http://libraries.uky.edu'\n# Obtain information from the live web\n1 page = requests.get(url)\n# Parse the page to obtain the parent div tag\nsoup = BeautifulSoup(page.text, \"html.parser\")\ndiv = soup.find('div', class_=\"sf-middle\")\n# Locate the three child div tags\n2 contacts = div.find_all(\"div\", class_=\"dashing-li\")\n# Print out the first child div tag to examine it\nprint(contacts[0])\n`--snip--`\n```", "```py\n<div class=\"dashing-li\">\n<span class=\"contact_area\">Circulation:</span>\n<span class=\"contact_methods\">\n<div class=\"contact_phone\"><a class=\"suprablue\" href=\"tel:8592181881\">\n(859) 218-1881</a></div>\n<div class=\"contact_email\"><a class=\"suprablue\" \nhref=\"mailto:lib.circdesk@email.uky.edu\">lib.circdesk@email.uky.edu\n</a></div>\n</span>\n</div>\n```", "```py\n`--snip--`\n# Obtain information from each child tag\nfor contact in contacts:\n    # Obtain the area name\n    area = contact.find('span', class_=\"contact_area\")\n    print(area.text)\n # Obtain the phone and email\n    atags = contact.find_all('a', href = True)\n    for atag in atags:\n        print(atag.text)\n```", "```py\nCirculation:\n(859) 218-1881\nlib.circdesk@email.uky.edu\nReference:\n(859) 218-2048\nrefdesk@uky.edu\nInterlibrary Loan:\n(859) 218-1880\nILLBorrowing@uky.edu\n```", "```py\n# Import needed modules\nimport requests\nimport bs4\nimport webbrowser\n\n# Locate the website for the NPR news brief\nurl = 'https://www.npr.org/podcasts/500005/npr-news-now'\n# Convert the source code to a soup string\nresponse = requests.get(url)\n1 soup = bs4.BeautifulSoup(response.text, 'html.parser')\n# Locate the tag that contains the mp3 files\n2 casts = soup.findAll('a', {'class': 'audio-module-listen'})\nprint(casts)\n# Obtain the weblink for the mp3 file related to the latest news brief\n3 cast = casts[0]['href']\nprint(cast)\n# Remove the unwanted components in the link\n4 pos = cast.find('?')\nprint(cast[0:pos])\n# Extract the mp3 file link, and play the file\nmymp3 = cast[0:pos]\nwebbrowser.open(mymp3)\n```", "```py\n[<a class=\"audio-module-listen\" \nhref=\"https://play.podtrac.com/500005/edge1.pod.npr.org/anon.npr-\nmp3/npr/newscasts/2021/02/09/newscast070736.mp3?dl=1&amp;\nsiteplayer=true&amp;size=4500000&amp;awCollectionId=500005&amp;\nawEpisodeId=965747474&amp;dl=1\">\n<b class=\"audio-module-listen-inner\">\n<b class=\"audio-module-listen-icon icn-play\"></b>\n<b class=\"audio-module-listen-text\">\n<b class=\"audio-module-cta\">Listen</b>\n<b class=\"audio-module-listen-duration\">\n<span>· </span>\n<span>5:00</span>\n</b>\n</b>\n</b>\n</a>, <a class=\"audio-module-listen\" \nhref=\"https://play.podtrac.com/500005/edge1.pod.npr.org/anon.npr-\nmp3/npr/newscasts/2021/02/09/newscast060736.mp3?dl=1&amp;\nsiteplayer=true&amp;size=4500000&amp;awCollectionId=500005&amp;\nawEpisodeId=965731320&amp;dl=1\">\n<b class=\"audio-module-listen-inner\">\n<b class=\"audio-module-listen-icon icn-play\"></b>\n<b class=\"audio-module-listen-text\">\n<b class=\"audio-module-cta\">Listen</b>\n<b class=\"audio-module-listen-duration\">\n<span>· </span>\n<span>5:00</span>\n</b>\n</b>\n</b>\n</a>, <a class=\"audio-module-listen\" \nhref=\"https://play.podtrac.com/500005/edge1.pod.npr.org/anon.npr-\nmp3/npr/newscasts/2021/02/09/newscast050736.mp3?dl=1&amp;\nsiteplayer=true&amp;size=4500000&amp;awCollectionId=500005&amp;\nawEpisodeId=965721223&amp;dl=1\"> \n`--snip--`\n</a>]\n```", "```py\nhttps://play.podtrac.com/500005/edge1.pod.npr.org/anon.npr-\nmp3/npr/newscasts/2021/02/09/newscast070736.mp3?dl=1&siteplayer=true&size=450\n0000&awCollectionId=500005&awEpisodeId=965747474&dl=1 \n```", "```py\nhttps://play.podtrac.com/500005/edge1.pod.npr.org/anon.npr-\nmp3/npr/newscasts/2021/02/09/newscast070736.mp3\n```", "```py\n**pip install pygame**\n```", "```py\n**pip install pygame==2.0.0**\n```", "```py\n**sudo apt-get install python3-pip python3-dev**\n**sudo pip3 install pygame**\n**pip install pygame**\n```", "```py\nfrom io import BytesIO\n\nimport requests\nimport bs4\nfrom pygame import mixer\n\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say\n\n1 def news_brief():\n    # Locate the website for the NPR news brief\n    url = 'https://www.npr.org/podcasts/500005/npr-news-now'\n    # Convert the source code to a soup string\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    # Locate the tag that contains the mp3 files\n    casts = soup.findAll('a', {'class': 'audio-module-listen'})\n    # Obtain the web link for the mp3 file\n    cast = casts[0]['href']\n    # Remove the unwanted components in the link\n    mp3 = cast.find(\"?\")\n    mymp3 = cast[0:mp3]\n    # Play the mp3 using the pygame module\n    mymp3 = requests.get(mymp3)\n    Voice = BytesIO()\n    voice.write(mymp3.content)\n    voice.seek(0)\n    mixer.init()\n mixer.music.load(voice)\n    mixer.music.play()\n2 while True:\n    print_say('Python is listening…')\n    inp = voice_to_text().lower()\n    print_say(f'you just said: {inp}')\n    if inp == \"stop listening\":\n        print_say('Goodbye!')\n        break\n    # If \"news\" in your voice command, play news brief\n    3 elif \"news\" in inp: \n        news_brief()\n        # Python listens in the background\n        while True:\n            background = voice_to_text().lower()\n            # Stops playing if you say \"stop playing\"\n            if \"stop playing\" in background:\n                mixer.music.stop()\n                break\n        continue \n```", "```py\n**conda install selenium** \n```", "```py\n# Put your web driver in the same folder as this script \nfrom selenium import web driver\nbrowser = webdriver.Chrome(executable_path='./chromedriver')\nbrowser.get(\"https://onlineradiobox.com/us/\")\nbutton = browser.find_element_by_xpath('//*[@id=\"b_top_play\"]')\nbutton.click()\n```", "```py\n# Put web driver in the same folder as this script \n# Import the web driver function from selenium\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say\n\n1 def live_radio():\n    global button\n    chrome_options = Options()  \n    chrome_options.add_argument(\"—headless\") \n    browser = webdriver.Chrome\\\n    (executable_path = './chromedriver',chrome_options = chrome_options)\n    browser.get(\"https://onlineradiobox.com/us/\")\n    button = browser.find_element_by_xpath('//*[@id=\"b_top_play\"]')\n    button.click()\n\n  2 while True:\n        print_say(\"how may I help you?\")\n      3 inp = voice_to_text().lower() \n        print_say(f'you just said {inp}')\n      4 if inp == \"stop listening\": \n            print_say('Goodbye!')\n            break\n      5 elif \"radio\" in inp: \n            print_say('OK, play live radio online for you!')\n            live_radio()\n            while True:\n                background = voice_to_text().lower()\n                if \"stop playing\" in background:\n                    button.click()\n                    break\n                else:\n                    continue\n```", "```py\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say \n\n# Import the web driver function from selenium\nfrom selenium import webdriver\ndef online_video(): \n    browser = webdriver.Chrome(executable_path='./chromedriver')\n    browser.get(\"https://www.nbcnews.com/nightly-news-full-episodes\")\n    button = browser.find_element_by_xpath\\\n('//*[@id=\"content\"]/div[6]/div/div[3]/div/\\ \n1 section[2]/div[2]/div/div[1]/article/div[1]/h2/a[2]/span') \n    button.click() \n2 while True: \n    print_say(\"how may I help you?\")\n    inp = voice_to_text().lower() \n    print_say(f'you just said {inp}')\n    if inp == \"stop listening\": \n        print('Goodbye!')\n        break\n    elif \"video\" in inp:\n        print_say('OK, play online video for you!')\n        online_video()\n        break\n```", "```py\nfrom .mysr import voice_to_text\nfrom .mysay import print_say\n```", "```py\nfrom .mywakeup import wakeup\nfrom .mytimer import timer\nfrom .myalarm import alarm\nfrom .myjoke import joke\nfrom .myemail import email\n```", "```py\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say, wakeup, timer, alarm, joke, email\n\n# Put the script in standby\n1 while True:\n    # Capture your voice command quietly in standby\n    wake_up = wakeup()\n    # You can wake up the VPA by saying \"Hello Python\"\n    while wake_up == \"Activated\":\n        print_say(\"How may I help you?\")\n        inp = voice_to_text().lower()\n        print_say(f'You just said {inp}.')\n        if \"back\" in inp and \"stand\" in inp:\n            print_say('OK, back to standby; let me know if you need help!')\n            break\n        # Activate the timer\n      2 elif \"timer for\" in inp and (\"hour\" in inp or \"minute\" in inp):\n            timer(inp)\n            continue\n        # Activate the alarm clock\n        elif \"alarm for\" in inp and (\"a.m.\" in inp or \"p.m.\" in inp):\n            alarm(inp)\n            continue\n        # Activate the joke-telling functionality\n        elif \"joke\" in inp and \"tell\" in inp:\n            joke()\n            continue\n        # Activate the email-sending functionality\n        elif \"send\" in inp and \"email\" in inp:\n            email()\n            continue\n        else:     \n            continue\n    # End the script by including \"stop\" in your voice command\n if wake_up == \"ToQuit\":\n        print_say(\"OK, exit the script; goodbye!\")\n        break\n```", "```py\n**conda install arrow**\n```", "```py\nimport speech_recognition as sr\n\nspeech = sr.Recognizer()\n# Define a wakeup() function to determine the status of the VPA\n1 def wakeup():\n    wakeup = \"StandBy\"\n    voice_input = \"\" \n    with sr.Microphone() as source:\n        speech.adjust_for_ambient_noise(source)\n        try:\n          2 audio = speech.listen(source,timeout=3)\n            voice_input = speech.recognize_google(audio).lower()\n        except sr.UnknownValueError:\n            pass\n        except sr.RequestError:\n            pass\n        except sr.WaitTimeoutError:\n            pass\n    if \"hello\" in voice_input and \"python\" in voice_input:\n        wakeup = \"Activated\" \n    elif \"stop\" in voice_input:\n        wakeup = \"ToQuit\"\n    return wakeup\n```", "```py\n**hello Python**\nHow may I help you?\n**go back to standby**\nYou just said go back to standby.\nOK, back to standby; let me know if you need help!\n**hello Python**\nHow may I help you?\n**go back to standby**\nYou just said go back to standby.\nOK, back to standby; let me know if you need help!\n**stop listening**\nOK, exit the script; goodbye!\n```", "```py\nimport arrow\n\n# Current time in HH:MM:SS format\n1 current_time = arrow.now().format('H:m:s')\nprint('the current time is', current_time)\n2 current_time12 = arrow.now().format('hh:mm:ss A')\nprint('the current time is', current_time12)\n# We can also print out hour, minute, and second individually\n3 print(\"the current hour is\",arrow.now().format('H'))\nprint(\"the current minute is\",arrow.now().format('m'))\nprint(\"the current second is\",arrow.now().format('s'))\n```", "```py\nthe current time is 8:35:46\nthe current time is 08:35:46,AM\nthe current hour is 8\nthe current minute is 35\nthe current second is 46\n```", "```py\nimport arrow\n\n# Get today's date\n1 today_date = arrow.now()\n\n# Print today's date in different formats\n2 print(\"today is\", today_date.format('MMMM DD, YYYY'))\nprint(\"today is\", today_date.format('MMM D, YYYY'))\nprint(\"today is\", today_date.format('MM/DD/YYYY'))\n# Print today's weekday in different formats\n3 print(\"today is\", today_date.format('dddd'))\nprint(\"today is\", today_date.format('ddd'))\n```", "```py\ntoday is March 01, 2021\ntoday is Mar 01, 2021\ntoday is 03/01/2021\ntoday is Monday\ntoday is Mon\n```", "```py\nimport time\nimport arrow\n\n# Tell you the format to set the timer\nprint('''set your timer; you can set it to the number of hours,\n      number of minutes, \n      or a combination of both ''')\n# Set the timer\n1 inp = input(\"How long do you want to set your timer for?\\n\")\n# Find the positions of \"timer for\" and \"hour\" and \"minute\"\npos1 = inp.find(\"timer for\")\npos2 = inp.find(\"hour\")\npos3 = inp.find(\"minute\")\n# Handle the case \"set a timer for hours only\"\n2 if pos3 == -1:\n    Addhour = inp[pos1+len(\"timer for\"):pos2]\n    Addminute = 0\n# Handle the case \"set a timer for minutes only\"\n3 elif pos2 == -1:\n    addhour=0\n    addminute = inp[pos1+len(\"timer for\"):pos3]\n# Handle the case for \"set a timer for hours and minutes\"\n4 else:\n    Addhour = inp[pos1+len(\"timer for\"):pos2]\n    Addminute = inp[pos2+len(\"hour\"):pos3]\n# Current hour, minute, and second\nstartHH = arrow.now().format('H')\nstartmm = arrow.now().format('m')\nstartss = arrow.now().format('s')\n# Obtain the time for the timer to go off\nnewHH = int(startHH)+int(addhour)\nnewmm = int(startmm)+int(addminute)\n5 if newmm>59:\n    newmm -= 60\n    newHH += 1\nnewHH = newHH%24\nend_time = str(newHH)+\":\"+str(newmm)+\":\"+startss\nprint(\"Your timer will go off at \"+end_time)\nwhile True:\n    timenow = arrow.now().format('H:m:s')\n    if timenow == end_time:\n       print(\"Your timer has gone off!\")\n       break\n    time.sleep(0.5)\n```", "```py\n set your timer; you can set it to the number of hours,\n      number of minutes, \n      or a combination of both\n\nHow long do you want to set your timer for?\n**set a timer for 1 minute**\nYour timer will go off at 21:9:15\nYour timer has gone off!\n```", "```py\nimport time\n\nimport arrow\n\nfrom mptpkg import print_say\n\ndef timer(v_inp):\n    # Find the positions of \"timer for\" and \"hour\" and \"minute\"\n    pos1= v_inp.find(\"timer for\")\n    pos2= v_inp.find(\"hour\")\n`--snip--`\n    print_say(\"Your timer will go off at \"+end_time)\n`--snip--`\n           print_say(\"Your timer has gone off!\")\n`--snip--`\n```", "```py\n`--snip--`\nfrom mptpkg import timer\n`--snip--`\n        # Activate the timer\n        elif \"timer for\" in inp and (\"hour\" in inp or \"minute\" in inp):\n            timer(inp)\n            continue        \n`--snip--`\n```", "```py\n**hello Python**\nHow may I help you?\n**set a timer for 1 minute**\nYou just said set a timer for 1 minute\nYour timer will go off at 21:37:46\nYour timer has gone off!\nHow may I help you?\n`--snip--`\n```", "```py\nimport time\n\nimport arrow\n\n# Tell you the format to set the timer\nprint('''set your alarm clock\\nyou can use the format of:\\n \n      \\tset an alarm for 7 a.m., or\n      \\tset an alarm for 2:15 p.m.''')\n# Set the alarm\n1 inp = input(\"What time would you like to set your alarm for?\\n\")\n# Find the positions of the four indicators\n1 p1 = inp.find(\"alarm for\") \np2 = inp.find(\"a.m.\") \np3 = inp.find(\"p.m.\") \np4 = inp.find(\":\")\n# Handle the four different cases\n2 if p2 != -1 and p4 != -1: \n    inp=inp[p1+len(\"alarm for\")+1:p2]+\"AM\"\nelif p3 != -1 and p4 != -1: \n    inp=inp[p1+len(\"alarm for\")+1:p3]+\"PM\" \nelif p2 != -1 and p4 == -1: \n    inp=inp[p1+len(\"alarm for\")+1:p2-1]+\":00 AM\"\nelif p3 != -1 and p4 == -1: \n    inp=inp[p1+len(\"alarm for\")+1:p3-1]+\":00 PM\"\nprint(f\"OK, your alarm will go off at {inp}!\")\n3 while True:\n    # Obtain time and change it to \"7:25 AM\" format\n    tm = arrow.now().format('h:mm A')\n    time.sleep(5)\n    # If the clock reaches alarm time, the alarm clock goes off\n    if inp == tm:\n        print(\"Your alarm has gone off!\")\n        break\n```", "```py\nimport time\n\nimport arrow\n\nfrom mptpkg import print_say\n\n# Define the Alarm() function\ndef alarm(v_inp):\n    # Find the positions of the four indicators\n    p1 = v_inp.find(\"alarm for\") \n`--snip--`\n```", "```py\n`--snip--`\nfrom mptpkg import alarm\n`--snip--`\n        # Activate the alarm clock\n        elif \"alarm for\" in inp and (\"a.m.\" in inp or \"p.m.\" in inp):\n            alarm(inp)\n            continue\n`--snip--`\n```", "```py\n**hello Python**\nHow may I help you?\n**set an alarm for 8:38 a.m.**\nYou just said set an alarm for 8:38 a.m.\nOK, your alarm will go off at 8:38 AM!\nYour alarm has gone off!\nHow may I help you?\n`--snip--`\n```", "```py\nThere are three kinds of people in the world—those who can count and those who can't. \n\nWithout geometry, life is pointless.\n\nWrite the expression for the volume of a thick-crust pizza with height \"a\" and radius \"z\". \n\nTwo random variables were talking in a bar. They thought they were being discrete, but I heard their chatter continuously. \n\n3 out of 2 people have trouble with fractions. \n\nParallel lines have so much in common . . . it's a shame they'll never meet. \n\nMath is like love; a simple idea, but it can get complicated. \n\nDear Math, please grow up and solve your own problems; I'm tired of solving them for you. \n\nDear Algebra, Please stop asking us to find your X. She's never coming back, and don't ask Y. \n\nOld mathematicians never die; they just lose some of their functions. \n\nI strongly dislike the subject of math; however, I am partial to fractions. \n\nZenophobia is the irrational fear of convergent sequences. \n\nPhilosophy is a game with objectives and no rules. Mathematics is a game with rules and no objectives. \n\nClassification of mathematical problems as linear and nonlinear is like classification of the universe as bananas and non-bananas.\n\nA circle is just a round straight line with a hole in the middle.\n```", "```py\n1 import random\n\nfrom mptpkg import print_say\n\n# Define the joke() function\n2 def joke():\n    # Read the content from the file jokes.txt\n    with open('../ch07/jokes.txt','r') as f:\n        content = f.read()\n    # Split the content at double line breaks\n  3 jokelist = content.split('\\n\\n')\n    # Randomly select a joke from the list\n    joke = random.choice(jokelist)\n    print_say(joke)\n```", "```py\n`--snip--`\nfrom mptpkg import joke\n`--snip--`\n        # Activate the joke-telling functionality\n        elif \"joke\" in inp and \"tell\" in inp:\n            joke()\n            continue\n`--snip--`\n```", "```py\n**hello Python**\nHow may I help you?\n**tell me a joke**\nYou just said tell me a joke\nI strongly dislike the subject of math; however, I am partial to fractions. \nHow may I help you?\n`--snip--`\n```", "```py\nimport smtplib\n\n# Build a dictionary of names and emails\nemails = {'mark':'mark.liu@uky.edu',\n         'sarah':'Sarah email address here',\n         'chris':'Chris email address here'}\n# Different email providers have different domain names and port numbers\n1 mysmt = smtplib.SMTP('smtp.gmail.com', 587)\nmysmt.ehlo()\nmysmt.starttls()\n# Use your own login info; you may need an app password\nmysmt.login('`ukmarkliu@gmail.com`', '`{Your password here}`')\n# Ask for the name of the recipient\n2 name = input('Who do you want to send the email to?\\n')\nemail = emails[name]\nprint(f\"You just said {name}.\")\n# Ask for the subject line\nsubline = input('What is the subject line?\\n')\nprint(f\"You just said {subline}.\")\n# Ask for the email content\ncontent = input('What is the email content?\\n')\nprint(f\"You just said {content}.\")\n# Send the actual email\n3 mysmt.sendmail('`ukmarkliu@gmail.com`', email, \n               f'Subject: {subline}.\\nHello, {content}.')\n{}\nprint('Ok, email sent')\nmysmt.quit()\n```", "```py\n`--snip--`\nfrom mptpkg import voice_to_text, print_say\n\n# Define the email() function\ndef email():\n    # Build a dictionary of names and emails\n`--snip--`\n    # Voice input the name of the recipient\n    print_say('Who do you want to send the email to?')\n    name = voice_to_text().lower()\n    email = emails[name]\n    print_say(f\"You just said {name}.\")\n    # Voice input the subject line\n    print_say('What is the subject line?')\n    subline = voice_to_text()\n    print_say(f\"You just said {subline}.\")\n    # Voice input the email content\n    print_say('What is the email content?')\n    content = voice_to_text()\n    print_say(f\"You just said {content}.\")\n    # Send the actual email\n    mysmt.sendmail('ukmarkliu@gmail.com', email, \n                   f'Subject: {subline}.\\nHello, {content}.')\n    {}\n    print_say('Ok, email sent.')\n    mysmt.quit()\n```", "```py\n`--snip--`\nfrom mptpkg import email\n`--snip--`\n        # Activate the email-sending functionality\n        elif \"email\" in inp and \"send\" in inp:\n            email()\n            continue\n`--snip--`\n```", "```py\n**hello Python**\nHow may I help you?\n**send an email**\nYou just said send an email\nWho do you want to send the email to?\n**mark**\nYou just said mark.\nWhat is the subject line?\n**this is from python**\nYou just said this is from python.\nWhat is the email content?\n**this email is sent using the Python programming language**\nYou just said this email is sent using the Python programming language\nOk, email sent\nHow may I help you?\n`--snip--`\n```", "```py\n**pip install wolframalpha** \n```", "```py\n# Import the wolframalpha module\nimport wolframalpha\n\n# Enter your own WolframAlpha APIkey below\nAPIkey = \"`{your WolframAlpha APIkey}`\" \nwolf = wolframalpha.Client(APIkey)\n# Enter your query \n1 inp = input(\"What do you want to know from WolframAlpha?\\n\")\n# Send your query to WolframAlpha and get a response\n2 response = wolf.query(inp)\n# Retrieve the text from the response\nres = next(response.results).text \n# Print out the response\nprint(res) \n```", "```py\nWhat do you want to know from WolframAlpha?\n**How many states are in the USA?**\n50 \n```", "```py\nWhat do you want to know from WolframAlpha?\n**What is the temperature outside right now?**\n87 °F\n(2 hours 21 minutes ago)\n```", "```py\nWhat do you want to know from WolframAlpha?\n**What is the weather forecast for Chicago in 2 days?**\nbetween 70 °F and 74 °F\nrain (very early morning) | clear (all day)\n```", "```py\nWhat do you want to know from WolframAlpha?\n**What is the current gas price?**\n$2.548/gal (US dollars per gallon) (Monday, February 8, 2021)\n```", "```py\nWhat do you want to know from WolframAlpha?\n**How many yards are in a mile?**\n1760 yards\n\nWhat do you want to know from WolframAlpha?\n**What's the capital of West Virginia?**\nCharleston, West Virginia, United States\n\nWhat do you want to know from WolframAlpha?\n**What is the calorie expenditure walking an hour at 5 miles per hour?**\nenergy expenditure | 366 Cal (dietary calories)\nfat burned | 0.1 lb (pounds)\noxygen consumption | 19.3 gallons\nmetabolic equivalent | 4.8 metabolic equivalents\n(estimates based on CDC standards)\n\nWhat do you want to know from WolframAlpha?\n**What is the speed of light?**\n2.998×10^8 m/s (meters per second)\n```", "```py\nWhat do you want to know from WolframAlpha?\n**When was the airbag invented**\n1941\n```", "```py\nWhat do you want to know from WolframAlpha?\n**Define obliterate**\n1 | verb | mark for deletion, rub off, or erase\n2 | verb | make undecipherable or imperceptible by obscuring or concealing\n3 | verb | remove completely from recognition or memory\n4 | verb | do away with completely, without leaving a trace\n5 | adjective | reduced to nothingness\n(5 meanings)\n```", "```py\nWhat do you want to know from WolframAlpha?\n**convert 125 to binary**\n1111101_2\n```", "```py\nWhat do you want to know from WolframAlpha?\n**mortgage $150,000 6.5% 30 years**\nmonthly payment | $948\n```", "```py\n**pip install wikipedia** \n```", "```py\nThe University of Kentucky (UK) is a public university in Lexington,\n Kentucky. Founded in 1865 by John Bryan Bowman as the Agricultural and\n Mechanical College of Kentucky\n`--snip--`\n```", "```py\nimport wolframalpha\nimport wikipedia\n\n# You must put your WolframApha APIkey below\n1 APIkey = \"{your WolframAlpha appID here}\" \nwolf = wolframalpha.Client(APIkey)\n\nwhile True:\n    # Put your question here \n    Inp = input(\"What do you want to know?\\n\")\n    # Stop the loop if you type in \"done\"\n    if inp == \"done\":\n        break\n    # Look for answer in Wolfram Alpha\n    res = wolf.query(inp)\n    # Use try and except to handle errors\n    try:\n        print(next(res.results).text)\n    except:\n    # If no answer, try Wikipedia\n        try:\n            ans = wikipedia.summary(inp)\n            print(ans[0:200])\n        except:\n        # If still no answer\n            print('I am still learning. I don\\'t know the answer to your question yet')\n```", "```py\nWhat do you want to know?\n**University of Kentucky**\nThe University of Kentucky (UK) is a public university in Lexington, Kentucky. Founded in 1865 by John Bryan Bowman as the Agricultural and Mechanical College of Kentucky, the university is one of the\n\nWhat do you want to know?\n**How many people live outside the earth?**\n\nI am still learning. I don't know the answer to your question yet\n\nWhat do you want to know?\n**done**\n```", "```py\n`--snip--`\n# Import the print_say() function from the local package\nfrom mptpkg import print_say\n`--snip--`\ndef know_all(v_inp):\n    #look for answer in Wolfram Alpha\n    res = wolf.query(v_inp)\n`--snip--`\n            print_say('I am still learning. I don\\'t know the answer to your question yet')\n```", "```py\n**from .myknowall import know_all**\n```", "```py\n# Import the know_all() function from the local package\nfrom mptpkg import know_all\n`--snip--`\n        # Activate the Know-It-All functionality\n        else:\n            if len(inp)>6:\n                know_all(inp)\n            continue        \n`--snip--`\n```", "```py\n**hello Python**\nhow may I help you?\n**who was us president in 1981**\nyou just said who was us president in 1981\nJimmy Carter (from January 20, 1977 to January 20, 1981)\nRonald Reagan (from January 20, 1981 to January 20, 1989)\n\nhow may I help you?\n**coronavirus**\nyou just said coronavirus\nCoronaviruses are a group of related RNA viruses that cause diseases in mammals and birds. In humans, these viruses cause respiratory tract infections that can range from mild to lethal. Mild illness\n`--snip--`\n```"]