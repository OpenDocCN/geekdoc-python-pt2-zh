["```py\n$ **pip install NumPy**\n```", "```py\n❶ import numpy as np\n❷ jeff_salary = [2700,3000,3000]\nnick_salary = [2600,2800,2800]\ntom_salary = [2300,2500,2500]\n❸ base_salary = np.array([jeff_salary, nick_salary, tom_salary])\nprint(base_salary)\n```", "```py\n[[2700 3000 3000]\n [2600 2800 2800]\n [2300 2500 2500]]\n```", "```py\njeff_bonus = [500,400,400]\nnick_bonus = [600,300,400]\ntom_bonus = [200,500,400]\nbonus = np.array([jeff_bonus, nick_bonus, tom_bonus])\n```", "```py\n❶ salary_bonus = base_salary + bonus\nprint(type(salary_bonus))\nprint(salary_bonus)\n```", "```py\n<class 'NumPy.ndarray'>\n[[3200 3400 3400]\n [3200 3100 3200]\n [2500 3000 2900]]\n```", "```py\nprint(salary_bonus.max())\n```", "```py\n3400\n```", "```py\nprint(np.amax(salary_bonus, axis = 1))\n```", "```py\n[3400 3200 3000]\n```", "```py\nprint(np.amax(salary_bonus, axis = 0))\n```", "```py\n[3200 3400 3400]\n```", "```py\n$ **pip install pandas**\n```", "```py\n❶ import pandas as pd\n❷ data = ['Jeff Russell','Jane Boorman','Tom Heints']\n❸ emps_names = pd.Series(data)\nprint(emps_names)\n```", "```py\n0    Jeff Russell\n1    Jane Boorman\n2      Tom Heints\ndtype: object\n```", "```py\ndata = ['Jeff Russell','Jane Boorman','Tom Heints']\nemps_names = pd.Series(data,index=[9001,9002,9003])\nprint(emps_names)\n```", "```py\n9001    Jeff Russell\n9002    Jane Boorman\n9003      Tom Heints\ndtype: object\n```", "```py\nprint(emps_names[9001])\n```", "```py\nJeff Russell\n```", "```py\nprint(emps_names.loc[9001])\n```", "```py\nprint(emps_names.iloc[0])\n```", "```py\nprint(emps_names.loc[9001:9002])\n```", "```py\n9001    Jeff Russell\n9002    Jane Boorman\n```", "```py\nprint(emps_names.iloc[0:2])\n```", "```py\nprint(emps_names[0:2])\n```", "```py\ndata = ['jeff.russell','jane.boorman','tom.heints']\n❶ emps_emails = pd.Series(data,index=[9001,9002,9003], name = 'emails')\n❷ emps_names.name = 'names'\n❸ df = pd.concat([emps_names,emps_emails], axis=1)\nprint(df)\n```", "```py\n names        emails\n9001  Jeff Russell  jeff.russell\n9002  Jane Boorman  jane.boorman\n9003    Tom Heints    tom.heints\n```", "```py\n**$ pip install yfinance**\n```", "```py\nimport yfinance as yf\n❶ tkr = yf.Ticker('TSLA')\n❷ hist = tkr.history(period=\"5d\")\n❸ hist = hist.drop(\"Dividends\", axis = 1)\nhist = hist.drop(\"Stock Splits\", axis = 1)\n❹ hist = hist.reset_index()\n```", "```py\nhist = hist.set_index('Date')\n```", "```py\nimport json\nimport pandas as pd\ndata = [\n {\"Empno\":9001,\"Salary\":3000},\n {\"Empno\":9002,\"Salary\":2800},\n {\"Empno\":9003,\"Salary\":2500}\n]\n❶ json_data = json.dumps(data)\n❷ salary = pd.read_json(json_data)\n❸ salary = salary.set_index('Empno')\nprint(salary)\n```", "```py\n Salary\nEmpno        \n9001     3000\n9002     2800\n9003     2500\n```", "```py\nimport pandas as pd\n❶ data = [['9001','Jeff Russell', 'sales'],\n        ['9002','Jane Boorman', 'sales'],\n        ['9003','Tom Heints', 'sales']]\n❷ emps = pd.DataFrame(data, columns = ['Empno', 'Name', 'Job'])\n❸ column_types = {'Empno': int, 'Name': str, 'Job': str}\nemps = emps.astype(column_types)\n❹ emps = emps.set_index('Empno')\nprint(emps)\n```", "```py\n Name       Job\nEmpno                        \n9001   Jeff Russell     sales\n9002   Jane Boorman     sales\n9003     Tom Heints     sales\n```", "```py\nemps_salary = emps.join(salary)\nprint(emps_salary)\n```", "```py\n Name       Job  Salary\nEmpno                                \n9001   Jeff Russell     sales    3000\n9002   Jane Boorman     sales    2800\n9003     Tom Heints     sales    2500\n```", "```py\nnew_emp = pd.Series({'Name': 'John Hardy', 'Job': 'sales'}, name = 9004)\nemps = emps.append(new_emp)\nprint(emps)\n```", "```py\n Name       Job\nEmpno                        \n9001   Jeff Russell     sales\n9002   Jane Boorman     sales\n9003     Tom Heints     sales\n9004     John Hardy     sales\n```", "```py\nemps_salary = emps.join(salary)\nprint(emps_salary)\n```", "```py\n Name       Job  Salary\nEmpno                                \n9001   Jeff Russell     sales  3000.0\n9002   Jane Boorman     sales  2800.0\n9003     Tom Heints     sales  2500.0\n9004     John Hardy     sales     NaN\n```", "```py\nemps_salary = emps.join(salary, how = 'inner')\nprint(emps_salary)\n```", "```py\n Name       Job  Salary\nEmpno                                \n9001   Jeff Russell     sales    3000\n9002   Jane Boorman     sales    2800\n9003     Tom Heints     sales    2500\n```", "```py\nimport pandas as pd\ndata = [[2608, 9001,35], [2617, 9001,35], [2620, 9001,139],\n        [2621, 9002,95], [2626, 9002,218]]\norders = pd.DataFrame(data, columns = ['Pono', 'Empno', 'Total'])\nprint(orders)\n```", "```py\n Pono  Empno  Total\n0  2608   9001     35\n1  2617   9001     35\n2  2620   9001    139\n3  2621   9002     95\n4  2626   9002    218\n```", "```py\nemps_orders = emps.merge(orders, how='inner', left_on='Empno',\n                         right_on='Empno').set_index('Pono')\nprint(emps_orders)\n```", "```py\n Empno          Name       Job  Total\nPono                                      \n2608   9001  Jeff Russell     sales     35\n2617   9001  Jeff Russell     sales     35\n2620   9001  Jeff Russell     sales    139\n2621   9002  Jane Boorman     sales     95\n2626   9002  Jane Boorman     sales    218\n```", "```py\nprint(orders.groupby(['Empno'])['Total'].mean())\n```", "```py\nEmpno\n9001     69.666667\n9002    156.500000\nName: Total, dtype: float64\n```", "```py\nprint(orders.groupby(['Empno'])['Total'].sum())\n```", "```py\nEmpno\n9001    209\n9002    313\nName: Total, dtype: int64\n```", "```py\n$ **pip install sklearn**\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('/usr/Downloads/sentiment labelled sentences/amazon_cells_labelled.txt',\n                 names=[❶ 'review', ❷ 'sentiment'], ❸ sep='\\t')\n```", "```py\nfrom sklearn.model_selection import train_test_split\nreviews = df['review'].values\nsentiments = df['sentiment'].values\nreviews_train, reviews_test, sentiment_train, sentiment_test = train_test_split(reviews,\n                                         sentiments, ❶ test_size=0.2, ❷ random_state=500)\n```", "```py\nText: I know it. You know it too.\nBoW: {\"I\":1,\"know\":2,\"it\":2,\"You\":1,\"too\":1}\nVector: [1,2,2,1,1]\n```", "```py\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nvectorizer.fit(reviews)\nX_train = vectorizer.transform(reviews_train)\nX_test = vectorizer.transform(reviews_test)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train, sentiment_train)\n```", "```py\naccuracy = classifier.score(X_test, sentiment_test)\nprint(\"Accuracy:\", accuracy)\n```", "```py\nAccuracy: 0.81\n```", "```py\nnew_reviews = ['Old version of python useless', 'Very good effort, but not\n               five stars', 'Clear and concise']\nX_new = vectorizer.transform(new_reviews)\nprint(classifier.predict(X_new))\n```", "```py\n[0, 1, 1]\n```"]