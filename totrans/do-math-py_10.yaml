- en: '**B**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**B**'
- en: '**Overview of Python Topics**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python主题概览**'
- en: '![image](images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/common-01.jpg)'
- en: 'The aim of this appendix is twofold: to provide a quick refresher on some Python
    topics that weren’t thoroughly introduced in the chapters and to introduce topics
    that will help you write better Python programs.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录的目标是双重的：一方面是快速回顾一些在章节中没有深入介绍的Python主题，另一方面是引入一些可以帮助你编写更好Python程序的主题。
- en: '**if __name__ == ''__main__''**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**if __name__ == ''__main__''**'
- en: 'Throughout the book, we’ve used the following block of code, where `func()`
    is a function we’ve defined in the program:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用了以下代码块，其中`func()`是我们在程序中定义的函数：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This block of code ensures that the statements within the block are executed
    only when the program is run on its own.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码确保只有在程序独立运行时，代码块中的语句才会被执行。
- en: When a program runs, the special variable `__name__` is set to `__main__` automatically,
    so the `if` condition evaluates to `True` and the function `func()` is called.
    However, `__name__` is set differently when you import the program into another
    program (see “[Reusing Code](app02.html#app02lev1sec07)” on [page 235](app02.html#page_235)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，特殊变量`__name__`会自动被设置为`__main__`，因此`if`条件的结果为`True`，然后调用函数`func()`。然而，当你将程序导入到另一个程序时，`__name__`的值会有所不同（见“[重用代码](app02.html#app02lev1sec07)”在[第235页](app02.html#page_235)）。
- en: 'Here’s a quick demonstration. Consider the following program, which we’ll call
    *factorial.py*:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的演示。考虑以下程序，我们将其命名为*factorial.py*：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The program defines a function, `fact()`, that calculates the factorial of
    the integer passed to it. When you run it, it prints `__main__`, which corresponds
    to the `print` statement at ➊, because `__name__` is automatically set to `__main__`.
    Then, it asks an integer to be entered, calculates the factorial, and prints it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 程序定义了一个函数`fact()`，它计算传入整数的阶乘。当你运行它时，它会打印`__main__`，这对应于➊处的`print`语句，因为`__name__`会自动被设置为`__main__`。然后，它会要求输入一个整数，计算其阶乘并打印出来：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, say you need to calculate the factorial in another program. Instead of
    writing the function again, you decide to reuse this function by importing it:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你需要在另一个程序中计算阶乘。你决定通过导入这个函数来重用它，而不是再次编写该函数：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that both the programs must be in the same directory. When you run this
    program, you’ll get the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两个程序必须位于同一个目录下。当你运行此程序时，你将看到以下输出：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When your program is imported by another program, the value of the variable
    `__main__` is set to that program’s filename, without the extension. In this case,
    the value of `__name__` is `factorial` instead of `__main__`. Because the condition
    `__name__ == '__main__'` now evaluates to `False`, the program doesn’t ask for
    the user’s input anymore. Remove the condition to see for yourself what happens!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的程序被另一个程序导入时，变量`__main__`的值会被设置为那个程序的文件名，不带扩展名。在这种情况下，`__name__`的值是`factorial`而不是`__main__`。因为条件`__name__
    == '__main__'`现在的结果是`False`，程序就不会再要求用户输入了。移除这个条件，看看会发生什么！
- en: To summarize, it’s good practice to use `if __name__ == '__main__'` in your
    programs so that the statements you want executed when your program is run as
    a standalone are also *not* executed when your program is imported into another
    program.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在你的程序中使用`if __name__ == '__main__'`是个好习惯，这样你希望在程序独立运行时执行的语句在程序被导入到其他程序时就不会被执行。
- en: '**List Comprehensions**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**列表推导式**'
- en: 'Let’s say we have a list of integers and we want to create a new list containing
    the squares of the elements of the original list. Here’s one way that we could
    do this that’s already familiar to you:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个整数列表，并且希望创建一个新的列表，其中包含原始列表中元素的平方。以下是我们可以使用的已知方法：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we used a code pattern that we’ve used in various programs throughout
    the book. We create an empty list, `x_square`, and then successively append to
    it as we calculate the square. We can do this in a more efficient way using *list
    comprehensions*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了在本书中多个程序中使用的代码模式。我们创建了一个空列表`x_square`，然后在计算平方时逐步将值附加到该列表。我们可以使用*列表推导式*更高效地完成此操作：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The statement at ➌ is referred to as a *list comprehension* in Python. It consists
    of an expression—here, `n**2`—followed by a `for` loop, `for n in x`. Note that
    it basically allows us to combine the two statements at ➊ and ➋ into one to create
    a new list in one statement.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ➌处的语句被称为Python中的*列表推导式*。它由一个表达式——这里是`n**2`——和一个`for`循环`for n in x`组成。请注意，它基本上允许我们将➊和➋处的两个语句合并成一个语句，来创建一个新的列表。
- en: 'As another example, consider one of the programs we wrote in “[Drawing the
    Trajectory](ch02.html#ch02lev3sec05)” on [page 51](ch02.html#page_51) to draw
    the trajectory of a body in projectile motion. In these programs, we have the
    following block of code to calculate the *x*- and *y*-coordinates of the body
    at each time instant:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，考虑我们在“[绘制轨迹](ch02.html#ch02lev3sec05)”一文中编写的程序，在[第51页](ch02.html#page_51)绘制了抛体运动中物体的轨迹。在这些程序中，我们有以下代码块来计算物体在每个时刻的*x*和*y*坐标：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using list comprehension, you can rewrite the block of code as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导式，你可以将代码块重写如下：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code is more compact now, as you didn’t have to create the empty lists,
    write a `for` loop, and append to the lists. List comprehension lets you do this
    in a single statement.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这段代码更简洁了，因为你不再需要创建空列表、编写`for`循环以及向列表中添加元素。列表推导式让你可以在一行代码中完成这些操作。
- en: 'You can also add conditionals to a list comprehension in order to selectively
    choose which list items are evaluated in the expression. Consider, once again,
    the first example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在列表推导式中添加条件，以便有选择地确定哪些列表项会在表达式中进行评估。再考虑一下第一个例子：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this list comprehension, we use the `if` condition to explicitly tell Python
    to evaluate the expression `n**2` only on the even list items of `x`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表推导式中，我们使用`if`条件显式地告诉Python，只在`x`的偶数列表项上计算表达式`n**2`。
- en: '**Dictionary Data Structure**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**字典数据结构**'
- en: 'We first used a Python dictionary in [Chapter 4](ch04.html#ch04) while implementing
    the `subs()` method in SymPy. Let’s explore Python dictionaries in more detail.
    Consider a simple dictionary:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](ch04.html#ch04)首次使用了Python字典，当时在实现SymPy中的`subs()`方法时。让我们更详细地探讨一下Python字典。考虑一个简单的字典：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code creates a dictionary with two keys—`'key1'` and `'key2'`—with values
    `5` and `20`, respectively. Only strings, numbers, and tuples can be keys in a
    Python dictionary. These data types are referred to as *immutable* data types—once
    created, they can’t be changed—so a list can’t be a key because we can add and
    remove elements from a list.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个包含两个键`'key1'`和`'key2'`的字典，它们的值分别是`5`和`20`。在Python字典中，只有字符串、数字和元组可以作为键。这些数据类型被称为*不可变*数据类型——一旦创建，它们不能被更改——因此，列表不能作为键，因为我们可以向列表中添加和移除元素。
- en: 'We already know that to retrieve the value corresponding to `''key1''` in the
    dictionary, we need to specify it as `d[''key1'']`. This is one of the most common
    use cases of a dictionary. A related use case is checking whether the dictionary
    contains a certain key, `''x''`. We can check that as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道，要获取字典中`'key1'`对应的值，我们需要指定`d['key1']`。这是字典最常见的使用场景之一。一个相关的使用场景是检查字典中是否包含某个特定的键，`'x'`。我们可以这样检查：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we create a dictionary, we can add a new key-value pair to it, similar
    to how we can append elements to a list. Here’s an example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了字典，就可以像向列表中添加元素一样向字典中添加新的键值对。这里是一个例子：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code snippet checks whether the key `'x'` already exists in the dictionary,
    `d`. If it does, it prints the value corresponding to it; otherwise, it adds the
    key to the dictionary with `1` as the corresponding value. Similar to Python’s
    behavior with sets, Python can’t guarantee a particular order of the key-value
    pairs in a dictionary. The key-value pairs can be in any order, irrespective of
    the order of insertion.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码检查字典`d`中是否已经存在键`'x'`。如果存在，它将打印与之对应的值；如果不存在，它将把这个键添加到字典中，并将`1`作为对应的值。与Python处理集合的方式类似，Python不能保证字典中键值对的顺序。键值对可以按任何顺序排列，与插入顺序无关。
- en: 'Besides specifying the key as an index to the dictionary, we can also use the
    `get()` method to retrieve the value corresponding to the key:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将键指定为字典的索引外，我们还可以使用`get()`方法来获取与键对应的值：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you specify a nonexistent key to the `get()` method, `None` is returned.
    On the other hand, if you do so while using the index style of retrieving, you’ll
    get an error.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向`get()`方法指定一个不存在的键，返回值将是`None`。另一方面，如果你使用索引方式来获取，指定不存在的键时会报错。
- en: 'The `get()` method also lets you set a default value for nonexistent keys:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`方法还允许你为不存在的键设置默认值：'
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There’s no key `''y''` in the dictionary `d`, so `0` is returned. If there
    is a key, however, the value is returned instead:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 字典`d`中没有键`'y'`，因此返回`0`。然而，如果存在这个键，返回的是相应的值：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `keys()` and `values()` methods each return a list-like data structure
    of all the keys and values, respectively, in a dictionary:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`keys()`和`values()`方法分别返回一个类似列表的数据结构，其中包含字典中所有的键和值：'
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To iterate over the key and value pairs in a dictionary, use the `items()`
    method:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要遍历字典中的键值对，可以使用 `items()` 方法：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This method returns a *view* of tuples, and each tuple is a key-value pair.
    We can use the following code snippet to print them nicely:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法返回的是一个元组的 *视图*，每个元组都是一个键值对。我们可以使用以下代码片段来优雅地打印它们：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Views are more memory efficient than lists, and they don’t let you add or remove
    items.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 视图比列表更节省内存，而且它们不允许你添加或删除项。
- en: '**Multiple Return Values**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**多个返回值**'
- en: 'In the programs we’ve written so far, most of the functions return a single
    value, but functions sometimes return multiple values. We saw an example of such
    a function in “[Measuring the Dispersion](ch03.html#ch03lev1sec04)” on [page 71](ch03.html#page_71),
    where in the program to find the range, we returned three numbers from the `find_range()`
    function. Here’s another example of the approach we took there:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们到目前为止编写的程序中，大多数函数返回单一的值，但有时函数也会返回多个值。在 “[测量离散度](ch03.html#ch03lev1sec04)”
    中，我们在 [第 71 页](ch03.html#page_71) 的范围计算程序中就看到过一个返回三个值的例子。以下是我们在那个程序中采取的方法：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `components()` function accepts a velocity, `u`, and an angle, `theta`,
    in radians as parameters, and it calculates the `x` and `y` components and returns
    them. To return the calculated components, we simply list the corresponding Python
    labels in the return statement separated by a comma. This creates and returns
    a tuple consisting of the items `x` and `y`. In the calling code, we receive the
    multiple values:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`components()` 函数接受一个速度 `u` 和一个角度 `theta`（以弧度为单位）作为参数，计算 `x` 和 `y` 组件并返回它们。为了返回计算得到的组件，我们只需在返回语句中列出相应的
    Python 标签，并用逗号分隔。这将创建并返回一个包含 `x` 和 `y` 项的元组。在调用代码中，我们接收多个值：'
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Because the `components()` function returns a tuple, we can retrieve the returned
    values using tuple indices:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `components()` 函数返回一个元组，我们可以通过元组的索引来获取返回的值：
- en: '[PRE21]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This has advantages because we don’t have to know all the different values being
    returned. For one, you don’t have to write `x,y,z = myfunc1()` when the function
    returns three values or `a,x,y,z = myfunc1()` when the function returns four values,
    and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做有优势，因为我们不必知道所有返回的不同值。例如，当函数返回三个值时，你不必写 `x,y,z = myfunc1()`；当函数返回四个值时，也不必写
    `a,x,y,z = myfunc1()`，依此类推。
- en: In either of the preceding cases, the code calling the `components()` function
    must know which of the return values correspond to which component of the velocity,
    as there’s no way to know that from the values themselves.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述任一情况下，调用 `components()` 函数的代码必须知道返回值与速度的哪个分量对应，因为从值本身无法得知这一点。
- en: 'A user-friendly approach is to return a dictionary object instead, as we saw
    in the case of SymPy’s `solve()` function when used with the `dict=True` keyword
    argument. Here’s how we can rewrite the preceding components function to return
    a dictionary:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更友好的做法是改为返回一个字典对象，就像我们在使用 SymPy 的 `solve()` 函数时通过 `dict=True` 关键字参数所看到的那样。下面是我们如何重写之前的
    `components` 函数以返回字典：
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here, we return a dictionary with the keys `''x''` and `''y''` referring to
    the `x` and `y` components and their corresponding numerical values. With this
    new function definition, we don’t need to worry about the order of the returned
    values. We just use the key `''x''` to retrieve the `x` component and the key
    `''y''` to retrieve the `y` component:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们返回一个字典，键 `'x'` 和 `'y'` 分别对应 `x` 和 `y` 组件及其相应的数值。通过这种新的函数定义，我们不需要担心返回值的顺序。我们只需使用键
    `'x'` 来获取 `x` 组件，使用键 `'y'` 来获取 `y` 组件：
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This approach eliminates the need to use indices to refer to a specific returned
    value. The following code rewrites the program to find the range (see “[Measuring
    the Dispersion](ch03.html#ch03lev1sec04)” on [page 71](ch03.html#page_71)) so
    that the results are returned as a dictionary instead of a tuple:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法消除了使用索引来引用特定返回值的需要。以下代码重写了计算范围的程序（参见 “[测量离散度](ch03.html#ch03lev1sec04)”
    中的 [第 71 页](ch03.html#page_71)），使结果作为字典而不是元组返回：
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `find_range()` function now returns a dictionary with the keys `lowest`,
    `highest`, and `range` and with the lowest number, highest number, and the range
    as their corresponding values. At ➊, we simply use the corresponding key to retrieve
    the corresponding value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_range()` 函数现在返回一个字典，包含键 `lowest`、`highest` 和 `range`，它们的值分别对应最小值、最大值和范围。在
    ➊ 处，我们简单地使用相应的键来获取相应的值。'
- en: If we were just interested in the range of a group of numbers and we didn’t
    care about the lowest and highest numbers, we’d just use `result['range']` and
    not worry about what other values were returned.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只对一组数字的范围感兴趣，而不关心最小和最大数字，我们只需要使用 `result['range']`，而不必担心返回的其他值。
- en: '**Exception Handling**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**异常处理**'
- en: 'In [Chapter 1](ch01.html#ch01), we learned that trying to convert a string
    such as `''1.1''` to an integer using the `int()` function results in a `ValueError`
    exception. But with a `try...except` block, we can print a user-friendly error
    message:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 1 章](ch01.html#ch01)中，我们学到过尝试将字符串 `'1.1'` 转换为整数时，使用 `int()` 函数会导致 `ValueError`
    异常。但通过使用 `try...except` 块，我们可以打印一个用户友好的错误信息：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When any statement in the `try` block raises an exception, the type of exception
    raised is matched with the one specified by the `except` statement. If there’s
    a match, the program resumes in the `except` block. If the exception doesn’t match,
    the program execution halts and displays the exception. Here’s an example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `try` 块中的任何语句引发异常时，所引发的异常类型会与 `except` 语句中指定的类型进行匹配。如果匹配成功，程序将继续在 `except`
    块中执行。如果异常类型不匹配，程序执行将会停止，并显示异常信息。以下是一个例子：
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This code block attempts a division by 0, which results in a `ZeroDivisionError`
    exception. Although the division is carried out in a `try...except` block, the
    exception type is incorrectly specified, and the exception isn’t handled correctly.
    The correct way to handle this exception is to specify `ZeroDivisionError` as
    the exception type.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块尝试进行 0 除法运算，导致 `ZeroDivisionError` 异常。尽管除法操作在 `try...except` 块中执行，但异常类型被错误指定，导致异常没有被正确处理。处理此异常的正确方法是将
    `ZeroDivisionError` 指定为异常类型。
- en: '***Specifying Multiple Exception Types***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***指定多个异常类型***'
- en: 'You can also specify multiple exception types. Consider the function `reciprocal()`,
    which returns the reciprocal of the number passed to it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以指定多个异常类型。考虑下面的 `reciprocal()` 函数，它返回传递给它的数字的倒数：
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We defined the function `reciprocal()`, which prints the reciprocal of the user’s
    input. We know that if the function is called with 0, it’ll cause a `ZeroDivisionError`
    exception. If you pass a string, however, it’ll cause a `TypeError` exception.
    The function considers both these cases as invalid input and specifies both `ZeroDivisionError`
    and `TypeError` in the `except` statement as a tuple.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了函数 `reciprocal()`，它会打印用户输入的倒数。我们知道，如果该函数以 0 为参数调用，它会引发 `ZeroDivisionError`
    异常。然而，如果传入一个字符串，它会引发 `TypeError` 异常。该函数将这两种情况视为无效输入，并在 `except` 语句中将 `ZeroDivisionError`
    和 `TypeError` 作为元组指定。
- en: 'Let’s try calling the function with a valid input—that is, a nonzero number:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试用一个有效的输入调用函数——即一个非零数字：
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we call the function with 0 as the argument:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们用 0 作为参数调用函数：
- en: '[PRE29]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `0` argument raises the `ZeroDivisionError` exception, which is in the tuple
    of exception types specified to the `except` statement, so the code prints an
    error message.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `0` 引发了 `ZeroDivisionError` 异常，而这个异常类型在指定给 `except` 语句的异常类型元组中，因此代码会打印错误信息。
- en: 'Now, let’s enter a string:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们输入一个字符串：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In this case, we entered an invalid number, which raises the `TypeError` exception.
    This exception is also in the tuple of specified exceptions, so the code prints
    an error message. If you want to give a more specific error message, we can just
    specify multiple `except` statements as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们输入了一个无效的数字，导致引发了 `TypeError` 异常。该异常也在指定异常的元组中，因此代码会打印错误信息。如果你想提供更具体的错误信息，我们可以像下面这样指定多个
    `except` 语句：
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In addition to `TypeError`, `ValueError`, and `ZeroDivisionError`, there are
    a number of other built-in exception types. The Python documentation at *[https://docs.python.org/3.4/library/exceptions.html#bltin-exceptions](https://docs.python.org/3.4/library/exceptions.html#bltin-exceptions)*
    lists the builtin exceptions for Python 3.4.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `TypeError`、`ValueError` 和 `ZeroDivisionError`，还有许多其他内置异常类型。Python 3.4 的文档中列出了内置的异常类型，地址为
    *[https://docs.python.org/3.4/library/exceptions.html#bltin-exceptions](https://docs.python.org/3.4/library/exceptions.html#bltin-exceptions)*。
- en: '***The else Block***'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***else 块***'
- en: 'The `else` block is used to specify which statements to execute when there’s
    no exception. Consider an example from the program we wrote to draw the trajectory
    of a projectile (see “[Drawing the Trajectory](ch02.html#ch02lev3sec05)” on [page
    51](ch02.html#page_51)):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`else` 块用于指定在没有异常发生时要执行的语句。考虑一下我们编写的一个程序示例，用来绘制抛物体的轨迹（见 “[绘制轨迹](ch02.html#ch02lev3sec05)”
    在 [第 51 页](ch02.html#page_51)）：'
- en: '[PRE32]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If the input for `u` or `theta` couldn’t be converted to a floating point number,
    it doesn’t make sense for the program to call the `draw_trajectory()` and `plt.show()`
    functions. Instead, we specify these two statements in the `else` block at ➊.
    Using `try...except...else` will let you manage different types of errors during
    runtime and take appropriate action when there is an error or when there is none:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法将 `u` 或 `theta` 的输入转换为浮动点数，那么程序调用 `draw_trajectory()` 和 `plt.show()` 函数就没有意义了。相反，我们将这两个语句指定在
    ➊ 处的 `else` 块中。使用 `try...except...else` 结构可以让你在运行时管理不同类型的错误，并在发生错误时或没有错误时采取适当的措施：
- en: 1\. If there’s an exception and there’s an `except` statement corresponding
    to the exception type raised, the execution is transferred to the corresponding
    `except` block.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 如果发生异常且有与之对应的 `except` 语句，执行会转到对应的 `except` 块。
- en: 2\. If there’s no exception, the execution is transferred to the `else` block.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 如果没有发生异常，执行将转到 `else` 块。
- en: '**Reading Files in Python**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在 Python 中读取文件**'
- en: 'Opening a file is the first step to reading data from it. Let’s start with
    a quick example. Consider a file that consists of a collection of numbers with
    one number per line:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件是从中读取数据的第一步。我们先看一个简单的例子。假设有一个文件，其中包含了一系列数字，每行一个数字：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We want to write a function that reads the file and returns a list of those
    numbers:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想编写一个函数，它读取文件并返回一个包含这些数字的列表：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: First, we define the function `read_data()` and create an empty list to store
    all of the numbers. At ➊, we use the `open()` function to open the file whose
    location has been specified via the argument path. An example of the path would
    be */home/username/mydata.txt* on Linux, *C:\mydata.txt* on Microsoft Windows,
    or */Users/Username/mydata.txt* on OS X. The `open()` function returns a file
    object, which we use the label `f` to refer to. We can go over each line of the
    file using a `for` loop at ➋. Because each line is returned as a string, we convert
    it into a number and append it to the list `numbers`. The loop stops executing
    once all the lines have been read, and we close the file using the `close()` method.
    Finally, we return the `numbers` list.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义函数 `read_data()` 并创建一个空列表来存储所有数字。在 ➊ 处，我们使用 `open()` 函数打开通过参数 `path`
    指定位置的文件。路径的示例可能是 Linux 下的 */home/username/mydata.txt*，Microsoft Windows 下的 *C:\mydata.txt*，或者
    OS X 下的 */Users/Username/mydata.txt*。`open()` 函数返回一个文件对象，我们使用标签 `f` 来引用它。我们可以通过在
    ➋ 处使用 `for` 循环遍历文件中的每一行。由于每一行返回的是一个字符串，我们将其转换为数字并追加到列表 `numbers` 中。循环在所有行读取完毕后停止，我们使用
    `close()` 方法关闭文件。最后，我们返回 `numbers` 列表。
- en: 'This is similar to how we read the numbers from a file in [Chapter 3](ch03.html#ch03),
    although we didn’t have to close the file explicitly because we used a different
    approach there. Using the approach we took in [Chapter 3](ch03.html#ch03), we
    would rewrite the preceding function as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在[第3章](ch03.html#ch03)中从文件读取数字的方式类似，尽管因为我们在那里的方法不同，所以不需要显式关闭文件。使用我们在[第3章](ch03.html#ch03)中采用的方法，我们可以将前面的函数重写如下：
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The key statement here is at ➊. It’s similar to writing `f = open(path)` but
    only partially. Besides opening the file and assigning the file object returned
    by `open()` to `f`, it also sets up a new *context* with all the statements in
    that block—in this case, all the statements before the `return` statement. When
    all the statements in the body have been executed, the file is automatically closed.
    That is, when the execution reaches the statement at ➋, the file is closed without
    needing an explicit call to the `close()` method. This method also means that
    if there are any exceptions while working with the file, it’ll still be closed
    before the program exits. This is the preferred approach to working with files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键语句在 ➊。它类似于编写 `f = open(path)`，但仅是部分相似。除了打开文件并将 `open()` 返回的文件对象赋值给 `f`，它还会创建一个新的*上下文*，包含该块中的所有语句——在此情况下，所有
    `return` 语句之前的语句。当该块中的所有语句执行完毕后，文件会自动关闭。也就是说，当执行到 ➋ 语句时，文件会在不需要显式调用 `close()`
    方法的情况下自动关闭。这种方法还意味着，如果在处理文件时发生任何异常，文件将在程序退出之前被关闭。这是处理文件的推荐方法。
- en: '***Reading All the Lines at Once***'
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***一次性读取所有行***'
- en: 'Instead of reading the lines one by one to build a list, we can use the `readlines()`
    method to read all the lines into a list at once. This results in a more compact
    function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要一行一行地读取文件来构建列表，而可以使用 `readlines()` 方法一次性将所有行读取到一个列表中。这会导致一个更加简洁的函数：
- en: '[PRE36]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We read all the lines of the file into a list using the `readlines()` method
    at ➊. Then, we convert each of the items in the list into a floating point number
    using the `float()` function and list comprehension. Finally, we return the list
    `numbers`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`readlines()`方法将文件的所有行读入一个列表，在 ➊ 处。然后，我们使用`float()`函数和列表推导式将列表中的每一项转换为浮点数。最后，我们返回列表`numbers`。
- en: '***Specifying the Filename as Input***'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***指定文件名作为输入***'
- en: 'The `read_data()` function takes the file path as an argument. If your program
    allows you to specify the filename as an input, this function should work for
    any file as long as the file contains data we expect to read. Here’s an example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_data()`函数将文件路径作为参数。如果你的程序允许你指定文件名作为输入，那么这个函数应该适用于任何文件，只要文件包含我们预期读取的数据。以下是一个示例：'
- en: '[PRE37]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once you’ve added this code to the end of the `read_data()` function and run
    it, it’ll ask you to input the path to the file. Then, it’ll print the numbers
    it reads from the file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将这段代码添加到`read_data()`函数的末尾并运行，它将要求你输入文件的路径。然后，它会打印从文件中读取的数字：
- en: Enter the path of the file /home/amit/work/mydata.txt
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件路径 /home/amit/work/mydata.txt
- en: '[100.0,60.0,70.0,900.0,100.0,200.0,500.0,500.0,503.0,600.0,1000.0,1200.0]'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[100.0,60.0,70.0,900.0,100.0,200.0,500.0,500.0,503.0,600.0,1000.0,1200.0]'
- en: '***Handling Errors When Reading Files***'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***处理读取文件时的错误***'
- en: 'There are a couple of things that can go wrong when reading files: (1) the
    file can’t be read, or (2) the data in the file isn’t in the expected format.
    Here’s an example of what happens when a file can’t be read:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取文件时可能会出错的情况有几个：(1) 文件无法读取，或者 (2) 文件中的数据格式不符合预期。以下是文件无法读取时发生的情况示例：
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Because I entered a file path that doesn’t exist, the `FileNotFoundError` exception
    is raised when we try to open the file. We can make the program display a user-friendly
    error message by modifying our `read_data()` function as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我输入了一个不存在的文件路径，所以当我们尝试打开文件时，会引发`FileNotFoundError`异常。我们可以通过如下方式修改`read_data()`函数，使程序显示用户友好的错误信息：
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, when you specify a nonexistent file path, you’ll get an error message
    instead:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你指定一个不存在的文件路径时，将会收到一条错误信息：
- en: '[PRE40]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The second source of errors can be that the data in the file isn’t what your
    program expects to read. For example, consider a file that has the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的第二个来源可能是文件中的数据不是你的程序预期的内容。例如，考虑一个包含以下内容的文件：
- en: '[PRE41]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The third line in this file isn’t convertible to a floating point number because
    it has the letter `o` in it instead of the number `0`, and the fourth line consists
    of `1/5`, a fraction in string form, which `float()` can’t handle.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的第三行无法转换为浮点数，因为它包含字母`o`而不是数字`0`，而第四行包含了`1/5`，这是一个字符串形式的分数，`float()`无法处理。
- en: 'If you supply this data file to the earlier program, it’ll produce the following
    error:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将这个数据文件提供给之前的程序，它将产生如下错误：
- en: '[PRE42]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The third line in the file is `3o`, not the number `30`, so when we attempt
    to convert it into a floating point number, the result is `ValueError`. There
    are two approaches you can take when such data is present in a file. The first
    is to report the error and exit the program. The modified `read_data()` function
    would appear as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的第三行是`3o`，而不是数字`30`，所以当我们尝试将其转换为浮点数时，会得到`ValueError`。当文件中出现这种数据时，你可以采取两种方法。第一种是报告错误并退出程序。修改后的`read_data()`函数如下所示：
- en: '[PRE43]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We insert another `try...except` block in the function starting at ➊, and we
    convert the line into a floating point number at ➋. If the program raises the
    `ValueError` exception, we print an error message with the offending line and
    exit out of the `for` loop using `break` at ➌. The program then stops reading
    the file. The returned list, `numbers`, contains all the data that was successfully
    read before encountering the bad data. If there’s no error, we append the floating
    point number to the `numbers` list at ➍.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在函数中插入了另一个`try...except`块，从 ➊ 开始，然后在 ➋ 处将该行转换为浮点数。如果程序引发`ValueError`异常，我们将打印带有错误行的错误信息，并在
    ➌ 处使用`break`退出`for`循环。程序随后停止读取文件。返回的列表`numbers`包含在遇到错误数据之前成功读取的所有数据。如果没有错误，我们将在
    ➍ 处将浮点数追加到`numbers`列表中。
- en: 'Now when you supply the file *bad_data.txt* to the program, it’ll read only
    the first two lines, display the error message, and exit:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你将文件*bad_data.txt*提供给程序时，它只会读取前两行，显示错误信息，并退出：
- en: '[PRE44]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Returning partial data may not be desirable, so we could just replace the break
    statement at ➌ with `return` and no data would be returned.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 返回部分数据可能不太理想，因此我们可以将➌处的`break`语句替换为`return`，这样就不会返回任何数据。
- en: 'The second approach is to ignore the error and continue with the rest of the
    file. Here’s a modified `read_data()` function that does this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是忽略错误，继续处理文件的其余部分。下面是一个修改过的`read_data()`函数，它实现了这一点：
- en: '[PRE45]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The only change here is that instead of breaking out of the `for` loop, we
    just continue with the next iteration using the `continue` statement at ➊. The
    output from the program is now as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的变化是，我们不再退出`for`循环，而是使用`continue`语句在➊处继续执行下一个迭代。程序的输出现在如下所示：
- en: '[PRE46]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The specific application where you’re reading the file will determine which
    of the above approaches you want to take to handle bad data.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你读取文件的具体应用场景将决定你选择哪种方法来处理不良数据。
- en: '**Reusing Code**'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**重用代码**'
- en: Throughout this book, we’ve used classes and functions that were either part
    of the Python standard library or available after installing third-party packages,
    such as matplotlib and SymPy. Now we’ll look at a quick example of how we can
    import our own programs into other programs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用的类和函数要么是 Python 标准库的一部分，要么是通过安装第三方包（如 matplotlib 和 SymPy）后提供的。现在，我们将快速展示如何将我们自己的程序导入到其他程序中。
- en: 'Consider the function `find_corr_x_y()` that we wrote in “[Calculating the
    Correlation Between Two Data Sets](ch03.html#ch03lev1sec05)” on [page 75](ch03.html#page_75).
    We’ll create a separate file, *correlation.py*, which has only the function definition:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们在“[计算两个数据集之间的相关性](ch03.html#ch03lev1sec05)”一节中编写的`find_corr_x_y()`函数，它出现在[第75页](ch03.html#page_75)。我们将创建一个单独的文件，*correlation.py*，该文件仅包含函数定义：
- en: '[PRE47]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Without the *.py* file extension, a Python file is referred to as a module.
    This is usually reserved for files that define classes and functions that’ll be
    used in other programs. The following program imports the `find_corr_x_y()` function
    from the correlation module we just defined:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 没有*.py*扩展名时，Python 文件被称为模块。这通常用于定义将用于其他程序的类和函数的文件。以下程序从我们刚才定义的相关性模块中导入`find_corr_x_y()`函数：
- en: '[PRE48]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This program finds the correlation between the high school math grades and college
    admission scores of students we considered in [Table 3-3](ch03.html#ch3tab3) on
    [page 80](ch03.html#page_80). We import the `find_corr_x_y()` function from the
    correlation module, create the lists representing the two sets of grades, and
    call the `find_corr_x_y()` function with the two lists as arguments. When you
    run the program, it’ll print the correlation coefficient. Note that the two files
    must be in the same directory—this is strictly to keep things simple.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序找到我们在[第3-3表格](ch03.html#ch3tab3)和[第80页](ch03.html#page_80)中考虑的高中数学成绩和大学录取分数之间的相关性。我们从相关性模块中导入`find_corr_x_y()`函数，创建代表两组成绩的列表，并使用这两个列表作为参数调用`find_corr_x_y()`函数。当你运行程序时，它将打印出相关系数。请注意，这两个文件必须位于同一目录下——这是为了简化操作。
