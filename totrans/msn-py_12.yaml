- en: '**12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12  '
- en: DANGER! DANGER! ADDING HAZARDS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '危险！危险！**添加危险元素**  '
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)  '
- en: When the space station systems fail, all kinds of threats emerge. In this chapter,
    you’ll see the air start to leak from the station and will discover moving hazards
    in some of the rooms, including rogue robots, balls of energy, and toxic puddles.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '当空间站系统故障时，各种威胁出现。在本章中，你将看到空气开始从空间站泄漏，并且会在一些房间中发现移动的危险，包括流氓机器人、能量球和有毒的水坑。  '
- en: I’ve put the dangers last so you can test the game up to this point without
    worrying about your time or energy running out. In this chapter, we’ll start the
    air leak and draw a timer bar to let you know how much air you have left. We’ll
    also add hazards that can harm you and drain your energy. Finally, we’ll clean
    up the game and get it ready to play!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '我把危险放在最后，这样你可以在不担心时间或精力耗尽的情况下先测试游戏到这一点。在本章中，我们将开始漏气并绘制一个计时条，让你知道剩余多少空气。我们还将加入一些可能伤害你的危险，并消耗你的能量。最后，我们将清理游戏并准备好进行游戏！  '
- en: '**ADDING THE AIR COUNTDOWN**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加空气倒计时**  '
- en: 'There are two ways for the player to fail in the game: their air can run out
    or their energy can run out. At the bottom of the screen, two bars show players
    how much air and how much energy they have remaining (see [Figure 12-1](ch12.xhtml#ch12fig1)).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '玩家在游戏中有两种失败方式：空气用尽或能量用尽。在屏幕底部，两个条形图显示玩家剩余的空气和能量（见[图12-1](ch12.xhtml#ch12fig1)）。  '
- en: '![image](../images/fig12-1.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig12-1.jpg)  '
- en: '*Figure 12-1: Two bars at the bottom of the screen show your remaining air
    and energy.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-1：屏幕底部的两个条形图显示剩余的空气和能量。*  '
- en: You lose energy when you walk over toxic spills or are hit by moving hazards,
    and the air gradually runs out because of the leak in the space station wall.
    If you put on a space suit, you can buy more time, but the air in the suit’s canister
    will eventually run out too. Some of your toughest decisions could be deciding
    when to top up your air and use food to restore your energy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '当你走过有毒的溢出物，或者被移动的危险物体击中时，你会失去能量，空气也会因为空间站墙壁的泄漏而逐渐耗尽。如果你穿上太空服，你可以争取更多的时间，但太空服的气瓶最终也会耗尽。你最艰难的决定之一可能是决定什么时候补充空气和使用食物来恢复能量。  '
- en: '**DISPLAYING THE AIR AND ENERGY BARS**'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**显示空气和能量条**  '
- en: We’ll create a new section of the program called `AIR`, which you need to place
    after the `DOORS` section but before the `START` section at the end of the program.
    Add the new code shown in [Listing 12-1](ch12.xhtml#ch12list1) to your final listing
    from the previous chapter (*listing11-7.py*). Save your file as *listing12-1.py*.
    If you run the program, it won’t do anything new yet, but this code creates the
    function for drawing the air and energy bars.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将创建一个新的程序部分，称为`AIR`，你需要将它放在`DOORS`部分之后，但在程序末尾的`START`部分之前。将[清单12-1](ch12.xhtml#ch12list1)中的新代码添加到你上一个章节的最终清单中（*listing11-7.py*）。将文件保存为*listing12-1.py*。如果你运行程序，它不会做任何新的事情，但这段代码为绘制空气和能量条创建了函数。  '
- en: '*listing12-1.py*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-1.py*  '
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 12-1: Drawing the air and energy bars*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-1：绘制空气和能量条*  '
- en: We begin the new `draw_energy_air()` function by drawing a black box over the
    status area at the bottom of the screen to clear it ➊. We then add the AIR label
    in blue ➋, and the ENERGY label in yellow ➌. This function will use the `air`
    and `energy` variables, which are already set to 100 in the `VARIABLES` part of
    the program.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '我们通过在屏幕底部的状态区域绘制一个黑色框来清除它，开始新的`draw_energy_air()`函数 ➊。然后我们添加蓝色的AIR标签 ➋，黄色的ENERGY标签
    ➌。这个函数将使用已经在程序的`VARIABLES`部分设置为100的`air`和`energy`变量。  '
- en: If the player has some air left (if the variable `air` is more than 0) ➍, a
    box is created that uses the `air` variable for its width ➎. The box is then filled
    with the color blue ➏. This draws the AIR indicator bar, which starts off being
    100 pixels wide and gets smaller as the `AIR` variable decreases.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家还有一些空气（如果变量`air`大于0） ➍，将创建一个使用`air`变量作为宽度的框 ➎。然后，框将被填充为蓝色 ➏。这会绘制AIR指示条，它最初宽度为100像素，并随着`AIR`变量的减少而变小。
- en: We use similar instructions to draw the energy bar ➐, but the bar’s start position
    is farther to the right (the *x* position is 250 instead of 50).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用类似的指令来绘制能量条 ➐，但条形图的起始位置更靠右（*x*位置是250，而不是50）。  '
- en: '**ADDING THE AIR COUNTDOWN FUNCTIONS**'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加空气倒计时功能**  '
- en: We’ll make three functions to enable the air countdown. The `end_the_game()`
    function runs when you’re out of air. It displays the reason the player failed
    the mission, plays some sound effects, and shows a large GAME OVER message in
    the middle of the game window.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建三个函数来启用空气倒计时。当你没有空气时，`end_the_game()`函数会运行。它会显示玩家失败任务的原因，播放一些音效，并在游戏窗口中央显示一个大的游戏结束消息。
- en: The `air_countdown()` function saps the air supply. We’ll also add an `alarm()`
    function that runs shortly after the game begins to warn the player that their
    air is failing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`air_countdown()`函数消耗空气供应。我们还会添加一个`alarm()`函数，在游戏开始后不久运行，警告玩家他们的空气供应不足。'
- en: These three functions are in [Listing 12-2](ch12.xhtml#ch12list2). Add the new
    code shown here in the `AIR` section of the program, after the `draw_energy_air()`
    function you just added. Save your program as *listing12-2.py*. You can run this
    program using pgzrun listing12-2.py, but you won’t see anything new yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个函数位于[清单12-2](ch12.xhtml#ch12list2)中。将此处显示的新代码添加到程序的`AIR`部分，在你刚刚添加的`draw_energy_air()`函数之后。将程序保存为*listing12-2.py*。你可以使用`pgzrun
    listing12-2.py`运行此程序，但此时你还看不到任何新内容。
- en: '*listing12-2.py*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-2.py*'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 12-2: Adding the air countdown*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-2：添加空气倒计时*'
- en: The `air_countdown()` function ➎ reduces the `air` variable’s value by 1 each
    time it runs ➏. If the value is equal to 20 ➐ or 10, a warning sound effect plays
    to let the player know their air is low.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`air_countdown()`函数 ➎ 每次运行时都会减少`air`变量的值1 ➏。如果值等于20 ➐或10，会播放一个警告音效，提醒玩家他们的空气已经很低。'
- en: The `draw_energy_air()` function you added in [Listing 12-1](ch12.xhtml#ch12list1)
    updates the air and energy display ➑. If the air has run out ➒, the `end_the_game()`
    function runs and displays the string `"You're out of air!``"`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[清单12-1](ch12.xhtml#ch12list1)中添加的`draw_energy_air()`函数会更新空气和能量的显示 ➑。如果空气耗尽
    ➒，`end_the_game()`函数会运行并显示字符串`"You're out of air!"`。
- en: '**TIP**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Sound files must be stored in the *sounds* folder and should be in *.wav* or
    *.ogg* format. To play a sound called *bang.wav*, you would use `sounds.bang.play()`.
    As with images, you don’t need to tell Pygame Zero the file extension or where
    the sound is stored. Why not try recording and adding your own sound effects for
    various points in the game?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 音频文件必须存储在*sounds*文件夹中，格式应为*.wav*或*.ogg*。要播放名为*bang.wav*的声音，可以使用`sounds.bang.play()`。与图像一样，你不需要告诉Pygame
    Zero音频文件的扩展名或其存储位置。为什么不尝试为游戏中的不同点录制并添加你自己的音效呢？
- en: In the `end_the_game()` function ➊, we use the variable `reason` for the information
    it receives, and display that on the screen as the reason for death ➋. The `game_over`
    variable is set to `True` ➌. Other functions use this variable to know when the
    game has finished so everything can come to a stop. The `end_the_game()` function
    then draws the words GAME OVER in large text in the middle of the screen. The
    text is drawn at position *x* = 120, *y* = 400 in white text using a font size
    of 128 ➍. We also add a drop shadow under the text for effect, which is offset
    by 1 pixel in each direction and is colored black (see [Figure 12-2](ch12.xhtml#ch12fig2)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`end_the_game()`函数 ➊ 中，我们使用变量`reason`来存储接收到的信息，并将其作为死亡原因显示在屏幕上 ➋。`game_over`变量被设置为`True`
    ➌。其他函数使用这个变量来判断游戏是否结束，从而使一切停止。`end_the_game()`函数随后在屏幕中央绘制“游戏结束”的大字。文字的位置是*x* =
    120，*y* = 400，使用白色文字和128的字体大小 ➍。我们还为文字添加了一个投影效果，投影偏移了1像素，并且是黑色的（见[图12-2](ch12.xhtml#ch12fig2)）。
- en: '![image](../images/fig12-2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig12-2.jpg)'
- en: '*Figure 12-2: Oh no! You’re out of air!*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-2：哦不！你没氧气了！*'
- en: The final function in this section, `alarm()` ➓, plays the alarm sound and displays
    a message telling you to radio for help. It uses the player’s name in the warning
    to personalize it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的最后一个函数`alarm()` ➓，播放警报声音并显示一条消息，提醒你呼叫无线电寻求帮助。它在警告中使用玩家的名字，以便个性化。
- en: The number in parentheses in the `sounds.alarm.play()` command is the number
    of times the sound should be played (in [Listing 12-2](ch12.xhtml#ch12list2),
    it’s three).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`sounds.alarm.play()`命令中括号里的数字表示声音应该播放的次数（在[清单12-2](ch12.xhtml#ch12list2)中，它是三次）。'
- en: '**STARTING THE AIR COUNTDOWN AND SOUNDING THE ALARM**'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启动空气倒计时并触发警报**'
- en: We haven’t set the three new functions to run yet. To do that, we need to add
    some instructions to the `START` section of the program, which is (perhaps confusingly!)
    at the end of the program listing. Add the new instructions shown in [Listing
    12-3](ch12.xhtml#ch12list3), and save it as *listing12-3.py*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有设置这三个新函数的运行。为此，我们需要在程序的 `START` 部分添加一些指令，这部分（也许让人困惑的是）位于程序清单的末尾。添加 [清单
    12-3](ch12.xhtml#ch12list3) 中显示的新指令，并将其保存为 *listing12-3.py*。
- en: '*listing12-3.py*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-3.py*'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 12-3: Starting the air countdown*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-3：启动空气倒计时*'
- en: Now the game has a time limit. When the air runs out, the game ends. Run the
    program using pgzrun listing12-3.py, and you should see your air supply slowly
    go down.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在游戏有了时间限制。当空气用尽时，游戏结束。使用 `pgzrun listing12-3.py` 运行程序，你应该能看到空气供应逐渐下降。
- en: If you find the game too difficult when you’re playing the final version, you
    can give yourself more time by changing the 5 in the final line in [Listing 12-3](ch12.xhtml#ch12list3)
    to a higher number. This number decides how often the `air_countdown()` function
    saps your air supply, and is measured in seconds. In particular, if you’re using
    a Raspberry Pi 2, the time limit might be challenging because the game runs a
    bit more slowly there. It’s still possible to complete the game, but you can increase
    the number 5 to give yourself a little more, ahem, breathing space.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现游戏的最终版本太难，可以通过将 [清单 12-3](ch12.xhtml#ch12list3) 中最后一行的 5 改为更高的数字，来给自己更多时间。这个数字决定了
    `air_countdown()` 函数消耗空气供应的频率，单位是秒。特别是，如果你使用的是 Raspberry Pi 2，时间限制可能会显得很具挑战性，因为该平台上游戏运行较慢。尽管如此，完成游戏仍然是可能的，但你可以将数字
    5 增大一点，给自己更多的、咳咳、呼吸空间。
- en: '**TRAINING MISSION #1**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: When your air supply reaches 0, you should see the GAME OVER message and find
    that you can no longer move the astronaut. Your energy goes down by 1 percent
    every 5 seconds, so it’ll take about 8.5 minutes (500 seconds) to run out. Can
    you work out how to make the air leak more often, so you can more easily test
    what happens when the air runs out?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的空气供应降到 0 时，你应该会看到 "GAME OVER" 信息，并且发现你无法再控制宇航员。每 5 秒你的能量下降 1%，因此大约 8.5 分钟（500
    秒）后空气会耗尽。你能想出如何让空气泄漏得更频繁一点，以便更轻松地测试空气耗尽时会发生什么吗？
- en: 'After completing the training mission, make sure you change the program back
    again: otherwise, you’ll find your mission rather hard to complete!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完成训练任务后，确保将程序恢复原状：否则你会发现任务完成起来相当困难！
- en: '**ADDING THE MOVING HAZARDS**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加移动危险物**'
- en: 'There are three types of moving hazards in the game: two types of energy balls
    and a flying drone that’s gone rogue.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中有三种移动的危险物：两种类型的能量球和一架失控的飞行无人机。
- en: '[Figure 12-3](ch12.xhtml#ch12fig3) shows the direction numbers the moving hazards
    use.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-3](ch12.xhtml#ch12fig3) 显示了这些移动危险物使用的方向编号。'
- en: Hazards move in a straight line until they hit something, and then we add a
    number to change their direction. The number we add will decide the hazard’s movement
    pattern. For example, if we add `1` to the direction number, the hazard moves
    in a clockwise pattern (up, right, down, left). If we add `-1` to the direction
    number, the hazard moves in a counterclockwise pattern (left, down, right, up).
    If we add `2`, it will bounce between going left and right (2 and 4) or up and
    down (1 and 3). Take a look at [Figure 12-3](ch12.xhtml#ch12fig3) and check this
    makes sense to you. Each hazard can have its own pattern of movement.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 危险物会沿直线移动，直到碰到某物，然后我们会添加一个数字来改变它们的方向。我们添加的数字决定了危险物的移动模式。例如，如果我们向方向编号添加 `1`，危险物将按顺时针方向移动（上、右、下、左）。如果我们向方向编号添加
    `-1`，危险物将按逆时针方向移动（左、下、右、上）。如果我们添加 `2`，它将在左右（2 和 4）或上下（1 和 3）之间反弹。看看 [图 12-3](ch12.xhtml#ch12fig3)，确认这是否能理解。每个危险物都可以有自己的移动模式。
- en: '![image](../images/fig12-3.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig12-3.jpg)'
- en: '*Figure 12-3: The direction numbers the moving hazards use are numbered in
    a clockwise order.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-3：移动危险物使用的方向编号按顺时针顺序编号。*'
- en: If the addition results in a number that’s higher than 4, we subtract 4\. For
    example, if a hazard is moving clockwise, we add 1 to its direction number each
    time it hits something. If it’s going down (direction 3), we add 1 when it hits
    something, so it starts to move left (direction 4). The next time it hits something,
    we add 1, but that makes the direction number 5\. So we subtract 4, and that gives
    us a direction number of 1\. As [Figure 12-3](ch12.xhtml#ch12fig3) shows, that’s
    the next direction number after 4, going around in a clockwise pattern.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果加法结果超过4，我们就减去4。例如，如果一个危险物体按顺时针方向移动，每次碰到物体时我们都会将方向数加1。如果它是向下移动（方向3），碰到物体时我们加1，使得它开始向左移动（方向4）。下一次碰到物体时，我们加1，这使得方向数变为5。因此，我们减去4，得到方向数1。如[图12-3](ch12.xhtml#ch12fig3)所示，这是4之后的下一个方向数，按顺时针方向旋转。
- en: '[Table 12-1](ch12.xhtml#ch12tab1) summarizes the numbers we can use to get
    different movement patterns.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[表12-1](ch12.xhtml#ch12tab1)总结了我们可以使用的数字，以获得不同的移动模式。'
- en: '**Table 12-1:** How to Change Direction When a Hazard Hits Something'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**表12-1：** 当危险物体碰到物体时如何改变方向'
- en: '| **Movement pattern** |  | **Number to add to the direction number** |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **移动模式** |  | **要加到方向数上的数字** |'
- en: '| --- | --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Clockwise | ![image](../images/f0203-01.jpg) | 1 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 顺时针 | ![image](../images/f0203-01.jpg) | 1 |'
- en: '| Counterclockwise | ![image](../images/f0203-02.jpg) | -1 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 逆时针 | ![image](../images/f0203-02.jpg) | -1 |'
- en: '| Left/right | ![image](../images/f0203-03.jpg) | 2 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 左/右 | ![image](../images/f0203-03.jpg) | 2 |'
- en: '| Up/down | ![image](../images/f0203-04.jpg) | 2 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 上/下 | ![image](../images/f0203-04.jpg) | 2 |'
- en: '**RED ALERT**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Take care not to mix up the two numbers that describe the movement. The direction
    number (see [Figure 12-3](ch12.xhtml#ch12fig3)) tells the program which direction
    a hazard is moving in. The number we add to the direction number (see [Table 12-1](ch12.xhtml#ch12tab1))
    tells the program which way the hazard should bounce when it hits something.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*请小心不要混淆描述移动的两个数字。方向数（见[图12-3](ch12.xhtml#ch12fig3)）告诉程序危险物体的移动方向。我们加到方向数上的数字（见[表12-1](ch12.xhtml#ch12tab1)）则告诉程序当危险物体碰到物体时应该如何反弹。*'
- en: '**ADDING THE HAZARD DATA**'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加危险数据**'
- en: Between the `AIR` and `START` sections, we’ll add a new section to the program
    called `HAZARDS`. [Listing 12-4](ch12.xhtml#ch12list4) shows you the hazard data.
    Add it to your program, and save it as *listing12-4.py*. If you run the program,
    it won’t do anything new yet, but you can check that you don’t get any error messages
    in the command line window.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AIR`和`START`部分之间，我们将在程序中添加一个名为`HAZARDS`的新部分。[列表12-4](ch12.xhtml#ch12list4)展示了危险数据。将其添加到程序中，并保存为*listing12-4.py*。如果运行程序，它暂时不会做任何新操作，但你可以检查命令行窗口中是否没有出现错误信息。
- en: '*listing12-4.py*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-4.py*'
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 12-4: Adding the hazard data*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表12-4：添加危险数据*'
- en: We create a `hazard_data` dictionary that uses room numbers as dictionary keys.
    For each room, there is a list that contains the data for all the hazards. The
    data for each hazard is in a list that contains the hazard’s *y* position, *x*
    position, starting direction, and number to add when it hits something.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`hazard_data`字典，使用房间编号作为字典的键。对于每个房间，都会有一个包含所有危险数据的列表。每个危险的数据以一个包含*y*位置、*x*位置、起始方向和碰到物体时要加的数字的列表形式表示。
- en: For example, room 28 ➊ has a hazard with the list data `[7, 3, 4, 1]`. This
    means the hazard starts at *y* = 7, *x* = 3\. It starts moving left (direction
    4), and it moves clockwise when it hits something because we add 1 to its direction
    number.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，房间28 ➊ 存在一个包含列表数据`[7, 3, 4, 1]`的危险。这意味着该危险从*y* = 7，*x* = 3 开始。它开始向左移动（方向4），当它碰到物体时会顺时针转动，因为我们将1加到它的方向数上。
- en: 'Room 41 contains three hazards (in three lists), which are moving from left
    to right and back again. We know that because they start with a direction of 2
    or 4 (right or left) and add 2 to the direction when they hit something (making
    4 or 6: we know that 6 becomes 2 after we subtract 4).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 房间41包含三个危险（分别在三个列表中），它们从左向右并来回移动。我们知道这一点，因为它们的方向初始为2或4（向右或向左），并在碰到物体时将方向加2（变为4或6：我们知道6减去4会变成2）。
- en: '**SAPPING THE PLAYER’S ENERGY**'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**消耗玩家能量**'
- en: After the hazard data, we need to add a function called `deplete_energy()`,
    which reduces the player’s energy when a hazard hits them. [Listing 12-5](ch12.xhtml#ch12list5)
    shows the new function. Add it after [Listing 12-4](ch12.xhtml#ch12list4) in the
    `HAZARDS` section of the program, and save your program as *listing12-5.py*. You
    can run the program to check for errors using pgzrun listing12-5.py, but it won’t
    do anything new.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在危害数据之后，我们需要添加一个名为`deplete_energy()`的函数，当危害击中玩家时会减少玩家的能量。[列表 12-5](ch12.xhtml#ch12list5)展示了这个新函数。将它添加到程序的`HAZARDS`部分中[列表
    12-4](ch12.xhtml#ch12list4)后面，并将程序保存为*listing12-5.py*。你可以使用pgzrun listing12-5.py运行程序来检查错误，但它不会做任何新的操作。
- en: '*listing12-5.py*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-5.py*'
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 12-5: Reducing the player’s energy*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-5：减少玩家的能量*'
- en: The `deplete_energy()` function accepts a number ➊ and uses that number to reduce
    the player’s `energy` variable ➋. As a result, we can use this function for hazards
    that drain different amounts of energy.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`deplete_energy()`函数接受一个数字 ➊，并使用这个数字来减少玩家的`energy`变量 ➋。因此，我们可以用这个函数来处理消耗不同能量值的危害。'
- en: '**STARTING AND STOPPING HAZARDS**'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启动和停止危害**'
- en: When the player enters a new room, the function `hazard_start()` puts the hazards
    into the room. [Listing 12-6](ch12.xhtml#ch12list6) shows this function, which
    you need to add after the `deplete_energy()` function in the `HAZARDS` section
    of the program. Save your program as *listing12-6.py*. If you run it using pgzrun
    listing12-6.py, you shouldn’t notice any difference yet, because we haven’t set
    this function to run.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家进入新房间时，函数`hazard_start()`会将危害添加到房间中。[列表 12-6](ch12.xhtml#ch12list6)展示了这个函数，你需要将它添加到程序中`HAZARDS`部分的`deplete_energy()`函数后面。将程序保存为*listing12-6.py*。如果你使用pgzrun
    listing12-6.py运行它，你应该不会注意到任何变化，因为我们还没有设置这个函数来运行。
- en: '*listing12-6.py*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-6.py*'
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 12-6: Adding the hazards to the current room*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-6：将危害添加到当前房间*'
- en: The `hazard_start()` function will run whenever the player enters a new room,
    so it begins by checking whether the current room has an entry in the `hazard_data`
    dictionary ➊. If it does, that room should have moving hazards in it, and the
    rest of the function runs. We put the hazard data for the room into a list called
    `current_room_hazards_list` ➋. The function then uses a loop ➌ to process each
    hazard in the list in turn.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`hazard_start()`函数会在每次玩家进入新房间时运行，因此它首先检查当前房间在`hazard_data`字典中是否有条目 ➊。如果有，这个房间应该有移动的危害，接下来会执行函数的其余部分。我们将房间的危害数据放入一个名为`current_room_hazards_list`的列表
    ➋。然后函数使用一个循环 ➌依次处理列表中的每个危害。'
- en: The hazards use their own room map called `hazard_map`, so they can easily fly
    over objects on the floor without overwriting them in the room map. If the hazards
    used the same room map as the props, they would wipe out props as they flew over
    them, or we’d need a complicated way to remember what’s underneath the hazards.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 危害使用它们自己的房间地图，称为`hazard_map`，这样它们可以轻松地飞越地板上的物体，而不会覆盖房间地图中的物品。如果危害使用与道具相同的房间地图，它们就会在飞越道具时将道具抹去，或者我们需要一个复杂的方法来记住危害下方的内容。
- en: The three hazard objects have the numbers 49, 50, and 51 in the `objects` dictionary.
    The program uses a simple calculation to work out which one goes into a particular
    room. As you’ve seen before, Python’s `%` operator gives you the remainder after
    doing a division. When you divide any number by 3, the remainder will be 0, 1,
    or 2\. So the program divides the room number by 3 and adds the remainder to 49
    to pick an object number ➍. So, for example, if we were in room 34, the program
    would work out that `34 % 3` is 1, and add 1 to 49 to select hazard number 50
    for all the hazards in that room.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个危害对象在`objects`字典中分别对应数字49、50和51。程序使用简单的计算来确定哪个危害对象应该进入特定的房间。正如你之前所见，Python的`%`操作符会给出除法后的余数。当你将任何数字除以3时，余数将是0、1或2。所以，程序会将房间号除以3，然后将余数加到49上，从而选出一个危害对象的编号
    ➍。例如，如果我们在房间34，程序会计算出`34 % 3`的余数是1，然后将1加到49上，选择编号为50的危害对象。
- en: This way of selecting hazard numbers ensures the hazard is always the same type
    when the player enters the room. Because the map is five rooms wide, it also guarantees
    that two directly connected rooms cannot have the same hazard in them. That adds
    a sense of variety to the map, although not all rooms have hazards, so in practice,
    players might still encounter the same hazard twice in a row, walking through
    some empty rooms in between.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种选择危害编号的方式确保了玩家进入房间时，危害始终是相同类型的。由于地图宽度为五个房间，它还保证了两个直接相连的房间不能有相同的危害。这为地图增加了多样性，尽管并非所有房间都有危害，因此在实践中，玩家可能会在走过一些空房间后，连续两次遇到相同的危害。
- en: The function finishes by scheduling the `hazard_move()` function to run every
    0.15 seconds ➎.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的最后，通过安排每隔 0.15 秒执行一次 `hazard_move()` 函数来完成 ➎。
- en: To start the `hazard_start()` function when the player enters a new room, add
    an instruction to the `start_room()` function, as shown in [Listing 12-7](ch12.xhtml#ch12list7).
    Save your program as *listing12-7.py*. This version of the program will freeze
    when you leave the start room, because we haven’t finished adding the code for
    the hazards yet.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要在玩家进入新房间时启动 `hazard_start()` 函数，在 `start_room()` 函数中添加一条指令，如 [列表 12-7](ch12.xhtml#ch12list7)
    所示。将你的程序保存为 *listing12-7.py*。该版本的程序将在你离开起始房间时冻结，因为我们还没有完成添加危害的代码。
- en: '*listing12-7.py*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-7.py*'
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 12-7: Starting hazards when the player enters the room*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-7：玩家进入房间时启动危害*'
- en: Not all rooms have hazards, so we will stop the hazards from moving when the
    player leaves a room. We previously added instructions in the `game_loop()` function
    to turn off the function that makes the hazards move when the player changes room.
    We commented them out because we weren’t ready for them yet.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有房间都有危害，因此当玩家离开房间时，我们会停止危害的移动。我们之前在 `game_loop()` 函数中添加了指令，用于在玩家改变房间时关闭让危害移动的函数。我们将它们注释掉了，因为那时我们还没有准备好使用它们。
- en: 'We’re ready for them now! Follow these steps to uncomment the instructions
    (you did something similar in [Chapter 8](ch08.xhtml#ch08)):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好添加它们了！按照以下步骤取消注释这些指令（你在 [第 8 章](ch08.xhtml#ch08) 中做过类似的操作）：
- en: Click **Edit** ▸ **Replace** (or press CTRL-H) in IDLE to show the Replace Text
    dialog box.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 中点击 **编辑** ▸ **替换**（或按 CTRL-H）以显示替换文本对话框。
- en: 'Type #clock.unschedule(hazard_move) into the Find box.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在“查找”框中输入 #clock.unschedule(hazard_move)。'
- en: Type clock.unschedule(hazard_move) into the Replace With box.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“替换为”框中输入 clock.unschedule(hazard_move)。
- en: Click **Replace All**. IDLE should replace the instruction in four places, and
    jump to the last one in the listing. [Listing 12-8](ch12.xhtml#ch12list8) shows
    the new line that will be highlighted at the end of the process (you don’t need
    to type this listing in). Above this block of code, there are three similar blocks
    that also now stop the hazards moving when the player leaves the room through
    one of the exits.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **全部替换**。IDLE 应该会在四个地方替换该指令，并跳转到列表中的最后一项。[列表 12-8](ch12.xhtml#ch12list8)
    显示了过程结束时将被高亮的新行（你无需输入此列表）。在这段代码之前，有三个类似的代码块，现在也会在玩家离开房间时通过出口停止危害的移动。
- en: '*listing12-8.py*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-8.py*'
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 12-8: Stopping hazards when the player leaves the room*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-8：当玩家离开房间时停止危害移动*'
- en: Save your updated program as *listing12-8.py*. If you run this version of the
    program, you’ll see an error message in the console, and the game will freeze
    when you leave the room. The reason is that we haven’t added the `hazard_move()`
    function yet.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的更新程序保存为 *listing12-8.py*。如果你运行此版本的程序，控制台将显示错误信息，且当你离开房间时，游戏将会冻结。原因是我们还没有添加
    `hazard_move()` 函数。
- en: '**SETTING UP THE HAZARD MAP**'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置危害地图**'
- en: We now need to make sure that when the room map is generated for scenery and
    props, an empty hazard map is also generated. The `hazard_start()` function will
    fill it with any hazards in the room.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要确保，当生成房间地图、景物和道具时，也会生成一个空的危害地图。`hazard_start()` 函数将用房间中的任何危害来填充这个地图。
- en: Add the new code shown in [Listing 12-9](ch12.xhtml#ch12list9) at the end of
    the `generate_map()` function in the `MAKE MAP` section of the program. Place
    this new code just before the `GAME LOOP` section, and make sure you indent the
    first line by four spaces because it’s inside a function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的 `MAKE MAP` 部分的 `generate_map()` 函数末尾，添加 [列表 12-9](ch12.xhtml#ch12list9)
    中显示的新代码。将此新代码放在 `GAME LOOP` 部分之前，并确保将第一行缩进四个空格，因为它位于函数内部。
- en: Save your program as *listing12-9.py*. When you run it, the program won’t work
    properly yet because it is still incomplete.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 保存程序为 *listing12-9.py*。当你运行它时，程序还不能正常工作，因为它还不完整。
- en: '*listing12-9.py*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-9.py*'
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 12-9: Creating the empty hazard map*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-9：创建空的危险物体地图*'
- en: These new instructions create an empty list for the hazard map and fill it with
    rows of 0s that are as wide as the room width.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新指令为危险物体地图创建了一个空列表，并用与房间宽度相同的 0 填充每一行。
- en: '**MAKING THE HAZARDS MOVE**'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**让危险物体移动**'
- en: Now let’s add the missing `hazard_move()` function to make the hazards move.
    Put this at the end of the `HAZARDS` section of the program after the `hazard_start()`
    function, as shown in [Listing 12-10](ch12.xhtml#ch12list10). Save your program
    as *listing12-10.py*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加缺失的 `hazard_move()` 函数，使危险物体能够移动。将其放在程序中 `HAZARDS` 部分的 `hazard_start()`
    函数之后，正如 [清单 12-10](ch12.xhtml#ch12list10) 所示。保存程序为 *listing12-10.py*。
- en: '*listing12-10.py*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-10.py*'
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 12-10: Adding the hazard movement function*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-10：添加危险物体移动函数*'
- en: The `hazard_move()` function uses an idea similar to the player movement. The
    hazard’s position is stored in the `old_hazard_x` and `old_hazard_y` variables
    ➊. The hazard is then moved ➋.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`hazard_move()` 函数使用了类似于玩家移动的思想。危险物体的位置存储在 `old_hazard_x` 和 `old_hazard_y`
    变量中 ➊。然后，危险物体被移动 ➋。'
- en: Then we check whether the hazard has hit the player ➌, gone out the door ➍,
    or hit the scenery or another hazard ➎. If it has ➏, then its position is reset
    to its old values, and we change its direction by adding the last number in its
    list of data to the direction number ➐. If adding this number increases the direction
    number to more than 4 ➑, the function subtracts 4, as we discussed earlier in
    this chapter, because 4 is the highest valid direction number. On the other hand,
    if adding this number decreases the direction number to less than 1, the function
    adds 4\. Finally, the new direction is saved in the hazard data ➒.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查危险物体是否撞到了玩家 ➌、是否出了门 ➍，或者撞到了景物或另一个危险物体 ➎。如果是 ➏，则将其位置重置为原来的值，并通过将数据列表中的最后一个数字加到方向编号上来改变其方向
    ➐。如果加上这个数字后，方向编号超过 4 ➑，函数会减去 4，正如我们在本章之前讨论的，因为 4 是最大的有效方向编号。另一方面，如果加上这个数字后，方向编号小于
    1，函数则会加上 4。最后，新的方向会保存在危险物体数据中 ➒。
- en: At the end of the function ➓, the hazard is put into the hazard map.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的末尾 ➓，危险物体被放入了危险物体地图。
- en: You can run this program using pgzrun listing12-10.py. The first room with a
    hazard is the one to the right of your starting room. When you enter it, your
    energy will mysteriously go down sometimes, even though you can’t see anything
    dangerous. This is because we haven’t added code to draw the hazards yet.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行 `pgzrun listing12-10.py` 来启动这个程序。第一个有危险物体的房间是在你起始房间的右侧。当你进入时，尽管你看不见任何危险物体，但你的能量有时会神秘地下降。这是因为我们还没有添加绘制危险物体的代码。
- en: '**TIP**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: When a hazard hits you ➌, the `deplete_energy()` function reduces your energy
    by 10 percent. If you find the game too difficult, you can change this number
    to 5\. If you complete the game and want a tougher challenge the next time around,
    you could change it to 20!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当危险物体碰到你时 ➌，`deplete_energy()` 函数会减少你 10% 的能量。如果你觉得游戏太难，可以将这个数字改为 5。如果你完成游戏并希望下次有更大的挑战，可以将它改为
    20！
- en: '**DISPLAYING HAZARDS IN THE ROOM**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在房间中显示危险物体**'
- en: It doesn’t seem fair to have invisible dangers, so let’s add a few lines to
    show the hazards in the room. [Listing 12-11](ch12.xhtml#ch12list11) shows three
    new lines to add to the `draw()` function in the `DISPLAY` section of the program.
    Put these near the end of the function, before the code to draw the player.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为房间中的危险物体添加几行代码，以便显示它们，因为不可见的危险似乎不太公平。[清单 12-11](ch12.xhtml#ch12list11) 显示了要添加到程序
    `DISPLAY` 部分的 `draw()` 函数中的三行新代码。将这些代码放在函数末尾，绘制玩家代码之前。
- en: Indent these instructions by a total of 12 spaces because they’re inside the
    `draw()` function (4 spaces), inside the `y` loop (another 4), and inside the
    `x` loop (another 4-space indentation). Save your program as *listing12-11.py*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些指令在 `draw()` 函数内（缩进 4 个空格）、在 `y` 循环内（再缩进 4 个空格）以及在 `x` 循环内（再缩进 4 个空格），因此总共需要缩进
    12 个空格。保存程序为 *listing12-11.py*。
- en: '*listing12-11.py*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-11.py*'
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 12-11: Displaying the moving hazards*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-11：显示移动中的危险物体*'
- en: This listing completes the moving hazards. Run your program using pgzrun listing12-11.py.
    Then start running for your life! You should now be able to see the moving hazards,
    such as the energy ball shown in [Figure 12-4](ch12.xhtml#ch12fig4).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表完成了移动的危险物体。使用pgzrun listing12-11.py来运行你的程序。然后开始奔命吧！你现在应该能看到移动的危险物体，比如[图
    12-4](ch12.xhtml#ch12fig4)中展示的能量球。
- en: '![image](../images/fig12-4.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig12-4.jpg)'
- en: '*Figure 12-4: This energy ball bounces around the room in a counterclockwise
    pattern.*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-4：这个能量球沿逆时针方向在房间内弹跳。*'
- en: '**TRAINING MISSION #2**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: Test that the moving hazards work correctly. Enter the room to the right of
    your start room (or teleport into room 32 if necessary). When the energy ball
    hits you, does your energy decrease? Does the energy ball bounce off you? Can
    you bounce the energy ball into both doorways to check that it stays in the room?
    Does the game end when you run out of energy?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 测试移动的危险物体是否正常工作。进入你起始房间右侧的房间（或者必要时传送到房间32）。当能量球撞到你时，你的能量是否减少？能量球会弹开吗？你能把能量球弹到两个门口，检查它是否停留在房间内吗？当你的能量用完时，游戏会结束吗？
- en: '**STOPPING THE PLAYER FROM WALKING THROUGH HAZARDS**'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**阻止玩家穿过危险物体**'
- en: We also need to add a line to stop the player from walking into or through hazards.
    In practice, the hazard will usually bounce off the player, but without making
    the fix shown in [Listing 12-12](ch12.xhtml#ch12list12), it’s sometimes possible
    to pass through the hazard.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加一行代码来防止玩家走进或穿过危险区域。实际上，危险物体通常会从玩家身上弹开，但如果没有在[列表 12-12](ch12.xhtml#ch12list12)中做出修复，有时玩家是可以穿过危险的。
- en: We already added the code we need in the `game_loop()` function, but we commented
    it out. Now it’s time to uncomment it by deleting the `#` symbol before the `\`
    at the end of one line, and removing the `#` at the start of the next line.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`game_loop()`函数中添加了需要的代码，但我们将其注释掉了。现在是时候取消注释了，通过删除`\`末尾行前的`#`符号，以及删除下一行开头的`#`符号。
- en: We also need to delete the colon after `items_player_may_stand_on`. A quick
    way to find the right part of the program is to press CTRL-F to open the search
    box, and then enter `#\`. [Listing 12-12](ch12.xhtml#ch12list12) shows you the
    lines to modify.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要删除`items_player_may_stand_on`后面的冒号。一个快速找到正确部分的方式是按CTRL-F打开搜索框，然后输入`#\`。
    [列表 12-12](ch12.xhtml#ch12list12)展示了需要修改的行。
- en: '*listing12-12.py*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-12.py*'
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 12-12: Stopping the player from passing through hazards*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-12：阻止玩家穿过危险物体*'
- en: Save your program as *listing12-12.py* and run it with pgzrun listing12-12.py.
    Can you track down all three types of flying hazards in the space station?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的程序保存为*listing12-12.py*，并通过运行pgzrun listing12-12.py来测试它。你能追踪到空间站中所有三种飞行危险吗？
- en: '**ADDING THE TOXIC SPILLS**'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加有毒泄漏**'
- en: You might have noticed the green splash on the floor in [Figure 12-4](ch12.xhtml#ch12fig4).
    It’s a toxic spill, and it saps your energy when you walk on it. You’ll have to
    think strategically. Should you run through it to get somewhere faster? Or should
    you walk carefully around it, saving your energy for later but maybe slowing you
    down?
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到[图 12-4](ch12.xhtml#ch12fig4)中地板上的绿色污点。这是有毒的泄漏物，当你走在上面时会消耗你的能量。你需要进行战略思考。你应该冲过去以更快到达某个地方吗？还是应该小心绕过它，节省能量以便后续使用，尽管这样可能会让你变慢？
- en: '[Listing 12-13](ch12.xhtml#ch12list13) shows the instructions to add to sap
    your energy when you’re walking on the toxic floor. These instructions go in the
    `game_loop()` function, just after the instructions you fixed in [Listing 12-12](ch12.xhtml#ch12list12).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 12-13](ch12.xhtml#ch12list13)展示了当你在有毒地面上行走时，如何耗尽你的能量的指令。这些指令需要添加到`game_loop()`函数中，紧接在你在[列表
    12-12](ch12.xhtml#ch12list12)中修复的指令之后。'
- en: Save your program as *listing12-13.py*. You can test that it works by running
    the program using pgzrun listing12-13.py and then walking on the toxic floor.
    The toxic floor is object 48 and is positioned as scenery in the room.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的程序保存为*listing12-13.py*。你可以通过运行pgzrun listing12-13.py并在有毒地面上行走来测试它是否有效。有毒地面是对象48，并作为景物放置在房间中。
- en: '*listing12-13.py*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-13.py*'
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 12-13: Reducing the player’s energy when they walk on the toxic floor*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-13：玩家在有毒地面上行走时减少能量*'
- en: '**MAKING THE FINISHING TOUCHES**'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**完成最后的修整**'
- en: The game is now nearly complete. Before you embark on your exploration of the
    space station, we need to remove some of the instructions we used while building
    and testing the game.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏现在差不多完成了。在你开始探索空间站之前，我们需要移除一些在构建和测试游戏时使用的指令。
- en: '**DISABLING THE TELEPORTER**'
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**禁用传送器**'
- en: Mission rules forbid the use of the teleporter once your work on the space station
    begins. Find its instructions in the `game_loop()` function, highlight them using
    your mouse, and then click **Format** ▸ **Comment Out Region** to disable them.
    Your code should now look like [Listing 12-14](ch12.xhtml#ch12list14).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 任务规则禁止在太空站工作开始后使用传送器。找到`game_loop()`函数中的相关指令，使用鼠标高亮它们，然后点击**格式** ▸ **注释掉区域**来禁用这些指令。你的代码现在应该像[清单12-14](ch12.xhtml#ch12list14)那样。
- en: '*listing12-14.py*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-14.py*'
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 12-14: The teleporter is turned off.*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-14：传送器已关闭。*'
- en: '**CLEANING UP THE DATA**'
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**清理数据**'
- en: While testing the game, you might have changed the contents of some of the variables
    and lists. The game should look like [Figure 12-5](ch12.xhtml#ch12fig5) when it
    begins. If it doesn’t, look at the `VARIABLES` section of the program and make
    sure the `current_room` variable is set to 31.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试游戏时，你可能已经修改了某些变量和列表的内容。游戏开始时应显示像[图12-5](ch12.xhtml#ch12fig5)中的样子。如果没有，请查看程序中的`VARIABLES`部分，确保`current_room`变量设置为31。
- en: '![image](../images/fig12-5.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig12-5.jpg)'
- en: '*Figure 12-5: The start of your mission*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-5：你的任务开始了*'
- en: 'If you’re carrying more than your yoyo, look at the `PROPS` part of the program
    and check that this line is correct:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你携带的不只是悠悠球，请查看程序中的`PROPS`部分，并检查这行代码是否正确：
- en: '[PRE14]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**YOUR ADVENTURE BEGINS**'
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你的冒险开始了**'
- en: 'It’s an exciting moment: your training is complete; the space station is ready;
    and your mission on Mars is about to begin. Let’s set a sci-fi fanfare to play
    when the game starts. [Listing 12-15](ch12.xhtml#ch12list15) shows the final instruction
    you’ll add to *Escape*.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个激动人心的时刻：你的训练已经完成；太空站已经准备就绪；你的火星任务即将开始。让我们设置一个科幻风格的开场音乐，在游戏开始时播放。[清单12-15](ch12.xhtml#ch12list15)展示了你将添加到*Escape*中的最终指令。
- en: '*listing12-15.py*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing12-15.py*'
- en: '[PRE15]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 12-15: A sci-fi fanfare plays when the game begins.*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-15：游戏开始时播放科幻风格的开场音乐。*'
- en: Save your final program as *escape.py*. You can now play the game using pgzrun
    escape.py. See “[Playing the Game](intro.xhtml#lev15)” on [page 11](intro.xhtml#page_11)
    for instructions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将最终程序保存为*escape.py*。现在，你可以使用pgzrun escape.py来玩游戏。有关说明，请参见[《玩游戏》](intro.xhtml#lev15)第[11页](intro.xhtml#page_11)。
- en: Congratulations on completing the space station construction. You’ve truly earned
    your place on this mission. It’s time to begin your work on the planet’s surface!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你完成了太空站的建设。你确实已经赢得了在这个任务中的一席之地。现在，是时候开始你在星球表面的工作了！
- en: '**YOUR NEXT MISSION: CUSTOMIZING THE GAME**'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你的下一次任务：自定义游戏**'
- en: 'Did you make it to safety in the *Escape* game? That was a close shave! For
    your next mission, try customizing the game. There are different ways to use this
    book, so you might already have made some customizations as you built the game.
    Here are some suggestions for modifying the game, starting with the easiest:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你成功逃脱《逃脱》游戏了吗？真是惊险万分！在下一次任务中，尝试自定义游戏。使用本书的方式有很多种，所以你可能在构建游戏时已经做了一些自定义。以下是一些修改游戏的建议，从最简单的开始：
- en: Change the names of the characters in the game to those of your friends. See
    [Listing 4-1](ch04.xhtml#ch04list1) on [page 63](ch04.xhtml#page_63) in [Chapter
    4](ch04.xhtml#ch04).
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏中的角色名字改为你朋友的名字。请参阅[《清单4-1》](ch04.xhtml#ch04list1)第[63页](ch04.xhtml#page_63)和[第4章](ch04.xhtml#ch04)。
- en: Customize the images. You can edit our images, or create your own. The game
    includes a whiteboard image that you can edit using your favorite art package.
    If you make your images the same size as ours, use the same filenames, and store
    them in the *images* folder, they should just drop into the game world with no
    problem.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义图像。你可以编辑我们的图像，或者创建自己的图像。游戏中包括一张白板图像，你可以使用自己喜欢的艺术软件进行编辑。如果你制作的图像与我们的尺寸相同、使用相同的文件名，并将其存储在*images*文件夹中，它们应该可以直接放入游戏世界中而不会有任何问题。
- en: Redesign the room layouts. [Chapter 6](ch06.xhtml#ch06) explains how scenery
    is positioned in a room.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新设计房间布局。[第6章](ch06.xhtml#ch06)解释了如何在房间中布置景物。
- en: Add your own objects to the game. Start by creating their images. Props should
    be 30 pixels square. Scenery items can be bigger and should touch the left and
    right sides of their tile spaces so that it doesn’t look odd when the player can’t
    get closer to the scenery than the tile next door. (For example, if your image
    is 30, 60, or 90 pixels wide and touches the ground at both sides, it should look
    fine.) You need to add the new items in the `objects` dictionary (see [Chapter
    5](ch05.xhtml#ch05)). For help positioning scenery, see [Chapter 6](ch06.xhtml#ch06).
    For advice on positioning props, see [Chapter 9](ch09.xhtml#ch09).
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向游戏中添加你自己的物品。首先创建它们的图像。道具应该是30像素见方。景物项可以更大，并且应当接触其瓷砖空间的左右两侧，以便当玩家无法更靠近景物时，不会显得不自然（例如，如果你的图像宽度为30、60或90像素，并且两侧都接触地面，它应该看起来没问题）。你需要将新物品添加到
    `objects` 字典中（请参见[第5章](ch05.xhtml#ch05)）。有关景物定位的帮助，请参见[第6章](ch06.xhtml#ch06)。有关道具定位的建议，请参见[第9章](ch09.xhtml#ch09)。
- en: Create your own space station map (see [Chapter 4](ch04.xhtml#ch04)).
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的太空站地图（请参见[第4章](ch04.xhtml#ch04)）。
- en: Use the game engine to make your own game. You can replace the images and maps,
    and code your own puzzles to make a new game based on the *Escape* code. The `USE
    OBJECTS` section is where the game puzzles are programmed. It details what happens
    when objects are used, individually or in combination with other objects. It might
    be useful to keep the code for combining objects (recipes) and just update it
    (see [Chapter 10](ch10.xhtml#ch10)); keep the code for displaying standard responses
    (see [Chapter 10](ch10.xhtml#ch10)); and keep the code for opening doors (see
    [Chapter 11](ch11.xhtml#ch11)).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用游戏引擎制作你自己的游戏。你可以替换图像和地图，并编写你自己的谜题，基于 *Escape* 代码制作新游戏。`USE OBJECTS` 部分是游戏谜题的编程区域。它详细描述了物品单独使用或与其他物品组合时发生的情况。保存合成物品的代码（配方）并进行更新可能会很有用（请参见[第10章](ch10.xhtml#ch10)）；保存标准响应的显示代码（请参见[第10章](ch10.xhtml#ch10)）；以及保存开门的代码（请参见[第11章](ch11.xhtml#ch11)）。
- en: If you make any changes that affect room 26, you’ll need to disable the code
    for its pressure pad (see [Chapter 11](ch11.xhtml#ch11)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对第26房间进行任何更改，你需要禁用其压力垫的代码（请参见[第11章](ch11.xhtml#ch11)）。
- en: Bear in mind that any changes you make might break the puzzles in the original
    *Escape* game, making it impossible to complete. For example, it might become
    impossible to find important tools. I recommend saving any changes you make separately,
    so you can always come back to the original code.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你所做的任何更改可能会破坏原版 *Escape* 游戏中的谜题，使其无法完成。例如，可能会变得无法找到重要工具。我建议你将所有更改另存为不同的文件，这样你就可以随时回到原始代码。
- en: '**SHARING YOUR CUSTOMIZATIONS**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**分享你的自定义修改**'
- en: I’d love to hear about your customizations! You can find me on Twitter at @musicandwords
    or visit my website at *[www.sean.co.uk](http://www.sean.co.uk)*, which includes
    bonus content for the book. If you share your modified *Escape* game with others
    or share your own games built using its code, sounds, or images, please credit
    this book and its author, and make it clear that you’ve modified the code. Thank
    you!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想了解你的自定义修改！你可以在 Twitter 上找到我，用户名是 @musicandwords，或者访问我的网站 *[www.sean.co.uk](http://www.sean.co.uk)*，该网站包括本书的附加内容。如果你将修改后的
    *Escape* 游戏与他人分享，或者分享你使用其代码、声音或图像构建的游戏，请注明本书及其作者，并明确表示你已修改了代码。谢谢！
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你适合飞行吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下选项框以确认你已掌握本章的关键内容。
- en: '![Images](../images/box.jpg)  You can use Pygame Zero to draw text with a shadow
    underneath it and can adjust the size of the text displayed.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  你可以使用 Pygame Zero 来绘制带有阴影的文本，并可以调整显示的文本大小。'
- en: '![Images](../images/box.jpg)  You can play a sound multiple times by putting
    the number of times in parentheses in its `sounds.`sound_name`.play()` instruction.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  你可以通过在 `sounds.sound_name.play()` 指令中的括号里写入播放次数来多次播放声音。'
- en: '![Images](../images/box.jpg)  The moving hazards’ directions are numbered from
    1 at the top, moving clockwise. To create a movement pattern for a hazard, you
    provide the number you want to add to its direction number when it hits something.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  移动障碍物的方向从顶部开始编号为1，按顺时针方向移动。要为障碍物创建一个移动模式，提供你希望在碰到物体时增加的方向编号。'
- en: '![Images](../images/box.jpg)  The `deplete_energy()` function reduces the player’s
    energy.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  `deplete_energy()` 函数会减少玩家的能量。'
- en: '![Images](../images/box.jpg)  Hazards use their own room map called `hazard_map`.
    This enables them to more easily move over objects on the floor.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 危险物体使用自己的房间地图，称为`hazard_map`。这使得它们能够更轻松地在地面上的物体之间移动。'
- en: '![Images](../images/box.jpg)  Before playing the game, check that the starting
    variables are correct.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 在开始游戏之前，请检查起始变量是否正确。'
- en: '![image](../images/f0216-01.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0216-01.jpg)'
