- en: '**12'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DANGER! DANGER! ADDING HAZARDS**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the space station systems fail, all kinds of threats emerge. In this chapter,
    you’ll see the air start to leak from the station and will discover moving hazards
    in some of the rooms, including rogue robots, balls of energy, and toxic puddles.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve put the dangers last so you can test the game up to this point without
    worrying about your time or energy running out. In this chapter, we’ll start the
    air leak and draw a timer bar to let you know how much air you have left. We’ll
    also add hazards that can harm you and drain your energy. Finally, we’ll clean
    up the game and get it ready to play!
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE AIR COUNTDOWN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two ways for the player to fail in the game: their air can run out
    or their energy can run out. At the bottom of the screen, two bars show players
    how much air and how much energy they have remaining (see [Figure 12-1](ch12.xhtml#ch12fig1)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig12-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-1: Two bars at the bottom of the screen show your remaining air
    and energy.*'
  prefs: []
  type: TYPE_NORMAL
- en: You lose energy when you walk over toxic spills or are hit by moving hazards,
    and the air gradually runs out because of the leak in the space station wall.
    If you put on a space suit, you can buy more time, but the air in the suit’s canister
    will eventually run out too. Some of your toughest decisions could be deciding
    when to top up your air and use food to restore your energy.
  prefs: []
  type: TYPE_NORMAL
- en: '**DISPLAYING THE AIR AND ENERGY BARS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll create a new section of the program called `AIR`, which you need to place
    after the `DOORS` section but before the `START` section at the end of the program.
    Add the new code shown in [Listing 12-1](ch12.xhtml#ch12list1) to your final listing
    from the previous chapter (*listing11-7.py*). Save your file as *listing12-1.py*.
    If you run the program, it won’t do anything new yet, but this code creates the
    function for drawing the air and energy bars.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-1.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-1: Drawing the air and energy bars*'
  prefs: []
  type: TYPE_NORMAL
- en: We begin the new `draw_energy_air()` function by drawing a black box over the
    status area at the bottom of the screen to clear it ➊. We then add the AIR label
    in blue ➋, and the ENERGY label in yellow ➌. This function will use the `air`
    and `energy` variables, which are already set to 100 in the `VARIABLES` part of
    the program.
  prefs: []
  type: TYPE_NORMAL
- en: If the player has some air left (if the variable `air` is more than 0) ➍, a
    box is created that uses the `air` variable for its width ➎. The box is then filled
    with the color blue ➏. This draws the AIR indicator bar, which starts off being
    100 pixels wide and gets smaller as the `AIR` variable decreases.
  prefs: []
  type: TYPE_NORMAL
- en: We use similar instructions to draw the energy bar ➐, but the bar’s start position
    is farther to the right (the *x* position is 250 instead of 50).
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE AIR COUNTDOWN FUNCTIONS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll make three functions to enable the air countdown. The `end_the_game()`
    function runs when you’re out of air. It displays the reason the player failed
    the mission, plays some sound effects, and shows a large GAME OVER message in
    the middle of the game window.
  prefs: []
  type: TYPE_NORMAL
- en: The `air_countdown()` function saps the air supply. We’ll also add an `alarm()`
    function that runs shortly after the game begins to warn the player that their
    air is failing.
  prefs: []
  type: TYPE_NORMAL
- en: These three functions are in [Listing 12-2](ch12.xhtml#ch12list2). Add the new
    code shown here in the `AIR` section of the program, after the `draw_energy_air()`
    function you just added. Save your program as *listing12-2.py*. You can run this
    program using pgzrun listing12-2.py, but you won’t see anything new yet.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-2.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-2: Adding the air countdown*'
  prefs: []
  type: TYPE_NORMAL
- en: The `air_countdown()` function ➎ reduces the `air` variable’s value by 1 each
    time it runs ➏. If the value is equal to 20 ➐ or 10, a warning sound effect plays
    to let the player know their air is low.
  prefs: []
  type: TYPE_NORMAL
- en: The `draw_energy_air()` function you added in [Listing 12-1](ch12.xhtml#ch12list1)
    updates the air and energy display ➑. If the air has run out ➒, the `end_the_game()`
    function runs and displays the string `"You're out of air!``"`.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Sound files must be stored in the *sounds* folder and should be in *.wav* or
    *.ogg* format. To play a sound called *bang.wav*, you would use `sounds.bang.play()`.
    As with images, you don’t need to tell Pygame Zero the file extension or where
    the sound is stored. Why not try recording and adding your own sound effects for
    various points in the game?
  prefs: []
  type: TYPE_NORMAL
- en: In the `end_the_game()` function ➊, we use the variable `reason` for the information
    it receives, and display that on the screen as the reason for death ➋. The `game_over`
    variable is set to `True` ➌. Other functions use this variable to know when the
    game has finished so everything can come to a stop. The `end_the_game()` function
    then draws the words GAME OVER in large text in the middle of the screen. The
    text is drawn at position *x* = 120, *y* = 400 in white text using a font size
    of 128 ➍. We also add a drop shadow under the text for effect, which is offset
    by 1 pixel in each direction and is colored black (see [Figure 12-2](ch12.xhtml#ch12fig2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig12-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-2: Oh no! You’re out of air!*'
  prefs: []
  type: TYPE_NORMAL
- en: The final function in this section, `alarm()` ➓, plays the alarm sound and displays
    a message telling you to radio for help. It uses the player’s name in the warning
    to personalize it.
  prefs: []
  type: TYPE_NORMAL
- en: The number in parentheses in the `sounds.alarm.play()` command is the number
    of times the sound should be played (in [Listing 12-2](ch12.xhtml#ch12list2),
    it’s three).
  prefs: []
  type: TYPE_NORMAL
- en: '**STARTING THE AIR COUNTDOWN AND SOUNDING THE ALARM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We haven’t set the three new functions to run yet. To do that, we need to add
    some instructions to the `START` section of the program, which is (perhaps confusingly!)
    at the end of the program listing. Add the new instructions shown in [Listing
    12-3](ch12.xhtml#ch12list3), and save it as *listing12-3.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-3.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-3: Starting the air countdown*'
  prefs: []
  type: TYPE_NORMAL
- en: Now the game has a time limit. When the air runs out, the game ends. Run the
    program using pgzrun listing12-3.py, and you should see your air supply slowly
    go down.
  prefs: []
  type: TYPE_NORMAL
- en: If you find the game too difficult when you’re playing the final version, you
    can give yourself more time by changing the 5 in the final line in [Listing 12-3](ch12.xhtml#ch12list3)
    to a higher number. This number decides how often the `air_countdown()` function
    saps your air supply, and is measured in seconds. In particular, if you’re using
    a Raspberry Pi 2, the time limit might be challenging because the game runs a
    bit more slowly there. It’s still possible to complete the game, but you can increase
    the number 5 to give yourself a little more, ahem, breathing space.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #1**'
  prefs: []
  type: TYPE_NORMAL
- en: When your air supply reaches 0, you should see the GAME OVER message and find
    that you can no longer move the astronaut. Your energy goes down by 1 percent
    every 5 seconds, so it’ll take about 8.5 minutes (500 seconds) to run out. Can
    you work out how to make the air leak more often, so you can more easily test
    what happens when the air runs out?
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the training mission, make sure you change the program back
    again: otherwise, you’ll find your mission rather hard to complete!'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE MOVING HAZARDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three types of moving hazards in the game: two types of energy balls
    and a flying drone that’s gone rogue.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-3](ch12.xhtml#ch12fig3) shows the direction numbers the moving hazards
    use.'
  prefs: []
  type: TYPE_NORMAL
- en: Hazards move in a straight line until they hit something, and then we add a
    number to change their direction. The number we add will decide the hazard’s movement
    pattern. For example, if we add `1` to the direction number, the hazard moves
    in a clockwise pattern (up, right, down, left). If we add `-1` to the direction
    number, the hazard moves in a counterclockwise pattern (left, down, right, up).
    If we add `2`, it will bounce between going left and right (2 and 4) or up and
    down (1 and 3). Take a look at [Figure 12-3](ch12.xhtml#ch12fig3) and check this
    makes sense to you. Each hazard can have its own pattern of movement.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig12-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-3: The direction numbers the moving hazards use are numbered in
    a clockwise order.*'
  prefs: []
  type: TYPE_NORMAL
- en: If the addition results in a number that’s higher than 4, we subtract 4\. For
    example, if a hazard is moving clockwise, we add 1 to its direction number each
    time it hits something. If it’s going down (direction 3), we add 1 when it hits
    something, so it starts to move left (direction 4). The next time it hits something,
    we add 1, but that makes the direction number 5\. So we subtract 4, and that gives
    us a direction number of 1\. As [Figure 12-3](ch12.xhtml#ch12fig3) shows, that’s
    the next direction number after 4, going around in a clockwise pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 12-1](ch12.xhtml#ch12tab1) summarizes the numbers we can use to get
    different movement patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 12-1:** How to Change Direction When a Hazard Hits Something'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Movement pattern** |  | **Number to add to the direction number** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Clockwise | ![image](../images/f0203-01.jpg) | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Counterclockwise | ![image](../images/f0203-02.jpg) | -1 |'
  prefs: []
  type: TYPE_TB
- en: '| Left/right | ![image](../images/f0203-03.jpg) | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Up/down | ![image](../images/f0203-04.jpg) | 2 |'
  prefs: []
  type: TYPE_TB
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Take care not to mix up the two numbers that describe the movement. The direction
    number (see [Figure 12-3](ch12.xhtml#ch12fig3)) tells the program which direction
    a hazard is moving in. The number we add to the direction number (see [Table 12-1](ch12.xhtml#ch12tab1))
    tells the program which way the hazard should bounce when it hits something.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE HAZARD DATA**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Between the `AIR` and `START` sections, we’ll add a new section to the program
    called `HAZARDS`. [Listing 12-4](ch12.xhtml#ch12list4) shows you the hazard data.
    Add it to your program, and save it as *listing12-4.py*. If you run the program,
    it won’t do anything new yet, but you can check that you don’t get any error messages
    in the command line window.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-4.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-4: Adding the hazard data*'
  prefs: []
  type: TYPE_NORMAL
- en: We create a `hazard_data` dictionary that uses room numbers as dictionary keys.
    For each room, there is a list that contains the data for all the hazards. The
    data for each hazard is in a list that contains the hazard’s *y* position, *x*
    position, starting direction, and number to add when it hits something.
  prefs: []
  type: TYPE_NORMAL
- en: For example, room 28 ➊ has a hazard with the list data `[7, 3, 4, 1]`. This
    means the hazard starts at *y* = 7, *x* = 3\. It starts moving left (direction
    4), and it moves clockwise when it hits something because we add 1 to its direction
    number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Room 41 contains three hazards (in three lists), which are moving from left
    to right and back again. We know that because they start with a direction of 2
    or 4 (right or left) and add 2 to the direction when they hit something (making
    4 or 6: we know that 6 becomes 2 after we subtract 4).'
  prefs: []
  type: TYPE_NORMAL
- en: '**SAPPING THE PLAYER’S ENERGY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After the hazard data, we need to add a function called `deplete_energy()`,
    which reduces the player’s energy when a hazard hits them. [Listing 12-5](ch12.xhtml#ch12list5)
    shows the new function. Add it after [Listing 12-4](ch12.xhtml#ch12list4) in the
    `HAZARDS` section of the program, and save your program as *listing12-5.py*. You
    can run the program to check for errors using pgzrun listing12-5.py, but it won’t
    do anything new.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-5.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-5: Reducing the player’s energy*'
  prefs: []
  type: TYPE_NORMAL
- en: The `deplete_energy()` function accepts a number ➊ and uses that number to reduce
    the player’s `energy` variable ➋. As a result, we can use this function for hazards
    that drain different amounts of energy.
  prefs: []
  type: TYPE_NORMAL
- en: '**STARTING AND STOPPING HAZARDS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the player enters a new room, the function `hazard_start()` puts the hazards
    into the room. [Listing 12-6](ch12.xhtml#ch12list6) shows this function, which
    you need to add after the `deplete_energy()` function in the `HAZARDS` section
    of the program. Save your program as *listing12-6.py*. If you run it using pgzrun
    listing12-6.py, you shouldn’t notice any difference yet, because we haven’t set
    this function to run.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-6.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-6: Adding the hazards to the current room*'
  prefs: []
  type: TYPE_NORMAL
- en: The `hazard_start()` function will run whenever the player enters a new room,
    so it begins by checking whether the current room has an entry in the `hazard_data`
    dictionary ➊. If it does, that room should have moving hazards in it, and the
    rest of the function runs. We put the hazard data for the room into a list called
    `current_room_hazards_list` ➋. The function then uses a loop ➌ to process each
    hazard in the list in turn.
  prefs: []
  type: TYPE_NORMAL
- en: The hazards use their own room map called `hazard_map`, so they can easily fly
    over objects on the floor without overwriting them in the room map. If the hazards
    used the same room map as the props, they would wipe out props as they flew over
    them, or we’d need a complicated way to remember what’s underneath the hazards.
  prefs: []
  type: TYPE_NORMAL
- en: The three hazard objects have the numbers 49, 50, and 51 in the `objects` dictionary.
    The program uses a simple calculation to work out which one goes into a particular
    room. As you’ve seen before, Python’s `%` operator gives you the remainder after
    doing a division. When you divide any number by 3, the remainder will be 0, 1,
    or 2\. So the program divides the room number by 3 and adds the remainder to 49
    to pick an object number ➍. So, for example, if we were in room 34, the program
    would work out that `34 % 3` is 1, and add 1 to 49 to select hazard number 50
    for all the hazards in that room.
  prefs: []
  type: TYPE_NORMAL
- en: This way of selecting hazard numbers ensures the hazard is always the same type
    when the player enters the room. Because the map is five rooms wide, it also guarantees
    that two directly connected rooms cannot have the same hazard in them. That adds
    a sense of variety to the map, although not all rooms have hazards, so in practice,
    players might still encounter the same hazard twice in a row, walking through
    some empty rooms in between.
  prefs: []
  type: TYPE_NORMAL
- en: The function finishes by scheduling the `hazard_move()` function to run every
    0.15 seconds ➎.
  prefs: []
  type: TYPE_NORMAL
- en: To start the `hazard_start()` function when the player enters a new room, add
    an instruction to the `start_room()` function, as shown in [Listing 12-7](ch12.xhtml#ch12list7).
    Save your program as *listing12-7.py*. This version of the program will freeze
    when you leave the start room, because we haven’t finished adding the code for
    the hazards yet.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-7.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-7: Starting hazards when the player enters the room*'
  prefs: []
  type: TYPE_NORMAL
- en: Not all rooms have hazards, so we will stop the hazards from moving when the
    player leaves a room. We previously added instructions in the `game_loop()` function
    to turn off the function that makes the hazards move when the player changes room.
    We commented them out because we weren’t ready for them yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re ready for them now! Follow these steps to uncomment the instructions
    (you did something similar in [Chapter 8](ch08.xhtml#ch08)):'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Edit** ▸ **Replace** (or press CTRL-H) in IDLE to show the Replace Text
    dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type #clock.unschedule(hazard_move) into the Find box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type clock.unschedule(hazard_move) into the Replace With box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Replace All**. IDLE should replace the instruction in four places, and
    jump to the last one in the listing. [Listing 12-8](ch12.xhtml#ch12list8) shows
    the new line that will be highlighted at the end of the process (you don’t need
    to type this listing in). Above this block of code, there are three similar blocks
    that also now stop the hazards moving when the player leaves the room through
    one of the exits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*listing12-8.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-8: Stopping hazards when the player leaves the room*'
  prefs: []
  type: TYPE_NORMAL
- en: Save your updated program as *listing12-8.py*. If you run this version of the
    program, you’ll see an error message in the console, and the game will freeze
    when you leave the room. The reason is that we haven’t added the `hazard_move()`
    function yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING UP THE HAZARD MAP**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We now need to make sure that when the room map is generated for scenery and
    props, an empty hazard map is also generated. The `hazard_start()` function will
    fill it with any hazards in the room.
  prefs: []
  type: TYPE_NORMAL
- en: Add the new code shown in [Listing 12-9](ch12.xhtml#ch12list9) at the end of
    the `generate_map()` function in the `MAKE MAP` section of the program. Place
    this new code just before the `GAME LOOP` section, and make sure you indent the
    first line by four spaces because it’s inside a function.
  prefs: []
  type: TYPE_NORMAL
- en: Save your program as *listing12-9.py*. When you run it, the program won’t work
    properly yet because it is still incomplete.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-9.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-9: Creating the empty hazard map*'
  prefs: []
  type: TYPE_NORMAL
- en: These new instructions create an empty list for the hazard map and fill it with
    rows of 0s that are as wide as the room width.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING THE HAZARDS MOVE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s add the missing `hazard_move()` function to make the hazards move.
    Put this at the end of the `HAZARDS` section of the program after the `hazard_start()`
    function, as shown in [Listing 12-10](ch12.xhtml#ch12list10). Save your program
    as *listing12-10.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-10.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-10: Adding the hazard movement function*'
  prefs: []
  type: TYPE_NORMAL
- en: The `hazard_move()` function uses an idea similar to the player movement. The
    hazard’s position is stored in the `old_hazard_x` and `old_hazard_y` variables
    ➊. The hazard is then moved ➋.
  prefs: []
  type: TYPE_NORMAL
- en: Then we check whether the hazard has hit the player ➌, gone out the door ➍,
    or hit the scenery or another hazard ➎. If it has ➏, then its position is reset
    to its old values, and we change its direction by adding the last number in its
    list of data to the direction number ➐. If adding this number increases the direction
    number to more than 4 ➑, the function subtracts 4, as we discussed earlier in
    this chapter, because 4 is the highest valid direction number. On the other hand,
    if adding this number decreases the direction number to less than 1, the function
    adds 4\. Finally, the new direction is saved in the hazard data ➒.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the function ➓, the hazard is put into the hazard map.
  prefs: []
  type: TYPE_NORMAL
- en: You can run this program using pgzrun listing12-10.py. The first room with a
    hazard is the one to the right of your starting room. When you enter it, your
    energy will mysteriously go down sometimes, even though you can’t see anything
    dangerous. This is because we haven’t added code to draw the hazards yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: When a hazard hits you ➌, the `deplete_energy()` function reduces your energy
    by 10 percent. If you find the game too difficult, you can change this number
    to 5\. If you complete the game and want a tougher challenge the next time around,
    you could change it to 20!
  prefs: []
  type: TYPE_NORMAL
- en: '**DISPLAYING HAZARDS IN THE ROOM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It doesn’t seem fair to have invisible dangers, so let’s add a few lines to
    show the hazards in the room. [Listing 12-11](ch12.xhtml#ch12list11) shows three
    new lines to add to the `draw()` function in the `DISPLAY` section of the program.
    Put these near the end of the function, before the code to draw the player.
  prefs: []
  type: TYPE_NORMAL
- en: Indent these instructions by a total of 12 spaces because they’re inside the
    `draw()` function (4 spaces), inside the `y` loop (another 4), and inside the
    `x` loop (another 4-space indentation). Save your program as *listing12-11.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-11.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-11: Displaying the moving hazards*'
  prefs: []
  type: TYPE_NORMAL
- en: This listing completes the moving hazards. Run your program using pgzrun listing12-11.py.
    Then start running for your life! You should now be able to see the moving hazards,
    such as the energy ball shown in [Figure 12-4](ch12.xhtml#ch12fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig12-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-4: This energy ball bounces around the room in a counterclockwise
    pattern.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #2**'
  prefs: []
  type: TYPE_NORMAL
- en: Test that the moving hazards work correctly. Enter the room to the right of
    your start room (or teleport into room 32 if necessary). When the energy ball
    hits you, does your energy decrease? Does the energy ball bounce off you? Can
    you bounce the energy ball into both doorways to check that it stays in the room?
    Does the game end when you run out of energy?
  prefs: []
  type: TYPE_NORMAL
- en: '**STOPPING THE PLAYER FROM WALKING THROUGH HAZARDS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We also need to add a line to stop the player from walking into or through hazards.
    In practice, the hazard will usually bounce off the player, but without making
    the fix shown in [Listing 12-12](ch12.xhtml#ch12list12), it’s sometimes possible
    to pass through the hazard.
  prefs: []
  type: TYPE_NORMAL
- en: We already added the code we need in the `game_loop()` function, but we commented
    it out. Now it’s time to uncomment it by deleting the `#` symbol before the `\`
    at the end of one line, and removing the `#` at the start of the next line.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to delete the colon after `items_player_may_stand_on`. A quick
    way to find the right part of the program is to press CTRL-F to open the search
    box, and then enter `#\`. [Listing 12-12](ch12.xhtml#ch12list12) shows you the
    lines to modify.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-12.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-12: Stopping the player from passing through hazards*'
  prefs: []
  type: TYPE_NORMAL
- en: Save your program as *listing12-12.py* and run it with pgzrun listing12-12.py.
    Can you track down all three types of flying hazards in the space station?
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE TOXIC SPILLS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might have noticed the green splash on the floor in [Figure 12-4](ch12.xhtml#ch12fig4).
    It’s a toxic spill, and it saps your energy when you walk on it. You’ll have to
    think strategically. Should you run through it to get somewhere faster? Or should
    you walk carefully around it, saving your energy for later but maybe slowing you
    down?
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 12-13](ch12.xhtml#ch12list13) shows the instructions to add to sap
    your energy when you’re walking on the toxic floor. These instructions go in the
    `game_loop()` function, just after the instructions you fixed in [Listing 12-12](ch12.xhtml#ch12list12).'
  prefs: []
  type: TYPE_NORMAL
- en: Save your program as *listing12-13.py*. You can test that it works by running
    the program using pgzrun listing12-13.py and then walking on the toxic floor.
    The toxic floor is object 48 and is positioned as scenery in the room.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-13.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-13: Reducing the player’s energy when they walk on the toxic floor*'
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING THE FINISHING TOUCHES**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The game is now nearly complete. Before you embark on your exploration of the
    space station, we need to remove some of the instructions we used while building
    and testing the game.
  prefs: []
  type: TYPE_NORMAL
- en: '**DISABLING THE TELEPORTER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Mission rules forbid the use of the teleporter once your work on the space station
    begins. Find its instructions in the `game_loop()` function, highlight them using
    your mouse, and then click **Format** ▸ **Comment Out Region** to disable them.
    Your code should now look like [Listing 12-14](ch12.xhtml#ch12list14).
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-14.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-14: The teleporter is turned off.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**CLEANING UP THE DATA**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While testing the game, you might have changed the contents of some of the variables
    and lists. The game should look like [Figure 12-5](ch12.xhtml#ch12fig5) when it
    begins. If it doesn’t, look at the `VARIABLES` section of the program and make
    sure the `current_room` variable is set to 31.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig12-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-5: The start of your mission*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re carrying more than your yoyo, look at the `PROPS` part of the program
    and check that this line is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**YOUR ADVENTURE BEGINS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It’s an exciting moment: your training is complete; the space station is ready;
    and your mission on Mars is about to begin. Let’s set a sci-fi fanfare to play
    when the game starts. [Listing 12-15](ch12.xhtml#ch12list15) shows the final instruction
    you’ll add to *Escape*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing12-15.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-15: A sci-fi fanfare plays when the game begins.*'
  prefs: []
  type: TYPE_NORMAL
- en: Save your final program as *escape.py*. You can now play the game using pgzrun
    escape.py. See “[Playing the Game](intro.xhtml#lev15)” on [page 11](intro.xhtml#page_11)
    for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on completing the space station construction. You’ve truly earned
    your place on this mission. It’s time to begin your work on the planet’s surface!
  prefs: []
  type: TYPE_NORMAL
- en: '**YOUR NEXT MISSION: CUSTOMIZING THE GAME**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Did you make it to safety in the *Escape* game? That was a close shave! For
    your next mission, try customizing the game. There are different ways to use this
    book, so you might already have made some customizations as you built the game.
    Here are some suggestions for modifying the game, starting with the easiest:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the names of the characters in the game to those of your friends. See
    [Listing 4-1](ch04.xhtml#ch04list1) on [page 63](ch04.xhtml#page_63) in [Chapter
    4](ch04.xhtml#ch04).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the images. You can edit our images, or create your own. The game
    includes a whiteboard image that you can edit using your favorite art package.
    If you make your images the same size as ours, use the same filenames, and store
    them in the *images* folder, they should just drop into the game world with no
    problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redesign the room layouts. [Chapter 6](ch06.xhtml#ch06) explains how scenery
    is positioned in a room.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add your own objects to the game. Start by creating their images. Props should
    be 30 pixels square. Scenery items can be bigger and should touch the left and
    right sides of their tile spaces so that it doesn’t look odd when the player can’t
    get closer to the scenery than the tile next door. (For example, if your image
    is 30, 60, or 90 pixels wide and touches the ground at both sides, it should look
    fine.) You need to add the new items in the `objects` dictionary (see [Chapter
    5](ch05.xhtml#ch05)). For help positioning scenery, see [Chapter 6](ch06.xhtml#ch06).
    For advice on positioning props, see [Chapter 9](ch09.xhtml#ch09).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your own space station map (see [Chapter 4](ch04.xhtml#ch04)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the game engine to make your own game. You can replace the images and maps,
    and code your own puzzles to make a new game based on the *Escape* code. The `USE
    OBJECTS` section is where the game puzzles are programmed. It details what happens
    when objects are used, individually or in combination with other objects. It might
    be useful to keep the code for combining objects (recipes) and just update it
    (see [Chapter 10](ch10.xhtml#ch10)); keep the code for displaying standard responses
    (see [Chapter 10](ch10.xhtml#ch10)); and keep the code for opening doors (see
    [Chapter 11](ch11.xhtml#ch11)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you make any changes that affect room 26, you’ll need to disable the code
    for its pressure pad (see [Chapter 11](ch11.xhtml#ch11)).
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that any changes you make might break the puzzles in the original
    *Escape* game, making it impossible to complete. For example, it might become
    impossible to find important tools. I recommend saving any changes you make separately,
    so you can always come back to the original code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SHARING YOUR CUSTOMIZATIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: I’d love to hear about your customizations! You can find me on Twitter at @musicandwords
    or visit my website at *[www.sean.co.uk](http://www.sean.co.uk)*, which includes
    bonus content for the book. If you share your modified *Escape* game with others
    or share your own games built using its code, sounds, or images, please credit
    this book and its author, and make it clear that you’ve modified the code. Thank
    you!
  prefs: []
  type: TYPE_NORMAL
- en: '**ARE YOU FIT TO FLY?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can use Pygame Zero to draw text with a shadow
    underneath it and can adjust the size of the text displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can play a sound multiple times by putting
    the number of times in parentheses in its `sounds.`sound_name`.play()` instruction.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The moving hazards’ directions are numbered from
    1 at the top, moving clockwise. To create a movement pattern for a hazard, you
    provide the number you want to add to its direction number when it hits something.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `deplete_energy()` function reduces the player’s
    energy.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Hazards use their own room map called `hazard_map`.
    This enables them to more easily move over objects on the floor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Before playing the game, check that the starting
    variables are correct.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-01.jpg)'
  prefs: []
  type: TYPE_IMG
