["```py\nX -> Y\n```", "```py\ncurd -> sour cream\n```", "```py\nsupport(curd) = curd/total = 25/100 = 0.25\n```", "```py\nsupport(curd -> sour cream) = (curd & sour cream)/total = 20/100 = 0.2\n```", "```py\nconfidence(curd -> sour cream) = (curd & sour cream)/curd = 20/25 = 0.8\n```", "```py\nconfidence(sour cream -> curd) = (curd & sour cream)/sour cream = 20/30 = 0.66\n```", "```py\nlift(sour cream -> curd) = support(curd & sour cream)/(support(curd)*support(sour cream))\n                         = 0.2/(0.25*0.3) = 2.66\n```", "```py\n$ **pip install mlxtend**\n```", "```py\ntransactions = [\n ['curd', 'sour cream'], ['curd', 'orange', 'sour cream'],\n ['bread', 'cheese', 'butter'], ['bread', 'butter'], ['bread', 'milk'],\n ['apple', 'orange', 'pear'], ['bread', 'milk', 'eggs'], ['tea', 'lemon'],\n ['curd', 'sour cream', 'apple'], ['eggs', 'wheat flour', 'milk'],\n ['pasta', 'cheese'], ['bread', 'cheese'], ['pasta', 'olive oil', 'cheese'],\n ['curd', 'jam'], ['bread', 'cheese', 'butter'],\n ['bread', 'sour cream', 'butter'], ['strawberry', 'sour cream'],\n ['curd', 'sour cream'], ['bread', 'coffee'], ['onion', 'garlic']\n]\n```", "```py\nimport pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\n\n❶ encoder = TransactionEncoder()\n❷ encoded_array = encoder.fit(transactions).transform(transactions)\n❸ df_itemsets = pd.DataFrame(encoded_array, columns=encoder.columns_)\n```", "```py\n apple  bread  butter  cheese  coffee   curd   eggs  ...\n0   False  False   False   False   False   True  False  ...\n1   False  False   False   False   False   True  False  ...\n2   False   True    True    True   False  False  False  ...\n3   False   True    True   False   False  False  False  ...\n4   False   True   False   False   False  False  False  ...\n5    True  False   False   False   False  False  False  ...\n6   False   True   False   False   False  False   True  ...\n`--snip--`\n\n[20 rows x 20 columns]\n```", "```py\nprint('Number of transactions: ', len(transactions))\nprint('Number of unique items: ', len(set(sum(transactions, []))))\n```", "```py\nfrom mlxtend.frequent_patterns import apriori\nfrequent_itemsets = apriori(df_itemsets, min_support=0.1, use_colnames=True)\n```", "```py\n support                 itemsets\n0      0.10                  (apple)\n1      0.40                  (bread)\n2      0.20                 (butter)\n3      0.25                 (cheese)\n4      0.25                   (curd)\n5      0.10                   (eggs)\n6      0.15                   (milk)\n7      0.10                 (orange)\n8      0.10                  (pasta)\n9      0.30             (sour cream)\n10     0.20          (bread, butter)\n11     0.15          (bread, cheese)\n12     0.10            (bread, milk)\n13     0.10         (cheese, butter)\n14     0.10          (pasta, cheese)\n15     0.20       (sour cream, curd)\n16     0.10             (milk, eggs)\n17     0.10  (bread, cheese, butter)\n```", "```py\n**frequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda itemset: len(itemset))**\n```", "```py\n**print(frequent_itemsets[frequent_itemsets['length'] >= 2])**\n```", "```py\n10     0.20          (bread, butter)       2\n11     0.15          (bread, cheese)       2\n12     0.10            (bread, milk)       2\n13     0.10         (cheese, butter)       2\n14     0.10          (pasta, cheese)       2\n15     0.20       (sour cream, curd)       2\n16     0.10             (milk, eggs)       2\n17     0.10  (bread, cheese, butter)       3\n```", "```py\nfrom mlxtend.frequent_patterns import association_rules\nrules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.5)\n```", "```py\nprint(rules.iloc[:,0:7])\n```", "```py\n antecedents    consequents  antecedent sup. consequent sup.  support  confidence    lift\n0          (bread)       (butter)           0.40            0.20     0.20    0.500000 2.500000\n1         (butter)        (bread)           0.20            0.40     0.20    1.000000 2.500000\n2         (cheese)        (bread)           0.25            0.40     0.15    0.600000 1.500000\n3           (milk)        (bread)           0.15            0.40     0.10    0.666667 1.666667\n4         (butter)       (cheese)           0.20            0.25     0.10    0.500000 2.000000\n5          (pasta)       (cheese)           0.10            0.25     0.10    1.000000 4.000000\n6     (sour cream)         (curd)           0.30            0.25     0.20    0.666667 2.666667\n7           (curd)   (sour cream)           0.25            0.30     0.20    0.800000 2.666667\n8           (milk)         (eggs)           0.15            0.10     0.10    0.666667 6.666667\n9           (eggs)         (milk)           0.10            0.15     0.10    1.000000 6.666667\n10 (bread, cheese)       (butter)           0.15            0.20     0.10    0.666667 3.333333\n11 (bread, butter)       (cheese)           0.20            0.25     0.10    0.500000 2.000000\n12(cheese, butter)        (bread)           0.10            0.40     0.10    1.000000 2.500000\n13        (butter)(bread, cheese)           0.20            0.15     0.10    0.500000 3.333333\n\n[14 rows x 7 columns]\n```", "```py\nrules_plot = pd.DataFrame()\nrules_plot['antecedents']= rules['antecedents'].apply(lambda x: ','.join(list(x)))\nrules_plot['consequents']= rules['consequents'].apply(lambda x: ','.join(list(x)))\nrules_plot['lift']= rules['lift'].apply(lambda x: round(x, 2))\n```", "```py\npivot = rules_plot.pivot(index = 'antecedents', columns = 'consequents', values= 'lift')\n```", "```py\nconsequents    bread  butter  cheese  cheese,bread  curd  eggs  milk  sour cream\nantecedents                                                                     \nbread            NaN    2.50     NaN           NaN   NaN   NaN   NaN         NaN\nbread,butter     NaN     NaN     2.0           NaN   NaN   NaN   NaN         NaN\nbutter          2.50     NaN     2.0          3.33   NaN   NaN   NaN         NaN\ncheese          1.50     NaN     NaN           NaN   NaN   NaN   NaN         NaN\ncheese,bread     NaN    3.33     NaN           NaN   NaN   NaN   NaN         NaN\ncheese,butter   2.50     NaN     NaN           NaN   NaN   NaN   NaN         NaN\ncurd             NaN     NaN     NaN           NaN   NaN   NaN   NaN        2.67\neggs             NaN     NaN     NaN           NaN   NaN   NaN  6.67         NaN\nmilk            1.67     NaN     NaN           NaN   NaN  6.67   NaN         NaN\npasta            NaN     NaN     4.0           NaN   NaN   NaN   NaN         NaN\nsour cream       NaN     NaN     NaN           NaN  2.67   NaN   NaN         NaN\n```", "```py\nantecedents = list(pivot.index.values)\nconsequents = list(pivot.columns)\nimport numpy as np\npivot = pivot.to_numpy()\n```", "```py\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\n❶ im = ax.imshow(pivot, cmap = 'Reds')\nax.set_xticks(np.arange(len(consequents)))\nax.set_yticks(np.arange(len(antecedents)))\nax.set_xticklabels(consequents)\nax.set_yticklabels(antecedents)\n❷ plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n❸ for i in range(len(antecedents)):\n  for j in range(len(consequents)):\n  ❹ if not np.isnan(pivot[i, j]):\n    ❺ text = ax.text(j, i, pivot[i, j], ha=\"center\", va=\"center\")\nax.set_title(\"Lift metric for frequent itemsets\")\nfig.tight_layout()\nplt.show()\n```", "```py\nbutter_antecedent = rules[rules['antecedents'] == {'butter'}][['consequents','confidence']]\n            .sort_values('confidence', ascending = False)\n```", "```py\nbutter_consequents = [list(item) for item in butter_antecedent.iloc[0:3:,]['consequents']]\n```", "```py\nitem = 'butter'\nprint('Items frequently bought together with', item, 'are:', butter_consequents)\n```", "```py\nItems frequently bought together with butter are: [['bread'], ['cheese'], ['cheese', 'bread']]\n```", "```py\nfrom functools import reduce\nrules['itemsets'] = rules[['antecedents', 'consequents']].apply(lambda x:\n                reduce(frozenset.union, x), axis=1)\n```", "```py\nprint(rules[['antecedents','consequents','itemsets']])\n```", "```py\n antecedents      consequents                 itemsets\n0           (butter)          (bread)          (butter, bread)\n1            (bread)         (butter)          (butter, bread)\n2           (cheese)          (bread)          (bread, cheese)\n3             (milk)          (bread)            (milk, bread)\n4           (butter)         (cheese)         (butter, cheese)\n5            (pasta)         (cheese)          (pasta, cheese)\n6       (sour cream)           (curd)       (sour cream, curd)\n7             (curd)     (sour cream)       (sour cream, curd)\n8             (milk)           (eggs)             (milk, eggs)\n9             (eggs)           (milk)             (milk, eggs)\n10  (butter, cheese)          (bread)  (bread, butter, cheese)\n11   (butter, bread)         (cheese)  (butter, cheese, bread)\n12   (bread, cheese)         (butter)  (bread, butter, cheese)\n13          (butter)  (bread, cheese)  (butter, cheese, bread)\n```", "```py\nrules.drop_duplicates(subset=['itemsets'], keep='first', inplace=True)\n```", "```py\nprint(rules['itemsets'])\n```", "```py\n0             (bread, butter)\n2             (bread, cheese)\n3               (bread, milk)\n4            (butter, cheese)\n5             (cheese, pasta)\n6          (curd, sour cream)\n8                (milk, eggs)\n10    (bread, cheese, butter)\n```", "```py\ndiscounted = []\nothers = []\n❶ for itemset in rules['itemsets']:\n❷ for i, item in enumerate(itemset):\n  ❸ if item not in others:\n    ❹ discounted.append(item)\n      itemset = set(itemset)\n      itemset.discard(item)\n    ❺ others.extend(itemset)\n      break\n  ❻ if i == len(itemset)-1:\n      discounted.append(item)\n      itemset = set(itemset)\n      itemset.discard(item)\n      others.extend(itemset)\nprint(discounted)\n```", "```py\n['bread', 'bread', 'bread', 'cheese', 'pasta', 'curd', 'eggs', 'bread']\n```", "```py\nprint(list(set(discounted)))\n```", "```py\n['cheese', 'eggs', 'bread', 'pasta', 'curd']\n```"]