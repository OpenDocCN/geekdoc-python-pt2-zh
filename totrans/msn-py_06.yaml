- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: INSTALLING THE SPACE STATION EQUIPMENT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安装太空站设备**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In [Chapter 5](ch05.xhtml#ch05), you prepared information about all the equipment
    you’ll use on your mission. In this chapter, you’ll install some of that equipment
    in the space station and use the *Explorer* to view any room or planet surface
    location. This is your first chance to explore the design of the Mars base that
    will become your home.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.xhtml#ch05)中，你准备了关于任务中将使用的所有设备的信息。在本章中，你将把其中一些设备安装到太空站，并使用*Explorer*查看任何房间或星球表面的位置。这是你第一次有机会探索将成为你家的火星基地设计。
- en: '**UNDERSTANDING THE DICTIONARY FOR THE SCENERY DATA**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解场景数据的字典**'
- en: 'There are two different types of objects on the space station:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 太空站上有两种不同类型的物体：
- en: '**Scenery** is the equipment that stays in the same place throughout the *Escape*
    game and includes furniture, pipes, and electronic equipment.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景** 是在整个*逃脱*游戏中保持不变的位置的设备，包括家具、管道和电子设备。'
- en: '**Props** are items that can appear, disappear, or move around during the game.
    They include things the player can create and pick up. Props also include doors,
    which appear in the room when they’re closed and disappear when they’re open.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**道具** 是在游戏过程中可以出现、消失或移动的物品。它们包括玩家可以创建和拾取的东西。道具还包括门，门在关闭时出现在房间里，打开时则消失。'
- en: The data for positioning scenery and the data for props are stored separately
    and organized differently. In this chapter, we’ll just add the scenery data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 场景定位数据和道具数据是分开存储并且组织方式不同的。在本章中，我们只添加场景数据。
- en: 'Our program already knows the image and description to use for all the objects
    in the game, because they’re in the objects dictionary you created in [Chapter
    5](ch05.xhtml#ch05). Now we’ll tell the program where to put the scenery objects
    in the space station. To do that, we’ll create a new dictionary called scenery.
    This is how we’ll structure the entry for one room:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的程序已经知道游戏中所有物体的图像和描述，因为它们已经包含在你在[第5章](ch05.xhtml#ch05)中创建的对象字典里。现在，我们将告诉程序将场景物体放置在太空站的哪些位置。为此，我们将创建一个名为“scenery”的新字典。以下是我们为一个房间创建条目的方式：
- en: 'room number: [[object number, y, x], [object number, y, x]]'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 房间编号：[[物体编号，y，x]，[物体编号，y，x]]
- en: The key for the dictionary will be the room number. For each room number, the
    dictionary stores a list, with a square bracket at the start and the end of it.
    Each item in that list is another list that tells the program where in the room
    to put *one* object. Here, I’ve made one object red and the other green so you
    can see where they start and end.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键将是房间编号。对于每个房间编号，字典会存储一个列表，列表的开头和结尾都有方括号。列表中的每个项目是另一个列表，告诉程序将*一个*物体放置在房间中的哪个位置。在这里，我将一个物体做成红色，另一个做成绿色，这样你就能看到它们的起始和结束位置。
- en: 'These are the three pieces of information you need for each object:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个物体所需的三条信息：
- en: '**The object number** This is the same as the number that is used as the key
    in the objects dictionary. For example, number 5 represents a table.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体编号** 这与用于对象字典中的键的编号相同。例如，编号5代表一张桌子。'
- en: '**The object’s *y* position** This is the object’s position in the room, from
    back to front. The back wall is usually in row 0, so we typically start placing
    objects at 1\. The largest useful number will be the room height minus 2: we subtract
    1 because the map positions start at 0 and subtract another 1 for the space the
    front wall occupies. In practice, it’s a good idea to leave a bit more space at
    the front of the room, because the front wall can obscure other items. You can
    check the size of the room in the GAME_MAP code you added in [Chapter 4](ch04.xhtml#ch04).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体的 *y* 位置** 这是物体在房间中的位置，从前到后。后墙通常位于第0行，因此我们通常从第1行开始放置物体。最大的有效数字通常是房间高度减去2：我们减去1，因为地图位置是从0开始的，再减去1是因为前墙占据了空间。实际上，最好在房间前面留出更多空间，因为前墙可能会遮挡其他物体。你可以在[第4章](ch04.xhtml#ch04)中你添加的GAME_MAP代码中查看房间的大小。'
- en: '**The object’s *x* position** This tells the program how far across the room
    from left to right the object should be. Again, a wall is usually in position
    0\. The largest useful number will generally be the room width minus 2.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体的 *x* 位置** 这告诉程序物体应该在房间中从左到右的哪个位置。通常情况下，墙壁的位置是0。最大的有效数字通常是房间宽度减去2。'
- en: To get a better understanding of these numbers, let’s take a look at [Figure
    6-1](ch06.xhtml#ch06fig1), which shows one of the rooms on the space station as
    a screenshot and a map. In this image, the sink (S) is in the second row from
    the back, so its *y* position is 1\. Remember that the wall in the first row at
    the back is in position *y* = 0\. The sink’s *x* position is 3\. There are two
    other tile spaces to the left of it, and the wall is in position *x* = 0.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这些数字，让我们看看 [图 6-1](ch06.xhtml#ch06fig1)，它展示了空间站上的一个房间的截图和地图。在这张图中，水槽（S）位于从后面数来的第二行，所以它的
    *y* 坐标是 1。记住，后排的第一行墙壁位于 *y* = 0。水槽的 *x* 坐标是 3。水槽左边还有两个瓷砖格子，墙壁位于 *x* = 0 的位置。
- en: '![image](../images/fig6-1.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6-1.jpg)'
- en: '*Figure 6-1: An example space station room as seen in the game (left) and represented
    by a map (right). T = toilet, S = sink, P = player.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：游戏中看到的空间站房间示例（左）以及通过地图表示的房间（右）。T = 马桶，S = 水槽，P = 玩家。*'
- en: Let’s look at the data for this room. Don’t enter this code yet. I’ll give you
    all the scenery data shortly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个房间的数据。现在不要输入这段代码。我会很快给你所有的风景数据。
- en: scenery = {
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: scenery = {
- en: --snip--
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: '30: [[34,1,1], [35,1,3]],'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '30: [[34,1,1], [35,1,3]],'
- en: --snip--
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: '}'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: This code tells the program about the objects in room 30\. Room 30 has object
    number 34, a toilet, in the top-left corner at position *y* = 1 and *x* = 1, and
    object number 35, a sink, at position number *y* = 1 and *x* = 3, quite close
    to the toilet.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉程序关于房间 30 的物体。房间 30 在左上角位置（*y* = 1 和 *x* = 1）有物体编号 34 的马桶，另外在位置 *y* =
    1 和 *x* = 3 处，靠近马桶的位置有物体编号 35 的水槽。
- en: You can have the same object in the room several times by adding a list for
    each position and using the same object number for them. For example, you could
    fill the room with toilets in different positions if you wanted to, although that
    would be a rather bizarre thing to do.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过为每个位置添加一个列表并使用相同的物体编号多次出现在房间里。例如，你可以在不同的位置放置多个马桶，尽管这样做可能会显得有点怪异。
- en: You don’t need to include the walls in the scenery data, because the program
    automatically adds them to the room when it creates the room_map list, as you’ve
    already seen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要在风景数据中包含墙壁，因为程序会在创建 `room_map` 列表时自动将它们添加到房间中，正如你之前所看到的那样。
- en: Even though putting the information for each item into a list means adding more
    brackets, it’s much easier to understand the data at a glance. The brackets help
    you see how many items are in the room, which numbers are the object numbers,
    and which are the position numbers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使将每个物体的信息放入一个列表中需要更多的括号，但这样一眼就能看出数据，方便理解。括号帮助你看到房间里有多少个物体，哪些是物体编号，哪些是位置编号。
- en: '**ADDING THE SCENERY DATA**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加风景数据**'
- en: Open *listing5-8.py*, the final listing in [Chapter 5](ch05.xhtml#ch05). This
    listing contains your game map and objects data. Now we’ll add the scenery data
    to it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *listing5-8.py*，这是 [第 5 章](ch05.xhtml#ch05)中的最后一个列表示例。这个列表包含了你的游戏地图和物体数据。现在我们将向其中添加风景数据。
- en: '[Listing 6-1](ch06.xhtml#ch06list1) shows the scenery data. Add this new SCENERY
    section before the MAKE MAP section. Make sure the placement of the brackets and
    commas is correct. Remember that each piece of scenery needs a list of three numbers,
    and each list is separated with a comma too. If you prefer not to type all the
    data in, use the file *data-chapter6.py*, which is in the *listings* folder. It
    contains the scenery dictionary for you to copy and paste into your program.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-1](ch06.xhtml#ch06list1) 显示了风景数据。请在 MAKE MAP 部分之前添加这个新的 SCENERY 部分。确保括号和逗号的位置正确。记住，每一项风景需要一个由三个数字组成的列表，每个列表之间也用逗号分隔。如果你不想手动输入所有数据，可以使用
    *data-chapter6.py* 文件，它在 *listings* 文件夹中，里面包含了风景字典，供你复制并粘贴到程序中。'
- en: '*listing6-1.py*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-1.py*'
- en: --snip--
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: items_player_may_stand_on = items_player_may_carry + [0, 39, 2, 48]
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: items_player_may_stand_on = items_player_may_carry + [0, 39, 2, 48]
- en: '###############'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##  SCENERY  ##'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '## 风景 ##'
- en: '###############'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '# Scenery describes objects that cannot move between rooms.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '# 风景描述的是无法在房间间移动的物体。'
- en: '# room number: [[object number, y position, x position]...]'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '# 房间编号: [[物体编号, y 坐标, x 坐标]...]'
- en: scenery = {
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: scenery = {
- en: '26: [[39,8,2]],'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '26: [[39,8,2]],'
- en: '27: [[33,5,5], [33,1,1], [33,1,8], [47,5,2],'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '27: [[33,5,5], [33,1,1], [33,1,8], [47,5,2],'
- en: '[47,3,10], [47,9,8], [42,1,6]],'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[47,3,10], [47,9,8], [42,1,6]],'
- en: '28: [[27,0,3], [41,4,3], [41,4,7]],'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '28: [[27,0,3], [41,4,3], [41,4,7]],'
- en: '29: [[7,2,6], [6,2,8], [12,1,13], [44,0,1],'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '29: [[7,2,6], [6,2,8], [12,1,13], [44,0,1],'
- en: '[36,4,10], [10,1,1], [19,4,2], [17,4,4]],'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[36,4,10], [10,1,1], [19,4,2], [17,4,4]],'
- en: '30: [[34,1,1], [35,1,3]],'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '30: [[34,1,1], [35,1,3]],'
- en: '31: [[11,1,1], [19,1,8], [46,1,3]],'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '31: [[11,1,1], [19,1,8], [46,1,3]],'
- en: '32: [[48,2,2], [48,2,3], [48,2,4], [48,3,2], [48,3,3],'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '32: [[48,2,2], [48,2,3], [48,2,4], [48,3,2], [48,3,3],'
- en: '[48,3,4], [48,4,2], [48,4,3], [48,4,4]],'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[48,3,4], [48,4,2], [48,4,3], [48,4,4]],'
- en: '33: [[13,1,1], [13,1,3], [13,1,8], [13,1,10], [48,2,1],'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '33: [[13,1,1], [13,1,3], [13,1,8], [13,1,10], [48,2,1],'
- en: '[48,2,7], [48,3,6], [48,3,3]],'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[48,2,7], [48,3,6], [48,3,3]],'
- en: '34: [[37,2,2], [32,6,7], [37,10,4], [28,5,3]],'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '34: [[37,2,2], [32,6,7], [37,10,4], [28,5,3]],'
- en: '35: [[16,2,9], [16,2,2], [16,3,3], [16,3,8], [16,8,9], [16,8,2], [16,1,8],'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '35: [[16,2,9], [16,2,2], [16,3,3], [16,3,8], [16,8,9], [16,8,2], [16,1,8],'
- en: '[16,1,3], [12,8,6], [12,9,4], [12,9,8],'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[16,1,3], [12,8,6], [12,9,4], [12,9,8],'
- en: '[15,4,6], [12,7,1], [12,7,11]],'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[15,4,6], [12,7,1], [12,7,11]],'
- en: '36: [[4,3,1], [9,1,7], [8,1,8], [8,1,9],'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '36: [[4,3,1], [9,1,7], [8,1,8], [8,1,9],'
- en: '[5,5,4], [6,5,7], [10,1,1], [12,1,2]],'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[5,5,4], [6,5,7], [10,1,1], [12,1,2]],'
- en: '37: [[48,3,1], [48,3,2], [48,7,1], [48,5,2], [48,5,3],'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '37: [[48,3,1], [48,3,2], [48,7,1], [48,5,2], [48,5,3],'
- en: '[48,7,2], [48,9,2], [48,9,3], [48,11,1], [48,11,2]],'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[48,7,2], [48,9,2], [48,9,3], [48,11,1], [48,11,2]],'
- en: '38: [[43,0,2], [6,2,2], [6,3,5], [6,4,7], [6,2,9], [45,1,10]],'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '38: [[43,0,2], [6,2,2], [6,3,5], [6,4,7], [6,2,9], [45,1,10]],'
- en: '39: [[38,1,1], [7,3,4], [7,6,4], [5,3,6], [5,6,6],'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '39: [[38,1,1], [7,3,4], [7,6,4], [5,3,6], [5,6,6],'
- en: '[6,3,9], [6,6,9], [45,1,11], [12,1,8], [12,1,4]],'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[6,3,9], [6,6,9], [45,1,11], [12,1,8], [12,1,4]],'
- en: '40: [[41,5,3], [41,5,7], [41,9,3], [41,9,7],'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '40: [[41,5,3], [41,5,7], [41,9,3], [41,9,7],'
- en: '[13,1,1], [13,1,3], [42,1,12]],'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[13,1,1], [13,1,3], [42,1,12]],'
- en: '41: [[4,3,1], [10,3,5], [4,5,1], [10,5,5], [4,7,1],'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '41: [[4,3,1], [10,3,5], [4,5,1], [10,5,5], [4,7,1],'
- en: '[10,7,5], [12,1,1], [12,1,5]],'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[10,7,5], [12,1,1], [12,1,5]],'
- en: '44: [[46,4,3], [46,4,5], [18,1,1], [19,1,3],'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '44: [[46,4,3], [46,4,5], [18,1,1], [19,1,3],'
- en: '[19,1,5], [52,4,7], [14,1,8]],'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[19,1,5], [52,4,7], [14,1,8]],'
- en: '45: [[48,2,1], [48,2,2], [48,3,3], [48,3,4], [48,1,4], [48,1,1]],'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '45: [[48,2,1], [48,2,2], [48,3,3], [48,3,4], [48,1,4], [48,1,1]],'
- en: '46: [[10,1,1], [4,1,2], [8,1,7], [9,1,8], [8,1,9], [5,4,3], [7,3,2]],'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '46: [[10,1,1], [4,1,2], [8,1,7], [9,1,8], [8,1,9], [5,4,3], [7,3,2]],'
- en: '47: [[9,1,1], [9,1,2], [10,1,3], [12,1,7], [5,4,4], [6,4,7], [4,1,8]],'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '47: [[9,1,1], [9,1,2], [10,1,3], [12,1,7], [5,4,4], [6,4,7], [4,1,8]],'
- en: '48: [[17,4,1], [17,4,2], [17,4,3], [17,4,4], [17,4,5], [17,4,6], [17,4,7],'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '48: [[17,4,1], [17,4,2], [17,4,3], [17,4,4], [17,4,5], [17,4,6], [17,4,7],'
- en: '[17,8,1], [17,8,2], [17,8,3], [17,8,4],'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[17,8,1], [17,8,2], [17,8,3], [17,8,4],'
- en: '[17,8,5], [17,8,6], [17,8,7], [14,1,1]],'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[17,8,5], [17,8,6], [17,8,7], [14,1,1]],'
- en: '49: [[14,2,2], [14,2,4], [7,5,1], [5,5,3], [48,3,3], [48,3,4]],'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '49: [[14,2,2], [14,2,4], [7,5,1], [5,5,3], [48,3,3], [48,3,4]],'
- en: '50: [[45,4,8], [11,1,1], [13,1,8], [33,2,1], [46,4,6]]'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '50: [[45,4,8], [11,1,1], [13,1,8], [33,2,1], [46,4,6]]'
- en: '}'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: checksum = 0
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: checksum = 0
- en: check_counter = 0
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: check_counter = 0
- en: 'for key, room_scenery_list in scenery.items():'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '对于 scenery 中的每个键值对，遍历 room_scenery_list:'
- en: 'for scenery_item_list in room_scenery_list:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '对于 room_scenery_list 中的每个 scenery_item_list:'
- en: ➊         checksum += (scenery_item_list[0] * key
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ➊          checksum += (scenery_item_list[0] * key
- en: + scenery_item_list[1] * (key + 1)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: + scenery_item_list[1] * (key + 1)
- en: + scenery_item_list[2] * (key + 2))
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: + scenery_item_list[2] * (key + 2))
- en: check_counter += 1
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: check_counter += 1
- en: print(check_counter, "scenery items")
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: print(check_counter, "景观项目")
- en: ➋ assert check_counter == 161, "Expected 161 scenery items"
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ assert check_counter == 161, "期望有161个景观项目"
- en: ➌ assert checksum == 200095, "Error in scenery data"
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ assert checksum == 200095, "景观数据错误"
- en: 'print("Scenery checksum: " + str(checksum))'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("景观校验和: " + str(checksum))'
- en: '###############'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## MAKE MAP  ##'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '## 制作地图  ##'
- en: '###############'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: '*Listing 6-1: Adding the scenery data*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-1：添加景观数据*'
- en: Save your listing as *listing6-1.py*, and run it using pgzrun listing6-1.py
    in the command line. We’ve added some data, but we haven’t told the program to
    do anything with it, so you won’t see any change. But if you made a mistake entering
    the data, the program should stop and display the message Error in scenery data.
    In this case, go back and double-check your code against the book. Check that
    you entered the checksum number correctly first! ➌
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的列表保存为 *listing6-1.py*，然后在命令行中使用 pgzrun listing6-1.py 运行它。我们已经添加了一些数据，但我们还没有让程序对它做任何操作，因此您不会看到任何变化。但如果在输入数据时犯了错，程序应该会停止并显示“景观数据错误”的信息。在这种情况下，请返回并仔细检查您的代码是否与书中的内容一致。首先检查您是否正确输入了校验和数值！
    ➌
- en: The second half of this listing is a safety measure, called a *checksum*. It
    checks that all the data is present and correct by making a calculation involving
    the data and then checking the result against the correct answer. If there’s a
    mistake in the data you’ve entered, this bit of code will stop the program until
    you fix it. This stops your game from running with bugs in it. (Some errors could
    get through, but this code catches most mistakes.)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的后半部分是一个安全措施，叫做 *校验和*。它通过对数据进行计算并将结果与正确答案进行比对，检查所有数据是否完整且正确。如果您输入的数据有错误，这部分代码会停止程序，直到您修正它。这能防止您的游戏在有缺陷的情况下运行。（虽然一些错误可能仍然会通过，但这段代码能捕获大多数错误。）
- en: 'The program uses the assert instruction to check the data. The first instruction
    checks that the program has the right number of data items. If it doesn’t, the
    program stops and shows an error message ➋. The program also checks whether the
    checksum (the result from the calculation) is the expected number, and if it isn’t,
    it stops the program ➌. Notice that one of the instructions in [Listing 6-1](ch06.xhtml#ch06list1)
    spreads across three lines ➊: Python knows we haven’t finished the instruction
    until we close the final parenthesis.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用 assert 指令来检查数据。第一条指令检查程序是否有正确数量的数据项。如果没有，程序会停止并显示错误信息 ➋。程序还会检查校验和（计算结果）是否是预期的数字，如果不是，它会停止程序
    ➌。注意，在[Listing 6-1](ch06.xhtml#ch06list1)中的一条指令跨越了三行 ➊：Python 知道在我们关闭最后一个括号之前，我们还没有完成指令。
- en: '**TIP**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: 'If you want to change the scenery data, to redesign rooms or to add your own
    rooms, you will need to turn off the checksum. This is because the calculation
    based on your changed data will be different, so the checksum will fail and the
    program won’t run. You can simply put a # symbol before the two lines that start
    with assert ➋➌ to switch them off. As you know, the # symbol is used for a comment,
    and Python ignores everything after it on the same line. It can be a handy off
    switch when you’re building or testing programs.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你想更改景观数据、重新设计房间或添加自己的房间，你需要关闭校验和。这是因为基于你更改的数据进行的计算会有所不同，因此校验和会失败，程序也不会运行。你可以简单地在以
    assert 开头的两行前加上 # 符号 ➋➌ 来关闭它们。正如你所知道的，# 符号用于注释，Python 会忽略同一行上的所有内容。当你在构建或测试程序时，它是一个非常方便的关闭开关。'
- en: '**ADDING THE PERIMETER FENCE FOR THE PLANET SURFACE**'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为行星表面添加围栏**'
- en: You might have noticed that we haven’t added any scenery for rooms 1 to 25 yet.
    Our data starts at room 26\. As you might remember, the first 25 locations are
    outside on the planet surface. For simplicity, we’ll still call them rooms, although
    they have no walls.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到我们还没有为房间 1 到 25 添加任何景观。我们的数据从房间 26 开始。正如你可能记得的，前 25 个位置在行星表面外部。为了简便起见，我们仍然称它们为房间，尽管它们没有墙壁。
- en: '[Figure 6-2](ch06.xhtml#ch06fig2) shows rooms 1 to 25 on the map. A fence,
    shown as a dotted line in [Figure 6-2](ch06.xhtml#ch06fig2), surrounds the outside
    of these rooms. The fence stops people from wandering out of the compound and
    off the game map.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-2](ch06.xhtml#ch06fig2) 显示了房间 1 到 25 在地图上的位置。围栏（如[图 6-2](ch06.xhtml#ch06fig2)中的虚线所示）围绕这些房间的外部。围栏阻止人们走出大院并离开游戏地图。'
- en: '![image](../images/fig6-2.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig6-2.jpg)'
- en: '*Figure 6-2: Adding the fence around the planet surface locations*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2: 为行星表面位置添加围栏*'
- en: 'We need to add fences at the following locations:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在以下位置添加围栏：
- en: On the left in rooms 1, 6, 11, 16, and 21
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间 1、6、11、16 和 21 的左侧
- en: At the top in rooms 1, 2, 3, 4, and 5
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间 1、2、3、4 和 5 的顶部
- en: On the right in rooms 5, 10, 15, 20, 25
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间 5、10、15、20、25 的右侧
- en: Each outside room has one item of planet surface scenery too, which is randomly
    chosen from a small selection of suitable items that includes rocks, shrubs, and
    craters. For the game, it doesn’t matter where these items are placed, so they
    can also be randomly positioned.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个外部房间也有一个行星表面景观项，它是从一小部分合适的项目中随机选择的，这些项目包括岩石、灌木丛和陨石坑。对于游戏来说，景观项目的位置并不重要，因此它们也可以随机定位。
- en: '[Listing 6-2](ch06.xhtml#ch06list2) shows the code that generates the random
    planet surface scenery and adds the fences. Add the code to the end of the SCENERY
    section you just created, and save your program as *listing6-2.py*. You can use
    pgzrun listing6-2.py to check whether the program reports any errors.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 6-2](ch06.xhtml#ch06list2) 显示了生成随机行星表面景观并添加围栏的代码。将代码添加到你刚刚创建的 SCENERY
    部分的末尾，并将程序保存为 *listing6-2.py*。你可以使用 pgzrun listing6-2.py 来检查程序是否报告任何错误。'
- en: '*listing6-2.py*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-2.py*'
- en: --snip--
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'print("Scenery checksum: " + str(checksum))'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("景观校验和: " + str(checksum))'
- en: 'for room in range(1, 26): # Add random scenery in planet locations.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'for room in range(1, 26): # 在行星位置添加随机景观。'
- en: '➊     if room != 13: # Skip room 13.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '➊     if room != 13: # 跳过房间 13。'
- en: ➋         scenery_item = random.choice([16, 28, 29, 30])
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ➋         scenery_item = random.choice([16, 28, 29, 30])
- en: ➌         scenery[room] = [[scenery_item, random.randint(2, 10),
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ➌         scenery[room] = [[scenery_item, random.randint(2, 10),
- en: random.randint(2, 10)]]
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: random.randint(2, 10)]]
- en: '# Use loops to add fences to the planet surface rooms.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用循环为行星表面房间添加围栏。'
- en: '➍ for room_coordinate in range(0, 13):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '➍ for room_coordinate in range(0, 13):'
- en: '➎     for room_number in [1, 2, 3, 4, 5]: # Add top fence'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '➎     for room_number in [1, 2, 3, 4, 5]: # 添加顶部围栏'
- en: ➏         scenery[room_number] += [[31, 0, room_coordinate]]
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ➏         scenery[room_number] += [[31, 0, room_coordinate]]
- en: '➐     for room_number in [1, 6, 11, 16, 21]: # Add left fence'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '➐     for room_number in [1, 6, 11, 16, 21]: # 添加左侧围栏'
- en: ➑         scenery[room_number] += [[31, room_coordinate, 0]]
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ➑         scenery[room_number] += [[31, room_coordinate, 0]]
- en: 'for room_number in [5, 10, 15, 20, 25]: # Add right fence'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'for room_number in [5, 10, 15, 20, 25]: # 添加右侧围栏'
- en: ➒         scenery[room_number] += [[31, room_coordinate, 12]]
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ➒         scenery[room_number] += [[31, room_coordinate, 12]]
- en: '➓ del scenery[21][-1] # Delete last fence panel in Room 21'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '➓ del scenery[21][-1] # 删除房间21中的最后一块围栏'
- en: 'del scenery[25][-1] # Delete last fence panel in Room 25'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'del scenery[25][-1] # 删除房间25中的最后一块围栏'
- en: '###############'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## MAKE MAP  ##'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建地图 ##'
- en: '###############'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 6-2: Generating random planet surface scenery*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单6-2：生成随机星球表面场景*'
- en: You don’t need to understand this code to enjoy building and playing *Escape*,
    but if you want to dig deeper, I’ll explain the code in more detail.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要理解这段代码就可以享受建造和玩*Escape*，但是如果你想深入了解，我会更详细地解释这段代码。
- en: The first section in [Listing 6-2](ch06.xhtml#ch06list2) adds the random scenery.
    For each room, random.choice() ➋ chooses a scenery item randomly. In the same
    way that random.randint() gave us a random number (like rolling dice), random.choice()
    gives us a random item (like a grab bag or lucky dip game). The item is chosen
    from the list [16, 28, 29, 30]. Those object numbers represent a shrub, a large
    rock, a small rock, and a crater, respectively.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单6-2](ch06.xhtml#ch06list2)的第一部分添加了随机景物。对于每个房间，random.choice() ➋ 随机选择一个景物项。就像random.randint()给我们一个随机数（就像掷骰子），random.choice()给我们一个随机景物项（就像抓好运气袋或者幸运抽奖）。该项从列表[16,
    28, 29, 30]中选择。这些对象编号分别代表灌木、巨石、小石块和陨石坑。'
- en: We also add a new entry to the scenery dictionary for the room ➌. This entry
    contains the random scenery item and random *y* and *x* positions for that item.
    The *y* and *x* positions place the item inside the room but not too near the
    edge.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为房间 ➌ 的景物字典添加了一个新条目。这个条目包含了随机景物项和该项的随机*y*和*x*位置。*y*和*x*位置将景物放置在房间内，但不会太靠近边缘。
- en: The != operator ➊ means “not equal to,” so scenery is added only if the room
    number is *not* 13\. Who knows? Maybe it’ll be useful to have an empty space on
    the planet surface when you’re on your mission…
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '!= 运算符 ➊ 意味着“不等于”，因此只有当房间号*不是*13时，才会添加景物。谁知道呢？也许在你的任务中，星球表面有一个空旷的地方会派上用场…'
- en: In the second part of [Listing 6-2](ch06.xhtml#ch06list2), we add the fences.
    All the planet surface locations are 13 tiles high and 13 tiles wide, so we can
    use one loop ➍ to add the top and side fences. The loop’s variable, room_coordinate,
    counts from 0 to 12, and each time around the loop, fence panels are put in place
    at the top and the sides of the appropriate rooms.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单6-2](ch06.xhtml#ch06list2)的第二部分，我们添加了围栏。所有的星球表面位置都是13个瓦片高，13个瓦片宽，所以我们可以用一个循环
    ➍ 来添加顶部和侧面的围栏。循环的变量，room_coordinate，从0计数到12，每次循环时，围栏面板会被放置在适当房间的顶部和侧面。
- en: Inside the room_coordinate loop, there are three loops for the room_number.
    The first room_number loop ➎ adds a fence along the top row of the top rooms.
    Instead of using a range(), this time we’re looping through a list. Each time
    through the list, the variable room_number takes the next number from the list
    [1, 2, 3, 4, 5]. We add a piece of scenery to the scenery list for the room, using
    += ➏. This is scenery item 31 (a fence), in the top row of the room (at position
    *y* = 0). The room_coordinate value is used for the *x* position. This puts the
    top fence into rooms 1 to 5, in the top row of those rooms.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在room_coordinate循环内部，有三个针对room_number的循环。第一个room_number循环 ➎ 在顶部房间的顶行添加围栏。这次我们没有使用range()，而是通过一个列表进行循环。每次循环时，变量room_number从列表[1,
    2, 3, 4, 5]中取下一个数字。我们为该房间的景物列表添加一项景物，使用+= ➏。这是景物项31（一块围栏），位于房间的顶行（位置*y* = 0）。room_coordinate的值用于*x*位置。这将把顶部围栏添加到房间1到5的顶行。
- en: There are two other room_number loops inside the room_coordinate loop. The first
    one adds the left fence to rooms 1, 6, 11, 16, and 21 ➐. This time, the program
    uses the room_coordinate variable for the *y* position and uses 0 for the *x*
    position ➑. This puts fence panels along the left edge of those rooms. The second
    loop adds the right edge fence to rooms 5, 10, 15, 20, and 25. This also uses
    the room_coordinate for the *y* position of the fence panel but uses 12 for the
    *x* coordinate, putting a fence along the right edge of those rooms ➒.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在 room_coordinate 循环内部还有两个其他的 room_number 循环。第一个循环将左侧围栏添加到 1、6、11、16 和 21 号房间
    ➐。这次，程序使用 room_coordinate 变量来表示 *y* 位置，并使用 0 作为 *x* 位置 ➑。这样可以在这些房间的左边缘放置围栏面板。第二个循环将右侧围栏添加到
    5、10、15、20 和 25 号房间。这也使用 room_coordinate 来表示围栏面板的 *y* 位置，但使用 12 作为 *x* 坐标，将围栏放在这些房间的右边缘
    ➒。
- en: We don’t want side fence panels where the outside area joins the space station
    wall. [Figure 6-3](ch06.xhtml#ch06fig3) shows a map of room 21\. The bottom-left
    corner of the room should be wall, so there shouldn’t be a fence panel here. The
    loops we used just added a fence panel here, though, so we use an instruction
    ➓ to delete the last item of scenery added to this room, and to room 25, which
    is on the other side of the compound (see [Figure 6-2](ch06.xhtml#ch06fig2)).
    It’s easier to add these two panels and take them out again than it is to write
    code that avoids putting these fence panels in. The index number -1 is a handy
    shortcut for referring to the last item in a list.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在外部区域与空间站墙壁连接的地方有侧围栏面板。[图 6-3](ch06.xhtml#ch06fig3)展示了 21 号房间的地图。房间的左下角应该是墙壁，所以这里不应该有围栏面板。然而，我们使用的循环只是添加了一个围栏面板到这里，因此我们使用指令
    ➓ 删除该房间最后添加的景观项，同时也删除 25 号房间的围栏面板（该房间位于建筑物的另一侧，见 [图 6-2](ch06.xhtml#ch06fig2)）。添加这两个面板并再删除它们，比编写避免在此处放置围栏面板的代码要容易。索引号
    -1 是一个方便的快捷方式，用于引用列表中的最后一项。
- en: '![image](../images/fig6-3.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig6-3.jpg)'
- en: '*Figure 6-3: Map showing how the fence touches the wall in an outside room
    next to the space station*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：展示围栏如何触及空间站旁边的外部房间墙壁的地图*'
- en: Using random scenery and loops to position fences enables us to have a large
    area to explore without having to type in data for over 200 fence panels and scenery
    items.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机景观和循环来定位围栏使我们能够探索一个大区域，而不必为超过 200 个围栏面板和景观项目输入数据。
- en: '**TIP**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you’re customizing the game and don’t want to add random scenery or fences
    in rooms 1 to 25, you can delete the code sections shown in [Listing 6-2](ch06.xhtml#ch06list2).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在自定义游戏，并且不希望在 1 到 25 号房间中添加随机景观或围栏，可以删除 [清单 6-2](ch06.xhtml#ch06list2) 中显示的代码部分。
- en: '**LOADING THE SCENERY INTO EACH ROOM**'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将景观加载到每个房间**'
- en: Now that we’ve added scenery data to the program, let’s add some code so we
    can see the scenery in the space station! You might remember that the generate_map()
    function creates the room_map list for the room you’re currently exploring. The
    room_map list is used to display and navigate the room.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将景观数据添加到程序中，让我们添加一些代码，以便在空间站中看到这些景观！你可能还记得，generate_map() 函数为你当前探索的房间创建
    room_map 列表。room_map 列表用于显示和导航房间。
- en: So far, the generate_map() function just calculates the size of the room and
    where the doors are, and places the floor and walls. We need to add some code
    to extract the scenery from our new dictionary and add it to the room_map. But
    first, we’ll make one small but important adjustment to the program. In the VARIABLES
    section, near the start of the program, add the new line shown in [Listing 6-3](ch06.xhtml#ch06list3).
    Save your program as *listing6-3.py*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，generate_map() 函数仅计算房间的大小以及门的位置，并放置了地板和墙壁。我们需要添加一些代码，从我们的新字典中提取景观，并将其添加到
    room_map 中。但首先，我们将对程序进行一个小而重要的调整。在 VARIABLES 部分，靠近程序开头的位置，添加 [清单 6-3](ch06.xhtml#ch06list3)
    中显示的新行。将程序保存为 *listing6-3.py*。
- en: '*listing6-3.py*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-3.py*'
- en: --snip--
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '###############'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: 'VARIABLES ##'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '变量 ##'
- en: '###############'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: LANDER_SECTOR = random.randint(1, 24)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: LANDER_SECTOR = random.randint(1, 24)
- en: LANDER_X = random.randint(2, 11)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: LANDER_X = random.randint(2, 11)
- en: LANDER_Y = random.randint(2, 11)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: LANDER_Y = random.randint(2, 11)
- en: TILE_SIZE = 30
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: TILE_SIZE = 30
- en: '###############'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##    MAP    ##'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '##    地图    ##'
- en: '###############'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 6-3: Setting up the* TILE_SIZE *variable*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-3：设置* TILE_SIZE *变量*'
- en: This line creates a variable to store the size of a tile. Using it makes the
    program easier to read because we can replace the number 30 with a more meaningful
    phrase. Instead of seeing the number 30 in the code and having to remember what
    it represents, we can see the words TILE SIZE instead, which gives us a hint about
    what the code is doing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行创建了一个变量，用于存储瓦片的大小。使用它使得程序更易于阅读，因为我们可以用更有意义的词组来代替数字 30。这样，我们不再需要记住数字 30 代表什么，而是看到“TILE
    SIZE”，这给了我们代码功能的提示。
- en: 'Next, find the MAKE MAP section of the program: it comes before the EXPLORER
    section. Add [Listing 6-4](ch06.xhtml#ch06list4) to the end of the MAKE MAP section
    to place the scenery in the current room. All the code in [Listing 6-4](ch06.xhtml#ch06list4)
    belongs to the generate_map() function, so we need to indent the first line by
    four spaces and then indent the remaining lines as shown. Save your program as
    *listing6-4.py*.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到程序中的 MAKE MAP 部分：它位于 EXPLORER 部分之前。在 MAKE MAP 部分的末尾添加 [Listing 6-4](ch06.xhtml#ch06list4)
    以将景物添加到当前房间。所有 [Listing 6-4](ch06.xhtml#ch06list4) 中的代码都属于 generate_map() 函数，因此我们需要将第一行缩进四个空格，接着按示例缩进其余行。将程序保存为
    *listing6-4.py*。
- en: '*listing6-4.py*'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-4.py*'
- en: --snip--
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'def generate_map():'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'def generate_map():'
- en: --snip--
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '➊     if current_room in scenery:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '➊     if current_room in scenery:'
- en: '➋         for this_scenery in scenery[current_room]:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '➋         for this_scenery in scenery[current_room]:'
- en: ➌             scenery_number = this_scenery[0]
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ➌             scenery_number = this_scenery[0]
- en: ➍             scenery_y = this_scenery[1]
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ➍             scenery_y = this_scenery[1]
- en: ➎             scenery_x = this_scenery[2]
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ➎             scenery_x = this_scenery[2]
- en: ➏             room_map[scenery_y][scenery_x] = scenery_number
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ➏             room_map[scenery_y][scenery_x] = scenery_number
- en: ➐             image_here = objects[scenery_number][0]
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ➐             image_here = objects[scenery_number][0]
- en: ➑             image_width = image_here.get_width()
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ➑             image_width = image_here.get_width()
- en: ➒             image_width_in_tiles = int(image_width / TILE_SIZE)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ➒             image_width_in_tiles = int(image_width / TILE_SIZE)
- en: '➓             for tile_number in range(1, image_width_in_tiles):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '➓             for tile_number in range(1, image_width_in_tiles):'
- en: room_map[scenery_y][scenery_x + tile_number] = 255
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[scenery_y][scenery_x + tile_number] = 255
- en: '###############'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## EXPLORER  ##'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '## EXPLORER  ##'
- en: '###############'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 6-4: Additional code for* generate_map() *that adds the scenery for
    the current room to the* room_map *list*'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-4: 额外的代码，用于* generate_map() *函数，将当前房间的景物添加到* room_map *列表中*'
- en: Let’s break this down. The line at ➊ checks whether there’s an entry for the
    current room in the scenery dictionary. This check is essential because some rooms
    in our game might not have any scenery, and if we try to use a dictionary key
    that doesn’t exist, Python stops with an error.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来解析一下。➊ 这一行检查当前房间是否存在于 scenery 字典中。这个检查非常重要，因为我们游戏中的某些房间可能没有景物，如果我们尝试使用一个不存在的字典键，Python
    会抛出错误并停止运行。
- en: We then set up a loop ➋ that cycles through the scenery items for the room and
    copies them into a list called this_scenery. The first time through the loop,
    this_scenery contains the list for the first scenery item. The second time, it
    contains the list for the second item, and so on until it reaches the final scenery
    item for the current room.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置了一个循环 ➋，它遍历房间中的所有景物项，并将它们复制到一个名为 this_scenery 的列表中。第一次循环时，this_scenery
    包含第一个景物项的列表；第二次循环时，包含第二个景物项的列表，以此类推，直到遍历到当前房间的最后一个景物项。
- en: Each scenery item has a list containing its object number, *y* position, and
    *x* position. The program extracts these details from this_scenery using index
    numbers and puts them into variables called scenery_number ➌, scenery_y ➍, and
    scenery_x ➎.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每个景物项都包含一个列表，列表中包含其物品编号、*y* 坐标和 *x* 坐标。程序通过索引提取这些细节，并将它们放入名为 scenery_number
    ➌、scenery_y ➍ 和 scenery_x ➎ 的变量中。
- en: Now the program has all the information it needs to add the scenery item to
    room_map. You might remember that room_map stores the object number of the item
    in each position in the room. It uses the *y* position and *x* position in the
    room as list indexes. This program uses the scenery_y and scenery_x values as
    list indexes to put the item scenery_number into room_map ➏.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，程序拥有了添加景物到 room_map 所需的所有信息。你可能还记得，room_map 存储了房间中每个位置的物品编号。它使用房间中的 *y* 和
    *x* 坐标作为列表索引。这个程序利用 scenery_y 和 scenery_x 的值作为列表索引，把景物编号 scenery_number 放入 room_map
    ➏。
- en: If all our objects were one tile wide, that is all we would need to do. But
    some objects are wider and cover several tiles. For example, a wide object positioned
    in one tile might cover two more tiles to its right, but at the moment, the program
    only sees it in that one tile.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的所有对象都是一个瓷砖宽，那么这就是我们所需要做的一切。但是有些对象更宽，覆盖了多个瓷砖。例如，一个放置在一个瓷砖上的宽物体可能会覆盖其右侧的两个瓷砖，但目前程序只看到它处于那一个瓷砖内。
- en: We need to add something to room_map in those additional spaces so the program
    knows the player can’t walk on those tiles. I’ve used the number 255 to represent
    a space that doesn’t have an object in it but also cannot be walked on.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在那些额外的空格中向 room_map 添加一些内容，以便程序知道玩家无法在这些瓷砖上行走。我使用了数字255来表示没有物体的空间，但也无法行走。
- en: 'Why the number 255? It’s a large enough number to give you space to add many
    more objects to the game if you want to, allowing for 254 items in the objects
    dictionary. Also, it feels like a nice number to me: it’s the highest number you
    can write with one byte of data (that mattered when I started writing games in
    the 1980s, and the computer only had about 65,000 bytes of memory to store all
    its data, graphics, and program code).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么是数字 255？它是一个足够大的数字，能够让你在需要时为游戏添加更多对象，允许在对象字典中有 254 个项。而且，对我来说，它是一个不错的数字：它是你可以用一个字节数据表示的最大数字（在我开始写游戏的1980年代，那时计算机只有大约
    65,000 字节的内存来存储所有数据、图形和程序代码）。
- en: First, we need to figure out how wide an image is so we know how many tiles
    it fills. We use scenery_number as the dictionary key to get information about
    the object from the objects dictionary ➐. We know the objects dictionary returns
    a list of information, the first item of which is the image. So we use the index
    0 to extract the image and put it into the variable image_here.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要弄清楚图像的宽度，以便知道它填充了多少个瓷砖。我们使用 scenery_number 作为字典键，从 objects 字典中获取有关对象的信息
    ➐。我们知道 objects 字典返回一个包含信息的列表，列表中的第一个项是图像。因此，我们使用索引0来提取图像并将其放入变量 image_here 中。
- en: Then we can use Pygame Zero to find out the width of an image by adding get_width()
    after its name ➑. We put that number into a variable called image_width. Because
    we need to know how many tiles the image covers, the program divides the image
    width (in pixels) by the tile size, 30, and makes it an integer (a whole number)
    ➒. We must convert the number to an integer because we’re going to use it in the
    range() function ➓, which can only take integers. If we didn’t convert the number,
    the width would be a floating-point number—a number with a decimal point.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 Pygame Zero 来查找图像的宽度，通过在其名称后添加 get_width() ➑。我们将这个数字存入名为 image_width
    的变量中。因为我们需要知道图像覆盖了多少个瓷砖，程序会将图像宽度（以像素为单位）除以瓷砖大小30，并将其转换为整数（一个整数） ➒。我们必须将数字转换为整数，因为我们将它用于
    range() 函数 ➓，而 range() 只接受整数。如果我们不转换数字，宽度将是浮动数——带有小数点的数字。
- en: Finally, we set up a loop that adds the value 255 in the spaces to the right
    of the scenery item, wherever the tile is covered ➓.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置了一个循环，将值255添加到景物项右侧的空格中， wherever the tile is covered ➓。
- en: If an image is 90 pixels wide, we divide it by the tile size of 30 and store
    the result, 3, in image_width_in_tiles. Then the loop counts to 2 using range()
    because we give it a range of 1 to image_width_in_tiles ➓. We add the loop numbers
    to the *x* position of the object, and those positions in room_map are marked
    with 255\. Large objects that cover three tiles now have 255 in the next two spaces
    to the right.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图像的宽度是90像素，我们将它除以瓷砖大小30，并将结果3存储在 image_width_in_tiles 中。然后，循环使用 range() 计算2，因为我们给它的范围是从1到
    image_width_in_tiles ➓。我们将循环数字加到对象的 *x* 位置，这些位置在 room_map 中标记为255。现在，覆盖三个瓷砖的大物体，其右侧的下两个空格也标记为255。
- en: Now our program contains all the scenery and can add it to the room_map, ready
    for display. Next, we’ll make some small changes to the EXPLORER section so we
    can tour the space station.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的程序包含了所有景物，并且可以将其添加到 room_map 中，准备进行显示。接下来，我们将对 EXPLORER 部分做一些小改动，以便我们能够在空间站上进行巡游。
- en: '**UPDATING THE EXPLORER TO TOUR THE SPACE STATION**'
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更新 EXPLORER 以便巡游空间站**'
- en: The EXPLORER part of the program lets you view all the rooms on the space station
    and move around the map using the arrow keys. Let’s update that section so you
    can see all the scenery in place.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的EXPLORER部分让你查看空间站的所有房间，并使用箭头键在地图上移动。让我们更新这一部分，以便你能看到所有的景物。
- en: 'If your *Explorer* code includes any lines for adding scenery to the room_map,
    you’ll need to switch them off now. Although they’re a good way to experiment
    with a room design, they force the same scenery into every room and override the
    real room designs. Because these lines might include your ideas for room designs,
    rather than deleting them, you can comment them out so Python will ignore them.
    Click and drag the mouse to highlight all the lines at once, and then click **Format**
    ▸ **Comment Out Region** (or use the keyboard shortcut ALT-3). Comment symbols
    will be added at the start of the highlighted lines, as shown in [Listing 6-5](ch06.xhtml#ch06list5):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '*listing6-5.py*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: EXPLORER  ##
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw():'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: global room_height, room_width, room_map
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: print(current_room)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: screen.clear()
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '##    room_map[2][4] = 7'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '##    room_map[2][6] = 6'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '##    room_map[1][1] = 8'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '##    room_map[1][2] = 9'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '##    room_map[1][8] = 12'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '##    room_map[1][9] = 10'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-5: Commenting out code in the* EXPLORER *section*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to make a small change to the code that displays the room so it
    doesn’t try to draw an image for a floor space marked with 255\. That space will
    be covered by an image to the left of it, and we don’t have an entry in the objects
    dictionary for 255.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 6-6](ch06.xhtml#ch06list6) shows the new line you need to add to the
    EXPLORER part of the program where indicated. The if statement makes sure the
    instructions that draw an object run only if the object number is not (!=) 255.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: After adding the line, indent the existing code that comes after it by four
    spaces. The indentation tells Python that those instructions belong to the if
    instruction. You can either type four spaces at the start of the next two lines,
    or you can highlight them and click **Format** ▸ **Indent Region**.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '*listing6-6.py*'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: EXPLORER  ##
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'for y in range(room_height):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in range(room_width):'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_map[y][x] != 255:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: image_to_draw = objects[room_map[y][x]][0]
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: screen.blit(image_to_draw,
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: (top_left_x + (x*30),
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: top_left_y + (y*30) - image_to_draw.get_height()))
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: --snip--
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-6: Updating the* Explorer *so it doesn’t try to show image 255*'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re ready to take a tour of the base. Save the program as *listing6-6.py*
    and run it by entering pgzrun listing6-6.py. Use the arrow keys to move around
    the map and familiarize yourself with the layout of the space station. As before,
    the *Explorer* program allows you to move any direction around the map, even if
    a wall would block your path when playing the game.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: All the scenery should be in place in the rooms. Wide objects should display
    correctly now, and you should be able to view all the rooms again because of the
    changes you made earlier in [Listing 6-5](ch06.xhtml#ch06list5). Some objects
    will still have a black square under them because there’s no floor tile underneath,
    but we’ll fix that in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: The space station map and scenery are now complete. It’s time to move into the
    space station. In the next chapter, you’ll teleport down to the surface and set
    foot on Mars at last.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 太空站地图和景物现在已经完成。是时候进入太空站了。在下一章中，你将传送到表面，最终踏上火星。
- en: '**TRAINING MISSION #1**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务#1**'
- en: Can you add your own room design to the scenery data? Room number 43 has been
    left empty for you to fill. It is 9 × 9 tiles in size, so you can place objects
    in positions 1 to 7 in each direction (remember the wall!). You could base your
    design on a room you created previously in the *Explorer* in [Chapter 5](ch05.xhtml#ch05)
    or invent a new layout. Remember that you need to turn off the assert instructions
    to stop the checksum complaining when the scenery numbers don’t add up.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你能将自己的房间设计添加到景物数据中吗？房间编号43已经为你留空，你可以填充它。它的大小为9 × 9格，因此你可以在每个方向的1到7位置放置物品（记得墙壁！）。你可以基于你之前在*探险者*中创建的房间设计（见[第5章](ch05.xhtml#ch05)），或者发明一个新的布局。记住，你需要关闭断言指令，以防止当景物编号不匹配时，校验和出现错误。
- en: Your program’s objects dictionary (shown in [Chapter 5](ch05.xhtml#ch05)) tells
    you the number of each object. Use object numbers between 1 and 47 to ensure that
    you don’t create any problems now that might affect the code when you complete
    and play the *Escape* game later.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序中的物品字典（见[第5章](ch05.xhtml#ch05)）会告诉你每个物品的编号。使用1到47之间的物品编号，以确保你不会创建任何可能影响代码的问题，这样在以后完成并玩*逃脱*游戏时就不会出错。
- en: If you get stuck, try building my example, which is shown in the [Mission Debrief](ch06.xhtml#ch06sb2)
    on [page 110](ch06.xhtml#page_110). Change the value of current_room in the VARIABLES
    section to 43 so you can see your redesigned room when you first run the program.
    Remember to change current_room back to 31 when you’ve finished.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到困难，可以尝试构建我的示例，示例展示在[任务回顾](ch06.xhtml#ch06sb2)的[第110页](ch06.xhtml#page_110)。将VARIABLES部分中的current_room值改为43，这样当你第一次运行程序时就能看到你重新设计的房间。记得完成后将current_room改回31。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你适合飞行吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框来确认你已掌握本章的关键内容。
- en: '![Images](../images/box.jpg)  Items that cannot move during the *Escape* game
    are called *scenery*.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  在*逃脱*游戏中，无法移动的物品称为*景物*。'
- en: '![Images](../images/box.jpg)  The scenery dictionary uses the room number as
    its key and provides a list of the fixed items in each room.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  景物字典使用房间编号作为键，并提供每个房间中固定物品的列表。'
- en: '![Images](../images/box.jpg)  Each scenery item is stored as a list containing
    the object number, *y* position, and *x* position.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  每个景物项都以列表的形式存储，其中包含物品编号、*y*位置和*x*位置。'
- en: '![Images](../images/box.jpg)  Checksums check whether the data has been changed
    or entered incorrectly.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  校验和检查数据是否已更改或输入错误。'
- en: '![Images](../images/box.jpg)  Loops can be used to add items to the scenery
    dictionary. Some scenery can be positioned randomly, too.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  循环可以用于将物品添加到景物字典中。有些景物也可以随机放置。'
- en: '![Images](../images/box.jpg)  The generate_map() function takes items that
    are in the current room from the scenery dictionary and puts them in the room_map
    list. Then the items can be displayed in the room.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  generate_map()函数从景物字典中获取当前房间的物品，并将它们放入room_map列表中。然后这些物品就可以在房间中显示出来。'
- en: '![Images](../images/box.jpg)  The number 255 in room_map represents a space
    that is covered by a wide object, when the object doesn’t start in that space.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  房间地图中的数字255表示一个被大物体覆盖的空间，但该物体并未从该空间开始。'
- en: '![image](../images/f0110-01.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0110-01.jpg)'
