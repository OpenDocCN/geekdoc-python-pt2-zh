- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: INSTALLING THE SPACE STATION EQUIPMENT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安装空间站设备**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In [Chapter 5](ch05.xhtml#ch05), you prepared information about all the equipment
    you’ll use on your mission. In this chapter, you’ll install some of that equipment
    in the space station and use the *Explorer* to view any room or planet surface
    location. This is your first chance to explore the design of the Mars base that
    will become your home.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.xhtml#ch05)中，你准备了所有将在任务中使用的设备信息。在本章中，你将把一些设备安装到空间站，并使用*Explorer*查看任何房间或行星表面的位置。这是你第一次有机会探索将成为你家的火星基地设计。
- en: '**UNDERSTANDING THE DICTIONARY FOR THE SCENERY DATA**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解景物数据的字典**'
- en: 'There are two different types of objects on the space station:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 空间站上有两种不同类型的物体：
- en: '**Scenery** is the equipment that stays in the same place throughout the *Escape*
    game and includes furniture, pipes, and electronic equipment.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**景物** 是在*Escape*游戏中始终保持在同一位置的设备，包括家具、管道和电子设备。'
- en: '**Props** are items that can appear, disappear, or move around during the game.
    They include things the player can create and pick up. Props also include doors,
    which appear in the room when they’re closed and disappear when they’re open.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**道具** 是在游戏中可以出现、消失或移动的物体。它们包括玩家可以创建和拾取的物品。道具还包括门，当门关闭时它们出现在房间中，打开时则消失。'
- en: The data for positioning scenery and the data for props are stored separately
    and organized differently. In this chapter, we’ll just add the scenery data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用于定位景物和道具的数据是分开存储的，且组织方式不同。本章中，我们只会添加景物数据。
- en: 'Our program already knows the image and description to use for all the objects
    in the game, because they’re in the `objects` dictionary you created in [Chapter
    5](ch05.xhtml#ch05). Now we’ll tell the program where to put the scenery objects
    in the space station. To do that, we’ll create a new dictionary called `scenery`.
    This is how we’ll structure the entry for one room:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的程序已经知道所有游戏中物体的图片和描述，因为它们已经在你在[第5章](ch05.xhtml#ch05)中创建的`objects`字典中。现在，我们将告诉程序将景物物体放置在空间站的位置。为此，我们将创建一个新的字典，称为`scenery`。这是我们为一个房间构建条目的方式：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The key for the dictionary will be the room number. For each room number, the
    dictionary stores a list, with a square bracket at the start and the end of it.
    Each item in that list is another list that tells the program where in the room
    to put *one* object. Here, I’ve made one object red and the other green so you
    can see where they start and end.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键将是房间号。对于每个房间号，字典存储一个列表，列表的开头和结尾有方括号。列表中的每一项是另一个列表，告诉程序将*一个*物体放置在房间中的位置。在这里，我将一个物体设置为红色，另一个设置为绿色，这样你可以看到它们的起始和结束位置。
- en: 'These are the three pieces of information you need for each object:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个物体需要以下三条信息：
- en: '**The object number** This is the same as the number that is used as the key
    in the `objects` dictionary. For example, number 5 represents a table.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体编号** 这是与`objects`字典中用作键的编号相同的编号。例如，编号5代表一张桌子。'
- en: '**The object’s *y* position** This is the object’s position in the room, from
    back to front. The back wall is usually in row 0, so we typically start placing
    objects at 1\. The largest useful number will be the room height minus 2: we subtract
    1 because the map positions start at 0 and subtract another 1 for the space the
    front wall occupies. In practice, it’s a good idea to leave a bit more space at
    the front of the room, because the front wall can obscure other items. You can
    check the size of the room in the `GAME_MAP` code you added in [Chapter 4](ch04.xhtml#ch04).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体的 *y* 位置** 这是物体在房间中的位置，从后到前。后墙通常在0行，所以我们通常从1开始放置物体。最大有用数值通常是房间的高度减去2：我们减去1是因为地图位置从0开始，再减去1是因为前墙占用了空间。实际上，最好在房间前面留更多空间，因为前墙可能会遮挡其他物体。你可以在[第4章](ch04.xhtml#ch04)中添加的`GAME_MAP`代码中查看房间的大小。'
- en: '**The object’s *x* position** This tells the program how far across the room
    from left to right the object should be. Again, a wall is usually in position
    0\. The largest useful number will generally be the room width minus 2.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体的 *x* 位置** 这告诉程序物体在房间中从左到右的具体位置。通常，墙壁的x位置是0。通常有用的最大数值是房间的宽度减去2。'
- en: To get a better understanding of these numbers, let’s take a look at [Figure
    6-1](ch06.xhtml#ch06fig1), which shows one of the rooms on the space station as
    a screenshot and a map. In this image, the sink (S) is in the second row from
    the back, so its *y* position is 1\. Remember that the wall in the first row at
    the back is in position *y* = 0\. The sink’s *x* position is 3\. There are two
    other tile spaces to the left of it, and the wall is in position *x* = 0.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这些数字，让我们来看一下[图6-1](ch06.xhtml#ch06fig1)，它展示了空间站中的一个房间的截图和地图。在这张图片中，水槽（S）位于从后向前数的第二排，因此它的*y*位置是1。记住，最靠后的第一排墙壁的位置是*y*
    = 0。水槽的*x*位置是3。它左边有两个瓷砖空间，墙壁的位置是*x* = 0。
- en: '![image](../images/fig6-1.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig6-1.jpg)'
- en: '*Figure 6-1: An example space station room as seen in the game (left) and represented
    by a map (right). T = toilet, S = sink, P = player.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-1: 游戏中看到的空间站房间示例（左）和通过地图表示的房间（右）。T = 厕所，S = 水槽，P = 玩家。*'
- en: Let’s look at the data for this room. Don’t enter this code yet. I’ll give you
    all the scenery data shortly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个房间的数据。暂时不要输入这个代码。我会很快给你所有的景观数据。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code tells the program about the objects in room 30\. Room 30 has object
    number 34, a toilet, in the top-left corner at position *y* = 1 and *x* = 1, and
    object number 35, a sink, at position number *y* = 1 and *x* = 3, quite close
    to the toilet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉程序房间30中的物体信息。房间30在左上角有编号34的厕所，位置是*y* = 1 和 *x* = 1，另外在位置*y* = 1 和 *x*
    = 3有编号35的水槽，离厕所很近。
- en: You can have the same object in the room several times by adding a list for
    each position and using the same object number for them. For example, you could
    fill the room with toilets in different positions if you wanted to, although that
    would be a rather bizarre thing to do.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在房间中多次使用同一个物品，只需要为每个位置添加一个列表，并为它们使用相同的物品编号。例如，如果你愿意，你可以将房间填满不同位置的厕所，尽管这会是一个相当奇怪的做法。
- en: You don’t need to include the walls in the scenery data, because the program
    automatically adds them to the room when it creates the `room_map` list, as you’ve
    already seen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要在景观数据中包括墙壁，因为程序在创建`room_map`列表时会自动将它们添加到房间中，正如你之前所看到的那样。
- en: Even though putting the information for each item into a list means adding more
    brackets, it’s much easier to understand the data at a glance. The brackets help
    you see how many items are in the room, which numbers are the object numbers,
    and which are the position numbers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管将每个物品的信息放入一个列表中意味着要增加更多的括号，但这样一目了然，数据更容易理解。括号帮助你看到房间里有多少物品，哪些是物品编号，哪些是位置编号。
- en: '**ADDING THE SCENERY DATA**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加景观数据**'
- en: Open *listing5-8.py*, the final listing in [Chapter 5](ch05.xhtml#ch05). This
    listing contains your game map and objects data. Now we’ll add the scenery data
    to it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*listing5-8.py*，它是[第5章](ch05.xhtml#ch05)中的最后一个代码清单。这个清单包含了你的游戏地图和物体数据。现在我们将把景观数据添加到其中。
- en: '[Listing 6-1](ch06.xhtml#ch06list1) shows the scenery data. Add this new `SCENERY`
    section before the `MAKE MAP` section. Make sure the placement of the brackets
    and commas is correct. Remember that each piece of scenery needs a list of three
    numbers, and each list is separated with a comma too. If you prefer not to type
    all the data in, use the file *data-chapter6.py*, which is in the *listings* folder.
    It contains the scenery dictionary for you to copy and paste into your program.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 6-1](ch06.xhtml#ch06list1)展示了景观数据。将这个新的`SCENERY`部分添加到`MAKE MAP`部分之前。确保括号和逗号的位置正确。记住，每个景观项需要一个由三个数字组成的列表，而且每个列表之间也要用逗号分隔。如果你不想全部手动输入数据，可以使用*data-chapter6.py*文件，它位于*listings*文件夹中。这个文件包含了你可以复制粘贴到程序中的景观字典。'
- en: '*listing6-1.py*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-1.py*'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 6-1: Adding the scenery data*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-1: 添加景观数据*'
- en: Save your listing as *listing6-1.py*, and run it using pgzrun listing6-1.py
    in the command line. We’ve added some data, but we haven’t told the program to
    do anything with it, so you won’t see any change. But if you made a mistake entering
    the data, the program should stop and display the message `Error in` `scenery
    data`. In this case, go back and double-check your code against the book. Check
    that you entered the checksum number correctly first! ➌
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的清单保存为*listing6-1.py*，然后在命令行中使用`pgzrun listing6-1.py`运行它。我们已经添加了一些数据，但还没有告诉程序做任何处理，所以你不会看到任何变化。但是，如果你在输入数据时犯了错误，程序应该会停止并显示消息`Error
    in` `scenery data`。如果发生这种情况，请返回并仔细检查你的代码与书中的内容是否一致。首先检查你是否正确输入了校验和！
- en: The second half of this listing is a safety measure, called a *checksum*. It
    checks that all the data is present and correct by making a calculation involving
    the data and then checking the result against the correct answer. If there’s a
    mistake in the data you’ve entered, this bit of code will stop the program until
    you fix it. This stops your game from running with bugs in it. (Some errors could
    get through, but this code catches most mistakes.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该列表的后半部分是一种安全措施，称为*校验和*。它通过对数据进行计算并将结果与正确答案进行对比，检查所有数据是否完整且正确。如果你输入的数据有错误，这段代码会阻止程序运行，直到你修正错误。这防止了游戏运行时出现错误。（虽然有些错误可能会被忽略，但这段代码能够捕捉大部分错误。）
- en: 'The program uses the `assert` instruction to check the data. The first instruction
    checks that the program has the right number of data items. If it doesn’t, the
    program stops and shows an error message ➋. The program also checks whether the
    checksum (the result from the calculation) is the expected number, and if it isn’t,
    it stops the program ➌. Notice that one of the instructions in [Listing 6-1](ch06.xhtml#ch06list1)
    spreads across three lines ➊: Python knows we haven’t finished the instruction
    until we close the final parenthesis.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 程序使用 `assert` 指令来检查数据。第一条指令检查程序是否拥有正确数量的数据项。如果没有，程序会停止并显示错误消息 ➋。程序还检查校验和（计算结果）是否为预期的数字，如果不是，它会停止程序
    ➌。注意，[列表 6-1](ch06.xhtml#ch06list1) 中的一条指令跨越了三行 ➊：Python 知道我们没有完成指令，直到我们关闭最后一个括号。
- en: '**TIP**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you want to change the scenery data, to redesign rooms or to add your own
    rooms, you will need to turn off the checksum. This is because the calculation
    based on your changed data will be different, so the checksum will fail and the
    program won’t run. You can simply put a `#` symbol before the two lines that start
    with `assert` ➋➌ to switch them off. As you know, the `#` symbol is used for a
    comment, and Python ignores everything after it on the same line. It can be a
    handy off switch when you’re building or testing programs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更改景观数据，重新设计房间或添加自己的房间，你需要关闭校验和。这是因为基于你更改的数据的计算将不同，因此校验和会失败，程序无法运行。你只需在以
    `assert` 开头的两行 ➋➌ 前加上 `#` 符号来关闭它们。如你所知，`#` 符号用于注释，Python 会忽略同一行中它后面的所有内容。在你构建或测试程序时，它是一个非常方便的开关。
- en: '**ADDING THE PERIMETER FENCE FOR THE PLANET SURFACE**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为星球表面添加外围围栏**'
- en: You might have noticed that we haven’t added any scenery for rooms 1 to 25 yet.
    Our data starts at room 26\. As you might remember, the first 25 locations are
    outside on the planet surface. For simplicity, we’ll still call them rooms, although
    they have no walls.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到我们还没有为房间 1 到 25 添加任何景观。我们的数据从房间 26 开始。如你所记，前 25 个位置是在星球表面外部。为了简化，我们仍然称它们为房间，尽管它们没有墙壁。
- en: '[Figure 6-2](ch06.xhtml#ch06fig2) shows rooms 1 to 25 on the map. A fence,
    shown as a dotted line in [Figure 6-2](ch06.xhtml#ch06fig2), surrounds the outside
    of these rooms. The fence stops people from wandering out of the compound and
    off the game map.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-2](ch06.xhtml#ch06fig2) 显示了地图上房间 1 到 25 的位置。一个栅栏，如[图 6-2](ch06.xhtml#ch06fig2)所示的虚线，围绕着这些房间的外部。栅栏防止人们漫无目的地走出围墙，离开游戏地图。'
- en: '![image](../images/fig6-2.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig6-2.jpg)'
- en: '*Figure 6-2: Adding the fence around the planet surface locations*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2：为星球表面位置添加围栏*'
- en: 'We need to add fences at the following locations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在以下位置添加围栏：
- en: On the left in rooms 1, 6, 11, 16, and 21
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间 1、6、11、16 和 21 的左侧
- en: At the top in rooms 1, 2, 3, 4, and 5
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间 1、2、3、4 和 5 的顶部
- en: On the right in rooms 5, 10, 15, 20, 25
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间 5、10、15、20、25 的右侧
- en: Each outside room has one item of planet surface scenery too, which is randomly
    chosen from a small selection of suitable items that includes rocks, shrubs, and
    craters. For the game, it doesn’t matter where these items are placed, so they
    can also be randomly positioned.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个外部房间也有一项星球表面景观，它是从包括岩石、灌木和陨石坑等适当项目的小范围中随机选择的。对于游戏来说，这些物品的放置位置无关紧要，因此它们也可以随机定位。
- en: '[Listing 6-2](ch06.xhtml#ch06list2) shows the code that generates the random
    planet surface scenery and adds the fences. Add the code to the end of the `SCENERY`
    section you just created, and save your program as *listing6-2.py*. You can use
    pgzrun listing6-2.py to check whether the program reports any errors.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-2](ch06.xhtml#ch06list2) 显示了生成随机星球表面景观并添加围栏的代码。将代码添加到你刚刚创建的 `SCENERY`
    部分的末尾，并将程序保存为 *listing6-2.py*。你可以使用 pgzrun listing6-2.py 来检查程序是否报告了任何错误。'
- en: '*listing6-2.py*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-2.py*'
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 6-2: Generating random planet surface scenery*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-2：生成随机的行星表面景观*'
- en: You don’t need to understand this code to enjoy building and playing *Escape*,
    but if you want to dig deeper, I’ll explain the code in more detail.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要理解这些代码就能享受构建和玩*逃脱*游戏，但如果你想深入了解，我会更详细地解释这些代码。
- en: The first section in [Listing 6-2](ch06.xhtml#ch06list2) adds the random scenery.
    For each room, `random.choice()` ➋ chooses a scenery item randomly. In the same
    way that `random.randint()` gave us a random number (like rolling dice), `random.choice()`
    gives us a random item (like a grab bag or lucky dip game). The item is chosen
    from the list `[16, 28, 29, 30]`. Those object numbers represent a shrub, a large
    rock, a small rock, and a crater, respectively.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-2](ch06.xhtml#ch06list2)的第一部分添加了随机的景观。对于每个房间，`random.choice()` ➋ 随机选择一个景观项。就像`random.randint()`给我们一个随机数（就像掷骰子一样），`random.choice()`则给我们一个随机项（就像抓宝袋或者抽奖游戏）。这个项从列表`[16,
    28, 29, 30]`中选择。这些物品编号分别代表灌木丛、大岩石、小岩石和陨石坑。'
- en: We also add a new entry to the `scenery` dictionary for the room ➌. This entry
    contains the random scenery item and random *y* and *x* positions for that item.
    The *y* and *x* positions place the item inside the room but not too near the
    edge.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为房间➌的`scenery`字典添加了一个新条目。这个条目包含了随机的景观项以及该项的随机*y*和*x*位置。*y*和*x*位置将景观项放置在房间内，但不会太靠近边缘。
- en: The `!=` operator ➊ means “not equal to,” so scenery is added only if the room
    number is *not* 13\. Who knows? Maybe it’ll be useful to have an empty space on
    the planet surface when you’re on your mission…
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`!=`运算符➊表示“不等于”，所以只有当房间编号*不等于*13时才会添加景观。谁知道呢？也许在你的任务中，行星表面有个空旷的空间会很有用…'
- en: In the second part of [Listing 6-2](ch06.xhtml#ch06list2), we add the fences.
    All the planet surface locations are 13 tiles high and 13 tiles wide, so we can
    use one loop ➍ to add the top and side fences. The loop’s variable, `room_coordinate`,
    counts from 0 to 12, and each time around the loop, fence panels are put in place
    at the top and the sides of the appropriate rooms.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-2](ch06.xhtml#ch06list2)的第二部分添加了围栏。所有的行星表面位置都是13个瓦片高，13个瓦片宽，所以我们可以使用一个循环➍来添加顶部和侧面的围栏。循环的变量`room_coordinate`从0数到12，每次循环时，围栏板会放置在相应房间的顶部和侧面。'
- en: Inside the `room_coordinate` loop, there are three loops for the `room_number`.
    The first `room_number` loop ➎ adds a fence along the top row of the top rooms.
    Instead of using a `range()`, this time we’re looping through a list. Each time
    through the list, the variable `room_number` takes the next number from the list
    `[1, 2, 3, 4, 5]`. We add a piece of scenery to the scenery list for the room,
    using `+=` ➏. This is scenery item 31 (a fence), in the top row of the room (at
    position *y* = 0). The `room_coordinate` value is used for the *x* position. This
    puts the top fence into rooms 1 to 5, in the top row of those rooms.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`room_coordinate`循环内，有三个`room_number`循环。第一个`room_number`循环➎在顶部房间的顶部行添加围栏。这里不是使用`range()`，而是通过一个列表进行循环。每次循环时，变量`room_number`从列表`[1,
    2, 3, 4, 5]`中取出下一个数字。我们通过`+=`将一个景观项添加到该房间的景观列表中➏。这是景观项31（一块围栏），位于房间的顶部行（位置*y*
    = 0）。`room_coordinate`的值用于*x*位置。这样就把顶部围栏添加到房间1到5的顶部行。
- en: There are two other `room_number` loops inside the `room_coordinate` loop. The
    first one adds the left fence to rooms `1`, `6`, `11`, `16`, and `21` ➐. This
    time, the program uses the `room_coordinate` variable for the *y* position and
    uses `0` for the *x* position ➑. This puts fence panels along the left edge of
    those rooms. The second loop adds the right edge fence to rooms `5`, `10`, `15`,
    `20`, and `25`. This also uses the `room_coordinate` for the *y* position of the
    fence panel but uses `12` for the *x* coordinate, putting a fence along the right
    edge of those rooms ➒.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`room_coordinate`循环内还有两个`room_number`循环。第一个循环给房间`1`、`6`、`11`、`16`和`21`添加左边的围栏➐。这次，程序使用`room_coordinate`变量作为*y*位置，使用`0`作为*x*位置➑。这样就把围栏板放置在这些房间的左边缘。第二个循环给房间`5`、`10`、`15`、`20`和`25`添加右边的围栏。这也使用`room_coordinate`作为围栏板的*y*位置，但使用`12`作为*x*坐标，将围栏放置在这些房间的右边缘➒。
- en: We don’t want side fence panels where the outside area joins the space station
    wall. [Figure 6-3](ch06.xhtml#ch06fig3) shows a map of room 21\. The bottom-left
    corner of the room should be wall, so there shouldn’t be a fence panel here. The
    loops we used just added a fence panel here, though, so we use an instruction
    ➓ to delete the last item of scenery added to this room, and to room 25, which
    is on the other side of the compound (see [Figure 6-2](ch06.xhtml#ch06fig2)).
    It’s easier to add these two panels and take them out again than it is to write
    code that avoids putting these fence panels in. The index number `-1` is a handy
    shortcut for referring to the last item in a list.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在外部区域与空间站墙壁相接的地方出现侧围栏面板。[图 6-3](ch06.xhtml#ch06fig3)显示了房间 21 的地图。房间的左下角应该是墙面，因此这里不应该有围栏面板。然而，之前的循环添加了一个围栏面板，所以我们使用指令
    ➓ 删除添加到该房间的最后一个景观项，并删除位于复合体另一侧的房间 25（见[图 6-2](ch06.xhtml#ch06fig2)）。与其编写代码避免在此处放置围栏面板，不如直接添加这两个面板再将它们删除。索引号
    `-1` 是指向列表中最后一项的便捷快捷方式。
- en: '![image](../images/fig6-3.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig6-3.jpg)'
- en: '*Figure 6-3: Map showing how the fence touches the wall in an outside room
    next to the space station*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：显示围栏如何接触到空间站旁边外部房间墙壁的地图*'
- en: Using random scenery and loops to position fences enables us to have a large
    area to explore without having to type in data for over 200 fence panels and scenery
    items.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机景观和循环来定位围栏，使我们能够探索一个大区域，而不必为 200 多个围栏面板和景观项目输入数据。
- en: '**TIP**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you’re customizing the game and don’t want to add random scenery or fences
    in rooms 1 to 25, you can delete the code sections shown in [Listing 6-2](ch06.xhtml#ch06list2).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在定制游戏时不想在房间 1 到 25 中添加随机景观或围栏，可以删除[清单 6-2](ch06.xhtml#ch06list2)中显示的代码部分。
- en: '**LOADING THE SCENERY INTO EACH ROOM**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将景观加载到每个房间**'
- en: Now that we’ve added scenery data to the program, let’s add some code so we
    can see the scenery in the space station! You might remember that the `generate_map()`
    function creates the `room_map` list for the room you’re currently exploring.
    The `room_map` list is used to display and navigate the room.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将景观数据添加到程序中，接下来让我们添加一些代码，以便在空间站中看到景观！你可能还记得，`generate_map()` 函数会为你当前探索的房间创建
    `room_map` 列表。`room_map` 列表用于显示和导航房间。
- en: So far, the `generate_map()` function just calculates the size of the room and
    where the doors are, and places the floor and walls. We need to add some code
    to extract the scenery from our new dictionary and add it to the `room_map`. But
    first, we’ll make one small but important adjustment to the program. In the `VARIABLES`
    section, near the start of the program, add the new line shown in [Listing 6-3](ch06.xhtml#ch06list3).
    Save your program as *listing6-3.py*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`generate_map()` 函数仅计算房间的大小、门的位置，并放置地板和墙壁。我们需要添加一些代码，从新字典中提取景观并将其添加到 `room_map`
    中。但首先，我们需要对程序进行一个小但重要的调整。在程序的 `VARIABLES` 部分，靠近程序开始的位置，添加[清单 6-3](ch06.xhtml#ch06list3)中显示的新行。将程序保存为
    *listing6-3.py*。
- en: '*listing6-3.py*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-3.py*'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 6-3: Setting up the* TILE_SIZE *variable*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-3：设置* TILE_SIZE *变量*'
- en: This line creates a variable to store the size of a tile. Using it makes the
    program easier to read because we can replace the number 30 with a more meaningful
    phrase. Instead of seeing the number 30 in the code and having to remember what
    it represents, we can see the words `TILE SIZE` instead, which gives us a hint
    about what the code is doing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行创建了一个变量来存储瓷砖的大小。使用它能让程序更易读，因为我们可以用一个更有意义的短语替代数字 30。我们不必再在代码中看到数字 30 并且记住它代表的意思，而是可以看到`TILE
    SIZE`，它能提示我们代码的作用。
- en: 'Next, find the `MAKE MAP` section of the program: it comes before the `EXPLORER`
    section. Add [Listing 6-4](ch06.xhtml#ch06list4) to the end of the `MAKE MAP`
    section to place the scenery in the current room. All the code in [Listing 6-4](ch06.xhtml#ch06list4)
    belongs to the `generate_map()` function, so we need to indent the first line
    by four spaces and then indent the remaining lines as shown. Save your program
    as *listing6-4.py*.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到程序中的 `MAKE MAP` 部分：它位于 `EXPLORER` 部分之前。在 `MAKE MAP` 部分末尾添加[清单 6-4](ch06.xhtml#ch06list4)，以便将景观放置到当前房间。所有[清单
    6-4](ch06.xhtml#ch06list4)中的代码都属于 `generate_map()` 函数，因此我们需要将第一行缩进四个空格，然后按示例缩进剩余的行。将程序保存为
    *listing6-4.py*。
- en: '*listing6-4.py*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-4.py*'
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 6-4: Additional code for* generate_map() *that adds the scenery for
    the current room to the* room_map *list*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-4：为* generate_map() *函数添加的额外代码，将当前房间的景观添加到* room_map *列表中*'
- en: Let’s break this down. The line at ➊ checks whether there’s an entry for the
    current room in the `scenery` dictionary. This check is essential because some
    rooms in our game might not have any scenery, and if we try to use a dictionary
    key that doesn’t exist, Python stops with an error.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来逐步分析一下。➊这一行检查当前房间在`scenery`字典中是否有条目。这个检查非常重要，因为我们游戏中的某些房间可能没有任何景物，如果我们尝试使用一个不存在的字典键，Python会抛出错误并停止执行。
- en: We then set up a loop ➋ that cycles through the scenery items for the room and
    copies them into a list called `this_scenery`. The first time through the loop,
    `this_scenery` contains the list for the first scenery item. The second time,
    it contains the list for the second item, and so on until it reaches the final
    scenery item for the current room.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置了一个循环➋，该循环遍历房间中的所有景物项，并将它们复制到一个名为`this_scenery`的列表中。第一次进入循环时，`this_scenery`包含第一个景物项的列表；第二次时，包含第二个景物项的列表，以此类推，直到遍历完当前房间的所有景物项。
- en: Each scenery item has a list containing its object number, *y* position, and
    *x* position. The program extracts these details from `this_scenery` using index
    numbers and puts them into variables called `scenery_number` ➌, `scenery_y` ➍,
    and `scenery_x` ➎.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每个景物项都有一个列表，包含它的对象编号、*y*位置和*x*位置。程序使用索引提取`this_scenery`中的这些信息，并将它们放入变量`scenery_number`
    ➌、`scenery_y` ➍和`scenery_x` ➎中。
- en: Now the program has all the information it needs to add the scenery item to
    `room_map`. You might remember that `room_map` stores the object number of the
    item in each position in the room. It uses the *y* position and *x* position in
    the room as list indexes. This program uses the `scenery_y` and `scenery_x` values
    as list indexes to put the item `scenery_number` into `room_map` ➏.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在程序已经拥有了所有需要的信息，可以将景物项添加到`room_map`中。你可能还记得，`room_map`在房间的每个位置存储着该物品的对象编号。它使用房间中的*y*位置和*x*位置作为列表索引。这个程序使用`scenery_y`和`scenery_x`的值作为列表索引，将`scenery_number`放入`room_map`中➏。
- en: If all our objects were one tile wide, that is all we would need to do. But
    some objects are wider and cover several tiles. For example, a wide object positioned
    in one tile might cover two more tiles to its right, but at the moment, the program
    only sees it in that one tile.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的所有物品都只有一个瓦片宽，那么我们只需要做这些就足够了。但有些物品更宽，占据多个瓦片。例如，一个宽的物品放置在一个瓦片内，可能会覆盖右边的两个瓦片，但目前程序只看到它占据的一个瓦片。
- en: We need to add something to `room_map` in those additional spaces so the program
    knows the player can’t walk on those tiles. I’ve used the number 255 to represent
    a space that doesn’t have an object in it but also cannot be walked on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`room_map`的额外空间中添加一些内容，以便程序知道玩家不能走到那些瓦片上。我使用数字255来表示一个没有物品的空白区域，但玩家也无法走动。
- en: 'Why the number 255? It’s a large enough number to give you space to add many
    more objects to the game if you want to, allowing for 254 items in the `objects`
    dictionary. Also, it feels like a nice number to me: it’s the highest number you
    can write with one byte of data (that mattered when I started writing games in
    the 1980s, and the computer only had about 65,000 bytes of memory to store all
    its data, graphics, and program code).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么选择数字255？这是一个足够大的数字，如果你愿意，可以为游戏添加更多的对象，它允许`objects`字典中有254个项目。此外，对我来说，这个数字也很有意义：它是你能用一个字节数据表示的最大数字（在我上世纪80年代开始编写游戏时，这个问题非常重要，那时计算机的内存大约只有65,000字节，用来存储所有数据、图形和程序代码）。
- en: First, we need to figure out how wide an image is so we know how many tiles
    it fills. We use `scenery_number` as the dictionary key to get information about
    the object from the `objects` dictionary ➐. We know the `objects` dictionary returns
    a list of information, the first item of which is the image. So we use the index
    0 to extract the image and put it into the variable `image_here`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确定图片的宽度，这样才能知道它占据了多少个瓦片。我们使用`scenery_number`作为字典键，从`objects`字典中获取关于该对象的信息➐。我们知道，`objects`字典返回的是一个信息列表，其中第一个项目是图像。所以我们使用索引0来提取图像，并将其放入变量`image_here`中。
- en: Then we can use Pygame Zero to find out the width of an image by adding `get_width()`
    after its name ➑. We put that number into a variable called `image_width`. Because
    we need to know how many tiles the image covers, the program divides the image
    width (in pixels) by the tile size, 30, and makes it an integer (a whole number)
    ➒. We must convert the number to an integer because we’re going to use it in the
    `range()` function ➓, which can only take integers. If we didn’t convert the number,
    the width would be a floating-point number—a number with a decimal point.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用Pygame Zero来找出图像的宽度，通过在其名称后添加`get_width()`➑。我们将这个数字放入一个名为`image_width`的变量中。因为我们需要知道图像覆盖了多少瓦片，程序将图像宽度（像素）除以瓦片大小30，并将其转换为整数（一个整数）➒。我们必须将这个数字转换为整数，因为我们将在`range()`函数中使用它➓，而该函数只接受整数。如果我们不转换这个数字，宽度将是一个浮动小数——一个带小数点的数字。
- en: Finally, we set up a loop that adds the value 255 in the spaces to the right
    of the scenery item, wherever the tile is covered ➓.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置一个循环，在景物项的右侧添加值255，无论瓦片是否被覆盖➓。
- en: If an image is 90 pixels wide, we divide it by the tile size of 30 and store
    the result, 3, in `image_width_in_tiles`. Then the loop counts to 2 using `range()`
    because we give it a range of 1 to `image_width_in_tiles` ➓. We add the loop numbers
    to the *x* position of the object, and those positions in `room_map` are marked
    with 255\. Large objects that cover three tiles now have 255 in the next two spaces
    to the right.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一张图片宽度为90像素，我们将其除以30的瓦片大小，并将结果3存储在`image_width_in_tiles`中。然后，循环使用`range()`计算到2，因为我们为它提供了1到`image_width_in_tiles`的范围➓。我们将循环中的数字加到物体的*
    x *位置，并且`room_map`中的这些位置会标记为255。现在，覆盖三个瓦片的大型物体将在右边的下两个空间标记为255。
- en: Now our program contains all the scenery and can add it to the `room_map`, ready
    for display. Next, we’ll make some small changes to the `EXPLORER` section so
    we can tour the space station.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的程序包含了所有景物，并可以将其添加到`room_map`中，准备显示。接下来，我们将对`EXPLORER`部分做一些小修改，以便可以巡游空间站。
- en: '**UPDATING THE EXPLORER TO TOUR THE SPACE STATION**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更新探险者以巡游空间站**'
- en: The `EXPLORER` part of the program lets you view all the rooms on the space
    station and move around the map using the arrow keys. Let’s update that section
    so you can see all the scenery in place.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中的`EXPLORER`部分让你可以查看空间站中的所有房间，并使用箭头键在地图上移动。让我们更新这一部分，这样你就可以看到所有的景物了。
- en: 'If your *Explorer* code includes any lines for adding scenery to the `room_map`,
    you’ll need to switch them off now. Although they’re a good way to experiment
    with a room design, they force the same scenery into every room and override the
    real room designs. Because these lines might include your ideas for room designs,
    rather than deleting them, you can comment them out so Python will ignore them.
    Click and drag the mouse to highlight all the lines at once, and then click **Format**
    ▸ **Comment Out Region** (or use the keyboard shortcut ALT-3). Comment symbols
    will be added at the start of the highlighted lines, as shown in [Listing 6-5](ch06.xhtml#ch06list5):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的*Explorer*代码中包含任何用于将景物添加到`room_map`的行，你现在需要将它们关闭。尽管这些行是实验房间设计的好方法，但它们会将相同的景物强行放入每个房间并覆盖真正的房间设计。由于这些行可能包含你对房间设计的构思，所以不妨将它们注释掉，这样Python就会忽略它们。点击并拖动鼠标，选中所有行，然后点击**格式**
    ▸ **注释区域**（或使用快捷键ALT-3）。注释符号将被添加到选中行的开头，如[清单 6-5](ch06.xhtml#ch06list5)所示：
- en: '*listing6-5.py*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-5.py*'
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 6-5: Commenting out code in the* EXPLORER *section*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-5：注释掉EXPLORER部分的代码*'
- en: Now we need to make a small change to the code that displays the room so it
    doesn’t try to draw an image for a floor space marked with 255\. That space will
    be covered by an image to the left of it, and we don’t have an entry in the `objects`
    dictionary for 255.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要对显示房间的代码做一个小修改，使其不再尝试为标记为255的地板空间绘制图像。这个空间将由其左侧的图像覆盖，并且我们没有为255在`objects`字典中创建条目。
- en: '[Listing 6-6](ch06.xhtml#ch06list6) shows the new line you need to add to the
    `EXPLORER` part of the program where indicated. The `if` statement makes sure
    the instructions that draw an object run only if the object number is not (`!=`)
    255.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-6](ch06.xhtml#ch06list6)显示了你需要在程序的`EXPLORER`部分添加的新行，如图所示。`if`语句确保只有当物体编号不等于
    (`!=`) 255 时，绘制物体的指令才会执行。'
- en: After adding the line, indent the existing code that comes after it by four
    spaces. The indentation tells Python that those instructions belong to the `if`
    instruction. You can either type four spaces at the start of the next two lines,
    or you can highlight them and click **Format** ▸ **Indent Region**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 添加该行后，将其后的现有代码缩进四个空格。缩进告诉 Python 这些指令属于 `if` 指令。你可以在接下来的两行开头键入四个空格，或者你可以选中这些行，然后点击
    **格式** ▸ **缩进区域**。
- en: '*listing6-6.py*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing6-6.py*'
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 6-6: Updating the* Explorer *so it doesn’t try to show image 255*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-6: 更新 Explorer，使其不再尝试显示图像 255*'
- en: Now you’re ready to take a tour of the base. Save the program as *listing6-6.py*
    and run it by entering pgzrun listing6-6.py. Use the arrow keys to move around
    the map and familiarize yourself with the layout of the space station. As before,
    the *Explorer* program allows you to move any direction around the map, even if
    a wall would block your path when playing the game.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好参观基地了。将程序保存为 *listing6-6.py*，并通过输入 `pgzrun listing6-6.py` 来运行它。使用方向键在地图上移动，熟悉空间站的布局。和之前一样，*Explorer*
    程序允许你在地图上朝任意方向移动，即使在游戏中遇到墙壁也不受影响。
- en: All the scenery should be in place in the rooms. Wide objects should display
    correctly now, and you should be able to view all the rooms again because of the
    changes you made earlier in [Listing 6-5](ch06.xhtml#ch06list5). Some objects
    will still have a black square under them because there’s no floor tile underneath,
    but we’ll fix that in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所有景物应该已经布置好在房间里。宽物体现在应该正确显示，你也应该能够再次查看所有房间，因为你之前在 [Listing 6-5](ch06.xhtml#ch06list5)
    中所做的更改。某些物体下方仍然会有黑色方块，因为下面没有地板瓷砖，但我们将在 [第8章](ch08.xhtml#ch08) 中解决这个问题。
- en: The space station map and scenery are now complete. It’s time to move into the
    space station. In the next chapter, you’ll teleport down to the surface and set
    foot on Mars at last.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 空间站的地图和景物现在已经完成。是时候进入空间站了。在下一章中，你将传送到表面，最终踏上火星。
- en: '**TRAINING MISSION #1**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Can you add your own room design to the scenery data? Room number 43 has been
    left empty for you to fill. It is 9 × 9 tiles in size, so you can place objects
    in positions 1 to 7 in each direction (remember the wall!). You could base your
    design on a room you created previously in the *Explorer* in [Chapter 5](ch05.xhtml#ch05)
    or invent a new layout. Remember that you need to turn off the `assert` instructions
    to stop the checksum complaining when the `scenery` numbers don’t add up.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你能将自己的房间设计添加到景物数据中吗？房间编号 43 已经为空，供你填写。它的大小是 9 × 9 瓷砖，所以你可以将物体放置在每个方向的 1 到 7
    的位置（记住墙壁！）。你可以以你在 [第5章](ch05.xhtml#ch05) 中的 *Explorer* 创建的房间为基础，或者发明一个新的布局。记住，你需要关闭
    `assert` 指令，以防当 `scenery` 数字不匹配时，校验和报告错误。
- en: Your program’s `objects` dictionary (shown in [Chapter 5](ch05.xhtml#ch05))
    tells you the number of each object. Use object numbers between 1 and 47 to ensure
    that you don’t create any problems now that might affect the code when you complete
    and play the *Escape* game later.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序的 `objects` 字典（见 [第5章](ch05.xhtml#ch05)）会告诉你每个物体的数量。使用 1 到 47 之间的物体编号，确保在完成并开始玩
    *Escape* 游戏时，不会出现影响代码的任何问题。
- en: If you get stuck, try building my example, which is shown in the [Mission Debrief](ch06.xhtml#ch06sb2)
    on [page 110](ch06.xhtml#page_110). Change the value of `current_room` in the
    `VARIABLES` section to 43 so you can see your redesigned room when you first run
    the program. Remember to change `current_room` back to 31 when you’ve finished.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到困难，可以尝试构建我的示例，该示例显示在 [任务回顾](ch06.xhtml#ch06sb2) 中，位于 [第110页](ch06.xhtml#page_110)。将
    `VARIABLES` 部分中的 `current_room` 的值更改为 43，这样你第一次运行程序时就能看到重新设计的房间。记得在完成后将 `current_room`
    改回 31。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你适合飞行吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框以确认你已经学习了本章的关键内容。
- en: '![Images](../images/box.jpg)  Items that cannot move during the *Escape* game
    are called *scenery*.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  在 *Escape* 游戏中无法移动的物品被称为 *景物*。'
- en: '![Images](../images/box.jpg)  The `scenery` dictionary uses the room number
    as its key and provides a list of the fixed items in each room.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `scenery` 字典使用房间编号作为键，并提供每个房间中固定物品的列表。'
- en: '![Images](../images/box.jpg)  Each scenery item is stored as a list containing
    the object number, *y* position, and *x* position.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  每个景物项目都存储为一个包含物体编号、*y* 位置和 *x* 位置的列表。'
- en: '![Images](../images/box.jpg)  Checksums check whether the data has been changed
    or entered incorrectly.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  校验和用于检查数据是否已被更改或输入错误。'
- en: '![Images](../images/box.jpg)  Loops can be used to add items to the `scenery`
    dictionary. Some scenery can be positioned randomly, too.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  可以使用循环将物品添加到`scenery`字典中。有些景物也可以随机放置。'
- en: '![Images](../images/box.jpg)  The `generate_map()` function takes items that
    are in the current room from the `scenery` dictionary and puts them in the `room_map`
    list. Then the items can be displayed in the room.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  `generate_map()`函数从当前房间的`scenery`字典中获取物品，并将它们放入`room_map`列表中。然后，这些物品就可以在房间中显示出来。'
- en: '![Images](../images/box.jpg)  The number 255 in `room_map` represents a space
    that is covered by a wide object, when the object doesn’t start in that space.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  在`room_map`中的数字255表示一个被大物体覆盖的空间，前提是物体不从该空间开始。'
- en: '![image](../images/f0110-01.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0110-01.jpg)'
