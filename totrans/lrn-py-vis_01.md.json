["```py\nsize(500, 500)print('Hello, World!')\n```", "```py\n1 # dimensions of the display window measured in pixelssize(500, 500)print('Hello, World!') # writes hello world to the console area2 '''This is a multiline comment.Any code between the opening and closing triple-quotes is ignored.'''print('How are you?')\n```", "```py\n# dimensions of the display window measured in pixels size(500, 500)print('Hello, World!')  # writes hello world to the console area. . .\n```", "```py\n# dimensions of the display window measured in pixelssize(500, 500print('Hello, World!')  # writes hello world to the console area. . .\n```", "```py\n. . .fill('#FF0000')\n```", "```py\nrect(`x_coordinate`, `y_coordinate`, `width`, `height`)\n```", "```py\n. . .fill('#FF0000')rect(100, 150, 200, 300)\n```", "```py\n. . .# small red rectanglerect(10, 15, 20, 30)# orange squarefill('#FF9900')1 rect(50, 100, 150, 150)# fill-less squarenoFill()2 square(250, 100, 150)\n```", "```py\n. . .stroke('#FFFFFF')strokeWeight(3)fill('#FF0000'). . .\n```", "```py\n. . .square(250, 100, 150)background('#004477')\n```", "```py\n# dimension of the display window in units of pixelssize(500, 500)background('#004477'). . .\n```", "```py\nfill('#FF0000')\n```", "```py\nfill(255, 0, 0)\n```", "```py\ncolorMode(HSB, 360, 100, 100)\n```", "```py\nfill(0, 100, 100)\n```", "```py\nsize(600, 300)background('#004477')noFill()stroke('#FFFFFF')strokeWeight(3)\n```", "```py\npoint(100, 25)point(200, 25)point(150, 75)\n```", "```py\ntriangle(100,25, 200,25, 150,75)\n```", "```py\nellipse(100,100, 100, 50)\n```", "```py\ncircle(100,100, 50)\n```", "```py\nquad(260,180, 360,200, 380,250, 260,280)\n```", "```py\nline(450,80, 520,220)\n```", "```py\nsize(600, 300)background('#004477')noStroke()\n```", "```py\nsize(600, 400)background('#004477')noStroke()print(width)print(height)\n```", "```py\n. . .\nx = 10print(x) # displays 10 in the console\n```", "```py\nplayerlives = 3 # correct\nplayerLives = 3 # correct\nplayer_lives = 3 # correct\nplayer lives = 3 # incorrect (contains a space)\nplayer-lives = 3 # incorrect (contains a hyphen)\nplayer2lives = 3 # correct\n2playerlives = 3 # incorrect (begins with a number)\n```", "```py\n. . .\ny = 30\nw = 100\nh = wrect(x, y, w, h)\n```", "```py\n. . .print(x + 2)\n```", "```py\n. . .print(x + 2) # displays 12print**(x - 2)** # displays 8\n```", "```py\n. . .print(x * 2) # displays 20\n```", "```py\n. . .print(1 + 2 * 3) # displays ???\n```", "```py\nprint (1 + 2 * 3) # displays 7print((1 + 2) * 3) # displays 9\n```", "```py\nprint(4 / 2) # displays 2\n```", "```py\nprint(3 / 2) # displays 1\n```", "```py\nprint(3 / 2.0) # displays 1.5\n```", "```py\nprint(5.0 / 2) # displays 2.5print(5.0 % 2) # displays 1.0\n```", "```py\nprint(7 % 2) # displays 1, therefore 7 is oddprint(6 % 2) # displays 0, therefore 6 is even\n```", "```py\nsize(600, 600)background('#004477')stroke('#FFFFFF')strokeWeight(3)noFill()\n```", "```py\narc( `x_coordinate`, `y_coordinate`, `width`, `height`, `start_angle`, `end_angle`\n)\n```", "```py\n. . .arc( width/2, height/2,  200, 200,  0, 2\n)\n```", "```py\n. . .arc(width/2, height/2, 300, 300, 0, PI) # half-circlearc(width/2, height/2, 400, 400, 0, PI*2) # full-circle\n```", "```py\n. . .arc(width/2, height/2, 350, 350, 3.4, (PI*2)-(PI/2), PIE)\n```"]