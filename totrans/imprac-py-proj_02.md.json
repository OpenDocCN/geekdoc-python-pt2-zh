["```py\n➊ try:\n    ➋ with open(file) as in_file:\n           do something\n   except IOError➌ as e:\n    ➍ print(\"{}\\nError opening {}. Terminating program.\".format(e, file),\n              file=sys.stderr)   \n    ➎ sys.exit(1)\n```", "```py\n   \"\"\"Load a text file as a list.\n\n   Arguments:\n   -text file name (and directory path, if needed)\n\n   Exceptions:\n   -IOError if filename not found.\n\n   Returns:\n   -A list of all words in a text file in lower case.\n\n   Requires-import sys\n\n   \"\"\"\n➊ import sys\n\n➋ def load(file):\n       \"\"\"Open a text file & return a list of lowercase strings.\"\"\"\n       try:\n           with open(file) as in_file:\n            ➌ loaded_txt = in_file.read().strip().split('\\n')\n            ➍ loaded_txt = [x.lower() for x in loaded_txt]\n               return loaded_txt\n       except IOError as e:\n        ➎ print(\"{}\\nError opening {}. Terminating program.\".format(e, file),\n               file=sys.stderr)\n           sys.exit(1)\n```", "```py\n>>> word = 'NURSES'\n>>> word[:]\n'NURSES'\n>>> word[::-1]\n'SESRUN'\n```", "```py\nLoad digital dictionary file as a list of words\nCreate an empty list to hold palindromes\nLoop through each word in the word list:\n    If word sliced forward is the same as word sliced backward:\n        Append word to palindrome list\nPrint palindrome list\n```", "```py\n   \"\"\"Find palindromes (letter palingrams) in a dictionary file.\"\"\"\n➊ import load_dictionary\n➋ word_list = load_dictionary.load('2of4brif.txt')\n➌ pali_list = []\n\n➍ for word in word_list:\n       if len(word) > 1 and word == word[::-1]:\n           pali_list.append(word)\n\n   print(\"\\nNumber of palindromes found = {}\\n\".format(len(pali_list)))\n➎ print(*pali_list, sep='\\n')\n```", "```py\nLoad digital dictionary as a list of words\nStart an empty list to hold palingrams\nFor word in word list:\n    Get length of word\n    If length > 1:\n        Loop through the letters in the word:\n            If reversed word fragment at front of word is in word list and letters\n            after form a palindromic sequence:\n               Append word and reversed word to palingram list\n            If reversed word fragment at end of word is in word list and letters\n            before form a palindromic sequence:\n               Append reversed word and word to palingram list\nSort palingram list alphabetically\nPrint word-pair palingrams from palingram list\n```", "```py\n   \"\"\"Find all word-pair palingrams in a dictionary file.\"\"\"\n\n   import load_dictionary\n\n   word_list = load_dictionary.load('2of4brif.txt')\n\n   # find word-pair palingrams\n\n➊ def find_palingrams():\n\n       \"\"\"Find dictionary palingrams.\"\"\"\n\n       pali_list = []\n\n       for word in word_list:\n\n        ➋ end = len(word)\n\n        ➌ rev_word = word[::-1]\n\n        ➍ if end > 1:\n\n            ➎ for i in range(end):\n\n                ➏ if word[i:] == rev_word[:end-i] and rev_word[end-i:] in word_list:\n\n                       pali_list.append((word, rev_word[end-i:]))\n\n                ➐ if word[:i] == rev_word[end-i:] and rev_word[:end-i] in word_list:\n\n                       pali_list.append((rev_word[:end-i], word))\n\n    ➑ return pali_list\n\n➒ palingrams = find_palingrams()\n\n   # sort palingrams on first word\n\n   palingrams_sorted = sorted(palingrams)\n\n   # display list of palingrams\n\n➓ print(\"\\nNumber of palingrams = {}\\n\".format(len(palingrams_sorted)))\n\n   for first, second in palingrams_sorted:\n\n       print(\"{} {}\".format(first, second))\n```", "```py\nimport cProfile\nimport palingrams\ncProfile.run('palingrams.find_palingrams()')\n```", "```py\n         62622 function calls in 199.452 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000  199.451  199.451 <string>:1(<module>)\n        1  199.433  199.433  199.451  199.451 palingrams.py:7(find_palingrams)\n        1    0.000    0.000  199.452  199.452 {built-in method builtins.exec}\n    60388    0.018    0.000    0.018    0.000 {built-in method builtins.len}\n     2230    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}\n```", "```py\nimport time\nstart_time = time.time()\n```", "```py\nend_time = time.time()\nprint(\"Runtime for this program was {} seconds.\".format(end_time - start_time))\n```", "```py\nRuntime for this program was 222.73954558372498 seconds.\n```", "```py\nstart_time = time.time()\npalingrams = find_palingrams()\nend_time = time.time()\n```", "```py\nRuntime for this program was 199.42786622047424 seconds.\n```", "```py\ndef find_palingrams():\n\n    \"\"\"Find dictionary palingrams.\"\"\"\n\n    pali_list = []\n\n ➊ words = set(word_list)\n\n ➋ for word in words:\n\n        end = len(word)\n\n        rev_word = word[::-1]\n\n        if end > 1:\n\n            for i in range(end):\n\n             ➌ if word[i:] == rev_word[:end-i] and rev_word[end-i:] in words:\n\n                    pali_list.append((word, rev_word[end-i:]))\n\n             ➍ if word[:i] == rev_word[end-i:] and rev_word[:end-i] in words:\n\n                    pali_list.append((rev_word[:end-i], word))\n\n    return pali_list\n```", "```py\nRuntime for this program was 0.4858267307281494 seconds.\n```"]