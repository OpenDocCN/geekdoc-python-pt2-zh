["```py\ndef remove_last_item(mylist):\n    \"\"\"Removes the last item from a list.\"\"\"\n    mylist.pop(-1)  # This modifies mylist\n```", "```py\ndef butlast(mylist):\n\n    return mylist[:-1]  # This returns a copy of mylist\n```", "```py\n>> def mygenerator():\n...     yield 1\n...     yield 2\n...     yield 'a'\n...\n>>> mygenerator()\n<generator object mygenerator at 0x10d77fa50>\n>>> g = mygenerator()\n>>> next(g)\n1\n>>> next(g)\n2\n>>> next(g)\n'a' >>> next(g)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nStopIteration\n```", "```py\n$ ulimit -v 131072\n$ python3\n>>> a = list(range(10000000))\n```", "```py\nTraceback (most recent call last): File \"<stdin>\", line 1, in <module>\nMemoryError\n```", "```py\n$ ulimit -v 131072\n$ python3\n>>> for value in range(10000000):\n...     if value == 50000:\n...             print(\"Found it\")\n...             break\n...\nFound it\n```", "```py\ndef shorten(string_list):\n    length = len(string_list[0])\n    for s in string_list:\n        length = yield s[:length]\n\nmystringlist = ['loremipsum', 'dolorsit', 'ametfoobar']\nshortstringlist = shorten(mystringlist)\nresult = []\ntry:\n    s = next(shortstringlist)\n    result.append(s)\n    while True:\n        number_of_vowels = len(filter(lambda letter: letter in 'aeiou', s))\n        # Truncate the next string depending\n        # on the number of vowels in the previous one\n        s = shortstringlist.send(number_of_vowels)\n        result.append(s)\nexcept StopIteration:\n    pass\n```", "```py\n['loremipsum', 'dolo', 'am']\n```", "```py\n>>> (x.upper() for x in ['hello', 'world'])\n<generator object <genexpr> at 0x7ffab3832fa0>\n>>> gen = (x.upper() for x in ['hello', 'world'])\n>>> list(gen)\n['HELLO', 'WORLD']\n```", "```py\n>>> import inspect\n>>> def mygenerator():\n...     yield 1\n...\n>>> inspect.isgeneratorfunction(mygenerator)\nTrue\n>>> inspect.isgeneratorfunction(sum)\nFalse\n```", "```py\ndef isgeneratorfunction(object):\n    \"\"\"Return true if the object is a user-defined generator function.\n\n    Generator function objects provides same attributes as functions.\n\n    See help(isfunction) for attributes listing.\"\"\"\n\n  return bool((isfunction(object) or ismethod(object)) and\n                object.func_code.co_flags & CO_GENERATOR)\n```", "```py\n   >>> import inspect\n   >>> def mygenerator():\n   ...     yield 1\n   ...\n   >>> gen = mygenerator()\n   >>> gen\n   <generator object mygenerator at 0x7f94b44fec30>\n   >>> inspect.getgeneratorstate(gen)\n➊ 'GEN_CREATED'\n   >>> next(gen)\n   1\n   >>> inspect.getgeneratorstate(gen)\n➋ 'GEN_SUSPENDED'\n   >>> next(gen)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   StopIteration\n   >>> inspect.getgeneratorstate(gen)\n➌ 'GEN_CLOSED'\n```", "```py\n>>> x = []\n>>> for i in (1, 2, 3):\n...     x.append(i)\n...\n>>> x\n[1, 2, 3]\n```", "```py\n>>> x = [i for i in (1, 2, 3)]\n>>> x\n[1, 2, 3]\n```", "```py\nx = [word.capitalize()\n     for line in (\"hello world?\", \"world!\", \"or not\")\n     for word in line.split()\n     if not word.startswith(\"or\")]\n>>> x\n['Hello', 'World?', 'World!', 'Not']\n```", "```py\n>>> {x:x.upper() for x in ['hello', 'world']}\n{'world': 'WORLD', 'hello': 'HELLO'}\n>>> {x.upper() for x in ['hello', 'world']}\nset(['WORLD', 'HELLO'])\n```", "```py\n>>> map(lambda x: x + \"bzz!\", [\"I think\", \"I'm good\"])\n<map object at 0x7fe7101abdd0>\n>>> list(map(lambda x: x + \"bzz!\", [\"I think\", \"I'm good\"]))\n['I thinkbzz!', \"I'm goodbzz!\"]\n```", "```py\n>>> (x + \"bzz!\" for x in [\"I think\", \"I'm good\"])\n<generator object <genexpr> at 0x7f9a0d697dc0>\n>>> [x + \"bzz!\" for x in [\"I think\", \"I'm good\"]]\n['I thinkbzz!', \"I'm goodbzz!\"]\n```", "```py\n>>> filter(lambda x: x.startswith(\"I \"), [\"I think\", \"I'm good\"])\n<filter object at 0x7f9a0d636dd0>\n>>> list(filter(lambda x: x.startswith(\"I \"), [\"I think\", \"I'm good\"]))\n['I think']\n```", "```py\n>>> (x for x in [\"I think\", \"I'm good\"] if x.startswith(\"I \"))\n<generator object <genexpr> at 0x7f9a0d697dc0>\n>>> [x for x in [\"I think\", \"I'm good\"] if x.startswith(\"I \")]\n['I think']\n```", "```py\ni = 0\nwhile i < len(mylist): print(\"Item %d: %s\" % (i, mylist[i]))\n    i += 1\n```", "```py\nfor i, item in enumerate(mylist):\n    print(\"Item %d: %s\" % (i, item))\n```", "```py\n>>> sorted([(\"a\", 2), (\"c\", 1), (\"d\", 4)])\n[('a', 2), ('c', 1), ('d', 4)]\n>>> sorted([(\"a\", 2), (\"c\", 1), (\"d\", 4)], key=lambda x: x[1])\n[('c', 1), ('a', 2), ('d', 4)]\n```", "```py\ndef all(iterable):\n    for x in iterable:\n        if not x:\n            return False\n    return True\n\ndef any(iterable):\n    for x in iterable:\n        if x:\n            return True\n    return False\n```", "```py\nmylist = [0, 1, 3, -1]\nif all(map(lambda x: x > 0, mylist)):\n    print(\"All items are greater than 0\")\nif any(map(lambda x: x > 0, mylist)):\n    print(\"At least one item is greater than 0\")\n```", "```py\n>>> keys = [\"foobar\", \"barzz\", \"ba!\"]\n>>> map(len, keys)\n<map object at 0x7fc1686100d0>\n>>> zip(keys, map(len, keys))\n<zip object at 0x7fc16860d440>\n>>> list(zip(keys, map(len, keys)))\n[('foobar', 6), ('barzz', 5), ('ba!', 3)]\n>>> dict(zip(keys, map(len, keys)))\n{'foobar': 6, 'barzz': 5, 'ba!': 3}\n```", "```py\ndef first_positive_number(numbers):\n    for n in numbers:\n        if n > 0:\n            return n\n```", "```py\ndef first(predicate, items):\n    for item in items:\n        if predicate(item):\n            return item\n\nfirst(lambda x: x > 0, [-1, 0, 1, 2])\n```", "```py\n# Less efficient\nlist(filter(lambda x: x > 0, [-1, 0, 1, 2]))[0]\n# Efficient\nnext(filter(lambda x: x > 0, [-1, 0, 1, 2]))\n```", "```py\n>>> a = range(10)\n>>> next(x for x in a if x > 3)\n4\n```", "```py\n>>> a = range(10)\n>>> next((x for x in a if x > 10), 'default')\n'default'\n```", "```py\n>>> from first import first\n>>> first([0, False, None, [], (), 42])\n42\n>>> first([-1, 0, 1, 2])\n-1\n>>> first([-1, 0, 1, 2], key=lambda x: x > 0)\n1\n```", "```py\nimport operator\nfrom first import first\n\ndef greater_than_zero(number):\n    return number > 0\n\nfirst([-1, 0, 1, 2], key=greater_than_zero)\n```", "```py\n   from functools import partial\n   from first import first\n\n➊ def greater_than(number, min=0):\n       return number > min\n\n➋ first([-1, 0, 1, 2], key=partial(greater_than, min=42))\n```", "```py\nimport operator\nfrom functools import partial\nfrom first import first\n\nfirst([-1, 0, 1, 2], key=partial(operator.le, 0))\n```", "```py\n>>> import itertools\n>>> a = [{'foo': 'bar'}, {'foo': 'bar', 'x': 42}, {'foo': 'baz', 'y': 43}]\n>>> import operator\n>>> list(itertools.groupby(a, operator.itemgetter('foo')))\n[('bar', <itertools._grouper object at 0xb000d0>), ('baz', <itertools._grouper object at\n0xb00110>)]\n>>> [(key, list(group)) for key, group in itertools.groupby(a, operator.itemgetter('foo'))]\n[('bar', [{'foo': 'bar'}, {'x': 42, 'foo': 'bar'}]), ('baz', [{'y': 43, 'foo': 'baz'}])]\n```"]