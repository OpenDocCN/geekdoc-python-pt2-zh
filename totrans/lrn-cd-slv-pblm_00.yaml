- en: INTRODUCTION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We use computers to accomplish tasks and to solve problems. For example, perhaps
    you’ve used a word processor to write an essay or letter. Perhaps you’ve used
    a spreadsheet program to organize your finances. Perhaps you’ve used an image
    editor to touch up a picture. It’s hard to imagine doing these things these days
    without a computer. We get a lot of mileage out of our word processors and spreadsheet
    programs and image editors.
  prefs: []
  type: TYPE_NORMAL
- en: Those programs are written as general-purpose tools to accomplish a wide variety
    of tasks. Ultimately, though, they’re programs written by others, not by us. What
    do we do when an off-the-shelf program doesn’t quite do what we need?
  prefs: []
  type: TYPE_NORMAL
- en: In this book, our goal is to learn how to take control of our computer by going
    beyond what can be done by an end user using preexisting programs. We’re going
    to write our own programs. We won’t write a word processor or a spreadsheet or
    an image editor. Those are huge tasks that, fortunately, people have already done.
    Rather, we’re going to learn how to write small programs to solve problems that
    we otherwise wouldn’t be able to solve. I want to help you learn to communicate
    instructions to a computer; these instructions will tell the computer how to carry
    out your plan for solving a problem.
  prefs: []
  type: TYPE_NORMAL
- en: To give instructions to a computer, we write code in a *programming language*.
    A programming language specifies the rules for the code we write and dictates
    what the computer does in response to that code.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to learn to program in the Python programming language. That’s a
    concrete skill that you’ll take away from this book, one that you can put on your
    résumé. More than Python, though, you’ll learn the type of thinking required to
    solve problems using a computer. Programming languages come and go. The way that
    we solve problems does not. I hope that this book helps you on your way from end
    user to programmer and that you have fun exploring what’s possible.
  prefs: []
  type: TYPE_NORMAL
- en: Online Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Supplementary resources for the book, including downloadable code and additional
    exercises, are available at *[https://nostarch.com/learn-code-solving-problems/](https://nostarch.com/learn-code-solving-problems/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is for anyone who wants to learn how to write computer programs to
    solve problems. I have three particular types of people in mind.
  prefs: []
  type: TYPE_NORMAL
- en: First, you may have heard about the Python programming language and want to
    learn how to write code in Python. I’ll explain in the next section why Python
    is a great choice as a first programming language to learn. You’ll learn a lot
    about Python in this book, and you’ll be in a position to read more advanced books
    on Python if that’s your next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, if you haven’t heard of Python or just want to learn what programming
    is all about, don’t worry: this book is for you, too! This book will teach you
    how to think about programming. Programmers have particular ways of breaking down
    problems into manageable pieces and expressing solutions to those pieces in code.
    At this level, it doesn’t matter what programming language is being used, because
    the way that programmers think is not tied to a particular language.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you may be interested in learning some other programming language such
    as C++, Java, Go, or Rust. Much of what you learn as a byproduct of learning Python
    will be useful when you study those other programming languages. Plus, Python
    is certainly worth learning in its own right. Let’s turn to why next.
  prefs: []
  type: TYPE_NORMAL
- en: Why Learn Python?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Years of teaching introductory programming have demonstrated to me that Python
    is a great choice for a first programming language. Compared to other languages,
    Python code is often more structured and readable. Once you get used to it, you
    might agree that parts of it almost read like English! Python also comes with
    many features that are not available in other languages, including powerful tools
    to manipulate and store data. We’ll use many of these features throughout the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Not only is Python an excellent teaching language, but it’s also one of the
    most in-demand programming languages in the world. Programmers use it to write
    web applications, games, visualizations, machine learning software, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'There we have it: a language well-suited for teaching that also carries a professional
    advantage for you. I can’t ask for any more than that!'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can program in Python, we need to install it. Let’s do that now.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two major versions of Python: Python 2 and Python 3\. Python 2 is
    an older version of Python and is no longer supported. In this book, we use Python
    3, so you’ll need to install Python 3 on your computer.'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3 was a major evolution from Python 2, but Python continues to change
    even within version 3\. The first version of Python 3 was Python 3.0\. Then Python
    3.1 was released, then Python 3.2, and so on. At the time of writing, the latest
    version of Python 3 is Python 3.9\. Versions as old as Python 3.6 will suffice
    for this book, but I encourage you to install and work with the latest version
    of Python.
  prefs: []
  type: TYPE_NORMAL
- en: Follow these steps for your operating system to install Python.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Windows doesn’t come with Python by default. To install it, go to *[https://www.python.org/](https://www.python.org/)*
    and click **Downloads**. This should offer you the option of downloading the latest
    version of Python for Windows. Click the link to download Python and then run
    the installer. On one of the first screens in the installation process, click
    either **Add Python 3.9 to PATH** or **Add Python to environment variables**;
    this makes running Python much easier. (If upgrading Python, you may need to click
    “Customize installation” to find this option.)
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: macOS doesn’t come with Python 3 by default. To install it, go to *[https://www.python.org/](https://www.python.org/)*
    and click **Downloads**. This should offer you the option of downloading the latest
    version of Python for macOS. Click the link to download Python and then run the
    installer.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Linux comes with Python 3, but it may be an older version of Python 3\. Installation
    instructions will vary depending on which Linux distribution you’re using, but
    you should be able to install the newest version of Python using your favorite
    package manager.
  prefs: []
  type: TYPE_NORMAL
- en: How to Read This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reading this book from cover to cover in one sitting is likely to teach you
    very little. It would be like trying to learn piano by inviting someone into your
    house to play piano for a few hours and then kicking them out, lowering the lights,
    and serenading. That’s not how a practice-based skill is learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is my advice for making your way through the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Space out your work.** Massing your practice into a small number of sessions
    is far less effective than spacing your practice out. When you feel tired, take
    a break. No one can tell you how much time to work before taking a break. No one
    can tell you how long it should take you to finish the book. It’s up to your own
    mind and body.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pause to test your understanding.** Reading about something can give us the
    illusion that we understand it better than we do. Applying the material forces
    what we know and what we think we know into alignment. For that reason, at key
    points in each chapter, I’ve included multiple-choice “concept check” questions
    that ask you to make a prediction. Take these seriously! Read each question and
    commit to a response without checking anything using your computer. Then, read
    my answer and explanation. This is an opportunity to confirm that you’re on the
    right track. If you answer incorrectly or answer correctly but for the wrong reason,
    take time to remedy your understanding before continuing. This could involve playing
    around a little more with the relevant Python feature being discussed, rereading
    material from the book, or searching for additional explanations and examples
    online.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Practice programming.** Making predictions while you read will help solidify
    your understanding of key concepts. But you need more than that to become an adept
    problem-solver and programmer. You need to practice using Python to solve new
    problems, whose solutions you haven’t read about in the book. Each chapter concludes
    with a list of practice exercises. Please work through as many of these exercises
    as you can.'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to program takes time. Don’t be discouraged if you progress slowly
    or make a lot of mistakes. Don’t be intimidated by any blustering peacocks that
    you might encounter online. Surround yourself with people and resources that can
    help you learn.
  prefs: []
  type: TYPE_NORMAL
- en: Using Programming Judges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’ve decided to structure this book around problems from *programming judge*
    websites. A programming judge website offers a repository of programming problems
    that can be solved by programmers around the world. You submit your solution—your
    Python code—and the site runs tests on your code. If your code produces the correct
    answer for each test case, then it’s likely that your solution is correct. If
    instead your code produces the wrong answer for one or more test cases, then your
    code is incorrect, and revisions are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several reasons why I think programming judges are particularly suitable
    sites for learning programming:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rapid feedback** Rapid, targeted feedback is crucial in the early stages
    of learning to program. Programming judges provide feedback as soon as you submit
    your code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**High-quality problems** I find the problems on programming judges to be high
    quality. Many problems are originally from competitive programming contests. Other
    problems are written by individuals who are associated with a programming judge
    or simply want to help others learn. See the Problem Credits appendix for the
    source of each problem that we’ll study.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quantity of problems** The programming judges contain hundreds of problems.
    I’ve selected only a small number for this book. If you need more practice, trust
    me: the programming judges can provide it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Community features** The programming judges enable users to read and respond
    to comments. If you’re stuck on a problem, browse the comments for hints dropped
    there by others. If you’re still stuck, consider posting a comment of your own
    asking for help. Once you’ve successfully solved a problem, your learning is not
    done! Many programming judges allow you to view the code that others have submitted.
    Dig through a few such submissions to see how they compare to yours. There are
    always multiple ways to solve a problem. Perhaps your way is most intuitive to
    you right now, but opening yourself to other possibilities is an important step
    toward programming mastery.'
  prefs: []
  type: TYPE_NORMAL
- en: Making Your Programming Judge Accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll use several programming judge websites throughout the book. That’s because
    each programming judge hosts some problems that are not found on other programming
    judges; we need multiple programming judges to cover all of the problems that
    I’ve chosen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the programming judges that we’ll use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Judge** | **URL** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| DMOJ | *[https://dmoj.ca/](https://dmoj.ca/)* |'
  prefs: []
  type: TYPE_TB
- en: '| Timus | *[https://acm.timus.ru/](https://acm.timus.ru/)* |'
  prefs: []
  type: TYPE_TB
- en: '| USACO | *[http://usaco.org/](http://usaco.org/)* |'
  prefs: []
  type: TYPE_TB
- en: Each programming judge requires that you create an account before you can submit
    code. Let’s go through the process of creating your accounts now and learn a little
    about the judges while we’re at it.
  prefs: []
  type: TYPE_NORMAL
- en: The DMOJ Judge
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The DMOJ judge is the judge we’ll use most often in the book. More than for
    any other judge, it’s worth your time exploring the DMOJ website and learning
    about what the judge offers.
  prefs: []
  type: TYPE_NORMAL
- en: To create an account on the DMOJ judge, go to *[https://dmoj.ca/](https://dmoj.ca/)*
    and click **Sign up**. On the registration page that comes up, enter your username,
    password, and email address. This page also allows you to set your default programming
    language. We’ll exclusively be using the Python programming language in this book,
    so I suggest clicking **Python 3** here. Click **Register!** to create your account.
    Once registered, you can use your username and password to log in to DMOJ.
  prefs: []
  type: TYPE_NORMAL
- en: Each problem in the book begins by indicating the judge website where the problem
    can be found and the problem code that you should use to access it. For example,
    the first problem that we’ll work on in [Chapter 1](ch01.xhtml#ch01) is found
    on DMOJ and is problem dmopc15c7p2. To find this problem on DMOJ, click **Problems**,
    type **dmopc15c7p2** in the search box, and click **Go**. You should see the problem
    as the only result. If you click the problem title, you should see the problem
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re ready to submit Python code for a problem, find the problem and
    click **Submit solution**. On the resulting page, paste your Python code into
    the text box and click **Submit!**. Your code will then be judged and the results
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: The Timus Judge
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create an account on the Timus judge, go to *[https://acm.timus.ru/](https://acm.timus.ru/)*
    and click **Register**. On the registration page that comes up, enter your name,
    password, email address, and other requested information. Click **Register** to
    create your account. Then, check your email for a message from Timus containing
    your judge ID. You’ll need your judge ID whenever you submit Python code.
  prefs: []
  type: TYPE_NORMAL
- en: There’s currently no way to set your default programming language, so be sure
    to choose the available version of Python 3 whenever you submit Python code.
  prefs: []
  type: TYPE_NORMAL
- en: We use the Timus judge only once, in [Chapter 6](ch06.xhtml#ch06), so I won’t
    say any more about it here.
  prefs: []
  type: TYPE_NORMAL
- en: The USACO Judge
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create an account on the USACO judge, go to *[http://usaco.org/](http://usaco.org/)*
    and click **Register for New Account**. On the registration page that comes up,
    enter your username, email address, and other requested information. Click **Submit**
    to create your account. Then, check your email for a message from USACO containing
    your password. Once you have your password, you can use your username and password
    to log in to USACO.
  prefs: []
  type: TYPE_NORMAL
- en: There’s currently no way to set your default programming language, so be sure
    to choose the available version of Python 3 whenever you submit Python code. You’ll
    also need to choose the file containing your Python code rather than paste your
    code into a text box.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t be using the USACO judge until [Chapter 7](ch07.xhtml#ch07), so I won’t
    say any more about it here.
  prefs: []
  type: TYPE_NORMAL
- en: About This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each chapter in the book is driven by two or three problems from a programming
    judge website. In fact, I start each chapter by posing our first problem, before
    teaching any new Python at all! My goal in doing this is to motivate you to want
    to learn the Python features that we need to solve the problem. Don’t worry if
    you’re not sure how to solve a problem after reading its description. (If you
    can’t solve the problem yet, then you’re reading the right book!) If you understand
    what the problem is asking you to do, then you’re all set. We’re going to learn
    Python and solve the problem together. Subsequent problems in the chapter may
    introduce further Python features or ask us to extend what we learned in the first
    problem. Each chapter concludes with exercises that you should solve on your own
    to practice what you just learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a rundown of what we’ll learn in each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: Getting Started](ch01.xhtml#ch01)** There are quite a few introductory
    concepts that we’ll need to learn before we can solve any problems with Python.
    In this chapter, we’ll learn these concepts, including entering Python code, working
    with strings and numbers, using variables, reading input, and writing output.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Making Decisions](ch02.xhtml#ch02)** In this chapter, we’ll learn
    about `if` statements, which allow our programs to decide what to do based on
    whether specific conditions are true or false.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: Repeating Code: Definite Loops](ch03.xhtml#ch03)** Many programs
    continue running as long as there is work to do. In this chapter, we’ll learn
    about the `for` loop, which lets our programs process each piece of input until
    the job is done.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: Repeating Code: Indefinite Loops](ch04.xhtml#ch04)** Sometimes
    we don’t know in advance how many times our program should repeat some specified
    behavior. `for` loops are not appropriate for these kinds of problems. In this
    chapter, we’ll learn about the `while` loop, which repeats code as long as a specific
    condition is true.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: Organizing Values Using Lists](ch05.xhtml#ch05)** A Python list
    allows us to use a single name to refer to a whole sequence of data. Using a list
    helps us organize our data and leverage the powerful list operations (such as
    sorting and searching) that Python provides. In this chapter, we’ll learn all
    about lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6: Designing Programs with Functions](ch06.xhtml#ch06)** A large
    program, with lots of code, can become unwieldy if we don’t organize it well.
    In this chapter, we’ll learn about functions, which help us design programs composed
    of small, self-contained chunks of code. Using functions leads to programs that
    are much easier to understand and modify. We’ll also learn about top-down design,
    an approach to designing programs with functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Reading and Writing Files](ch07.xhtml#ch07)** Files are convenient
    for providing data to our programs or obtaining data from our programs. In this
    chapter, we’ll learn how to read data from and write data to files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Organizing Values Using Sets and Dictionaries](ch08.xhtml#ch08)**
    As we begin to solve increasingly challenging problems, it’s important that we
    think about how our data is stored. In this chapter, we’ll learn about two new
    ways to store data using Python: using a set and using a dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: Designing Algorithms with Complete Search](ch09.xhtml#ch09)**
    Programmers don’t start from scratch for each problem they solve. Instead, they
    think about whether a general solution pattern—a type of *algorithm*—can be used
    to solve it. In this chapter, we’ll learn about complete-search algorithms, which
    can be used to solve a wide range of problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10: Big O and Program Efficiency](ch10.xhtml#ch10)** Sometimes we’ll
    manage to write a program that does the right thing but does so too slowly to
    be useful in practice. In this chapter, we’ll learn how to communicate about the
    efficiency of programs, and we’ll learn about tools we can use to write more efficient
    code.'
  prefs: []
  type: TYPE_NORMAL
