["```py\nclass Paddle:\n    def __init__(self, canvas, color):\n        self.canvas = canvas\n        self.id = canvas.create_rectangle(0, 0, 100, 10, fill=color)\n        self.canvas.move(self.id, 200, 300)\n\n    def draw(self):\n        pass\n\n```", "```py\n➊ paddle = Paddle(canvas, 'blue')\n   ball = Ball(canvas, 'red')\n\n   while True:\n       ball.draw()\n    ➋ paddle.draw()\n       tk.update_idletasks()\n       tk.update()\n       time.sleep(0.01)\n\n```", "```py\n    def __init__(self, canvas, color):\n        self.canvas = canvas\n        self.id = canvas.create_rectangle(0, 0, 100, 10, fill=color)        \n        self.canvas.move(self.id, 200, 300)\n      ➊ self.x = 0\n      ➋ self.canvas_width = self.canvas.winfo_width()\n\n```", "```py\n    def turn_left(self, evt):\n        self.x = -2\n\n    def turn_right(self, evt):\n        self.x = 2\n\n```", "```py\n    def __init__(self, canvas, color):\n        self.canvas = canvas\n        self.id = canvas.create_rectangle(0, 0, 100, 10, fill=color)\n        self.canvas.move(self.id, 200, 300)\n        self.x = 0\n        self.canvas_width = self.canvas.winfo_width()\n      ➊ self.canvas.bind_all('<KeyPress-Left>', self.turn_left)\n      ➋ self.canvas.bind_all('<KeyPress-Right>', self.turn_right)\n\n```", "```py\n    def draw(self):\n        self.canvas.move(self.id, self.x, 0)\n        pos = self.canvas.coords(self.id)\n        if pos[0] <= 0 or pos[2] >= self.canvas_width:\n            self.x = 0\n\n```", "```py\nclass Ball:\n  ➊ def __init__(self, canvas, paddle, color):\n        self.canvas = canvas\n     ➋ self.paddle = paddle\n        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)\n        self.canvas.move(self.id, 245, 100)\n        starts = [-3, -2, -1, 1, 2, 3]\n        self.x = random.choice(starts)\n        self.y = -3\n        self.canvas_height = self.canvas.winfo_height() \n        self.canvas_width = self.canvas.winfo_width()\n\n```", "```py\npaddle = Paddle(canvas, 'blue')\nball = Ball(canvas, paddle, 'red')\n\nwhile True:\n    ball.draw()\n    paddle.draw()\n    tk.update_idletasks()\n    tk.update()\n    time.sleep(0.01)\n\n```", "```py\n    def draw(self):\n        self.canvas.move(self.id, self.x, self.y)\n        pos = self.canvas.coords(self.id)\n        if pos[1] <= 0 or pos[3] >= self.canvas_height:\n            self.y = self.y * -1\n      ➊ if self.hit_paddle(pos) == True:\n          ➋ self.y = self.y * -1\n        if pos[0] <= 0 or pos[2] >= self.canvas_width:\n            self.x = self.x * -1\n\n```", "```py\n    def hit_paddle(self, pos):\n        paddle_pos = self.canvas.coords(self.paddle.id)\n        if pos[2] >= paddle_pos[0] and pos[0] <= paddle_pos[2]:\n            if pos[3] >= paddle_pos[1] and pos[3] <= paddle_pos[3]:\n                return True\n        return False\n\n```", "```py\n        self.canvas_height = self.canvas.winfo_height()\n        self.canvas_width = self.canvas.winfo_width()\n        self.hit_bottom = False\n\n```", "```py\nwhile True:\n  ➊ if ball.hit_bottom == False:\n        ball.draw()\n        paddle.draw()\n    tk.update_idletasks()\n    tk.update()\n    time.sleep(0.01)\n\n```", "```py\n    def draw(self):\n        self.canvas.move(self.id, self.x, self.y)\n        pos = self.canvas.coords(self.id)\n        if pos[1] <= 0:\n            self.y = self.y * -1\n     ➊ if pos[3] >= self.canvas_height:\n            self.hit_bottom = True\n        if self.hit_paddle(pos) == True:\n            self.y = self.y * -1\n        if pos[0] <= 0 or pos[2] >= self.canvas_width:\n            self.y = self.y * -1\n\n```", "```py\nfrom tkinter import *\nimport random\nimport time\n\nclass Ball:\n    def __init__(self, canvas, paddle, color):\n        self.canvas = canvas\n        self.paddle = paddle\n        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)\n        self.canvas.move(self.id, 245, 100)\n        starts = [-3, -2, -1, 1, 2, 3]\n        self.x = random.choice(starts)\n        self.y = -3\n        self.canvas_height = self.canvas.winfo_height()\n        self.canvas_width = self.canvas.winfo_width()\n        self.hit_bottom = False\n\n    def hit_paddle(self, pos):\n paddle_pos = self.canvas.coords(self.paddle.id)\n        if pos[2] >= paddle_pos[0] and pos[0] <= paddle_pos[2]:\n            if pos[3] >= paddle_pos[1] and pos[3] <= paddle_pos[3]:\n                return True\n        return False\n\n    def draw(self):\n        self.canvas.move(self.id, self.x, self.y)\n        pos = self.canvas.coords(self.id)\n        if pos[1] <= 0:\n            self.y = self.y * -1\n        if pos[3] >= self.canvas_height:\n            self.hit_bottom = True\n        if self.hit_paddle(pos) == True:\n            self.y = self.y * -1\n        if pos[0] <= 0 or pos[2] >= self.canvas_width:\n            self.y = self.y * -1\n\nclass Paddle:\n    def __init__(self, canvas, color):\n        self.canvas = canvas\n        self.id = canvas.create_rectangle(0, 0, 100, 10, fill=color)\n        self.canvas.move(self.id, 200, 300)\n        self.x = 0\n        self.canvas_width = self.canvas.winfo_width()\n        self.canvas.bind_all('<KeyPress-Left>', self.turn_left)\n        self.canvas.bind_all('<KeyPress-Right>', self.turn_right)\n\n    def draw(self):\n        self.canvas.move(self.id, self.x, 0)\n        pos = self.canvas.coords(self.id)\n        if pos[0] <= 0 or pos[2] >= self.canvas_width:\n            self.x = 0\n\n    def turn_left(self, evt):\n        self.x = -2\n\n    def turn_right(self, evt):\n        self.x = 2\n\ntk = Tk()\ntk.title('Bounce Game')\ntk.resizable(0, 0)\ntk.wm_attributes('-topmost', 1)\ncanvas = Canvas(tk, width=500, height=400, bd=0, highlightthickness=0)\ncanvas.pack()\ntk.update()\n\npaddle = Paddle(canvas, 'blue')\nball = Ball(canvas, paddle, 'red')\n\nwhile True:\n    if ball.hit_bottom == False:\n        ball.draw()\n        paddle.draw()\n    tk.update_idletasks()\n    tk.update()\n    time.sleep(0.01) \n```"]