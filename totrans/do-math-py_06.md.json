["```py\n>>> import matplotlib.pyplot as plt\n>>> x = [1, 2, 3]\n>>> y = [1, 2, 3]\n>>> plt.plot(x, y)\n[<matplotlib.lines.Line2D object at 0x7fe822d67a20>]\n>>> plt.show()\n```", "```py\n   >>> import matplotlib.pyplot as plt\n   >>> x = [1, 2, 3]\n   >>> y = [1, 2, 3]\n➊ >>> fig = plt.figure()\n➋ >>> ax = plt.axes()\n   >>> plt.plot(x, y)\n   [<matplotlib.lines.Line2D object at 0x7f9bad1dcc18>]\n   >>> plt.show()\n   >>>\n```", "```py\n   '''\n   Example of using matplotlib's Circle patch\n   '''\n   import matplotlib.pyplot as plt\n\n   def create_circle():\n➊     circle = plt.Circle((0, 0), radius = 0.5)\n       return circle\n\n   def show_shape(patch):\n➋     ax = plt.gca()\n       ax.add_patch(patch)\n       plt.axis('scaled')\n       plt.show()\n\n   if __name__ == '__main__':\n➌     c = create_circle()\n       show_shape(c)\n```", "```py\n   '''\n   A growing circle\n   '''\n\n   from matplotlib import pyplot as plt\n   from matplotlib import animation\n\n   def create_circle():\n       circle = plt.Circle((0, 0), 0.05)\n       return circle\n\n   def update_radius(i, circle):\n       circle.radius = i*0.5\n       return circle,\n\n   def create_animation():\n➊     fig = plt.gcf()\n       ax = plt.axes(xlim=(-10, 10), ylim=(-10, 10))\n       ax.set_aspect('equal')\n       circle = create_circle()\n➋     ax.add_patch(circle)\n➌     anim = animation.FuncAnimation(\n           fig, update_radius, fargs = (circle,), frames=30, interval=50)\n       plt.title('Simple Circle Animation')\n       plt.show()\n\n   if __name__ == '__main__':\n       create_animation()\n```", "```py\n   '''\n   Animate the trajectory of an object in projectile motion\n   '''\n\n   from matplotlib import pyplot as plt\n   from matplotlib import animation\n   import math\n\n   g = 9.8\n\n   def get_intervals(u, theta):\n\n       t_flight = 2*u*math.sin(theta)/g\n       intervals = []\n       start = 0\n       interval = 0.005\n       while start < t_flight:\n           intervals.append(start)\n           start = start + interval\n       return intervals\n\n   def update_position(i, circle, intervals, u, theta):\n\n       t = intervals[i]\n       x = u*math.cos(theta)*t\n       y = u*math.sin(theta)*t - 0.5*g*t*t\n       circle.center = x, y\n       return circle,\n\n   def create_animation(u, theta):\n\n       intervals = get_intervals(u, theta)\n\n       xmin = 0\n       xmax = u*math.cos(theta)*intervals[-1]\n       ymin = 0\n       t_max = u*math.sin(theta)/g\n➊     ymax = u*math.sin(theta)*t_max - 0.5*g*t_max**2\n       fig = plt.gcf()\n➋     ax = plt.axes(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n       circle = plt.Circle((xmin, ymin), 1.0)\n       ax.add_patch(circle)\n\n➌     anim = animation.FuncAnimation(fig, update_position,\n                           fargs=(circle, intervals, u, theta),\n                           frames=len(intervals), interval=1,\n                           repeat=False)\n\n       plt.title('Projectile Motion')\n       plt.xlabel('X')\n       plt.ylabel('Y')\n       plt.show()\n\n   if __name__ == '__main__':\n       try:\n           u = float(input('Enter the initial velocity (m/s): '))\n           theta = float(input('Enter the angle of projection (degrees): '))\n       except ValueError:\n           print('You entered an invalid input')\n       else:\n           theta = math.radians(theta)\n           create_animation(u, theta)\n```", "```py\n   '''\n   Example of selecting a transformation from two equally probable\n   transformations\n   '''\n   import matplotlib.pyplot as plt\n   import random\n\n   def transformation_1(p):\n       x = p[0]\n       y = p[1]\n       return x + 1, y - 1\n\n   def transformation_2(p):\n       x = p[0]\n       y = p[1]\n       return x + 1, y + 1\n\n   def transform(p):\n➊     # List of transformation functions\n       transformations = [transformation_1, transformation_2]\n       # Pick a random transformation function and call it\n➋     t = random.choice(transformations)\n➌     x, y = t(p)\n       return x, y\n\n   def build_trajectory(p, n):\n       x = [p[0]]\n       y = [p[1]]\n       for i in range(n):\n           p = transform(p)\n           x.append(p[0])\n           y.append(p[1])\n\n           return x, y\n\n   if __name__ == '__main__':\n       # Initial point\n       p = (1, 1)\n       n = int(input('Enter the number of iterations: '))\n➍     x, y = build_trajectory(p, n)\n       # Plot\n➎     plt.plot(x, y)\n       plt.xlabel('X')\n       plt.ylabel('Y')\n       plt.show()\n```", "```py\n>>> import random\n>>> l = [1, 2, 3]\n>>> random.choice(l)\n3\n>>> random.choice(l)\n1\n>>> random.choice(l)\n1\n>>> random.choice(l)\n3\n>>> random.choice(l)\n3\n>>> random.choice(l)\n2\n```", "```py\n   '''\n   Draw a Barnsley Fern\n   '''\n   import random\n   import matplotlib.pyplot as plt\n\n   def transformation_1(p):\n       x = p[0]\n       y = p[1]\n       x1 = 0.85*x + 0.04*y\n       y1 = -0.04*x + 0.85*y + 1.6\n       return x1, y1\n\n   def transformation_2(p):\n       x = p[0]\n       y = p[1]\n       x1 = 0.2*x - 0.26*y\n       y1 = 0.23*x + 0.22*y + 1.6\n       return x1, y1\n\n   def transformation_3(p):\n       x = p[0]\n       y = p[1]\n       x1 = -0.15*x + 0.28*y\n       y1 = 0.26*x + 0.24*y + 0.44\n       return x1, y1\n\n   def transformation_4(p):\n       x = p[0]\n       y = p[1]\n       x1 = 0\n       y1 = 0.16*y\n       return x1, y1\n\n   def get_index(probability):\n       r = random.random()\n       c_probability = 0\n       sum_probability = []\n       for p in probability:\n           c_probability += p\n           sum_probability.append(c_probability)\n       for item, sp in enumerate(sum_probability):\n           if r <= sp:\n               return item\n       return len(probability)-1\n\n   def transform(p):\n       # List of transformation functions\n       transformations = [transformation_1, transformation_2,\n                              transformation_3, transformation_4]\n➊     probability = [0.85, 0.07, 0.07, 0.01]\n       # Pick a random transformation function and call it\n       tindex = get_index(probability)\n➋     t = transformations[tindex]\n       x, y = t(p)\n       return x, y\n\n   def draw_fern(n):\n       # We start with (0, 0)\n       x = [0]\n       y = [0]\n\n       x1, y1 = 0, 0\n       for i in range(n):\n          x1, y1 = transform((x1, y1))\n          x.append(x1)\n          y.append(y1)\n       return x, y\n\n   if __name__ == '__main__':\n       n = int(input('Enter the number of points in the Fern: '))\n       x, y = draw_fern(n)\n       # Plot the points\n       plt.plot(x, y, 'o')\n       plt.title('Fern with {0} points'.format(n))\n       plt.show()\n```", "```py\n'''\nDraw a square\n'''\n\nfrom matplotlib import pyplot as plt\n\ndef draw_square():\n    ax = plt.axes(xlim = (0, 6), ylim = (0, 6))\n    square = plt.Polygon([(1, 1), (5, 1), (5, 5), (1, 5)], closed = True)\n    ax.add_patch(square)\n    plt.show()\n\nif __name__ == '__main__':\n    draw_square()\n```", "```py\ny = 1.5\nwhile y < 5:\n    x = 1.5\n    while x < 5:\n        c = draw_circle(x, y)\n        ax.add_patch(c)\n\n        x += 1.0\n    y += 1.0\n```", "```py\n>>> l1 = [1, 2, 3]\n>>> l2 = [4, 5, 6]\n>>> l = [l1, l2]\n```", "```py\n>>> l[0]\n[1, 2, 3]\n\n>>> l[1]\n[4, 5, 6]\n```", "```py\n   import matplotlib.pyplot as plt\n   import matplotlib.cm as cm\n   import random\n\n➊ def initialize_image(x_p, y_p):\n       image = []\n       for i in range(y_p):\n          x_colors = []\n           for j in range(x_p):\n               x_colors.append(0)\n           image.append(x_colors)\n       return image\n\n   def color_points():\n       x_p = 6\n       y_p = 6\n       image = initialize_image(x_p, y_p)\n       for i in range(y_p):\n           for j in range(x_p):\n➋             image[i][j] = random.randint(0, 10)\n➌     plt.imshow(image, origin='lower', extent=(0, 5, 0, 5),\n                  cmap=cm.Greys_r, interpolation='nearest')\n       plt.colorbar()\n       plt.show()\n\n   if __name__ == '__main__':\n       color_points()\n```"]