["```py\ndef average_rgb(pixels):\n    r = [x[0] for x in pixels]\n    g = [x[1] for x in pixels]\n    b = [x[2] for x in pixels]\n    n = len(r)\n    return (sum(r)/n, sum(g)/n, sum(b)/n)\n```", "```py\nprint(average_rgb([(0, 0, 0),\n                   (256, 128, 0),\n                   (32, 64, 33)]))\n```", "```py\n(96.0, 64.0, 11.0)\n```", "```py\ndef unit_test_avg():\n    print('Test average...')\n    print(average_rgb([(0, 0, 0)]) == average_rgb([(0, 0, 0), (0, 0, 0)]))\n\ndef unit_test_type():\n    print('Test type...')\n    for i in range(3):\n        print(type(average_rgb([(1, 2, 3), (4, 5, 6)])[i]) == int)\n\nunit_test_avg()\nunit_test_type()\n```", "```py\nTest average...\nTrue\nTest type...\nFalse\nFalse\nFalse\n```", "```py\nimport matplotlib.pyplot as plt\nimport math\nimport time\nimport random\n\ndef bubblesort(l):\n # src: https://blog.finxter.com/daily-python-puzzle-bubble-sort/\n    lst = l[:] # Work with a copy, don't modify the original\n    for passesLeft in range(len(lst)-1, 0, -1):\n        for i in range(passesLeft):\n            if lst[i] > lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n\ndef qsort(lst):\n # Explanation: https://blog.finxter.com/python-one-line-quicksort/\n    q = lambda lst: q([x for x in lst[1:] if x <= lst[0]])\n                    + [lst[0]] \n                    + q([x for x in lst if x > lst[0]]) if lst else []\n    return q(lst)\n\ndef timsort(l):\n # sorted() uses Timsort internally\n    return sorted(l) \n\ndef create_random_list(n):\n    return random.sample(range(n), n)\n\nn = 50000\nxs = list(range(1,n,n//10))\ny_bubble = []\ny_qsort = []\ny_tim = []\n\nfor x in xs:\n\n # Create list\n    lst = create_random_list(x)\n\n # Measure time bubble sort\n    start = time.time()\n bubblesort(lst)\n    y_bubble.append(time.time()-start)\n\n # Measure time qsort\n    start = time.time()\n    qsort(lst)\n    y_qsort.append(time.time()-start)\n\n # Measure time Timsort\n    start = time.time()\n    timsort(lst)\n    y_tim.append(time.time()-start)\n\nplt.plot(xs, y_bubble, '-x', label='Bubblesort')\nplt.plot(xs, y_qsort, '-o', label='Quicksort')\nplt.plot(xs, y_tim, '--.', label='Timsort')\n\nplt.grid()\nplt.xlabel('List Size (No. Elements)')\nplt.ylabel('Runtime (s)')\nplt.legend()\nplt.savefig('alg_complexity_new.pdf')\nplt.savefig('alg_complexity_new.jpg')\nplt.show()\n```", "```py\n(Walt Disney, born, 1901)\n(Louis Armstrong, born, 1901)\n```"]