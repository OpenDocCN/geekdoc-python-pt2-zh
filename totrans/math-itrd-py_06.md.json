["```py\ndef plug():\n  ➊ x = -100 #start at -100\n    while x < 100: #go up to 100\n      ➋ if 2*x + 5 == 13: #if it makes the equation true\n            print(\"x =\",x) #print it out\n      ➌ x += 1 #make x go up by 1 to test the next number\n\nplug() #run the plug function\n```", "```py\nx = 4\n```", "```py\ndef equation(a,b,c,d):\n    ''''solves equations of the\n    form ax + b = cx + d''''\n    return (d - b)/(a - c)\n```", "```py\n>>> equation(2,5,0,13)\n4.0\n```", "```py\ndef equation(a,b,c,d):\n    ''''solves equations of the\n    form ax + b = cx + d''''\n    print((d - b)/(a − c))\n```", "```py\n>>> x = equation(2,5,0,13)\n4.0\n>>> print(x)\nNone\n```", "```py\n>>> x = equation(12,18,-34,67)\n>>> x\n1.065217391304348\n```", "```py\n>>> 12*x + 18\n30.782608695652176\n```", "```py\n>>> -34*x + 67\n30.782608695652172\n```", "```py\n>>> frommath importsqrt\n>>> sqrt(-4)\nTraceback (most recent call last):\n  File \"<pyshell#11>\", line 1, in <module>\n    sqrt(-4)\nValueError: math domain error\n```", "```py\nfrom math import sqrt\n```", "```py\ndef quad(a,b,c):\n    ''''Returns the solutions of an equation\n    of the form a*x**2 + b*x + c = 0''''\n    x1 = (-b + sqrt(b**2 - 4*a*c))/(2*a)\n    x2 = (-b - sqrt(b**2 - 4*a*c))/(2*a)\n    return x1,x2\n```", "```py\n>>> quad(2,7,-15)\n(1.5, -5.0)\n```", "```py\n>>> 2*1.5**2 + 7*1.5 - 15\n0.0\n>>> 2*(-5)**2 + 7*(-5) - 15\n0\n```", "```py\n*plug.py*\ndef g(x):\n    return 6*x**3 + 31*x**2 + 3*x − 10\n\ndef plug():\n    x = -100\n    while x < 100:\n        if g(x) == 0:\n            print(\"x =\",x)\n        x += 1\n    print(\"done.\")\n```", "```py\n>>> plug()\nx = -5\ndone.\n```", "```py\n*grid.pyde*\n#set the range of x-values\nxmin = -10\nxmax = 10\n\n#range of y-values\nymin = -10\nymax = 10\n\n#calculate the range\nrangex = xmax - xmin\nrangey = ymax - ymin\n\ndef setup():\n    size(600,600)\n```", "```py\n*grid.pyde*\ndef setup()\n    global xscl, yscl\n    size(600,600)\n    xscl = width / rangex\n yscl = -height / rangey\n```", "```py\n*grid.pyde*\n#set the range of x-values\nxmin = -10\nxmax = 10\n\n#range of y-values \nymin = -10\nymax = 10\n\n#calculate the range\nrangex = xmax - xmin\nrangey = ymax - ymin\n\ndef setup():\n    global xscl, yscl \n    size(600,600)\n    xscl = width / rangex\n    yscl = height / rangey \n\ndef draw():\n    global xscl, yscl\n    background(255) #white\n    translate(width/2,height/2)\n    #cyan lines\n    strokeWeight(1)\n stroke(0,255,255)\n    for i in range(xmin,xmax + 1):\n        line(i*xscl,ymin*yscl,i*xscl,ymax*yscl)\n        line(xmin*xscl,i*yscl,xmax*xscl,i*yscl)\n```", "```py\nline(-10,-10, -10,10)\nline(-9,-10, -9,10)\nline(-8,-10, -8,10)\n```", "```py\nline(-10,-10, 10,-10)\nline(-10,-9, 10,-9)\nline(-10,-8, 10,-8)\n```", "```py\nfor i in range(xmin,xmax+1):\n    line(i,ymin,i,ymax)\nfor i in range(ymin,ymax+1):\n    line(xmin,i,xmax,i)\n```", "```py\nfor i in range(xmin,xmax+1):\n    line(i*xscl,ymin*yscl,i*xscl,ymax*yscl)\nfor i in range(ymin,ymax+1):\n    line(xmin*xscl,i*yscl,xmax*xscl,i*yscl)\n```", "```py\n*grid.pyde*\n    #cyan lines\n    strokeWeight(1)\n    stroke(0,255,255)\n    for i in range(xmin,xmax+1):\n        line(i*xscl,ymin*yscl,i*xscl,ymax*yscl)\n    for i in range(ymin,ymax+1):\n        line(xmin*xscl,i*yscl,xmax*xscl,i*yscl)\n    stroke(0) #black axes\n    line(0,ymin*yscl,0,ymax*yscl)\n    line(xmin*xscl,0,xmax*xscl,0)\n```", "```py\n*grid.pyde*\n#test with a circle\nfill(0)\nellipse(3*xscl,6*yscl,10,10)\n```", "```py\nyscl = -height/rangey\n```", "```py\n*grid.pyde*\ndef draw():\n    global xscl, yscl\n    background(255)\n    translate(width/2,height/2)\n    grid(xscl,yscl) #draw the grid\n\ndef grid(xscl,yscl):\n    #Draws a grid for graphing\n    #cyan lines\n    strokeWeight(1)\n    stroke(0,255,255)\n    for i in range(xmin,xmax+1):\n        line(i*xscl,ymin*yscl,i*xscl,ymax*yscl)\n    for i in range(ymin,ymax+1):\n        line(xmin*xscl,i*yscl,xmax*xscl,i*yscl)\n    stroke(0) #black axes\n line(0,ymin*yscl,0,ymax*yscl)\n    line(xmin*xscl,0,xmax*xscl,0)\n```", "```py\n*grid.pyde*\ndef f(x):\n    return x**2\n```", "```py\n*grid.pyde*\ndef graphFunction():\n    x = xmin\n```", "```py\ndef graphFunction():\n    x = xmin\n    while x <= xmax:\n```", "```py\ndef graphFunction():\n    x = xmin\n    while x <= xmax:\n        fill(0)\n        line(x*xscl,f(x)*yscl,(x+0.1)*xscl,f(x+0.1)*yscl)\n        x += 0.1\n```", "```py\n*grid.pyde*\n#set the range of x-values\nxmin = -10\nxmax = 10\n\n#range of y-values\nymin = -10\nymax = 10\n\n#calculate the range\nrangex = xmax - xmin\nrangey = ymax - ymin\n\ndef setup():\n    global xscl, yscl\n    size(600,600)\n    xscl = width / rangex\n    yscl = -height / rangey\n\ndef draw():\n    global xscl, yscl\n    background(255) #white\n    translate(width/2,height/2)\n    grid(xscl,yscl)\n    graphFunction()\n\ndef f(x):\n    return x**2\n\ndef graphFunction():\n    x = xmin\n    while x <= xmax:\n        fill(0)\n        line(x*xscl,f(x)*yscl,(x+0.1)*xscl,f(x+0.1)*yscl)\n        x += 0.1\n\ndef grid(xscl, yscl):\n    #Draws a grid for graphing\n    #cyan lines\n    strokeWeight(1)\n    stroke(0,255,255)\n    for i in range(xmin,xmax+1):\n        line(i*xscl,ymin*yscl,i*xscl,ymax*yscl)\n    for i in range(ymin,ymax+1):\n        line(xmin*xscl,i*yscl,xmax*xscl,i*yscl)\n    stroke(0) #black axes\n line(0,ymin*yscl,0,ymax*yscl)\n    line(xmin*xscl,0,xmax*xscl,0)\n```", "```py\n*grid.pyde*\ndef f(x):\n    return 6*x**3 + 31*x**2 + 3*x − 10\n```", "```py\n*guess.py*\ndef f(x):\n    return 6*x**3 + 31*x**2 + 3*x − 10\n\n>>> f(0.5)\n0.0\n```", "```py\n>>> f(-0.5)\n-4.5\n```", "```py\n>>> f(-0.75)\n2.65625\n```", "```py\n>>> f(-0.625)\n-1.23046875\n```", "```py\n'''The guess method'''\ndef f(x):\n    return 6*x**3 + 31*x**2 + 3*x - 10\n\ndef average(a,b):\n    return (a + b)/2.0\n\ndef guess():\n    lower = -1\n    upper = 0\n  ➊ for i in range(20):\n        midpt = average(lower,upper)\n        if f(midpt) == 0:\n            return midpt\n        elif f(midpt) < 0:\n            upper = midpt\n        else:\n            lower = midpt\n    return midpt\n\nx = guess()\n\nprint(x,f(x))\n```", "```py\n-0.6666669845581055 9.642708896251406e-06\n```", "```py\n-0.6666666666669698 9.196199357575097e-12\n```", "```py\n>>> f(-2/3)\n0.0\n```"]