["```py\nSELECT * FROM orders WHERE status = 'Shipped';\n```", "```py\nSELECT * FROM orders;\n```", "```py\nSELECT pono, date FROM orders;\n```", "```py\n$ **mysql -uroot -p**\n```", "```py\nmysql>\n```", "```py\nmysql> **ALTER USER 'root'@'localhost' IDENTIFIED BY '**`your_new_pswd`**';**\n```", "```py\nmysql> **CREATE DATABASE sampledb;**\nQuery OK, 1 row affected (0.01 sec)\n```", "```py\nmysql> **USE sampledb;**\nDatabase changed\n```", "```py\nemps\n\nempno  empname         job\n----------------------------\n9001   Jeff Russell    sales\n9002   Jane Boorman    sales\n9003   Tom Heints      sales\n\nsalary\n\nempno     salary\n----------------\n9001      3000\n9002      2800\n9003      2500\n\norders\n\npono   empno  total\n-------------------\n2608   9001   35\n2617   9001   35\n2620   9001   139\n2621   9002   95\n2626   9002   218\n```", "```py\nmysql> **CREATE TABLE emps (**\n **empno INT NOT NULL,**\n **empname VARCHAR(50),**\n **job VARCHAR(30),**\n **PRIMARY KEY (empno)**\n **);**\n```", "```py\nQuery OK, 0 rows affected (0.03 sec)\n```", "```py\nmysql> **CREATE TABLE salary (**\n **empno INT NOT NULL,**\n **salary INT,**\n **PRIMARY KEY (empno)**\n **);**\n\nQuery OK, 0 rows affected (0.05 sec)\n```", "```py\nmysql> **ALTER TABLE salary ADD FOREIGN KEY (empno) REFERENCES emps (empno);**\n```", "```py\nQuery OK, 0 rows affected (0.14 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```py\nmysql> **CREATE TABLE orders (**\n **pono INT NOT NULL,**\n **empno INT NOT NULL,**\n **total INT,**\n **PRIMARY KEY (pono),**\n **FOREIGN KEY (empno) REFERENCES emps (empno)**\n **);**\n\nQuery OK, 0 rows affected (0.13 sec)\n```", "```py\n$ **pip install mysql-connector-python**\n```", "```py\nimport mysql.connector\n\ntry:\n❶ cnx = mysql.connector.connect(user='root', password='`your_pswd`',\n                                host='127.0.0.1',\n                                database='sampledb')\n❷ cursor = cnx.cursor()\n  # defining employee rows\n❸ emps = [\n   (9001, \"Jeff Russell\", \"sales\"),\n   (9002, \"Jane Boorman\", \"sales\"),\n   (9003, \"Tom Heints\", \"sales\")\n  ]\n  # defining the query\n❹ query_add_emp = (\"\"\"INSERT INTO emps (empno, empname, job)\n                      VALUES (%s, %s, %s)\"\"\")\n  # inserting the employee rows\n  for emp in emps:\n  ❺ cursor.execute(query_add_emp, emp)\n  # defining and inserting salaries\n  salary = [\n    (9001, 3000),\n    (9002, 2800),\n    (9003, 2500)\n  ]\n  query_add_salary = (\"\"\"INSERT INTO salary (empno, salary)\n                         VALUES (%s, %s)\"\"\")\n  for sal in salary:\n    cursor.execute(query_add_salary, sal)\n  # defining and inserting orders\n  orders = [\n    (2608, 9001, 35),\n    (2617, 9001, 35),\n    (2620, 9001, 139),\n    (2621, 9002, 95),\n    (2626, 9002, 218)\n  ]\n query_add_order = (\"\"\"INSERT INTO orders(pono, empno, total)\n                        VALUES (%s, %s, %s)\"\"\")\n  for order in orders:\n    cursor.execute(query_add_order, order)\n  # making the insertions permanent in the database\n❻ cnx.commit()\n❼ except mysql.connector.Error as err:\n  print(\"Error-Code:\", err.errno)\n  print(\"Error-Message: {}\".format(err.msg))\n❽ finally:\n  cursor.close()\n  cnx.close()\n```", "```py\n`--snip--`\ntry:\n  cnx = mysql.connector.connect(user='root', password='`your_pswd`',\n                                host='127.0.0.1',\n                                database='sampledb')\n  cursor = cnx.cursor()\n query = (\"SELECT ❶ * FROM emps WHERE ❷ empno > %s\")\n❸ empno = 9001\n❹ cursor.execute(query, (empno,))\n❺ for (empno, empname, job) in cursor:\n    print(\"{}, {}, {}\".format(\n      empno, empname, job))\n`--snip--`\n```", "```py\n9002, Jane Boorman, sales\n9003, Tom Heints, sales\n```", "```py\n`--snip--`\ntry:\n  cnx = mysql.connector.connect(user='root', password='`your_pswd`',\n                                host='127.0.0.1',\n                                database='sampledb')\n  cursor = cnx.cursor()\n  query = (\"\"\"SELECT ❶ e.empno, e.empname, e.job, s.salary\n              FROM ❷ emps e JOIN salary s ON ❸ e.empno = s.empno\n              WHERE ❹ e.empno > %s\"\"\")\n\n  empno = 9001\n cursor.execute(query, (empno,))\n  for (empno, empname, job, salary) in cursor:\n    print(\"{}, {}, {}, {}\".format(\n      empno, empname, job, salary))\n`--snip--`\n```", "```py\n9002, Jane Boorman, sales, 2800\n9003, Tom Heints, sales, 2500\n```", "```py\nmysql> **CREATE TABLE stocks(**\n **ticker VARCHAR(10),**\n **date VARCHAR(10),**\n **price DECIMAL(15,2)**\n **);** \n```", "```py\nimport yfinance as yf\n❶ data = []\n❷ tickers = ['TSLA', 'FB', 'ORCL', 'AMZN']\nfor ticker in tickers:\n❸ tkr = yf.Ticker(ticker)\n  hist = tkr.history(period='5d')\n  ❹ .reset_index()\n❺ records = hist[['Date','Close']].to_records(index=False)❻ records = list(records)\n  records = [(ticker, ❼ str(elem[0])[:10], round(elem[1],2)) for elem in records]\n❽ data = data + records\n```", "```py\n[\n ('TSLA', '2022-01-06', 1064.7),\n ('TSLA', '2022-01-07', 1026.96),\n ('TSLA', '2022-01-10', 1058.12),\n ('TSLA', '2022-01-11', 1064.4),\n ('TSLA', '2022-01-12', 1106.22),\n ('FB', '2022-01-06', 332.46),\n ('FB', '2022-01-07', 331.79),\n ('FB', '2022-01-10', 328.07),\n ('FB', '2022-01-11', 334.37),\n ('FB', '2022-01-12', 333.26),\n ('ORCL', '2022-01-06', 86.34),\n ('ORCL', '2022-01-07', 87.51),\n ('ORCL', '2022-01-10', 89.28),\n ('ORCL', '2022-01-11', 88.48),\n ('ORCL', '2022-01-12', 88.31),\n ('AMZN', '2022-01-06', 3265.08),\n ('AMZN', '2022-01-07', 3251.08),\n ('AMZN', '2022-01-10', 3229.72),\n ('AMZN', '2022-01-11', 3307.24),\n ('AMZN', '2022-01-12', 3304.14)\n]\n```", "```py\nimport mysql.connector\nfrom mysql.connector import errorcode\ntry:\n  cnx = mysql.connector.connect(user='root', password='`your_pswd`',\n                                host='127.0.0.1',\n                                database='sampledb')\n  cursor = cnx.cursor()\n  # defining the query\n  query_add_stocks = (\"\"\"INSERT INTO stocks (ticker, date, price)\n                         VALUES (%s, %s, %s)\"\"\")\n  # adding the stock price rows\n❶ cursor.executemany(query_add_stocks, data)\n  cnx.commit()\nexcept mysql.connector.Error as err:\n  print(\"Error-Code:\", err.errno)\n  print(\"Error-Message: {}\".format(err.msg))\nfinally:\n  cursor.close()\n  cnx.close()\n```", "```py\nSELECT\n  date,\n  ticker,\n  price,\n  LAG(price) OVER(PARTITION BY ticker ORDER BY date) AS prev_price\nFROM stocks;\n```", "```py\n+------------+--------+---------+------------+\n| date       | ticker | price   | prev_price |\n+------------+--------+---------+------------+\n\n| 2022-01-06 | AMZN   | 3265.08 |       NULL |\n| 2022-01-07 | AMZN   | 3251.08 |    3265.08 |\n| 2022-01-10 | AMZN   | 3229.72 |    3251.08 |\n| 2022-01-11 | AMZN   | 3307.24 |    3229.72 |\n| 2022-01-12 | AMZN   | 3304.14 |    3307.24 |\n| 2022-01-06 | FB     |  332.46 |       NULL |\n| 2022-01-07 | FB     |  331.79 |     332.46 |\n| 2022-01-10 | FB     |  328.07 |     331.79 |\n| 2022-01-11 | FB     |  334.37 |     328.07 |\n| 2022-01-12 | FB     |  333.26 |     334.37 |\n| 2022-01-06 | ORCL   |   86.34 |       NULL |\n| 2022-01-07 | ORCL   |   87.51 |      86.34 |\n| 2022-01-10 | ORCL   |   89.28 |      87.51 |\n| 2022-01-11 | ORCL   |   88.48 |      89.28 |\n| 2022-01-12 | ORCL   |   88.31 |      88.48 |\n| 2022-01-06 | TSLA   | 1064.70 |       NULL |\n| 2022-01-07 | TSLA   | 1026.96 |    1064.70 |\n| 2022-01-10 | TSLA   | 1058.12 |    1026.96 |\n| 2022-01-11 | TSLA   | 1064.40 |    1058.12 |\n| 2022-01-12 | TSLA   | 1106.22 |    1064.40 |\n+------------+--------+---------+------------+\n20 rows in set (0.00 sec)\n```", "```py\n❶ SELECT s.* FROM stocks AS s\nLEFT JOIN\n❷ (SELECT DISTINCT(ticker) FROM\n  ❸ (SELECT\n     ❹ price/LAG(price) OVER(PARTITION BY ticker ORDER BY date) AS dif,\n       ticker \n     FROM stocks) AS b\n❺ WHERE dif <0.99) AS a\n❻ ON a.ticker = s.ticker\n❼ WHERE a.ticker IS NULL;\n```", "```py\n+--------+------------+---------+\n| ticker | date       | price   |\n+--------+------------+---------+\n\n| ORCL   | 2022-01-06 |   86.34 |\n| ORCL   | 2022-01-07 |   87.51 |\n| ORCL   | 2022-01-10 |   89.28 |\n| ORCL   | 2022-01-11 |   88.48 |\n| ORCL   | 2022-01-12 |   88.31 |\n| AMZN   | 2022-01-06 | 3265.08 |\n| AMZN   | 2022-01-07 | 3251.08 |\n| AMZN   | 2022-01-10 | 3229.72 |\n| AMZN   | 2022-01-11 | 3307.24 |\n| AMZN   | 2022-01-12 | 3304.14 |\n+--------+------------+--------+\n10 rows in set (0.00 sec)\n```", "```py\n+------------+--------+---------+------------+\n| date       | ticker | price   | prev_price |\n+------------+--------+---------+------------+\n  ...\n  2022-01-07 | TSLA   | 1026.96 |    1064.70 |\n  ...\n```", "```py\nimport pandas as pd\nimport mysql.connector\nfrom mysql.connector import errorcode\ntry:\n  cnx = mysql.connector.connect(user='root', password='`your_pswd`',\n                                host='127.0.0.1',\n                                database='sampledb')\n  query = (\"\"\"\n    SELECT s.* FROM stocks AS s\n    LEFT JOIN\n     (SELECT DISTINCT(ticker) FROM\n       (SELECT\n         price/LAG(price) OVER(PARTITION BY ticker ORDER BY date) AS dif,\n         ticker\n        FROM stocks) AS b\n      WHERE dif <0.99) AS a\n    ON a.ticker = s.ticker\n    WHERE a.ticker IS NULL\"\"\")\n❶ df_stocks = pd.read_sql(query, con=cnx)\n❷ df_stocks = df_stocks.set_index(['ticker','date'])\nexcept mysql.connector.Error as err:\n  print(\"Error-Code:\", err.errno)\n  print(\"Error-Message: {}\".format(err.msg))\nfinally:\n  cnx.close()\n```", "```py\n price\nticker date               \nORCL   2022-01-06    86.34\n       2022-01-07    87.51\n       2022-01-10    89.28\n       2022-01-11    88.48\n       2022-01-12    88.31\nAMZN   2022-01-06  3265.08\n       2022-01-07  3251.08\n       2022-01-10  3229.72\n       2022-01-11  3307.24\n       2022-01-12  3304.14\n```", "```py\n$ **redis-cli**\n127.0.0.1:6379> **SET emp1 \"Maya Silver\"**\nOK\n127.0.0.1:6379> **GET emp1**\n\"Maya Silver\"\n```", "```py\n$ **pip install redis**\n```", "```py\n> **import redis**\n❶ > **r = redis.Redis()**\n❷ > **r.mset({\"emp1\": \"Maya Silver\", \"emp2\": \"John Jamison\"})**\nTrue\n❸ > **r.get(\"emp1\")**\nb'Maya Silver'\n```", "```py\n`--snip--`\n> **from datetime import timedelta**\n> **r.setex(\"cab26\", timedelta(minutes=1), value=\"in the area now\")**\nTrue\n```", "```py\n> **cabDict = {\"ID\": \"cab48\", \"Driver\": \"Dan Varsky\", \"Brand\": \"Volvo\"}**\n> **r.hmset(\"cab48\", cabDict)**\n> **r.hgetall(\"cab48\")**\n{'Cab': 'cab48', 'Driver': 'Dan Varsky', 'Brand': 'Volvo'}\n```", "```py\n$ **pip install pymongo**\n```", "```py\n> **from pymongo import MongoClient**\n> **client = MongoClient('**`connection_string`**')**\n```", "```py\n> **client = MongoClient('localhost', 27017)**\n```", "```py\n> **db = client['sampledb']**\n```", "```py\n> **db = client.sampledb**\n```", "```py\n> **emps_collection = db['emps']**\n```", "```py\n> **emp = {\"empno\": 9001,**\n...         **\"empname\": \"Jeff Russell\",**\n...         **\"orders\": [2608, 2617, 2620]}**\n> **result = emps_collection.insert_one(emp)**\n```", "```py\n> **result.inserted_id**\nObjectId('69y67385ei0b650d867ef236')\n```", "```py\n> **emp = emps_collection.find_one({\"empno\": 9001})**\n> **print(emp)**\n```", "```py\n{\n u'empno': 9001,\n u'_id': ObjectId('69y67385ei0b650d867ef236'),\n u'empname': u'Jeff Russell',\n u'orders': [2608, 2617, 2620]\n}\n```"]