["```py\n>>> x = 1\n>>> x + x + 1\n3\n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> x + x + 1\n2*x + 1\n```", "```py\n>>> a = Symbol('x')\n>>> a + a + 1\n2*x + 1\n```", "```py\n>>> x = Symbol('x')\n>>> x.name\n'x'\n>>> a = Symbol('x')\n>>> a.name\n'x'\n```", "```py\n>>> x = Symbol('x')\n>>> y = Symbol('y')\n>>> z = Symbol('z')\n```", "```py\n>>> from sympy import symbols\n>>> x,y,z = symbols('x,y,z')\n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> y = Symbol('y')\n\n>>> s = x*y + x*y\n>>> s\n2*x*y\n```", "```py\n>>> p = x*(x + x)\n>>> p\n2*x**2\n```", "```py\n>>> p = (x + 2)*(x + 3)\n>>> p\n(x + 2)*(x + 3)\n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> y = Symbol('y')\n```", "```py\n>>> from sympy import factor\n>>> expr = x**2 - y**2\n>>> factor(expr)\n(x - y)*(x + y)\n```", "```py\n>>> factors = factor(expr)\n>>> expand(factors)\nx**2 - y**2\n```", "```py\n>>> expr = x**3 + 3*x**2*y + 3*x*y**2 + y**3\n>>> factors = factor(expr)\n>>> factors\n(x + y)**3\n\n>>> expand(factors)\nx**3 + 3*x**2*y + 3*x*y**2 + y**3\n```", "```py\n>>> expr = x + y + x*y\n>>> factor(expr)\nx*y + x + y\n```", "```py\n>>> expr = x*x + 2*x*y + y*y\n```", "```py\n>>> expr\nx**2 + 2*x*y + y**2\n```", "```py\n>>> from sympy import pprint\n>>> pprint(expr)\nx2 + 2·x·y + y2\n```", "```py\n>>> expr = 1 + 2*x + 2*x**2\n>>> pprint(expr)\n2·x2 + 2·x + 1\n```", "```py\n>>> from sympy import init_printing\n>>> init_printing(order='rev-lex')\n>>> pprint(expr)\n1 + 2·x + 2·x2\n```", "```py\n   '''\n   Print the series:\n   x + x**2 + x**3 + ... + x**n\n       ____  _____         _____\n         2    3              n\n   '''\n\n   from sympy import Symbol, pprint, init_printing\n   def print_series(n):\n\n       # Initialize printing system with reverse order\n       init_printing(order='rev-lex')\n\n       x = Symbol('x')\n➊     series = x\n➋         for i in range(2, n+1):\n➌         series = series + (x**i)/i\n       pprint(series)\n\n   if __name__ == '__main__':\n       n = input('Enter the number of terms you want in the series: ')\n➍     print_series(int(n))\n```", "```py\ni = 2, series = x + x**2 / 2\ni = 3, series = x + x**2/2 + x**3/3\n\n--snip--\n```", "```py\nEnter the number of terms you want in the series: 5\n\n    x2 x3 x4 x5\nx + -- + -- + -- + --\n    2    3    4    5\n```", "```py\n>>> x = Symbol('x')\n>>> y = Symbol('y')\n>>> x*x + x*y + x*y + y*y\nx**2 + 2*x*y + y**2\n```", "```py\n➊ >>> expr = x*x + x*y + x*y + y*y\n   >>> res = expr.subs({x:1, y:2})\n```", "```py\n>>> res\n9\n```", "```py\n>>> expr.subs({x:1-y})\ny**2 + 2*y*(-y + 1) + (-y + 1)**2\n```", "```py\n>>> sampledict = {\"key1\": 5, \"key2\": 20}\n>>> sampledict[\"key1\"]\n5\n```", "```py\n➊ >>> expr_subs = expr.subs({x:1-y})\n   >>> from sympy import simplify\n➋ >>> simplify(expr_subs)\n   1\n```", "```py\n   '''\n   Print the series:\n   x + x**2 + x**3 + ... + x**n\n       ____  _____         _____\n         2     3             n\n   '''\n\n   from sympy import Symbol, pprint, init_printing\n   def print_series(n, x_value):\n\n       # Initialize printing system with reverse order\n       init_printing(order='rev-lex')\n\n       x = Symbol('x')\n       series = x\n       for i in range(2, n+1):\n           series = series + (x**i)/i\n\n       pprint(series)\n\n       # Evaluate the series at x_value\n➊     series_value = series.subs({x:x_value})\n       print('Value of the series at {0}: {1}'.format(x_value, series_value))\n\n   if __name__ == '__main__':\n       n = input('Enter the number of terms you want in the series: ')\n➋     x_value = input('Enter the value of x at which you want to evaluate the series: ')\n\n       print_series(int(n), float(x_value))\n```", "```py\nEnter the number of terms you want in the series: 5\nEnter the value of x at which you want to evaluate the series: 1.2\n\n    x2 x3 x4 x5\nx + -- + -- + -- + --\n    2    3    4    5\nValue of the series at 1.2: 3.51206400000000\n```", "```py\n➊ >>> from sympy import sympify\n   >>> expr = input('Enter a mathematical expression: ')\n   Enter a mathematical expression: x**2 + 3*x + x**3 + 2*x\n➋ >>> expr = sympify(expr)\n```", "```py\n>>> 2*expr\n2*x**3 + 2*x**2 + 10*x\n```", "```py\n>>> expr = input('Enter a mathematical expression: ')\nEnter a mathematical expression: x**2 + 3*x + x**3 + 2x\n>>> expr = sympify(expr)\nTraceback (most recent call last):\n  File \"<pyshell#146>\", line 1, in <module>\n    expr = sympify(expr)\n  File \"/usr/lib/python3.3/site-packages/sympy/core/sympify.py\", line 180, in sympify\n    raise SympifyError('could not parse %r' % a)\nsympy.core.sympify.SympifyError: SympifyError: \"could not parse 'x**2 + 3*x + x**3 + 2x'\"\n```", "```py\n>>> from sympy import sympify\n>>> from sympy.core.sympify import SympifyError\n>>> expr = input('Enter a mathematical expression: ')\nEnter a mathematical expression: x**2 + 3*x + x**3 + 2x\n>>> try:\n    expr = sympify(expr)\nexcept SympifyError:\n    print('Invalid input')\n\nInvalid input\n```", "```py\n   '''\n   Product of two expressions\n   '''\n\n   from sympy import expand, sympify\n   from sympy.core.sympify import SympifyError\n\n   def product(expr1, expr2):\n       prod = expand(expr1*expr2)\n       print(prod)\n\n   if __name__=='__main__':\n➊     expr1 = input('Enter the first expression: ')\n➋     expr2 = input('Enter the second expression: ')\n\n       try:\n           expr1 = sympify(expr1)\n           expr2 = sympify(expr2)\n       except SympifyError:\n           print('Invalid input')\n       else:\n➌         product(expr1, expr2)\n```", "```py\nEnter the first expression: x**2 + x*2 + x\nEnter the second expression: x**3 + x*3 + x\nx**5 + 3*x**4 + 4*x**3 + 12*x**2\n```", "```py\nEnter the first expression: x*y+x\nEnter the second expression: x*x+y\nx**3*y + x**3 + x*y**2 + x*y\n```", "```py\n>>> from sympy import Symbol, solve\n>>> x = Symbol('x')\n>>> expr = x - 5 - 7\n>>> solve(expr)\n[12]\n```", "```py\n➊ >>> from sympy import solve\n   >>> x = Symbol('x')\n➋ >>> expr = x**2 + 5*x + 4\n➌ >>> solve(expr, dict=True)\n➍ [{x: -4}, {x: -1}]\n```", "```py\n>>> x=Symbol('x')\n>>> expr = x**2 + x + 1\n>>> solve(expr, dict=True)\n[{x: -1/2 - sqrt(3)*I/2}, {x: -1/2 + sqrt(3)*I/2}]\n```", "```py\n>>> x = Symbol('x')\n>>> a = Symbol('a')\n>>> b = Symbol('b')\n>>> c = Symbol('c')\n```", "```py\n>>> expr = a*x*x + b*x + c\n>>> solve(expr, x, dict=True)\n[{x: (-b + sqrt(-4*a*c + b**2))/(2*a)}, {x: -(b + sqrt(-4*a*c + b**2))/(2*a)}]\n```", "```py\n>>> from sympy import Symbol, solve, pprint\n>>> s = Symbol('s')\n>>> u = Symbol('u')\n>>> t = Symbol('t')\n>>> a = Symbol('a')\n>>> expr = u*t + (1/2)*a*t*t - s\n>>> t_expr = solve(expr,t, dict=True)\n>>> pprint(t_expr)\n```", "```py\n>>> x = Symbol('x')\n>>> y = Symbol('y')\n>>> expr1 = 2*x + 3*y - 6\n>>> expr2 = 3*x + 2*y – 12\n```", "```py\n>>> solve((expr1, expr2), dict=True)\n[{y: -6/5, x: 24/5}]\n```", "```py\n>>> soln = solve((expr1, expr2), dict=True)\n>>> soln = soln[0]\n>>> expr1.subs({x:soln[x], y:soln[y]})\n0\n>>> expr2.subs({x:soln[x], y:soln[y]})\n0\n```", "```py\n>>> from sympy.plotting import plot\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> plot(2*x+3)\n```", "```py\n>>> plot((2*x + 3), (x, -5, 5))\n```", "```py\n>>> plot(2*x + 3, (x, -5, 5), title='A Line', xlabel='x', ylabel='2x+3')\n```", "```py\n>>> p = plot(2*x + 3, (x, -5, 5), title='A Line', xlabel='x', ylabel='2x+3', show=False)\n```", "```py\n>>> p.save('line.png')\n```", "```py\n   >>> expr = input('Enter an expression: ')\n   Enter an expression: 2*x + 3*y - 6\n➊ >>> expr = sympify(expr)\n➋ >>> y = Symbol('y')\n   >>> solve(expr, y)\n➌ [-2*x/3 + 2]\n```", "```py\n   >>> solutions = solve(expr, 'y')\n➍ >>> expr_y = solutions[0]\n   >>> expr_y\n   -2*x/3 + 2\n```", "```py\n'''\nPlot the graph of an input expression\n'''\n\nfrom sympy import Symbol, sympify, solve\nfrom sympy.plotting import plot\n\ndef plot_expression(expr):\n\n    y = Symbol('y')\n    solutions = solve(expr, y)\n    expr_y = solutions[0]\n    plot(expr_y)\n\nif __name__=='__main__':\n\n    expr = input('Enter your expression in terms of x and y: ')\n\n    try:\n        expr = sympify(expr)\n    except SympifyError:\n        print('Invalid input')\n    else:\n        plot_expression(expr)\n```", "```py\n>>> from sympy.plotting import plot\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> plot(2*x+3, 3*x+1)\n```", "```py\n   >>> from sympy.plotting import plot\n   >>> from sympy import Symbol\n   >>> x = Symbol('x')\n➊ >>> p = plot(2*x+3, 3*x+1, legend=True, show=False)\n➋ >>> p[0].line_color = 'b'\n➌ >>> p[1].line_color = 'r'\n   >>> p.show()\n```", "```py\n>>> expr1 = input('Enter your first expression in terms of x and y: ')\n>>> expr2 = input('Enter your second expression in terms of x and y: ')\n```", "```py\nfor i in range(2, n+1):\n    series = series + (x**i)/i\n```", "```py\n   >>> from sympy import Symbol, summation, pprint\n   >>> x = Symbol('x')\n   >>> n = Symbol('n')\n➊ >>> s = summation(x**n/n, (n, 1, 5))\n   >>> pprint(s)\n   x5   x4   x3   x2\n   -- + -- + -- + -- + x\n   5     4   3     2\n```", "```py\n>>> s.subs({x:1.2})\n3.51206400000000\n```", "```py\nEnter the nth term: a+(n-1)*d\nEnter the number of terms: 3\n3·a + 3·d\n```", "```py\n   >>> from sympy import Poly, Symbol, solve_poly_inequality\n   >>> x = Symbol('x')\n➊ >>> ineq_obj = -x**2 + 4 < 0\n➋ >>> lhs = ineq_obj.lhs\n➌ >>> p = Poly(lhs, x)\n➍ >>> rel = ineq_obj.rel_op\n   >>> solve_poly_inequality(p, rel)\n   [(-oo, -2), (2, oo)]\n```", "```py\n   >>> from sympy import Symbol, Poly, solve_rational_inequalities\n   >>> x = Symbol('x')\n➊ >>> ineq_obj = ((x-1)/(x+2)) > 0\n   >>> lhs = ineq_obj.lhs\n➋ >>> numer, denom = lhs.as_numer_denom()\n   >>> p1 = Poly(numer)\n   >>> p2 = Poly(denom)\n   >>> rel = ineq_obj.rel_op\n➌ >>> solve_rational_inequalities([[((p1, p2), rel)]])\n   (-oo, -2) U (1, oo)\n```", "```py\n>>> from sympy import Symbol, solve, solve_univariate_inequality, sin\n>>> x = Symbol('x')\n>>> ineq_obj = sin(x) - 0.6 > 0\n>>> solve_univariate_inequality(ineq_obj, x, relational=False)\n(0.643501108793284, 2.49809154479651)\n```", "```py\n>>> x = Symbol('x')\n>>> expr = x**2 - 4\n>>> expr.is_polynomial()\nTrue\n>>> expr = 2*sin(x) + 3\n>>> expr.is_polynomial()\nFalse\n```", "```py\n>>> expr = (2+x)/(3+x)\n>>> expr.is_rational_function()\nTrue\n>>> expr = 2+x\n>>> expr.is_rational_function()\nTrue\n>>> expr = 2+sin(x)\n>>> expr.is_rational_function()\nFalse\n```", "```py\n>>> from sympy import sympify\n>>> sympify('x+3>0')\nx + 3 > 0\n```"]