- en: '**3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: REPEAT AFTER ME**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: REPEAT AFTER ME**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Everyone talks about the heroism and glamour of space travel, but some of it
    is routine, repetitive work. When you’re cleaning, gardening in the space station
    greenhouse, or exercising to keep your strength up, you’re following detailed
    plans designed to keep the team safe and the space station operating. Luckily,
    robots take care of some of the drudgery, and they never complain about having
    to repeat themselves.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都在谈论太空旅行的英雄主义和光彩，但其中一些其实是日常的、重复的工作。当你在太空站温室里清洁、种植，或者锻炼保持体力时，你是在遵循详细的计划，以确保团队的安全和太空站的正常运行。幸运的是，机器人会处理一些繁重的工作，而且它们从不抱怨需要重复同样的任务。
- en: 'Whether you’re programming robots or building games, the loop is one of your
    basic programming building blocks. A *loop* is a section of a program that repeats:
    sometimes it repeats a set number of times, and sometimes it continues until a
    particular event takes place. Sometimes, you’ll even set a loop to keep going
    forever. In this chapter, you’ll learn how to use loops to repeat instructions
    a certain number of times in your programs. You’ll use loops, along with your
    knowledge of lists, to display a map and draw a 3D room image.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是在编程机器人还是构建游戏，循环都是你基本的编程构建块之一。*循环*是程序中的一部分，它会重复执行：有时它会重复一定次数，有时会一直执行，直到发生特定事件。有时，你甚至会设置一个循环让它永远运行。在本章中，你将学习如何使用循环在程序中重复指令一定次数。你将结合对列表的理解，使用循环来显示地图并绘制
    3D 房间图像。
- en: '**DISPLAYING MAPS WITH LOOPS**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用循环显示地图**'
- en: In the *Escape* game, we’ll use loops extensively. Often, we’ll use them to
    pull information from a list and perform some action on it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Escape* 游戏中，我们将广泛使用循环。我们经常使用它们从列表中提取信息并执行某些操作。
- en: Let’s start by using loops to display a text map.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用循环显示文本地图开始。
- en: '**MAKING THE ROOM MAP**'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作房间地图**'
- en: We’ll make a new map for the example in this chapter and use `1` to represent
    a wall and `0` to represent a floor space. Our room has a wall all the way around
    the edge and a pillar near the middle. The pillar is the same as a section of
    wall, so it’s also marked with a 1\. I’ve chosen its position so it looks good
    when we draw a 3D room later in this chapter. The room doesn’t have any other
    objects, so we won’t use any other numbers at this time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为本章示例创建一个新地图，使用 `1` 表示墙壁，`0` 表示地面空间。我们的房间四周都有墙壁，中间附近有一根柱子。柱子与墙壁一段相同，因此也用
    1 来表示。我选择了它的位置，这样当我们稍后绘制 3D 房间时，看起来会更好。房间中没有其他物体，因此目前我们不会使用其他数字。
- en: 'In IDLE, open a new Python program, and enter the code in [Listing 3-1](ch03.xhtml#ch03list1),
    saving it as *listing3-1.py*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中，打开一个新的 Python 程序，输入[列表 3-1](ch03.xhtml#ch03list1)中的代码，并将其保存为 *listing3-1.py*：
- en: '*listing3-1.py*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-1.py*'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 3-1: Adding the room map data*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-1：添加房间地图数据*'
- en: 'This program creates a list called `room_map` that contains seven other lists.
    Each list starts and ends with square brackets and is separated from the next
    list with a comma. As you learned in [Chapter 2](ch02.xhtml#ch02), the last list
    doesn’t need a comma after it. Each list represents a row of the map. Run the
    program by clicking **Run** ▸ **Run Module** and you should see the following
    in the shell window:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序创建了一个名为 `room_map` 的列表，包含七个其他列表。每个列表以方括号开始和结束，并且用逗号与下一个列表分隔。正如你在[第 2 章](ch02.xhtml#ch02)中学到的，最后一个列表后面不需要逗号。每个列表代表地图中的一行。点击
    **运行** ▸ **运行模块** 来运行程序，你应该能在 shell 窗口中看到以下内容：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you saw in [Chapter 2](ch02.xhtml#ch02), printing the map list shows you
    all the rows run together, which isn’t a useful way to view a map. We’ll use a
    loop to display the map in a way that is much easier to read.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第 2 章](ch02.xhtml#ch02)中看到的，打印地图列表会将所有行挤在一起，这样查看地图并不方便。我们将使用循环以更易读的方式显示地图。
- en: '**DISPLAYING THE MAP WITH A LOOP**'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用循环显示地图**'
- en: To display the map in rows and columns, delete the last line of your program
    and add the two new lines shown in [Listing 3-2](ch03.xhtml#ch03list2). As before,
    don’t type in the grayed-out lines—just use them to find your place in the program.
    Save your program as *listing3-2.py*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按行列显示地图，删除程序中的最后一行，并添加[列表 3-2](ch03.xhtml#ch03list2)中显示的两行新代码。和之前一样，别输入灰色的行——它们只是帮助你定位在程序中的位置。将程序保存为
    *listing3-2.py*。
- en: '*listing3-2.py*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-2.py*'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 3-2: Using a loop to display the room map*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-2：使用循环显示房间地图*'
- en: '**RED ALERT**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Remember to place a colon at the end of the first new line! The program won’t
    work without it. The second new line should be indented with four spaces to show
    Python which instructions you want to repeat. If you add the colon at the end
    of the* for *line, the spaces are added automatically for you when you press ENTER
    to go to the next line.*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*记得在第一行的末尾加上冒号！没有它，程序将无法正常工作。第二行应该缩进四个空格，以告诉Python你希望重复执行哪些指令。如果你在`for`语句行末加上冒号，按下ENTER进入下一行时，空格会自动添加。*'
- en: 'When you run the program again, you should see the following in the shell:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次运行程序时，应该会在命令行中看到以下内容：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That’s a more useful way to view a map. Now you can easily see that a wall (represented
    by `1`s) runs all around the edge. So how does the code work? The `for` command
    ➊ is the engine here. It’s a loop command that tells Python to repeat a piece
    of code a certain number of times. [Listing 3-2](ch03.xhtml#ch03list2) tells Python
    to repeat the `print()` instruction for each item in our `room_map` list ➋. Each
    item in `room_map` is a list containing one row of the map, so printing them separately
    displays our map one row at a time, resulting in this organized display.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种更有用的地图查看方式。现在你可以轻松看到围绕地图四周的墙壁（由`1`表示）。那么代码是如何工作的呢？这里的引擎是`for`命令➊。它是一个循环命令，告诉Python重复执行某段代码指定的次数。[Listing
    3-2](ch03.xhtml#ch03list2)告诉Python为`room_map`列表中的每个项重复执行`print()`指令➋。`room_map`中的每个项都是一个包含地图一行数据的列表，所以逐行打印它们就能逐行显示我们的地图，从而得到这种有序的展示效果。
- en: Let’s break down the code in more detail. We use the `range()` function to create
    a sequence of numbers. With `range(7)`, we tell Python to generate a sequence
    of numbers up to, but not including, 7\. Why does it leave out the last number?
    That’s just how the `range()` function works! If we give the `range()` function
    just one number, Python assumes we want to start counting at `0`. So `range(7)`
    creates the sequence of numbers 0, 1, 2, 3, 4, 5, and 6.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地分解一下代码。我们使用`range()`函数来创建一个数字序列。通过`range(7)`，我们告诉Python生成一个不包含7的数字序列。为什么不包括最后一个数字呢？这就是`range()`函数的工作方式！如果我们只给`range()`函数一个数字，Python会默认从`0`开始计数。所以`range(7)`生成的数字序列是0、1、2、3、4、5和6。
- en: Each time the code repeats, the variable in the `for` command takes the next
    item from the sequence. In this case, the `y` variable takes on the values `0`,
    `1`, `2`, `3`, `4`, `5`, and `6` in turn. This matches the index numbers in `room_map`
    perfectly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每次代码重复时，`for`命令中的变量会从序列中取出下一个项。在这种情况下，`y`变量依次取值`0`、`1`、`2`、`3`、`4`、`5`和`6`。这与`room_map`中的索引值完美匹配。
- en: I’ve chosen `y` as the variable name because we’re using it to represent which
    map row we want to display, and the row on the map is referred to as the y-coordinate.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择`y`作为变量名，因为我们用它来表示我们想要显示的地图行，地图上的行被称为y坐标。
- en: The `print(room_map[y])` command ➋ is indented four spaces, telling Python that
    this is the chunk of code we want our `for` loop ➊ to repeat.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(room_map[y])`命令➋缩进了四个空格，告诉Python这是我们希望`for`循环➊重复执行的代码块。'
- en: The first time through the loop, `y` has a value of `0`, so `print(room_map[y])`
    prints the first item in `room_map`, which is a list containing the data for the
    first row of the map. The second time through, `y` has a value of `1`, so `print(room_map[y])`
    prints the second row. The code repeats until it’s printed all seven lists inside
    `room_map`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 循环第一次执行时，`y`的值为`0`，所以`print(room_map[y])`打印`room_map`中的第一个项，即包含地图第一行数据的列表。第二次执行时，`y`的值为`1`，所以`print(room_map[y])`打印第二行。代码会一直重复，直到打印完`room_map`中的所有七个列表。
- en: '**TRAINING MISSION #1**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: In an emergency situation on the space station, you might need to issue a distress
    signal. Write a simple program to print the word *Mayday!* three times only, using
    a loop.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在太空站的紧急情况下，你可能需要发出求救信号。编写一个简单的程序，使用循环仅打印三次*Mayday!*。
- en: If you’re stuck, start with [Listing 3-2](ch03.xhtml#ch03list2), used for printing
    the map. You just need to change what the program prints and how many times it
    loops the print code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你卡住了，从[Listing 3-2](ch03.xhtml#ch03list2)开始，它用于打印地图。你只需要改变程序打印的内容以及它循环打印代码的次数。
- en: '**LOOP THE LOOP**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**循环循环**'
- en: Our map output is getting better, but it still has a couple of limitations.
    One is that the commas and brackets make it look cluttered. The other limitation
    is that we can’t do anything with the individual wall panels or spaces in the
    room. We’ll need to be able to handle whatever is at each position in the room
    separately, so we can display its image correctly. To do that, we’ll need to use
    more loops.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的地图输出变得更好了，但仍然有几个限制。其中一个是逗号和括号让它看起来有些杂乱。另一个限制是我们无法对房间中单独的墙面板或空间做任何处理。我们需要能够单独处理房间中每个位置的内容，以便能够正确显示其图像。为此，我们需要使用更多的循环。
- en: '**NESTING LOOPS TO GET ROOM COORDINATES**'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**嵌套循环获取房间坐标**'
- en: The *listing3-2.py* program uses a loop to extract each row of the map. Now
    we need to use another loop to examine each position in the row, so we can access
    the objects there individually. Doing so will enable us to have full control over
    how the items are displayed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-2.py*程序使用循环来提取地图的每一行。现在，我们需要使用另一个循环来检查每行中的每个位置，以便能够单独访问那里的对象。这样做将使我们能够完全控制物品的显示方式。'
- en: 'You just saw that we can repeat a piece of code inside a loop. We can also
    put a loop inside another loop, which is known as a *nested loop*. To see how
    this works, we’ll first use this technique to print the coordinates for each space
    in the room. Edit your code to match [Listing 3-3](ch03.xhtml#ch03list3):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚看到我们可以在循环内重复一段代码。我们还可以将一个循环放入另一个循环中，这种结构被称为*嵌套循环*。为了查看其工作原理，我们首先使用这种技巧来打印房间中每个位置的坐标。编辑你的代码，使其与[清单3-3](ch03.xhtml#ch03list3)匹配：
- en: '*listing3-3.py*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-3.py*'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 3-3: Printing the coordinates*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-3：打印坐标*'
- en: '**RED ALERT**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*As every astronaut knows, space can be dangerous. Spaces can, too. If the
    indentation in a loop is wrong, the program won’t work correctly. Indent the first*
    print() *command* ➌ *with eight spaces so it’s part of the inner* x *loop. Make
    sure the final* print() *instruction* ➍ *is lined up with the second* for *command*
    ➋ *(with four spaces of indentation) so it stays in the outer loop. When you start
    a new line, Python indents it the same as the previous one, but you can delete
    the indentation when you no longer need it.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*正如每个宇航员所知道的那样，太空可能是危险的。空间也是如此。如果循环中的缩进不正确，程序将无法正常工作。将第一个*print()*命令➌*缩进八个空格，使其成为内层*
    x *循环的一部分。确保最后的*print()*指令➍*与第二个*for*命令➋*(缩进四个空格)对齐，这样它就留在外层循环中。当你开始新的一行时，Python
    会像上一行一样自动缩进，但当你不再需要缩进时，你可以删除它。*'
- en: 'Save your program as *listing3-3.py* and run the program by clicking **Run**
    ▸ **Run Module**. You’ll see the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的程序保存为*listing3-3.py*并通过点击**运行** ▸ **运行模块**来运行程序。你将看到以下输出：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The output continues and ends on `y= 6 x= 4`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出继续并以`y= 6 x= 4`结束。
- en: 'We’ve set up the `y` loop the same as before so it repeats seven times ➊, once
    for each number from `0` to `6`, putting that value into the `y` variable. This
    is what is different in our program this time: inside the `y` loop, we start a
    new `for` loop that uses the `x` variable and gives it a `range` of five values,
    from `0` to `4` ➋. The first time through the `y` loop, `y` is `0`, and `x` then
    takes the values `0`, `1`, `2`, `3`, and `4` in turn while `y` is `0`. The second
    time through the `y` loop, `y` is `1`. We start a new `x` loop, and it takes the
    values `0`, `1`, `2`, `3`, and `4` again while `y` is `1`. This looping keeps
    going until `y` is `6` and `x` is `4`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经像之前一样设置了`y`循环，它会重复七次 ➊，每次处理从`0`到`6`的数字，并将该值赋给`y`变量。这就是我们这次程序不同的地方：在`y`循环内，我们启动了一个新的`for`循环，使用`x`变量，并给它一个包含五个值的`range`，从`0`到`4`
    ➋。第一次执行`y`循环时，`y`是`0`，此时`x`依次取值`0`、`1`、`2`、`3`和`4`，而`y`保持为`0`。第二次执行`y`循环时，`y`变为`1`。我们重新启动一个`x`循环，它再次依次取值`0`、`1`、`2`、`3`和`4`，而`y`保持为`1`。这种循环会一直持续，直到`y`为`6`且`x`为`4`。
- en: 'You can see how the loops work when you look at the program’s output: inside
    the `x` loop, we print the values for `y` and `x` each time the `x` loop repeats
    ➌. When the `x` loop finishes, we print a blank line ➍ before the next repeat
    of the `y` loop. We do this by leaving the `print()` function’s parentheses empty.
    The blank line breaks up where the `y` loop repeats, and the output shows you
    what the values of `x` and `y` are each time through the inner `x` loop. As you
    can see, this program outputs the y- and x-coordinates of every position in the
    room.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看程序的输出，你可以看到循环是如何工作的：在 `x` 循环内部，我们每次重复 `x` 循环时都会打印 `y` 和 `x` 的值➌。当 `x` 循环完成时，我们会打印一个空行
    ➍，然后进入 `y` 循环的下一次迭代。我们通过让 `print()` 函数的括号为空来实现这一点。空行将 `y` 循环的重复内容分隔开，而输出将展示每次
    `x` 循环中 `x` 和 `y` 的值。正如你所看到的，程序输出了房间中每个位置的 y 坐标和 x 坐标。
- en: '**TIP**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: We’ve used the variable names `y` and `x` in our loops, but those variable names
    don’t affect the way the program runs. You could call them `sausages` and `eggs`,
    and the program would work just the same. It wouldn’t be as easy to understand,
    though. Because we’re getting x- and y-coordinates, it makes sense to use `x`
    and `y` for our variable names.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在循环中使用了变量名`y`和`x`，但这些变量名并不会影响程序的运行。你可以把它们叫作`sausages`（香肠）和`eggs`（鸡蛋），程序仍然可以正常工作。不过，这样做就不太容易理解了。因为我们获取的是
    x 和 y 坐标，使用 `x` 和 `y` 作为变量名更为合理。
- en: '**CLEANING UP THE MAP**'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**清理地图**'
- en: 'We’ll use the coordinates in the loops to print our map without any brackets
    and commas. Edit your program to change the inner nested loop as shown in [Listing
    3-4](ch03.xhtml#ch03list4):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用循环中的坐标打印地图，且不显示括号和逗号。请按照 [Listing 3-4](ch03.xhtml#ch03list4) 中所示的方式修改程序，改变内部嵌套循环的内容：
- en: '*listing3-4.py*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-4.py*'
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 3-4: Tidying up the map display*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-4: 整理地图显示*'
- en: 'Save your program as *listing3-4.py* and run the program by clicking **Run**
    ▸ **Run Module**. You should see the following in the shell:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为 *listing3-4.py* 并通过点击 **Run** ▸ **Run Module** 来运行程序。你应该会在终端中看到以下输出：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That map is much cleaner and easier to understand. It works by going through
    the coordinates in the same way the program in [Listing 3-3](ch03.xhtml#ch03list3)
    did. It takes each row in turn using the `y` loop, and then uses the `x` loop
    to get each position in that row. This time, instead of printing the coordinates,
    we look at what is in the `room_map` at each position, and print that. As you
    learned in [Chapter 2](ch02.xhtml#ch02), you can pull any item out of the map
    using coordinates in the form `room_map[y coordinate][x coordinate]`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个地图看起来更简洁，更容易理解。它的工作方式与 [Listing 3-3](ch03.xhtml#ch03list3) 中的程序类似。它通过 `y`
    循环逐行遍历坐标，然后通过 `x` 循环获取每一行中的每个位置。这一次，我们不是打印坐标，而是查看每个位置的 `room_map` 中的内容，并打印出来。正如你在
    [第二章](ch02.xhtml#ch02) 中学到的那样，你可以通过 `room_map[y 坐标][x 坐标]` 的形式来获取地图中的任何项目。
- en: 'The way we’ve formatted the output means the map resembles the room: we put
    all the numbers from one row together, and only start a new line on the screen
    when we start a new row of the map (a new repeat of the `y` loop).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们格式化输出的方式使得地图看起来像房间的布局：我们把同一行中的所有数字放在一起，只有当开始新的一行（`y` 循环的下一次迭代）时，屏幕上才会开始新的一行。
- en: The `print()` instruction inside the `x` loop finishes with `end=""` (with no
    space between the quote marks) to stop it from starting a new line after each
    number. Otherwise, by default, the `print()` function would end each piece of
    output by adding a code that starts a new line. But instead, we tell it to put
    nothing (`""`) at the end. As a result, all the items from one complete run of
    the `x` loop (from `0` to `4`) appear on the same line.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`x` 循环中的 `print()` 指令以 `end=""`（引号之间没有空格）结尾，以防在每个数字后面开始新的一行。否则，默认情况下，`print()`
    函数会在每一项输出后添加一个换行符。但我们告诉它在输出后不加任何内容（`""`）。因此，来自一次完整 `x` 循环（从 `0` 到 `4`）的所有项会显示在同一行。'
- en: After each row is printed, we use an empty `print()` command to start a new
    line. Because we indent this command with only four spaces, it belongs to the
    `y` loop and is not part of the code that repeats in the `x` loop. That means
    it runs only once each time through the `y` loop, after the `x` loop has finished
    printing a row of numbers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每行打印后，我们会使用一个空的 `print()` 命令来开始新的一行。由于我们只用四个空格缩进这个命令，它属于 `y` 循环，而不是 `x` 循环中重复的部分。这意味着它每次只会在
    `y` 循环执行时运行一次，并且是在 `x` 循环打印完一行数字后执行的。
- en: '**TRAINING MISSION #2**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: The final `print()` command is indented using four spaces. See what happens
    when you indent it eight spaces, and then see what happens if you don’t indent
    it at all. In each case, record how many times it runs and how the indentation
    changes the output.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`print()`命令使用了四个空格缩进。试试看如果你将其缩进八个空格，或者不缩进的话会发生什么。每次都记录它运行了多少次，并观察缩进如何影响输出。
- en: '**DISPLAYING A 3D ROOM IMAGE**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**显示3D房间图像**'
- en: You now know enough about maps to display a 3D room image. In [Chapter 1](ch01.xhtml#ch01),
    you learned how to use Pygame Zero to place images on the screen. Let’s combine
    that knowledge with your newfound skills in getting data from the `room_map`,
    so we can display our map with images instead of `0`s and `1`s.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了足够的地图知识，可以显示一个3D房间图像了。在[第1章](ch01.xhtml#ch01)中，你学会了如何使用Pygame Zero将图像放置到屏幕上。让我们将这一知识与新获得的从`room_map`中获取数据的技能结合起来，这样我们就可以用图像而不是`0`和`1`来显示我们的地图。
- en: Click **File** ▸ **New File** to start a new file in Python, and then enter
    the code in [Listing 3-5](ch03.xhtml#ch03list5). You can copy the `room_map` data
    from your most recent program for this chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**文件** ▸ **新建文件**来开始一个新的Python文件，然后输入[Listing 3-5](ch03.xhtml#ch03list5)中的代码。你可以复制本章最新程序中的`room_map`数据。
- en: '*listing3-5.py*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py*'
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 3-5: Code for displaying the room in 3D*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-5：显示房间3D图像的代码*'
- en: 'Save the program as *listing3-5.py*. You need to save it in your *escape* folder,
    because the program will use the files inside the *images* folder stored there.
    Don’t save your file *inside* the *images* folder: your file should be alongside
    it instead. If you haven’t downloaded the *Escape* game files yet, see “[Downloading
    the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7) for download
    instructions.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing3-5.py*。你需要将它保存到*escape*文件夹中，因为程序会使用存储在该文件夹内的*images*文件夹中的文件。不要把文件保存*在*images文件夹里：文件应该和images文件夹并列保存。如果你还没有下载*Escape*游戏文件，请参见[“下载游戏文件”](intro.xhtml#lev8)（第7页）获取下载说明。
- en: The *listing3-5.py* program uses Pygame Zero, so you need to go to the command
    line and enter the instruction pgzrun listing3-5.py to run the program. See “[Running
    the Game](intro.xhtml#lev12)” on [page 9](intro.xhtml#page_9) for advice on running
    programs that use Pygame Zero, including the final *Escape* game.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py*程序使用了Pygame Zero，因此你需要进入命令行并输入指令pgzrun listing3-5.py来运行程序。关于如何运行使用Pygame
    Zero的程序，包括最终的*Escape*游戏，请参见[“运行游戏”](intro.xhtml#lev12)（第9页）。'
- en: The *listing3-5.py* program uses the *Escape* game’s image files to create an
    image of a room. [Figure 3-1](ch03.xhtml#ch03fig1) shows the room with its single
    pillar. The *Escape* game uses a simplified 3D perspective where we can see the
    front and top surfaces of an object. Objects at the front and back of the room
    are drawn at the same size.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py*程序使用了*Escape*游戏的图像文件来创建房间的图像。[图3-1](ch03.xhtml#ch03fig1)显示了房间和它的单个柱子。*Escape*游戏采用了简化的3D透视法，我们可以看到物体的前面和顶部表面。房间前后的物体绘制成相同的大小。'
- en: When you created the spacewalk simulator in [Chapter 1](ch01.xhtml#ch01), you
    saw how the order in which objects are drawn determines which ones are in front
    of the others. In the *Escape* game and [Listing 3-5](ch03.xhtml#ch03list5), the
    objects are drawn from the back of the room to the front, enabling us to create
    the 3D effect. Objects nearer to the viewer (sitting at their computer) appear
    to be in front of those at the back of the room.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.xhtml#ch01)中创建太空行走模拟器时，你看到了对象绘制顺序如何决定哪些对象在其他对象前面。在*Escape*游戏和[Listing
    3-5](ch03.xhtml#ch03list5)中，物体从房间的后面绘制到前面，这样我们就能创建3D效果。离观察者（坐在电脑前的人）更近的物体，看起来会在房间后方的物体前面。
- en: '![image](../images/fig3-1.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-1.jpg)'
- en: '*Figure 3-1: Your first 3D room (left) and the same room with the parts labeled
    (right)*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-1：你的第一个3D房间（左）和标注部件的同一房间（右）*'
- en: '**UNDERSTANDING HOW THE ROOM IS DRAWN**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解房间是如何绘制的**'
- en: Now let’s look at how the *listing3-5.py* program works. Much of the program
    will be familiar to you from [Chapters 1](ch01.xhtml#ch01) and [2](ch02.xhtml#ch02).
    The `WIDTH` ➊ and `HEIGHT` ➋ variables hold the size of the window, and we use
    the `draw()` function to tell Pygame Zero what to draw onscreen ➍. The `y` and
    `x` loops come from [Listing 3-4](ch03.xhtml#ch03list4) earlier in this chapter
    and give us coordinates for each space in the room.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下 *listing3-5.py* 程序是如何工作的。程序中的大部分内容你会在[第1章](ch01.xhtml#ch01)和[第2章](ch02.xhtml#ch02)中见过。`WIDTH`
    ➊ 和 `HEIGHT` ➋ 变量保存了窗口的大小，我们使用 `draw()` 函数告诉 Pygame Zero 要在屏幕上绘制什么 ➍。`y` 和 `x`
    循环来自[Listing 3-4](ch03.xhtml#ch03list4)，为我们提供房间中每个位置的坐标。
- en: Instead of using numbers in the `range()` functions to tell Python how many
    times to repeat our `y` and `x` loops, we’re using the new variables `room_height`
    and `room_width`. These variables store the size of our room map and tell Python
    how many times to repeat the loops. For example, if we changed the `room_height`
    variable to 10, the `y` loop would repeat 10 times and work through 10 rows of
    the map. The `room_width` variable controls how many times the `x` loop repeats
    in the same way, so we can display wider rooms.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再像以前那样在 `range()` 函数中使用数字来告诉 Python 循环多少次，而是使用了新的变量 `room_height` 和 `room_width`。这两个变量存储了房间地图的大小，并告诉
    Python 循环应当执行多少次。例如，如果我们将 `room_height` 变量更改为 10，`y` 循环将执行 10 次，遍历地图中的 10 行。`room_width`
    变量控制了 `x` 循环重复的次数，类似地，我们就可以显示更宽的房间。
- en: '**RED ALERT**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*If you use room widths and heights that are bigger than the actual* room_map
    *data, you’ll cause an error.*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的房间宽度和高度大于实际的* room_map *数据，将会导致错误。*'
- en: 'The *listing3-5.py* program uses two images from the *images* folder: a floor
    tile (with the filename *floor.png*) and a wall pillar (called *pillar.png*),
    as shown in [Figure 3-2](ch03.xhtml#ch03fig2). A *PNG (Portable Network Graphics)*
    is a type of image file that Pygame Zero can use. PNG enables parts of the image
    to be see-through, which is important for our 3D game perspective. Otherwise,
    we wouldn’t be able to see the background scenery through the gaps in a plant,
    for example, and the astronaut would look like they had a square halo around them.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py* 程序使用了来自 *images* 文件夹中的两张图像：一张地板砖（文件名为 *floor.png*）和一张墙壁柱子（名为
    *pillar.png*），如[图3-2](ch03.xhtml#ch03fig2)所示。*PNG（便携式网络图形）* 是一种Pygame Zero可以使用的图像文件类型。PNG格式允许图像的某些部分透明，这对于我们的3D游戏视角非常重要。否则，我们就无法通过植物的空隙看到背景景物，比如宇航员的周围会出现一个方形的光环。'
- en: '![image](../images/fig3-2.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-2.jpg)'
- en: '*Figure 3-2: The images used to make your first 3D room*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-2：用于创建你的第一个3D房间的图像*'
- en: 'Inside the `draw()` function ➍, we use `y` and `x` loops to look at each position
    in the room map in turn. As you saw earlier, we can find the number at each position
    in the map by accessing `room_map``[y][x]`. In this map, that number will be either
    `1` for a wall pillar or `0` for an empty floor space. Instead of printing the
    number onscreen, as we did before, we use the number to look up an image of the
    item in the `DEMO_OBJECTS` list ➎. That list contains our two images ➌: the floor
    tile is at index position `0`, and the wall pillar is at index position `1`. If
    the `room_map` contains a `1` at the position we’re looking at, for example, we’ll
    take the item at list index `1` in the `DEMO_OBJECTS` list, which is the wall
    pillar image. We store that image in the variable `image_to_draw` ➎.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `draw()` 函数 ➍ 内，我们使用 `y` 和 `x` 循环依次查看房间地图中的每个位置。如你之前所见，我们可以通过访问 `room_map``[y][x]`
    来查找地图中每个位置的数字。在这张地图中，数字为 `1` 代表墙壁柱子，数字为 `0` 代表空的地板空间。我们不再像之前那样在屏幕上打印数字，而是使用数字在
    `DEMO_OBJECTS` 列表 ➎ 中查找对应的物品图像。该列表包含了我们的两个图像 ➌：地板砖在索引位置 `0`，墙壁柱子在索引位置 `1`。例如，如果
    `room_map` 中我们查看的位置包含 `1`，我们就会从 `DEMO_OBJECTS` 列表的索引位置 `1` 中获取墙壁柱子的图像。我们将该图像存储在变量
    `image_to_draw` ➎ 中。
- en: We then use `screen.blit()` to draw this image onscreen, giving it the `x` and
    `y` coordinate of the pixel on the screen where we want to draw it ➏. This instruction
    extends over three lines to make it easier to read. The amount of indentation
    on the second and third lines doesn’t matter, because these lines are surrounded
    by the `screen.blit()` parentheses.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `screen.blit()` 在屏幕上绘制该图像，并给定它的 `x` 和 `y` 坐标，表示我们希望将图像绘制到屏幕上的哪个像素位置
    ➏。这条指令跨越了三行，以便更易于阅读。第二行和第三行的缩进量不重要，因为这些行都被 `screen.blit()` 的括号所包围。
- en: '**WORKING OUT WHERE TO DRAW EACH ITEM**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计算每个物品的绘制位置**'
- en: To figure out where to draw each image that makes up the room, we need to do
    a calculation at ➏. We’ll look at how that calculation works, but before we do,
    I’ll explain how the space station was designed. All the images are designed to
    fit a grid. The units we use for measuring images on a computer are called *pixels*
    and are the size of the smallest dot you can see on your screen. We’ll call each
    square of the grid a *tile*. Each tile is 30 pixels across the screen and 30 pixels
    down the screen. It’s the same size as one floor tile. We position objects in
    terms of tiles, so a chair might be 4 tiles down and 4 tiles across, measured
    from the top-left corner.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算每幅构成房间的图像应该绘制的位置，我们需要在 ➏ 处进行一次计算。我们将了解这个计算的过程，但在此之前，我会先解释一下太空站是如何设计的。所有图像的设计都适应网格。我们用来衡量计算机图像的单位叫做
    *像素*，它是你屏幕上能看到的最小点的大小。我们将每个网格的方格称为 *砖块*。每个砖块在屏幕上是 30 像素宽，30 像素高，大小与一个地砖相同。我们是按砖块来定位物体的，因此一把椅子可能位于
    4 个砖块的下方和 4 个砖块的右侧，从左上角开始计算。
- en: '[Figure 3-3](ch03.xhtml#ch03fig3) shows the room we’ve just created with a
    grid laid on top. Each floor tile and pillar is one tile wide. The pillar is tall,
    so it covers three tile spaces: the front surface of the wall pillar is two tiles
    tall, and the top surface of the pillar covers another tile space.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-3](ch03.xhtml#ch03fig3) 显示了我们刚刚创建的房间，并且在上面叠加了一个网格。每个地砖和柱子都是一块砖宽。柱子很高，因此它覆盖了三个砖块位置：墙柱的前表面高两块砖，而柱子的顶部表面覆盖了另外一块砖。'
- en: '![image](../images/fig3-3.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-3.jpg)'
- en: '*Figure 3-3: The tile grid overlaid on your first room*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：覆盖在第一个房间上的砖块网格*'
- en: The `top_left_x` and `top_left_y` variables store the coordinates at which we
    want to start drawing the first image of the room in the window. We never change
    these variables in this chapter. I’ve chosen to start drawing where `x` is 100
    and `y` is 150 so we have a bit of a border around the room image.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`top_left_x` 和 `top_left_y` 变量存储我们希望开始绘制房间的第一幅图像在窗口中的坐标。我们在本章中从不更改这些变量。我选择从
    `x` 为 100 和 `y` 为 150 开始绘制，这样我们在房间图像周围会有一些边距。'
- en: To work out where to draw a piece of wall or floor, we need to convert our map
    positions (which range from `0` to `4` in the `x` direction, for example) into
    pixel positions in the window.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算绘制一块墙壁或地板的位置，我们需要将我们的地图位置（例如，`x` 方向上范围为 `0` 到 `4`）转换为窗口中的像素位置。
- en: Each tile space is 30 pixels square, so we multiply the `x` loop number by `30`
    and add it to the `top_left_x` position to get the x-coordinate for the image.
    In Python, the `*` symbol is for multiplication. The `top_left_x` value is `100`,
    so the first image is drawn at `100 + (0 * 30)`, which is `100`. The second image
    is drawn at `100 + (1 * 30)`, which is `130`, one tile position to the right of
    the first. The third image is drawn at `100 + (2 * 30)`, which is `160`. These
    positions ensure that the images sit perfectly side by side.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个砖块空间是 30 像素见方，所以我们将 `x` 循环次数乘以 `30`，并加上 `top_left_x` 位置，以获得图像的 x 坐标。在 Python
    中，`*` 符号用于乘法运算。`top_left_x` 的值为 `100`，所以第一幅图像绘制在 `100 + (0 * 30)`，即 `100` 位置。第二幅图像绘制在
    `100 + (1 * 30)`，即 `130`，它位于第一幅图像的右侧一个砖块位置。第三幅图像绘制在 `100 + (2 * 30)`，即 `160`。这些位置确保图像紧密地并排显示。
- en: The *y* position is calculated in a similar way. We use `top_left_y` as the
    starting position vertically and add `y * 30` to it to make the images join together
    precisely. The difference is that we subtract the height of the image we’re drawing,
    so we ensure that the images align at the same point at the bottom. As a result,
    tall objects can rise out of a tile space and obscure any scenery or floor tiles
    behind them, making the room display look three-dimensional. If we didn’t align
    the images at the bottom, they would all align at the top, which would destroy
    the 3D effect. The second and third rows of floor tiles would cover up the front
    surface of the back wall, for example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* 位置的计算方式类似。我们使用 `top_left_y` 作为垂直方向的起始位置，然后加上 `y * 30`，以便让图像精准地连接在一起。不同之处在于，我们需要减去正在绘制图像的高度，这样可以确保图像在底部对齐。因此，高大的物体可以从砖块空间中突出出来，遮挡其后面的风景或地砖，使房间显示出三维效果。如果我们没有在底部对齐图像，它们就会在顶部对齐，这会破坏
    3D 效果。例如，第二行和第三行的地砖会遮挡住后墙的前表面。'
- en: '**TRAINING MISSION #3**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #3**'
- en: Now that you know how to display a 3D room, try to adjust the map to change
    the room layout, adding new pillars or floor spaces. You can edit the `room_map`
    data to add new rows or columns to the map. Remember to change the `room_height`
    and `room_width` variables too.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何展示一个3D房间了，试着调整地图，改变房间的布局，添加新的柱子或地板空间。你可以编辑`room_map`数据，向地图中添加新的行或列。记得也要修改`room_height`和`room_width`变量。
- en: Perhaps try making a room with more rows and adding a doorway by replacing the
    1s used for pillars with 0s. In the final *Escape* game, each doorway will be
    three spaces. For best results, design rooms with an odd width and height so you
    can center the door in the wall.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你或许可以尝试设计一个有更多行的房间，并通过将柱子上的1替换为0来添加一个门。在最终的*Escape*游戏中，每个门的宽度将是三格。为了获得最佳效果，设计房间时最好使用奇数的宽度和高度，这样就可以将门居中放置在墙上。
- en: '[Figure 3-4](ch03.xhtml#ch03fig4) shows a room I designed with a width and
    height of 9\. You can try copying my design if you like. I’ve added a grid to
    make it easier to work out the data for the `room_map` list. The wall pillars
    rise two tiles out of the floor, so the grid shown is 11 tiles high. Look at the
    bottoms of the pillars, not the tops, to work out where to position them. See
    the end of the chapter for the code to make this room.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-4](ch03.xhtml#ch03fig4)展示了我设计的一个房间，宽度和高度均为9。如果你愿意，可以尝试复制我的设计。我已添加了一个网格，以便更轻松地计算`room_map`列表的数据。墙柱从地面上升了两格，所以显示的网格高度为11格。请查看墙柱的底部，而不是顶部，以确定它们的位置。查看本章结尾处的代码，了解如何创建这个房间。'
- en: '![image](../images/fig3-4.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-4.jpg)'
- en: '*Figure 3-4: One possible new room design*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-4：一种可能的新的房间设计*'
- en: In the real *Escape* game, the tall wall pillars will only be used at the edges
    of the rooms. They can look a bit odd in the middle of the room, especially if
    they touch the back wall. When we add shadows to the game later in the book, objects
    in the middle of the room won’t look like they’re floating in space, which is
    a risk of this way of simulating a 3D perspective.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的*Escape*游戏中，高大的墙柱仅会用于房间的边缘。如果它们位于房间中央，特别是当它们接触到后墙时，可能会显得有些奇怪。当我们在本书后续添加阴影时，房间中央的物体看起来不会像是漂浮在空中，这是模拟3D透视时的一大风险。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框框，确认你已经学习了本章的关键内容。
- en: '![Images](../images/box.jpg)  The `for` loop repeats a section of code a set
    number of times.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `for`循环会重复执行一段代码指定次数。'
- en: '![Images](../images/box.jpg)  The `range()` function creates a sequence of
    numbers.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `range()`函数生成一系列数字。'
- en: '![Images](../images/box.jpg)  You can use `range()` to tell a `for` loop how
    many times to repeat.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  你可以使用`range()`来告诉`for`循环要重复多少次。'
- en: '![Images](../images/box.jpg)  The colon at the end of the `for` line is essential.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `for`行末的冒号是必不可少的。'
- en: '![Images](../images/box.jpg)  To show Python which lines to repeat in the loop,
    indent the lines using four spaces.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  为了让Python知道在循环中哪些行需要重复，请使用四个空格缩进这些行。'
- en: '![Images](../images/box.jpg)  A loop inside another loop is called a *nested
    loop.*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  一个循环嵌套在另一个循环中，称为*嵌套循环*。'
- en: '![Images](../images/box.jpg)  Images are aligned at the bottom to create a
    3D illusion with tall objects rising up from the floor.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  图片被对齐到底部，以创造出从地面上升起的高大物体的3D错觉。'
- en: '![Images](../images/box.jpg)  The `room_height` and `room_width` variables
    store the room size in *Escape* and are used to set up the loop that displays
    the room.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `room_height`和`room_width`变量存储*Escape*中的房间大小，并用于设置显示房间的循环。'
- en: '![image](../images/f0058-01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0058-01.jpg)'
