- en: '**3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: REPEAT AFTER ME**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**跟我重复一遍**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Everyone talks about the heroism and glamour of space travel, but some of it
    is routine, repetitive work. When you’re cleaning, gardening in the space station
    greenhouse, or exercising to keep your strength up, you’re following detailed
    plans designed to keep the team safe and the space station operating. Luckily,
    robots take care of some of the drudgery, and they never complain about having
    to repeat themselves.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都在谈论太空旅行的英雄主义和光辉，但其中有些工作是日常的、重复的。当你在清洁、在太空站温室中种植植物，或锻炼保持体力时，你在遵循详尽的计划，这些计划是为了确保团队的安全和太空站的正常运作。幸运的是，机器人可以处理一些繁重的工作，而且它们从不抱怨需要重复同样的工作。
- en: 'Whether you’re programming robots or building games, the loop is one of your
    basic programming building blocks. A *loop* is a section of a program that repeats:
    sometimes it repeats a set number of times, and sometimes it continues until a
    particular event takes place. Sometimes, you’ll even set a loop to keep going
    forever. In this chapter, you’ll learn how to use loops to repeat instructions
    a certain number of times in your programs. You’ll use loops, along with your
    knowledge of lists, to display a map and draw a 3D room image.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是编程机器人还是制作游戏，循环都是你基本的编程构件之一。*循环*是程序中的一部分，它会重复执行：有时它会重复固定的次数，有时它会持续到某个特定事件发生。有时，你甚至会设置一个循环让它永远继续下去。在本章中，你将学习如何使用循环在程序中重复执行指令的指定次数。你将使用循环，结合你对列表的知识，来显示地图并绘制3D房间图像。
- en: '**DISPLAYING MAPS WITH LOOPS**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用循环显示地图**'
- en: In the *Escape* game, we’ll use loops extensively. Often, we’ll use them to
    pull information from a list and perform some action on it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Escape*游戏中，我们将广泛使用循环。通常，我们会用它们从列表中提取信息，并对其执行某些操作。
- en: Let’s start by using loops to display a text map.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用循环来显示一个文本地图。
- en: '**MAKING THE ROOM MAP**'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建房间地图**'
- en: We’ll make a new map for the example in this chapter and use 1 to represent
    a wall and 0 to represent a floor space. Our room has a wall all the way around
    the edge and a pillar near the middle. The pillar is the same as a section of
    wall, so it’s also marked with a 1\. I’ve chosen its position so it looks good
    when we draw a 3D room later in this chapter. The room doesn’t have any other
    objects, so we won’t use any other numbers at this time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，我们将创建一个新地图，用1表示墙壁，0表示地板空间。我们的房间四周都有墙壁，中间靠近的地方有一根柱子。柱子和墙壁一样，所以也用1标记。我选择了这个位置，使得我们稍后在本章中绘制3D房间时，它看起来会很好。这个房间没有其他物体，所以目前我们不使用其他数字。
- en: 'In IDLE, open a new Python program, and enter the code in [Listing 3-1](ch03.xhtml#ch03list1),
    saving it as *listing3-1.py*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDLE中，打开一个新的Python程序，输入[Listing 3-1](ch03.xhtml#ch03list1)中的代码，并将其保存为*listing3-1.py*：
- en: '*listing3-1.py*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-1.py*'
- en: room_map = [ [1, 1, 1, 1, 1],
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: room_map = [ [1, 1, 1, 1, 1],
- en: '[1, 0, 0, 0, 1],'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 0, 1, 0, 1],'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 1, 0, 1],'
- en: '[1, 0, 0, 0, 1],'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 0, 0, 0, 1],'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 0, 0, 0, 1],'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 1, 1, 1, 1]'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1]'
- en: ']'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: print(room_map)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: print(room_map)
- en: '*Listing 3-1: Adding the room map data*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-1: 添加房间地图数据*'
- en: 'This program creates a list called room_map that contains seven other lists.
    Each list starts and ends with square brackets and is separated from the next
    list with a comma. As you learned in [Chapter 2](ch02.xhtml#ch02), the last list
    doesn’t need a comma after it. Each list represents a row of the map. Run the
    program by clicking **Run** ▸ **Run Module** and you should see the following
    in the shell window:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序创建了一个名为room_map的列表，其中包含七个其他列表。每个列表以方括号开始和结束，并且与下一个列表之间用逗号分隔。如你在[第2章](ch02.xhtml#ch02)中学到的，最后一个列表后不需要逗号。每个列表表示地图的一行。通过点击**运行**
    ▸ **运行模块**来运行程序，应该能在命令行窗口看到以下内容：
- en: '[[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 0,
    0, 0, 1], [1, 0, 0,'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 0,
    0, 0, 1], [1, 0, 0,'
- en: 0, 1], [1, 1, 1, 1, 1]]
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 0, 1], [1, 1, 1, 1, 1]]
- en: As you saw in [Chapter 2](ch02.xhtml#ch02), printing the map list shows you
    all the rows run together, which isn’t a useful way to view a map. We’ll use a
    loop to display the map in a way that is much easier to read.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[第2章](ch02.xhtml#ch02)中看到的，打印地图列表会把所有行连接在一起，这样查看地图并不直观。我们将使用循环以一种更容易阅读的方式显示地图。
- en: '**DISPLAYING THE MAP WITH A LOOP**'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用循环显示地图**'
- en: To display the map in rows and columns, delete the last line of your program
    and add the two new lines shown in [Listing 3-2](ch03.xhtml#ch03list2). As before,
    don’t type in the grayed-out lines—just use them to find your place in the program.
    Save your program as *listing3-2.py*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按行列显示地图，请删除程序中的最后一行，并添加 [Listing 3-2](ch03.xhtml#ch03list2) 中显示的两行新代码。像以前一样，不要输入灰色的行—仅将它们用来帮助你找到程序中的位置。将程序保存为
    *listing3-2.py*。
- en: '*listing3-2.py*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-2.py*'
- en: --snip--
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '[1, 0, 0, 0, 1],'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 1, 1, 1, 1]'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1]'
- en: ']'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '➊ for y in range(7):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ for y in range(7):'
- en: ➋     print(room_map[y])
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ➋     print(room_map[y])
- en: '*Listing 3-2: Using a loop to display the room map*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-2：使用循环显示房间地图*'
- en: '**RED ALERT**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Remember to place a colon at the end of the first new line! The program won’t
    work without it. The second new line should be indented with four spaces to show
    Python which instructions you want to repeat. If you add the colon at the end
    of the* for *line, the spaces are added automatically for you when you press ENTER
    to go to the next line.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*记得在第一行新代码的末尾加上冒号！没有它，程序将无法正常工作。第二行新代码应该缩进四个空格，以告诉 Python 你希望重复哪些指令。如果你在 for
    行的末尾添加了冒号，按下 ENTER 键进入下一行时，空格会自动为你添加。*'
- en: 'When you run the program again, you should see the following in the shell:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次运行程序时，你应该会在命令行中看到以下内容：
- en: '[1, 1, 1, 1, 1]'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1]'
- en: '[1, 0, 0, 0, 1]'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1]'
- en: '[1, 0, 1, 0, 1]'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 1, 0, 1]'
- en: '[1, 0, 0, 0, 1]'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1]'
- en: '[1, 0, 0, 0, 1]'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1]'
- en: '[1, 0, 0, 0, 1]'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1]'
- en: '[1, 1, 1, 1, 1]'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1]'
- en: That’s a more useful way to view a map. Now you can easily see that a wall (represented
    by 1s) runs all around the edge. So how does the code work? The for command ➊
    is the engine here. It’s a loop command that tells Python to repeat a piece of
    code a certain number of times. [Listing 3-2](ch03.xhtml#ch03list2) tells Python
    to repeat the print() instruction for each item in our room_map list ➋. Each item
    in room_map is a list containing one row of the map, so printing them separately
    displays our map one row at a time, resulting in this organized display.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种更有用的查看地图的方式。现在你可以很容易地看到墙壁（用1表示）环绕在边缘。那么代码是如何工作的呢？for 命令 ➊ 是这里的核心。它是一个循环命令，告诉
    Python 重复执行某段代码一定次数。[Listing 3-2](ch03.xhtml#ch03list2) 告诉 Python 对我们房间地图列表中的每一项执行
    print() 指令 ➋。room_map 中的每一项是一个包含地图一行数据的列表，所以分别打印它们就可以一行一行地展示我们的地图，从而实现这种有序的显示。
- en: Let’s break down the code in more detail. We use the range() function to create
    a sequence of numbers. With range(7), we tell Python to generate a sequence of
    numbers up to, but not including, 7\. Why does it leave out the last number? That’s
    just how the range() function works! If we give the range() function just one
    number, Python assumes we want to start counting at 0. So range(7) creates the
    sequence of numbers 0, 1, 2, 3, 4, 5, and 6.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地解析一下代码。我们使用 range() 函数创建一个数字序列。通过 range(7)，我们告诉 Python 生成一个小于 7 的数字序列。为什么要排除最后一个数字呢？这就是
    range() 函数的工作方式！如果我们只给 range() 函数一个数字，Python 会假设我们希望从 0 开始计数。所以 range(7) 会生成一个数字序列：0、1、2、3、4、5
    和 6。
- en: Each time the code repeats, the variable in the for command takes the next item
    from the sequence. In this case, the y variable takes on the values 0, 1, 2, 3,
    4, 5, and 6 in turn. This matches the index numbers in room_map perfectly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每次代码重复时，for 命令中的变量都会从序列中取出下一个项。在这个例子中，y 变量会依次取值为 0、1、2、3、4、5 和 6。这与 room_map
    中的索引值完全一致。
- en: I’ve chosen y as the variable name because we’re using it to represent which
    map row we want to display, and the row on the map is referred to as the y-coordinate.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了 y 作为变量名，因为我们用它来表示我们想要显示的地图行，而地图中的行被称为 y 坐标。
- en: The print(room_map[y]) command ➋ is indented four spaces, telling Python that
    this is the chunk of code we want our for loop ➊ to repeat.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: print(room_map[y]) 命令 ➋ 被缩进了四个空格，这告诉 Python 这是我们希望 for 循环 ➊ 重复的代码块。
- en: The first time through the loop, y has a value of 0, so print(room_map[y]) prints
    the first item in room_map, which is a list containing the data for the first
    row of the map. The second time through, y has a value of 1, so print(room_map[y])
    prints the second row. The code repeats until it’s printed all seven lists inside
    room_map.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次循环时，y 的值为 0，所以 print(room_map[y]) 打印的是 room_map 中的第一个元素，也就是包含地图第一行数据的列表。第二次循环时，y
    的值为 1，所以 print(room_map[y]) 打印的是第二行。代码会重复，直到它打印完 room_map 中的所有七个列表。
- en: '**TRAINING MISSION #1**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: In an emergency situation on the space station, you might need to issue a distress
    signal. Write a simple program to print the word *Mayday!* three times only, using
    a loop.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在空间站的紧急情况下，你可能需要发出求救信号。编写一个简单的程序，只用循环打印单词*Mayday!*三次。
- en: If you’re stuck, start with [Listing 3-2](ch03.xhtml#ch03list2), used for printing
    the map. You just need to change what the program prints and how many times it
    loops the print code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你卡住了，从[Listing 3-2](ch03.xhtml#ch03list2)开始，它用于打印地图。你只需要改变程序打印的内容和它循环打印代码的次数。
- en: '**LOOP THE LOOP**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**循环循环**'
- en: Our map output is getting better, but it still has a couple of limitations.
    One is that the commas and brackets make it look cluttered. The other limitation
    is that we can’t do anything with the individual wall panels or spaces in the
    room. We’ll need to be able to handle whatever is at each position in the room
    separately, so we can display its image correctly. To do that, we’ll need to use
    more loops.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的地图输出已经在改进，但仍然有一些局限性。一个是逗号和括号让它看起来很乱。另一个局限性是我们不能对房间内的单独墙板或空间做任何操作。我们需要能够分别处理房间内每个位置的内容，以便正确显示其图像。为此，我们需要使用更多的循环。
- en: '**NESTING LOOPS TO GET ROOM COORDINATES**'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**嵌套循环以获取房间坐标**'
- en: The *listing3-2.py* program uses a loop to extract each row of the map. Now
    we need to use another loop to examine each position in the row, so we can access
    the objects there individually. Doing so will enable us to have full control over
    how the items are displayed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-2.py* 程序使用一个循环来提取地图的每一行。现在，我们需要使用另一个循环来检查每一行中的每个位置，以便我们可以单独访问那里存在的对象。这样做将使我们能够完全控制物品的显示方式。'
- en: 'You just saw that we can repeat a piece of code inside a loop. We can also
    put a loop inside another loop, which is known as a *nested loop*. To see how
    this works, we’ll first use this technique to print the coordinates for each space
    in the room. Edit your code to match [Listing 3-3](ch03.xhtml#ch03list3):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚看到我们可以在循环中重复一段代码。我们还可以将一个循环放入另一个循环中，这称为*嵌套循环*。为了了解这个如何工作，我们首先使用这种技术打印房间中每个空间的坐标。编辑你的代码以匹配[Listing
    3-3](ch03.xhtml#ch03list3)：
- en: '*listing3-3.py*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-3.py*'
- en: --snip--
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: '[1, 0, 0, 0, 1],'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 1, 1, 1, 1]'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1]'
- en: ']'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '➊ for y in range(7):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ for y in range(7):'
- en: '➋     for x in range(5):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     for x in range(5):'
- en: ➌         print("y=", y, "x=", x)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ➌         print("y=", y, "x=", x)
- en: ➍     print()
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ➍     print()
- en: '*Listing 3-3: Printing the coordinates*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-3：打印坐标*'
- en: '**RED ALERT**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*As every astronaut knows, space can be dangerous. Spaces can, too. If the
    indentation in a loop is wrong, the program won’t work correctly. Indent the first*
    print() *command* ➌ *with eight spaces so it’s part of the inner* x *loop. Make
    sure the final* print() *instruction* ➍ *is lined up with the second* for *command*
    ➋ *(with four spaces of indentation) so it stays in the outer loop. When you start
    a new line, Python indents it the same as the previous one, but you can delete
    the indentation when you no longer need it.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*正如每个宇航员所知道的，太空可能是危险的，空间也一样。如果循环中的缩进错误，程序就无法正常工作。将第一个* print() *命令* ➌ *用八个空格缩进，使其成为内部*
    x *循环的一部分。确保最后一个* print() *指令* ➍ *与第二个* for *命令* ➋ *(缩进四个空格)对齐，这样它就留在外部循环中。当你开始一行新代码时，Python会将其缩进与上一行相同，但当你不再需要缩进时，可以删除它。*'
- en: 'Save your program as *listing3-3.py* and run the program by clicking **Run**
    ▸ **Run Module**. You’ll see the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing3-3.py*并通过点击**运行** ▸ **运行模块**来运行程序。你将看到以下输出：
- en: y= 0 x= 0
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: y= 0 x= 0
- en: y= 0 x= 1
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: y= 0 x= 1
- en: y= 0 x= 2
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: y= 0 x= 2
- en: y= 0 x= 3
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: y= 0 x= 3
- en: y= 0 x= 4
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: y= 0 x= 4
- en: y= 1 x= 0
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: y= 1 x= 0
- en: y= 1 x= 1
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: y= 1 x= 1
- en: y= 1 x= 2
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: y= 1 x= 2
- en: y= 1 x= 3
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: y= 1 x= 3
- en: y= 1 x= 4
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: y= 1 x= 4
- en: y= 2 x= 0
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: y= 2 x= 0
- en: y= 2 x= 1
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: y= 2 x= 1
- en: y= 2 x= 2
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: y= 2 x= 2
- en: --snip--
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: The output continues and ends on y= 6 x= 4.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将继续，最后结束在 y= 6 x= 4。
- en: 'We’ve set up the y loop the same as before so it repeats seven times ➊, once
    for each number from 0 to 6, putting that value into the y variable. This is what
    is different in our program this time: inside the y loop, we start a new for loop
    that uses the x variable and gives it a range of five values, from 0 to 4 ➋. The
    first time through the y loop, y is 0, and x then takes the values 0, 1, 2, 3,
    and 4 in turn while y is 0. The second time through the y loop, y is 1. We start
    a new x loop, and it takes the values 0, 1, 2, 3, and 4 again while y is 1. This
    looping keeps going until y is 6 and x is 4.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置的 y 循环和之前一样，重复七次 ➊，每次取 0 到 6 之间的数字，将该值赋给 y 变量。这次程序中的不同之处在于：在 y 循环内部，我们启动了一个新的
    for 循环，使用 x 变量并给它一个包含五个值的范围，从 0 到 4 ➋。第一次通过 y 循环时，y 为 0，此时 x 依次取 0、1、2、3、4 的值。第二次通过
    y 循环时，y 为 1，我们再次启动一个新的 x 循环，x 依次取 0、1、2、3、4 的值，这时 y 为 1。这个循环会继续进行，直到 y 为 6，x 为
    4。
- en: 'You can see how the loops work when you look at the program’s output: inside
    the x loop, we print the values for y and x each time the x loop repeats ➌. When
    the x loop finishes, we print a blank line ➍ before the next repeat of the y loop.
    We do this by leaving the print() function’s parentheses empty. The blank line
    breaks up where the y loop repeats, and the output shows you what the values of
    x and y are each time through the inner x loop. As you can see, this program outputs
    the y- and x-coordinates of every position in the room.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看程序的输出，理解循环是如何工作的：在 x 循环内部，每次 x 循环重复时，我们都会打印出 y 和 x 的值 ➌。当 x 循环结束后，我们会打印一个空行
    ➍，然后再开始 y 循环的下一次重复。我们通过让 print() 函数的括号为空来实现这一点。空行会将 y 循环的每次重复分开，输出会显示每次进入内部 x
    循环时 x 和 y 的值。正如你所看到的，这个程序输出了房间中每个位置的 y 坐标和 x 坐标。
- en: '**TIP**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: We’ve used the variable names y and x in our loops, but those variable names
    don’t affect the way the program runs. You could call them sausages and eggs,
    and the program would work just the same. It wouldn’t be as easy to understand,
    though. Because we’re getting x- and y-coordinates, it makes sense to use x and
    y for our variable names.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在循环中使用了变量名 y 和 x，但这些变量名并不会影响程序的运行。你可以把它们叫做香肠和鸡蛋，程序照样能运行。但这样就不容易理解了。因为我们获取的是
    x 和 y 坐标，所以使用 x 和 y 作为变量名是有意义的。
- en: '**CLEANING UP THE MAP**'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**清理地图**'
- en: 'We’ll use the coordinates in the loops to print our map without any brackets
    and commas. Edit your program to change the inner nested loop as shown in [Listing
    3-4](ch03.xhtml#ch03list4):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在循环中使用坐标来打印没有括号和逗号的地图。编辑你的程序，按照 [第 3-4 号列表](ch03.xhtml#ch03list4)的示例修改内部嵌套循环：
- en: '*listing3-4.py*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-4.py*'
- en: --snip--
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'for y in range(7):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'for y in range(7):'
- en: 'for x in range(5):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'for x in range(5):'
- en: print(room_map[y][x], end="")
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: print(room_map[y][x], end="")
- en: print()
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: '*Listing 3-4: Tidying up the map display*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-4: 整理地图显示*'
- en: 'Save your program as *listing3-4.py* and run the program by clicking **Run**
    ▸ **Run Module**. You should see the following in the shell:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为 *listing3-4.py*，然后通过点击 **Run** ▸ **Run Module** 来运行程序。你应该会在 shell 中看到以下内容：
- en: '11111'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '11111'
- en: '10001'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '10001'
- en: '10101'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '10101'
- en: '10001'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '10001'
- en: '10001'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '10001'
- en: '10001'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '10001'
- en: '11111'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '11111'
- en: That map is much cleaner and easier to understand. It works by going through
    the coordinates in the same way the program in [Listing 3-3](ch03.xhtml#ch03list3)
    did. It takes each row in turn using the y loop, and then uses the x loop to get
    each position in that row. This time, instead of printing the coordinates, we
    look at what is in the room_map at each position, and print that. As you learned
    in [Chapter 2](ch02.xhtml#ch02), you can pull any item out of the map using coordinates
    in the form room_map[y coordinate][x coordinate].
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个地图看起来更加清晰，易于理解。它的工作方式与 [第 3-3 号列表](ch03.xhtml#ch03list3)中的程序一样。它逐行处理每一行，通过
    y 循环获取每一行，然后使用 x 循环获取这一行中的每个位置。这次，我们不是输出坐标，而是查看 room_map 中每个位置的内容，并将其打印出来。正如你在
    [第 2 章](ch02.xhtml#ch02) 中学到的那样，你可以通过坐标形式 room_map[y 坐标][x 坐标] 获取地图中的任何项目。
- en: 'The way we’ve formatted the output means the map resembles the room: we put
    all the numbers from one row together, and only start a new line on the screen
    when we start a new row of the map (a new repeat of the y loop).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们格式化输出的方式使得地图看起来像房间：我们把同一行的所有数字放在一起，只有在开始新的一行时（即开始新的 y 循环时）才会在屏幕上换行。
- en: The print() instruction inside the x loop finishes with end="" (with no space
    between the quote marks) to stop it from starting a new line after each number.
    Otherwise, by default, the print() function would end each piece of output by
    adding a code that starts a new line. But instead, we tell it to put nothing ("")
    at the end. As a result, all the items from one complete run of the x loop (from
    0 to 4) appear on the same line.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: x 循环内的 print() 指令以 end="" 结束（引号之间没有空格），以防止每打印一个数字后自动换行。否则，默认情况下，print() 函数会在每个输出项后添加一个换行符。但我们告诉它在结束时什么也不加
    ("")。因此，x 循环的一次完整执行（从 0 到 4）的所有项将出现在同一行上。
- en: After each row is printed, we use an empty print() command to start a new line.
    Because we indent this command with only four spaces, it belongs to the y loop
    and is not part of the code that repeats in the x loop. That means it runs only
    once each time through the y loop, after the x loop has finished printing a row
    of numbers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每打印完一行后，我们使用一个空的 print() 命令来开始新的一行。由于我们仅用四个空格缩进此命令，它属于 y 循环，而不是 x 循环中重复的代码。这意味着它只会在
    y 循环每次执行时运行一次，在 x 循环打印完一行数字后。
- en: '**TRAINING MISSION #2**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: The final print() command is indented using four spaces. See what happens when
    you indent it eight spaces, and then see what happens if you don’t indent it at
    all. In each case, record how many times it runs and how the indentation changes
    the output.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的 print() 命令使用四个空格缩进。试试看当你将它缩进八个空格时会发生什么，再看看如果完全不缩进它会发生什么。在每种情况下，记录它运行了多少次，以及缩进如何改变输出。
- en: '**DISPLAYING A 3D ROOM IMAGE**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**显示 3D 房间图像**'
- en: You now know enough about maps to display a 3D room image. In [Chapter 1](ch01.xhtml#ch01),
    you learned how to use Pygame Zero to place images on the screen. Let’s combine
    that knowledge with your newfound skills in getting data from the room_map, so
    we can display our map with images instead of 0s and 1s.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了足够的地图知识，可以显示 3D 房间图像了。在[第 1 章](ch01.xhtml#ch01)中，你学习了如何使用 Pygame Zero
    将图像显示在屏幕上。让我们将这些知识与获取 room_map 数据的技能结合起来，这样我们就可以使用图像而不是 0 和 1 来显示地图。
- en: Click **File** ▸ **New File** to start a new file in Python, and then enter
    the code in [Listing 3-5](ch03.xhtml#ch03list5). You can copy the room_map data
    from your most recent program for this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **文件** ▸ **新建文件** 开始一个新的 Python 文件，然后输入 [Listing 3-5](ch03.xhtml#ch03list5)
    中的代码。你可以复制你本章最新程序中的 room_map 数据。
- en: '*listing3-5.py*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py*'
- en: room_map = [ [1, 1, 1, 1, 1],
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: room_map = [ [1, 1, 1, 1, 1],
- en: '[1, 0, 0, 0, 1],'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 0, 1, 0, 1],'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 1, 0, 1],'
- en: '[1, 0, 0, 0, 1],'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 0, 0, 0, 1],'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 0, 0, 0, 1],'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 1],'
- en: '[1, 1, 1, 1, 1]'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1]'
- en: ']'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '➊ WIDTH = 800 # window size'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ WIDTH = 800 # 窗口大小'
- en: ➋ HEIGHT = 800
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ HEIGHT = 800
- en: top_left_x = 100
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_x = 100
- en: top_left_y = 150
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_y = 150
- en: ➌ DEMO_OBJECTS = [images.floor, images.pillar]
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ DEMO_OBJECTS = [images.floor, images.pillar]
- en: room_height = 7
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: room_height = 7
- en: room_width = 5
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: room_width = 5
- en: '➍ def draw():'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '⟳ def draw():'
- en: 'for y in range(room_height):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'for y in range(room_height):'
- en: 'for x in range(room_width):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'for x in range(room_width):'
- en: ➎             image_to_draw = DEMO_OBJECTS[room_map[y][x]]
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ➎             image_to_draw = DEMO_OBJECTS[room_map[y][x]]
- en: ➏             screen.blit(image_to_draw,
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ➏             screen.blit(image_to_draw,
- en: (top_left_x + (x*30),
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: (top_left_x + (x*30),
- en: top_left_y + (y*30) - image_to_draw.get_height()))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_y + (y*30) - image_to_draw.get_height()))
- en: '*Listing 3-5: Code for displaying the room in 3D*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-5: 显示 3D 房间的代码*'
- en: 'Save the program as *listing3-5.py*. You need to save it in your *escape* folder,
    because the program will use the files inside the *images* folder stored there.
    Don’t save your file *inside* the *images* folder: your file should be alongside
    it instead. If you haven’t downloaded the *Escape* game files yet, see “[Downloading
    the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7) for download
    instructions.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为 *listing3-5.py*。你需要将它保存在 *escape* 文件夹中，因为程序将使用该文件夹内的 *images* 文件夹中的文件。不要将文件保存在
    *images* 文件夹内部：它应该与该文件夹并列保存。如果你还没有下载 *Escape* 游戏文件，请参见 [第 7 页](intro.xhtml#page_7)的“[下载游戏文件](intro.xhtml#lev8)”部分了解下载说明。
- en: The *listing3-5.py* program uses Pygame Zero, so you need to go to the command
    line and enter the instruction pgzrun listing3-5.py to run the program. See “[Running
    the Game](intro.xhtml#lev12)” on [page 9](intro.xhtml#page_9) for advice on running
    programs that use Pygame Zero, including the final *Escape* game.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py* 程序使用了 Pygame Zero，因此你需要打开命令行并输入指令 `pgzrun listing3-5.py` 来运行程序。关于如何运行使用
    Pygame Zero 的程序，包括最终的 *Escape* 游戏，请参见 [第 9 页](intro.xhtml#page_9)的“[运行游戏](intro.xhtml#lev12)”部分。'
- en: The *listing3-5.py* program uses the *Escape* game’s image files to create an
    image of a room. [Figure 3-1](ch03.xhtml#ch03fig1) shows the room with its single
    pillar. The *Escape* game uses a simplified 3D perspective where we can see the
    front and top surfaces of an object. Objects at the front and back of the room
    are drawn at the same size.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py* 程序使用 *Escape* 游戏的图像文件来创建一个房间的图像。[图 3-1](ch03.xhtml#ch03fig1)
    显示了一个带有单一支柱的房间。*Escape* 游戏使用简化的 3D 透视图，我们可以看到物体的前面和顶部表面。房间前后方的物体绘制成相同的大小。'
- en: When you created the spacewalk simulator in [Chapter 1](ch01.xhtml#ch01), you
    saw how the order in which objects are drawn determines which ones are in front
    of the others. In the *Escape* game and [Listing 3-5](ch03.xhtml#ch03list5), the
    objects are drawn from the back of the room to the front, enabling us to create
    the 3D effect. Objects nearer to the viewer (sitting at their computer) appear
    to be in front of those at the back of the room.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在[第 1 章](ch01.xhtml#ch01)中创建太空行走模拟器时，你已经看到绘制物体的顺序决定了哪些物体在其他物体的前面。在 *Escape*
    游戏和[列表 3-5](ch03.xhtml#ch03list5)中，物体是从房间的后方绘制到前方的，这样我们就能创建 3D 效果。靠近观察者（坐在计算机前）的物体看起来像是在房间后方物体的前面。
- en: '![image](../images/fig3-1.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-1.jpg)'
- en: '*Figure 3-1: Your first 3D room (left) and the same room with the parts labeled
    (right)*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：你的第一个 3D 房间（左）以及带有标注部分的同一个房间（右）*'
- en: '**UNDERSTANDING HOW THE ROOM IS DRAWN**'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解房间是如何绘制的**'
- en: Now let’s look at how the *listing3-5.py* program works. Much of the program
    will be familiar to you from [Chapters 1](ch01.xhtml#ch01) and [2](ch02.xhtml#ch02).
    The WIDTH ➊ and HEIGHT ➋ variables hold the size of the window, and we use the
    draw() function to tell Pygame Zero what to draw onscreen ➍. The y and x loops
    come from [Listing 3-4](ch03.xhtml#ch03list4) earlier in this chapter and give
    us coordinates for each space in the room.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 *listing3-5.py* 程序是如何工作的。程序中的许多内容你应该在[第 1 章](ch01.xhtml#ch01)和[第 2 章](ch02.xhtml#ch02)中已经很熟悉了。WIDTH
    ➊ 和 HEIGHT ➋ 变量存储窗口的大小，我们使用 draw() 函数告诉 Pygame Zero 在屏幕上绘制什么 ➍。y 和 x 循环来自[列表 3-4](ch03.xhtml#ch03list4)，为我们提供房间中每个空间的坐标。
- en: Instead of using numbers in the range() functions to tell Python how many times
    to repeat our y and x loops, we’re using the new variables room_height and room_width.
    These variables store the size of our room map and tell Python how many times
    to repeat the loops. For example, if we changed the room_height variable to 10,
    the y loop would repeat 10 times and work through 10 rows of the map. The room_width
    variable controls how many times the x loop repeats in the same way, so we can
    display wider rooms.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再使用 range() 函数中的数字来告诉 Python 循环重复的次数，而是使用新的变量 room_height 和 room_width。这些变量存储我们的房间地图的大小，并告诉
    Python 循环需要重复多少次。例如，如果我们将 room_height 变量改为 10，y 循环将重复 10 次并处理地图的 10 行。room_width
    变量控制 x 循环重复的次数，以此类推，这样我们就能显示更宽的房间。
- en: '**RED ALERT**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*If you use room widths and heights that are bigger than the actual* room_map
    *data, you’ll cause an error.*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的房间宽度和高度大于实际的* room_map *数据，将会导致错误。*'
- en: 'The *listing3-5.py* program uses two images from the *images* folder: a floor
    tile (with the filename *floor.png*) and a wall pillar (called *pillar.png*),
    as shown in [Figure 3-2](ch03.xhtml#ch03fig2). A *PNG (Portable Network Graphics)*
    is a type of image file that Pygame Zero can use. PNG enables parts of the image
    to be see-through, which is important for our 3D game perspective. Otherwise,
    we wouldn’t be able to see the background scenery through the gaps in a plant,
    for example, and the astronaut would look like they had a square halo around them.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing3-5.py* 程序使用了 *images* 文件夹中的两张图像：一张地板砖（文件名为 *floor.png*）和一根墙柱（名为 *pillar.png*），如[图
    3-2](ch03.xhtml#ch03fig2)所示。*PNG（便携式网络图形）*是一种 Pygame Zero 可以使用的图像文件类型。PNG 支持图像的某些部分透明，这对我们的
    3D 游戏透视图非常重要。否则，我们无法看到植物间隙中的背景景色，例如，宇航员看起来就像是被一个方形光环围绕。'
- en: '![image](../images/fig3-2.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-2.jpg)'
- en: '*Figure 3-2: The images used to make your first 3D room*'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：用于创建第一个 3D 房间的图像*'
- en: 'Inside the draw() function ➍, we use y and x loops to look at each position
    in the room map in turn. As you saw earlier, we can find the number at each position
    in the map by accessing room_map[y][x]. In this map, that number will be either
    1 for a wall pillar or 0 for an empty floor space. Instead of printing the number
    onscreen, as we did before, we use the number to look up an image of the item
    in the DEMO_OBJECTS list ➎. That list contains our two images ➌: the floor tile
    is at index position 0, and the wall pillar is at index position 1. If the room_map
    contains a 1 at the position we’re looking at, for example, we’ll take the item
    at list index 1 in the DEMO_OBJECTS list, which is the wall pillar image. We store
    that image in the variable image_to_draw ➎.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在draw()函数 ➍ 内，我们使用y和x循环依次查看房间地图中的每个位置。如前所述，我们可以通过访问room_map[y][x]来找到地图上每个位置的数字。在这个地图中，数字将是1表示墙柱，0表示空地板空间。我们不再像之前那样将数字直接打印到屏幕上，而是用这个数字在DEMO_OBJECTS列表
    ➎ 中查找相应的图像。该列表包含了我们的两张图像 ➌：地板瓷砖位于索引位置0，墙柱位于索引位置1。如果我们正在查看的room_map位置包含1，比如说，我们就从DEMO_OBJECTS列表中取出索引为1的物品，这就是墙柱的图像。我们将该图像存储在变量image_to_draw
    ➎ 中。
- en: We then use screen.blit() to draw this image onscreen, giving it the x and y
    coordinate of the pixel on the screen where we want to draw it ➏. This instruction
    extends over three lines to make it easier to read. The amount of indentation
    on the second and third lines doesn’t matter, because these lines are surrounded
    by the screen.blit() parentheses.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用screen.blit()将该图像绘制到屏幕上，给它提供屏幕上我们想要绘制的像素坐标x和y ➏。此指令跨越了三行，以便更容易阅读。第二行和第三行的缩进量并不重要，因为这些行被包含在screen.blit()的括号内。
- en: '**WORKING OUT WHERE TO DRAW EACH ITEM**'
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**确定绘制每个物品的位置**'
- en: To figure out where to draw each image that makes up the room, we need to do
    a calculation at ➏. We’ll look at how that calculation works, but before we do,
    I’ll explain how the space station was designed. All the images are designed to
    fit a grid. The units we use for measuring images on a computer are called *pixels*
    and are the size of the smallest dot you can see on your screen. We’ll call each
    square of the grid a *tile*. Each tile is 30 pixels across the screen and 30 pixels
    down the screen. It’s the same size as one floor tile. We position objects in
    terms of tiles, so a chair might be 4 tiles down and 4 tiles across, measured
    from the top-left corner.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定绘制组成房间的每个图像的位置，我们需要在 ➏ 处进行计算。我们将看到这个计算是如何进行的，但在此之前，我将解释空间站的设计。所有图像的设计都要适应一个网格。我们用来衡量计算机上图像的单位叫做*像素*，它是你在屏幕上看到的最小点的大小。我们将网格中的每个小方块称为*瓷砖*。每个瓷砖宽30个像素，纵向也是30个像素。这与一个地板瓷砖的大小相同。我们用瓷砖来定位物体，因此一把椅子可能位于4个瓷砖下、4个瓷砖横向的位置，从左上角测量。
- en: '[Figure 3-3](ch03.xhtml#ch03fig3) shows the room we’ve just created with a
    grid laid on top. Each floor tile and pillar is one tile wide. The pillar is tall,
    so it covers three tile spaces: the front surface of the wall pillar is two tiles
    tall, and the top surface of the pillar covers another tile space.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-3](ch03.xhtml#ch03fig3)显示了我们刚刚创建的房间，并在其上叠加了一个网格。每个地板瓷砖和柱子宽度为一个瓷砖。柱子很高，因此覆盖了三个瓷砖的空间：墙柱的前表面高两块瓷砖，而柱子的顶部表面则覆盖了另一块瓷砖的空间。'
- en: '![image](../images/fig3-3.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-3.jpg)'
- en: '*Figure 3-3: The tile grid overlaid on your first room*'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-3：覆盖在你第一个房间上的瓷砖网格*'
- en: The top_left_x and top_left_y variables store the coordinates at which we want
    to start drawing the first image of the room in the window. We never change these
    variables in this chapter. I’ve chosen to start drawing where x is 100 and y is
    150 so we have a bit of a border around the room image.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_x和top_left_y变量存储我们想要开始在窗口中绘制第一个房间图像的坐标。在本章中，我们从不改变这些变量。我选择从x为100，y为150的地方开始绘制，这样房间图像周围就有一点边框。
- en: To work out where to draw a piece of wall or floor, we need to convert our map
    positions (which range from 0 to 4 in the x direction, for example) into pixel
    positions in the window.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定在哪里绘制墙壁或地板，我们需要将地图上的位置（例如，x方向的范围为0到4）转换为窗口中的像素位置。
- en: Each tile space is 30 pixels square, so we multiply the x loop number by 30
    and add it to the top_left_x position to get the x-coordinate for the image. In
    Python, the * symbol is for multiplication. The top_left_x value is 100, so the
    first image is drawn at 100 + (0 * 30), which is 100. The second image is drawn
    at 100 + (1 * 30), which is 130, one tile position to the right of the first.
    The third image is drawn at 100 + (2 * 30), which is 160. These positions ensure
    that the images sit perfectly side by side.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 每个格子的大小为30像素，所以我们将x循环次数乘以30，并将结果加到top_left_x位置上，得到图像的x坐标。在Python中，*符号表示乘法。top_left_x的值是100，因此第一个图像绘制在100
    + (0 * 30)，即100的位置。第二个图像绘制在100 + (1 * 30)，即130的位置，它比第一个图像向右移动了一格。第三个图像绘制在100 +
    (2 * 30)，即160的位置。这些位置确保了图像并排显示。
- en: The *y* position is calculated in a similar way. We use top_left_y as the starting
    position vertically and add y * 30 to it to make the images join together precisely.
    The difference is that we subtract the height of the image we’re drawing, so we
    ensure that the images align at the same point at the bottom. As a result, tall
    objects can rise out of a tile space and obscure any scenery or floor tiles behind
    them, making the room display look three-dimensional. If we didn’t align the images
    at the bottom, they would all align at the top, which would destroy the 3D effect.
    The second and third rows of floor tiles would cover up the front surface of the
    back wall, for example.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*y*位置的计算方式类似。我们使用top_left_y作为起始垂直位置，并将y * 30加到该位置，以确保图像精确地连接在一起。不同之处在于，我们需要减去我们正在绘制的图像的高度，这样可以确保图像底部对齐。因此，高大的物体可以从格子空间中升起，遮挡住它们后面的景物或地板瓦片，营造出立体的效果。如果我们没有让图像在底部对齐，它们会在顶部对齐，这样就会破坏3D效果。例如，第二排和第三排的地板砖将覆盖住背墙的前表面。'
- en: '**TRAINING MISSION #3**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #3**'
- en: Now that you know how to display a 3D room, try to adjust the map to change
    the room layout, adding new pillars or floor spaces. You can edit the room_map
    data to add new rows or columns to the map. Remember to change the room_height
    and room_width variables too.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何显示一个3D房间了，试着调整地图，改变房间的布局，添加新的柱子或地板空间。你可以编辑room_map数据，向地图中添加新的一行或一列。记得也要修改room_height和room_width变量。
- en: Perhaps try making a room with more rows and adding a doorway by replacing the
    1s used for pillars with 0s. In the final *Escape* game, each doorway will be
    three spaces. For best results, design rooms with an odd width and height so you
    can center the door in the wall.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 也许可以尝试制作一个更多行的房间，并通过将用于柱子的1替换为0，添加一个门口。在最终的*Escape*游戏中，每个门口将占三个格子。为了获得最佳效果，请设计宽度和高度为奇数的房间，这样你可以将门居中在墙上。
- en: '[Figure 3-4](ch03.xhtml#ch03fig4) shows a room I designed with a width and
    height of 9\. You can try copying my design if you like. I’ve added a grid to
    make it easier to work out the data for the room_map list. The wall pillars rise
    two tiles out of the floor, so the grid shown is 11 tiles high. Look at the bottoms
    of the pillars, not the tops, to work out where to position them. See the end
    of the chapter for the code to make this room.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-4](ch03.xhtml#ch03fig4)展示了我设计的一个房间，宽度和高度为9。如果你愿意，可以尝试复制我的设计。我添加了一个网格，以便更容易计算room_map列表中的数据。墙柱从地面上升了两格，所以显示的网格高度为11格。计算柱子位置时，请看柱子的底部，而不是顶部。有关如何制作此房间的代码，请参见本章末尾。'
- en: '![image](../images/fig3-4.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig3-4.jpg)'
- en: '*Figure 3-4: One possible new room design*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-4：一种可能的新房间设计*'
- en: In the real *Escape* game, the tall wall pillars will only be used at the edges
    of the rooms. They can look a bit odd in the middle of the room, especially if
    they touch the back wall. When we add shadows to the game later in the book, objects
    in the middle of the room won’t look like they’re floating in space, which is
    a risk of this way of simulating a 3D perspective.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的*Escape*游戏中，高大的墙柱仅会用于房间的边缘。如果它们位于房间中央，尤其是当它们接触到后墙时，它们看起来可能有点奇怪。当我们在本书的后面为游戏添加阴影时，房间中央的物体看起来就不会像漂浮在空间中，这也是这种模拟3D透视方式的一大风险。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你适合飞行吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 请勾选以下框，确认你已经学会了本章的关键内容。
- en: '![Images](../images/box.jpg)  The for loop repeats a section of code a set
    number of times.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  for循环会重复执行一段代码一定次数。'
- en: '![Images](../images/box.jpg)  The range() function creates a sequence of numbers.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  range()函数创建一个数字序列。'
- en: '![Images](../images/box.jpg)  You can use range() to tell a for loop how many
    times to repeat.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  你可以使用 range() 来告诉 for 循环要重复多少次。'
- en: '![Images](../images/box.jpg)  The colon at the end of the for line is essential.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  for 语句末尾的冒号是必需的。'
- en: '![Images](../images/box.jpg)  To show Python which lines to repeat in the loop,
    indent the lines using four spaces.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  为了告诉 Python 循环中哪些行需要重复，请使用四个空格来缩进这些行。'
- en: '![Images](../images/box.jpg)  A loop inside another loop is called a *nested
    loop.*'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  一个循环嵌套在另一个循环中，这种情况叫做*嵌套循环*。'
- en: '![Images](../images/box.jpg)  Images are aligned at the bottom to create a
    3D illusion with tall objects rising up from the floor.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  图片被对齐到底部，以便创造一个 3D 视觉效果，使高物体从地面上升起。'
- en: '![Images](../images/box.jpg)  The room_height and room_width variables store
    the room size in *Escape* and are used to set up the loop that displays the room.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  room_height 和 room_width 变量存储了 *Escape* 中房间的大小，并用于设置显示房间的循环。'
- en: '![image](../images/f0058-01.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0058-01.jpg)'
