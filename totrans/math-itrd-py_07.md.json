["```py\n*geometry.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    ellipse(200,100,20,20)\n```", "```py\n*geometry.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    rect(20,40,50,30)\n```", "```py\n*geometry.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    translate(50,80);\n    rect(50,100,100,60)\n```", "```py\n*geometry.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    translate(width/2, height/2)\n    rect(50,100,100,60)\n```", "```py\n*geometry.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    translate(width/2,height/2)\n    for i in range(12):\n        ellipse(200,0,50,50)\n rotate(radians(360/12))\n```", "```py\n*geometry.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    translate(width/2,height/2)\n    for i in range(12):\n        rect(200,0,50,50)\n        rotate(radians(360/12))\n```", "```py\n*geometry.pyde*\nt = 0\n\ndef setup():\n    size(600,600)\n\ndef draw():\n    translate(width/2,height/2)\n    rotate(radians(t))\n    for i in range(12):\n        rect(200,0,50,50)\n        rotate(radians(360/12))\n```", "```py\nUnboundLocalError: local variable 't' referenced before assignment\n```", "```py\n*geometry.pyde*\nt = 0\n\ndef setup():\n    size(600,600)\n\ndef draw():\n    global t\n    #set background white\n    background(255)\n translate(width/2,height/2)\n    rotate(radians(t))\n    for i in range(12):\n        rect(200,0,50,50)\n        rotate(radians(360/12))\n    t += 1\n```", "```py\n*geometry.pyde*\nfor i in range(12):\n    translate(200,0)\n    rotate(radians(t))\n    rect(0,0,50,50)\n    rotate(radians(360/12))\n```", "```py\n*geometry.pyde*\nfor i in range(12):\n    pushMatrix() #save this orientation\n    translate(200,0)\n    rotate(radians(t))\n    rect(0,0,50,50)\n    popMatrix() #return to the saved orientation\n    rotate(radians(360/12))\n```", "```py\n    rectMode(CENTER)\n```", "```py\n    rotate(radians(5*t))\n```", "```py\n    translate(width/2,height/2)\n    #rotate(radians(t))\n    for i in range(12):\n        rect(200,0,50,50)\n```", "```py\nrect(30*x,30*y,25,25)\n```", "```py\n*colorGrid.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    #set background white\n    background(255)\n```", "```py\ndef setup():\n    size(600,600)\n\ndef draw():\n    #set background white\n    background(255)\n    for x in range(20):\n        for y in range(20):\n            rect(30*x,30*y,25,25)\n```", "```py\n         d = dist(30*x,30*y,mouseX,mouseY)\n```", "```py\n*colorGrid.pyde*\ndef setup():\n    size(600,600)\n    rectMode(CENTER)\n  ➊ colorMode(HSB)\n\ndef draw():\n    #set background black\n  ➋ background(0)\n    translate(20,20)\n    for x in range(30):\n        for y in range(30):\n          ➌ d = dist(30*x,30*y,mouseX,mouseY)\n            fill(0.5*d,255,255)\n            rect(30*x,30*y,25,25)\n```", "```py\n*triangles.pyde*\ndef setup():\n    size(600,600)\n    rectMode(CENTER)\n\nt = 0\n\ndef draw():\n    global t\n    translate(width/2,height/2)\n    rotate(radians(t))\n    triangle(0,0,100,100,200,-200)\n    t += 0.5\n```", "```py\n*triangles.pyde*\ndef setup():\n    size(600,600)\n    rectMode(CENTER)\n\nt = 0\n\ndef draw():\n    global t\n    translate(width/2,height/2)\n    rotate(radians(t))\n    tri(200) #draw the equilateral triangle\n    t += 0.5\n\n➊ def tri(length):\n '''Draws an equilateral triangle\n    around center of triangle'''\n    ➋ triangle(0,-length,\n             -length*sqrt(3)/2, length/2,\n             length*sqrt(3)/2, length/2)\n```", "```py\n    background(255) #white\n```", "```py\n*triangles.pyde*\ndef setup():\n    size(600,600)\n    rectMode(CENTER)\n\nt = 0\n\ndef draw():\n    global t\n    background(255)#white\n    translate(width/2,height/2)\n  ➊ for i in range(90):\n        #space the triangles evenly\n        #around the circle\n        rotate(radians(360/90))\n      ➋ pushMatrix() #save this orientation\n        #go to circumference of circle\n        translate(200,0)\n        #spin each triangle\n        rotate(radians(t))\n        #draw the triangle\n        tri(100)\n        #return to saved orientation\n    ➌ popMatrix()\n    t += 0.5\n\ndef tri(length):\n  ➍ noFill() #makes the triangle transparent\n\n    triangle(0,-length,\n             -length*sqrt(3)/2, length/2,\n             length*sqrt(3)/2, length/2)\n```", "```py\n        rotate(radians(t+i))\n```", "```py\n        rotate(radians(t+i*360/90))\n```", "```py\n        rotate(radians(t+2*i*360/90))\n```"]