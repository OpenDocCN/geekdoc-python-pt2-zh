["```py\npython -m pip install nltk\n```", "```py\n>>> import nltk\n>>>\n```", "```py\n>>> import nltk\n>>> nltk.download()\n```", "```py\n>>> from nltk.corpus import cmudict\n>>>\n```", "```py\n[['S', 'K', 'AE1', 'R', 'K', 'R', 'OW0']]\n```", "```py\n[['HH', 'AW1', 'S']]\n```", "```py\n[['EY1', 'JH', 'D'], ['EY1', 'JH', 'IH0', 'D']]\n[['L', 'ER1', 'N', 'D'], ['L', 'ER1', 'N', 'IH0', 'D']]\n```", "```py\n   import sys\n   from string import punctuation\n➊ import pprint\n   import json\n   from nltk.corpus import cmudict\n\n➋ cmudict = cmudict.dict()  # Carnegie Mellon University Pronouncing Dictionary\n\n➌ def main():\n    ➍ haiku = load_haiku('train.txt')\n    ➎ exceptions = cmudict_missing(haiku)\n    ➏ build_dict = input(\"\\nManually build an exceptions dictionary (y/n)? \\n\")\n       if build_dict.lower() == 'n':\n           sys.exit()\n       else:\n        ➐ missing_words_dict = make_exceptions_dict(exceptions)\n           save_exceptions(missing_words_dict)\n```", "```py\n➊ def load_haiku(filename):\n       \"\"\"Open and return training corpus of haiku as a set.\"\"\"\n       with open(filename) as in_file:\n     ➋ haiku = set(in_file.read().replace('-', ' ').split())\n     ➌ return haiku\n\n   def cmudict_missing(word_set):\n       \"\"\"Find and return words in word set missing from cmudict.\"\"\"\n    ➍ exceptions = set()\n       for word in word_set:\n           word = word.lower().strip(punctuation)\n           if word.endswith(\"'s\") or word.endswith(\"’s\"):\n               word = word[:-2]\n        ➎ if word not in cmudict:\n               exceptions.add(word)\n       print(\"\\nexceptions:\")\n       print(*exceptions, sep='\\n')\n    ➏ print(\"\\nNumber of unique words in haiku corpus = {}\"\n             .format(len(word_set)))\n       print(\"Number of words in corpus not in cmudict = {}\"\n             .format(len(exceptions)))\n       membership = (1 - (len(exceptions) / len(word_set))) * 100\n    ➐ print(\"cmudict membership = {:.1f}{}\".format(membership, '%'))\n       return exceptions\n```", "```py\n➊ def make_exceptions_dict(exceptions_set):\n       \"\"\"Return dictionary of words & syllable counts from a set of words.\"\"\"\n    ➋ missing_words = {}\n       print(\"Input # syllables in word. Mistakes can be corrected at end. \\n\")\n       for word in exceptions_set:\n           while True:\n            ➌ num_sylls = input(\"Enter number syllables in {}: \".format(word))\n            ➍ if num_sylls.isdigit():\n                   break\n               else:\n                   print(\"                 Not a valid answer!\", file=sys.stderr)\n        ➎ missing_words[word] = int(num_sylls)\n       print()\n    ➏ pprint.pprint(missing_words, width=1)\n\n    ➐ print(\"\\nMake Changes to Dictionary Before Saving?\")\n       print(\"\"\"\n       0 - Exit & Save\n       1 – Add a Word or Change a Syllable Count\n       2 - Remove a Word\n       \"\"\")\n\n    ➑ while True:\n           choice = input(\"\\nEnter choice: \")\n           if choice == '0':\n               break\n           elif choice == '1':\n               word = input(\"\\nWord to add or change: \")\n               missing_words[word] = int(input(\"Enter number syllables in {}: \"\n                                               .format(word)))\n           elif choice == '2':\n               word = input(\"\\nEnter word to delete: \")\n            ➒ missing_words.pop(word, None)\n\n       print(\"\\nNew words or syllable changes:\")\n    ➓ pprint.pprint(missing_words, width=1)\n\n       return missing_words\n```", "```py\n➊ def save_exceptions(missing_words):\n       \"\"\"Save exceptions dictionary as json file.\"\"\"\n    ➋ json_string = json.dumps(missing_words)\n    ➌ f = open('missing_words.json', 'w')\n       f.write(json_string)\n       f.close()\n    ➍ print(\"\\nFile saved as missing_words.json\")\n\n➎ if __name__ == '__main__':\n       main()\n```", "```py\n>>> import json\n>>> d = {'scarecrow': 2, 'moon': 1, 'sake': 2}\n>>> json.dumps(d)\n'{\"sake\": 2, \"scarecrow\": 2, \"moon\": 1}'\n```", "```py\n--snip--\nfroglings\nscatters\npaperweights\nhibiscus\ncumulus\nnightingales\n\nNumber of unique words in haiku corpus = 1523\nNumber of words in corpus not in cmudict = 58\ncmudict membership = 96.2%\n\nManually build an exceptions dictionary (y/n)?\ny\nEnter number syllables in woodcutter: 3\nEnter number syllables in morningglory: 4\nEnter number syllables in cumulus: 3\n--snip--\n```", "```py\n   import sys\n   from string import punctuation\n   import json\n   from nltk.corpus import cmudict\n\n   # load dictionary of words in haiku corpus but not in cmudict\n   with open('missing_words.json') as f:\n       missing_words = json.load(f)\n\n➊ cmudict = cmudict.dict()\n\n➋ def count_syllables(words):\n       \"\"\"Use corpora to count syllables in English word or phrase.\"\"\"\n       # prep words for cmudict corpus\n       words = words.replace('-', ' ')\n       words = words.lower().split()\n    ➌ num_sylls = 0\n    ➍ for word in words:\n           word = word.strip(punctuation)\n           if word.endswith(\"'s\") or word.endswith(\"’s\"):\n               word = word[:-2]\n        ➎ if word in missing_words:\n               num_sylls += missing_words[word]\n           else:\n            ➏ for phonemes in cmudict[word][0]:\n                   for phoneme in phonemes:\n                    ➐ if phoneme[-1].isdigit():\n                           num_sylls += 1\n\n    ➑ return num_sylls\n```", "```py\n[['EY1', 'JH', 'D'], ['EY1', 'JH', 'IH0', 'D']]\n```", "```py\n   def main():\n    ➊ while True:\n           print(\"Syllable Counter\")\n        ➋ word = input(\"Enter word or phrase; else press Enter to Exit: \")\n        ➌ if word == '':\n               sys.exit()\n        ➍ try:\n               num_syllables = count_syllables(word)\n               print(\"number of syllables in {} is: {}\"\n                     .format(word, num_syllables))\n               print()\n           except KeyError:\n               print(\"Word not found.  Try again.\\n\", file=sys.stderr)\n➎ if __name__ == '__main__':\n       main()\n```", "```py\n   import sys\n   import count_syllables\n\n   with open('train.txt.') as in_file:\n    ➊ words = set(in_file.read().split())\n\n➋ missing = []\n\n➌ for word in words:\n       try:\n           num_syllables = count_syllables.count_syllables(word)\n           ##print(word, num_syllables, end='\\n') # uncomment to see word counts\n    ➍ except KeyError:\n           missing.append(word)\n\n➎ print(\"Missing words:\", missing, file=sys.stderr)\n```", "```py\nululation 4\nintimated 4\nsand 1\nworms 1\nleatherneck 3\ncontenting 3\nscandals 2\nlivelihoods 3\nintertwining 4\nbeaming 2\nuntruthful 3\nadvice 2\naccompanying 5\ndeathly 2\nhallos 2\n```"]