["```py\n>>> from random import randint\n\n>>> trials = 100000\n\n>>> success = 0\n\n>>> for trial in range(trials):\n\n           faces = set()\n\n           for rolls in range(6):\n\n               roll = randint(1, 6)\n\n               faces.add(roll)\n\n           if len(faces) == 6:\n\n               success += 1\n\n>>> print(\"probability of success = {}\".format(success/trials))\n\nprobability of success = 0.01528\n```", "```py\n➊ import random\n\n➋ def user_prompt(prompt, default=None):\n       \"\"\"Allow use of default values in input.\"\"\"\n    ➌ prompt = '{} [{}]: '.format(prompt, default)\n    ➍ response = input(prompt)\n    ➎ if not response and default:\n           return default\n       else:\n           return response\n\n   # input number of times to run simulation\n➏ num_runs = int(user_prompt(\"Input number of runs\", \"20000\"))\n```", "```py\n   # assign counters for ways to win\n➊ first_choice_wins = 0\n   pick_change_wins = 0\n➋ doors = ['a', 'b', 'c']\n\n   # run Monte Carlo\n➌ for i in range(num_runs):\n       winner = random.choice(doors)\n       pick = random.choice(doors)\n\n    ➍ if pick == winner:\n           first_choice_wins += 1\n       else:\n           pick_change_wins += 1\n\n➎ print(\"Wins with original pick = {}\".format(first_choice_wins))\n   print(\"Wins with changed pick = {}\".format(pick_change_wins))\n   print(\"Probability of winning with initial guess: {:.2f}\"\n         .format(first_choice_wins / num_runs))\n   print(\"Probability of winning by switching: {:.2f}\"\n         .format(pick_change_wins / num_runs))\n\n➏ input(\"\\nPress Enter key to exit.\")\n```", "```py\nInput number of runs [20000]:\nWins with original pick = 6628\nWins with changed pick = 13372\nProbability of winning with initial guess: 0.33\nProbability of winning by switching: 0.67\n\nPress Enter key to exit.\n```", "```py\n➊ >>> import random\n➋ >>> class Dwarf(object):\n        ➌ def __init__(self, name):\n            ➍ self.name = name\n               self.attack = 3\n               self.defend = 4\n               self.body = 5\n        ➎ def talk(self):\n               print(\"I'm a blade-man, I'll cut ya!!!\")\n➏ >>> lenn = Dwarf(\"Lenn\")\n   >>> print(\"Dwarf name = {}\".format(lenn.name))\n   Dwarf name = Lenn\n   >>> print(\"Lenn's attack strength = {}\".format(lenn.attack))\n   Lenn's attack strength = 3\n   >>>\n➐ >>> lenn.talk()\n   I'm a blade-man, I'll cut ya!!!\n```", "```py\n➊ >>> class Elf(object):\n           def __init__(self, name):\n               self.name = name\n               self.attack = 4\n               self.defend = 4\n               self.body = 4\n   >>> esseden = Elf(\"Esseden\")\n   >>> print(\"Elf name = {}\".format(esseden.name))\n   Elf name = Esseden\n   >>> print(\"Esseden body value = {}\".format(esseden.body))\n   Esseden body value = 4\n   >>>\n➋ >>> lenn_attack_roll = random.randrange(1, lenn.attack + 1)\n   >>> print(\"Lenn attack roll = {}\".format(lenn_attack_roll))\n   Lenn attack roll = 3\n➌ >>> esseden_defend_roll = random.randrange(1, esseden.defend + 1)\n   >>> print(\"Esseden defend roll = {}\".format(esseden_defend_roll))\n   Esseden defend roll = 1\n   >>>\n➍ >>> damage = lenn_attack_roll - esseden_defend_roll\n   >>> if damage > 0:\n       esseden.body -= damage\n➎ >>> print(\"Esseden body value = {}\".format(esseden.body))\n   Esseden body value = 2\n```", "```py\nInitialize game window and show closed doors and instructions\nChoose winning door at random\nGet player's door choice\nReveal a door that isn't the winning door or the player's choice\nGet player's choice to switch doors or not\nIf player switches:\n    Reveal new door\n    If winner:\n        Record as win for switching\n    Otherwise:\n        Record as win for staying put\nElse if player stays with first choice:\n    Reveal chosen door\n    If winner:\n        Record as win for staying put\n    Otherwise:\n        Record as win for switching\nDisplay number of wins for each strategy in game window\nReset game and close all doors\n```", "```py\n➊ import random\n   import tkinter as tk\n\n➋ class Game(tk.Frame):\n       \"\"\"GUI application for Monty Hall Problem game.\"\"\"\n\n    ➌ doors = ('a', 'b', 'c')\n\n    ➍ def __init__(self, parent):\n           \"\"\"Initialize the frame.\"\"\"\n        ➎ super(Game, self).__init__(parent)  # parent will be the root window\n        ➏ self.parent = parent\n           self.img_file = 'all_closed.png'  # current image of doors\n           self.choice = ''  # player's door choice\n           self.winner = ''  # winning door\n           self.reveal = ''  # revealed goat door\n        ➐ self.first_choice_wins = 0  # counter for statistics\n           self.pick_change_wins = 0  # counter for statistics\n        ➑ self.create_widgets()\n```", "```py\n    ➊ def create_widgets(self):\n           \"\"\"Create label, button, and text widgets for game.\"\"\"\n           # create label to hold image of doors\n        ➋ img = tk.PhotoImage(file='all_closed.png')\n        ➌ self.photo_lbl = tk.Label(self.parent, image=img,\n                                     text='', borderwidth=0)\n        ➍ self.photo_lbl.grid(row=0, column=0, columnspan=10, sticky='W')\n        ➎ self.photo_lbl.image = img\n\n           # create the instruction label\n        ➏ instr_input = [\n               ('Behind one door is CASH!', 1, 0, 5, 'W'),\n               ('Behind the others:  GOATS!!!', 2, 0, 5, 'W'),\n               ('Pick a door:', 1, 3, 1, 'E')\n               ]\n        ➐ for text, row, column, columnspan, sticky in instr_input:\n               instr_lbl = tk.Label(self.parent, text=text)\n               instr_lbl.grid(row=row, column=column, columnspan=columnspan,\n                              sticky=sticky, ➑ipadx=30)\n```", "```py\n          # create radio buttons for getting initial user choice\n        ➊ self.door_choice = tk.StringVar()\n           self.door_choice.set(None)\n\n        ➋ a = tk.Radiobutton(self.parent, text='A', variable=self.door_choice,\n                              value='a', command=self.win_reveal)\n           b = tk.Radiobutton(self.parent, text='B', variable=self.door_choice,\n                              value='b', command=self.win_reveal)\n           c = tk.Radiobutton(self.parent, text='C', variable=self.door_choice,\n                              value='c', command=self.win_reveal)\n\n           # create widgets for changing door choice\n        ➌ self.change_door = tk.StringVar()\n           self.change_door.set(None)\n\n        ➍ instr_lbl = tk.Label(self.parent, text='Change doors?')\n           instr_lbl.grid(row=2, column=3, columnspan=1, sticky='E')\n\n        ➎ self.yes = tk.Radiobutton(self.parent, state='disabled', text='Y',\n                                     variable=self.change_door, value='y',\n                                     command=self.show_final)\n           self.no = tk.Radiobutton(self.parent, state='disabled', text='N',\n                                    variable=self.change_door, value='n',\n                                    command=self.show_final)\n\n           # create text widgets for win statistics\n        ➏ defaultbg = self.parent.cget('bg')\n        ➐ self.unchanged_wins_txt = tk.Text(self.parent, width=20,\n                                             height=1, wrap=tk.WORD,\n                                             bg=defaultbg, fg='black',\n                                             borderwidth=0)\n           self.changed_wins_txt = tk.Text(self.parent, width=20,\n                                           height=1, wrap=tk.WORD, bg=defaultbg,\n                                           fg='black', borderwidth=0)\n```", "```py\n           # place the widgets in the frame\n        ➊ a.grid(row=1, column=4, sticky='W', padx=20)\n           b.grid(row=1, column=4, sticky='N', padx=20)\n           c.grid(row=1, column=4, sticky='E', padx=20)\n           self.yes.grid(row=2, column=4, sticky='W', padx=20)\n           self.no.grid(row=2, column=4, sticky='N', padx=20)\n        ➋ self.unchanged_wins_txt.grid(row=1, column=5, columnspan=5)\n           self.changed_wins_txt.grid(row=2, column=5, columnspan=5)\n```", "```py\n    ➊ def update_image(self):\n           \"\"\"Update current doors image.\"\"\"\n        ➋ img = tk.PhotoImage(file=self.img_file)\n        ➌ self.photo_lbl.configure(image=img)\n        ➍ self.photo_lbl.image = img\n```", "```py\n    ➊ def win_reveal(self):\n           \"\"\"Randomly pick winner and reveal unchosen door with goat.\"\"\"\n        ➋ door_list = list(self.doors)\n        ➌ self.choice = self.door_choice.get()\n           self.winner = random.choice(door_list)\n\n        ➍ door_list.remove(self.winner)\n\n        ➎ if self.choice in door_list:\n               door_list.remove(self.choice)\n               self.reveal = door_list[0]\n           else:\n               self.reveal = random.choice(door_list)\n\n        ➏ self.img_file = ('reveal_{}.png'.format(self.reveal))\n           self.update_image()\n\n           # turn on and clear yes/no buttons\n        ➐ self.yes.config(state='normal')\n           self.no.config(state='normal')\n           self.change_door.set(None)\n\n           # close doors 2 seconds after opening\n        ➑ self.img_file = 'all_closed.png'\n           self.parent.after(2000, self.update_image)\n```", "```py\n    ➊ def show_final(self):\n           \"\"\"Reveal image behind user's final door choice & count wins.\"\"\"\n        ➋ door_list = list(self.doors)\n\n        ➌ switch_doors = self.change_door.get()\n\n        ➍ if switch_doors == 'y':\n               door_list.remove(self.choice)\n               door_list.remove(self.reveal)\n            ➎ new_pick = door_list[0]\n            ➏ if new_pick == self.winner:\n                   self.img_file = 'money_{}.png'.format(new_pick)\n                   self.pick_change_wins += 1\n               else:\n                   self.img_file = 'goat_{}.png'.format(new_pick)\n                   self.first_choice_wins += 1\n        ➐ elif switch_doors == 'n':\n            ➑ if self.choice == self.winner:\n                   self.img_file = 'money_{}.png'.format(self.choice)\n                   self.first_choice_wins += 1\n               else:\n                   self.img_file = 'goat_{}.png'.format(self.choice)\n                   self.pick_change_wins += 1\n\n           # update door image\n        ➒ self.update_image()\n```", "```py\n           # update displayed statistics\n        ➊ self.unchanged_wins_txt.delete(1.0, 'end')\n        ➋ self.unchanged_wins_txt.insert(1.0, 'Unchanged wins = {:d}'\n                                          .format(self.first_choice_wins))\n           self.changed_wins_txt.delete(1.0, 'end')\n           self.changed_wins_txt.insert(1.0, 'Changed wins = {:d}'\n                                        .format(self.pick_change_wins))\n\n           # turn off yes/no buttons and clear door choice buttons\n        ➌ self.yes.config(state='disabled')\n           self.no.config(state='disabled')\n        ➍ self.door_choice.set(None)\n\n        ➎ # close doors 2 seconds after opening\n           self.img_file = 'all_closed.png'\n           self.parent.after(2000, self.update_image)\n```", "```py\n   # set up root window & run event loop\n➊ root = tk.Tk()\n➋ root.title('Monty Hall Problem')\n➌ root.geometry('1280x820')  # pics are 1280 x 720\n➍ game = Game(root)\n   root.mainloop()\n```"]