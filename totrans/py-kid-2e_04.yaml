- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strings, Lists, Tuples, and Dictionaries
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: 'In [Chapter 2](ch02.xhtml#ch02), we did some basic calculations with Python
    and learned about variables. In this chapter, we’ll work with other items in Python
    programs: strings, lists, tuples, and dictionaries. You’ll use strings to display
    messages in your programs (such as “Get Ready” and “Game Over” messages in a game).
    You’ll also discover how lists, tuples, and dictionaries are used to store collections
    of things.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When programming, we usually call text a *string*. Think of a string as a collection
    of letters. All the letters, numbers, and symbols in this book could be a string,
    and so could your name and address. In fact, the first Python program we created
    in [Chapter 1](ch01.xhtml#ch01) used a string: “Hello World.”'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Creating Strings
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Python, we create a string by putting quotes around text because programming
    languages need to distinguish between different types of values. (We need to tell
    the computer whether a value is a number, a string, or something else.) For example,
    we could take our fred variable from [Chapter 2](ch02.xhtml#ch02) and use it to
    label a string:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0026-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to see what’s “inside” fred, we could enter print(fred):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also use single quotes to create a string, like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, if you try to enter more than one line of text for your string using
    only a single (′) or double quote (") or if you start with one type of quote and
    finish with another, you’ll get an error message in the Python Shell. For example,
    enter the following line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You’ll see this result:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is an error message complaining about syntax because you did not follow
    the rules for ending a string with a single or double quote.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '*Syntax* means the arrangement and order of words in a sentence or, in this
    case, the arrangement and order of words and symbols in a program. So *SyntaxError*
    means that you did something in an order Python was not expecting, or Python was
    expecting something that you missed. *EOL* means *end-of-line*, so the rest of
    the error message is telling you that Python hit the end of the line and did not
    find a double quote to close (or finish) the string.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'To use more than one line of text in your string (called a *multiline string*),
    use three single quotes (’’’), and then hit ENTER between lines, like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s print the contents of fred to see if this worked:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Handling Problems with Strings
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now consider this silly example of a string, which causes Python to display
    an error message:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the first line, we try to create a string (defined as the variable silly_string)
    enclosed by single quotes, but also containing a mixture of single quotes in the
    words can’t, shouldn’t, and wouldn’t, as well as double quotes. What a mess!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Python is not as smart as a human being, so all it sees is a string
    containing He said, "Aren, followed by a bunch of other characters that it doesn’t
    expect. When Python sees a quotation mark (either a single or double quote), it
    expects a string to start following the first quotation mark and the string to
    end after the next matching quotation mark (either single or double) on that line.
    In this case, the start of the string is the single quotation mark before He,
    and the end of the string, as far as Python is concerned, is the single quote
    after the n in Aren.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: In the last line, Python tells us what sort of error occurred—in this example,
    a syntax error.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Using double instead of single quotes still produces an error:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, Python sees a string bound by double quotes, containing the letters He
    said, (and a space). Everything following that string (from Aren’t on) causes
    the error.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: This is because, from Python’s perspective, all that extra stuff isn’t supposed
    to be there. Python looks for the next matching quote and doesn’t know what you
    want it to do with anything that follows that quote on the same line.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to this problem is a multiline string, which we learned about
    earlier, using *three* single quotes (''''''). This allows us to combine double
    and single quotes in our string without causing errors. In fact, if we use three
    single quotes, we can put any combination of single and double quotes inside the
    string (as long as we don’t try to put three single quotes there). The error-free
    version of our string looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0028-01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: But wait, there’s more. If you really want to use single or double quotes to
    surround a string in Python, instead of three single quotes, you can add a backslash
    (∖) before each quotation mark within the string. This is called *escaping*. It’s
    a way of telling Python, “Yes, I know I have quotes inside my string, and I want
    you to ignore them until you see the end quote.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Escaping strings can make them harder to read, so it’s considered better practice
    to use multiline strings. Still, you might come across code that uses escaping,
    so it’s helpful to know why the backslashes are there.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of how escaping works:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First, at ➊, we create a string with single quotes, using the backslash in front
    of the single quotes inside that string. At ➋, we create a string with double
    quotes, and use the backslash in front of those quotes in the string. In the lines
    that follow, we print the variables we’ve just created. Notice that the backslash
    character doesn’t appear in the strings when we print them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Embedding Values in Strings
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to display a message using the contents of a variable, you can embed
    it in a special string, called an *f-string* (also known as a *formatted string
    literal*). You put braces around the variable name, which will then be replaced
    by the actual value. (*Embedding values*, also referred to as *string substitution*,
    is programmer-speak for “inserting values.”)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to have Python calculate or store the number of points you scored
    in a game, and then add it to a sentence like “I scored 10 points,” add an f before
    the first quote and then replace the number 10 with the variable surrounded by
    braces {}, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we create the variable myscore with the value 1000 and the variable message
    that contains the f-string ''I scored {myscore} points''. On the next line, we
    call print(message) to see the result of our string substitution. The result of
    printing this message is I scored 1000 points. We don’t need to use a variable
    for the message. We could do the same example and just use this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also use more than one variable in a string:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can even put expressions in an f-string, like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, Python evaluates the simple equation between the braces, so
    the printed string contains the result.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Multiplying Strings
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What is 10 multiplied by 5? The answer is 50, of course. But what’s 10 multiplied
    by *a*? Here’s Python’s answer:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Python programmers might multiply strings for a number of reasons, such as
    to line up text with a specific number of spaces when displaying messages in the
    Python Shell. Try printing the following letter in the Python Shell (select **File**
    ▸ **New** **File**, and enter the following code):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once you’ve typed the code into the Python Shell window, select **File** ▸ **Save
    As**. Name your file *myletter.py*. You can then run the code (as we’ve done previously)
    by selecting **Run** ▸ **Run Module**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line of this example, we create the variable spaces by multiplying
    a space character by 25\. We then use that variable in the next three lines to
    align the text to the right of the Python Shell. You can see the result of these
    print statements below:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/03fig01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-1: Running the letter code in the Python Shell*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: WHAT ARE FILES AND FOLDERS?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: A *file* is data (or information) of some kind that can be stored on your computer.
    Files might include photos, videos, ebooks, and even the school report that you
    wrote in Microsoft Word.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: A *folder* (also called a *directory*) is a collection of other folders and
    files. When you clicked **Save As** to save your *myletter.py* file, it was stored
    in a folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: As we’ll see, files and folders are very important in programming.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to using multiplication for alignment, we can also use it to fill
    the screen with annoying messages. Try the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Lists Are More Powerful than Strings
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '“Spider legs, toe of frog, bat wing, slug butter, and snake dandruff” is not
    a very normal shopping list (unless you happen to be a wizard), but we’ll use
    it as our first example of the differences between strings and lists. We could
    store this list of items in the wizard_list variable by using a string like so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0032-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'But we could also create a *list*, a somewhat magical Python object that we
    can manipulate. Here’s what these items would look like written as a list:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Creating a list takes a bit more typing than creating a string, but a list
    is more useful than a string because items in the list can be easily manipulated.
    We can print an item in the list by entering a number (called the *index position*)
    inside square brackets, like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you were expecting the second item to be ‘toe of frog’, you might be wondering
    why ‘bat wing’ was printed. This is because lists start at index position 0, so
    the first item in a list is 0, the second is 1, and the **third** is 2\. That
    may not make a lot of sense to humans, but it does to computers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also change an item in a list. Perhaps our wizard friend just let us
    know that we need to grab snail tongue for them instead of bat wing. Here’s how
    we would change the item in our list:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This sets the item in index position 2, previously bat wing, to snail tongue.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also show a sublist of the items in the list. We do this by using a
    colon (:) inside square brackets. For example, enter the following to see the
    third to fifth items in our list (a brilliant set of ingredients for a lovely
    sandwich):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0033-01.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Writing [2:5] is the same as saying, “Show the items from index position 2 up
    to (but not including) index position 5”—in other words, items 3, 4, and 5.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Lists can be used to store all sorts of items, like numbers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'They can also hold strings:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'They might have mixtures of numbers and strings:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And lists might even store other lists:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This list-within-list example creates three variables: numbers with four numbers,
    strings with eight strings, and mylist using numbers and strings. The third list
    (mylist) has only two elements because it’s a list of variable names, not the
    contents of the variables.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try printing the two elements of mylist separately:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here we can see mylist[0] contains the list of numbers, and mylist[1] is the
    list of strings.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Adding Items to a List
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add items to the end of a list, we use the append function. For example,
    to add a bear burp (I’m sure there is such a thing) to the wizard’s shopping list,
    enter the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can keep adding more magical items to the wizard’s list in the same way,
    like so:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now the wizard’s list looks like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The wizard is clearly ready to work some serious magic!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Removing Items from a List
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To remove items from a list, use the del command (short for *delete*). For
    example, to remove the fifth item in the wizard’s list, snake dandruff, do this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**NOTE**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember that positions start at zero, so wizard_list[4] actually refers to
    the fifth item in the list.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Try removing the items we just added (mandrake, hemlock, and swamp gas) by
    entering the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: List Arithmetic
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can join lists by adding them, just like adding numbers, using a plus (+)
    sign. For example, suppose we have two lists: list1, containing the numbers 1
    through 4, and list2, containing some words. We can add them using the + sign,
    like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can also add the two lists and set the result to another variable:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And we can multiply a list by a number. For example, to multiply list1 by 5,
    we write list1 * 5:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This tells Python to repeat list1 five times, resulting in 1, 2, 1, 2, 1, 2,
    1, 2, 1, 2. On the other hand, division (/) and subtraction (-) give only errors,
    as in these examples:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: But why? Well, joining lists with + and repeating lists with * are straightforward
    enough operations. These concepts also make sense in the real world. For example,
    if I were to hand you two paper shopping lists and say, “Add these two lists,”
    you might write out all the items on another sheet of paper in order, end to end.
    The same might be true if I said, “Multiply this list by 3.” You could imagine
    writing a list of all of the list’s items three times on another sheet of paper.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'But how would you divide a list? For example, consider how you would divide
    a list of six numbers (1 through 6) in two. Here are just three different ways:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Would we divide the list in the middle, split it after the first item, or just
    pick some random place and divide it there? There’s no simple answer, and when
    you ask Python to divide a list, it doesn’t know what to do, either. That’s why
    it responds with an error.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0037-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: 'For the same reason, you can’t add anything other than a list to a list. For
    example, here’s what happens when we try to add the number 50 to list1:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Why do we get an error here? Well, what does it mean to add 50 to a list? Does
    it mean add 50 to each item? But what if the items aren’t numbers? Does it mean
    add the number 50 to the end or beginning of the list?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: In computer programming, commands should work exactly the same way every time
    you enter them. Your computer sees things only in black and white. Ask it to make
    a complicated decision, and it throws up its hands with errors.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Tuples
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A *tuple* is like a list that uses parentheses, as in this example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here we define the variable fibs as the numbers 0, 1, 1, 2, and 3\. Then, as
    with a list, we print the item in index position 3 in the tuple by using print(fibs[3]).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'The main difference between a tuple and a list is that a tuple cannot change
    once you’ve created it. For example, if we try to replace the first value in the
    tuple fibs with the number 4 (just as we replaced values in our wizard_list),
    we get an error message:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Why would you use a tuple instead of a list? Well, sometimes it’s useful to
    use something that you know can never change. If you create a tuple with two elements
    inside, it will always have those two elements.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Python Dictionaries
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Python, a *dict* (short for *dictionary*) is a collection of things, like
    lists and tuples. The difference between dicts and lists or tuples is that each
    item in a dict has a *key* and a corresponding *value*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say we have a list of people and their favorite sports. We could
    put this information into a Python list, with the person’s name followed by their
    sport, like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If I asked you what Rebecca Clarke’s favorite sport is, you could skim through
    that list and find the answer is netball. But what if the list included 100 (or
    many more) people?
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0039-01.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: 'If we store this same information in a dictionary, with the person’s name as
    the key and their favorite sport as the value, the code would look like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We use colons to separate each key from its value, and each key and value is
    surrounded by single quotes. Notice, too, that the items in a dictionary are enclosed
    in braces ({}), not parentheses or square brackets. The result is a dict (where
    each key points to a particular value), as shown in [Table 3-1](ch03.xhtml#ch03tab01).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 3-1:** Keys Pointing to Values in a Dictionary of Favorite Sports'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Value** |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| Ralph Williams | Football |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| Michael Tippett | Basketball |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| Edward Elgar | Baseball |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| Rebecca Clarke | Netball |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| Ethel Smyth | Badminton |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| Frank Bridge | Rugby |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: 'Now, to get Rebecca Clarke’s favorite sport, we access our dictionary favorite_sports
    by using her name as the key, like so:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: And the answer is Netball.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete a value in a dict, use its key. For example, let’s remove Ethel Smyth:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To replace a value in a dict, we also use its key. Say we need to change Ralph
    Williams’s favorite sport from Football to Ice Hockey. We can do so like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We replace the favorite sport of Football with Ice Hockey by using the key Ralph
    Williams.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, working with dictionaries is kind of like working with lists
    and tuples, except that you can’t join dicts with the plus operator (+). If you
    try to do that, you’ll get an error message, as in the following example:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Joining dictionaries doesn’t make sense to Python, so it throws up its hands.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how Python uses strings to store text, and how
    it uses lists and tuples to handle multiple items. You saw that the items in lists
    can be changed, and that you can join one list to another list, but that the values
    in a tuple cannot change. You also learned how to use dictionaries to store values
    with keys that identify them.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following are a few experiments you can try yourself. The answers can be
    found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '#1: Favorites'
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make a list of your favorite hobbies and give the list the variable name games.
    Now make a list of your favorite foods and name the variable foods. Join the two
    lists and name the result favorites. Lastly, print the variable favorites.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 列出你最喜欢的爱好，并将这个列表命名为 games。现在列出你最喜欢的食物，并将该列表命名为 foods。将这两个列表合并，命名合并后的结果为 favorites。最后，打印变量
    favorites。
- en: '#2: Counting Combatants'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2: 计算战斗者'
- en: If there are three buildings with 25 ninjas hiding on each roof and two tunnels
    with 40 samurai hiding inside each tunnel, how many ninjas and samurai are about
    to do battle? (You can do this with one equation in the Python Shell.)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有三座楼，每座楼的屋顶上藏着25个忍者，而有两个隧道，每个隧道里藏着40个武士，那么忍者和武士即将展开战斗的数量是多少？（你可以在 Python Shell
    中通过一个方程式来解决这个问题。）
- en: '#3: Greetings!'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3: 问候！'
- en: 'Create two variables: one that points to your first name and one that points
    to your last name. Now create a string and use placeholders to print your name
    with a message using those two variables, such as “Hi there, Brando Ickett!”'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个变量：一个指向你的名字，一个指向你的姓氏。现在创建一个字符串，使用占位符来打印你的名字并附带一条消息，类似于“你好，Brando Ickett！”
- en: '#4: Multiline Letter'
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4: 多行信件'
- en: Take the letter we created earlier in the chapter and try to print the exact
    same text by using a single print call (and a multiline string).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在本章前面创建的信件，尝试通过一次打印调用（并使用多行字符串）打印出完全相同的文本。
