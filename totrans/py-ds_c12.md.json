["```py\nsepal length   sepal width   petal length   petal width   species\n5.1            3.5           1.4            0.2           Iris-setosa\n4.9            3.0           1.4            0.2           Iris-setosa\n4.7            3.2           1.3            0.2           Iris-setosa\n4.6            3.1           1.5            0.2           Iris-setosa\n```", "```py\n(butter, cheese)\n(cheese, pasta, bread, milk)\n(milk, cheese, eggs, bread, butter)\n(bread, cheese, butter)\n```", "```py\nItemset         Support\n--------------  -------\nbutter, cheese  0.75\nbread, cheese   0.75\nmilk, bread     0.50\nbread, butter   0.50\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('reviews.csv')\n```", "```py\nprint('The number of reviews: ', len(df))\nprint(df[['title', 'rating']].head(10))\n```", "```py\nThe number of reviews:  445\n                                               title  rating\n0  Great inner content! Not that great outer qual...       4\n1                                Very enjoyable read       5\n2                                The updated preface       5\n3  Good for beginner but does not go too far or deep       4\n4                                 Worth Every Penny!       5\n5                                 Easy to understand       5\n6                             Great book for python.       5\n7                   Not bad, but some disappointment       4\n8  Truely for the person that doesn't know how to...       3\n9        Easy to Follow, Good Intro for Self Learner       5\n```", "```py\n$ **pip install google_trans_new**\n```", "```py\n$ **from google_trans_new import google_translator**\n$ **detector = google_translator()**\n$ **detector.detect('Good')**\n```", "```py\n$ **pip show google_trans_new**\n```", "```py\nresponse = (decoded_line + ']')\n```", "```py\nresponse = decoded_line\n```", "```py\n$ **from google_trans_new import google_translator**\n$ **detector = google_translator()**\n$ **detector.detect('Good')**\n['en', 'english']\n```", "```py\nfrom google_trans_new import google_translator\ndetector = google_translator()\ndf['lang'] = df['title'].apply(lambda x: detector.detect(x)[0])\n```", "```py\nprint(df[['title', 'rating', 'lang']])\n```", "```py\n title  rating   lang\n0    Great inner content! Not that great outer qual...       4     en\n1                                  Very enjoyable read       5     en\n2                                  The updated preface       5     en\n3    Good for beginner but does not go too far or deep       4     en\n4                                   Worth Every Penny!       5     en\n`--snip--`\n440                                            Not bad       1     en\n441                                               Good       5     en\n442                                              Super       5     en\n443                           内容はとても良い、作りは×      4     ja\n444                                           非常实用       5  zh-CN\n```", "```py\ndf = df[df['lang'] == 'en']\n```", "```py\nprint(len(df))\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nreviews = df['title'].values\nratings = df['rating'].values\n❶ reviews_train, reviews_test, y_train, y_test = train_test_split(reviews,\n                ratings, test_size=0.2, random_state=1000)\nvectorizer = CountVectorizer()\nvectorizer.fit(reviews_train)\n❷ x_train = vectorizer.transform(reviews_train)\nx_test = vectorizer.transform(reviews_test)\n```", "```py\nprint(len(x_train.toarray()))\n```", "```py\nprint(len(x_test.toarray()))\n```", "```py\nprint(len(x_train.toarray()[0]))\n```", "```py\n442\n```", "```py\nprint(x_train.toarray())\n```", "```py\n[[0 0 0 ... 1 0 0]\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n `--snip--`\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]]\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(x_train, y_train)\n```", "```py\nimport numpy as np\n❶ predicted = classifier.predict(x_test)\naccuracy = ❷ np.mean(❸ predicted == y_test)\nprint(\"Accuracy:\", round(accuracy,2))\n```", "```py\nAccuracy: 0.68\n```", "```py\nfrom sklearn import metrics\nprint(metrics.confusion_matrix(y_test, predicted, labels = [1,2,3,4,5]))\n```", "```py\n[[ 0,  0,  0,  1,  7],\n [ 0,  0,  1,  0,  1],\n [ 0,  0,  0,  4,  3],\n [ 0,  0,  0,  1,  6],\n [ 0,  0,  0,  3, 54]]\n```", "```py\nprint(df.groupby('rating').size())\n```", "```py\nrating\n1     25\n2     15\n3     23\n4     51\n5    290\n```", "```py\nprint(metrics.classification_report(y_test, predicted, labels = [1,2,3,4,5]))\n```", "```py\n precision    recall  f1-score   support\n\n           1       0.00      0.00      0.00         8\n           2       0.00      0.00      0.00         2\n           3       0.00      0.00      0.00         7\n           4       0.11      0.14      0.12         7\n           5       0.76      0.95      0.84        57\n\n    accuracy                           0.68        81\n   macro avg       0.17      0.22      0.19        81\nweighted avg       0.54      0.68      0.60        81\n```", "```py\nimport yfinance as yf\ntkr = yf.Ticker('AAPL')\nhist = tkr.history(period=\"1y\")\n```", "```py\nimport pandas_datareader.data as pdr\nfrom datetime import date, timedelta\nend = date.today()\n❶ start = end - timedelta(days=365)\n❷ index_data = pdr.get_data_stooq('^SPX', start, end)\n```", "```py\ndf = hist.join(index_data, rsuffix = '_idx')\n```", "```py\ndf = df[['Close','Volume','Close_idx','Volume_idx']]\n```", "```py\n Close     Volume  Close_idx  Volume_idx\nDate                                                    \n2021-01-15  126.361000  111598500    3768.25  2741656357\n2021-01-19  127.046791   90757300    3798.91  2485142099\n2021-01-20  131.221039  104319500    3851.85  2350471631\n2021-01-21  136.031403  120150900    3853.07  2591055660\n2021-01-22  138.217926  114459400    3841.47  2290691535\n`--snip--`\n2022-01-10  172.190002  106765600    4670.29  2668776356\n2022-01-11  175.080002   76138300    4713.07  2238558923\n2022-01-12  175.529999   74805200    4726.35  2122392627\n2022-01-13  172.190002   84505800    4659.03  2392404427\n2022-01-14  173.070007   80355000    4662.85  2520603472\n```", "```py\nimport numpy as np\ndf['priceRise'] = np.log(df['Close'] / df['Close'].shift(1))\ndf['volumeRise'] = np.log(df['Volume'] / df['Volume'].shift(1))\ndf['priceRise_idx'] = np.log(df['Close_idx'] / df['Close_idx'].shift(1))\ndf['volumeRise_idx'] = np.log(df['Volume_idx'] / df['Volume_idx'].shift(1))\ndf = df.dropna()\n```", "```py\ndf = df[['priceRise','volumeRise','priceRise_idx','volumeRise_idx']]\n```", "```py\n priceRise  volumeRise  priceRise_idx  volumeRise_idx\nDate                                                            \n2021-01-19   0.005413   -0.206719       0.008103       -0.098232\n2021-01-20   0.032328    0.139269       0.013839       -0.055714\n2021-01-21   0.036003    0.141290       0.000317        0.097449\n2021-01-22   0.015946   -0.048528      -0.003015       -0.123212\n2021-01-25   0.027308    0.319914       0.003609        0.199500\n`--snip--`\n2022-01-10   0.000116    0.209566      -0.001442        0.100199\n2022-01-11   0.016644   -0.338084       0.009118       -0.175788\n2022-01-12   0.002567   -0.017664       0.002814       -0.053288\n2022-01-13  -0.019211    0.121933      -0.014346        0.119755\n2022-01-14   0.005098   -0.050366       0.000820        0.052199\n```", "```py\n❶ conditions = [\n    (df['priceRise'].shift(-1) > 0.01),\n    (df['priceRise'].shift(-1)< -0.01)\n]\n❷ choices = [1, -1]\ndf['Pred'] = ❸ np.select(conditions, choices, default=0)\n```", "```py\nfeatures = df[['priceRise','volumeRise','priceRise_idx','volumeRise_idx']].to_numpy()\nfeatures = np.around(features, decimals=2)\ntarget = df['Pred'].to_numpy()\n```", "```py\nfrom sklearn.model_selection import train_test_split\nrows_train, rows_test, y_train, y_test = train_test_split(features, target, test_size=0.2)\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression()\nclf.fit(rows_train, y_train)\n```", "```py\nprint(clf.score(rows_test, y_test))\n```", "```py\n0.6274509803921569\n```"]