- en: '**13**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**13**'
- en: '**WRITE LESS, CODE MORE**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**写得更少，编码更多**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In this final chapter, I’ve compiled a few of Python’s more advanced features
    that I use to write better code. These are not limited to the Python Standard
    Library. We’ll cover how to make your code compatible with both Python 2 and 3,
    how to create a Lisp-like method dispatcher, how to use context managers, and
    how to create a boilerplate for classes with the `attr` module.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我汇总了我用来写出更好代码的Python一些高级特性。这些特性不仅限于Python标准库。我们将讨论如何让你的代码兼容Python 2和3，如何创建类似Lisp的方法调度器，如何使用上下文管理器，以及如何使用`attr`模块创建类的模板。
- en: '**Using six for Python 2 and 3 Support**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用six实现Python 2和3的支持**'
- en: As you likely know, Python 3 breaks compatibility with Python 2 and shifts things
    around. However, the basics of the language haven’t changed between versions,
    which makes it possible to implement forward and backward compatibility, creating
    a bridge between Python 2 and Python 3.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能知道的，Python 3打破了与Python 2的兼容性，并且做了一些调整。然而，语言的基础在不同版本间并没有改变，这使得实现前向和后向兼容成为可能，从而架起了Python
    2和Python 3之间的桥梁。
- en: Lucky for us, this module already exists! It’s called `six`—because 2 × 3 =
    6.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个模块已经存在！它叫做`six`——因为2 × 3 = 6。
- en: 'The `six` module provides the useful `six.PY3` variable, which is a Boolean
    that indicates whether you are running Python 3 or not. This is the pivot variable
    for any of your codebase that has two versions: one for Python 2 and one for Python
    3\. However, be careful not to abuse it; scattering your codebase with `if six.PY3`
    is going to make it difficult for people to read and understand.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`six`模块提供了有用的`six.PY3`变量，这是一个布尔值，指示你是否正在运行Python 3。这是你代码库中的关键变量，适用于两个版本的代码：一个是Python
    2版本，另一个是Python 3版本。然而，要小心不要滥用它；在代码中到处散布`if six.PY3`会让别人很难阅读和理解你的代码。'
- en: When we discussed generators in “[Generators](ch08.xhtml#lev1sec42)” on [page
    121](ch08.xhtml#page_121), we saw that Python 3 has a great property whereby iterable
    objects are returned instead of lists in various built-in functions, such as `map()`
    or `filter()`. Python 3 therefore got rid of methods like `dict.iteritems()`,
    which was the iterable version of `dict.items()` in Python 2, in favor of making
    `dict.items()` return an iterator rather than a list. This change in methods and
    their return types can break your Python 2 code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在“[生成器](ch08.xhtml#lev1sec42)”一章的[第121页](ch08.xhtml#page_121)讨论生成器时，我们看到Python
    3有一个很棒的特性，它让各种内置函数，如`map()`或`filter()`，返回可迭代对象而不是列表。因此，Python 3摒弃了像`dict.iteritems()`这样的旧方法，它是Python
    2中`dict.items()`的可迭代版本，改为让`dict.items()`返回一个迭代器，而不是列表。这个方法及其返回类型的变化可能会导致你的Python
    2代码出错。
- en: 'The `six` module provides `six.iteritems()` for such cases, which can be used
    to replace Python 2–specific code like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`six`模块为这种情况提供了`six.iteritems()`，可以用来替代像下面这样的Python 2特定代码：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using `six`, you would replace the `mydict.iteritems()` code with Python 2-
    and 3-compliant code like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`six`，你可以将`mydict.iteritems()`代码替换为兼容Python 2和3的代码，如下所示：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And *voilà*, both Python 2 and Python 3 compliance achieved in a snap! The `six.iteritems()`
    function will use either `dict.iteritems()` or `dict.items()` to return a generator,
    depending on the version of Python you’re using. The `six` module provides a lot
    of similar helper functions that can make it easy to support multiple Python versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，*瞧*，Python 2和Python 3的兼容性瞬间达成！`six.iteritems()`函数将根据你使用的Python版本，使用`dict.iteritems()`或`dict.items()`来返回一个生成器。`six`模块提供了许多类似的辅助函数，可以让你轻松支持多个Python版本。
- en: Another example would be the `six` solution to the `raise` keyword, whose syntax
    is different between Python 2 and Python 3\. In Python 2, `raise` will accept
    multiple arguments, but in Python 3, `raise` accepts an exception as its only
    argument and nothing else. Writing a `raise` statement with two or three arguments
    in Python 3 would result in a `SyntaxError`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是`six`解决方案对于`raise`关键字的不同语法问题，在Python 2和Python 3之间有所不同。在Python 2中，`raise`接受多个参数，但在Python
    3中，`raise`只接受一个异常作为参数，不能再有其他参数。在Python 3中，如果你写一个包含两个或三个参数的`raise`语句，会导致`SyntaxError`。
- en: The `six` module provides a workaround here in the form of the function `six.reraise()`,
    which allows you to reraise an exception in whichever version of Python you use.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`six`模块在这里提供了一个解决方法，形式为函数`six.reraise()`，它允许你在任何版本的Python中重新抛出异常。'
- en: '***Strings and Unicode***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***字符串与Unicode***'
- en: Python 3’s enhanced ability to handle advanced encodings solved the string and
    unicode issues of Python 2\. In Python 2, the basic string type is `str`, which
    can only handle basic ASCII strings. The type `unicode`, added later in Python
    2.5, handles real strings of text.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3增强的编码处理能力解决了Python 2中的字符串和unicode问题。在Python 2中，基本的字符串类型是`str`，只能处理基本的ASCII字符串。类型`unicode`是在Python
    2.5中后来添加的，用于处理实际的文本字符串。
- en: In Python 3, the basic string type is still `str`, but it shares the properties
    of the Python 2 `unicode` class and can handle advanced encodings. The `bytes`
    type replaces the `str` type for handling basic character streams.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，基本的字符串类型依然是`str`，但它与Python 2中的`unicode`类共享属性，并能够处理高级编码。`bytes`类型取代了`str`类型，用于处理基本的字符流。
- en: The `six` module again provides functions and constants, such as `six.u` and
    `six.string_types`, to handle the transition. The same compatibility is provided
    for integers, with `six.integer_types` that will handle the `long` type that has
    been removed from Python 3.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`six`模块再次提供了函数和常量，如`six.u`和`six.string_types`，以处理过渡。同样的兼容性也适用于整数，`six.integer_types`将处理已从Python
    3中移除的`long`类型。'
- en: '***Handling Python Modules Moves***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***处理Python模块的迁移***'
- en: In the Python Standard Library, some modules have moved or have been renamed
    between Python 2 and 3\. The `six` module provides a module called `six.moves`
    that handles a lot of these moves transparently.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python标准库中，一些模块在Python 2和Python 3之间已经迁移或更名。`six`模块提供了一个名为`six.moves`的模块，透明地处理了很多这些迁移。
- en: 'For example, the `ConfigParser` module from Python 2 has been renamed to `configparser`
    in Python 3\. [Listing 13-1](ch13.xhtml#ch13list1) shows how code can be ported
    and made compatible with both major Python versions using `six.moves`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Python 2中的`ConfigParser`模块在Python 3中已更名为`configparser`。[列表13-1](ch13.xhtml#ch13list1)展示了如何通过使用`six.moves`将代码移植并兼容两个主要的Python版本：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 13-1: Using six.moves to use ConfigParser() with Python 2 and Python
    3*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表13-1：使用six.moves在Python 2和Python 3中使用ConfigParser()*'
- en: You can also add your own moves via `six.add_move` to handle code transitions
    that `six` doesn’t handle natively.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过`six.add_move`添加自己的迁移处理，来处理`six`本身没有原生支持的代码过渡。
- en: In the event that the `six` library doesn’t cover all your use cases, it may
    be worth building a compatibility module encapsulating `six` itself, thereby ensuring
    that you will be able to enhance the module to fit future versions of Python or
    dispose of (part of) it when you want to stop supporting a particular version
    of the language. Also note that `six` is open source and that you can contribute
    to it rather than maintain your own hacks!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`six`库无法覆盖你所有的使用场景，可能值得构建一个封装`six`的兼容性模块，从而确保你能够增强该模块以适应未来的Python版本，或者在你希望停止支持某个特定版本的语言时，弃用（部分）模块。还需要注意的是，`six`是开源的，你可以为其贡献代码，而不是维护自己的“黑客”修改！
- en: '***The modernize Module***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***现代化模块***'
- en: Lastly, there is a tool named `modernize` that uses the `six` module to “modernize”
    your code by porting it to Python 3, rather than simply converting Python 2 syntax
    to Python 3 syntax. This provides support for both Python 2 and Python 3\. The
    `modernize` tool helps to get your port off to a strong start by doing most of
    the grunt work for you, making this tool a better choice than the standard `2to3`
    tool.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个名为`modernize`的工具，它使用`six`模块来“现代化”你的代码，将其移植到Python 3，而不是仅仅将Python 2的语法转换为Python
    3的语法。它同时支持Python 2和Python 3。`modernize`工具通过为你完成大部分繁重的工作，帮助你的移植工作顺利起步，因此比标准的`2to3`工具更值得选择。
- en: '**Using Python Like Lisp to Make a Single Dispatcher**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**像Lisp一样使用Python来创建单一的调度器**'
- en: 'I like to say that Python is a good subset of the Lisp programming language,
    and as time passes, I find that this is more and more true. The PEP 443 proves
    that point: it describes a way to dispatch generic functions in a similar manner
    to what the Common Lisp Object System (CLOS) provides.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢说，Python是Lisp编程语言的一个良好子集，随着时间的推移，我发现这一点越来越真实。PEP 443证明了这一点：它描述了一种以类似于Common
    Lisp对象系统（CLOS）提供的方式来调度通用函数的方法。
- en: If you’re familiar with Lisp, this won’t be news to you. The Lisp object system,
    which is one of the basic components of Common Lisp, provides a simple, efficient
    way to define and handle method dispatching. I’ll show you how generic methods
    work in Lisp first.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Lisp，这对你来说并不是什么新闻。Lisp对象系统是Common Lisp的基本组成部分之一，它提供了一种简单高效的方式来定义和处理方法分发。我将首先向你展示Lisp中的通用方法是如何工作的。
- en: '***Creating Generic Methods in Lisp***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在Lisp中创建通用方法***'
- en: 'To begin with, let’s define a few very simple classes, without any parent classes
    or attributes, in Lisp:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在 Lisp 中定义几个非常简单的类，不包含任何父类或属性：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This defines the classes `snare-drum`, `cymbal`, `stick`, and `brushes` without
    any parent class or attributes. These classes compose a drum kit, and we can combine
    them to play sound. For this, we define a `play()` method that takes two arguments
    and returns a sound as a string:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了 `snare-drum`、`cymbal`、`stick` 和 `brushes` 类，这些类没有任何父类或属性。这些类组成了一个鼓组，我们可以将它们组合来发出声音。为此，我们定义了一个
    `play()` 方法，它接受两个参数并返回一个表示声音的字符串：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This only defines a generic method that isn’t attached to any class and so cannot
    yet be called. At this stage, we’ve only informed the object system that the method
    is generic and might be called with two arguments named `instrument` and `accessory`.
    In [Listing 13-2](ch13.xhtml#ch13list2), we’ll implement versions of this method
    that simulate playing our snare drum.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅定义了一个不附加到任何类上的通用方法，因此尚不能调用。在这一阶段，我们仅向对象系统说明该方法是通用的，可能会使用两个名为 `instrument`
    和 `accessory` 的参数进行调用。在[列表 13-2](ch13.xhtml#ch13list2)中，我们将实现这个方法的版本，以模拟演奏我们的小军鼓。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 13-2: Defining generic methods in Lisp, independent of classes*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-2：在 Lisp 中定义独立于类的通用方法*'
- en: 'Now we’ve defined concrete methods in code. Each method takes two arguments:
    `instrument`, which is an instance of `snare-drum` or `cymbal`, and `accessory`,
    which is an instance of `stick` or `brushes`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在代码中定义了具体的方法。每个方法接受两个参数：`instrument`，它是 `snare-drum` 或 `cymbal` 的实例，以及
    `accessory`，它是 `stick` 或 `brushes` 的实例。
- en: 'At this stage, you should see the first major difference between this system
    and the Python (or similar) object systems: the method isn’t tied to any particular
    class. The methods are *generic*, and they can be implemented for any class.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，你应该能看到该系统与 Python（或类似）对象系统的第一个主要区别：方法并不绑定到任何特定类上。方法是*通用*的，可以为任何类实现。
- en: 'Let’s try it. We can call our `play()` method with some objects:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下。我们可以使用一些对象来调用 `play()` 方法：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, which function is called depends on the class of the arguments—the
    object system *dispatches* the function calls to the right function for us, based
    on the type of the arguments we pass. If we call `play()` with an object whose
    classes do not have a method defined, an error will be thrown.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，调用哪个函数取决于参数的类——对象系统会根据我们传递的参数类型，将函数调用*调度*到正确的函数。如果我们用一个没有定义方法的类实例调用 `play()`，则会抛出错误。
- en: In [Listing 13-3](ch13.xhtml#ch13list3), the `play()` method is called with
    a `cymbal` and a `stick` instance; however, the `play()` method has never been
    defined for those arguments, so it raises an error.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [列表 13-3](ch13.xhtml#ch13list3) 中，`play()` 方法是使用 `cymbal` 和 `stick` 实例调用的；然而，由于从未为这些参数定义
    `play()` 方法，因此它会抛出错误。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 13-3: Calling a method with an unavailable signature*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-3：调用带有不可用签名的方法*'
- en: CLOS provides even more features, such as method inheritance or object-based
    dispatching, rather than using classes. If you’re really curious about the many
    features CLOS provides, I suggest reading “A Brief Guide to CLOS” by Jeff Dalton
    (*[http://www.aiai.ed.ac.uk/~jeff/clos-guide.html](http://www.aiai.ed.ac.uk/~jeff/clos-guide.html)*)
    as a starting point.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: CLOS 提供了更多功能，比如方法继承或基于对象的调度，而不是使用类。如果你对 CLOS 提供的众多功能非常好奇，我建议阅读 Jeff Dalton 的《CLOS
    简明指南》作为入门 (*[http://www.aiai.ed.ac.uk/~jeff/clos-guide.html](http://www.aiai.ed.ac.uk/~jeff/clos-guide.html)*)。
- en: '***Generic Methods with Python***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Python 中的通用方法***'
- en: Python implements a simpler version of this workflow with the `singledispatch()`
    function, which has been distributed as part of the `functools` module since Python
    3.4\. In versions 2.6 to 3.3, the `singledispatch()` function is provided through
    the Python Package Index; for those eager to try it out, just run `pip install
    singledispatch`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Python 实现了该工作流程的简化版本，使用 `singledispatch()` 函数，该函数自 Python 3.4 起作为 `functools`
    模块的一部分发布。在 2.6 到 3.3 版本中，`singledispatch()` 函数通过 Python 包索引提供；对于那些急于尝试的人，只需运行
    `pip install singledispatch`。
- en: '[Listing 13-4](ch13.xhtml#ch13list4) shows a rough equivalent of the Lisp program
    we built in [Listing 13-2](ch13.xhtml#ch13list2).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 13-4](ch13.xhtml#ch13list4) 显示了我们在 [列表 13-2](ch13.xhtml#ch13list2) 中构建的
    Lisp 程序的大致等效代码。'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 13-4: Using singledispatch to dispatch method calls*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-4：使用 singledispatch 调度方法调用*'
- en: This listing defines our four classes and a base `play()` function that raises
    `NotImplementedError`, indicating that by default we don’t know what to do.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表定义了我们的四个类和一个基础的 `play()` 函数，它抛出 `NotImplementedError`，表示默认情况下我们不知道该怎么做。
- en: We then write a specialized version of the `play()` function for a specific
    instrument, the `SnareDrum` ➊. This function checks which accessory type has been
    passed and returns the appropriate sound or raises `NotImplementedError` again
    if the accessory isn’t recognized.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们为一个特定的乐器 `SnareDrum` ➊ 编写一个专门版本的 `play()` 函数。该函数检查传入的配件类型，并返回相应的声音，如果配件无法识别，则再次引发
    `NotImplementedError`。
- en: 'If we run the program, it works as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行程序，它的工作方式如下：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `singledispatch` module checks the class of the first argument passed and
    calls the appropriate version of the `play()` function. For the `object` class,
    the first defined version of the function is always the one that is run. Therefore,
    if our instrument is an instance of a class that we did not register, this base
    function will be called.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`singledispatch` 模块会检查传入的第一个参数的类，并调用适当版本的 `play()` 函数。对于 `object` 类，第一个定义的版本总是会被执行。因此，如果我们的乐器是一个我们没有注册的类的实例，那么将调用这个基础函数。'
- en: 'As we saw in the Lisp version of the code, CLOS provides a multiple dispatcher
    that can dispatch based on the type of *any of the arguments* defined in the method
    prototype, not just the first one. The Python dispatcher is named `singledispatch`
    for a good reason: it only knows how to dispatch based on the first argument.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 Lisp 版本的代码中看到的那样，CLOS 提供了一个多重调度器，可以根据方法原型中定义的 *任何参数的类型* 来调度，而不仅仅是第一个参数。Python
    的调度器被称为 `singledispatch` 是有原因的：它只知道如何根据第一个参数进行调度。
- en: In addition, `singledispatch` offers no way to call the parent function directly.
    There is no equivalent of the Python `super()` function; you’ll have to use various
    tricks to bypass this limitation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`singledispatch` 不提供直接调用父函数的方法。没有类似 Python `super()` 的功能；你需要使用各种技巧来绕过这一限制。
- en: While Python is improving its object system and dispatch mechanism, it still
    lacks a lot of the more advanced features that something like CLOS provides out
    of the box. That makes encountering `singledispatch` in the wild pretty rare.
    It’s still interesting to know it exists, as you may end up implementing such
    a mechanism yourself at some point.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 正在改进其对象系统和调度机制，但它仍然缺乏一些像 CLOS 提供的那种更高级的功能。这使得在实际应用中遇到 `singledispatch`
    相对罕见。尽管如此，知道它的存在仍然很有意思，因为你可能会在某个时刻自己实现类似的机制。
- en: '**Context Managers**'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**上下文管理器**'
- en: The `with` statement introduced in Python 2.6 is likely to remind old-time Lispers
    of the various `with-*` macros that are often used in that language. Python provides
    a similar-looking mechanism with the use of objects that implement the *context
    management protocol*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.6 引入的 `with` 语句很可能会让老派的 Lisp 程序员想起该语言中常用的各种 `with-*` 宏。Python 提供了一个类似的机制，通过使用实现了
    *上下文管理协议* 的对象来实现。
- en: If you’ve never used the context management protocol, here’s how it works. The
    code block contained inside the `with` statement is surrounded by two function
    calls. The object being used in the `with` statement determines the two calls.
    Those objects are said to implement the context management protocol.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未使用过上下文管理协议，这里是它的工作原理。`with` 语句中包含的代码块被两个函数调用包围。`with` 语句中使用的对象决定了这两个函数调用。那些对象被称为实现了上下文管理协议。
- en: 'Objects like those returned by `open()` support this protocol; that’s why you
    can write code along these lines:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `open()` 返回的这些对象支持该协议；这就是为什么你可以写出如下代码：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The object returned by `open()` has two methods: one called `__enter__` and
    one called `__exit__`. These methods are called at the start of the `with` block
    and at the end of it, respectively.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`open()` 返回的对象有两个方法：一个是 `__enter__`，另一个是 `__exit__`。这两个方法分别在 `with` 块的开始和结束时被调用。'
- en: A simple implementation of a context object is shown in [Listing 13-5](ch13.xhtml#ch13list5).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的上下文对象实现如 [示例 13-5](ch13.xhtml#ch13list5) 所示。
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 13-5: A simple implementation of a context object*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-5：一个简单的上下文对象实现*'
- en: This implementation does not do anything, but it is valid and shows the signature
    of the methods that need to be defined to provide a class following the context
    protocol.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该实现什么都不做，但它是有效的，并展示了需要定义的方法签名，以便提供一个遵循上下文协议的类。
- en: 'The context management protocol might be appropriate to use when you identify
    the following pattern in your code, where it is expected that a call to method
    `B` must *always* be done after a call to `A`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在代码中识别到以下模式时，上下文管理协议可能是适合使用的。这种模式要求在调用方法 `A` 后，*必须* 始终调用方法 `B`：
- en: Call method `A`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用方法 `A`。
- en: Execute some code.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行一些代码。
- en: Call method `B`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用方法`B`。
- en: 'The `open()` function illustrates this pattern well: the constructor that opens
    the file and allocates a file descriptor internally is method `A`. The `close()`
    method that releases the file descriptor corresponds to method `B`. Obviously,
    the `close()` function is always meant to be called *after* you instantiate the
    file object.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`open()`函数很好地说明了这个模式：打开文件并在内部分配文件描述符的构造函数是方法`A`。释放文件描述符的`close()`方法对应方法`B`。显然，`close()`函数总是应该在你实例化文件对象之后调用*。'
- en: It can be tedious to implement this protocol manually, so the `contextlib` standard
    library provides the `contextmanager` decorator to make implementation easier.
    The `contextmanager` decorator should be used on a generator function. The `__enter__`
    and `__exit__` methods will be dynamically implemented for you based on the code
    that wraps the `yield` statement of the generator.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 手动实现这个协议可能会很繁琐，因此`contextlib`标准库提供了`contextmanager`装饰器，使得实现变得更加容易。`contextmanager`装饰器应该应用于一个生成器函数。`__enter__`和`__exit__`方法会根据包裹`yield`语句的代码动态地为你实现。
- en: In [Listing 13-6](ch13.xhtml#ch13list6), `MyContext` is defined as a context
    manager.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单13-6](ch13.xhtml#ch13list6)中，`MyContext`被定义为一个上下文管理器。
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 13-6: Using contextlib.contextmanager*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-6：使用contextlib.contextmanager*'
- en: 'The code before the `yield` statement will be executed before the `with` statement
    body is run; the code after the `yield` statement will be executed once the body
    of the `with` statement is over. When run, this program outputs the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield`语句之前的代码将在`with`语句体执行之前运行；`yield`语句之后的代码将在`with`语句体结束后执行。执行时，这个程序会输出以下内容：'
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are a couple of things to handle here though. First, it’s possible to
    yield something inside our generator that can be used as part of the `with` block.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事需要处理。首先，可能会在生成器中`yield`一些内容，作为`with`块的一部分使用。
- en: '[Listing 13-7](ch13.xhtml#ch13list7) shows how to yield a value to the caller.
    The keyword `as` is used to store this value in a variable.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单13-7](ch13.xhtml#ch13list7)展示了如何将一个值传递给调用者。关键字`as`用于将该值存储在一个变量中。'
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 13-7: Defining a context manager yielding a value*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-7：定义一个返回值的上下文管理器*'
- en: '[Listing 13-7](ch13.xhtml#ch13list7) shows how to yield a value to the caller.
    The keyword `as` is used to store this value in a variable. When executed, the
    code outputs the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单13-7](ch13.xhtml#ch13list7)展示了如何将一个值传递给调用者。关键字`as`用于将该值存储在一个变量中。执行时，代码会输出以下内容：'
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When using a context manager, you might need to handle exceptions that can be
    raised within the `with` code block. This can be done by surrounding the `yield`
    statement with a `try...except` block, as shown in [Listing 13-8](ch13.xhtml#ch13list8).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上下文管理器时，你可能需要处理在`with`代码块中引发的异常。可以通过将`yield`语句包裹在`try...except`块中来处理异常，正如在[清单13-8](ch13.xhtml#ch13list8)中展示的那样。
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 13-8: Handling exceptions in a context manager*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-8：在上下文管理器中处理异常*'
- en: Here, a `ValueError` is raised at the beginning of the `with` code block ➊;
    Python will propagate this error back to the context manager, and the `yield`
    statement will appear to raise the exception itself. We enclose the `yield` statement
    in `try` and `finally` to make sure the final `print()` is run.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ValueError`在`with`代码块的开始处被引发 ➊；Python会将这个错误传播回上下文管理器，并且`yield`语句似乎会引发这个异常。我们将`yield`语句封装在`try`和`finally`中，以确保最终的`print()`被执行。
- en: 'When executed, [Listing 13-8](ch13.xhtml#ch13list8) outputs the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，[清单13-8](ch13.xhtml#ch13list8)输出以下内容：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the error is raised back to the context manager, and the program
    resumes and finishes execution because it ignored the exception using a `try...finally`
    block.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，错误被传播回上下文管理器，程序继续执行并完成，因为它通过`try...finally`块忽略了异常。
- en: In some contexts, it can be useful to use several context managers at the same
    time, for example, when opening two files at the same time to copy their content,
    as shown in [Listing 13-9](ch13.xhtml#ch13list9).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可能需要同时使用多个上下文管理器，例如，在[清单13-9](ch13.xhtml#ch13list9)中展示的那样，同时打开两个文件以复制它们的内容。
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 13-9: Opening two files at the same time to copy content*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-9：同时打开两个文件以复制内容*'
- en: That being said, since the `with` statement supports multiple arguments, it’s
    actually more efficient to write a version using a single `with`, as shown in
    [Listing 13-10](ch13.xhtml#ch13list10).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，由于 `with` 语句支持多个参数，实际上使用单个 `with` 编写的版本效率更高，如 [列表 13-10](ch13.xhtml#ch13list10)
    所示。
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 13-10: Opening two files at the same time using only one with statement*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-10：使用一个 with 语句同时打开两个文件*'
- en: Context managers are extremely powerful design patterns that help to ensure
    your code flow is always correct, no matter what exception might occur. They can
    help to provide a consistent and clean programming interface in many situations
    in which code should be wrapped by other code and `contextlib.contextmanager`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文管理器是非常强大的设计模式，帮助确保你的代码流始终正确，无论可能发生什么异常。在许多需要由其他代码包装的代码场景中，它们能提供一致且干净的编程接口，`contextlib.contextmanager`
    可以帮助你实现这一点。
- en: '**Less Boilerplate with attr**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**减少模板代码，使用 attr**'
- en: Writing Python classes can be cumbersome. You’ll often find yourself repeating
    just a few patterns because there are no other options. One of the most common
    examples, as illustrated in [Listing 13-11](ch13.xhtml#ch13list11), is when initializing
    an object with a few attributes passed to the constructor.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 编写 Python 类可能会让人觉得繁琐。你经常会发现自己重复一些模式，因为没有其他选择。最常见的例子之一，如 [列表 13-11](ch13.xhtml#ch13list11)
    所示，是当使用几个传递给构造函数的属性来初始化一个对象时。
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Listing 13-11: Common class initialization boilerplate*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-11：常见的类初始化模板代码*'
- en: 'The process is always the same: you copy the value of the argument passed to
    the `__init__` function to a few attributes stored in the object. Sometimes you’ll
    also have to check the value that is passed, compute a default, and so on.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程始终是一样的：你将传递给 `__init__` 函数的参数值复制到存储在对象中的一些属性中。有时你还需要检查传递的值，计算默认值，等等。
- en: Obviously, you also want your object to be represented correctly if printed,
    so you’ll have to implement a `__repr__` method. There’s a chance some of your
    classes are simple enough to be converted to dictionaries for serialization. Things
    become even more complicated when talking about comparison and hashability (the
    ability to use `hash` on an object and store it in a `set`).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你还希望当对象被打印时，它能够正确地表示自己，因此你需要实现一个 `__repr__` 方法。如果你的某些类足够简单，能够转换为字典进行序列化，那么事情会更加复杂。谈到比较和可哈希性（能够对一个对象使用
    `hash` 并将其存储在 `set` 中）时，情况就更复杂了。
- en: In reality, most Python programmers do none of this, because the burden of writing
    all those checks and methods is too heavy, especially when you’re not always sure
    you’ll need them. For example, you might find that `__repr__` is useful in your
    program only that one time you’re trying to debug or trace it and decide to print
    objects in the standard output—and no other times.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，大多数 Python 程序员并不会做这些工作，因为编写这些检查和方法的负担太重，尤其是在你并不总是确定是否需要它们的情况下。例如，你可能发现 `__repr__`
    只在你调试或追踪程序时才有用，决定在标准输出中打印对象——而不是其他时候。
- en: The `attr` library aims for a straightforward solution by providing a generic
    boilerplate for all your classes and generating much of the code for you. You
    can install `attr` using `pip` with the command `pip install attr`. Get ready
    to enjoy!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr` 库通过为你的所有类提供通用模板代码，并为你生成大部分代码，旨在提供一个简单的解决方案。你可以使用命令 `pip install attr`
    来安装 `attr`。准备好享受它吧！'
- en: Once installed, the `attr.s` decorator is your entry point into the wonderful
    world of `attr`. Use it above a class declaration and then use the function `attr.ib()`
    to declare attributes in your classes. [Listing 13-12](ch13.xhtml#ch13list12)
    shows a way to rewrite [Listing 13-11](ch13.xhtml#ch13list11) using `attr`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，`attr.s` 装饰器是进入 `attr` 神奇世界的入口。将其放在类声明之上，然后使用函数 `attr.ib()` 来声明类中的属性。[列表
    13-12](ch13.xhtml#ch13list12) 展示了如何使用 `attr` 重写 [列表 13-11](ch13.xhtml#ch13list11)。
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 13-12: Using attr.ib() to declare attributes*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-12：使用 attr.ib() 声明属性*'
- en: 'When declared this way, the class automatically gains a few useful methods
    for free, such as `__repr__`, which is called to represent objects when they are
    printed on `stdout` in the Python interpreter:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式声明时，类会自动获得一些有用的方法，例如 `__repr__`，该方法在 Python 解释器中打印对象时会被调用：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This output is cleaner than the default that `__repr__` would have printed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出比 `__repr__` 默认打印的内容更简洁：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can also add more validation on your attributes by using the `validator`
    and `converter` keyword arguments.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用 `validator` 和 `converter` 关键字参数来为属性添加更多验证。
- en: '[Listing 13-13](ch13.xhtml#ch13list13) shows how the `attr.ib()` function can
    be used to declare an attribute with some constraints.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 13-13](ch13.xhtml#ch13list13)展示了如何使用`attr.ib()`函数声明带有一些约束的属性。'
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*Listing 13-13: Using attr.ib() with its converter argument*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-13：使用带有转换器参数的 attr.ib()*'
- en: The `converter` argument manages the conversion of whatever is passed to the
    constructor. The `validator()` function can be passed as an argument to `attr.ib()`
    or used as a decorator, as shown in [Listing 13-13](ch13.xhtml#ch13list13).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`converter` 参数管理传递给构造函数的任何内容的转换。`validator()`函数可以作为参数传递给 `attr.ib()` 或作为装饰器使用，如
    [示例 13-13](ch13.xhtml#ch13list13) 所示。'
- en: The `attr` module provides a few validators of its own (for example, `attr.validators.instance_of()`
    to check the type of the attribute), so be sure to check them out before wasting
    your time building your own.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr`模块提供了一些内置的验证器（例如，`attr.validators.instance_of()`用于检查属性的类型），因此在浪费时间自己实现之前，务必先查看它们。'
- en: 'The `attr` module also provides tweaks to make your object hashable so it can
    be used in a set or a dictionary key: just pass `frozen=True` to `attr.s()` to
    make the class instances immutable.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr` 模块还提供了使对象可哈希的调整，使其可以用作集合或字典的键：只需将 `frozen=True` 传递给 `attr.s()`，使类实例变为不可变。'
- en: '[Listing 13-14](ch13.xhtml#ch13list14) shows how using the `frozen` parameter
    changes the behavior of the class.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 13-14](ch13.xhtml#ch13list14)展示了使用 `frozen` 参数如何改变类的行为。'
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*Listing 13-14: Using frozen=True*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-14：使用 frozen=True*'
- en: '[Listing 13-14](ch13.xhtml#ch13list14) shows how using the `frozen` parameter
    changes the behavior of the `Car` class: it can be hashed and therefore stored
    in a set, but objects cannot be modified anymore.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 13-14](ch13.xhtml#ch13list14)展示了使用 `frozen` 参数如何改变 `Car` 类的行为：它可以被哈希化，因此可以存储在集合中，但对象再也无法被修改了。'
- en: In summary, `attr` provides the implementation for a ton of useful methods,
    thereby saving you from writing them yourself. I highly recommend leveraging `attr`
    for its efficiency when building your classes and modeling your software.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`attr`提供了许多有用方法的实现，从而节省了你自己编写这些方法的时间。我强烈推荐在构建类和建模软件时充分利用`attr`的高效性。
- en: '**Summary**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Congratulations! You made it to the end of the book. You’ve just upped your
    Python game and have a better idea of how to write efficient and productive Python
    code. I hope you enjoyed reading this book as much as I enjoyed writing it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经读完了这本书。你刚刚提升了你的 Python 技能，并且对如何编写高效且富有生产力的 Python 代码有了更清晰的认识。我希望你像我写这本书一样享受阅读它的过程。
- en: Python is a wonderful language and can be used in many different fields, and
    there are many more areas of Python that we did not touch on in this book. But
    every book needs an ending, right?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一门非常棒的语言，可以应用于许多不同的领域，而且还有很多 Python 的内容我们在本书中没有涉及。但每本书总得有个结尾，对吧？
- en: I highly recommend profiting from open source projects by reading the available
    source code out there and contributing to it. Having your code reviewed and discussed
    by other developers is often a great way to learn.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议通过阅读现有的开源项目源代码并参与其中来从中获益。让其他开发者审查和讨论你的代码通常是学习的好方法。
- en: Happy hacking!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐编程！
