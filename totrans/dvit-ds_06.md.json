["```py\nimport pandas as pd\nnews=pd.read_csv('OnlineNewsPopularity.csv')\n```", "```py\nfrom matplotlib import pyplot as plt\nplt.scatter(news[' global_sentiment_polarity'],news[' shares'])\nplt.title('Popularity by Sentiment')\nplt.xlabel('Sentiment Polarity')\nplt.ylabel('Shares')\nplt.show()\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nx = news[' global_sentiment_polarity'].values.reshape(-1,1)\ny = news[' shares'].values.reshape(-1,1)\nregressor = LinearRegression()\nregressor.fit(x, y)\nprint(regressor.coef_)\nprint(regressor.intercept_)\n```", "```py\nregline=regressor.predict(x)\nplt.scatter(news[' global_sentiment_polarity'],news[' shares'],color='blue')\nplt.plot(sorted(news[' global_sentiment_polarity'].tolist()),regline,'r')\nplt.title('Shares by Sentiment')\nplt.xlabel('Sentiment')\nplt.ylabel('Shares')\nplt.show()\n```", "```py\nk=15\nnewsentiment=0.5\n```", "```py\nallsentiment=news[' global_sentiment_polarity'].tolist()\nallshares=news[' shares'].tolist()\n```", "```py\ndistances=[abs(x-newsentiment) for x in allsentiment]\n```", "```py\nimport numpy as np\nidx = np.argsort(distances)\n```", "```py\n[30230, 30670, 13035, 7284, 36029, 19361, 29598, 22546, 25556, 6744, 26473,\\\n7211, 9200, 15198, 31496]\n```", "```py\nnearbyshares=[allshares[i] for i in idx[0:k]]\n```", "```py\nprint(np.mean(nearbyshares))\n```", "```py\nfrom sklearn.neighbors import KNeighborsRegressor\n```", "```py\nx=np.array(allsentiment).reshape(-1,1)\ny=np.array(allshares)\n```", "```py\nknnregressor = KNeighborsRegressor(n_neighbors=15)\nknnregressor.fit(x,y)\n```", "```py\nprint(knnregressor.predict(np.array([newsentiment]).reshape(1,-1)))\n```", "```py\n#linear regression\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(np.array(allsentiment).reshape(-1,1), np.array(allshares))\nprint(regressor.predict(np.array([newsentiment]).reshape(1,-1)))\n\n#knn\nfrom sklearn.neighbors import KNeighborsRegressor\nknnregressor = KNeighborsRegressor(n_neighbors=15)\nknnregressor.fit(np.array(allsentiment).reshape(-1,1), np.array(allshares))\nprint(knnregressor.predict(np.array([newsentiment]).reshape(1,-1)))\n\n#decision tree\nfrom sklearn.tree import DecisionTreeRegressor\ndtregressor = DecisionTreeRegressor(max_depth=3)\ndtregressor.fit(np.array(allsentiment).reshape(-1,1), np.array(allshares))\nprint(dtregressor.predict(np.array([newsentiment]).reshape(1,-1)))\n\n#random forest\nfrom sklearn.ensemble import RandomForestRegressor\nrfregressor = RandomForestRegressor()\nrfregressor.fit(np.array(allsentiment).reshape(-1,1), np.array(allshares))\nprint(rfregressor.predict(np.array([newsentiment]).reshape(1,-1)))\n\n#neural network\nfrom sklearn.neural_network import MLPRegressor\nnnregressor = MLPRegressor()\nnnregressor.fit(np.array(allsentiment).reshape(-1,1), np.array(allshares))\nprint(nnregressor.predict(np.array([newsentiment]).reshape(1,-1)))\n```", "```py\nfrom sklearn.tree import plot_tree\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,5))\nplot_tree(dtregressor, filled=True, fontsize=8)\nplt.savefig('decisiontree.png')\n```", "```py\nallprediction=regressor.predict(np.array([allsentiment]).reshape(-1,1))\npredictionerror=abs(allprediction-allsentiment)\nprint(np.mean(predictionerror))\n```", "```py\nfrom sklearn.model_selection import train_test_split\nx=np.array([allsentiment]).reshape(-1,1)\ny=np.array(allshares)\ntrainingx,testx,trainingy,testy=train_test_split(x,y,random_state=1)\n```", "```py\n>>> **print(len(trainingx))**\n29733\n>>> **print(len(trainingy))**\n29733\n>>> **print(len(testx))**\n9911\n>>> **print(len(testy))**\n9911\n```", "```py\nrfregressor = RandomForestRegressor(random_state=1)\nrfregressor.fit(trainingx, trainingy)\npredicted = rfregressor.predict(testx)\npredictionerror = abs(predicted-testy)\n```", "```py\nknnregressor = KNeighborsRegressor(n_neighbors=15)\nknnregressor.fit(trainingx, trainingy)\npredicted = knnregressor.predict(testx)\npredictionerror = abs(predicted-testy)\n```", "```py\nx=news[[' global_sentiment_polarity',' n_unique_tokens',' n_non_stop_words']]\ny=np.array(allshares)\ntrainingx,testx,trainingy,testy=train_test_split(x,y,random_state=1)\nfrom sklearn.ensemble import RandomForestRegressor\nrfregressor = RandomForestRegressor(random_state=1)\nrfregressor.fit(trainingx, trainingy)\npredicted = rfregressor.predict(testx)\npredictionerror = abs(predicted-testy)\n```", "```py\nthemedian=np.median(news[' shares'])\nnews['abovemedianshares']=1*(news[' shares']>themedian)\n```", "```py\nx=news[[' global_sentiment_polarity',' n_unique_tokens',' n_non_stop_words']]\ny=np.array(news['abovemedianshares'])\nfrom sklearn.neighbors import **KNeighborsClassifier**\n**knnclassifier** = **KNeighborsClassifier**(n_neighbors=15)\ntrainingx,testx,trainingy,testy=train_test_split(x,y,random_state=1)\n**knnclassifier**.fit(trainingx, trainingy)\npredicted = **knnclassifier**.predict(testx)\n```", "```py\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(testy,predicted))\n```", "```py\n[[2703 2280]\n [2370 2558]]\n```", "```py\n[[`true positives `      `false positives`]\n[`false negatives`     `true negatives`]]\n```", "```py\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\nprecision = precision_score(testy,predicted)\nrecall = recall_score(testy,predicted)\n```"]