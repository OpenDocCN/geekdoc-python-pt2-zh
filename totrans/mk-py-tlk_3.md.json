["```py\nimport turtle as t\n\n1 t.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('SpringGreen3')\n2 t.title('Setting Up a Screen with Turtle Graphics')\nt.done()\nt.bye() \n```", "```py\nimport turtle as t\n\nt.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('SpringGreen')\nt.title('Show Turtle')\n1 t.shape('turtle')\nt.forward(200)\nt.right(90)\nt.up()\nt.forward(100)\nt.done()\nt.bye()\n```", "```py\nimport turtle as t\n\nt.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('blue')\nt.title('Movements in Turtle Graphics')\n1 t.forward(200)\n2 t.backward(300)\nt.done()\nt.bye()\n```", "```py\nimport turtle as t\n\nt.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('light blue')\nt.title('Python Turtle Graphics')\n1 t.pensize(5)\n2 t.right(30)\nt.forward(200)\nt.left(30)\nt.backward(400)\nt.left(90)\n3 t.pencolor('red')\nt.forward(200)\nt.done()\ntry:\n    t.bye()\nexcept Terminator:\n    print('exit turtle')\n```", "```py\nimport turtle as t\n\nt.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('lightgreen')\nt.title('Python Turtle Graphics')\nt.pensize(6)\n1 t.goto(200,100)\n2 t.up()\nt.pencolor('blue')\n3 for i in range(8):\n    t.goto(-200+50*i,-150)\n    t.down()\n    t.goto(-200+50*i+30,-150)\n    t.up()\n4 t.hideturtle()\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\nimport turtle as t\n\nt.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('lightgreen')\nt.title('Python Turtle Graphics')\n1 t.up()\nt.goto(150,100)\nt.dot(120,'red')\nt.goto(-150,100)\nt.dot(135,'yellow')\n2 t.goto(150,-100)\nt.dot(125,'blue')\nt.goto(-150,-100)\nt.dot(140,'green')\nt.hideturtle()\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\nfrom turtle import *\n\nScreen()\nsetup(600,500,100,200)\nbgcolor('springgreen3')\ntitle('Python Turtle Graphics')\nhideturtle()\ntracer(False)\n1 pencolor('blue')\npensize(5)\nup()\ngoto(-50,-50)\ndown()\ngoto(50,-50)\ngoto(0,100)\ngoto(-50,-50)\nupdate()\ndone()\ntry:\n    bye()\nexcept Terminator:\n    pass\n```", "```py\nimport turtle as t\n\n# Set up the screen\nt.Screen()\nt.setup(600,500,100,200)\nt.bgcolor('green')\nt.title('Python Turtle Graphics')\nt.hideturtle()\nt.tracer(False)\n1 t.pensize(6)\n# Draw the first side\n2 t.forward(200)\nt.left(90)\n# Draw the second side\nt.forward(100)\nt.left(90)\n# Draw the third side\nt.forward(200)\nt.left(90)\n# Finish the rectangle\nt.forward(100)\nt.update()\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\nimport turtle as t\n\n# Set up the screen\nt.Screen()\nt.setup(810,710, 10, 70)\nt.hideturtle()\nt.tracer(False)\nt.bgcolor('lightgreen')\n# Draw the vertical lines to create 7 columns\n1 t.pensize(5)\nfor i in range(-350,400,100):\n    t.up()\n    t.goto(i, -298)\n    t.down()\n    t.goto(i, 303)\n    t.up()\n# Draw the horizontal lines to separate the screen in 6 rows\n2 t.pensize(1)\nt.color('gray')\nfor i in range(-300,400,101):  \n    t.up()\n    t.goto(-350,i)\n    t.down()\n    t.goto(350,i)\n    t.up()   \nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\nimport turtle as t\nimport time\n\nimport arrow\n\n# Set up the screen\nt.setup(800,600, 10, 70)\nt.tracer(False)\nt.bgcolor('lightgreen')\nt.hideturtle()\n# Put the script in an infinite loop\n1 while True:\n    # Clear the screen\n    t.clear()\n    # Obtain the current time\n    current_time = arrow.now().format('hh:mm:ss A')\n t.color('blue')\n    t.up()\n    t.goto(-300,50)\n    # Write the first line of text\n  2 t.write('The Current Time Is\\n',font=('Arial',50,'normal'))\n    t.color('red')\n    t.goto(-300,-100)\n    # Write what time it is\n  3 t.write(current_time,font=('Arial',80,'normal'))\n    time.sleep(1)\n    # Put everything on screen\n    t.update()\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\nimport turtle as t\n\n# Set up the screen\nt.setup(810,710, 10, 70)\nt.tracer(False)\nt.hideturtle()\nt.bgcolor('lightgreen')\nt.color('blue')\nt.pensize(5)\n1 t.up()\nt.goto(-200,-100)\nt.down()\nt.forward(400)\nt.left(90)\nt.forward(400)\nt.left(90)\nt.forward(400)\nt.left(90)\nt.forward(400)\n# Create a second turtle \n2 msg = t.Turtle()\nmsg.hideturtle()\nmsg.up()\nmsg.color('red')\nmsg.goto(-300,-200)\nmsg.write('this is written by the second turtle',font=('Arial',30,'normal'))\nt.update()\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\nimport turtle as t\n\n# Set up the screen\nt.setup(600,600,10,70)\nt.tracer(False)\nt.bgcolor(\"red\")\nt.hideturtle()\nt.title(\"Tic-Tac-Toe in Turtle Graphics\")\n# Draw horizontal lines and vertical lines to form grid\nt.pensize(5)\n1 for i in (-100,100):\n    t.up()\n    t.goto(i,-300)\n    t.down()\n    t.goto(i,300)\n    t.up()\n    t.goto(-300,i)\n    t.down()\n t.goto(300,i)\n    t.up()\n# Create a dictionary to map cell numbers to cell center coordinates\n2 cellcenter = {'1':(-200,-200), '2':(0,-200), '3':(200,-200),\n            '4':(-200,0), '5':(0,0), '6':(200,0),\n            '7':(-200,200), '8':(0,200), '9':(200,200)} \n# Go to the center of each cell, write down the cell number\n3 for cell, center in list(cellcenter.items()):\n    t.goto(center)\n    t.write(cell,font = ('Arial',20,'normal'))\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\n[('1', (-200, -200)), ('2', (0, -200)), ('3', (200, -200)), ('4', (-200, 0)),\n('5', (0, 0)), ('6', (200, 0)), ('7', (-200, 200)), ('8', (0, 200)), ('9', \n(200, 200))]\n```", "```py\nimport turtle as t\n\n# Set up the screen\nt.setup(620,620,360,100)\nt.title(\"How Mouse-Clicks Work in Turtle Graphics\")\n# Define get_xy() to print the coordinates of the point you click\n1 def get_xy(x,y):\n    print(f'(x, y) is ({x}, {y})')\n# Hide the turtle so that you don't see the arrowhead\nt.hideturtle()\n# Bind the mouse click to the get_xy() function\n2 t.onscreenclick(get_xy)\n3 t.listen()    \nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle') \n```", "```py\n(x, y) is (-46.0, 109.0)\n(x, y) is (14.0, -9.0)\n(x, y) is (-185.0, -19.0)\n(x, y) is (-95.0, 109.0)\n(x, y) is (13.0, -81.0)\n```", "```py\n`--snip--`\nfor cell, center in list(cellcenter.items()):\n    t.goto(center)\n    t.write(cell,font = ('Arial',20,'normal'))\n# Define a function cell_number() to print out the cell number\n1 def cell_number(x,y):\n    if -300<x<300 and -300<y<300:\n        # Calculate the column number based on x value\n      2 col = int((x+500)//200)\n        print('column number is ', col)\n        # Calculate the row number based on y value\n row = int((y+500)//200)\n        print('row number is ', row)\n        # Calculate the cell number based on col and row\n      3 cellnumber = col+(row-1)*3\n        print('cell number is ', cellnumber)\n    else:\n        print('you have clicked outside the game board')\n# Hide turtle so that you don't see the arrowhead\nt.hideturtle()\n# bind the mouse click to the cell_number() function\n  onscreenclick(cell_number)\nt.listen()\n`--snip--`\n```", "```py\ncolumn number is  3\nrow number is  2\ncell number is  6\ncolumn number is  1\nrow number is  3\ncell number is  7\ncolumn number is  2\nrow number is  1\ncell number is  2\n```", "```py\n`--snip--`\nfor cell, center in list(cellcenter.items()):\n t.goto(center)\n t.write(cell,font = ('Arial',20,'normal'))\n# The blue player moves first\nturn = \"blue\"\n# Define a function mark_cell() to place a dot in the cell\n1 def mark_cell(x,y):\n    # Make the variable turn a global variable\n 2 global turn\n    # Calculate the cell number based on x and y values\n    if -300<x<300 and -300<y<300:\n        col = int((x+500)//200)\n        row = int((y+500)//200)\n        # The cell number is a string variable\n      3 cellnumber = str(col + (row - 1)*3)\n    else:\n        print('you have clicked outside the game board')\n\n    # Go to the corresponding cell and place a dot of the player's color\n    t.up()\n  4 t.goto(cellcenter[cellnumber])\n    t.dot(180,turn)\n    t.update()\n    # give the turn to the other player\n    if turn == \"blue\":\n        turn = \"white\"\n    else:\n        turn = \"blue\"\n\n# Hide the turtle so that you don't see the arrowhead\nt.hideturtle()\n# Bind the mouse click to the mark_cell() function\nt.onscreenclick(Mark_cell)\nt.listen()\n`--snip--`\n```", "```py\nfrom tkinter import messagebox\n`--snip--`\n# The blue player moves first\nturn = \"blue\"\n# Count how many rounds played\nrounds = 1 1\n# Create a list of valid moves\nvalidinputs = list(cellcenter.keys())\n# Create a dictionary of moves made by each player\noccupied = {\"blue\":[],\"white\":[]}\n# Determine if a player has won the game\ndef win_game(): 2\n    win = False\n    if '1' in occupied[turn] and '2' in occupied[turn] and '3' in occupied[turn]:\n        win = True\n    if '4' in occupied[turn] and '5' in occupied[turn] and '6' in occupied[turn]:\n        win = True\n    if '7' in occupied[turn] and '8' in occupied[turn] and '9' in occupied[turn]:\n        win = True\n    if '1' in occupied[turn] and '4' in occupied[turn] and '7' in occupied[turn]:\n        win = True\n    if '2' in occupied[turn] and '5' in occupied[turn] and '8' in occupied[turn]:\n        win = True\n    if '3' in occupied[turn] and '6' in occupied[turn] and '9' in occupied[turn]:\n        win = True\n    if '1' in occupied[turn] and '5' in occupied[turn] and '9' in occupied[turn]:\n        win = True\n    if '3' in occupied[turn] and '5' in occupied[turn] and '7' in occupied[turn]:\n        win = True\n    return win\n# Define a function mark_cell() to place a dot in the cell\ndef mark_cell(x,y):\n # Declare global variables\n    global turn, rounds, validinputs 3\n # Calculate the cell number based on x and y values\n if -300<x<300 and -300<y<300:\n col = int((x+500)//200)\n row = int((y+500)//200)\n # The cell number is a string variable\n cellnumber = str(col + (row - 1)*3)\n else:\n print('you have clicked outside the game board')\n    # Check if the move is a valid one\n    if cellnumber in validinputs: 4\n        # Go to the corresponding cell and place a dot of the player's color\n t.up()\n t.goto(cellcenter[cellnumber])\n t.dot(180,turn)\n t.update()\n        # Add the move to the occupied list for the player\n        occupied[turn].append(cellnumber) 5\n        # Disallow the move in future rounds\n        validinputs.remove(cellnumber)\n        # Check if the player has won the game\n        if win_game() == True: 6\n            # If a player wins, invalid all moves, end the game\n            validinputs = []\n            messagebox.showinfo(\"End Game\",f\"Congrats player {turn}, you won!\")\n        # If all cells are occupied and no winner, it's a tie\n        elif rounds == 9: 7\n            messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n        # Counting rounds\n        rounds += 1\n        # Give the turn to the other player\n if turn == \"blue\":\n turn = \"white\"\n else:\n turn = \"blue\"\n    # If the move is not a valid move, remind the player \n    else:\n        messagebox.showerror(\"Error\",\"Sorry, that's an invalid move!\")\n# Bind the mouse click to the mark_cell() function\nt.onscreenclick(mark_cell)\n`--snip--`\n```", "```py\nimport turtle as t\nfrom random import choice\nfrom tkinter import messagebox\n\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say\n*--snip--*\n if '3' in occupied[turn] and '5' in occupied[turn] and '7' in occupied[turn]:\n win = True\n return win\n# Start an infinite loop to take voice inputs\n1 while True:\n    # Ask for your move\n    print_say(f\"Player {turn}, what's your move?\")\n    # Capture your voice input\n    inp = voice_to_text()\n    print(f\"You said {inp}.\")\n    inp = inp.replace('number ','')\n    inp = inp.replace('one','1')   \n    inp = inp.replace('two','2')\n    inp = inp.replace('three','3')\n    inp = inp.replace('four','4')\n    inp = inp.replace('five','5')\n    inp = inp.replace('six','6')\n    inp = inp.replace('seven','7')\n    inp = inp.replace('eight','8')\n    inp = inp.replace('nine','9')\n    if inp in validinputs:\n        # Go to the corresponding cell and place a dot of the player's color\n        t.up()\n        t.goto(cellcenter[inp])\n        t.dot(180,turn)\n        t.update()\n        # Add the move to the occupied list for the player\n        occupied[turn].append(inp)\n        # Disallow the move in future rounds\n        validinputs.remove(inp)\n        # **Check if the player has won the game**\n      2 if win_game() == True:\n            # If a player wins, invalid all moves, end the game\n            validinputs = []\n            print_say(f\"Congrats player {turn}, you won!\")\n            messagebox.showinfo\\\n            (\"End Game\",f\"Congrats player {turn}, you won!\")\n            break\n\n        # If all cells are occupied and no winner, game is a tie\n        elif rounds == 9:\n            print_say(\"Game over, it's a tie!\")\n            messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n            break\n\n # Counting rounds\n        rounds += 1\n        # Give the turn to the other player\n        if turn == \"blue\":\n            turn = \"white\"\n        else:\n            turn = \"blue\"  \n\n        # The computer makes a random move\n      3 inp = choice(validinputs)\n        print_say(f'The computer occupies cell {inp}.')\n        t.up()\n        t.goto(cellcenter[inp])\n        t.dot(180,turn)\n        t.update()\n        occupied[turn].append(inp)\n        validinputs.remove(inp)\n        if win_game() == True:\n            validinputs = []\n            print_say(f\"Congrats player {turn}, you won!\")\n            messagebox.showinfo\\\n            (\"End Game\",f\"Congrats player {turn}, you won!\")\n            break\n        elif rounds == 9:\n            print_say(\"Game over, it's a tie!\")\n            messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n\n            break\n        rounds += 1\n        if turn == \"blue\":\n            turn = \"white\"\n        else:\n            turn = \"blue\"     \n\n    # If the move is not a valid move, remind the player \n    else:\n        print_say(\"Sorry, that's an invalid move!\")\nt.done()\n`--snip--`\n```", "```py\nPlayer blue, what's your move?\nYou said 7.\nThe computer occupies cell 3.\nPlayer blue, what's your move?\nYou said 8.\nThe computer occupies cell 1.\nPlayer blue, what's your move?\nYou said 9.\nCongrats player blue, you won!\n```", "```py\nimport turtle as t\n\n# Set up the screen\n1 t.setup(700,600,10,70)\nt.hideturtle()\nt.tracer(False)\nt.bgcolor(\"lightgreen\")\nt.title(\"Connect Four in Turtle Graphics\")\n# Draw six thick vertical lines\n2 t.pensize(5)\nfor i in range(-250,350,100):\n    t.up()\n    t.goto(i,-350)\n    t.down()\n    t.goto(i,350)\n    t.up()\n# Draw five thin gray horizontal lines to form grid\n3 t.pensize(1)\nt.pencolor(\"grey\")\nfor i in range(-200,300,100):  \n    t.up()\n    t.goto(-350,i)\n    t.down()\n    t.goto(350,i)\n    t.up()\n# Write column numbers on the board\n4 colnum = 1\nfor x in range(-300,350,100):\n    t.goto(x,270)\n    t.write(colnum,font = ('Arial',20,'normal'))\n    colnum += 1\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\n`--snip--`\n# Write column numbers on the board\ncolnum = 1\nfor x in range(-300, 350, 100):\n t.goto(x,270)\n t.write(colnum,font = ('Arial',20,'normal'))\n colnum += 1\n# The red player moves first\n1 turn = \"red\"\n# The x-coordinates of the center of the 7 columns\n2 xs = [-300,-200,-100,0,100,200,300]\n# The y-coordinates of the center of the 6 rows\nys = [-250,-150,-50,50,150,250]\n# Keep track of the occupied cells\noccupied = [list(),list(),list(),list(),list(),list(),list()]\n# Define a function conn() to place a disc in a cell\n3 def conn(x,y):\n    # Make the variable turn a global variable\n    global turn\n    # Calculate the column number based on x- and y-values\n    if -350<x<350 and -300<y<300:\n        col = int((x+450)//100)\n    else:\n        print('You have clicked outside the game board!')\n    # Calculate the lowest available row number in that column\n    row = len(occupied[col-1])+1\n    # Go to the cell and place a dot of the player's color\n    t.up()\n    t.goto(xs[col-1],ys[row-1])\n    t.dot(80,turn)\n    # Add the move to the occupied list to keep track\n    occupied[col-1].append(turn)\n    # Give the turn to the other player\n    if turn == \"red\":\n        turn = \"yellow\"\n    else:\n        turn = \"red\"\n# Bind the mouse click to the conn() function\nt.onscreenclick(conn)\nt.listen()    \nt.done()\n`--snip--`\n```", "```py\nimport turtle as t\n1 from time import sleep\n*--snip--*\n# Keep track of the occupied cells\noccupied = [list(),list(),list(),list(),list(),list(),list()] \n# Create a second turtle to show disc falling\n2 fall = t.Turtle()\nfall.up()\n3 fall.hideturtle()\n# Define a function conn() to place a disc in a cell\ndef conn(x,y):\n # Make the variable turn a global variable\n global turn\n # Calculate the column number based on x and y values\n if -350<x<350 and -300<y<300:\n col = int((x+450)//100)\n else:\n print('You have clicked outside the game board!')\n # Calculate the lowest available row number in that column\n row = len(occupied[col-1])+1\n    # Show the disc fall from the top\n    4 if row<6:\n        for i in range(6,row,-1):\n            fall.goto(xs[col-1],ys[i-1])\n            fall.dot(80,turn)\n            update()\n            sleep(0.05)\n            fall.clear()\n # Go to the cell and place a dot of the player's color\n up()\n`--snip--`\n```", "```py\nimport turtle as t\nfrom time import sleep\nfrom tkinter import messagebox\n\n# Set up the screen\n`--snip--`\n# Create a second turtle to show disc falling\nfall = t.Turtle()\nfall.up()\nfall.hideturtle()\n# Create a list of valid moves\n1 validinputs = [1,2,3,4,5,6,7]\n# Define a horizontal4() function to check connecting 4 horizontally\n2 def horizontal4(x, y, turn):\n    win = False\n    for dif in (-3, -2, -1, 0):\n        try:\n            if occupied[x+dif][y] == turn\\\n            and occupied[x+dif+1][y] == turn\\\n            and occupied[x+dif+2][y] == turn\\\n            and occupied[x+dif+3][y] == turn\\\n            and  x+dif >= 0:\n                win = True \n        except IndexError:\n            pass\n    return win     \n# Define a vertical4() function to check connecting 4 vertically\n3 def vertical4(x, y, turn):\n    win = False\n    try:\n        if occupied[x][y] == turn\\\n        and occupied[x][y-1] == turn\\\n        and occupied[x][y-2] == turn\\\n        and occupied[x][y-3] == turn\\\n        and y-3 >= 0:\n          win = True\n    except IndexError:\n        pass\n    return win      \n# Define a forward4() function to check connecting 4 diagonally in / shape\ndef forward4(x, y, turn):\n    win = False\n    for dif in (-3, -2, -1, 0):\n        try:\n            if occupied[x+dif][y+dif] == turn\\\n            and occupied[x+dif+1][y+dif+1] == turn\\\n            and occupied[x+dif+2][y+dif+2] == turn\\\n            and occupied[x+dif+3][y+dif+3] == turn\\\n            and x+dif >= 0 and y+dif >= 0:\n              win = True\n        except IndexError:\n            pass\n    return win     \n# Define a back4() function to check connecting 4 diagonally in \\ shape\ndef back4(x, y, turn):\n    win = False\n    for dif in (-3, -2, -1, 0):\n        try:\n            if occupied[x+dif][y-dif] == turn\\\n            and occupied[x+dif+1][y-dif-1] == turn\\\n            and occupied[x+dif+2][y-dif-2] == turn\\\n            and occupied[x+dif+3][y-dif-3] == turn\\\n            and x+dif >= 0 and y-dif-3 >= 0:\n              win = True\n        except IndexError:\n            pass\n    return win \n# Define a win_game() function to check if someone wins the game\n4 def win_game(col, row, turn):\n    win = False\n    # Convert column and row numbers to indexes in the list of lists occupied\n    x = col-1\n    y = row-1\n    # Check all winning possibilities\n    if vertical4(x, y, turn) == True:\n        win = True\n    if horizontal4(x, y, turn) == True:\n        win = True\n    if forward4(x, y, turn) == True:\n        win = True\n    if back4(x, y, turn) == True:\n        win = True\n    # Return the value stored in win\n    return win\n`--snip--`\n```", "```py\n`--snip--`\n# Count the number of rounds\n1 rounds=1\n# Define a function conn() to place a disc in a cell\ndef conn(x,y):\n    # Declare global variables\n  2 global turn, rounds, validinputs\n # Calculate the column number based on x and y values\n if -350<x<350 and -300<y<300:\n col = int((x+450)//100)\n else:\n print('You have clicked outside the game board!')\n    # Check if it's a valid move\n    if col in validinputs:\n # Calculate the lowest available row number in that column\n row = len(occupied[col-1])+1\n`--snip--`\n # Go to the cell and place a dot of the player's color\n t.up()\n t.goto(xs[col-1],ys[row-1])\n t.dot(80,turn)\n t.update()\n # Add the move to the occupied list to keep track\n occupied[col-1].append(turn)\n# Check if the player has won\n      3 if win_game(col, row, turn) == True:\n            # If a player wins, invalid all moves, end the game\n            validinputs = []\n            messagebox.showinfo\\\n           (\"End Game\",f\"Congrats player {turn}, you won!\")\n        # If all cells are occupied and no winner, it's a tie\n        elif rounds == 42:\n            messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n        # Counting rounds\n        rounds += 1\n\n        # Update the list of valid moves\n      4 if len(occupied[col-1]) == 6:\n validinputs.remove(col)\n # Give the turn to the other player\n if turn == \"red\":\n turn = \"yellow\"\n else:\n turn = \"red\" \n    # If col is not a valid move, show error message\n  5 else:\n        messagebox.showerror(\"Error\",\"Sorry, that's an invalid move!\")\n\n# Bind the mouse click to the conn() function\nt.onscreenclick(conn)\nt.listen()\n`--snip--`\n```", "```py\nimport turtle as t\nfrom time import sleep\nfrom tkinter import messagebox\nfrom random import choice\n\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say\n\n# Set up the screen\n`--snip--`\n# Create a list of valid moves\nvalidinputs = ['1','2','3','4','5','6','7']\n`--snip--`\n# Add a dictionary of words to replace\nto_replace = {'number ':'', 'cell ':'',\n              'one':'1', 'two':'2', 'three':'3',\n              'four':'4', 'for':'4', 'five':'5',\n              'six':'6', 'seven':'7'}\n# Start an infinite loop to take voice inputs\n1 while True:\n    # Ask for your move\n print_say(f\"Player {turn}, what's your move?\")\n    # Capture your voice input\n    inp = voice_to_text().lower()\n    print_say(f\"You said {inp}.\")\n    for x in list(to_replace.keys()):   \n        inp = inp.replace(x, to_replace[x])\n    # If it is not a valid move, try again\n    if inp not in validinputs:\n        print_say(\"Sorry, that's an invalid move!\")    \n    # If your voice input is a valid move, play the move\n  2 else:\n        col = int(inp)\n # Calculate the lowest available row number in that column\n row = len(occupied[col-1])+1\n # Show the disc fall from the top\n if row<6:\n for i in range(6,row,-1):\n fall.goto(xs[col-1],ys[i-1])\n fall.dot(80,turn)\n t.update()\n sleep(0.05)\n fall.clear()\n # Go to the cell and place a dot of the player's color\n t.up()\n t.goto(xs[col-1],ys[row-1])\n t.dot(80,turn)\n t.update()\n # Add the move to the occupied list to keep track\n occupied[col-1].append(turn)\n\n # Check if the player has won\n if win_game(col, row, turn) == True:\n # If a player wins, invalid all moves, end the game\n validinputs = []\n          3 print_say(f\"Congrats player {turn}, you won!\")\n messagebox.showinfo/\n (\"End Game\",f\"Congrats player {turn}, you won!\")\n break\n # If all cells are occupied and no winner, it's a tie\n elif rounds == 42:\n            print_say(\"Game over, it's a tie!\")\n messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n break\n # Counting rounds\n rounds += 1\n # Update the list of valid moves\n        if len(occupied[col-1]) == 6:\n            validinputs.remove(str(col)) \n # Give the turn to the other player\n if turn == \"red\":\n turn = \"yellow\"\n else:\n turn = \"red\" \n # The computer randomly selects a move\n      4 if len(validinputs)>0:\n            col = int(choice(validinputs))\n        print_say(f'The computer chooses column {col}.')\n        # Calculate the lowest available row number in that column\n        row = len(occupied[col-1])+1\n        # Show the disc fall from the top\n        if row < 6:\n            for i in range(6,row,-1):\n                fall.goto(xs[col-1],ys[i-1])\n                fall.dot(80,turn)\n                update()\n                sleep(0.05)\n                fall.clear()\n        # Go to the cell and place a dot of the player's color\n        t.up()\n        t.goto(xs[col-1],ys[row-1])\n        t.dot(80,turn)\n        t.update()\n        # Add the move to the occupied list to keep track\n        occupied[col-1].append(turn)\n\n        # Check if the player has won\n        if win_game(col, row, turn) == True:\n            # If a player wins, invalid all moves, end the game\n            validinputs = []\n          5 print_say(f\"Congrats player {turn}, you won!\")\n            messagebox.showinfo\\\n            (\"End Game\",f\"Congrats player {turn}, you won!\")\n            break\n        # If all cells are occupied and no winner, it's a tie\n        elif rounds == 42:\n            print_say(\"Game over, it's a tie!\")\n            messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n            break\n        # Counting rounds\n        rounds += 1\n        # Update the list of valid moves\n        if len(occupied[col-1])==6:\n            validinputs.remove(str(col))\n        # Give the turn to the other player\n        if turn == \"red\":\n            turn = \"yellow\"\n        else:\n            turn = \"red\" \nt.done()\n`--snip--`\n```", "```py\nPlayer red, what's your move?\nYou said number four.\nThe computer chooses column 2.\nPlayer red, what's your move?\nYou said number four.\nThe computer chooses column 2.\nPlayer red, what's your move?\nYou said number four.\nThe computer chooses column 2.\nPlayer red, what's your move?\nYou said number four.\nCongrats player red, you won! \n```", "```py\nimport turtle as t\n\n# Set up the board\nt.setup(600,500)\nt.hideturtle()\nt.tracer(False)\nt.bgcolor(\"lavender\")\nt.title(\"Guess the Word Game in Turtle Graphics\")\n# Define a variable to count how many guesses left\n1 score = 6\n# Create a second turtle to show guesses left\nleft = t.Turtle()\nleft.up()\nleft.hideturtle()\nleft.goto(-290,200)\nleft.write(f\"guesses left:   {score}\",font=('Arial',20,'normal'))\n# Put incorrect guesses on top\nt.up()\nt.goto(-290,150)\nt.write(\"incorrect guesses:\",font=('Arial',20,'normal'))\n# Put four empty spaces for the four letters at bottom\n2 for x in range(4):\n    t.goto(-275+150*x,-200)\n    t.down()\n    t.goto(-175+150*x,-200)\n    t.up()\nt.done()\ntry:\n    t.bye()\nexcept t.Terminator:\n    print('exit turtle')\n```", "```py\n`--snip--`\nfrom tkinter import PhotoImage\nfrom time import sleep\n`--snip--`\n# Put four empty spaces for the four letters at bottom\nfor x in range(4):\n t.goto(-275+150*x,-200)\n t.down()\n t.goto(-175+150*x,-200) \n t.up()\n# Load a picture of the coin to the script\n1 coin = PhotoImage(file=\"cash.png\").subsample(10,10)\nt.addshape(\"coin\", t.Shape(\"image\", coin))\n# Create six coins on screen \n2 coins = [0]*6\nfor i in range(6):\n    coins[i] = t.Turtle('coin')\n    coins[i].up()\n    coins[i].goto(-100+50*i,0)\nt.update()\n3 sleep(3)\n# Make the coins disappear one at a time\nfor i in range(6):\n    coins[-(i+1)].hideturtle()\n    t.update()\n    sleep(1)\nt.done()\n`--snip--`\n```", "```py\n[0, 0, 0, 0, 0, 0]\n```", "```py\nimport turtle as t\nfrom random import choice\n`--snip--`\n# Put four empty spaces for the four letters at bottom\nfor x in range(4):\n t.goto(-275+150*x,-200)\n t.down()\n t.goto(-175+150*x,-200)\n t.up()\nt.update()\n# Put words in a dictionary and randomly pick one\n1 words = ['that', 'with', 'have', 'this', 'will', 'your', \n   'from', 'they', 'know', 'want', 'been', \n   'good', 'much', 'some', 'time']\nword = choice(words)\n# Create a missed list\n2 missed = []\n# Start the game loop\n3 while True:\n    # Take written input \n    inp = input(\"What's your guess?\\n\").lower()\n    # Stop the loop if you key in \"done\"\n    if inp == \"done\":\n        break\n    # Check if the letter is in the word\n  4 elif inp in list(word):\n        # If yes, put it in the right position(s)\n        for w in range(4):\n            if inp == list(word)[w]:\n                t.goto(-250+150*w,-190)\n                t.write(inp,font=('Arial',60,'normal'))\n    # If the letter is not in the word, show it at the top\n  5 else:\n        missed.append(inp)\n        t.goto(-290+80*len(missed),60)\n        t.write(inp,font=('Arial',60,'normal'))\n    # Update everything that happens in the iteration\n    t.update()\ntry:\n t.bye()\nexcept t.Terminator:\n print('exit turtle')\n```", "```py\nWhat's your guess?\n**a**\nWhat's your guess?\n**b**\nWhat's your guess?\n**v**\nWhat's your guess?\n**v**\nWhat's your guess?\n**b**\nWhat's your guess?\n**h**\nWhat's your guess?\n**e**\nWhat's your guess?\n**f**\nWhat's your guess?\n**g**\nWhat's your guess?\n**h**\nWhat's your guess?\n**u**\nWhat's your guess?\n**done**\n```", "```py\nimport turtle as t\nfrom random import choice\nfrom tkinter import messagebox\nfrom tkinter import PhotoImage\n\n`--snip--`\n# Create a missed list\nmissed = []\n# Load a picture of the coin to the script\n1 coin = PhotoImage(file = \"cash.png\").subsample(10,10)\nt.addshape(\"coin\", t.Shape(\"image\", coin))\n# Create six coins on screen \ncoins = [0]*6\nfor i in range(6):\n    coins[i] = t.Turtle('coin')\n    coins[i].up()\n    coins[i].goto(-100+50*i,0)\n2 t.update()\n# Prepare the validinputs and gotright lists\n3 validinputs = list('abcdefghijklmnopqrstuvwxyz')\ngotright = []\n# Start the game loop\nwhile True:\n # Take written input \n inp = input(\"What's your guess?\\n\").lower()\n # Stop the loop if you key in \"done\"\n if inp == \"done\":\n break\n    # If the letter is not a valid input, remind\n    elif inp not in validinputs:\n        messagebox.showerror(\"Error\",\"Sorry, that's an invalid input!\")\n    # Otherwise, go ahead with the game\n  4 else:\n        # Check if the letter is in the word\n        if inp in list(word):\n            # If yes, put it in the right position(s)\n            for w in range(4):\n                if inp == list(word)[w]:\n                    t.goto(-250+150*w,-190)\n                    t.write(inp,font = ('Arial',60,'normal'))\n                    gotright.append(inp)\n            # If got four positions right, the player wins\n            if len(gotright) == 4:\n                messagebox.showinfo\\\n                (\"End Game\",\"Great job, you got the word right!\")\n                break\n        # If the letter is not in the word, show it at the top\n      5 else:\n            # Reduce guesses left by 1\n            score -=  1\n            # Remove a coin\n            coins[-(6-score)].hideturtle()\n            # Update the number of guesses left on board\n            left.clear()\n            left.write\\\n            (f\"guesses left:   {score}\",font = ('Arial',20,'normal'))\n            t.update()            \n            missed.append(inp)\n            t.goto(-290+80*len(missed),60)\n            t.write(inp,font = ('Arial',60,'normal'))\n            if len(missed) == 6:\n                # If all six chances are used up, end game\n messagebox.showinfo\\\n                (\"End Game\",\"Sorry, you used up all your six guesses!\")\n                break \n        # Remove the letter from the validinputs list\n        validinputs.remove(inp)       \n # Update everything that happens in the iteration\n t.update()\n`--snip--`\n```", "```py\nWhat's your guess?\n**a**\nWhat's your guess?\n**o**\nWhat's your guess?\n**d**\nWhat's your guess?\n**c**\nWhat's your guess?\n**b**\nWhat's your guess?\n**k**\nWhat's your guess?\n**m**\n```", "```py\n`--snip--`\n# Import functions from the local package\nfrom mptpkg import voice_to_text, print_say\n`--snip--`\n# Start the game loop\n1 while True:\n    # Ask for your move\n    print_say(\"What's your guess?\")\n    # Capture your voice input\n    inp = voice_to_text().lower()\n    print_say(f\"you said {inp}\")\n    inp = inp.replace('letter ','')\n# Say \"stop listening\" or press CTRL-C to stop the game\n    if inp == \"stop listening\":\n        break\n # If the letter is not a valid input, remind\n elif inp not in validinputs:\n        print_say(\"Sorry, that's an invalid input!\")\n # Otherwise, go ahead with the game\n  2 else: \n # Check if the letter is in the word\n if inp in list(word):\n # If yes, put it in the right position(s)\n for w in range(4):\n if inp == list(word)[w]:\n t.goto(-250+150*w,-190)\n t.write(inp,font = ('Arial',60,'normal'))\n gotright.append(inp)\n # If got four positions right, the player wins\n if len(gotright) == 4:\n              3 print_say(\"Great job, you got the word right!\")\n messagebox.showinfo\\\n (\"End Game\",\"Great job, you got the word right!\")\n break\n # If the letter is not in the word, show it at the top\n else:\n # Reduce guesses left by 1\n score -= 1\n # Remove a coin\n coins[-(6-score)].hideturtle()\n # Update the number of guesses left on board\n left.clear()\n left.write\\\n (f\"guesses left:   {score}\",font = ('Arial',20,'normal'))\n t.update() \n missed.append(inp)\n t.goto(-290+80*len(missed),60)\n t.write(inp,font = ('Arial',60,'normal'))\n if len(missed) == 6:\n # If all six changes are used up, end game\n              4 print_say(\"Sorry, you used up all your six guesses!\")\n                messagebox.showinfo\\\n                (\"End Game\",\"Sorry, you used up all your six guesses!\")\n`--snip--`\n```", "```py\nWhat's your choice?\nyou said letter a\nWhat's your choice?\nyou said letter d\nWhat's your choice?\nyou said letter f\nWhat's your choice?\nyou said letter o\nWhat's your choice?\nyou said letter g\nGreat job, you got the word right!\n```", "```py\n    list('Hi Python')\n    ```", "```py\n`--snip--`\nfrom random import choice\nfrom copy import deepcopy\n`--snip--`\n# Define a horizontal4() function to check connecting 4 horizontally\n1 def horizontal4(x, y, color, board):\n    win = False\n    for dif in (-3, -2, -1, 0):\n        try:\n            if board[x+dif][y] == color\\\n            and board[x+dif+1][y] == color\\\n            and board[x+dif+2][y] == color\\\n            and board[x+dif+3][y] == color\\\n            and  x+dif >= 0:\n                win = True\n        except IndexError:\n            pass\n    return win     \n# Define a vertical4() function to check connecting 4 vertically\ndef vertical4(x, y, color, board):\n`--snip--`\n# Define a win_game() function to check if someone wins the game\n2 def win_game(num, color, board):\n    win = False\n    # Convert column and row numbers to indexes in the list of lists board\n    x = num-1\n    y = len(board[x])-1\n    # Check all winning possibilities\n    if vertical4(x, y, color, board) == True:\n        win = True\n    if horizontal4(x, y, color, board) == True:\n        win = True\n    if forward4(x, y, color, board) == True:\n        win = True\n    if back4(x, y, color, board) == True:\n        win = True\n    # Return the value stored in win\n    return win\n `--snip--`\n# Define the best_move() function\n3 def best_move():\n    # Take column 4 in the first move\n    if len(occupied[3]) == 0:\n        return 4\n    # If only one column has free slots, take it\n    if len(validinputs) == 1:\n return validinputs[0]\n    # Otherwise, see what will happen in the next move hypothetically \n  4 winner = []\n    # Go through all possible moves and see if there is a winning move\n    for move in validinputs:\n        tooccupy = deepcopy(occupied)\n        tooccupy[move-1].append('red')\n        if win_game(move,'red',tooccupy) == True:\n            winner.append(move)        \n    # If there is a winning move, take it\n    if len(winner)>0:\n            return winner[0] \n5 def computer_move():\n    global turn, rounds, validinputs\n    # Choose the best move\n    col = best_move()\n    if col == None:\n        col = choice(validinputs)\n    # Calculate the lowest available row number in that column\n    row = 1+len(occupied[col-1])\n`--snip--`\n # Check if the player has won the game\n  6 if win_game(col, turn, occupied) == True:\n`--snip--`\n# Computer moves first\ncomputer_move()\n# Define a function conn() to place a disc in a cell\ndef conn(x,y):\n # Declare global variables\n global turn, rounds, validinputs\n`--snip--`\n      7 if win_game(col, turn, occupied) == True:\n`--snip--`\n # Computer moves next\n    if len(validinputs)>0:\n        computer_move()\n`--snip--`\n```", "```py\n`--snip--`\n# Define the best_move() function\ndef best_move():\n    # Take column 4 in the first move\n    if len(occupied[3]) == 0:\n        return 4\n    # If only one column has free slots, take it\n    if len(validinputs) == 1:\n        return validinputs[0]\n    # Otherwise, see what will happen in the next move hypothetically \n    winner = []\n    # Go through all possible moves and see if there is a winning move\n  1 for move in validinputs:\n        tooccupy = deepcopy(occupied)\n        tooccupy[move-1].append('red')\n        if win_game(move,'red',tooccupy) == True:\n            winner.append(move)        \n    # If there is a winning move, take it\n    if len(winner)>0:\n        return winner[0]  \n    # If no winning move, look two steps ahead\n  2 if len(winner) == 0 and len(validinputs)>=2:\n        loser = []\n        # Check if your opponent has a winning move\n        for m1 in validinputs:\n            for m2 in validinputs:\n                if m2 != m1:\n                    tooccupy = deepcopy(occupied)\n                    tooccupy[m1-1].append('red')\n                    tooccupy[m2-1].append('yellow')\n                    if win_game(m2, 'yellow',tooccupy) == True:\n                        winner.append(m2) \n                if m2 == m1 and len(occupied[m1-1]) <= 4:\n                    tooccupy2 = deepcopy(occupied)\n                    tooccupy2[m1-1].append('red')\n                    tooccupy2[m2-1].append('yellow')\n                    if win_game(m2,'yellow',tooccupy2) == True:\n                        loser.append(m2) \n        # If your opponent has a winning move, block it\n        if len(winner)>0:\n            return winner[0]\n # If you can make a move to help your opponent to win, avoid it\n      3 if len(loser)>0:\n            myvalids = deepcopy(validinputs)\n            for i in range(len(loser)):\n                myvalids.remove(loser[i])\n            if len(myvalids)>0:\n                return choice(myvalids)  \n`--snip--`\n```", "```py\n`--snip--`\n# Define the validmoves() function to ensure three future moves \n# will not cause any column to have more than six discs in it \ndef validmoves(m1,m2,m3,occupied):\n    validmove = False\n    if m1 == m2 == m3 and len(occupied[m1-1]) <= 3:\n validmove = True\n    if m1 == m2 and m2 != m3 and len(occupied[m1-1]) <= 4:\n        validmove = True\n    if m1 == m3 and m2 != m3 and len(occupied[m1-1]) <= 4:\n        validmove = True\n    if m3 == m2 and m2 != m1 and len(occupied[m3-1]) <= 4:\n        validmove = True\n    return validmove\n# Define the best_move() function\ndef best_move():\n # Take column 4 in the first move\n`--snip--`\n# Otherwise, look 3 moves ahead\n      1 if len(winner) == 0 and len(loser) == 0:\n            # Look at all possible combinations of 3 moves ahead\n            for m1 in validinputs:\n                for m2 in validinputs:\n                    for m3 in validinputs:\n                        if validmoves(m1,m2,m3,occupied) == True: \n                            tooccupy3 = deepcopy(occupied)\n                            tooccupy3[m1-1].append('red')\n                            tooccupy3[m2-1].append('yellow')\n                            tooccupy3[m3-1].append('red')\n                            if win_game(m3, 'red', tooccupy3) == True:\n                                winner.append(m1) \n            # See if there is a move now that can lead to winning in 3 moves\n            if len(winner)>0:\n             2 cnt = {winner.count(x):x for x in winner}\n               maxcnt = sorted(cnt.keys())[-1]\n               return cnt[maxcnt]\n`--snip--`\n```", "```py\nfrom random import choice\nimport pickle\n\n# Define a simulate() function to generate a complete game\n  def simulate():\n    occupied=[list(),list(),list(),list(),list(),list(),list()]\n    validinputs=[1,2,3,4,5,6,7]\n# Define a horizontal4() function to check connecting 4 horizontally\ndef horizontal4(x, y, turn):\n    win=False\n    for dif in (-3, -2, -1, 0):\n`--snip--`\n  1 def win_game(col, row, turn):\n        win=False\n`--snip--`\n        # Return the value stored in win\n        return win\n    # The red player takes the first move \n  2 turn=\"red\"\n    # Keep track of all intermediate moves\n    moves=[]\n    # Use winlose to record game outcome, default value is 0 (a tie)\n    winlose=[0]\n    # Play a maximum of 42 steps\n  3 for i in range(42):\n        # The player randomly selects a move\n        col=choice(validinputs)\n        row=len(occupied[col-1])+1\n        moves.append(col)\n        # Check if the player has won\n        if win_game(col, row, turn)==True:\n            if turn=='red':\n                winlose[0]=1\n            if turn=='yellow':\n                winlose[0]=-1\n            break\n        # Add the move to the occupied list to keep track\n        occupied[col-1].append(turn)\n        # Update the list of valid moves\n        if len(occupied[col-1])==6 and col in validinputs:\n            validinputs.remove(col)\n        # Give the turn to the other player\n        if turn==\"red\":\n            turn=\"yellow\"\n        else:\n turn=\"red\" \n    # Record both game outcome and intermediate steps\n    return winlose+moves\n# Simulate the game 1 million times and record all games\nresults=[]        \n4 for x in range(1000000):\n    result=simulate()\n    results.append(result)\n# Save the simulation data on your computer\n5 with open('conn_simulates.pickle', 'wb') as fp:\n    pickle.dump(results,fp)\n# Read the data and print out the first 10 games\nwith open('conn_simulates.pickle', 'rb') as fp:\n    mylist=pickle.load(fp)\nprint(mylist[0:10])\n```", "```py\n[[1, 1, 7, 1, 5, 7, 6, 5, 1, 5, 7, 5, 2, 5], \n[1, 5, 4, 2, 7, 5, 2, 5, 6, 2, 7, 5], \n[1, 7, 3, 5, 5, 3, 7, 3, 7, 4, 2, 7, 7, 6], \n[-1, 6, 7, 6, 6, 5, 1, 5, 3, 5, 7, 6, 5, 4, 2, 5, 7, 3, 4,\n7, 1, 1, 6, 4, 5, 6, 1, 1, 4, 1, 7, 3, 3, 7, 2, 3, 2, 3, 4], \n[-1, 1, 3, 5, 1, 4, 5, 4, 6, 2, 7, 3, 2, 3, 4, 2, 3], \n[1, 6, 5, 7, 1, 3, 3, 1, 5, 5, 5, 2, 3, 6, 7, 2, 6, 3, 2, 7, \n5, 4, 3, 7, 6, 7, 6, 6, 1, 2, 2, 4, 5, 4, 7, 3, 2, 1, 1, 4], \n[1, 2, 5, 3, 5, 3, 4, 7, 7, 5, 3, 4, 2, 2, 2, 5, 4, 4, 4, 4, 6, 6], \n[1, 2, 5, 6, 4, 6, 7, 5, 5, 7, 4, 1, 3, 6, 3, 2, 1, 7, 1, 6], \n[1, 7, 4, 4, 6, 3, 1, 2, 2, 3, 3, 4, 6, 3, 6, 1, 3, 4, 1, 3, 7, 7, 5, 4], \n[-1, 1, 4, 1, 4, 1, 2, 4, 5, 6, 6, 6, 3]] \n```", "```py\n`--snip--`\n# A history of moves made\nmoves_made=[]\n# Obtain game data\nwith open('conn_simulates.pickle', 'rb') as fp:\n    gamedata=pickle.load(fp)\n# Define the best_move() function\n1 def best_move():\n # Take column 4 in the first move\n if len(occupied[3])==0:\n return 4\n # If there is only one column has free slots, use the column\n if len(validinputs)==1:\n return validinputs[0]\n    simu=[]\n    for y in gamedata:\n       if y[1:len(moves_made)+1]==moves_made:\n           simu.append(y)\n    # Now we look at the next move; \n    outcomes={x:[] for x in validinputs} \n    # We collect all the outcomes for each next move\n    for y in simu:\n       outcomes[y[len(moves_made)+1]].append(y[0])\n    # Set the initial value of bestoutcome\n    bestoutcome=-2;\n    # Randomly select a move to be best_move\n best_move=validinputs[0]\n    # iterate through all possible next moves \n    for move in validinputs:\n        if len(outcomes[move])>0:\n            outcome=sum(outcomes[move])/len(outcomes[move])\n            # If the average outcome beats the current best \n            if outcome>bestoutcome:\n                # Update the bestoutcome\n                bestoutcome=outcome\n                # Update the best move\n                best_move=move\n    return best_move\n# Define a function computer_move()\n2 def computer_move():\n # Declare global variables\n global turn, rounds, validinputs\n # Get the best move\n col=best_move()\n if col==None:\n col=choice(validinputs)\n`--snip--`\n    moves_made.append(col)\n`--snip--`\n# Computer moves first\n3 computer_move()\n# Define a function conn() to place a disc in a cell\n4 def conn(x,y):\n # Declare global variables\n global turn, rounds, validinputs\n`--snip--`\n    moves_made.append(col)\n`--snip--`\n # Computer moves next\n if len(validinputs)>0:\n computer_move()\n`--snip--`\n```", "```py\nimport pickle\nfrom random import choice\nfrom copy import deepcopy\n\n# Define the simulate() function to play a complete game\n1 def simulate():\n    occupied=[list(),list(),list(),list(),list(),list(),list()]\n    validinputs=[1,2,3,4,5,6,7]\n`--snip--`\n    def win_game(num, color, lst):\n        win=False\n`--snip--`\n    def best_move():\n        # Take column 4 in the first move\n        if len(occupied[3])==0:\n            return 4\n`--snip--`\n    # The red player takes the first move\n    turn=\"red\"\n    # Keep track of all intermediate moves\n    moves_made=[]\n 2 winlose=[0]\n    # Play a maximum of 42 steps (21 rounds)\n    for i in range(21):\n        # The player selects the best move\n      3 col=best_move()\n        if col==None:\n            col=choice(validinputs)\n        moves_made.append(col)\n`--snip--`\n        # The other player randomly selects a move\n        col=choice(validinputs)\n        moves_made.append(col)\n`--snip--`\n    # Record both game outcome and intermediate steps \n  4 return winlose+moves_made\n# Repeat the game 1000 times and record all game outcomes\nresults=[]        \n5 for x in range(1000):\n    result=simulate()\n    results.append(result)    \nwith open('outcome_conn_think.pickle', 'wb') as fp:\n    pickle.dump(results,fp)\nwith open('outcome_conn_think.pickle', 'rb') as fp:\n    mylist=pickle.load(fp)    \nwinlose=[x[0] for x in mylist]\n# Print out the number of winning games\n  print(\"the number of winning games is\", winlose.count(1))\n# Print out the number of tying games\nprint(\"the number of tying games is\", winlose.count(0))\n# Print out the number of losing games\nprint(\"the number of losing games is\", winlose.count(-1))\n```", "```py\nthe number of winning games is 995\nthe number of tying games is 0\nthe number of losing games is 5\n```", "```py\n`--snip--`\n    # Obtain gamedata\n    with open('conn_simulates.pickle', 'rb') as fp:\n        gamedata=pickle.load(fp)\n# Define the best_move() function based on the machine-learning strategy\n    def best_move():\n        # Take column 4 in the first move\n        if len(occupied[3])==0:\n            return 4\n`--snip--`\nwith open('outcome_conn_ml.pickle', 'wb') as fp:\n    pickle.dump(results,fp)\nwith open('outcome_conn_ml.pickle', 'rb') as fp:\n    mylist=pickle.load(fp)    \n`--snip--`\n```", "```py\nthe number of winning games is 882\nthe number of tying games is 0\nthe number of losing games is 118 \n```", "```py\nimport pickle\n  validinputs=[1,2,3,4,5,6,7]\n# A game history\n  moves_made=[4,5,4,5,4,5]\n# The game board\noccupied=[list(),list(),list(),\n            ['red','red','red'],\n            ['yellow','yellow','yellow'],\n            list(),list()]\n# Obtain gamedata\nwith open('conn_simulates.pickle', 'rb') as fp:\n    gamedata=pickle.load(fp)\n1 simu=[]\nfor y in gamedata:\n   if y[1:len(moves_made)+1]==moves_made:\n       simu.append(y)\n# Now we look at the next move \noutcomes={x:[] for x in validinputs} \n# We collect all the outcomes for each next move\nfor y in simu:\n   outcomes[y[len(moves_made)+1]].append(y[0])\n2 print(outcomes) \n# Set the initial value of bestoutcome\nbestoutcome=-2;\n# Randomly select a move to be best_move\nbest_move=validinputs[0]\n# Iterate through all possible next moves \n3 for move in validinputs:\n    if len(outcomes[move])>0:\n        outcome=sum(outcomes[move])/len(outcomes[move])\n        print\\\n        (f'when the next move is {move}, the average outcome is {outcome}')\n        # If the average outcome from that move beats the current best move\n        if outcome>bestoutcome:\n            # Update the best outcome\n            bestoutcome=outcome\n            # Update the best move\n            best_move=move\n4 print(f'the best next move is {best_move}')\n```", "```py\n{1: [], 2: [-1, 1], 3: [1], 4: [1], 5: [-1], 6: [-1, -1, 1], 7: [-1]}\n```", "```py\nwhen the next move is 2, the average outcome is 0.0\nwhen the next move is 3, the average outcome is 1.0\nwhen the next move is 4, the average outcome is 1.0\nwhen the next move is 5, the average outcome is -1.0\nwhen the next move is 6, the average outcome is -0.3333333333333333\nwhen the next move is 7, the average outcome is -1.0\n```", "```py\nthe best next move is 3\n```", "```py\n{1: [-1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1], \n2: [1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1], \n3: [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], \n4: [1, 1, 1, 1, 1, 1, 1, 1, 1], \n5: [1, 1, 1, 1, 1, 1, -1], \n6: [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1], \n7: [1, -1, 1, -1, -1, -1, 1, -1, -1, 1]}\nwhen the next move is 1, the average outcome is -0.06666666666666667\nwhen the next move is 2, the average outcome is 0.42857142857142855\nwhen the next move is 3, the average outcome is -0.8181818181818182\nwhen the next move is 4, the average outcome is 1.0\nwhen the next move is 5, the average outcome is 0.7142857142857143\nwhen the next move is 6, the average outcome is -0.07692307692307693\nwhen the next move is 7, the average outcome is -0.2\nthe best next move is 4\n```", "```py\n`--snip--`\n1 def best_move():\n    # Take column 4 in the first move\n    if len(occupied[3])==0:\n        return 4\n`--snip--`\n# Define the computer_move() function\n2 def computer_move():\n    global turn, rounds, validinputs\n    # Choose the best move\n    col=best_move()\n    if col==None:\n        col=choice(validinputs)\n    print_say(f\"The computer chooses column {col}.\")\n`--snip--`\n    # Check if the player has won\n    if win_game(col, turn, occupied)==True:\n        # If a player wins, invalid all moves, end the game\n        validinputs=[]\n      3 print_say(f\"Congrats player {turn}, you won!\")\n        messagebox.showinfo(\"End Game\",f\"Congrats player {turn}, you won!\")\n    # If all cells are occupied and no winner, it's a tie\n    if rounds==42:\n        print_say(\"Game over, it's a tie!\")\n        messagebox.showinfo(\"Tie Game\",\"Game over, it's a tie!\")\n`--snip--`\n# Computer moves first\n4 computer_move()\n# Add a dictionary of words to replace\nto_replace = {'number ':'', 'cell ':'', 'column ':'',\n              'one':'1', 'two':'2', 'three':'3',\n              'four':'4', 'for':'4', 'five':'5',\n              'six':'6', 'seven':'7'}\n# Start a while loop to take voice inputs\n5 while len(validinputs)>0:\n    # Ask for your move\n    print_say(f\"Player {turn}, what's your move?\")\n    # Capture your voice input\n    inp= voice_to_text().lower()\n    print_say(f\"You said {inp}.\")\n    for x in list(to_replace.keys()):   \n        inp = inp.replace(x, to_replace[x])\n    try:\n        col=int(inp)\n    except:\n        print_say(\"Sorry, that's an invalid input!\")\n        continue\n    # If col is not a valid move, try again\n  6 if col not in validinputs:\n        print_say(\"Sorry, that's an invalid move!\") \n        continue\n    # If your voice input is a valid column number, play the move\n    else:\n        # Calculate the lowest available row number in that column\n        row=len(occupied[col-1])+1\n`--snip--`\n            print_say(f\"Congrats player {turn}, you won!\")\n`--snip--`\n            print_say(\"Game over, it's a tie!\")\n`--snip--`\n        if len(validinputs)>0:\n            computer_move()\n`--snip--`\n```", "```py\n`--snip--`\nimport pickle\n`--snip--`\n# A history of moves made\nmoves_made=[]\n# Obtain gamedata\nwith open('conn_simulates.pickle', 'rb') as fp:\n    gamedata=pickle.load(fp)\n# Define the best_move() function based on machine learning\ndef best_move():\n    # Take column 4 in the first move\n    if len(occupied[3])==0:\n        return 4\n`--snip--`\n# Define the computer_move() function \ndef computer_move():\n    global turn, rounds, validinputs\n    # Choose the best move\n    move=best_move()\n    if move==None:\n        move=choice(validinputs)\n    print_say(f\"The computer decides to occupy cell {move}.\")\n`--snip--`\n    moves_made.append(move)\n`--snip--`\n# Computer moves first\ncomputer_move()\n# Start an infinite loop to take voice inputs\nwhile len(validinputs)>0:\n    # Ask for your move\n    print_say(f\"Player {turn}, what's your move?\")\n    # Capture your voice input\n    inp= voice_to_text().lower()\n`--snip--`\n        moves_made.append(inp)\n`--snip--`\n        # Computer moves\n        if len(validinputs)>0:\n            computer_move()\n`--snip--`\n```"]