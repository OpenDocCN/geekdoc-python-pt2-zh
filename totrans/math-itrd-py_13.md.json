["```py\n*factorial.py*\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n – 1)\n```", "```py\n*fractals.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(255)\n    translate(300,500)\n    y(100)\n\ndef y(sz):\n    line(0,0,0,-sz)\n    translate(0,-sz)\n    rotate(radians(30))\n    line(0,0,0,-0.8*sz) #right branch\n    rotate(radians(-60))\n    line(0,0,0,-0.8*sz) #left branch\n    rotate(radians(30))\n    translate(0,sz)\n```", "```py\nRuntimeError: maximum recursion depth exceeded\n```", "```py\n*fractals.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(255)\n    translate(300,500)\n    y(100,2)\n\ndef y(sz,level):\n    if level > 0:\n        line(0,0,0,-sz)\n        translate(0,-sz)\n        rotate(radians(30))\n        y(0.8*sz,level-1)\n        rotate(radians(-60))\n        y(0.8*sz,level-1)\n        rotate(radians(30))\n        translate(0,sz)\n```", "```py\n*fractals.pyde*\ndef draw():\n    background(255)\n    translate(300,500)\n    level = int(map(mouseX,0,width,0,10))\n    y(100,level)\n```", "```py\n*fractals.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(255)\n    translate(300,500)\n    level = int(map(mouseX,0,width,0,15))\n    y(100,level)\n\ndef y(sz,level):\n    if level > 0:\n        line(0,0,0,-sz)\n        translate(0,-sz)\n        angle = map(mouseY,0,height,0,180)\n        rotate(radians(angle))\n        y(0.8*sz,level-1)\n        rotate(radians(-2*angle))\n        y(0.8*sz,level-1)\n        rotate(radians(angle))\n        translate(0,sz)\n```", "```py\n*snowflake.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(255)\n    translate(100,100)\n    snowflake(400,1)\n\ndef snowflake(sz,level):\n    for i in range(3):\n        line(0,0,sz,0)\n        translate(sz,0)\n        rotate(radians(120))\n```", "```py\n*snowflake.pyde*\ndef snowflake(sz,level):\n    for i in range(3):\n        segment(sz,level)\n        rotate(radians(120))\n\ndef segment(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        line(0,0,sz/3.0,0)\n        translate(sz/3.0,0)\n        rotate(radians(-60))\n        line(0,0,sz/3.0,0)\n        translate(sz/3.0,0)\n        rotate(radians(120))\n        line(0,0,sz/3.0,0)\n        translate(sz/3.0,0)\n        rotate(radians(-60))\n        line(0,0,sz/3.0,0)\n        translate(sz/3.0,0)\n```", "```py\n*snowflake.pyde*\ndef segment(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        segment(sz/3.0,level-1)\n rotate(radians(-60))\n        segment(sz/3.0,level-1)\n        rotate(radians(120))\n        segment(sz/3.0,level-1)\n        rotate(radians(-60))\n        segment(sz/3.0,level-1)\n```", "```py\ndef draw():\n    background(255)\n    translate(100,height-100)\n    snowflake(400,3)\n```", "```py\nlevel = map(mouseX,0,width,0,7)\n```", "```py\nlevel = int(map(mouseX,0,width,0,7))\n```", "```py\n*snowflake.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(255)\n    translate(100,200)\n    level = int(map(mouseX,0,width,0,7))\n    #y(100,level)\n    snowflake(400,level)\n\ndef snowflake(sz,level):\n    for i in range(3):\n        segment(sz,level)\n        rotate(radians(120))\n\ndef segment(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        segment(sz/3.0,level-1)\n        rotate(radians(-60))\n        segment(sz/3.0,level-1)\n        rotate(radians(120))\n        segment(sz/3.0,level-1)\n        rotate(radians(-60))\n        segment(sz/3.0,level-1)\n```", "```py\n*sierpinski.pyde*\ndef setup():\n    size(600,600)\n\ndef draw():\n    background(255)\n    translate(50,450)\n    sierpinski(400,0)\n\ndef sierpinski(sz, level):\n    if level == 0: #draw a black triangle\n        fill(0)\n        triangle(0,0,sz,0,sz/2.0,-sz*sqrt(3)/2.0)\n```", "```py\ndef draw():\n    background(255)\n    translate(50,450)\n    sierpinski(400,8)\n\ndef sierpinski(sz, level):\n    if level == 0: #draw a black triangle\n        fill(0)\n        triangle(0,0,sz,0,sz/2.0,-sz*sqrt(3)/2.0)\n    else: #draw sierpinskis at each vertex\n        for i in range(3):\n            sierpinski(sz/2.0,level-1)\n            translate(sz/2.0,-sz*sqrt(3)/2.0)\n            rotate(radians(120))\n```", "```py\nsierpinski(400,8)\n```", "```py\n*squareFractal.pyde*\ndef setup():\n    size(600,600)\n    fill(150,0,150) #purple\n    noStroke()\n\ndef draw():\n    background(255)\n    translate(50,50)\n    squareFractal(500,0)\n\ndef squareFractal(sz,level):\n    if level == 0:\n        rect(0,0,sz,sz)\n```", "```py\n*squareFractal.pyde*\ndef squareFractal(sz,level):\n    if level == 0:\n        rect(0,0,sz,sz)\n    else:\n        rect(0,0,sz/2.0,sz/2.0)\n        translate(sz/2.0,0)\n        rect(0,0,sz/2.0,sz/2.0)\n        translate(-sz/2.0,sz/2.0)\n        rect(0,0,sz/2.0,sz/2.0)\n```", "```py\n*squareFractal.pyde*\ndef squareFractal(sz,level):\n    if level == 0:\n        rect(0,0,sz,sz)\n    else:\n        squareFractal(sz/2.0,level-1)\n        translate(sz/2.0,0)\n        squareFractal(sz/2.0,level-1)\n translate(-sz/2.0,sz/2.0)\n        squareFractal(sz/2.0,level-1)\n```", "```py\n*squareFractal.pyde*\ndef squareFractal(sz,level):\n    if level == 0:\n        rect(0,0,sz,sz)\n    else:\n        pushMatrix()\n        squareFractal(sz/2.0,level-1)\n        translate(sz/2.0,0)\n        squareFractal(sz/2.0,level-1)\n        translate(-sz/2.0,sz/2.0)\n        squareFractal(sz/2.0,level-1)\n        popMatrix()\n```", "```py\n*squareFractal.pyde*\ndef draw():\n    background(255)\n    translate(50,50)\n    level = int(map(mouseX,0,width,0,7))\n    squareFractal(500,level)\n```", "```py\n*dragonCurve.pyde*\ndef setup():\n    size(600,600)\n    strokeWeight(2) #a little thicker lines\n\ndef draw():\n    background(255)\n    translate(width/2,height/2)\n    leftDragon(5,11)\n\ndef leftDragon(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        leftDragon(sz,level-1)\n        rotate(radians(-90))\n        rightDragon(sz,level-1)\n```", "```py\n*dragonCurve.pyde*\ndef rightDragon(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        leftDragon(sz,level-1)\n        rotate(radians(90))\n        rightDragon(sz,level-1)\n```", "```py\n*dragonCurve.pyde*\n➊ RED = color(255,0,0)\n  BLACK = color(0)\n def setup():\n  ➋ global thelevel,size1\n    size(600,600)\n  ➌ thelevel = 1\n    size1 = 40\n\n def draw():\n    global thelevel\n    background(255)\n    translate(width/2,height/2)\n  ➍ angle = map(mouseX,0,width,0,2*PI)\n    stroke(RED)\n    strokeWeight(3)\n    pushMatrix()\n    leftDragon(size1,thelevel)\n    popMatrix()\n    leftDragon(size1,thelevel-1)\n  ➎ rotate(angle)\n    stroke(BLACK)\n    rightDragon(size1,thelevel-1)\n\n def leftDragon(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        leftDragon(sz,level-1)\n        rotate(radians(-90))\n        rightDragon(sz,level-1)\n\n def rightDragon(sz,level):\n    if level == 0:\n        line(0,0,sz,0)\n        translate(sz,0)\n    else:\n        leftDragon(sz,level-1)\n        rotate(radians(90))\n        rightDragon(sz,level-1)\n\n def keyPressed():\n    global thelevel,size1\n  ➏ if key == CODED:\n        if keyCode == UP:\n            thelevel += 1\n        if keyCode == DOWN:\n            thelevel -= 1\n        if keyCode == LEFT:\n            size1 -= 5\n        if keyCode == RIGHT:\n            size1 += 5\n```"]