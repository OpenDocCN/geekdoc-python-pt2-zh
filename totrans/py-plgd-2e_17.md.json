["```py\nimport time\nimport array\nimport random\nimport os\nfrom machine import I2S\nfrom machine import Pin\n\n```", "```py\n# notes of a minor pentatonic scale\n# piano C4-E(b)-F-G-B(b)-C5\n❶ pmNotes = {'C4': 262, 'Eb': 311, 'F': 349, 'G':391, 'Bb':466}\n# button to note mapping\n❷ btnNotes = {0: ('C4', 262), 1: ('Eb', 311), 2: ('F', 349), 3: ('G', 391),\n            4: ('Bb', 466)}\n# sample rate\n❸ SR = 16000\n\n```", "```py\n# generate note of given frequency\ndef generate_note(freq):\n    nSamples = SR\n    N = int(SR/freq)\n    # initialize ring buffer\n  ❶ buf = [2*random.random() - 1 for i in range(N)]\n    # init sample buffer\n  ❷ samples = array.array('h', [0]*nSamples)\n    for i in range(nSamples):\n      ❸ samples[i] = int(buf[0] * (2 ** 15 - 1))\n      ❹ avg = 0.4975*(buf[0] + buf[1])\n        buf.append(avg)\n        buf.pop(0)\n  ❺ return samples\n\n```", "```py\ndef create_notes():\n    \"create pentatonic notes and save to files in flash\"\n  ❶ files = os.listdir()\n  ❷ for (k, v) in pmNotes.items():\n        # set note filename\n      ❸ file_name = k + \".bin\"\n        # check if file already exists\n      ❹ if file_name in files:\n            print(\"Found \" + file_name + \". Skipping...\")\n            continue\n        # generate note\n        print(\"Generating note \" + k + \"...\")\n      ❺ samples = generate_note(v)\n        # write to file\n        print(\"Writing \" + file_name + \"...\")\n      ❻ file_samples = open(file_name, \"wb\")\n      ❼ file_samples.write(samples)\n      ❽ file_samples.close()\n\n```", "```py\ndef play_note(note, audio_out):\n    \"read note from file and send via I2S\"\n  ❶ fname = note[0] + \".bin\"\n    print(\"opening \" + fname)\n    # open file\n    try:\n        print(\"opening {}...\".format(fname))\n      ❷ file_samples = open(fname, \"rb\")\n    except:\n        print(\"Error opening file: {}!\".format(fname))\n        return\n    # allocate sample array\n  ❸ samples = bytearray(1000)\n    # memoryview used to reduce heap allocation\n  ❹ samples_mv = memoryview(samples)\n    # read samples and send to I2S\n    try:\n      ❺ while True:\n          ❻ num_read = file_samples.readinto(samples_mv)\n            # end of file?\n          ❼ if num_read == 0:\n                break\n            else:\n                # send samples via I2S\n              ❽ num_written = audio_out.write(samples_mv[:num_read])\n  ❾ except (Exception) as e:\n        print(\"Exception: {}\".format(e))\n    # close file\n  ❿ file_samples.close()\n\n```", "```py\ndef main():\n    # set up LED\n  ❶ led = Pin(25, Pin.OUT)\n    # turn on LED\n    led.toggle()\n    # create notes and save in flash\n  ❷ create_notes()\n    # create I2S object\n  ❸ audio_out = I2S(\n        0,                  # I2S ID\n        sck=Pin(0),         # SCK Pin\n        ws=Pin(1),          # WS Pin\n        sd=Pin(2),          # SD Pin\n        mode=I2S.TX,        # I2S transmitter\n        bits=16,            # 16 bits per sample\n        format=I2S.MONO,    # Mono - single channel\n        rate=SR,            # sample rate\n        ibuf=2000,          # I2S buffer length\n    )\n    # set up btns\n  ❹ btns = [Pin(3, Pin.IN, Pin.PULL_UP),\n            Pin(4, Pin.IN, Pin.PULL_UP),\n            Pin(5, Pin.IN, Pin.PULL_UP),\n            Pin(6, Pin.IN, Pin.PULL_UP),\n            Pin(7, Pin.IN, Pin.PULL_UP)]\n    # \"ready\" note\n  ❺ play_note(('C4', 262), audio_out)\n    print(\"Piano ready!\")\n    # turn off LED\n  ❻ led.toggle()\n    while True:\n        for i in range(5):\n            if btns[i].value() == 0:\n              ❼ play_note(btnNotes[i], audio_out)\n                break\n      ❽ time.sleep(0.2)\n\n```", "```py\n    def timed_function(f, *args, **kwargs):\n        myname = str(f).split(' ')[1]\n        def new_func(*args, **kwargs):\n            t = time.monotonic()\n            result = f(*args, **kwargs)\n            delta = time.monotonic() - t\n            print('Function {} Time = {:f} s'.format(myname, delta))\n            return result\n        return new_func\n\n    ```", "```py\n    # generate note of given frequency\n    @timed_function\n    def generateNote(freq):\n        nSamples = SR\n        N = int(SR/freq)\n        --`snip`--\n\n    ```", "```py\n    Function generateNote Time = 1019.711ms\n\n    ```", "```py\n\"\"\"\nkarplus_pico.py\nUses the Karplus-Strong algorithm to generate musical notes in a\npentatonic scale. Runs on a Raspberry Pi Pico. (MicroPython)\nAuthor: Mahesh Venkitachalam\n\"\"\"\nimport time\nimport array\nimport random\nimport os\nfrom machine import I2S\nfrom machine import Pin\n# notes of a minor pentatonic scale\n# piano C4-E(b)-F-G-B(b)-C5\npmNotes = {'C4': 262, 'Eb': 311, 'F': 349, 'G':391, 'Bb':466}\n# button to note mapping\nbtnNotes = {0: ('C4', 262), 1: ('Eb', 311), 2: ('F', 349), 3: ('G', 391),\n            4: ('Bb', 466)}\n# sample rate\nSR = 16000\ndef timed_function(f, *args, **kwargs):\n    myname = str(f).split(' ')[1]\n    def new_func(*args, **kwargs):\n        t = time.ticks_us()\n        result = f(*args, **kwargs)\n        delta = time.ticks_diff(time.ticks_us(), t)\n        print('Function {} Time = {:6.3f}ms'.format(myname, delta/1000))\n        return result\n    return new_func\n# generate note of given frequency\n# (Uncomment line below when you need to time the function.)\n# @timed_function\ndef generate_note(freq):\n    nSamples = SR\n    N = int(SR/freq)\n    # initialize ring buffer\n    buf = [2*random.random() - 1 for i in range(N)]\n    # init sample buffer\n    samples = array.array('h', [0]*nSamples)\n    for i in range(nSamples):\n        samples[i] = int(buf[0] * (2 ** 15 - 1))\n        avg = 0.4975*(buf[0] + buf[1])\n        buf.append(avg)\n        buf.pop(0)\n    return samples\n# generate note of given frequency - improved method\ndef generate_note2(freq):\n    nSamples = SR\n    sampleRate = SR\n    N = int(sampleRate/freq)\n    # initialize ring buffer\n    buf = [2*random.random() - 1 for i in range(N)]\n    # init sample buffer\n    samples = array.array('h', [0]*nSamples)\n    start = 0\n    for i in range(nSamples):\n        samples[i] = int(buf[start] * (2**15 - 1))\n        avg = 0.4975*(buf[start] + buf[(start + 1) % N])\n        buf[(start + N) % N] = avg\n        start = (start + 1) % N\n    return samples\ndef play_note(note, audio_out):\n    \"read note from file and send via I2S\"\n    fname = note[0] + \".bin\"\n    # open file\n    try:\n        print(\"opening {}...\".format(fname))\n        file_samples = open(fname, \"rb\")\n    except:\n        print(\"Error opening file: {}!\".format(fname))\n        return\n    # allocate sample array\n    samples = bytearray(1000)\n    # memoryview used to reduce heap allocation\n    samples_mv = memoryview(samples)\n    # read samples and send to I2S\n    try:\n        while True:\n            num_read = file_samples.readinto(samples_mv)\n            # end of file?\n            if num_read == 0:\n                break\n            else:\n                # send samples via I2S\n                num_written = audio_out.write(samples_mv[:num_read])\n    except (Exception) as e:\n        print(\"Exception: {}\".format(e))\n    # close file\n    file_samples.close()\ndef create_notes():\n    \"create pentatonic notes and save to files in flash\"\n    files = os.listdir()\n    for (k, v) in pmNotes.items():\n        # set note filename\n        file_name = k + \".bin\"\n        # check if file already exists\n        if file_name in files:\n            print(\"Found \" + file_name + \". Skipping...\")\n            continue\n        # generate note\n        print(\"Generating note \" + k + \"...\")\n        samples = generate_note(v)\n        # write to file\n        print(\"Writing \" + file_name + \"...\")\n        file_samples = open(file_name, \"wb\")\n        file_samples.write(samples)\n        file_samples.close()\ndef main():\n    # set up LED\n    led = Pin(25, Pin.OUT)\n    # turn on LED\n    led.toggle()\n    # create notes and save in flash\n    create_notes()\n    # create I2S object\n    audio_out = I2S(\n        0,                  # I2S ID\n        sck=Pin(0),         # SCK Pin\n        ws=Pin(1),          # WS Pin\n        sd=Pin(2),          # SD Pin\n        mode=I2S.TX,        # I2S transmitter\n        bits=16,            # 16 bits per sample\n        format=I2S.MONO,    # Mono - single channel\n        rate=SR,            # sample rate\n        ibuf=2000,          # I2S buffer length\n    )\n    # set up btns\n    btns = [Pin(3, Pin.IN, Pin.PULL_UP),\n            Pin(4, Pin.IN, Pin.PULL_UP),\n            Pin(5, Pin.IN, Pin.PULL_UP),\n            Pin(6, Pin.IN, Pin.PULL_UP),\n            Pin(7, Pin.IN, Pin.PULL_UP)]\n    # \"ready\" note\n    play_note(('C4', 262), audio_out)\n    print(\"Piano ready!\")\n    # turn off LED\n    led.toggle()\n    while True:\n        for i in range(5):\n            if btns[i].value() == 0:\n                play_note(btnNotes[i], audio_out)\n                break\n        time.sleep(0.2)\n# call main\nif __name__ == '__main__':\n    main()\n\n```"]