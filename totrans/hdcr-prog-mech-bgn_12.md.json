["```py\nx y\nx y\nx y\n```", "```py\n300 300\n700 400\n300 500\n```", "```py\nif __name__ == '__main__':\n   print('This is working')\n```", "```py\n$ python3 apps/circle_from_points/main.py\n```", "```py\n300 300\n700 400\n300 500\n```", "```py\ndef parse_points():\n    return (\n        input(),\n        input(),\n        input(),\n    )\n```", "```py\nfrom apps.circle_from_points.input import parse_points\n\nif __name__ == '__main__':\n    (a, b, c) = parse_points()\n    print(f'{a}\\n{b}\\n{c}')\n```", "```py\npoints = parse_points()\na = points[0]\nb = points[1]\nc = points[2]\n```", "```py\nInput is being redirected from --snip--/test.txt\nConsole output is saving to: --snip--/result.svg\n300 300\n700 400\n300 500\n\nProcess finished with exit code 0\n```", "```py\n>>> import re\n>>> pattern = r'it takes (\\d+) hours to go from (\\w+) to (\\w+)'\n>>> target = 'it takes 4 hours to go from Barcelona to Pamplona'\n>>> matches = re.match(pattern, target)\n>>> matches.groups()\n('4', 'Barcelona', 'Pamplona')\n```", "```py\nname = matches.group('name')\nnick = matches.group('nick')\n```", "```py\n(?P<name><regex>)\n```", "```py\n➊ import re\n\n  from geom2d import Point\n\n  def parse_points():\n      return (\n          __point_from_string(input()),\n          __point_from_string(input()),\n          __point_from_string(input()),\n      )\n\n  def __point_from_string(string: str):\n   ➋ matches = re.match(r'(?P<x>\\d+)\\s(?P<y>\\d+)', string)\n      return Point(\n       ➌ int(matches.group('x')),\n       ➍ int(matches.group('y'))\n      )\n```", "```py\nInput is being redirected from --snip--/test.txt\nConsole output is saving to: --snip--/result.svg\n(300, 300)\n(700, 400)\n(300, 500)\n\nProcess finished with exit code 0\n```", "```py\n{\n  \"input\": {\n    \"stroke-color\": \"#4A90E2\",\n    \"stroke-width\": 2,\n    \"fill-color\": \"#ffffffbb\",\n    \"label-size\": 16,\n    \"font-family\": \"Helvetica\"\n  },\n  \"output\": {\n    \"stroke-color\": \"#50E3C2\",\n    \"stroke-width\": 4,\n    \"fill-color\": \"#ffffff\",\n    \"label-size\": 14,\n    \"font-family\": \"Helvetica\"\n  }\n}\n```", "```py\nimport json\nimport re\n\nimport pkg_resources as res\n\ndef read_config():\n    config = res.resource_string(__name__, 'config.json')\n    return json.loads(config)\n\n--snip--\n```", "```py\nfrom apps.circle_from_points.input import parse_points\nfrom geom2d import make_circle_from_points\n\nif __name__ == '__main__':\n    (a, b, c) = parse_points()\n    circle = make_circle_from_points(a, b, c)\n    print(circle)\n```", "```py\ncircle c = (487.5, 400.0), r = 212.5\n```", "```py\nfrom geom2d import Circle, Point\n\ndef draw_to_svg(points: [Point], circle: Circle, config):\n    print(\"Almost there...\")\n```", "```py\nfrom apps.circle_from_points.input import parse_points, read_config\nfrom apps.circle_from_points.output import draw_to_svg\nfrom geom2d import make_circle_from_points\n\nif __name__ == '__main__':\n    (a, b, c) = parse_points()\n    circle = make_circle_from_points(a, b, c)\n    draw_to_svg((a, b, c), circle, read_config())\n```", "```py\nfrom geom2d import make_rect_centered, Circle, Point, Vector\nfrom graphic import svg\n\ndef draw_to_svg(points: [Point], circle: Circle, config):\n ➊ svg_output = output_to_svg(circle, config['output'])\n\n ➋ viewbox = make_viewbox(circle)\n ➌ svg_img = svg.svg_content(\n        viewbox.size, svg_output, viewbox\n    )\n\n    print(svg_img)\n\ndef output_to_svg(circle: Circle, config):\n ➍ style = style_from_config(config)\n ➎ label_style = label_style_from_config(config)\n\n    return [\n     ➏ svg.circle(circle, style),\n     ➐ svg.text(\n            f'O {circle.center}',\n            circle.center,\n            Vector(0, 0),\n            label_style\n        ),\n     ➑ svg.text(\n            f'r = {circle.radius}',\n            circle.center,\n            Vector(0, 20),\n            label_style\n        )\n    ]\n```", "```py\n--snip--\n\ndef make_viewbox(circle: Circle):\n    height = 2.5 * circle.radius\n    width = 4 * circle.radius\n    return make_rect_centered(circle.center, width, height)\n```", "```py\n--snip--\n\ndef style_from_config(config):\n    return [\n        svg.stroke_color(config['stroke-color']),\n        svg.stroke_width(config['stroke-width']),\n        svg.fill_color(config['fill-color'])\n    ]\n```", "```py\n--snip--\n\ndef label_style_from_config(config):\n    return [\n        svg.font_size(config['label-size']),\n        svg.font_family(config['font-family']),\n        svg.fill_color(config['stroke-color'])\n    ]\n```", "```py\n--snip--\n\ndef input_to_svg(points: [Point], point_radius: float, config):\n    style = style_from_config(config)\n    label_style = label_style_from_config(config)\n ➊ [a, b, c] = points\n ➋ disp = Vector(1.25 * point_radius, 0)\n\n ➌ return [\n        svg.circle(Circle(a, point_radius), style),\n        svg.circle(Circle(b, point_radius), style),\n        svg.circle(Circle(c, point_radius), style),\n        svg.text(f'A {a}', a, disp, label_style),\n        svg.text(f'B {b}', b, disp, label_style),\n        svg.text(f'C {c}', c, disp, label_style)\n    ]\n```", "```py\ndef draw_to_svg(points: [Point], circle: Circle, config):\n ➊ pt_radius = circle.radius / 20\n    svg_output = output_to_svg(circle, config['output'])\n ➋ svg_input = input_to_svg(points, pt_radius, config['input'])\n\n    viewbox = make_viewbox(circle)\n    svg_img = svg.svg_content(\n     ➌ viewbox.size, svg_output + svg_input, viewbox\n    )\n\n    print(svg_img)\n\n--snip--\n```", "```py\nsvg_input + svg_output\n```", "```py\nfrom geom2d import make_rect_centered, Circle, Point, Vector\nfrom graphic import svg\n\ndef draw_to_svg(points: [Point], circle: Circle, config):\n    pt_radius = circle.radius / 20\n    svg_output = output_to_svg(circle, config['output'])\n    svg_input = input_to_svg(points, pt_radius, config['input'])\n\n    viewbox = make_viewbox(circle)\n    svg_img = svg.svg_content(\n        viewbox.size, svg_output + svg_input, viewbox\n    )\n\n    print(svg_img)\n\ndef output_to_svg(circle: Circle, config):\n    style = style_from_config(config)\n    label_style = label_style_from_config(config)\n\n    return [\n        svg.circle(circle, style),\n        svg.text(\n            f'O {circle.center}',\n            circle.center,\n            Vector(0, 0),\n            label_style\n        ),\n        svg.text(\n            f'r = {circle.radius}',\n            circle.center,\n            Vector(0, 20),\n            label_style\n        )\n    ]\n\ndef input_to_svg(points: [Point], point_radius: float, config):\n    style = style_from_config(config)\n    label_style = label_style_from_config(config)\n    [a, b, c] = points\n    disp = Vector(1.25 * point_radius, 0)\n\n    return [\n        svg.circle(Circle(a, point_radius), style),\n        svg.circle(Circle(b, point_radius), style),\n        svg.circle(Circle(c, point_radius), style),\n        svg.text(f'A {a}', a, disp, label_style),\n        svg.text(f'B {b}', b, disp, label_style),\n        svg.text(f'C {c}', c, disp, label_style)\n    ]\n\ndef style_from_config(config):\n    return [\n        svg.stroke_color(config['stroke-color']),\n        svg.stroke_width(config['stroke-width']),\n        svg.fill_color(config['fill-color'])\n    ]\n\ndef label_style_from_config(config):\n    return [\n        svg.font_size(config['label-size']),\n        svg.font_family(config['font-family']),\n        svg.fill_color(config['stroke-color'])\n    ]\n\ndef make_viewbox(circle: Circle):\n    height = 2.5 * circle.radius\n    width = 4 * circle.radius\n    return make_rect_centered(circle.center, width, height)\n```", "```py\n<svg --snip-- transform=\"matrix(1 0 0 -1 0 0)\">\n    --snip--\n</svg>\n```", "```py\n$ cd apps/circle_from_points\n```", "```py\n$ python3 main.py < test.txt\n```", "```py\n    Traceback (most recent call last):\n      File \"main.py\", line 6, in <module>\n        from apps.circle_from_points.input import --snip--\n    ModuleNotFoundError: No module named 'apps'\n```", "```py\n    ModuleNotFoundError: No module named 'apps'\n```", "```py\nimport sys\nprint(sys.path)\n\n--snip--\n```", "```py\n/usr/local/bin/python3.7 --snip--/main.py\nInput is being redirected from --snip--/test.txt\nConsole output is saving to: --snip--/result.svg\n\n['--snip--/Mechanics/apps/circle_from_points',\n'--snip--/Mechanics',\n'--snip--/Python.framework/Versions/3.7/lib/python37.zip',\n'--snip--/Python.framework/Versions/3.7/lib/python3.7',\n'--snip--/Python.framework/Versions/3.7/lib/python3.7/lib-dynload',\n'--snip--/Python/3.7/lib/python/site-packages',\n'/usr/local/lib/python3.7/site-packages']\n```", "```py\n$ python3 main.py < test.txt\n```", "```py\n['--snip--/Mechanics/apps/circle_from_points',\n'--snip--/Python.framework/Versions/3.7/lib/python37.zip',\n'--snip--/Python.framework/Versions/3.7/lib/python3.7',\n'--snip--/Python.framework/Versions/3.7/lib/python3.7/lib-dynload',\n'---snip--/Python/3.7/lib/python/site-packages',\n'/usr/local/lib/python3.7/site-packages']\n```", "```py\n  import os\n  import sys\n\n➊ parent_path = os.path.normpath(os.path.join(os.getcwd(), '..', '..'))\n➋ sys.path.append(parent_path)\n\n  from apps.circle_from_points.input import parse_points, read_config\n  from apps.circle_from_points.output import draw_to_svg\n  from geom2d import make_circle_from_points\n\n  if __name__ == '__main__':\n      (a, b, c) = parse_points()\n      circle = make_circle_from_points(a, b, c)\n      draw_to_svg((a, b, c), circle, read_config())\n```", "```py\n$ python3 main.py < test.txt\n```", "```py\nPYTHONPATH=$PWD python3 apps/circle_from_points/main.py\n```", "```py\n$ bash cifpts.sh < apps/circle_from_points/test.txt\n```", "```py\n$ chmod +x cifpts.sh\n```", "```py\n$ ./cifpts.sh < apps/circle_from_points/test.txt\n```", "```py\n$ ./cifpts.sh < apps/circle_from_points/test.txt > result.svg\n```", "```py\n$ ./cifpts.sh > result.svg\n$ 300 300\n$ 700 400\n$ 300 500\n```"]