["```py\n>>> import numpy as np\n\n>>> np.linalg.eig([[4,0],[0,2]])[0]\n\narray([4., 2.])\n\n>>> np.linalg.eig([[2,0],[1,-2]])[0]\n\narray([-2., 2.])\n\n>>> np.linalg.eig([[0,-4],[2,-4]])[0]\n\narray([-2.+2.j, -2.-2.j])\n```", "```py\nimport numpy as np\n\ndef f(x):\n\n    return 2.0 - x*x\n\ndef d(x):\n\n    return -2.0*x\n\nx = 1.0\n\nfor i in range(5):\n\n    x = x - f(x)/d(x)\n\n    print(\"%2d: %0.16f\" % (i+1,x))\n\nprint(\"NumPy says sqrt(2) = %0.16f for a deviation of %0.16f\" %\n\n     (np.sqrt(2), np.abs(np.sqrt(2)-x)))\n```", "```py\n 1: 1.5000000000000000\n\n 2: 1.4166666666666667\n\n 3: 1.4142156862745099\n\n 4: 1.4142135623746899\n\n 5: 1.4142135623730951\n\nNumPy says sqrt(2) = 1.4142135623730951 for a\n\ndeviation of 0.0000000000000000\n```", "```py\n   import numpy as np\n\n   def f(x):\n\n       x0,x1 = x[0,0],x[1,0]\n\n       return np.array([[4*x0-2*x0*x1],[2*x1+x0*x1-2*x1**2]])\n\n   def JI(x):\n\n       x0,x1 = x[0,0],x[1,0]\n\n       d = (4-2*x1)*(2-x0-4*x1)+2*x0*x1\n\n       return (1/d)*np.array([[2-x0-4*x1,2*x0],[-x1,4-2*x0]])\n\n   x0 = float(input(\"x0: \"))\n\n   x1 = float(input(\"x1: \"))\n\n❶ x = np.array([[x0],[x1]])\n\n   N = 20\n\n   for i in range(N):\n\n    ❷ x = x - JI(x) @ f(x)\n\n       if (i > (N-10)):\n\n           print(\"%4d: (%0.8f, %0.8f)\" % (i, x[0,0],x[1,0]))\n```", "```py\n11: (0.00004807, -1.07511237)\n\n12: (0.00001107, -0.61452262)\n\n13: (0.00000188, -0.27403667)\n\n14: (0.00000019, -0.07568702)\n\n15: (0.00000001, -0.00755378)\n\n16: (0.00000000, -0.00008442)\n\n17: (0.00000000, -0.00000001)\n\n18: (0.00000000, -0.00000000)\n\n19: (0.00000000, -0.00000000)\n```", "```py\n>>> np.linalg.eig([[4,0,1],[0,-2,3],[1,3,0]])[0]\n\narray([ 4.34211128, 1.86236874, -4.20448002])\n```"]