- en: Glossary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: abstract base class (ABC)
  prefs: []
  type: TYPE_NORMAL
- en: A class that specifies an interface that must be implemented by any derived
    class. An ABC cannot itself be instantiated. (See also *virtual subclassing*.)
  prefs: []
  type: TYPE_NORMAL
- en: abstract syntax tree (AST)
  prefs: []
  type: TYPE_NORMAL
- en: A tree data structure that represents the overall structure of the code. Used
    by some static analyzers, such as Bandit.
  prefs: []
  type: TYPE_NORMAL
- en: accelerator module
  prefs: []
  type: TYPE_NORMAL
- en: A binary extension module that offers behavior equivalent to that of a pure
    Python module but that is written in C, making it faster and able to bypass the
    GIL. (See also *wrapper module*.)
  prefs: []
  type: TYPE_NORMAL
- en: alias (v.)
  prefs: []
  type: TYPE_NORMAL
- en: To bind a mutable value to more than one name. Mutations performed on a value
    bound to one name will be visible on all names bound to that mutable value.
  prefs: []
  type: TYPE_NORMAL
- en: '`and`'
  prefs: []
  type: TYPE_NORMAL
- en: A logical operator where both operand expressions must evaluate to `True` for
    this operator to evaluate as `True` itself. (See also `not`, `or`.)
  prefs: []
  type: TYPE_NORMAL
- en: annotation
  prefs: []
  type: TYPE_NORMAL
- en: A piece of valid language syntax that is ignored by the language itself but
    that provides additional information to the programmer or to a static analyzer.
    (See also *type hint*.)
  prefs: []
  type: TYPE_NORMAL
- en: anonymous
  prefs: []
  type: TYPE_NORMAL
- en: Describes any callable that is defined without a name; anonymous callables can
    still be bound to names. (See also *generator expression*; *lambda*.)
  prefs: []
  type: TYPE_NORMAL
- en: arbitrary argument list
  prefs: []
  type: TYPE_NORMAL
- en: See *argument, variadic*.
  prefs: []
  type: TYPE_NORMAL
- en: arbitrary execution
  prefs: []
  type: TYPE_NORMAL
- en: A technique whereby strings can be directly executed as Python code. (See also
    *code injection attack*.)
  prefs: []
  type: TYPE_NORMAL
- en: argument
  prefs: []
  type: TYPE_NORMAL
- en: A value passed to a parameter of a callable. (See also *argument, keyword*;
    *argument, positional*.)
  prefs: []
  type: TYPE_NORMAL
- en: argument, keyword
  prefs: []
  type: TYPE_NORMAL
- en: An argument that is mapped to a parameter based on direct assignment to a parameter
    name within the argument list. (See also *argument, positional*.)
  prefs: []
  type: TYPE_NORMAL
- en: argument, positional
  prefs: []
  type: TYPE_NORMAL
- en: An argument that is mapped to a parameter based on its sequential position in
    the argument list. (See also *argument, keyword*.)
  prefs: []
  type: TYPE_NORMAL
- en: argument, variadic
  prefs: []
  type: TYPE_NORMAL
- en: An argument that is passed to a variadic parameter. (See also *argument, variadic
    keyword*; *parameter, variadic positional*.)
  prefs: []
  type: TYPE_NORMAL
- en: argument, variadic keyword
  prefs: []
  type: TYPE_NORMAL
- en: An argument that is passed to a variadic keyword parameter. (See also *argument,
    variadic*; *parameter, variadic keyword*.)
  prefs: []
  type: TYPE_NORMAL
- en: artifact
  prefs: []
  type: TYPE_NORMAL
- en: A by-product or end product of software development, especially one that can
    be installed on an end user’s environment to run the finished program.
  prefs: []
  type: TYPE_NORMAL
- en: assembling
  prefs: []
  type: TYPE_NORMAL
- en: The act of compiling to native machine code.
  prefs: []
  type: TYPE_NORMAL
- en: '`assert`'
  prefs: []
  type: TYPE_NORMAL
- en: A keyword to declare an assert statement, the expression of which must return
    `True` or the program will abort with an `AssertionError`. Assert statements may
    be optimized out by the interpreter under some circumstances, so they should not
    be used for data or input validation.
  prefs: []
  type: TYPE_NORMAL
- en: assignment
  prefs: []
  type: TYPE_NORMAL
- en: The act of binding a value to a name. Assignment never copies data.
  prefs: []
  type: TYPE_NORMAL
- en: assignment expression
  prefs: []
  type: TYPE_NORMAL
- en: An expression that allows you to assign a value to a name and use that value
    in another expression at the same time. The special operator in an assignment
    expression (`:=`) is known as the *walrus operator*.
  prefs: []
  type: TYPE_NORMAL
- en: assignment operator (=)
  prefs: []
  type: TYPE_NORMAL
- en: The operator that assigns a value to a name.
  prefs: []
  type: TYPE_NORMAL
- en: '`async`'
  prefs: []
  type: TYPE_NORMAL
- en: A keyword to declare a native coroutine or asynchronous generator (`async def`),
    a `for` loop over an asynchronous iterator (`async for`), or a `with` statement
    using an asynchronous context manager (`async with`).
  prefs: []
  type: TYPE_NORMAL
- en: asynchronous
  prefs: []
  type: TYPE_NORMAL
- en: Describes anything that is compatible with asynchrony. There are asynchronous
    iterators, iterables, generators, and coroutines (which are typically called native
    coroutines; see *coroutine, native*).
  prefs: []
  type: TYPE_NORMAL
- en: asynchrony
  prefs: []
  type: TYPE_NORMAL
- en: A form of concurrency in which Python manages the multitasking within a single
    thread.
  prefs: []
  type: TYPE_NORMAL
- en: atomic
  prefs: []
  type: TYPE_NORMAL
- en: Describes an operation or function that consists of a single, indivisible CPU
    instruction under the hood. Nonatomic operations are at risk of causing race conditions
    when used in concurrency.
  prefs: []
  type: TYPE_NORMAL
- en: attribute
  prefs: []
  type: TYPE_NORMAL
- en: A variable that is a member of a class or instance.
  prefs: []
  type: TYPE_NORMAL
- en: attribute, class
  prefs: []
  type: TYPE_NORMAL
- en: An attribute that belongs to a class; its value is accessible, both on the class
    itself and on any instance of the class.
  prefs: []
  type: TYPE_NORMAL
- en: attribute, instance
  prefs: []
  type: TYPE_NORMAL
- en: An attribute that belongs to a single instance of a class (an object) and is
    not accessible from any other instance or from the class itself.
  prefs: []
  type: TYPE_NORMAL
- en: attribute, special
  prefs: []
  type: TYPE_NORMAL
- en: An attribute that is utilized by a core Python language feature. The name of
    a special attribute always starts and ends with two underscores (`__`).
  prefs: []
  type: TYPE_NORMAL
- en: augmented assignment operator
  prefs: []
  type: TYPE_NORMAL
- en: Anoperator that performs an operation with the left and right operands and assigns
    the result to the left operand.
  prefs: []
  type: TYPE_NORMAL
- en: autouse fixture
  prefs: []
  type: TYPE_NORMAL
- en: See *fixture, autouse.*
  prefs: []
  type: TYPE_NORMAL
- en: '`await`'
  prefs: []
  type: TYPE_NORMAL
- en: A keyword that calls an awaitable.
  prefs: []
  type: TYPE_NORMAL
- en: awaitable
  prefs: []
  type: TYPE_NORMAL
- en: A callable that can pause and resume midexecution.
  prefs: []
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: base class
  prefs: []
  type: TYPE_NORMAL
- en: A class that is inherited by one or more other classes. (See also *derived class.*)
  prefs: []
  type: TYPE_NORMAL
- en: bdist
  prefs: []
  type: TYPE_NORMAL
- en: See *built distribution (bdist)*.
  prefs: []
  type: TYPE_NORMAL
- en: benchmarking
  prefs: []
  type: TYPE_NORMAL
- en: The technique by which you establish that one piece of code is faster than another.
    (See also *profiling*.)
  prefs: []
  type: TYPE_NORMAL
- en: big-endian
  prefs: []
  type: TYPE_NORMAL
- en: See *byte order*.
  prefs: []
  type: TYPE_NORMAL
- en: binary
  prefs: []
  type: TYPE_NORMAL
- en: A base-2 number system consisting of only the digits *0* and *1*, which correspond
    to the closed and open positions of gates on circuit boards. In Python, binary
    literal (integers) are prefixed with `0b`. (See also *hexadecimal*; *octal*.)
  prefs: []
  type: TYPE_NORMAL
- en: binary extension module
  prefs: []
  type: TYPE_NORMAL
- en: An importable extension written in C that adds new functionality atop the CPython
    interpreter. (See also *accelerator module*; *wrapper module*.)
  prefs: []
  type: TYPE_NORMAL
- en: bind
  prefs: []
  type: TYPE_NORMAL
- en: To create a reference between a name and a value.
  prefs: []
  type: TYPE_NORMAL
- en: binding behavior
  prefs: []
  type: TYPE_NORMAL
- en: Behavior wherein an object controls how it is used as an attribute; its getter,
    setter, and deleter methods are encapsulated.
  prefs: []
  type: TYPE_NORMAL
- en: bit
  prefs: []
  type: TYPE_NORMAL
- en: A single binary digit; the smallest unit of digital information.
  prefs: []
  type: TYPE_NORMAL
- en: bitmask
  prefs: []
  type: TYPE_NORMAL
- en: A binary value used in a bitwise operation to filter out unwanted bits in the
    other operand.
  prefs: []
  type: TYPE_NORMAL
- en: bitwise operation
  prefs: []
  type: TYPE_NORMAL
- en: A low-level binary operation that works on individual bits in the operands.
  prefs: []
  type: TYPE_NORMAL
- en: '`break`'
  prefs: []
  type: TYPE_NORMAL
- en: A statement that exits the containing loop immediately. (See also `continue`;
    `for`; `while.`)
  prefs: []
  type: TYPE_NORMAL
- en: breakpoint
  prefs: []
  type: TYPE_NORMAL
- en: A place in the program where control is turned over to the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: bubble up
  prefs: []
  type: TYPE_NORMAL
- en: To reraise an exception that has been caught.
  prefs: []
  type: TYPE_NORMAL
- en: buffer
  prefs: []
  type: TYPE_NORMAL
- en: A queue-like structure that data is pushed into and where data waits until it
    is retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: buffer protocol
  prefs: []
  type: TYPE_NORMAL
- en: A set of methods that provide and govern access to an underlying memory array.
  prefs: []
  type: TYPE_NORMAL
- en: built distribution (bdist)
  prefs: []
  type: TYPE_NORMAL
- en: An artifact containing precompiled Python bytecode and any binary files needed
    for the package to run.
  prefs: []
  type: TYPE_NORMAL
- en: byte
  prefs: []
  type: TYPE_NORMAL
- en: A unit of digital information that typically consists of eight bits.
  prefs: []
  type: TYPE_NORMAL
- en: bytearray
  prefs: []
  type: TYPE_NORMAL
- en: An immutable bytes-like object. (See also *bytes (object)*.)
  prefs: []
  type: TYPE_NORMAL
- en: bytecode
  prefs: []
  type: TYPE_NORMAL
- en: Compact codes representing instructions for the Python interpreter to execute.
    Python source code is compiled to bytecode.
  prefs: []
  type: TYPE_NORMAL
- en: byte order
  prefs: []
  type: TYPE_NORMAL
- en: The sequence in which bytes composing a larger value appear. The sequence can
    be either *big-endian*, with the largest part of the composite value represented
    first (on the left), or *little-endian*, with the smallest part of the composite
    value represented first.
  prefs: []
  type: TYPE_NORMAL
- en: bytes (object)
  prefs: []
  type: TYPE_NORMAL
- en: An immutable bytes-like object. (See also *bytearray*.)
  prefs: []
  type: TYPE_NORMAL
- en: bytes-like object
  prefs: []
  type: TYPE_NORMAL
- en: An object that stores binary data with a fixed size and a specified byte order.
  prefs: []
  type: TYPE_NORMAL
- en: bytes literal
  prefs: []
  type: TYPE_NORMAL
- en: A literal representation of a binary value. It looks like a string literal prepended
    with `b`.
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: C3 method resolution order (C3 MRO)
  prefs: []
  type: TYPE_NORMAL
- en: See *method resolution order*.
  prefs: []
  type: TYPE_NORMAL
- en: C3 superclass linearization
  prefs: []
  type: TYPE_NORMAL
- en: See *superclass linearization*.
  prefs: []
  type: TYPE_NORMAL
- en: call (n.)
  prefs: []
  type: TYPE_NORMAL
- en: The execution of a callable.
  prefs: []
  type: TYPE_NORMAL
- en: callable
  prefs: []
  type: TYPE_NORMAL
- en: Any object that can be executed, typically by entering its name followed by
    parentheses; zero or more values can be passed to the callable as arguments by
    listing them in the parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: callback
  prefs: []
  type: TYPE_NORMAL
- en: A native coroutine passed to a function to be called later.
  prefs: []
  type: TYPE_NORMAL
- en: call stack
  prefs: []
  type: TYPE_NORMAL
- en: The sequence of calls leading to the currently executing statement. (See also
    *traceback*.)
  prefs: []
  type: TYPE_NORMAL
- en: camel case
  prefs: []
  type: TYPE_NORMAL
- en: A naming convention wherein the first letter of each word is uppercase and the
    rest of the letters are lowercase (e.g., `FishAndChips`). If the first letter
    is capitalized, the naming convention is upper camel case; otherwise, it’s lower
    camel case. Upper camel case is used for class names, according to PEP 8\. (See
    also *screaming snake case*; *snake case*.)
  prefs: []
  type: TYPE_NORMAL
- en: canonical string representation
  prefs: []
  type: TYPE_NORMAL
- en: A human-readable representation of a value or an object, generally containing
    all the information needed to re-create the value or object. Returned by `repr()`.
  prefs: []
  type: TYPE_NORMAL
- en: cargo cult programming
  prefs: []
  type: TYPE_NORMAL
- en: An antipattern in which one imitates actions or structures in programming without
    understanding them, in hopes of achieving a related outcome. Especially prevalent
    in packaging.
  prefs: []
  type: TYPE_NORMAL
- en: chunking
  prefs: []
  type: TYPE_NORMAL
- en: The act of defining how much of a larger set of work is given to a single thread
    or subprocess.
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: A compound statement that contains attributes (variables) and methods (functions),
    and from which an instance (object) may be created. (See also *attribute*; *instance*;
    *method*; *object*.)
  prefs: []
  type: TYPE_NORMAL
- en: class, static
  prefs: []
  type: TYPE_NORMAL
- en: A class that contains only class attributes and class or static methods but
    that is not intended to be instantiated. This technique is preferred over singletons.
  prefs: []
  type: TYPE_NORMAL
- en: classifier
  prefs: []
  type: TYPE_NORMAL
- en: In packaging, a standardized string that facilitates organizing and searching
    for packages on a package index, especially PyPI.
  prefs: []
  type: TYPE_NORMAL
- en: clause
  prefs: []
  type: TYPE_NORMAL
- en: A single part of a compound statement; it consists of a header and a suite.
  prefs: []
  type: TYPE_NORMAL
- en: closure
  prefs: []
  type: TYPE_NORMAL
- en: A callable that returns another callable that “closes over” one or more nonlocal
    names.
  prefs: []
  type: TYPE_NORMAL
- en: closure, stateful
  prefs: []
  type: TYPE_NORMAL
- en: A closure that retains a little bit of state between calls.
  prefs: []
  type: TYPE_NORMAL
- en: '`cls`'
  prefs: []
  type: TYPE_NORMAL
- en: The name conventionally given to the first parameter of a class method, which
    is intended to be bound to the class itself.
  prefs: []
  type: TYPE_NORMAL
- en: code coverage
  prefs: []
  type: TYPE_NORMAL
- en: The percentage of lines of code in a project that are executed, or covered,
    by tests.
  prefs: []
  type: TYPE_NORMAL
- en: code injection attack
  prefs: []
  type: TYPE_NORMAL
- en: An attack in which your code can be used to execute code written by a third
    party on an end user’s machine, typically for malicious purposes. (See also *arbitrary
    execution*.)
  prefs: []
  type: TYPE_NORMAL
- en: coercion
  prefs: []
  type: TYPE_NORMAL
- en: Implicitly casting a value from one type to another.
  prefs: []
  type: TYPE_NORMAL
- en: collection
  prefs: []
  type: TYPE_NORMAL
- en: An object that stores multiple values in an organized fashion; this is Python’s
    name for a “data structure.” (See also *dictionary*; *list*; *set*; *tuple*.)
  prefs: []
  type: TYPE_NORMAL
- en: complex number
  prefs: []
  type: TYPE_NORMAL
- en: A number type that can store an imaginary part. (See also `Decimal`; *floating-point
    number*; `Fraction`; *integer*.)
  prefs: []
  type: TYPE_NORMAL
- en: composition
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between two classes A and B, such that class B contains one
    or more instances of class A as attributes. Also known as a “has-a” relationship.
    (See also *inheritance*.)
  prefs: []
  type: TYPE_NORMAL
- en: compound assignment operator
  prefs: []
  type: TYPE_NORMAL
- en: See *augmented assignment operator* or *assignment expression*.
  prefs: []
  type: TYPE_NORMAL
- en: comprehension
  prefs: []
  type: TYPE_NORMAL
- en: A form of a generator expression that directly evaluates to a collection. (See
    also *generator expression*.)
  prefs: []
  type: TYPE_NORMAL
- en: comprehension, dictionary
  prefs: []
  type: TYPE_NORMAL
- en: A form of a generator expression that produces a dictionary. Enclosed in braces
    (`{ }`) and defines both the key and the value in the first part of the generator
    expression, with a colon (`:`) separating the key and the value.
  prefs: []
  type: TYPE_NORMAL
- en: comprehension, list
  prefs: []
  type: TYPE_NORMAL
- en: A form of a generator expression that produces a list. Enclosed in square brackets
    (`[ ]`).
  prefs: []
  type: TYPE_NORMAL
- en: comprehension, set
  prefs: []
  type: TYPE_NORMAL
- en: A form of a generator expression that produces a set. Enclosed in braces (`{
    }`).
  prefs: []
  type: TYPE_NORMAL
- en: concatenate
  prefs: []
  type: TYPE_NORMAL
- en: Tocombine two or more strings into one.
  prefs: []
  type: TYPE_NORMAL
- en: concurrency
  prefs: []
  type: TYPE_NORMAL
- en: A technique in which a single thread of execution switches between multiple
    tasks, thereby increasing the perceived responsiveness of the code. Only one task
    is ever worked at a time. (See also *asynchrony*, *parallelism*, *threading*.)
  prefs: []
  type: TYPE_NORMAL
- en: constructor
  prefs: []
  type: TYPE_NORMAL
- en: The special class method `__new__()`, which creates and returns a new instance
    from the class. The initializer is called immediately afterward. (See also *finalizer*;
    *initializer*.)
  prefs: []
  type: TYPE_NORMAL
- en: consumer
  prefs: []
  type: TYPE_NORMAL
- en: A thread or process that intakes data and processes it. (See also *producer*.)
  prefs: []
  type: TYPE_NORMAL
- en: context management protocol
  prefs: []
  type: TYPE_NORMAL
- en: A protocol that specifies that an object must implement `__enter__()` and `__exit__()`
    to be compatible with a `with` statement.
  prefs: []
  type: TYPE_NORMAL
- en: context manager
  prefs: []
  type: TYPE_NORMAL
- en: An object that is compatible with a `with` statement and that can handle its
    own setup and/or cleanup tasks.
  prefs: []
  type: TYPE_NORMAL
- en: context variables
  prefs: []
  type: TYPE_NORMAL
- en: Variables that can store different values, depending on which asynchronous task
    accesses them. Also known as `contextvars`.
  prefs: []
  type: TYPE_NORMAL
- en: '`contextvars`'
  prefs: []
  type: TYPE_NORMAL
- en: See *context* *variables*.
  prefs: []
  type: TYPE_NORMAL
- en: '`continue`'
  prefs: []
  type: TYPE_NORMAL
- en: A statement that immediately skips the current iteration of the containing loop.
    (See also `break`; `for`; `while`.)
  prefs: []
  type: TYPE_NORMAL
- en: conversion
  prefs: []
  type: TYPE_NORMAL
- en: The act of explicitly casting a value from one type to another.
  prefs: []
  type: TYPE_NORMAL
- en: cooperative multitasking
  prefs: []
  type: TYPE_NORMAL
- en: See *asynchrony.*
  prefs: []
  type: TYPE_NORMAL
- en: copy (v.)
  prefs: []
  type: TYPE_NORMAL
- en: To create a new value in memory from the same data as another value.
  prefs: []
  type: TYPE_NORMAL
- en: core developers
  prefs: []
  type: TYPE_NORMAL
- en: Developers who are involved in leading Python development. Their opinions regarding
    language direction and proposed changes bear much weight.
  prefs: []
  type: TYPE_NORMAL
- en: coroutine, native
  prefs: []
  type: TYPE_NORMAL
- en: An awaitable coroutine that is based on a simple coroutine but that is capable
    of being paused and resumed for use with asynchrony.
  prefs: []
  type: TYPE_NORMAL
- en: coroutine, simple
  prefs: []
  type: TYPE_NORMAL
- en: A generator that consumes data on demand, instead of (or in addition to) producing
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '`Counter`'
  prefs: []
  type: TYPE_NORMAL
- en: A variant of the dictionary designed for counting hashable objects. (See also
    `defaultdict`; `OrderedDict`.)
  prefs: []
  type: TYPE_NORMAL
- en: coverage
  prefs: []
  type: TYPE_NORMAL
- en: See *code coverage*.
  prefs: []
  type: TYPE_NORMAL
- en: CPU-bound
  prefs: []
  type: TYPE_NORMAL
- en: Describes any code execution whose speed is limited by the speed of the CPU.
    (See also *IO-bound*.)
  prefs: []
  type: TYPE_NORMAL
- en: CPython
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation of Python, written in C.
  prefs: []
  type: TYPE_NORMAL
- en: current working directory
  prefs: []
  type: TYPE_NORMAL
- en: The directory the user (or system) is running commands from.
  prefs: []
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: daemonic
  prefs: []
  type: TYPE_NORMAL
- en: Describes a thread that is tied to the lifespan of the process; when the main
    thread ends, all associated daemonic threads are killed as well.
  prefs: []
  type: TYPE_NORMAL
- en: data
  prefs: []
  type: TYPE_NORMAL
- en: Information stored in a value. You may have copies of such data stored in other
    values.
  prefs: []
  type: TYPE_NORMAL
- en: deadlock
  prefs: []
  type: TYPE_NORMAL
- en: An erroneous situation that occurs when the combined current status of two or
    more locks causes all involved threads to wait, with no way to proceed. (See also
    *livelock*; *starvation*.)
  prefs: []
  type: TYPE_NORMAL
- en: '`Decimal`'
  prefs: []
  type: TYPE_NORMAL
- en: An object that stores fixed-point decimal numbers, rather than floating-point
    numbers, thereby representing an exact numeric value with a decimal part. (See
    also *complex number*; *floating-point number*; `Fraction`; *integer*.)
  prefs: []
  type: TYPE_NORMAL
- en: decorator
  prefs: []
  type: TYPE_NORMAL
- en: A special type of callable that “wraps” another callable or a class, modifying
    its behavior without actually changing the callable’s suite. Usually implemented
    as a closure.
  prefs: []
  type: TYPE_NORMAL
- en: deep-copy (v.)
  prefs: []
  type: TYPE_NORMAL
- en: To both copy an object to a new value *and* copy all the data from values referenced
    within that object to new values.
  prefs: []
  type: TYPE_NORMAL
- en: default argument value
  prefs: []
  type: TYPE_NORMAL
- en: The value assigned to a parameter if no argument is passed. Defining this in
    the parameter list makes the parameter optional. (See *parameter, optional*.)
  prefs: []
  type: TYPE_NORMAL
- en: '`defaultdict`'
  prefs: []
  type: TYPE_NORMAL
- en: A variant of the dictionary in which a default value is provided when accessing
    on undefined keys. (See also `Counter`; `OrderedDict`.)
  prefs: []
  type: TYPE_NORMAL
- en: delay
  prefs: []
  type: TYPE_NORMAL
- en: See *future*.
  prefs: []
  type: TYPE_NORMAL
- en: deque
  prefs: []
  type: TYPE_NORMAL
- en: A mutable, sequential (array-like) collection optimized for accessing the first
    and last items. Deque literals are created by passing a list literal to the `deque()`
    initializer*.* (See also *dictionary*; *list*; *set*; *tuple*.)
  prefs: []
  type: TYPE_NORMAL
- en: derived class
  prefs: []
  type: TYPE_NORMAL
- en: A class that inherits, or *derives*, from another class. (See also *base class*.)
  prefs: []
  type: TYPE_NORMAL
- en: descriptor
  prefs: []
  type: TYPE_NORMAL
- en: An object with binding behavior.
  prefs: []
  type: TYPE_NORMAL
- en: descriptor, data
  prefs: []
  type: TYPE_NORMAL
- en: A descriptor that implements `__get__()`, as well as `__set__()` and/or `__delete__()`.
  prefs: []
  type: TYPE_NORMAL
- en: descriptor, non-data
  prefs: []
  type: TYPE_NORMAL
- en: A descriptor that only implements `__get__()`.
  prefs: []
  type: TYPE_NORMAL
- en: descriptor, read-only data
  prefs: []
  type: TYPE_NORMAL
- en: A descriptor that implements both `__get__()` and `__set__()` but raises an
    `AttributeError` from the latter.
  prefs: []
  type: TYPE_NORMAL
- en: descriptor protocol
  prefs: []
  type: TYPE_NORMAL
- en: A protocol that states that for an object to be a descriptor, it must implement
    at least one of `__get__()`, `__set__()`, and `__delete__()`.
  prefs: []
  type: TYPE_NORMAL
- en: deserialization
  prefs: []
  type: TYPE_NORMAL
- en: The process of converting stored data to Python values. (See also *serialization*.)
  prefs: []
  type: TYPE_NORMAL
- en: destructor
  prefs: []
  type: TYPE_NORMAL
- en: See *finalizer*.
  prefs: []
  type: TYPE_NORMAL
- en: '`dict`'
  prefs: []
  type: TYPE_NORMAL
- en: The type name for a *dictionary* collection.
  prefs: []
  type: TYPE_NORMAL
- en: dict comprehension
  prefs: []
  type: TYPE_NORMAL
- en: See *comprehension, dictionary*.
  prefs: []
  type: TYPE_NORMAL
- en: dictionary
  prefs: []
  type: TYPE_NORMAL
- en: A mutable, unordered collection of key-value pairs. Keys must be hashable. Dictionary
    literals are comma delimited (with colons separating the key and value in each
    pair) and enclosed in braces (`{ }`). (See also *deque*; *set*; *tuple*.)
  prefs: []
  type: TYPE_NORMAL
- en: distribution package
  prefs: []
  type: TYPE_NORMAL
- en: An artifact that bundles and versions the source distribution and the associated
    built distribution (if any).
  prefs: []
  type: TYPE_NORMAL
- en: docstring
  prefs: []
  type: TYPE_NORMAL
- en: A string literal that appears at the top (just below the header, if any) of
    a function, class, or module and contains documentation.
  prefs: []
  type: TYPE_NORMAL
- en: duck typing
  prefs: []
  type: TYPE_NORMAL
- en: Working with objects based on their functionality, rather than their data type.
  prefs: []
  type: TYPE_NORMAL
- en: dunder method
  prefs: []
  type: TYPE_NORMAL
- en: See *method, special*.
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: eager evaluation
  prefs: []
  type: TYPE_NORMAL
- en: Behavior wherein each item in an iterable is evaluated when the iterable is
    defined or initialized. (See also *lazy evaluation*.)
  prefs: []
  type: TYPE_NORMAL
- en: Easier to Ask Forgiveness than Permission (EAFP)
  prefs: []
  type: TYPE_NORMAL
- en: A coding philosophy wherein you catch and utilize exceptions to control normal
    execution flow. (See also *Look Before You Leap (LBYL)*.)
  prefs: []
  type: TYPE_NORMAL
- en: eggs
  prefs: []
  type: TYPE_NORMAL
- en: See *wheel*.
  prefs: []
  type: TYPE_NORMAL
- en: '`elif`'
  prefs: []
  type: TYPE_NORMAL
- en: A clause in an `if` statement that is executed only if the conditions in all
    preceding headers fail and the condition in its own header succeeds. (See also
    `else`; `if`.)
  prefs: []
  type: TYPE_NORMAL
- en: '`Ellipsis`'
  prefs: []
  type: TYPE_NORMAL
- en: A seldom-used built-in value consisting of three dots (`...`). Used in varying
    ways by various libraries and modules, but not by the core language.
  prefs: []
  type: TYPE_NORMAL
- en: '`else`'
  prefs: []
  type: TYPE_NORMAL
- en: A clause that is (1) in an `if` statement that is executed only if all the conditions
    in the headers of the other clauses fail, or (2) in a `try` statement that is
    executed only if no exceptions are raised within the `try` suite, or (3) in a
    ``while or `for` compound statement that is executed only once the condition in
    the `while` or `for` clause header fails. (See also `elif`; `else`; `finally`;
    `if`; `try`.)``
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
