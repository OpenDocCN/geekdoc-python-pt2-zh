- en: '**2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LISTS CAN SAVE YOUR LIFE**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Astronauts live by lists. The safety checklists they use help make sure all
    systems are working before they entrust their lives to those systems. For example,
    emergency checklists tell the astronauts what to do in dire situations to prevent
    them from panicking. Procedural checklists confirm that they’re using their equipment
    correctly so nothing breaks and prevents them from returning home. These lists
    just might save their lives one day.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to manage lists in Python and how to use them
    for checklists, maps, and almost anything in the universe. When you build the
    *Escape* game, you’ll use lists to store information about the space station layout.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING YOUR FIRST LIST: THE TAKE-OFF CHECKLIST**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Take-off is one of the most dangerous aspects of space travel. When you’re
    strapped to a rocket, you want to double-check everything before it launches.
    A simple checklist for take-off might contain the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Put on suit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Seal hatch'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Check cabin pressure'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Fasten seatbelt'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python has the perfect way to store this information: the Python *list* is
    like a variable that stores multiple items. As you’ll see, you can use it for
    numbers and text as well as a combination of both.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make a list in Python called `take_off_checklist` for our astronauts
    to use. Because we’re just practicing with a short example, we’ll enter the code
    in the Python shell rather than creating a program. (If you need a refresher on
    how to use the Python shell, see “[Introducing the Python Shell](ch01.xhtml#lev20)”
    on [page 15](ch01.xhtml#page_15).) Enter the following in the IDLE shell, pressing
    ENTER at the end of each line to start a new line in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Make sure the brackets, quote marks, and commas in your code are precise.
    If you get any errors, enter the list code again, and double-check that the brackets,
    quotes, and commas are in the correct places. To avoid having to retype the code,
    use your mouse to highlight the text in the shell, right-click the text, select
    **Copy**, right-click again, and select **Paste**.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at how the `take_off_checklist` list is made. You mark
    the start of the list with an opening square bracket. Python knows the list is
    not finished until it detects the final closing square bracket. This means you
    can press ENTER at the end of each line to continue typing the instruction, and
    Python will know you’re not finished until you’ve given it the final bracket.
  prefs: []
  type: TYPE_NORMAL
- en: Quote marks tell Python that you’re giving it some text and where each piece
    of text starts and ends. Each entry needs its own opening and closing quote marks.
    You also need to separate the different pieces of text with commas. The last entry
    doesn’t need a comma after it, because there isn’t another list item following
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '**SEEING YOUR LIST**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To see your checklist, you can use the `print()` function, as we did in [Chapter
    1](ch01.xhtml#ch01). Add the name of your list to the `print()` function, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You don’t need quotes around `take_off_checklist`, because it’s the name of
    a list, not a piece of text. If you do put quotes around it, Python will just
    write the text `take_off_checklist` onscreen instead of giving you back your list.
    Try it to see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING AND REMOVING ITEMS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Even after you’ve created a list, you can add an item to it using the `append()`
    command. The word *append* means to add something at the end (think of an appendix,
    at the end of a book). You use the `append()` command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You enter the name of the list (without quote marks) followed by a period and
    the `append()` command, and then put the item to add in parentheses. The item
    will be added to the end of the list, as you’ll see when you print the list again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also take items out of the list using the `remove()` command. Let’s
    remove the `Seal hatch` item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Again, you enter the name of the list followed by a period and the `remove()`
    command, and then specify the item you want to remove inside the parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you’re removing an item from a list, make sure what you type matches
    the item exactly, including capital letters and any punctuation. Otherwise, Python
    won’t recognize it and will give you an error.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**USING INDEX NUMBERS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hmm, we should probably put the `Seal hatch` check back into the list before
    anyone at Mission Control notices. You can insert an item in a specific position
    in the list by using that item’s index number. The *index* is the position of
    the item in the list. Python starts counting at 0, not 1, so the first item in
    the list always has an index of 0, the second item has an index of 1, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**INSERTING AN ITEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Using the position index, we’ll put `Seal hatch` back where it belongs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Phew! I think we got away with it. Because the index starts at 0, when we inserted
    `Seal hatch`, we placed it at position 1, the second item in the list. The rest
    of the list items shifted down in the list to make room, increasing their index
    numbers, as shown in [Figure 2-1](ch02.xhtml#ch02fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig2-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-1: Inserting an item at index 1\. Top row: before insertion. Bottom
    row: after insertion.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACCESSING AN INDIVIDUAL ITEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also access a particular item in a list using the list name with the
    index number of the item you want to access in square brackets. For example, to
    print particular items in the list, you can enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now you can see individual items in the list!
  prefs: []
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t mix up your brackets. Roughly speaking: Use square brackets when you’re
    telling Python which list item to use. Use parentheses when you’re doing something
    to the list or items in it, such as printing the list or appending items to it.
    Every opening bracket needs a closing bracket of the same type.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**REPLACING AN ITEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also replace an item if you know its index number. Simply enter the
    list name followed by the index of the item you want to replace, and then use
    an equal sign (`=`) to tell Python what you want at that index, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The old item at index 3 is removed and replaced with the new item. Be aware
    that when you replace an item, Python forgets the original. Recall your training
    to put it back, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**DELETING AN ITEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you know where an item is in a list, you can delete it using its index number
    too, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `"Check cabin pressure"` item disappears from the list.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #1**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to practice your skills! We just deleted item 2 in the list. Can you
    insert it back into the list in the correct position? Print the list to check
    that it worked.
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE SPACEWALK CHECKLIST**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you know from [Chapter 1](ch01.xhtml#ch01), another dangerous activity for
    an astronaut is venturing out into the black vacuum of space with just a suit
    to protect you and provide oxygen. Here is a checklist to help keep you safe when
    you’re spacewalking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Put on suit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Check oxygen'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Seal helmet'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Test radio'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Open airlock'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make this checklist into a Python list. We’ll call it `spacewalk_checklist`,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remember to be careful with the commas and brackets.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #2**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s always a good idea to test your code so you know it’s working as it should.
    Can you try printing all the list items to check that they’re in the right place?
  prefs: []
  type: TYPE_NORMAL
- en: '**A LIST OF LISTS: THE FLIGHT MANUAL**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have two checklists now: one for take-off and one for spacewalking. We can
    organize them by putting them into another list to create our “flight manual.”
    Think of the flight manual as a folder that contains two sheets of paper, and
    each piece of paper has one list on it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING A LIST OF LISTS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is how we make the flight manual list of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We give IDLE the `flight_manual` list name, use the equal sign (`=`), and then
    add the two lists we want to put in the `flight_manual` list inside square brackets.
    As we did earlier when making lists, we separate the two items with a comma. The
    new `flight_manual` list has two items in it: the `take_off_checklist` and the
    `spacewalk_checklist`. When you print `flight_manual`, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you don’t need to use quote marks around list names; you use them
    only when you’re entering text into a list.
  prefs: []
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you don’t see* ''Check cabin pressure'' *in your list, it’s because you
    skipped Training Mission #1\. To make it easier to follow along, I recommend you
    go back and complete that mission. You can check the training mission answers
    at the end of the chapter if you need to.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output looks messy! To work out what’s going on, look closely at the brackets.
    Square brackets mark the start and end of each list. If you strip out the list
    items, the output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the middle, you can see where the first list ends with a closed bracket followed
    by a comma before the next list begins with an opening bracket. So what happens
    when you try to print the first item in the `flight_manual` list?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The first item is the `take_off_checklist`, so the output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**TRAINING MISSION #3**'
  prefs: []
  type: TYPE_NORMAL
- en: Try adding other checklists to `flight_manual` and printing them. For example,
    you could add a checklist for landing on a planet or docking with another spaceship.
  prefs: []
  type: TYPE_NORMAL
- en: '**FINDING AN ITEM IN THE FLIGHT MANUAL**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you want to look at a particular item in one of the lists in `flight_manual`,
    you must give Python two pieces of information: the list the item is in, and the
    index of the item in the list, in that order. For each piece of information, you
    can use index numbers, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Check your result against the printout of your checklist higher up in the shell.
    The `Seal hatch` item is in the first list (index 0), which is the `take_off_checklist`,
    and it’s the second item in that list (index 1). Those are the two index numbers
    we used to find it. Let’s choose an item from the second list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This time, we’re printing from the second list (index 1), and from that list,
    we’re printing the fourth item (index 3). Although it might seem confusing that
    Python starts counting at 0, soon it will become second nature to subtract one
    from the position number you want. Be careful that you don’t end up buying one
    fewer of everything when you go shopping!
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To print a list or variable on the screen, you can leave out the `print()`
    command when you’re typing into the shell, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This only works in the shell, though, and not in a program. Often, you’ll have
    many ways to do the same thing in Python. This book focuses on the techniques
    that will most help you make the *Escape* game. As you learn Python, you’ll find
    your own style and preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '**COMBINING LISTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can join two lists using a plus sign (`+`) to combine them into a single
    list. Let’s make a list of all the skills needed for take-off and spacewalking
    and call it `skills_list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The output you see here is a single list containing the skills astronauts need
    from the two lists we already made. We can also add more skills to the list by
    entering the combined list’s name and using `+=` to add single items or other
    lists to the end of it. (In [Chapter 1](ch01.xhtml#ch01), you learned how to use
    `+=` to add a number to a variable’s value.)
  prefs: []
  type: TYPE_NORMAL
- en: Few people get to go into space, so a big part of an astronaut’s role is to
    share that experience. Let’s add a list called `pr_list` for public relations
    (PR) skills that an astronaut might need. I think there might be a place for selfie
    skills after all!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `skills_list` now has the items from `pr_list` added. The `skills_list`
    is still just a single list with individual items in it, unlike `flight_manual`,
    which has two separate lists inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have noticed that this code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'is just a shorter way of writing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It’s a very useful shortcut!
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING MAPS FROM LISTS: THE EMERGENCY ROOM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Navigation is an essential skill for an astronaut. You must always know where
    you are, where your nearest sanctuary is, and even where the air is so you’re
    always ready in an emergency. The *Escape* game will keep a map of the room the
    player is in, so it can draw the room correctly and enable the player to interact
    with objects. Let’s look at how we can use lists to make a map of the emergency
    supplies room.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKING THE MAP**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you know how to manage lists and lists inside lists, you can make maps.
    This time, we’ll create a program rather than working in the shell. At the top
    of the Python window, select **File** ▸ **New File** to open a new window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter [Listing 2-1](ch02.xhtml#ch02list1) into your new program window:'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing2-1.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 2-1: Setting up the emergency room*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you don’t need a comma at the end of the last line in the list. This
    program creates and displays a list called `room_map`. Our new emergency room
    is five meters by five meters. The `room_map` list contains five lists. Each of
    those lists contains five numbers, which represent one row of the map. I’ve lined
    up the numbers in the code so it looks like the grid shown in [Figure 2-2](ch02.xhtml#ch02fig2),
    which shows a map of the room. Compare the diagram and the program; you’ll see
    that the first list is for the top row, the second list is for the second row,
    and so on. A 0 represents an empty space in the grid, and the numbers 1 to 4 are
    for various emergency items in the room. The numbers we’ll use in this chapter
    represent the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig2-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-2: Our first simple map*'
  prefs: []
  type: TYPE_NORMAL
- en: Fertilizer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spare oxygen tanks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scissors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toothpaste
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Emergency blankets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Emergency radio
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Make sure your brackets and commas are in the correct places. One reason for
    putting [Listing 2-1](ch02.xhtml#ch02list1) into a program instead of typing it
    into the shell is so you can easily make corrections if you make a mistake.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **File** ▸ **Save** and save your program as *listing2-1.py*. This program
    doesn’t use Pygame Zero, so we can run it from IDLE. Click **Run** in the menu
    bar at the top of the window, and then click **Run Module**. You should see the
    following output in the shell window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s hard to work out what you’re looking at when the list is shown like this,
    which is why I lined up the numbers in a grid in the program listing. But this
    shell output is the same map and the same data, so everything is where it should
    be: it’s just being presented in a different way. In [Chapter 3](ch03.xhtml#ch03),
    you’ll learn how to print this map data so it looks more like the listing we created.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FINDING AN EMERGENCY ITEM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To find out what item is at a particular point in the map, you need to give
    Python a coordinate to check. The *coordinates* are a combination of the *y* position
    (from top to bottom) and the *x* position (from left to right), in that order.
    The *y* position will be the list in `room_map` you want to check (the row in
    the grid). The *x* position will be the item in that list you want to look at
    (the column) (see [Figure 2-3](ch02.xhtml#ch02fig3)). As always, remember that
    index numbers start at 0.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fig2-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-3: The y-coordinate indicates the list we want to look at. The x-coordinate
    indicates the item in that list.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’ve used coordinates before, you know that you usually put the x-coordinate
    before the y-coordinate. We’re doing the opposite here because it makes the code
    simpler. If we put* x *first, we would have to make each list in* room_map *represent
    a column of the map, from top to bottom, instead of a row, from left to right.
    That would make the map look wrong in our code: the map would be on its side and
    a mirror image, which would be very confusing! Just remember that our map coordinates
    use* y *and then* x*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s work through an example: we’ll find out what item is at the position
    marked 2 on our simple map diagram. We need to know the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `2` is in the second row (from top to bottom), so it’s in the second list
    in `room_map`. The index starts at 0, so we subtract 1 from 2 to get the index
    number for the *y* position, which is `1`. Use [Figure 2-3](ch02.xhtml#ch02fig3)
    to check this index number: the index numbers for the rows are on the left of
    the grid in red.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `2` is in the fourth column (from left to right) of the list. Again, we
    subtract 1 to get the index number for the *x* position, which is `3`. Use [Figure
    2-3](ch02.xhtml#ch02fig3) to check this index number as well. The index numbers
    for the columns are shown across the top of the grid in red.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to the shell and enter the following `print()` command to view the number
    in that position on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As expected, the result is the number 2, which happens to be spare oxygen tanks.
    You’ve successfully navigated your first map!
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #4**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to predict the output before you enter the following command into the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the map in [Figure 2-2](ch02.xhtml#ch02fig2) and your code listing
    to make your prediction. If you need more help, look at [Figure 2-3](ch02.xhtml#ch02fig3).
    Then check your answer by entering the instruction in the shell.
  prefs: []
  type: TYPE_NORMAL
- en: '**SWAPPING ITEMS IN THE ROOM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also change items in the room. Let’s check which item is at the top-left
    position of the map, using the shell again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The 1 is fertilizer. We don’t need fertilizer in the emergency room, so let’s
    change that item to emergency blankets in the map. We’ll use a 5 to represent
    them. Remember how we used an equal sign (`=`) to change the value of an item
    in a list? We can do the same to change the number in the map, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We enter the coordinates and then enter a new number to replace the original
    number. We can check that the code worked by printing the value at that coordinate
    again, which was 1 a moment ago. Let’s also print `room_map` and confirm that
    the emergency blankets appear in the correct position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! The emergency blankets are stored in the top-left corner of the room.
    Item 5 is the first item in the first list.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #5**'
  prefs: []
  type: TYPE_NORMAL
- en: Space is precious in the emergency room! Replace the toothpaste (4) with an
    emergency radio (6). You’ll need to find the coordinates of the 4 first and then
    enter the command to change it. Refer to [Figure 2-2](ch02.xhtml#ch02fig2) and
    [Figure 2-3](ch02.xhtml#ch02fig3) if you need more help with the index numbers.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Escape* game, the `room_map` list is used to remember the items in the
    room the player is currently in. The map stores the number of the object that
    appears at each position on the map, or a 0 if the floor space is empty. The rooms
    in the game will be bigger than this 5 × 5 grid, so the size of the `room_map`
    will vary depending on the width and height of the room the player is in.
  prefs: []
  type: TYPE_NORMAL
- en: '**ARE YOU FIT TO FLY?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Python lists store words, numbers, or a mixture
    of both.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  To see an item in a list, use its index number
    in square brackets: for example, `print(take_off_checklist[2])`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `append()` function adds items to the end
    of a list.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `remove()` function removes items from a
    list: for example, `spacewalk _checklist.remove("Seal helmet")`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can use index numbers to delete or insert
    an item at a particular position in a list.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Index numbers start at 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can change an item in a list using the equal
    sign (`=`): for example, `take_off_checklist[3] = "Test comms"`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can make a list that contains other lists
    to build a simple map.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can check which item is in your map using
    coordinates: for example, use `room_map[`y coordinate`][`x coordinate`]`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Be sure to use *y* first and then *x* for your
    coordinates. In space, everything is upside down.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The coordinates are index numbers, so both start
    at 0, not 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can use `+=` to add an item to a list, or
    to join two lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0046-01.jpg)'
  prefs: []
  type: TYPE_IMG
