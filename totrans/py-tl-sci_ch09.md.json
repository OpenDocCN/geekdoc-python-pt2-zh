["```py\nIn [1]: tup = 1, 2, 3\n\nIn [2]: tup\nOut[2]: (1, 2, 3)\n```", "```py\nIn [3]: nested = (1, 2, 3), ('Alice', 'Bob')\n\nIn [4]: nested\nOut[4]: ((1, 2, 3), ('Alice', 'Bob'))\n```", "```py\nIn [5]: what_am_I = (1)\nIn [6]: type(what_am_I)\nOut[6]: int\n```", "```py\nIn [7]: what_am_I = (1,)\n\nIn [8]: type(what_am_I)\nOut[8]: tuple\n```", "```py\nIn [9]: x = tuple('Hello, World!')\n\nIn [10]: x\nOut[10]: ('H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!')\n```", "```py\nIn [11]: planet_list = ['Venus', 'Earth', 'Mars']\n\nIn [12]: planet_tup = tuple(planet_list)\n\nIn [13]: planet_tup\nOut[13]: ('Venus', 'Earth', 'Mars')\n```", "```py\nIn [14]: len(tup)\nOut[14]: 3\n\nIn [15]: len(nested)\nOut[15]: 2\n```", "```py\nIn [16]: tup[0]\nOut[16]: 1\n\nIn [17]: nested[0]\nOut[17]: (1, 2, 3)\n```", "```py\nIn [18]: nested[0][0]\nOut[18]: 1\n\nIn [19]: nested[1][0]\nOut[19]: 'Alice' \n\nIn [20]: nested[1][0][0]\nOut[20]: 'A'\n```", "```py\nIn [21]: for i in tup:\n    ...:      print(i * 10)\n10\n20\n30\n```", "```py\nIn [22]: for item in nested:\n    ...:      for element in item:\n    ...:           print(element * 5)\n5\n10\n15\nAliceAliceAliceAliceAlice\nBobBobBobBobBob\n```", "```py\nIn [23]: min(tup)\nOut[23]: 1\n\nIn [24]: max(tup)\nOut[24]: 3\n```", "```py\nIn [25]: min(nested)\nTraceback (most recent call last):\n\nFile ″C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_25576/1378168620.py″, line 1, in <module>\nmin(nested)\n\nTypeError: '<' not supported between instances of 'str' and 'int'\n```", "```py\nIn [26]: test = ('c', 'bob', 'z')\n\nIn [27]: min(test)\nOut[27]: 'bob'\n\nIn [28]: test = ('a', 'A')\n\nIn [29]: min(test)\nOut[29]: 'A'\n```", "```py\nIn [30]: elements = 'carbon', 'calcium', 'oxygen'\n\nIn [31]: 'carbon' in elements\nOut[31]: True\n```", "```py\nIn [32]: coordinates = (45, 160)\n\nIn [33]: x, y = coordinates In [34]: x\nOut[34]: 45\n\nIn [35]: y\nOut[35]: 160\n```", "```py\nIn [36]: nested = (1, 2, 3), ('Alice', 'Bob'), 549\n\nIn [37]: (a, b, c), (d, e), f = nested\n\nIn [38]: a\nOut[38]: 1\n\nIn [39]: e\nOut[39]: 'Bob'\n```", "```py\nIn [40]: (a, b, c) = nested\nTraceback (most recent call last):\n\nFile ″C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_25576/3799313898.py″, line 1, in <module>\n(a, b, c) = nested\n\nValueError: not enough values to unpack (expected 3, got 2)\n```", "```py\nIn [41]: (a, b, c), *_ = nested\n\nIn [42]: a\nOut[42]: 1\n\nIn [43]: b\nOut[43]: 2\n\nIn [44]: c\nOut[44]: 3\n\nIn [45]: _\nOut[45]: [('Alice', 'Bob'), 549]\n```", "```py\nIn [46]: tup1 = 1, 2, 3\n\nIn [47]: tup2 = 4, 5, 6\n\nIn [48]: tup3 = tup1 + tup2\n\nIn [49]: tup3\nOut[49]: (1, 2, 3, 4, 5, 6)\n```", "```py\nIn [50]: tup1 * 3\nOut[50]: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n```", "```py\nIn [51]: tup_with_list = (1, 2, ['Alice', 'Bob'], 3)\n\nIn [52]: tup_with_list\nOut[52]: (1, 2, ['Alice', 'Bob'], 3)\n\nIn [53]: tup_with_list[2][1] = 'Steve'\n\nIn [54]: tup_with_list\nOut[54]: (1, 2, ['Alice', 'Steve'], 3)\n```", "```py\nIn [55]: names = 'Harry', 'Ron', 'Hermione'\n\nIn [56]: print(names)\n('Harry', 'Ron', 'Hermione')\n```", "```py\nIn [57]: print(' '.join(names))\nHarry Ron Hermione\n```", "```py\nIn [58]: print('\\n'.join(names))\nHarry\nRon\nHermione\n```", "```py\nIn [59]: tup = 'Steve', 5, 'a', 5\n\nIn [60]: print(' '.join(map(str, tup)))\nSteve 5 a 5\n```", "```py\nIn [61]: print(*tup, sep='\\n')\nSteve\n5\na\n5\n```", "```py\n['K. L. Putney', 'M. B. Clark', 'S. B. Vaughan']\n```", "```py\nIn [62]: dna_bases = ['adenosine', 'guanine', 'cytosine', 'thymidine']\n\nIn [63]: dna_bases\nOut[63]: ['adenosine', 'guanine', 'cytosine', 'thymidine']\n```", "```py\nIn [64]: empty_list = []\n```", "```py\nIn [65]: my_tuple = 1, 2, 3\n\nIn [66]: my_tuple\nOut[66]: (1, 2, 3)\n\nIn [67]: my_list = list(my_tuple)\n\nIn [68]: my_list\nOut[68]: [1, 2, 3]\n```", "```py\nIn [69]: patroni = ['stag', 'otter', 'dog']\n\nIn [70]: patroni.append('doe')\n\nIn [71]: patroni\nOut[71]: ['stag', 'otter', 'dog', 'doe']\n```", "```py\nIn [72]: patroni.extend('heron', 'hare')\nTraceback (most recent call last):\n\nFile ″C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_24452/4246633803.py″, line 1, in <module>\npatroni.extend('heron', 'hare')\n\nTypeError: extend() takes exactly one argument (2 given)\n```", "```py\nIn [73]: extra_patroni = 'heron', 'hare'\n\nIn [74]: patroni.extend(extra_patroni)\n\nIn [75]: patroni\nOut[75]: ['cat', 'stag', 'otter', 'dog', 'doe', 'heron', 'hare']\n```", "```py\nIn [76]: patroni.insert(0, 'cat')\n\nIn [77]: patroni\nOut[77]: ['cat', 'stag', otter, dog, 'doe']\n```", "```py\nIn [78]: Umbridge_patronus = patroni.pop(0)\n\nIn [79]: Umbridge_patronus\nOut[79]: 'cat'\nIn [80]: patroni\nOut[80]: ['stag', 'otter', 'dog', 'doe', 'heron', 'hare']\n```", "```py\nIn [81]: names = ['Harry', 'Ron', 'Hermione', 'Ginny']\n\nIn [82]: del names[1]\n\nIn [83]: names\nOut[83]: ['Harry', 'Hermione', 'Ginny']\n```", "```py\nIn [84]: del names[:2]\n\nIn [85]: names\nOut[85]: ['Ginny']\n```", "```py\nIn [86]: my_list = ['a', 'b', 'c', 'a', 'b', 'c']\n\nIn [87]: my_list.remove('a')\n\nIn [88]: my_list\nOut[88]: ['b', 'c', 'a', 'b', 'c']\n```", "```py\nIn [89]: patroni[5] = 'wolf'\n\nIn [90]: patroni\nOut[90]: ['stag', 'otter', 'dog', 'doe', 'heron', 'wolf']\n```", "```py\nIn [91]: patroni[len(patroni) - 1] = 'wolf'\n```", "```py\nIn [92]: patroni\n\nOut[92]: ['stag', 'otter', 'dog', 'doe', 'heron', 'wolf']\n\nIn [93]: patroni.index('dog')\nOut[93]: 2\n```", "```py\nIn [94]: patroni.index('dog', 2, 5)\nOut[94]: 2\n```", "```py\nIn [95]: my_list.count('b')\nOut[95]: 2\n```", "```py\nIn [96]: letters = ['c', 'a', 'c', 'b', 'd']\n\nIn [97]: letters.sort()\n\nIn [98]: letters\nOut[98]: ['a', 'b', 'c', 'c', 'd']\n```", "```py\nIn [99]: letters_mixed_case = ['C', 'a', 'c', 'B', 'd']\n\nIn [100]: letters_mixed_case.sort()\n\nIn [101]: letters_mixed_case\nOut[101]: ['B', 'C', 'a', 'c', 'd']\n```", "```py\nIn [102]: letters_mixed_case.sort(key=str.lower)\n\nIn [103]: letters_mixed_case\nOut[103]: ['a', 'B', 'C', 'c', 'd']\n```", "```py\nIn [104]: letters_mixed_case.sort(reverse=True)\n\nIn [105]: letters_mixed_case\nOut[105]: ['d', 'c', 'a', 'C', 'B']\n```", "```py\nIn [106]: my_list = ['longest', 'long', 'longer']\n\nIn [107]: my_list.sort(key=len)\n\nIn [108]: my_list\nOut[108]: ['long', 'longer', 'longest']\n```", "```py\nIn [109]: my_patroni = ['cat', 'hare', 'doe']\n\nIn [110]: your_patroni = my_patroni\n\nIn [111]: your_patroni\nOut[111]: ['cat', 'hare', 'doe']\n```", "```py\nIn [112]: id(my_patroni), id(your_patroni)\nOut[112]: (2181240760640, 2181240760640)\n```", "```py\nIn [113]: my_patroni[0] = 'stag'\n\nIn [114]: my_patroni\nOut[114]: ['stag', 'hare', 'doe']\n\nIn [115]: your_patroni\nOut[115]: ['stag', 'hare', 'doe']\n```", "```py\nIn [116]: my_patroni = ['cat', 'hare', 'doe']\n\nIn [117]: your_patroni = my_patroni.copy()\n\nIn [118]: your_patroni\nOut[118]: ['cat', 'hare', 'doe']\n```", "```py\nIn [119]: your_patroni = my_patroni[:]\n```", "```py\nIn [120]: id(my_patroni), id(your_patroni)\nOut[120]: (2181240443968, 2181240620288)\n```", "```py\nIn [121]: my_patroni = [['cat', 'hare'], ['doe', 'stag']]\n\nIn [122]: your_patroni = my_patroni.copy()\n\nIn [123]: id(my_patroni), id(your_patroni)\nOut[123]: (2181240513024, 2181240710976)\n```", "```py\nIn [124]: id(my_patroni[0]), id(your_patroni[0])\nOut[124]: (2181240520640, 2181240520640)\n```", "```py\nIn [125]: my_patroni[0][0] = 'wolf'\n\nIn [126]: my_patroni\nOut[126]: [['wolf', 'hare'], ['doe', 'stag']]\n\nIn [127]: your_patroni\nOut[127]: [['wolf', 'hare'], ['doe', 'stag']]\n```", "```py\nIn [128]: my_patroni.append('Manx cat')\n\nIn [129]: my_patroni\nOut[129]: [['wolf', 'hare'], ['doe', 'stag'], 'Manx cat']\n\nIn [130]: your_patroni\nOut[130]: [['wolf', 'hare'], ['doe', 'stag']]\n```", "```py\nIn [131]: import copy\n\nIn [132]: their_patroni = copy.deepcopy(your_patroni)\n\nIn [133]: their_patroni\nOut[133]: [['wolf', 'hare'], ['doe', 'stag']]\n\nIn [134]: id(your_patroni[0]), id(their_patroni[0])\nOut[134]: (2181240520640, 2181240818368)\n```", "```py\nIn [135]: my_patroni = ['cat', 'hare', 'doe']\n\nIn [136]: 'hare' in my_patroni Out[137]: True\n\nIn [138]: 'wolf' in my_patroni\nOut[138]: False\n```", "```py\n{'K. L. Putney', 'M. B. Clark', 'S. B. Vaughan'}\n```", "```py\nIn [139]: a_set = {1, 2, 3}\n\nIn [140]: a_set\nOut[140]: {1, 2, 3}\n```", "```py\nIn [141]: new_set = set(a_set)\n\nIn [142]: new_set\nOut[142]: {1, 2, 3}\n```", "```py\nIn [143]: a_string = ('Hello, World!')\n\nIn [144]: a_set = set(a_string)\n\nIn [145]: a_set\nOut[145]: {' ', '!', ',', 'H', 'W', 'd', 'e', 'l', 'o', 'r'}\n```", "```py\nIn [146]: hash('astrolabe')\nOut[146]: -4570350835965251752\n```", "```py\nIn [147]: my_set = {tuple(['a', 'list'])}\n\nIn [148]: my_set\nOut[148]: {('a', 'list')}\n```", "```py\nIn [149]: a_tuple = (1, 2, 3, ['Hello, World!'])\n\nIn [150]: my_set = set(a_tuple)\nTraceback (most recent call last):\n\nFile ″C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_3856/1713377465.py″, line 1, in <module>\nmy_set = set(a_tuple)\n\nTypeError: unhashable type: 'list'\n```", "```py\nIn [151]: import sys  # For system module.\n\nIn [152]: a_list = list(range(10_000))\n\nIn [153]: a_tuple = tuple(a_list)\n\nIn [154]: a_set = set(a_list)\n\nIn [155]: sys.getsizeof(a_list)\nOut[155]: 87616\n\nIn [156]: sys.getsizeof(a_tuple)\nOut[156]: 80040\n\nIn [157]: sys.getsizeof(a_set)\nOut[157]: 524504\n```", "```py\nIn [158]: pond1 = {'catfish', 'bullfrog', 'snail', 'planaria', 'turtle'}\n\nIn [159]: pond2 = {'bullfrog', 'crayfish', 'snail', 'leech', 'planaria'}\n```", "```py\nIn [160]: pond1.add('gar')\n\nIn [161]: pond1\nOut[161]: {'bullfrog', 'catfish', 'gar', 'planaria', 'turtle', 'snail'}\n```", "```py\nIn [162]: pond1_unique_animals = pond1.difference(pond2)\n\nIn [163]: pond1_unique_animals\nOut[163]: {'catfish', 'gar', 'turtle'}\n\nIn [164]: pond2_unique_animals = pond2.difference(pond1)\n\nIn [165]: pond2_unique_animals\nOut[165]: {'crayfish', 'leech'}\n```", "```py\nIn [166]: pond_common_animals = pond1.intersection(pond2)\n\nIn [167]: pond_common_animals\nOut[167]: {'bullfrog', 'planaria', 'snail'}\n```", "```py\nIn [168]: lake1 = {′bream′, ′planaria′, ′mussel′, ′catfish′, ′gar′, ′snail′, ′crayfish′,\n′turtle′, ′bullfrog′, ′cottonmouth′, ′leech′, ′alligator′}\n```", "```py\nIn [170]: pond_animals = pond1.union(pond2)\n\nIn [171]: print(pond_animals)\n{'planaria', 'catfish', 'gar', 'snail', 'crayfish', 'turtle', 'bullfrog', 'leech'}\n```", "```py\nIn [172]: lake1.issuperset(pond_animals)\nOut[172]: True\n```", "```py\nIn [173]: a_set = {1, 2, 3}\n\nIn [174]: a_frozenset = frozenset(a_set)\n\nIn [175]: a_frozenset\nOut[175]: frozenset({1, 2, 3})\n```", "```py\n{'a_key': 'a_value', 'another_key': 'another_value'}\n```", "```py\n{'hello': 'hola', 'goodbye': 'adios'}\n```", "```py\nIn [176]: morse = {'e': '.', 'h': '....', 'l': '.-..', 'o': '---', 's': '...'}\n\nIn [177]: morse\nOut[177]: {'e': '.', 'h': '....', 'l': '.-..', 'o': '---', 's': '...'}\n```", "```py\nIn [178]: for letter in 'hello':\n    ...:      print(morse[letter])\n....\n.\n.-..\n.-..\n---\n```", "```py\nIn [179]: morse['S']\nTraceback (most recent call last):\n\nFile \"C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_6456/1793354668.py\", line 1, in <module>\nmorse['S']\n\nKeyError: 'S'\n```", "```py\nIn [180]: for letter in 'SOS':\n    ...:       print(morse[letter.lower()])\n...\n---\n...\n```", "```py\nIn [181]: frank_sez = dict(bread='good', fire='bad')\n\nIn [182]: frank_sez\nOut[182]: {'bread': 'good', 'fire': 'bad'}\n```", "```py\nIn [183]: english = ['then', 'but', 'cold']\n\nIn [184]: spanish = ['entonces', 'pero', ['frio', 'fria']]\n\nIn [185]: translation = {}\n\nIn [186]: for key, value in zip(english, spanish):\n    ...: translation[key] = value\n\nIn [187]: translation\nOut[187]: \n{'then': 'entonces',\n'but': 'pero',\n'cold': ['frio', 'fria']}\n```", "```py\nIn [188]: translation['cold'][0]\nOut[188]: 'frio'\n```", "```py\nIn [189]: english = ['then', 'but', 'cold']\n\nIn [190]: spanish = ['entonces', 'pero', {'m': 'frio', 'f': 'fria'}]\n\nIn [191]: translation = {}\n\nIn [192]: for key, value in zip(english, spanish):\n    ...:      translation[key] = value\n\nIn [193]: translation['cold']['f']\nOut[193]: 'fria'\n\nIn [194]: translation['cold']['m']\nOut[194]: 'frio'\n```", "```py\nIn [195]: empty_dict = {}\n```", "```py\nIn [196]: empty_dict['color'] = None\n\nIn [197]: empty_dict['weight'] = ''\n\nIn [198]: empty_dict\nOut[198]: {'color': None, 'weight': ''}\n```", "```py\nIn [199]: chems = dict(HCl='acid', NaOH='base', HNO3='acid')\n\nIn [200]: chems.keys()\nOut[200]: dict_keys(['HCl', 'NaOH', 'HNO3'])\n\nIn [201]: chems.values()\nOut[201]: dict_values(['acid', 'base', 'acid'])\n\nIn [202]: chems.items()\nOut[202]: dict_items([('HCl', 'acid'), ('NaOH', 'base'), ('HNO3', 'acid')])\n```", "```py\nIn [203]: chems_keys = list(chems.keys())\nIn [204]: chems_keys\nOut[204]: ['HCl', 'NaOH', 'HNO3']\n```", "```py\nIn [205]: list(chems.items())\nOut[205]: [('HCl', 'acid'), ('NaOH', 'base'), ('HNO3', 'acid')]\n```", "```py\nIn [206]: chems['HCl']\nOut[206]: 'acid'\n```", "```py\nIn [207]: chems.get('KOH', 'unknown')\nOut[207]: 'unknown'\n```", "```py\nIn [208]: 'NaOH' in chems\nOut[208]: True\n```", "```py\nIn [209]: chems.update({'KOH': 'base'})\n\nIn [210]: chems\nOut[210]: {'HCl': 'acid', 'NaOH': 'base', 'HNO3': 'acid', 'KOH': 'base'}\n```", "```py\nIn [211]: chems.update({'KOH': 'base', 'Ca(OH)2': 'base'})\n```", "```py\nIn [212]: d1 = dict(Harry='good', Draco='bad')\n\nIn [213]: d2 = dict(Hermione='good', Tom='bad')\n\nIn [214]: d3 = dict(Ron='good', Dolores='bad')\n\nIn [215]: d4 = {**d1, **d2, **d3}\n\nIn [216]: d4\nOut[216]: \n{'Harry': 'good',\n'Draco': 'bad',\n'Hermione': 'good',\n'Tom': 'bad',\n'Ron': 'good',\n'Dolores': 'bad'}\n```", "```py\nIn [217]: chems.pop('Ca(OH)2')\nOut[217]: 'base'\n\nIn [218]: chems\nOut[218]: {'HCl': 'acid', 'NaOH': 'base', 'HNO3': 'acid', 'KOH': 'base'}\n```", "```py\nIn [219]: val = chems.pop('KOH')\n\nIn [220]: val\nOut[220]: 'base'\n```", "```py\nIn [221]: solar_system = {'Sol': 0, 'Mercury': 1, 'Venus': 2, 'Earth': 3}\n\nIn [222]: solar_system.setdefault('Mars', 4)\nOut[222]: 4 In [223]: solar_system\nOut[223]: {'Sol': 0, 'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4}\n```", "```py\nIn [224]: solar_system.setdefault('Earth', 42)\nOut[224]: 3\n\nIn [225]: solar_system\nOut[225]: {'Sol': 0, 'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4}\n```", "```py\nIn [226]: companies = ('Pfizer', 'Moderna', 'Johnson & Johnson')\n\nIn [227]: company_counts = dict.fromkeys(companies, 0)\n\nIn [228]: company_counts\nOut[228]: {'Pfizer': 0, 'Moderna': 0, 'Johnson & Johnson': 0}\n```", "```py\nIn [229]: def lookup_keys(d, v):\n     ...:      keys = []\n     ...:      for k in d:\n     ...:           if d[k] == v:\n     ...:                keys.append(k)\n     ...:      return keys\n```", "```py\nIn [230]: lookup_keys(solar_system, 3)\nOut[230]: ['Earth']\n```", "```py\nIn [231]: import json\n\nIn [232]: letter_order = dict(z=26, c=3, a=1, b=2, g=7, t=20)\n\nIn [233]: print(letter_order)\n{'z': 26, 'c': 3, 'a': 1, 'b': 2, 'g': 7, 't': 20}\n\nIn [234]: print(json.dumps(letter_order, sort_keys=False, indent=4))\n{\n     \"z\": 26,\n     \"c\": 3,\n     \"a\": 1,\n     \"b\": 2,\n     \"g\": 7,\n     \"t\": 20\n}\n```", "```py\nIn [235]: for k in sorted(letter_order):\n     ...:      print(f'{k}: {letter_order[k]}')\na: 1\nb: 2\nc: 3\ng: 7\nt: 20\nz: 26\n```"]