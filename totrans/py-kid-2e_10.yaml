- en: '9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More Turtle Graphics
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Let’s return to the turtle module we began using in [Chapter 4](ch04.xhtml#ch04).
    In this chapter, we’ll learn that Python turtles can do a lot more than draw plain
    black lines. You can use them to draw more advanced geometric shapes, create different
    colors, and even fill your shapes with color.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the Basic Square
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve previously used the turtle module to draw simple shapes. Let’s import
    the turtle module and create the Turtle object:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We used the following code in [Chapter 4](ch04.xhtml#ch04) to create a square:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In [Chapter 6](ch06.xhtml#ch06), we learned about for loops. With our newfound
    knowledge, we can use a for loop to simplify this code, like so:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On the first line, we tell the Turtle object to reset itself. Next, we start
    a for loop that will count from 1 to 4 with range(1, 5). With the following lines,
    in each run of the loop, we move forward 50 pixels and turn left 90 degrees. Because
    we’ve used a for loop, this code is a little shorter than the previous version—ignoring
    the reset line, we’ve gone from eight lines down to three.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0116-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Drawing Stars
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, with a few simple changes to our for loop, we can create something even
    more interesting. Enter the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code produces an eight-point star, as in [Figure 9-1](ch09.xhtml#ch09fig01).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-1: Eight-point star*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'The code itself is very similar to the code we used to draw a square, with
    a few exceptions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Rather than looping four times with range(1, 5), we loop eight times with range(1,
    9).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than moving forward 50 pixels, we move 100 pixels.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than turning 90 degrees, we turn 225 degrees to the left.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s develop our star a bit more. By using a 175-degree angle and looping
    37 times, we can make a star with even more points. Enter the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see the result of running this code in [Figure 9-2](ch09.xhtml#ch09fig02).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-2: Multi-point star*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try entering this code to produce a spiraling star:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By changing the degree of the turn and reducing the number of loops, the turtle
    ends up drawing quite a different style of star, which you can see in [Figure
    9-3](ch09.xhtml#ch09fig03).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-3: Spiral star*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Using similar code, we can create a variety of shapes, from a basic square to
    a spiral star. As you can see, using for loops made it much simpler to draw these
    shapes. Without for loops, our code would have required a lot of tedious typing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0119-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: 'Let’s try using an if statement to control how the turtle will turn and draw
    another star variation. In this example, we want the turtle to turn one angle
    the first time, and then another angle the next time:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we create a loop that will run 18 times ➊ and tell the turtle to move
    forward 100 pixels ➋. We’ve also added the if statement, which checks to see if
    the variable x contains an even number by using a *modulo operator*. The modulo
    operator is the % in the code x % 2 == 0, which is a way of saying, “*x* mod 2
    is equal to 0.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个循环，将运行 18 次 ➊，并告诉海龟向前移动 100 像素 ➋。我们还添加了 if 语句，它检查变量 x 是否包含偶数，使用了
    *取余运算符*。取余运算符是代码中的 %，例如 x % 2 == 0，表示“*x* 除以 2 的余数为 0”。
- en: The code x % 2 asks, “What is the amount left over when you divide the number
    in variable x into two equal parts?” For example, if we were to divide 7 balls
    into two parts, we would get two groups of 3 balls (making a total of 6 balls),
    and the remainder (the amount left over) would be 1 ball, as shown in [Figure
    9-4](ch09.xhtml#ch09fig04).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 代码 x % 2 问的是：“将变量 x 中的数字分成两等份后剩下多少？”例如，如果我们把 7 个球分成两部分，我们会得到两组各 3 个球（共计 6 个球），剩下
    1 个球，如 [图 9-4](ch09.xhtml#ch09fig04) 所示。
- en: '![Image](Images/09fig04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig04.jpg)'
- en: '*Figure 9-4: Dividing 7 balls into two equal parts*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-4: 将 7 个球分成两等份*'
- en: If we divided 13 balls into two parts, we would get two groups of 6 balls with
    1 ball remaining ([Figure 9-5](ch09.xhtml#ch09fig05)).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把 13 个球分成两部分，我们会得到两组各 6 个球，剩下 1 个球（见 [图 9-5](ch09.xhtml#ch09fig05)）。
- en: '![Image](Images/09fig05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig05.jpg)'
- en: '*Figure 9-5: Dividing 13 balls into two equal parts*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-5: 将 13 个球分成两等份*'
- en: When we check to see if the remainder equals zero after dividing x by 2, we’re
    actually asking whether it can be broken into two parts with no remainder. This
    method is a nice way to see if a number in a variable is even, because even numbers
    can always be divided into two equal parts.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查 x 除以 2 后的余数是否为零时，实际上是在问这个数是否能被分成两部分且没有余数。这种方法是检查变量中数字是否为偶数的好方法，因为偶数总是可以被均分为两等份。
- en: On the fifth line of our code, we tell the turtle to turn left 175 degrees (t.left(175))
    if the number in x is even (if x % 2 == 0); otherwise (else), on the final line,
    we tell it to turn 225 degrees (t.left(225)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们代码的第五行，我们告诉海龟如果 x 中的数字是偶数（if x % 2 == 0），就向左转 175 度（t.left(175)）；否则（else），在最后一行，我们告诉它转
    225 度（t.left(225)）。
- en: '[Figure 9-6](ch09.xhtml#ch09fig06) shows the result.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-6](ch09.xhtml#ch09fig06) 显示了结果。'
- en: '![Image](Images/09fig06.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig06.jpg)'
- en: '*Figure 9-6: Nine-point star*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-6: 九点星*'
- en: If you tried the four spirals challenge in the previous chapter, you might have
    created four turtle objects and copied the code four times with slight differences
    for each turtle so that they draw the spiral in the correct direction. With for
    loops and if statements, you could do the same thing with much simpler code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试过上一章的四个螺旋挑战，可能已经创建了四个海龟对象，并且为每个海龟复制了四次代码，每次略有不同，以便它们能够在正确的方向上绘制螺旋。使用 for
    循环和 if 语句，你可以用更简洁的代码实现相同的功能。
- en: Drawing a Car
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制一辆车
- en: The turtle can also change colors and draw specific shapes. For this example,
    we’ll draw a simple, if not silly-looking, car.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 海龟还可以更改颜色并绘制特定的形状。在这个例子中，我们将绘制一辆简单的、虽然不太酷的汽车。
- en: 'First, we’ll draw the body of the car. In IDLE, select **File ▸ New File**,
    and then enter the following code in the window:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将绘制汽车的车身。在 IDLE 中，选择 **文件 ▸ 新建文件**，然后在窗口中输入以下代码：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we’ll draw the first wheel:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将绘制第一个车轮：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lastly, we’ll draw the second wheel:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将绘制第二个车轮：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Select **File ▸ Save As** and give the file a name, such as *car.py*. Select
    **Run ▸ Run Module** to try out the code. Our car can be seen in [Figure 9-7](ch09.xhtml#ch09fig07).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **文件 ▸ 另存为**，并为文件命名，例如 *car.py*。选择 **运行 ▸ 运行模块** 来尝试这段代码。我们的汽车可以在 [图 9-7](ch09.xhtml#ch09fig07)
    中看到。
- en: '![Image](Images/09fig07.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig07.jpg)'
- en: '*Figure 9-7: Turtle drawing a car*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-7: 海龟绘制汽车*'
- en: 'You may have noticed that a few new turtle functions have snuck into this code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，代码中多了一些新的海龟函数：
- en: color is used to change the color of the pen.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: color 用于更改画笔的颜色。
- en: begin_fill and end_fill are used to fill in an area of the canvas with a color.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: begin_fill 和 end_fill 用于用颜色填充画布上的区域。
- en: circle draws a circle of a particular size.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: circle 绘制一个特定大小的圆形。
- en: setheading turns the turtle to face a particular direction.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setheading 用于将海龟转向特定方向。
- en: Let’s take a look at how we can use these functions to add color to our drawings.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何使用这些函数为我们的图形添加颜色。
- en: Coloring Things In
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上色
- en: The color function takes three parameters. The first specifies the amount of
    red, the second the amount of green, and the third the amount of blue. For example,
    to get the bright red of the car, we used color(1,0,0), which tells the turtle
    to use a 100 percent red.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: This red, green, and blue color recipe is called *RGB* and is the way that colors
    are represented on your computer monitor. Mixing these primary colors produces
    other colors, just like when you mix blue and red paint to make purple, or yellow
    and red to make orange. The colors red, green, and blue are called *primary colors*
    because you cannot mix other shades to produce them.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0124-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'Although we’re not using paint to create colors on a computer monitor (we’re
    using light), it may help to understand RGB by imagining you have three pots of
    paint: one red, one green, and one blue. Each pot is full, and we give each full
    pot a value of 1 (or 100 percent). We then mix all of the red paint and all of
    the green paint in a vat to produce yellow (that’s 1 and 1 of each, or 100 percent
    of each color).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s return to the world of code. To draw a yellow circle with the turtle,
    we would use 100 percent of both the red and green paint, but no blue, like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The 1,1,0 in the first line represents 100 percent red, 100 percent green, and
    0 percent blue. On the next line, we tell the turtle to fill the shapes it draws
    with this RGB color, and then we tell it to draw a circle ➊. The final line tells
    the turtle to fill the circle with the RGB color.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: A Function to Draw a Filled Circle
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make it easier to experiment with colors, let’s create a function from the
    code we used to draw a filled circle:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can draw a bright green circle by using only the green paint, like so:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or we can draw a darker green circle by using only half the green paint (0.5):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To play with the RGB colors on your screen, try drawing a circle first with
    full red, then half red (1 and 0.5), and with full blue, then half blue, like
    this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**NOTE**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '*If your canvas starts to get cluttered, use t.reset() to delete old drawings.
    Also remember that you can move the turtle without drawing lines by using t.up()
    to lift the pen and t.down() to set it back down again.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Various combinations of red, green, and blue will produce a huge variety of
    colors, like gold:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or light pink:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And here are two different shades of orange:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Try mixing some colors yourself!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Creating Pure Black and White
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What happens when you turn off all the lights at night? Everything goes black.
    The same thing happens with colors on a computer. No light means no color, so
    a circle with 0 for all of the primary colors creates black:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0126-01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Figure 9-8](ch09.xhtml#ch09fig08) shows the result.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-8: Black circle*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use 100 percent of all three colors, you get white. Enter the following
    to wipe out your black circle:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A Square-Drawing Function
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we’ll try a few more experiments with shapes. Let’s use the square-drawing
    function from the beginning of the chapter and pass it the size of the square
    as a parameter:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将尝试进行更多的形状实验。让我们使用本章开头的画方形函数，并将方形的大小作为参数传递：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Test your function by calling it with size 50, like so:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用该函数并传入50的大小来测试它，如下所示：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This produces the small square in [Figure 9-9](ch09.xhtml#ch09fig09).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生[图9-9](ch09.xhtml#ch09fig09)中的小方形。
- en: '![Image](Images/09fig09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig09.jpg)'
- en: '*Figure 9-9: Turtle drawing a small square*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-9：海龟画一个小方形*'
- en: 'Now let’s try our function with different sizes. The following code creates
    five consecutive squares of size 25, 50, 75, 100, and 125:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试使用不同的大小来运行我们的函数。以下代码创建了五个连续的方形，大小分别为25、50、75、100和125：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These squares should look like [Figure 9-10](ch09.xhtml#ch09fig10).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方形应该像[图9-10](ch09.xhtml#ch09fig10)一样。
- en: '![Image](Images/09fig10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig10.jpg)'
- en: '*Figure 9-10: Turtle drawing multiple squares*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-10：海龟画多个方形*'
- en: Drawing Filled Squares
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制填充的方形
- en: 'To draw a filled square, we need to reset the canvas, begin filling, and then
    call the square function again, with this code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制一个填充的方形，我们需要重置画布，开始填充，然后再次调用方形函数，代码如下：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see an empty square until you end filling:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在你结束填充之前，你应该看到一个空方形：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Your square should look like [Figure 9-11](ch09.xhtml#ch09fig11).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你的方形应该像[图9-11](ch09.xhtml#ch09fig11)一样。
- en: '![Image](Images/09fig11.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig11.jpg)'
- en: '*Figure 9-11: Turtle drawing a filled square*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-11：海龟画一个填充的方形*'
- en: 'Let’s change this function so we can draw either a filled or an unfilled square.
    To do so, we need another parameter and slightly more complicated code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改这个函数，以便既能绘制填充的方形，也能绘制不填充的方形。为此，我们需要另一个参数，并稍微复杂一点的代码：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'On the first line, we change the definition of our function to take two parameters:
    size and filled. Next, we check to see whether the value of filled is set to True
    with if filled == True. If it is, we call begin_fill to tell the turtle to fill
    the shape we drew. We then loop four times (for x in range(1, 5)) to draw the
    four sides of the square (moving forward and left) before checking again to see
    whether filled is True. If it is, we turn filling off with t.end_fill, and the
    turtle fills the square with color.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，我们将函数的定义修改为接受两个参数：大小和填充。接下来，我们检查filled的值是否为True，使用if filled == True。如果是，我们调用begin_fill，告诉海龟填充我们绘制的形状。然后我们循环四次（for
    x in range(1, 5)），绘制方形的四个边（前进并向左转），之后再次检查filled是否为True。如果是，我们用t.end_fill停止填充，海龟就会用颜色填充方形。
- en: 'Now we can draw a filled square with this line:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过这一行代码绘制一个填充的方形：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or we can create an unfilled square with this line:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以用这一行代码创建一个不填充的方形：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After these two calls to the mysquare function, we get [Figure 9-12](ch09.xhtml#ch09fig12),
    which looks a bit like a square eye.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两次调用mysquare函数之后，我们得到[图9-12](ch09.xhtml#ch09fig12)，它有点像一个方形的眼睛。
- en: '![Image](Images/09fig12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig12.jpg)'
- en: '*Figure 9-12: Turtle drawing a square eye*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-12：海龟画一个方形眼睛*'
- en: But there’s no sense in stopping here. You can draw all sorts of shapes and
    fill them with color.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这里停下没有意义，你可以绘制各种形状并用颜色填充它们。
- en: Drawing Filled Stars
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制填充的星形
- en: 'For our final example, we’ll add color to the star we drew earlier. The original
    code looked like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最终示例中，我们将为之前绘制的星形添加颜色。原始代码如下：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now we’ll make a mystar function. We’ll use the if statements from the mysquare
    function and add the size parameter:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个mystar函数。我们将使用mysquare函数中的if语句并添加大小参数：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the first two lines of this function, we check to see if filled is True;
    if it is, we begin filling. We check again in the last two lines, and if filled
    is True, we stop filling. Also, as with the mysquare function, we pass the size
    of the star in the parameter size, and use that value when we call t.forward.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数的前两行，我们检查filled是否为True；如果是，我们开始填充。在最后两行，我们再次检查，如果filled为True，则停止填充。此外，像mysquare函数一样，我们将星形的大小作为参数size传递，并在调用t.forward时使用该值。
- en: 'Now let’s set the color to gold (90 percent red, 75 percent green, and 0 percent
    blue), and then call the function again:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将颜色设置为金色（90%的红色，75%的绿色，0%的蓝色），然后再次调用该函数：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The turtle will draw the filled star in [Figure 9-13](ch09.xhtml#ch09fig13).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 海龟将在[图9-13](ch09.xhtml#ch09fig13)中绘制填充的星形。
- en: '![Image](Images/09fig13.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/09fig13.jpg)'
- en: '*Figure 9-13: Drawing a gold star*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-13：绘制金色的星形*'
- en: 'To add an outline to the star, change the color to black and redraw the star
    without filling:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要为星形添加轮廓，请将颜色改为黑色，并在不填充的情况下重新绘制星形：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now the star is gold with a black outline, like [Figure 9-14](ch09.xhtml#ch09fig14).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，星星是金色的，并带有黑色轮廓，就像[图9-14](ch09.xhtml#ch09fig14)一样。
- en: '![Image](Images/09fig14.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/09fig14.jpg)'
- en: '*Figure 9-14: Drawing a gold star with an outline*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-14：绘制一个金色星星并带有轮廓*'
- en: What You Learned
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, you learned how to use the turtle module to draw geometric
    shapes, using for loops and if statements to control what the turtle does on the
    screen. We changed the color of the turtle’s line and filled the shapes that it
    drew. We also reused the drawing code in some functions to make it easier to draw
    shapes with different colors with a single call to a function.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何使用海龟模块绘制几何形状，使用for循环和if语句来控制海龟在屏幕上做什么。我们改变了海龟线条的颜色，并填充了它绘制的形状。我们还将绘图代码重用到一些函数中，使得通过一次函数调用绘制不同颜色的形状变得更简单。
- en: Programming Puzzles
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程难题
- en: In the following experiments, you’ll draw your own shapes with the turtle. As
    always, the solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的实验中，你将使用海龟绘制你自己的形状。像往常一样，解决方案可以在*[http://python-for-kids.com](http://python-for-kids.com)*找到。
- en: '#1: Drawing an Octagon'
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1：绘制一个八边形'
- en: 'We’ve drawn stars, squares, and rectangles in this chapter. How about creating
    a function to draw an eight-sided shape like an octagon? (Hint: Try turning the
    turtle 45 degrees.) Your shape should look similar to [Figure 9-15](ch09.xhtml#ch09fig15).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们画了星星、方形和矩形。那么，如何创建一个绘制八边形的函数呢？（提示：试着让海龟转动45度。）你的形状应该与[图9-15](ch09.xhtml#ch09fig15)相似。
- en: '![Image](Images/09fig15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/09fig15.jpg)'
- en: '*Figure 9-15: Drawing an octagon*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-15：绘制一个八边形*'
- en: '#2: Drawing a Filled Octagon'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2：绘制一个填充的八边形'
- en: Now that you have a function to draw an octagon, modify it to draw a filled
    octagon. Try drawing an octagon with an outline, as we did with the star. It should
    look similar to [Figure 9-16](ch09.xhtml#ch09fig16).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了绘制八边形的函数，修改它来绘制一个填充的八边形。尝试像我们为星星所做的那样绘制一个有轮廓的八边形。它应该看起来与[图9-16](ch09.xhtml#ch09fig16)相似。
- en: '![Image](Images/09fig16.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/09fig16.jpg)'
- en: '*Figure 9-16: Drawing a filled octagon*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-16：绘制一个填充的八边形*'
- en: '#3: Another Star-Drawing Function'
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3：另一个绘制星星的函数'
- en: 'Create a function to draw a star that will take two parameters: the size and
    number of points. The beginning of the function should look something like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个函数来绘制星星，该函数需要两个参数：大小和点数。函数的开始应该像这样：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '#4: Four Spirals Revisited'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4：重新审视四个螺旋'
- en: 'Take the code you created for Programming Puzzle #4 in the previous chapter
    (to create four spirals) and draw the same spirals again—only this time, try using
    for loops and if statements to simplify your code.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 取出你在上一章中为编程难题#4创建的代码（用来创建四个螺旋）并再次绘制相同的螺旋——这次尝试使用for循环和if语句来简化代码。
