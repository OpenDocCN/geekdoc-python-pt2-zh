- en: '9'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More Turtle Graphics
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let’s return to the turtle module we began using in [Chapter 4](ch04.xhtml#ch04).
    In this chapter, we’ll learn that Python turtles can do a lot more than draw plain
    black lines. You can use them to draw more advanced geometric shapes, create different
    colors, and even fill your shapes with color.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the Basic Square
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve previously used the turtle module to draw simple shapes. Let’s import
    the turtle module and create the Turtle object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We used the following code in [Chapter 4](ch04.xhtml#ch04) to create a square:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In [Chapter 6](ch06.xhtml#ch06), we learned about for loops. With our newfound
    knowledge, we can use a for loop to simplify this code, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On the first line, we tell the Turtle object to reset itself. Next, we start
    a for loop that will count from 1 to 4 with range(1, 5). With the following lines,
    in each run of the loop, we move forward 50 pixels and turn left 90 degrees. Because
    we’ve used a for loop, this code is a little shorter than the previous version—ignoring
    the reset line, we’ve gone from eight lines down to three.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0116-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing Stars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, with a few simple changes to our for loop, we can create something even
    more interesting. Enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code produces an eight-point star, as in [Figure 9-1](ch09.xhtml#ch09fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-1: Eight-point star*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code itself is very similar to the code we used to draw a square, with
    a few exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: Rather than looping four times with range(1, 5), we loop eight times with range(1,
    9).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than moving forward 50 pixels, we move 100 pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than turning 90 degrees, we turn 225 degrees to the left.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s develop our star a bit more. By using a 175-degree angle and looping
    37 times, we can make a star with even more points. Enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see the result of running this code in [Figure 9-2](ch09.xhtml#ch09fig02).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-2: Multi-point star*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try entering this code to produce a spiraling star:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By changing the degree of the turn and reducing the number of loops, the turtle
    ends up drawing quite a different style of star, which you can see in [Figure
    9-3](ch09.xhtml#ch09fig03).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-3: Spiral star*'
  prefs: []
  type: TYPE_NORMAL
- en: Using similar code, we can create a variety of shapes, from a basic square to
    a spiral star. As you can see, using for loops made it much simpler to draw these
    shapes. Without for loops, our code would have required a lot of tedious typing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0119-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s try using an if statement to control how the turtle will turn and draw
    another star variation. In this example, we want the turtle to turn one angle
    the first time, and then another angle the next time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we create a loop that will run 18 times ➊ and tell the turtle to move
    forward 100 pixels ➋. We’ve also added the if statement, which checks to see if
    the variable x contains an even number by using a *modulo operator*. The modulo
    operator is the % in the code x % 2 == 0, which is a way of saying, “*x* mod 2
    is equal to 0.”
  prefs: []
  type: TYPE_NORMAL
- en: The code x % 2 asks, “What is the amount left over when you divide the number
    in variable x into two equal parts?” For example, if we were to divide 7 balls
    into two parts, we would get two groups of 3 balls (making a total of 6 balls),
    and the remainder (the amount left over) would be 1 ball, as shown in [Figure
    9-4](ch09.xhtml#ch09fig04).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-4: Dividing 7 balls into two equal parts*'
  prefs: []
  type: TYPE_NORMAL
- en: If we divided 13 balls into two parts, we would get two groups of 6 balls with
    1 ball remaining ([Figure 9-5](ch09.xhtml#ch09fig05)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-5: Dividing 13 balls into two equal parts*'
  prefs: []
  type: TYPE_NORMAL
- en: When we check to see if the remainder equals zero after dividing x by 2, we’re
    actually asking whether it can be broken into two parts with no remainder. This
    method is a nice way to see if a number in a variable is even, because even numbers
    can always be divided into two equal parts.
  prefs: []
  type: TYPE_NORMAL
- en: On the fifth line of our code, we tell the turtle to turn left 175 degrees (t.left(175))
    if the number in x is even (if x % 2 == 0); otherwise (else), on the final line,
    we tell it to turn 225 degrees (t.left(225)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-6](ch09.xhtml#ch09fig06) shows the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-6: Nine-point star*'
  prefs: []
  type: TYPE_NORMAL
- en: If you tried the four spirals challenge in the previous chapter, you might have
    created four turtle objects and copied the code four times with slight differences
    for each turtle so that they draw the spiral in the correct direction. With for
    loops and if statements, you could do the same thing with much simpler code.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a Car
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The turtle can also change colors and draw specific shapes. For this example,
    we’ll draw a simple, if not silly-looking, car.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll draw the body of the car. In IDLE, select **File ▸ New File**,
    and then enter the following code in the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll draw the first wheel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we’ll draw the second wheel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Select **File ▸ Save As** and give the file a name, such as *car.py*. Select
    **Run ▸ Run Module** to try out the code. Our car can be seen in [Figure 9-7](ch09.xhtml#ch09fig07).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-7: Turtle drawing a car*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that a few new turtle functions have snuck into this code:'
  prefs: []
  type: TYPE_NORMAL
- en: color is used to change the color of the pen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: begin_fill and end_fill are used to fill in an area of the canvas with a color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: circle draws a circle of a particular size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setheading turns the turtle to face a particular direction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a look at how we can use these functions to add color to our drawings.
  prefs: []
  type: TYPE_NORMAL
- en: Coloring Things In
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The color function takes three parameters. The first specifies the amount of
    red, the second the amount of green, and the third the amount of blue. For example,
    to get the bright red of the car, we used color(1,0,0), which tells the turtle
    to use a 100 percent red.
  prefs: []
  type: TYPE_NORMAL
- en: This red, green, and blue color recipe is called *RGB* and is the way that colors
    are represented on your computer monitor. Mixing these primary colors produces
    other colors, just like when you mix blue and red paint to make purple, or yellow
    and red to make orange. The colors red, green, and blue are called *primary colors*
    because you cannot mix other shades to produce them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0124-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Although we’re not using paint to create colors on a computer monitor (we’re
    using light), it may help to understand RGB by imagining you have three pots of
    paint: one red, one green, and one blue. Each pot is full, and we give each full
    pot a value of 1 (or 100 percent). We then mix all of the red paint and all of
    the green paint in a vat to produce yellow (that’s 1 and 1 of each, or 100 percent
    of each color).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s return to the world of code. To draw a yellow circle with the turtle,
    we would use 100 percent of both the red and green paint, but no blue, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The 1,1,0 in the first line represents 100 percent red, 100 percent green, and
    0 percent blue. On the next line, we tell the turtle to fill the shapes it draws
    with this RGB color, and then we tell it to draw a circle ➊. The final line tells
    the turtle to fill the circle with the RGB color.
  prefs: []
  type: TYPE_NORMAL
- en: A Function to Draw a Filled Circle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make it easier to experiment with colors, let’s create a function from the
    code we used to draw a filled circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can draw a bright green circle by using only the green paint, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can draw a darker green circle by using only half the green paint (0.5):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To play with the RGB colors on your screen, try drawing a circle first with
    full red, then half red (1 and 0.5), and with full blue, then half blue, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If your canvas starts to get cluttered, use t.reset() to delete old drawings.
    Also remember that you can move the turtle without drawing lines by using t.up()
    to lift the pen and t.down() to set it back down again.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Various combinations of red, green, and blue will produce a huge variety of
    colors, like gold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or light pink:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And here are two different shades of orange:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Try mixing some colors yourself!
  prefs: []
  type: TYPE_NORMAL
- en: Creating Pure Black and White
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What happens when you turn off all the lights at night? Everything goes black.
    The same thing happens with colors on a computer. No light means no color, so
    a circle with 0 for all of the primary colors creates black:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0126-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 9-8](ch09.xhtml#ch09fig08) shows the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-8: Black circle*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use 100 percent of all three colors, you get white. Enter the following
    to wipe out your black circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: A Square-Drawing Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we’ll try a few more experiments with shapes. Let’s use the square-drawing
    function from the beginning of the chapter and pass it the size of the square
    as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Test your function by calling it with size 50, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This produces the small square in [Figure 9-9](ch09.xhtml#ch09fig09).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-9: Turtle drawing a small square*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s try our function with different sizes. The following code creates
    five consecutive squares of size 25, 50, 75, 100, and 125:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: These squares should look like [Figure 9-10](ch09.xhtml#ch09fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-10: Turtle drawing multiple squares*'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Filled Squares
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To draw a filled square, we need to reset the canvas, begin filling, and then
    call the square function again, with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an empty square until you end filling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Your square should look like [Figure 9-11](ch09.xhtml#ch09fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-11: Turtle drawing a filled square*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s change this function so we can draw either a filled or an unfilled square.
    To do so, we need another parameter and slightly more complicated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'On the first line, we change the definition of our function to take two parameters:
    size and filled. Next, we check to see whether the value of filled is set to True
    with if filled == True. If it is, we call begin_fill to tell the turtle to fill
    the shape we drew. We then loop four times (for x in range(1, 5)) to draw the
    four sides of the square (moving forward and left) before checking again to see
    whether filled is True. If it is, we turn filling off with t.end_fill, and the
    turtle fills the square with color.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can draw a filled square with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can create an unfilled square with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: After these two calls to the mysquare function, we get [Figure 9-12](ch09.xhtml#ch09fig12),
    which looks a bit like a square eye.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-12: Turtle drawing a square eye*'
  prefs: []
  type: TYPE_NORMAL
- en: But there’s no sense in stopping here. You can draw all sorts of shapes and
    fill them with color.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Filled Stars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our final example, we’ll add color to the star we drew earlier. The original
    code looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’ll make a mystar function. We’ll use the if statements from the mysquare
    function and add the size parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the first two lines of this function, we check to see if filled is True;
    if it is, we begin filling. We check again in the last two lines, and if filled
    is True, we stop filling. Also, as with the mysquare function, we pass the size
    of the star in the parameter size, and use that value when we call t.forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s set the color to gold (90 percent red, 75 percent green, and 0 percent
    blue), and then call the function again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The turtle will draw the filled star in [Figure 9-13](ch09.xhtml#ch09fig13).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-13: Drawing a gold star*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an outline to the star, change the color to black and redraw the star
    without filling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now the star is gold with a black outline, like [Figure 9-14](ch09.xhtml#ch09fig14).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-14: Drawing a gold star with an outline*'
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the turtle module to draw geometric
    shapes, using for loops and if statements to control what the turtle does on the
    screen. We changed the color of the turtle’s line and filled the shapes that it
    drew. We also reused the drawing code in some functions to make it easier to draw
    shapes with different colors with a single call to a function.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following experiments, you’ll draw your own shapes with the turtle. As
    always, the solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: '#1: Drawing an Octagon'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We’ve drawn stars, squares, and rectangles in this chapter. How about creating
    a function to draw an eight-sided shape like an octagon? (Hint: Try turning the
    turtle 45 degrees.) Your shape should look similar to [Figure 9-15](ch09.xhtml#ch09fig15).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-15: Drawing an octagon*'
  prefs: []
  type: TYPE_NORMAL
- en: '#2: Drawing a Filled Octagon'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have a function to draw an octagon, modify it to draw a filled
    octagon. Try drawing an octagon with an outline, as we did with the star. It should
    look similar to [Figure 9-16](ch09.xhtml#ch09fig16).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/09fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-16: Drawing a filled octagon*'
  prefs: []
  type: TYPE_NORMAL
- en: '#3: Another Star-Drawing Function'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create a function to draw a star that will take two parameters: the size and
    number of points. The beginning of the function should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '#4: Four Spirals Revisited'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Take the code you created for Programming Puzzle #4 in the previous chapter
    (to create four spirals) and draw the same spirals again—only this time, try using
    for loops and if statements to simplify your code.'
  prefs: []
  type: TYPE_NORMAL
