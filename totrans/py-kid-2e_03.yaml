- en: '2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Calculations and Variables
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve installed Python and know how to start the Python Shell, you’re
    ready to do something with it. We’ll begin with some simple calculations and then
    learn how to use variables. Variables are a way of storing things in a computer
    program, and they can help you write useful programs.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Normally, when asked to find the product of two numbers like 8 × 3.57, you would
    use a calculator or a pencil and paper. Well, how about using the Python Shell
    to perform your calculation? Let’s try it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Python Shell by double-clicking the IDLE icon on your desktop, or
    if you’re using Ubuntu, click the IDLE icon in the Applications menu. At the prompt,
    enter this calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When entering a multiplication calculation in Python, you use the asterisk symbol
    (*) instead of a multiplication sign (×).
  prefs: []
  type: TYPE_NORMAL
- en: How about we try an equation that’s a bit more useful?
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you are digging in your backyard and uncover a bag of 20 gold coins.
    The next day, you sneak down to the basement and stick the coins inside your grandfather’s
    steam-powered replicating invention (luckily, you can *just* fit the 20 coins
    inside). You hear a whiz and a pop and, a few hours later, out shoot another 10
    gleaming coins.
  prefs: []
  type: TYPE_NORMAL
- en: 'How many coins would you have in your treasure chest if you did this every
    day for a year? On paper, the equations might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 10 × 365 = 3650
  prefs: []
  type: TYPE_NORMAL
- en: 3650 + 20 = 3670
  prefs: []
  type: TYPE_NORMAL
- en: Sure, it’s easy enough to do these calculations using a calculator or on paper,
    but we can do all of these calculations with the Python Shell as well. First,
    we multiply 10 coins by 365 days in a year to get 3650\. Next, we add the original
    20 coins to get 3670.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, what if a raven spots the shiny gold sitting in your bedroom, and every
    week flies in and manages to steal three coins? How many coins would you have
    left at the end of the year? Here’s how this calculation looks in the Python Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, we multiply 3 coins by 52 weeks in the year. The result is 156\. We subtract
    that number from our total number of coins (3670), which tells us that we would
    have 3514 coins remaining at the end of the year.
  prefs: []
  type: TYPE_NORMAL
- en: Although you could easily do this calculation with a calculator, working through
    it in the Python Shell is beneficial in learning to write simple computer programs.
    In this book, you’ll learn how to expand on these ideas to write programs that
    are even more useful.
  prefs: []
  type: TYPE_NORMAL
- en: Python Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can do addition, subtraction, multiplication, and division in the Python
    Shell, among other mathematical operations that we’ll explore later on. The basic
    symbols Python uses to perform mathematical operations, called *operators*, are
    listed in [Table 2-1](ch02.xhtml#ch02tab01).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 2-1:** Basic Python Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Symbol** | **Operation** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| + | Addition |'
  prefs: []
  type: TYPE_TB
- en: '| - | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '| * | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| / | Division |'
  prefs: []
  type: TYPE_TB
- en: The *forward slash* (/) is used for division because it’s similar to the division
    line that you would use when writing a fraction. For example, if you had 100 pirates
    and 20 large barrels and you wanted to calculate how many pirates you could hide
    in each barrel, you could divide 100 pirates by 20 barrels (100 ÷ 20) by entering
    100 / 20 in the Python Shell. Just remember that the forward slash is the one
    whose top falls to the right.
  prefs: []
  type: TYPE_NORMAL
- en: The Order of Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use parentheses in programming languages to control the order of operations.
    An *operation* is anything that uses an operator. Multiplication and division
    have a higher order than addition and subtraction, so they’re performed first.
    In other words, if you enter an equation in Python, multiplication or division
    is performed before addition or subtraction.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the following equation, the numbers 30 and 20 are multiplied
    first, and the number 5 is added to their product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This equation is another way of saying, “Multiply 30 by 20, and then add 5
    to the result.” The result is 605\. We can change the order of operations by adding
    parentheses around the first two numbers, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The result of this equation is 700 (not 605) because the parentheses tell Python
    to do the operation in the parentheses first, and then do the operation outside
    the parentheses. This example is saying, “Add 5 to 30, and then multiply the result
    by 20.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Parentheses can be *nested*, which means that there can be parentheses inside
    parentheses, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, Python evaluates the innermost parentheses first, then the outer
    ones, and then the final division operator. In other words, this equation is saying,
    “Add 5 to 30, then multiply the result by 20, and divide that result by 10.” Here’s
    what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding 5 to 30 gives 35.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiplying 35 by 20 gives 700.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dividing 700 by 10 gives the final answer of 70.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we had not used parentheses, the result would be slightly different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this case, 30 is first multiplied by 20 (giving 600), and then 600 is divided
    by 10 (giving 60). Finally, 5 is added to get the result of 65.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember that multiplication and division always go before addition and subtraction,
    unless parentheses are used to control the order of operations.*'
  prefs: []
  type: TYPE_NORMAL
- en: Variables Are Like Labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The word *variable* in programming describes a place to store information such
    as numbers, text, lists of numbers and text, and so on. A variable is essentially
    a label for something.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to create a variable named fred, we use an equal sign ( = ) and
    then tell Python what information the variable should be the label for. Here,
    we create the variable fred and tell Python that it’s a label for the number 100
    (note that this doesn’t mean that another variable can’t have the same value):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To find the value of a variable, enter print in the Python Shell, followed
    by the variable name in parentheses, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also tell Python to change the variable fred so that it labels something
    else. For example, here’s how to change fred to the number 200:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: On the first line, we say that fred labels a number 200. In the second line,
    we print the value of fred, just to confirm the change. Python prints the result
    on the last line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use more than one label (or variable) for the same item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we’re telling Python that we want the name (or variable) john
    to label the same thing as fred by using the equal sign between john and fred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, fred probably isn’t a very useful name for a variable because it
    most likely doesn’t tell us anything about what the variable is used for. Let’s
    call our variable number_of_coins instead of fred, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This makes it clear that we’re talking about 200 coins. Variable names can be
    made up of letters, numbers, and the underscore character ( _ ), but they can’t
    start with a number. You can use anything from single letters (such as a) to long
    sentences for variable names. (A variable can’t contain a space, so use an underscore
    to separate words.) Sometimes, if you’re doing something quick, a short variable
    name is best. The name you choose should depend on how meaningful you need the
    variable name to be.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to create variables, let’s look at how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Using Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember our equation for figuring out how many coins you would have at the
    end of the year if you could magically create new coins with your grandfather’s
    mysterious invention in the basement? We had this equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can turn that into a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s not very easy to read, but what if we turn the numbers into variables?
    Try entering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These entries create the variables found_coins, magic_coins, and stolen_coins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can reenter the equation like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that this gives us the same answer. So who cares, right? Ah, but
    here’s the magic of variables. What if you stick a scarecrow in your window, and
    the raven steals only two coins instead of three? When we use a variable, we can
    simply change the variable to hold that new number, and it will change everywhere
    it is used in the equation. We can change the stolen_coins variable to 2 by entering
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then copy and paste the equation to calculate the answer again, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the text to copy by clicking with the mouse and dragging from the beginning
    to the end of the line, as shown in [Figure 2-1](ch02.xhtml#ch02fig01).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Image](Images/02fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-1: Selecting in the Python Shell*'
  prefs: []
  type: TYPE_NORMAL
- en: Hold down the CTRL key (or, if you’re using a Mac, the COMMAND key ⌘) and press
    C to copy the selected text. (You’ll see this as CTRL-C from now on.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the last prompt line (after stolen_coins = 2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold down the CTRL (or COMMAND) key and press V to paste the selected text.
    (You’ll see this as CTRL-V from now on.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press ENTER to see the new result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Image](Images/02fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2-2: Pasting in the Python Shell*'
  prefs: []
  type: TYPE_NORMAL
- en: That’s much easier than retyping the whole equation!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try changing the other variables, and then copy (CTRL-C) and paste
    (CTRL-V) the calculation to see the effect of your changes. For example, if you
    bang the sides of your grandfather’s invention at the right moment, and it spits
    out three extra coins each time, you’ll find that you end up with 4661 coins at
    the end of the year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Of course, using variables for a simple equation like this one is still only
    *slightly* useful. We haven’t gotten to *really* useful yet. For now, just remember
    that variables are a way of labeling things so that you can use them later.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to do simple equations using Python operators
    and how to use parentheses to control the order of operations (the order in which
    Python evaluates the parts of the equations). We then created variables to label
    values and used those variables in our calculations.
  prefs: []
  type: TYPE_NORMAL
