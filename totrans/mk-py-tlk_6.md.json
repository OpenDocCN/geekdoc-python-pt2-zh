["```py\n    print(\"Here is a third message!\")\n    ```", "```py\n    2\n    9\n    2\n    2.3333333333333335\n    1\n    4\n    20\n    ```", "```py\n    print(55 * 234)\n    ```", "```py\n    <class 'str'>\n    <class 'str'>\n    Kentucky Wildcats\n    WildcatsKentucky \n    Wildcats @ Kentucky \n    WildcatsWildcatsWildcats\n    ```", "```py\n    <class 'float'>\n    <class 'float'>\n    3.46\n    -2.4\n    3.0\n    ```", "```py\n    <class 'int'>\n    57\n    0.0\n    ```", "```py\n    <class 'bool'>\n    8<7\n    False\n    <class 'str'>\n    <class 'str'>\n    ```", "```py\n    -23\n    56\n    -23.0\n    8.0\n    ```", "```py\n    1\n    0.0\n    False\n    ```", "```py\n    False\n    True\n    True\n    True\n    ```", "```py\n    this is A1\n    this is A2\n    ```", "```py\n    this is A1\n    this is A2\n    this is C1\n    this is C2\n    ```", "```py\n    this is A1\n    this is A2\n    this is B1\n    this is B2\n    this is C1\n    this is C2\n    ```", "```py\n    0\n    1\n    2\n    3\n    4\n    ```", "```py\n    10\n    11\n    12\n    13\n    14\n    ```", "```py\n    10\n    12\n    14\n    ```", "```py\n    midterm = [95, 78, 77, 86, 90, 88, 81, 66]\n    print(\"the range is\", max(midterm)-min(midterm))\n    print(\"the average is\", sum(midterm)/len(midterm))\n    ```", "```py\n    rsity\n    y\n    University\n    rsity of Kentucky\n    ```", "```py\n    [2, 3, 5, 9]\n    5\n    3\n    ```", "```py\n    [\"a\", \"hello\", 2]\n    [1, \"a\", \"hello\", 2, \"hi\"]\n    ```", "```py\n    lst = [1, \"a\", \"hello\", 2]\n    newdict = {}\n    for i, x in enumerate(lst):\n        newdict[i] = x\n    print(newdict)\n    ```", "```py\n    lst = [1, \"a\", \"hello\", 2]\n    newdict = {i:lst[i] for i in range(len(lst))}\n    print(newdict)\n    ```", "```py\n    if inp == \"stop listening\":\n        print('Goodbye!')\n    ```", "```py\n    if inp == \"`quit the script`\":\n        print('`Have a great day!`')\n    ```", "```py\n    elif \"open text\" in inp: \n        inp = inp.replace('open text ','')\n        myfile = f'{inp}.txt)'\n        open_file(myfile)\n        continue\n    ```", "```py\n    import speech_recognition as sr \n    speech = sr.Recognizer()\n    def voice_to_text():\n        voice_input = \"\" \n        with sr.Microphone() as source:\n            speech.adjust_for_ambient_noise(source)\n            try:\n                audio = speech.listen(source)\n                voice_input = speech.recognize_google(audio)\n     except sr.UnknownValueError:\n                pass\n            except sr.RequestError:\n                pass        \n            except sr.WaitTimeoutError:\n                pass\n        return voice_input \n    ```", "```py\n    `from mysr import voice_to_text`\n    ```", "```py\n    import pyttsx3\n    engine = pyttsx3.init()\n    voices = engine.getProperty('voices')\n    engine.setProperty('voice', voices[0].id)\n    engine.setProperty('rate', 160)\n    engine.setProperty('volume', 0.8)\n    engine.say(\"This is a test of my speech id, speed, and volume.\")\n    engine.runAndWait()\n    ```", "```py\n    # Put mysr.py and mysay.py in the same folder as this script\n    from mysr import voice_to_text\n    from mysay import print_say\n    # Ask the base length of the triangle\n    print_say('What is the base length of the triangle?')\n    # Convert the voice input to a variable inp1\n    inp1 = voice_to_text()\n    print_say(f'You just said {inp1}.')\n    # Ask the height of the triangle\n    print_say('What is the height of the triangle?')\n    # Save the answer as inp2\n    inp2 = voice_to_text()\n    print_say(f'You just said {inp2}.')\n    # Calculate the area\n    area = float(inp1)*float(inp2)/2\n    # Print and speak the result\n    print_say(f'The area of the triangle is {area}.')\n    ```", "```py\n    elif re2 == \"too high\":\n        print_say(\"Is it 1?\")\n        while True:\n            re3 = voice_to_text()\n            print_say(f\"You said {re3}.\")\n            if re3 in (\"too high\", \"that is right\", \"too small\"):\n                break\n        if re3 == \"too small\":\n            print_say(\"It is 2!\")\n            sys.exit\n        elif re3 == \"that is right\":\n            print_say(\"Yay, lucky me!\")\n            sys.exit\n    ```", "```py\n    elif re2 == \"too high\":\n        print_say(\"Is it `2`?\")\n        while True:\n            re3 = voice_to_text()\n            print_say(f\"You said {re3}.\")\n            if re3 in (\"too high\", \"that is right\", \"too small\"):\n                break\n        if re3 == \"`too high`\":\n            print_say(\"It is `1`!\")\n            sys.exit\n        elif re3 == \"that is right\":\n            print_say(\"Yay, lucky me!\")\n            sys.exit \n    ```", "```py\n    print(answer) \n    ```", "```py\n    print(answer`[0:300]`)\n    ```", "```py\n    from pygame import mixer \n    ```", "```py\n    `import platform`\n    ```", "```py\n    mixer.init()\n    mixer.music.load(f\"./chat/{mysong}\")\n    mixer.music.play()\n    ```", "```py\n    `if platform.system() == \"Windows\":`\n     `os.system(f\"explorer ./chat/{mysong}\")`\n    `elif platform.system() == \"Darwin\":`\n     `os.system(f\"open ./chat/{mysong}\")`\n    `else:`\n     `os.system(f\"xdg-open ./chat/{mysong}\")`\n    ```", "```py\n    and \"mp3\" in file.name \n    ```", "```py\n    and \"`wav`\" in file.name \n    ```", "```py\n    from bs4 import BeautifulSoup\n    textfile = open(\"UKYexample.html\", encoding='utf8')\n    soup = BeautifulSoup(textfile, \"html.parser\")\n    ptags = soup.findAll(\"p\")\n    atag = ptags[1].find(\"a\")\n    print(atag['class'])\n    print(atag['href'])\n    ```", "```py\n    from bs4 import BeautifulSoup\n    import requests\n    url = 'http://libraries.uky.edu'\n    page = requests.get(url)\n    soup = BeautifulSoup(page.text, \"html.parser\")\n    div = soup.find('div', class_=\"sf-middle\")\n    contact = div.find(\"div\", class_=\"dashing-li-last\")\n    area = contact.find('span', class_=\"featured_area\")\n    print(area.text)\n    atag = contact.find('span', class_=\"featured_email\")\n    print(atag.text)\n    ```", "```py\n    from io import BytesIO\n    import requests\n    import bs4\n    from pygame import mixer\n    # Import functions from the local package\n    from mptpkg import voice_to_text, print_say\n    def podcast():\n        # Break a long url into multiple lines\n        url = ('https://goop.com/the-goop-podcast/'\n             'gwyneth-x-oprah-power-perception-soul-purpose/')\n        # Convert the source code to a soup string\n        response=requests.get(url)\n        soup = bs4.BeautifulSoup(response.text, 'lxml')\n        casts = soup.findAll\\\n        ('audio', {'class':'podcast-episode__audio-player'})\n        casts = str(casts)\n        start = casts.find(\"https\")\n        end = casts.find(\".mp3\")\n        cast= casts[start:end+4]\n        # Play the mp3 using the pygame module\n        mymp3 = requests.get(cast)\n        voice = BytesIO()\n        voice.write(mymp3.content)\n        voice.seek(0)\n        mixer.init()\n        mixer.music.load(voice)\n        mixer.music.play()\n    while True:\n        print_say('Python is listening...')\n        inp = voice_to_text().lower()\n        print_say(f'you just said: {inp}')\n        if inp == \"stop listening\":\n            print_say('Goodbye!')\n            break\n        # If \"podcast\" in your voice command, play podcast\n        elif \"podcast\" in inp: \n            podcast()\n            # Python listens in the background\n            while True:\n                background = voice_to_text().lower()\n                # Stops playing if you say \"stop playing\"\n                if \"stop playing\" in background:\n                    mixer.music.stop()\n                    break\n    ```", "```py\n    import arrow\n    from mptpkg import print_say\n\n    dt = arrow.now().format('MMMM D, YYYY')\n    tm = arrow.now().format('hh:mm:ss A')\n    print_say(f'today is {dt}, and the time now is {tm}.')\n    ```", "```py\n    elif \"stop\" in voice_input:\n    ```", "```py\n    elif \"`quit the script`\" in voice_input:\n    ```", "```py\n    import turtle as t\n\n    t.Screen()\n    t.setup(`500`,`400`,100,200)\n    t.bgcolor('`blue`')\n    t.title('`Modified Screen`')\n    t.done() \n    t.bye()\n    ```", "```py\n    t.forward(200)\n    t.backward(300)\n    ```", "```py\n    `t.backward(100)`\n    `t.forward(250):`\n    ```", "```py\n    import turtle as t\n\n    t.Screen()\n    t.setup(600,500,100,200)\n    t.title('Python Turtle Graphics')\n    t.hideturtle()\n    t.up()\n    `t.goto(100,100)`\n    `t.dot(60,'lightgreen')`\n    `t.goto(-100,-100)`\n    `t.dot(60,'lightgreen')`\n    t.done()\n    try:\n        t.bye()\n    except Terminator:\n        pass\n    ```", "```py\n    t.pencolor('blue')\n    t.pensize(5)\n    ```", "```py\n    t.pencolor('`red`')\n    t.pensize(`3`)\n    ```", "```py\n    import turtle as t\n    t.Screen()\n    t.setup(600,500,100,200)\n    t.bgcolor('green')\n    t.title('Python Turtle Graphics')\n    t.hideturtle()\n    t.tracer(False)\n    t.pensize(6)\n    t.goto(200,0)\n    t.goto(200,100)\n    t.goto(0,100)\n    t.goto(0,0)\n    t.update()\n    t.done()\n    try:\n        t.bye()\n    except Terminator:\n        pass\n    ```", "```py\n    t.goto(center)\n    t.write(cell,font = ('Arial',20,'normal'))\n    ```", "```py\n    t.goto(`(`center`[0]-80, center[1]-80)`)\n    t.write(cell,font = ('Arial',`15`,'normal'))\n    ```", "```py\n    print(f'(x, y) is ({x}, {y})')\n    ```", "```py\n    print(f'(x, y) is ({x}, {y})')\n    `print('x+y is ', x+y)`\n    ```", "```py\n    print('row number is ', row)\n    ```", "```py\n    `print(f'you clicked on the point ({x}, {y})')`\n    print('row number is ', row)\n    ```", "```py\n    # The blue player moves first\n    turn = \"blue\"\n    ```", "```py\n    # The `white` player moves first\n    turn = `\"white\"`\n    ```", "```py\n    if '1' in occupied[turn] and '5' in occupied[turn] and '9' in occupied[turn]:\n        win = True\n    if '3' in occupied[turn] and '5' in occupied[turn] and '7' in occupied[turn]:\n        win = True\n    ```", "```py\n    done()\n    ```", "```py\n    `rownum = 1`\n    `for y in range(-250, 300, 100):`\n     `goto(325,y)`\n     `write(rownum,font=('Arial',20,'normal'))`\n     `rownum += 1`\n    done()\n    ```", "```py\n    sleep(0.05)\n    ```", "```py\n    sleep(`0.025`)\n    ```", "```py\n    if vertical4(x, y, turn) == True:\n        win = True\n    ```", "```py\n    'column ':'',\n    ```", "```py\n    coins[i].goto(-100 + 50 * i, 0)\n    ```", "```py\n    coins[i].goto(-100 + 50 * i, `-10`)\n    ```", "```py\n    coins[-(i+1)].hideturtle()\n    ```", "```py\n    coins[`i`].hideturtle()\n    ```", "```py\n    ['H', 'i', ' ', 'P', 'y', 't', 'h', 'o', 'n'] \n    ```", "```py\n    # The red player moves first\n    turn = \"red\"\n    ```", "```py\n    # The `yellow` player moves first\n    turn = \"`yellow`\"\n    ```", "```py\n    # Computer moves first\n    computer_move()\n    ```", "```py\n    # Take column 4 in the first move\n    if len(occupied[3]) == 0:\n        return 4\n    ```", "```py\n    cnt = {2:7, 1:5, 4:6}\n    ```", "```py\n    start_date = \"2020-09-01\"\n    end_date = \"2021-02-28\"\n    ```", "```py\n    start_date = \"`2021-03-01`\"\n    end_date = \"2021-`06-01`\"\n    ```", "```py\n    plt.plot(stock['Date'], stock['Adj Close'], c = 'blue')\n    ```", "```py\n    plt.plot(stock['Date'], stock['Adj Close'], c = '`red`')\n    ```", "```py\n    formatter = mdates.DateFormatter('%m/%d/%Y')\n    ```", "```py\n    formatter = mdates.DateFormatter('%m`-`%d`-`%Y') \n    ```", "```py\n    plt.setp(fig.get_xticklabels(), rotation = 10)\n    ```", "```py\n    plt.setp(fig.get_xticklabels(), rotation = `15`)\n    ```", "```py\n    usd = response_json['bpi']['USD']\n    # Get the price\n    price = usd['rate_float']\n    print(f\"The Bitcoin price is {price} dollars.\")\n    ```", "```py\n    `gbp` = response_json['bpi']['`GBP`']\n    # Get the price\n    price = `gbp`['`rate`']\n    print(f\"The Bitcoin price is {price} `pounds`.\")\n    ```", "```py\n    root.geometry(\"800x200\")\n    # Create a label inside the root window\n    label=tk.Label(text=\"this is a label\", fg=\"Red\", font=(\"Helvetica\", 80))\n    ```", "```py\n    root.geometry(\"`850x160`\")\n    # Create a label inside the root window\n    label=tk.Label(text=\"`here is your label`\", fg=\"Red\", font=(\"Helvetica\", 80))\n    ```", "```py\n    root.after(1000, bitcoin_watch)\n    ```", "```py\n    root.after(`800`, bitcoin_watch)\n    ```", "```py\n    maxprice = oldprice * 1.05\n    minprice = oldprice * 0.95\n    ```", "```py\n    maxprice = oldprice * `1.03`\n    minprice = oldprice * `0.97`\n    ```"]