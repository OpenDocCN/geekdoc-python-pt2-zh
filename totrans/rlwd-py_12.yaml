- en: '12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '12'
- en: ARE WE LIVING IN A COMPUTER SIMULATION?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否生活在计算机模拟中？
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: In 2003, the philosopher Nick Bostrom postulated that we live in a computer
    simulation run by our advanced, possibly post-human, descendants. Today, many
    scientists and big thinkers, including Neil DeGrasse Tyson and Elon Musk, believe
    there’s a good chance this *simulation hypothesis* is true. It certainly explains
    why mathematics so elegantly describes nature, why observers seem to influence
    quantum events, and why we appear to be alone in the universe.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2003 年，哲学家尼克·博斯特罗姆假设我们生活在由我们先进的、可能是后人类的后代运行的计算机模拟中。如今，包括尼尔·德格拉斯·泰森和埃隆·马斯克在内的许多科学家和思想家认为，*模拟假设*可能是真的。这确实解释了为什么数学如此优雅地描述了自然，为什么观察者似乎能影响量子事件，为什么我们看起来在宇宙中是孤独的。
- en: Even stranger, *you* could be the only real thing in this simulation. Perhaps
    you’re a brain in a vat, immersing yourself in a historical simulation. For computational
    efficiency, the simulation might render only those things with which you currently
    interact. When you go inside and close your door, the world outside might turn
    off like a refrigerator light. How would you really know one way or the other?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 更奇怪的是，*你* 可能是这个模拟中唯一真实的存在。也许你只是一个浸泡在历史模拟中的大脑。为了计算效率，模拟可能只呈现出你当前互动的那些事物。当你进入屋里并关上门时，外面的世界可能就像冰箱灯一样关闭。你如何才能知道这究竟是怎么回事呢？
- en: 'Scientists take this hypothesis seriously, holding debates and publishing papers
    on how we might devise some test to prove it. In this chapter, you’ll attempt
    to answer the question using an approach proposed by physicists: you’ll build
    a simple simulated world and then analyze it for clues that might give the simulation
    away. In doing so, you’ll work through this project backward, writing the code
    before coming up with the problem-solving strategy. You’ll find that even the
    simplest model can provide profound insights on the nature of our existence.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 科学家们严肃看待这个假设，进行辩论并发表论文讨论如何设计测试来证明它。在这一章中，你将尝试使用物理学家提出的方法来回答这个问题：你将构建一个简单的模拟世界，然后分析其中的线索，看看是否有任何迹象能揭示这是一个模拟。通过这样做，你将以反向的方式完成这个项目，即先编写代码，再制定解决问题的策略。你会发现，即使是最简单的模型，也能提供关于我们存在本质的深刻洞察。
- en: '**Project #16: Life, the Universe, and Yertle’s Pond**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 #16：生命、宇宙与 Yertle 的池塘**'
- en: The ability to simulate reality isn’t just a far-off dream. Physicists have
    used the world’s most powerful supercomputers to accomplish this feat, simulating
    subatomic particle behavior at a scale of a few femtometers (10^(-15) m). Although
    the simulation represents only a tiny piece of the cosmos, it’s indistinguishable
    from what we understand to be reality.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟现实的能力并非遥不可及的梦想。物理学家们已经使用世界上最强大的超级计算机完成了这一壮举，模拟了亚原子粒子的行为，规模达到几飞米（10^(-15) 米）。尽管这项模拟仅代表宇宙的一小部分，但它与我们所理解的现实无法区分。
- en: But don’t worry, you won’t need a supercomputer or a degree in physics to solve
    this problem. All you need is the turtle module, a drawing program designed for
    kids. You used turtle to simulate the Apollo 8 mission in [Chapter 6](ch06.xhtml).
    Here, you’ll use it to understand one of the foundational features of computer
    models. You’ll then apply that knowledge to devise the same basic strategy that
    physicists plan to apply to the simulation hypothesis.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但别担心，你不需要超级计算机或物理学学位来解决这个问题。你只需要使用 turtle 模块，这是一个为孩子设计的绘图程序。你在[第六章](ch06.xhtml)中使用过
    turtle 来模拟阿波罗 8 号任务。在这里，你将利用它来理解计算机模型的一个基本特征。然后，你将应用这些知识来制定物理学家计划用于模拟假设的相同基本策略。
- en: THE OBJECTIVE
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目标
- en: Identify a feature of a computer simulation that might be detectable by those
    being simulated.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 确定计算机模拟中的一个特征，可能会被被模拟者发现。
- en: '***The Pond Simulation Code***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***池塘模拟代码***'
- en: The *pond_sim.py* code creates a turtle-based simulation of a pond that includes
    a mud island, a floating log, and a snapping turtle named Yertle. Yertle will
    swim out to the log, swim back, and then swim out again. You can download the
    code from the book’s website at *[https://nostarch.com/real-world-python/](https://nostarch.com/real-world-python/)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*pond_sim.py* 代码创建了一个基于海龟图形的池塘模拟，其中包括一个泥岛、一个漂浮的木头和一只名叫 Yertle 的 snapping turtle（咬龟）。Yertle
    会游到木头那里，游回来，然后再游出去。你可以从本书的网站下载该代码，网址为 *[https://nostarch.com/real-world-python/](https://nostarch.com/real-world-python/)*。'
- en: The turtle module ships with Python, so you don’t have to install anything.
    For an overview of the module, see “Using the turtle Module” on [page 127](ch06.xhtml#page_127).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing turtle, Setting Up the Screen, and Drawing the Island**'
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[Listing 12-1](ch12.xhtml#ch012list1) imports turtle, sets up a screen object
    to use as a pond, and draws a mud island for Yertle to survey his domain.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 12-1: Importing the turtle module and drawing a pond and mud island'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: After importing the turtle module, assign a screen object to a variable named
    pond. Use the turtle setup() method to set the screen size, in pixels, and then
    color the background light blue. You can find tables of turtle colors and their
    names on multiple sites, such as *[https://trinket.io/docs/colors](https://trinket.io/docs/colors)*.
    Finish the pond by providing a title for the screen.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Next, make a circular mud island for Yertle to sunbathe on. Use the Turtle()
    class to instantiate a turtle object named mud. Although turtle comes with a method
    for drawing circles, it’s easier here to just pass the constructor the 'circle'
    argument, which produces a circular turtle object. This circle shape is too small
    to make much of an island, however, so use the shapesize() method to stretch it
    out. Finish the island by setting its outline and fill colors to tan.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawing the Log, a Knothole, and Yertle**'
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[Listing 12-2](ch12.xhtml#ch012list2) completes the program by drawing the
    log, complete with knothole and Yertle the turtle. It then moves Yertle so that
    he can leave his island to check out the log.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 12-2: Drawing a log and a turtle and then moving the turtle around'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: You’ll draw a rectangle to represent the log, so start by assigning two constants,
    SIDE and ANGLE. The first represents the length of the log, in pixels; the second
    is the angle, in degrees, by which you’ll turn the turtle at each corner of the
    rectangle.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: By default, all turtles initially appear at the center of the screen, at coordinates
    (0, 0). Since you’ll place your log off to the side, after you instantiate the
    log object, use the hideturtle() method to make it invisible. This way, you don’t
    have to watch it fly across the screen to get to its final position.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Color the log brown, using peru for the log color. Then set the object’s speed
    to the fastest setting (oddly, 0). This way, you won’t have to watch it slowly
    draw on the screen. And so you don’t see the path it takes from the screen’s center
    to its edge, pick up the drawing pen using the penup() method ➊.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Use the setpos() method—for *set position*—to place the log near the right edge
    of the screen. Then turn the object left by 45 degrees and call the begin_fill()
    method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: You can save a few lines of code by drawing the rectangle using a for loop ➋.
    You’ll loop twice, drawing two sides of the rectangle with each loop. Make the
    log’s width 20 pixels by dividing SIDE by 4. After the loop, call end_fill() to
    color the log brown.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Give the log some character by adding a knothole, represented by a knot turtle.
    To draw the knothole, call the circle() method and pass it 5, for a radius of
    five pixels. Note that you don’t need to specify a fill color as black is the
    default.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加一个树节孔（由一个树节乌龟表示）给木桩增添一些特色。要画出树节孔，调用circle()方法并传入5，表示半径为五个像素。注意，你不需要指定填充颜色，因为默认就是黑色。
- en: Finally, end the program by drawing Yertle, the king of all he surveys. Yertle
    is an old turtle, so set his drawing speed to the slowest setting of 1. Have him
    swim out and inspect the log and then turn around and swim back. Yertle is a touch
    senile, and he forgets what he just did. So, have him swim back out—only this
    time, angle his course so that he’s no longer swimming due east ➌. Run the program,
    and you should get the results shown in [Figure 12-1](ch12.xhtml#ch012fig1).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过画出耶尔特尔，所有他所观察的事物的国王，来结束程序。耶尔特尔是一只老乌龟，所以把他的绘图速度设置为最慢的1。让他游出去检查木桩，然后转身游回来。耶尔特尔有点健忘，他忘记了自己刚才做的事情。所以，让他再游出去——不过这次，改变他的游动方向，使他不再朝正东游去
    ➌。运行程序，你应该看到[图12-1](ch12.xhtml#ch012fig1)中所示的结果。
- en: Look carefully at this figure. Despite the simplicity of the simulation, it
    contains powerful insights into whether we, like Yertle, dwell in a computer simulation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看看这个图形。尽管这个模拟很简单，但它包含了关于我们是否像耶尔特尔一样，生活在一个计算机模拟中的强大洞察。
- en: '![Image](../images/fig12_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig12_01.jpg)'
- en: 'Figure 12-1: Screenshot of completed simulation'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-1：已完成模拟的截图
- en: '***Implications of the Pond Simulation***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***池塘模拟的含义***'
- en: Because of finite computational resources, all computer simulations require
    a framework of some type on which to “hang” their model of reality. Whether it’s
    called a grid, a lattice, a mesh, a matrix, or whatever, it provides a way to
    both distribute objects in 2D or 3D space and assign them a property, such as
    mass, temperature, color, or something else.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于计算资源有限，所有计算机模拟都需要某种框架来“悬挂”其现实模型。无论它被称为网格、晶格、网状结构、矩阵或其他什么，它提供了一种方法，可以在二维或三维空间中分布物体，并赋予它们某些属性，比如质量、温度、颜色或其他东西。
- en: The turtle module uses the pixels in your monitor as its coordinate system,
    as well as to store properties. The pixel locations define the shapes, such as
    the log’s outline, and the pixel color property helps differentiate one shape
    from another.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 乌龟模块使用你显示器中的像素作为其坐标系统，同时用于存储属性。像素位置定义了形状，例如木桩的轮廓，像素的颜色属性帮助区分不同的形状。
- en: 'Pixels form an *orthogonal* pattern, which means the rows and columns of pixels
    intersect at right angles. Although individual pixels are square and too small
    to easily see, you can use the turtle module’s dot() method to generate a facsimile,
    as in the following snippet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 像素形成了一个*正交*图案，意味着像素的行和列在直角处交叉。尽管单个像素是方形的，且太小无法轻易看见，但你可以使用乌龟模块的dot()方法生成一个类似的图案，如下代码片段所示：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This produces the pattern in [Figure 12-2](ch12.xhtml#ch012fig2).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成[图12-2](ch12.xhtml#ch012fig2)中的图案。
- en: '![Image](../images/fig12_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig12_02.jpg)'
- en: 'Figure 12-2: Orthogonal grid of black dots representing the centers of square
    pixels'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-2：代表方形像素中心的正交网格的黑色点
- en: 'In the turtle world, pixels are true atoms: indivisible. A line can’t be shorter
    than one pixel. Movement can occur only as integers of pixels (though you can
    input float values without raising an error). The smallest object possible is
    one pixel in size.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在乌龟世界中，像素是真正的原子：不可分割。一条线不能比一个像素短。移动只能按像素的整数进行（虽然你可以输入浮动值而不报错）。最小的物体就是一个像素大小。
- en: An implication of this is that the simulation’s grid determines the smallest
    feature you can observe. Since we can observe incredibly small subatomic particles,
    our grid, assuming we’re a simulation, must be incredibly fine. This leads many
    scientists to seriously doubt the simulation conjecture, since it would require
    a staggering amount of computer memory. Still, who knows what our distant descendants,
    or aliens, are capable of?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，模拟中的网格决定了你能观察到的最小特征。由于我们能够观察到极其微小的亚原子粒子，假设我们是一个模拟，那么我们的网格必须非常细密。这让许多科学家严肃怀疑模拟假设，因为这将需要惊人的计算机内存。然而，谁知道我们的远方后代，或外星人，能做什么呢？
- en: Besides setting a limit on the size of objects, a simulation grid might force
    a preferred orientation, or *anisotropy*, on the fabric of the cosmos. Anisotropy
    is the directional dependence of a material, such as the way wood splits more
    easily along its grain rather than across it. If you look closely at Yertle’s
    paths in the turtle simulation ([Figure 12-3](ch12.xhtml#ch012fig3)), you can
    see evidence of anisotropy. His upper, slightly angled path zigzags, while the
    lower, east-west path is perfectly straight.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了限制物体的大小外，仿真网格可能会在宇宙的结构上强制施加一个优先方向，或称为*各向异性*。各向异性是指材料的方向性依赖性，比如木材沿着木纹方向比横向更容易劈开。如果你仔细观察在海龟仿真中Yertle的路径（[图
    12-3](ch12.xhtml#ch012fig3)），你会看到各向异性的证据。他的上方路径略微倾斜并且呈之字形，而下方的东西向路径则完全是直线。
- en: '![Image](../images/fig12_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig12_03.jpg)'
- en: 'Figure 12-3: The angled versus straight path'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-3：角度路径与直线路径
- en: Drawing a nonorthogonal line on an orthogonal grid isn’t pretty. But there’s
    more involved than just aesthetics. Moving along the *x* or *y* direction requires
    only integer addition or subtraction ([Figure 12-4](ch12.xhtml#ch012fig4), left).
    Moving at an angle requires trigonometry to calculate the partial movement in
    the *x* and *y* directions ([Figure 12-4](ch12.xhtml#ch012fig4), right).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在正交网格上绘制非正交线并不美观。但这不仅仅是审美问题。沿* x *或* y *方向移动仅需要整数的加法或减法（[图 12-4](ch12.xhtml#ch012fig4)，左）。而沿角度移动则需要三角学来计算*
    x *和* y *方向的分量运动（[图 12-4](ch12.xhtml#ch012fig4)，右）。
- en: For a computer, mathematical calculations equal work, so we can surmise that
    moving at an angle takes more energy. By timing the two calculations in [Figure
    12-4](ch12.xhtml#ch012fig4), we can get a relative measure of this difference
    in energy.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计算机来说，数学运算等同于工作，因此我们可以推测，在一个角度上移动需要更多的能量。通过在[图 12-4](ch12.xhtml#ch012fig4)中计时这两种计算方式，我们可以得到能量差异的相对衡量。
- en: '![Image](../images/fig12_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig12_04.jpg)'
- en: 'Figure 12-4: Movement along rows or columns (left) requires simpler arithmetic
    than moving across them (right)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-4：沿行或列的移动（左）需要比跨越行列（右）更简单的算术运算
- en: '***Measuring the Cost of Crossing the Lattice***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***测量穿越网格的代价***'
- en: To time the difference between drawing a line diagonally across a pixel grid
    and drawing the line along it, you need to draw two lines of equal length. But
    remember, turtle works only with integers. You need to find an angle for which
    all sides of a triangle—the opposite, adjacent, and hypotenuse in [Figure 12-4](ch12.xhtml#ch012fig4)—are
    integers. This way, you’ll know that your angled line is the same length as your
    straight line.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算沿对角线绘制线条与沿水平线绘制线条之间的时间差，你需要绘制两条等长的线。但是记住，海龟只能处理整数。你需要找到一个角度，使得三角形的所有边——[图
    12-4](ch12.xhtml#ch012fig4)中的对边、邻边和斜边——都是整数。这样，你就可以确保你的斜线与直线长度相同。
- en: To find these angles, you can use a *Pythagorean triple*, a set of positive
    integers *a*, *b*, and *c* that fit the right triangle rule *a*² + *b*² = *c*².
    The best-known triple is 3-4-5, but you’ll want a longer line, to ensure that
    the runtime of the drawing function isn’t less than the measurement precision
    of your computer’s clock. Fortunately, you can find other, larger triples online.
    The triplet 62-960-962 is a good choice, as it’s long but will still fit in a
    turtle screen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到这些角度，你可以使用*毕达哥拉斯三元组*，这是由一组符合直角三角形规则的正整数*a*、*b*和*c*组成的集合，其中*a*² + *b*² = *c*²。最著名的三元组是
    3-4-5，但你会希望找到一条更长的线，以确保绘制函数的运行时间不会低于计算机时钟的测量精度。幸运的是，你可以在网上找到其他更大的三元组。62-960-962
    这个三元组是一个不错的选择，因为它很长，但仍然适合海龟屏幕。
- en: '**The Line Comparison Code**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**线条比较代码**'
- en: To compare the cost of drawing a diagonal line to the cost of drawing a straight
    one, [Listing 12-3](ch12.xhtml#ch012list3) uses turtle to draw the two lines.
    The first line is parallel to the *x*-axis (that is, east-west), and the second
    line is at a shallow angle to the *x*-axis. You can figure out the correct degree
    of the angle using trigonometry; in this case, it’s 3.695220532 degrees. The listing
    draws these lines many times using a for loop and records the time it takes to
    draw each one using the built-in time module. The final comparison uses the averages
    of these runs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较绘制对角线与绘制直线的代价，[列表 12-3](ch12.xhtml#ch012list3)使用海龟绘制这两条线。第一条线平行于* x *轴（即东西方向），第二条线则以浅角度与*
    x *轴成角。你可以通过三角学计算出这个角度的正确度数；在这种情况下，它是 3.695220532 度。该代码通过for循环多次绘制这些线，并使用内置的时间模块记录绘制每条线所需的时间。最终的比较是通过这些运行的平均值得出的。
- en: You need to use averages because your central processing unit (CPU) is constantly
    running multiple processes. The operating system schedules these processes behind
    the scenes, executing one while delaying another until a resource, such as input/output,
    becomes available. Consequently, it’s difficult to record the *absolute* runtime
    of a given function. Calculating the average time of many runs compensates for
    this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: You can download the code, *line_compare.py*, from the book’s website.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 12-3: Drawing a straight line and an angled line and recording the
    runtimes for each'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Start by importing perf_counter—short for *performance counter*—from the time
    module. This function returns the float value of time in seconds. It gives you
    a more precise answer than time.clock(), which it replaces as of Python 3.8.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Next, import the statistics module to help you calculate the average of many
    simulation runs. Then import turtle and set up the turtle screen. You can customize
    the screen for your monitor, but remember, you need to be able to see a line 962
    pixels long.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Now, assign some key values for the simulation. Put the angles for a straight
    line and a diagonal line in a tuple named ANGLES and then assign a variable to
    hold the number of times to run the for loop and the speed at which to draw the
    line.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Start looping through the angles in the ANGLES tuple. Create an empty list to
    hold the time measurements ➊ before setting up a turtle object, as you’ve done
    before. Rotate the turtle object left by the angle amount and then use setpos()
    to move it to the far-left side of the screen.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Move the turtle forward by 962 pixels, sandwiching this command between calls
    to perf_counter() to time the movement ➋. Subtract the end time from the start
    time and append the result to the times list.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Finish by using the statistics.mean() function to find the average runtime for
    each line. Print the results to five decimal places. After the program runs, the
    turtle screen should look like [Figure 12-5](ch12.xhtml#ch012fig5).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig12_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-5: Completed turtle screen for line_compare.py'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Because you used a Pythagorean triple, the angled line truly ends on a pixel.
    It doesn’t just snap to the nearest pixel. Consequently, you can be confident
    that the straight and angled lines have the same length and that you’re comparing
    apples to apples when it comes to the timing measurements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '***Results***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you draw each line 500 times and then compare the results, you should see
    that it takes roughly 2.4 times as long to draw the angled line as the straight
    line.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Your times will likely differ slightly, as they’re affected by other programs
    you may have running concurrently on your computer. As noted previously, CPU scheduling
    will manage all these processes so that your system is fast, efficient, and fair.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: If you repeat the exercise for 1,000 runs, you should get similar results. (If
    you decide to do so, you’ll want to get yourself a cup of coffee and some of that
    good pie.) The angled line will take about 2.7 times as long to draw.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重复进行1000次实验，你应该会得到类似的结果。（如果你决定这么做，你可能需要泡一杯咖啡，来点好吃的派。）这条角度线的绘制时间大约是正常速度的2.7倍。
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ve been running a short function at a high drawing speed. If you’re worried
    that turtle performs optimizations to achieve speed at the expense of accuracy,
    you can slow it down and rerun the program. With the drawing speed set to normal
    (speed = 6), the angled line takes about 2.6 times as long to draw, close to the
    outcome with the fastest speed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在以高速运行一个简单的函数。如果你担心海龟（turtle）为了提高速度而牺牲精度，你可以减慢速度并重新运行程序。当绘制速度设置为正常（speed =
    6）时，角度线的绘制时间大约是最快速度的2.6倍，接近最快速度的结果。
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Clearly, moving across the pixel grid requires more work than moving along it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，穿越像素网格比沿着网格移动需要更多的工作。
- en: '***The Strategy***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***策略***'
- en: The goal of this project was to identify a way for simulated beings, perhaps
    us, to find evidence of the simulation. At this point, we know at least two things.
    First, if we’re living in a simulation, the grid is extremely small, as we can
    observe subatomic particles. Second, if these small particles cross the simulation’s
    grid at an angle, we should expect to find computational resistance that translates
    into something measurable. This resistance might look like a loss of energy, a
    scattering of particles, a reduction in velocity, or something similar.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的目标是寻找一种方法，让模拟的存在，也许是我们自己，能够找到模拟的证据。到目前为止，我们至少知道两件事。首先，如果我们生活在一个模拟中，那么网格非常小，因为我们能够观察到亚原子粒子。其次，如果这些小粒子以某个角度穿过模拟的网格，我们应该能发现计算上的阻力，这种阻力可以转化为某种可测量的现象。这个阻力可能表现为能量损失、粒子散射、速度减缓或类似的情况。
- en: In 2012, physicists Silas R. Beane, from the University of Bonn, and Zohreh
    Davoudi and Martin J. Savage, from the University of Washington, published a paper
    arguing exactly this point. According to the authors, if the laws of physics,
    which appear continuous, are superimposed on a discrete grid, the grid spacing
    might impose a limitation on physical processes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年，来自波恩大学的物理学家西拉斯·R·比恩（Silas R. Beane）和来自华盛顿大学的佐赫雷·达沃迪（Zohreh Davoudi）及马丁·J·萨维奇（Martin
    J. Savage）发表了一篇论文，正是论证了这一点。根据作者的观点，如果看似连续的物理定律被叠加到一个离散的网格上，那么网格的间距可能会对物理过程产生限制。
- en: They proposed investigating this by observing *ultra-high energy cosmic rays
    (UHECRs)*. UHECRs are the fastest particles in the universe, and they are affected
    by increasingly smaller features as they get more energetic. But there’s a limit
    to how much energy these particles can have. Known as the GZK cutoff and confirmed
    by experiments in 2007, this limit is consistent with the kind of boundary a simulation
    grid might cause. Such a boundary should also cause UHECRs to travel preferentially
    along the grid’s axes and scatter particles that try to cross it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 他们提议通过观察*超高能宇宙射线（UHECRs）*来进行调查。UHECRs是宇宙中最快的粒子，随着它们能量的增加，它们会受到越来越小的特征影响。但这些粒子能量有一个限制。这个限制被称为GZK截断，并且在2007年的实验中得到了证实，这个限制与模拟网格可能产生的边界一致。这样的边界也应该导致UHECRs沿网格轴线优先移动，并散射试图穿越网格的粒子。
- en: Not surprisingly, there are many potential obstacles to this approach. UHECRs
    are rare, and anomalous behavior might not be obvious. If the spacing of the grid
    is significantly smaller than 10^(-12) femtometers, we probably can’t detect it.
    There may not even *be* a grid, at least as we understand it, as the technology
    in use may far exceed our own. And, as the philosopher Preston Greene pointed
    out in 2019, there may be a moral obstacle to the entire project. If we live in
    a simulation, our discovery of it may trigger its end!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，这种方法存在许多潜在的障碍。极高能宇宙射线（UHECRs）非常稀有，而且异常行为可能不易察觉。如果网格的间距小于10^(-12)飞米，我们可能无法检测到它。甚至可能根本*没有*网格，至少就我们理解的方式而言，因为使用的技术可能远远超出我们的认知。而且，正如哲学家普雷斯顿·格林（Preston
    Greene）在2019年所指出的，整个项目可能会面临道德上的障碍。如果我们生活在一个模拟中，我们发现它的存在可能会触发模拟的终结！
- en: '**Summary**'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: From a coding standpoint, building Yertle’s simulated world was simple. But
    a big part of coding is solving problems, and the small amount of work you did
    had major implications. No, we didn’t make the leap to cosmic rays, but we started
    the right conversation. The basic premise that a computer simulation requires
    a grid that could imprint observable signatures on the universe is an idea that
    transcends nitty-gritty details.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从编码的角度来看，构建耶特尔的模拟世界其实很简单。但编码的一个重要部分是解决问题，你所做的少量工作却产生了重大影响。我们没有跨越到宇宙射线，但我们启动了正确的对话。计算机模拟需要一个网格来在宇宙中留下可观察的痕迹这一基本前提，超越了琐碎的细节。
- en: In the book *Harry Potter and the Deathly Hallows*, Harry asks the wizard Dumbledore,
    “Tell me one last thing. Is this real? Or has this been happening inside my head?”
    Dumbledore replies, “Of course it is happening inside your head, Harry, but why
    on Earth should that mean that it is not real?”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在《哈利·波特与死亡圣器》一书中，哈利问巫师邓布利多：“告诉我最后一件事。这是真的吗？还是这只是发生在我的脑海里？”邓布利多回答：“当然，它发生在你的脑袋里，哈利，但为什么这就意味着它不真实呢？”
- en: Even if our world isn’t located at the “fundamental level of reality,” as Nick
    Bostrom postulates, you can still take pleasure in your ability to solve problems
    such as this. As Descartes might’ve said, had he lived today, “I code, therefore
    I am.” Onward!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 即便我们的世界不像尼克·博斯特罗姆所假设的那样位于“现实的基本层面”，你仍然可以从解决此类问题的能力中获得乐趣。正如笛卡尔如果今天活着可能会说的：“我编码，因此我存在。”继续前进！
- en: '**Further Reading**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: “Are We Living in a Simulated Universe? Here’s What Scientists Say” (NBC News,
    2019), by Dan Falk, provides an overview of the simulation hypothesis.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “我们生活在一个模拟的宇宙中吗？科学家怎么说”（NBC新闻，2019），作者：丹·福克，文章概述了模拟假说。
- en: “Neil deGrasse Tyson Says ‘It’s Very Likely’ the Universe Is a Simulation” (ExtremeTech,
    2016), by Graham Templeton, is an article with an embedded video of the Isaac
    Asimov Memorial Debate, hosted by astrophysicist Neil deGrasse Tyson, that addresses
    the possibility that we’re living in a simulation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “尼尔·德格拉斯·泰森表示‘宇宙很可能是一个模拟’”（ExtremeTech, 2016），作者：格雷厄姆·坦普尔顿，文章中嵌入了由天体物理学家尼尔·德格拉斯·泰森主持的艾萨克·阿西莫夫纪念辩论会的视频，探讨了我们是否生活在模拟中的可能性。
- en: “Are We Living in a Computer Simulation? Let’s Not Find Out” (*New York Times*,
    2019), by Preston Greene, presents a philosophical argument against investigating
    the simulation hypothesis.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “我们生活在计算机模拟中吗？我们不必揭晓真相”（*纽约时报*，2019），作者：普雷斯顿·格林，文章提出了反对研究模拟假说的哲学论点。
- en: “We Are Not Living in a Simulation. Probably.” (Fast Company, 2018), by Glenn
    McDonald, argues that the universe is too big and too detailed to be simulated
    computationally.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “我们并没有生活在一个模拟中。可能是吧。”（Fast Company, 2018），作者：格伦·麦克唐纳，文章论证了宇宙太庞大且细节太复杂，无法通过计算机进行模拟。
- en: '**Moving On**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**继续前进**'
- en: There’s never enough time in life to do all the things we want, and that goes
    double for writing a book. The challenge projects that follow represent the ghosts
    of chapters not yet written. There was no time to finish these (or in some cases,
    even start them), but you might have better luck. As always, the book provides
    no solutions for challenge projects—not that you’ll need them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 生活中永远没有足够的时间去做我们想做的所有事情，而写书更是如此。接下来的挑战项目代表了那些尚未写就的章节的幽灵。没有时间完成这些（或者在某些情况下，甚至没有时间开始），但也许你会有更好的运气。和往常一样，本书并没有为挑战项目提供解决方案——毕竟，你可能不需要它们。
- en: This is the real world, baby, and you’re ready for it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是现实世界，宝贝，你已经准备好迎接它了。
- en: '**Challenge Project: Finding a Safe Space**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**挑战项目：寻找一个安全空间**'
- en: The award-winning 1970 novel *Ringworld* introduced the world to the Pierson’s
    puppeteer, a sentient and highly advanced alien herbivore. Being herd animals,
    puppeteers were extremely cowardly and cautious. When they realized that the core
    of the Milky Way had exploded and the radiation would reach them in 20,000 years,
    they started fleeing the galaxy immediately!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这部获得奖项的1970年小说《环世界》向世人介绍了皮尔森的操纵者，一种有感知能力且高度进化的外星草食性生物。作为群居动物，操纵者极其胆小和谨慎。当它们意识到银河系的核心已经爆炸，辐射将在20,000年后到达它们时，它们立即开始逃离银河！
- en: In this project, you’re part of a 29th-century diplomatic team assigned to the
    puppeteer ambassador. Your job is to select a state, within the conterminous United
    States, that they’ll find suitably safe for the puppeteer embassy. You’ll need
    to screen each state for natural hazards, such as earthquakes, volcanoes, tornadoes,
    and hurricanes, and present the ambassador with a map summarizing the results.
    Don’t worry that the data you’ll use is hundreds of years out-of-date; just pretend
    it’s current to the year 2850 CE.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: You can find earthquake data at *[https://earthquake.usgs.gov/earthquakes/feed/v1.0/csv.php/](https://earthquake.usgs.gov/earthquakes/feed/v1.0/csv.php/)*.
    Use dots to plot the epicenters of those quakes that are 6.0 or greater in magnitude.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: You can post the tornado data as the average number per year per state (see
    *[https://www.ncdc.noaa.gov/climate-information/extreme-events/us-tornado-climatology](https://www.ncdc.noaa.gov/climate-information/extreme-events/us-tornado-climatology)*).
    Use a choropleth format like you did in [Chapter 11](ch11.xhtml).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: You can find a listing of dangerous volcanoes in Table 2 of the 2018 Update
    to the U.S. Geological Survey National Volcanic Threat Assessment (*[https://pubs.usgs.gov/sir/2018/5140/sir20185140.pdf](https://pubs.usgs.gov/sir/2018/5140/sir20185140.pdf)*).
    Represent these as dots on the map, but assign them a different color or shape
    than the earthquake data. Also, ignore the ashfall from Yellowstone. Assume the
    experts monitoring this supervolcano can predict an eruption soon enough for the
    ambassador to safely flee the planet.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: To find hurricane tracks, visit the National Oceanic and Atmospheric Administration
    site (*[https://coast.noaa.gov/digitalcoast/data/](https://coast.noaa.gov/digitalcoast/data/)*)
    and search for “Historical Hurricane Tracks.” Download and post the Category 4
    and higher storm segments on the map.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Try to think like a puppeteer and use the final composite map to choose a candidate
    state for the embassy. You might have to ignore a tornado or two. America is a
    dangerous place!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: Here Comes the Sun**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 2018, 13-year-old Georgia Hutchinson from Woodside, California, won $25,000
    at the Broadcom Masters nationwide science, technology, engineering, and mathematics
    (STEM) competition for middle-school students. Her entry, “Designing a Data-Driven
    Dual-Axis Solar Tracker,” will make solar panels cheaper and more efficient by
    eliminating the need for costly light sensors.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: This new sun tracker is based on the premise that we already know the location
    of the sun at any moment from any given point on Earth. It uses public data from
    the National Oceanic and Atmospheric Administration to continuously determine
    the sun’s position and tilt the solar panels for maximum power production.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that calculates the sun’s position based on a location
    of your choosing. To get started, check out the Wikipedia page “Position of the
    Sun” (*[https://en.wikipedia.org/wiki/Position_of_the_Sun](https://en.wikipedia.org/wiki/Position_of_the_Sun)*).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: Seeing Through a Dog’s Eyes**'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use your knowledge of computer vision to write a Python program that takes an
    image and simulates what a dog would see. To get started, check out *[https://www.akc.org/expert-advice/health/are-dogs-color-blind/](https://www.akc.org/expert-advice/health/are-dogs-color-blind/)*
    and *[https://dog-vision.andraspeter.com/](https://dog-vision.andraspeter.com/)*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: Customized Word Search**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boy, does your Granny love doing word searches! For her birthday, use Python
    to design and print her customized word searches using family names, vintage TV
    shows like *Matlock* and *Columbo*, or the common names of her prescription drugs.
    Allow the words to print horizontally, vertically, and diagonally.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: Simplifying a Celebration Slideshow**'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your spouse, sibling, parent, best friend, or whoever is having a celebration
    dinner, and you’re in charge of the slideshow. You have tons of pictures in the
    cloud, many featuring the honoree, but the filenames just list the date and time
    at which they were taken, providing no clue as to the contents. It looks like
    you’ll spend your Saturday sifting through them all.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: But wait, didn’t you learn about face recognition in that book *Real-WorldPython*?
    All you really need to do is find a few training images and do a bit of coding.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: First, pick someone in your personal digital photo collection to represent the
    guest of honor. Next, write a Python program that searches through your folders,
    finds photos containing this person, and copies the photos into a special folder
    for your review. When training, be sure to include face profiles as well as frontal
    views, and include a profile Haar cascade when detecting faces.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: What a Tangled Web We Weave**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use Python and the turtle module to simulate a spider building a web. For some
    guidance on web construction, see *[https://www.brisbaneinsects.com/brisbane_weavers/index.htm](https://www.brisbaneinsects.com/brisbane_weavers/index.htm)*
    and *[http://recursiveprocess.com/mathprojects/index.php/2015/06/09/spider-webs-creepy-or-cool/](http://recursiveprocess.com/mathprojects/index.php/2015/06/09/spider-webs-creepy-or-cool/)*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge Project: Go Tell It on the Mountain**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “What’s the closest mountain to Houston, Texas?” This seemingly straightforward
    question, asked on Quora, isn’t easy to answer. For one thing, you need to consider
    mountains in Mexico, as well as those in the United States. For another, there’s
    no universally accepted definition of a mountain.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: To make this somewhat easier, use one of the UN Environmental Program’s definitions
    of *mountainous terrain*. Find prominences with an elevation of at least 2,500
    m (8,200 feet) and consider them mountains. Calculate their distance from the
    center of Houston to find the closest.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这稍微容易一些，可以使用联合国环境规划署对*山区地形*的定义。找到海拔至少为2,500米（8,200英尺）的高地，并将其视为山脉。计算它们到休斯顿市中心的距离，以找到最近的山脉。
