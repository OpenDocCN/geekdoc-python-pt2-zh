- en: B
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python’s Built-in Functions
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Python has a well-stocked box of programming tools, including a large number
    of functions and modules that are ready-made for you to use. These built-in tools
    can make writing programs a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you read in [Chapter 7](ch07.xhtml#ch07), modules need to be imported before
    they can be used. Python’s *built-in functions* don’t need to be imported first;
    they’re available as soon as the Python Shell starts. In this appendix, we’ll
    look at some of the more useful built-in functions, and then focus on one: the
    open function, which lets you open files to read and write from them.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Built-in Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s look at some of the built-in functions that are commonly used by Python
    programmers. I’ll describe what they do and how to use them, and then show examples
    of how they can help in your programs.
  prefs: []
  type: TYPE_NORMAL
- en: The abs Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The abs function returns the *absolute value* of a number, which is the value
    of a number without its sign. For example, the absolute value of 10 is 10, and
    the absolute value of –10 is 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the abs function, simply call it with a number or variable as its parameter,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You might use the abs function to calculate an absolute amount of movement of
    a character in a game, no matter in which the direction that character is traveling.
    For example, say the character takes 3 steps to their left (negative 3 or –3)
    and then 10 steps to their right (positive 10).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we didn’t care about the direction (positive or negative), the absolute
    value of these numbers would be 3 and 10\. You might use this in a board game
    where you roll two dice and then move your character a maximum number of steps
    in any direction, based on the total of the dice. Now, if we store the number
    of steps in a variable, we can determine if the character is moving with the following
    code. We might want to display some information when the player has decided to
    move (in this case, we’ll display “Character is moving far” or “Character is moving,”
    depending on the number):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0300-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we hadn’t used abs, the if statement might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, using abs made the if statement a little shorter and easier
    to understand.
  prefs: []
  type: TYPE_NORMAL
- en: The all Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The all function returns True if all items in a list (or any other sort of collection)
    evaluate to True. Put most simply, this means that all the values of the items
    in the list are not 0, None, an empty string (’’’’) or the Boolean value False.
  prefs: []
  type: TYPE_NORMAL
- en: 'So if all the items in the list are nonzero numbers, all will return True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But if any of the values are 0, it will return False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Not just numbers—a mixed list of values that includes None will also return
    False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s try that same example again if None is removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The any Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The any function is similar to all, except that if any of the values evaluate
    to True, it will return True. Let’s try the same example with the numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our mixed list of zeros, None, empty strings, and False also works the same
    as all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'But if we make a minor change to that list—such as adding a nonzero number
    like 100—we then get True instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The bin Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The bin function converts a number into its *binary representation*. Binary
    is beyond the scope of this book, but, in short, it’s a numbering system made
    up of 1s and 0s and is the basis for pretty much everything in computing. Here’s
    a simple example, converting some numbers into binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The bool Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The name bool is short for *Boolean*, the word programmers use to describe
    a type of data that can have one of two possible values: typically, True or False.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The bool function takes a single parameter and returns either True or False
    based on its value. When using bool for numbers, 0 returns False but any other
    number returns True. Here’s how you might use bool with various numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When you use bool for other values, like strings, it returns False if there’s
    no value for the string (in other words, the None keyword or an empty string).
    Otherwise, it will return True, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The bool function will also return False for lists, tuples, and maps that do
    not contain any values, or True when they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You might use bool when you need to decide whether a value has been set or
    not. For example, if we ask people using our program to enter the year they were
    born, our if statement could use bool to test the value they enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first line of this example uses input to store what someone enters on the
    keyboard as the variable year. Pressing ENTER on the next line (without typing
    anything else) results in an empty string in the variable. (We also used sys.stdin.readline()
    in [Chapter 7](ch07.xhtml#ch07), which is another way to do the same thing.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0304-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the following line, the if statement checks the Boolean value of the variable.
    Because the user didn’t enter anything in this example, the bool function returns
    False. The if statement uses the not keyword, which is a way of saying, “Do this
    if the function does not return True,” and so the code prints You need to enter
    a value for your year of birth on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: The callable Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The callable function simply tells you if something is a function (in other
    words, can it be called?). The following code returns False . . .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: . . . because the string ’peas’ is not a function. But the following code returns
    True . . .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '. . . because bin is a function. The following code will also return True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The People class has a single function run. If we check whether the class function
    is callable (it is), we get True. Also, if we create an object of the class, and
    then check whether the object function (p.run) is callable, again we get True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The chr Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Every character you type in Python has an underlying numeric code identifying
    it. The character ’a’ for example, has the numeric value 97\. A capital ’A’ has
    the numeric value 65\. The chr function takes a numeric parameter and returns
    the character. So we can try the values 97 and 65:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can try some more random numbers, like 22283, which is a character in the
    Chinese character set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Or 949, which is the Greek character *epsilon*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Or 8595, which isn’t a character at all—it’s a downward-pointing arrow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The dir Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The dir function (short for *directory*) returns information about any value.
    Basically, it tells you the functions that can be used with that value in alphabetical
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to display the functions that are available for a list value,
    enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The dir function works on pretty much anything, including strings, numbers,
    functions, modules, objects, and classes. But sometimes the information it returns
    may not be very useful. For example, if you call dir on the number 1, it displays
    a number of special functions (those that start and end with underscores) used
    by Python itself, which isn’t really useful (you can usually ignore most of them):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The dir function can be useful when you have a variable and want to quickly
    find out what you can do with it. For example, run dir using the variable popcorn
    containing a string value, and you get the list of functions provided by the string
    class (all strings are members of the string class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, you could use help to get a short description of any function
    in the list. Here’s an example of running help for the upper function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The information returned can be a little confusing, so let’s take a closer look.
    The first line tells you that upper is a built-in function of an instance (object)
    of a string. And the second line tells you exactly what it does (returns a copy
    of the string in uppercase).
  prefs: []
  type: TYPE_NORMAL
- en: The divmod Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The helper function divmod takes two parameters (two numbers representing a
    dividend and divisor) and then returns the result of dividing the two numbers,
    along with the result of performing the modulo operation on the two numbers. Division
    is the mathematical operation of calculating how many times one number can be
    divided into parts of a second number. For example, how many times can we divide
    a set of six balls into sets of two balls?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0308-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The answer: we can divide it three times.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0308-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The modulo operation is almost the same thing, except modulo returns the number
    left over after we do the division. So the result of modulo for the six balls
    divided by two above is zero (because there’s nothing left over). What if we add
    one more ball? If we divide seven balls into sets of two, the result of the division
    is still three, but one ball will be left over.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0308-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And that’s what divmod will return as a tuple of two numbers: the result of
    the division and the result of the modulo operation. Let’s try with 6 and 2 first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And then with 7 and 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The eval Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The eval function (short for *evaluate*) takes a string as a parameter and runs
    it as though it were a Python expression. For example, eval(’print(’’wow’’)’)
    will actually run the statement print(’’wow’’).
  prefs: []
  type: TYPE_NORMAL
- en: 'The eval function works only with simple expressions, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Expressions that are split over more than one line (such as if statements)
    generally won’t evaluate, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The eval function is often used to turn user input into Python expressions.
    For example, you could write a simple calculator program that reads equations
    entered into Python and then calculates (evaluates) the answers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0309-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Because user input is read as a string, Python needs to convert it into numbers
    and operators before doing any calculations. The eval function makes that conversion
    easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use the input function to read what the user enters into
    the your_calculation variable. On the next line, we enter the expression 12*52.
    We use eval to run this calculation, and the result is printed on the final line.
  prefs: []
  type: TYPE_NORMAL
- en: The exec Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The exec function is like eval, except you can use it to run more complicated
    programs. While eval returns a value (something you can save in a variable), exec
    does not. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the first two lines, we create a variable with a multiline string containing
    two print statements, and then use exec to run the string.
  prefs: []
  type: TYPE_NORMAL
- en: You can use exec to run mini programs your Python program reads in from files—programs
    inside programs! This can be quite useful when writing long, complex applications.
    For example, you could create a *Dueling Robots* game, where two robots move around
    a screen and try to attack each other. Players of the game would provide the instructions
    for their robot as mini Python programs. The *Dueling Robots* game would read
    in these scripts and use exec to run.
  prefs: []
  type: TYPE_NORMAL
- en: The float Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The float function converts a string or a number into a *floating-point* number,
    which is a number with a decimal place (also called a *real number* or *float*).
    For example, the number 10 is an integer (also called a *whole number*), but 10.0,
    10.1, and 10.253 are all floating-point numbers. You might use floating point
    numbers if you’re writing a simple program to calculate monetary amounts. Floats
    are also used in graphics programs (like 3D games) to calculate how and where
    to draw things on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0311-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can convert a string to a float simply by calling float:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use a decimal place in a string as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You might use float to convert values entered into your program into proper
    numbers, which is particularly useful when you need to compare the value a person
    enters with other values. For example, to check whether a person’s age is above
    a certain number, we could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The input Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The input function is used to read text entered by the person who’s using your
    program—everything they type until they hit the ENTER key. The results are returned
    in a string for you to use. You can prompt the user of your program to enter something,
    with a message like this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Or with no message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In either case, the result of the input function is the same: a string containing
    the text. See the previous section on the float function for more examples of
    using the return value.'
  prefs: []
  type: TYPE_NORMAL
- en: The int Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The int function converts a string or a number into a whole number (or *integer*),
    which basically means that everything after the decimal point is dropped. For
    example, here’s how to convert a floating-point number into a plain integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This example converts a string to an integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'But try to convert a string containing a floating-point number into an integer,
    and you get an error message. For example, here we try to convert a string containing
    a floating-point number using the int function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the result is a ValueError message.
  prefs: []
  type: TYPE_NORMAL
- en: The len Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Image](Images/f0313-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The len function returns the length of an object or, in the case of a string,
    the number of characters in the string. For example, to get the length of ’this
    is a test string’, you’d do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When used with a list or a tuple, len returns the number of items in that list
    or tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Used with a dict (or *dictionary*), len also returns the number of items in
    the dict:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The len function is particularly useful when you’re working with loops. For
    example, we could use it to display the index positions of the elements in a list
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: First, we store the length of the list in the variable length, and then use
    that variable in the range function to create our loop. As we loop through each
    item in the list, we print a message showing the item’s index position and value.
    You could also use the len function, if you had a list of strings and wanted to
    print every second or third item in the list.
  prefs: []
  type: TYPE_NORMAL
- en: The list Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you call list without any parameters, you’ll get an empty list object in
    response. There’s no difference between list() and using square brackets at that
    point. We can check if this is actually the case by testing if the two lists are
    equal (==):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'While this might not seem particularly useful, list can also be used to convert
    certain types of Python objects (called *iterables*) into a list. The simplest
    example of this would be to use the range function (this function is described
    on [page 317](app02.xhtml#app02lev1sec21)) with list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The max and min Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The max function returns the largest item in a list, tuple, or string. For
    example, here’s how to use it with a list of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do exactly the same thing with a string, or a list of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0315-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Letters are ranked alphabetically, but lowercase letters come after uppercase
    letters, so t is more than T. But you don’t have to use lists, tuples, or strings.
    You can also call the max function directly, and enter the items that you want
    to compare into the parentheses as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The min function works like max, except it returns the smallest item in the
    list, tuple, or string. Here’s our list of numbers example using min instead of
    max:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose you’re playing a guessing game with a team of four players, and each
    has to guess a number that is less than your number. If any player guesses above
    your number, all players lose, but if they all guess lower, they win. We could
    use max to quickly find whether any of the guesses are higher, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we store the number to guess using the variable guess_this_number.
    The team members’ guesses are stored in the list player_guesses. The if statement
    checks the maximum guess against the number in guess_this_number, and if any player
    guesses over the number, we print the message “Boom! You all lose.”
  prefs: []
  type: TYPE_NORMAL
- en: The ord Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ord function is basically the reverse of the chr function: whereas chr
    converts a number to a character, ord tells you what the number code is for a
    character. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The pow Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The pow function takes two numbers and calculates the value of one number (let’s
    call this x) to the power of the other number (let’s call this y). Essentially,
    pow will multiply x by itself y times. For example, 2 to the power of 3 (in mathematics
    terms this is 2³) would be 2 * 2 * 2 (or in mathematical notation, 2 × 2 × 2),
    which is 8 (2 * 2 is 4, 4 * 2 is 8). Another example: 3 to the power of 3 (3³)
    is 27\. Let’s see how this looks in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The range Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The range function is mainly used in for loops to loop through a section of
    code a specific number of times. The first two parameters given to range are called
    the *start* and the *stop*. You’ve seen range with these two parameters in the
    earlier example using the len function to work with a loop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0317-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The numbers that range generates begin with the number given as the first parameter
    and end with the number that’s one less than the second parameter. For example,
    the following shows what happens when we print the numbers that range creates
    between 0 and 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The range function actually returns a special object called an *iterator* that
    repeats an action a number of times. In this case, it returns the next highest
    number each time it is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can convert the iterator into a list by using the list function. If you
    then print the returned value when calling range, you’ll see the numbers it contains
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add a third parameter to range, called step. If the step value
    is not included, the number 1 is used as the step by default. But what happens
    when we pass in the number 2 as the step? Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Each number in the list increases by two from the previous number, and the
    list ends with the number 28, which is 2 less than 30\. You can also use negative
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The sum Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sum function adds up items in a list and returns the total. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: On the first line, we create a list of numbers between 0 and 500, using range
    with a step of 50\. Next, we print the list to see the result. Lastly, passing
    the variable my_list_of_numbers to the sum function with print(sum(my_list_of_numbers))
    adds all the items in the list, giving the total of 2250.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a File in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python’s built-in open function opens a file, so you can do something useful
    with it (like display the contents). How you tell the function which file to open
    depends on your operating system. Read over the example for a Windows file, and
    then read the Mac or Ubuntu-specific section if you’re using one of those systems.
    First create a plaintext file in your home folder called *test.txt*—on Windows,
    you can use Notepad; on Ubuntu Linux or Raspberry Pi, use TextEditor; on macOS,
    use TextEdit (but in TextEdit, you will need to select **Format** ▸ **Make Plain
    Text**). You can put whatever you like in the file.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a Windows File
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you’re using Windows, enter the following code to open *test.txt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: On the first line, we use open, which returns a file object with functions for
    working with files. The parameter we use with the open function is a string telling
    Python where to find the file. If you’re using Windows, you saved *test.txt* to
    your user folder on the *C:* drive, so you specify the location of your file as
    c:\Users\<your username>\test.txt. (Don’t forget to replace <your username> with
    your actual username!)
  prefs: []
  type: TYPE_NORMAL
- en: The two backslashes in the Windows filename tell Python that the backslash is
    just that, and not some sort of command. (As you read in [Chapter 3](ch03.xhtml#ch03),
    backslashes on their own have a special meaning in Python, particularly in strings.)
    We save the file object to the test_file variable.
  prefs: []
  type: TYPE_NORMAL
- en: On the second line, we use the read function, provided by the file object, to
    read the contents of the file and store it in the text variable. We print the
    variable on the final line to display the contents of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a macOS File
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you are using macOS, you’ll need to enter a different location on the first
    line of the Windows example to open *test.txt*. Use the username you clicked when
    saving the text file in the string. For example, if the username is *sarahwinters*,
    the open parameter should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Opening an Ubuntu or Raspberry Pi File
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you are using Ubuntu Linux or Raspberry Pi, you’ll need to enter a different
    location on the first line of the Windows example to open *test.txt*. Use the
    username you clicked when saving the text file. For example, if the username is
    *jacob*, the open parameter should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Writing to Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The file object returned by open has other functions besides read. We can create
    a new, empty file by using a second parameter—the string ’w’—when we call open
    (this parameter tells Python that we want to write to the file object, rather
    than read from it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now add information to this new file using the write function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to tell Python when we’re finished writing to the file, using
    the close function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you open the file with your text editor, you should see that it contains
    the text “What is green and loud? A froghorn!” Or, you can use Python to read
    it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0321-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
