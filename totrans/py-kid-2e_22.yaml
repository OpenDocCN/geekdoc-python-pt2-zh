- en: B
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B
- en: Python’s Built-in Functions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python的内建函数
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: Python has a well-stocked box of programming tools, including a large number
    of functions and modules that are ready-made for you to use. These built-in tools
    can make writing programs a lot easier.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python拥有丰富的编程工具箱，包括大量现成的函数和模块，供你使用。这些内建工具可以让编写程序变得更加轻松。
- en: 'As you read in [Chapter 7](ch07.xhtml#ch07), modules need to be imported before
    they can be used. Python’s *built-in functions* don’t need to be imported first;
    they’re available as soon as the Python Shell starts. In this appendix, we’ll
    look at some of the more useful built-in functions, and then focus on one: the
    open function, which lets you open files to read and write from them.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第7章](ch07.xhtml#ch07)中看到的，模块需要先导入才能使用。Python的*内建函数*无需先导入；它们在Python Shell启动时就已经可以使用了。在本附录中，我们将查看一些有用的内建函数，并重点介绍其中一个：open
    函数，它允许你打开文件进行读写。
- en: Using Built-in Functions
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用内建函数
- en: Let’s look at some of the built-in functions that are commonly used by Python
    programmers. I’ll describe what they do and how to use them, and then show examples
    of how they can help in your programs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些Python程序员常用的内建函数。我将描述它们的功能和用法，然后展示它们如何在你的程序中发挥作用。
- en: The abs Function
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: abs 函数
- en: The abs function returns the *absolute value* of a number, which is the value
    of a number without its sign. For example, the absolute value of 10 is 10, and
    the absolute value of –10 is 10.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: abs 函数返回一个数字的*绝对值*，即数字的值去掉符号后的结果。例如，10的绝对值是10，–10的绝对值也是10。
- en: 'To use the abs function, simply call it with a number or variable as its parameter,
    like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 abs 函数，只需调用它并将一个数字或变量作为参数，像这样：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You might use the abs function to calculate an absolute amount of movement of
    a character in a game, no matter in which the direction that character is traveling.
    For example, say the character takes 3 steps to their left (negative 3 or –3)
    and then 10 steps to their right (positive 10).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会使用 abs 函数来计算游戏中角色的移动的绝对值，不管角色是向哪个方向移动。例如，假设角色向左走了3步（负3或–3），然后向右走了10步（正10）。
- en: 'If we didn’t care about the direction (positive or negative), the absolute
    value of these numbers would be 3 and 10\. You might use this in a board game
    where you roll two dice and then move your character a maximum number of steps
    in any direction, based on the total of the dice. Now, if we store the number
    of steps in a variable, we can determine if the character is moving with the following
    code. We might want to display some information when the player has decided to
    move (in this case, we’ll display “Character is moving far” or “Character is moving,”
    depending on the number):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不关心方向（正数或负数），那么这些数字的绝对值就是3和10。你可能会在一个棋盘游戏中用到这个，其中你掷两个骰子，然后根据骰子的总数决定角色最大可以朝任意方向移动多少步。现在，如果我们将步数存储在一个变量中，我们就可以使用以下代码判断角色是否在移动。我们可能希望在玩家决定移动时显示一些信息（在这个例子中，我们将根据步数显示“角色正在移动很远”或“角色正在移动”）：
- en: '![Image](Images/f0300-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0300-01.jpg)'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we hadn’t used abs, the if statement might look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有使用 abs，if 语句可能看起来是这样的：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, using abs made the if statement a little shorter and easier
    to understand.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用 abs 使得 if 语句更简洁易懂。
- en: The all Function
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: all 函数
- en: The all function returns True if all items in a list (or any other sort of collection)
    evaluate to True. Put most simply, this means that all the values of the items
    in the list are not 0, None, an empty string (’’’’) or the Boolean value False.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: all 函数如果列表（或任何其他类型的集合）中的所有项都为 True，则返回 True。简单来说，这意味着列表中所有项的值都不是 0、None、空字符串（''）或布尔值
    False。
- en: 'So if all the items in the list are nonzero numbers, all will return True:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果列表中的所有项都是非零数字，all 会返回 True：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But if any of the values are 0, it will return False:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果任何值为 0，它将返回 False：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Not just numbers—a mixed list of values that includes None will also return
    False:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是数字—包含 None 的混合列表也会返回 False：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s try that same example again if None is removed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果去掉 None，我们再试一次同样的例子：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The any Function
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: any 函数
- en: 'The any function is similar to all, except that if any of the values evaluate
    to True, it will return True. Let’s try the same example with the numbers:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: any 函数与 all 函数类似，不同之处在于如果任何一个值的结果为 True，它就会返回 True。让我们用相同的例子来测试这些数字：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our mixed list of zeros, None, empty strings, and False also works the same
    as all:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的混合列表包含零、None、空字符串和 False，它的表现和 all 一样：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'But if we make a minor change to that list—such as adding a nonzero number
    like 100—we then get True instead:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们对列表做一个小的改动——比如添加一个非零数字如 100——我们就会得到 True 了：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The bin Function
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: bin 函数
- en: 'The bin function converts a number into its *binary representation*. Binary
    is beyond the scope of this book, but, in short, it’s a numbering system made
    up of 1s and 0s and is the basis for pretty much everything in computing. Here’s
    a simple example, converting some numbers into binary:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: bin 函数将数字转换为 *二进制表示*。二进制超出了本书的范围，但简而言之，它是由 1 和 0 组成的计数系统，是计算机中几乎一切的基础。以下是一个简单的例子，将一些数字转换为二进制：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The bool Function
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: bool 函数
- en: 'The name bool is short for *Boolean*, the word programmers use to describe
    a type of data that can have one of two possible values: typically, True or False.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: bool 的名字是 *Boolean*（布尔型）的缩写，程序员用这个词来描述一种数据类型，它只能拥有两种可能的值：通常是 True 或 False。
- en: 'The bool function takes a single parameter and returns either True or False
    based on its value. When using bool for numbers, 0 returns False but any other
    number returns True. Here’s how you might use bool with various numbers:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: bool 函数接受一个参数，并根据其值返回 True 或 False。当对数字使用 bool 时，0 返回 False，但其他任何数字返回 True。下面是你可能如何对不同数字使用
    bool 的示例：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you use bool for other values, like strings, it returns False if there’s
    no value for the string (in other words, the None keyword or an empty string).
    Otherwise, it will return True, as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将 bool 用于其他值时，比如字符串，如果字符串没有值（换句话说，值是 None 或空字符串），则返回 False。否则，返回 True，如下所示：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The bool function will also return False for lists, tuples, and maps that do
    not contain any values, or True when they do:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: bool 函数对于不包含任何值的列表、元组和映射将返回 False，当它们包含值时则返回 True：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You might use bool when you need to decide whether a value has been set or
    not. For example, if we ask people using our program to enter the year they were
    born, our if statement could use bool to test the value they enter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要决定某个值是否已设置时，可能会使用 bool。例如，如果我们要求使用我们程序的用户输入他们的出生年份，我们的 if 语句可以使用 bool 来测试他们输入的值：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first line of this example uses input to store what someone enters on the
    keyboard as the variable year. Pressing ENTER on the next line (without typing
    anything else) results in an empty string in the variable. (We also used sys.stdin.readline()
    in [Chapter 7](ch07.xhtml#ch07), which is another way to do the same thing.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本例的第一行使用 input 函数将用户输入的内容存储为变量 year。在下一行按下 ENTER（不输入任何其他内容）会使变量 year 存储一个空字符串。（我们在
    [第七章](ch07.xhtml#ch07) 中也使用过 sys.stdin.readline()，这是另一种做法。）
- en: '![Image](Images/f0304-01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0304-01.jpg)'
- en: On the following line, the if statement checks the Boolean value of the variable.
    Because the user didn’t enter anything in this example, the bool function returns
    False. The if statement uses the not keyword, which is a way of saying, “Do this
    if the function does not return True,” and so the code prints You need to enter
    a value for your year of birth on the next line.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行中，if 语句检查变量的布尔值。由于用户在本例中没有输入任何内容，bool 函数返回 False。if 语句使用了 not 关键字，它的意思是“如果函数没有返回
    True，就执行这个”，所以代码在下一行输出：你需要输入你的出生年份。
- en: The callable Function
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可调用函数
- en: The callable function simply tells you if something is a function (in other
    words, can it be called?). The following code returns False . . .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可调用函数仅仅告诉你某个对象是否是函数（换句话说，它能否被调用？）。以下代码返回 False……
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: . . . because the string ’peas’ is not a function. But the following code returns
    True . . .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ……因为字符串 'peas' 不是一个函数。但以下代码将返回 True……
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '. . . because bin is a function. The following code will also return True:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ……因为 bin 是一个函数。以下代码也将返回 True：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The People class has a single function run. If we check whether the class function
    is callable (it is), we get True. Also, if we create an object of the class, and
    then check whether the object function (p.run) is callable, again we get True:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: People 类有一个名为 run 的函数。如果我们检查该类函数是否可调用（它是可调用的），我们会得到 True。此外，如果我们创建一个该类的对象，然后检查该对象的函数（p.run）是否可调用，再次得到
    True：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The chr Function
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: chr 函数
- en: 'Every character you type in Python has an underlying numeric code identifying
    it. The character ’a’ for example, has the numeric value 97\. A capital ’A’ has
    the numeric value 65\. The chr function takes a numeric parameter and returns
    the character. So we can try the values 97 and 65:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你在Python中输入的每个字符都有一个底层的数字编码来标识它。例如，字符’a’的数字值是97。大写字母’A’的数字值是65。chr函数接受一个数字参数并返回相应的字符。所以我们可以试试值97和65：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can try some more random numbers, like 22283, which is a character in the
    Chinese character set:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以试试更多随机数字，比如22283，它是汉字字符集中的一个字符：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Or 949, which is the Greek character *epsilon*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 或者949，这是希腊字母*epsilon*：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or 8595, which isn’t a character at all—it’s a downward-pointing arrow:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者8595，这其实并不是一个字符——它是一个指向下方的箭头：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The dir Function
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: dir函数
- en: The dir function (short for *directory*) returns information about any value.
    Basically, it tells you the functions that can be used with that value in alphabetical
    order.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: dir函数（*directory*的简称）返回关于任何值的信息。基本上，它告诉你可以与该值一起使用的函数，按字母顺序排列。
- en: 'For example, to display the functions that are available for a list value,
    enter this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要显示列表值可用的函数，请输入以下内容：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The dir function works on pretty much anything, including strings, numbers,
    functions, modules, objects, and classes. But sometimes the information it returns
    may not be very useful. For example, if you call dir on the number 1, it displays
    a number of special functions (those that start and end with underscores) used
    by Python itself, which isn’t really useful (you can usually ignore most of them):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: dir函数几乎可以用于任何东西，包括字符串、数字、函数、模块、对象和类。但有时它返回的信息可能并不十分有用。例如，如果你对数字1调用dir，它会显示一堆特殊函数（那些前后都带有下划线的函数），这些函数是Python本身使用的，这其实并不实用（你通常可以忽略它们中的大部分）：
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The dir function can be useful when you have a variable and want to quickly
    find out what you can do with it. For example, run dir using the variable popcorn
    containing a string value, and you get the list of functions provided by the string
    class (all strings are members of the string class):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: dir函数在你有一个变量并希望快速了解可以对它执行什么操作时非常有用。例如，运行dir来查看包含字符串值的变量popcorn，你会得到字符串类提供的函数列表（所有字符串都是字符串类的成员）：
- en: '[PRE25]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At this point, you could use help to get a short description of any function
    in the list. Here’s an example of running help for the upper function:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以使用help来获取列表中任何函数的简短描述。以下是运行help获取上面函数的示例：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The information returned can be a little confusing, so let’s take a closer look.
    The first line tells you that upper is a built-in function of an instance (object)
    of a string. And the second line tells you exactly what it does (returns a copy
    of the string in uppercase).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的信息可能有点让人困惑，所以我们来仔细看看。第一行告诉你upper是一个字符串实例（对象）的内置函数。第二行则告诉你它的作用是什么（返回字符串的大写副本）。
- en: The divmod Function
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: divmod函数
- en: The helper function divmod takes two parameters (two numbers representing a
    dividend and divisor) and then returns the result of dividing the two numbers,
    along with the result of performing the modulo operation on the two numbers. Division
    is the mathematical operation of calculating how many times one number can be
    divided into parts of a second number. For example, how many times can we divide
    a set of six balls into sets of two balls?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数divmod接受两个参数（两个数字，分别表示被除数和除数），然后返回这两个数字相除的结果，以及这两个数字执行模除操作的结果。除法是计算一个数字能被分成多少个第二个数字的部分的数学运算。例如，我们可以将六个球分成两球一组多少次？
- en: '![Image](Images/f0308-01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0308-01.jpg)'
- en: 'The answer: we can divide it three times.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是：我们可以将其除三次。
- en: '![Image](Images/f0308-02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0308-02.jpg)'
- en: The modulo operation is almost the same thing, except modulo returns the number
    left over after we do the division. So the result of modulo for the six balls
    divided by two above is zero (because there’s nothing left over). What if we add
    one more ball? If we divide seven balls into sets of two, the result of the division
    is still three, but one ball will be left over.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 模除操作几乎是相同的，除了模除返回的是除法后的余数。所以，以上将六个球除以二的结果是零（因为没有剩余）。如果我们再加一个球呢？如果我们将七个球分成两组，除法的结果仍然是三，但会剩下一个球。
- en: '![Image](Images/f0308-03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0308-03.jpg)'
- en: 'And that’s what divmod will return as a tuple of two numbers: the result of
    the division and the result of the modulo operation. Let’s try with 6 and 2 first:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`divmod`作为一个包含两个数字的元组返回的结果：除法的结果和取模操作的结果。让我们先试试6和2：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And then with 7 and 2:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是7和2：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The eval Function
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`eval`函数'
- en: The eval function (short for *evaluate*) takes a string as a parameter and runs
    it as though it were a Python expression. For example, eval(’print(’’wow’’)’)
    will actually run the statement print(’’wow’’).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval`函数（即*求值*的缩写）将一个字符串作为参数，并像运行Python表达式一样执行它。例如，`eval(''print("wow")'')`将实际执行语句`print("wow")`。'
- en: 'The eval function works only with simple expressions, such as the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval`函数仅适用于简单的表达式，例如以下内容：'
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Expressions that are split over more than one line (such as if statements)
    generally won’t evaluate, as in this example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 跨越多行的表达式（如`if`语句）通常不会求值，如下例所示：
- en: '[PRE30]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The eval function is often used to turn user input into Python expressions.
    For example, you could write a simple calculator program that reads equations
    entered into Python and then calculates (evaluates) the answers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval`函数通常用于将用户输入转换为Python表达式。例如，你可以编写一个简单的计算器程序，该程序读取输入到Python中的方程式并计算（求值）答案。'
- en: '![Image](Images/f0309-01.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0309-01.jpg)'
- en: 'Because user input is read as a string, Python needs to convert it into numbers
    and operators before doing any calculations. The eval function makes that conversion
    easy:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因为用户输入作为字符串读取，Python需要将其转换为数字和运算符，才能进行任何计算。`eval`函数使这种转换变得简单：
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this example, we use the input function to read what the user enters into
    the your_calculation variable. On the next line, we enter the expression 12*52.
    We use eval to run this calculation, and the result is printed on the final line.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用`input`函数来读取用户输入到`your_calculation`变量中。在下一行，我们输入表达式12*52。我们使用`eval`来运行这个计算，结果将在最后一行打印出来。
- en: The exec Function
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`exec`函数'
- en: 'The exec function is like eval, except you can use it to run more complicated
    programs. While eval returns a value (something you can save in a variable), exec
    does not. Here’s an example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec`函数类似于`eval`，只是你可以用它来运行更复杂的程序。虽然`eval`返回一个值（你可以将其保存在变量中），但`exec`不会返回值。以下是一个示例：'
- en: '[PRE32]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the first two lines, we create a variable with a multiline string containing
    two print statements, and then use exec to run the string.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两行中，我们创建了一个包含两个打印语句的多行字符串变量，然后使用`exec`来运行这个字符串。
- en: You can use exec to run mini programs your Python program reads in from files—programs
    inside programs! This can be quite useful when writing long, complex applications.
    For example, you could create a *Dueling Robots* game, where two robots move around
    a screen and try to attack each other. Players of the game would provide the instructions
    for their robot as mini Python programs. The *Dueling Robots* game would read
    in these scripts and use exec to run.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`exec`来运行Python程序从文件中读取的迷你程序——程序中的程序！这在编写长且复杂的应用程序时非常有用。例如，你可以创建一个*决斗机器人*游戏，在这个游戏中，两台机器人在屏幕上移动并试图相互攻击。玩家为自己的机器人提供迷你Python程序作为指令。*决斗机器人*游戏将读取这些脚本并使用`exec`来运行。
- en: The float Function
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`float`函数'
- en: The float function converts a string or a number into a *floating-point* number,
    which is a number with a decimal place (also called a *real number* or *float*).
    For example, the number 10 is an integer (also called a *whole number*), but 10.0,
    10.1, and 10.253 are all floating-point numbers. You might use floating point
    numbers if you’re writing a simple program to calculate monetary amounts. Floats
    are also used in graphics programs (like 3D games) to calculate how and where
    to draw things on the screen.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`float`函数将一个字符串或数字转换为*浮点数*，即带有小数点的数字（也称为*实数*或*浮动数*）。例如，数字10是一个整数（也称为*整数*），但10.0、10.1和10.253都是浮点数。如果你在编写一个简单的程序来计算货币金额，可能会使用浮点数。浮点数在图形程序（如3D游戏）中也很常用，用来计算如何以及在哪里在屏幕上绘制物体。'
- en: '![Image](Images/f0311-01.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0311-01.jpg)'
- en: 'You can convert a string to a float simply by calling float:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用`float`函数将一个字符串转换为浮点数：
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can use a decimal place in a string as well:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在字符串中使用小数点：
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You might use float to convert values entered into your program into proper
    numbers, which is particularly useful when you need to compare the value a person
    enters with other values. For example, to check whether a person’s age is above
    a certain number, we could do this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会使用 float 来将用户输入的值转换为适当的数字，这在你需要将用户输入的值与其他值进行比较时特别有用。例如，要检查某个人的年龄是否超过某个数字，我们可以这样做：
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The input Function
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: input 函数
- en: 'The input function is used to read text entered by the person who’s using your
    program—everything they type until they hit the ENTER key. The results are returned
    in a string for you to use. You can prompt the user of your program to enter something,
    with a message like this example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: input 函数用于读取使用你程序的人的输入——他们输入的所有内容，直到按下 ENTER 键为止。结果以字符串形式返回供你使用。你可以提示程序的用户输入某些内容，像这样：
- en: '[PRE36]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Or with no message:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 或者没有消息：
- en: '[PRE37]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In either case, the result of the input function is the same: a string containing
    the text. See the previous section on the float function for more examples of
    using the return value.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，input 函数的结果是相同的：一个包含文本的字符串。更多关于使用返回值的例子，请参见之前关于 float 函数的部分。
- en: The int Function
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: int 函数
- en: 'The int function converts a string or a number into a whole number (or *integer*),
    which basically means that everything after the decimal point is dropped. For
    example, here’s how to convert a floating-point number into a plain integer:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: int 函数将字符串或数字转换为整数（或*整型*），这基本上意味着小数点后面的所有内容都会被舍去。例如，下面是如何将一个浮点数转换为普通整数：
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This example converts a string to an integer:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将字符串转换为整数：
- en: '[PRE39]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'But try to convert a string containing a floating-point number into an integer,
    and you get an error message. For example, here we try to convert a string containing
    a floating-point number using the int function:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，尝试将包含浮点数的字符串转换为整数时，会收到错误消息。例如，在这里我们尝试使用 int 函数将包含浮点数的字符串转换：
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see, the result is a ValueError message.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，结果是一个 ValueError 错误消息。
- en: The len Function
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: len 函数
- en: '![Image](Images/f0313-01.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0313-01.jpg)'
- en: 'The len function returns the length of an object or, in the case of a string,
    the number of characters in the string. For example, to get the length of ’this
    is a test string’, you’d do this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: len 函数返回一个对象的长度，或者在字符串的情况下，返回字符串中的字符数。例如，要获取“this is a test string”的长度，可以这样做：
- en: '[PRE41]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When used with a list or a tuple, len returns the number of items in that list
    or tuple:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当与列表或元组一起使用时，len 会返回该列表或元组中的项目数量：
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Used with a dict (or *dictionary*), len also returns the number of items in
    the dict:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与 dict（或*字典*）一起使用时，len 也会返回字典中的项目数量：
- en: '[PRE43]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The len function is particularly useful when you’re working with loops. For
    example, we could use it to display the index positions of the elements in a list
    like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: len 函数在处理循环时特别有用。例如，我们可以用它来显示列表中元素的索引位置，如下所示：
- en: '[PRE44]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: First, we store the length of the list in the variable length, and then use
    that variable in the range function to create our loop. As we loop through each
    item in the list, we print a message showing the item’s index position and value.
    You could also use the len function, if you had a list of strings and wanted to
    print every second or third item in the list.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将列表的长度存储在变量 length 中，然后使用该变量在 range 函数中创建我们的循环。当我们循环遍历列表中的每一项时，我们会打印一条显示项的索引位置和值的消息。如果你有一个字符串列表，并且想打印列表中的每第二个或第三个项目，也可以使用
    len 函数。
- en: The list Function
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: list 函数
- en: 'If you call list without any parameters, you’ll get an empty list object in
    response. There’s no difference between list() and using square brackets at that
    point. We can check if this is actually the case by testing if the two lists are
    equal (==):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你调用没有任何参数的 list，你将得到一个空的列表对象作为响应。在这一点上，list() 和使用方括号没有区别。我们可以通过测试这两个列表是否相等（==）来检查这是否确实如此。
- en: '[PRE45]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'While this might not seem particularly useful, list can also be used to convert
    certain types of Python objects (called *iterables*) into a list. The simplest
    example of this would be to use the range function (this function is described
    on [page 317](app02.xhtml#app02lev1sec21)) with list:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来并不是特别有用，但列表也可以用来将某些类型的 Python 对象（称为*可迭代对象*）转换为列表。最简单的例子是使用 range 函数（该函数在[第317页](app02.xhtml#app02lev1sec21)中描述）与列表配合使用：
- en: '[PRE46]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The max and min Functions
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: max 和 min 函数
- en: 'The max function returns the largest item in a list, tuple, or string. For
    example, here’s how to use it with a list of numbers:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: max 函数返回列表、元组或字符串中的最大项。例如，下面是如何在数字列表中使用它：
- en: '[PRE47]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can do exactly the same thing with a string, or a list of strings:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以完全一样地操作字符串，或者字符串列表：
- en: '![Image](Images/f0315-01.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0315-01.jpg)'
- en: '[PRE48]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Letters are ranked alphabetically, but lowercase letters come after uppercase
    letters, so t is more than T. But you don’t have to use lists, tuples, or strings.
    You can also call the max function directly, and enter the items that you want
    to compare into the parentheses as parameters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 字母按字母顺序排列，但小写字母在大写字母之后，所以 t 比 T 大。但你不必仅仅使用列表、元组或字符串。你还可以直接调用 max 函数，并将你想要比较的项作为参数输入括号中：
- en: '[PRE49]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The min function works like max, except it returns the smallest item in the
    list, tuple, or string. Here’s our list of numbers example using min instead of
    max:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: min 函数的作用与 max 函数类似，不同的是它返回列表、元组或字符串中的最小项。以下是我们使用 min 而不是 max 的数字列表示例：
- en: '[PRE50]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Suppose you’re playing a guessing game with a team of four players, and each
    has to guess a number that is less than your number. If any player guesses above
    your number, all players lose, but if they all guess lower, they win. We could
    use max to quickly find whether any of the guesses are higher, like so:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在和四个玩家一起玩猜数字游戏，每个玩家都必须猜测一个比你数字小的数字。如果有任何玩家猜测的数字超过你的数字，所有玩家都输了；如果他们都猜得更小，他们就赢了。我们可以使用
    max 快速检查是否有任何猜测数字过大，如下所示：
- en: '[PRE51]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In this example, we store the number to guess using the variable guess_this_number.
    The team members’ guesses are stored in the list player_guesses. The if statement
    checks the maximum guess against the number in guess_this_number, and if any player
    guesses over the number, we print the message “Boom! You all lose.”
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过变量 `guess_this_number` 存储要猜测的数字。队员们的猜测存储在列表 `player_guesses` 中。if
    语句检查最大猜测值是否与 `guess_this_number` 中的数字相符，如果有任何玩家猜测的数字超过了该数字，我们就打印消息“Boom! 你们都输了。”
- en: The ord Function
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ord 函数
- en: 'The ord function is basically the reverse of the chr function: whereas chr
    converts a number to a character, ord tells you what the number code is for a
    character. Here are some examples:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ord 函数基本上是 chr 函数的反操作：chr 将数字转换为字符，而 ord 告诉你一个字符的数字编码。以下是一些示例：
- en: '[PRE52]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The pow Function
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pow 函数
- en: 'The pow function takes two numbers and calculates the value of one number (let’s
    call this x) to the power of the other number (let’s call this y). Essentially,
    pow will multiply x by itself y times. For example, 2 to the power of 3 (in mathematics
    terms this is 2³) would be 2 * 2 * 2 (or in mathematical notation, 2 × 2 × 2),
    which is 8 (2 * 2 is 4, 4 * 2 is 8). Another example: 3 to the power of 3 (3³)
    is 27\. Let’s see how this looks in code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: pow 函数接受两个数字并计算一个数字（我们称之为 x）到另一个数字（我们称之为 y）的幂。基本上，pow 会将 x 乘以它自身 y 次。例如，2 的
    3 次方（在数学术语中这是 2³）就是 2 * 2 * 2（或在数学符号中表示为 2 × 2 × 2），结果是 8（2 * 2 是 4，4 * 2 是 8）。另一个例子：3
    的 3 次方（3³）是 27。让我们看看这在代码中的表现：
- en: '[PRE53]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The range Function
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: range 函数
- en: The range function is mainly used in for loops to loop through a section of
    code a specific number of times. The first two parameters given to range are called
    the *start* and the *stop*. You’ve seen range with these two parameters in the
    earlier example using the len function to work with a loop.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: range 函数主要用于 for 循环中，以特定次数循环执行某段代码。传递给 range 的前两个参数被称为 *start* 和 *stop*。你在之前使用
    len 函数与循环配合的示例中已经看过带有这两个参数的 range。
- en: '![Image](Images/f0317-01.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0317-01.jpg)'
- en: 'The numbers that range generates begin with the number given as the first parameter
    and end with the number that’s one less than the second parameter. For example,
    the following shows what happens when we print the numbers that range creates
    between 0 and 5:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: range 生成的数字从第一个参数给定的数字开始，到第二个参数减去 1 的数字结束。例如，以下代码展示了当我们打印 range 创建的 0 到 5 之间的数字时发生了什么：
- en: '[PRE54]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The range function actually returns a special object called an *iterator* that
    repeats an action a number of times. In this case, it returns the next highest
    number each time it is called.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: range 函数实际上返回一个特殊的对象，称为 *迭代器*，它会重复某个操作若干次。在这种情况下，每次调用它时，它都会返回下一个较大的数字。
- en: 'You can convert the iterator into a list by using the list function. If you
    then print the returned value when calling range, you’ll see the numbers it contains
    as well:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 list 函数将迭代器转换为列表。如果你在调用 range 时打印返回值，你也会看到它包含的数字：
- en: '[PRE55]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You can also add a third parameter to range, called step. If the step value
    is not included, the number 1 is used as the step by default. But what happens
    when we pass in the number 2 as the step? Here’s the result:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以向 range 函数添加一个第三个参数，称为步长（step）。如果未包含步长值，则默认步长为 1。但是当我们传入数字 2 作为步长时会发生什么呢？以下是结果：
- en: '[PRE56]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Each number in the list increases by two from the previous number, and the
    list ends with the number 28, which is 2 less than 30\. You can also use negative
    steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的每个数字都是前一个数字加 2，列表以数字 28 结尾，它比 30 少 2。你也可以使用负步长：
- en: '[PRE57]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The sum Function
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sum 函数
- en: 'The sum function adds up items in a list and returns the total. Here’s an example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: sum 函数将列表中的项加总并返回总和。以下是一个示例：
- en: '[PRE58]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: On the first line, we create a list of numbers between 0 and 500, using range
    with a step of 50\. Next, we print the list to see the result. Lastly, passing
    the variable my_list_of_numbers to the sum function with print(sum(my_list_of_numbers))
    adds all the items in the list, giving the total of 2250.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们使用 range 函数创建一个 0 到 500 之间的数字列表，步长为 50。接下来，我们打印该列表以查看结果。最后，将 my_list_of_numbers
    变量传递给 sum 函数，并使用 print(sum(my_list_of_numbers)) 输出该列表中所有项的总和，结果为 2250。
- en: Opening a File in Python
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Python 中打开文件
- en: Python’s built-in open function opens a file, so you can do something useful
    with it (like display the contents). How you tell the function which file to open
    depends on your operating system. Read over the example for a Windows file, and
    then read the Mac or Ubuntu-specific section if you’re using one of those systems.
    First create a plaintext file in your home folder called *test.txt*—on Windows,
    you can use Notepad; on Ubuntu Linux or Raspberry Pi, use TextEditor; on macOS,
    use TextEdit (but in TextEdit, you will need to select **Format** ▸ **Make Plain
    Text**). You can put whatever you like in the file.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的内置 open 函数用于打开文件，以便你可以对其执行一些有用的操作（例如显示文件内容）。如何告诉函数打开哪个文件，取决于你的操作系统。请先阅读
    Windows 文件的示例，如果你使用的是 Mac 或 Ubuntu 系统，再阅读针对这些系统的部分。首先，在你的主目录下创建一个名为 *test.txt*
    的纯文本文件——在 Windows 上，你可以使用记事本；在 Ubuntu Linux 或 Raspberry Pi 上，使用 TextEditor；在 macOS
    上，使用 TextEdit（但在 TextEdit 中，你需要选择 **格式** ▸ **使文本格式化**）。你可以随意在文件中放入内容。
- en: Opening a Windows File
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打开一个 Windows 文件
- en: 'If you’re using Windows, enter the following code to open *test.txt*:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，请输入以下代码以打开 *test.txt*：
- en: '[PRE59]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: On the first line, we use open, which returns a file object with functions for
    working with files. The parameter we use with the open function is a string telling
    Python where to find the file. If you’re using Windows, you saved *test.txt* to
    your user folder on the *C:* drive, so you specify the location of your file as
    c:\Users\<your username>\test.txt. (Don’t forget to replace <your username> with
    your actual username!)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们使用 open 函数，它返回一个文件对象，提供操作文件的功能。我们与 open 函数一起使用的参数是一个字符串，告诉 Python 文件的存放位置。如果你使用的是
    Windows 系统，并且将 *test.txt* 文件保存在 *C:* 盘的用户文件夹中，那么你需要指定文件的位置为 c:\Users\<你的用户名>\test.txt。（不要忘记将
    <你的用户名> 替换为你的实际用户名！）
- en: The two backslashes in the Windows filename tell Python that the backslash is
    just that, and not some sort of command. (As you read in [Chapter 3](ch03.xhtml#ch03),
    backslashes on their own have a special meaning in Python, particularly in strings.)
    We save the file object to the test_file variable.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 文件名中的两个反斜杠告诉 Python 反斜杠只是反斜杠本身，而不是某种命令。（正如你在 [第 3 章](ch03.xhtml#ch03)
    中所读到的，反斜杠在 Python 中有特殊意义，尤其是在字符串中。）我们将文件对象保存到 test_file 变量中。
- en: On the second line, we use the read function, provided by the file object, to
    read the contents of the file and store it in the text variable. We print the
    variable on the final line to display the contents of the file.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我们使用 read 函数，它由文件对象提供，用于读取文件内容并将其存储在 text 变量中。最后，我们打印变量以显示文件的内容。
- en: Opening a macOS File
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打开 macOS 文件
- en: 'If you are using macOS, you’ll need to enter a different location on the first
    line of the Windows example to open *test.txt*. Use the username you clicked when
    saving the text file in the string. For example, if the username is *sarahwinters*,
    the open parameter should look like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS，你需要在第一行输入一个不同的位置来打开 *test.txt*，与 Windows 示例中的位置不同。在字符串中使用你保存文本文件时选择的用户名。例如，如果用户名是
    *sarahwinters*，则 open 参数应该像这样：
- en: '[PRE60]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Opening an Ubuntu or Raspberry Pi File
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打开 Ubuntu 或 Raspberry Pi 文件
- en: 'If you are using Ubuntu Linux or Raspberry Pi, you’ll need to enter a different
    location on the first line of the Windows example to open *test.txt*. Use the
    username you clicked when saving the text file. For example, if the username is
    *jacob*, the open parameter should look like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Ubuntu Linux 或 Raspberry Pi，你需要在 Windows 示例的第一行输入一个不同的位置来打开 *test.txt*。使用你保存文本文件时点击的用户名。例如，如果用户名是
    *jacob*，那么打开参数应该像这样：
- en: '[PRE61]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Writing to Files
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入文件
- en: 'The file object returned by open has other functions besides read. We can create
    a new, empty file by using a second parameter—the string ’w’—when we call open
    (this parameter tells Python that we want to write to the file object, rather
    than read from it):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: open 返回的文件对象除了 read 外，还有其他函数。我们可以通过在调用 open 时使用第二个参数——字符串 ’w’——来创建一个新的空文件（这个参数告诉
    Python，我们想写入文件对象，而不是从中读取）：
- en: '[PRE62]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We can now add information to this new file using the write function:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 write 函数向这个新文件添加信息：
- en: '[PRE63]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, we need to tell Python when we’re finished writing to the file, using
    the close function:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要告诉 Python 当我们写入完文件时，使用 close 函数：
- en: '[PRE64]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now, if you open the file with your text editor, you should see that it contains
    the text “What is green and loud? A froghorn!” Or, you can use Python to read
    it again:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你用文本编辑器打开文件，你应该会看到它包含了文本：“什么东西既绿色又响亮？一只青蛙号角！”或者，你也可以用 Python 再次读取它：
- en: '![Image](Images/f0321-01.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0321-01.jpg)'
- en: '[PRE65]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
