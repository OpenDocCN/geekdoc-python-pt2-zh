["```py\nimport re\n\ntext = '''A blockchain, originally block chain,\n\nis a growing list of records, called blocks,\n\nwhich are linked using cryptography.\n\n'''\n\nprint(re.findall('b...k', text))\n\n# ['block', 'block', 'block']\n```", "```py\nprint(re.findall('y.*y', text))\n\n# ['yptography']\n```", "```py\nprint(re.findall('blocks?', text))\n\n# ['block', 'block', 'blocks']\n```", "```py\ntxt = '<div>hello world</div>'\n\nprint(re.findall('<.*>', txt))\n\n# ['<div>hello world</div>']\n\nprint(re.findall('<.*?>', txt))\n\n# ['<div>', '</div>']\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ntext = 'peter piper picked a peck of pickled peppers'\n\n## One-Liner\n\nresult = re.findall('p.*?e.*?r', text)\n\n## Result\n\nprint(result)\n```", "```py\n## Result\n\nprint(result)\n\n# ['peter', 'piper', 'picked a peck of pickled pepper']\n```", "```py\nresult = re.findall('p.*e.*r', text)\n\nprint(result)\n\n# ['peter piper picked a peck of pickled pepper']\n```", "```py\nimport urllib.request\n\nsearch_phrase = 'crypto'\n\nwith urllib.request.urlopen('https://www.wired.com/') as response:\n\n   html = response.read().decode(\"utf8\") # convert to string\n\n   first_pos = html.find(search_phrase) \n\n   print(html[first_pos-10:first_pos+10])\n```", "```py\n# ,r=window.crypto||wi\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ntext_1 = \"crypto-bot that is trading Bitcoin and other currencies\"\n\ntext_2 = \"cryptographic encryption methods that can be cracked easily with quantum computers\"\n\n## One-Liner\n\npattern = re.compile(\"crypto(.{1,30})coin\") \n\n## Result\n\nprint(pattern.match(text_1))\n\nprint(pattern.match(text_2))\n```", "```py\n## Result\n\nprint(pattern.match(text_1))\n\n# <re.Match object; span=(0, 34), match='crypto-bot that is trading Bitcoin'>\n\nprint(pattern.match(text_2))\n\n# None\n```", "```py\nimport re\n\ntext = '''\n\n\"One can never have enough socks\", said Dumbledore.\n\n\"Another Christmas has come and gone and I didn't\n\nget a single pair. People will insist on giving me books.\"\n\nChristmas Quote\n\n'''\n\nregex = 'Christ.*'\n\nprint(re.match(regex, text))\n\n# None\n\nprint(re.search(regex, text))\n\n# <re.Match object; span=(62, 102), match=\"Christmas has come and gone and I didn't\">\n\nprint(re.findall(regex, text))\n\n# [\"Christmas has come and gone and I didn't\", 'Christmas Quote']\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\npage = '''\n\n<!DOCTYPE html>\n\n<html>\n\n<body>\n\n<h1>My Programming Links</h1>\n\n<a href=\"https://app.finxter.com/\">test your Python skills</a>\n\n<a href=\"https://blog.finxter.com/recursion/\">Learn recursion</a>\n\n<a href=\"https://nostarch.com/\">Great books from NoStarchPress</a>\n\n<a href=\"http://finxter.com/\">Solve more Python puzzles</a>\n\n</body>\n\n</html>\n\n'''\n\n## One-Liner\n\npractice_tests = re.findall(\"(<a.*?finxter.*?(test|puzzle).*?>)\", page)\n\n## Result\n\nprint(practice_tests)\n```", "```py\n## Result\n\nprint(practice_tests)\n\n# [('<a href=\"https://app.finxter.com/\">test your Python skills</a>', 'test'),\n\n#  ('<a href=\"http://finxter.com/\">Solve more Python puzzles</a>', 'puzzle')]\n```", "```py\nstring = 'helloworld'\n\nregex_1 = 'hello(world)'\n\nregex_2 = '(hello(world))'\n\nres_1 = re.findall(regex_1, string)\n\nres_2 = re.findall(regex_2, string)\n\nprint(res_1)\n\n# ['world']\n\nprint(res_2)\n\n# [('helloworld', 'world')]\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\nreport = '''\n\nIf you invested $1 in the year 1801, you would have $18087791.41 today.\n\nThis is a 7.967% return on investment. \n\nBut if you invested only $0.25 in 1801, you would end up with $4521947.8525.\n\n'''\n\n## One-Liner\n\ndollars = [x[0] for x in re.findall('(\\$[0-9]+(\\.[0-9]*)?)', report)]\n\n## Result\n\nprint(dollars)\n```", "```py\n[('$1', ''), ('$18087791.41', '.41'), ('$0.25', '.25'), ('$4521947.8525', '.8525')]\n```", "```py\n## Result\n\nprint(dollars)\n\n# ['$1 ', '$18087791.41', '$0.25', '$4521947.8525']\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\narticle = '''\n\nThe algorithm has important practical applications\n\nhttp://blog.finxter.com/applications/\n\nin many basic data structures such as sets, trees,\n\ndictionaries, bags, bag trees, bag dictionaries,\n\nhash sets, https://blog.finxter.com/sets-in-python/\n\nhash tables, maps, and arrays. http://blog.finxter.com/\n\nhttp://not-a-valid-url\n\nhttp:/bla.ba.com\n\nhttp://bo.bo.bo.bo.bo.bo/\n\nhttp://bo.bo.bo.bo.bo.bo/333483--33343-/\n\n'''\n\n## One-Liner\n\nstale_links = re.findall('http://[a-z0-9_\\-.]+\\.[a-z0-9_\\-/]+', article)\n\n## Results\n\nprint(stale_links)\n```", "```py\n## Results\n\nprint(stale_links)\n\n# ['http://blog.finxter.com/applications/',\n\n#  'http://blog.finxter.com/',\n\n#  'http://bo.bo.bo.bo.bo.bo/',\n\n#  'http://bo.bo.bo.bo.bo.bo/333483--33343-/']\n```", "```py\nimport re\n\nprint(re.findall('x{3,5}y', 'xy'))\n\n# []\n\nprint(re.findall('x{3,5}y', 'xxxy'))\n\n# ['xxxy']\n\nprint(re.findall('x{3,5}y', 'xxxxxy'))\n\n# ['xxxxxy']\n\nprint(re.findall('x{3,5}y', 'xxxxxxy'))\n\n# ['xxxxxy']\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ninputs = ['18:29', '23:55', '123', 'ab:de', '18:299', '99:99']\n\n## One-Liner\n\ninput_ok = lambda x: re.fullmatch('[0-9]{2}:[0-9]{2}', x) != None\n\n## Result\n\nfor x in inputs:\n\n    print(input_ok(x))\n```", "```py\n## Result\n\nfor x in inputs:\n\n    print(input_ok(x))\n\n'''\n\nTrue\n\nTrue\n\nFalse\n\nFalse\n\nFalse\n\nTrue\n\n'''\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ninputs = ['18:29', '23:55', '123', 'ab:de', '18:299', '99:99']\n\n## One-Liner\n\ninput_ok = lambda x: re.fullmatch('([01][0-9]|2[0-3]):[0-5][0-9]', x) != None\n\n## Result\n\nfor x in inputs:\n\n    print(input_ok(x))\n```", "```py\n## Result\n\nfor x in inputs:\n\n    print(input_ok(x))\n\n'''\n\nTrue\n\nTrue\n\nFalse\n\nFalse\n\nFalse\n\nFalse\n\n'''\n```", "```py\nimport re\n\npattern = '(?P<quote>[\\'\"]).*(?P=quote)'\n\ntext = 'She said \"hi\"'\n\nprint(re.search(pattern, text))\n\n# <re.Match object; span=(9, 13), match='\"hi\"'>\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ntext = '''\n\nIt was a bright cold day in April, and the clocks were\n\nstriking thirteen. Winston Smith, his chin nuzzled into\n\nhis breast in an effort to escape the vile wind, slipped\n\nquickly through the glass doors of Victory Mansions,\n\nthough not quickly enough to prevent a swirl of gritty\n\ndust from entering along with him.\n\n-- George Orwell, 1984\n\n'''\n\n## One-Liner\n\nduplicates = re.findall('([^\\s]*(?P<x>[^\\s])(?P=x)[^\\s]*)', text)\n\n## Results\n\nprint(duplicates)\n```", "```py\n## Results\n\nprint(duplicates)\n\n'''\n\n[('thirteen.', 'e'), ('nuzzled', 'z'), ('effort', 'f'),\n\n('slipped', 'p'), ('glass', 's'), ('doors', 'o'),\n\n('gritty', 't'), ('--', '-'), ('Orwell,', 'l')]\n\n'''\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ntext = 'if you use words too often words become used'\n\n## One-Liner\n\nstyle_problems = re.search('\\s(?P<x>[a-z]+)\\s+([a-z]+\\s+){0,10}(?P=x)\\s', ' ' + text + ' ')\n\n## Results\n\nprint(style_problems)\n```", "```py\n'➊\\s(?P<x>[a-z]+)\\s+➋([a-z]+\\s+){0,10}➌(?P=x)\\s'\n```", "```py\n## Results\n\nprint(style_problems)\n\n# <re.Match object; span=(12, 35), match=' words too often words '>\n```", "```py\n## Dependencies\n\nimport re\n\n## Data\n\ntext = '''\n\nAlice Wonderland married John Doe.\n\nThe new name of former 'Alice Wonderland' is Alice Doe.\n\nAlice Wonderland replaces her old name 'Wonderland' with her new name 'Doe'.\n\nAlice's sister Jane Wonderland still keeps her old name.\n\n'''\n\n## One-Liner\n\nupdated_text = re.sub(\"Alice Wonderland(?!')\", 'Alice Doe', text)\n\n## Result\n\nprint(updated_text)\n```", "```py\n## Result\n\nprint(updated_text)\n\n'''\n\nAlice Doe married John Doe.\n\nThe new name of former 'Alice Wonderland' is Alice Doe.\n\nAlice Doe replaces her old name 'Wonderland' with her new name 'Doe'.\n\nAlice's sister Jane Wonderland still keeps her old name.\n\n'''\n```"]