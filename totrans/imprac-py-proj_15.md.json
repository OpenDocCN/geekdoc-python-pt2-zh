["```py\n➊ >>> import os\n➋ >>> os.getcwd()\n   'C:\\\\Python35\\\\Lib\\\\idlelib'\n➌ >>> os.chdir('C:\\\\Python35\\\\Python 3 Stuff')\n   >>> os.getcwd()\n   'C:\\\\Python35\\\\Python 3 Stuff'\n➍ >>> os.chdir(r'C:\\Python35\\Python 3 Stuff\\Planet Stacking')\n   >>> os.getcwd()\n➎ 'C:\\\\Python35\\\\Python 3 Stuff\\\\Planet Stacking'\n➏ >>> os.path.join('Planet Stacking', 'stack_8', '8file262.jpg')\n   'Planet Stacking\\\\stack_8\\\\8file262.jpg'\n➐ >>> os.path.normpath('C:/Python35/Python 3 Stuff')\n   'C:\\\\Python35\\\\Python 3 Stuff'\n➑ >>> os.chdir('C:/Python35')\n   >>> os.getcwd()\n   'C:\\\\Python35'\n```", "```py\n>>> os.getcwd()\n'C:\\\\Python35\\\\Python 3 Stuff'\n>>> os.chdir('Planet Stacking')\n>>> os.getcwd()\n'C:\\\\Python35\\\\Python 3 Stuff\\\\Planet Stacking'\n```", "```py\n>>> os.path.abspath('.')\n'C:\\\\Python35\\\\Python 3 Stuff\\\\Planet Stacking\\\\for_book'\n```", "```py\n➊ import os\n   import sys\n➋ import shutil\n➌ from PIL import Image, ImageOps\n\n   def main():\n       \"\"\"Get starting folder, copy folder, run crop function, & clean folder.\"\"\"\n       # get name of folder in cwd with original video images\n    ➍ frames_folder = 'video_frames'\n\n       # prepare files & folders\n    ➎ del_folders('cropped')\n    ➏ shutil.copytree(frames_folder, 'cropped')\n\n       # run cropping function\n       print(\"start cropping and scaling...\")\n    ➐ os.chdir('cropped')\n       crop_images()\n    ➑ clean_folder(prefix_to_save='cropped')  # delete uncropped originals\n\n       print(\"Done! \\n\")\n```", "```py\n➊ def del_folders(name):\n       \"\"\"If a folder with a named prefix exists in directory, delete it.\"\"\"\n    ➋ contents = os.listdir()\n    ➌ for item in contents:\n        ➍ if os.path.isdir(item) and item.startswith(name):\n            ➎ shutil.rmtree(item)\n\n➏ def clean_folder(prefix_to_save):\n       \"\"\"Delete all files in folder except those with a named prefix.\"\"\"\n    ➐ files = os.listdir()\n       for file in files:\n        ➑ if not file.startswith(prefix_to_save):\n            ➒ os.remove(file)\n```", "```py\n➊ def crop_images():\n       \"\"\"Crop and scale images of a planet to box around planet.\"\"\"\n    ➋ files = os.listdir()\n    ➌ for file_num, file in enumerate(files, start=1):\n        ➍ with Image.open(file) as img:\n            ➎ gray = img.convert('L')\n            ➏ bw = gray.point(lambda x: 0 if x < 90 else 255)\n            ➐ box = bw.getbbox()\n               padded_box = (box[0]-20, box[1]-20, box[2]+20, box[3]+20)\n            ➑ cropped = img.crop(padded_box)\n               scaled = ImageOps.fit(cropped, (860, 860),\n                                     Image.LANCZOS, 0, (0.5, 0.5))\n               file_name = 'cropped_{}.jpg'.format(file_num)\n            ➒ scaled.save(file_name, \"JPEG\")\n\n   if __name__ == '__main__':\n       main()\n```", "```py\n➊ import os\n   from PIL import Image\n\n   print(\"\\nstart stacking images...\")\n\n   # list images in directory\n➋ os.chdir('cropped')\n   images = os.listdir()\n\n   # loop through images and extract RGB channels as separate lists\n➌ red_data = []\n   green_data = []\n   blue_data = []\n➍ for image in images:\n       with Image.open(image) as img:\n           if image == images[0]:  # get size of 1st cropped image\n               img_size = img.size  # width-height tuple to use later\n        ➎ red_data.append(list(img.getdata(0)))\n           green_data.append(list(img.getdata(1)))\n           blue_data.append(list(img.getdata(2)))\n\n➏ ave_red = [round(sum(x) / len(red_data)) for x in zip(*red_data)]\n   ave_blue = [round(sum(x) / len(blue_data)) for x in zip(*blue_data)]\n   ave_green = [round(sum(x) / len(green_data)) for x in zip(*green_data)]\n\n➐ merged_data = [(x) for x in zip(ave_red, ave_green, ave_blue)]\n➑ stacked = Image.new('RGB', (img_size))\n➒ stacked.putdata(merged_data)\n   stacked.show()\n\n➓ os.chdir('..')\n   stacked.save('jupiter_stacked.tif', 'TIFF')\n```", "```py\n➊ from PIL import Image, ImageFilter, ImageEnhance\n\n➋ def main():\n       \"\"\"Get an image and enhance, show, and save it.\"\"\"\n    ➌ in_file = 'jupiter_stacked.tif'\n       img = Image.open(in_file)\n    ➍ img_enh = enhance_image(img)\n       img_enh.show()\n       img_enh.save('enhanced.tif', 'TIFF')\n\n➎ def enhance_image(image):\n       \"\"\"Improve an image using pillow filters & transforms.\"\"\"\n    ➏ enhancer = ImageEnhance.Brightness(image)\n    ➐ img_enh = enhancer.enhance(0.75)  # 0.75 looks good\n\n    ➑ enhancer = ImageEnhance.Contrast(img_enh)\n       img_enh = enhancer.enhance(1.6)\n       enhancer = ImageEnhance.Color(img_enh)\n       img_enh = enhancer.enhance(1.7)\n\n    ➒ img_enh = img_enh.rotate(angle=133, expand=True)\n\n    ➓ img_enh = img_enh.filter(ImageFilter.SHARPEN)\n\n       return img_enh\n\n   if __name__ == '__main__':\n       main()\n```"]