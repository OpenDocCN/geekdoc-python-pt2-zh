- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1'
- en: SETTING THE STAGE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置舞台**'
- en: '![image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common.jpg)'
- en: Although this book has no traditional math exercises, we do need to play around
    with the concepts if we want to master them. We’ll have plenty of opportunities
    for that, but instead of pencil and paper exercises, we’ll use code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书没有传统的数学练习，但如果我们想掌握这些概念，我们确实需要玩弄一下。我们将有很多机会做到这一点，但我们将使用代码而不是铅笔和纸的练习。
- en: This chapter will help you set the stage by configuring our working environment.
    Throughout the book, I’ll work in Linux, specifically Ubuntu 20.04, though what
    we’re doing most likely will work in later versions of Ubuntu and most other Linux
    distributions as well. For completeness, I’ve included sections on configuring
    macOS and Windows environments. I should point out that the expected operating
    system for deep learning is Linux, with most things working under macOS as well.
    Windows is typically an afterthought, and many deep learning toolkit ports are
    poorly maintained, though this is improving with time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您通过配置我们的工作环境来设置舞台。在整本书中，我将在Linux中工作，具体来说是Ubuntu 20.04，尽管我们所做的大多数工作也可能适用于Ubuntu的后续版本和大多数其他Linux发行版。为了完整起见，我还包括了配置macOS和Windows环境的部分。我应该指出，深度学习的预期操作系统是Linux，大多数事情也可以在macOS下工作。Windows通常是一个次要考虑因素，并且许多深度学习工具包的移植维护不佳，尽管随着时间的推移情况有所改善。
- en: We’ll begin with some instructions for installing the expected software packages.
    Then we’ll take a quick look at the NumPy library for Python 3.*x*. NumPy is foundational
    to virtually all scientific uses of Python, and it’s essential that you know how
    to work with it at a basic level. Next, I’ll introduce SciPy. This is also a necessary
    toolkit for science, but we’ll only need the tiniest portion of it here. Finally,
    I’ll talk a bit about the Scikit-Learn toolkit, abbreviated here as `sklearn`.
    This valuable toolkit implements many of the traditional machine learning models.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一些安装预期软件包的说明开始。然后，我们将快速查看Python 3.*x*中的NumPy库。NumPy是几乎所有Python科学用途的基础，并且您需要知道如何在基本水平上使用它。接下来，我将介绍SciPy。这也是科学上必需的工具包，但在这里我们只需要使用它的一小部分。最后，我会简要介绍Scikit-Learn工具包，这里简称为`sklearn`。这个有价值的工具包实现了许多传统的机器学习模型。
- en: 'Throughout the book, I’ll often use running examples to illustrate concepts.
    All code snippets assume the following line has been executed:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我经常使用运行示例来说明概念。所有代码片段都假定执行了以下行：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also, in some places, the code will reference output from a snippet that appeared
    earlier in the chapter. The code examples are brief, so following one to the next
    shouldn’t be burdensome. I do recommend leaving a single Python session running
    as you work through a chapter, though this is not required.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些地方，代码将引用本章前面出现的片段的输出。代码示例很简短，因此从一个到另一个的跟随不应该是繁琐的。我建议在您阅读一章时保持单个Python会话运行，尽管这不是必需的。
- en: Installing the Toolkits
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装工具包
- en: 'The end goal of this section is to have the following toolkits installed with
    *at least* the version number listed:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的最终目标是安装以下工具包，并且*至少*具有列出的版本号：
- en: Python 3.8.5
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.8.5
- en: NumPy 1.17.4
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.17.4
- en: SciPy 1.4.1
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy 1.4.1
- en: Matplotlib 3.1.2
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib 3.1.2
- en: Scikit-Learn (`sklearn`) 0.23.2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scikit-Learn (`sklearn`) 0.23.2
- en: Later versions than these almost certainly will work as well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比这些版本更新的版本几乎肯定也会起作用。
- en: Let’s take a quick look at how we can install each of these toolkits in the
    major operating systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看如何在主要操作系统中安装这些工具包。
- en: Linux
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux
- en: For the following, the `$` prompt represents the command line, whereas `>>>`
    is the Python prompt.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下内容，`$`提示符表示命令行，而`>>>`是Python提示符。
- en: A fresh install of Ubuntu 20.04 desktop gives us Python 3.8.5 for free. Use
    the code
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 20.04桌面的新安装为我们提供了Python 3.8.5。使用以下代码
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: to verify your operating system version and use `python3` to run Python, as
    `python` alone starts the older Python 2.7.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您的操作系统版本并使用`python3`运行Python，因为仅使用`python`将启动较旧的Python 2.7。
- en: 'These commands install NumPy, SciPy, Matplotlib, and `sklearn`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令安装了NumPy、SciPy、Matplotlib和`sklearn`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Test the installation by starting Python 3 and importing each module: `numpy`,
    `scipy`, and `sklearn`. Then print the `__version__` string to make sure it meets
    or exceeds the versions listed above. For example, see the following code.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启动Python 3并导入每个模块（`numpy`，`scipy`和`sklearn`）来测试安装。然后打印`__version__`字符串以确保它符合或超过上述版本。例如，请参阅以下代码。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: macOS
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: macOS
- en: To install Python 3.*x* for Macintosh, go to *[https://www.python.org/](https://www.python.org/)*,
    and under **Downloads**, choose **Mac OS X**. Then select the latest stable Python
    3 release. At the time of this writing, it’s 3.9.2\. When the download is complete,
    run the installer to get Python 3.9.2 set up.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Macintosh 安装 Python 3.*x*，请访问 *[https://www.python.org/](https://www.python.org/)*，在
    **下载** 下选择 **Mac OS X**。然后选择最新的稳定版 Python 3 版本。写这篇文章时，最新版本是 3.9.2。下载完成后，运行安装程序以安装
    Python 3.9.2。
- en: 'After the installation, open a terminal window and verify the installation
    with the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开终端窗口，并通过以下命令验证安装是否成功：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Assuming Python 3 installed correctly, now we can install the libraries using
    the terminal window and `pip3`, which the installer set up for us:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Python 3 安装正确，现在我们可以使用终端窗口和安装程序为我们设置好的 `pip3` 来安装库：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And, finally, we can check the versions of the libraries from within Python
    3\. Enter **python3** in the terminal to pull up a Python console, and then import
    `numpy`, `scipy`, `matplotlib`, and `sklearn` and print the version strings, as
    we did above, to verify that they meet or exceed the minimum versions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以从 Python 3 内部检查库的版本。输入 **python3** 打开终端中的 Python 控制台，然后导入 `numpy`、`scipy`、`matplotlib`
    和 `sklearn` 并打印版本信息，就像上面做的那样，以验证它们是否符合或超过最低版本要求。
- en: Windows
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: 'To install Python 3 and the toolkits for Windows 10, use the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 10 上安装 Python 3 和工具包，请按照以下步骤操作：
- en: Go to *[https://www.python.org/](https://www.python.org/)* and click **Downloads**
    and **Windows**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 *[https://www.python.org/](https://www.python.org/)*，点击 **下载** 和 **Windows**。
- en: At the bottom of the page, select the x86-64 executable installer.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部，选择 x86-64 可执行安装程序。
- en: Run the installer, choosing the default options.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，选择默认选项。
- en: Select **Install for All Users** and **Add Python to the Windows PATH**. This
    is important.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **为所有用户安装** 和 **将 Python 添加到 Windows PATH 中**。这一点很重要。
- en: When the installer finishes, Python will be available from the command prompt
    because we told the installer to add Python to the `PATH` environment variable.
    Therefore, open the command prompt (WINDOWS-R, `cmd`), and enter `python`. If
    all goes well, you’ll be greeted by the Python startup message and see a `>>>`
    interactive prompt. At the time of this writing, the version installed was 3.8.2\.
    Note that to exit Python in Windows, use CTRL-Z, not CTRL-D.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序完成后，由于我们让安装程序将 Python 添加到 `PATH` 环境变量中，因此可以在命令提示符下使用 Python。打开命令提示符（WINDOWS-R，输入
    `cmd`），然后输入 `python`。如果一切顺利，你将看到 Python 启动消息，并出现 `>>>` 交互式提示符。写这篇文章时，安装的版本是 3.8.2。请注意，要退出
    Windows 中的 Python，请使用 CTRL-Z，而不是 CTRL-D。
- en: 'The Python installer did us the courtesy of installing `pip` as well. We can
    use it directly from the Windows command prompt to install the libraries we need.
    At the prompt, enter the following lines to install the NumPy, SciPy, Matplotlib,
    and `sklearn` libraries:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python 安装程序还贴心地为我们安装了 `pip`。我们可以直接在 Windows 命令提示符下使用它来安装所需的库。在提示符下，输入以下命令来安装
    NumPy、SciPy、Matplotlib 和 `sklearn` 库：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For me, this installed NumPy 1.18.1, SciPy 1.4.1, Matplotlib 3.2.1, and `sklearn`
    0.22.2, which meet the minimum versions above, so all is well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这次安装了 NumPy 1.18.1、SciPy 1.4.1、Matplotlib 3.2.1 和 `sklearn` 0.22.2，这些版本符合上面提到的最低要求，因此一切正常。
- en: To test things, start Python from the command prompt and import `numpy`, `scipy`,
    `matplotlib`, and `sklearn`. All three should load without error. To write Python
    code, install any editor you’re comfortable with, or simply use Notepad.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试，打开命令提示符，启动 Python 并导入 `numpy`、`scipy`、`matplotlib` 和 `sklearn`。这三个库都应该能够正常加载。如果要编写
    Python 代码，可以安装任何你喜欢的编辑器，或者直接使用记事本。
- en: With your toolkits installed and good to go, let’s take a quick look at each
    library to become at least a bit more familiar with them. We’ll see examples throughout
    the book, but I recommend you look at the suggested documentation. It’s worth
    it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具包安装并准备就绪后，我们快速了解每个库，至少对它们有一些基本的了解。全书中我们会看到很多例子，但我建议你查看推荐的文档。这样做是值得的。
- en: NumPy
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy
- en: We installed NumPy in the previous section. Now I’ll introduce some basic NumPy
    concepts and manipulations. A full tutorial is available online at *[https://docs.scipy.org/doc/numpy/user/quickstart.html](https://docs.scipy.org/doc/numpy/user/quickstart.html)*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节安装了 NumPy。现在我将介绍一些基本的 NumPy 概念和操作。完整的教程可以在网上找到，网址是 *[https://docs.scipy.org/doc/numpy/user/quickstart.html](https://docs.scipy.org/doc/numpy/user/quickstart.html)*。
- en: 'Start Python. Then try the following at the prompt:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Python。然后在提示符下尝试以下操作：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first line loads NumPy and sets up a shortcut name for it, `np`. Using the
    shortcut name isn’t required, but doing so is nearly universal. We’ll assume `np`
    going forward. The second line displays the version. It should be at least what
    is shown above.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行加载 NumPy 并为其设置一个快捷名称`np`。使用快捷名称并非强制要求，但几乎是普遍做法。接下来我们会假设使用`np`。第二行显示了版本号，应该至少与上面显示的版本相同。
- en: Defining Arrays
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义数组
- en: 'NumPy operates on arrays and is quite good at turning lists into arrays. Think
    about the sort of arrays one finds in a language like C or Java. NumPy provides
    an advantage because although Python is elegant, it’s too slow for scientific
    uses when simulating arrays with lists. Actual arrays are much faster. Here’s
    an example defining an array from a list, and then examining some of its properties:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 操作数组，且非常擅长将列表转换为数组。想象一下在像 C 或 Java 这样的语言中你会遇到什么样的数组。NumPy 提供了一个优势，因为尽管
    Python 优雅，但在使用列表模拟数组时，Python 的速度过慢，不适合科学计算。实际的数组要快得多。以下是一个从列表定义数组的示例，然后检查它的一些属性：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This example defines a list of four elements and then passes it to `np.array`
    to turn it into a NumPy array. Basic array properties include the size and the
    shape. The size is four elements. The shape is also four, as a tuple, showing
    that `a` is a vector, a one-dimensional (1D) array. The shape is four because
    array `a` has four elements. If `a` was two-dimensional (2D), the shape would
    have two values, one for each axis of the array. See the following example, where
    the shape of `b` tells us that `b` has two rows and four columns:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例定义了一个包含四个元素的列表，然后将其传递给`np.array`，将其转换为一个 NumPy 数组。基本的数组属性包括大小和形状。大小是四个元素。形状也是四，作为一个元组，表示`a`是一个向量，属于一维（1D）数组。形状为四是因为数组`a`包含四个元素。如果`a`是二维（2D）数组，形状将包含两个值，分别表示数组的每个轴。请看下面的示例，其中`b`的形状告诉我们`b`有两行四列：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Data Types
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'Python numeric data types come in two flavors: integers of arbitrary size (try
    `2**1000`) or floating-point numbers. NumPy, however, allows for arrays of many
    different types. Under the hood, NumPy is implemented in C, so it supports the
    same set of data types C supports. The previous example shows that the `np.array`
    function took the given list and, since every element of the list was an integer,
    created an array where each element was a signed 64-bit integer. [Table 1-1](ch01.xhtml#ch01tab01)
    has the data types NumPy works with; we can let NumPy choose the data type for
    us, or we can specify it explictly.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的数字数据类型有两种类型：任意大小的整数（可以尝试`2**1000`）和浮动点数。然而，NumPy 允许多种不同类型的数组。底层实现中，NumPy是用C语言编写的，因此它支持C语言支持的数据类型。上面的示例展示了`np.array`函数接收给定的列表，由于列表中的每个元素都是整数，因此创建了一个每个元素都是有符号64位整数的数组。[表
    1-1](ch01.xhtml#ch01tab01)列出了 NumPy 支持的数据类型；我们可以让 NumPy 为我们选择数据类型，也可以显式指定它。
- en: '**Table 1-1:** NumPy Data Type Names, C Equivalents, and Range'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 1-1：** NumPy 数据类型名称、C 类型和范围'
- en: '| **NumPy name** | **Equivalent C type** | **Range** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **NumPy 名称** | **对应的 C 类型** | **范围** |'
- en: '| --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| float64 | double | ±[2.225 × 10^(–308), 1.798 × 10^(308)] |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| float64 | 双精度浮点型 | ±[2.225 × 10^(–308), 1.798 × 10^(308)] |'
- en: '| float32 | float | ±[1.175 × 10^(–38), 3.403 × 10^(38)] |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| float32 | 单精度浮点型 | ±[1.175 × 10^(–38), 3.403 × 10^(38)] |'
- en: '| int64 | long long | [–2^(63), 2^(63)–1] |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| int64 | 长长整型 | [–2^(63), 2^(63)–1] |'
- en: '| uint64 | unsigned long long | [0, 2^(64)–1] |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| uint64 | 无符号长长整型 | [0, 2^(64)–1] |'
- en: '| int32 | long | [–2^(31), 2^(31)–1] |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| int32 | 长整型 | [–2^(31), 2^(31)–1] |'
- en: '| uint32 | unsigned long | [0, 2^(32)–1] |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| uint32 | 无符号长整型 | [0, 2^(32)–1] |'
- en: '| uint8 | unsigned char | [0, 255 = 2²–1] |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| uint8 | 无符号字符型 | [0, 255 = 2²–1] |'
- en: 'Let’s look at some examples of arrays with specific data types:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些具有特定数据类型的数组示例：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The examples with array `a` use integer types, and the examples with array `b`
    use floating-point types. Notice that the first `b` example defaulted to a 64-bit
    float. NumPy did this because one of the input list elements was a float (`4.0`).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组`a`的示例采用了整数类型，而使用数组`b`的示例则采用了浮动点类型。注意，第一个`b`示例默认使用了64位浮点数。NumPy这样做是因为输入列表的一个元素是浮动点数（`4.0`）。
- en: The last example defining array `c` seems to be a bug. But it isn’t. NumPy doesn’t
    warn us if the requested data type can’t hold the given values. Here, we have
    an 8-bit integer that can only hold values in the range [0, 255]. The first two,
    111 and 222, fit, but the last two, 333 and 444, are too large. NumPy quietly
    kept only the lowest 8 bits of these values, which correspond to 77 and 188, respectively.
    The lesson is that NumPy expects you to know what you’re doing in regard to data
    types. Usually, this isn’t an issue, but it is something to keep in mind.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个定义数组 `c` 的例子似乎是个 bug，但其实不是。NumPy 不会警告我们如果请求的数据类型无法容纳给定的值。这里，我们有一个 8 位整数，它只能容纳
    [0, 255] 范围内的值。前两个，111 和 222，适合，但最后两个，333 和 444，太大了。NumPy 默默地保留了这些值的最低 8 位，分别对应
    77 和 188。教训是，NumPy 期望你在处理数据类型时知道自己在做什么。通常这不是问题，但需要记住这一点。
- en: 2D Arrays
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2D 数组
- en: 'If a list turns into a 1D vector, we might suspect that a list of lists would
    turn into a 2D array. We’d be right:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个列表变成了 1D 向量，我们可能会猜测一个列表的列表会变成一个 2D 数组。我们猜得没错：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We see that a list of three sublists is mapped to a 3 × 3 array (a matrix).
    Subscripts on NumPy arrays count from zero, so referencing `d[1,2]` above returns
    6.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，三个子列表被映射为一个 3 × 3 的数组（矩阵）。NumPy 数组的下标从零开始，因此上面引用的 `d[1,2]` 返回 6。
- en: Zeros and Ones
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 零和一
- en: 'Two particularly useful NumPy functions are `np.zeros` and `np.ones`. Both
    define arrays given a shape. The first initializes the array elements to zero,
    while the second initializes them to one. This is the primary way to create NumPy
    arrays from scratch:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 两个特别有用的 NumPy 函数是 `np.zeros` 和 `np.ones`。它们都根据给定的形状定义数组。第一个将数组元素初始化为零，而第二个将它们初始化为一。这是从头开始创建
    NumPy 数组的主要方式：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first argument is a tuple giving the size of each dimension. If we pass
    in a scalar, the resulting array is a 1D vector. Let’s look at the definition
    of `b`. Here, we multiply the 3 × 1 array by a scalar (`11`). This causes each
    element of the array, which was initialized to 1.0, to be multiplied by 11.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个元组，给出每个维度的大小。如果我们传入一个标量，结果数组将是一个 1D 向量。我们来看看 `b` 的定义。在这里，我们将 3 × 1 的数组乘以标量（`11`）。这使得数组的每个元素（最初被初始化为
    1.0）都被乘以 11。
- en: Advanced Indexing
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 高级索引
- en: 'We saw simple array indexing in the examples above, where we indexed with a
    single value. NumPy supports more sophisticated array indexing. One type we’ll
    use often is a single index that returns a complete subarray. Here’s an example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面的例子中看到了简单的数组索引，我们使用一个单一的值进行索引。NumPy 支持更复杂的数组索引。我们经常使用的一种类型是返回完整子数组的单一索引。下面是一个例子：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This example introduces `np.arange`, which is the NumPy equivalent of Python’s
    `range` function. Notice the use of the `reshape` method to change the 12-element
    vector into a 3 × 4 matrix. Also, notice that `a[1]` returns the entire subarray,
    starting with the first index of the first dimension. This syntax is short for
    `a[1,:]` where `:` means all elements of the given dimension. This shorthand also
    works for assignments, as the next line shows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本例介绍了`np.arange`，它是 NumPy 对 Python 的 `range` 函数的等价物。注意使用 `reshape` 方法将 12 元素的向量转换为
    3 × 4 的矩阵。同时，注意到 `a[1]` 返回整个子数组，从第一维的第一个索引开始。这种语法是 `a[1,:]` 的简写，其中 `:` 表示给定维度的所有元素。这个简写在赋值时也适用，如下一行所示。
- en: 'The same syntax for indexing slices from a Python list works with NumPy. Here’s
    what that looks like if we continue with the example above:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Python 列表的切片使用相同的语法也适用于 NumPy。如果我们继续上面的例子，结果如下：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We see that `a[:2]` returns the first two rows with an implied `:` for the
    second dimension, as the following line shows. With our third command, we get
    a subarray in two dimensions by taking the first two rows and first three columns
    with `a[:2,:3]`. The examples with `b` show how to extract every other or every
    third element. The last example is particularly handy: it uses a negative increment
    to reverse the dimension. The increment is –1 to reverse all values. If it was
    –2, we’d get every other element of `b` in reverse order.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到 `a[:2]` 返回前两行，并隐式地对第二维使用 `:`，正如下一行所示。通过第三个命令，我们通过取前两行和前三列，使用 `a[:2,:3]`
    获取一个二维子数组。关于 `b` 的例子展示了如何提取每隔一个或每隔三个元素。最后一个例子尤其实用：它使用负增量来反转维度。增量是 -1 来反转所有值。如果增量是
    -2，我们将按反向顺序获取 `b` 的每隔一个元素。
- en: 'NumPy uses `:` to indicate all the elements along a specific dimension. It
    also allows `...` (ellipsis) as a shorthand for “as many `:`s as needed.” For
    example, let’s define a three-dimensional (3D) array:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy使用`:`表示特定维度上所有元素。它还允许使用`...`（省略号）作为“根据需要使用多个`:`”的简写。例如，让我们定义一个三维（3D）数组：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can think of array `a` as a collection of four 3 × 2 matrices. To update
    the second of these matrices, you could use the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把数组`a`看作是四个3 × 2矩阵的集合。要更新其中的第二个矩阵，你可以使用如下代码：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we specified the dimensions explicitly with `:` and showed that NumPy
    isn’t picky: it knows that a list of lists matched the expected shape of the subarray
    and updated array `a` accordingly. We get the same effect by using the ellipsis
    as seen next.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`:`显式地指定了维度，并展示了NumPy并不挑剔：它知道一个列表的列表符合子数组的预期形状，并相应地更新了数组`a`。我们也可以使用省略号`...`来实现相同的效果，如下所示。
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We’ve now updated the third 3 × 2 subarray.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经更新了第三个3 × 2子数组。
- en: Reading and Writing to Disk
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读取和写入磁盘
- en: 'NumPy arrays can be written to and loaded from disk by using `np.save` and
    `np.load`, like so:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组可以通过使用`np.save`和`np.load`从磁盘写入和加载，如下所示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we’re using `np.random.randint` to create a random 3 × 4 integer array
    with values in the range 0 through 5\. NumPy has extensive libraries for random
    numbers. We write array `a` to disk as `random.npy`. The `.npy` extension is necessary
    and will be added if we don’t supply it. We then load the array back from disk
    using `np.load`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`np.random.randint`创建一个随机的3 × 4整数数组，值的范围在0到5之间。NumPy拥有丰富的随机数库。我们将数组`a`保存为`random.npy`文件。`.npy`扩展名是必要的，如果没有提供，系统会自动添加。然后，我们使用`np.load`从磁盘加载该数组。
- en: We’ll encounter other NumPy functions throughout the book. I’ll explain them
    when they’re first introduced. Let’s move on now to a quick look at the SciPy
    library.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中遇到其他NumPy函数。我会在首次介绍时对它们进行解释。接下来，让我们快速了解一下SciPy库。
- en: SciPy
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciPy
- en: 'SciPy adds a plethora of functionality to Python. It uses NumPy under the hood,
    so the two are often installed together. A full tutorial is available here: *[https://docs.scipy.org/doc/scipy/reference/tutorial/index.html](https://docs.scipy.org/doc/scipy/reference/tutorial/index.html)*.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy为Python添加了大量功能。它在底层使用NumPy，因此这两个库通常是一起安装的。这里有一个完整的教程：[https://docs.scipy.org/doc/scipy/reference/tutorial/index.html](https://docs.scipy.org/doc/scipy/reference/tutorial/index.html)。
- en: 'In this book, we’ll focus on the functions in the `scipy.stats` module. Start
    Python and try the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将重点介绍`scipy.stats`模块中的函数。启动Python并尝试以下操作：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This loads the SciPy module and verifies that the version number is at least
    what it should be. Any later version of SciPy should work just fine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这会加载SciPy模块并验证版本号至少是应该的版本。任何更新的SciPy版本应该都能正常工作。
- en: 'As a quick test, let’s try the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快速测试，让我们尝试以下操作：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'First, we load NumPy and then the `ttest_ind` function from SciPy’s `stats`
    module. This function takes two sets of data, say test scores from two classes,
    and asks the question: do these sets of data have the same average value? Or,
    more accurately, it asks: how strongly can we believe that the same process generated
    these two sets of data? The *t-test* is a classic method for answering this question.
    One way to evaluate its result is to look at the *p-value*. You can think of a
    *p*-value as the probability that the two sets would have the measured difference
    in average value if they came from the same generating process. A probability
    near 1 means we have a lot of confidence that the two sets are from the same process.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们加载NumPy，然后加载SciPy的`stats`模块中的`ttest_ind`函数。该函数接受两组数据，例如两班的考试成绩，并提出问题：这两组数据的平均值是否相同？或者，更准确地说，它问：我们能有多大信心认为这两组数据来自相同的过程？*t检验*是回答这个问题的经典方法。评估其结果的一种方式是查看*p值*。你可以将*p值*理解为如果这两组数据来自相同的生成过程，它们的平均值差异会有多大概率出现。接近1的概率意味着我们非常有信心这两组数据来自同一个过程。
- en: 'The variables `a`, `b`, and `c` are 1D arrays where the values from the array
    (here 1,000) are extracted from Gaussian curves, also called *normal curves*.
    We’ll get to these later, but for now, know that the numbers are pulled from a
    bell curve where values near the middle are more likely to be selected than those
    near the edges. The first two arguments to `normal` are the average value and
    the standard deviation, a measure of how spread out the bell curve is: the larger
    the standard deviation, the flatter, and wider, the curve.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`a`、`b`和`c`是1D数组，其中的值（此处为1000个）来自高斯曲线，也称为*正态曲线*。我们稍后会详细讨论这些内容，但现在需要知道的是，这些数字来自一个钟形曲线，其中接近中间的值比靠近边缘的值更有可能被选中。`normal`函数的前两个参数是平均值和标准差，标准差是衡量钟形曲线宽度的指标：标准差越大，曲线越平坦，越宽。
- en: For this example, we’d expect `a` and `b` to be very similar, as they both have
    an average value of 0.0, though slightly different bell curve shapes. However,
    `c` has an average value of 0.1\. We hope the t-test picks up on this and tells
    us that we might want to be careful in believing `a` and `c` were generated by
    the same process.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们期望`a`和`b`非常相似，因为它们的平均值都是0.0，尽管钟形曲线的形状略有不同。然而，`c`的平均值为0.1。我们希望t检验能够检测到这一点，并告诉我们，我们需要小心认为`a`和`c`是由相同的过程生成的。
- en: The output of the `ttest_ind` function lists the *p*-value (`pvalue`). And,
    as we expected, comparing `a` and `b` returns a *p*-value of 0.98, meaning that
    the probability we’d see the difference between the averages of these two sets
    of data, given they came from the same generating process, is about 98 percent.
    However, when we compare `a` and `c`, we get a *p*-value of 2.7 percent (0.027).
    This means there is about a 3 percent chance we’d see the difference between `a`
    and `c` if they were generated by the same process. Therefore, we conclude that
    `a` and `c` are from different processes. We state, then, that the difference
    between these two datasets is *statistically significant*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`ttest_ind`函数的输出列出了*p*-值（`pvalue`）。正如我们预期的那样，比较`a`和`b`返回了一个*p*-值为0.98，意味着在假设这两组数据来自相同的生成过程的情况下，平均值之间的差异的概率大约为98%。然而，当我们比较`a`和`c`时，得到一个*p*-值为2.7%（0.027）。这意味着如果`a`和`c`是由相同过程生成的，看到它们之间的差异的概率约为3%。因此，我们得出结论，`a`和`c`来自不同的过程。我们可以说，这两组数据的差异是*统计学显著*的。'
- en: Historically, *p*-values less than 0.05 have been considered statistically significant.
    However, this threshold is arbitrary, and recent experience in replicating experiments,
    especially in the soft sciences, has led to a call for a stricter threshold. Using
    a *p*-value of 0.05 means you’ll be wrong about 1 time in 20 (1/20 = 0.05), which
    is too generous a threshold. That said, a *p*-value close to 0.05 suggests that
    *something* is going on, and more investigation (and a larger dataset) is warranted.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，*p*-值小于0.05被认为具有统计学显著性。然而，这一阈值是任意设定的，最近在实验重复性，尤其是软科学领域的经验表明，应该设定更严格的阈值。使用*p*-值为0.05意味着你在20次中大约会错1次（1/20
    = 0.05），这是一个过于宽松的阈值。话虽如此，接近0.05的*p*-值仍然表明“某些事情”正在发生，更多的调查（以及更大的数据集）是必要的。
- en: Matplotlib
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Matplotlib
- en: 'We’ll use Matplotlib to generate graphs. Let’s verify its 2D and 3D plotting
    abilities here. First, a simple 2D example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Matplotlib来生成图形。这里我们来验证它的2D和3D绘图能力。首先，展示一个简单的2D示例：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This example loads NumPy, with which Matplotlib works best, and generates a
    vector, `x`, of 100 random values, [0, 1), the output of `np.random.random`. We
    then use `plt.plot` to plot the vector and `plt.show` to display it. Matplotlib
    output is interactive. Play around with the plot to get familiar with how to use
    the plot window. For example, [Figure 1-1](ch01.xhtml#ch01fig01) shows what the
    plot window looks like on Linux. Since the plot is random, you’ll see a different
    sequence of values, but the controls on the window will be the same.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例加载了NumPy，Matplotlib最适合与其配合使用，并生成一个包含100个随机值的向量`x`，值范围在[0, 1)之间，这是`np.random.random`的输出。接着，我们使用`plt.plot`绘制该向量，并用`plt.show`显示它。Matplotlib的输出是交互式的。可以玩弄图形窗口，熟悉如何使用该窗口。例如，[图1-1](ch01.xhtml#ch01fig01)显示了Linux系统中图形窗口的样子。由于该图是随机生成的，你将看到不同的数值序列，但窗口中的控制按钮将保持相同。
- en: '![image](Images/01fig01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/01fig01.jpg)'
- en: '*Figure 1-1: A sample Matplotlib plotting window*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：一个示例Matplotlib绘图窗口*'
- en: 'For 3D, give this a try:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于3D图形，试试这个：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We first load the 3D axes toolkit, Matplotlib, and NumPy. Then, using NumPy,
    we generate three random vectors, [0, 1). These are our 3D points. Using `plt.figure`
    and `fig.add_subplot`, we set up a 3D projection. The `111` is shorthand telling
    Matplotlib that we want a grid of 1 × 1 and that the current plot should go in
    index 1 of that grid. So, `111` means a single plot. The `projection` keyword
    gets the plot ready for 3D. Finally, the scatter plot is made, `ax.scatter`, and
    shown, `plt.show`. As with the 2D plot, the 3D plot is interactive. Grab and hold
    with the mouse to rotate the plot.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先加载3D坐标轴工具包、Matplotlib和NumPy。然后，使用NumPy，我们生成三个随机向量，[0, 1)范围内。这些就是我们的3D点。通过`plt.figure`和`fig.add_subplot`，我们设置一个3D投影。`111`是Matplotlib的简写，表示我们需要一个1×1的网格，并且当前绘图应放在该网格的第一个位置。因此，`111`表示一个单一的绘图。`projection`关键字使得绘图准备好进行3D展示。最后，使用`ax.scatter`绘制散点图，并通过`plt.show`显示出来。与2D绘图一样，3D绘图是交互式的。用鼠标抓住并按住，可以旋转图形。
- en: Scikit-Learn
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Scikit-Learn
- en: The goal of this book is to cover the math of deep learning, not the implementation
    of deep learning. However, from time to time, it’ll be helpful to look at a simple
    neural network model or two. In those cases, we’ll make use of `sklearn`, in particular,
    the `MLPClassifier` class. Also, `sklearn` contains some useful tools for evaluating
    the performance of a model and for visualization of high-dimensional data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目标是讲解深度学习的数学原理，而不是深度学习的实现。然而，偶尔通过简单的神经网络模型会有所帮助。在这些情况下，我们将使用`sklearn`，特别是`MLPClassifier`类。此外，`sklearn`还包含一些有用的工具，用于评估模型的性能和可视化高维数据。
- en: 'As a quick example, let’s build a simple neural network to classify small 8×8-pixel
    grayscale images of handwritten digits. This dataset is built into `sklearn`.
    Here’s the code for the example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的示例，让我们构建一个简单的神经网络，用于分类手写数字的小型8×8像素灰度图像。这个数据集内置于`sklearn`中。以下是示例代码：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We first import NumPy. From `sklearn` itself, we import the `load_digits` function
    to return the small digit image dataset and the `MLPClassifier` class to train
    a traditional neural network, that is, a multilayer perceptron. We then get the
    digit data and pull out the images and their associated labels, 0 . . . 9 ❶. The
    digit images are stored as 8 × 8 = 64-element vectors representing the image unraveled
    so the rows are laid end to end. The digits data-set includes 1,797 images, so
    `digits` is a 2D NumPy array with 1,797 rows, with 64 columns per row, and `labels`
    is a vector of 1,797 digit labels.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入NumPy。然后从`sklearn`中导入`load_digits`函数，用于返回小的数字图像数据集，以及`MLPClassifier`类，用于训练传统神经网络，即多层感知器。接着，我们获取数字数据，并提取图像及其关联的标签，0
    . . . 9❶。数字图像以8×8 = 64元素向量的形式存储，表示图像展开后行像素逐一排列。数字数据集包括1,797张图像，因此`digits`是一个2D的NumPy数组，包含1,797行，每行64列，`labels`是一个包含1,797个数字标签的向量。
- en: We randomize the order of the images, being careful to keep the right label
    with the right digit ❷ and extract train and test data (`x_train`, `x_test`) and
    labels (`y_train`, `y_test`). We’ll set the first 200 digit images aside to use
    as test data and train the model with the remaining 1,597 images. This leaves
    us with approximately 160 images of each digit to train with and about 20 of each
    digit for testing.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将图像的顺序随机化，注意确保每个标签与对应的数字正确匹配❷，并提取训练和测试数据（`x_train`，`x_test`）及标签（`y_train`，`y_test`）。我们将前200张数字图像留作测试数据，并用剩下的1,597张图像进行模型训练。这意味着每个数字大约有160张图像用于训练，每个数字大约有20张图像用于测试。
- en: Next, we build the model by creating an instance of `MLPClassifier` ❸. We’ll
    take all the defaults and specify only the size of the single hidden layer, which
    has 128 nodes. The input vectors are 64 elements, so we double that for the hidden
    layer. There’s no need to specify the output layer size explicitly; `sklearn`
    deduces it from the labels in `y_train`. Training the model is a simple call to
    `clf.fit` passing the training image vectors (`x_train`) and labels (`y_train`).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过创建`MLPClassifier`的实例来构建模型❸。我们将使用所有默认设置，仅指定单一隐藏层的大小，该层有128个节点。输入向量有64个元素，因此我们将其大小加倍，以适应隐藏层。无需显式指定输出层的大小；`sklearn`会根据`y_train`中的标签来推断。训练模型只需简单地调用`clf.fit`，并传入训练图像向量（`x_train`）和标签（`y_train`）。
- en: Training for a small dataset like this will take only a few seconds. When it’s
    done, the learned weights and biases are in the model (`clf`). We first get the
    score, the overall accuracy (`score`), and then the actual model class label predictions
    on the test set (`pred`). Any errors are captured in `err` by looking for places
    where the actual label (`y_test`) does not match the prediction. We end by showing
    the actual class label and predicted label for the errors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的一个小数据集，训练只需要几秒钟。当训练完成后，学习到的权重和偏差会存储在模型（`clf`）中。我们首先获取得分，整体准确率（`score`），然后是测试集上的实际模型类标签预测（`pred`）。通过查找实际标签（`y_test`）与预测结果不匹配的地方，任何错误都会被捕捉到`err`中。最后，我们展示错误的实际类标签和预测标签。
- en: Each time we run this code, we’ll get a different ordering of the digit data,
    which leads to a different train and test set. Additionally, neural networks are
    randomly initialized prior to training. So, we’ll get a different result each
    time. The first time I ran this code, I had an overall score of 0.97 (97 percent)
    accuracy. Guessing would give an accuracy of about 10 percent, so we can say that
    the model has learned rather well.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行这段代码时，我们都会得到不同的数字数据排序，这导致了不同的训练集和测试集。此外，神经网络在训练前是随机初始化的。所以，每次我们都会得到不同的结果。我第一次运行这段代码时，整体得分为0.97（97%的准确率）。如果通过猜测来预测，准确率大约为10%，因此我们可以说模型已经学得相当不错了。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to configure our working environment. I then
    introduced our suite of Python toolkits at a high level and supplied pointers
    on where to learn more. With the work environment secure and flourishing, the
    next chapter dives headfirst into probability theory.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何配置我们的工作环境。接着，我从高层次介绍了我们的 Python 工具包，并提供了进一步学习的指引。在工作环境安全并繁荣发展的基础上，下一章将深入探讨概率论。
