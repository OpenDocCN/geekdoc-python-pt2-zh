["```py\nmkdir C:\\Users\\hanna\\penguins\nmkdir C:\\Users\\hanna\\penguins\\notebooks\n```", "```py\nconda create --prefix C:\\Users\\hanna\\penguins\\penguins_env\nconda activate C:\\Users\\hanna\\penguins\\penguins_env\nconda install python notebook pandas seaborn \nconda install -c conda-forge scikit-learn\n```", "```py\ncd C:\\Users\\hanna\\penguins\\notebooks\n```", "```py\njupyter notebook\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Enable multiple outputs per cell:\n%config InteractiveShell.ast_node_interactivity = 'all'\n\n# Set plotting styles\nsns.set_style('whitegrid')\nsns.set_palette(['black', 'red', 'grey'])\n```", "```py\n# Load penguins dataset:\ndf = sns.load_dataset('penguins')\n```", "```py\n# View dataframe head and tail:\ndf\n```", "```py\n# Rename sex column to 'gender' and verify change:\ndf.rename(columns={'sex': 'gender'}, inplace=True)\ndf.head()\n```", "```py\n# Check for duplicate rows:\nduplicate_rows = df[df.duplicated(keep=False)]\nprint(f'Number of duplicate rows = {len(duplicate_rows)}')\n```", "```py\nNumber of duplicate rows = 0\n```", "```py\ndf.drop_duplicates(inplace=True)\n```", "```py\n# Check for duplicates across specified columns:\ndf[df.duplicated(['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g'])]\n```", "```py\n# Find null values\ndf.isnull().sum()\ndf[df.isnull().any(axis=1)]\n```", "```py\ndf['col1'] = df['col1'].fillna(df['col1'].mean())\n```", "```py\n# Drop Null Values\ndf = df.dropna(how='any')\ndf.isnull().sum()\n```", "```py\n# Check index values after dropping rows.\ndf.head()\n```", "```py\n# After dropping nulls, reindex:\ndf.reset_index(drop=True, inplace=True)\ndf.head()\n```", "```py\ndf = df.reset_index(drop=True).\n```", "```py\n# Display datatypes and data statistics:\ndf.dtypes\ndf.describe(include='all')\n```", "```py\n# Plot species and gender counts:\nsns.countplot(data=df, x='species', hue='gender')\nplt.xticks(rotation=45)\nplt.legend(loc='best');\n```", "```py\n# Count and plot penguin species per island:\nsns.countplot(data=df, x='island', hue='species')\nplt.legend(loc='best');\n```", "```py\n# Count penguins per species per island\ncount_df = (pd.get_dummies(data=df, columns=['species']).groupby(\n    'island', as_index=False).sum())\nprint(count_df.columns)\ncount_df[['island', 'species_Adelie', 'species_Gentoo', 'species_Chinstrap']]\n```", "```py\nIndex(['island', 'bill_length_mm', 'bill_depth_mm', 'flipper_length_mm',\n      'body_mass_g', 'species_Adelie', 'species_Chinstrap', 'species_\n      Gentoo'],\n      dtype='object')\n```", "```py\nsns.pairplot(df, hue='species', markers=['o', '*', 'd']);\n```", "```py\n# Investigate bill length vs. body mass by species by gender:\nsns.scatterplot(data=df, \n                x='body_mass_g', \n                y='bill_length_mm', \n                hue='species', \n                style='species', \n                size='gender')\n\nplt.legend(bbox_to_anchor=(1.3, 1.0));\n```", "```py\n# Plot body mass by species by gender:\nbox = sns.boxplot(x=\"body_mass_g\", \n                  y=\"gender\", \n                  orient='h', \n                  hue='species',\n                  data=df)\n```", "```py\n# Plot bill length by species by gender:\nstrip = sns.stripplot(data=df,\n                      x='bill_length_mm', \n                      y='gender', \n                      hue='species', \n                      dodge=True)\n```", "```py\n# Plot bill depth vs. bill length by species:\nsns.jointplot(data=df, \n              x=\"bill_length_mm\", \n              y=\"bill_depth_mm\", \n              kind=\"kde\",\n              hue=\"species\", \n              alpha=0.75);\n```", "```py\n   # Make radial visualization:\n➊ sns.set_theme(context='talk')\n   plt.figure(figsize=(7, 7))\n➋ pd.plotting.radviz(df.drop(['island', 'gender'], axis=1), \n                      class_column='species',\n                      color=['black', 'red', 'grey'], \n                      marker='+', \n                      alpha=0.7)\n   plt.legend(loc=(1.01, 0.7));\n```", "```py\n# Restore theme and palette:\nsns.set_theme(context='notebook') \nsns.set_style(\"whitegrid\")\nsns.set_palette(['black', 'red', 'grey'])\n```", "```py\ncorrelations = df.corr()\nsns.heatmap(correlations, center=1, annot=True);\n```", "```py\n   # Prepare for k-NN.\n   # Add numerical columns for island and gender labels:\n   knn_df = pd.get_dummies(data=df, columns=['island'])\n\n➊ knn_df['male'] = 0\n   knn_df.loc[knn_df['gender'] == 'Male', 'male'] = 1\n\n   knn_df['female'] = 0\n   knn_df.loc[knn_df['gender'] == 'Female', 'female'] = 1\n\n➋ knn_df.iloc[:300:30]\n```", "```py\n   # Break out numerical and target data and split off train and test sets:\n   from sklearn.model_selection import train_test_split\n\n➊ X = knn_df.select_dtypes(include='number')  # Use numerical columns.\n   y = knn_df['species']  # The prediction target.\n\n   # Split out training and testing datasets:\n➋ X_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                       test_size=0.25,\n                                                       random_state=300)\n```", "```py\n   # Normalize numerical columns to 0-1:\n   from sklearn.compose import make_column_transformer\n   from sklearn.preprocessing import MinMaxScaler\n\n➊ column_transformer = make_column_transformer((MinMaxScaler(),\n                                                 ['bill_depth_mm',\n                                                  'bill_length_mm',\n                                                  'flipper_length_mm',\n                                                  'body_mass_g']), \n                                                remainder='passthrough')\n   X_train = column_transformer.fit_transform(X_train) ➋ X_train = pd.DataFrame(data=X_train, \n                          columns=column_transformer.get_feature_names_out())\n   X_train.head()\n\n   X_test = column_transformer.fit_transform(X_test)\n   X_test = pd.DataFrame(data=X_test, \n                         columns=column_transformer.get_feature_names_out())\n   X_test.head()\n```", "```py\n# Run k-NN and check accuracy of prediction:\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\nknn = KNeighborsClassifier(n_neighbors=5, p=2)\nknn.fit(X_train, y_train)\npredictions = knn.predict(X_test)\n\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Model accuracy = {accuracy}\")\n```", "```py\n   # Run cross-validation on k:\n   import numpy as np\n   from sklearn.model_selection import cross_validate\n\n   cv_metrics = {'train_score_ave': [],\n                 'cv_score_ave': []}\n\n   num_neighbors = {'k': np.arange(1, 25)} for k in num_neighbors['k']:\n    ➊ knn = KNeighborsClassifier(n_neighbors=k, p=2)\n       scores = cross_validate(knn, X_train, y_train, return_train_score=True)\n       cv_metrics['cv_score_ave'].append(np.mean(scores['test_score']))\n       cv_metrics['train_score_ave'].append(np.mean(scores['train_score']))\n\n➋ cv_metrics_df = pd.DataFrame(cv_metrics)\n   cv_metrics_df.insert(loc=0, column='k', value=num_neighbors['k'])\n   cv_metrics_df.head(10)\n\n   best_k = cv_metrics_df.loc[cv_metrics_df['cv_score_ave'].idxmax()]\n   print(f\"Best k for current training and testing set: {int(best_k['k'])}\")\n```", "```py\n# Plot cross-validation results:\nsns.set_palette(['black', 'red', 'grey']) \ndf_melt = cv_metrics_df.melt('k', var_name='cols',  value_name='vals')\nsns.lineplot(x='k', y=\"vals\", hue='cols', data=df_melt);\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {'n_neighbors': np.arange(1, 20),\n          'weights': ['uniform', 'distance'], \n          'p': [1, 2]}\n\ngrid = GridSearchCV(estimator=knn, \n                    param_grid=params, \n                    scoring='accuracy', \n                    verbose=1)\ngrid_results = grid.fit(X_train, y_train)\nprint(f\"Best parameter values: {grid_results.best_params_}\")\n```", "```py\nknn = KNeighborsClassifier(n_neighbors=4, p=2, weights='uniform')\nknn.fit(X_train, y_train)\npredictions=knn.predict(X_test) \n\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Model accuracy = {accuracy}\")\n```"]