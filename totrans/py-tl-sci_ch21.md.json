["```py\nIn [1]: from datetime import date, time, datetime\n\nIn [2]: now=datetime.now()\n\nIn [3]: now\nOut[3]: datetime.datetime(2022, 10, 27, 17, 51, 26, 382489)\n\nIn [4]: type(now)\nOut[4]: datetime.datetime\n```", "```py\nIn [5]: now.day\nOut[5]: 27\n\nIn [6]: now.hour\nOut[6]: 17\n\nIn [7]: now.minute\nOut[7]: 51\n\nIn [8]: now.microsecond\nOut[8]: 382489\n```", "```py\nIn [9]: now.date()\nOut[9]: datetime.date(2022, 10, 27)\n\nIn [10]: now.time()\nOut[10]: datetime.time(17, 51, 26, 382489)\n```", "```py\nIn [11]: ts = datetime(1976, 7, 4, 0, 0, 1, 1)\n```", "```py\nIn [12]: str(ts)\nOut[12]: '1976-07-04 00:00:01.000001'\n```", "```py\nIn [13]: ts = datetime(1976, 7, 4)\n\nIn [14]: str(ts)\nOut[14]: '1976-07-04 00:00:00'\n```", "```py\nIn [15]: delta = datetime(2022, 10, 28) - datetime(1956, 1, 31)\n\nIn [16]: delta\nOut[16]: datetime.timedelta(days=24377)\n\nIn [17]: age = delta.days / 365.2425\n\nIn [18]: int(age)\nOut[18]: 66\n```", "```py\nIn [19]: dt1 = datetime(2022, 10, 28, 10, 36, 59, 3)\n\nIn [20]: dt2 = datetime(1956, 1, 31, 0, 0, 0, 0)\n\nIn [21]: delta = dt1 - dt2\n\nIn [22]: delta\nOut[22]: datetime.timedelta(days=24377, seconds=38219, microseconds=3)\n```", "```py\nIn [23]: now = datetime.now()\n\nIn [24]: now.strftime('%m/%d/%y %H:%M')\nOut[24]: '10/30/22 09:14' In [25]: now.strftime('%x')\nOut[25]: '10/30/22'\n\nIn [26]: now.strftime('%A, %B %d, %Y')\nOut[26]: 'Sunday, October 30, 2022'\n\nIn [27]: now.strftime('%c')\nOut[27]: 'Sun Oct 30 09:14:00 2022'\n```", "```py\nIn [28]: from dateutil.parser import parse\n```", "```py\nIn [29]: parse('Oct 31, 2022, 11:59 PM')\nOut[29]: datetime.datetime(2022, 10, 31, 23, 59)\n```", "```py\nIn [30]: parse('2/10/2022', dayfirst=True)\nOut[30]: datetime.datetime(2022, 10, 2, 0, 0)\n```", "```py\nIn [31]: data = ['2022/10/31', 'bobcat',\n '2022/11/1', 'fox', \n                  '2022/11/2', ['bobcat', 'opposum']]\n\nIn [32]: data_dt = data.copy() In [33]: for i, date in enumerate(data): \n     ...:     if i % 2 == 0:\n     ...:         data_dt[i] = parse(date)\n\nIn [34]: data_dt\nOut[34]: \n[datetime.datetime(2022, 10, 31, 0, 0),\n'bobcat',\ndatetime.datetime(2022, 11, 1, 0, 0),\n'fox',\ndatetime.datetime(2022, 11, 2, 0, 0),\n['bobcat', 'opposum']]\n```", "```py\nIn [35]: date = '2022_10_31'\n```", "```py\nIn [36]: datetime.strptime(date, '%Y_%m_%d')\nOut[36]: datetime.datetime(2022, 10, 31, 0, 0)\n```", "```py\nIn [37]: dates = ('8/11/84', '9/11/84', '10/11/84')\n\nIn [38]: dates_dt = [datetime.strptime(date, '%m/%d/%y') for date in dates]\n\nIn [39]: dates_dt\nOut[39]: \n[datetime.datetime(1984, 8, 11, 0, 0),\ndatetime.datetime(1984, 9, 11, 0, 0),\ndatetime.datetime(1984, 10, 11, 0, 0)]\n```", "```py\nIn [40]: import datetime as dt\n   ...:  import numpy as np\n   ...:  import matplotlib.pyplot as plt\n\nIn [41]: dates = [dt.date(2022, 1, 31),\n   ...:           dt.date(2022, 2, 28),\n   ...:           dt.date(2022, 3, 31),\n   ...:           dt.date(2022, 4, 30)]\n\nIn [42]: obs = [5, 12, 25, 42]\n\nIn [43]: plt.plot(dates, obs);\n```", "```py\nIn [44]: import matplotlib.dates as mdates\n\nIn [45]: months = mdates.MonthLocator()\n\nIn [46]: days = mdates.DayLocator() In [47]: date_fmt = mdates.DateFormatter('%Y-%m')\n\nIn [48]: fig, ax = plt.subplots()\n    ...: plt.plot(dates, obs)\n    ...: ax.xaxis.set_major_locator(months)\n    ...: ax.xaxis.set_major_formatter(date_fmt)\n    ...: ax.xaxis.set_minor_locator(days)\n```", "```py\nIn [49]: import pytz\n\nIn [50]: pytz.common_timezones[-10:]\nOut[50]: \n['Pacific/Wake',\n'Pacific/Wallis',\n'US/Alaska',\n'US/Arizona',\n'US/Central',\n'US/Eastern',\n'US/Hawaii',\n'US/Mountain',\n'US/Pacific',\n'UTC']\n```", "```py\nIn [51]: aware = datetime(2022, 11, 2, 21, 15, 19, 426910, pytz.UTC)\n\nIn [52]: aware\nOut[52]: datetime.datetime(2022, 11, 2, 21, 15, 19, 426910, tzinfo=<UTC>)\n```", "```py\nIn [53]: unaware = datetime(2022, 11, 3, 0, 0, 0)\n\nIn [54]: aware = pytz.timezone('Europe/London').localize(unaware)\n\nIn [55]: aware\nOut[55]: datetime.datetime(2022, 11, 3, 0, 0, tzinfo=<DstTzInfo 'Europe/\nLondon' GMT0:00:00 STD>)\n```", "```py\nIn [56]: here = datetime(2022, 11, 3, 14, 51, 3,\n tzinfo=pytz.timezone('US/Central'))\n\nIn [57]: there = here.astimezone(pytz.timezone('Europe/London')) In [58]: there\nOut[58]: datetime.datetime(2022, 11, 3, 20, 42, 3, tzinfo=<DstTzInfo 'Europe/\nLondon' GMT0:00:00 STD>)\n```", "```py\nIn [59]: import pandas as pd\nIn [60]: ts = pd.Timestamp('2021, 2, 23 00:00:00')\n\nIn [61]: ts\nOut[61]: Timestamp('2021-02-23 00:00:00')\n```", "```py\nIn [62]: dti = pd.DatetimeIndex(['2022-03-31 14:39:00', \n                                 '2022-04-01 00:00:00'])\n\nIn [63]: dti\nOut[63]: DatetimeIndex(['2022-03-31 14:39:00', '2022-04-01 00:00:00'],\ndtype='datetime64[ns]', freq=None)\n```", "```py\nIn [64]: import numpy as np\n   ...:  from datetime import datetime\n   ...:  import pandas as pd\n\nIn [65]: dti = pd.to_datetime([\"2/23/2021\", \n   ...:                        np.datetime64(\"2021-02-23\"),\n   ...:                        datetime(2022, 2, 23)])\n\nIn [66]: dti\nOut[66]: DatetimeIndex(['2021-02-23', '2021-02-23', '2022-02-23'],\ndtype='datetime64[ns]', freq=None)\n```", "```py\nIn [67]: dates = ['2022-3-31 14:39:00',\n   ...:          '2022-4-1 00:00:00',\n   ...:          '2022-4-2 00:00:20',\n   ...:          '']\n\nIn [68]: dti = pd.to_datetime(dates)\n\nIn [69]: dti\nOut[69]: \nDatetimeIndex(['2022-03-31 14:39:00', '2022-04-01 00:00:00',\n'2022-04-02 00:00:20', 'NaT'],\ndtype='datetime64[ns]', freq=None)\n```", "```py\nDate,Obs\n3/30/22 11:43 PM,deer\n3/31/22 1:05 AM,fox\n4/1/22 2:54 AM,cougar\n```", "```py\nIn [70]: csv_df = pd.read_csv('C:/Users/hanna/camera_1.csv')\n\nIn [71]: csv_df\nOut[71]: \n              Date    Obs\n0 3/30/22 11:43 PM   deer\n1  3/31/22 1:05 AM    fox\n2   4/1/22 2:54 AM cougar\n```", "```py\nIn [72]: csv_df['Date'] = pd.to_datetime(csv_df['Date'])\n\nIn [73]: csv_df\nOut[73]: \n                 Date    Obs\n0 2022-03-30 23:43:00   deer\n1 2022-03-31 01:05:00    fox\n2 2022-04-01 02:54:00 cougar\n```", "```py\nIn [74]: import pytz\n```", "```py\nIn [75]: my_tz = pytz.timezone('US/Eastern')\nIn [76]: csv_df['Date'] = csv_df['Date'].dt.tz_localize(my_tz)\n```", "```py\nIn [77]: print(csv_df['Date'])\n0 2022-03-30 23:43:00-04:00\n1 2022-03-31 01:05:00-04:00\n2 2022-04-01 02:54:00-04:00\nName: Date, dtype: datetime64[ns, US/Eastern]\n```", "```py\nIn [78]: csv_df['Date_UTC'] = csv_df['Date'].dt.tz_convert(pytz.utc)\n```", "```py\nIn [79]: print(csv_df[['Date', 'Date_UTC']])\n                       Date                  Date_UTC\n0 2022-03-30 23:43:00-04:00 2022-03-31 03:43:00+00:00\n1 2022-03-31 01:05:00-04:00 2022-03-31 05:05:00+00:00\n2 2022-04-01 02:54:00-04:00 2022-04-01 06:54:00+00:00\n```", "```py\nIn [80]: csv_df = csv_df.set_index('Date_UTC')\nOut[80]: \n                                         Date Obs\nDate_UTC \n2022-03-31 03:43:00+00:00 2022-03-31 03:43:00 deer\n2022-03-31 05:05:00+00:00 2022-03-31 05:05:00 fox\n2022-04-01 06:54:00+00:00 2022-04-01 06:54:00 cougar\n```", "```py\nIn [81]: day_index = pd.date_range(start='2/23/21', end='3/1/21')\n\nIn [82]: day_index\nOut[82]: \nDatetimeIndex(['2021-02-23', '2021-02-24', '2021-02-25', '2021-02-26',\n'2021-02-27', '2021-02-28', '2021-03-01'],\ndtype='datetime64[ns]', freq='D')\n```", "```py\nIn [83]: day_index = pd.date_range(start='2/23/21 12:59:59', periods=6)\n\nIn [84]: day_index\nOut[84]: \nDatetimeIndex(['2021-02-23 12:59:59', '2021-02-24 12:59:59',\n'2021-02-25 12:59:59', '2021-02-26 12:59:59',\n'2021-02-27 12:59:59', '2021-02-28 12:59:59'],\ndtype='datetime64[ns]', freq='D')\n```", "```py\nIn [85]: day_index_normal = pd.date_range(start='2/23/21 12:59:59',\n periods=6, \n normalize=True)\n\nIn [86]: day_index_normal\nOut[86]: \nDatetimeIndex(['2021-02-23', '2021-02-24', '2021-02-25', '2021-02-26',\n'2021-02-27', '2021-02-28'],\ndtype='datetime64[ns]', freq='D')\n```", "```py\nIn [87]: hour_index = pd.date_range(start='2/23/21', \n periods=6, \n freq='H', \n tz='UTC')\n\nIn [88]: hour_index\nOut[88]: \nDatetimeIndex(['2021-02-23 00:00:00+00:00', '2021-02-23 01:00:00+00:00',\n'2021-02-23 02:00:00+00:00', '2021-02-23 03:00:00+00:00',\n'2021-02-23 04:00:00+00:00', '2021-02-23 05:00:00+00:00'],\ndtype='datetime64[ns, UTC]', freq='H')\n```", "```py\nIn [89]: hour_index.freq\nOut[89]: <Hour>\n```", "```py\nIn [90]: bi_hour_index = pd.date_range(start='2/23/21', periods=6, freq='2H')\n\nIn [91]: bi_hour_index\nOut[91]: \nDatetimeIndex(['2021-02-23 00:00:00', '2021-02-23 02:00:00',\n'2021-02-23 04:00:00', '2021-02-23 06:00:00',\n'2021-02-23 08:00:00', '2021-02-23 10:00:00'],\ndtype='datetime64[ns]', freq='2H')\n```", "```py\nIn [92]: pd.date_range(start='2/23/21', periods=6, freq='2H30min')\nOut[92]:\nDatetimeIndex(['2021-02-23 00:00:00', '2021-02-23 02:30:00',\n'2021-02-23 05:00:00', '2021-02-23 07:30:00',\n'2021-02-23 10:00:00', '2021-02-23 12:30:00'],\ndtype='datetime64[ns]', freq='150T')\n```", "```py\nIn [93]: p_index = pd.period_range(start='2022-9-1', \n end='2022-9-30', \n freq='D')\n```", "```py\nIn [94]: ts = pd.Series(np.random.randn(30), index=p_index)\n\nIn [95]: ts\nOut[95]: \n2022-09-01 0.412853\n2022-09-02 0.350678\n2022-09-03 0.086216\n--snip--\n2022-09-28 1.944123\n2022-09-29 0.311337\n2022-09-30 0.906780\nFreq: D, dtype: float64\n```", "```py\nIn [96]: year_index = pd.period_range(2001, 2006, freq='A-DEC')\n\nIn [97]: year_index\nOut[97]: PeriodIndex(['2001', '2002', '2003', '2004', '2005', '2006'],\ndtype='period[A-DEC]')\n\nIn [98]: year_index + 10\nOut[98]: PeriodIndex(['2011', '2012', '2013', '2014', '2015', '2016'],\ndtype='period[A-DEC]')\n```", "```py\nIn [99]: month_index = pd.period_range('2022-01-01', '2022-12-31', freq='M')\n\nIn [100]: month_index\nOut[100]: \nPeriodIndex(['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n'2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12'],\ndtype='period[M]')\n```", "```py\nIn [101]: hour_index = month_index.asfreq('H', how='start')\n\nIn [102]: hour_index\nOut[102]: \nPeriodIndex(['2022-01-01 00:00', '2022-02-01 00:00', '2022-03-01 00:00',\n'2022-04-01 00:00', '2022-05-01 00:00', '2022-06-01 00:00',\n'2022-07-01 00:00', '2022-08-01 00:00', '2022-09-01 00:00',\n'2022-10-01 00:00', '2022-11-01 00:00', '2022-12-01 00:00'],\ndtype='period[H]')\n```", "```py\nIn [103]: pd.timedelta_range(start='1 day', periods = 5)\nOut[103]: TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'],\ndtype='timedelta64[ns]', freq='D')\n```", "```py\nIn [104]: pd.timedelta_range(start=\"1 day\", end=\"2 day\", freq=\"108min\")\nOut[104]: \nTimedeltaIndex(['1 days 00:00:00', '1 days 01:48:00', '1 days 03:36:00',\n'1 days 05:24:00', '1 days 07:12:00', '1 days 09:00:00',\n'1 days 10:48:00', '1 days 12:36:00', '1 days 14:24:00',\n'1 days 16:12:00', '1 days 18:00:00', '1 days 19:48:00',\n'1 days 21:36:00', '1 days 23:24:00'],\ndtype='timedelta64[ns]', freq='108T')\n```", "```py\nIn [105]: from pandas.tseries.offsets import Day\n\nIn [106]: apollo_11_moon_landing = pd.to_datetime('1969, 7, 20')\n\nIn [107]: apollo_11_splashdown = apollo_11_moon_landing + 4 * Day()\nIn [108]: print(f\"{apollo_11_splashdown.month}/{apollo_11_splashdown.day}\")\n7/24\n```", "```py\nIn [109]: from pandas.tseries.offsets import DateOffset\n\nIn [110]: ts = pd.Timestamp('2021-02-23 09:10:11')\n\nIn [111]: ts + DateOffset(months=4)\nOut[111]: Timestamp('2021-06-23 09:10:11')\n```", "```py\nIn [112]: from pandas.tseries.offsets import Hour\n\nIn [113]: pre_dst_date = pd.Timestamp('2022-03-13 1:00:00', tz='US/Central')\n\nIn [114]: pre_dst_date\nOut[114]: Timestamp('2022-03-13 01:00:00-0600', tz='US/Central')\n\nIn [115]: post_dst_date = pre_dst_date + Hour()\n\nIn [116]: post_dst_date\nOut[116]: Timestamp('2022-03-13 03:00:00-0500', tz='US/Central')\n```", "```py\nIn [117]: ts = pd.Series(range(10), index=pd.date_range('2022', \n freq='D', \n periods=10))\nIn [118]: ts\nOut[118]: \n2022-01-01 0\n2022-01-02 1\n2022-01-03 2\n2022-01-04 3\n2022-01-05 4\n2022-01-06 5\n2022-01-07 6\n2022-01-08 7\n2022-01-09 8\n2022-01-10 9\nFreq: D, dtype: int64\n```", "```py\nIn [119]: ts[::2]\nOut[119]: \n2022-01-01 0\n2022-01-03 2\n2022-01-05 4\n2022-01-07 6\n2022-01-09 8\nFreq: 2D, dtype: int64\n```", "```py\nIn [120]: ts['2022-01-05']\nOut[120]: 4\n```", "```py\nIn [121]: ts['1/5/2022']\nOut[121]: 4\n\nIn [122]: ts['January 5, 2022']\nOut[122]: 4\n```", "```py\nIn [123]: ts['2021-12-31':'2022-1-2']\nOut[123]: \n2022-01-01 0\n2022-01-02 1\nFreq: D, dtype: int64\n```", "```py\nIn [124]: pd.Series(pd.date_range('2022', freq='D', periods=3))\nOut[124]: \n0 2022-01-01\n1 2022-01-02\n2 2022-01-03\ndtype: datetime64[ns]\n```", "```py\nIn [125]: import pandas as pd\n\nIn [126]: dti = pd.period_range('2021-02-23', freq='Y', periods=3)\n\nIn [127]: df = pd.DataFrame({'value': [10, 20, 30]}, index=dti)\n\nIn [128]: df.resample('Q').ffill()\n```", "```py\nIn [129]: df.resample('Q').bfill()\n```", "```py\nIn [130]: df.resample('Q').bfill().fillna(40)\nOut[130]: \n       value\n2021Q1  10.0\n2021Q2  20.0\n2021Q3  20.0\n2021Q4  20.0\n2022Q1  20.0\n2022Q2  30.0\n2022Q3  30.0\n2022Q4  30.0\n2023Q1  30.0\n2023Q2  40.0\n2023Q3  40.0\n2023Q4  40.0\n```", "```py\nIn [131]: df = pd.read_csv(\"texas-history.csv\", \n    ...:                  usecols=['date','deathIncrease'])\n\nIn [132]: df.head()\nOut[132]: \n        date deathIncrease\n0 2021-03-07            84\n1 2021-03-06           233\n2 2021-03-05           256\n3 2021-03-04           315\n4 2021-03-03           297\n```", "```py\nIn [133]: df = df.sort_values('date', ascending=True)\n\nIn [134]: df.head()\nOut[134]: \n          date deathIncrease\n369 2020-03-03             0\n368 2020-03-04             0\n367 2020-03-05             0\n366 2020-03-06             0\n365 2020-03-07             0\n```", "```py\nIn [135]: df.dtypes\nOut[135]: \ndate object\ndeathIncrease int64\ndtype: object\n```", "```py\nIn [136]: df = df.set_index(pd.DatetimeIndex(df['date'])).drop('date',\n    ...:                                                       axis=1)\nIn [137]: df.head()\nOut[137]: \n            deathIncrease\ndate \n2020-03-03              0\n2020-03-04              0\n2020-03-05              0\n2020-03-06              0\n2020-03-07              0\n```", "```py\nIn [138]: df.plot();\n```", "```py\nIn [139]: print(df.max(), df.idxmax())\ndeathIncrease 675\ndtype: int64 deathIncrease 2020-07-27\ndtype: datetime64[ns]\n```", "```py\nIn [140]: df.loc['2020-7-27', 'deathIncrease'] = 239\n\nIn [141]: df.plot();\n```", "```py\nIn [142]: df_weekdays = df.copy()\n\nIn [143]: df_weekdays['weekdays'] = df.index.day_name()\n```", "```py\nIn [144]: print(df_weekdays.iloc[90:115])\n           deathIncrease    weekdays\ndate \n2020-06-01             6      Monday\n2020-06-02            20     Tuesday\n2020-06-03            36   Wednesday\n2020-06-04            33    Thursday\n2020-06-05            21      Friday\n2020-06-06            31    Saturday\n2020-06-07            11      Sunday\n2020-06-08             0      Monday\n2020-06-09            23     Tuesday\n2020-06-10            32   Wednesday\n2020-06-11            35    Thursday\n2020-06-12            19      Friday\n2020-06-13            18    Saturday\n2020-06-14            19      Sunday\n2020-06-15             7      Monday\n2020-06-16            46     Tuesday\n2020-06-17            33   Wednesday\n2020-06-18            43    Thursday\n2020-06-19            35      Friday\n2020-06-20            25    Saturday\n2020-06-21            17      Sunday\n2020-06-22            10      Monday\n2020-06-23            28     Tuesday\n2020-06-24            29   Wednesday\n2020-06-25            47    Thursday\n```", "```py\nIn [145]: df.resample('W').sum().plot();\n```", "```py\nIn [146]: df.resample('m').sum().plot();\n```", "```py\nIn [147]: raw_dict = {'2022-02-23 09:00:00': 100,\n     ...:             '2022-02-23 10:00:00': 200,\n     ...:             '2022-02-23 11:00:00': 100,\n     ...:             '2022-02-23 12:00:00': 300}\n\nIn [148]: ts = pd.Series(raw_dict)\n\nIn [149]: ts.index = pd.to_datetime(ts.index)\n\nIn [150]: ts.resample('2H').sum()\nOut[150]: \n2022-02-23 08:00:00 100\n2022-02-23 10:00:00 300\n2022-02-23 12:00:00 300\nFreq: 2H, dtype: int64\n```", "```py\nIn [151]: ts.resample('2H', origin='start').sum()\nOut[151]: \n2022-02-23 09:00:00 300\n2022-02-23 11:00:00 400\nFreq: 2H, dtype: int64\n```", "```py\nIn [152]: raw = ['2021-02-23 09:46:48',\n     ...:        '2021-02-23 09:46:51', ...:        '2021-02-23 09:46:53',\n     ...:        '2021-02-23 09:46:55',\n     ...:        '2021-02-23 09:47:00']\n```", "```py\nIn [153]: ts = pd.Series(np.arange(5), index=pd.to_datetime(raw))\n\nIn [154]: ts\nOut[154]: \n2021-02-23 09:46:48 0\n2021-02-23 09:46:51 1\n2021-02-23 09:46:53 2\n2021-02-23 09:46:55 3\n2021-02-23 09:47:00 4\ndtype: int32\n```", "```py\nIn [155]: ts_regular = ts.resample('s').interpolate(method='linear')\n\nIn [156]: ts_regular\nOut[156]: \n2021-02-23 09:46:48 0.000000\n2021-02-23 09:46:49 0.333333\n2021-02-23 09:46:50 0.666667\n2021-02-23 09:46:51 1.000000\n2021-02-23 09:46:52 1.500000\n2021-02-23 09:46:53 2.000000\n2021-02-23 09:46:54 2.500000\n2021-02-23 09:46:55 3.000000\n2021-02-23 09:46:56 3.200000\n2021-02-23 09:46:57 3.400000\n2021-02-23 09:46:58 3.600000\n2021-02-23 09:46:59 3.800000\n2021-02-23 09:47:00 4.000000\nFreq: S, dtype: float64\n```", "```py\nIn [157]: import pandas as pd\n\nIn [158]: raw_dict = {'2021-2-23, 06:00:00': 0,\n    ...:              '2021-2-23, 08:05:09': 1,\n    ...:              '2021-2-23, 08:49:13': 0,\n    ...:              '2021-2-23, 11:23:21': 1,\n    ...:              '2021-2-23, 11:28:14': 0}\n\nIn [159]: ts = pd.Series(raw_dict)\n\nIn [160]: ts.index = pd.to_datetime(ts.index)\n\nIn [161]: ts.plot();\n```", "```py\nIn [162]: ts['2021-02-23 11:00:00']\nKeyError --snip--\n```", "```py\nIn [163]: ts_secs = ts.resample('S').ffill() In [164]: ts_secs\nOut[164]:\n2021-02-23 06:00:00 0\n2021-02-23 06:00:01 0\n2021-02-23 06:00:02 0\n2021-02-23 06:00:03 0\n2021-02-23 06:00:04 0\n..\n2021-02-23 11:28:10 1\n2021-02-23 11:28:11 1\n2021-02-23 11:28:12 1\n2021-02-23 11:28:13 1\n2021-02-23 11:28:14 0\nFreq: S, Length: 19695, dtype: int64\n\nIn [165]: ts_secs.plot();\n```", "```py\nIn [166]: ts_secs['2021-2-23 11:00:00']\nOut[166]: 0\n```", "```py\nIn [167]: ts_secs.value_counts()\nOut[167]: \n0 16758\n1 2937\ndtype: int64\n```", "```py\nIn [168]: num_secs_per_day = 60 * 60 * 24\n\nIn [169]: print(f\"On = {ts_secs.value_counts()[1] / num_secs_per_day}\")\nOn = 0.033993055555555554\n```", "```py\n                   value\ndate \n2020-06-01             6     |\n2020-06-02            20   | |\n2020-06-03            36 | | |--> (6 + 20 + 36)/3 = 20.67\n2020-06-04            33 | |--> (20 + 36 + 33)/3 = 29.67\n2020-06-05            21 |--> (36 + 33 + 21)/3 = 30.0\n```", "```py\nIn [170]: df_roll = pd.read_csv(\"texas-history.csv\",\n    ...: usecols = ['date','deathIncrease'])\n\nIn [171]: df_roll = df_roll.sort_values('date', ascending=True)\n\nIn [172]: df_roll = df_roll.set_index(pd.DatetimeIndex(df_roll['date'])) In [173]: df_roll = df_roll.drop('date', axis=1)\n\nIn [174]: df_roll.loc['2020-7-27', 'deathIncrease'] = 239\n```", "```py\nIn [175]: df_roll['30_day_ma'] = df_roll.deathIncrease.rolling(30).mean()\n\nIn [176]: df_roll.plot();\n```", "```py\nIn [177]: df_roll['30_day_ma'] = df_roll.deathIncrease.rolling(30,\n center=True).mean()\n\nIn [178]: df_roll.plot();\n```", "```py\nIn [179]: df_roll['30_std'] = df_roll.deathIncrease.rolling(30,\n center=True).std()\nIn [180]: df_roll.plot();\n```"]