["```py\n def __init__(self):\n \"\"\"Initialize the game, and create game resources.\"\"\"\n pygame.init()\n *--snip--*\n\n        # Start Alien Invasion in an inactive state.\n        self.game_active = False\n```", "```py\nimport pygame.font\n\nclass Button:\n    \"\"\"A class to build buttons for the game.\"\"\"\n\n❶     def __init__(self, ai_game, msg):\n        \"\"\"Initialize button attributes.\"\"\"\n        self.screen = ai_game.screen\n        self.screen_rect = self.screen.get_rect()\n\n        # Set the dimensions and properties of the button.\n❷         self.width, self.height = 200, 50\n        self.button_color = (0, 135, 0)\n        self.text_color = (255, 255, 255)\n❸         self.font = pygame.font.SysFont(None, 48)\n\n        # Build the button's rect object and center it.\n❹         self.rect = pygame.Rect(0, 0, self.width, self.height)\n        self.rect.center = self.screen_rect.center\n\n        # The button message needs to be prepped only once.\n❺         self._prep_msg(msg)\n```", "```py\ndef _prep_msg(self, msg):\n        \"\"\"Turn msg into a rendered image and center text on the button.\"\"\"\n❶         self.msg_image = self.font.render(msg, True, self.text_color,\n                self.button_color)\n❷         self.msg_image_rect = self.msg_image.get_rect()\n        self.msg_image_rect.center = self.rect.center\n```", "```py\ndef draw_button(self):\n        \"\"\"Draw blank button and then draw message.\"\"\"\n        self.screen.fill(self.button_color, self.rect)\n        self.screen.blit(self.msg_image, self.msg_image_rect)\n```", "```py\n*--snip--*\nfrom game_stats import GameStats\nfrom button import Button\n```", "```py\n def __init__(self):\n  *--snip--*\n self.game_active = False\n\n        # Make the Play button.\n        self.play_button = Button(self, \"Play\")\n```", "```py\n def _update_screen(self):\n  *--snip--*\n self.aliens.draw(self.screen)\n\n        # Draw the play button if the game is inactive.\n        if not self.game_active:\n            self.play_button.draw_button()\n\n pygame.display.flip()\n```", "```py\n def _check_events(self):\n \"\"\"Respond to keypresses and mouse events.\"\"\"\n for event in pygame.event.get():\n if event.type == pygame.QUIT:\n  *--snip--*\n❶             elif event.type == pygame.MOUSEBUTTONDOWN:\n❷                 mouse_pos = pygame.mouse.get_pos()\n❸                 self._check_play_button(mouse_pos)\n```", "```py\n def _check_play_button(self, mouse_pos):\n        \"\"\"Start a new game when the player clicks Play.\"\"\"\n❶         if self.play_button.rect.collidepoint(mouse_pos):\n            self.game_active = True\n```", "```py\n def _check_play_button(self, mouse_pos):\n \"\"\"Start a new game when the player clicks Play.\"\"\"\n if self.play_button.rect.collidepoint(mouse_pos):\n            # Reset the game statistics.\n❶             self.stats.reset_stats()\n self.game_active = True\n\n # Get rid of any remaining bullets and aliens.\n❷             self.bullets.empty()\n            self.aliens.empty()\n\n            # Create a new fleet and center the ship.\n❸             self._create_fleet()\n            self.ship.center_ship()\n```", "```py\n def _check_play_button(self, mouse_pos):\n \"\"\"Start a new game when the player clicks Play.\"\"\"\n❶         button_clicked = self.play_button.rect.collidepoint(mouse_pos)\n❷         if button_clicked and not self.game_active:\n # Reset the game statistics.\n self.stats.reset_stats()\n  *--snip--*\n```", "```py\n def _check_play_button(self, mouse_pos):\n \"\"\"Start a new game when the player clicks Play.\"\"\"\n button_clicked = self.play_button.rect.collidepoint(mouse_pos)\n if button_clicked and not self.game_active:\n  *--snip--*\n            # Hide the mouse cursor.\n            pygame.mouse.set_visible(False)\n```", "```py\n def _ship_hit(self):\n \"\"\"Respond to ship being hit by alien.\"\"\"\n if self.stats.ships_left > 0:\n  *--snip--*\n else:\n self.game_active = False\n  pygame.mouse.set_visible(True)\n```", "```py\ndef __init__(self):\n    \"\"\"Initialize the game's static settings.\"\"\"\n    # Screen settings\n self.screen_width = 1200\n self.screen_height = 800\n self.bg_color = (230, 230, 230)\n\n # Ship settings\n self.ship_limit = 3\n\n # Bullet settings\n self.bullet_width = 3\n self.bullet_height = 15\n self.bullet_color = 60, 60, 60\n self.bullets_allowed = 3\n\n # Alien settings\n self.fleet_drop_speed = 10\n\n    # How quickly the game speeds up\n❶     self.speedup_scale = 1.1\n\n❷     self.initialize_dynamic_settings()\n```", "```py\n def initialize_dynamic_settings(self):\n     \"\"\"Initialize settings that change throughout the game.\"\"\"\n     self.ship_speed = 1.5\n     self.bullet_speed = 2.5\n     self.alien_speed = 1.0\n\n     # fleet_direction of 1 represents right; -1 represents left.\n     self.fleet_direction = 1\n```", "```py\n def increase_speed(self):\n     \"\"\"Increase speed settings.\"\"\"\n     self.ship_speed *= self.speedup_scale\n     self.bullet_speed *= self.speedup_scale\n     self.alien_speed *= self.speedup_scale\n```", "```py\n def _check_bullet_alien_collisions(self):\n  *--snip--*\n if not self.aliens:\n # Destroy existing bullets and create new fleet.\n self.bullets.empty()\n self._create_fleet()\n  self.settings.increase_speed()\n```", "```py\n def _check_play_button(self, mouse_pos):\n \"\"\"Start a new game when the player clicks Play.\"\"\"\n button_clicked = self.play_button.rect.collidepoint(mouse_pos)\n if button_clicked and not self.game_active:\n  # Reset the game settings.\n            self.settings.initialize_dynamic_settings()\n  *--snip--*\n```", "```py\nclass GameStats:\n  *--snip--*\n def reset_stats(self):\n \"\"\"Initialize statistics that can change during the game.\"\"\"\n self.ships_left = self.ai_settings.ship_limit\n        self.score = 0\n```", "```py\nimport pygame.font\n\nclass Scoreboard:\n    \"\"\"A class to report scoring information.\"\"\"\n\n❶     def __init__(self, ai_game):\n        \"\"\"Initialize scorekeeping attributes.\"\"\"\n        self.screen = ai_game.screen\n        self.screen_rect = self.screen.get_rect()\n        self.settings = ai_game.settings\n        self.stats = ai_game.stats\n\n        # Font settings for scoring information.\n❷         self.text_color = (30, 30, 30)\n❸         self.font = pygame.font.SysFont(None, 48)\n\n # Prepare the initial score image.\n❹         self.prep_score()\n```", "```py\ndef prep_score(self):\n    \"\"\"Turn the score into a rendered image.\"\"\"\n❶     score_str = str(self.stats.score)\n❷         self.score_image = self.font.render(score_str, True,\n                self.text_color, self.settings.bg_color)\n\n    # Display the score at the top right of the screen.\n❸     self.score_rect = self.score_image.get_rect()\n❹     self.score_rect.right = self.screen_rect.right - 20\n❺     self.score_rect.top = 20\n```", "```py\ndef show_score(self):\n        \"\"\"Draw score to the screen.\"\"\"\n        self.screen.blit(self.score_image, self.score_rect)\n```", "```py\n*--snip--*\nfrom game_stats import GameStats\nfrom scoreboard import Scoreboard\n*--snip--*\n```", "```py\n def __init__(self):\n  *--snip--*\n pygame.display.set_caption(\"Alien Invasion\")\n\n        # Create an instance to store game statistics,\n        #   and create a scoreboard.\n        self.stats = GameStats(self)\n        self.sb = Scoreboard(self)\n  *--snip--*\n```", "```py\n def _update_screen(self):\n  *--snip--*\n self.aliens.draw(self.screen)\n\n        # Draw the score information.\n        self.sb.show_score()\n\n # Draw the play button if the game is inactive.\n  *--snip--*\n```", "```py\n def initialize_dynamic_settings(self):\n  *--snip--*\n\n        # Scoring settings\n     self.alien_points = 50\n```", "```py\n def _check_bullet_alien_collisions(self):\n \"\"\"Respond to bullet-alien collisions.\"\"\"\n # Remove any bullets and aliens that have collided.\n collisions = pygame.sprite.groupcollide(\n self.bullets, self.aliens, True, True)\n\n        if collisions:\n            self.stats.score += self.settings.alien_points\n            self.sb.prep_score()\n  *--snip--*\n```", "```py\n def _check_play_button(self, mouse_pos):\n  *--snip--*\n if button_clicked and not self.game_active:\n  *--snip--*\n # Reset the game statistics.\n self.stats.reset_stats()\n            self.sb.prep_score()\n  *--snip--*\n```", "```py\n def _check_bullet_alien_collisions(self):\n  *--snip--*\n if collisions:\n            for aliens in collisions.values():\n                self.stats.score += self.settings.alien_points * len(aliens)\n self.sb.prep_score()\n  *--snip--*\n```", "```py\nclass Settings:\n \"\"\"A class to store all settings for Alien Invasion.\"\"\"\n\n def __init__(self):\n  *--snip--*\n        # How quickly the game speeds up\n self.speedup_scale = 1.1\n  # How quickly the alien point values increase\n❶         self.score_scale = 1.5\n\n self.initialize_dynamic_settings()\n\n def initialize_dynamic_settings(self):\n  *--snip--*\n\n def increase_speed(self):\n        \"\"\"Increase speed settings and alien point values.\"\"\"\n self.ship_speed *= self.speedup_scale\n self.bullet_speed *= self.speedup_scale\n self.alien_speed *= self.speedup_scale\n\n❷         self.alien_points = int(self.alien_points * self.score_scale)\n```", "```py\n def increase_speed(self):\n  *--snip--*\n self.alien_points = int(self.alien_points * self.score_scale)\n  print(self.alien_points)\n```", "```py\n def prep_score(self):\n \"\"\"Turn the score into a rendered image.\"\"\"\n        rounded_score = round(self.stats.score, -1)\n        score_str = f\"{rounded_score:,}\"\n self.score_image = self.font.render(score_str, True,\n self.text_color, self.settings.bg_color)\n  *--snip--*\n```", "```py\n def __init__(self, ai_game):\n  *--snip--*\n     # High score should never be reset.\n     self.high_score = 0\n```", "```py\n def __init__(self, ai_game):\n  *--snip--*\n     # Prepare the initial score images.\n self.prep_score()\n❶      self.prep_high_score()\n```", "```py\n def prep_high_score(self):\n     \"\"\"Turn the high score into a rendered image.\"\"\"\n❶      high_score = round(self.stats.high_score, -1)\n     high_score_str = f\"{high_score:,}\"\n❷      self.high_score_image = self.font.render(high_score_str, True,\n         self.text_color, self.settings.bg_color)\n\n     # Center the high score at the top of the screen.\n     self.high_score_rect = self.high_score_image.get_rect()\n❸         self.high_score_rect.centerx = self.screen_rect.centerx\n❹      self.high_score_rect.top = self.score_rect.top\n```", "```py\n def show_score(self):\n \"\"\"Draw score to the screen.\"\"\"\n self.screen.blit(self.score_image, self.score_rect)\n     self.screen.blit(self.high_score_image, self.high_score_rect)\n```", "```py\n def check_high_score(self):\n\"\"\"Check to see if there's a new high score.\"\"\"\n        if self.stats.score > self.stats.high_score:\n            self.stats.high_score = self.stats.score\n            self.prep_high_score()\n```", "```py\n def _check_bullet_alien_collisions(self):\n  *--snip--*\n if collisions:\n for aliens in collisions.values():\n self.stats.score += self.settings.alien_points * len(aliens)\n self.sb.prep_score()\n     self.sb.check_high_score()\n        *--snip--*\n```", "```py\n def reset_stats(self):\n \"\"\"Initialize statistics that can change during the game.\"\"\"\n self.ships_left = self.settings.ship_limit\n self.score = 0\n     self.level = 1\n```", "```py\n def __init__(self, ai_game):\n  *--snip--*\n self.prep_high_score()\n     self.prep_level()\n```", "```py\ndef prep_level(self):\n        \"\"\"Turn the level into a rendered image.\"\"\"\n        level_str = str(self.stats.level)\n❶         self.level_image = self.font.render(level_str, True,\n                self.text_color, self.settings.bg_color)\n\n        # Position the level below the score.\n        self.level_rect = self.level_image.get_rect()\n❷         self.level_rect.right = self.score_rect.right\n❸         self.level_rect.top = self.score_rect.bottom + 10\n```", "```py\n def show_score(self):\n        \"\"\"Draw scores and level to the screen.\"\"\"\n self.screen.blit(self.score_image, self.score_rect)\n self.screen.blit(self.high_score_image, self.high_score_rect)\n     self.screen.blit(self.level_image, self.level_rect)\n```", "```py\n def _check_bullet_alien_collisions(self):\n  *--snip--*\n if not self.aliens:\n   # Destroy existing bullets and create new fleet.\n self.bullets.empty()\n self._create_fleet()\n self.settings.increase_speed()\n\n            # Increase level.\n            self.stats.level += 1\n            self.sb.prep_level()\n```", "```py\n def _check_play_button(self, mouse_pos):\n  *--snip--*\n if button_clicked and not self.game_active:\n  *--snip--*\n            self.sb.prep_score()\n            self.sb.prep_level()\n            *--snip--*\n```", "```py\nimport pygame\nfrom pygame.sprite import Sprite\n\n❶ class Ship(Sprite):\n \"\"\"A class to manage the ship.\"\"\"\n\n def __init__(self, ai_game):\n \"\"\"Initialize the ship and set its starting position.\"\"\"\n❷         super().__init__()\n  *--snip--*\n```", "```py\nimport pygame.font\nfrom pygame.sprite import Group\n\nfrom ship import Ship\n```", "```py\n def __init__(self, ai_game):\n \"\"\"Initialize scorekeeping attributes.\"\"\"\n  self.ai_game = ai_game\n self.screen = ai_game.screen\n  *--snip--*\n self.prep_level()\n        self.prep_ships()\n```", "```py\ndef prep_ships(self):\n        \"\"\"Show how many ships are left.\"\"\"\n❶         self.ships = Group()\n❷         for ship_number in range(self.stats.ships_left):\n            ship = Ship(self.ai_game)\n❸             ship.rect.x = 10 + ship_number * ship.rect.width\n❹             ship.rect.y = 10\n❺             self.ships.add(ship)\n```", "```py\n def show_score(self):\n        \"\"\"Draw scores, level, and ships to the screen.\"\"\"\n self.screen.blit(self.score_image, self.score_rect)\n self.screen.blit(self.high_score_image, self.high_score_rect)\n self.screen.blit(self.level_image, self.level_rect)\n     self.ships.draw(self.screen)\n```", "```py\n def _check_play_button(self, mouse_pos):\n  *--snip--*\n if button_clicked and not self.game_active:\n  *--snip--*\n            self.sb.prep_level()\n            self.sb.prep_ships()\n            *--snip--*\n```", "```py\n def _ship_hit(self):\n \"\"\"Respond to ship being hit by alien.\"\"\"\n if self.stats.ships_left > 0:\n            # Decrement ships_left, and update scoreboard.\n self.stats.ships_left -= 1\n            self.sb.prep_ships()\n            `--snip--`\n```"]