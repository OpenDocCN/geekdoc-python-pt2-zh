["```py\n# Escape - A Python Adventure\n# by Sean McManus / www.sean.co.uk\n# Art by Rafael Pimenta\n# Typed in by PUT YOUR NAME HERE\n\nimport time, random, math\n\n###############\n## VARIABLES ##\n###############\n\nWIDTH = 800 #window size\nHEIGHT = 800\n\n#PLAYER variables\nPLAYER_NAME = \"Captain\" # change this to your name!\nFRIEND1_NAME = \"Karen\" # change this to a friend's name!\nFRIEND2_NAME = \"Leo\" # change this to another friend's name!\ncurrent_room = 31 # start room = 31\n\ntop_left_x = 100\ntop_left_y = 150\n\nDEMO_OBJECTS = [images.floor, images.pillar, images.soil]\n\nLANDER_SECTOR = random.randint(1, 24)\nLANDER_X = random.randint(2, 11)\nLANDER_Y = random.randint(2, 11)\n\nTILE_SIZE = 30\n\nplayer_y, player_x = 2, 5\ngame_over = False\n\nPLAYER = {\n    \"left\": [images.spacesuit_left, images.spacesuit_left_1,\n             images.spacesuit_left_2, images.spacesuit_left_3,\n             images.spacesuit_left_4\n             ],\n    \"right\": [images.spacesuit_right, images.spacesuit_right_1,\n              images.spacesuit_right_2, images.spacesuit_right_3,\n              images.spacesuit_right_4\n              ],\n    \"up\": [images.spacesuit_back, images.spacesuit_back_1,\n           images.spacesuit_back_2, images.spacesuit_back_3,\n           images.spacesuit_back_4\n           ],\n    \"down\": [images.spacesuit_front, images.spacesuit_front_1,\n             images.spacesuit_front_2, images.spacesuit_front_3,\n             images.spacesuit_front_4\n             ]\n    }\n\nplayer_direction = \"down\"\nplayer_frame = 0\nplayer_image = PLAYER[player_direction][player_frame]\nplayer_offset_x, player_offset_y = 0, 0\n\nPLAYER_SHADOW = {\n    \"left\": [images.spacesuit_left_shadow, images.spacesuit_left_1_shadow,\n             images.spacesuit_left_2_shadow, images.spacesuit_left_3_shadow,\n             images.spacesuit_left_3_shadow\n             ],\n    \"right\": [images.spacesuit_right_shadow, images.spacesuit_right_1_shadow,\n              images.spacesuit_right_2_shadow,\n              images.spacesuit_right_3_shadow, images.spacesuit_right_3_shadow\n              ],\n    \"up\": [images.spacesuit_back_shadow, images.spacesuit_back_1_shadow,\n           images.spacesuit_back_2_shadow, images.spacesuit_back_3_shadow,\n           images.spacesuit_back_3_shadow\n           ],\n    \"down\": [images.spacesuit_front_shadow, images.spacesuit_front_1_shadow,\n             images.spacesuit_front_2_shadow, images.spacesuit_front_3_shadow,\n             images.spacesuit_front_3_shadow\n             ]\n    }\n\nplayer_image_shadow = PLAYER_SHADOW[\"down\"][0]\n\nPILLARS = [\n    images.pillar, images.pillar_95, images.pillar_80,\n    images.pillar_60, images.pillar_50\n    ]\n\nwall_transparency_frame = 0\n\nBLACK = (0, 0, 0)\nBLUE = (0, 155, 255)\nYELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (128, 0, 0)\n\nair, energy = 100, 100\nsuit_stitched, air_fixed = False, False\nlaunch_frame = 0\n\n###############\n##    MAP    ##\n###############  \n\nMAP_WIDTH = 5\nMAP_HEIGHT = 10\nMAP_SIZE = MAP_WIDTH * MAP_HEIGHT\n\nGAME_MAP = [ [\"Room 0 - where unused objects are kept\", 0, 0, False, False] ]\n\noutdoor_rooms = range(1, 26)\nfor planetsectors in range(1, 26): #rooms 1 to 25 are generated here\n    GAME_MAP.append( [\"The dusty planet surface\", 13, 13, True, True] )\n\nGAME_MAP  += [\n        #[\"Room name\", height, width, Top exit?, Right exit?]\n        [\"The airlock\", 13, 5, True, False], # room 26\n        [\"The engineering lab\", 13, 13, False, False], # room 27\n        [\"Poodle Mission Control\", 9, 13, False, True], # room 28\n        [\"The viewing gallery\", 9, 15, False, False], # room 29\n        [\"The crew's bathroom\", 5, 5, False, False], # room 30\n        [\"The airlock entry bay\", 7, 11, True, True], # room 31\n        [\"Left elbow room\", 9, 7, True, False], # room 32\n        [\"Right elbow room\", 7, 13, True, True], # room 33\n        [\"The science lab\", 13, 13, False, True], # room 34\n        [\"The greenhouse\", 13, 13, True, False], # room 35\n        [PLAYER_NAME + \"'s sleeping quarters\", 9, 11, False, False], # room 36\n        [\"West corridor\", 15, 5, True, True], # room 37\n        [\"The briefing room\", 7, 13, False, True], # room 38\n        [\"The crew's community room\", 11, 13, True, False], # room 39\n        [\"Main Mission Control\", 14, 14, False, False], # room 40\n        [\"The sick bay\", 12, 7, True, False], # room 41\n        [\"West corridor\", 9, 7, True, False], # room 42\n        [\"Utilities control room\", 9, 9, False, True], # room 43\n        [\"Systems engineering bay\", 9, 11, False, False], # room 44\n        [\"Security portal to Mission Control\", 7, 7, True, False], # room 45\n        [FRIEND1_NAME + \"'s sleeping quarters\", 9, 11, True, True], # room 46\n        [FRIEND2_NAME + \"'s sleeping quarters\", 9, 11, True, True], # room 47\n        [\"The pipeworks\", 13, 11, True, False], # room 48\n        [\"The chief scientist's office\", 9, 7, True, True], # room 49\n        [\"The robot workshop\", 9, 11, True, False] # room 50\n        ]\n\n#simple sanity check on map above to check data entry\nassert len(GAME_MAP)-1 == MAP_SIZE, \"Map size and GAME_MAP don't match\"\n\n###############\n##  OBJECTS  ##\n###############\n\nobjects = {\n    0: [images.floor, None, \"The floor is shiny and clean\"],\n    1: [images.pillar, images.full_shadow, \"The wall is smooth and cold\"],\n    2: [images.soil, None, \"It's like a desert. Or should that be dessert?\"],\n    3: [images.pillar_low, images.half_shadow, \"The wall is smooth and cold\"],\n    4: [images.bed, images.half_shadow, \"A tidy and comfortable bed\"],\n    5: [images.table, images.half_shadow, \"It's made from strong plastic.\"],\n    6: [images.chair_left, None, \"A chair with a soft cushion\"],\n    7: [images.chair_right, None, \"A chair with a soft cushion\"],\n    8: [images.bookcase_tall, images.full_shadow,\n        \"Bookshelves, stacked with reference books\"],\n    9: [images.bookcase_small, images.half_shadow,\n        \"Bookshelves, stacked with reference books\"],\n    10: [images.cabinet, images.half_shadow,\n         \"A small locker, for storing personal items\"],\n    11: [images.desk_computer, images.half_shadow,\n         \"A computer. Use it to run life support diagnostics\"],\n    12: [images.plant, images.plant_shadow, \"A spaceberry plant, grown here\"],\n    13: [images.electrical1, images.half_shadow,\n         \"Electrical systems used for powering the space station\"],\n    14: [images.electrical2, images.half_shadow,\n         \"Electrical systems used for powering the space station\"],\n    15: [images.cactus, images.cactus_shadow, \"Ouch! Careful on the cactus!\"],\n    16: [images.shrub, images.shrub_shadow,\n         \"A space lettuce. A bit limp, but amazing it's growing here!\"],\n    17: [images.pipes1, images.pipes1_shadow, \"Water purification pipes\"],\n    18: [images.pipes2, images.pipes2_shadow,\n         \"Pipes for the life support systems\"],\n    19: [images.pipes3, images.pipes3_shadow,\n         \"Pipes for the life support systems\"],\n    20: [images.door, images.door_shadow, \"Safety door. Opens automatically \\\nfor astronauts in functioning spacesuits.\"],\n    21: [images.door, images.door_shadow, \"The airlock door. \\\nFor safety reasons, it requires two person operation.\"],\n    22: [images.door, images.door_shadow, \"A locked door. It needs \" \\\n         + PLAYER_NAME + \"'s access card\"],\n    23: [images.door, images.door_shadow, \"A locked door. It needs \" \\\n         + FRIEND1_NAME + \"'s access card\"],\n    24: [images.door, images.door_shadow, \"A locked door. It needs \" \\\n         + FRIEND2_NAME + \"'s access card\"],\n    25: [images.door, images.door_shadow,\n         \"A locked door. It is opened from Main Mission Control\"],\n    26: [images.door, images.door_shadow,\n         \"A locked door in the engineering bay.\"],\n    27: [images.map, images.full_shadow,\n         \"The screen says the crash site was Sector: \" \\\n         + str(LANDER_SECTOR) + \" // X: \" + str(LANDER_X) + \\\n         \" // Y: \" + str(LANDER_Y)],\n    28: [images.rock_large, images.rock_large_shadow,\n         \"A rock. Its coarse surface feels like a whetstone\", \"the rock\"],\n    29: [images.rock_small, images.rock_small_shadow,\n         \"A small but heavy piece of Martian rock\"],\n    30: [images.crater, None, \"A crater in the planet surface\"],\n    31: [images.fence, None,\n         \"A fine gauze fence. It helps protect the station from dust storms\"],\n    32: [images.contraption, images.contraption_shadow,\n         \"One of the scientific experiments. It gently vibrates\"],\n    33: [images.robot_arm, images.robot_arm_shadow,\n         \"A robot arm, used for heavy lifting\"],\n    34: [images.toilet, images.half_shadow, \"A sparkling clean toilet\"],\n    35: [images.sink, None, \"A sink with running water\", \"the taps\"],\n    36: [images.globe, images.globe_shadow,\n         \"A giant globe of the planet. It gently glows from inside\"],\n    37: [images.science_lab_table, None,\n         \"A table of experiments, analyzing the planet soil and dust\"],\n    38: [images.vending_machine, images.full_shadow,\n         \"A vending machine. It requires a credit.\", \"the vending machine\"],\n    39: [images.floor_pad, None,\n         \"A pressure sensor to make sure nobody goes out alone.\"],\n    40: [images.rescue_ship, images.rescue_ship_shadow, \"A rescue ship!\"],\n    41: [images.mission_control_desk, images.mission_control_desk_shadow, \\\n         \"Mission Control stations.\"],\n    42: [images.button, images.button_shadow,\n         \"The button for opening the time-locked door in engineering.\"],\n    43: [images.whiteboard, images.full_shadow,\n         \"The whiteboard is used in brainstorms and planning meetings.\"],\n    44: [images.window, images.full_shadow,\n         \"The window provides a view out onto the planet surface.\"],\n    45: [images.robot, images.robot_shadow, \"A cleaning robot, turned off.\"],\n    46: [images.robot2, images.robot2_shadow,\n         \"A planet surface exploration robot, awaiting set-up.\"],\n    47: [images.rocket, images.rocket_shadow, \"A 1-person craft in repair.\"],\n    48: [images.toxic_floor, None, \"Toxic floor - do not walk on!\"],\n    49: [images.drone, None, \"A delivery drone\"],\n    50: [images.energy_ball, None, \"An energy ball - dangerous!\"],\n    51: [images.energy_ball2, None, \"An energy ball - dangerous!\"],\n    52: [images.computer, images.computer_shadow,\n         \"A computer workstation, for managing space station systems.\"],\n    53: [images.clipboard, None,\n         \"A clipboard. Someone has doodled on it.\", \"the clipboard\"],\n    54: [images.bubble_gum, None,\n         \"A piece of sticky bubble gum. Spaceberry flavour.\", \"bubble gum\"],\n    55: [images.yoyo, None, \"A toy made of fine, strong string and plastic. \\\nUsed for antigrav experiments.\", PLAYER_NAME + \"'s yoyo\"],\n    56: [images.thread, None,\n         \"A piece of fine, strong string\", \"a piece of string\"],\n    57: [images.needle, None,\n         \"A sharp needle from a cactus plant\", \"a cactus needle\"],\n    58: [images.threaded_needle, None,\n         \"A cactus needle, spearing a length of string\", \"needle and string\"],\n    59: [images.canister, None,\n         \"The air canister has a leak.\", \"a leaky air canister\"],\n    60: [images.canister, None,\n         \"It looks like the seal will hold!\", \"a sealed air canister\"],\n    61: [images.mirror, None,\n         \"The mirror throws a circle of light on the walls.\", \"a mirror\"],\n    62: [images.bin_empty, None,\n         \"A rarely used bin, made of light plastic\", \"a bin\"],\n    63: [images.bin_full, None,\n         \"A heavy bin full of water\", \"a bin full of water\"],\n    64: [images.rags, None,\n         \"An oily rag. Pick it up by a corner if you must!\", \"an oily rag\"],\n    65: [images.hammer, None,\n         \"A hammer. Maybe good for cracking things open...\", \"a hammer\"],\n    66: [images.spoon, None, \"A large serving spoon\", \"a spoon\"],\n    67: [images.food_pouch, None,\n         \"A dehydrated food pouch. It needs water.\", \"a dry food pack\"],\n    68: [images.food, None,\n         \"A food pouch. Use it to get 100% energy.\", \"ready-to-eat food\"],\n    69: [images.book, None, \"The book has the words 'Don't Panic' on the \\\ncover in large, friendly letters\", \"a book\"],\n    70: [images.mp3_player, None,\n         \"An MP3 player, with all the latest tunes\", \"an MP3 player\"],\n    71: [images.lander, None, \"The Poodle, a small space exploration craft. \\\nIts black box has a radio sealed inside.\", \"the Poodle lander\"],\n    72: [images.radio, None, \"A radio communications system, from the \\\nPoodle\", \"a communications radio\"],\n    73: [images.gps_module, None, \"A GPS Module\", \"a GPS module\"],\n    74: [images.positioning_system, None, \"Part of a positioning system. \\\nNeeds a GPS module.\", \"a positioning interface\"],\n    75: [images.positioning_system, None,\n         \"A working positioning system\", \"a positioning computer\"],\n    76: [images.scissors, None, \"Scissors. They're too blunt to cut \\\nanything. Can you sharpen them?\", \"blunt scissors\"],\n    77: [images.scissors, None,\n         \"Razor-sharp scissors. Careful!\", \"sharpened scissors\"],\n    78: [images.credit, None,\n         \"A small coin for the station's vending systems\",\n         \"a station credit\"],\n    79: [images.access_card, None,\n         \"This access card belongs to \" + PLAYER_NAME, \"an access card\"],\n    80: [images.access_card, None,\n         \"This access card belongs to \" + FRIEND1_NAME, \"an access card\"],\n    81: [images.access_card, None,\n         \"This access card belongs to \" + FRIEND2_NAME, \"an access card\"]\n    }\n\nitems_player_may_carry = list(range(53, 82))\n# Numbers below are for floor, pressure pad, soil, toxic floor.\nitems_player_may_stand_on = items_player_may_carry + [0, 39, 2, 48]\n\n###############\n##  SCENERY  ##\n###############\n\n# Scenery describes objects that cannot move between rooms.\n# room number: [[object number, y position, x position]...]\nscenery = {\n    26: [[39,8,2]],\n    27: [[33,5,5], [33,1,1], [33,1,8], [47,5,2],\n         [47,3,10], [47,9,8], [42,1,6]],\n    28: [[27,0,3], [41,4,3], [41,4,7]],\n    29: [[7,2,6], [6,2,8], [12,1,13], [44,0,1],\n         [36,4,10], [10,1,1], [19,4,2], [17,4,4]],\n    30: [[34,1,1], [35,1,3]],\n    31: [[11,1,1], [19,1,8], [46,1,3]],\n    32: [[48,2,2], [48,2,3], [48,2,4], [48,3,2], [48,3,3],\n         [48,3,4], [48,4,2], [48,4,3], [48,4,4]],\n    33: [[13,1,1], [13,1,3], [13,1,8], [13,1,10], [48,2,1],\n         [48,2,7], [48,3,6], [48,3,3]],\n    34: [[37,2,2], [32,6,7], [37,10,4], [28,5,3]],\n    35: [[16,2,9], [16,2,2], [16,3,3], [16,3,8], [16,8,9], [16,8,2], [16,1,8],\n         [16,1,3], [12,8,6], [12,9,4], [12,9,8],\n         [15,4,6], [12,7,1], [12,7,11]],\n    36: [[4,3,1], [9,1,7], [8,1,8], [8,1,9],\n         [5,5,4], [6,5,7], [10,1,1], [12,1,2]],\n    37: [[48,3,1], [48,3,2], [48,7,1], [48,5,2], [48,5,3],\n         [48,7,2], [48,9,2], [48,9,3], [48,11,1], [48,11,2]],\n    38: [[43,0,2], [6,2,2], [6,3,5], [6,4,7], [6,2,9], [45,1,10]],\n    39: [[38,1,1], [7,3,4], [7,6,4], [5,3,6], [5,6,6],\n         [6,3,9], [6,6,9], [45,1,11], [12,1,8], [12,1,4]],\n    40: [[41,5,3], [41,5,7], [41,9,3], [41,9,7],\n         [13,1,1], [13,1,3], [42,1,12]],\n    41: [[4,3,1], [10,3,5], [4,5,1], [10,5,5], [4,7,1],\n         [10,7,5], [12,1,1], [12,1,5]],\n    44: [[46,4,3], [46,4,5], [18,1,1], [19,1,3],\n         [19,1,5], [52,4,7], [14,1,8]],\n    45: [[48,2,1], [48,2,2], [48,3,3], [48,3,4], [48,1,4], [48,1,1]],\n    46: [[10,1,1], [4,1,2], [8,1,7], [9,1,8], [8,1,9], [5,4,3], [7,3,2]],\n    47: [[9,1,1], [9,1,2], [10,1,3], [12,1,7], [5,4,4], [6,4,7], [4,1,8]],\n    48: [[17,4,1], [17,4,2], [17,4,3], [17,4,4], [17,4,5], [17,4,6], [17,4,7],\n         [17,8,1], [17,8,2], [17,8,3], [17,8,4],\n         [17,8,5], [17,8,6], [17,8,7], [14,1,1]],\n    49: [[14,2,2], [14,2,4], [7,5,1], [5,5,3], [48,3,3], [48,3,4]],\n    50: [[45,4,8], [11,1,1], [13,1,8], [33,2,1], [46,4,6]]\n    }\n\nchecksum = 0\ncheck_counter = 0\nfor key, room_scenery_list in scenery.items():\n    for scenery_item_list in room_scenery_list:\n        checksum += (scenery_item_list[0] * key\n                     + scenery_item_list[1] * (key + 1)\n                     + scenery_item_list[2] * (key + 2))\n        check_counter += 1\nprint(check_counter, \"scenery items\")\nassert check_counter == 161, \"Expected 161 scenery items\"\nassert checksum == 200095, \"Error in scenery data\"\nprint(\"Scenery checksum: \" + str(checksum))\n\nfor room in range(1, 26): # Add random scenery in planet locations.\n    if room != 13: # Skip room 13.\n        scenery_item = random.choice([16, 28, 29, 30])\n        scenery[room] = [[scenery_item, random.randint(2, 10),\n                          random.randint(2, 10)]]\n\n# Use loops to add fences to the planet surface rooms.\nfor room_coordinate in range(0, 13):\n    for room_number in [1, 2, 3, 4, 5]: # Add top fence\n        scenery[room_number] += [[31, 0, room_coordinate]]\n    for room_number in [1, 6, 11, 16, 21]: # Add left fence\n        scenery[room_number] += [[31, room_coordinate, 0]]\n    for room_number in [5, 10, 15, 20, 25]: # Add right fence\n        scenery[room_number] += [[31, room_coordinate, 12]]\n\ndel scenery[21][-1] # Delete last fence panel in Room 21\ndel scenery[25][-1] # Delete last fence panel in Room 25\n\n###############\n## MAKE MAP  ##\n###############\n\ndef get_floor_type():\n    if current_room in outdoor_rooms:\n        return 2 # soil\n    else:\n        return 0 # tiled floor\n\ndef generate_map():\n# This function makes the map for the current room,\n# using room data, scenery data and prop data.\n    global room_map, room_width, room_height, room_name, hazard_map\n    global top_left_x, top_left_y, wall_transparency_frame\n    room_data = GAME_MAP[current_room]\n    room_name = room_data[0]\n    room_height = room_data[1]\n    room_width = room_data[2]\n\n    floor_type = get_floor_type()\n    if current_room in range(1, 21):\n        bottom_edge = 2 #soil\n        side_edge = 2 #soil\n    if current_room in range(21, 26):\n        bottom_edge = 1 #wall\n        side_edge = 2 #soil\n    if current_room > 25:\n        bottom_edge = 1 #wall\n        side_edge = 1 #wall\n\n    # Create top line of room map.\n    room_map=[[side_edge] * room_width]\n    # Add middle lines of room map (wall, floor to fill width, wall).\n    for y in range(room_height - 2):\n        room_map.append([side_edge]\n                        + [floor_type]*(room_width - 2) + [side_edge])\n    # Add bottom line of room map.\n    room_map.append([bottom_edge] * room_width)\n\n    # Add doorways.\n    middle_row = int(room_height / 2)\n    middle_column = int(room_width / 2)\n\n    if room_data[4]: # If exit at right of this room\n        room_map[middle_row][room_width - 1] = floor_type\n        room_map[middle_row+1][room_width - 1] = floor_type\n        room_map[middle_row-1][room_width - 1] = floor_type\n\n    if current_room % MAP_WIDTH != 1: # If room is not on left of map\n        room_to_left = GAME_MAP[current_room - 1]\n        # If room on the left has a right exit, add left exit in this room\n        if room_to_left[4]:\n            room_map[middle_row][0] = floor_type\n            room_map[middle_row + 1][0] = floor_type\n            room_map[middle_row - 1][0] = floor_type\n\n    if room_data[3]: # If exit at top of this room\n        room_map[0][middle_column] = floor_type\n        room_map[0][middle_column + 1] = floor_type\n        room_map[0][middle_column - 1] = floor_type\n\n    if current_room <= MAP_SIZE - MAP_WIDTH: # If room is not on bottom row\n        room_below = GAME_MAP[current_room+MAP_WIDTH]\n        # If room below has a top exit, add exit at bottom of this one\n        if room_below[3]:\n            room_map[room_height-1][middle_column] = floor_type\n            room_map[room_height-1][middle_column + 1] = floor_type\n            room_map[room_height-1][middle_column - 1] = floor_type\n\n    if current_room in scenery:\n        for this_scenery in scenery[current_room]:\n            scenery_number = this_scenery[0]\n            scenery_y = this_scenery[1]\n            scenery_x = this_scenery[2]\n            room_map[scenery_y][scenery_x] = scenery_number\n\n            image_here = objects[scenery_number][0]\n            image_width = image_here.get_width()\n            image_width_in_tiles = int(image_width / TILE_SIZE)\n\n            for tile_number in range(1, image_width_in_tiles):\n                room_map[scenery_y][scenery_x + tile_number] = 255\n\n    center_y = int(HEIGHT / 2) # Center of game window\n    center_x = int(WIDTH / 2)\n    room_pixel_width = room_width * TILE_SIZE # Size of room in pixels\n    room_pixel_height = room_height * TILE_SIZE\n    top_left_x = center_x - 0.5 * room_pixel_width\n    top_left_y = (center_y - 0.5 * room_pixel_height) + 110\n\n    for prop_number, prop_info in props.items():\n        prop_room = prop_info[0]\n        prop_y = prop_info[1]\n        prop_x = prop_info[2]\n        if (prop_room == current_room and\n            room_map[prop_y][prop_x] in [0, 39, 2]):\n                room_map[prop_y][prop_x] = prop_number\n                image_here = objects[prop_number][0]\n                image_width = image_here.get_width()\n                image_width_in_tiles = int(image_width / TILE_SIZE)\n                for tile_number in range(1, image_width_in_tiles):\n                    room_map[prop_y][prop_x + tile_number] = 255\n\n    hazard_map = [] # empty list\n    for y in range(room_height):\n        hazard_map.append( [0] * room_width )\n\n###############\n## GAME LOOP ##\n###############\n\ndef start_room():\n    global airlock_door_frame\n    show_text(\"You are here: \" + room_name, 0)\n    if current_room == 26: # Room with self-shutting airlock door\n        airlock_door_frame = 0\n        clock.schedule_interval(door_in_room_26, 0.05)\n    hazard_start()\n\ndef game_loop():\n    global player_x, player_y, current_room\n    global from_player_x, from_player_y\n    global player_image, player_image_shadow\n    global selected_item, item_carrying, energy\n    global player_offset_x, player_offset_y\n    global player_frame, player_direction\n\n    if game_over:\n        return\n\n    if player_frame > 0:\n        player_frame += 1\n        time.sleep(0.05)\n        if player_frame == 5:\n            player_frame = 0\n            player_offset_x = 0\n            player_offset_y = 0\n\n# save player's current position\n    old_player_x = player_x\n    old_player_y = player_y\n\n# move if key is pressed\n    if player_frame == 0:\n        if keyboard.right:\n            from_player_x = player_x\n            from_player_y = player_y\n            player_x += 1\n            player_direction = \"right\"\n            player_frame = 1\n        elif keyboard.left: #elif stops player making diagonal movements\n            from_player_x = player_x\n            from_player_y = player_y\n            player_x -= 1\n            player_direction = \"left\"\n            player_frame = 1\n        elif keyboard.up:\n            from_player_x = player_x\n            from_player_y = player_y\n            player_y -= 1\n            player_direction = \"up\"\n            player_frame = 1\n        elif keyboard.down:\n            from_player_x = player_x\n            from_player_y = player_y\n            player_y += 1\n            player_direction = \"down\"\n            player_frame = 1        \n\n# check for exiting the room\n    if player_x == room_width: # through door on RIGHT\n        clock.unschedule(hazard_move)\n        current_room += 1\n        generate_map()\n        player_x = 0 # enter at left\n        player_y = int(room_height / 2) # enter at door\n        player_frame = 0\n        start_room()\n        return\n\n    if player_x == -1: # through door on LEFT\n        clock.unschedule(hazard_move)\n        current_room -= 1\n        generate_map()\n        player_x = room_width - 1  # enter at right\n        player_y = int(room_height / 2) # enter at door\n        player_frame = 0\n        start_room()\n        return\n\n    if player_y == room_height: # through door at BOTTOM\n        clock.unschedule(hazard_move)\n        current_room += MAP_WIDTH\n        generate_map()\n        player_y = 0 # enter at top\n        player_x = int(room_width / 2) # enter at door\n        player_frame = 0\n        start_room()\n        return\n\n    if player_y == -1: # through door at TOP\n        clock.unschedule(hazard_move)\n        current_room -= MAP_WIDTH\n        generate_map()\n        player_y = room_height - 1 # enter at bottom\n        player_x = int(room_width / 2) # enter at door\n        player_frame = 0\n        start_room()\n        return\n\n    if keyboard.g:\n        pick_up_object()\n\n    if keyboard.tab and len(in_my_pockets) > 0:\n        selected_item += 1\n        if selected_item > len(in_my_pockets) - 1:\n            selected_item = 0\n        item_carrying = in_my_pockets[selected_item]\n        display_inventory()\n\n    if keyboard.d and item_carrying:\n        drop_object(old_player_y, old_player_x)\n\n    if keyboard.space:\n        examine_object()\n\n    if keyboard.u:\n        use_object()\n\n#### Teleporter for testing\n#### Remove this section for the real game\n##    if keyboard.x:\n##        current_room = int(input(\"Enter room number:\"))\n##        player_x = 2\n##        player_y = 2\n##        generate_map()\n##        start_room()\n##        sounds.teleport.play()\n#### Teleport section ends\n\n  # If the player is standing somewhere they shouldn't, move them back.\n    if room_map[player_y][player_x] not in items_player_may_stand_on \\\n               or hazard_map[player_y][player_x] != 0:\n        player_x = old_player_x\n        player_y = old_player_y\n        player_frame = 0\n\n    if room_map[player_y][player_x] == 48: # toxic floor\n        deplete_energy(1)\n\n    if player_direction == \"right\" and player_frame > 0:\n        player_offset_x = -1 + (0.25 * player_frame)\n    if player_direction == \"left\" and player_frame > 0:\n        player_offset_x = 1 - (0.25 * player_frame)\n    if player_direction == \"up\" and player_frame > 0:\n        player_offset_y = 1 - (0.25 * player_frame)\n    if player_direction == \"down\" and player_frame > 0:\n        player_offset_y = -1 + (0.25 * player_frame)\n\n###############\n##  DISPLAY  ##\n###############\n\ndef draw_image(image, y, x):\n    screen.blit(\n        image,\n        (top_left_x + (x * TILE_SIZE),\n         top_left_y + (y * TILE_SIZE) - image.get_height())\n        )\n\ndef draw_shadow(image, y, x):\n    screen.blit(\n        image,\n        (top_left_x + (x * TILE_SIZE),\n         top_left_y + (y * TILE_SIZE))\n        )\n\ndef draw_player():\n    player_image = PLAYER[player_direction][player_frame]\n    draw_image(player_image, player_y + player_offset_y,\n               player_x + player_offset_x)\n    player_image_shadow = PLAYER_SHADOW[player_direction][player_frame]\n    draw_shadow(player_image_shadow, player_y + player_offset_y,\n                player_x + player_offset_x)\n\ndef draw():\n    if game_over:\n        return\n\n    # Clear the game arena area.\n    box = Rect((0, 150), (800, 600))\n    screen.draw.filled_rect(box, RED)\n    box = Rect ((0, 0), (800, top_left_y + (room_height - 1)*30))\n    screen.surface.set_clip(box)\n    floor_type = get_floor_type()\n\n    for y in range(room_height): # Lay down floor tiles, then items on floor.\n        for x in range(room_width):\n            draw_image(objects[floor_type][0], y, x)\n            # Next line enables shadows to fall on top of objects on floor\n            if room_map[y][x] in items_player_may_stand_on:\n                draw_image(objects[room_map[y][x]][0], y, x)\n\n    # Pressure pad in room 26 is added here, so props can go on top of it.\n    if current_room == 26:\n        draw_image(objects[39][0], 8, 2)\n        image_on_pad = room_map[8][2]\n        if image_on_pad > 0:\n            draw_image(objects[image_on_pad][0], 8, 2)\n\n    for y in range(room_height):\n        for x in range(room_width):\n            item_here = room_map[y][x]\n            # Player cannot walk on 255: it marks spaces used by wide objects.\n            if item_here not in items_player_may_stand_on + [255]:\n                image = objects[item_here][0]\n                if (current_room in outdoor_rooms\n                    and y == room_height - 1\n                    and room_map[y][x] == 1) or \\\n                    (current_room not in outdoor_rooms\n                    and y == room_height - 1\n                    and room_map[y][x] == 1\n                    and x > 0\n                    and x < room_width - 1):\n                    # Add transparent wall image in the front row.\n                    image = PILLARS[wall_transparency_frame]\n\n                draw_image(image, y, x)\n\n                if objects[item_here][1] is not None: # If object has a shadow\n                    shadow_image = objects[item_here][1]\n                    # if shadow might need horizontal tiling\n                    if shadow_image in [images.half_shadow,\n                                        images.full_shadow]:\n                        shadow_width = int(image.get_width() / TILE_SIZE)\n                        # Use shadow across width of object.\n                        for z in range(0, shadow_width):\n                            draw_shadow(shadow_image, y, x+z)\n                    else:\n                        draw_shadow(shadow_image, y, x)\n\n            hazard_here = hazard_map[y][x]\n            if hazard_here != 0: # If there's a hazard at this position\n                draw_image(objects[hazard_here][0], y, x)\n\n        if (player_y == y):\n                draw_player()\n\n    screen.surface.set_clip(None)\n\ndef adjust_wall_transparency():\n    global wall_transparency_frame\n\n    if (player_y == room_height - 2\n        and room_map[room_height - 1][player_x] == 1\n        and wall_transparency_frame < 4):  \n        wall_transparency_frame += 1 # Fade wall out.\n\n    if ((player_y < room_height - 2\n            or room_map[room_height - 1][player_x] != 1)\n            and wall_transparency_frame > 0):\n        wall_transparency_frame -= 1 # Fade wall in.\n\ndef show_text(text_to_show, line_number):\n    if game_over:\n        return\n    text_lines = [15, 50]\n    box = Rect((0, text_lines[line_number]), (800, 35))\n    screen.draw.filled_rect(box, BLACK)\n    screen.draw.text(text_to_show,\n                     (20, text_lines[line_number]), color=GREEN)\n\n###############\n##   PROPS   ##\n###############\n\n# Props are objects that may move between rooms, appear or disappear.\n# All props must be set up here. Props not yet in the game go into room 0.\n# object number : [room, y, x]\nprops = {\n    20: [31, 0, 4], 21: [26, 0, 1], 22: [41, 0, 2], 23: [39, 0, 5],\n    24: [45, 0, 2],\n    25: [32, 0, 2], 26: [27, 12, 5], # two sides of same door\n    40: [0, 8, 6], 53: [45, 1, 5], 54: [0, 0, 0], 55: [0, 0, 0],\n    56: [0, 0, 0], 57: [35, 4, 6], 58: [0, 0, 0], 59: [31, 1, 7],\n    60: [0, 0, 0], 61: [36, 1, 1], 62: [36, 1, 6], 63: [0, 0, 0],\n    64: [27, 8, 3], 65: [50, 1, 7], 66: [39, 5, 6], 67: [46, 1, 1],\n    68: [0, 0, 0], 69: [30, 3, 3], 70: [47, 1, 3],\n    71: [0, LANDER_Y, LANDER_X], 72: [0, 0, 0], 73: [27, 4, 6],\n    74: [28, 1, 11], 75: [0, 0, 0], 76: [41, 3, 5], 77: [0, 0, 0],\n    78: [35, 9, 11], 79: [26, 3, 2], 80: [41, 7, 5], 81: [29, 1, 1]\n    }\n\nchecksum = 0\nfor key, prop in props.items():\n    if key != 71: # 71 is skipped because it's different each game.\n        checksum += (prop[0] * key\n                     + prop[1] * (key + 1)\n                     + prop[2] * (key + 2))\nprint(len(props), \"props\")\nassert len(props) == 37, \"Expected 37 prop items\"\nprint(\"Prop checksum:\", checksum)\nassert checksum == 61414, \"Error in props data\"\n\nin_my_pockets = [55]\nselected_item = 0 # the first item\nitem_carrying = in_my_pockets[selected_item]\n\nRECIPES = [\n    [62, 35, 63], [76, 28, 77], [78, 38, 54], [73, 74, 75],\n    [59, 54, 60], [77, 55, 56], [56, 57, 58], [71, 65, 72],\n    [88, 58, 89], [89, 60, 90], [67, 35, 68]\n    ]\n\nchecksum = 0\ncheck_counter = 1\nfor recipe in RECIPES:\n    checksum += (recipe[0] * check_counter\n                 + recipe[1] * (check_counter + 1)\n                 + recipe[2] * (check_counter + 2))\n    check_counter += 3\nprint(len(RECIPES), \"recipes\")\nassert len(RECIPES) == 11, \"Expected 11 recipes\"\nassert checksum == 37296, \"Error in recipes data\"\nprint(\"Recipe checksum:\", checksum)\n\n#######################\n## PROP INTERACTIONS ##\n#######################\n\ndef find_object_start_x():\n    checker_x = player_x\n    while room_map[player_y][checker_x] == 255:\n        checker_x -= 1\n    return checker_x\n\ndef get_item_under_player():\n    item_x = find_object_start_x()\n    item_player_is_on = room_map[player_y][item_x]\n    return item_player_is_on\n\ndef pick_up_object():\n    global room_map\n    # Get object number at player's location.\n    item_player_is_on = get_item_under_player()\n    if item_player_is_on in items_player_may_carry:\n        # Clear the floor space.\n        room_map[player_y][player_x] = get_floor_type()\n        add_object(item_player_is_on)\n        show_text(\"Now carrying \" + objects[item_player_is_on][3], 0)\n        sounds.pickup.play()\n        time.sleep(0.5)\n    else:\n        show_text(\"You can't carry that!\", 0)\n\ndef add_object(item): # Adds item to inventory.\n    global selected_item, item_carrying\n    in_my_pockets.append(item)\n    item_carrying = item\n    # Minus one because indexes start at 0.\n    selected_item = len(in_my_pockets) - 1\n    display_inventory()\n    props[item][0] = 0 # Carried objects go into room 0 (off the map).\n\ndef display_inventory():\n    box = Rect((0, 45), (800, 105))\n    screen.draw.filled_rect(box, BLACK)\n\n    if len(in_my_pockets) == 0:\n        return\n\n    start_display = (selected_item // 16) * 16\n    list_to_show = in_my_pockets[start_display : start_display + 16]\n    selected_marker = selected_item % 16\n\n    for item_counter in range(len(list_to_show)):\n        item_number = list_to_show[item_counter]\n        image = objects[item_number][0]\n        screen.blit(image, (25 + (46 * item_counter), 90))\n    box_left = (selected_marker * 46) - 3\n    box = Rect((22 + box_left, 85), (40, 40))\n    screen.draw.rect(box, WHITE)\n    item_highlighted = in_my_pockets[selected_item]\n    description = objects[item_highlighted][2]\n    screen.draw.text(description, (20, 130), color=\"white\")\n\ndef drop_object(old_y, old_x):\n    global room_map, props\n    if room_map[old_y][old_x] in [0, 2, 39]: # places you can drop things\n        props[item_carrying][0] = current_room\n        props[item_carrying][1] = old_y\n        props[item_carrying][2] = old_x\n        room_map[old_y][old_x] = item_carrying\n        show_text(\"You have dropped \" + objects[item_carrying][3], 0)\n        sounds.drop.play()\n        remove_object(item_carrying)\n        time.sleep(0.5)\n    else: # This only happens if there is already a prop here\n        show_text(\"You can't drop that there.\", 0)\n        time.sleep(0.5)\n\ndef remove_object(item): # Takes item out of inventory\n    global selected_item, in_my_pockets, item_carrying\n    in_my_pockets.remove(item)\n    selected_item = selected_item - 1\n    if selected_item < 0:\n        selected_item = 0\n    if len(in_my_pockets) == 0: # If they're not carrying anything\n        item_carrying = False # Set item_carrying to False\n    else: # Otherwise set it to the new selected item\n        item_carrying = in_my_pockets[selected_item]\n    display_inventory()\n\ndef examine_object():\n    item_player_is_on = get_item_under_player()\n    left_tile_of_item = find_object_start_x()\n    if item_player_is_on in [0, 2]: # don't describe the floor\n        return\n    description = \"You see: \" + objects[item_player_is_on][2]\n    for prop_number, details in props.items():\n        # props = object number: [room number, y, x]\n        if details[0] == current_room: # if prop is in the room\n            # If prop is hidden (= at player's location but not on map)\n            if (details[1] == player_y\n                and details[2] == left_tile_of_item\n                and room_map[details[1]][details[2]] != prop_number):\n                add_object(prop_number)\n                description = \"You found \" + objects[prop_number][3]\n                sounds.combine.play()\n    show_text(description, 0)\n    time.sleep(0.5)\n\n#################\n## USE OBJECTS ##\n#################\n\ndef use_object():\n    global room_map, props, item_carrying, air, selected_item, energy\n    global in_my_pockets, suit_stitched, air_fixed, game_over\n\n    use_message = \"You fiddle around with it but don't get anywhere.\"\n    standard_responses = {\n        4: \"Air is running out! You can't take this lying down!\",\n        6: \"This is no time to sit around!\",\n        7: \"This is no time to sit around!\",\n        32: \"It shakes and rumbles, but nothing else happens.\",\n        34: \"Ah! That's better. Now wash your hands.\",\n        35: \"You wash your hands and shake the water off.\",\n        37: \"The test tubes smoke slightly as you shake them.\",\n        54: \"You chew the gum. It's sticky like glue.\",\n        55: \"The yoyo bounces up and down, slightly slower than on Earth\",\n        56: \"It's a bit too fiddly. Can you thread it on something?\",\n        59: \"You need to fix the leak before you can use the canister\",\n        61: \"You try signalling with the mirror, but nobody can see you.\",\n        62: \"Don't throw resources away. Things might come in handy...\",\n        67: \"To enjoy yummy space food, just add water!\",\n        75: \"You are at Sector: \" + str(current_room) + \" // X: \" \\\n            + str(player_x) + \" // Y: \" + str(player_y)  \n        }\n\n    # Get object number at player's location.\n    item_player_is_on = get_item_under_player()\n    for this_item in [item_player_is_on, item_carrying]:\n        if this_item in standard_responses:\n            use_message = standard_responses[this_item]\n\n    if item_carrying == 70 or item_player_is_on == 70:\n        use_message = \"Banging tunes!\"\n        sounds.steelmusic.play(2)\n\n    elif item_player_is_on == 11:\n        use_message = \"AIR: \" + str(air) + \\\n                      \"% / ENERGY \" + str(energy) + \"% / \"\n        if not suit_stitched:\n            use_message += \"*ALERT* SUIT FABRIC TORN / \"\n        if not air_fixed:\n            use_message += \"*ALERT* SUIT AIR BOTTLE MISSING\"\n        if suit_stitched and air_fixed:\n            use_message += \" SUIT OK\"\n        show_text(use_message, 0)\n        sounds.say_status_report.play()\n        time.sleep(0.5)\n        # If \"on\" the computer, player intention is clearly status update.\n        # Return to stop another object use accidentally overriding this.\n        return\n\n    elif item_carrying == 60 or item_player_is_on == 60:\n        use_message = \"You fix \" + objects[60][3] + \" to the suit\"\n        air_fixed = True\n        air = 90\n        air_countdown()\n        remove_object(60)\n\n    elif (item_carrying == 58 or item_player_is_on == 58) \\\n       and not suit_stitched:\n        use_message = \"You use \" + objects[56][3] + \\\n                      \" to repair the suit fabric\"\n        suit_stitched = True\n        remove_object(58)\n\n    elif item_carrying == 72 or item_player_is_on == 72:\n        use_message = \"You radio for help. A rescue ship is coming. \\\nRendezvous Sector 13, outside.\"\n        props[40][0] = 13\n\n    elif (item_carrying == 66 or item_player_is_on == 66) \\\n            and current_room in outdoor_rooms:\n        use_message = \"You dig...\"\n        if (current_room == LANDER_SECTOR\n            and player_x == LANDER_X\n            and player_y == LANDER_Y):\n            add_object(71)\n            use_message = \"You found the Poodle lander!\"\n\n    elif item_player_is_on == 40:\n        clock.unschedule(air_countdown)\n        show_text(\"Congratulations, \"+ PLAYER_NAME +\"!\", 0)\n        show_text(\"Mission success! You have made it to safety.\", 1)\n        game_over = True\n        sounds.take_off.play()\n        game_completion_sequence()\n\n    elif item_player_is_on == 16:\n        energy += 1\n        if energy > 100:\n            energy = 100\n        use_message = \"You munch the lettuce and get a little energy back\"\n        draw_energy_air()        \n\n    elif item_player_is_on == 42:\n        if current_room == 27:\n            open_door(26)\n        props[25][0] = 0 # Door from RM32 to engineering bay\n        props[26][0] = 0 # Door inside engineering bay\n        clock.schedule_unique(shut_engineering_door, 60)\n        use_message = \"You press the button\"\n        show_text(\"Door to engineering bay is open for 60 seconds\", 1)\n        sounds.say_doors_open.play()\n        sounds.doors.play()\n\n    elif item_carrying == 68 or item_player_is_on == 68:\n        energy = 100\n        use_message = \"You use the food to restore your energy\"\n        remove_object(68)\n        draw_energy_air()\n\n    if suit_stitched and air_fixed: # open airlock access\n        if current_room == 31 and props[20][0] == 31:\n            open_door(20) # which includes removing the door\n            sounds.say_airlock_open.play()\n            show_text(\"The computer tells you the airlock is now open.\", 1)\n        elif props[20][0] == 31:\n            props[20][0] = 0 # remove door from map\n            sounds.say_airlock_open.play()\n            show_text(\"The computer tells you the airlock is now open.\", 1)\n\n    for recipe in RECIPES:\n        ingredient1 = recipe[0]\n        ingredient2 = recipe[1]\n        combination = recipe[2]\n        if (item_carrying == ingredient1\n            and item_player_is_on == ingredient2) \\\n            or (item_carrying == ingredient2\n                and item_player_is_on == ingredient1):\n            use_message = \"You combine \" + objects[ingredient1][3] \\\n                          + \" and \" + objects[ingredient2][3] \\\n                          + \" to make \" + objects[combination][3]\n            if item_player_is_on in props.keys():\n                props[item_player_is_on][0] = 0\n                room_map[player_y][player_x] = get_floor_type()\n            in_my_pockets.remove(item_carrying)\n            add_object(combination)\n            sounds.combine.play()\n\n    # {key object number: door object number}\n    ACCESS_DICTIONARY = { 79:22, 80:23, 81:24 }\n    if item_carrying in ACCESS_DICTIONARY:\n        door_number = ACCESS_DICTIONARY[item_carrying]\n        if props[door_number][0] == current_room:\n            use_message = \"You unlock the door!\"\n            sounds.say_doors_open.play()\n            sounds.doors.play()\n            open_door(door_number)\n\n    show_text(use_message, 0)\n    time.sleep(0.5)\n\ndef game_completion_sequence():\n    global launch_frame #(initial value is 0, set up in VARIABLES section)\n    box = Rect((0, 150), (800, 600))\n    screen.draw.filled_rect(box, (128, 0, 0))\n    box = Rect ((0, top_left_y - 30), (800, 390))\n    screen.surface.set_clip(box)\n    for y in range(0, 13):\n        for x in range(0, 13):\n            draw_image(images.soil, y, x)\n\n    launch_frame += 1\n    if launch_frame < 9:\n        draw_image(images.rescue_ship, 8 - launch_frame, 6)\n        draw_shadow(images.rescue_ship_shadow, 8 + launch_frame, 6)\n        clock.schedule(game_completion_sequence, 0.25)\n    else:\n        screen.surface.set_clip(None)\n        screen.draw.text(\"MISSION\", (200, 380), color = \"white\",\n                     fontsize = 128, shadow = (1, 1), scolor = \"black\")\n        screen.draw.text(\"COMPLETE\", (145, 480), color = \"white\",\n                     fontsize = 128, shadow = (1, 1), scolor = \"black\")\n        sounds.completion.play()\n        sounds.say_mission_complete.play()\n\n###############\n##   DOORS   ##\n###############\n\ndef open_door(opening_door_number):\n    global door_frames, door_shadow_frames\n    global door_frame_number, door_object_number\n    door_frames = [images.door1, images.door2, images.door3,\n                   images.door4, images.floor]\n    # (Final frame restores shadow ready for when door reappears).\n    door_shadow_frames = [images.door1_shadow, images.door2_shadow,\n                          images.door3_shadow, images.door4_shadow,\n                          images.door_shadow]\n    door_frame_number = 0\n    door_object_number = opening_door_number\n    do_door_animation()\n\ndef close_door(closing_door_number):\n    global door_frames, door_shadow_frames\n    global door_frame_number, door_object_number, player_y\n    door_frames = [images.door4, images.door3, images.door2,\n                   images.door1, images.door]\n    door_shadow_frames = [images.door4_shadow, images.door3_shadow,\n                          images.door2_shadow, images.door1_shadow,\n                          images.door_shadow]\n    door_frame_number = 0\n    door_object_number = closing_door_number\n    # If player is in same row as a door, they must be in open doorway\n    if player_y == props[door_object_number][1]:\n        if player_y == 0: # if in the top doorway\n            player_y = 1 # move them down\n        else:\n            player_y = room_height - 2 # move them up\n    do_door_animation()\n\ndef do_door_animation():\n    global door_frames, door_frame_number, door_object_number, objects\n    objects[door_object_number][0] = door_frames[door_frame_number]\n    objects[door_object_number][1] = door_shadow_frames[door_frame_number]\n    door_frame_number += 1\n    if door_frame_number == 5:\n        if door_frames[-1] == images.floor:\n            props[door_object_number][0] = 0 # remove door from props list\n        # Regenerate room map from the props\n        # to put the door in the room if required.\n        generate_map()\n    else:\n        clock.schedule(do_door_animation, 0.15)\n\ndef shut_engineering_door():\n    global current_room, door_room_number, props\n    props[25][0] = 32 # Door from room 32 to the engineering bay.\n    props[26][0] = 27 # Door inside engineering bay.\n    generate_map() # Add door to room_map for if in affected room.\n    if current_room == 27:\n        close_door(26)\n    if current_room == 32:\n        close_door(25)\n    show_text(\"The computer tells you the doors are closed.\", 1)\n    sounds.say_doors_closed.play()\n\ndef door_in_room_26():\n    global airlock_door_frame, room_map\n    frames = [images.door, images.door1, images.door2,\n              images.door3,images.door4, images.floor\n              ]\n\n    shadow_frames = [images.door_shadow, images.door1_shadow,\n                     images.door2_shadow, images.door3_shadow,\n                     images.door4_shadow, None]\n\n    if current_room != 26:\n        clock.unschedule(door_in_room_26)\n        return\n\n    # prop 21 is the door in Room 26.\n    if ((player_y == 8 and player_x == 2) or props[63] == [26, 8, 2]) \\\n            and props[21][0] == 26:\n        airlock_door_frame += 1\n        if airlock_door_frame == 5:\n            props[21][0] = 0 # Remove door from map when fully open.\n            room_map[0][1] = 0\n            room_map[0][2] = 0\n            room_map[0][3] = 0\n\n    if ((player_y != 8 or player_x != 2) and props[63] != [26, 8, 2]) \\\n            and airlock_door_frame > 0:\n        if airlock_door_frame == 5:\n            # Add door to props and map so animation is shown.\n            props[21][0] = 26\n            room_map[0][1] = 21\n            room_map[0][2] = 255\n            room_map[0][3] = 255\n        airlock_door_frame -= 1\n\n    objects[21][0] = frames[airlock_door_frame]\n    objects[21][1] = shadow_frames[airlock_door_frame]\n\n###############\n##    AIR    ##\n###############\n\ndef draw_energy_air():\n    box = Rect((20, 765), (350, 20))\n    screen.draw.filled_rect(box, BLACK)\n    screen.draw.text(\"AIR\", (20, 766), color=BLUE)\n    screen.draw.text(\"ENERGY\", (180, 766), color=YELLOW)\n\n    if air > 0:\n        box = Rect((50, 765), (air, 20))\n        screen.draw.filled_rect(box, BLUE) # Draw new air bar.\n\n    if energy > 0:\n        box = Rect((250, 765), (energy, 20))\n        screen.draw.filled_rect(box, YELLOW) # Draw new energy bar.\n\ndef end_the_game(reason):\n    global game_over\n    show_text(reason, 1)\n    game_over = True\n    sounds.say_mission_fail.play()\n    sounds.gameover.play()\n    screen.draw.text(\"GAME OVER\", (120, 400), color = \"white\",\n                     fontsize = 128, shadow = (1, 1), scolor = \"black\")\n\ndef air_countdown():\n    global air, game_over\n    if game_over:\n        return # Don't sap air when they're already dead.\n    air -= 1\n    if air == 20:\n        sounds.say_air_low.play()\n    if air == 10:\n        sounds.say_act_now.play()\n    draw_energy_air()\n    if air < 1:\n        end_the_game(\"You're out of air!\")\n\ndef alarm():\n    show_text(\"Air is running out, \" + PLAYER_NAME\n              + \"! Get to safety, then radio for help!\", 1)\n    sounds.alarm.play(3)\n    sounds.say_breach.play()    \n\n###############\n##  HAZARDS  ##\n###############\n\nhazard_data = {\n    # room number: [[y, x, direction, bounce addition to direction]]\n    28: [[1, 8, 2, 1], [7, 3, 4, 1]], 32: [[1, 5, 4, -1]],\n    34: [[5, 1, 1, 1], [5, 5, 1, 2]], 35: [[4, 4, 1, 2], [2, 5, 2, 2]],\n    36: [[2, 1, 2, 2]], 38: [[1, 4, 3, 2], [5, 8, 1, 2]],\n    40: [[3, 1, 3, -1], [6, 5, 2, 2], [7, 5, 4, 2]],\n    41: [[4, 5, 2, 2], [6, 3, 4, 2], [8, 1, 2, 2]],\n    42: [[2, 1, 2, 2], [4, 3, 2, 2], [6, 5, 2, 2]],\n    46: [[2, 1, 2, 2]],\n    48: [[1, 8, 3, 2], [8, 8, 1, 2], [3, 9, 3, 2]]\n    }\n\ndef deplete_energy(penalty):\n    global energy, game_over\n    if game_over:\n        return # Don't sap energy when they're already dead.\n    energy = energy - penalty\n    draw_energy_air()\n    if energy < 1:\n        end_the_game(\"You're out of energy!\")\n\ndef hazard_start():\n    global current_room_hazards_list, hazard_map\n    if current_room in hazard_data.keys():\n        current_room_hazards_list = hazard_data[current_room]\n        for hazard in current_room_hazards_list:\n            hazard_y = hazard[0]\n            hazard_x = hazard[1]\n            hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)\n        clock.schedule_interval(hazard_move, 0.15)\n\ndef hazard_move():\n    global current_room_hazards_list, hazard_data, hazard_map\n    global old_player_x, old_player_y\n\n    if game_over:\n        return\n\n    for hazard in current_room_hazards_list:\n        hazard_y = hazard[0]\n        hazard_x = hazard[1]\n        hazard_direction = hazard[2]\n        old_hazard_x = hazard_x\n        old_hazard_y = hazard_y\n        hazard_map[old_hazard_y][old_hazard_x] = 0\n\n        if hazard_direction == 1: # up\n            hazard_y -= 1\n        if hazard_direction == 2: # right\n            hazard_x += 1\n        if hazard_direction == 3: # down\n            hazard_y += 1\n        if hazard_direction == 4: # left\n            hazard_x -= 1\n\n        hazard_should_bounce = False\n\n        if (hazard_y == player_y and hazard_x == player_x) or \\\n           (hazard_y == from_player_y and hazard_x == from_player_x\n            and player_frame > 0):\n            sounds.ouch.play()\n            deplete_energy(10)\n            hazard_should_bounce = True\n\n        # Stop hazard going out of the doors\n        if hazard_x == room_width:\n            hazard_should_bounce = True\n            hazard_x = room_width - 1\n        if hazard_x == -1:\n            hazard_should_bounce = True\n            hazard_x = 0\n        if hazard_y == room_height:\n            hazard_should_bounce = True\n            hazard_y = room_height - 1\n        if hazard_y == -1:\n            hazard_should_bounce = True\n            hazard_y = 0\n\n        # Stop when hazard hits scenery or another hazard.\n        if room_map[hazard_y][hazard_x] not in items_player_may_stand_on \\\n               or hazard_map[hazard_y][hazard_x] != 0:\n            hazard_should_bounce = True\n\n        if hazard_should_bounce:\n            hazard_y = old_hazard_y # Move back to last valid position.\n            hazard_x = old_hazard_x\n            hazard_direction += hazard[3]\n            if hazard_direction > 4:\n                hazard_direction -= 4\n            if hazard_direction < 1:\n                hazard_direction += 4\n            hazard[2] = hazard_direction\n\n        hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)\n        hazard[0] = hazard_y\n        hazard[1] = hazard_x\n\n###############\n##   START   ##\n###############\n\nclock.schedule_interval(game_loop, 0.03)\ngenerate_map()\nclock.schedule_interval(adjust_wall_transparency, 0.05)\nclock.schedule_unique(display_inventory, 1)\nclock.schedule_unique(draw_energy_air, 0.5)\nclock.schedule_unique(alarm, 10)\n# A higher number below gives a longer time limit.\nclock.schedule_interval(air_countdown, 5)\nsounds.mission.play() # Intro music\n```"]