- en: '**14'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**14'
- en: DOCUMENTING YOUR WORK**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**记录你的工作**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Python is famous for the readability of its code, but this readability can take
    you only so far. To collaborate with others, and to remind yourself why you did
    what you did, you’ll need to rely on natural human language to convey information,
    make your meaning as clear as possible, or explain the purpose of your program.
    Python enables this through comments and docstrings.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python因其代码的可读性而著名，但这种可读性只能带你走到一定程度。为了与他人协作，并提醒自己为什么做出这样的选择，你需要依靠自然语言来传达信息，使你的意思尽可能明确，或者解释程序的目的。Python通过注释和文档字符串（docstrings）实现这一点。
- en: A *comment* is a non-executable annotation within a computer program. A *docstring*,
    short for *documentation string*, is a multiline string, unassigned to any variable,
    used to add documentation to Python modules, classes, methods, and functions.
    Together, comments and docstrings comprise code documentation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*注释*是计算机程序中的不可执行注解。*文档字符串*（docstring）是多行字符串，不赋值给任何变量，用来为Python模块、类、方法和函数添加文档。注释和文档字符串一起构成了代码文档。'
- en: Good documentation makes your intentions clear and saves future users (including
    yourself) both time and effort. There should be no reason to reverse engineer
    parts of the code or waste time trying to understand arcane arguments or numbers
    applied without context.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的文档能够清晰表达你的意图，并为未来的用户（包括你自己）节省时间和精力。没有理由逆向工程代码的部分内容或浪费时间去理解没有上下文的晦涩参数或数字。
- en: Proper documentation might also include lessons learned during programming and
    can flag potential problems such as those encountered when working across operating
    systems. These will let you pass on valuable knowledge and save others from discovering
    and dealing with these problems on their own.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的文档也可能包括编程过程中学到的经验教训，并能标记出潜在问题，例如跨操作系统工作时遇到的问题。这些能够帮助你传递宝贵的知识，避免其他人在独立发现并处理这些问题时浪费时间。
- en: Given that code generated in a console is usually temporary, you’ll need only
    to document *persistent* programs, such as those generated in a text editor or
    Jupyter Notebook. These types of files are saved to disk and reused, sometimes
    months later, so it’s important to record any intentions and assumptions that
    aren’t clearly self-evident.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于控制台中生成的代码通常是临时的，因此你只需要为*持久*程序记录文档，例如在文本编辑器或Jupyter Notebook中生成的程序。这些文件会保存到磁盘上并重复使用，有时会在几个月后再次使用，因此记录任何不明显的意图和假设是非常重要的。
- en: '**Comments**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**注释**'
- en: '*Comments* are notes that you add to code to remind you of what you were doing,
    explain the purpose of a new block of code, flag a to-do item, and temporarily
    “turn off” code that you don’t want to run. They’re especially helpful when other
    people need to understand and modify your work.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*注释*是你在代码中添加的说明，用来提醒你正在做什么，解释新代码块的目的，标记待办事项，或者暂时“关闭”你不希望执行的代码。它们在别人需要理解和修改你的工作时尤其有用。'
- en: 'Comments start with the hash (`#`) symbol, which tells Python to ignore (not
    execute) any remaining code on the same line. Here’s an example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注释以井号（`#`）符号开始，告诉Python忽略（不执行）同一行中剩余的代码。下面是一个例子：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In consoles and text editors, comments display with a different color than regular
    code. If you’re using the “Spyder” syntax highlighting theme (see “Configuring
    the Spyder Interface” on [page 64](ch04.xhtml#ch00lev1sec23)), comments will be
    colored gray, and docstrings will be green.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台和文本编辑器中，注释的颜色通常与常规代码不同。如果你使用的是“Spyder”语法高亮主题（详见[第64页](ch04.xhtml#ch00lev1sec23)的“配置Spyder界面”），注释会显示为灰色，文档字符串会显示为绿色。
- en: Comments can occur on a single line, extend over multiple lines, or be embedded
    in a line of code. The latter are called *inline* comments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以出现在单行中，跨越多行，或者嵌入在代码行中。后者称为*内联*注释。
- en: Like variable names, comments should be as concise as possible, and it will
    take multiple iterations to get them right. If comments are too long or if there
    are too many, they’ll become distracting, and users might ignore them. If they’re
    too short and cryptic, their purpose will be wasted. If they’re lacking, users
    might end up squandering time deciphering the code. And that user could be you!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 和变量名一样，注释应该尽量简洁，通常需要多次迭代才能做到最好。如果注释太长或太多，它们会分散注意力，用户可能会忽视它们。如果注释过于简短且含糊不清，它们的目的就会失效。如果缺少注释，用户可能会浪费时间去解读代码。而那个用户可能就是你！
- en: 'Of course, you’ll always want to avoid rude comments:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你总是要避免粗鲁的评论：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Comments like this offend people, adversely affect teamwork, and make you look
    unprofessional.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的注释会让人反感，破坏团队合作，并且让你看起来不专业。
- en: 'Another commenting error is to violate the DRY (Don’t Repeat Yourself) maxim
    and elaborate on code that’s already readable and explicit. Here’s an example
    of a redundant comment that adds no value and creates visual noise:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个注释错误是违反了 DRY（不要重复自己）的准则，详细说明了已经易于理解和明确的代码。下面是一个冗余的注释例子，它没有增加任何价值，反而产生了视觉噪音：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following comments state the obvious and clutter the code without adding
    much value, as the code itself is easy to understand:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下注释显得过于显而易见，并且使代码显得杂乱无章，而并未提供额外的价值，因为代码本身已经很容易理解：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The cryptic inline comment that follows was probably meant as a temporary reminder,
    but the coder forgot to remove it so now it adds confusion rather than clarity:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 紧随其后的难懂内联注释可能原本是作为临时提醒，但编码者忘记将其删除，结果现在它带来了困惑而非清晰：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Along these lines, comments that contradict the code are worse than no comments
    at all. Consequently, you should keep comments up to date and address any code
    changes. This is difficult to do in practice and is a good argument for limiting
    the number of comments to those that are strictly necessary.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，与代码相矛盾的注释比没有注释更糟糕。因此，应该保持注释的更新并处理任何代码变化。实际上，这很难做到，因此一个好的理由是将注释数量限制在严格必要的范围内。
- en: You can find the official Python guidelines for comments in the PEP8 *Style
    Guide for Python Code* at *[https://pep8.org/](https://pep8.org/)*. Most of this
    content will be summarized in the sections that follow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[Python 风格指南（PEP8）](https://pep8.org/)* 中找到官方的 Python 注释指南。大部分内容将在接下来的章节中总结。
- en: '***Single-Line Comments***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***单行注释***'
- en: 'A comment will often occupy a single line and summarize some code that follows,
    like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注释通常占据单独一行，并总结随后的代码，如下所示：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because users might not be familiar with the `product` function from the built-in
    `itertools` module, the comment saves them the effort of looking it up.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为用户可能不熟悉内建的 `itertools` 模块中的 `product` 函数，所以注释帮助他们省去了查找的麻烦。
- en: When writing single-line comments, you should insert a single space after the
    hash mark and use complete sentences with periods. If the comment contains multiple
    sentences, each period should be followed by two spaces. Comments should start
    with capital letters unless the first word is an identifier that begins in lowercase.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单行注释时，应在井号后插入一个空格，并使用完整的句子并加上句号。如果注释包含多个句子，每个句号后应跟两个空格。注释应以大写字母开头，除非第一个单词是以小写字母开头的标识符。
- en: 'Additionally, all comments should be indented to the same level as the code
    they address. For example, because matter can’t reach or exceed the speed of light
    (`C`), the following comment explains the purpose of reassigning the `velocity`
    variable to the speed of light minus 0.000001:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有注释都应该与它们所描述的代码保持相同的缩进级别。例如，由于物质无法达到或超过光速（`C`），下面的注释解释了为何将 `velocity` 变量重新赋值为光速减去
    0.000001：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Because the referenced variable assignment occurs *within* the `if` statement
    block, the comment is indented four spaces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于被引用的变量赋值发生在 `if` 语句块*内部*，所以注释缩进了四个空格。
- en: '***Multiline Comments***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多行注释***'
- en: 'Comments that span multiple lines are known as *multiline* comments or *block*
    comments. Python does not have an official syntax for multiline comments. One
    way to handle them is to treat them as a series of single-line comments beginning
    with hash marks, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 跨越多行的注释被称为*多行*注释或*块注释*。Python 没有正式的多行注释语法。处理它们的一种方式是将其视为一系列以井号开头的单行注释，如下所示：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The drawback to this method is that it’s somewhat unreadable. An alternative
    is to use a multiline string with triple quotes. This works because Python ignores
    strings that aren’t assigned to a variable. It’s also more readable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是可读性较差。另一种替代方法是使用三引号的多行字符串。之所以有效，是因为 Python 会忽略未赋值给变量的字符串。这种方法也更具可读性：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also place the triple quotes on the same lines as the comments, as
    follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将三引号放置在与注释相同的行上，如下所示：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If a block comment contains more than one paragraph, separate the paragraphs
    with a blank line.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果块注释包含多个段落，请使用空行分隔这些段落。
- en: Block comments break up the continuity of code and should be used only in special
    circumstances. These include documenting important lessons learned, adding license
    and copyright information, and inserting temporary reminders such as TODO lists,
    FIXME flags, and warnings.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '***Inline Comments***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An inline comment occurs at the end of a statement. A common use is to specify
    measurement units, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By including a comment to specify the value’s unit instead of including that
    unit in the name of the variable, we were able to use a more concise variable
    name.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Inline comments should be separated from the code by at least two spaces, and
    the `#` should be followed by a single space. If the comment won’t fit on the
    same line as the code, use a single line or multiline comment above the statement
    instead.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Inline comments are distracting and should be used sparingly. They should never
    state the obvious and should add clarity. For example, some functions and methods
    come with non-intuitive argument values, like the built-in `turtle` module’s `screen()`
    method, which sets up a drawing window. Normally, you pass it the size of the
    window that you want, in pixels, such as `width=800, height=900`, but to use the
    whole screen, you just pass it `1`. An inline comment can make this clear:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'An inline comment can also provide context to a variable assignment:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, the inline comment can provide a formatting tip:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And here, the comment adds clarity to an argument in a user-defined function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You’ll be tempted to use inline comments far more than they’re really needed.
    In most cases, they can be avoided or minimized by using clear object names.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '***Commenting-Out Code***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because Python ignores comments, you can use the `#` symbol to block the execution
    of some code. This can help you test and debug code by turning parts of it off
    and on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you might want your program to print out a good deal of information,
    but during development, these printouts can slow down the code and obscure other
    outputs that you want to see. While working on the code, you can *comment-out*
    these lines by turning them into comments, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For convenience, you can highlight and comment-out blocks of code using keyboard
    shortcuts. In Spyder, you can see the shortcuts for your system by clicking **File**
    ▸ **Edit** on the top toolbar. For example, in Windows, you can toggle code on
    and off with CTRL-1\. To comment out a block of code that includes an explanatory
    comment, use CTRL-4 to comment-out the block and CTRL-1 to restore it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**TEST YOUR KNOWLEDGE**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 1.  How many spaces should proceed the hash mark of an inline comment?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: a.  1
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: b.  2
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: c.  0
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: d.  Inline comments should use triple quotes
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '2.  True or false: Multiline comments are more readable if they use triple
    quotes.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '3.  In Python, the hash mark (`#`) denotes which of the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: a.  A comment
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: b.  A number
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: c.  A non-executable line of code
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: d.  Weight in pounds
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '4.  A good alternative to using inline comments is:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: a.  A multiline docstring
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: b.  A single-line comment
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: c.  Good naming conventions
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: d.  Judicious use of constants
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '**Docstrings**'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A docstring is a triple-quoted string literal that occurs as the first statement
    in a module, function, class, or method definition. Because of this positioning
    and the use of triple quotes, various types of help tools can discover and display
    docstrings.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Docstrings usually consist of a summary line followed by a more elaborate description:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Because the summary line can be used by automatic indexing tools, it should
    fit on one line and be separated from the rest of the docstring by a blank line.
    The summary line can be on the same line as the opening quotes or on the next
    line. Unless the entire docstring fits on a single line, you should place the
    closing quotes on a line by themselves. The docstring should be indented to the
    same level as the quotes at its first line.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'When docstrings are properly set up, you can access them with the special `__doc__`
    attribute. To see an example using the `pickle` module that we used in [Chapter
    12](ch12.xhtml), enter the following in the console:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will display the module’s docstring:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can also see this in Spyder’s Help pane, by typing **pickle** in the Object
    box ([Figure 14-1](ch14.xhtml#ch014fig1)).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/14fig01.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-1: The pickle module docstring displayed in Spyder’s Help pane*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'For simple functions or methods, the docstring can consist entirely of the
    one-line summary. Even though this summary doesn’t span multiple lines, you should
    still use triple quotes, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is about as terse as a docstring can get, but it’s sufficient for simple
    functions and functions you define for your own use. However, if you plan to work
    on enterprise-scale code or contribute to open source projects, you’ll want to
    follow the instructions in PEP 257, which covers docstring conventions (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*).
    Some of these cases can be quite elaborate, with docstrings several screens long.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: In the sections that follow, we’ll look at docstring conventions appropriate
    for scientists and engineers working alone or in close groups. In these cases,
    users will be applying the code more often than modifying it, and simple docstrings
    should address their needs.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '***Documenting Modules***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The docstring of a module should be placed at the top of the module above any
    import statements. The first line should describe the module’s purpose. The rest
    of the docstring should generally list the classes, exceptions, functions, and
    any other objects that are exported by the module, with a one-line summary of
    each. It’s okay if these summaries provide less detail than the summary line in
    the object’s own docstring.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how the `pickle` module’s docstring looks in the actual code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As modules become larger and more complex, their docstrings can become quite
    technical. This makes them difficult for beginners and non-developers to both
    write and read. For programs written for your own use or for that of your immediate
    team, simpler summaries might be appropriate. Here’s a friendly module docstring
    (in bold) for the *mymath.py* module we wrote in [Chapter 11](ch11.xhtml):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can get this documentation using `__doc__`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Likewise, the built-in `help()` function can retrieve this docstring with more
    information, including the location of the file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This docstring gives the user a nice overview of the `my_math` module. Don’t
    worry that the description of the functions is a little sparse. As you’ll see
    in a later section, functions get their own docstrings, in which you can expand
    on the function’s purpose, parameters, outputs, and so on.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '***Documenting Classes***'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The docstring for a class should follow the same pattern as a module-level docstring.
    It should summarize the class behavior and list the public methods and instance
    variables. Any subclasses, constructors, and methods should have their own docstrings.
    You should insert a blank line after all docstrings that document a class.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of a docstring for a Starship class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This docstring is simple, but that’s okay because one of the main uses of docstrings
    is to provide dynamic hints when using the class (see [Figure 13-4](ch13.xhtml#ch013fig4)).
    Consequently, you’ll want to present the information as concisely as possible.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we start the docstring with a one-line summary followed by a list
    of attributes. This listing includes the attribute name, its data type, and a
    brief description. Next, we list the class methods along with a single-line summary
    of each.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '***Documenting Functions and Methods***'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The docstring for a function or method should summarize its behavior and document
    its arguments, return values, and side effects as well as any exceptions raised
    and restrictions on when it can be called (if applicable). You should indicate
    optional and keyword arguments as such.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, if your function or method takes no arguments and returns a single
    value, a one-line summary should provide enough documentation. This summary should
    use *imperative mood*; in other words, use “Return” not “Returns”:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here’s a longer docstring for a function that accepts two words and returns
    `True` if the words are anagrams (composed of the same letters in different orders)
    or `False` if they’re not. It provides information on the function’s arguments
    and return value:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here’s the output of this code. Because “softer” is an anagram of “forest,”
    the comparison returns `True`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If a function’s arguments have default values, you should mention them. Here’s
    an example using the `tax_rate` parameter:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '***Keeping Docstrings Up to Date with doctest***'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s easy to update a program and forget to edit the associated docstring. With
    the `doctest` built-in module, you can embed usage examples in docstrings to check
    whether there’s a divergence between the code and its documentation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 更新程序时，容易忘记编辑相关的文档字符串。使用内置的`doctest`模块，你可以在文档字符串中嵌入使用示例，以检查代码和文档之间是否存在差异。
- en: 'The `doctest` module searches for pieces of text that look like interactive
    Python sessions and then executes those sessions to verify that they work exactly
    as shown. Let’s look at a simple function that takes a starship’s warp factor
    value and adjusts it so that it falls within acceptable operating limits. The
    code highlighted in bold represents the embedded test cases:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`doctest`模块会搜索看起来像是交互式 Python 会话的文本片段，然后执行这些会话以验证它们是否按预期工作。我们来看一个简单的函数，它接受星舰的跃迁因子值，并调整它使其落在可接受的操作范围内。粗体部分的代码代表嵌入的测试用例：'
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The test cases check both acceptable and unacceptable values. Unacceptable values
    are those that will fail the comparison statements, such as `12` and `-4`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例检查可接受和不可接受的值。不可接受的值是那些会导致比较语句失败的值，例如`12`和`-4`。
- en: 'You can run `doctest` in several ways. One way is by running the script from
    the text editor by pressing F5\. Another is to open the console, import the `doctest`
    module and your custom module (without the *.py* extension), and call the `testmod()`
    method, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过几种方式运行`doctest`。一种方式是通过按 F5 在文本编辑器中运行脚本。另一种方式是打开控制台，导入`doctest`模块和你的自定义模块（不带*.py*扩展名），然后调用`testmod()`方法，如下所示：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Because none of the tests failed, you got an abbreviated summary of the test
    result. If you go back to the docstring and edit the expected result for `warp(-4)`
    from `0` to `4`, you’ll see this output when you rerun the method (remember to
    save your script first):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因为没有任何测试失败，你得到了一个简要的测试结果总结。如果你返回到文档字符串并将`warp(-4)`的预期结果从`0`编辑为`4`，然后重新运行该方法（记得先保存脚本），你会看到如下输出：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To print a detailed log of what the `doctest` module is trying, what it’s expecting,
    and what it found, pass `verbose=True` to `testmod()`. Here’s the result for a
    no-failure case:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印出`doctest`模块尝试的详细日志、它的预期结果以及实际找到的结果，可以将`verbose=True`传递给`testmod()`。以下是没有失败的测试的结果：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You can also run `doctest` from Anaconda Prompt or a terminal. Just navigate
    to the directory that holds your Python file and run the following using the `-v`
    switch (for verbose mode):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过 Anaconda Prompt 或终端运行`doctest`。只需导航到包含 Python 文件的目录，并使用`-v`开关（用于详细模式）运行以下命令：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Leave off the `-v` switch for a simple summary.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只需要简要的总结，可以省略`-v`开关。
- en: Besides checking that a module’s docstrings are up to date, you can use `doctest`
    to verify that interactive examples from a test file or a test object work as
    expected. This is known as *regression testing*, and it ensures that previously
    developed and tested software still performs after a change.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查模块的文档字符串是否是最新的，你还可以使用`doctest`验证测试文件或测试对象中的交互式示例是否按预期工作。这被称为*回归测试*，它确保以前开发和测试的软件在更改后仍然正常运行。
- en: You can also use `doctest` to write tutorial documentation for a package, liberally
    illustrated with input-output examples. To learn more, visit *[https://docs.python.org/3/library/doctest.html](https://docs.python.org/3/library/doctest.html)*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`doctest`为包编写教程文档，充分使用输入输出示例进行说明。要了解更多信息，请访问*[https://docs.python.org/3/library/doctest.html](https://docs.python.org/3/library/doctest.html)*。
- en: '***Checking Docstrings in the Spyder Code Analysis Pane***'
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在 Spyder 代码分析面板中检查文档字符串***'
- en: You can use the Spyder IDE to check how your docstrings conform to established
    guidelines. The results are presented in the code analysis pane, which was introduced
    on [page 85](ch04.xhtml#ch00lev1sec29) in [Chapter 4](ch04.xhtml), and within
    the text editor itself.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Spyder IDE 检查文档字符串是否符合已建立的规范。结果将在代码分析面板中显示，该面板在[第 4 章](ch04.xhtml)的[第
    85 页](ch04.xhtml#ch00lev1sec29)中介绍过，并且也会在文本编辑器中显示。
- en: '**Setting Spyder Preferences**'
  id: totrans-140
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置 Spyder 偏好设置**'
- en: To set up Spyder to check docstrings, on the top toolbar, click **Tools** ▸
    **Preferences**. In the Preferences window, click **Completion and linting**.
    Then, choose the **Docstring style** tab. You should see the window shown in [Figure
    14-2](ch14.xhtml#ch014fig2). Ensure that the **Enable docstring style linting**
    checkbox is selected.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 Spyder 以检查文档字符串，点击顶部工具栏中的**工具** ▸ **偏好设置**。在偏好设置窗口中，点击**自动补全和代码检查**，然后选择**文档字符串样式**标签。你应该能看到[图
    14-2](ch14.xhtml#ch014fig2)所示的窗口。确保勾选**启用文档字符串样式检查**复选框。
- en: '![Image](../images/14fig02.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/14fig02.jpg)'
- en: '*Figure 14-2: Spyder’s Docstring style window*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Choose the convention used to lint docstrings** drop-down menu offers
    you three choices: PEP 257, NumPy, and Custom. As previously discussed, PEP 257
    is Python’s official docstring guide, so we’ll use it here.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: In addition to PEP 257, some members of the scientific community use a NumPy
    docstring standard (*[https://numpydoc.readthedocs.io/en/latest/install.html](https://numpydoc.readthedocs.io/en/latest/install.html)*).
    You can find examples of this style at *[https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html)*).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: You can also choose to show or ignore certain errors, based on the codes found
    at *[http://www.pydocstyle.org/en/stable/error_codes.html](http://www.pydocstyle.org/en/stable/error_codes.html)*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '*In addition to PEP 257 and NumPy, there are other docstring formats that you
    can follow. Google has its own format and an excellent style guide ([https://google.github.io/styleguide/pyguide.html](https://google.github.io/styleguide/pyguide.html)).
    You can see examples of this style at [https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
    In addition, *reStructuredText* is a popular format used mainly in conjunction
    with a tool called *Sphinx*. Sphinx uses docstrings to generate documentation
    for Python projects in formats such as HTML and PDF. If you’ve ever read the docs
    ([https://readthedocs.org/](https://readthedocs.org/)) for a Python module, you’ve
    seen Sphinx in action.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Analysis**'
  id: totrans-149
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To see how checking docstrings with Spyder works in practice, let’s write some
    docstring-challenged code. Open the text editor, enter the following, and save
    it as *test_docs.py* (you can do this in the *oop* Spyder project from the previous
    chapter or somewhere else):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Hopefully, you’ve noticed several documentation errors here, but if you haven’t,
    don’t despair, Spyder will find and flag these for you. To start, on the top toolbar,
    click **Source**. This will produce the menu shown in [Figure 14-3](ch14.xhtml#ch014fig3).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/14fig03.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-3: The Source menu from Spyder’s top toolbar*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Be sure that the **Show docstring style warnings** checkbox is selected, and
    then, at the bottom of the menu, click the **Run code analysis** option (or press
    the F8 shortcut). The code analysis pane should appear ([Figure 14-4](ch14.xhtml#ch014fig4)).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/14fig04.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-4: The code analysis pane with messages related to the docstrings*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the right-facing arrow (**>**) symbol next to the **Convention** heading
    to expand the style messages for code and docstrings. In the *test_docs.py* example,
    we’re missing two recommended docstrings: one for the entire program, called the
    module docstring, and one for the `pyroclastic_cloud` method.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: The messages in the code analysis pane are from the code linting tool and lack
    granularity with respect to docstrings. To see specific documentation errors,
    hover your cursor over the orange triangles to the left of the line numbers in
    the text editor ([Figure 14-5](ch14.xhtml#ch014fig5)). You’ll see multiple error
    codes along with their descriptions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析窗格中的信息来自代码静态检查工具，它在处理文档字符串时缺乏精细度。要查看特定的文档错误，将光标悬停在文本编辑器中行号左侧的橙色三角形上（[图 14-5](ch14.xhtml#ch014fig5)）。你将看到多个错误代码及其描述。
- en: '![Image](../images/14fig05.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/14fig05.jpg)'
- en: '*Figure 14-5: The code analysis messages for Line 1*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-5：第 1 行的代码分析信息*'
- en: The message about the missing module docstring is repeated, but with a different
    error code than in the code analysis pane. Then, for the `Volcano` class definition,
    there are messages flagging a missing blank line, the incorrect use of quotes,
    and the need for a period at the end of the docstring.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 关于缺失模块文档字符串的消息会重复出现，但其错误代码与代码分析窗格中的不同。然后，对于 `Volcano` 类定义，系统会标记缺少空行、引号使用不当，以及文档字符串末尾需要加句号的问题。
- en: If you hover your cursor over the Line 3 triangle, which refers to the `__init__()`
    method, you’ll see a window with similar errors ([Figure 14-6](ch14.xhtml#ch014fig6)).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将光标悬停在第 3 行的三角形上，指向`__init__()`方法，你会看到一个显示类似错误的窗口（[图 14-6](ch14.xhtml#ch014fig6)）。
- en: '![Image](../images/14fig06.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/14fig06.jpg)'
- en: '*Figure 14-6: The code analysis messages for Line 3*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-6：第 3 行的代码分析信息*'
- en: Note that the tool checks for the *presence* of a summary description, but it
    doesn’t evaluate the *content* of the description. A nonsensical summary such
    as `"""sfsds"""` will pass the test.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，工具检查的是摘要描述的*存在*，但不会评估描述的*内容*。例如 `"""sfsds"""` 这样的无意义摘要仍然能通过测试。
- en: Spyder’s code analysis tool is a great way to ensure that your code, and its
    documentation, conform to Python community standards.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 的代码分析工具是确保你的代码及其文档符合 Python 社区标准的好方法。
- en: '**TEST YOUR KNOWLEDGE**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的知识**'
- en: 5.  Which of the following help you access docstrings?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 5.  以下哪些选项帮助你访问文档字符串？
- en: a.  The `__doc__ special` attribute
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `__doc__` 特殊属性
- en: b.  `help()`
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: b.  `help()`
- en: c.  The Spyder Help pane
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: c.  Spyder 帮助窗格
- en: d.  All the above
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: d.  以上所有选项
- en: 6.  Import the built-in `itertools` module and get help on its `product()` method.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 6.  导入内置的 `itertools` 模块，并查看其 `product()` 方法的帮助信息。
- en: 7.  Which Python Enhancement Proposals provide guidance on code documentation?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 7.  哪些 Python 增强提案（PEP）提供了关于代码文档化的指导？
- en: a.  PEP 248
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: a.  PEP 248
- en: b.  PEP 8
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: b.  PEP 8
- en: c.  PEP 549
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: c.  PEP 549
- en: d.  PEP 257
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: d.  PEP 257
- en: 8.  Which of the following make docstrings accessible to automatic help tools?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 8.  以下哪些选项使文档字符串能够被自动帮助工具访问？
- en: a.  Use of triple quotes
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: a.  使用三重引号
- en: b.  Description of input and output data types
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: b.  输入和输出数据类型的描述
- en: c.  That it immediately follows a `def` statement
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: c.  它紧跟在 `def` 语句后面
- en: d.  Final triple quote followed by a space
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: d.  以空格结尾的三重引号
- en: '9.  Spyder’s code analysis tool can check your docstrings for conformity to:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 9.  Spyder 的代码分析工具可以检查文档字符串是否符合以下要求：
- en: a.  PEP 8 conventions
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: a.  PEP 8 风格指南
- en: b.  PEP 257 and Google conventions
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: b.  PEP 257 和 Google 风格指南
- en: c.  PEP 8 and Google conventions
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: c.  PEP 8 和 Google 风格指南
- en: d.  PEP 257 and NumPy conventions
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: d.  PEP 257 和 NumPy 风格指南
- en: 10.  Write a docstring for the `Frigate` class defined in the *ships.py* program
    from [Chapter 13](ch13.xhtml).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 10.  为[第 13 章](ch13.xhtml)的*ships.py* 程序中定义的 `Frigate` 类编写文档字符串。
- en: '**Summary**'
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Good documentation maximizes the usability of your code as well as its maintainability
    over time. In the Python community, well-written code is synonymous with well-documented
    code. Comments and docstrings let you add human language to programs to fill in
    any explanatory gaps about their purpose, meaning, and usability.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的文档化能最大化代码的可用性及其在未来的可维护性。在 Python 社区，编写良好的代码意味着编写了良好的文档。注释和文档字符串允许你将人类语言添加到程序中，以填补关于程序目的、意义和可用性的解释空白。
- en: Comments represent non-executable notes for annotating code or for temporarily
    commenting-out lines so that they don’t run. You should use comments sparingly
    to explain your intent, capture important programming lessons learned, provide
    warnings, include legal information such as for license and copyright data, specify
    units, and so on. Most comments occupy a single line, or are placed inline, and
    start with a `#` symbol. Multiline comments can use triple-quotes for readability.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注释表示不可执行的注释内容，用于标注代码或暂时屏蔽某些行，以防它们运行。你应该谨慎使用注释，解释你的意图、记录重要的编程经验、提供警告、包含法律信息（如许可证和版权数据）、指定单位等。大多数注释占据单行，或嵌入到代码行中，并以`#`符号开头。多行注释可以使用三引号来提高可读性。
- en: Docstrings are special triple-quoted strings that occur at the top of a module
    or immediately after a `class` or `def` statement. They provide a user with an
    overview of what the code does and how to use it, and you can access them using
    automatic help tools. You should use docstrings with every module, class, method,
    and function, and these should be kept up to date as the code changes.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串是特殊的三引号字符串，出现在模块的顶部或`class`或`def`语句后面。它们为用户提供代码的概述，说明代码的功能以及如何使用，你可以通过自动帮助工具访问它们。你应该在每个模块、类、方法和函数中使用文档字符串，并且随着代码的变化，保持它们的更新。
- en: Various tools can help you check that your docstrings are up to date and well
    formatted. With the built-in `doctest` module, you can embed testable cases in
    docstrings. These let you check that code updates don’t change expected behaviors.
    They can also provide example use cases for new users. The Spyder IDE includes
    a tool for checking your docstrings against the PEP 257 and NumPy guidelines.
    The results are displayed in the code analysis pane and along the margin of the
    text editor, adjacent to the problem lines.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 各种工具可以帮助你检查文档字符串是否最新且格式正确。通过内置的`doctest`模块，你可以在文档字符串中嵌入可测试的案例。这些案例可以帮助你检查代码更新是否改变了预期的行为，并且为新用户提供示例用法。Spyder
    IDE包含一个工具，用于检查文档字符串是否符合PEP 257和NumPy的规范。检查结果会显示在代码分析面板中，并在文本编辑器的边缘与问题代码行相邻显示。
