- en: 'Lists work in a similar way:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的工作方式类似：
- en: '>>> myList = [10, 20, 30, 40]'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> myList = [10, 20, 30, 40]'
- en: '>>> print(type(myList))'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(type(myList))'
- en: <class 'list'>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <class 'list'>
- en: All lists are instances of the list class, which has many methods includ-
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有列表都是列表类的实例，该类具有许多方法，包括
- en: ing myList.append(), myList.count(), myList.index(), and so on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如myList.append()、myList.count()、myList.index()等等。
- en: When you write a class, you are defining a new data type. Your code
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个类时，你实际上是在定义一个新的数据类型。你的代码
- en: provides the details by defining what data it maintains and what operations
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义它维护的数据和执行的操作来提供细节。
- en: it can perform. After creating an instance of your class and assigning it to
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以执行的操作。在创建类的实例并将其分配给
- en: a variable, you can use the type() built-in function to determine the class
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变量，你可以使用type()内建函数来确定该变量的类
- en: used to create it, just like with a built-in data type. Here we instantiate
    a
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 像使用内建数据类型一样，用它创建一个对象。这里我们实例化了一个
- en: 'LightSwitch object and print out its data type:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: LightSwitch 对象并输出其数据类型：
- en: '>>> oLightSwitch = LightSwitch()'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> oLightSwitch = LightSwitch()'
- en: '>>> print(type(oLightSwitch))'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(type(oLightSwitch))'
- en: <class 'LightSwitch'>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <class 'LightSwitch'>
- en: '**32** Chapter 2'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**32** 第二章'
- en: Just like with Python’s built-in data types, we can then use the variable oLightSwitch
    to call the methods available in the oLightSwitch class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Python的内建数据类型一样，我们可以用变量oLightSwitch来调用oLightSwitch类中可用的方法。
- en: '***Definition of an Object***'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '***对象的定义***'
- en: To summarize this section, I’ll give my formal definition of an *object*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结这一部分，我将给出我对*对象*的正式定义。
- en: '**object**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象**'
- en: Data, plus code that acts on that data, over time .
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据，以及随着时间推移对这些数据进行操作的代码。
- en: A class defines what an object will look like when you instantiate one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类定义了实例化时对象的外观。
- en: An object is a set of instance variables and the code of the methods in the
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象是一组实例变量和方法代码，
- en: class from which the object was instantiated. Any number of objects can
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类，从中实例化对象。可以实例化任意数量的对象
- en: be instantiated from a class, and each has its own set of instance variables.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从一个类实例化，每个对象都有自己的一组实例变量。
- en: When you call a method of an object, the method runs and uses the set of
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用对象的方法时，该方法会运行，并使用该对象中的一组
- en: instance variables in that object.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象中的实例变量。
- en: '**Building a Slightly More Complicated Class**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建一个稍微复杂的类**'
- en: Let’s build on the concepts introduced so far and work through a second,
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在已有概念的基础上继续构建，并通过一个稍微复杂的例子，
- en: slightly more complicated example in which we’ll make a dimmer switch
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微复杂的例子，我们将做一个调光开关
- en: class. A dimmer switch has an on/off switch, but it also has a multiposition
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类。一个调光开关有一个开/关开关，但它还有一个多位置
- en: slider that affects the brightness of the light.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 影响光亮度的滑块。
- en: The slider can move through a range of brightness values. To make
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个滑块可以在一系列亮度值中移动。为了让
- en: things straightforward, our dimmer digital slider has 11 positions, from 0
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化事情，我们的调光数字滑块有11个位置，从0
- en: (completely off) through 10 (completely on). To raise or lower the bright-
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （完全关闭）到10（完全开启）。要调高或调低亮度，
- en: ness of the bulb to the maximum extent, you must move the slider through
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要将灯泡的亮度调至最大限度，你必须将滑块调至
- en: every possible setting.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可能的设置。
- en: This DimmerSwitch class has more functionality than our LightSwitch class
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DimmerSwitch类比我们的LightSwitch类具有更多功能。
- en: 'and needs to remember more data:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并且需要记住更多的数据：
- en: • The switch state (on or off)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: • 开关状态（开或关）
- en: • Brightness level (0 to 10)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: • 亮度级别（0到10）
- en: 'And here are the behaviors a DimmerSwitch object can perform:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是DimmerSwitch对象可以执行的行为：
- en: • Turn on
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 打开
- en: • Turn off
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: • 关闭
- en: • Raise level
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: • 提高亮度
- en: • Lower level
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: • 低级别
- en: • Show (for debugging)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: • 显示（用于调试）
- en: The DimmerSwitch class uses the standard template shown earlier in
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: DimmerSwitch 类使用前面展示的标准模板
- en: 'Listing 2-2: it starts with a class statement and a first method named'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-2：它以一个类声明开始，并有一个名为的第一个方法
- en: __init__(), then defines a number of additional methods, one for each of
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: __init__()，然后定义了一些额外的方法，每个方法对应
- en: the behaviors listed. The full code for this class is presented in Listing 2-5\.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所列的行为。这个类的完整代码在列表2-5中给出。
- en: Modeling Physical Objects with Object-Oriented Programming **33**
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用面向对象编程建模物理对象 **33**
- en: '**File: DimmerSwitch.py**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：DimmerSwitch.py**'
- en: DimmerSwitch class
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DimmerSwitch 类
- en: 'class DimmerSwitch():'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'class DimmerSwitch():'
- en: 'def __init__(self):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self):'
- en: self.switchIsOn = False
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: self.switchIsOn = False
- en: self.brightness = 0
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: self.brightness = 0
- en: 'def turnOn(self):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'def turnOn(self):'
- en: self.switchIsOn = True
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: self.switchIsOn = True
- en: 'def turnOff(self):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'def turnOff(self):'
- en: self.switchIsOn = False
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: self.switchIsOn = False
- en: 'def raiseLevel(self):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'def raiseLevel(self):'
- en: 'if self.brightness < 10:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 self.brightness < 10：
- en: self.brightness = self.brightness + 1
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: self.brightness = self.brightness + 1
- en: 'def lowerLevel(self):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'def lowerLevel(self):'
- en: 'if self.brightness > 0:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 self.brightness > 0：
- en: self.brightness = self.brightness - 1
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: self.brightness = self.brightness - 1
- en: Extra method for debugging
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于调试的额外方法
- en: 'def show(self):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'def show(self):'
- en: print(Switch is on?', self.switchIsOn)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: print(开关是否开启？', self.switchIsOn)
- en: print('Brightness is:', self.brightness)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: print('亮度为：', self.brightness)
- en: '*Listing 2-5: The slightly more complicated DimmerSwitch class*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-5：稍微复杂一些的 DimmerSwitch 类*'
- en: 'In this __init__() method we have two instance variables: the famil-'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个__init__()方法中，我们有两个实例变量：家庭-
- en: iar self.switchIsOn and a new one, self.brightness, which remembers the
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 变量实例维护它们在方法调用之间的值
- en: brightness level. We assign starting values to both instance variables. All
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度级别。我们为两个实例变量分配了初始值。所有
- en: other methods can access the current value of each of these. In addition
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 其他方法可以访问这些的当前值。此外
- en: 'to turnOn() and turnOff(), we include two new methods for this class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现 turnOn() 和 turnOff()，我们为这个类添加了两个新方法：
- en: raiseLevel() and lowerLevel(), which do exactly what their names imply.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: raiseLevel() 和 lowerLevel()，它们的作用正如名称所示。
- en: The show() method is used during development and debugging and just
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: show()方法在开发和调试过程中使用，直接
- en: prints the current values of the instance variables.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打印实例变量的当前值。
- en: The main code in Listing 2-6 tests our class by creating a DimmerSwitch
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-6 中的主代码通过创建一个 DimmerSwitch 来测试我们的类
- en: object (oDimmer), then calling the various methods.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对象（oDimmer），然后调用各种方法。
- en: '**File: OO_DimmerSwitch_with_Test_Code.py**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_DimmerSwitch_with_Test_Code.py**'
- en: DimmerSwitch class with test code
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有测试代码的 DimmerSwitch 类
- en: 'class DimmerSwitch():'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '类 DimmerSwitch():'
- en: '--- snipped code of DimmerSwitch class, as in Listing 2-5 ---'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '--- 删除的 DimmerSwitch 类代码，如列表 2-5 所示 ---'
- en: Main code
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主代码
- en: oDimmer = DimmerSwitch()
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer = DimmerSwitch()
- en: Turn switch on, and raise the level 5 times
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Turn 开关开启，并提升级别5次
- en: '**34** Chapter 2'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**第2章 第34页**'
- en: oDimmer.turnOn()
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.turnOn()
- en: oDimmer.raiseLevel()
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.raiseLevel()
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.raiseLevel()
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.raiseLevel()
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.raiseLevel()
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.show()
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.show()
- en: Lower the level 2 times, and turn switch off
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低级别2次，并关闭开关
- en: oDimmer.lowerLevel()
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.lowerLevel()
- en: oDimmer.lowerLevel()
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.lowerLevel()
- en: oDimmer.turnOff()
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.turnOff()
- en: oDimmer.show()
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.show()
- en: Turn switch on, and raise the level 3 times
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开开关，并提升级别3次
- en: oDimmer.turnOn()
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.turnOn()
- en: oDimmer.raiseLevel()
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.raiseLevel()
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.raiseLevel()
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: oDimmer.show()
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.show()
- en: '*Listing 2-6: DimmerSwitch class with test code*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-6：带有测试代码的 DimmerSwitch 类*'
- en: 'When we run this code, the resulting output is:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这段代码时，输出结果是：
- en: Switch is on? True
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 开关是否开启？ True
- en: 'Brightness is: 5'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度为：5
- en: Switch is on? False
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 开关是否开启？ False
- en: 'Brightness is: 3'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度为：3
- en: Switch is on? True
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 开关是否开启？ True
- en: 'Brightness is: 6'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度为：6
- en: The main code creates the oDimmer object, then makes calls to the vari-
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 主代码创建了 oDimmer 对象，然后调用了多个
- en: ous methods. Each time we call the show() method, the on/off state and the
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 其他方法。每次调用 show() 方法时，开/关状态和
- en: brightness level are printed. The key thing to remember here is that oDimmer
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度级别被打印。这里需要记住的关键点是 oDimmer
- en: represents an object. It allows access to all methods in the class from which
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个对象。它允许访问类中的所有方法
- en: it was instantiated (the DimmerSwitch class), *and* it has a set of all instance
    variables defined in the class (self.switchIsOn and self.brightness). Again,
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 它被实例化（DimmerSwitch 类），*并且*它拥有在类中定义的所有实例变量（self.switchIsOn 和 self.brightness）。再次，
- en: instance variables maintain their values between calls to methods of an
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量在方法调用之间保持它们的值
- en: object, so the self.brightness instance variable is incremented by 1 for each
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对象，所以 self.brightness 实例变量每次增加1
- en: call to oDimmer.raiseLevel().
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer.raiseLevel()
- en: '**Representing a More Complicated Physical Object as a Class**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**将更复杂的物理对象表示为类**'
- en: 'Let’s consider a more complicated physical object: a television. With this'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个更复杂的物理对象：电视机。对于这个
- en: more complicated example, we’ll take a closer look at how arguments work
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更复杂的示例中，我们将更深入地了解参数的工作原理
- en: in classes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中。
- en: A television requires much more data than a light switch to represent
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 电视机需要比灯光开关更多的数据来表示
- en: its state, and it has more behaviors. To create a TV class, we must consider
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 它的状态，并且有更多的行为。为了创建一个电视类，我们必须考虑
- en: how a user would typically use a TV and what the TV would have to remem-
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通常如何使用电视以及电视需要记住什么
- en: ber. Let’s look at some of the important buttons on a typical TV remote
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下典型电视遥控器上的一些重要按钮
- en: (Figure 2-4).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: （图 2-4）。
- en: Modeling Physical Objects with Object-Oriented Programming **35**
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程建模物理对象 **35**
- en: Power
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 电源
- en: Volume
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 音量
- en: Channel
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 频道
- en: Mute
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 静音
- en: Get Info
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 获取信息
- en: '1'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '0'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: '*Figure 2-4: A simplified TV remote*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-4：简化版电视遥控器*'
- en: From this, we can determine that to keep track of its state, a TV class
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以得出结论，要跟踪其状态，TV 类
- en: 'would have to maintain the following data:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 必须维护以下数据：
- en: • Power state (on or off)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: • 电源状态（开或关）
- en: • Mute state (is it muted?)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: • 静音状态（是否静音？）
- en: • List of channels available
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: • 可用频道列表
- en: • Current channel setting
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: • 当前频道设置
- en: • Current volume setting
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: • 当前音量设置
- en: • Range of volume levels available
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: • 可用音量级别范围
- en: 'And the actions that the TV must provide include:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 电视必须提供的操作包括：
- en: • Turn the power on and off
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: • 开关电源
- en: • Raise and lower the volume
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: • 调节音量
- en: • Change the channel up and down
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: • 切换频道
- en: • Mute and unmute the sound
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: • 静音和取消静音
- en: • Get information about the current settings
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: • 获取当前设置的信息
- en: • Go to a specified channel
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: • 转到指定频道
- en: '**36** Chapter 2'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**36** 第二章'
- en: The code for our TV class is shown in Listing 2-7\. We include the __init__()
    method for initialization, followed by a method for each of the behaviors.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 TV 类代码显示在清单 2-7 中。我们包括了用于初始化的 __init__() 方法，接下来是每个行为的方法。
- en: '**File: TV.py**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：TV.py**'
- en: TV class
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TV 类
- en: 'class TV():'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'class TV():'
- en: 'def __init__(self): 1'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self): 1'
- en: self.isOn = False
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: self.isOn = False
- en: self.isMuted = False
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: self.isMuted = False
- en: Some default list of channels
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些默认的频道列表
- en: self.channelList = [2, 4, 5, 7, 9, 11, 20, 36, 44, 54, 65]
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelList = [2, 4, 5, 7, 9, 11, 20, 36, 44, 54, 65]
- en: self.nChannels = len(self.channelList)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: self.nChannels = len(self.channelList)
- en: self.channelIndex = 0
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelIndex = 0
- en: 'self.VOLUME_MINIMUM = 0 # constant'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.VOLUME_MINIMUM = 0 # 常量'
- en: 'self.VOLUME_MAXIMUM = 10 # constant'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.VOLUME_MAXIMUM = 10 # 常量'
- en: 'self.volume = self.VOLUME_MAXIMUM // # integer divide'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.volume = self.VOLUME_MAXIMUM // # 整数除法'
- en: 'def power(self): 2'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'def power(self): 2'
- en: 'self.isOn = not self.isOn # toggle'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.isOn = not self.isOn # 切换状态'
- en: 'def volumeUp(self):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'def volumeUp(self):'
- en: 'if not self.isOn:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 not self.isOn:'
- en: return
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'if self.isMuted:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.isMuted:'
- en: 'self.isMuted = False # changing the volume while muted unmutes the sound'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.isMuted = False # 在静音状态下改变音量会取消静音'
- en: 'if self.volume < self.VOLUME_MAXIMUM:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.volume < self.VOLUME_MAXIMUM:'
- en: self.volume = self.volume + 1
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: self.volume = self.volume + 1
- en: 'def volumeDown(self):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'def volumeDown(self):'
- en: 'if not self.isOn:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 not self.isOn:'
- en: return
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'if self.isMuted:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.isMuted:'
- en: 'self.isMuted = False # changing the volume while muted unmutes the sound'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.isMuted = False # 在静音状态下改变音量会取消静音'
- en: 'if self.volume > self.VOLUME_MINIMUM:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.volume > self.VOLUME_MINIMUM:'
- en: self.volume = self.volume - 1
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: self.volume = self.volume - 1
- en: 'def channelUp(self): 3'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'def channelUp(self): 3'
- en: 'if not self.isOn:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 not self.isOn:'
- en: return
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: self.channelIndex = self.channelIndex + 1
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelIndex = self.channelIndex + 1
- en: 'if self.channelIndex > self.nChannels:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.channelIndex > self.nChannels:'
- en: 'self.channelIndex = 0 # wrap around to the first channel'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.channelIndex = 0 # 回绕到第一个频道'
- en: 'def channelDown(self): 4'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'def channelDown(self): 4'
- en: 'if not self.isOn:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 not self.isOn:'
- en: return
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: self.channelIndex = self.channelIndex - 1
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelIndex = self.channelIndex - 1
- en: 'if self.channelIndex < 0:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.channelIndex < 0:'
- en: 'self.channelIndex = self.nChannels - 1 # wrap around to the top channel'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.channelIndex = self.nChannels - 1 # 回绕到第一个频道'
- en: 'def mute(self): 5'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'def mute(self): 5'
- en: 'if not self.isOn:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 not self.isOn:'
- en: Modeling Physical Objects with Object-Oriented Programming **37**
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程建模物理对象 **37**
- en: return
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: self.isMuted = not self.isMuted
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: self.isMuted = not self.isMuted
- en: 'def setChannel(self, newChannel):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 'def setChannel(self, newChannel):'
- en: 'if newChannel in self.channelList:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 newChannel 在 self.channelList 中:'
- en: self.channelIndex = self.channelList.index(newChannel)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelIndex = self.channelList.index(newChannel)
- en: if the newChannel is not in our list of channels, don't do anything
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果 newChannel 不在我们的频道列表中，则不执行任何操作
- en: 'def showInfo(self): 6'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'def showInfo(self): 6'
- en: print()
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: print('TV Status:')
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: print('电视状态：')
- en: 'if self.isOn:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.isOn:'
- en: 'print('' TV is: On'')'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 电视状态：开')
- en: print(' Channel is:', self.channelList[self.channelIndex])
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 当前频道为:', self.channelList[self.channelIndex])
- en: 'if self.isMuted:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.isMuted:'
- en: print(' Volume is:', self.volume, '(sound is muted)')
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 音量为:', self.volume, '(声音已静音)')
- en: 'else:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 否则：
- en: print(' Volume is:', self.volume)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 音量为:', self.volume)
- en: 'else:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 否则：
- en: 'print('' TV is: Off'')'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 电视状态：关闭')
- en: '*Listing 2-7: The TV class with many instance variables and methods*'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-7：具有多个实例变量和方法的 TV 类*'
- en: The __init__() method 1 creates all the instance variables used in all the
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: __init__() 方法 1 创建了所有在各个方法中使用的实例变量。
- en: methods and assigns reasonable starting values to each. Technically, you can
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 方法并为每个方法分配合理的初始值。从技术上讲，你可以
- en: create an instance variable inside any method; however, it is a good program-
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何方法内创建一个实例变量；然而，这是一个良好的编程实践——
- en: ming practice to define all instance variables in the __init__() method. This
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在 __init__() 方法中定义所有实例变量是一种良好的编程实践。
- en: avoids the risk of an error when attempting to use an instance variable in a
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在尝试使用实例变量时出现错误的风险
- en: method before it’s been defined.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 方法在定义之前使用。
- en: The power() method 2 represents what happens when you push the
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: power() 方法 2 表示按下遥控器上的电源按钮时发生的情况。
- en: power button on a remote. If the TV is off, pushing the power button turns
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电视关闭，按下电源按钮将其打开；
- en: it on; if the TV is on, pushing the power button turns it off. To code this
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 打开电视；如果电视已经开启，按下电源按钮将其关闭。要编码此功能，
- en: behavior I’ve used a *toggle*, which is a Boolean that’s used to represent one
    of two states and can easily be switched between them. With this toggle, the
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一个*切换*，它是一个布尔值，用于表示两个状态之一，可以轻松地在它们之间切换。有了这个切换，
- en: not operator switches the self.isOn variable from True to False, or from False
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 非运算符将 self.isOn 变量从 True 切换到 False，或从 False
- en: to True. The mute() method code 5 does a similar thing, with the self.muted
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将值设为 True。mute() 方法代码 5 执行类似的操作，使用 self.muted
- en: variable toggling between muted and not-muted, but first has to check that
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在静音和非静音之间切换，但首先必须检查
- en: the TV is on. If the TV is off, calling the mute() method has no effect.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是开启的。如果电视关闭，调用 mute() 方法没有任何效果。
- en: One interesting thing to note is that we don’t really keep track of
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的事情是，我们并没有真正跟踪
- en: the current channel. Instead, we keep track of the *index* of the current
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当前频道。相反，我们跟踪当前频道的*索引*，
- en: channel, which allows us to get the current channel at any time by using
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 频道，它允许我们随时通过使用
- en: self.channelList[self.channelIndex].
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelList[self.channelIndex]。
- en: The channelUp() 3 and channelDown() 4 methods basically increment and
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: channelUp() 3 和 channelDown() 4 方法基本上增加和
- en: decrement the channel index, but there is also some clever code in them to
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 递减频道索引，但它们也有一些巧妙的代码来
- en: allow for wrap-around. If you’re currently at the last index in the channel
    list
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 允许环绕。如果你当前在频道列表的最后一个索引
- en: and the user asks to go to the next channel up, the TV goes to the first chan-
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 用户要求切换到下一个频道时，电视会跳转到频道列表中的第一个频道。
- en: nel in the list. If you’re at the first index in the channel list and the user
    asks to go the next channel down, the TV goes to the last channel in the list.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你当前在频道列表的第一个索引并且用户要求切换到下一个频道，那么电视将跳转到频道列表中的最后一个频道。
- en: The showInfo() method 6 prints out the current status of the TV based
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: showInfo() 方法 6 输出基于实例变量的电视当前状态（开/关，当前频道，当前
- en: on the values of the instance variables (on/off, current channel, current
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 基于实例变量的值（开/关，当前频道，当前频道，当前
- en: volume setting, and mute setting).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 音量设置和静音设置）。
- en: '**38** Chapter 2'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**38** 第2章'
- en: In Listing 2-8, we’ll create a TV object and call methods of that object.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 2-8 中，我们将创建一个电视对象并调用该对象的方法。
- en: '**File: OO_TV_with_Test_Code.py**'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_TV_with_Test_Code.py**'
- en: TV class with test code
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带测试代码的电视类
- en: '--- snipped code of TV class, as in Listing 2-7 ---'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '--- 剪辑自电视类代码，如示例 2-7 ---'
- en: Main code
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主代码
- en: 'oTV = TV() # create the TV object'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 'oTV = TV()  # 创建电视对象'
- en: Turn the TV on and show the status
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开电视并显示状态
- en: oTV.power()
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.power()
- en: oTV.showInfo()
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.showInfo()
- en: Change the channel up twice, raise the volume twice, show status
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将频道提升两次，将音量提升两次，显示状态
- en: oTV.channelUp()
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.channelUp()
- en: oTV.channelUp()
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.channelUp()
- en: oTV.volumeUp()
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.volumeUp()
- en: oTV.volumeUp()
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.volumeUp()
- en: oTV.showInfo()
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.showInfo()
- en: Turn the TV off, show status, turn the TV on, show status
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关闭电视，显示状态，打开电视，显示状态
- en: oTV.power()
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.power()
- en: oTV.showInfo()
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.showInfo()
- en: oTV.power()
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.power()
- en: oTV.showInfo()
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.showInfo()
- en: Lower the volume, mute the sound, show status
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低音量，静音，显示状态
- en: oTV.volumeDown()
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.volumeDown()
- en: oTV.mute()
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.mute()
- en: oTV.showInfo()
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.showInfo()
- en: Change the channel to 11, mute the sound, show status
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将频道更改为 11，静音，显示状态
- en: oTV.setChannel(11)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.setChannel(11)
- en: oTV.mute()
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.mute()
- en: oTV.showInfo()
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.showInfo()
- en: '*Listing 2-8: TV class with test code*'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-8：带测试代码的电视类*'
- en: 'When we run this code, here is what we get as output:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此代码时，得到的输出如下：
- en: 'TV Status:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：
- en: 'TV is: On'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开启
- en: 'Channel is: 2'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：2
- en: 'Volume is: 5'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：5
- en: 'TV Status:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：
- en: 'TV is: On'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开启
- en: 'Channel is: 5'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：5
- en: 'Volume is: 7'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：7
- en: 'TV Status:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：
- en: 'TV is: Off'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：关闭
- en: Modeling Physical Objects with Object-Oriented Programming **39**
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程建模物理对象 **39**
- en: 'TV Status:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：
- en: 'TV is: On'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开启
- en: 'Channel is: 5'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：5
- en: 'Volume is: 7'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：7
- en: 'TV Status:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：
- en: 'TV is: On'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开启
- en: 'Channel is: 5'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：5
- en: 'Volume is: 6 (sound is muted)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：6（声音已静音）
- en: 'TV Status:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：
- en: 'TV is: On'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开启
- en: 'Channel is: 11'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当前频道是：11
- en: 'Volume is: 6'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：6
- en: All of the methods are working correctly, and we get the expected
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 所有方法都正常工作，我们得到了预期的
- en: output.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 输出。
- en: '***Passing Arguments to a Method***'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '***将参数传递给方法***'
- en: When calling any function, the number of arguments must match the num-
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 调用任何函数时，参数的数量必须与定义中的参数数量匹配。
- en: 'ber of parameters listed in the matching def statement:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配的 def 语句中列出的参数数量：
- en: 'def myFunction(param1, param2, param3):'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 'def myFunction(param1, param2, param3):'
- en: body of function
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数体
- en: 'call to a function:'
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用一个函数：
- en: myFunction(argument1, argument2, argument3)
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: myFunction(argument1, argument2, argument3)
- en: The same rule applies with methods and method calls. However, you
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的规则适用于方法和方法调用。然而，你
- en: may notice that whenever we make a call to a method, it appears that we are
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，每当我们调用一个方法时，似乎我们正在
- en: specifying one less argument than the number of parameters. For example,
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 指定比参数数量少一个参数。例如，
- en: 'the definition of the power() method in our TV class looks like this:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 TV 类中 power() 方法的定义如下：
- en: 'def power(self):'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 'def power(self):'
- en: This implies that the power() method is expecting one value to be
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 power() 方法期望传入一个值
- en: passed in and whatever is passed in will be assigned to the variable self. Yet
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 传递进来的值会被分配给变量 self。然而，
- en: 'when we started by turning on the TV in Listing 2-8, we made this call:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在列表 2-8 中开启电视时，我们进行了这个调用：
- en: oTV.power()
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.power()
- en: When we make the call, we don’t explicitly pass anything inside the
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用时，我们没有明确地在括号中传递任何东西
- en: parentheses.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 括号。
- en: This may seem even stranger in the case of the setChannel() method.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 setChannel() 方法的情况下，这可能看起来更奇怪。
- en: 'The method is written to accept two parameters:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法被写成接受两个参数：
- en: 'def setchannel(self, newchannel):'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'def setchannel(self, newchannel):'
- en: 'if newChannel in self.channelList:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 newChannel 在 self.channelList 中：
- en: self.channelIndex = self.channelList.index(newChannel)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: self.channelIndex = self.channelList.index(newChannel)
- en: '**40** Chapter 2'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**40** 第 2 章'
- en: 'But we called setChannel() like this:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们是这样调用 setChannel() 的：
- en: oTV.setChannel(11)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: oTV.setChannel(11)
- en: It appears that only one value is being passed in.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来似乎只传递了一个值。
- en: You might expect Python to generate an error here, due to a mismatch
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能期望 Python 在这里生成错误，因为参数数量不匹配
- en: in the number of arguments (one) and the number of parameters (two). In
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在参数的数量（一个）和定义中的参数（两个）之间的不匹配。在
- en: practice, Python is doing a bit of behind-the-scenes work to make the syntax
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Python 会做一些幕后工作，使语法更加简洁。
- en: easier to follow.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 更容易理解。
- en: Let’s examine this. Earlier, I said that to make a call to a method of an
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看这个。之前我说过，要调用一个对象的方法，
- en: 'object, you use the following generic syntax:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 对象时，使用以下通用语法：
- en: '*<object>* . *<method>* ( *<any arguments>* )'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '*<对象>* . *<方法>*（*<任何参数>*）'
- en: Python takes the <object> you specify in the call and rearranges it to
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Python 会接收你在调用中指定的<object>，并将其重新排列为
- en: become the first argument. Any values in the parentheses of the method
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 变成第一个参数。方法括号中的任何值
- en: call are considered the subsequent argument(s). Thus, Python makes it
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 调用中的参数被视为后续的参数。因此，Python 会使其
- en: 'appear that you wrote this instead:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎你写的是这个：
- en: '*<method of object>* ( *<object>* , *<any arguments>* ) Figure 2-5 shows how
    this works in our example code, again using the'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '*<方法名>*（*<对象>*，*<任何参数>*）图 2-5 展示了这一点在我们示例代码中的工作方式，仍然使用'
- en: setChannel() method of the TV class.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: setChannel() 方法属于 TV 类。
- en: Method in the TV class
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TV 类中的方法
- en: '**def setChannel(self, newChannel):**'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**def setChannel(self, newChannel):**'
- en: '**…**'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**…**'
- en: '#Call'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '#调用'
- en: '**oTV.setChannel(**'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**oTV.setChannel(**'
- en: '**V**'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**V**'
- en: '**11)**'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '**11）**'
- en: '*Figure 2-5: Cal ing a method*'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-5：调用方法*'
- en: Although it looks like we’re only providing one argument here (for
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管看起来我们这里只提供了一个参数（对于
- en: newChannel), there are really two arguments passed in—oTV and 11—and the
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: newChannel），实际上传递了两个参数——oTV 和 11——并且
- en: method provides two parameters to receive these values (self and newChannel,
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 方法提供两个参数来接收这些值（self 和 newChannel，
- en: respectively). Python rearranges the arguments for us when the call is
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: Python 会为我们重新排列参数，分别）。Python 会为我们处理调用中的参数。
- en: made. This may seem odd at first, but it will become second nature very
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 起初可能会觉得奇怪，但很快你会发现这是第二天性。
- en: quickly. Writing the call with the object first makes it much easier for a
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 很快。将对象放在前面写调用使得程序员更容易看出操作的是哪个对象。
- en: programmer to see which object is being acted on.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员可以很容易地看出操作的是哪个对象。
- en: This is a subtle but important feature. Remember that the object (in
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个微妙但重要的特性。记住，对象（在
- en: this case, oTV) keeps the current settings of all of its instance variables.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，oTV 保持其所有实例变量的当前设置。
- en: Passing the object as the first argument allows the method to run with the
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象作为第一个参数传递，使方法能够使用
- en: values of the instance variables of that object.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象的实例变量的值。
- en: '***Multiple Instances***'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '***多个实例***'
- en: Every method is written with self as the first parameter, so the self variable
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法的第一个参数都是 self，所以 self 变量
- en: 'receives the object used in each call. This has a major implication: it allows'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用时都会接收到使用的对象。这有一个重要的含义：它允许
- en: Modeling Physical Objects with Object-Oriented Programming **41**
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程建模物理对象 **41**
- en: any method within a class to work with *different* objects. I’ll explain how
    this works using an example.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 类中的任何方法都可以使用 *不同* 的对象来工作。我将通过示例来解释这一点。
- en: In Listing 2-9, we’ll create two TV objects and save them in two variables,
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单 2-9 中，我们将创建两个 TV 对象并将它们保存到两个变量中，
- en: oTV1 and oTV2\. Each TV object has a volume setting, a channel list, a channel
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: oTV1 和 oTV2。每个 TV 对象都有音量设置、频道列表、频道
- en: setting, and so on. We’ll make calls to a number of different methods of
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 设置等。我们将调用多个不同方法来操作
- en: the different objects. At the end, we’ll call the showInfo() method on each
    TV
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的对象。最后，我们会在每个 TV 上调用 showInfo() 方法
- en: object to see the resulting settings.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 查看对象的设置。
- en: '**File: OO_TV_TwoInstances.py**'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_TV_TwoInstances.py**'
- en: Two TV objects with calls to their methods
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两个 TV 对象以及对它们方法的调用
- en: 'class TV():'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 'class TV():'
- en: '--- snipped code of TV class, as in Listing 2-7 ---'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '--- 截略 TV 类代码，如清单 2-7 ---'
- en: Main code
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主代码
- en: 'oTV1 = TV() # create one TV object'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 'oTV1 = TV() # 创建一个 TV 对象'
- en: 'oTV2 = TV() # create another TV object'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 'oTV2 = TV() # 创建另一个 TV 对象'
- en: Turn both TVs on
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开两个电视
- en: oTV1.power()
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: oTV1.power()
- en: oTV2.power()
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.power()
- en: Raise the volume of TV1
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抬高 TV1 的音量
- en: oTV1.volumeUp()
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: oTV1.volumeUp()
- en: oTV1.volumeUp()
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: oTV1.volumeUp()
- en: Raise the volume of TV2
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抬高 TV2 的音量
- en: oTV2.volumeUp()
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.volumeUp()
- en: oTV2.volumeUp()
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.volumeUp()
- en: oTV2.volumeUp()
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.volumeUp()
- en: oTV2.volumeUp()
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.volumeUp()
- en: oTV2.volumeUp()
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.volumeUp()
- en: Change TV2's channel, then mute it
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改 TV2 的频道，然后将其静音
- en: oTV2.setChannel(44)
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.setChannel(44)
- en: oTV2.mute()
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.mute()
- en: Now display both TVs
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在显示两个电视
- en: oTV1.showInfo()
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: oTV1.showInfo()
- en: oTV2.showInfo()
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2.showInfo()
- en: '*Listing 2-9: Creating two instances of the TV class and cal ing methods of
    each* If we run this code, it will generate the following output:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-9：创建 TV 类的两个实例并调用每个实例的方法* 如果我们运行这段代码，它将生成以下输出：'
- en: 'Status of TV:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: TV 状态：
- en: 'TV is: On'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: TV 状态：开
- en: 'Channel is: 2'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：2
- en: 'Volume is: 7'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：7
- en: 'Status of TV:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: TV 状态：
- en: 'TV is: On'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: TV 状态：开
- en: 'Channel is: 44'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：44
- en: 'Volume is: 10 (sound is muted)'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：10（音量已静音）
- en: '**42** Chapter 2'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '**42** 第二章'
- en: Each TV object maintains its own set of the instance variables defined in the
    class. This way, each TV object’s instance variables can be manipulated
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 TV 对象都维护着自己在类中定义的实例变量。这样，每个 TV 对象的实例变量可以被单独操作
- en: independently of those of any other TV object.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他任何 TV 对象的实例变量独立。
- en: '***Initialization Parameters***'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '***初始化参数***'
- en: The ability to pass arguments to method calls also works when instantiat-
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 向方法调用传递参数的能力在实例化时同样有效—
- en: ing an object. So far, when we’ve created our objects, we’ve always set their
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对象时传递的参数。到目前为止，当我们创建对象时，总是设置它们的
- en: instance variables to constant values. However, you’ll often want to create
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量的值设置为常量值。然而，你通常会希望创建
- en: different instances with different starting values. For example, imagine we
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 不同实例有不同的初始值。例如，假设我们
- en: want to instantiate different TVs and identify them using their brand name
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 想要实例化不同的电视并通过它们的品牌名进行区分
- en: and location. This way, we can differentiate between a Samsung television
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 和位置。这样，我们可以区分一台三星电视
- en: in the family room and a Sony television in the bedroom. Constant values
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在家庭房间使用一台电视，在卧室使用一台索尼电视。常量值
- en: would not work for us in this situation.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的方法将不起作用。
- en: To initialize an object with different values, we add parameters to the
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 为了用不同的值初始化对象，我们为
- en: 'definition of the __init__() method, like this:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: __init__() 方法的定义，如下所示：
- en: TV class
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TV 类
- en: 'class TV():'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 'class TV():'
- en: 'def __init__(self, brand, location): # pass in a brand and location for the
    TV'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, brand, location): # 为电视传递品牌和位置'
- en: self.brand = brand
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: self.brand = brand
- en: self.location = location
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: self.location = location
- en: '--- snipped remaining initialization of TV ---'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '--- 截略 TV 初始化的其余部分 ---'
- en: '...'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: In all methods, parameters are local variables, so they literally go away
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有方法中，参数是局部变量，所以它们会在方法结束时消失
- en: when the method ends. For example, in the __init__() method of the TV
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法结束时。例如，在 TV 类的 __init__() 方法中
- en: class shown here, brand and location are local variables that will disappear
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示的类，品牌和位置是局部变量，最终会消失
- en: when the method ends. However, we often want to save values that are
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法结束时，通常我们希望保存那些通过参数传递进来的值，
- en: passed in via parameters to use them in other methods.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 通过参数传入的值，用于在其他方法中使用它们。
- en: In order to allow an object to remember initial values, the standard
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让对象记住初始值，标准做法是
- en: approach is to store any values passed in into instance variables. Since
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是将任何传入的值存储到实例变量中。因为
- en: instance variables have object scope, they can be used in other methods in
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量具有对象作用域，它们可以在类中的其他方法中使用
- en: the class. The Python convention is that the name of the instance variable
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类。Python的约定是实例变量的名称
- en: should be the same as the parameter name, but prefixed with self and a
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 应该与参数名相同，但前面加上self和一个
- en: 'period:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 句点：
- en: 'def __init__(self, someVariableName):'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, someVariableName):'
- en: self.someVariableName = someVariableName
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: self.someVariableName = someVariableName
- en: In the TV class, the line after the def statement tells Python to take the
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在电视类中，def语句之后的一行告诉Python去获取
- en: value of the brand parameter and assign it to an instance variable named
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 将品牌参数的值分配给名为
- en: self.brand. The next line does the same thing with the location parameter
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: self.brand。下一行做的事情与位置参数相同
- en: and the instance variable self.location. After these assignments, we can use
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 以及实例变量self.location。完成这些赋值后，我们可以使用
- en: self.brand and self.location in other methods.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: self.brand和self.location可以在其他方法中使用。
- en: Modeling Physical Objects with Object-Oriented Programming **43**
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 用面向对象编程建模物理对象 **43**
- en: Using this approach, we can create multiple objects from the same class but
    start each off with different data. So, we can create our two TV objects
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我们可以从同一个类创建多个对象，但每个对象都以不同的数据开始。所以，我们可以创建我们的两个电视对象
- en: 'like this:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 类似这样：
- en: oTV1 = TV('Samsung', 'Family room')
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: oTV1 = TV('Samsung', '家庭房')
- en: oTV2 = TV('Sony', 'Bedroom')
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: oTV2 = TV('Sony', 'Bedroom')
- en: When executing the first line, Python first allocates space for a TV
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 执行第一行时，Python首先为一个TV对象分配空间
- en: object. Then it rearranges the arguments as discussed in the previous sec-
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 对象。然后，它按照前一节中讨论的方式重新排列参数
- en: 'tion and calls the __init__() method of the TV class with three arguments:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 然后调用电视类的__init__()方法，并传入三个参数：
- en: the newly allocated oTV1 object, the brand, and the location.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 新分配的oTV1对象，品牌和位置。
- en: When initializing the oTV1 object, self.brand is set to the string 'Samsung'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 当初始化oTV1对象时，self.brand被设置为字符串'Samsung'
- en: and self.location is set to the string 'Family room'. When initializing oTV2,
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 并且self.location被设置为字符串'家庭房'。初始化oTV2时，
- en: its self.brand is set to the string 'Sony', and its self.location gets set to
    the
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 它的self.brand被设置为字符串'Sony'，并且self.location被设置为
- en: string 'Bedroom'.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串'Bedroom'。
- en: We can modify the showInfo() method to report the name and location
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改showInfo()方法，报告电视的名称和位置
- en: of the TV.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 电视的状态。
- en: '**File: OO_TV_TwoInstances_with_Init_Params.py**'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_TV_TwoInstances_with_Init_Params.py**'
- en: 'def showInfo(self):'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 'def showInfo(self):'
- en: print()
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: print('Status of TV:', self.brand)
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: print('电视状态:', self.brand)
- en: print(' Location:', self.location)
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 位置:', self.location)
- en: 'if self.isOn:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '如果self.isOn:'
- en: '...'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'And we’ll see this as output:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如下输出：
- en: 'Status of TV: Sony'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：Sony
- en: 'Location: Family room'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：家庭房
- en: 'TV is: On'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开
- en: 'Channel is: 2'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：2
- en: 'Volume is: 7'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：7
- en: 'Status of TV: Samsung'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 电视状态：Samsung
- en: 'Location: Bedroom'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：卧室
- en: 'TV is: On'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 电视是：开
- en: 'Channel is: 44'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 频道是：44
- en: 'Volume is: 10 (sound is muted)'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 音量是：10（声音静音）
- en: We made the same method calls as in the previous example in
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的例子中做了相同的方法调用
- en: Listing 2-9\. The difference is that each TV object is now initialized with
    a
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2-9。不同之处在于，现在每个TV对象都用一个
- en: brand and a location, and you can now see that information printed in
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 品牌和位置，现在你可以看到这些信息已经打印出来
- en: response to each call to the modified showInfo() method.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 对每次调用修改后的showInfo()方法的响应。
- en: '**44** Chapter 2'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '**44** 第2章'
- en: '**Classes in Use**'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用中的类**'
- en: Using everything we’ve learned in this chapter, we can now create classes
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在本章学到的所有内容，我们现在可以创建类
- en: and build multiple independent instances from those classes. Here are a
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 并且可以从这些类中构建多个独立的实例。这里有一些
- en: 'few examples of how we might use this:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们可能会使用的例子：
- en: • Say we wanted to model a student in a course. We could have a Student
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: • 假设我们想要建模一个学生的课程。我们可以有一个Student
- en: class that has instance variables for name, emailAddress, currentGrade, and
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 类中有实例变量，用于存储名称、电子邮件地址、当前成绩等
- en: so on. Each Student object we create from this class would have its own
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推。我们从这个类创建的每个Student对象都会有自己的
- en: set of these instance variables, and the values given to the instance vari-
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实例变量的集合，并且给实例变量赋值的值-
- en: ables would be different for each student.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 变量对于每个学生都会有所不同。
- en: • Consider a game where we have multiple players. A player could be
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: • 考虑一个有多个玩家的游戏。一个玩家可以是
- en: modeled by a Player class with instance variables for name, points, health,
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 由一个具有名称、积分、生命值等实例变量的玩家类建模。
- en: location, and so on. Each player would have the same capabilities, but
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 位置等。每个玩家将具有相同的能力，但
- en: the methods could work differently based on the different values in the
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 方法可能会根据不同的值表现出不同的行为。
- en: instance variables.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量。
- en: • Imagine an address book. We could create a Person class with instance
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: • 想象一下一个通讯录。我们可以创建一个具有实例变量
- en: variables for name, address, phoneNumber, and birthday. We could create
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 包含名称、地址、电话号码和生日的实例变量。我们可以创建
- en: as many objects from the Person class as we want, one for each person
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据需要从人物类创建任意数量的对象，每个对象代表一个人
- en: we know. The instance variables in each Person object would contain
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已知的信息。每个人物对象中的实例变量将包含
- en: different values. We could then write code to search through all the
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的值。然后我们可以编写代码来搜索所有的
- en: Person objects and retrieve information about the one or ones we are
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 人物对象，并获取我们正在寻找的一个或多个信息。
- en: looking for.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 正在寻找。
- en: In future chapters, I will explore this concept of instantiating multiple
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的章节中，我将探讨实例化多个
- en: objects from a single class and give you tools to help manage a collection of
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个类创建对象，并为你提供帮助管理对象集合的工具。
- en: objects.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 对象。
- en: '**OOP as a Solution**'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象编程作为解决方案**'
- en: Toward the end o[f Chapter 1, I m](index_split_000.html#p32)entioned three problems
    that are inherent in procedural coding. Hopefully, after working through the examples
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1章的结尾，我提到了程序性编码固有的三个问题。希望在处理完这些示例后，
- en: in this chapter, you can see how object-oriented programming solves all of
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你可以看到面向对象编程如何解决所有这些问题。
- en: 'those problems:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题：
- en: 1\. A well-written class can be easily reused in many different programs.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 编写良好的类可以在许多不同的程序中轻松重用。
- en: Classes do not need to access global data. Instead, objects provide code
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 类不需要访问全局数据。相反，对象提供代码
- en: and data at the same level.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 和数据处于同一层次。
- en: 2\. Object-oriented programming can greatly reduce the number of global
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 面向对象编程可以大大减少全局
- en: variables required, because a class provides a framework in which data
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的变量，因为类提供了一个框架，其中数据
- en: and code that acts on the data exist in one grouping. This also tends to
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 并且作用于数据的代码存在于一个分组中。这通常也有助于
- en: make code easier to debug.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 使代码更易于调试。
- en: 3\. Objects created from a class only have access to their own data—their
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 从一个类创建的对象只能访问自己的数据——它们的
- en: set of the instance variables in the class. Even when you have multiple
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 类中的实例变量集。即使你有多个
- en: objects created from the same class, they do not have access to each
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 从同一个类创建的对象无法访问彼此的变量。
- en: other’s data.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 彼此的数据。
- en: Modeling Physical Objects with Object-Oriented Programming **45**
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程建模物理对象 **45**
- en: '**Summary**'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, I provided an introduction to object-oriented program-
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了面向对象编程的基础
- en: ming by demonstrating the relationship between a class and an object. The
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 编程，通过展示类与对象之间的关系。这个
- en: class defines the shape and capabilities of an object. An object is a single
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 类定义了对象的形状和功能。对象是一个单独的
- en: instance of a class that has its own set of all the data defined in the instance
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类的实例都有自己的一组所有数据，这些数据在实例中定义
- en: variables of the class. Each piece of data you want an object to contain is
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 类的变量。每一项你希望对象包含的数据都需要
- en: stored in an instance variable, which has object scope, meaning that it is
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在一个实例变量中，该变量具有对象作用域，这意味着它仅在对象内部可用。
- en: available within all methods defined in the class. All objects created from
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中定义的所有方法中都可以访问这些变量。所有从
- en: the same class get their own set of all the instance variables, and because
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 类的多个对象可以拥有自己的实例变量集，并且因为
- en: these may contain different values, calling the methods on different objects
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能包含不同的值，调用不同对象上的方法
- en: can result in different behavior.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能导致不同的行为。
- en: I showed how you create an object from a class, typically through an
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 我展示了如何通过实例化一个类来创建一个对象，通常通过
- en: assignment statement. After instantiating an object, you can use it to make
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值语句。实例化一个对象后，你可以使用它来进行
- en: calls to any method defined in the class of that object. I also showed how
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 调用类中任何方法的次数。我还展示了如何
- en: you can instantiate multiple objects from the same class.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 从同一个类实例化多个对象。
- en: In this chapter, the demonstration classes implemented physical objects
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，演示类实现了物理对象
- en: (light switches, TVs). This is a good way to start understanding the con-
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: （灯开关、电视等）。这是开始理解类和对象概念的好方法。
- en: cepts of a class and an object. However, in future chapters, I will introduce
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 类和对象的概念。然而，在接下来的章节中，我将介绍
- en: objects that do not represent physical objects.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 并不代表物理对象的对象。
- en: '**46** Chapter 2'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '**46** 第2章'
- en: '**3**'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '**3**'
- en: '**M E N T A L M O D E L S O F O B J E C T S**'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '**物体的心理模型**'
- en: '**A N D T H E M E A N I N G O F “ S E L F ”**'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**和“self”含义的理解**'
- en: Hopefully the new concepts and terminol-
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些新概念和术语
- en: ogy I’ve introduced so far are starting to
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我所介绍的术语和概念开始
- en: make sense. Some people new to OOP have
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 使其合理。有些刚接触面向对象编程的人可能会感到困惑
- en: trouble envisioning what an object is and how
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 难以想象对象是什么以及如何运作
- en: the methods of an object work with its instance vari-
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的方法与其实例变量一起工作
- en: ables. The specifics are fairly complex, so it can be
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 变量。具体情况比较复杂，所以
- en: helpful to develop a mental model of how objects and
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发如何理解对象和
- en: classes operate.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 类如何运作。
- en: In this chapter, I’ll present two mental models of OOP. Right up front,
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将展示两个 OOP 的心理模型。一开始，
- en: I want to be clear that neither of these models is an exact representation
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 我想明确的是，这些模型都不是完全准确的表示
- en: of how objects work in Python. Instead, these models are intended to give
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 Python 中工作对象的一个理解模型。而这些模型旨在提供
- en: you a way to think about what an object looks like and what happens when
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 给你一种思考对象外观及其操作方式的方法
- en: you call a method. This chapter will also go into more detail about self and
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 你调用一个方法时。本章还将详细介绍 self 和
- en: show how it is used to make methods work with multiple objects instanti-
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 展示它是如何用于使方法与多个实例化对象一起工作的
- en: ated from the same class. Throughout the rest of the book, you’ll gain a
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 从同一个类实例化的对象。在本书的其余部分，你将获得
- en: much deeper insight into objects and classes.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 对对象和类有更深的洞察力。
- en: '**Revisiting the DimmerSwitch Class**'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新审视 DimmerSwitch 类**'
- en: In the following examples, we’ll continue with the DimmerSwitch class from
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的例子中，我们将继续使用 DimmerSwitch 类
- en: '[Chapter 2 (](index_split_000.html#p50)Listing 2-5). The DimmerSwitch class
    already has two instance variables: self.isOn and self.brightness. The only modification
    we’ll make is to'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章（](index_split_000.html#p50)清单 2-5）。DimmerSwitch 类已经有了两个实例变量：self.isOn
    和 self.brightness。我们唯一要修改的是'
- en: add a self.label instance variable so each object we create can be identified
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个 self.label 实例变量，以便我们创建的每个对象都能被标识
- en: easily in the output when we run our program. These variables are created
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行程序时，输出中很容易看到这些变量。它们是被创建的
- en: and assigned initial values in the __init__() method. They are then accessed
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 并在 __init__() 方法中分配初始值。然后可以访问它们
- en: or modified in the five other methods of the class.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 或在类的其他五个方法中被修改。
- en: Listing 3-1 provides some test code to create three DimmerSwitch objects
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 3-1 提供了一些测试代码，用于创建三个 DimmerSwitch 对象
- en: from the DimmerSwitch class, which we’ll use in our mental models. I’ll call
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 DimmerSwitch 类，我们将在心理模型中使用它。我将称其为
- en: various methods for each of the DimmerSwitch objects.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 DimmerSwitch 对象的各种方法。
- en: '**File: OO_DimmerSwitch_Model1.py**'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_DimmerSwitch_Model1.py**'
- en: Create first DimmerSwitch, turn it on, and raise the level twice
  id: totrans-583
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第一个 DimmerSwitch，打开它，并将亮度提高两次
- en: oDimmer1 = DimmerSwitch('Dimmer1')
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1 = DimmerSwitch('Dimmer1')
- en: oDimmer1.turnOn()
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1.turnOn()
- en: oDimmer1.raiseLevel()
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1.raiseLevel()
- en: oDimmer1.raiseLevel()
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1.raiseLevel()
- en: Create second DimmerSwitch, turn it on, and raise the level 3 times
  id: totrans-588
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第二个 DimmerSwitch，打开它，并将亮度提高 3 次
- en: oDimmer2 = DimmerSwitch('Dimmer2')
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2 = DimmerSwitch('Dimmer2')
- en: oDimmer2.turnOn()
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2.turnOn()
- en: oDimmer2.raiseLevel()
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2.raiseLevel()
- en: oDimmer2.raiseLevel()
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2.raiseLevel()
- en: oDimmer2.raiseLevel()
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2.raiseLevel()
- en: Create third DimmerSwitch, using the default settings
  id: totrans-594
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第三个 DimmerSwitch，使用默认设置
- en: oDimmer3 = DimmerSwitch('Dimmer3')
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer3 = DimmerSwitch('Dimmer3')
- en: Ask each switch to show itself
  id: totrans-596
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求每个开关显示自己
- en: oDimmer1.show()
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1.show()
- en: oDimmer2.show()
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2.show()
- en: oDimmer3.show()
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer3.show()
- en: '*Listing 3-1: Creating three DimmerSwitch objects and cal ing various methods
    on each* When run with our DimmerSwitch class, this code gives the following'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-1：创建三个 DimmerSwitch 对象并调用它们的各种方法* 当与 DimmerSwitch 类一起运行时，这段代码会生成如下输出'
- en: 'output:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: 'Label: Dimmer1'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：Dimmer1
- en: Light is on? True
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 灯是开的吗？是
- en: 'Brightness is: 2'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度是：2
- en: 'Label: Dimmer2'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：Dimmer2
- en: Light is on? True
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 灯是开的吗？是
- en: 'Brightness is: 3'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度是：3
- en: 'Label: Dimmer3'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：Dimmer3
- en: Light is on? False
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 灯是开的吗？否
- en: 'Brightness is: 0'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 亮度是：0
- en: '**48** Chapter 3'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '**48** 第3章'
- en: This is exactly what you would expect. Each DimmerSwitch object is independent
    of any other DimmerSwitch objects, and each object contains and
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是你所期望的。每个 DimmerSwitch 对象都独立于其他 DimmerSwitch 对象，每个对象都包含和
- en: modifies its own instance variables.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 修改它自己的实例变量。
- en: '**High-Level Mental Model #1**'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级心理模型 #1**'
- en: In this first model, you can think of each object as a self-contained unit that
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个模型中，你可以把每个对象看作一个自包含的单元，它
- en: contains a data type, a set of the instance variables defined in the class,
    and
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一个数据类型、一组在类中定义的实例变量，以及
- en: a copy of all the methods defined in the class (Figure 3-1).
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 类中定义的所有方法的副本（图 3-1）。
- en: oDimmer1
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1
- en: oDimmer2
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2
- en: oDimmer3
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer3
- en: 'Type:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：
- en: 'Type:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：
- en: 'Type:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：
- en: DimmerSwitch
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: DimmerSwitch
- en: DimmerSwitch
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: DimmerSwitch
- en: DimmerSwitch
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: DimmerSwitch
- en: 'Data:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 数据：
- en: 'Data:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 数据：
- en: 'Data:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 数据：
- en: 'label: Dimmer1'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 'label: Dimmer1'
- en: 'label: Dimmer2'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 'label: Dimmer2'
- en: 'label: Dimmer3'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 'label: Dimmer3'
- en: 'isOn: True'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 'isOn: True'
- en: 'isOn: True'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 'isOn: True'
- en: 'isOn: False'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 'isOn: False'
- en: 'brightness: 2'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 'brightness: 2'
- en: 'brightness: 3'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 'brightness: 3'
- en: 'brightness: 0'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 'brightness: 0'
- en: 'Methods:'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：
- en: 'Methods:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：
- en: 'Methods:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：
- en: _init_()
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: _init_()
- en: _init_()
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: _init_()
- en: _init_()
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: _init_()
- en: turnOn()
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: turnOn()
- en: turnOn()
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: turnOn()
- en: turnOn()
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: turnOn()
- en: turnOff()
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: turnOff()
- en: turnOff()
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: turnOff()
- en: turnOff()
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: turnOff()
- en: raiseLevel()
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: raiseLevel()
- en: raiseLevel()
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: raiseLevel()
- en: raiseLevel()
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: raiseLevel()
- en: lowerLevel()
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: lowerLevel()
- en: lowerLevel()
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: lowerLevel()
- en: lowerLevel()
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: lowerLevel()
- en: show()
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: show()
- en: show()
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: show()
- en: show()
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: show()
- en: '*Figure 3-1: In mental model #1 each object is a unit that has a type, data,*'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：在心理模型 #1 中，每个对象都是一个具有类型、数据的单元，*'
- en: '*and methods.*'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '*和方法。*'
- en: The data and methods of each object are packaged together. The
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象的数据和方法被打包在一起。该
- en: scope of an instance variable is defined as all the methods in the class,
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量的作用范围被定义为类中的所有方法，
- en: so all methods have access to the instance variables associated with that
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 所以所有方法都可以访问与该
- en: object.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 对象。
- en: If this mental model makes the concepts clear, then you’re in good
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个心理模型让概念变得清晰，那么你就已经掌握得很好了
- en: shape. While this is *not* the way objects are actually implemented, it’s a
    perfectly reasonable way to *think about* how an object’s instance variables and
    methods work together.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 形态。虽然这*不是*对象实际的实现方式，但它是一个完全合理的*思考方式*，可以帮助你理解对象的实例变量和方法如何协同工作。
- en: '**A Deeper Mental Model #2**'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '**更深层的心理模型 #2**'
- en: This second model explores objects at a lower level and will explain more
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第二个模型探索了较低层次的对象，并将进一步解释
- en: about what an object is.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 关于对象是什么。
- en: Every time you instantiate an object, you get back a value from Python.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 每次实例化一个对象时，Python 会返回一个值。
- en: We typically store the returned value in a variable that refers to the object.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将返回值存储在一个引用该对象的变量中。
- en: In Listing 3-2, we create three DimmerSwitch objects. After creating each one,
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Listing 3-2 中，我们创建了三个 DimmerSwitch 对象。每创建一个对象后，
- en: we’ll add code to inspect the result by printing out the type and value of
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加代码来检查结果，通过打印出类型和值
- en: each variable.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 每个变量。
- en: Mental Models of Objects and the Meaning of “self” **49**
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的心理模型和“self” **49**
- en: '**File: OO_DimmerSwitch_Model2_Instantiation.py**'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_DimmerSwitch_Model2_Instantiation.py**'
- en: Create three DimmerSwitch objects
  id: totrans-678
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建三个 DimmerSwitch 对象
- en: oDimmer1 = DimmerSwitch('Dimmer1')
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1 = DimmerSwitch('Dimmer1')
- en: print(type(oDimmer1))
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: print(type(oDimmer1))
- en: print(oDimmer1)
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: print(oDimmer1)
- en: print()
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: oDimmer2 = DimmerSwitch('Dimmer2')
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2 = DimmerSwitch('Dimmer2')
- en: print(type(oDimmer2))
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: print(type(oDimmer2))
- en: print(oDimmer2)
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: print(oDimmer2)
- en: print()
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: oDimmer3 = DimmerSwitch('Dimmer3')
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer3 = DimmerSwitch('Dimmer3')
- en: print(type(oDimmer3))
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: print(type(oDimmer3))
- en: print(oDimmer3)
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: print(oDimmer3)
- en: print()
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: '*Listing 3-2: Creating three DimmerSwitch objects and printing the type and
    value of each* Here is the output:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-2：创建三个 DimmerSwitch 对象并打印每个对象的类型和值* 下面是输出：'
- en: <class '__main__.DimmerSwitch'>
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: <class '__main__.DimmerSwitch'>
- en: <__main__.DimmerSwitch object at 0x7ffe503b32e0>
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: <__main__.DimmerSwitch 对象位于 0x7ffe503b32e0>
- en: <class '__main__.DimmerSwitch'>
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: <class '__main__.DimmerSwitch'>
- en: <__main__.DimmerSwitch object at 0x7ffe503b3970>
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: <__main__.DimmerSwitch 对象位于 0x7ffe503b3970>
- en: <class '__main__.DimmerSwitch'>
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: <class '__main__.DimmerSwitch'>
- en: <__main__.DimmerSwitch object at 0x7ffe503b39d0>
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: <__main__.DimmerSwitch 对象位于 0x7ffe503b39d0>
- en: The first line in each grouping tells us the data type. Instead of a built-in
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 每组中的第一行告诉我们数据类型。与内置的
- en: type like integer or float, we see that all three objects are of the programmer-
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 类型，例如整数或浮点数，我们可以看到所有三个对象都是程序员定义的 DimmerSwitch 类型。
- en: defined DimmerSwitch type. (The __main__ indicates that the DimmerSwitch code
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的 DimmerSwitch 类型。（__main__ 表示 DimmerSwitch 代码
- en: was found inside our single Python file, not imported from any other file.)
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 被发现位于我们的单一 Python 文件中，而不是从其他文件导入。)
- en: The second line of each grouping contains a string of characters. Each
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 每组的第二行包含一串字符。每个
- en: string represents a location in the memory of the computer. The memory
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串表示计算机内存中的一个位置。内存
- en: location is where all the data associated with each object can be found.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 位置是与每个对象相关的所有数据所在的地方。
- en: Notice each object is in a different location in memory. If you run this code
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每个对象位于内存中的不同位置。如果你运行此代码
- en: on your computer, you will most likely get different values, but the actual
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的计算机上运行时，你可能会得到不同的值，但实际的
- en: values do not matter to understanding the concept.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 变量值对于理解这个概念并不重要。
- en: 'All DimmerSwitch objects report the same type: class DimmerSwitch. The'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 DimmerSwitch 对象报告相同的类型：DimmerSwitch 类。
- en: extremely important takeaway is that the objects all refer to the code of the
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 一个极其重要的结论是，所有对象都引用同一份代码，
- en: same class, which really only exists in one place. When your program starts
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的类，它实际上只在一个地方存在。当你的程序开始时
- en: running, Python reads through all the class definitions and remembers the
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，Python 会读取所有类定义并记住
- en: locations of all the classes and their methods.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类及其方法的位置。
- en: The Python Tutor websit[e ( *http://PythonTutor.com*) p](http://PythonTutor.com)rovides
    some useful tools that can help you to visualize the execution of small programs
    by allowing you to step through each line of your code. Figure 3-2 is a screenshot
    from
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: Python Tutor 网站（[http://PythonTutor.com](http://PythonTutor.com)）提供了一些有用的工具，可以帮助你通过逐行调试代码来可视化小程序的执行。图
    3-2 是来自该网站的截图
- en: running the DimmerSwitch class and test code through the visualization tool,
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 通过可视化工具运行 DimmerSwitch 类和测试代码，
- en: stopping execution before instantiating the first DimmerSwitch object.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例化第一个 DimmerSwitch 对象之前停止执行。
- en: In this screenshot, you can see that Python remembers the location
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张截图中，你可以看到 Python 记住了
- en: of the DimmerSwitch class and all of its methods. While classes can contain
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: DimmerSwitch 类及其所有方法。虽然类可以包含
- en: hundreds or even thousands of lines of code, no object actually gets a copy
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管类中可能包含数百或数千行代码，但每个对象实际上并不会得到代码副本
- en: of the class’s code. Having only one copy of the code is very important, as
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 类代码的副本。只有一份代码是非常重要的，因为
- en: it keeps the size of OOP programs small. When you instantiate an object,
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 它保持了面向对象编程程序的紧凑性。当你实例化一个对象时，
- en: '**50** Chapter 3'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '**50** 第 3 章'
- en: '![Image 14](index-80_1.png)'
  id: totrans-722
  prefs: []
  type: TYPE_IMG
  zh: '![图片 14](index-80_1.png)'
- en: '![Image 15](index-80_2.png)'
  id: totrans-723
  prefs: []
  type: TYPE_IMG
  zh: '![图片 15](index-80_2.png)'
- en: Python allocates enough memory for each object to represent its own set
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: Python 为每个对象分配足够的内存来表示它自己的变量集。
- en: of the instance variables defined in the class. In general, instantiating an
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 类中定义的实例变量。在一般情况下，实例化一个
- en: object from a class is memory-efficient.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个类创建对象时是节省内存的。
- en: '*Figure 3-2: Python remembers all classes and all methods in each class.*'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：Python 记住了所有类及每个类中的所有方法。*'
- en: The screenshot in Figure 3-3 shows the result of running all the test
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-3 中的截图展示了运行所有测试的结果
- en: code in Listing 3-2\.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 3-2 中的代码\。
- en: '*Figure 3-3: Running Listing 3-2 demonstrates that objects do not include code,
    in accordance with mental model #2\.*'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：运行清单 3-2 演示了对象不包括代码，这符合我们的第二个心理模型。*'
- en: Mental Models of Objects and the Meaning of “self” **51**
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的心理模型和“self”**51**
- en: This matches our second mental model. On the right side of this
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们的第二个心理模型相匹配。在这一边，
- en: screenshot, the code for the DimmerSwitch class appears only once. Each
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 截图中，DimmerSwitch 类的代码只出现一次。每个
- en: object knows the class it was instantiated from and contains its own set of
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 对象知道它是从哪个类实例化的，并包含它自己的变量集。
- en: the instance variables defined in the class.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 类中定义的实例变量。
- en: '**N O T E**'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*While the following is an implementation detail, it may help to further your
    understanding of objects. Internally, all instance variables of an object are
    kept as name/*'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然以下内容属于实现细节，但它可能有助于你进一步理解对象。内部，所有对象的实例变量都作为名称/*'
- en: '*value pairs in a Python dictionary. You can inspect all the instance variables
    in an* *object by calling the built-in vars() function on any object. For example,
    in the test* *code from Listing 3-2, if you want to see the internal representation
    of the instance* *variables, you can add this line at the end:*'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python 字典中的值对。你可以通过在任何对象上调用内置的 vars() 函数来检查所有实例变量。例如，在清单 3-2 的测试代码中，如果你想查看实例变量的内部表示，可以在最后添加这一行：*'
- en: print('oDimmer1 variables:', vars(oDimmer1))
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: print('oDimmer1 变量:', vars(oDimmer1))
- en: '*When you run it, you’ll see this output:*'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你运行它时，你将看到以下输出：*'
- en: 'oDimmer1 variables: {''label'': ''Dimmer1'', ''isOn'': True, ''brightness'':
    2}'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 'oDimmer1 变量：{''label'': ''Dimmer1'', ''isOn'': True, ''brightness'': 2}'
- en: '**What Is the Meaning of “self”?**'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '**“self”是什么意思？**'
- en: Philosophers have struggled with this question for centuries, so it would be
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 哲学家们在这个问题上困惑了几个世纪，所以这将是
- en: rather pretentious of me to try to explain it in just a few pages. In Python,
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 试图在几页中解释这个问题真是有些自负。在 Python 中，
- en: however, the variable named self does have a highly specialized and clear
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，名为 self 的变量确实有一个高度专业化且明确的
- en: meaning. In this section, I’ll show how self is given a value and how the
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 含义。在本节中，我将展示如何给 self 赋值，以及如何
- en: code of the methods in a class work with the instance variables of any object
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 类中方法的代码与任何从类实例化的对象的实例变量一起工作
- en: instantiated from the class.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 将从类中实例化。
- en: '**N O T E**'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The variable name self is not a keyword in Python but is used by convention—any*
    *other name could be used and the code would work fine. However, using self is
    a* *universally accepted practice in Python, and I will use it throughout this
    book. If you* *want your code to be understood by other Python programmers, use
    the name self as* *the first parameter in all methods of a class. (Other OOP languages
    have the same* *concept but use other names, such as this or me.)*'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '*self 变量名不是 Python 的关键字，但按照约定使用——可以使用任何其他名称，代码也能正常工作。然而，使用 self 是* *Python
    中普遍接受的做法，我将在本书中贯穿使用。如果你* *希望你的代码被其他 Python 程序员理解，请在所有类方法的第一个参数中使用 self 作为名称。（其他面向对象语言有相同的概念，但使用其他名称，例如
    this 或 me。）*'
- en: Suppose you write a class named SomeClass, then create an object from
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你编写了一个名为 SomeClass 的类，然后从
- en: 'that class, like this:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 那个类，像这样：
- en: oSomeObject = SomeClass( *<optional arguments>* )
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: oSomeObject = SomeClass( *<可选参数>* )
- en: The object oSomeObject contains a set of all the instance variables
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 对象 oSomeObject 包含所有实例变量的集合
- en: defined in the class. Every method of the SomeClass class has a definition
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中定义。SomeClass 类的每个方法都有一个定义
- en: 'that looks like this:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像这样：
- en: 'def someMethod(self, *<any other parameters>* ):'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 'def someMethod(self, *<其他参数>* ):'
- en: 'And here is the general form of a call to such a method:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是调用此类方法的一般形式：
- en: oSomeObject.someMethod( *<any other arguments>* )
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: oSomeObject.someMethod( *<其他参数>* )
- en: '**52** Chapter 3'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '**52** 第 3 章'
- en: As we know, Python rearranges the arguments in a call to a method, so that the
    object is passed in as the first argument. That value is received in the
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，Python 会重新排列方法调用中的参数，使得对象作为第一个参数传递。该值将在
- en: first parameter of the method and is put into the variable self (Figure 3-4).
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的第一个参数并将其放入变量 self 中（图 3-4）。
- en: 'def someMethod(self, *<any other parameters>* ):'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 'def someMethod(self, *<其他参数>* ):'
- en: oSomeObject.someMethod( *<any other arguments>* )
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: oSomeObject.someMethod( *<其他参数>* )
- en: '*Figure 3-4: How Python rearranges arguments in a call to a method*'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-4：Python 如何重新排列方法调用中的参数*'
- en: Therefore, whenever a method is called, self will be set to the object
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每当调用一个方法时，self 将被设置为该对象
- en: in the call. This means that the code of a method can operate on the
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用中。这意味着方法的代码可以操作
- en: instance variables of *any* object instantiated from the class. It does so
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 从类实例化的 *任何* 对象的实例变量。它通过这种方式
- en: 'using the form:'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种形式：
- en: self. *<instanceVariableName>*
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: self. *<实例变量名>*
- en: This essentially says to use the object referred to by self and access
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上表示使用 self 引用的对象并访问
- en: the instance variable specified by < *instanceVariableName*>. Since every method
    uses self as the first parameter, every method in a class uses this
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 由 < *实例变量名*> 指定的实例变量。由于每个方法都将 self 作为第一个参数，因此类中的每个方法都使用这个
- en: same approach.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法。
- en: To illustrate this concept, let’s use the DimmerSwitch class. In the follow-
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个概念，我们使用 DimmerSwitch 类。在接下来的
- en: ing example, we’ll instantiate two DimmerSwitch objects, then walk through
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将实例化两个 DimmerSwitch 对象，然后逐步演示
- en: what happens when we raise the brightness level of these objects by calling
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过调用这些对象的亮度级别来增加它们时会发生什么
- en: the raiseLevel() method with each.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法都使用 raiseLevel() 方法。
- en: 'The code of the method we’re calling is:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用的方法的代码是：
- en: 'def raiseLevel(self):'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 'def raiseLevel(self):'
- en: 'if self.brightness < 10:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 self.brightness < 10:'
- en: self.brightness = self.brightness + 1
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: self.brightness = self.brightness + 1
- en: Listing 3-3 shows some example test code for two DimmerSwitch objects.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-3 显示了两个 DimmerSwitch 对象的一些示例测试代码。
- en: '**File: OO_DimmerSwitch_Model2_Method_Cal s.py**'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：OO_DimmerSwitch_Model2_Method_Cal s.py**'
- en: Create two DimmerSwitch objects
  id: totrans-784
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建两个 DimmerSwitch 对象
- en: oDimmer1 = DimmerSwitch('Dimmer1')
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1 = DimmerSwitch('Dimmer1')
- en: oDimmer2 = DimmerSwitch('Dimmer2')
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer2 = DimmerSwitch('Dimmer2')
- en: Tell oDimmer1 to raise its level
  id: totrans-787
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 告诉 oDimmer1 提高它的亮度级别
- en: oDimmer1.raiseLevel()
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: oDimmer1.raiseLevel()
- en: Tell oDimmer2 to raise its level
  id: totrans-789
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: oDimmer2.raiseLevel()
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 3-3: Cal ing the same method on different DimmerSwitch objects*'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: Mental Models of Objects and the Meaning of “self” **53**
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 16](index-83_1.png)'
  id: totrans-793
  prefs: []
  type: TYPE_IMG
- en: In this listing, we first instantiate two DimmerSwitch objects. Then we have
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: 'two calls to the raiseLevel() method: first we call it with oDimmer1, then
    we'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: call the same method using oDimmer2\.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-5 shows the result of running the test code in Listing 3-3
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: in Python Tutor, with execution stopped while making the first call to
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: raiseLevel().
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-5: The program in Listing 3-3 stopped in call to oDimmer1.raiseLevel()*
    Notice that self and oDimmer1 refer to the same object. When the'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: method executes and uses any self.< *instanceVariable*>, it will use oDimmer1’s
    instance variables. Therefore, when this method runs, self.brightness refers
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: to the brightness instance variable in oDimmer1\.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: If we continue to execute the test code in Listing 3-3, we get to the sec-
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: ond call to raiseLevel() with oDimmer2\. In Figure 3-6, I’ve stopped execution
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: inside this method call.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this time, self refers to the same object as oDimmer2\. Now,
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: self.brightness refers to the brightness instance variable of oDimmer2\.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: No matter what object we use or which method we call, the value of
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: the object is assigned to the variable self in the called method. You should
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: think of self as meaning the current object—the object that the method
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: was called with. Whenever a method executes, it uses the set of instance
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: variables for the object specified in the call.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '**54** Chapter 3'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 17](index-84_1.png)'
  id: totrans-814
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-6: The program in Listing 3-3 stopped in call to oDimmer2.raiseLevel()*
    **Summary**'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I presented two different ways of thinking about objects.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: These mental models should help in developing a basic understanding of
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: what happens when you instantiate multiple instances of an object from a
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: class.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: The first model showed how you can think of an object as having a set
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: of all the instance variables and all the methods of a class wrapped up in a
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: nice bundle.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: The second model went into much greater detail about the implementa-
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: tion, explaining that the code of a class exists only in one place. An impor-
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: tant takeaway is that creating new objects from a class is space-efficient.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: When you create a new instance of an object, Python allocates memory to
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: represent the instance variables defined in the class. No duplicates of the
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: class’s code are made or required.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: The key to how methods work with multiple objects is that the first
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: parameter of all methods, self, is always set to the object used in a call to
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: that method. With this approach, every method uses the instance variables
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: for the current object.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: Mental Models of Objects and the Meaning of “self” **55**
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: '**4**'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '**M A N A G I N G M U L T I P L E O B J E C T S**'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show you techniques for
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: managing any number of objects instanti-
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: ated from the same class. I’ll first go through
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: an OOP implementation of the bank account
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 一个银行账户的面向对象实现
- en: example from [Chapter 1\. T](index_split_000.html#p32)he OOP approach allows
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[第1章 T](index_split_000.html#p32)的示例，面向对象方法允许
- en: the data and code of an account to be at the same
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 数据和代码将与账户保持在同一
- en: level, eliminating the need to depend on global data.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 层级结构，消除了依赖全局数据的需求。
- en: Then, I’ll split the program into main code that
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我会将程序拆分为主要代码，这些
- en: provides a top-level menu and a separate Bank object
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个顶级菜单和一个单独的银行对象
- en: that manages accounts, in addition to any number of
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 该账户管理类，除了处理任意数量的
- en: Account objects. We’ll also discuss a better way of han-
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 账户对象。我们还将讨论更好的错误处理方法。
- en: dling errors using exceptions.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 使用异常处理来处理错误。
- en: '**Bank Account Class**'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '**银行账户类**'
- en: Our bank account class will need, at a minimum, a name, password,
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的银行账户类至少需要有名称、密码、
- en: and balance as its data. For behaviors, the user must be able to create an
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 以及余额作为数据。对于行为，用户必须能够创建一个
- en: account, deposit and withdraw money, and check their balance.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 账户、存款、取款以及查询余额。
- en: We’ll define and initialize the variables for the name, password, and
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为名称、密码和
- en: balance, and build methods to implement each of the operations. We
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 余额，并构建方法来实现每个操作。我们
- en: should then be able to instantiate any number of Account objects. Like the
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你应该能够实例化任意数量的账户对象。像
- en: initial class fro[m Chapter 1, t](index_split_000.html#p32)his is a simplified
    Account class that only uses integers for the balance and keeps the password in
    cleartext. While you
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 来自第1章的初始类，这个简化版的账户类只使用整数来表示余额，并且将密码以明文形式保存。虽然你
- en: wouldn’t use simplifications like these in a real banking application, they
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的银行应用中，你不会使用这样的简化方法，但它们
- en: will allow us to concentrate on the OOP aspects involved.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助我们集中处理面向对象的方面。
- en: The new code for the Account class is presented in Listing 4-1\.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 账户类的新代码展示在Listing 4-1中。
- en: '**File: Account.py**'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：Account.py**'
- en: Account class
  id: totrans-860
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账户类
- en: 'class Account():'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Account():'
- en: '1 def __init__(self, name, balance, password):'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '1 def __init__(self, name, balance, password):'
- en: self.name = name
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: self.name = name
- en: self.balance = int(balance)
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: self.balance = int(balance)
- en: self.password = password
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: self.password = password
- en: '2 def deposit(self, amountToDeposit, password):'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '2 def deposit(self, amountToDeposit, password):'
- en: 'if password != self.password:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '如果密码 != self.password:'
- en: print('Sorry, incorrect password')
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: print('抱歉，密码错误')
- en: return None
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: 'if amountToDeposit < 0:'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存款金额小于0：
- en: print('You cannot deposit a negative amount')
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: print('您不能存入负数金额')
- en: return None
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: self.balance = self.balance + amountToDeposit
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: self.balance = self.balance + amountToDeposit
- en: return self.balance
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: return self.balance
- en: '3 def withdraw(self, amountToWithdraw, password):'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '3 def withdraw(self, amountToWithdraw, password):'
- en: 'if password != self.password:'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '如果密码 != self.password:'
- en: print('Incorrect password for this account')
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: print('此账户的密码不正确')
- en: return None
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: 'if amountToWithdraw < 0:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要提取的金额小于0：
- en: print('You cannot withdraw a negative amount')
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: print('您不能提取负数金额')
- en: return None
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: 'if amountToWithdraw > self.balance:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提取的金额大于账户余额：
- en: print('You cannot withdraw more than you have in your account')
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: print('您不能提取超过账户余额的金额')
- en: return None
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: self.balance = self.balance - amountToWithdraw
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: self.balance = self.balance - amountToWithdraw
- en: return self.balance
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: return self.balance
- en: '**58** Chapter 4'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '**58** 第4章'
- en: '4 def getBalance(self, password):'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '4 def getBalance(self, password):'
- en: 'if password != self.password:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: '如果密码 != self.password:'
- en: print('Sorry, incorrect password')
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: print('抱歉，密码错误')
- en: return None
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: return self.balance
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: return self.balance
- en: Added for debugging
  id: totrans-893
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用于调试
- en: '5 def show(self):'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '5 def show(self):'
- en: print(' Name:', self.name)
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 姓名:', self.name)
- en: print(' Balance:', self.balance)
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 余额:', self.balance)
- en: print(' Password:', self.password)
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: print(' 密码:', self.password)
- en: print()
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: '*Listing 4-1: A minimal Account class*'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 4-1：一个简化的账户类*'
- en: '**N O T E**'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The error handling in Listing 4-1 is very simple. If we find an error condition,
    we* *print an error message and return a special value of None. Later in the chapter,
    I will* *show a better way of handling errors.*'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 4-1中的错误处理非常简单。如果我们发现错误条件，我们* *打印一条错误信息并返回一个特殊的None值。稍后的章节中，我将* *展示一种更好的错误处理方式。*'
- en: Notice how these methods manipulate and remember data. Data is
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些方法如何操作和记住数据。数据是
- en: passed into each method through parameters, which are local variables that
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 传递到每个方法中的参数，作为局部变量
- en: only exist while the method is running. Data is remembered in instance
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 只在方法运行期间存在。数据会在实例中被记住
- en: variables, which have object scope and therefore remember their values
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 变量具有对象作用域，因此会记住它们的值
- en: across calls to different methods.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 跨不同方法调用传递的参数，这些是局部变量
- en: First we have the __init__() method 1, with three parameters. When
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是__init__()方法1，带有三个参数。当
- en: 'an object is created from this class, three pieces of data are required: name,'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个类创建对象时，需要三个数据：名称，
- en: 'balance, and password. The instantiation might look like this:'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 余额和密码。实例化可能看起来像这样：
- en: oAccount = Account('Joe Schmoe', 1000, 'magic')
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: oAccount = Account('Joe Schmoe', 1000, 'magic')
- en: When we instantiate the object, the values of the three arguments are
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们实例化对象时，三个参数的值是
- en: passed into the __init__() method, which in turn assigns these values to the
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 传入__init__()方法，这会将这些值分配给
- en: 'similarly named instance variables: self.name, self.balance, and self.password.'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 同样命名的实例变量：self.name、self.balance和self.password。
- en: We’ll access these instance variables in the other methods.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在其他方法中访问这些实例变量。
- en: The deposit() method 2 lets the user make a deposit into an account.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: deposit()方法2允许用户向账户存款。
- en: After instantiating an Account object and saving it in oAccount, we could call
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例化一个Account对象并将其保存在oAccount中后，我们可以调用
- en: 'the deposit() method like this:'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式调用deposit()方法：
- en: newBalance = oAccount.deposit(500, 'magic')
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: newBalance = oAccount.deposit(500, 'magic')
- en: This call says to deposit $500 and gives the password “magic”. The
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用表示存入$500并提供密码“magic”。该
- en: method performs two validity checks on the deposit request. The first
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 方法对存款请求执行两次有效性检查。第一次
- en: ensures that the password is correct by testing the password provided in the
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试提供的密码来确保密码正确
- en: call against the password set when the Account object was created. This is a
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对创建Account对象时设置的密码进行调用，这是一个
- en: good example of how the original password saved in the instance variable
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 是如何检查实例变量中保存的原始密码的一个好例子
- en: self.password is used. The second validity check makes sure we aren’t depos-
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了self.password。第二次有效性检查确保我们没有存入
- en: iting a negative amount (which would actually be a withdrawal).
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 输入负数金额（这实际上是取款）时。
- en: If either of those tests fails, for now we return the special value None
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个测试中的任何一个失败，现在我们返回特殊值None
- en: to show that some error occurred. If both tests pass, we increment the
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一些错误发生的情况。如果两个测试都通过，我们增加
- en: instance variable self.balance by the amount of the deposit. Because the
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量self.balance，通过存款金额来更新余额。因为
- en: Managing Multiple Objects **59**
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 管理多个对象 **59**
- en: balance is stored in self.balance, it is remembered and is available for future
    calls. Finally, we return the new balance.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 余额存储在self.balance中，它被记住并可供未来的调用使用。最后，我们返回新的余额。
- en: The withdraw() method 3 works in a very similar way and would be
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: withdraw()方法3的工作方式非常相似，也会是
- en: 'called like this:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样调用：
- en: oAccount.withdraw(250, 'magic')
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: oAccount.withdraw(250, 'magic')
- en: The withdraw() method checks that we’ve supplied the proper password
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: withdraw()方法检查我们是否提供了正确的密码
- en: by verifying it against the instance variable self.password. It also checks
    that
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证它与实例变量self.password进行比较。它还会检查
- en: we’re not asking to withdraw a negative amount or more than we have in the
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有要求提取负数金额或超出账户余额的金额。
- en: account, using the instance variable self.balance. Once those tests pass, the
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 账户，使用实例变量self.balance。一旦这些测试通过，
- en: method decrements self.balance by the amount to withdraw. It returns the
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 方法通过提取的金额来减少self.balance。它返回
- en: resulting balance.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 结果余额。
- en: To check the balance 4, we only need to supply the proper password
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查余额4时，我们只需要提供正确的密码
- en: 'for the account:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 对账户进行操作：
- en: currentBalance = oAccount.getBalance('magic')
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: currentBalance = oAccount.getBalance('magic')
- en: If the password supplied matches the one saved in the instance variable
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的密码与实例变量中保存的密码匹配
- en: self.password, the method returns the value in self.balance.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: self.password时，方法返回self.balance中的值。
- en: Finally, for debugging, we added a show() method 5 to display the
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了调试，我们添加了一个show()方法5来显示
- en: current values of self.name, self.balance, and self.password saved for the
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 当前保存的self.name、self.balance和self.password的值
- en: account.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 账户。
- en: The Account class is our first example of representing something that
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: Account类是我们第一个表示某个事物的示例，
- en: is not a physical object. A bank account is not something that you can see,
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是一个物理对象。银行账户不是你可以看到的东西，
- en: feel, or touch. However, it fits perfectly into the world of computer objects
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉或触感。然而，它完美地融入了计算机对象的世界
- en: because it has data (name, balance, password) and actions that work on
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它有数据（名称、余额、密码）和对这些数据进行操作的
- en: that data (create, deposit, withdraw, get balance, show).
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据（创建、存款、取款、获取余额、显示）。
- en: '**Importing Class Code**'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入类代码**'
- en: There are two ways to use a class you’ve built in your own code. As we’ve
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: seen in previous chapters, the simplest way is to place all the code of the
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: class directly in the main Python source file. But doing so makes it difficult
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: to reuse a class.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: A second approach is to place the code of the class in a file by itself
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: and import it into a program that uses it. We’ve placed all the code for our
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: Account class in *Account.py*, but if we try to run *Account.py* by itself,
    nothing happens, because it’s just the definition of a class. To use our class
    code, we
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: must instantiate one or more objects and make calls to the object’s meth-
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: ods. As our classes become larger and more complicated, saving each of
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: them as a separate file is the preferred way to work with them.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: To use our Account class, we must build another *.py* file and import the
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: code from *Account.py*, as we do with other built-in packages like random and
    time. Often, Python programmers name the main program that imports
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: other class files *main.py* or *Main_<SomeName>.py*. We must then ensure that
    *Account.py* and the main program file are in the same folder. At the
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: '**60** Chapter 4'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: 'beginning of the main program, we bring in the Account code by starting with
    an import statement (notice that we leave off the **.py* file extension): from
    Account import *'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: Using the import statement with an asterisk (*) brings in the entire con-
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
- en: tents of the imported file. An imported file can contain multiple classes. In
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
- en: this case, where possible, you should specify the specific class or classes
    that
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
- en: you want to import, rather than importing the whole file. Here’s the syntax
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: 'for importing particular classes:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: from *<ExternalFile>* import *<ClassName1>, <ClassName2>, ...*
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two benefits to importing class code:'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The module is reusable, so if we want to use *Account.py* in some other
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: project, we just need to make a copy of the file and place it into that
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: project’s folder. Reusing code in this way is a staple of object-oriented
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: programming.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: 2\. If your class code is included in the main program, every time you run
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: the program, Python compiles all the code in your class (translates it
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: into a lower-level language that is more easily runnable on your com-
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: puter), even if you have not made any changes to the class.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: However, when you run your main program with your class code
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: imported, Python optimizes the compile step without you having to
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: do anything. It creates a folder named *__pycache__* in the project folder,
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: then compiles the code in your class file and saves the compiled code
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: in the *__pycache__* folder with a variant of the original Python filename.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: For example, for the *Account.py* file, Python will create a file using the
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: name *Account.cpython-39.pyc* (or similar, based on the version of Python
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: you are using). The *.pyc* extension stands for *Python Compiled*. Python only
    recompiles your class file if the source of the class file changes. If
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: the source of your *Account.py* has not changed, Python knows it doesn't
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 由于*Account.py*的源文件没有变化，Python知道它不需要
- en: need to recompile it and can more efficiently use the *.pyc* version of the
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 无需重新编译它，可以更高效地使用*.pyc*版本的
- en: file instead.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 文件替代。
- en: '**Creating Some Test Code**'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一些测试代码**'
- en: We’ll test our new class with four main programs. The first will create Account
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过四个主程序来测试我们的新类。第一个将创建Account
- en: objects using separately named variables. The second stores the objects in a
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单独命名的变量来存储对象。第二个将对象存储在一个
- en: list, while the third stores the account numbers and objects in a dictionary.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，而第三个将账户号码和对象存储在字典中。
- en: Finally, the fourth version will split the functionality so we have a main pro-
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，第四个版本将拆分功能，使我们有一个主程序-
- en: gram that responds to the user and a Bank object that manages the different
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 程序响应用户并管理不同账户的Bank对象
- en: accounts.
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 账户。
- en: In each example, the main program imports *Account.py*. Your project
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个示例中，主程序导入*Account.py*。您的项目
- en: folder should contain the main program and the *Account.py* file. In the
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹应包含主程序和*Account.py*文件。在
- en: Managing Multiple Objects **61**
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 管理多个对象 **61**
- en: following discussion, the different versions of the main program will be named
    *Main_Bank_VersionX.py*, where *X* represents the version number *.*
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的讨论中，主程序的不同版本将命名为*Main_Bank_VersionX.py*，其中*X*代表版本号*。*
- en: '***Creating Multiple Accounts***'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: '***创建多个账户***'
- en: In this first version, we’ll create two example accounts and populate them
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，我们将创建两个示例账户并填充它们
- en: with viable data for testing. We’ll save each account in an explicitly named
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 使用有效的数据进行测试。我们将每个账户保存在一个明确命名的
- en: variable representing the object.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 代表对象的变量。
- en: '**File: BankOOP1_IndividualVariables/Main_Bank_Version1.py**'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：BankOOP1_IndividualVariables/Main_Bank_Version1.py**'
- en: Test program using accounts
  id: totrans-1011
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用账户测试程序
- en: Version 1, using explicit variables for each Account object
  id: totrans-1012
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本1，使用每个Account对象的显式变量
- en: Bring in all the code from the Account class file
  id: totrans-1013
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入所有来自Account类文件的代码
- en: from Account import *
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Account 导入 *
- en: Create two accounts
  id: totrans-1015
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建两个账户
- en: 1 oJoesAccount = Account('Joe', 100, 'JoesPassword')
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 1 oJoesAccount = Account('Joe', 100, 'JoesPassword')
- en: print("Created an account for Joe")
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: print("为Joe创建了一个账户")
- en: 2 oMarysAccount = Account('Mary', 12345, 'MarysPassword')
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 2 oMarysAccount = Account('Mary', 12345, 'MarysPassword')
- en: print("Created an account for Mary")
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: print("为Mary创建了一个账户")
- en: 3 oJoesAccount.show()
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 3 oJoesAccount.show()
- en: oMarysAccount.show()
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: oMarysAccount.show()
- en: print()
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: Call some methods on the different accounts
  id: totrans-1023
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用不同账户的一些方法
- en: print('Calling methods of the two accounts ...')
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: print('调用两个账户的方法...')
- en: 4 oJoesAccount.deposit(50, 'JoesPassword')
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 4 oJoesAccount.deposit(50, 'JoesPassword')
- en: oMarysAccount.withdraw(345, 'MarysPassword')
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: oMarysAccount.withdraw(345, 'MarysPassword')
- en: oMarysAccount.deposit(100, 'MarysPassword')
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: oMarysAccount.deposit(100, 'MarysPassword')
- en: Show the accounts
  id: totrans-1028
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示账户
- en: oJoesAccount.show()
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: oJoesAccount.show()
- en: oMarysAccount.show()
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: oMarysAccount.show()
- en: '*Listing 4-2: A main program to test the Account class*'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-2：用于测试Account类的主程序*'
- en: We create an account for Joe 1 and an account for Mary 2, and we
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Joe创建了一个账户1，为Mary创建了一个账户2，我们
- en: store the results into two Account objects. We then call the show() method for
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 存储结果到两个Account对象中。然后我们调用show()方法
- en: the accounts to demonstrate that they were created correctly 3\. Joe depos-
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 显示账户以证明它们已经正确创建3。Joe存款-
- en: its $50\. Mary makes a withdrawal of $345 and then deposits $100 4\. If we
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 它的$50。Mary进行了一次$345的取款操作，然后存入$1004。如果我们
- en: 'run the program now, this will be our output:'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行程序，这将是我们的输出：
- en: Created an account for Joe
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 为Joe创建了一个账户
- en: Created an account for Mary
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 为Mary创建了一个账户
- en: 'Name: Joe'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 姓名：Joe
- en: 'Balance: 100'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 余额：100
- en: 'Password: JoesPassword'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：JoesPassword
- en: 'Name: Mary'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 姓名：Mary
- en: '**62** Chapter 4'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '**62** 第4章'
- en: 'Balance: 12345'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 余额：12345
- en: 'Password: MarysPassword'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：MarysPassword
- en: Calling methods of the two accounts ...
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 调用两个账户的方法...
- en: 'Name: Joe'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 姓名：Joe
- en: 'Balance: 150'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 余额：150
- en: 'Password: JoesPassword'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：JoesPassword
- en: 'Name: Mary'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 姓名：Mary
- en: 'Balance: 12100'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 余额：12100
- en: 'Password: MarysPassword'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：MarysPassword
- en: Now we’ll extend the test program to create a third account interac-
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将扩展测试程序，创建第三个账户，进行交互-
- en: tively by asking for some input from the user. Listing 4-3 shows the code
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 通过请求用户输入来交互地创建账户。列表 4-3 显示了代码
- en: for this.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 为此。
- en: Create another account with information from the user
  id: totrans-1056
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据用户信息创建另一个账户
- en: print()
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: userName = input('What is the name for the new user account? ') 1
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: userName = input('新用户账户的名字是什么？') 1
- en: userBalance = input('What is the starting balance for this account? ')
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: userBalance = input('此账户的初始余额是多少？')
- en: userBalance = int(userBalance)
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: userBalance = int(userBalance)
- en: userPassword = input('What is the password you want to use for this account?
    ')
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: userPassword = input('您想为此账户使用什么密码？')
- en: oNewAccount = Account(userName, userBalance, userPassword) 2
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: oNewAccount = Account(userName, userBalance, userPassword) 2
- en: Show the newly created user account
  id: totrans-1063
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示新创建的用户账户
- en: oNewAccount.show() 3
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: oNewAccount.show() 3
- en: Let's deposit 100 into the new account
  id: totrans-1065
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们将100存入新账户
- en: oNewAccount.deposit(100, userPassword) 4
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: oNewAccount.deposit(100, userPassword) 4
- en: usersBalance = oNewAccount.getBalance(userPassword)
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: usersBalance = oNewAccount.getBalance(userPassword)
- en: print()
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: print('After depositing 100, the user's balance is:', usersBalance)
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: print('存入100后，用户余额为：', usersBalance)
- en: Show the new account
  id: totrans-1070
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示新账户
- en: oNewAccount.show()
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: oNewAccount.show()
- en: '*Listing 4-3: An extension of the test program to create an account on the
    fly*'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 4-3：测试程序的扩展，动态创建账户*'
- en: This test code asks the user for a name, a starting balance, and a pass-
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试代码要求用户输入一个名字、一个初始余额和一个密码
- en: word 1\. It uses these values to create a new account, and we store the newly
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 密码 1。它使用这些值创建一个新账户，并将新创建的账户存储
- en: created object in the variable oNewAccount 2\. We then call the show() method
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量oNewAccount中创建的对象 2。然后我们调用show()方法
- en: on the new object 3\. We deposit $100 into the account and retrieve the new
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 对新对象进行操作 3。我们将$100存入账户并获取新的
- en: balance by calling the getBalance() method 4\. When we run the full pro-
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用getBalance()方法获取余额 4。当我们运行完整的程序时，
- en: 'gram, we get the output from Listing 4-2, as well as the following output:'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 程序运行时，我们将从清单4-2获得输出，以及以下输出：
- en: What is the name for the new user account? Irv
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 新用户账户的名称是什么？Irv
- en: What is the starting balance for this account? 777
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 该账户的起始余额是多少？777
- en: What is the password you want to use for this account? IrvsPassword
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 您想为此账户使用什么密码？IrvsPassword
- en: 'Name: Irv'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 名字：Irv
- en: 'Balance: 777'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 余额：777
- en: 'Password: IrvsPassword'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：IrvsPassword
- en: 'After depositing 100, the user''s balance is: 877'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 存入100后，用户余额为：877
- en: Managing Multiple Objects **63**
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 管理多个对象 **63**
- en: 'Name: Irv'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 名字：Irv
- en: 'Balance: 877'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 余额：877
- en: 'Password: IrvsPassword'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：IrvsPassword
- en: The key thing to notice here is that each Account object maintains its
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的关键点是，每个Account对象都会维护它自己的
- en: own set of instance variables. Each object (oJoesAccount, oMarysAccount, and
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象（oJoesAccount、oMarysAccount等）都有自己的实例变量集。
- en: oNewAccount) is a global variable that contains a collection of three instance
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: oNewAccount) 是一个全局变量，包含三个实例
- en: variables. If we were to expand our definition of the Account class to include
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 变量。如果我们扩展Account类的定义以包含
- en: information such as address, telephone number, and date of birth, each
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 信息，比如地址、电话号码和出生日期，每个
- en: object would get a set of these additional instance variables.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 对象将获得一组这些附加的实例变量。
- en: '***Multiple Account Objects in a List***'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: '***多个账户对象在列表中***'
- en: Representing each account in a separate global variable works, but this is not
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个账户表示为一个单独的全局变量是可行的，但这并不是最佳方案
- en: a good approach when we need to handle a large number of objects. A bank
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 这是处理大量对象时的一个不错的方法。一个银行
- en: would need a way to handle an arbitrary number of accounts. Whenever we
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一种方法来处理任意数量的账户。每当我们
- en: need an arbitrary number of pieces of data, a list is the typical solution.
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 需要任意数量的数据时，列表是典型的解决方案。
- en: In this version of the test code, we’ll start with an empty list of Account
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的测试代码中，我们将从一个空的Account列表开始
- en: objects. Every time a user opens an account, we’ll instantiate an Account
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户开设账户时，我们都会实例化一个Account
- en: object and append the resulting object onto our list. The account number
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 对象，并将生成的对象追加到我们的列表中。账户号码
- en: for any given account will be the index of the account in the list, starting
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何给定的账户，账户在列表中的索引将从0开始
- en: with 0\. Again, we’ll start by creating a test account for Joe and one for Mary,
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 从0开始。我们首先为Joe和Mary创建一个测试账户，
- en: as shown in Listing 4-4\.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 如清单4-4所示。
- en: '**File: BankOOP2_ListOfAccountObjects/Main_Bank_Version2.py**'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件：BankOOP2_ListOfAccountObjects/Main_Bank_Version2.py**'
- en: Test program using accounts
  id: totrans-1108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用账户的测试程序
- en: Version 2, using a list of accounts
  id: totrans-1109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本2，使用账户列表
- en: Bring in all the code from the Account class file
  id: totrans-1110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Account类文件中导入所有代码
- en: from Account import *
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 从Account导入*
- en: Start off with an empty list of accounts
  id: totrans-1112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个空的账户列表开始
- en: accountsList = [ ] 1
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList = [ ] 1
- en: Create two accounts
  id: totrans-1114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建两个账户
- en: oAccount = Account('Joe', 100, 'JoesPassword') 2
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: oAccount = Account('Joe', 100, 'JoesPassword') 2
- en: accountsList.append(oAccount)
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList.append(oAccount)
- en: print("Joe's account number is 0")
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: print("Joe的账户号码是0")
- en: oAccount = Account('Mary', 12345, 'MarysPassword') 3
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: oAccount = Account('Mary', 12345, 'MarysPassword') 3
- en: accountsList.append(oAccount)
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList.append(oAccount)
- en: print("Mary's account number is 1")
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: print("玛丽的账户号码是1")
- en: accountsList[0].show() 4
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[0].show() 4
- en: accountsList[1].show()
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[1].show()
- en: print()
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: Call some methods on the different accounts
  id: totrans-1124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同的账户上调用一些方法
- en: print('Calling methods of the two accounts ...')
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: print('正在调用两个账户的方法...')
- en: accountsList[0].deposit(50, 'JoesPassword') 5
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[0].deposit(50, 'JoesPassword') 5
- en: accountsList[1].withdraw(345, 'MarysPassword') 6
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[1].withdraw(345, 'MarysPassword') 6
- en: '**64** Chapter 4'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '**64** 第4章'
- en: accountsList[1].deposit(100, 'MarysPassword') 7
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[1].deposit(100, 'MarysPassword') 7
- en: Show the accounts
  id: totrans-1130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示账户
- en: accountsList[0].show() 8
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[0].show() 8
- en: accountsList[1].show()
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[1].show()
- en: Create another account with information from the user
  id: totrans-1133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据用户的信息创建另一个账户
- en: print()
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: userName = input('What is the name for the new user account? ')
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: userName = input('新用户账户的名称是什么？')
- en: userBalance = input('What is the starting balance for this account? ')
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: userBalance = input('此账户的初始余额是多少？')
- en: userBalance = int(userBalance)
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: userBalance = int(userBalance)
- en: userPassword = input('What is the password you want to use for this account?
    ')
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: userPassword = input('你想为这个账户设置的密码是什么？')
- en: oAccount = Account(userName, userBalance, userPassword)
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: oAccount = Account(userName, userBalance, userPassword)
- en: 'accountsList.append(oAccount) # append to list of accounts'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 'accountsList.append(oAccount) # 将其附加到账户列表中'
- en: Show the newly created user account
  id: totrans-1141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示新创建的用户账户
- en: print('Created new account, account number is 2')
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: print('创建了新账户，账户号码是2')
- en: accountsList[2].show()
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[2].show()
- en: Let's deposit 100 into the new account
  id: totrans-1144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们向新账户存入100
- en: accountsList[2].deposit(100, userPassword)
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[2].deposit(100, userPassword)
- en: usersBalance = accountsList[2].getBalance(userPassword)
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: usersBalance = accountsList[2].getBalance(userPassword)
- en: print()
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: print('After depositing 100, the user's balance is:', usersBalance)
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: print('存入100后，用户的余额为：', usersBalance)
- en: Show the new account
  id: totrans-1149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示新账户
- en: accountsList[2].show()
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: accountsList[2].show()
- en: '*Listing 4-4: Modified test code to store objects in a list*'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单4-4：修改后的测试代码，将对象存储在列表中*'
- en: We start by creating an empty list of accounts 1\. We create an account
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个空的账户列表开始1。我们创建一个账户
- en: for Joe, store the returned value into the variable oAccount, and immediately
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 对乔来说，将返回的值存储到变量oAccount中，并立即
- en: append that object onto our list of accounts 2\. Since this is the first account
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 将该对象附加到我们的账户列表中2。由于这是第一个账户
- en: in the list, Joe’s account number is 0\. Like at a real bank, any time that
    Joe
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 的账户号码是0。就像在真实银行中一样，每次乔
- en: wants to do any transactions with his account, he supplies his account num-
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 任何时候他想对账户进行交易，他都会提供他的账户号码-
- en: ber. We use his account number to show the balance of his account 4, make
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 号码。我们使用他的账户号码来显示他账户的余额4，并进行
- en: a deposit 5, then show the balance again 8\. We also create an account for
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 存款5，然后再次显示余额8。我们还为
- en: Mary with account number 1 3 and perform some test operations on her
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 玛丽的账户号码是1 3，并对她的账户进行一些测试操作
- en: account at 6 and 7\.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 账户在6和7处。
- en: The results are identical to the test code from Listing 4-3\. However,
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与清单4-3中的测试代码相同。然而，
- en: 'there is one highly significant difference between the two test programs:'
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非常重要的区别：这两个测试程序之间的差异：
- en: now there is only the single global variable accountsList. Each account has
    a
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只有一个全局变量accountsList。每个账户都有一个
- en: unique account number, which we use to access a specific account. We have
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一账户号码，我们用来访问特定的账户。我们在列表中有
- en: taken an important step in reducing the number of global variables.
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 采取了减少全局变量数量的重要步骤。
- en: Another important thing to note here is that we made some fairly major
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的注意事项是，我们做了一些相当重大的
- en: changes to the main program, but we did not touch anything in the Account
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 对主程序进行了更改，但我们没有触动Account类中的任何内容
- en: class file. OOP often allows you to hide details at different levels. If we
    assume
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: class文件。面向对象编程通常允许你在不同级别上隐藏细节。如果我们假设
- en: that the code of the Account class takes care of details related to an individual
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 负责处理与个人账户相关的细节
- en: account, we can concentrate on ways to make the main code better.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 账户，我们可以集中精力改进主代码。
- en: Notice also that we’re using the variable oAccount as a *temporary* variable.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，我们正在使用变量oAccount作为*临时*变量。
- en: That is, whenever we create a new Account object, we are assigning the result
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，每当我们创建一个新的Account对象时，我们都会分配结果
- en: to the variable oAccount. Right after doing that, we append oAccount to our
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 将其赋值给变量oAccount。就在那之后，我们将oAccount附加到
- en: Managing Multiple Objects **65**
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 管理多个对象 **65**
- en: list of accounts. We never use the variable oAccount in calls to any method
    of a specific Account object. That way, we can reuse the variable oAccount to
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: receive the value of the next account that is created.
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
- en: '***Multiple Objects with Unique Identifiers***'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: The Account objects must be individually identifiable so each user can make
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: deposits and withdrawals and get the balance of their specific account.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: Using a list for our bank accounts works, but there’s a serious flaw. Imagine
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: we have five accounts, numbered 0, 1, 2, 3, and 4\. If the person who owns
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: account 2 decides to close their account, we’d likely use a standard pop()
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: 'operation on the list to delete account 2\. This would cause a domino effect:'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: the account that was in position 3 is now in position 2, and the account that
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: was in position 4 is now in position 3\. However, the users of these accounts
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: still have their original account numbers, 3 and 4\. As a result, the customer
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: who owns account 3 will now get the information for the previous account
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: 4, and account number 4 is now an invalid index.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: To handle large numbers of objects with unique identifiers, we generally
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: use a dictionary. Unlike a list, a dictionary will allow us to delete accounts
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: without altering the account numbers associated with them. We build each
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: key/value pair with an account number as the key and an Account object as the
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: value. That way, if we need to eliminate a given account, no other account is
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: 'affected. A dictionary of accounts would look like this:'
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: '{0 : *<object for account 0>* , 1 : *<object for account 1>* , ... }'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: We can then easily get the associated Account object and call a method
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: 'like this:'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = accountsDict[accountNumber]
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: oAccount.someMethodCall()
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could use the accountNumber directly to make a call to a
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: 'method of an individual Account:'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[accountNumber].someMethodCall()
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
- en: Listing 4-5 shows the test code using a dictionary of Account objects.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: Again, while we’re making many changes to our test code, we’re not chang-
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: ing a single line in the Account class. In our test code, rather than using
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: hardcoded account numbers, we add a counter, nextAccountNumber, that we’ll
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
- en: increment after creating a new Account.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP3_DictionaryOfAccountObjects/Main_Bank_Version3.py**'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
- en: Test program using accounts
  id: totrans-1209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Version 3, using a dictionary of accounts
  id: totrans-1210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring in all the code from the Account class file
  id: totrans-1211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: from Account import *
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: '**66** Chapter 4'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict = {} 1
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
- en: nextAccountNumber = 0 2
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two accounts:'
  id: totrans-1216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: oAccount = Account('Joe', 100, 'JoesPassword')
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
- en: joesAccountNumber = nextAccountNumber
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[joesAccountNumber] = oAccount 3
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
- en: print('Account number for Joe is:', joesAccountNumber)
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
- en: nextAccountNumber = nextAccountNumber + 1 4
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = Account('Mary', 12345, 'MarysPassword')
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
- en: marysAccountNumber = nextAccountNumber
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[marysAccountNumber] = oAccount 5
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
- en: print('Account number for Mary is:', marysAccountNumber)
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
- en: nextAccountNumber = nextAccountNumber + 1
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[joesAccountNumber].show()
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[marysAccountNumber].show()
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
- en: Call some methods on the different accounts
  id: totrans-1230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: print('Calling methods of the two accounts ...')
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[joesAccountNumber].deposit(50, 'JoesPassword')
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[marysAccountNumber].withdraw(345, 'MarysPassword')
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[marysAccountNumber].deposit(100, 'MarysPassword')
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
- en: Show the accounts
  id: totrans-1235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: accountsDict[joesAccountNumber].show()
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[marysAccountNumber].show()
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
- en: Create another account with information from the user
  id: totrans-1238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: print()
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
- en: userName = input('What is the name for the new user account? ')
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
- en: userBalance = input('What is the starting balance for this account? ')
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
- en: userBalance = int(userBalance)
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
- en: userPassword = input('What is the password you want to use for this account?
    ')
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = Account(userName, userBalance, userPassword)
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
- en: newAccountNumber = nextAccountNumber
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[newAccountNumber] = oAccount
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
- en: print('Account number for new account is:', newAccountNumber)
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
- en: nextAccountNumber = nextAccountNumber + 1
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
- en: Show the newly created user account
  id: totrans-1249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: accountsDict[newAccountNumber].show()
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
- en: Let's deposit 100 into the new account
  id: totrans-1251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: accountsDict[newAccountNumber].deposit(100, userPassword)
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
- en: usersBalance = accountsDict[newAccountNumber].getBalance(userPassword)
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
- en: print('After depositing 100, the user's balance is:', usersBalance)
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
- en: Show the new account
  id: totrans-1256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: accountsDict[newAccountNumber].show()
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-5: Modified test code to store account numbers and objects in a
    dictionary* Managing Multiple Objects **67**'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
- en: Running this code yields results almost identical to those of the previous examples.
    We start with an empty dictionary of accounts 1, and initial-
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
- en: ize our nextAccountNumber variable to 0 2\. Every time we instantiate a new
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
- en: account, we add a new entry into the dictionary of accounts using the cur-
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
- en: rent value of nextAccountNumber as a key and the Account object as the value
    3\.
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
- en: We do this for each customer, as you can see for Mary 5\. Every time we
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
- en: create a new account, we increment nextAccountNumber to prepare for the next
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
- en: account 4\. With account numbers as keys in a dictionary, if a customer
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
- en: closes their account, we can eliminate that key and value from the diction-
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: ary without affecting any other accounts.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
- en: '***Building an Interactive Menu***'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
- en: With our Account class working correctly, we’ll make the main code interac-
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
- en: 'tive by asking the user to tell us what operation they would like to do: get'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
- en: the balance, make a deposit, make a withdrawal, or open a new account. In
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
- en: response, our main code will gather the needed information from the user,
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
- en: starting with their account number, and call the appropriate method of the
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
- en: user’s Account object.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
- en: As a shortcut, we will again prepopulate two accounts, one for Joe and
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
- en: one for Mary. Listing 4-6 shows our expanded main code, which uses a dic-
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: tionary to keep track of all the accounts. I’ve omitted the code that creates
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
- en: the accounts for Joe and Mary and adds those to the dictionary of accounts
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
- en: for brevity, as it’s the same as in Listing 4-5\.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP4_InteractiveMenu/Main_Bank_Version4.py**'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
- en: Interactive test program creating a dictionary of accounts
  id: totrans-1281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Version 4, with an interactive menu
  id: totrans-1282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: from Account import *
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict = {}
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
- en: nextAccountNumber = 0
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
- en: '--- snip creating accounts, adding them to dictionary ---'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
- en: print('Press b to get the balance')
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: print('Press d to make a deposit')
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
- en: print('Press o to open a new account')
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
- en: print('Press w to make a withdrawal')
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
- en: print('Press s to show all accounts')
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
- en: print('Press q to quit')
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
- en: action = input('What do you want to do? ') 1
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
- en: action = action.lower()
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
- en: 'action = action[0] # grab the first letter'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: '**68** Chapter 4'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: 'if action == ''b'':'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Get Balance ***')
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountNumber = input(''Please enter your account number: '')'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = int(userAccountNumber)
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountPassword = input(''Please enter the password: '')'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = accountsDict[userAccountNumber]
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.getBalance(userAccountPassword)
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
- en: print('Your balance is:', theBalance)
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''d'': 2'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Deposit ***')
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountNumber = input(''Please enter the account number: '') 3'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = int(userAccountNumber)
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
- en: 'userDepositAmount = input(''Please enter amount to deposit: '')'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
- en: userDepositAmount = int(userDepositAmount)
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
- en: 'userPassword = input(''Please enter the password: '')'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = accountsDict[userAccountNumber] 4
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.deposit(userDepositAmount, userPassword) 5
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new balance is:', theBalance)
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''o'':'
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Open Account ***')
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
- en: userName = input('What is the name for the new user account? ')
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
- en: userStartingAmount = input('What is the starting balance for this account? ')
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
- en: userStartingAmount = int(userStartingAmount)
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
- en: userPassword = input('What is the password you want to use for this account?
    ')
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = Account(userName, userStartingAmount, userPassword)
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: accountsDict[nextAccountNumber] = oAccount
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new account number is:', nextAccountNumber)
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
- en: nextAccountNumber = nextAccountNumber + 1
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''s'':'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
- en: print('Show:')
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: 'for userAccountNumber in accountsDict:'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = accountsDict[userAccountNumber]
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
- en: print(' Account number:', userAccountNumber)
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
- en: oAccount.show()
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''q'':'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''w'':'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Withdraw ***')
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountNumber = input(''Please enter your account number: '')'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = int(userAccountNumber)
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
- en: 'userWithdrawalAmount = input(''Please enter the amount to withdraw: '')'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
- en: userWithdrawalAmount = int(userWithdrawalAmount)
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
- en: 'userPassword = input(''Please enter the password: '')'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = accountsDict[userAccountNumber]
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.withdraw(userWithdrawalAmount, userPassword)
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
- en: Managing Multiple Objects **69**
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: print('Withdrew:', userWithdrawalAmount)
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new balance is:', theBalance)
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
- en: print('Sorry, that was not a valid action. Please try again.')
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
- en: print('Done')
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-6: Adding an interactive menu*'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
- en: In this version, we present the user with a menu of options. When the user
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
- en: selects an action 1, the code asks questions about the intended transaction
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
- en: to gather all the information we need to make the call to the user’s account.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the user wants to make a deposit 2, the program asks for the
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
- en: account number, the amount to deposit, and the password for the account 3\.
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: We use the account number as a key into the dictionary of Account objects
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
- en: to get the appropriate Account object 4\. With that object, we then call the
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: deposit() method, passing in the amount to deposit and the user’s password 5\.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: Once again, we have modified code at the main code level, and left our
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: Account class untouched.
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating an Object Manager Object**'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
- en: The code in Listing 4-6 is actually doing two different things. The program
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: first provides a simple menu interface. Then, when an action is chosen, it
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: collects data and makes a call to a method of an Account object. Rather than
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
- en: having one large main program that does two different tasks, we can split
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
- en: this code into two smaller logical units, each with a clearly defined role.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
- en: The menuing system becomes the main code that decides what action to
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: take, and the rest of the code deals with the things a bank actually does.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
- en: The bank can be modeled as an object that manages other (account)
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
- en: objects, known as an *object manager object*.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: '**object manag** **er** An object that maintains a list or dictionary of managed
    objects (typical y of a single **object** class) and cal s methods of those objects
    .'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: 'This split can be made easily and logically: we take all the code related'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: to the bank and put it into a new Bank class. Then, at the beginning of the
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: main program, we instantiate a single Bank object from the new Bank class.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
- en: The Bank class will manage a list or dictionary of Account objects. In this
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: way, the Bank object will be the only code that communicates directly with
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: Account objects (Figure 4-1).
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
- en: To create this hierarchy, we need some main code that handles the
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
- en: highest-level menuing system. In response to a choice of action, the main code
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: will call a method of the Bank object (for example, deposit() or withdraw()).
    The
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
- en: Bank object will gather the information it needs (account number, password,
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
- en: amount to deposit or withdraw), reach into its dictionary of accounts to find
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: '**70** Chapter 4'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: the matching user account, and call the appropriate method for that user’s account.
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
- en: Main code
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: Bank object
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
- en: Account
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: Account
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
- en: Account
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
- en: object
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: object
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
- en: object
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
- en: Account
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
- en: object
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-1: The main code manages a Bank object, which manages*'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
- en: '*many Account objects.*'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three layers in this division of labor:'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The main code that creates and talks to a single Bank object
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
- en: Bank object that manages a dictionary of Account objects and calls
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
- en: methods of those objects
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: Account objects themselves
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
- en: With this approach, we only have a single global variable, the Bank
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: object. In fact, the main code has no idea that Account objects even exist.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, each Account object has no clue (and does not care) what the
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: top-level user interface of the program is. The Bank object receives messages
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: from the main code and communicates with the appropriate Account object.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: The key advantage of this approach is that we have broken down a
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
- en: 'much larger program into smaller subprograms: in this case, the main code'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: and two classes. This makes it much easier to program each piece, since
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: the scope of work is smaller and the responsibilities are clearer for each.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: Further, having only a single global variable ensures that lower-level code
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
- en: will not accidentally affect data at the global level.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: In computer literature, the construct shown in Figure 4-1 is often
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
- en: known as *composition* or *object composition*.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: '**composition**'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
- en: A logical structure in which one object manages one or more other objects
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: You can think of one object as being made up of other objects. An
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
- en: example is that a car object is made up of an engine object, a steering wheel
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
- en: object, some number of door objects, four wheel and tire objects, and so
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
- en: on. The discussion often centers around the relationships between objects.
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: In this example, one would say that a car “has a” steering wheel, an engine,
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
- en: some number of doors, and so on. Therefore, the car object is a composite
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: of other objects.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: Managing Multiple Objects **71**
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: We’ll have three separate files. The main code lives in its own file.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
- en: It imports the code of our new *Bank.py* file that contains the Bank class
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: (Listing 4-7). The Bank class imports the code of the *Account.py* file and
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: uses it to instantiate Account objects as needed.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
- en: '***Building the Object Manager Object***'
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
- en: Listing 4-7 shows the code of the new Bank class, which is an object manager
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
- en: object.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP5_SeparateBankClass/Bank.py**'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
- en: Bank that manages a dictionary of Account objects
  id: totrans-1442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: from Account import *
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
- en: 'class Bank():'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self):'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: self.accountsDict = {} 1
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: self.nextAccountNumber = 0
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
- en: 'def createAccount(self, theName, theStartingAmount, thePassword): 2'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = Account(theName, theStartingAmount, thePassword)
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: newAccountNumber = self.nextAccountNumber
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: self.accountsDict[newAccountNumber] = oAccount
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
- en: Increment to prepare for next account to be created
  id: totrans-1452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: self.nextAccountNumber = self.nextAccountNumber + 1
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
- en: return newAccountNumber
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: 'def openAccount(self): 3'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Open Account ***')
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: userName = input('What is the name for the new user account? ')
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
- en: userStartingAmount = input('What is the starting balance for this account? ')
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: userStartingAmount = int(userStartingAmount)
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
- en: userPassword = input('What is the password you want to use for this account?
    ')
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = self.createAccount(userName, userStartingAmount, userPassword)
    4
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new account number is:', userAccountNumber)
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
- en: 'def closeAccount(self): 5'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Close Account ***')
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = input('What is your account number? ')
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = int(userAccountNumber)
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
- en: userPassword = input('What is your password? ')
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[userAccountNumber]
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.getBalance(userPassword)
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
- en: print('You had', theBalance, 'in your account, which is being returned to you.')
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
- en: Remove user's account from the dictionary of accounts
  id: totrans-1473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: del self.accountsDict[userAccountNumber]
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
- en: print('Your account is now closed.')
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
- en: '**72** Chapter 4'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
- en: 'def balance(self):'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Get Balance ***')
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountNumber = input(''Please enter your account number: '')'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = int(userAccountNumber)
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountPassword = input(''Please enter the password: '')'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[userAccountNumber]
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.getBalance(userAccountPassword)
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
- en: print('Your balance is:', theBalance)
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
- en: 'def deposit(self):'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Deposit ***')
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
- en: 'accountNum = input(''Please enter the account number: '')'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
- en: accountNum = int(accountNum)
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: 'depositAmount = input(''Please enter amount to deposit: '')'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
- en: depositAmount = int(depositAmount)
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountPassword = input(''Please enter the password: '')'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[accountNum]
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.deposit(depositAmount, userAccountPassword)
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new balance is:', theBalance)
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
- en: 'def show(self):'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Show ***')
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
- en: 'for userAccountNumber in self.accountsDict:'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[userAccountNumber]
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
- en: print(' Account:', userAccountNumber)
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
- en: oAccount.show()
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
- en: 'def withdraw(self):'
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Withdraw ***')
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountNumber = input(''Please enter your account number: '')'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = int(userAccountNumber)
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
- en: 'userAmount = input(''Please enter the amount to withdraw: '')'
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
- en: userAmount = int(userAmount)
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
- en: 'userAccountPassword = input(''Please enter the password: '')'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[userAccountNumber]
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.withdraw(userAmount, userAccountPassword)
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
- en: 'if theBalance is not None:'
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
- en: print('Withdrew:', userAmount)
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new balance is:', theBalance)
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-7: The Bank class with separate methods for different bank operations*
    I’ll focus on the most important things to notice in the Bank class.'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in its __init__() method, Bank initializes two variables: self.accountsDict'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
- en: and self.nextAccountNumber 1\. The prefix self. designates these as instance
    vari-
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
- en: ables, meaning the Bank class can refer to these variables in any of its methods.
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, there are two methods for creating an account: createAccount()'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
- en: and openAccount(). The createAccount() method instantiates a new account 2
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
- en: with the user’s name, a starting amount, and a password passed in for the
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
- en: new account. The openAccount() method asks the user questions to obtain
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
- en: these three pieces of information 3 and calls the createAccount() method
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
- en: within the same class.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
- en: Managing Multiple Objects **73**
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
- en: Having one method call another method in the same class is common.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
- en: But the called method doesn’t know whether it was called from inside or
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
- en: outside the class; it only knows that the first argument is the object on
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
- en: which it should run. Therefore, the call to the method must start with self.,
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
- en: because self always refers to the current object. Generically, to call from
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
- en: 'one method to another method in the same class we need to write:'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
- en: 'def myMethod(self, *<other optional parameters>* ):'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
- en: self.methodInSameClass( *<any needed arguments>* )
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
- en: After collecting information from the user for openAccount(), we have
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
- en: 'this line 4:'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
- en: userAccountNumber = self.createAccount(userName, userStartingAmount, userPassword)
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
- en: Here, openAccount() calls createAccount() from the same class to cre-
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: ate the account. The createAccount() method runs, instantiates an Account
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
- en: object, and returns an account number to openAccount(), which returns that
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: account number back to the user.
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the new method closeAccount() allows the user to close an
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: existing account 5\. This is an extra piece of functionality we’ll offer from
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
- en: our main code.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
- en: Our Bank class represents an abstract view of a bank rather than the
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
- en: physical brick-and-mortar object. This is another good example of a class
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
- en: that does not represent a physical structure.
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
- en: '***Main Code That Creates an Object Manager Object***'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
- en: The main code that creates and makes calls to the Bank object is shown in
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
- en: Listing 4-8\.
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP5_SeparateBankClass/Main_Bank_Version5.py**'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: Main program for controlling a Bank made up of Accounts
  id: totrans-1552
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring in all the code of the Bank class
  id: totrans-1553
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: from Bank import *
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance of the Bank
  id: totrans-1555
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: oBank = Bank()
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
- en: Main code
  id: totrans-1557
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create two test accounts
  id: totrans-1558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: joesAccountNumber = oBank.createAccount('Joe', 100, 'JoesPassword')
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
- en: print("Joe's account number is:", joesAccountNumber)
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
- en: marysAccountNumber = oBank.createAccount('Mary', 12345, 'MarysPassword')
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
- en: print("Mary's account number is:", marysAccountNumber)
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
- en: '**74** Chapter 4'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
- en: print('To get an account balance, press b')
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
- en: print('To close an account, press c')
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
- en: print('To make a deposit, press d')
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
- en: print('To open a new account, press o')
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
- en: print('To quit, press q')
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
- en: print('To show all accounts, press s')
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
- en: print('To make a withdrawal, press w ')
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
- en: 1 action = input('What do you want to do? ')
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
- en: action = action.lower()
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
- en: 'action = action[0] # grab the first letter'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
- en: '2 if action == ''b'':'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
- en: oBank.balance()
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
- en: '3 elif action == ''c'':'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
- en: oBank.closeAccount()
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''d'':'
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
- en: oBank.deposit()
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''o'':'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
- en: oBank.openAccount()
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''s'':'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
- en: oBank.show()
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''q'':'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''w'':'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
- en: oBank.withdraw()
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
- en: print('Sorry, that was not a valid action. Please try again.')
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
- en: print('Done')
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-8: The main code that creates a Bank object and makes cal s to it*'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the code in Listing 4-8 presents the top-level menuing sys-
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
- en: tem. It asks the user for an action 1, then calls an appropriate method in
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
- en: the Bank object to do the work 2\. You could easily extend the Bank object
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
- en: to handle some additional queries, like asking for the bank’s hours, or
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
- en: address, or phone number. That data could simply be kept as additional
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
- en: instance variables inside the Bank object. The Bank would answer those ques-
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
- en: tions without needing to communicate with any Account object.
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
- en: When a close request is made 3, the main code calls the closeAccount()
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
- en: method of the Bank object to close the account. The Bank object removes the
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
- en: 'specific account from its dictionary of accounts using a line like this:'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
- en: del self.accountsDict[userAccountNumber]
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
- en: Managing Multiple Objects **75**
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
- en: Recall that our definition of an object is data, plus code that acts on that
    data, over time. The ability to delete an object demonstrates the third
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
- en: part of our definition of an object. We can create an object (in this case an
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
- en: Account object) whenever we want, not just when a program starts. In this
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
- en: program, we create a new Account object whenever a user decides to open an
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
- en: account. Our code can use that object by calling its methods. We can also
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
- en: delete an object at any time, in this case, when a user chooses to close their
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
- en: account. This is an example of how an object (like an Account object) has a
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
- en: life span, from whenever it is created it to whenever it is deleted.
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
- en: '**Better Error Handling with Exceptions**'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
- en: So far in our Account class, if a method detects an error (for example, if the
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
- en: user deposits a negative amount, enters an incorrect password, withdraws a
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
- en: negative amount, and so on) our placeholder solution is to return None as a
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
- en: signal that something went wrong. In this section, we’ll discuss a better way
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
- en: of handling errors by using try/except blocks and raising exceptions.
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
- en: '***try and except***'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
- en: When a runtime error or abnormal condition occurs in a function or
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
- en: method from the Python Standard Library, that function or method sig-
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
- en: nals the error by raising an exception (sometimes referred to as *throwing*
    or *generating* an exception). We can detect and react to exceptions using the
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
- en: 'try/except construct. Here is the general form:'
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
- en: 'try:'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
- en: some code that may cause an error (raise an exception)
  id: totrans-1628
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'except *<some exception name>* : # if an exception happens'
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
- en: some code to handle the exception
  id: totrans-1630
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the code inside the try block works correctly and does not generate
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
- en: an exception, the except clause is skipped, and execution continues after
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
- en: the except block. However, if the code in the try block results in an excep-
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
- en: tion, control is passed to the except statement. If the exception matches the
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
- en: exception (or one of multiple exceptions) listed in the except statement,
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
- en: control is transferred to the code of the except clause. This is often referred
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
- en: to as *catching* the exception. That indented block typically contains code
    to report and/or recover from the error.
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
- en: Here is a simple example where we ask for a number from the user and
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
- en: 'attempt to convert it to an integer:'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
- en: 'age = input(''Please enter your age: '')'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
- en: 'try: # attempt to convert to integer'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
- en: age = int(age)
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
- en: 'except ValueError: # if an exception is raised trying to convert'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
- en: print('Sorry, that was not a valid number')
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
- en: '**76** Chapter 4'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
- en: Calls to the Python Standard Library can generate standard exceptions such as
    TypeError, ValueError, NameError, ZeroDivisionError, and so on. In this
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
- en: example, if the user enters letters or a floating-point number, the built-in
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
- en: int() function raises a ValueError exception, and control is transferred to
    the
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
- en: code in the except block.
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
- en: '***The raise Statement and Custom Exceptions***'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
- en: If your code detects a runtime error condition, you can use the raise state-
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
- en: ment to signal an exception. There are many forms of the raise statement,
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
- en: 'but the standard approach is to use this syntax:'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
- en: raise *<ExceptionName>* (' *<Any string to describe the error>* ') For the *<ExceptionName>*
    , you have three options. First, if there is a standard exception that matches
    the error you have detected (TypeError,
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
- en: ValueError, NameError, ZeroDivisionError, and so on), it’s fine to use that.
    You
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
- en: 'can also add your own description string:'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
- en: raise ValueError('You need to specify an integer')
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, you can use the generic Exception exception:'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
- en: raise Exception('The amount cannot be a floating-point number')
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
- en: However, this is generally frowned upon because the standard practice
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
- en: is to write except statements to look for exceptions by name, and this does
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: not provide a specific name.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
- en: A third choice, and perhaps the best, is to create your own custom
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
- en: exception. This is easy to do, but involves a technique called inheritance
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
- en: '(which we will discuss at length i[n Chapter 10)](index_split_004.html#p240).
    Here is all you need to create your own exception:'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
- en: Define a custom exception
  id: totrans-1666
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'class *<CustomExceptionName>* (Exception):'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
- en: pass
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
- en: You supply a unique name for your exception. You can then raise your
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
- en: custom exception in your code. Creating your own exceptions means you
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
- en: can explicitly check for these exceptions by name in a higher level of your
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
- en: code. In the next section, we’ll rewrite the code of our bank example so
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
- en: that we raise a custom exception in our Bank and Account classes and check
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: for and report the error in the main code. The main code will report the
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
- en: error but allow the program to continue running.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: In the typical case, the raise statement causes the current function or
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
- en: method to exit and transfers control back to the caller. If the caller contains
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
- en: an except clause that catches the exception, execution continues inside that
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
- en: except clause. Otherwise, that function or method exits. This process is
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
- en: Managing Multiple Objects **77**
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
- en: repeated until an except clause catches the exception. Control is transferred
    back through the sequence of calls, and if no except clause catches the
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
- en: exception, the program quits and Python displays the error.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Exceptions in Our Bank Program**'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
- en: We can now rewrite all three levels of our program (main, Bank, and Account)
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
- en: to signal errors with raise statements and to handle errors using try/except
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
- en: blocks.
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
- en: '***Account Class with Exceptions***'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
- en: Listing 4-9 is a new version of the Account class rewritten to use exceptions
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
- en: and optimized so that no code is repeated. We start by defining a custom
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
- en: AbortTransaction exception, which will be raised if we discover some error
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
- en: while a user is attempting to do a transaction in our bank.
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP6_UsingExceptions/Account.py (modified to work with upcoming
    Bank.py)**'
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
- en: Account class
  id: totrans-1693
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Errors indicated by "raise" statements
  id: totrans-1694
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Define a custom exception
  id: totrans-1695
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'class AbortTransaction(Exception): 1'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
- en: '''''''raise this exception to abort a bank transaction'''''''
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
- en: pass
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
- en: 'class Account():'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, name, balance, password):'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
- en: self.name = name
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
- en: self.balance = self.validateAmount(balance) 2
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
- en: self.password = password
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
- en: 'def validateAmount(self, amount):'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
- en: 'try:'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
- en: amount = int(amount)
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
- en: 'except ValueError:'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
- en: raise AbortTransaction('Amount must be an integer') 3
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount <= 0:'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
- en: raise AbortTransaction('Amount must be positive') 4
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
- en: return amount
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
- en: 'def checkPasswordMatch(self, password): 5'
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
- en: 'if password != self.password:'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
- en: raise AbortTransaction('Incorrect password for this account')
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
- en: 'def deposit(self, amountToDeposit): 6'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
- en: amountToDeposit = self.validateAmount(amountToDeposit)
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
- en: self.balance = self.balance + amountToDeposit
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
- en: return self.balance
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
- en: 'def getBalance(self):'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
- en: '**78** Chapter 4'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
- en: return self.balance
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
- en: 'def withdraw(self, amountToWithdraw): 7'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
- en: amountToWithdraw = self.validateAmount(amountToWithdraw)
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
- en: 'if amountToWithdraw > self.balance:'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
- en: raise AbortTransaction('You cannot withdraw more than you have in your account')
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
- en: self.balance = self.balance - amountToWithdraw
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
- en: return self.balance
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
- en: Added for debugging
  id: totrans-1728
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'def show(self):'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
- en: print(' Name:', self.name)
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
- en: print(' Balance:', self.balance)
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
- en: print(' Password:', self.password)
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-9: A modified Account class that raises exceptions*'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
- en: We start by defining our custom AbortTransaction exception 1 so we can
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
- en: use it in this class and in other code that imports this class.
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
- en: In the __init__() method of the Account class, we ensure that the amount
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
- en: provided as the starting balance is valid by calling validateAmount() 2\. This
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
- en: method uses a try/except block to ensure that the starting amount can
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
- en: successfully be converted to an integer. If the call to int() fails, it raises
    a
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
- en: ValueError exception, which is caught in the except clause. Rather than just
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
- en: allowing the generic ValueError to be returned to the caller, the code of
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
- en: this except block 3 executes a raise statement, raising our AbortTransaction
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
- en: exception, and includes a more meaningful error message string. If the con-
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
- en: version to an integer succeeds, we perform another test. If the user gave a
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
- en: negative amount, we also raise the AbortTransaction exception 4, but with a
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
- en: different error message string.
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
- en: The checkPasswordMatch() method 5 is called by methods in the Bank
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
- en: object to check if the password supplied by the user matches the password
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
- en: saved in the Account. If not, we execute another raise statement with the
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
- en: same exception, but we supply a more descriptive error message string.
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
- en: This allows the code of deposit() 6 and withdraw() 7 to be simplified,
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
- en: because these methods assume that the amount has been validated and
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
- en: the password verified before they are invoked. There is an additional check
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
- en: in withdraw() to ensure that the user is not trying to withdraw more money
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
- en: than is in the account; if so, we raise the AbortTransaction exception with
    an
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
- en: appropriate description.
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
- en: Since there is no code in this class to handle an AbortTransaction excep-
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
- en: tion, any time one is raised, control is passed back to the caller. If the caller
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
- en: has no code to handle the exception, then control is passed back to the pre-
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
- en: vious caller, and so on up the stack of calls. As we’ll see, our main code will
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
- en: handle this exception.
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
- en: '***Optimized Bank Class***'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
- en: The full Bank class code is available for download. In Listing 4-10 I show
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
- en: some sample methods that demonstrate try/except techniques with calls to
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
- en: methods in the previously updated Account class.
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
- en: Managing Multiple Objects **79**
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP6_UsingExceptions/Bank.py (modified to work with previous Account.py)**'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
- en: Bank that manages a dictionary of Account objects
  id: totrans-1768
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: from Account import *
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
- en: 'class Bank():'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, hours, address, phone): 1'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
- en: self.accountsDict = {}
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: self.nextAccountNumber = 0
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
- en: self.hours = hours
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: self.address = address
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
- en: self.phone = phone
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
- en: 'def askForValidAccountNumber(self): 2'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
- en: accountNumber = input('What is your account number? ')
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
- en: 'try: 3'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
- en: accountNumber = int(accountNumber)
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
- en: 'except ValueError:'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
- en: raise AbortTransaction('The account number must be an integer')
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: 'if accountNumber not in self.accountsDict:'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
- en: raise AbortTransaction('There is no account ' + str(accountNumber))
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: return accountNumber
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
- en: 'def getUsersAccount(self): 4'
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
- en: accountNumber = self.askForValidAccountNumber()
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[accountNumber]
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
- en: self.askForValidPassword(oAccount)
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
- en: return oAccount
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
- en: '--- snipped additional methods ---'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
- en: 'def deposit(self): 5'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Deposit ***')
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.getUsersAccount()
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
- en: 'depositAmount = input(''Please enter amount to deposit: '')'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.deposit(depositAmount)
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
- en: print('Deposited:', depositAmount)
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new balance is:', theBalance)
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
- en: 'def withdraw(self): 6'
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Withdraw ***')
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.getUsersAccount()
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
- en: 'userAmount = input(''Please enter the amount to withdraw: '')'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
- en: theBalance = oAccount.withdraw(userAmount)
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
- en: print('Withdrew:', userAmount)
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
- en: print('Your new balance is:', theBalance)
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
- en: 'def getInfo(self): 7'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
- en: print('Hours:', self.hours)
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
- en: print('Address:', self.address)
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
- en: print('Phone:', self.phone)
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
- en: print('We currently have', len(self.accountsDict), 'account(s) open.')
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
- en: '**80** Chapter 4'
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
- en: Special method for Bank administrator only
  id: totrans-1812
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'def show(self):'
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
- en: print('*** Show ***')
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
- en: print('(This would typically require an admin password)')
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
- en: 'for userAccountNumber in self.accountsDict:'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
- en: oAccount = self.accountsDict[userAccountNumber]
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
- en: print('Account:', userAccountNumber)
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
- en: oAccount.show()
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-10: The modified Bank class*'
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
- en: The Bank class starts with the __init__() method 1 that saves all relevant
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
- en: information in instance variables.
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
- en: The new askForValidAccountNumber()2 method is called from a number
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
- en: of other methods to ask the user for an account number and attempts to
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
- en: verify the given number. First it has a try/except block 3 to ensure that
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
- en: the number is an integer. If it isn’t, the except block detects the error as
    a
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
- en: ValueError exception but reports the error more clearly by raising a custom
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
- en: AbortTransaction exception with a descriptive message. Next, it checks to
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
- en: ensure that the given account number is one that the bank knows about. If
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
- en: not, it also raises an AbortTransaction exception, but it gives a different
    error
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
- en: message string.
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
- en: The new getUsersAccount() method 4 first calls the previous askForValid
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
- en: AccountNumber(), then uses the account number to find the appropriate Account
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
- en: object. Notice that there is no try/except in this method. If an exception
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
- en: is raised in askForValidAccountNumber() (or in a lower level), this method will
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
- en: immediately return to its caller.
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
- en: The deposit() 5 and withdraw() 6 methods call getUsersAccount() in the
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
- en: same class. Similarly, if their call to getUsersAccount() raises an exception,
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
- en: the method will exit and pass the exception up the chain to the caller. If all
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
- en: tests pass, the code of deposit() and withdraw() calls similarly named meth-
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
- en: ods in the specified Account object to perform the actual transaction.
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
- en: The getInfo() 7 method reports information about the bank (hours,
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
- en: address, phone) and doesn’t access any individual account.
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
- en: '***Main Code That Handles Exceptions***'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
- en: Listing 4-11 shows the updated main code, rewritten to handle a custom
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
- en: exception. This is where any errors that occur are reported to the user.
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
- en: '**File: BankOOP6_UsingException/Main_Bank_Version6.py**'
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
- en: Main program for controlling a Bank made up of Accounts
  id: totrans-1849
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: from Bank import *
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance of the Bank
  id: totrans-1851
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1 oBank = Bank('9 to 5', '123 Main Street, Anytown, USA', '(650) 555-1212')
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
- en: Main code
  id: totrans-1853
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Multiple Objects **81**
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
- en: '2 while True:'
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
- en: print('To get an account balance, press b')
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
- en: print('To close an account, press c')
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
- en: print('To make a deposit, press d')
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
- en: print('To get bank information, press i')
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
- en: print('To open a new account, press o')
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
- en: print('To quit, press q')
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
- en: print('To show all accounts, press s')
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
- en: print('To make a withdrawal, press w')
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
- en: action = input('What do you want to do? ')
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
- en: action = action.lower()
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
- en: 'action = action[0] # grab the first letter'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
- en: print()
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
- en: '3 try:'
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
- en: 'if action == ''b'':'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
- en: oBank.balance()
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''c'':'
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
- en: oBank.closeAccount()
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''d'':'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
- en: oBank.deposit()
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''i'':'
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
- en: oBank.getInfo()
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''o'':'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
- en: oBank.openAccount()
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''q'':'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
- en: break
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''s'':'
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
- en: oBank.show()
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
- en: 'elif action == ''w'':'
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
- en: oBank.withdraw()
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
- en: '4 except AbortTransaction as error:'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
- en: Print out the text of the error message
  id: totrans-1888
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: print(error)
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
- en: print('Done')
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-11: The main code that handles errors with try/except*'
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
- en: The main code starts by creating a single Bank object 1\. Then, in a loop,
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
- en: it presents a top-level menu to the user and asks them what action they wish
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
- en: to perform 2\. It calls an appropriate method for each command.
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
- en: The important thing in this listing is that we have added a try block
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
- en: around all the calls to methods with the oBank object 3\. That way, if any
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
