["```py\nimport pygame\nfrom pygame.sprite import Sprite\n\nclass Alien(Sprite):\n    \"\"\"A class to represent a single alien in the fleet.\"\"\"\n\n    def __init__(self, ai_game):\n        \"\"\"Initialize the alien and set its starting position.\"\"\"\n        super().__init__()\n        self.screen = ai_game.screen\n\n        # Load the alien image and set its rect attribute.\n        self.image = pygame.image.load('images/alien.bmp')\n        self.rect = self.image.get_rect()\n\n        # Start each new alien near the top left of the screen.\n❶         self.rect.x = self.rect.width\n        self.rect.y = self.rect.height\n\n        # Store the alien's exact horizontal position.\n❷         self.x = float(self.rect.x)\n```", "```py\n*--snip--*\nfrom bullet import Bullet\nfrom alien import Alien\n```", "```py\n def __init__(self):\n  *--snip--*\n self.ship = Ship(self)\n self.bullets = pygame.sprite.Group()\n        self.aliens = pygame.sprite.Group()\n\n        self._create_fleet()\n```", "```py\n def _create_fleet(self):\n        \"\"\"Create the fleet of aliens.\"\"\"\n        # Make an alien.\n        alien = Alien(self)\n        self.aliens.add(alien)\n```", "```py\n def _update_screen(self):\n  *--snip--*\n self.ship.blitme()\n  self.aliens.draw(self.screen)\n\n pygame.display.flip()\n```", "```py\n def _create_fleet(self):\n \"\"\"Create the fleet of aliens.\"\"\"\n        # Create an alien and keep adding aliens until there's no room left.\n        # Spacing between aliens is one alien width.\n alien = Alien(self)\n        alien_width = alien.rect.width\n\n❶         current_x = alien_width\n❷         while current_x < (self.settings.screen_width - 2 * alien_width):\n❸             new_alien = Alien(self)\n❹             new_alien.x = current_x\n            new_alien.rect.x = current_x\n            self.aliens.add(new_alien)\n❺             current_x += 2 * alien_width\n```", "```py\nwhile current_x < self.settings.screen_width:\n```", "```py\n def _create_fleet(self):\n  *--snip--*\n while current_x < (self.settings.screen_width - 2 * alien_width):\n            self._create_alien(current_x)\n            current_x += 2 * alien_width\n\n❶     def _create_alien(self, x_position):\n        \"\"\"Create an alien and place it in the row.\"\"\"\n new_alien = Alien(self)\n        new_alien.x = x_position\n        new_alien.rect.x = x_position\n self.aliens.add(new_alien)\n```", "```py\n def _create_fleet(self):\n \"\"\"Create the fleet of aliens.\"\"\"\n # Create an alien and keep adding aliens until there's no room left.\n        # Spacing between aliens is one alien width and one alien height.\n alien = Alien(self)\n❶         alien_width, alien_height = alien.rect.size\n\n❷         current_x, current_y = alien_width, alien_height\n❸         while current_y < (self.settings.screen_height - 3 * alien_height):\n            while current_x < (self.settings.screen_width - 2 * alien_width):\n❹                 self._create_alien(current_x, current_y)\n                current_x += 2 * alien_width\n\n❺             # Finished a row; reset x value, and increment y value.\n            current_x = alien_width\n            current_y += 2 * alien_height\n```", "```py\n def _create_alien(self, x_position, y_position):\n        \"\"\"Create an alien and place it in the fleet.\"\"\"\n new_alien = Alien(self)\n new_alien.x = x_position\n new_alien.rect.x = x_position\n        new_alien.rect.y = y_position\n self.aliens.add(new_alien)\n```", "```py\n def __init__(self):\n  *--snip--*\n        # Alien settings\n        self.alien_speed = 1.0\n```", "```py\n def __init__(self, ai_game):\n \"\"\"Initialize the alien and set its starting position.\"\"\"\n super().__init__()\n self.screen = ai_game.screen\n        self.settings = ai_game.settings\n        *--snip--*\n\ndef update(self):\n    \"\"\"Move the alien to the right.\"\"\"\n❶     self.x += self.settings.alien_speed\n❷     self.rect.x = self.x\n```", "```py\n while True:\n self._check_events()\n self.ship.update()\n self._update_bullets()\n            self._update_aliens()\n self._update_screen()\n self.clock.tick(60)\n```", "```py\n def _update_aliens(self):\n        \"\"\"Update the positions of all aliens in the fleet.\"\"\"\n        self.aliens.update()\n```", "```py\n# Alien settings\nself.alien_speed = 1.0\nself.fleet_drop_speed = 10\n# fleet_direction of 1 represents right; -1 represents left.\nself.fleet_direction = 1\n```", "```py\ndef check_edges(self):\n    \"\"\"Return True if alien is at edge of screen.\"\"\"\n    screen_rect = self.screen.get_rect()\n❶     return (self.rect.right >= screen_rect.right) or (self.rect.left <= 0)\n\ndef update(self):\n    \"\"\"Move the alien right or left.\"\"\"\n❷     self.x += self.settings.alien_speed * self.settings.fleet_direction\n    self.rect.x = self.x\n```", "```py\n def _check_fleet_edges(self):\n        \"\"\"Respond appropriately if any aliens have reached an edge.\"\"\"\n❶         for alien in self.aliens.sprites():\n            if alien.check_edges():\n❷                 self._change_fleet_direction()\n                break\n\n    def _change_fleet_direction(self):\n \"\"\"Drop the entire fleet and change the fleet's direction.\"\"\"\n        for alien in self.aliens.sprites():\n❸             alien.rect.y += self.settings.fleet_drop_speed\n        self.settings.fleet_direction *= -1\n```", "```py\n def _update_aliens(self):\n        \"\"\"Check if the fleet is at an edge, then update positions.\"\"\"\n        self._check_fleet_edges()\n        self.aliens.update()\n```", "```py\n def _update_bullets(self):\n \"\"\"Update position of bullets and get rid of old bullets.\"\"\"\n  *--snip--*\n\n        # Check for any bullets that have hit aliens.\n        #   If so, get rid of the bullet and the alien.\n        collisions = pygame.sprite.groupcollide(\n                self.bullets, self.aliens, True, True)\n```", "```py\n def _update_bullets(self):\n  *--snip--*\n❶         if not self.aliens:\n # Destroy existing bullets and create new fleet.\n❷             self.bullets.empty()\n            self._create_fleet()\n```", "```py\n # Bullet settings\n        self.bullet_speed = 2.5\n        self.bullet_width = 3\n  *--snip--*\n```", "```py\n def _update_bullets(self):\n  *--snip--*\n # Get rid of bullets that have disappeared.\n for bullet in self.bullets.copy():\n if bullet.rect.bottom <= 0:\n self.bullets.remove(bullet)\n\n  self._check_bullet_alien_collisions()\n\n  def _check_bullet_alien_collisions(self):\n        \"\"\"Respond to bullet-alien collisions.\"\"\"\n        # Remove any bullets and aliens that have collided.\n collisions = pygame.sprite.groupcollide(\n self.bullets, self.aliens, True, True)\n\n if not self.aliens:\n # Destroy existing bullets and create new fleet.\n self.bullets.empty()\n self._create_fleet()\n```", "```py\n def _update_aliens(self):\n  *--snip--*\n self.aliens.update()\n\n        # Look for alien-ship collisions.\n❶         if pygame.sprite.spritecollideany(self.ship, self.aliens):\n❷             print(\"Ship hit!!!\")\n```", "```py\nclass GameStats:\n    \"\"\"Track statistics for Alien Invasion.\"\"\"\n\n    def __init__(self, ai_game):\n        \"\"\"Initialize statistics.\"\"\"\n        self.settings = ai_game.settings\n❶         self.reset_stats()\n\n    def reset_stats(self):\n        \"\"\"Initialize statistics that can change during the game.\"\"\"\n        self.ships_left = self.settings.ship_limit\n```", "```py\n# Ship settings\n        self.ship_speed = 1.5\n        self.ship_limit = 3\n```", "```py\nimport sys\nfrom time import sleep\n\nimport pygame\n\nfrom settings import Settings\nfrom game_stats import GameStats\nfrom ship import Ship\n*--snip--*\n```", "```py\n def __init__(self):\n  *--snip--*\n self.screen = pygame.display.set_mode(\n (self.settings.screen_width, self.settings.screen_height))\n pygame.display.set_caption(\"Alien Invasion\")\n\n        # Create an instance to store game statistics.\n        self.stats = GameStats(self)\n\n self.ship = Ship(self)\n  *--snip--*\n```", "```py\n def _ship_hit(self):\n        \"\"\"Respond to the ship being hit by an alien.\"\"\"\n        # Decrement ships_left.\n❶         self.stats.ships_left -= 1\n\n        # Get rid of any remaining bullets and aliens.\n❷         self.bullets.empty()\n        self.aliens.empty()\n\n        # Create a new fleet and center the ship.\n❸         self._create_fleet()\n        self.ship.center_ship()\n\n # Pause.\n❹         sleep(0.5)\n```", "```py\n def _update_aliens(self):\n  *--snip--*\n if pygame.sprite.spritecollideany(self.ship, self.aliens):\n            self._ship_hit()\n```", "```py\ndef center_ship(self):\n        \"\"\"Center the ship on the screen.\"\"\"\n        self.rect.midbottom = self.screen_rect.midbottom\n        self.x = float(self.rect.x)\n```", "```py\n def _check_aliens_bottom(self):\n        \"\"\"Check if any aliens have reached the bottom of the screen.\"\"\"\n        for alien in self.aliens.sprites():\n❶             if alien.rect.bottom >= self.settings.screen_height:\n                # Treat this the same as if the ship got hit.\n                self._ship_hit()\n                break\n```", "```py\n def _update_aliens(self):\n  *--snip--*\n # Look for alien-ship collisions.\n if pygame.sprite.spritecollideany(self.ship, self.aliens):\n self._ship_hit()\n\n        # Look for aliens hitting the bottom of the screen.\n        self._check_aliens_bottom()\n```", "```py\n def __init__(self):\n  *--snip--*\n        # Start Alien Invasion in an active state.\n        self.game_active = True\n```", "```py\n def _ship_hit(self):\n \"\"\"Respond to ship being hit by alien.\"\"\"\n        if self.stats.ships_left > 0:\n            # Decrement ships_left.\n self.stats.ships_left -= 1\n  *--snip--*\n # Pause.\n sleep(0.5)\n        else:\n            self.game_active = False\n```", "```py\n def run_game(self):\n \"\"\"Start the main loop for the game.\"\"\"\n while True:\n self._check_events()\n\n       if self.game_active:\n self.ship.update()\n self._update_bullets()\n self._update_aliens()\n\n self._update_screen()\n self.clock.tick(60)\n```"]