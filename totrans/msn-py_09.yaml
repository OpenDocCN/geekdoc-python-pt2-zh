- en: '**9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: UNPACKING YOUR PERSONAL ITEMS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 拆开你的个人物品**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Now that the space station is operational, it’s time to unpack your personal
    items and the various tools and pieces of equipment you’ll need as you carry out
    your work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，空间站已经投入使用，是时候拆开你的个人物品和你在执行工作时所需要的各种工具和设备了。
- en: In this chapter, you’ll build the code for objects that can move between rooms
    (*props*). When you play the game, you’ll be able to discover new items, pick
    them up, move them around, and use them to solve puzzles.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将编写能够在房间之间移动的物体代码（*道具*）。当你玩游戏时，你将能够发现新物品，捡起它们，移动它们，并利用它们来解谜。
- en: '**ADDING THE PROPS INFORMATION**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加道具信息**'
- en: You’ve already added some information about props in [Chapter 5](ch05.xhtml#ch05)
    when you added the image filenames and descriptions to the objects dictionary.
    The objects dictionary contains information about *what* an item is. In this chapter,
    we’ll add information to tell the game *where* the props go.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第 5 章](ch05.xhtml#ch05)时，已经向物体字典中添加了一些关于道具的信息，当时你将图片文件名和描述添加到物体字典中。物体字典包含了有关
    *物品是什么* 的信息。在这一章，我们将添加信息来告诉游戏 *道具放在哪里*。
- en: 'You might be wondering why we’re handling the props separately from the scenery.
    We do this because their information is used in different ways: the scenery dictionary
    stores information using the room as the key. This makes sense, because the program
    needs to get information about all the scenery in a room at the same time. After
    the scenery information is added to the room map, the scenery dictionary is not
    needed again until the player enters a new room.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么我们要将道具与景物分开处理。我们这么做是因为它们的信息使用方式不同：景物字典使用房间作为键来存储信息。这是合理的，因为程序需要一次性获取一个房间中所有景物的信息。在景物信息被添加到房间地图后，景物字典在玩家进入新房间之前不再需要。
- en: By contrast, props move around, so the information for a prop might be needed
    at any time in any room. If that information is buried in a list of scenery items,
    it’s harder to find and change.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，道具是可以移动的，因此道具的信息可能在任何时候、任何房间中都需要。如果这些信息被埋藏在一长串景物项目中，就很难找到和更改。
- en: 'We’ll create a new dictionary called props to store information about props.
    We’ll use the object number as a key, and each entry will be a list that contains
    the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的字典，叫做 props，用于存储道具的信息。我们将使用物体编号作为键，每个条目将是一个包含以下内容的列表：
- en: The number of the room the prop is in
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道具所在房间的编号
- en: The *y* position of the prop in the room (in tiles)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道具在房间中的 *y* 位置（以瓦片为单位）
- en: The *x* position of the prop in the room (in tiles)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道具在房间中的 *x* 位置（以瓦片为单位）
- en: 'For example, here’s the entry for the hammer, which is object 65:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里是锤子的条目，它是物体 65：
- en: '65: [50, 1, 7]'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '65: [50, 1, 7]'
- en: It’s in room 50, at *y* position 1 and *x* position 7.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它位于 50 房间，*y* 位置为 1，*x* 位置为 7。
- en: Objects that are not in the game world or that are being carried by the player
    will have a room number of 0, which is not a real location in the game. Some objects
    aren’t in the game world until they’ve been created or after they’ve been destroyed,
    for example. These would be stored in room 0.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不在游戏世界中或由玩家携带的物体，其房间编号为 0，这在游戏中并不是真实位置。例如，有些物体在被创建或摧毁之前并不在游戏世界中，这些物体将存储在 0 房间。
- en: '**TIP**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The props and objects dictionaries use the same keys. If you want to know what
    item 65 is in the props dictionary, read its details in the objects dictionary.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 道具字典和物体字典使用相同的键。如果你想知道道具字典中物品 65 的内容，可以查看物体字典中的详细信息。
- en: '[Listing 9-1](ch09.xhtml#ch09list1) shows the code for adding the props information
    to the game. Open *listing8-10.py*, your final program from the previous chapter.
    Add the new PROPS section after the show_text() function in the DISPLAY section
    and before the START section. Only add the new lines, and save the new program
    as *listing9-1.py*. If you want to avoid typing the data, you can copy and paste
    it from the *data-chapter9.py* file.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9-1](ch09.xhtml#ch09list1) 展示了将道具信息添加到游戏中的代码。打开 *listing8-10.py*，你在上一章中的最终程序。在
    DISPLAY 部分的 `show_text()` 函数后面和 START 部分之前添加新的 PROPS 部分。只需添加新的行，并将新程序保存为 *listing9-1.py*。如果你不想手动输入数据，可以从
    *data-chapter9.py* 文件中复制并粘贴。'
- en: You can run the program with pgzrun listing9-1.py. It won’t do anything new
    yet, but you can check whether there are any error messages in the command line
    window.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行程序，通过 `pgzrun listing9-1.py`。它目前还不会做任何新操作，但你可以检查命令行窗口是否有错误消息。
- en: '*listing9-1.py*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-1.py*'
- en: --snip--
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: screen.draw.text(text_to_show,
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: screen.draw.text(text_to_show,
- en: (20, text_lines[line_number]), color=GREEN)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: (20, text_lines[line_number]), color=GREEN)
- en: '###############'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##   PROPS   ##'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '##   属性   ##'
- en: '###############'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '# Props are objects that may move between rooms, appear or disappear.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '# 属性是可以在房间之间移动、出现或消失的物体。'
- en: '# All props must be set up here. Props not yet in the game go into room 0.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '# 所有属性必须在这里设置。游戏中尚未出现的属性放入房间 0。'
- en: '# object number : [room, y, x]'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '# 对象编号 : [房间, y, x]'
- en: ➊ props = {
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ props = {
- en: '20: [31, 0, 4], 21: [26, 0, 1], 22: [41, 0, 2], 23: [39, 0, 5],'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '20: [31, 0, 4], 21: [26, 0, 1], 22: [41, 0, 2], 23: [39, 0, 5],'
- en: '24: [45, 0, 2],'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '24: [45, 0, 2],'
- en: '➋     25: [32, 0, 2], 26: [27, 12, 5], # two sides of same door'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     25: [32, 0, 2], 26: [27, 12, 5], # 同一扇门的两侧'
- en: '40: [0, 8, 6], 53: [45, 1, 5], 54: [0, 0, 0], 55: [0, 0, 0],'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '40: [0, 8, 6], 53: [45, 1, 5], 54: [0, 0, 0], 55: [0, 0, 0],'
- en: '56: [0, 0, 0], 57: [35, 4, 6], 58: [0, 0, 0], 59: [31, 1, 7],'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '56: [0, 0, 0], 57: [35, 4, 6], 58: [0, 0, 0], 59: [31, 1, 7],'
- en: '60: [0, 0, 0], 61: [36, 1, 1], 62: [36, 1, 6], 63: [0, 0, 0],'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '60: [0, 0, 0], 61: [36, 1, 1], 62: [36, 1, 6], 63: [0, 0, 0],'
- en: '64: [27, 8, 3], 65: [50, 1, 7], 66: [39, 5, 6], 67: [46, 1, 1],'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '64: [27, 8, 3], 65: [50, 1, 7], 66: [39, 5, 6], 67: [46, 1, 1],'
- en: '68: [0, 0, 0], 69: [30, 3, 3], 70: [47, 1, 3],'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '68: [0, 0, 0], 69: [30, 3, 3], 70: [47, 1, 3],'
- en: '➌     71: [0, LANDER_Y, LANDER_X], 72: [0, 0, 0], 73: [27, 4, 6],'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '➌     71: [0, LANDER_Y, LANDER_X], 72: [0, 0, 0], 73: [27, 4, 6],'
- en: '74: [28, 1, 11], 75: [0, 0, 0], 76: [41, 3, 5], 77: [0, 0, 0],'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '74: [28, 1, 11], 75: [0, 0, 0], 76: [41, 3, 5], 77: [0, 0, 0],'
- en: '78: [35, 9, 11], 79: [26, 3, 2], 80: [41, 7, 5], 81: [29, 1, 1]'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '78: [35, 9, 11], 79: [26, 3, 2], 80: [41, 7, 5], 81: [29, 1, 1]'
- en: '}'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: checksum = 0
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: checksum = 0
- en: 'for key, prop in props.items():'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'for key, prop in props.items():'
- en: '➍     if key != 71: # 71 is skipped because it''s different each game.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '➍     if key != 71: # 71 被跳过，因为它在每个游戏中都不同。'
- en: checksum += (prop[0] * key
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: checksum += (prop[0] * key
- en: + prop[1] * (key + 1)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: + prop[1] * (key + 1)
- en: + prop[2] * (key + 2))
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: + prop[2] * (key + 2))
- en: ➎ print(len(props), "props")
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ print(len(props), "属性")
- en: assert len(props) == 37, "Expected 37 prop items"
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: assert len(props) == 37, "预期有 37 个属性项"
- en: print("Prop checksum:", checksum)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: print("属性校验和:", checksum)
- en: ➏ assert checksum == 61414, "Error in props data"
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ➏ assert checksum == 61414, "属性数据错误"
- en: ➐ in_my_pockets = [55]
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ➐ in_my_pockets = [55]
- en: 'selected_item = 0 # the first item'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'selected_item = 0 # 第一个物品'
- en: item_carrying = in_my_pockets[selected_item]
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: item_carrying = in_my_pockets[selected_item]
- en: '###############'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##   START   ##'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '##   开始   ##'
- en: '###############'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 9-1: Adding the props information to* Escape'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-1：将属性信息添加到* Escape'
- en: We start the new PROPS section by creating the dictionary to store the information
    about the props ➊. This dictionary lists the position locations for all the props,
    starting with some doors (20 to 24) and including a rescue ship (40) and the carryable
    items starting at 53.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建字典来开始新的 PROPS 部分，用于存储关于属性的信息 ➊。这个字典列出了所有属性的位置，从一些门（20 到 24）开始，包括一个救援飞船（40）和从
    53 开始的可携带物品。
- en: 'There is just one oddity to draw your attention to. We count doors as props
    rather than scenery, because they’re not always there: when they’re open, they’re
    removed from the room. Most doors stay open when they’re opened until the game
    ends. However, the door that connects rooms 27 and 32 can also shut, meaning players
    can see it from both sides. As a result, we need two props to represent this door
    ➋, showing it in the top of room 27 and the bottom of room 32\. These two doors
    are object numbers 25 and 26.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小小的特殊情况需要注意。我们将门视为属性而非场景，因为它们并不总是存在：当它们打开时，会从房间中移除。大多数门一旦打开就会保持打开状态，直到游戏结束。然而，连接房间
    27 和 32 的门也可以关闭，这意味着玩家可以从两个方向看到它。因此，我们需要两个属性来表示这扇门 ➋，分别显示在房间 27 的顶部和房间 32 的底部。这两个门的对象编号是
    25 和 26。
- en: Prop 71 is the Poodle lander, which crash-landed on the planet surface before
    the game began. We use the LANDER_Y and LANDER_X variables from the VARIABLES
    part of the program ➌ to position the lander, because its location will change
    with each new game. The Poodle landed with such force that it might have become
    covered with Martian soil. It lives in room 0 until the player can dig it up.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 71 是 Poodle 着陆器，它在游戏开始前坠落在行星表面。我们使用程序中 VARIABLES 部分的 LANDER_Y 和 LANDER_X
    变量 ➌ 来定位着陆器，因为它的位置会随着每个新游戏而变化。Poodle 着陆时力道极大，可能已经被火星土覆盖。它会一直待在房间 0，直到玩家能够将其挖掘出来。
- en: As with the scenery information (see [Chapter 6](ch06.xhtml#ch06)), I’ve used
    a checksum here to help you spot whether you made an error entering the data.
    It might not be possible to play the game all the way to the end if a mistake
    is made here. The only prop missing from the checksum calculation is number 71,
    because its position uses different random numbers in each game ➍.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就像景物信息（参见[第6章](ch06.xhtml#ch06)）一样，我在这里使用了校验和来帮助你发现是否在输入数据时犯了错误。如果在这里出错，可能无法将游戏玩到最后。唯一没有包含在校验和计算中的道具是编号71，因为它的位置在每次游戏中都会使用不同的随机数
    ➍。
- en: 'If you want to change the props data, the easiest thing to do is to comment
    out the two checksum instructions ➏ like this to turn them off:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更改道具数据，最简单的方法是像这样注释掉两个校验和指令 ➏，以关闭它们：
- en: '#assert len(props) == 37, "Expected 37 prop items"'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '#assert len(props) == 37, "Expected 37 prop items"'
- en: '#assert checksum == 61414, "Error in props data"'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '#assert checksum == 61414, "Error in props data"'
- en: The program shows the checksum total and number of data items in the command
    line window ➎, so if you change the props data, you can use this information to
    update the numbers in the two assert instructions so they are correct for your
    customized data. If you do this, you can continue using these lines rather than
    commenting them out.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 程序会在命令行窗口中显示校验和总数和数据项数量➎，所以如果你更改了道具数据，可以使用这些信息更新两个assert语句中的数字，以确保它们与你自定义的数据一致。如果你这样做，可以继续使用这些行，而不是注释掉它们。
- en: The program also sets up two new variables and a list we’ll need later in the
    chapter. The in_my_pockets ➐ list stores all the items the player has picked up,
    also known as their *inventory*. One of these items is always selected, so the
    player is ready to do something with it. The selected_item variable stores its
    index number in the in_my_pockets list. The item_carrying variable stores the
    object number of the item the player has selected. You can think of the item_carrying
    variable as being the number of the object in their hands. I’ll tell you more
    about these variables later in this chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 程序还设置了两个新变量和一个稍后在本章需要的列表。in_my_pockets ➐ 列表存储了玩家捡起的所有物品，也就是他们的*背包*。其中一个物品始终是选中的，因此玩家可以随时使用它。selected_item变量存储着它在in_my_pockets列表中的索引号。item_carrying变量存储着玩家选择的物品的对象编号。你可以把item_carrying变量看作是玩家手中物品的编号。我将在本章稍后详细介绍这些变量。
- en: '**ADDING PROPS TO THE ROOM MAP**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将道具添加到房间地图**'
- en: We’ve added the information about where the props are located, so now let’s
    display the props. We’ll make it so that when props are located in the current
    room, they’re put into the room_map list as the player enters the room. Then the
    draw() function uses that list to draw the room.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了关于道具位置的信息，现在让我们显示这些道具。当道具位于当前房间时，它们会在玩家进入房间时被加入到room_map列表中。然后，draw()函数会使用这个列表来绘制房间。
- en: We’ll place the instructions to add the props to the room map into the MAKE
    MAP part of the program, inside the generate_map() function. We’ll simply add
    these instructions after the instructions you added in [Chapter 8](ch08.xhtml#ch08)
    for working out the top_left_x and top_left_y variables, just above the start
    of the GAME LOOP section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在程序的MAKE MAP部分，即generate_map()函数内，添加将道具加入房间地图的指令。我们会在你在[第8章](ch08.xhtml#ch08)中添加用于计算top_left_x和top_left_y变量的指令之后，简单地加入这些指令，放在GAME
    LOOP部分开始之前。
- en: Because the new instructions are all part of the generate_map() function, you
    need to indent them by at least four spaces.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些新指令都属于generate_map()函数的一部分，所以你需要至少缩进四个空格。
- en: Add the new instructions shown in [Listing 9-2](ch09.xhtml#ch09list2) to your
    program, and save it as *listing9-2.py*. Run the program with pgzrun listing9-2.py.
    You should see that new objects have appeared in some of the rooms, as shown in
    [Figure 9-1](ch09.xhtml#ch09fig1).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将[Listing 9-2](ch09.xhtml#ch09list2)中显示的新指令添加到程序中，并将其保存为*listing9-2.py*。使用pgzrun运行程序
    listing9-2.py。你应该会看到一些房间中出现了新物体，如[图9-1](ch09.xhtml#ch09fig1)所示。
- en: '![image](../images/fig9-1.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9-1.jpg)'
- en: '*Figure 9-1: That door wasn’t there a minute ago! That air canister might come
    in handy, though.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-1：那扇门刚才还不在！不过那个气罐可能会派上用场。*'
- en: '*listing9-2.py*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-2.py*'
- en: --snip--
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: top_left_x = center_x - 0.5 * room_pixel_width
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_x = center_x - 0.5 * room_pixel_width
- en: top_left_y = (center_y - 0.5 * room_pixel_height) + 110
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_y = (center_y - 0.5 * room_pixel_height) + 110
- en: '➊     for prop_number, prop_info in props.items():'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '➊     for prop_number, prop_info in props.items():'
- en: ➋         prop_room = prop_info[0]
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ➋         prop_room = prop_info[0]
- en: prop_y = prop_info[1]
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: prop_y = prop_info[1]
- en: prop_x = prop_info[2]
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: prop_x = prop_info[2]
- en: ➌         if (prop_room == current_room and
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ➌         if (prop_room == current_room and
- en: '➍             room_map[prop_y][prop_x] in [0, 39, 2]):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '➍             room_map[prop_y][prop_x] in [0, 39, 2]):'
- en: ➎                 room_map[prop_y][prop_x] = prop_number
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ➎                 room_map[prop_y][prop_x] = prop_number
- en: ➏                 image_here = objects[prop_number][0]
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ➏                 image_here = objects[prop_number][0]
- en: image_width = image_here.get_width()
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: image_width = image_here.get_width()
- en: image_width_in_tiles = int(image_width / TILE_SIZE)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: image_width_in_tiles = int(image_width / TILE_SIZE)
- en: '➐                 for tile_number in range(1, image_width_in_tiles):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '➐                 for tile_number in range(1, image_width_in_tiles):'
- en: room_map[prop_y][prop_x + tile_number] = 255
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[prop_y][prop_x + tile_number] = 255
- en: '###############'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## GAME LOOP ##'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '## 游戏循环 ##'
- en: '###############'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 9-2: Adding the props to the room map for the current room*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-2: 将道具添加到当前房间地图中*'
- en: In the new code, we start by setting up a loop to go through the items in the
    props dictionary ➊. For each item, the dictionary key goes into the variable prop_number,
    and the list with the position information goes into the list prop_info.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，我们首先设置一个循环，遍历props字典中的条目➊。对于每一项，字典的键值被赋给变量prop_number，包含位置信息的列表则被赋给列表prop_info。
- en: To make the program easier to read, I’ve set up some variables to store the
    information from the prop_info list ➋. The program extracts the information for
    the room number (and puts it into prop_room) and the *y* and *x* positions (which
    go into the prop_y and prop_x variables).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让程序更易于阅读，我设置了一些变量来存储prop_info列表中的信息➋。程序提取房间号信息（并将其放入prop_room中）以及*y*和*x*位置（分别放入prop_y和prop_x变量）。
- en: We add a check to see whether the prop_room matches the room the player is in
    ➌ and whether the prop is sitting on the floor ➍. The floor check puts the three
    different floor types in a list (0 for inside, 2 for soil, and 39 for the pressure
    pad in room 26). The program checks the prop’s position to see what’s in that
    location in the room map. If it’s one of these floor types, it means the object
    is sitting on the floor in full view. If not, the prop is hidden inside an item
    of scenery and shouldn’t be visible yet. For example, if a cabinet is in the prop’s
    location instead of the floor, the prop won’t be shown onscreen. The player can
    still find the prop by examining the cabinet at that location, though.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个检查，查看prop_room是否与玩家所在的房间匹配➌，以及道具是否放在地板上➍。地板检查将三种不同的地板类型放入列表中（0代表室内，2代表土壤，39代表第26房间的压力垫）。程序检查道具的位置，看看房间地图中该位置的内容。如果是这些地板类型之一，则表示物体正坐落在地板上，完全可见。如果不是，则道具隐藏在景物中，暂时不可见。例如，如果一个柜子占据了道具的位置而不是地板，道具将不会出现在屏幕上。不过，玩家仍然可以通过检查该位置的柜子来找到道具。
- en: If the prop is in the room and on the floor, the room map is updated with the
    prop number ➎.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果道具在房间内并且在地板上，则更新房间地图，使用道具编号➎。
- en: Some props, like doors, are wider than one tile. So we add the number 255 to
    any tiles that the prop covers other than the first one ➐. This is similar to
    the code we used to mark wide scenery earlier in the generate_map() function (see
    [Listing 6-4](ch06.xhtml#ch06list4) on [page 106](ch06.xhtml#page_106)).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有些道具，如门，比一个瓦片要宽。因此，我们将数字255添加到道具覆盖的其他瓦片上，而不是第一个瓦片➐。这与我们在generate_map()函数中标记宽景物时使用的代码类似（见[Listing
    6-4](ch06.xhtml#ch06list4)，位于[第106页](ch06.xhtml#page_106)）。
- en: '**GETTING INFORMATION FROM A FUNCTION: ROLLING DICE**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**从函数中获取信息：掷骰子**'
- en: In [Chapter 8](ch08.xhtml#ch08), you learned how to send information (or *arguments*)
    to a function. Let’s look more closely at how to get information *back* from a
    function. We’ll use this skill to create a function that tells us what object
    the player is standing on.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.xhtml#ch08)中，你学习了如何向函数发送信息（或*参数*）。让我们更仔细地看看如何从函数中获取信息。我们将利用这一技能创建一个函数，告诉我们玩家站在什么物体上。
- en: '[Listing 9-3](ch09.xhtml#ch09list3) shows a simple program that sends a number
    back from a function and puts it into a variable. This isn’t part of the *Escape*
    game, so create a new file by clicking **File** ▸ **New** first.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 9-3](ch09.xhtml#ch09list3)展示了一个简单的程序，该程序从函数中返回一个数字并将其放入变量中。这不是*Escape*游戏的一部分，所以首先点击**文件**
    ▸ **新建**来创建一个新文件。'
- en: Save the program as *listing9-3.py*. This program doesn’t use Pygame Zero, so
    you can run it using **Run** ▸ **Run Module** in the script window. The program
    simulates a 10-sided die.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing9-3.py*。该程序没有使用Pygame Zero，因此你可以在脚本窗口中使用**运行** ▸ **运行模块**来运行它。该程序模拟一个10面骰子。
- en: '*listing9-3.py*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-3.py*'
- en: ➊ import random
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ import random
- en: '➋ def get_number():'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '➋ def get_number():'
- en: ➌     die_number = random.randint(1, 10)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ➌     die_number = random.randint(1, 10)
- en: ➍     return die_number
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ➍     return die_number
- en: ➎ random_number = get_number()
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ random_number = get_number()
- en: ➏ print(random_number)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ➏ print(random_number)
- en: '*Listing 9-3: A 10-sided die simulator shows how to send a number back from
    a function.*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 9-3：一个10面骰模拟器展示了如何从函数中返回一个数字。*'
- en: This program starts by telling Python to use the random module ➊, which gives
    Python new functions for making random choices. We then create a new function
    called get_number() ➋, which generates a random number between 1 and 10 ➌ and
    puts the result into a variable called dice_number.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序首先告诉Python使用random模块 ➊，这会为Python提供一些新的函数来做随机选择。接着我们创建了一个新函数叫get_number()
    ➋，它生成一个1到10之间的随机数 ➌，并将结果放入名为dice_number的变量中。
- en: 'Normally, when you start a function (known as *calling* a function in Python
    jargon), you use its name, like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你启动一个函数时（在Python术语中称为*调用*函数），你使用它的名称，像这样：
- en: get_number()
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: get_number()
- en: This time, we not only start the function, but tell Python to put the result
    from the function into a variable called random_number ➎. When the function sends
    its result back using the return command ➍, the result goes into the random_number
    variable. The main part of the program can then print out its value ➏.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们不仅启动了函数，还告诉Python将函数的结果存入一个名为random_number的变量 ➎。当函数通过返回命令 ➍ 发送结果时，结果会存入random_number变量。程序的主部分随后可以打印出它的值
    ➏。
- en: This code shows that the way to get information from a function is to set up
    a variable to store the information when the function is started ➎ and to use
    the return instruction to send that information back when the function finishes
    ➍. You can send strings and lists back too, not just numbers. Where possible,
    this is the best way to enable other parts of the program to use information from
    a function. This technique enables the main part of the program to get information
    from a function’s local variable (in this case dice_number), which would usually
    only be visible inside that function.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了从函数中获取信息的方法：当函数启动时，设置一个变量来存储信息 ➎，当函数执行完毕时，通过返回指令将信息发送回来 ➍。你不仅可以返回数字，还可以返回字符串和列表。在可能的情况下，这是让程序其他部分使用函数信息的最佳方法。这个技巧让程序的主程序能够从函数的局部变量（在这个例子中是dice_number）中获取信息，而这个局部变量通常只在该函数内部可见。
- en: You won’t need this program again, so you can close it when you’ve finished
    experimenting with it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你以后不需要再使用这个程序，因此在完成实验后可以关闭它。
- en: '**FINDING AN OBJECT NUMBER FROM THE ROOM MAP**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从房间地图中找到物体编号**'
- en: Shortly, we’ll add the code to enable you to pick up objects in the space station.
    First we need a way to find out which object is being picked up.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们将添加代码以便让你在太空站中捡起物体。首先，我们需要一种方法来找出正在被捡起的物体是什么。
- en: When the player interacts with scenery or props, we need to find the number
    of the object they’re using. Normally, this is simple. If the room map shows that
    the object number of the prop at the player’s location is 65, that’s a hammer.
    The program can show a description of the hammer, and let the player pick it up
    or use it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家与场景或道具互动时，我们需要找出玩家正在使用的物体编号。通常，这很简单。如果房间地图显示玩家位置的道具编号是65，那就是一把锤子。程序可以展示锤子的描述，并让玩家捡起或使用它。
- en: Identifying the object number gets tricky with wide objects that span multiple
    tiles. We use the number 255 to mark tiles covered by a wide object, but that
    number doesn’t correspond to a prop. The program needs to work out what the real
    object number is by moving left in the room map until it finds a number that isn’t
    255.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 识别物体编号在处理跨越多个瓦片的大型物体时变得棘手。我们使用数字255来标记被大物体覆盖的瓦片，但这个数字并不对应任何道具。程序需要通过在房间地图中向左移动，直到找到一个不是255的数字，来计算出实际的物体编号。
- en: For example, if the player examines the rightmost third of a door, the program
    would see that this position contains 255, so it would check the position to the
    left. That position also contains 255, so the program would check farther left.
    If that tile contains a number other than 255, the program knows it’s found the
    real object number, which might be 20 (one of the doors), for example. Using the
    object number 20, the program can then let the player examine or open the door.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果玩家检查门的最右侧第三部分，程序会发现这个位置包含255，于是它会检查左边的位置。该位置也包含255，程序继续向左检查。如果该瓦片包含一个非255的数字，程序就知道它找到了真正的物体编号，举例来说，可能是20（其中一个门）。通过物体编号20，程序就可以让玩家检查或打开这扇门。
- en: We’ll create two functions that will work out the object number, shown in [Listing
    9-4](ch09.xhtml#ch09list4). You need to add these to [Listing 9-2](ch09.xhtml#ch09list2),
    so click **File** ▸ **Open** to open *listing9-2.py* again if necessary. We’ll
    start a new section of the program called PROP INTERACTIONS. Put this after the
    PROPS section. This new section will be where we put the code for picking up and
    dropping props.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个函数来计算物体编号，详见[Listing 9-4](ch09.xhtml#ch09list4)。你需要将它们添加到[Listing 9-2](ch09.xhtml#ch09list2)，如果需要，请点击**文件**
    ▸ **打开**再次打开*listing9-2.py*。我们将开始一个新部分，命名为道具交互（PROP INTERACTIONS）。把它放在道具（PROPS）部分后面。这个新部分将是我们编写拾取和丢弃道具代码的地方。
- en: Save the updated program as *listing9-4.py*. It won’t do anything new yet, but
    you can run it using pgzrun listing9-4.py to check that you haven’t added any
    mistakes. Look in the command line window for any error messages.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新后的程序保存为*listing9-4.py*。它暂时不会做任何新事情，但你可以使用`pgzrun listing9-4.py`运行它，检查是否没有添加错误。查看命令行窗口是否有错误信息。
- en: '*listing9-4.py*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-4.py*'
- en: --snip--
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: in_my_pockets = [55]
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: in_my_pockets = [55]
- en: 'selected_item = 0 # the first item'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'selected_item = 0 # 第一个物品'
- en: item_carrying = in_my_pockets[selected_item]
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: item_carrying = in_my_pockets[selected_item]
- en: '#######################'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '#######################'
- en: '## PROP INTERACTIONS ##'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '## 道具交互 ##'
- en: '#######################'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '#######################'
- en: '➊ def find_object_start_x():'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ def find_object_start_x():'
- en: ➋     checker_x = player_x
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ➋      checker_x = player_x
- en: '➌     while room_map[player_y][checker_x] == 255:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '➌      while room_map[player_y][checker_x] == 255:'
- en: ➍         checker_x -= 1
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ➍          checker_x -= 1
- en: ➎     return checker_x
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ➎      return checker_x
- en: '➏ def get_item_under_player():'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '➏ def get_item_under_player():'
- en: ➐     item_x = find_object_start_x()
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ➐      item_x = find_object_start_x()
- en: ➑     item_player_is_on = room_map[player_y][item_x]
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ➑      item_player_is_on = room_map[player_y][item_x]
- en: ➒     return item_player_is_on
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ➒      return item_player_is_on
- en: --snip--
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 9-4: Finding the real object number*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-4: 查找真实的物体编号*'
- en: 'Before we get into how this code works, I’ll explain how the game loop lets
    players interact with props and scenery:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论这段代码如何工作之前，我先解释一下游戏循环如何让玩家与道具和景物互动：
- en: When the player presses a movement key, the program changes the player’s position
    (even if that puts them somewhere impossible, like inside a wall).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当玩家按下移动键时，程序会改变玩家的位置（即使这会把他们移动到不可能的位置，例如进入墙壁内部）。
- en: The program carries out any actions the player requires using the object at
    the player’s location. This means the player and the object are in the same position
    in the room at this time.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序根据玩家要求，使用玩家当前位置的物体执行相应的操作。这意味着此时玩家和物体位于房间中的同一位置。
- en: If the player is standing somewhere they’re not allowed to be (such as inside
    a wall), the program moves them back to where they were.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果玩家站在不允许站立的地方（比如墙壁内部），程序会将他们移回原来的位置。
- en: The entire process happens so fast you never see the player go inside the wall
    or other piece of scenery. This way, the player can use a movement key plus an
    action key to examine or use the scenery. For example, you can walk into a wall
    and press the spacebar to examine the wall and see a description of it. This process
    also works with an object the player is standing on, such as a prop on the floor.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程发生得非常快，你几乎看不见玩家进入墙壁或其他景物。这样，玩家可以使用移动键和动作键来检查或使用景物。例如，你可以走进墙壁并按下空格键来检查墙壁并查看它的描述。这个过程同样适用于玩家站立的物体，比如地上的道具。
- en: The first new function we added in [Listing 9-4](ch09.xhtml#ch09list4) is find_object_start_x()
    ➊. This function finds the start position of whatever object is at the player’s
    position, going left to find the real object number if the location contains 255.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[Listing 9-4](ch09.xhtml#ch09list4)中添加的第一个新函数是`find_object_start_x()` ➊。这个函数找到玩家所在位置的物体起始位置，如果该位置包含255，它会向左查找真实的物体编号。
- en: To do this, the function sets the variable checker_x to be the same as the player’s
    *x* position ➋. We use a loop that keeps going for as long as the room map contains
    255 at the *x* position of checker_x and at the player’s *y* position ➌. Inside
    that loop is a single instruction to reduce checker_x by 1 ➍, moving 1 tile to
    the left. When the loop finishes, checker_x contains the left position where the
    object begins. That number is then sent back ➎ to the instruction that started
    the function.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，函数将变量`checker_x`设置为与玩家的*x*位置相同 ➋。我们使用一个循环，该循环在`checker_x`的*x*位置和玩家的*y*位置上，房间地图中包含255时持续执行
    ➌。在这个循环内部，有一条指令将`checker_x`减去1 ➍，即向左移动1个格子。当循环结束时，`checker_x`包含了物体开始的左侧位置。然后，这个数字会被返回
    ➎，传递给启动该函数的指令。
- en: The second new function is get_item_under_player() ➏, which works out which
    object is at the player’s position. It uses the first function to find out where
    the object starts and stores the *x* position in the variable item_x ➐. Then it
    looks at the room map data for that position to see what object is there ➑ and
    sends that number back to the instruction that started the function ➒.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个新函数是get_item_under_player() ➏，它计算出玩家位置的物品是什么。它使用第一个函数来找出物品的起始位置，并将*x*位置存储在变量item_x
    ➐中。然后它查看该位置的房间地图数据，以确认该位置是什么物品 ➑，并将该编号返回给启动该函数的指令 ➒。
- en: '**PICKING UP OBJECTS**'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拾取物品**'
- en: Now that these functions are in place, we can create a couple of functions for
    picking up objects and then storing them in a player’s inventory. Then we’ll add
    some keyboard controls.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些函数已经就绪，我们可以创建几个用于拾取物品并将其存入玩家背包的函数。然后我们将添加一些键盘控制。
- en: '**PICKING UP PROPS**'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**拾取道具**'
- en: Add the two functions shown in [Listing 9-5](ch09.xhtml#ch09list5) to the end
    of the PROP INTERACTIONS section of the program, just after where you added the
    code in [Listing 9-4](ch09.xhtml#ch09list4).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将[清单 9-5](ch09.xhtml#ch09list5)中显示的两个函数添加到程序的PROP INTERACTIONS部分的末尾，紧接着你在[清单
    9-4](ch09.xhtml#ch09list4)中添加的代码之后。
- en: Save this program as *listing9-5.py*. You can check for any errors by running
    it using pgzrun listing9-5.py, but you won’t see any difference yet. This code
    adds some new functions but doesn’t include any key controls to enable the player
    to use them.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将此程序保存为*listing9-5.py*。你可以通过运行pgzrun listing9-5.py来检查是否有任何错误，但目前还看不出任何区别。此代码添加了一些新函数，但没有包含任何启用玩家使用它们的键盘控制。
- en: '*listing9-5.py*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-5.py*'
- en: --snip--
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: item_player_is_on = room_map[player_y][item_x]
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: item_player_is_on = room_map[player_y][item_x]
- en: return item_player_is_on
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: return item_player_is_on
- en: 'def pick_up_object():'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 'def pick_up_object():'
- en: global room_map
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: global room_map
- en: ➊     item_player_is_on = get_item_under_player()
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ➊     item_player_is_on = get_item_under_player()
- en: '➋     if item_player_is_on in items_player_may_carry:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     if item_player_is_on in items_player_may_carry:'
- en: ➌         room_map[player_y][player_x] = get_floor_type()
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ➌         room_map[player_y][player_x] = get_floor_type()
- en: ➍         add_object(item_player_is_on)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ➍         add_object(item_player_is_on)
- en: show_text("Now carrying " + objects[item_player_is_on][3], 0)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: show_text("现在携带的物品是 " + objects[item_player_is_on][3], 0)
- en: sounds.pickup.play()
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: sounds.pickup.play()
- en: time.sleep(0.5)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: time.sleep(0.5)
- en: '➎     else:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '➎     else:'
- en: show_text("You can't carry that!", 0)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: show_text("你无法携带那个物品！", 0)
- en: '➏ def add_object(item): # Adds item to inventory.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '➏ def add_object(item): # 将物品添加到背包。'
- en: global selected_item, item_carrying
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: global selected_item, item_carrying
- en: ➐     in_my_pockets.append(item)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ➐     in_my_pockets.append(item)
- en: ➑     item_carrying = item
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ➑     item_carrying = item
- en: ➒     selected_item = len(in_my_pockets) - 1
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ➒     selected_item = len(in_my_pockets) - 1
- en: display_inventory()
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: display_inventory()
- en: '➓     props[item][0] = 0 # Carried objects go into room 0 (off the map).'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '➓     props[item][0] = 0 # 捡起的物品进入房间0（地图之外）。'
- en: 'def display_inventory():'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'def display_inventory():'
- en: print(in_my_pockets)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: print(in_my_pockets)
- en: --snip--
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 9-5: Adding the functions to pick up objects*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-5: 添加拾取物品的函数*'
- en: The function pick_up_object() will start when the player presses the *get* key
    (G) to pick up an item. It begins by putting the object number for the item at
    the player’s position into the variable item_player_is_on ➊. If the item is carryable
    ➋, the rest of the function picks it up.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: pick_up_object()函数将在玩家按下*获取*键（G）以拾取物品时启动。它首先将玩家当前位置的物品编号放入变量item_player_is_on
    ➊。如果该物品可以携带 ➋，则函数的其余部分将拾取该物品。
- en: To remove the item from the floor, the program replaces the room map at the
    player’s position with the object number for the floor (either soil or floor tiles)
    ➌. The get_floor_type() function is used to find out what the floor type should
    be in this room. When the room is redrawn, the item will disappear from the floor,
    so it looks like it’s been picked up. The item is then added to the list of items
    the player is carrying, using the add_object() function ➍.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将物品从地板上移除，程序将玩家位置的房间地图替换为地板的物品编号（无论是土壤还是地砖） ➌。get_floor_type()函数用于找出此房间的地板类型。重新绘制房间时，物品会从地板上消失，看起来像是已经被捡起。然后，物品通过add_object()函数
    ➍添加到玩家的背包物品列表中。
- en: We then show a message onscreen telling the player they picked up an item and
    play a sound effect. We add a short delay of half a second using the time.sleep(0.5)
    instruction to make sure the confirmation message isn’t overwritten if the player
    holds down the key too long.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在屏幕上显示一条信息，告诉玩家他们捡起了一个物品，并播放一个音效。我们使用time.sleep(0.5)指令添加了半秒的短暂延迟，以确保如果玩家长时间按住键，确认信息不会被覆盖。
- en: If the item isn’t carryable, we show a message telling them they can’t carry
    it ➎. For example, scenery can’t be carried, so we need to tell players that.
    Otherwise, they might just think they’re pressing the wrong key or the program
    isn’t working.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果物品不能被携带，我们会显示一条消息告诉玩家他们不能携带这个物品➎。例如，景物是不能携带的，所以我们需要告诉玩家这一点。否则，他们可能会以为自己按错了键，或者程序没有正常工作。
- en: The add_object() function adds an item to the in_my_pockets list, which stores
    the items the player is carrying (their inventory). At the start of the function,
    the object number this function receives is put into the local variable item ➏.
    The item is added to the end of the in_my_pockets_list using append() ➐.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: add_object()函数将物品添加到in_my_pockets列表中，该列表存储玩家携带的物品（即他们的背包）。在函数开始时，传入的物品编号会被放入局部变量item➏。然后，物品会通过append()方法被添加到in_my_pockets_list的末尾➐。
- en: We use the global variable item_carrying to store the object number of whatever’s
    in the player’s hands, so it is set to be the object number of this item ➑. We
    set the selected_item variable as the last item in the list, meaning the item
    the player just picked up is selected ➒. These variables will be important when
    objects are used later on, and when the display_inventory() function shows the
    list of items on the screen. For now, that function just prints out the list in
    the command line window.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用全局变量item_carrying来存储玩家手中物品的编号，所以它被设置为这个物品➑的编号。我们将selected_item变量设置为列表中的最后一个物品，这意味着玩家刚刚拾取的物品被选中➒。这些变量在物品后续使用时会很重要，并且在display_inventory()函数显示屏幕上的物品列表时也会用到。目前，这个函数只会在命令行窗口中打印出物品列表。
- en: Finally, we set the item’s position in the props dictionary to be room 0 ➓.
    This means the item just picked up is not shown in the game map anywhere. If we
    didn’t do this, the item would reappear in the room again when the player next
    entered it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将物品的位置在props字典中设置为房间0➓。这意味着刚拾取的物品在游戏地图上不会再显示。如果我们不这么做，物品在玩家下次进入该房间时会重新出现。
- en: '**ADDING THE KEYBOARD CONTROLS**'
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加键盘控制**'
- en: To enable the new functions to work their magic, we need to add the keyboard
    control too. We’ll use the G key as our get key.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使新的功能发挥作用，我们还需要添加键盘控制。我们将使用G键作为获取键。
- en: Place the new instructions, shown in [Listing 9-6](ch09.xhtml#ch09list6), in
    the game_loop() function in the GAME LOOP section of the program. The new instruction
    belongs after the exit checks have been made and before the player is moved back
    if they’re standing somewhere they shouldn’t be.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些新的指令，参见[列表9-6](ch09.xhtml#ch09list6)，放在程序的GAME LOOP部分中的game_loop()函数内。新的指令应该放在退出检查之后，并且在玩家如果站在不该站的位置时被移回之前。
- en: '*listing9-6.py*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-6.py*'
- en: --snip--
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: player_frame = 0
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: player_frame = 0
- en: start_room()
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: start_room()
- en: return
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '➊     if keyboard.g:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '➊     if keyboard.g:'
- en: ➋         pick_up_object()
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: ➋         pick_up_object()
- en: '# If the player is standing somewhere they shouldn''t, move them back.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果玩家站在不应该站的地方，将他们移回。'
- en: 'if room_map[player_y][player_x] not in items_player_may_stand_on: #\'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'if room_map[player_y][player_x] not in items_player_may_stand_on: #\'
- en: '#           or hazard_map[player_y][player_x] != 0:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '#           或者hazard_map[player_y][player_x] != 0:'
- en: --snip--
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 9-6: Adding the keyboard control*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表9-6：添加键盘控制*'
- en: You need to indent the first new instruction by four spaces ➊, because it’s
    inside the game_loop() function. Indent the second one ➋ by four more spaces,
    because it belongs to the if instruction above. These instructions run the pick_up_object()
    function ➋ when the player presses the G key ➊.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将第一条新的指令缩进四个空格➊，因为它位于game_loop()函数内部。将第二条指令再缩进四个空格➋，因为它属于上面的if语句。这些指令会在玩家按下G键➊时运行pick_up_object()函数➋。
- en: Save the listing as *listing9-6.py*. When you run pgzrun listing9-6.py, you
    should be able to pick up objects.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将列表保存为*listing9-6.py*。当你运行pgzrun listing9-6.py时，你应该能够拾取物品。
- en: Test it starting with the air canister in the first room. Just walk onto it
    and press G. You’ll hear a sound and see a message, and the object will disappear
    from the room.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一个房间的气瓶开始测试。只需走到气瓶上并按下G键。你会听到一个声音并看到一条消息，物体会从房间中消失。
- en: 'The command line window (where you entered the pgzrun instruction) will also
    show the inventory list every time you pick up an object, like this:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行窗口（你输入pgzrun指令的地方）每次你拾取物品时也会显示物品列表，像这样：
- en: '[55, 59]'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[55, 59]'
- en: Each time, you’ll see a new item added to the end of the list. Item 55, the
    yoyo, is in your pocket at the start of the game.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 每次，你都会看到一个新物品被添加到列表的末尾。物品55，溜溜球，在游戏开始时就在你的口袋里。
- en: '**ADDING THE INVENTORY FUNCTIONALITY**'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加背包功能**'
- en: Now you can pick up props that you find around the space station. We should
    add an easy way to see what you’re carrying and to choose different items to use.
    We’ll make a new display_inventory() function that displays a strip at the top
    of the game window showing the items the player is carrying.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以捡起在太空站周围找到的道具了。我们应该添加一个简单的方式来查看你所携带的物品，并选择不同的物品进行使用。我们将创建一个新的 display_inventory()
    函数，在游戏窗口的顶部显示玩家所携带的物品。
- en: We’ll then add controls so the player can press the TAB key to select the next
    item in the list. The selected item has a box drawn around it, and its description
    is shown underneath. [Figure 9-2](ch09.xhtml#ch09fig2) shows you what it will
    look like.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将添加控制功能，允许玩家按 TAB 键选择列表中的下一个物品。选中的物品会被框起来，描述信息会显示在物品下方。[图 9-2](ch09.xhtml#ch09fig2)展示了它的外观。
- en: '![image](../images/fig9-2.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9-2.jpg)'
- en: '*Figure 9-2:* The inventory at the top of the game window'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-2:* 游戏窗口顶部的背包'
- en: '**DISPLAYING THE INVENTORY**'
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**显示背包物品**'
- en: '[Listing 9-7](ch09.xhtml#ch09list7) shows you the code to add. [Listing 9-5](ch09.xhtml#ch09list5)
    included some code for the display_inventory() function. Replace that with the
    new code. Save this listing as *listing9-7.py*. When you run the program using
    pgzrun listing9-7.py, you’ll be able to see items added to your inventory at the
    top of the screen as you collect them.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-7](ch09.xhtml#ch09list7)展示了你需要添加的代码。[列表 9-5](ch09.xhtml#ch09list5)包含了
    display_inventory() 函数的一些代码。将其替换为新代码。将这个列表保存为 *listing9-7.py*。当你使用 pgzrun 运行程序
    listing9-7.py 时，你将能够在屏幕顶部看到你收集的物品被添加到背包中。'
- en: '*listing9-7.py*'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-7.py*'
- en: --snip--
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: selected_item = len(in_my_pockets) - 1
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: selected_item = len(in_my_pockets) - 1
- en: display_inventory()
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: display_inventory()
- en: 'props[item][0] = 0 # Carried objects go into room 0 (off the map).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'props[item][0] = 0 # 被携带的物品进入房间 0（地图外）。'
- en: 'def display_inventory():'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'def display_inventory():'
- en: ➊     box = Rect((0, 45), (800, 105))
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ➊     box = Rect((0, 45), (800, 105))
- en: screen.draw.filled_rect(box, BLACK)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: screen.draw.filled_rect(box, BLACK)
- en: '➋     if len(in_my_pockets) == 0:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     if len(in_my_pockets) == 0:'
- en: return
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: ➌     start_display = (selected_item // 16) * 16
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: ➌     start_display = (selected_item // 16) * 16
- en: '➍     list_to_show = in_my_pockets[start_display : start_display + 16]'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '➍     list_to_show = in_my_pockets[start_display : start_display + 16]'
- en: ➎     selected_marker = selected_item % 16
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: ➎     selected_marker = selected_item % 16
- en: '➏     for item_counter in range(len(list_to_show)):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '➏     for item_counter in range(len(list_to_show)):'
- en: item_number = list_to_show[item_counter]
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: item_number = list_to_show[item_counter]
- en: image = objects[item_number][0]
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: image = objects[item_number][0]
- en: ➐         screen.blit(image, (25 + (46 * item_counter), 90))
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ➐         screen.blit(image, (25 + (46 * item_counter), 90))
- en: box_left = (selected_marker * 46) - 3
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: box_left = (selected_marker * 46) - 3
- en: ➑     box = Rect((22 + box_left, 85), (40, 40))
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: ➑     box = Rect((22 + box_left, 85), (40, 40))
- en: screen.draw.rect(box, WHITE)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: screen.draw.rect(box, WHITE)
- en: item_highlighted = in_my_pockets[selected_item]
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: item_highlighted = in_my_pockets[selected_item]
- en: description = objects[item_highlighted][2]
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: description = objects[item_highlighted][2]
- en: ➒     screen.draw.text(description, (20, 130), color="white")
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ➒     screen.draw.text(description, (20, 130), color="white")
- en: '###############'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##   START   ##'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '##   开始   ##'
- en: '###############'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: clock.schedule_interval(game_loop, 0.03)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: clock.schedule_interval(game_loop, 0.03)
- en: generate_map()
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: generate_map()
- en: clock.schedule_interval(adjust_wall_transparency, 0.05)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: clock.schedule_interval(adjust_wall_transparency, 0.05)
- en: ➓ clock.schedule_unique(display_inventory, 1)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: ➓ clock.schedule_unique(display_inventory, 1)
- en: '*Listing 9-7: Displaying the inventory*'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-7：显示背包物品*'
- en: The new display_inventory() function starts by drawing a black box over the
    inventory area to clear it ➊. If the player isn’t carrying anything, the function
    returns without taking any further action because there are no items to display
    ➋.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 display_inventory() 函数开始时，会在背包区域绘制一个黑色框，以清除该区域 ➊。如果玩家没有携带任何物品，函数会直接返回，因为没有物品可以显示
    ➋。
- en: There is only room to show 16 items on the screen, but the player could carry
    many more items than that. If the in_my_pockets list is too long to fit on the
    screen, the program shows it 16 items at a time. The player can select any of
    the items shown on the screen by pressing the TAB key to move through them, from
    left to right. If the last item displayed is selected and they press TAB, the
    next chunk of the list is shown. If the player presses TAB on the final item in
    the list, the start of the list appears again.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上只能显示 16 个物品，但玩家可以携带更多的物品。如果 in_my_pockets 列表中的物品太多，无法完全显示在屏幕上，程序会每次显示 16
    个物品。玩家可以按 TAB 键从左到右浏览这些物品，选择任何一个显示在屏幕上的物品。如果最后一个显示的物品被选中，按 TAB 键时，列表的下一部分会显示出来。如果玩家在列表的最后一个物品上按
    TAB 键，列表会从头开始显示。
- en: We store the part of the in_my_pockets list currently displayed on the screen
    in another list called list_to_show and use a loop to display it ➏. The loop puts
    numbers into a variable called item_counter, which is used to extract the right
    image to draw each time, and also work out where to draw it ➐.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将当前显示在屏幕上的 in_my_pockets 列表的部分内容存储在另一个列表中，名为 list_to_show，并使用循环显示它 ➏。该循环将数字放入名为
    item_counter 的变量中，用于每次提取正确的图像并绘制，同时还计算绘制的位置 ➐。
- en: The clever bit is working out which items should go into list_to_show. In the
    start_display variable, we store the index number for the first item in in_my_pockets
    that the program should draw ➌. The // operator divides the selected item number
    by 16, rounding down. The result is then multiplied by 16 to get the index number
    for the first item in the batch. For example, if the selected item is number 9,
    you’d divide 9 by 16 (0.5625), round down (0), and multiply by 16 (still 0), getting
    a result of 0\. That’s the start of the list, which makes sense, because we know
    there’s room for 16 items onscreen and that 9 is less than 16\. If you wanted
    to see the group of items that includes item 22, you’d divide 22 by 16 (1.375),
    round down (1), and multiply by 16, getting a result of 16\. That’s the start
    of the next batch, because the first batch has index numbers that range from 0
    to 15.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于确定哪些物品应该进入 list_to_show。我们在 start_display 变量中存储着 in_my_pockets 中程序应该绘制的第一个物品的索引号
    ➌。// 运算符将所选物品编号除以 16，并向下取整。结果再乘以 16，得到批次中第一个物品的索引号。例如，如果选定物品编号为 9，你需要将 9 除以 16（0.5625），向下取整（0），再乘以
    16（仍然是 0），结果为 0。这是列表的起始位置，这很有道理，因为我们知道屏幕上有 16 个物品的显示空间，并且 9 小于 16。如果你想看到包含物品 22
    的物品组，你需要将 22 除以 16（1.375），向下取整（1），再乘以 16，得到结果为 16。这是下一批次的起始位置，因为第一批次的索引号范围从 0
    到 15。
- en: We create the list_to_show list using a technique called *list slicing*, which
    is simply using just a part of a list. When you give Python two list indexes with
    a colon between them, the program will cut out that part of the list. The section
    we’re using starts at the start_display index and finishes 15 items later ➍. A
    list slice leaves out the last item, so we use start_display + 16 as the end point.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一种叫做 *列表切片* 的技术来创建 list_to_show 列表，这实际上就是只使用列表的一部分。当你给 Python 两个带冒号的列表索引时，程序会从中切出那部分内容。我们使用的部分从
    start_display 索引开始，并且 15 项之后结束 ➍。列表切片会排除最后一项，所以我们使用 start_display + 16 作为结束点。
- en: We also need another calculation to work out which item to highlight as the
    selected item from the new list ➎. The item will have an index between 0 and 15,
    and we’ll store it in selected_marker. We calculate it as the remainder after
    we divide the selected item number by 16\. For example, if the selected item is
    number 18, it will be at index number 2 when the second group of items is displayed.
    (The first item is at index 0, remember.) Python has the modulo operator %, which
    you can use to get the remainder after a division.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要另一个计算来确定在新列表中高亮显示的选定物品 ➎。该物品的索引号将在 0 到 15 之间，并且我们将其存储在 selected_marker
    中。我们通过将选定物品编号除以 16 之后的余数来计算。例如，如果选定物品是编号 18，那么当第二组物品显示时，它将位于索引号 2。（记住，第一个物品位于索引号
    0。）Python 有一个取余运算符 %，你可以用它来获得除法后的余数。
- en: To highlight the selected item on the screen, we draw a box around it using
    a Rect positioned at its left edge ➑. Unlike the filled rectangles you’ve seen
    (for example ➊), this instruction draws a hollow box with a white edge.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在屏幕上高亮显示选定物品，我们使用一个矩形（Rect）围绕它绘制一个框，矩形的位置位于物品的左边缘 ➑。与你看到的填充矩形不同（例如 ➊），这个指令绘制的是一个白色边框的空心框。
- en: The description for the selected item is displayed underneath the inventory
    ➒, so players can TAB through their items to read their descriptions again.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 选定项目的描述显示在物品栏下方 ➒，这样玩家可以通过 TAB 键浏览物品，重新查看它们的描述。
- en: Finally, when the program first runs, it needs to display the inventory. This
    is scheduled with a slight delay ➓ to avoid any problems that are caused by trying
    to use a screen.blit() instruction before Pygame Zero has finished starting up.
    While clock.schedule_interval() is used to run a function regularly, clock.schedule_unique()
    is used to run a function just once, after a delay.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当程序首次运行时，需要显示物品栏。这个操作通过轻微的延迟 ➓ 来安排，以避免在 Pygame Zero 启动完成之前尝试使用 screen.blit()
    指令时出现问题。clock.schedule_interval() 用于定期运行函数，而 clock.schedule_unique() 用于在延迟后只运行一次函数。
- en: '**ADDING THE TAB KEYBOARD CONTROL**'
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加 TAB 键盘控制**'
- en: When you run the program, you can see the inventory, but you have no way to
    cycle between items yet, so the latest item you collected is always selected.
    Let’s add the keyboard control that enables you to TAB through the inventory to
    select different items.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，你可以看到物品栏，但此时还没有办法在物品之间循环选择，因此你收集的最新物品总是被选中。让我们添加一个键盘控制，使你能够通过 TAB 键在物品栏中选择不同的物品。
- en: Place the new instructions in [Listing 9-8](ch09.xhtml#ch09list8) into the game_loop()
    function, just after where you added the keyboard control to get items in [Listing
    9-6](ch09.xhtml#ch09list6). You need to indent them by at least four spaces because
    they’re inside the game_loop() function.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的指令放入 [清单 9-8](ch09.xhtml#ch09list8) 中，放在你在 [清单 9-6](ch09.xhtml#ch09list6)
    中添加获取物品的键盘控制之后。你需要将它们缩进至少四个空格，因为它们在 game_loop() 函数内部。
- en: Save this listing as *listing9-8.py*. When you run the program using pgzrun
    listing9-8.py, you’ll be able to press the TAB key to select different items in
    your inventory. (The TAB key is usually on the left side of the keyboard and might
    have a picture of two arrows on it.)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 将此清单保存为 *listing9-8.py*。当你使用 pgzrun listing9-8.py 运行程序时，你将能够按 TAB 键在物品栏中选择不同的物品。（TAB
    键通常位于键盘的左侧，可能带有两个箭头的图标。）
- en: Pick up a few items before testing the new keyboard control, or skip ahead to
    the next section to fill up your inventory with more items to test with.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试新的键盘控制之前，先捡起一些物品，或者跳到下一节用更多物品填充你的物品栏以供测试。
- en: '*listing9-8.py*'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-8.py*'
- en: --snip--
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: 'if keyboard.g:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '如果 keyboard.g:'
- en: pick_up_object()
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: pick_up_object()
- en: '➊     if keyboard.tab and len(in_my_pockets) > 0:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '➊     如果 keyboard.tab 且 len(in_my_pockets) > 0:'
- en: ➋         selected_item += 1
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: ➋         selected_item += 1
- en: '➌         if selected_item > len(in_my_pockets) - 1:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '➌         如果 selected_item > len(in_my_pockets) - 1:'
- en: selected_item = 0
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: selected_item = 0
- en: ➍         item_carrying = in_my_pockets[selected_item]
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: ➍         item_carrying = in_my_pockets[selected_item]
- en: ➎         display_inventory()
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ➎         display_inventory()
- en: '➏     if keyboard.d and item_carrying:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '➏     如果 keyboard.d 且 item_carrying:'
- en: ➐         drop_object(old_player_y, old_player_x)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: ➐         drop_object(old_player_y, old_player_x)
- en: '➑     if keyboard.space:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '➑     如果 keyboard.space:'
- en: ➒         examine_object()
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: ➒         examine_object()
- en: --snip--
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: '*Listing 9-8: Enabling the TAB key to select items in the inventory*'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-8：启用 TAB 键在物品栏中选择物品*'
- en: The first chunk of instructions runs when the player presses the TAB key, but
    only if the in_my_pockets list contains some items (so its length is more than
    0) ➊.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 第一段指令会在玩家按下 TAB 键时执行，但仅当 in_my_pockets 列表中有物品时（即其长度大于 0） ➊。
- en: To select the next item in the inventory, we increase the selected_item variable
    by 1 ➋ when the TAB key is pressed. This variable stores an index number (which
    starts at 0), so the program subtracts 1 from the length of the list to see whether
    the selected_item is now past the end of the list ➌. If it is, the selected item
    is reset to be the first item again, at 0.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择物品栏中的下一个物品，当按下 TAB 键时，我们将 selected_item 变量增加 1 ➋。该变量存储一个索引编号（从 0 开始），因此程序会从列表的长度中减去
    1，以查看 selected_item 是否已超出列表的末尾 ➌。若超出，则选中的物品将重置为第一个物品，即 0。
- en: We set the variable item_carrying as the object number of the selected item
    (which is taken from the in_my_pockets list) ➍. For example, if the in_my_pockets
    list contained the object numbers 55 and 65, and the selected_item was 0, item_carrying
    would contain 55 (the first item from in_my_pockets). Finally, the inventory is
    displayed using the display_inventory() function you created earlier ➎.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量 item_carrying 设置为所选物品的对象编号（该编号来自 in_my_pockets 列表） ➍。例如，如果 in_my_pockets
    列表包含对象编号 55 和 65，而 selected_item 为 0，则 item_carrying 将包含 55（in_my_pockets 中的第一个物品）。最后，使用你之前创建的
    display_inventory() 函数显示物品栏 ➎。
- en: While we’re working with this part of the program, we’ve added the keyboard
    controls for dropping and examining items too. When the player presses the D key
    and the item_carrying variable is not False, the drop_object() function runs ➏.
    This function is sent the player’s old *y* and *x* positions as the location for
    dropping the item ➐. Remember that the player’s current location might be inside
    a wall because of where we are in the game loop. We know that their most recent
    position before any movement is a safe place to drop something.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们处理程序的这部分时，我们还添加了键盘控制功能，用于丢弃和检查物品。当玩家按下 D 键，并且 item_carrying 变量不为 False 时，drop_object()
    函数将执行 ➏。该函数将玩家的旧 *y* 和 *x* 坐标作为丢弃物品的位置 ➐。请记住，由于我们所在的游戏循环位置，玩家当前的位置可能位于墙壁内。我们知道，玩家在任何移动之前的最新位置是一个安全的丢弃物品的地方。
- en: We also added the instructions to start the examine_object() function ➒ when
    the spacebar is pressed ➑.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了指令，当按下空格键时启动 `examine_object()` 函数 ➒。
- en: 'Don’t press D or the spacebar in the game yet: pressing them will cause the
    program to crash because we haven’t added the functions for them. We’ll add them
    shortly.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时不要在游戏中按 D 键或空格键：按下它们会导致程序崩溃，因为我们还没有添加相应的函数。我们稍后会添加它们。
- en: '**TESTING THE INVENTORY**'
  id: totrans-289
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试背包**'
- en: We want to test the program properly, but at the moment you don’t have many
    items in your inventory. To save time, we’ll tweak the code to give you a fuller
    inventory so you can test the display and the TAB control.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要正确地测试程序，但目前你的背包里没有很多物品。为了节省时间，我们将调整代码，给你一个更丰富的物品清单，以便你测试显示和 TAB 控件。
- en: 'We’ll fill the in_my_pockets list with items when the game begins. The quickest
    way to do this is to change the instruction that sets up that list in the PROPS
    section of the program, like this (but don’t do this yet!):'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在游戏开始时用物品填充 `in_my_pockets` 列表。最快的做法是修改程序中 PROPS 部分设置该列表的指令，像这样（但暂时不要这样做！）：
- en: in_my_pockets = items_player_may_carry
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: in_my_pockets = items_player_may_carry
- en: That would mean you start the game carrying all the items it’s possible to carry.
    If you do that, it might spoil your enjoyment of the game, though. You’ll be carrying
    some items you might prefer not to see until later in the game. It’ll make some
    of the puzzle solutions obvious.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你开始游戏时携带所有可能携带的物品。不过，如果你这么做，可能会破坏你对游戏的乐趣。你将携带一些你可能希望直到游戏后期才看到的物品，这会让某些谜题的解法变得显而易见。
- en: 'Instead, I recommend you create a test list like this:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我建议你创建一个类似这样的测试列表：
- en: in_my_pockets = [55, 59, 61, 64, 65, 66, 67] * 3
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: in_my_pockets = [55, 59, 61, 64, 65, 66, 67] * 3
- en: This line creates a list that contains that sequence of items three times. You’ll
    end up with an inventory that contains three of each item (which is impossible
    in the real game), but it will enable you to test that the inventory works correctly
    when it contains more than 16 items.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码创建了一个包含物品序列三次的列表。你最终会得到一个包含每种物品三份的背包（这在真实游戏中是不可能的），但它可以让你测试当背包中有超过 16 个物品时，背包是否正常工作。
- en: 'When you’ve finished testing, change the code back again. Otherwise, you might
    get unexpected results when playing the game. Here’s what that line should look
    like:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完成后，记得把代码改回原样。否则，你在玩游戏时可能会遇到意想不到的结果。以下是该行代码应该是什么样子的：
- en: in_my_pockets = [55]
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: in_my_pockets = [55]
- en: '**DROPPING OBJECTS**'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**丢弃物品**'
- en: Being able to collect stuff strewn all over the space station is great fun,
    but sometimes you’ll want to put it down, so you can either work with it or leave
    it somewhere. We’ll need two new functions for dropping items that will work a
    bit like the opposites of the functions for picking up items.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 能够收集散落在空间站各处的物品非常有趣，但有时你会想放下它们，以便操作或将它们留在某个地方。我们需要两个新函数来丢弃物品，它们的作用与捡起物品的函数相反。
- en: The drop_object() function (the opposite of the pick_up_object() function) will
    let you drop an object on the floor where the player was most recently standing.
    You added the keyboard control to start this function in [Listing 9-8](ch09.xhtml#ch09list8).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_object()` 函数（与 `pick_up_object()` 函数相反）将允许你将物品丢到玩家最近站立的位置。你已经在 [Listing
    9-8](ch09.xhtml#ch09list8) 中为启动此函数添加了键盘控制。'
- en: 'The remove_object() function is like the add_object() function in reverse:
    it takes items out of the inventory and updates it.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove_object()` 函数类似于 `add_object()` 函数的反向操作：它从背包中移除物品并更新背包。'
- en: Add the new functions, shown in [Listing 9-9](ch09.xhtml#ch09list9), to the
    end of the PROP INTERACTIONS part of the program. Save the new program as *listing9-9.py*.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 将新函数（见[Listing 9-9](ch09.xhtml#ch09list9)）添加到程序 PROP INTERACTIONS 部分的末尾。将新程序保存为
    *listing9-9.py*。
- en: When you run the program using pgzrun listing9-9.py, you’ll be able to drop
    objects. That includes the yoyo you start the game carrying and any new objects
    you pick up as you explore the space station.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `pgzrun listing9-9.py` 运行程序时，你将能够丢弃物品。这包括你开始游戏时携带的悠悠球，以及你在探索空间站时捡到的任何新物品。
- en: '*listing9-9.py*'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-9.py*'
- en: --snip--
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: description = objects[item_highlighted][2]
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: description = objects[item_highlighted][2]
- en: screen.draw.text(description, (20, 130), color="white")
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: screen.draw.text(description, (20, 130), color="white")
- en: '➊ def drop_object(old_y, old_x):'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ def drop_object(old_y, old_x):'
- en: global room_map, props
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: global room_map, props
- en: '➋     if room_map[old_y][old_x] in [0, 2, 39]: # places you can drop things'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     if room_map[old_y][old_x] in [0, 2, 39]: # 可以丢弃物品的地方'
- en: ➌         props[item_carrying][0] = current_room
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ➌         props[item_carrying][0] = current_room
- en: props[item_carrying][1] = old_y
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: props[item_carrying][1] = old_y
- en: props[item_carrying][2] = old_x
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: props[item_carrying][2] = old_x
- en: ➍         room_map[old_y][old_x] = item_carrying
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ➍         room_map[old_y][old_x] = item_carrying
- en: show_text("You have dropped " + objects[item_carrying][3], 0)
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: show_text("你已经丢弃了 " + objects[item_carrying][3], 0)
- en: sounds.drop.play()
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: sounds.drop.play()
- en: ➎         remove_object(item_carrying)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: ➎         remove_object(item_carrying)
- en: time.sleep(0.5)
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: time.sleep(0.5)
- en: '➏     else: # This only happens if there is already a prop here'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '➏     else: # 只有当此位置已经有道具时才会发生'
- en: show_text("You can't drop that there.", 0)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: show_text("你不能在这里丢弃物品。", 0)
- en: time.sleep(0.5)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: time.sleep(0.5)
- en: 'def remove_object(item): # Takes item out of inventory'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 'def remove_object(item): # 从背包中移除物品'
- en: global selected_item, in_my_pockets, item_carrying
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: global selected_item, in_my_pockets, item_carrying
- en: ➐     in_my_pockets.remove(item)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: ➐     in_my_pockets.remove(item)
- en: ➑     selected_item = selected_item - 1
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ➑     selected_item = selected_item - 1
- en: '➒     if selected_item < 0:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '➒     if selected_item < 0:'
- en: selected_item = 0
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: selected_item = 0
- en: '➓     if len(in_my_pockets) == 0: # If they''re not carrying anything'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '➓     if len(in_my_pockets) == 0: # 如果他们没有携带任何物品'
- en: 'item_carrying = False # Set item_carrying to False'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 'item_carrying = False # 设置 item_carrying 为 False'
- en: 'else: # Otherwise set it to the new selected item'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'else: # 否则设置为新选择的物品'
- en: item_carrying = in_my_pockets[selected_item]
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: item_carrying = in_my_pockets[selected_item]
- en: display_inventory()
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: display_inventory()
- en: '###############'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##   START   ##'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '##   开始   ##'
- en: '###############'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: --省略--
- en: '*Listing 9-9: Adding the functions for dropping objects*'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出 9-9：添加丢弃物品的函数*'
- en: 'The drop_object() function needs two pieces of information: the player’s old
    *y* and *x* positions. If the player moved this time through the game_loop() function,
    this will be the position they were in before they tried to move. If not, these
    numbers will be the same position as where they currently are. We know this is
    a sensible place to drop an item that won’t put the object inside a wall. The
    player’s old position goes into the variables old_y and old_x within this function
    ➊.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_object()`函数需要两条信息：玩家的旧 *y* 和 *x* 坐标。如果玩家这次通过 `game_loop()` 函数移动过，这将是他们尝试移动前的位置。如果没有，这些数字将与玩家当前的位置相同。我们知道这是一个合理的丢弃物品的地方，它不会把物品放入墙壁内。玩家的旧位置会存储到这个函数中的变量`old_y`和`old_x`里
    ➊。'
- en: The program checks whether the room map at the player’s old position is a type
    of floor. If so, it’s okay to drop a prop here, so the drop instructions are used.
    If not ➏, the player sees a message telling them they can’t drop objects there.
    This will happen, for example, if there is already a prop in that position.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 程序会检查玩家旧位置的房间地图是否是地板类型。如果是，那么可以在这里丢弃道具，因此使用丢弃指令。如果不是 ➏，玩家会看到一条信息，告诉他们不能在此丢弃物品。例如，如果该位置已经有一个道具，这种情况就会发生。
- en: If the player can drop the item, we need to update the props dictionary. The
    variable item_carrying contains the number of the object the player is carrying.
    Its entry in the props dictionary is a list. The first list item (index 0) is
    the room the prop is in, the second item (index 1) is its *y* position, and the
    third item is its *x* position (index 2). These values are set to be the current
    room and the player’s old position ➌.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家能够丢弃物品，我们需要更新道具字典。变量`item_carrying`包含玩家正在携带物品的编号。它在道具字典中的条目是一个列表。列表的第一个元素（索引
    0）是物品所在的房间，第二个元素（索引 1）是它的 *y* 坐标，第三个元素（索引 2）是它的 *x* 坐标。这些值被设置为当前房间和玩家的旧位置 ➌。
- en: The room map for the current room also needs to be updated, so the room contains
    the dropped item ➍. The game will show a message and play a sound to tell the
    player that they’ve successfully dropped something and then the item is removed
    from the inventory using the remove_object() function ➎.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当前房间的房间地图也需要更新，因此房间中会包含丢弃的物品 ➍。游戏会显示一条信息并播放声音，告诉玩家他们成功丢弃了某物，随后物品会通过`remove_object()`函数
    ➎从背包中移除。
- en: The remove_object() function takes an item from the player’s inventory and updates
    the selected_item variable. The object number sent to this function is stored
    in the variable item, and then remove() ➐ removes it from the in_my_pockets list.
    Now that the selected item has been removed, the number of the selected item is
    reduced by 1 ➑, so the previous item in the list is now selected. If this means
    the selected item is now less than 0, the selected item is reset to 0 ➒. This
    happens if the player drops the first item from their inventory.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: remove_object() 函数从玩家的背包中取出一个物品，并更新 selected_item 变量。传递给该函数的物品编号存储在变量 item 中，然后
    remove() ➐ 将其从 in_my_pockets 列表中移除。现在，已选物品已被移除，所选物品的数量减少了 1 ➑，因此列表中的上一个物品现在被选中。如果这意味着所选物品的数量小于
    0，则所选物品将重置为 0 ➒。如果玩家从背包中丢弃第一个物品，就会发生这种情况。
- en: If the player’s hands are now empty, the item_carrying variable is set to False
    ➓. Otherwise, it’s set to the number of their selected item. Finally, display_inventory()
    redraws the inventory to show the item has been removed.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家的手现在是空的，item_carrying 变量将被设置为 False ➓。否则，它将设置为玩家选择的物品编号。最后，display_inventory()
    会重新绘制背包，显示物品已被移除。
- en: '**TRAINING MISSION #1**'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: It’s time to do a safety drill. Can you pick up the air canister and deliver
    it to the sick bay? Drop it near the middle bed. To test whether the program is
    working correctly, leave the room after your delivery and come back to make sure
    it’s still there.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行一次安全演练了。你能拿起空气罐并将其送到医务室吗？把它放在中间的床旁边。为了测试程序是否正常工作，在你交付后离开房间并重新回来，确认物品是否还在那儿。
- en: '**EXAMINING OBJECTS**'
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检查物品**'
- en: As you explore the space station, you’ll want to study objects closely to see
    how they might help with your mission. The *examine* instruction shows the long
    description for an object and works for scenery and props. By examining an object,
    you can also sometimes find other objects. For example, when you examine a cupboard,
    you might find something inside it.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在你探索空间站时，你会想要仔细研究物体，看它们是否能帮助你的任务。*examine* 指令会显示物体的详细描述，并适用于场景和道具。通过检查物体，你有时还会发现其他物品。例如，当你检查一个橱柜时，可能会发现里面有东西。
- en: Pressing the spacebar triggers the examine_object() function. (You added the
    keyboard control in [Listing 9-8](ch09.xhtml#ch09list8).) Place the new function,
    shown in [Listing 9-10](ch09.xhtml#ch09list10), after the remove_object() function
    you added in [Listing 9-9](ch09.xhtml#ch09list9).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 按空格键触发 examine_object() 函数。（你在 [Listing 9-8](ch09.xhtml#ch09list8) 中添加了键盘控制。）将新函数（如
    [Listing 9-10](ch09.xhtml#ch09list10) 中所示）放在你在 [Listing 9-9](ch09.xhtml#ch09list9)
    中添加的 remove_object() 函数后面。
- en: Save your program as *listing9-10.py*. Run the program using pgzrun listing9-10.py.
    You can now examine objects by walking up to or onto them and pressing the spacebar.
    For example, if you press the up arrow key and the spacebar when you’re against
    the wall at the back of the room, you can examine the wall.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为 *listing9-10.py*。使用 pgzrun listing9-10.py 运行程序。现在，你可以通过走到物体旁边并按空格键来查看物体。例如，如果你在房间的墙壁前按上箭头键和空格键，你可以检查墙壁。
- en: '*listing9-10.py*'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-10.py*'
- en: --snip--
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: item_carrying = in_my_pockets[selected_item]
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: item_carrying = in_my_pockets[selected_item]
- en: display_inventory()
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: display_inventory()
- en: 'def examine_object():'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 'def examine_object():'
- en: ➊     item_player_is_on = get_item_under_player()
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ➊     item_player_is_on = get_item_under_player()
- en: ➋     left_tile_of_item = find_object_start_x()
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ➋     left_tile_of_item = find_object_start_x()
- en: '➌     if item_player_is_on in [0, 2]: # don''t describe the floor'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '➌     if item_player_is_on in [0, 2]: # 不描述地面'
- en: return
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '➍     description = "You see: " + objects[item_player_is_on][2]'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '➍     description = "你看到的是: " + objects[item_player_is_on][2]'
- en: '➎     for prop_number, details in props.items():'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '➎     for prop_number, details in props.items():'
- en: '# props = object number: [room number, y, x]'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '# props = 物品编号: [房间编号, y, x]'
- en: '➏         if details[0] == current_room: # if prop is in the room'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '➏         if details[0] == current_room: # 如果物体在当前房间'
- en: '# If prop is hidden (= at player''s location but not on map)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果物品隐藏（= 在玩家位置但不在地图上）'
- en: if (details[1] == player_y
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: if (details[1] == player_y
- en: and details[2] == left_tile_of_item
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: and details[2] == left_tile_of_item
- en: 'and room_map[details[1]][details[2]] != prop_number):'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 'and room_map[details[1]][details[2]] != prop_number):'
- en: ➐                 add_object(prop_number)
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: ➐                 add_object(prop_number)
- en: ➑                 description = "You found " + objects[prop_number][3]
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: ➑                 description = "你找到了 " + objects[prop_number][3]
- en: sounds.combine.play()
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: sounds.combine.play()
- en: ➒     show_text(description, 0)
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: ➒     show_text(description, 0)
- en: ➓     time.sleep(0.5)
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: ➓     time.sleep(0.5)
- en: '###############'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##   START   ##'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '##   开始   ##'
- en: '###############'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: --snip--
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing 9-10: Adding the code to examine objects*'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-10：添加检查物品的代码*'
- en: '[Listing 9-10](ch09.xhtml#ch09list10) builds on the work you’ve already done
    adding functions in this chapter. We start by getting the number of the object
    the player wants to examine and storing it in item_player_is_on ➊. At this point
    in the game_loop() function, the player’s position will be on or possibly inside
    the item they want to examine, if it’s a piece of scenery. We put the starting
    *x* position of the item into the variable left_tile_of_item ➋. If there isn’t
    an object to examine at the player’s location, the function finishes without taking
    any further action ➌. Ignoring an empty space feels more natural than describing
    the floor, especially if you make a mistake with the controls. If there is an
    item at the player’s location, the description of the object goes into the description
    variable, taken from the long description from the objects dictionary ➍.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-10](ch09.xhtml#ch09list10) 基于你在本章中已经完成的函数添加工作。我们从获取玩家希望检查的物品编号开始，并将其存储在
    item_player_is_on ➊ 中。在此时的 game_loop() 函数中，玩家的位置将位于他们想要检查的物品上，或者如果是风景物品，可能会在物品内部。我们将物品的起始
    *x* 坐标存入变量 left_tile_of_item ➋。如果玩家所在位置没有物品可检查，函数将结束而不进行任何进一步的操作 ➌。忽略空白位置比描述地板要自然，特别是当你控制失误时。如果玩家位置上有物品，物品的描述将存入描述变量，这些描述来自物品字典中的长描述
    ➍。'
- en: The program then checks whether there’s an item hidden *inside* the item the
    player is examining. We use a loop to go through all the items in the props dictionary
    ➎. If an item is in the current room at the player’s position, but the room map
    at that position doesn’t contain the prop number ➏, it means the item is hidden.
    We therefore add the hidden object to the player’s inventory ➐, and give the player
    a message that tells them they found something. This message uses the object’s
    short description to tell them what they’ve found ➑.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接着检查玩家正在检查的物品是否有物品隐藏在其*内部*。我们使用循环遍历 props 字典中的所有物品 ➎。如果某个物品位于玩家位置所在的房间内，但该位置的房间地图没有包含这个道具编号
    ➏，这意味着物品被隐藏了。因此，我们将隐藏的物品添加到玩家的背包中 ➐，并给玩家一个消息，告诉他们发现了某物。此消息使用物品的简短描述来告知他们找到了什么
    ➑。
- en: At the end of the function, the description is shown ➒, and we’ve put a short
    pause here to stop it being immediately overwritten if the player holds the key
    down ➓.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的结尾，描述会显示 ➒，我们在这里添加了一个短暂的暂停，以防止玩家按住键不放时立即覆盖描述 ➓。
- en: If you want to hide props inside scenery in your own game design, make sure
    you give players a strong hint about where you’ve hidden something. In *Escape*,
    you might find objects in cupboards. If you see something unusual, it’s usually
    a good idea to examine it to learn about it, and you might find something else
    of interest. You won’t need to search every chair, bed, and wall panel though.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在自己的游戏设计中将道具隐藏在风景中，请确保给玩家提供强烈的提示，告诉他们你把某些东西藏在哪儿。在 *Escape* 中，你可能会在橱柜里找到物品。如果你看到某些异常的东西，通常检查它是个好主意，你可能会发现一些其他有趣的东西。不过，你不需要搜索每一把椅子、床和墙面板。
- en: If you decide to hide props in wide scenery (such as a bed), make sure you hide
    your prop in the *x* position of the scenery item, not in a space that would be
    covered by 255 in the room map.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定在宽广的风景物品中隐藏道具（比如床），请确保将道具隐藏在风景物品的 *x* 坐标位置，而不是隐藏在房间地图中由 255 覆盖的区域。
- en: '**TRAINING MISSION #2**'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: Can you find the MP3 player? It’s in the sleeping quarters that belong to the
    person you named FRIEND2 in [Chapter 4](ch04.xhtml#ch04). If you’re using my code,
    it’s in Leo’s sleeping quarters.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 你能找到 MP3 播放器吗？它在你在[第 4 章](ch04.xhtml#ch04)中命名为 FRIEND2 的人物的寝室里。如果你使用的是我的代码，它位于
    Leo 的寝室里。
- en: Now that all the props are unpacked, you can relax with your yoyo and see what
    else you can find. In the next chapter, you’ll add a new section to the program
    that enables you to use the props you come across.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有道具都已经解包完毕，你可以放松一下，玩玩悠悠球，看看还能找到什么。在下一章中，你将向程序中添加一个新部分，让你能够使用你遇到的道具。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框以确认你已经掌握了本章的关键内容。
- en: '![Images](../images/box.jpg)  Information about the position of props is stored
    in the props dictionary.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](../images/box.jpg)  关于道具位置的信息存储在 props 字典中。'
- en: '![Images](../images/box.jpg)  The prop number is the dictionary key, and each
    entry contains a list with the room number and *y* and *x* positions of the prop.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 道具编号是字典的键，每个条目包含一个列表，其中有房间编号以及道具的*y*和*x*位置。'
- en: '![Images](../images/box.jpg)  To receive a number from a function, set up a
    variable to store that information when you call the function. For example, variable_name
    = function_name().'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 要从一个函数中接收一个数字，在调用函数时设置一个变量来存储该信息。例如，variable_name
    = function_name()。'
- en: '![Images](../images/box.jpg)  To send a number (or anything else) back from
    a function, use the return instruction.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 要从函数中返回一个数字（或其他任何东西），使用返回语句。'
- en: '![Images](../images/box.jpg)  The // operator is used for division and rounds
    the result down, removing any decimal in the answer.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) // 运算符用于除法并将结果向下取整，去除答案中的小数部分。'
- en: '![Images](../images/box.jpg)  The % operator gives you the remainder after
    dividing two numbers: 5 % 2 is 1.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) % 运算符在两个数字相除后返回余数：5 % 2 等于 1。'
- en: '![Images](../images/box.jpg)  You can change the value of variables and lists
    to help test the program, for example, creating a full inventory at the start.
    Remember to change them back afterward!'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 你可以改变变量和列表的值来帮助测试程序，例如，在开始时创建一个完整的库存。记得之后要把它们改回来！'
- en: '![Images](../images/box.jpg)  You can hide props inside scenery, but make sure
    they’re in the position where the scenery starts, and give players a strong hint
    about where it’s worth searching.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 你可以把道具隐藏在景物中，但确保它们位于景物开始的位置，并给玩家一个强烈的提示，告诉他们值得去搜索的地方。'
- en: '![image](../images/f0170-01.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0170-01.jpg)'
