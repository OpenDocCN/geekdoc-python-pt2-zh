- en: '**9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9'
- en: UNPACKING YOUR PERSONAL ITEMS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 拆包你的个人物品**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common01.jpg)'
- en: Now that the space station is operational, it’s time to unpack your personal
    items and the various tools and pieces of equipment you’ll need as you carry out
    your work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在空间站已经投入使用，是时候开始拆包你的个人物品以及你在执行任务时需要的各种工具和设备了。
- en: In this chapter, you’ll build the code for objects that can move between rooms
    (*props*). When you play the game, you’ll be able to discover new items, pick
    them up, move them around, and use them to solve puzzles.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将编写代码来处理可以在房间之间移动的物体（*道具*）。当你玩游戏时，你可以发现新物品，捡起它们，移动它们，并用它们解决谜题。
- en: '**ADDING THE PROPS INFORMATION**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加道具信息**'
- en: You’ve already added some information about props in [Chapter 5](ch05.xhtml#ch05)
    when you added the image filenames and descriptions to the `objects` dictionary.
    The `objects` dictionary contains information about *what* an item is. In this
    chapter, we’ll add information to tell the game *where* the props go.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第5章](ch05.xhtml#ch05)中已经添加了一些关于道具的信息，当时你将图片文件名和描述添加到 `objects` 字典中。`objects`
    字典包含关于物品的*是什么*的信息。在这一章中，我们将添加信息，告诉游戏*道具放在哪里*。
- en: 'You might be wondering why we’re handling the props separately from the scenery.
    We do this because their information is used in different ways: the `scenery`
    dictionary stores information using the room as the key. This makes sense, because
    the program needs to get information about all the scenery in a room at the same
    time. After the scenery information is added to the room map, the `scenery` dictionary
    is not needed again until the player enters a new room.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我们要将道具和景物分开处理。我们这样做是因为它们的信息以不同的方式使用：`scenery` 字典使用房间作为键来存储信息。这是有道理的，因为程序需要一次性获取房间内所有景物的信息。在将景物信息添加到房间地图之后，`scenery`
    字典不再需要，直到玩家进入新的房间。
- en: By contrast, props move around, so the information for a prop might be needed
    at any time in any room. If that information is buried in a list of scenery items,
    it’s harder to find and change.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，道具是会移动的，所以在任何时候，任何房间中可能都需要用到道具的信息。如果这些信息埋藏在一长串景物项中，它就更难以查找和修改。
- en: 'We’ll create a new dictionary called `props` to store information about props.
    We’ll use the object number as a key, and each entry will be a list that contains
    the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的字典，叫做 `props`，来存储关于道具的信息。我们将使用物品编号作为键，每一项将是一个包含以下内容的列表：
- en: The number of the room the prop is in
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道具所在的房间编号
- en: The *y* position of the prop in the room (in tiles)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道具在房间中的 *y* 位置（以瓦片为单位）
- en: The *x* position of the prop in the room (in tiles)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道具在房间中的 *x* 位置（以瓦片为单位）
- en: 'For example, here’s the entry for the hammer, which is object 65:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是锤子的条目，它是物品65：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s in room 50, at *y* position 1 and *x* position 7.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它在房间50，*y* 位置1和 *x* 位置7。
- en: Objects that are not in the game world or that are being carried by the player
    will have a room number of 0, which is not a real location in the game. Some objects
    aren’t in the game world until they’ve been created or after they’ve been destroyed,
    for example. These would be stored in room 0.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不在游戏世界中或由玩家携带的物品的房间编号为0，这不是游戏中的真实位置。例如，一些物品在它们被创建之前，或者在被销毁之后才会出现在游戏世界中。这些物品会存储在房间0。
- en: '**TIP**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The `props` and `objects` dictionaries use the same keys. If you want to know
    what item 65 is in the `props` dictionary, read its details in the `objects` dictionary.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`props` 和 `objects` 字典使用相同的键。如果你想知道 `props` 字典中物品65是什么，可以在 `objects` 字典中查看它的详细信息。'
- en: '[Listing 9-1](ch09.xhtml#ch09list1) shows the code for adding the props information
    to the game. Open *listing8-10.py*, your final program from the previous chapter.
    Add the new `PROPS` section after the `show_text()` function in the `DISPLAY`
    section and before the `START` section. Only add the new lines, and save the new
    program as *listing9-1.py*. If you want to avoid typing the data, you can copy
    and paste it from the *data-chapter9.py* file.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单9-1](ch09.xhtml#ch09list1)展示了将道具信息添加到游戏中的代码。打开 *listing8-10.py*，这是你在上一章的最终程序。将新的
    `PROPS` 部分添加到 `show_text()` 函数之后，`DISPLAY` 部分和 `START` 部分之前。只添加新行，并将新程序保存为 *listing9-1.py*。如果你不想手动输入数据，可以从
    *data-chapter9.py* 文件中复制并粘贴数据。'
- en: You can run the program with pgzrun listing9-1.py. It won’t do anything new
    yet, but you can check whether there are any error messages in the command line
    window.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `pgzrun listing9-1.py` 运行程序。它目前还不会做任何新操作，但你可以检查命令行窗口中是否有任何错误消息。
- en: '*listing9-1.py*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-1.py*'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 9-1: Adding the props information to* Escape'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-1：向Escape中添加道具信息*'
- en: We start the new `PROPS` section by creating the dictionary to store the information
    about the props ➊. This dictionary lists the position locations for all the props,
    starting with some doors (20 to 24) and including a rescue ship (40) and the carryable
    items starting at 53.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个字典来存储道具信息，开始新的`PROPS`部分➊。这个字典列出了所有道具的位置，从一些门（20到24号）开始，包括一艘救援船（40号）和从53号开始的可携带物品。
- en: 'There is just one oddity to draw your attention to. We count doors as props
    rather than scenery, because they’re not always there: when they’re open, they’re
    removed from the room. Most doors stay open when they’re opened until the game
    ends. However, the door that connects rooms 27 and 32 can also shut, meaning players
    can see it from both sides. As a result, we need two props to represent this door
    ➋, showing it in the top of room 27 and the bottom of room 32\. These two doors
    are object numbers 25 and 26.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个小问题需要注意。我们将门算作道具而不是场景，因为门并非总是存在：当它们打开时，会从房间中移除。大多数门在打开时会一直保持打开状态，直到游戏结束。然而，连接27号房间和32号房间的门也可以关闭，这意味着玩家可以从两边看到它。因此，我们需要两个道具来表示这扇门➋，分别显示在27号房间的顶部和32号房间的底部。这两个门的物体编号是25和26。
- en: Prop 71 is the Poodle lander, which crash-landed on the planet surface before
    the game began. We use the `LANDER_Y` and `LANDER_X` variables from the `VARIABLES`
    part of the program ➌ to position the lander, because its location will change
    with each new game. The Poodle landed with such force that it might have become
    covered with Martian soil. It lives in room 0 until the player can dig it up.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 道具71是贵宾犬着陆器，它在游戏开始前已迫降在行星表面。我们使用程序中`VARIABLES`部分的`LANDER_Y`和`LANDER_X`变量➌来定位着陆器，因为它的位置在每局游戏中都会变化。贵宾犬着陆时撞击力极大，它可能已经被火星土壤覆盖。它会一直待在0号房间，直到玩家能够将它挖出来。
- en: As with the scenery information (see [Chapter 6](ch06.xhtml#ch06)), I’ve used
    a checksum here to help you spot whether you made an error entering the data.
    It might not be possible to play the game all the way to the end if a mistake
    is made here. The only prop missing from the checksum calculation is number 71,
    because its position uses different random numbers in each game ➍.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与场景信息类似（见[第六章](ch06.xhtml#ch06)），我在这里使用了校验和来帮助你检查输入数据时是否有错误。如果这里出错，可能无法将游戏进行到底。唯一没有参与校验和计算的是编号71的道具，因为它的位置在每个游戏中使用不同的随机数➍。
- en: 'If you want to change the props data, the easiest thing to do is to comment
    out the two checksum instructions ➏ like this to turn them off:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更改道具数据，最简单的方法是像这样注释掉两个校验和指令➏，以关闭它们：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The program shows the checksum total and number of data items in the command
    line window ➎, so if you change the props data, you can use this information to
    update the numbers in the two `assert` instructions so they are correct for your
    customized data. If you do this, you can continue using these lines rather than
    commenting them out.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 程序会在命令行窗口显示校验和总数和数据项数量➎，因此如果你更改了道具数据，可以利用这些信息来更新两个`assert`指令中的数字，以确保它们与你自定义的数据一致。如果你这么做，可以继续使用这些行，而不是将其注释掉。
- en: The program also sets up two new variables and a list we’ll need later in the
    chapter. The `in_my_pockets` ➐ list stores all the items the player has picked
    up, also known as their *inventory*. One of these items is always selected, so
    the player is ready to do something with it. The `selected_item` variable stores
    its index number in the `in_my_pockets` list. The `item_carrying` variable stores
    the object number of the item the player has selected. You can think of the `item_carrying`
    variable as being the number of the object in their hands. I’ll tell you more
    about these variables later in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 程序还设置了两个新的变量和一个稍后在本章中需要的列表。`in_my_pockets` ➐ 列表存储玩家拾取的所有物品，也就是他们的*库存*。这些物品中总有一个被选中，以便玩家准备对其进行操作。`selected_item`变量存储该物品在`in_my_pockets`列表中的索引号。`item_carrying`变量存储玩家选中的物品的物体编号。你可以将`item_carrying`变量理解为玩家手中的物体编号。稍后我会在本章中详细讲解这些变量。
- en: '**ADDING PROPS TO THE ROOM MAP**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**向房间地图添加道具**'
- en: We’ve added the information about where the props are located, so now let’s
    display the props. We’ll make it so that when props are located in the current
    room, they’re put into the `room_map` list as the player enters the room. Then
    the `draw()` function uses that list to draw the room.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了有关道具位置的信息，接下来让我们显示道具。当道具位于当前房间时，它们会在玩家进入房间时被放入`room_map`列表中。然后，`draw()`函数使用该列表来绘制房间。
- en: We’ll place the instructions to add the props to the room map into the `MAKE
    MAP` part of the program, inside the `generate_map()` function. We’ll simply add
    these instructions after the instructions you added in [Chapter 8](ch08.xhtml#ch08)
    for working out the `top_left_x` and `top_left_y` variables, just above the start
    of the `GAME LOOP` section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把添加道具到房间地图的指令放入程序的`MAKE MAP`部分，位于`generate_map()`函数内。我们只需要将这些指令添加在你在[第8章](ch08.xhtml#ch08)中为计算`top_left_x`和`top_left_y`变量所添加的指令之后，就在`GAME
    LOOP`部分的开始之前。
- en: Because the new instructions are all part of the `generate_map()` function,
    you need to indent them by at least four spaces.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因为新指令都是`generate_map()`函数的一部分，所以你需要将它们缩进至少四个空格。
- en: Add the new instructions shown in [Listing 9-2](ch09.xhtml#ch09list2) to your
    program, and save it as *listing9-2.py*. Run the program with pgzrun listing9-2.py.
    You should see that new objects have appeared in some of the rooms, as shown in
    [Figure 9-1](ch09.xhtml#ch09fig1).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将[列表9-2](ch09.xhtml#ch09list2)中的新指令添加到程序中，并将其保存为*listing9-2.py*。运行程序时使用命令`pgzrun
    listing9-2.py`。你应该能看到一些新的物体出现在某些房间中，如[图9-1](ch09.xhtml#ch09fig1)所示。
- en: '![image](../images/fig9-1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9-1.jpg)'
- en: '*Figure 9-1: That door wasn’t there a minute ago! That air canister might come
    in handy, though.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-1：刚才那扇门好像不见了！不过那个气瓶可能会派上用场。*'
- en: '*listing9-2.py*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-2.py*'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 9-2: Adding the props to the room map for the current room*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表9-2：将道具添加到当前房间的房间地图中*'
- en: In the new code, we start by setting up a loop to go through the items in the
    `props` dictionary ➊. For each item, the dictionary key goes into the variable
    `prop_number`, and the list with the position information goes into the list `prop_info`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，我们首先设置了一个循环，遍历`props`字典中的条目➊。对于每个条目，字典的键存入变量`prop_number`，而包含位置信息的列表存入`prop_info`列表中。
- en: To make the program easier to read, I’ve set up some variables to store the
    information from the `prop_info` list ➋. The program extracts the information
    for the room number (and puts it into `prop_room`) and the *y* and *x* positions
    (which go into the `prop_y` and `prop_x` variables).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让程序更易于阅读，我设置了一些变量来存储`prop_info`列表中的信息➋。程序提取房间编号的信息（并将其存入`prop_room`）以及*y*和*x*位置（分别存入`prop_y`和`prop_x`变量）。
- en: We add a check to see whether the `prop_room` matches the room the player is
    in ➌ and whether the prop is sitting on the floor ➍. The floor check puts the
    three different floor types in a list (0 for inside, 2 for soil, and 39 for the
    pressure pad in room 26). The program checks the prop’s position to see what’s
    in that location in the room map. If it’s one of these floor types, it means the
    object is sitting on the floor in full view. If not, the prop is hidden inside
    an item of scenery and shouldn’t be visible yet. For example, if a cabinet is
    in the prop’s location instead of the floor, the prop won’t be shown onscreen.
    The player can still find the prop by examining the cabinet at that location,
    though.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个检查，查看`prop_room`是否与玩家所在的房间匹配➌，以及道具是否放置在地板上➍。地板检查会将三种不同的地面类型放入一个列表中（0表示室内，2表示土壤，39表示房间26中的压力垫）。程序检查道具的位置，以查看该位置在房间地图中的内容。如果是这些地面类型之一，意味着物体正坐落在地板上，完全可见。如果不是，那么道具被隐藏在景物中，暂时不可见。例如，如果道具位置上有一个柜子而不是地板，那么道具将不会显示在屏幕上。不过，玩家仍然可以通过检查该位置的柜子来找到道具。
- en: If the prop is in the room and on the floor, the room map is updated with the
    prop number ➎.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果道具在房间内并且在地板上，房间地图将更新道具编号➎。
- en: Some props, like doors, are wider than one tile. So we add the number 255 to
    any tiles that the prop covers other than the first one ➐. This is similar to
    the code we used to mark wide scenery earlier in the `generate_map()` function
    (see [Listing 6-4](ch06.xhtml#ch06list4) on [page 106](ch06.xhtml#page_106)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有些道具，比如门，比一个方块宽。因此，我们会将数字255添加到道具覆盖的除第一个方块以外的所有方块上➐。这与我们在`generate_map()`函数中标记宽大景物的代码类似（见[列表6-4](ch06.xhtml#ch06list4)在[第106页](ch06.xhtml#page_106)）。
- en: '**GETTING INFORMATION FROM A FUNCTION: ROLLING DICE**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**从函数获取信息：掷骰子**'
- en: In [Chapter 8](ch08.xhtml#ch08), you learned how to send information (or *arguments*)
    to a function. Let’s look more closely at how to get information *back* from a
    function. We’ll use this skill to create a function that tells us what object
    the player is standing on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.xhtml#ch08)中，你学习了如何将信息（或*参数*）传递给函数。让我们更仔细地看看如何从函数中获取信息*返回*。我们将使用这个技巧来创建一个函数，告诉我们玩家站在什么物体上。
- en: '[Listing 9-3](ch09.xhtml#ch09list3) shows a simple program that sends a number
    back from a function and puts it into a variable. This isn’t part of the *Escape*
    game, so create a new file by clicking **File** ▸ **New** first.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9-3](ch09.xhtml#ch09list3)展示了一个简单的程序，它从函数返回一个数字并将其放入一个变量中。这不是*Escape*游戏的一部分，所以请首先通过点击**文件**
    ▸ **新建**来创建一个新文件。'
- en: Save the program as *listing9-3.py*. This program doesn’t use Pygame Zero, so
    you can run it using **Run** ▸ **Run Module** in the script window. The program
    simulates a 10-sided die.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing9-3.py*。这个程序不使用Pygame Zero，因此你可以通过点击**运行** ▸ **运行模块**来在脚本窗口中运行它。该程序模拟了一个10面骰子。
- en: '*listing9-3.py*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-3.py*'
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 9-3: A 10-sided die simulator shows how to send a number back from
    a function.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 9-3：一个10面骰子模拟器演示了如何从函数返回一个数字。*'
- en: This program starts by telling Python to use the `random` module ➊, which gives
    Python new functions for making random choices. We then create a new function
    called `get_number()` ➋, which generates a random number between 1 and 10 ➌ and
    puts the result into a variable called `dice_number`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序首先告诉Python使用`random`模块 ➊，这个模块为Python提供了用于随机选择的新函数。然后我们创建了一个名为`get_number()`的新函数
    ➋，它生成一个1到10之间的随机数 ➌，并将结果放入名为`dice_number`的变量中。
- en: 'Normally, when you start a function (known as *calling* a function in Python
    jargon), you use its name, like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你调用一个函数时（在Python术语中称为*调用*函数），你会使用其名称，像这样：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This time, we not only start the function, but tell Python to put the result
    from the function into a variable called `random_number` ➎. When the function
    sends its result back using the `return` command ➍, the result goes into the `random_number`
    variable. The main part of the program can then print out its value ➏.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们不仅调用了函数，而且告诉Python将函数的结果放入一个名为`random_number`的变量中 ➎。当函数通过`return`命令 ➍返回结果时，结果就会进入`random_number`变量。程序的主部分随后可以打印出它的值
    ➏。
- en: This code shows that the way to get information from a function is to set up
    a variable to store the information when the function is started ➎ and to use
    the `return` instruction to send that information back when the function finishes
    ➍. You can send strings and lists back too, not just numbers. Where possible,
    this is the best way to enable other parts of the program to use information from
    a function. This technique enables the main part of the program to get information
    from a function’s local variable (in this case `dice_number`), which would usually
    only be visible inside that function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了从函数中获取信息的方法：当函数开始时，设置一个变量来存储信息 ➎，并在函数结束时通过`return`指令将信息返回 ➍。你也可以返回字符串和列表，而不仅仅是数字。尽可能地，这种方式是使程序的其他部分能够使用来自函数的信息的最佳方法。这种技巧使得程序的主部分能够从函数的局部变量（在这个例子中是`dice_number`）中获取信息，而这个变量通常只在函数内部可见。
- en: You won’t need this program again, so you can close it when you’ve finished
    experimenting with it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会再需要这个程序了，所以在你完成实验后，可以将它关闭。
- en: '**FINDING AN OBJECT NUMBER FROM THE ROOM MAP**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从房间地图中查找物体编号**'
- en: Shortly, we’ll add the code to enable you to pick up objects in the space station.
    First we need a way to find out which object is being picked up.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将添加代码，允许你在空间站中捡起物体。首先，我们需要一种方法来找出哪个物体被捡起了。
- en: When the player interacts with scenery or props, we need to find the number
    of the object they’re using. Normally, this is simple. If the room map shows that
    the object number of the prop at the player’s location is 65, that’s a hammer.
    The program can show a description of the hammer, and let the player pick it up
    or use it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家与景物或道具互动时，我们需要找到他们正在使用的物体的编号。通常，这很简单。如果房间地图显示玩家所在位置的道具编号是65，那就是一把锤子。程序可以显示锤子的描述，并允许玩家捡起或使用它。
- en: Identifying the object number gets tricky with wide objects that span multiple
    tiles. We use the number 255 to mark tiles covered by a wide object, but that
    number doesn’t correspond to a prop. The program needs to work out what the real
    object number is by moving left in the room map until it finds a number that isn’t
    255.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 确定物体编号对于跨越多个瓷砖的宽大物体来说比较棘手。我们使用数字255来标记被宽物体覆盖的瓷砖，但该数字并不对应于道具。程序需要通过在房间地图中向左移动，直到找到一个不为255的数字，从而计算出真实的物体编号。
- en: For example, if the player examines the rightmost third of a door, the program
    would see that this position contains 255, so it would check the position to the
    left. That position also contains 255, so the program would check farther left.
    If that tile contains a number other than 255, the program knows it’s found the
    real object number, which might be 20 (one of the doors), for example. Using the
    object number 20, the program can then let the player examine or open the door.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果玩家检查门的最右侧第三部分，程序会看到该位置包含255，因此会检查左边的位置。该位置也包含255，所以程序会继续检查更左边的位置。如果该位置包含其他数字而不是255，程序就知道它找到了真实的物体编号，举例来说，可能是20（其中一个门）。使用物体编号20，程序随后可以让玩家检查或打开这扇门。
- en: We’ll create two functions that will work out the object number, shown in [Listing
    9-4](ch09.xhtml#ch09list4). You need to add these to [Listing 9-2](ch09.xhtml#ch09list2),
    so click **File** ▸ **Open** to open *listing9-2.py* again if necessary. We’ll
    start a new section of the program called `PROP INTERACTIONS`. Put this after
    the `PROPS` section. This new section will be where we put the code for picking
    up and dropping props.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个函数来计算物体编号，如[Listing 9-4](ch09.xhtml#ch09list4)所示。你需要将这些添加到[Listing 9-2](ch09.xhtml#ch09list2)，因此如果需要，请点击**文件**
    ▸ **打开**再次打开*listing9-2.py*。我们将开始一个新的程序部分，称为`PROP INTERACTIONS`。将其放在`PROPS`部分后面。这个新部分将用于编写拾取和丢弃道具的代码。
- en: Save the updated program as *listing9-4.py*. It won’t do anything new yet, but
    you can run it using pgzrun listing9-4.py to check that you haven’t added any
    mistakes. Look in the command line window for any error messages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新后的程序保存为*listing9-4.py*。它现在还不会做任何新功能，但你可以使用pgzrun listing9-4.py运行它，检查是否没有添加错误。在命令行窗口中查找任何错误信息。
- en: '*listing9-4.py*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-4.py*'
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 9-4: Finding the real object number*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-4：查找真实物体编号*'
- en: 'Before we get into how this code works, I’ll explain how the game loop lets
    players interact with props and scenery:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讲解这个代码如何工作的之前，我将解释一下游戏循环是如何让玩家与道具和场景进行交互的：
- en: When the player presses a movement key, the program changes the player’s position
    (even if that puts them somewhere impossible, like inside a wall).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当玩家按下移动键时，程序会改变玩家的位置（即使这会将他们移到不可能的位置，比如墙内）。
- en: The program carries out any actions the player requires using the object at
    the player’s location. This means the player and the object are in the same position
    in the room at this time.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序通过使用玩家当前位置的物体来执行玩家要求的任何操作。这意味着玩家和物体此时位于房间中的同一位置。
- en: If the player is standing somewhere they’re not allowed to be (such as inside
    a wall), the program moves them back to where they were.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果玩家站在一个不允许站的位置（例如在墙内），程序会将他们移回原来的位置。
- en: The entire process happens so fast you never see the player go inside the wall
    or other piece of scenery. This way, the player can use a movement key plus an
    action key to examine or use the scenery. For example, you can walk into a wall
    and press the spacebar to examine the wall and see a description of it. This process
    also works with an object the player is standing on, such as a prop on the floor.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程发生得非常快，你甚至看不到玩家进入墙壁或其他场景物体的过程。这样，玩家可以通过按下移动键和动作键来检查或使用场景物体。例如，你可以走到墙壁前，按下空格键来检查墙壁，并查看它的描述。这个过程也适用于玩家站立的物体，比如地上的道具。
- en: The first new function we added in [Listing 9-4](ch09.xhtml#ch09list4) is `find_object_start_x()`
    ➊. This function finds the start position of whatever object is at the player’s
    position, going left to find the real object number if the location contains 255.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[Listing 9-4](ch09.xhtml#ch09list4)中添加的第一个新函数是`find_object_start_x()` ➊。这个函数通过向左移动来找到玩家当前位置的物体的起始位置，如果位置包含255，则继续向左查找直到找到真实的物体编号。
- en: To do this, the function sets the variable `checker_x` to be the same as the
    player’s *x* position ➋. We use a loop that keeps going for as long as the room
    map contains 255 at the *x* position of `checker_x` and at the player’s *y* position
    ➌. Inside that loop is a single instruction to reduce `checker_x` by 1 ➍, moving
    1 tile to the left. When the loop finishes, `checker_x` contains the left position
    where the object begins. That number is then sent back ➎ to the instruction that
    started the function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，函数将变量`checker_x`设置为与玩家的* x *位置相同 ➋。我们使用一个循环，只要房间地图中`checker_x`的* x *位置和玩家的*
    y *位置包含255，循环就会继续。在该循环内部，有一条指令将`checker_x`减少1 ➍，使其向左移动1个瓦片。当循环结束时，`checker_x`包含物品开始的左侧位置。然后，该数字会返回
    ➎ 给启动该函数的指令。
- en: The second new function is `get_item_under_player()` ➏, which works out which
    object is at the player’s position. It uses the first function to find out where
    the object starts and stores the *x* position in the variable `item_x` ➐. Then
    it looks at the room map data for that position to see what object is there ➑
    and sends that number back to the instruction that started the function ➒.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个新函数是`get_item_under_player()` ➏，它计算玩家当前位置的物品是什么。它使用第一个函数来查找物品开始的位置，并将* x
    *位置存储在变量`item_x`中 ➐。然后，它查看该位置的房间地图数据，以确定那里是什么物品 ➑，并将该编号返回给启动该函数的指令 ➒。
- en: '**PICKING UP OBJECTS**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**捡起物品**'
- en: Now that these functions are in place, we can create a couple of functions for
    picking up objects and then storing them in a player’s inventory. Then we’ll add
    some keyboard controls.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些函数已经到位，我们可以创建几个函数来捡起物品，并将它们存入玩家的背包中。接着，我们将添加一些键盘控制。
- en: '**PICKING UP PROPS**'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**捡起道具**'
- en: Add the two functions shown in [Listing 9-5](ch09.xhtml#ch09list5) to the end
    of the `PROP INTERACTIONS` section of the program, just after where you added
    the code in [Listing 9-4](ch09.xhtml#ch09list4).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将[列表9-5](ch09.xhtml#ch09list5)中显示的两个函数添加到程序中`PROP INTERACTIONS`部分的末尾，紧跟在你在[列表9-4](ch09.xhtml#ch09list4)中添加的代码之后。
- en: Save this program as *listing9-5.py*. You can check for any errors by running
    it using pgzrun listing9-5.py, but you won’t see any difference yet. This code
    adds some new functions but doesn’t include any key controls to enable the player
    to use them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将此程序保存为*listing9-5.py*。你可以通过使用pgzrun listing9-5.py运行程序来检查是否有任何错误，但目前你不会看到任何变化。此代码添加了一些新函数，但不包括任何键控来启用玩家使用它们。
- en: '*listing9-5.py*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-5.py*'
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 9-5: Adding the functions to pick up objects*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表9-5：添加捡起物品的函数*'
- en: The function `pick_up_object()` will start when the player presses the *get*
    key (G) to pick up an item. It begins by putting the object number for the item
    at the player’s position into the variable `item_player_is_on` ➊. If the item
    is carryable ➋, the rest of the function picks it up.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`pick_up_object()`将在玩家按下*获取*键（G）时开始执行，来捡起物品。它首先将玩家位置上物品的编号存入变量`item_player_is_on`
    ➊。若该物品可以携带 ➋，其余的代码将执行捡起操作。
- en: To remove the item from the floor, the program replaces the room map at the
    player’s position with the object number for the floor (either soil or floor tiles)
    ➌. The `get_floor_type()` function is used to find out what the floor type should
    be in this room. When the room is redrawn, the item will disappear from the floor,
    so it looks like it’s been picked up. The item is then added to the list of items
    the player is carrying, using the `add_object()` function ➍.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从地板上移除物品，程序会将玩家位置的房间地图替换为地面（土壤或地板砖）的物品编号 ➌。`get_floor_type()`函数用于查找该房间中地面的类型。当房间重新绘制时，物品将从地板上消失，看起来像是被捡起来了。然后，物品会通过`add_object()`函数被添加到玩家携带的物品列表中
    ➍。
- en: We then show a message onscreen telling the player they picked up an item and
    play a sound effect. We add a short delay of half a second using the `time.sleep(0.5)`
    instruction to make sure the confirmation message isn’t overwritten if the player
    holds down the key too long.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在屏幕上显示一条信息，告诉玩家他们捡起了一个物品，并播放一个音效。我们使用`time.sleep(0.5)`指令添加了半秒的短暂延迟，以确保确认信息不会在玩家长按按键时被覆盖。
- en: If the item isn’t carryable, we show a message telling them they can’t carry
    it ➎. For example, scenery can’t be carried, so we need to tell players that.
    Otherwise, they might just think they’re pressing the wrong key or the program
    isn’t working.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果物品不能被携带，我们会显示一条信息，告诉玩家他们无法携带它 ➎。例如，风景物品是无法携带的，我们需要告诉玩家这一点。否则，他们可能会认为按错了键或程序没有正常工作。
- en: The `add_object()` function adds an item to the `in_my_pockets` list, which
    stores the items the player is carrying (their inventory). At the start of the
    function, the object number this function receives is put into the local variable
    `item` ➏. The item is added to the end of the `in_my_pockets_list` using `append()`
    ➐.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_object()`函数将物品添加到`in_my_pockets`列表中，这个列表存储了玩家携带的物品（他们的背包）。函数开始时，传入的物品编号被赋值给局部变量`item`
    ➏。物品通过`append()`方法被添加到`in_my_pockets_list`的末尾 ➐。'
- en: We use the global variable `item_carrying` to store the object number of whatever’s
    in the player’s hands, so it is set to be the object number of this item ➑. We
    set the `selected_item` variable as the last item in the list, meaning the item
    the player just picked up is selected ➒. These variables will be important when
    objects are used later on, and when the `display_inventory()` function shows the
    list of items on the screen. For now, that function just prints out the list in
    the command line window.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用全局变量`item_carrying`来存储玩家手中物品的对象编号，所以它被设置为这个物品的对象编号 ➑。我们将`selected_item`变量设置为列表中的最后一个物品，也就是说，玩家刚刚捡起的物品被选中
    ➒。这些变量将在后续使用物品时非常重要，尤其是在`display_inventory()`函数显示物品列表时。现在，这个函数只会在命令行窗口中打印出物品列表。
- en: Finally, we set the item’s position in the `props` dictionary to be room 0 ➓.
    This means the item just picked up is not shown in the game map anywhere. If we
    didn’t do this, the item would reappear in the room again when the player next
    entered it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将物品在`props`字典中的位置设置为房间0 ➓。这意味着刚捡起的物品在游戏地图中不会显示。如果我们不这么做，物品将在玩家下次进入房间时重新出现在房间内。
- en: '**ADDING THE KEYBOARD CONTROLS**'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加键盘控制**'
- en: To enable the new functions to work their magic, we need to add the keyboard
    control too. We’ll use the G key as our get key.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让新功能发挥作用，我们还需要添加键盘控制。我们将使用G键作为获取键。
- en: Place the new instructions, shown in [Listing 9-6](ch09.xhtml#ch09list6), in
    the `game_loop()` function in the `GAME LOOP` section of the program. The new
    instruction belongs after the exit checks have been made and before the player
    is moved back if they’re standing somewhere they shouldn’t be.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的指令，见于[清单9-6](ch09.xhtml#ch09list6)，放入程序中`GAME LOOP`部分的`game_loop()`函数中。新指令应该在退出检查完成后，并在玩家被移动回他们不该站立的位置之前添加。
- en: '*listing9-6.py*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-6.py*'
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 9-6: Adding the keyboard control*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单9-6：添加键盘控制*'
- en: You need to indent the first new instruction by four spaces ➊, because it’s
    inside the `game_loop()` function. Indent the second one ➋ by four more spaces,
    because it belongs to the `if` instruction above. These instructions run the `pick_up_object()`
    function ➋ when the player presses the G key ➊.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将第一条新指令缩进四个空格 ➊，因为它在`game_loop()`函数内。第二条指令需要再缩进四个空格 ➋，因为它属于上面那个`if`指令。这些指令在玩家按下G键时运行`pick_up_object()`函数
    ➋ ➊。
- en: Save the listing as *listing9-6.py*. When you run pgzrun listing9-6.py, you
    should be able to pick up objects.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将清单保存为*listing9-6.py*。当你运行`pgzrun listing9-6.py`时，你应该能够捡起物品。
- en: Test it starting with the air canister in the first room. Just walk onto it
    and press G. You’ll hear a sound and see a message, and the object will disappear
    from the room.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一个房间的空气罐开始测试。只需走到它上面并按下G键。你会听到声音并看到消息，物品会从房间中消失。
- en: 'The command line window (where you entered the `pgzrun` instruction) will also
    show the inventory list every time you pick up an object, like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你捡起物品时，命令行窗口（你输入`pgzrun`指令的地方）也会显示物品清单，像这样：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each time, you’ll see a new item added to the end of the list. Item 55, the
    yoyo, is in your pocket at the start of the game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你都会看到一个新物品被添加到列表末尾。游戏开始时，物品55，溜溜球，就在你的口袋里。
- en: '**ADDING THE INVENTORY FUNCTIONALITY**'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加背包功能**'
- en: Now you can pick up props that you find around the space station. We should
    add an easy way to see what you’re carrying and to choose different items to use.
    We’ll make a new `display_inventory()` function that displays a strip at the top
    of the game window showing the items the player is carrying.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以捡起你在太空站周围找到的道具。我们应该添加一个简单的方法来查看你携带的物品，并选择不同的物品来使用。我们将创建一个新的`display_inventory()`函数，在游戏窗口顶部显示一个条形区域，显示玩家正在携带的物品。
- en: We’ll then add controls so the player can press the TAB key to select the next
    item in the list. The selected item has a box drawn around it, and its description
    is shown underneath. [Figure 9-2](ch09.xhtml#ch09fig2) shows you what it will
    look like.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加控件，以便玩家可以按TAB键选择列表中的下一个项。选中的项周围会画一个框，并在下方显示其描述。[图9-2](ch09.xhtml#ch09fig2)展示了它的样子。
- en: '![image](../images/fig9-2.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig9-2.jpg)'
- en: '*Figure 9-2:* The inventory at the top of the game window'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-2：* 游戏窗口顶部的物品栏'
- en: '**DISPLAYING THE INVENTORY**'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**显示物品栏**'
- en: '[Listing 9-7](ch09.xhtml#ch09list7) shows you the code to add. [Listing 9-5](ch09.xhtml#ch09list5)
    included some code for the `display_inventory()` function. Replace that with the
    new code. Save this listing as *listing9-7.py*. When you run the program using
    pgzrun listing9-7.py, you’ll be able to see items added to your inventory at the
    top of the screen as you collect them.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 9-7](ch09.xhtml#ch09list7)展示了需要添加的代码。[Listing 9-5](ch09.xhtml#ch09list5)中包含了部分`display_inventory()`函数的代码。请将其替换为新代码。将此列表保存为*listing9-7.py*。当你使用pgzrun运行listing9-7.py程序时，你将能够在屏幕顶部看到收集到的物品添加到物品栏中。'
- en: '*listing9-7.py*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing9-7.py*'
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 9-7: Displaying the inventory*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-7：显示物品栏*'
- en: The new `display_inventory()` function starts by drawing a black box over the
    inventory area to clear it ➊. If the player isn’t carrying anything, the function
    returns without taking any further action because there are no items to display
    ➋.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`display_inventory()`函数首先会在物品栏区域绘制一个黑色框，清除原有内容➊。如果玩家没有携带任何物品，函数会直接返回，不进行任何操作，因为没有物品需要显示➋。
- en: There is only room to show 16 items on the screen, but the player could carry
    many more items than that. If the `in_my_pockets` list is too long to fit on the
    screen, the program shows it 16 items at a time. The player can select any of
    the items shown on the screen by pressing the TAB key to move through them, from
    left to right. If the last item displayed is selected and they press TAB, the
    next chunk of the list is shown. If the player presses TAB on the final item in
    the list, the start of the list appears again.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上只能显示16个物品，但玩家可能携带更多物品。如果`in_my_pockets`列表太长，无法在屏幕上完全显示，程序会一次显示16个物品。玩家可以按TAB键选择屏幕上显示的任意物品，按从左到右的顺序移动。如果选中了最后一个物品并按下TAB键，则会显示列表的下一个部分。如果玩家在列表中的最后一项按下TAB键，列表的开头会再次出现。
- en: We store the part of the `in_my_pockets` list currently displayed on the screen
    in another list called `list_to_show` and use a loop to display it ➏. The loop
    puts numbers into a variable called `item_counter`, which is used to extract the
    right image to draw each time, and also work out where to draw it ➐.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将当前显示在屏幕上的`in_my_pockets`列表部分存储在另一个名为`list_to_show`的列表中，并使用循环来显示它➏。该循环将数字放入一个名为`item_counter`的变量中，`item_counter`用于每次提取正确的图像并确定绘制位置➐。
- en: The clever bit is working out which items should go into `list_to_show`. In
    the `start_display` variable, we store the index number for the first item in
    `in_my_pockets` that the program should draw ➌. The `//` operator divides the
    selected item number by 16, rounding down. The result is then multiplied by 16
    to get the index number for the first item in the batch. For example, if the selected
    item is number 9, you’d divide 9 by 16 (0.5625), round down (0), and multiply
    by 16 (still 0), getting a result of 0\. That’s the start of the list, which makes
    sense, because we know there’s room for 16 items onscreen and that 9 is less than
    16\. If you wanted to see the group of items that includes item 22, you’d divide
    22 by 16 (1.375), round down (1), and multiply by 16, getting a result of 16\.
    That’s the start of the next batch, because the first batch has index numbers
    that range from 0 to 15.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 精妙之处在于确定哪些项应该放入`list_to_show`。在`start_display`变量中，我们存储了`in_my_pockets`中程序应绘制的第一个项的索引号➌。`//`运算符将选中的项编号除以16并向下取整。然后，将结果乘以16以获得批次中第一个项的索引号。例如，如果选中的项是编号9，你会将9除以16（得到0.5625），向下取整（得到0），然后乘以16（仍然是0），得到结果0。这样就得到了列表的起始位置，这很有道理，因为我们知道屏幕上有16个位置，而9小于16。如果你想查看包含第22项的项目组，你会将22除以16（得到1.375），向下取整（得到1），然后乘以16，得到结果16。那就是下一个批次的起始位置，因为第一个批次的索引号范围是从0到15。
- en: We create the `list_to_show` list using a technique called *list slicing*, which
    is simply using just a part of a list. When you give Python two list indexes with
    a colon between them, the program will cut out that part of the list. The section
    we’re using starts at the `start_display` index and finishes 15 items later ➍.
    A list slice leaves out the last item, so we use `start_display + 16` as the end
    point.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: We also need another calculation to work out which item to highlight as the
    selected item from the new list ➎. The item will have an index between 0 and 15,
    and we’ll store it in `selected_marker`. We calculate it as the remainder after
    we divide the selected item number by 16\. For example, if the selected item is
    number 18, it will be at index number 2 when the second group of items is displayed.
    (The first item is at index 0, remember.) Python has the modulo operator `%`,
    which you can use to get the remainder after a division.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: To highlight the selected item on the screen, we draw a box around it using
    a Rect positioned at its left edge ➑. Unlike the filled rectangles you’ve seen
    (for example ➊), this instruction draws a hollow box with a white edge.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: The description for the selected item is displayed underneath the inventory
    ➒, so players can TAB through their items to read their descriptions again.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when the program first runs, it needs to display the inventory. This
    is scheduled with a slight delay ➓ to avoid any problems that are caused by trying
    to use a `screen.blit()` instruction before Pygame Zero has finished starting
    up. While `clock.schedule_interval()` is used to run a function regularly, `clock.schedule_unique()`
    is used to run a function just once, after a delay.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE TAB KEYBOARD CONTROL**'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you run the program, you can see the inventory, but you have no way to
    cycle between items yet, so the latest item you collected is always selected.
    Let’s add the keyboard control that enables you to TAB through the inventory to
    select different items.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Place the new instructions in [Listing 9-8](ch09.xhtml#ch09list8) into the `game_loop()`
    function, just after where you added the keyboard control to get items in [Listing
    9-6](ch09.xhtml#ch09list6). You need to indent them by at least four spaces because
    they’re inside the `game_loop()` function.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Save this listing as *listing9-8.py*. When you run the program using pgzrun
    listing9-8.py, you’ll be able to press the TAB key to select different items in
    your inventory. (The TAB key is usually on the left side of the keyboard and might
    have a picture of two arrows on it.)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Pick up a few items before testing the new keyboard control, or skip ahead to
    the next section to fill up your inventory with more items to test with.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '*listing9-8.py*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 9-8: Enabling the TAB key to select items in the inventory*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: The first chunk of instructions runs when the player presses the TAB key, but
    only if the `in_my_pockets` list contains some items (so its length is more than
    0) ➊.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: To select the next item in the inventory, we increase the `selected_item` variable
    by 1 ➋ when the TAB key is pressed. This variable stores an index number (which
    starts at 0), so the program subtracts 1 from the length of the list to see whether
    the `selected_item` is now past the end of the list ➌. If it is, the selected
    item is reset to be the first item again, at 0.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: We set the variable `item_carrying` as the object number of the selected item
    (which is taken from the `in_my_pockets` list) ➍. For example, if the `in_my_pockets`
    list contained the object numbers 55 and 65, and the `selected_item` was 0, `item_carrying`
    would contain 55 (the first item from `in_my_pockets`). Finally, the inventory
    is displayed using the `display_``inventory()` function you created earlier ➎.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: While we’re working with this part of the program, we’ve added the keyboard
    controls for dropping and examining items too. When the player presses the D key
    and the `item_carrying` variable is not `False`, the `drop_object()` function
    runs ➏. This function is sent the player’s old *y* and *x* positions as the location
    for dropping the item ➐. Remember that the player’s current location might be
    inside a wall because of where we are in the game loop. We know that their most
    recent position before any movement is a safe place to drop something.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: We also added the instructions to start the `examine_object()` function ➒ when
    the spacebar is pressed ➑.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t press D or the spacebar in the game yet: pressing them will cause the
    program to crash because we haven’t added the functions for them. We’ll add them
    shortly.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '**TESTING THE INVENTORY**'
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We want to test the program properly, but at the moment you don’t have many
    items in your inventory. To save time, we’ll tweak the code to give you a fuller
    inventory so you can test the display and the TAB control.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll fill the `in_my_pockets` list with items when the game begins. The quickest
    way to do this is to change the instruction that sets up that list in the `PROPS`
    section of the program, like this (but don’t do this yet!):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That would mean you start the game carrying all the items it’s possible to carry.
    If you do that, it might spoil your enjoyment of the game, though. You’ll be carrying
    some items you might prefer not to see until later in the game. It’ll make some
    of the puzzle solutions obvious.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, I recommend you create a test list like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This line creates a list that contains that sequence of items three times. You’ll
    end up with an inventory that contains three of each item (which is impossible
    in the real game), but it will enable you to test that the inventory works correctly
    when it contains more than 16 items.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’ve finished testing, change the code back again. Otherwise, you might
    get unexpected results when playing the game. Here’s what that line should look
    like:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**DROPPING OBJECTS**'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Being able to collect stuff strewn all over the space station is great fun,
    but sometimes you’ll want to put it down, so you can either work with it or leave
    it somewhere. We’ll need two new functions for dropping items that will work a
    bit like the opposites of the functions for picking up items.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: The `drop_object()` function (the opposite of the `pick_up_object()` function)
    will let you drop an object on the floor where the player was most recently standing.
    You added the keyboard control to start this function in [Listing 9-8](ch09.xhtml#ch09list8).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'The `remove_object()` function is like the `add_object()` function in reverse:
    it takes items out of the inventory and updates it.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Add the new functions, shown in [Listing 9-9](ch09.xhtml#ch09list9), to the
    end of the `PROP INTERACTIONS` part of the program. Save the new program as *listing9-9.py*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: When you run the program using pgzrun listing9-9.py, you’ll be able to drop
    objects. That includes the yoyo you start the game carrying and any new objects
    you pick up as you explore the space station.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '*listing9-9.py*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 9-9: Adding the functions for dropping objects*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'The `drop_object()` function needs two pieces of information: the player’s
    old *y* and *x* positions. If the player moved this time through the `game_loop()`
    function, this will be the position they were in before they tried to move. If
    not, these numbers will be the same position as where they currently are. We know
    this is a sensible place to drop an item that won’t put the object inside a wall.
    The player’s old position goes into the variables `old_y` and `old_x` within this
    function ➊.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The program checks whether the room map at the player’s old position is a type
    of floor. If so, it’s okay to drop a prop here, so the drop instructions are used.
    If not ➏, the player sees a message telling them they can’t drop objects there.
    This will happen, for example, if there is already a prop in that position.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: If the player can drop the item, we need to update the `props` dictionary. The
    variable `item_carrying` contains the number of the object the player is carrying.
    Its entry in the `props` dictionary is a list. The first list item (index 0) is
    the room the prop is in, the second item (index 1) is its *y* position, and the
    third item is its *x* position (index 2). These values are set to be the current
    room and the player’s old position ➌.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: The room map for the current room also needs to be updated, so the room contains
    the dropped item ➍. The game will show a message and play a sound to tell the
    player that they’ve successfully dropped something and then the item is removed
    from the inventory using the `remove_object()` function ➎.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The `remove_object()` function takes an item from the player’s inventory and
    updates the `selected_item` variable. The object number sent to this function
    is stored in the variable `item`, and then `remove()` ➐ removes it from the `in_my_pockets`
    list. Now that the selected item has been removed, the number of the selected
    item is reduced by 1 ➑, so the previous item in the list is now selected. If this
    means the selected item is now less than 0, the selected item is reset to 0 ➒.
    This happens if the player drops the first item from their inventory.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: If the player’s hands are now empty, the `item_carrying` variable is set to
    `False` ➓. Otherwise, it’s set to the number of their selected item. Finally,
    `display``_inventory()` redraws the inventory to show the item has been removed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #1**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to do a safety drill. Can you pick up the air canister and deliver
    it to the sick bay? Drop it near the middle bed. To test whether the program is
    working correctly, leave the room after your delivery and come back to make sure
    it’s still there.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '**EXAMINING OBJECTS**'
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you explore the space station, you’ll want to study objects closely to see
    how they might help with your mission. The *examine* instruction shows the long
    description for an object and works for scenery and props. By examining an object,
    you can also sometimes find other objects. For example, when you examine a cupboard,
    you might find something inside it.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Pressing the spacebar triggers the `examine_object()` function. (You added the
    keyboard control in [Listing 9-8](ch09.xhtml#ch09list8).) Place the new function,
    shown in [Listing 9-10](ch09.xhtml#ch09list10), after the `remove_object()` function
    you added in [Listing 9-9](ch09.xhtml#ch09list9).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Save your program as *listing9-10.py*. Run the program using pgzrun listing9-10.py.
    You can now examine objects by walking up to or onto them and pressing the spacebar.
    For example, if you press the up arrow key and the spacebar when you’re against
    the wall at the back of the room, you can examine the wall.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '*listing9-10.py*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 9-10: Adding the code to examine objects*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 9-10](ch09.xhtml#ch09list10) builds on the work you’ve already done
    adding functions in this chapter. We start by getting the number of the object
    the player wants to examine and storing it in `item_player_is_on` ➊. At this point
    in the `game_loop()` function, the player’s position will be on or possibly inside
    the item they want to examine, if it’s a piece of scenery. We put the starting
    *x* position of the item into the variable `left_tile_of_item` ➋. If there isn’t
    an object to examine at the player’s location, the function finishes without taking
    any further action ➌. Ignoring an empty space feels more natural than describing
    the floor, especially if you make a mistake with the controls. If there is an
    item at the player’s location, the description of the object goes into the `description`
    variable, taken from the long description from the `objects` dictionary ➍.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: The program then checks whether there’s an item hidden *inside* the item the
    player is examining. We use a loop to go through all the items in the props dictionary
    ➎. If an item is in the current room at the player’s position, but the room map
    at that position doesn’t contain the prop number ➏, it means the item is hidden.
    We therefore add the hidden object to the player’s inventory ➐, and give the player
    a message that tells them they found something. This message uses the object’s
    short description to tell them what they’ve found ➑.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the function, the description is shown ➒, and we’ve put a short
    pause here to stop it being immediately overwritten if the player holds the key
    down ➓.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: If you want to hide props inside scenery in your own game design, make sure
    you give players a strong hint about where you’ve hidden something. In *Escape*,
    you might find objects in cupboards. If you see something unusual, it’s usually
    a good idea to examine it to learn about it, and you might find something else
    of interest. You won’t need to search every chair, bed, and wall panel though.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to hide props in wide scenery (such as a bed), make sure you hide
    your prop in the *x* position of the scenery item, not in a space that would be
    covered by 255 in the room map.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #2**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Can you find the MP3 player? It’s in the sleeping quarters that belong to the
    person you named `FRIEND2` in [Chapter 4](ch04.xhtml#ch04). If you’re using my
    code, it’s in Leo’s sleeping quarters.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Now that all the props are unpacked, you can relax with your yoyo and see what
    else you can find. In the next chapter, you’ll add a new section to the program
    that enables you to use the props you come across.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  Information about the position of props is stored
    in the `props` dictionary.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The prop number is the dictionary key, and each
    entry contains a list with the room number and *y* and *x* positions of the prop.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  To receive a number from a function, set up a
    variable to store that information when you call the function. For example, variable_name
    `=` function_name`()`.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  To send a number (or anything else) back from
    a function, use the `return` instruction.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `//` operator is used for division and rounds
    the result down, removing any decimal in the answer.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `%` operator gives you the remainder after
    dividing two numbers: `5 % 2` is `1`.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can change the value of variables and lists
    to help test the program, for example, creating a full inventory at the start.
    Remember to change them back afterward!'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  You can hide props inside scenery, but make sure
    they’re in the position where the scenery starts, and give players a strong hint
    about where it’s worth searching.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0170-01.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
