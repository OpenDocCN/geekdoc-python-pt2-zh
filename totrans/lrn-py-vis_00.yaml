- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: When I first encountered programming code, I stared, amazed and bewildered,
    at a screen of obscure commands and symbols and wondered how anybody could understand
    it, let alone write it. I’d hit the F5 key, and the program would magically spawn
    a cityscape in which two players, depicted as gorillas, could hurl explosive bananas
    at each other. I tried changing a few lines to see what would happen, and on occasion,
    it was something predictable or cool. More often than not, the game would simply
    fail to run. In a futile attempt to be helpful, the computer would diagnose my
    errors, rambling on about syntax and “illegal” operations of varying description.
  prefs: []
  type: TYPE_NORMAL
- en: For some years thereafter, I was content to avoid learning to program. That
    began to change when I became interested in making my creative work more interactive.
    You may already have encountered a few of the same barriers that frustrated me.
    Maybe you were getting by just fine with visual tools but then hit a wall. Or
    to your disappointment (and horror?), you discovered that what you sought to accomplish
    required delving into code.
  prefs: []
  type: TYPE_NORMAL
- en: Software applications, with all of their graphical widgets, make us feel like
    we’re in control. The illusion, however, soon fades when you discover that the
    tool you desire is missing. Through learning to program, you gain a true mastery
    of your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Who Is This Book For?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book assumes no prior programming experience. It strives to make the process
    of learning to program as visual and entertaining as possible. The content is
    based on my extensive experience teaching first-time coders, designers, and interactive
    media students. The skills and knowledge you’ll gain are fundamental to programming
    for an ever-expanding horizon of creative technologies, such as games, the web,
    augmented/virtual reality, and even visual effects for films.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re an artist, student, designer, researcher, or just somebody keen on
    picking up coding skills, Python Mode for Processing is excellent for learning
    to program in a visual context.
  prefs: []
  type: TYPE_NORMAL
- en: For anybody with prior programming experience, this book would be useful for
    learning Python, Python Mode for Processing, or creative coding techniques.
  prefs: []
  type: TYPE_NORMAL
- en: You may have experience with another *visual* programming language—something
    like Scratch, where you connect together graphical elements like boxes, icons,
    and arrows. Python is not such a language—rather, it is a *textual* programming
    language that requires you to type code. To make learning visual, though, you’ll
    focus on writing code that produces drawings, patterns, animations, data visualizations,
    user interfaces, and simulations. This approach not only makes for cool-looking
    graphics, but also helps you visualize the underlying concepts of programming.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Python Mode for Processing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Python Mode for Processing* combines the *Python* programming language and
    *Processing*, a development environment for interactive and graphics programming.
    You’ll also see Python Mode for Processing referred to as *Processing.py*. The
    project started as a command line tool named Processing.py, but its developer
    decided to label it Python Mode when it was made available for the Processing
    development environment. In this book, you can consider the terms largely interchangeable.'
  prefs: []
  type: TYPE_NORMAL
- en: Python is one of the most popular programming languages in use today. There
    are many good reasons for this, but here’s why *you* should care. First, Python
    is a beginner-friendly language. It’s more approachable than languages like Java
    or C++, so you’ll find it easier to read, write, and understand. Second, it’s
    a general-purpose language, suitable for programming artificial intelligence (AI),
    games, simulations, web applications, and just about everything in between.
  prefs: []
  type: TYPE_NORMAL
- en: Processing, which has been around since the early 2000s, is composed of a programming
    language and an editor for writing and compiling code. It provides a collection
    of special commands that allow you to draw, animate, and handle user input by
    using code. The creators, Casey Reas and Ben Fry, developed Processing to make
    programming more accessible for designers and artists, although its thriving user
    base has grown to include researchers, hobbyists, and educators.
  prefs: []
  type: TYPE_NORMAL
- en: Java is the basis for the original Processing programming language, but other
    variants have since appeared, including JavaScript (*p5.js*) and Ruby (*JRubyArt*)
    versions. In 2010, Jonathan Feinberg created Processing.py, which you can think
    of as a sort of extension for Processing that allows you to write Python instead
    of Java-esque code.
  prefs: []
  type: TYPE_NORMAL
- en: Both Python and Processing are open source and won’t cost you a cent. What’s
    more, you can use them on just about any platform, including Linux, macOS, and
    Microsoft Windows.
  prefs: []
  type: TYPE_NORMAL
- en: What Are Algorithms?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll encounter the term *algorithm* frequently in the domain of programming.
    You can think of an algorithm as a set of rules a computer or machine must follow
    to achieve a particular goal. As an example, an algorithm for making a cup of
    instant coffee would read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Place one teaspoon of coffee granules in a mug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill the kettle with water.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch on the kettle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the water has boiled, add 240 ml boiling water to the mug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add one level teaspoon of sugar to the same mug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stir the contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serve.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, this set of steps is insufficient for programming a real-life coffee-making
    robot. Should the sizes of the mugs vary, smaller ones would overflow. Furthermore,
    the robot would ignore any requests for milk or extra sugar. Computers cannot
    make any assumptions, and require explicit and unambiguous direction, communicated
    in a language that machines understand—like Python. Learning the Python language
    may be the hurdle you face initially, but as you grow more fluent, the challenge
    will shift toward the mastery of algorithmic thinking.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Creative Coding?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creative coding* is computer programming for creative output. This broad term
    encompasses, but is not limited to, computer-generated audio and visual art, interactive
    installations, experimental games, and data visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: Take, for example, Frederic Brodbeck’s *Cinemetrics* project. Using Python,
    Brodbeck developed a program that analyzes DVD movie data to generate visual *fingerprints*
    of films. The fingerprint is an open ring formed from many segments; a single
    segment represents a span of 10 shots, and the concentric bands show the color
    breakdown for each of those segments. The diagonal length of each segment indicates
    the amount of motion. Figure 1 is a *Cinemetrics* fingerprint for the film *Quantum
    of Solace* (2008).
  prefs: []
  type: TYPE_NORMAL
- en: '![f00001](image_fi/500969f05/f00001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: *Quantum of Solace* fingerprint, created by Frederic Brodbeck. Screenshot
    from [http://cinemetrics.site/](http://cinemetrics.site/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fingerprints can also be animated, in which case motion is instead visualized
    using pulsating segments. An interactive interface provides a selection of presets
    and filters so that you can arrange fingerprints alongside one another and make
    comparisons—for example, between originals and remakes, different genres, the
    works of a single director, and so forth. Figure 2 compares (from left to right)
    *2001: A Space Odyssey* (1968), *The Simpsons Movie* (2007), and a soccer match.'
  prefs: []
  type: TYPE_NORMAL
- en: '![f00002](image_fi/500969f05/f00002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Fingerprints comparing (left to right) *2001: A Space Odyssey*, *The
    Simpsons Movie*, and a soccer match. Screenshots from [http://cinemetrics.site/](http://cinemetrics.site/).'
  prefs: []
  type: TYPE_NORMAL
- en: Many creative coding projects employ a similar underlying approach, in which
    data is fed into a program to influence how it controls output. Music visualizations
    with real-time audio synchronization—like those featured in popular media player
    software—are a good example. However, you can experiment with plenty of other
    data sources, such as web feeds, fitness trackers, environmental sensors, and
    a plethora of public datasets.
  prefs: []
  type: TYPE_NORMAL
- en: In some instances, it’s useful to opt for randomized data values. Consider procedurally
    generated game content. As opposed to constructing levels manually, you can program
    games to generate dungeon layouts, terrain, narrative elements, and enemy spawn
    locations automatically. Of course, such games should include sensible constraints;
    for instance, a cap on the total number of enemies that can appear at once, and
    algorithms for ensuring that stage layouts are not impossible to traverse.
  prefs: []
  type: TYPE_NORMAL
- en: Game characters may be composed using a random selection of modular components,
    or generated entirely from shapes and formulas. As an example, I’ve written a
    Processing Python program that generates the randomized microbial beasties displayed
    in Figure 3\. The code—an adaptation of Lieven Menschaert’s NodeBox script *Aquatics!*—spawns
    a creature with a random fill color, shape (defined by something named the *superformula*),
    and no fewer than three eyes. There’s a 70 percent chance that hair will grow
    along the creature’s edges, which can be swayed by the force of a randomly directed
    current.
  prefs: []
  type: TYPE_NORMAL
- en: '![f00003](image_fi/500969f05/f00003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: A Processing.py adaption of Lieven Menschaert’s NodeBox script *Aquatics!*'
  prefs: []
  type: TYPE_NORMAL
- en: Countless examples of cool, creative coding projects exist—from robots that
    doodle and write poetry, to evolutionary simulators, and even a program that pores
    over satellite imagery in search of architecture or infrastructure that resembles
    letters (*The Aerial Bold Project* by Benedikt Groß and Joey Lee, 2016).
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps this creative coding thing sounds a bit too artsy for you? Processing
    also isn’t ideal for that race car sim you’ve always dreamed of building, and
    it’s definitely no good for backend web development. That’s okay. Creative coding
    with Processing’s Python Mode need not be the ultimate goal of reading this book.
    Think of it as a starting point for exploring Python, other frameworks, creative
    applications for coding, and programming in general.
  prefs: []
  type: TYPE_NORMAL
- en: Where Can I Find Help?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programming is rewarding, in part because it’s challenging. If you find yourself
    struggling with something, do not stress; that’s normal! With a little perseverance,
    you’ll soon grasp whatever has you snagged.
  prefs: []
  type: TYPE_NORMAL
- en: Online Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’re getting nowhere, reach out to online communities. You’ll find a dedicated
    category for Processing.py in the official Processing forum at [https://discourse.processing.org/](https://discourse.processing.org/).
    You’ll often discover that somebody has already encountered and received a solution
    for the challenge you’re facing; if not, go ahead and create a new topic. Incidentally,
    the author of this book is known to lurk about in this friendly and welcoming
    corner of the internet.
  prefs: []
  type: TYPE_NORMAL
- en: The official Python Mode reference is available at *https://py.processing.org/reference/*.
    Each entry includes a description and brief code example. It’s handy to keep this
    web page open while you work in the Processing development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Source Code and Solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll be typing a lot of code. This is a good thing because the best way to
    learn is by doing. At times, however, you might mistype something or be unable
    to figure why your code refuses to work. In such instances, it can be helpful
    to have access to a complete, working version of the file. You can access all
    of the code in this book, as well as solutions to the challenges in each chapter,
    at [https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/).
    You can also find any updates to this book at [https://www.nostarch.com/Learn-Python-Visually/](https://www.nostarch.com/Learn-Python-Visually/).
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book begins with the basics and builds up toward more advanced topics as
    you progress. Each chapter, therefore, requires a grasp of the concepts introduced
    in the chapters preceding it. You’ll be working, step by step, through a series
    of practical tasks. You’ll also find some theory, plenty of visuals, and challenges
    to consolidate what you’ve learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following outline provides a brief overview of the contents in each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Hello, World! This chapter covers the installation and setup procedure
    for the book and introduces the basics of drawing with code. You’ll also learn
    how computers manage color, how you can store and reuse values (using variables),
    and how to perform basic arithmetic operations using Python.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 2: Drawing More Complicated Shapes Having covered some drawing essentials
    in the first chapter, you’ll move on to drawing more organic shapes, as opposed
    to geometric ones. You’ll learn to define shapes by using points (or vertices)
    and curves, which enable you to draw just about any shape with code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 3: Introduction to Strings and Working with Text In this chapter, you’ll
    learn how to use Python’s string features to manipulate text. You’ll also learn
    how to use Processing functions to draw text to the display window, in different
    styles and colors, and in different fonts.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 4: Conditional Statements This is where you really begin to think like
    a programmer. In this chapter, you’ll introduce control flow to your programs.
    In other words, you’ll learn how to write programs that can make decisions, executing
    different actions to respond to different situations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Iteration and Randomness In this chapter, you’ll learn how to write
    programs that can repeat an operation a specified number of times or until a certain
    requirement is met. Toward the end of the chapter, you’ll experiment with randomness
    and creating tiled patterns.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 6: Motion and Transformation This chapter focuses primarily on adding
    motion to your Processing programs and transforming the drawing space. You’ll
    also learn how to save frames as images and how to get time values from your computer.
    You’ll use these skills to create an animated screensaver and analog clock.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 7: Working with Lists and Reading Data Python lists will unlock powerful
    ways to manage and manipulate values in collections. You’ll explore techniques
    for data visualization. You’ll also learn to read in list data from external files.
    For the final task, you’ll render a chart by using a CSV file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 8: Dictionaries and JSON Dictionaries are similar to lists in that
    they store collections of items. With dictionaries, however, you access items
    by using a key (usually a word) instead of referring to the item position. Once
    again, you’ll get to use your new dictionary skills for data visualization. You’ll
    also learn to work with JSON data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 9: Functions and Periodic Motion You’ll use functions to divide a program
    into named sections of reusable code. This will make your code more modular, and
    easier to read and modify. You’ll also delve into some trigonometry for generating
    elliptical and wave-type motions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 10: Object-Oriented Programming and PVector You can use object-oriented
    programming to structure programs by modeling real-world objects. In this chapter,
    you’ll employ an object-oriented approach to building an amoeba simulation. You’ll
    also learn to program the amoebas’ motion by using Processing’s `PVector` class.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 11: Mouse and Keyboard Interaction In this chapter, you’ll add interactivity
    to your programs. Processing can handle input from various devices, but here you’ll
    focus on mouse and keyboard input to build a paint app. In the process, you’ll
    learn about event functions and how to control Processing’s draw loop behavior.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s Go!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The speed at which you progress through these chapters is likely to be influenced
    by your prior experience in similar areas. If you’ve done any type of programming
    before, Python or otherwise, you’ll encounter some familiar concepts. That said,
    it’s not a race! Enjoy the ride, stop for breaks, and if you’re feeling really
    inspired, feel free to head off-road.
  prefs: []
  type: TYPE_NORMAL
