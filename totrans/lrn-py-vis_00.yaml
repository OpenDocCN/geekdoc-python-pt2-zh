- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: When I first encountered programming code, I stared, amazed and bewildered,
    at a screen of obscure commands and symbols and wondered how anybody could understand
    it, let alone write it. I’d hit the F5 key, and the program would magically spawn
    a cityscape in which two players, depicted as gorillas, could hurl explosive bananas
    at each other. I tried changing a few lines to see what would happen, and on occasion,
    it was something predictable or cool. More often than not, the game would simply
    fail to run. In a futile attempt to be helpful, the computer would diagnose my
    errors, rambling on about syntax and “illegal” operations of varying description.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次接触编程代码时，我盯着屏幕上的晦涩命令和符号，既惊讶又困惑，想知道怎么可能有人能理解这些，更别说写它了。我按下F5键，程序神奇地生成了一个城市景观，其中两个玩家以大猩猩形象互相投掷爆炸香蕉。我尝试修改几行代码看看会发生什么，有时结果是可以预见的或者很酷的。更多时候，游戏干脆无法运行。计算机为了“帮助”我，诊断出了我的错误，喋喋不休地讲解语法和各种“非法”操作。
- en: For some years thereafter, I was content to avoid learning to program. That
    began to change when I became interested in making my creative work more interactive.
    You may already have encountered a few of the same barriers that frustrated me.
    Maybe you were getting by just fine with visual tools but then hit a wall. Or
    to your disappointment (and horror?), you discovered that what you sought to accomplish
    required delving into code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几年里，我一直满足于避免学习编程。然而，当我开始对使自己的创作更具互动性产生兴趣时，情况开始发生变化。你可能已经遇到了我曾经感到沮丧的那些障碍。也许你一直用视觉工具得心应手，但突然遇到瓶颈。或者你失望（甚至惊恐地发现）自己所想要实现的目标，必须深入到代码中去。
- en: Software applications, with all of their graphical widgets, make us feel like
    we’re in control. The illusion, however, soon fades when you discover that the
    tool you desire is missing. Through learning to program, you gain a true mastery
    of your computer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 软件应用程序及其各种图形控件让我们感觉自己掌控一切。然而，当你发现缺少了你想要的工具时，这种幻觉很快就会消失。通过学习编程，你将真正掌握电脑的使用。
- en: Who Is This Book For?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这本书适合谁？
- en: This book assumes no prior programming experience. It strives to make the process
    of learning to program as visual and entertaining as possible. The content is
    based on my extensive experience teaching first-time coders, designers, and interactive
    media students. The skills and knowledge you’ll gain are fundamental to programming
    for an ever-expanding horizon of creative technologies, such as games, the web,
    augmented/virtual reality, and even visual effects for films.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设读者没有编程经验。它力求将编程学习过程做到尽可能直观和有趣。内容基于我丰富的教学经验，特别是面向初学者、设计师和互动媒体专业学生。你将获得的技能和知识是编程的基础，适用于日益扩展的创意技术领域，如游戏、网页、增强/虚拟现实，甚至电影的视觉特效。
- en: If you’re an artist, student, designer, researcher, or just somebody keen on
    picking up coding skills, Python Mode for Processing is excellent for learning
    to program in a visual context.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是艺术家、学生、设计师、研究员，或者只是有兴趣学习编码技能的人，那么Processing的Python模式非常适合在视觉环境中学习编程。
- en: For anybody with prior programming experience, this book would be useful for
    learning Python, Python Mode for Processing, or creative coding techniques.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有编程经验的人，本书可以帮助学习Python、Processing中的Python模式，或是创意编码技巧。
- en: You may have experience with another *visual* programming language—something
    like Scratch, where you connect together graphical elements like boxes, icons,
    and arrows. Python is not such a language—rather, it is a *textual* programming
    language that requires you to type code. To make learning visual, though, you’ll
    focus on writing code that produces drawings, patterns, animations, data visualizations,
    user interfaces, and simulations. This approach not only makes for cool-looking
    graphics, but also helps you visualize the underlying concepts of programming.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经接触过其他*可视化*编程语言——类似Scratch，你通过连接图形元素（如框、图标和箭头）来编程。Python并非这样的语言——它是一种*文本*编程语言，需要你手动输入代码。不过，为了使学习过程更具视觉性，你将专注于编写代码，生成图形、模式、动画、数据可视化、用户界面和模拟。这种方法不仅能创建出酷炫的图形，同时也帮助你更好地理解编程的基础概念。
- en: What Is Python Mode for Processing?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Processing的Python模式？
- en: '*Python Mode for Processing* combines the *Python* programming language and
    *Processing*, a development environment for interactive and graphics programming.
    You’ll also see Python Mode for Processing referred to as *Processing.py*. The
    project started as a command line tool named Processing.py, but its developer
    decided to label it Python Mode when it was made available for the Processing
    development environment. In this book, you can consider the terms largely interchangeable.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*Processing 的 Python 模式*结合了*Python*编程语言和*Processing*，这是一个用于交互式和图形编程的开发环境。你还会看到
    Processing 的 Python 模式被称为 *Processing.py*。该项目最初是一个名为 Processing.py 的命令行工具，但其开发者决定在该工具为
    Processing 开发环境提供支持时将其称为 Python 模式。在本书中，你可以认为这些术语是可以互换的。'
- en: Python is one of the most popular programming languages in use today. There
    are many good reasons for this, but here’s why *you* should care. First, Python
    is a beginner-friendly language. It’s more approachable than languages like Java
    or C++, so you’ll find it easier to read, write, and understand. Second, it’s
    a general-purpose language, suitable for programming artificial intelligence (AI),
    games, simulations, web applications, and just about everything in between.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是目前最流行的编程语言之一。之所以如此流行有很多理由，下面是*你*应该关注的原因。首先，Python 是一种适合初学者的编程语言。它比 Java
    或 C++ 等语言更易于上手，因此你会发现它更容易阅读、编写和理解。其次，它是一种通用编程语言，适用于人工智能（AI）、游戏、仿真、Web 应用程序以及几乎所有其他领域。
- en: Processing, which has been around since the early 2000s, is composed of a programming
    language and an editor for writing and compiling code. It provides a collection
    of special commands that allow you to draw, animate, and handle user input by
    using code. The creators, Casey Reas and Ben Fry, developed Processing to make
    programming more accessible for designers and artists, although its thriving user
    base has grown to include researchers, hobbyists, and educators.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Processing 自2000年代初以来就存在，它由一个编程语言和一个用于编写和编译代码的编辑器组成。它提供了一系列特殊命令，允许你通过代码绘图、制作动画并处理用户输入。其创始人
    Casey Reas 和 Ben Fry 开发 Processing 旨在让编程对设计师和艺术家更为易用，尽管它如今的用户群体已经扩展到研究人员、爱好者和教育工作者。
- en: Java is the basis for the original Processing programming language, but other
    variants have since appeared, including JavaScript (*p5.js*) and Ruby (*JRubyArt*)
    versions. In 2010, Jonathan Feinberg created Processing.py, which you can think
    of as a sort of extension for Processing that allows you to write Python instead
    of Java-esque code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Java 是最初的 Processing 编程语言的基础，但自那以后出现了其他变体，包括 JavaScript (*p5.js*) 和 Ruby (*JRubyArt*)
    版本。2010年，Jonathan Feinberg 创建了 Processing.py，你可以将其看作是 Processing 的一种扩展，它允许你使用
    Python 编写代码，而不是类似 Java 的代码。
- en: Both Python and Processing are open source and won’t cost you a cent. What’s
    more, you can use them on just about any platform, including Linux, macOS, and
    Microsoft Windows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 和 Processing 都是开源的，且不收费。更重要的是，你几乎可以在任何平台上使用它们，包括 Linux、macOS 和 Microsoft
    Windows。
- en: What Are Algorithms?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是算法？
- en: 'You’ll encounter the term *algorithm* frequently in the domain of programming.
    You can think of an algorithm as a set of rules a computer or machine must follow
    to achieve a particular goal. As an example, an algorithm for making a cup of
    instant coffee would read as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你在编程领域中将经常遇到“*算法*”这个词。你可以将算法看作是计算机或机器为了达到特定目标必须遵循的一组规则。例如，制作一杯速溶咖啡的算法可以如下所示：
- en: Place one teaspoon of coffee granules in a mug.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在杯子里放一茶匙咖啡粉。
- en: Fill the kettle with water.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将水壶加满水。
- en: Switch on the kettle.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开水壶。
- en: Once the water has boiled, add 240 ml boiling water to the mug.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当水烧开后，将240毫升沸水倒入杯中。
- en: Add one level teaspoon of sugar to the same mug.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向同一杯子中加入一平茶匙的糖。
- en: Stir the contents.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搅拌内容。
- en: Serve.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上菜。
- en: However, this set of steps is insufficient for programming a real-life coffee-making
    robot. Should the sizes of the mugs vary, smaller ones would overflow. Furthermore,
    the robot would ignore any requests for milk or extra sugar. Computers cannot
    make any assumptions, and require explicit and unambiguous direction, communicated
    in a language that machines understand—like Python. Learning the Python language
    may be the hurdle you face initially, but as you grow more fluent, the challenge
    will shift toward the mastery of algorithmic thinking.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一系列步骤不足以编程一个真实的咖啡制作机器人。如果杯子的大小不同，小杯子可能会溢出。此外，机器人也会忽视任何加奶或加糖的请求。计算机无法做出任何假设，必须要求明确无歧义的指令，并使用机器理解的语言来沟通—例如Python。学习Python语言可能是你最初遇到的障碍，但随着你逐渐熟练，挑战将转向算法思维的掌握。
- en: What Is Creative Coding?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是创意编码？
- en: '*Creative coding* is computer programming for creative output. This broad term
    encompasses, but is not limited to, computer-generated audio and visual art, interactive
    installations, experimental games, and data visualizations.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*创意编码*是用于创意输出的计算机编程。这个广泛的术语包含但不限于计算机生成的音频和视觉艺术、互动装置、实验性游戏和数据可视化。'
- en: Take, for example, Frederic Brodbeck’s *Cinemetrics* project. Using Python,
    Brodbeck developed a program that analyzes DVD movie data to generate visual *fingerprints*
    of films. The fingerprint is an open ring formed from many segments; a single
    segment represents a span of 10 shots, and the concentric bands show the color
    breakdown for each of those segments. The diagonal length of each segment indicates
    the amount of motion. Figure 1 is a *Cinemetrics* fingerprint for the film *Quantum
    of Solace* (2008).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以Frederic Brodbeck的*Cinmetrics*项目为例。Brodbeck使用Python开发了一个程序，分析DVD电影数据以生成电影的视觉*指纹*。指纹是由许多片段组成的开放环形图；每个片段代表10个镜头的跨度，同心圆带显示了每个片段的颜色分解。每个片段的对角线长度表示运动量。图1是电影*量子危机*（2008）的*Cinmetrics*指纹。
- en: '![f00001](image_fi/500969f05/f00001.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![f00001](image_fi/500969f05/f00001.png)'
- en: 'Figure 1: *Quantum of Solace* fingerprint, created by Frederic Brodbeck. Screenshot
    from [http://cinemetrics.site/](http://cinemetrics.site/).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：*量子危机*的指纹，由Frederic Brodbeck创建。截图来自[http://cinemetrics.site/](http://cinemetrics.site/)。
- en: 'The fingerprints can also be animated, in which case motion is instead visualized
    using pulsating segments. An interactive interface provides a selection of presets
    and filters so that you can arrange fingerprints alongside one another and make
    comparisons—for example, between originals and remakes, different genres, the
    works of a single director, and so forth. Figure 2 compares (from left to right)
    *2001: A Space Odyssey* (1968), *The Simpsons Movie* (2007), and a soccer match.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指纹还可以动画化，此时，运动将通过脉动的片段来呈现。互动界面提供了预设和滤镜的选择，以便你可以将指纹排列在一起进行比较—例如，比较原版与翻拍、不同类型的电影、同一导演的作品等等。图2比较了（从左到右）*2001太空漫游*（1968）、*辛普森电影*（2007）和一场足球比赛。
- en: '![f00002](image_fi/500969f05/f00002.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![f00002](image_fi/500969f05/f00002.png)'
- en: 'Figure 2: Fingerprints comparing (left to right) *2001: A Space Odyssey*, *The
    Simpsons Movie*, and a soccer match. Screenshots from [http://cinemetrics.site/](http://cinemetrics.site/).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：比较（从左到右）*2001太空漫游*、*辛普森电影*和一场足球比赛的指纹。截图来自[http://cinemetrics.site/](http://cinemetrics.site/)。
- en: Many creative coding projects employ a similar underlying approach, in which
    data is fed into a program to influence how it controls output. Music visualizations
    with real-time audio synchronization—like those featured in popular media player
    software—are a good example. However, you can experiment with plenty of other
    data sources, such as web feeds, fitness trackers, environmental sensors, and
    a plethora of public datasets.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 许多创意编码项目采用类似的基础方法，其中数据被输入到程序中以影响它如何控制输出。实时音频同步的音乐可视化—如在流行媒体播放器软件中展示的那样—就是一个很好的例子。然而，你还可以尝试其他许多数据源，如网络订阅源、健身追踪器、环境传感器和大量的公共数据集。
- en: In some instances, it’s useful to opt for randomized data values. Consider procedurally
    generated game content. As opposed to constructing levels manually, you can program
    games to generate dungeon layouts, terrain, narrative elements, and enemy spawn
    locations automatically. Of course, such games should include sensible constraints;
    for instance, a cap on the total number of enemies that can appear at once, and
    algorithms for ensuring that stage layouts are not impossible to traverse.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，选择随机化的数据值是很有用的。考虑一下程序生成的游戏内容。与其手动构建关卡，不如编程使游戏自动生成地下城布局、地形、叙事元素和敌人生成位置。当然，这样的游戏应该包含合理的约束条件；例如，限制一次出现的敌人总数，并确保关卡布局不会是无法通行的。
- en: Game characters may be composed using a random selection of modular components,
    or generated entirely from shapes and formulas. As an example, I’ve written a
    Processing Python program that generates the randomized microbial beasties displayed
    in Figure 3\. The code—an adaptation of Lieven Menschaert’s NodeBox script *Aquatics!*—spawns
    a creature with a random fill color, shape (defined by something named the *superformula*),
    and no fewer than three eyes. There’s a 70 percent chance that hair will grow
    along the creature’s edges, which can be swayed by the force of a randomly directed
    current.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏角色可以通过随机选择模块化组件构成，或完全通过形状和公式生成。例如，我写了一个Processing Python程序，生成图3中显示的随机微生物怪兽。这个代码——改编自Lieven
    Menschaert的NodeBox脚本*Aquatics!*——生成一个具有随机填充颜色、形状（由一种叫做*超级公式*的东西定义）并且至少有三只眼睛的生物。它有70%的概率在生物的边缘生长出毛发，而这些毛发可以被随机方向的水流所摆动。
- en: '![f00003](image_fi/500969f05/f00003.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![f00003](image_fi/500969f05/f00003.png)'
- en: 'Figure 3: A Processing.py adaption of Lieven Menschaert’s NodeBox script *Aquatics!*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：Lieven Menschaert的NodeBox脚本*Aquatics!*的Processing.py改编版
- en: Countless examples of cool, creative coding projects exist—from robots that
    doodle and write poetry, to evolutionary simulators, and even a program that pores
    over satellite imagery in search of architecture or infrastructure that resembles
    letters (*The Aerial Bold Project* by Benedikt Groß and Joey Lee, 2016).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无数酷炫的创意编程项目存在——从涂鸦和写诗的机器人，到进化模拟器，甚至还有一个程序，它通过卫星图像寻找类似字母的建筑或基础设施（*The Aerial
    Bold Project*，由Benedikt Groß和Joey Lee发起，2016年）。
- en: Perhaps this creative coding thing sounds a bit too artsy for you? Processing
    also isn’t ideal for that race car sim you’ve always dreamed of building, and
    it’s definitely no good for backend web development. That’s okay. Creative coding
    with Processing’s Python Mode need not be the ultimate goal of reading this book.
    Think of it as a starting point for exploring Python, other frameworks, creative
    applications for coding, and programming in general.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这种创意编程听起来对你来说有些太艺术化了？Processing对于你一直梦想构建的赛车模拟器也不太合适，更适合后台Web开发也不是它的强项。没关系，使用Processing的Python模式进行创意编程并不一定是阅读这本书的最终目标。可以把它看作是探索Python、其他框架、创意编程应用以及编程的一般起点。
- en: Where Can I Find Help?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我在哪里可以找到帮助？
- en: Programming is rewarding, in part because it’s challenging. If you find yourself
    struggling with something, do not stress; that’s normal! With a little perseverance,
    you’ll soon grasp whatever has you snagged.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是有回报的，部分原因在于它具有挑战性。如果你发现自己在某件事上挣扎，不要紧张；这是正常的！只要稍加坚持，你很快就能掌握那些让你卡住的知识点。
- en: Online Resources
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在线资源
- en: If you’re getting nowhere, reach out to online communities. You’ll find a dedicated
    category for Processing.py in the official Processing forum at [https://discourse.processing.org/](https://discourse.processing.org/).
    You’ll often discover that somebody has already encountered and received a solution
    for the challenge you’re facing; if not, go ahead and create a new topic. Incidentally,
    the author of this book is known to lurk about in this friendly and welcoming
    corner of the internet.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进展不顺利，可以向在线社区求助。你可以在官方Processing论坛的[https://discourse.processing.org/](https://discourse.processing.org/)找到专门的Processing.py分类。你会经常发现有人已经遇到并解决了你所面临的挑战；如果没有，可以创建一个新话题。顺便提一下，本书的作者经常在这个友好和热情的网络角落里潜伏。
- en: The official Python Mode reference is available at *https://py.processing.org/reference/*.
    Each entry includes a description and brief code example. It’s handy to keep this
    web page open while you work in the Processing development environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Python模式参考文档可在*https://py.processing.org/reference/*上查看。每个条目都包括描述和简短的代码示例。在你使用Processing开发环境时，保持这个网页的打开非常有用。
- en: Source Code and Solutions
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码和解决方案
- en: You’ll be typing a lot of code. This is a good thing because the best way to
    learn is by doing. At times, however, you might mistype something or be unable
    to figure why your code refuses to work. In such instances, it can be helpful
    to have access to a complete, working version of the file. You can access all
    of the code in this book, as well as solutions to the challenges in each chapter,
    at [https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/).
    You can also find any updates to this book at [https://www.nostarch.com/Learn-Python-Visually/](https://www.nostarch.com/Learn-Python-Visually/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你将输入大量代码。这是好事，因为最好的学习方式就是通过实践。然而，有时你可能会打错字，或者不明白为什么代码不工作。在这种情况下，能够访问一个完整、可工作的文件版本将会很有帮助。你可以访问本书中的所有代码，以及每章挑战的解决方案，网址是[https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/)。你还可以在[https://www.nostarch.com/Learn-Python-Visually/](https://www.nostarch.com/Learn-Python-Visually/)找到本书的任何更新。
- en: What’s in This Book?
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书内容是什么？
- en: This book begins with the basics and builds up toward more advanced topics as
    you progress. Each chapter, therefore, requires a grasp of the concepts introduced
    in the chapters preceding it. You’ll be working, step by step, through a series
    of practical tasks. You’ll also find some theory, plenty of visuals, and challenges
    to consolidate what you’ve learned.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从基础知识开始，随着学习的深入，逐步过渡到更高级的主题。因此，每一章都需要掌握前一章介绍的概念。你将通过一系列实际任务，逐步完成学习目标。你还会找到一些理论内容，丰富的视觉效果，并通过挑战来巩固所学的知识。
- en: 'The following outline provides a brief overview of the contents in each chapter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下大纲简要概述了每一章的内容：
- en: 'Chapter 1: Hello, World! This chapter covers the installation and setup procedure
    for the book and introduces the basics of drawing with code. You’ll also learn
    how computers manage color, how you can store and reuse values (using variables),
    and how to perform basic arithmetic operations using Python.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一章：你好，世界！ 本章涵盖了本书的安装与设置程序，并介绍了如何用代码绘制基础图形。你还将学习计算机如何处理颜色，如何使用变量存储和重用值，以及如何使用
    Python 执行基本的算术运算。
- en: 'Chapter 2: Drawing More Complicated Shapes Having covered some drawing essentials
    in the first chapter, you’ll move on to drawing more organic shapes, as opposed
    to geometric ones. You’ll learn to define shapes by using points (or vertices)
    and curves, which enable you to draw just about any shape with code.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二章：绘制更复杂的形状 在第一章中学习了一些绘图基础后，你将继续学习绘制更具有机形状的图形，而非几何图形。你将学习如何通过使用点（或顶点）和曲线来定义形状，这使得你可以用代码绘制几乎任何形状。
- en: 'Chapter 3: Introduction to Strings and Working with Text In this chapter, you’ll
    learn how to use Python’s string features to manipulate text. You’ll also learn
    how to use Processing functions to draw text to the display window, in different
    styles and colors, and in different fonts.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三章：字符串简介与文本处理 本章将教你如何使用 Python 的字符串功能来处理文本。你还将学习如何使用 Processing 函数在显示窗口中绘制文本，使用不同的样式、颜色和字体。
- en: 'Chapter 4: Conditional Statements This is where you really begin to think like
    a programmer. In this chapter, you’ll introduce control flow to your programs.
    In other words, you’ll learn how to write programs that can make decisions, executing
    different actions to respond to different situations.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四章：条件语句 在这一章，你将开始像程序员一样思考。本章将引入控制流的概念，也就是说，你将学习如何编写能够做出决策的程序，执行不同的操作来应对不同的情况。
- en: 'Chapter 5: Iteration and Randomness In this chapter, you’ll learn how to write
    programs that can repeat an operation a specified number of times or until a certain
    requirement is met. Toward the end of the chapter, you’ll experiment with randomness
    and creating tiled patterns.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第五章：迭代与随机性 本章将教你如何编写可以重复某个操作特定次数，或者直到满足某个条件的程序。在本章末，你将尝试随机性并创建平铺图案。
- en: 'Chapter 6: Motion and Transformation This chapter focuses primarily on adding
    motion to your Processing programs and transforming the drawing space. You’ll
    also learn how to save frames as images and how to get time values from your computer.
    You’ll use these skills to create an animated screensaver and analog clock.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第六章：运动与变换 本章主要讲解如何在 Processing 程序中添加运动效果，并对绘图空间进行变换。你还将学习如何将帧保存为图像，并如何从计算机获取时间值。你将运用这些技能创建一个动画屏保和模拟时钟。
- en: 'Chapter 7: Working with Lists and Reading Data Python lists will unlock powerful
    ways to manage and manipulate values in collections. You’ll explore techniques
    for data visualization. You’ll also learn to read in list data from external files.
    For the final task, you’ll render a chart by using a CSV file.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第7章：使用列表和读取数据 Python 列表将为你提供强大的方法来管理和操作集合中的值。你将探索数据可视化的技巧。你还将学习如何从外部文件中读取列表数据。最后的任务是通过使用
    CSV 文件渲染一个图表。
- en: 'Chapter 8: Dictionaries and JSON Dictionaries are similar to lists in that
    they store collections of items. With dictionaries, however, you access items
    by using a key (usually a word) instead of referring to the item position. Once
    again, you’ll get to use your new dictionary skills for data visualization. You’ll
    also learn to work with JSON data.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第8章：字典和 JSON 字典与列表类似，都是用来存储集合的项。然而，使用字典时，你通过使用一个键（通常是一个单词）来访问项，而不是通过引用项的位置。同样，你将运用新的字典技巧进行数据可视化。你还将学习如何处理
    JSON 数据。
- en: 'Chapter 9: Functions and Periodic Motion You’ll use functions to divide a program
    into named sections of reusable code. This will make your code more modular, and
    easier to read and modify. You’ll also delve into some trigonometry for generating
    elliptical and wave-type motions.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第9章：函数与周期运动 你将使用函数将程序划分为具有可重用代码的命名部分。这将使你的代码更加模块化，易于阅读和修改。你还将深入学习一些三角学知识，以生成椭圆形和波动类型的运动。
- en: 'Chapter 10: Object-Oriented Programming and PVector You can use object-oriented
    programming to structure programs by modeling real-world objects. In this chapter,
    you’ll employ an object-oriented approach to building an amoeba simulation. You’ll
    also learn to program the amoebas’ motion by using Processing’s `PVector` class.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第10章：面向对象编程与 PVector 你可以使用面向对象编程，通过建模现实世界的物体来结构化程序。在这一章中，你将采用面向对象的方法，构建一个变形虫模拟。你还将学习如何使用
    Processing 的 `PVector` 类来编程控制变形虫的运动。
- en: 'Chapter 11: Mouse and Keyboard Interaction In this chapter, you’ll add interactivity
    to your programs. Processing can handle input from various devices, but here you’ll
    focus on mouse and keyboard input to build a paint app. In the process, you’ll
    learn about event functions and how to control Processing’s draw loop behavior.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第11章：鼠标与键盘交互 在这一章中，你将为你的程序添加互动功能。Processing 可以处理来自各种设备的输入，但这里你将专注于鼠标和键盘输入，构建一个绘画应用。在这个过程中，你将了解事件函数，以及如何控制
    Processing 的绘制循环行为。
- en: Let’s Go!
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 出发吧！
- en: The speed at which you progress through these chapters is likely to be influenced
    by your prior experience in similar areas. If you’ve done any type of programming
    before, Python or otherwise, you’ll encounter some familiar concepts. That said,
    it’s not a race! Enjoy the ride, stop for breaks, and if you’re feeling really
    inspired, feel free to head off-road.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过这些章节的进度，可能会受到之前在类似领域的经验影响。如果你之前做过任何类型的编程，无论是 Python 还是其他语言，你会遇到一些熟悉的概念。不过，这不是比赛！享受这个过程，适时休息，如果你感到很有灵感，也可以随时偏离路线。
