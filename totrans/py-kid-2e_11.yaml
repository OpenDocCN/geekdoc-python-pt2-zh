- en: '10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using tkinter for Better Graphics
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The problem with using a turtle to draw is . . . that . . . turtles . . . are
    . . . really . . . slow. Even when a turtle is going at top speed, it’s still
    not very fast. While this isn’t really an issue for turtles, it is for computer
    graphics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Computer graphics usually need to move fast. If you play games on a game console
    or computer, think for a moment about the graphics you see on the screen. Two-dimensional
    (2D) graphics are flat: the characters generally move only up and down or left
    and right, as in many Nintendo and phone games. In pseudo-three-dimensional (3D)
    games—ones that are almost 3D—images look a little more real, but the characters
    generally move only in relation to a flat plane (this is also known as *isometric
    graphics*). Finally, we have 3D games, with graphics that attempt to mimic reality.
    Whether games use 2D, pseudo-3D, or 3D graphics, all have one thing in common:
    the need to draw on the computer screen very quickly.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0136-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you’ve never tried to create your own animation, try this simple project:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a blank pad of paper, and in the bottom corner of the first page, draw something
    (perhaps a stick figure).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the corner of the next page, draw the same stick figure, but move its leg
    slightly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, draw the stick figure again, with the leg moved a little more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gradually go through each page, drawing a modified stick figure on the bottom
    corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you’re finished, flip quickly through the pages, and you should see your
    stick figure moving. This is the basic method used with all animation, whether
    cartoons or video games. An image is drawn, and then drawn again with a slight
    change to create the illusion of movement. To make an image look like it is moving,
    you need to display each *frame*—or piece of the animation—very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Python offers different ways to create graphics. In addition to the turtle module,
    you can use *external* modules (which you need to install separately), as well
    as the tkinter module, which you should already have in your standard Python installation.
    The tkinter module can be used to create full applications, like a simple word
    processor, as well as drawings. In this chapter, we’ll explore using tkinter to
    create graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Clickable Button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our first example, we’ll use the tkinter module to create a basic application
    with a button. Enter this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On the first line, we import the contents of the tkinter module. The from *module-name*
    import * line allows us to use the contents of a module without using its name.
    In contrast, when using import turtle in previous examples, we needed to include
    the module name to access its contents, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0137-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we use import *, we don’t need to call turtle.Turtle, as we did in [Chapters
    4](ch04.xhtml#ch04) and [9](ch09.xhtml#ch09). This is most useful when you’re
    using modules with a lot of classes and functions, because it reduces the amount
    you need to type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On the next line in our button example, we create a variable containing an object
    of the class Tk with tk = Tk(), just like we create a Turtle object for the turtle.
    The tk object creates a basic window to which we can then add other things, such
    as buttons, input boxes, or a canvas to draw on. This is the main class provided
    by the tkinter module; without creating an object of the Tk class, you won’t be
    able to do any graphics or animations.
  prefs: []
  type: TYPE_NORMAL
- en: On the third line, we create a button with btn = Button, and pass the tk variable
    as the first parameter and “click me” as the text the button will display with
    text=’click me’. Although we’ve added this button to the window, it won’t be displayed
    until you enter the line btn.pack(), which tells the button to appear. It also
    lines everything up correctly on the screen if there are other buttons or objects
    to display. The result should be something like [Figure 10-1](ch10.xhtml#ch10fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: A tkinter application with a single button*'
  prefs: []
  type: TYPE_NORMAL
- en: Right now, the Click Me button doesn’t do much. You can click it all day, but
    nothing will happen until we change the code a bit. (Be sure to close the window
    you created earlier!)
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a function to print some text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we modify our example to use this new function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We’ve made only a slight change to the previous version of this code, adding
    the command parameter, which tells Python to use the hello function when the button
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Now when you click the button, you’ll see “hello there” written to the Python
    Shell. This will appear each time the button is clicked. In [Figure 10-2](ch10.xhtml#ch10fig02),
    I’ve clicked the button five times.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Clicking the button*'
  prefs: []
  type: TYPE_NORMAL
- en: This is the first time we’ve used named parameters in any of our code examples,
    so let’s talk about them a bit before continuing with our drawing.
  prefs: []
  type: TYPE_NORMAL
- en: Using Named Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Named parameters* are just like normal parameters, but rather than using the
    specific order of the values provided to a function to determine which value belongs
    to which parameter (the first value is the first parameter, the second value is
    the second parameter, and so on), we explicitly name the values so they can appear
    in any order.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes functions have a lot of parameters, and we may not always need to
    provide a value for every one. With named parameters, we can provide values for
    only the parameters we need to give values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose we have a person function that takes two parameters, width
    and height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, we might call this function like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using named parameters, we could call this function and specify the parameter
    name with each value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Named parameters will become particularly useful as we do more with the tkinter
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Canvas for Drawing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Buttons are nice tools, but they’re not particularly useful when we want to
    draw things on the screen. When it’s time to draw, we need a different component:
    a canvas object, which is an object of the Canvas class (provided by the tkinter
    module).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a canvas, we pass the width and height (in pixels) of the canvas
    to Python. Otherwise, the code is similar to the button code. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As with the button example, a window will appear when you enter tk = Tk(). On
    the last line, we pack the canvas with canvas.pack(), which applies the changes
    to the size of the canvas (a width of 500 pixels and a height of 500 pixels, as
    specified in the third line of code).
  prefs: []
  type: TYPE_NORMAL
- en: Also like the button example, the pack function tells the canvas to display
    itself in the correct position within the window. If pack isn’t called, nothing
    will display properly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0140-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing Lines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To draw a line on the canvas, we use pixel coordinates. *Coordinates* determine
    the positions of pixels on a surface. On a tkinter canvas, coordinates describe
    how far across the canvas (from left to right) and how far down the canvas (top
    to bottom) to place the pixel.
  prefs: []
  type: TYPE_NORMAL
- en: For example, because our canvas is 500 pixels wide by 500 pixels high, the coordinates
    of the bottom-right corner of the screen are (500, 500). To draw the line shown
    in [Figure 10-3](ch10.xhtml#ch10fig03), we would use the starting coordinates
    (0, 0) and ending coordinates (500, 500).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: Drawing a diagonal line with tkinter*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We specify the coordinates by using the create_line function, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The create_line function returns 1, which is an identifier; we’ll learn more
    about that later. If we had done the same thing with the turtle module, we would’ve
    needed the following this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this code, the canvas is 500 pixels wide and 500 high, so the turtle appears
    at position 250, 250 (in the middle of the canvas). If we use the function t.goto(-250,
    250), we’re moving left 250 and up 250 pixels to the top left of the screen. When
    we call t.goto(500, -500), we’re then moving right 500 pixels and down 500 pixels
    to the bottom-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: So we can see that the tkinter code is already an improvement. It’s slightly
    shorter and simpler. Now let’s look at some of the functions available on the
    canvas object that we can use to create more interesting drawings.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Boxes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the turtle module, we drew a box by moving forward, turning, moving forward,
    turning again, and so on. Eventually, we were able to draw a rectangular or square
    box by changing how far we moved forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tkinter module makes it a lot easier to draw a square or rectangle. All
    you need to know are the coordinates for the corners. Try the following example
    (you can close the other windows now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we use tkinter to create a canvas that is 400 pixels wide by 400
    pixels high, and we then draw a square in the top-left corner of the window, like
    [Figure 10-4](ch10.xhtml#ch10fig04).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Drawing a box*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters we pass to canvas.create_rectangle in the last line of the code
    are the coordinates for the top-left and bottom-right corners of the square. We
    provide these coordinates as the distance from the left-hand side of the canvas
    and the distance from the top of the canvas. In this case, the first two coordinates
    (the top-left corner) are 10 pixels across from the left and 10 pixels down from
    the top—those are the first numbers: 10, 10. The bottom-right corner of the square
    is 50 pixels across from the left and 50 pixels down from the top—the second numbers:
    50, 50.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll refer to these two sets of coordinates as *x1*, *y1* and *x2*, *y2*.
    To draw a rectangle, we can increase the distance of the second corner from the
    side of the canvas (increasing the value of the *x2* parameter), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the top-left coordinates of the rectangle (its position on
    the screen) are (10, 10), and the bottom-right coordinates are (300, 50). The
    result is a rectangle that is the same height as our original square (40 pixels)
    but much wider.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5: A wide rectangle*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also draw a rectangle by increasing the distance of the second corner
    from the top of the canvas (increasing the value of the *y2* parameter), like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this call to the create_rectangle function, we’re telling tkinter to:'
  prefs: []
  type: TYPE_NORMAL
- en: Go 10 pixels across the canvas (from the top left).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go 10 pixels down the canvas. This is the starting corner of the rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw the rectangle across to 50 pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw down to 300 pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end result should look something like [Figure 10-6](ch10.xhtml#ch10fig06).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: A tall rectangle*'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a Lot of Rectangles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s try filling the canvas with different-sized rectangles by importing the
    random module and then creating a function that uses a random number for the coordinates
    at the top-left and bottom-right corners of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the randrange function provided by the random module. When we give
    this function a number, it returns a random integer between 0 and the number we
    give it. For example, calling randrange(10) returns a number between 0 and 9,
    randrange(100) returns a number between 0 and 99, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use randrange in a function, create a new window by selecting **File ▸ New
    File**, and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We first define our (random_rectangle) function as taking two parameters: width
    and height. Next, we create variables for the top-left corner of the rectangle
    by using the randrange function, passing the width and the height as parameters
    with x1 = random .randrange(width) and y1 = random.randrange(height), respectively.
    With the second line of this function, we’re saying, “Create a variable called
    x1 and set its value to a random number between 0 and the value in the parameter
    width.”'
  prefs: []
  type: TYPE_NORMAL
- en: The next two lines create variables for the bottom-right corner of the rectangle,
    taking into account the top-left coordinates (either x1 or y1) and adding a random
    number to those values. The third line of the function is effectively saying,
    “Create the variable x2 by adding a random number to the value we already calculated
    for x1.”
  prefs: []
  type: TYPE_NORMAL
- en: Finally, with canvas.create_rectangle, we use the variables x1, y1, x2, and
    y2 to draw the rectangle on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try our random_rectangle function, we’ll pass it the width and height of
    the canvas. Add the following code below the function you’ve just entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save the code you’ve entered (select **File ▸ Save** and enter a filename such
    as *randomrect.py*), and then select **Run ▸ Run Module**.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Our random_rectangle function can draw a rectangle off the side or bottom
    of the canvas. That’s because the top-left corner of the rectangle can be anywhere
    on the canvas (even in the bottom right-hand corner), and it doesn’t cause any
    errors to draw past the width or height of the canvas.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve seen the function working, fill the screen with rectangles by creating
    a loop to call random_rectangle a number of times. Let’s try a for loop of 100
    random rectangles. Add the following code, save your work, and try running it
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This code produces a bit of a mess, but it’s kind of modern art ([Figure 10-7](ch10.xhtml#ch10fig07)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Modern art with tkinter*'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s add interest to our graphics with color. We’ll change the random_rectangle
    function to pass in a color for the rectangle as an additional parameter (fill_color).
    Enter this code in a new window, and when you save, call the file *colorrect.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The create_rectangle function now takes a parameter, fill_color, which specifies
    the color to use when drawing the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can pass named colors into the function like this to create a bunch of uniquely
    colored rectangles. If you try this example, consider copying and pasting, after
    you enter the first line, to save on typing. To do so, select the text to copy,
    press CTRL-C to copy it, click a blank line, and press CTRL-V to paste. Add this
    code to *colorrect.py*, just below the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0148-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Many of these named colors will display the color you expect to see, but others
    may produce an error message (depending on whether you’re using Windows, macOS,
    or Linux). But what about a custom color that isn’t exactly the same as a named
    color? Recall in [Chapter 9](ch09.xhtml#ch09) that we set the color of the turtle’s
    pen by using percentages of the colors red, green, and blue. Setting the amount
    of each primary color (red, green, and blue) to use in a color combination with
    tkinter is slightly more complicated, but we’ll work through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with the turtle module, we created gold using 90 percent red,
    75 percent green, and no blue. In tkinter, we can create the same gold color by
    using this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The hash mark (#) before the value ffd800 tells Python we’re providing a *hexadecimal*
    number. Hexadecimal is a way of representing numbers that is common in computer
    programming. It uses a base of 16 (0 through 9, then A through F) rather than
    decimal, which has a base of 10 (0 through 9). If you haven’t learned about bases
    in mathematics, just know that you can convert a normal decimal number to hexadecimal
    using a *format placeholder* in a string: {:x} (see “Embedding Values in Strings”
    on [page 29](ch03.xhtml#ch03lev1sec4)). For example, to convert the decimal number
    15 to hexadecimal, you could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is an f-string with a special format modifier (that’s :x) that tells Python
    to convert the number to hexadecimal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure our number has at least two digits, we can change the format placeholder
    slightly, to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This time we have a slightly different format modifier (02x) that says we want
    hexadecimal conversion, but with two digits (using 0 for any missing digit).
  prefs: []
  type: TYPE_NORMAL
- en: 'The tkinter module provides an easy way to get hexadecimal color values. Try
    running the following code in IDLE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This code displays a color chooser, shown in [Figure 10-8](ch10.xhtml#ch10fig08).
    Note that you have to explicitly import the colorchooser module because it’s not
    automatically available in Python when you use from tkinter import *.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The tkinter color chooser (which may look different on your OS)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you select a color and click **OK**, a tuple will be displayed. This tuple
    contains another tuple with three numbers and a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The three numbers represent the amounts of red, green, and blue. In tkinter,
    the amount of each primary color to use in a color combination is represented
    by a number between 0 and 255 (which is different from using a percentage for
    each primary color with the turtle module). The string in the tuple contains the
    hexadecimal version of those three numbers.
  prefs: []
  type: TYPE_NORMAL
- en: You can either copy and paste the string value to use it, or store the tuple
    as a variable and use the index position of the hexadecimal value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the random_rectangle function to see how this works, by replacing
    all the random_rectangle calls at the bottom of *colorrect.py* with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can see the result in [Figure 10-9](ch10.xhtml#ch10fig09).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: Drawing a purple rectangle*'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Arcs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An *arc* is a segment of the circumference of a circle or curve. To draw an
    arc with tkinter, you need to draw it inside a rectangle by using the create_arc
    function with code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Image](Images/10fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-10: Drawing an arc*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’ve closed all the tkinter windows or restarted IDLE, make sure to reimport
    tkinter and then re-create the canvas with this code:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This code places the top-left corner of the rectangle that will contain the
    arc at the coordinates (10, 10), which is 10 pixels across and 10 pixels down,
    and its bottom-right corner at coordinates (200, 100), or 200 pixels across and
    100 pixels down. The next parameter, extent, is used to specify the degrees of
    the angle of the arc. Recall from [Chapter 4](ch04.xhtml#ch04) that degrees are
    a way of measuring the distance to travel around a circle. [Figure 10-11](ch10.xhtml#ch10fig11)
    shows examples of two arcs, where we travel 90 degrees and 270 degrees around
    a circle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-11: 90- and 270- degree arcs*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code draws several different arcs down the page so you can see
    what happens when we use different degrees with the create_arc function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The result is shown in [Figure 10-12](ch10.xhtml#ch10fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-12: Multiple arcs*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We use 359 degrees in the final circle, rather than 360, because tkinter considers
    360 to be the same as 0 degrees, and would draw nothing.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The style parameter is the type of arc you want to draw. There are two other
    types of arc: chord and pieslice. A *chord* is almost the same as the arc we have
    already drawn, except the two ends are joined together with a single straight
    line. A *pieslice* is exactly what it sounds like—as if you cut a segment out
    of a pizza or a pie.'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Polygons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *polygon* is any shape with three or more sides. There are regularly shaped
    polygons—like triangles, squares, rectangles, pentagons, hexagons, and so on—as
    well as *irregular* polygons with uneven edges, many more sides, and odd shapes.
  prefs: []
  type: TYPE_NORMAL
- en: 'When drawing polygons with tkinter, you need to provide coordinates for each
    point of the polygon. We can draw a triangle with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This example draws a triangle by starting with the *x* and *y* coordinates (10,
    10), then moving across to (100, 10), and finishing at (100, 110). We set the
    fill color to nothing (an empty string), so the triangle won’t be colored in,
    and the outline is set to ’black’, so it will be drawn with a black line. It should
    look like [Figure 10-13](ch10.xhtml#ch10fig13).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-13: Drawing a triangle*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add an irregular polygon by using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This code begins with the coordinates (200, 10), moves to (240, 30), then to
    (120, 100), and finally to (140, 120). The tkinter module automatically joins
    the line back to the first coordinate. The result is shown in [Figure 10-14](ch10.xhtml#ch10fig14).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-14: Irregular polygon*'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to drawing shapes, you can also write on the canvas by using the
    create_text function. This function takes only two coordinates—the *x* and *y*
    positions of the text—along with a named parameter for the text to display. In
    the following code, we create our canvas as before and then display a sentence
    positioned at the coordinates (150, 100). Save this code as *text.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The create_text function can take other useful parameters, such as a text fill
    color. In the following code, we call the create _text function with coordinates
    (130, 120), the text we want to display, and a red fill color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify the *font*, or the typeface used for the displayed text,
    as a tuple with the font name and the size of the text. For example, the tuple
    for the *Times* font of size 20 is (''Times'', 20). In the following code, we
    display text using the *Times* font set at size 15, the *Helvetica* font at size
    20, and the *Courier* font at sizes 22 and then 30:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0156-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 10-15](ch10.xhtml#ch10fig15) shows the result of these functions using
    the three specified fonts at five different sizes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-15: Drawing text with tkinter*'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To display an image on a canvas by using tkinter, first load the image and then
    use the create_image function on the canvas object. Any image you load must be
    in a folder (or directory) that’s accessible to Python.
  prefs: []
  type: TYPE_NORMAL
- en: The best place to put images is in your home folder. On Windows this is *c:**\**Users**\**<your
    username>*; on macOS, */Users/<your username>*; and on Ubuntu or Raspberry Pi,
    */home/<your* *username>*. [Figure 10-16](ch10.xhtml#ch10fig16) shows a home folder
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-16: Home folder on Windows*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*With tkinter, you can load only GIF images—image files with the extension*
    .gif. *You can display other types of images, such as PNG* (.png) *and JPG* (.jpg),
    *but you’ll need to use a different module such as Pillow, the Python Imaging
    Library (found at* [https://python-pillow.org](https://python-pillow.org)*). If
    you don’t have a GIF to use, try opening a photo and then saving it as a GIF.
    On Windows you can do this quite easily with the Paint app—but there are plenty
    of other ways to convert images to the GIF format.*'
  prefs: []
  type: TYPE_NORMAL
- en: We can display an image called *test.gif* as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the first four lines, we set up the canvas as with the previous examples.
    In the fifth line, the image is loaded into the my_image variable. We create PhotoImage
    with the filename *c:\\* *Users\\jason\\test.gif*. We need to use two backslashes
    (*\\*) in a Windows filename, because backslash is a special character in a Python
    string (used for something called an escape character—for example, *\t* is the
    escape character representing a tab, *\n* is the escape character representing
    a newline, which we used back in [Chapter 7](ch07.xhtml#ch07)), and two backslashes
    are simply a way of saying, “I don’t want to use an escape character here—I want
    a single backslash.”
  prefs: []
  type: TYPE_NORMAL
- en: 'If you saved your image to the desktop, you should create the PhotoImage with
    that folder, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once the image has been loaded into the variable, canvas .create_image(0, 0,
    anchor=NW, image=my_image) displays it using the create_image function. The coordinates
    (0, 0) are where the image will be displayed, and anchor=NW (with NW standing
    for *northwest*) tells the function to use the top-left edge of the image as the
    starting point when drawing; otherwise, it will use the center of the image as
    the starting point by default. The final named parameter, image, points at the
    variable for the loaded image. Your screen should look similar to [Figure 10-17](ch10.xhtml#ch10fig17).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-17: Displaying an image*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Basic Animation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve covered how to create static pictures that don’t move. Now, we’ll turn
    our attention to creating animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Animation is not necessarily a specialty of the tkinter module, but it can
    handle the basics. For example, we can create a filled triangle and then make
    it move across the screen by using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: When you run this code, the triangle will start moving across the screen to
    the end of its path, as in [Figure 10-18](ch10.xhtml#ch10fig18).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-18: Moving triangle*'
  prefs: []
  type: TYPE_NORMAL
- en: As before, we’ve used the first three lines after importing tkinter to do the
    basic setup to display a canvas. We create the triangle with the call to the canvas.create_polygon(10,
    10, 10, 60, 50, 35) function.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you enter this line, a number will be printed to the screen. This is
    an identifier for the polygon. We can use it to refer to the shape later, as described
    in the following example.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a simple for loop to count from 1 to 61, beginning with for
    x in range(1, 61).
  prefs: []
  type: TYPE_NORMAL
- en: The block of code inside the loop moves the triangle across the screen. The
    canvas.move function will move any drawn object by adding values to its x and
    y coordinates. For example, with canvas.move(1, 5, 0), we move the object with
    ID 1 (the identifier for the triangle—see the preceding Note) 5 pixels across
    and 0 pixels down. To move it back again, we could use the function call canvas.move(1,
    -5, 0).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0160-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The tk.update() function forces tkinter to update the screen (redraw it). If
    we didn’t use update, tkinter would wait until the loop finished before moving
    the triangle, which means you would see it jump to the last position, rather than
    move smoothly across the canvas. The final line of the loop, time.sleep(0.05),
    tells Python to sleep for one-twentieth of a second (0.05 seconds) before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the triangle move diagonally down the screen, we can modify this code
    by calling move(1, 5, 5). Close the canvas and create a new file (**File ▸ New
    File**) for the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This code differs from the original in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: We made the height of the canvas 400, rather than 200, with canvas = Canvas(tk,
    width=400, height=400).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added 5 to the triangle’s *x* and *y* coordinates with canvas.move(1, 5,
    5).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 10-19](ch10.xhtml#ch10fig19) shows the triangle’s position at the end
    of the loop, after you save your code and run it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/10fig19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-19: The triangle moved to the bottom of the screen.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To move the triangle diagonally back up the screen to its starting position,
    use (-5, -5). Add this code to the bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: After you run this code, the triangle will move back to where it started.
  prefs: []
  type: TYPE_NORMAL
- en: Making an Object React to Something
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can make the triangle react when someone presses a key by using *event bindings*.
    *Events* are things that occur while a program is running, such as someone moving
    the mouse, pressing a key, or closing a window. You can tell tkinter to watch
    for these events and then do something in response.
  prefs: []
  type: TYPE_NORMAL
- en: To begin *handling* events (making Python do something when an event occurs),
    we first create a function. The binding part comes when we tell tkinter that a
    particular function is bound (or associated) to a specific event. In other words,
    it will be automatically called by tkinter to handle that event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to make the triangle move when we press ENTER, we can define this
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The function takes a single parameter (event), which tkinter uses to send information
    to the function about the event. We tell tkinter that this function should be
    used for a particular event by using the bind_all function on the canvas. The
    full code now looks like this—let’s type it into a new file in IDLE and save it
    as *movingtriangle.py* before we run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter in this function describes the event that we want tkinter
    to watch for. In this case, it’s called <KeyPress-Return>, which is a press of
    the ENTER or RETURN key. We tell tkinter that the movetriangle function should
    be called whenever this KeyPress event occurs. Run this code, click the canvas
    with your mouse, and then try pressing ENTER on your keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0163-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s try changing the direction of the triangle depending on different key
    presses, such as the arrow keys. We first need to change the movetriangle function
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The event object passed to movetriangle contains several variables. One of these
    variables, keysym (for *key symbol*), is a string that holds the value of the
    actual key pressed. The line if event .keysym == ’Up’ says that if the keysym
    variable contains the string ’Up’, we should call canvas.move with the parameters
    (1, 0, –3), as we do in the following line. If keysym contains ’Down’, as in elif
    event.keysym == ’Down’, we call it with the parameters (1, 0, 3), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: The first parameter is the identifying number for the shape drawn
    on the canvas, the second is the value to add to the *x* (horizontal) coordinate,
    and the third is the value to add to the *y* (vertical) coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then tell tkinter that the movetriangle function will be used to handle
    events from four different keys (up, down, left, and right). The following shows
    how the *movingtriangle.py* code should look now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: On the first line of the movetriangle function, we check whether the keysym
    variable contains ’Up’ ➊. If it does, we move the triangle upward using the move
    function with the parameters 1, 0, {3 ➋. The first parameter is the identifier
    of the triangle, the second is the amount to move to the right (we don’t want
    to move horizontally, so the value is 0), and the third is the amount to move
    downward (–3 pixels).
  prefs: []
  type: TYPE_NORMAL
- en: We then check whether keysym contains ’Down’ ➌; if so, we move the triangle
    down (3 pixels) ➍. The final check is whether the value is ’Left’; if so, we move
    the triangle left (–3 pixels). If none of the values are matched, the final else
    ➎ moves the triangle right ➏.
  prefs: []
  type: TYPE_NORMAL
- en: Now the triangle should move in the direction of the pressed arrow key.
  prefs: []
  type: TYPE_NORMAL
- en: More Ways to Use the Identifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Whenever we use a create_function from the canvas, such as create_polygon or
    create_rectangle, an identifier is returned. This identifying number can be used
    with other canvas functions, as we did earlier with the move function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The problem with this example is that create_polygon won’t always return 1\.
    For example, if you’ve created other shapes, it might return 2, 3, or even 100
    (depending on the number of shapes you’ve created). If we change the code to store
    the value returned as a variable, and then use the variable (rather than just
    referring to the number 1), the code will work no matter what number is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The move function allows us to move objects around the screen by using their
    identifier. But other canvas functions can also change something we’ve drawn.
    For example, the itemconfig function can change some parameters of a shape, such
    as its fill and outline colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we create a red triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change the triangle to another color with itemconfig and use the identifier
    as the first parameter. The following code says, “Change the fill color of the
    object identified by the number in variable mytriangle to blue”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also give the triangle a different-colored outline, again using the
    identifier as the first parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Later, we’ll learn how to make other changes to a drawing, like hiding it and
    making it visible again. You’ll find the ability to change your drawings useful
    when we start writing games in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0166-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you used the tkinter module to draw simple geometric shapes
    on a canvas, display images, and perform basic animation. You learned how event
    bindings can make drawings react to someone pressing a key, which will be helpful
    once we start programming a game. You learned how tkinter’s create functions return
    an identifying number, which can be used to modify shapes after they’ve been drawn,
    such as to move them around on the screen or change their color.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try the following to further explore the tkinter module and basic animation.
    Visit *[http://python-for-kids.com](http://python-for-kids.com)* to download the
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '#1: Fill the Screen with Triangles'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a program using tkinter to fill the screen with triangles. Then change
    the code to fill the screen with different-colored (filled) triangles instead.
  prefs: []
  type: TYPE_NORMAL
- en: '#2: The Moving Triangle'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Modify the code for the moving triangle (“Creating Basic Animation” on [page
    159](ch10.xhtml#ch10lev1sec12)) to make it move across the screen to the right,
    then down, then back to the left, and then back to its starting position.
  prefs: []
  type: TYPE_NORMAL
- en: '#3: The Moving Photo'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try displaying a photo of yourself on the canvas. Make sure it’s a GIF image!
    Can you make it move across the screen?
  prefs: []
  type: TYPE_NORMAL
- en: '#4: Fill the Screen with Photos'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Take the photo you used in the previous puzzle, and shrink it down small.
  prefs: []
  type: TYPE_NORMAL
- en: On macOS, you can use Preview to resize an image (choose **Tools ▸ Adjust Size**,
    and enter a new width and height. Then, click **File ▸ Export** to save with a
    new filename).
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, you can use Paint (click the **Resize** button, choose a horizontal
    and vertical size, then **File ▸ Save As** to save with a new filename).
  prefs: []
  type: TYPE_NORMAL
- en: In Ubuntu and Raspberry Pi, you’ll need a program called GIMP (jump ahead to
    [page 203](ch13.xhtml#ch13fig02) in [Chapter 13](ch13.xhtml#ch13) if you don’t
    have this installed)—select **Image** ▸ **Scale Image** in GIMP, and then **File
    ▸ Export As** to save it with a new filename.
  prefs: []
  type: TYPE_NORMAL
- en: Import the time module and then use the sleep function (try with time.sleep(0.5))
    to make the photos appear more slowly.
  prefs: []
  type: TYPE_NORMAL
