["```py\nimport numpy as np\n```", "```py\n$ cat /etc/os-release\n```", "```py\n$ sudo apt-get install python3-pip\n\n$ sudo apt-get install python3-numpy\n\n$ sudo apt-get install python3-scipy\n\n$ sudo pip3 install matplotlib\n\n$ sudo pip3 install scikit-learn\n```", "```py\n>>> import numpy; numpy.__version__\n\n'1.17.4'\n\n>>> import scipy; scipy.__version__\n\n'1.4.1'\n\n>>> import matplotlib; matplotlib.__version__\n\n'3.1.2'\n\n>>> import sklearn; sklearn.__version__\n\n'0.23.2'\n```", "```py\n$ python3 --version\n\nPython 3.9.2\n```", "```py\n$ pip3 install numpy --user\n\n$ pip3 install scipy --user\n\n$ pip3 install matplotlib --user\n\n$ pip3 install scikit-learn --user\n```", "```py\n> pip install numpy\n\n> pip install scipy\n\n> pip install matplotlib\n\n> pip install sklearn\n```", "```py\n>>> import numpy as np\n\n>>> np.__version__\n\n'1.16.2'\n```", "```py\n>>> a = np.array([1,2,3,4])\n\n>>> a\n\n    array([1, 2, 3, 4])\n\n>>> a.size\n\n    4\n\n>>> a.shape\n\n    (4,)\n\n>>> a.dtype\n\n    dtype('int64')\n```", "```py\n>>> b = np.array([[1,2,3,4],[5,6,7,8]])\n\n>>> print(b)\n\n[[1 2 3 4]\n\n [5 6 7 8]]\n\n>>> b.shape\n\n(2, 4)\n```", "```py\n>>> a = np.array([1,2,3,4], dtype=\"uint8\")\n\n>>> a.dtype\n\ndtype('uint8')\n\n>>> a = np.array([1,2,3,4], dtype=\"int16\")\n\n>>> a = np.array([1,2,3,4], dtype=\"uint32\")\n\n>>> b = np.array([1,2,3,4.0])\n\n>>> b.dtype\n\ndtype('float64')\n\n>>> b = np.array([1,2,3,4.0], dtype=\"float32\")\n\n>>> c = np.array([111,222,333,444], dtype=\"uint8\")\n\n>>> c\n\narray([111, 222,  77, 188], dtype=uint8)\n```", "```py\n>>> d = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n>>> d.shape\n\n    (3, 3)\n\n >>> d.size\n\n    9\n\n>>> d\n\n    array([[1, 2, 3],\n\n           [4, 5, 6],\n\n           [7, 8, 9]])\n```", "```py\n>>> a = np.zeros((3,4), dtype=\"uint32\")\n\n>>> a[0,3] = 42\n\n>>> a[1,1] = 66\n\n>>> a\n\narray([[ 0,  0,  0, 42],\n\n       [ 0, 66,  0,  0],\n\n       [ 0,  0,  0,  0]], dtype=uint32)\n\n>>> b = 11*np.ones((3,1))\n\n>>> b\n\narray([[11.],\n\n       [11.],\n\n       [11.]])\n```", "```py\n>>> a = np.arange(12).reshape((3,4))\n\n>>> a\n\narray([[ 0,  1,  2,  3],\n\n       [ 4,  5,  6,  7],\n\n       [ 8,  9, 10, 11]])\n\n>>> a[1]\n\n array([4, 5, 6, 7])\n\n>>> a[1] = [44,55,66,77]\n\n>>> a\n\narray([[ 0,  1,  2,  3],\n\n       [44, 55, 66, 77],\n\n       [ 8,  9, 10, 11]])\n```", "```py\n>>> a[:2]\n\narray([[ 0,  1,  2,  3],\n\n       [44, 55, 66, 77]])\n\n>>> a[:2,:]\n\narray([[ 0,  1,  2,  3],\n\n       [44, 55, 66, 77]])\n\n>>> a[:2,:3]\n\narray([[ 0,  1,  2],\n\n       [44, 55, 66]])\n\n>>> b = np.arange(12)\n\n>>> b\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n>>> b[::2]\n\narray([ 0,  2,  4,  6,  8, 10])\n\n>>> b[::3]\n\narray([0, 3, 6, 9])\n\n>>> b[::-1]\n\narray([11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0])\n```", "```py\n>>> a = np.arange(24).reshape((4,3,2))\n\n>>> a\n\narray([[[ 0,  1],\n\n        [ 2,  3],\n\n        [ 4,  5]],\n\n       [[ 6,  7],\n\n        [ 8,  9],\n\n        [10, 11]],\n\n       [[12, 13],\n\n        [14, 15],\n\n        [16, 17]],\n\n       [[18, 19],\n\n        [20, 21],\n\n        [22, 23]]])\n```", "```py\n>>> a[1,:,:] = [[11,22],[33,44],[55,66]]\n\n>>> a\n\narray([[[ 0,  1],\n\n        [ 2,  3],\n\n        [ 4,  5]],\n\n       [[11, 22],\n\n        [33, 44],\n\n        [55, 66]],\n\n       [[12, 13],\n\n        [14, 15],\n\n        [16, 17]],\n\n       [[18, 19],\n\n        [20, 21],\n\n        [22, 23]]])\n```", "```py\n>>> a[2,...] = [[99,99],[99,99],[99,99]]\n\n>>> a\n\narray([[[ 0,  1],\n\n        [ 2,  3],\n\n        [ 4,  5]],\n\n       [[11, 22],\n\n        [33, 44],\n\n        [55, 66]],\n\n       [[99, 99],\n\n        [99, 99],\n\n        [99, 99]],\n\n       [[18, 19],\n\n        [20, 21],\n\n        [22, 23]]])\n```", "```py\n>>> a = np.random.randint(0,5,(3,4))\n\n>>> a\n\narray([[4, 2, 1, 3],\n\n       [4, 0, 2, 4],\n\n       [0, 4, 3, 1]])\n\n>>> np.save(\"random.npy\",a)\n\n>>> b = np.load(\"random.npy\")\n\n>>> b\n\narray([[4, 2, 1, 3],\n\n       [4, 0, 2, 4],\n\n       [0, 4, 3, 1]])\n```", "```py\n>>> import scipy\n\n>>> scipy.__version__\n\n'1.2.1'\n```", "```py\n>>> from scipy.stats import ttest_ind\n\n>>> a = np.random.normal(0,1,1000)\n\n>>> b = np.random.normal(0,0.5,1000)\n\n>>> c = np.random.normal(0.1,1,1000)\n\n>>> ttest_ind(a,b)\n\nTtest_indResult(statistic=-0.027161815649563964, pvalue=0.9783333836992686)\n\n>>> ttest_ind(a,c)\n\nTtest_indResult(statistic=-2.295584443456226, pvalue=0.021802794508002675)\n```", "```py\n>>> import numpy as np\n\n>>> import matplotlib.pylab as plt\n\n>>> x = np.random.random(100)\n\n>>> plt.plot(x)\n\n>>> plt.show()\n```", "```py\n>>> from mpl_toolkits.mplot3d import Axes3D\n\n>>> import matplotlib.pylab as plt\n\n>>> import numpy as np\n\n>>> x = np.random.random(20)\n\n>>> y = np.random.random(20)\n\n>>> z = np.random.random(20)\n\n>>> fig = plt.figure()\n\n>>> ax = fig.add_subplot(111, projection='3d')\n\n>>> ax.scatter(x,y,z)\n\n>>> plt.show()\n```", "```py\n   import numpy as np\n\n   from sklearn.datasets import load_digits\n\n   from sklearn.neural_network import MLPClassifier\n\n❶ d = load_digits()\n\n   digits = d[\"data\"]\n\n   labels = d[\"target\"]\n\n   N = 200\n\n❷ idx = np.argsort(np.random.random(len(labels)))\n\n   x_test, y_test = digits[idx[:N]], labels[idx[:N]]\n\n   x_train, y_train = digits[idx[N:]], labels[idx[N:]]\n\n❸ clf = MLPClassifier(hidden_layer_sizes=(128,))\n\n   clf.fit(x_train, y_train)\n\n   score = clf.score(x_test, y_test)\n\n   pred = clf.predict(x_test)\n\n   err = np.where(y_test != pred)[0]\n\n   print(\"score      : \", score)\n\n   print(\"errors:\")\n\n   print(\"  actual   : \", y_test[err])\n\n   print(\"  predicted: \", pred[err])\n```"]