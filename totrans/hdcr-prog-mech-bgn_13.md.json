["```py\nfrom tkinter import Tk\n\ntk = Tk()\ntk.title(\"Hello Tkinter\")\n\ntk.mainloop()\n```", "```py\n  from tkinter import Tk, Label, Entry, Button, StringVar\n\n  tk = Tk()\n  tk.title(\"Hello Tkinter\")\n\n➊ Label(tk, text='Enter your name:').grid(row=0, column=0)\n➋ name = StringVar()\n➌ Entry(tk, width=20, textvariable=name).grid(row=1, column=0)\n➍ Button(tk, text='Greet me').grid(row=1, column=1)\n\n  tk.mainloop()\n```", "```py\n  from tkinter import Tk, Label, Entry, Button, StringVar, messagebox\n\n  tk = Tk()\n  tk.title(\"Hello Tkinter\")\n\n➊ def greet_user():\n      messagebox.showinfo(\n         'Greetings',\n         f'Hello, {name.get()}'\n      )\n\n  Label(tk, text='Enter your name:').grid(row=0, column=0)\n  name = StringVar()\n  Entry(tk, width=20, textvariable=name).grid(row=1, column=0)\n  Button(\n     tk,\n     text='Greet me',\n   ➋ command=greet_user\n  ).grid(row=1, column=1)\n\ntk.mainloop()\n```", "```py\nfrom tkinter import Tk, Canvas\n\ntk = Tk()\ntk.title(\"Hello Canvas\")\n\ncanvas = Canvas(tk, width=600, height=600)\ncanvas.grid(row=0, column=0)\n\ntk.mainloop()\n```", "```py\n--snip--\n\ncanvas.create_line(0, 0, 300, 300)\n\ntk.mainloop()\n```", "```py\ncanvas.create_line(\n    0, 0, 300, 300,\n    width=3,\n    fill='#aa3355'\n)\n```", "```py\n--snip--\n\ncanvas.create_oval(\n    200, 200, 400, 400,\n    width=3,\n    outline='#aa3355'\n)\n\ntk.mainloop()\n```", "```py\ncanvas.create_oval(\n    200, 200, 500, 400,\n    width=3,\n    outline='#aa3355'\n)\n```", "```py\ncanvas.create_oval(\n    200, 200, 500, 400,\n    width=3,\n    outline='#aa3355',\n    fill='#cc3355',\n)\n```", "```py\n--snip--\n\ncanvas.create_rectangle(\n    40, 400, 500, 500,\n    width=3,\n    outline='#aa3355'\n)\n\ntk.mainloop()\n```", "```py\n--snip--\n\ncanvas.create_polygon(\n    [40, 200, 300, 450, 600, 0],\n    width=3,\n    outline='#aa3355',\n    fill=''\n)\n\ntk.mainloop()\n```", "```py\n--snip--\n\ncanvas.create_text(\n    300, 520,\n    text='This is a weird drawing',\n    fill='#aa3355',\n    font='Helvetica 20 bold'\n)\n\ntk.mainloop()\n```", "```py\nfrom tkinter import Tk, Canvas\n\ntk = Tk()\ntk.title(\"Hello Canvas\")\n\ncanvas = Canvas(tk, width=600, height=600)\ncanvas.grid(row=0, column=0)\n\ncanvas.create_line(\n    0, 0, 300, 300,\n    width=3,\n    fill='#aa3355'\n)\ncanvas.create_oval(\n    200, 200, 500, 400,\n    width=3,\n    outline='#aa3355'\n)\ncanvas.create_rectangle(\n    40, 400, 500, 500,\n    width=3,\n    outline='#aa3355'\n)\ncanvas.create_polygon(\n    [40, 200, 300, 450, 600, 0],\n    width=3,\n    outline='#aa3355',\n    fill=''\n)\ncanvas.create_text(\n    300, 520,\n    text='This is a weird drawing',\n    fill='#aa3355',\n    font='Helvetica 20 bold'\n)\n\ntk.mainloop()\n```", "```py\ncircle = Circle(Point(2, 5), 10)\ncanvas.draw_circle(circle)\n```", "```py\nfrom tkinter import Canvas\n\nfrom geom2d import AffineTransform\n\nclass CanvasDrawing:\n\n    def __init__(self, canvas: Canvas, transform: AffineTransform):\n        self.__canvas = canvas\n        self.outline_color = '#aa3355'\n        self.outline_width = 3\n        self.fill_color = ''\n        self.transform = transform\n\n    def clear_drawing(self):\n        self.__canvas.delete('all')\n```", "```py\nfrom tkinter import Canvas\n\nfrom geom2d import Segment, AffineTransform\n\nclass CanvasDrawing:\n   --snip--\n\n   def draw_segment(self, segment: Segment):\n       segment_t = self.transform.apply_to_segment(segment)\n       self.__canvas.create_line(\n           segment_t.start.x,\n           segment_t.start.y,\n           segment_t.end.x,\n           segment_t.end.y,\n           fill=self.outline_color,\n           width=self.outline_width\n       )\n```", "```py\nfrom functools import reduce\nfrom tkinter import Canvas\n\nfrom geom2d import Polygon, Segment, AffineTransform\n\nclass CanvasDrawing:\n    --snip--\n\n    def __draw_polygon(self, polygon: Polygon):\n        vertices = reduce(\n            list.__add__,\n            [[v.x, v.y] for v in polygon.vertices]\n        )\n\n        self.__canvas.create_polygon(\n            vertices,\n            fill=self.fill_color,\n            outline=self.outline_color,\n            width=self.outline_width\n        )\n```", "```py\nfrom functools import reduce\n```", "```py\nfrom geom2d import Polygon, Segment, AffineTransform\n```", "```py\n[[v.x, v.y] for v in polygon.vertices]\n```", "```py\n[[0, 10], [10, 0], [10, 10]]\n```", "```py\n[0, 10, 10, 0, 10, 10]\n```", "```py\n>>> [1, 2] + [3, 4]\n[1, 2, 3, 4]\n```", "```py\nfrom functools import reduce\nfrom tkinter import Canvas\n\nfrom geom2d import Circle, Polygon, Segment, Rect, AffineTransform\n\nclass CanvasDrawing:\n    --snip--\n\n   def draw_circle(self, circle: Circle, divisions=30):\n       self.__draw_polygon(\n           self.transform.apply_to_circle(circle, divisions)\n       )\n\n   def draw_rectangle(self, rect: Rect):\n       self.__draw_polygon(\n           self.transform.apply_to_rect(rect)\n       )\n\n   def draw_polygon(self, polygon: Polygon):\n       self.__draw_polygon(\n           self.transform.apply_to_polygon(polygon)\n       )\n```", "```py\nfrom geom2d import Circle, Polygon, Segment, Rect, AffineTransform\n```", "```py\nclass CanvasDrawing:\n    --snip--\n\n    def draw_arrow(\n            self,\n            segment: Segment,\n            length: float,\n            height: float\n    ):\n        director = segment.direction_vector\n        v_l = director.opposite().with_length(length)\n        v_h1 = director.perpendicular().with_length(height / 2.0)\n        v_h2 = v_h1.opposite()\n\n        self.draw_segment(segment)\n        self.draw_segment(\n            Segment(\n                segment.end,\n             ➊ segment.end.displaced(v_l + v_h1)\n            )\n        )\n        self.draw_segment(\n            Segment(\n                segment.end,\n             ➋ segment.end.displaced(v_l + v_h2)\n            )\n        )\n```", "```py\nfrom functools import reduce\nfrom tkinter import Canvas\n\nfrom geom2d import Circle, Polygon, Segment, Rect, AffineTransform\n\nclass CanvasDrawing:\n\n    def __init__(self, canvas: Canvas, transform: AffineTransform):\n        self.__canvas = canvas\n        self.outline_color = '#aa3355'\n        self.outline_width = 3\n        self.fill_color = ''\n        self.transform = transform\n\n    def clear_drawing(self):\n        self.__canvas.delete('all')\n\n    def draw_segment(self, segment: Segment):\n        segment_t = self.transform.apply_to_segment(segment)\n        self.__canvas.create_line(\n            segment_t.start.x,\n            segment_t.start.y,\n            segment_t.end.x,\n            segment_t.end.y,\n            outline=self.outline_color,\n            width=self.outline_width\n        )\n\n    def draw_circle(self, circle: Circle, divisions=30):\n        self.__draw_polygon(\n            self.transform.apply_to_circle(circle, divisions)\n        )\n\n    def draw_rectangle(self, rect: Rect):\n        self.__draw_polygon(\n            self.transform.apply_to_rect(rect)\n        )\n\n    def draw_polygon(self, polygon: Polygon):\n        self.__draw_polygon(\n            self.transform.apply_to_polygon(polygon)\n        )\n\n    def __draw_polygon(self, polygon: Polygon):\n        vertices = reduce(\n            list.__add__,\n            [[v.x, v.y] for v in polygon.vertices]\n        )\n\n        self.__canvas.create_polygon(\n            vertices,\n            fill=self.fill_color,\n            outline=self.outline_color,\n            width=self.outline_width\n        )\n\n    def draw_arrow(\n            self,\n            segment: Segment,\n            length: float,\n            height: float\n    ):\n        director = segment.direction_vector\n        v_l = director.opposite().with_length(length)\n        v_h1 = director.perpendicular().with_length(height / 2.0)\n        v_h2 = v_h1.opposite()\n\n        self.draw_segment(segment)\n        self.draw_segment(\n            Segment(\n                segment.end,\n                segment.end.displaced(v_l + v_h1)\n            )\n        )\n        self.draw_segment(\n            Segment(\n                segment.end,\n                segment.end.displaced(v_l + v_h2)\n            )\n        )\n```"]