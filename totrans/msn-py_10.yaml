- en: '**10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MAKE YOURSELF USEFUL**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You’ve added the props to the game, so in this chapter, you’ll add the code
    to enable astronauts to *use* objects and combine them to make new objects. These
    skills will be essential for your mission. You’ll get a chance to rehearse them,
    so you’re ready for any situation.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this chapter is simpler than some of the listings you’ve seen recently
    and contains the answers for many of the puzzles in the *Escape* game. So I don’t
    give away too many spoilers, I won’t explain every item and solution here. For
    example, sometimes you might see an object number in the code, but I won’t tell
    you the name of that object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get stuck playing the game, you could read this code and use it to work
    out which objects are which by referring to the `objects` dictionary (see [Listing
    5-6](ch05.xhtml#ch05list6) and [Listing 5-8](ch05.xhtml#ch05list8) in [Chapter
    5](ch05.xhtml#ch05)). That should be a last resort, though. You can solve all
    the puzzles by thinking like an astronaut. Ask yourself: What do you have access
    to that could be useful? How could you make something more useful?'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE KEYBOARD CONTROL FOR USING OBJECTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start by adding the keyboard control in the `game_loop()` function. Open
    *listing9-10.py*, your last listing in [Chapter 9](ch09.xhtml#ch09). We’ll build
    on this listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 10-1 shows the new instructions to add inside the `game_loop()` function.
    Add them after the keyboard controls for *drop* and *examine*, which you added
    in the previous chapter. These instructions start the `use_object()` function
    when the player presses the U key. Save the program as *listing10-1.py*. Don’t
    try running the program yet: it won’t do anything new, but it will crash if you
    press the U key.'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-1.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-1: Adding the keyboard control for using objects*'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING STANDARD MESSAGES FOR USING OBJECTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function for using objects is long, so I’ve given it its own section in
    the program. Place the new `USE OBJECTS` section after the `PROP INTERACTIONS`
    section that you added in [Chapter 9](ch09.xhtml#ch09). [Listing 10-2](ch10.xhtml#ch10list2)
    shows the start of this new section. Add this code after the `examine_object()`
    function ends but before the `START` section.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-2.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-2: Adding the first instructions for using objects*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 10-2](ch10.xhtml#ch10list2) shows the first part of the `use_object()`
    function. We’ll flesh this out in further listings in this chapter. At the end
    of the function, the program shows players a message to tell them what happened
    when they tried to use the object ➐. That message will be in the `use_message`
    variable. At the start of this function, we set it up as an error message ➊. Later
    on, it will be changed to a message of success if they used an object.'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the objects have no real function in the game but will reward the player
    with a message when they try to use them. These messages could include clues as
    well as add to the game story. The dictionary `standard_responses` contains messages
    to show players when they use certain objects ➋. The dictionary key is the object
    number. For example, if they want to use the bed (lazy bones!), which is object
    4, they see a message that says, “You can’t take this lying down!”
  prefs: []
  type: TYPE_NORMAL
- en: 'The variable `item_the_player_is_on` stores the object number at the player’s
    position in the room ➌. Players can use objects they are carrying or standing
    on. We set up a loop that goes through a list that contains two items: the item
    number the player is standing on and the item number the player is carrying ➍.
    If either of them is a key for the `standard_responses` dictionary ➎, the `use_message`
    is updated to the object’s message from that dictionary ➏. The program prioritizes
    items you’re carrying over items you’re standing on if they both have standard
    messages.'
  prefs: []
  type: TYPE_NORMAL
- en: Save your file as *listing10-2.py*. Run it using pgzrun listing10-2.py. To test
    that it works, press U to use the yoyo you’re carrying.
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE GAME PROGRESS VARIABLES**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few new variables we need to add to the program to store important
    data about the player’s progress in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '`air`, which stores how much air you have available, as a percentage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy`, which stores your energy, as a percentage, and will be reduced if
    you injure yourself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`suit_stitched`, which stores a `True` or `False` value, depending on whether
    the suit has been repaired'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`air_fixed`, which stores a `True` or `False` value, depending on whether the
    air tank has been fixed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the variables to the end of the `VARIABLES` section, as shown in [Listing
    10-3](ch10.xhtml#ch10list3). Save your updated program as *listing10-3.py*. This
    program won’t do anything new if you run it: we’ve set up some variables but aren’t
    doing anything with them yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-3.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-3: Adding the game progress variables*'
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE ACTIONS FOR SPECIFIC OBJECTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next stage in the `use_object()` function is to check particular objects
    to see if they have actions that can be performed with them. These checks will
    override any standard messages that might have been set up earlier and are shown
    in [Listing 10-4](ch10.xhtml#ch10list4). Because these instructions are inside
    the `use_object()` function, they are indented by at least four spaces. Save your
    program as *listing10-4.py*. Run it using pgzrun listing10-4.py.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-4.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-4: Adding the ability to use certain objects*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 10-4](ch10.xhtml#ch10list4) includes a series of instructions that
    check whether the object that’s being used is a particular object number. If so,
    the instructions for that object are carried out.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the player is carrying or standing on object 70 ➊, which is
    an MP3 player, they’ll see a message that says “Banging tunes!” and hear some
    music. If the player is using the computer ➋, the message shown is made by combining
    information from the `air` and `energy` variables, and adding an alert if the
    suit or air bottle is faulty. There’s also a computer speech sound effect here
    that says “status report!”
  prefs: []
  type: TYPE_NORMAL
- en: I’ve included a `return` instruction at the end of this set of instructions
    ➍, which prevents the player from accidentally using another object when they
    intended to use the computer. If we didn’t include this `return` instruction,
    the player might end up using another prop that they’re carrying instead of the
    computer. Keeping the controls simple means there can be some ambiguity about
    what the player intended to use, but the game is designed to prioritize results
    that help the player complete the game.
  prefs: []
  type: TYPE_NORMAL
- en: In a couple of places, I’ve used the short description from the `objects` dictionary
    instead of typing the name of the object into the string ➎. That’s to prevent
    you from seeing any spoilers in the code!
  prefs: []
  type: TYPE_NORMAL
- en: The `\` symbol at the end of a line ➌ tells Python that the code continues on
    the next line. Some of the lines here are quite long, so I’ve used this symbol
    to break them up and to fit them on the book page.
  prefs: []
  type: TYPE_NORMAL
- en: Try out some of the new code by walking into one of the computer terminals and
    pressing the U key. You’ll see a status update. If you can find the MP3 player,
    you can listen to that too.
  prefs: []
  type: TYPE_NORMAL
- en: '**RED ALERT**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Be particularly careful when you’re entering the object numbers and the rest
    of the code in [Listing 10-4](ch10.xhtml#ch10list4). If you make a mistake here,
    you might not be able to complete the puzzles in the game!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**COMBINING OBJECTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of the puzzles in the game require you to use objects together. For example,
    you might use one object as a tool to do something to the other object, or you
    might join two objects together. For instance, one of the puzzles requires you
    to insert a GPS module into a positioning system. When you find the two parts,
    you need to combine them to make a working positioning system. To use two objects
    together, you select one in your inventory and walk on or into the other one.
    You might need to drop an object from your inventory onto the floor so you can
    work on it with another object you’re carrying.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Escape* game engine, combinations are called *recipes*. A single recipe
    contains three object numbers in a list. The first two are the items that are
    combined, and the third one is the object number they make when they’re combined.
    Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Object 73 (a GPS module) plus object 74 (a positioning system) makes object
    75 (a working positioning system).
  prefs: []
  type: TYPE_NORMAL
- en: When you combine objects, the new object goes into your inventory. The objects
    you combined are removed from the game if they’re props. Sometimes one will be
    a piece of scenery and so will remain in the game.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 10-5](ch10.xhtml#ch10list5) shows you the list of recipes. Add it
    to the end of the `PROPS` part of your program where the information for props
    is set up. Save your file as *listing10-5.py*. The listing shouldn’t do anything
    new yet if you run it, but it will check that the new data is correct.'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-5.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-5: Adding recipes to the* Escape *game*'
  prefs: []
  type: TYPE_NORMAL
- en: Now add the code to use the recipes near the end of the `use_object()` function,
    as shown in [Listing 10-6](ch10.xhtml#ch10list6). Add it to your `use_object()`
    function, and save the program as *listing10-5.py*. When you run the program,
    using pgzrun listing10-5.py, you’ll be able to combine objects.
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-6.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-6: Combining objects in the game*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might find you can work out what’s going on in this new code: it mostly
    combines ideas you’ve seen before. We use a loop to go through all the items in
    the `RECIPES` list ➊, and a new recipe goes into the `recipe` list each time.
    We put the ingredients and combination object numbers into variables to make the
    function easier to understand ➋.'
  prefs: []
  type: TYPE_NORMAL
- en: The program checks whether the player is carrying the first ingredient and standing
    on the second one ➌, or the other way around ➍. If so, the use message is updated
    to tell them what they combined and what they made ➎.
  prefs: []
  type: TYPE_NORMAL
- en: When the combined object is made, it usually replaces the ingredient objects.
    If one of the objects is scenery instead of a prop, though, it remains in the
    game. So the program checks whether the item the player is on is a prop ➏, and
    if so, its room number is set to 0, removing it from the game ➐. If it’s a prop,
    it’s also deleted from the room map for the current room ➑.
  prefs: []
  type: TYPE_NORMAL
- en: The object that was being carried is removed from the player’s inventory ➒,
    and the newly created object is added to it ➓.
  prefs: []
  type: TYPE_NORMAL
- en: '**TRAINING MISSION #1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do a simple test to check that the combination code is working. We’ll
    need to hack the code a bit for this test. In the `PROPS` section, change the
    line that sets up `in_my_pockets` so you’re carrying items 73 and 74:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the program: you’ll be carrying the GPS module and the positioning
    system. Drop one of them and stand on it. Select the other one in your inventory,
    and press U. The items should be combined into a working GPS system! You can use
    it to see your location in the game. To be certain the code is working, try switching
    the objects so you’re standing on the other one this time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you change the code back again afterward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**ADDING THE GAME COMPLETION SEQUENCE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is one final function in the `USE OBJECTS` part of the program, which
    is a short animation that plays when the player completes the game: the astronaut
    takes off in the rescue ship. Add this function to the end of your `USE OBJECTS`
    section, as shown in [Listing 10-7](ch10.xhtml#ch10list7):'
  prefs: []
  type: TYPE_NORMAL
- en: '*listing10-7.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-7: Blast off!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**EXPLORING THE OBJECTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you can explore the objects you find in the space station and try using
    them to see what they do. Before you can find all the props, though, and get to
    work on the space station, you’ll need to work out how to open the safety doors
    that seal off parts of the space station. In the next chapter, you’ll complete
    the space station setup by engineering the door mechanism to open when you use
    the correct access pass.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use what you’ve learned in this chapter to add your own puzzles
    to the *Escape* game code. The simplest approach is to use standard messages ([Listing
    10-2](ch10.xhtml#ch10list2)) for clues and to use recipes ([Listing 10-5](ch10.xhtml#ch10list5))
    to combine objects. You can also add simple instructions ([Listing 10-4](ch10.xhtml#ch10list4))
    to see whether the player is carrying a particular object, and then increase their
    `air` or `energy` variables, display a message, or do something else in the game.
    Happy adventuring!
  prefs: []
  type: TYPE_NORMAL
- en: '**ARE YOU FIT TO FLY?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The instructions for using objects go into the
    `use_object()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `standard_responses` dictionary contains
    messages for when the player uses a particular object.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  For many objects, there are specific instructions
    to update different lists or variables when the player uses them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  The `RECIPES` list stores the details of how
    the player can combine objects in the game.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/box.jpg)  In a recipe, the first two items are ingredients,
    and the third item is what they make.'
  prefs: []
  type: TYPE_NORMAL
