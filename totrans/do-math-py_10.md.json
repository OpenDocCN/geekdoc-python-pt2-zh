["```py\nif __name__ == '__main__':\n    # Do something\n    func()\n```", "```py\n   # Find the factorial of a number\n   def fact(n):\n       p = 1\n       for i in range(1, n+1):\n           p = p*i\n       return p\n\n➊ print(__name__)\n\n   if __name__ == '__main__':\n       n = int(input('Enter an integer to find the factorial of: '))\n       f = fact(n)\n       print('Factorial of {0}: {1}'.format(n, f))\n```", "```py\n__main__\nEnter an integer to find the factorial of: 5\nFactorial of 5: 120\n```", "```py\nfrom factorial import fact\nif __name__ == '__main__':\n    print('Factorial of 5: {0}'.format(fact(5)))\n```", "```py\nfactorial\nFactorial of 5: 120\n```", "```py\n   >>> x = [1, 2, 3, 4]\n   >>> x_square = []\n➊ >>> for n in x:\n➋         x_square.append(n**2)\n   >>> x_square\n   [1, 4, 9, 16]\n```", "```py\n➌ >>> x_square = [n**2 for n in x]\n   >>> x_square\n   [1, 4, 9, 16]\n```", "```py\n# Find time intervals\nintervals = frange(0, t_flight, 0.001)\n# List of x and y coordinates\nx = []\ny = []\nfor t in intervals:\n    x.append(u*math.cos(theta)*t)\n    y.append(u*math.sin(theta)*t - 0.5*g*t*t)\n```", "```py\n# Find time intervals\nintervals = frange(0, t_flight, 0.001)\n# List of x and y coordinates\n\nx = [u*math.cos(theta)*t for t in intervals]\ny = [u*math.sin(theta)*t - 0.5*g*t*t for t in intervals]\n```", "```py\n>>> x = [1, 2, 3, 4]\n>>> x_square = [n**2 for n in x if n%2 == 0]\n>>> x_square\n[4, 16]\n```", "```py\n>>> d = {'key1': 5, 'key2': 20}\n```", "```py\n>>> d = {'key1': 5, 'key2': 20}\n>>> 'x' in d\nFalse\n```", "```py\n>>> d = {'key1': 5, 'key2': 20}\n>>> if 'x' in d:\n        print(d['x'])\nelse:\n        d['x'] = 1\n\n>>> d\n{'key1': 5, 'x': 1, 'key2': 20}\n```", "```py\n>>> d.get('x')\n1\n```", "```py\n>>> d.get('y', 0)\n0\n```", "```py\n>>> d['y'] = 1\n>>> d.get('y', 0)\n1\n```", "```py\n>>> d.keys()\ndict_keys(['key1', 'x', 'key2', 'y'])\n>>> d.values()\ndict_values([5, 1, 20, 1])\n```", "```py\n>>> d.items()\ndict_items([('key1', 5), ('x', 1), ('key2', 20), ('y', 1)])\n```", "```py\n>>> for k, v in d.items():\n        print(k, v)\n\nkey1 5\nx 1\nkey2 20\ny 1\n```", "```py\nimport math\ndef components(u, theta):\n    x = u*math.cos(theta)\n    y = u*math.sin(theta)\n    return x, y\n```", "```py\nif __name__ == '__main__':\n    theta = math.radians(45)\n    x, y = components(theta)\n```", "```py\nc = components(theta)\nx = c[0]\ny = c[1]\n```", "```py\nimport math\n\ndef components(theta):\n    x = math.cos(theta)\n    y = math.sin(theta)\n\n    return {'x': x, 'y': y}\n```", "```py\nif __name__ == '__main__':\n    theta = math.radians(45)\n    c = components(theta)\n    y = c['y']\n    x = c['x']\n    print(x, y)\n```", "```py\n   '''\n   Find the range using a dictionary to return values\n   '''\n   def find_range(numbers):\n       lowest = min(numbers)\n       highest = max(numbers)\n       # Find the range\n       r = highest-lowest\n       return {'lowest':lowest, 'highest':highest, 'range':r}\n\n   if __name__ == '__main__':\n       donations = [100, 60, 70, 900, 100, 200, 500, 500, 503, 600, 1000, 1200]\n       result = find_range(donations)\n➊     print('Lowest: {0} Highest: {1} Range: {2}'.\n              format(result['lowest'], result['highest'], result['range']))\n```", "```py\n>>> try:\n        int('1.1')\nexcept ValueError:\n        print('Failed to convert 1.1 to an integer')\n\nFailed to convert 1.1 to an integer\n```", "```py\n>>> try:\n        print(1/0)\nexcept ValueError:\n        print('Division unsuccessful')\n\nTraceback (most recent call last):\n  File \"<pyshell#66>\", line 2, in <module>\n    print(1/0)\nZeroDivisionError: division by zero\n```", "```py\ndef reciprocal(n):\n    try:\n        print(1/n)\n    except (ZeroDivisionError, TypeError):\n        print('You entered an invalid number')\n```", "```py\n>>> reciprocal(5)\n0.2\n```", "```py\n>>> reciprocal(0)\nEnter an integer: 0\nYou entered an invalid number\n```", "```py\n>>> reciprocal('1')\n```", "```py\ndef reciprocal(n):\n    try:\n        print(1/n)\n    except TypeError:\n        print('You must specify a number')\n    except ZeroDivisionError:\n        print('Division by 0 is invalid')\n\n>>> reciprocal(0)\nDivision by 0 is invalid\n>>> reciprocal('1')\nYou must specify a number\n```", "```py\n   if __name__ == '__main__':\n       try:\n           u = float(input('Enter the initial velocity (m/s): '))\n           theta = float(input('Enter the angle of projection (degrees): '))\n       except ValueError:\n           print('You entered an invalid input')\n➊     else:\n           draw_trajectory(u, theta)\n           plt.show()\n```", "```py\n100\n60\n70\n900\n100\n200\n500\n500\n503\n600\n1000\n1200\n```", "```py\n   def read_data(path):\n       numbers = []\n➊     f = open(path)\n➋     for line in f:\n           numbers.append(float(line))\n       f.close()\n       return numbers\n```", "```py\n   def read_data(path):\n       numbers = []\n➊     with open(path) as f:\n           for line in f:\n               numbers.append(float(line))\n➋     return numbers\n```", "```py\n   def read_data(path):\n       with open(path) as f:\n➊         lines = f.readlines()\n       numbers = [float(n) for n in lines]\n       return numbers\n```", "```py\nif __name__=='__main__':\n    data_file = input('Enter the path of the file: ')\n    data = read_data(data_file)\n    print(data)\n```", "```py\nEnter the path of the file: /home/amit/work/mydata2.txt\nTraceback (most recent call last):\n  File \"read_file.py\", line 11, in <module>\n    data = read_data(data_file)\n  File \"read_file.py\", line 4, in read_data\n    with open(path) as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/amit/work/\nmydata2.txt'\n```", "```py\ndef read_data(path):\n    numbers = []\n    try:\n        with open(path) as f:\n            for line in f:\n                numbers.append(float(line))\n    except FileNotFoundError:\n        print('File not found')\n    return numbers\n```", "```py\nEnter the path of the file: /home/amit/work/mydata2.txt\nFile not found\n```", "```py\n10\n20\n3o\n1/5\n5.6\n```", "```py\nEnter the path of the file: bad_data.txt\nTraceback (most recent call last):\n  File \"read_file.py\", line 13, in <module>\n    data = read_data(data_file)\n  File \"read_file.py\", line 6, in read_data\n    numbers.append(float(line))\nValueError: could not convert string to float: '3o\\n'\n```", "```py\n   def read_data(path):\n       numbers = []\n       try:\n           with open(path) as f:\n               for line in f:\n➊               try:\n➋                   n = float(line)\n                 except ValueError:\n                     print('Bad data: {0}'.format(line))\n➌                   break\n➍               numbers.append(n)\n       except FileNotFoundError:\n           print('File not found')\n       return numbers\n```", "```py\nEnter the path of the file: bad_data.txt\nBad data: 3o\n\n[10.0, 20.0]\n```", "```py\n   def read_data(path):\n       numbers = []\n       try:\n           with open(path) as f:\n               for line in f:\n                   try:\n                       n = float(line)\n                   except ValueError:\n                       print('Bad data: {0}'.format(line))\n➊                     continue\n                   numbers.append(n)\n       except FileNotFoundError:\n           print('File not found')\n       return numbers\n```", "```py\nBad data: 3o\n\nBad data: 1/5\n\n[10.0, 20.0, 5.6]\n```", "```py\n'''\nFunction to calculate the linear correlation coefficient\n'''\n\ndef find_corr_x_y(x,y):\n    # Size of each set\n    n = len(x)\n\n    # Find the sum of the products\n    prod=[]\n    for xi,yi in zip(x,y):\n        prod.append(xi*yi)\n\n    sum_prod_x_y = sum(prod)\n    sum_x = sum(x)\n    sum_y = sum(y)\n    squared_sum_x = sum_x**2\n    squared_sum_y = sum_y**2\n\n    x_square=[]\n    for xi in x:\n        x_square.append(xi**2)\n    x_square_sum = sum(x_square)\n\n    y_square=[]\n    for yi in y:\n        y_square.append(yi**2)\n    y_square_sum = sum(y_square)\n\n    numerator = n*sum_prod_x_y - sum_x*sum_y\n    denominator_term1 = n*x_square_sum - squared_sum_x\n    denominator_term2 = n*y_square_sum - squared_sum_y\n    denominator = (denominator_term1*denominator_term2)**0.5\n\n    correlation = numerator/denominator\n\n    return correlation\n```", "```py\nfrom correlation import find_corr_x_y\nif __name__ == '__main__':\n    high_school_math = [83, 85, 84, 96, 94, 86, 87, 97, 97, 85]\n    college_admission = [85, 87, 86, 97, 96, 88, 89, 98, 98, 87]\n    corr = find_corr_x_y(high_school_math, college_admission)\n    print('Correlation coefficient: {0}'.format(corr))\n```"]