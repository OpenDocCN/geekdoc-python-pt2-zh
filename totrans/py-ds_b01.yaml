- en: Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please note that index links to approximate location of each term.
  prefs: []
  type: TYPE_NORMAL
- en: '**Symbols**'
  prefs: []
  type: TYPE_NORMAL
- en: '`+` operator, [110](c07.xhtml#Page_110)'
  prefs: []
  type: TYPE_NORMAL
- en: '`[]` operator, [99](c06.xhtml#Page_99), [103](c06.xhtml#Page_103)'
  prefs: []
  type: TYPE_NORMAL
- en: '`**` operator, [111](c07.xhtml#Page_111)'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: '`abs()` function, [171](c10.xhtml#Page_171)'
  prefs: []
  type: TYPE_NORMAL
- en: acquisition, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: aggregation, [95](c06.xhtml#Page_95)
  prefs: []
  type: TYPE_NORMAL
- en: aggregation levels, [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: '`ALTER TABLE` operation, [78](c05.xhtml#Page_78)'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Reviews Exporter, [198](c12.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: analysis, [11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: analytical SQL, [82](c05.xhtml#Page_82)
  prefs: []
  type: TYPE_NORMAL
- en: analyzing location data, [145](c09.xhtml#Page_145)
  prefs: []
  type: TYPE_NORMAL
- en: antecedent, [176](c11.xhtml#Page_176), [183](c11.xhtml#Page_183)
  prefs: []
  type: TYPE_NORMAL
- en: API (application programming interface), [6](c01.xhtml#Page_6)–[7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: '`append()` method, [16](c02.xhtml#Page_16), [48](c03.xhtml#Page_48), [123](c07.xhtml#Page_123)'
  prefs: []
  type: TYPE_NORMAL
- en: application programming interface, [6](c01.xhtml#Page_6)–[7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: Apriori algorithm, [178](c11.xhtml#Page_178), [197](c12.xhtml#Page_197)
  prefs: []
  type: TYPE_NORMAL
- en: '`apriori()` function, [180](c11.xhtml#Page_180), [191](c11.xhtml#Page_191)'
  prefs: []
  type: TYPE_NORMAL
- en: '`arange()` function, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: arrays, [37](c03.xhtml#Page_37)
  prefs: []
  type: TYPE_NORMAL
- en: association analysis, [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: association rules, [176](c11.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: '`association_rules()` function, [181](c11.xhtml#Page_181), [187](c11.xhtml#Page_187),
    [192](c11.xhtml#Page_192)'
  prefs: []
  type: TYPE_NORMAL
- en: associative table, [125](c07.xhtml#Page_125)
  prefs: []
  type: TYPE_NORMAL
- en: '`astype()` method, [125](c07.xhtml#Page_125)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Axes` object, [133](c08.xhtml#Page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '`axis` parameter, [40](c03.xhtml#Page_40), [116](c07.xhtml#Page_116), [119](c07.xhtml#Page_119)'
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: bag of words (BoW), [54](c03.xhtml#Page_54)
  prefs: []
  type: TYPE_NORMAL
- en: bar charts, [129](c08.xhtml#Page_129)
  prefs: []
  type: TYPE_NORMAL
- en: bar graphs, [129](c08.xhtml#Page_129)
  prefs: []
  type: TYPE_NORMAL
- en: binary files, [62](c04.xhtml#Page_62)
  prefs: []
  type: TYPE_NORMAL
- en: '`bytes` object, [62](c04.xhtml#Page_62), [66](c04.xhtml#Page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: Cartopy, [139](c08.xhtml#Page_139)
  prefs: []
  type: TYPE_NORMAL
- en: categorical data, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: categories of data, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: children, syntactic, [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: classification, [53](c03.xhtml#Page_53), [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: '`classification_report()` function, [205](c12.xhtml#Page_205)'
  prefs: []
  type: TYPE_NORMAL
- en: '`classifier` object, [203](c12.xhtml#Page_203)'
  prefs: []
  type: TYPE_NORMAL
- en: cleansing data, [10](c01.xhtml#Page_10), [199](c12.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: Colab notebook, [139](c08.xhtml#Page_139)
  prefs: []
  type: TYPE_NORMAL
- en: '`collections` module, [20](c02.xhtml#Page_20)'
  prefs: []
  type: TYPE_NORMAL
- en: combining DataFrames, [98](c06.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: combining datasets, [109](c07.xhtml#Page_109)
  prefs: []
  type: TYPE_NORMAL
- en: combining dictionaries, [111](c07.xhtml#Page_111)
  prefs: []
  type: TYPE_NORMAL
- en: combining lists, [110](c07.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: combining tuples, [110](c07.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: common visualizations, [128](c08.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: concatenating DataFrames, [118](c07.xhtml#Page_118)
  prefs: []
  type: TYPE_NORMAL
- en: concatenation, [110](c07.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: along axis, [119](c07.xhtml#Page_119)
  prefs: []
  type: TYPE_NORMAL
- en: '`concat()` function, [118](c07.xhtml#Page_118), [120](c07.xhtml#Page_120)'
  prefs: []
  type: TYPE_NORMAL
- en: confidence, [177](c11.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: confusion matrix, [204](c12.xhtml#Page_204)
  prefs: []
  type: TYPE_NORMAL
- en: '`confusion_matrix()` method, [204](c12.xhtml#Page_204)'
  prefs: []
  type: TYPE_NORMAL
- en: consequent, [176](c11.xhtml#Page_176), [183](c11.xhtml#Page_183)
  prefs: []
  type: TYPE_NORMAL
- en: '`count()` method, [17](c02.xhtml#Page_17)'
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE TABLE` command, [79](c05.xhtml#Page_79)'
  prefs: []
  type: TYPE_NORMAL
- en: creating a list, [16](c02.xhtml#Page_16)
  prefs: []
  type: TYPE_NORMAL
- en: '*.csv*, [2](c01.xhtml#Page_2), [59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: '`csv.DictReader()` method, [61](c04.xhtml#Page_61)'
  prefs: []
  type: TYPE_NORMAL
- en: '`csv` module, [148](c09.xhtml#Page_148)'
  prefs: []
  type: TYPE_NORMAL
- en: '`csv.reader()` method, [61](c04.xhtml#Page_61)'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursor.executemany()` method, [84](c05.xhtml#Page_84)'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursor.execute()` method, [80](c05.xhtml#Page_80), [83](c05.xhtml#Page_83)'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursor` object, [80](c05.xhtml#Page_80)'
  prefs: []
  type: TYPE_NORMAL
- en: '**D**'
  prefs: []
  type: TYPE_NORMAL
- en: data, [1](c01.xhtml#Page_1)
  prefs: []
  type: TYPE_NORMAL
- en: database, [8](c01.xhtml#Page_8), [73](c05.xhtml#Page_73)
  prefs: []
  type: TYPE_NORMAL
- en: Data Definition Language (DDL), [75](c05.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame, [40](c03.xhtml#Page_40), [96](c06.xhtml#Page_96)
  prefs: []
  type: TYPE_NORMAL
- en: Data Manipulation Language (DML), [75](c05.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: data processing pipeline, [9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: data structures, [15](c02.xhtml#Page_15)
  prefs: []
  type: TYPE_NORMAL
- en: '`Date` column, [71](c04.xhtml#Page_71)'
  prefs: []
  type: TYPE_NORMAL
- en: '`date` type, [44](c03.xhtml#Page_44)'
  prefs: []
  type: TYPE_NORMAL
- en: '`del` command, [19](c02.xhtml#Page_19)'
  prefs: []
  type: TYPE_NORMAL
- en: '`deque` object, [19](c02.xhtml#Page_19)'
  prefs: []
  type: TYPE_NORMAL
- en: dictionary, [28](c02.xhtml#Page_28), [111](c07.xhtml#Page_111)
  prefs: []
  type: TYPE_NORMAL
- en: '`DictReader()`, [60](c04.xhtml#Page_60)'
  prefs: []
  type: TYPE_NORMAL
- en: '`distance()` function, [152](c09.xhtml#Page_152), [156](c09.xhtml#Page_156)'
  prefs: []
  type: TYPE_NORMAL
- en: '`DISTINCT()` function, [86](c05.xhtml#Page_86)'
  prefs: []
  type: TYPE_NORMAL
- en: '`doc` object, [25](c02.xhtml#Page_25)'
  prefs: []
  type: TYPE_NORMAL
- en: document-oriented database, [90](c05.xhtml#Page_90)
  prefs: []
  type: TYPE_NORMAL
- en: double-ended queue, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_duplicates()` method, [151](c09.xhtml#Page_151), [188](c11.xhtml#Page_188)'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop()` method, [120](c07.xhtml#Page_120)'
  prefs: []
  type: TYPE_NORMAL
- en: '`dtype` attribute, [41](c03.xhtml#Page_41)'
  prefs: []
  type: TYPE_NORMAL
- en: '`dtypes` property, [124](c07.xhtml#Page_124)'
  prefs: []
  type: TYPE_NORMAL
- en: '**E**'
  prefs: []
  type: TYPE_NORMAL
- en: element-wise operations, [38](c03.xhtml#Page_38)–[39](c03.xhtml#Page_39)
  prefs: []
  type: TYPE_NORMAL
- en: '`else` clause, list comprehension, [115](c07.xhtml#Page_115)'
  prefs: []
  type: TYPE_NORMAL
- en: '`enumerate()` function, [59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: evaluating the model, [203](c12.xhtml#Page_203)
  prefs: []
  type: TYPE_NORMAL
- en: '`except` clause, [80](c05.xhtml#Page_80)'
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  prefs: []
  type: TYPE_NORMAL
- en: features, [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: '`features` array, [210](c12.xhtml#Page_210)'
  prefs: []
  type: TYPE_NORMAL
- en: fields, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: '`Figure` object, [133](c08.xhtml#Page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '`file` object, [57](c04.xhtml#Page_57)'
  prefs: []
  type: TYPE_NORMAL
- en: files, [9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: '`fillna()` method, [124](c07.xhtml#Page_124), [172](c10.xhtml#Page_172)'
  prefs: []
  type: TYPE_NORMAL
- en: '`finally` clause, [80](c05.xhtml#Page_80)'
  prefs: []
  type: TYPE_NORMAL
- en: financial datasets, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: first-in, first-out (FIFO), [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: flat file, [59](c04.xhtml#Page_59)
  prefs: []
  type: TYPE_NORMAL
- en: foreign keys, [76](c05.xhtml#Page_76)
  prefs: []
  type: TYPE_NORMAL
- en: '`for` loop, [20](c02.xhtml#Page_20), [25](c02.xhtml#Page_25), [34](c02.xhtml#Page_34),
    [115](c07.xhtml#Page_115)'
  prefs: []
  type: TYPE_NORMAL
- en: '`FormatStrFormatter()` function, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`frozenset.union()` method, [187](c11.xhtml#Page_187)'
  prefs: []
  type: TYPE_NORMAL
- en: '**G**'
  prefs: []
  type: TYPE_NORMAL
- en: generating association rules, [181](c11.xhtml#Page_181)
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding API, [146](c09.xhtml#Page_146)
  prefs: []
  type: TYPE_NORMAL
- en: geographical coordinates, [146](c09.xhtml#Page_146)
  prefs: []
  type: TYPE_NORMAL
- en: geopy, [150](c09.xhtml#Page_150)
  prefs: []
  type: TYPE_NORMAL
- en: geopy library, [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: geospatial data, [137](c08.xhtml#Page_137), [139](c08.xhtml#Page_139)
  prefs: []
  type: TYPE_NORMAL
- en: '`get_data_stooq()` method, [71](c04.xhtml#Page_71), [207](c12.xhtml#Page_207)'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_group()` method, [107](c06.xhtml#Page_107)'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_location()` handler, [148](c09.xhtml#Page_148)'
  prefs: []
  type: TYPE_NORMAL
- en: getting data, [207](c12.xhtml#Page_207)
  prefs: []
  type: TYPE_NORMAL
- en: Google Colab, [139](c08.xhtml#Page_139)
  prefs: []
  type: TYPE_NORMAL
- en: googlemaps library, [146](c09.xhtml#Page_146)
  prefs: []
  type: TYPE_NORMAL
- en: '`google_translator` module, [200](c12.xhtml#Page_200)'
  prefs: []
  type: TYPE_NORMAL
- en: google_trans_new library, [199](c12.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: '`groupby()` function, [52](c03.xhtml#Page_52), [69](c04.xhtml#Page_69), [100](c06.xhtml#Page_100),
    [106](c06.xhtml#Page_106)'
  prefs: []
  type: TYPE_NORMAL
- en: GroupBy object, [52](c03.xhtml#Page_52)
  prefs: []
  type: TYPE_NORMAL
- en: '`groupby` operation, [69](c04.xhtml#Page_69)'
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs: []
  type: TYPE_NORMAL
- en: head, syntactic, [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: heatmap, [183](c11.xhtml#Page_183)
  prefs: []
  type: TYPE_NORMAL
- en: hierarchical index, [100](c06.xhtml#Page_100)
  prefs: []
  type: TYPE_NORMAL
- en: '`histogram()` function, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: histograms, [130](c08.xhtml#Page_130)
  prefs: []
  type: TYPE_NORMAL
- en: '`history()` method, [83](c05.xhtml#Page_83)'
  prefs: []
  type: TYPE_NORMAL
- en: '`how` parameter, [48](c03.xhtml#Page_48)'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP (HyperText Transfer Protocol), [63](c04.xhtml#Page_63)
  prefs: []
  type: TYPE_NORMAL
- en: HTTP headers, [64](c04.xhtml#Page_64)
  prefs: []
  type: TYPE_NORMAL
- en: HTTP request methods, [64](c04.xhtml#Page_64)
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPResponse` object, [65](c04.xhtml#Page_65)–[66](c04.xhtml#Page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  prefs: []
  type: TYPE_NORMAL
- en: '`if` clause, list comprehension, [114](c07.xhtml#Page_114)'
  prefs: []
  type: TYPE_NORMAL
- en: '`iloc` property, [42](c03.xhtml#Page_42)'
  prefs: []
  type: TYPE_NORMAL
- en: '`imshow()` method, [184](c11.xhtml#Page_184)'
  prefs: []
  type: TYPE_NORMAL
- en: independent variables, [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: '`index.isin()` method, [102](c06.xhtml#Page_102), [105](c06.xhtml#Page_105)'
  prefs: []
  type: TYPE_NORMAL
- en: inner list comprehension, [113](c07.xhtml#Page_113)
  prefs: []
  type: TYPE_NORMAL
- en: inner parameter, [49](c03.xhtml#Page_49)
  prefs: []
  type: TYPE_NORMAL
- en: input and output in machine learning, [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: '`insert_many()` method, [92](c05.xhtml#Page_92)'
  prefs: []
  type: TYPE_NORMAL
- en: '`insert_one()` method, [92](c05.xhtml#Page_92)'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSERT` statement, [83](c05.xhtml#Page_83)–[84](c05.xhtml#Page_84)'
  prefs: []
  type: TYPE_NORMAL
- en: '`intersection()` method, [33](c02.xhtml#Page_33)'
  prefs: []
  type: TYPE_NORMAL
- en: irregular time series, [162](c10.xhtml#Page_162)
  prefs: []
  type: TYPE_NORMAL
- en: itemsets, [176](c11.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: '`itertuples()` method, [159](c09.xhtml#Page_159)'
  prefs: []
  type: TYPE_NORMAL
- en: '**J**'
  prefs: []
  type: TYPE_NORMAL
- en: joining two DataFrames, [122](c07.xhtml#Page_122)
  prefs: []
  type: TYPE_NORMAL
- en: '`join()` method, [47](c03.xhtml#Page_47)–[48](c03.xhtml#Page_48), [112](c07.xhtml#Page_112),
    [118](c07.xhtml#Page_118), [208](c12.xhtml#Page_208)'
  prefs: []
  type: TYPE_NORMAL
- en: JSON, [4](c01.xhtml#Page_4), [31](c02.xhtml#Page_31), [61](c04.xhtml#Page_61),
    [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: '`json.dump()` method, [32](c02.xhtml#Page_32)'
  prefs: []
  type: TYPE_NORMAL
- en: '`json.dumps()` method, [46](c03.xhtml#Page_46)'
  prefs: []
  type: TYPE_NORMAL
- en: '`json.load()` method, [32](c02.xhtml#Page_32), [61](c04.xhtml#Page_61)'
  prefs: []
  type: TYPE_NORMAL
- en: '`json.loads()` method, [66](c04.xhtml#Page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: '`json` module, [61](c04.xhtml#Page_61)'
  prefs: []
  type: TYPE_NORMAL
- en: '`json_normalize()` method, [68](c04.xhtml#Page_68), [70](c04.xhtml#Page_70)'
  prefs: []
  type: TYPE_NORMAL
- en: '**K**'
  prefs: []
  type: TYPE_NORMAL
- en: key-value method, [8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: key-value pairs, [28](c02.xhtml#Page_28), [88](c05.xhtml#Page_88), [112](c07.xhtml#Page_112)
  prefs: []
  type: TYPE_NORMAL
- en: key-value store, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: '**L**'
  prefs: []
  type: TYPE_NORMAL
- en: '`LAG()` function, [85](c05.xhtml#Page_85)'
  prefs: []
  type: TYPE_NORMAL
- en: lambda function, [31](c02.xhtml#Page_31), [152](c09.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: last-in, first-out (LIFO), [20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: left join, [48](c03.xhtml#Page_48)
  prefs: []
  type: TYPE_NORMAL
- en: '`len()` function, [19](c02.xhtml#Page_19)'
  prefs: []
  type: TYPE_NORMAL
- en: lift, [178](c11.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: line charts, [128](c08.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: line graphs, [128](c08.xhtml#Page_128)
  prefs: []
  type: TYPE_NORMAL
- en: '`linewidth` parameter, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: list, [16](c02.xhtml#Page_16), [96](c06.xhtml#Page_96), [110](c07.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: list comprehension, [13](c01.xhtml#Page_13), [23](c02.xhtml#Page_23), [158](c09.xhtml#Page_158),
    [186](c11.xhtml#Page_186)
  prefs: []
  type: TYPE_NORMAL
- en: '`list()` function, [159](c09.xhtml#Page_159)'
  prefs: []
  type: TYPE_NORMAL
- en: '`list.index()` method, [17](c02.xhtml#Page_17)'
  prefs: []
  type: TYPE_NORMAL
- en: '`list.insert()` method, [17](c02.xhtml#Page_17)'
  prefs: []
  type: TYPE_NORMAL
- en: list object methods, [16](c02.xhtml#Page_16)
  prefs: []
  type: TYPE_NORMAL
- en: list of dictionaries, [29](c02.xhtml#Page_29)
  prefs: []
  type: TYPE_NORMAL
- en: list of tuples, [27](c02.xhtml#Page_27), [96](c06.xhtml#Page_96)–[97](c06.xhtml#Page_97),
    [150](c09.xhtml#Page_150)
  prefs: []
  type: TYPE_NORMAL
- en: location coordinates, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: location data, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: '`loc` property, [42](c03.xhtml#Page_42)'
  prefs: []
  type: TYPE_NORMAL
- en: logistic regression, [55](c03.xhtml#Page_55)
  prefs: []
  type: TYPE_NORMAL
- en: '`LogisticRegression` classifier, [203](c12.xhtml#Page_203), [210](c12.xhtml#Page_210)'
  prefs: []
  type: TYPE_NORMAL
- en: '**M**'
  prefs: []
  type: TYPE_NORMAL
- en: machine learning, [53](c03.xhtml#Page_53), [193](c12.xhtml#Page_193)
  prefs: []
  type: TYPE_NORMAL
- en: extensions (mlxtend), [178](c11.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: many-to-many join, [52](c03.xhtml#Page_52), [125](c07.xhtml#Page_125)
  prefs: []
  type: TYPE_NORMAL
- en: market basket analysis, [175](c11.xhtml#Page_175)
  prefs: []
  type: TYPE_NORMAL
- en: matching table, [125](c07.xhtml#Page_125)
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib, [127](c08.xhtml#Page_127), [131](c08.xhtml#Page_131)
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib.pyplot` module, [131](c08.xhtml#Page_131)'
  prefs: []
  type: TYPE_NORMAL
- en: '`mean()` function, [52](c03.xhtml#Page_52)'
  prefs: []
  type: TYPE_NORMAL
- en: '`mean()` method, [52](c03.xhtml#Page_52)'
  prefs: []
  type: TYPE_NORMAL
- en: '`merge()` method, [47](c03.xhtml#Page_47), [51](c03.xhtml#Page_51), [98](c06.xhtml#Page_98)–[99](c06.xhtml#Page_99),
    [112](c07.xhtml#Page_112), [118](c07.xhtml#Page_118), [126](c07.xhtml#Page_126)'
  prefs: []
  type: TYPE_NORMAL
- en: '`min()` function, [152](c09.xhtml#Page_152)'
  prefs: []
  type: TYPE_NORMAL
- en: mlxtend library, [178](c11.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: '`MongoClient()` constructor, [91](c05.xhtml#Page_91)'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB, [90](c05.xhtml#Page_90)
  prefs: []
  type: TYPE_NORMAL
- en: '`mset()` method, [89](c05.xhtml#Page_89)'
  prefs: []
  type: TYPE_NORMAL
- en: MultiIndex, [101](c06.xhtml#Page_101)
  prefs: []
  type: TYPE_NORMAL
- en: keys, [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: multilevel index, [100](c06.xhtml#Page_100)
  prefs: []
  type: TYPE_NORMAL
- en: multivariate time series, [167](c10.xhtml#Page_167)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL, [74](c05.xhtml#Page_74)–[75](c05.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Connector/Python driver, [79](c05.xhtml#Page_79)
  prefs: []
  type: TYPE_NORMAL
- en: MySQL database, [163](c10.xhtml#Page_163)
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql>` prompt, [79](c05.xhtml#Page_79), [85](c05.xhtml#Page_85)'
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  prefs: []
  type: TYPE_NORMAL
- en: named entity recognition (NER), [11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: '`NaN`, [48](c03.xhtml#Page_48), [124](c07.xhtml#Page_124)–[125](c07.xhtml#Page_125),
    [165](c10.xhtml#Page_165), [184](c11.xhtml#Page_184), [190](c11.xhtml#Page_190)'
  prefs: []
  type: TYPE_NORMAL
- en: natural language processing (NLP), [3](c01.xhtml#Page_3), [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: with Python and spaCy, [27](c02.xhtml#Page_27)
  prefs: []
  type: TYPE_NORMAL
- en: News API, [10](c01.xhtml#Page_10), [66](c04.xhtml#Page_66)
  prefs: []
  type: TYPE_NORMAL
- en: '`nlp` pipeline, [22](c02.xhtml#Page_22)'
  prefs: []
  type: TYPE_NORMAL
- en: '`nltk.sentiment` package, [11](c01.xhtml#Page_11)'
  prefs: []
  type: TYPE_NORMAL
- en: '`None` entry, [115](c07.xhtml#Page_115)'
  prefs: []
  type: TYPE_NORMAL
- en: nonrelational databases, [74](c05.xhtml#Page_74), [88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: nonspatial attributes, [156](c09.xhtml#Page_156)
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL, [8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: database, [88](c05.xhtml#Page_88)
  prefs: []
  type: TYPE_NORMAL
- en: '`NOT NULL`, [78](c05.xhtml#Page_78)'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.amax()`, [40](c03.xhtml#Page_40)'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.average()`, [40](c03.xhtml#Page_40)'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.median()`, [40](c03.xhtml#Page_40)'
  prefs: []
  type: TYPE_NORMAL
- en: numerical data, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: NumPy, [37](c03.xhtml#Page_37)
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.append()` function, [117](c07.xhtml#Page_117)'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy array, [38](c03.xhtml#Page_38), [210](c12.xhtml#Page_210)
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.concatenate()` function, [116](c07.xhtml#Page_116)'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy’s `amax()` function, [40](c03.xhtml#Page_40)
  prefs: []
  type: TYPE_NORMAL
- en: NumPy statistical functions, [39](c03.xhtml#Page_39)
  prefs: []
  type: TYPE_NORMAL
- en: '**O**'
  prefs: []
  type: TYPE_NORMAL
- en: one-hot encoded Boolean array, [179](c11.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: one-liner, [13](c01.xhtml#Page_13)
  prefs: []
  type: TYPE_NORMAL
- en: one-to-many join, [50](c03.xhtml#Page_50)
  prefs: []
  type: TYPE_NORMAL
- en: one-to-one join, [47](c03.xhtml#Page_47)
  prefs: []
  type: TYPE_NORMAL
- en: online transaction processing (OLTP), [74](c05.xhtml#Page_74)
  prefs: []
  type: TYPE_NORMAL
- en: '`open()` function, [9](c01.xhtml#Page_9), [57](c04.xhtml#Page_57), [60](c04.xhtml#Page_60),
    [63](c04.xhtml#Page_63)'
  prefs: []
  type: TYPE_NORMAL
- en: openpyxl library, [189](c11.xhtml#Page_189)
  prefs: []
  type: TYPE_NORMAL
- en: '`OVER` clause, [85](c05.xhtml#Page_85)'
  prefs: []
  type: TYPE_NORMAL
- en: '**P**'
  prefs: []
  type: TYPE_NORMAL
- en: pandas, [40](c03.xhtml#Page_40)
  prefs: []
  type: TYPE_NORMAL
- en: pandas-datareader, [71](c04.xhtml#Page_71)
  prefs: []
  type: TYPE_NORMAL
- en: parse tree, [8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: '`PARTITION BY` clause, [85](c05.xhtml#Page_85)'
  prefs: []
  type: TYPE_NORMAL
- en: pie charts, [130](c08.xhtml#Page_130)
  prefs: []
  type: TYPE_NORMAL
- en: '`pip` command, [7](c01.xhtml#Page_7)'
  prefs: []
  type: TYPE_NORMAL
- en: '`pivot()` method, [183](c11.xhtml#Page_183)'
  prefs: []
  type: TYPE_NORMAL
- en: plaintext files, [9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: '`plot()` method, [137](c08.xhtml#Page_137)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.bar()` function, [133](c08.xhtml#Page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.pie()` function, [133](c08.xhtml#Page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.plot()` function, [132](c08.xhtml#Page_132)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.show()` function, [132](c08.xhtml#Page_132)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.subplots()` function, [140](c08.xhtml#Page_140)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.text()` method, [142](c08.xhtml#Page_142)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.xlabel()` function, [132](c08.xhtml#Page_132)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.ylabel()` function, [132](c08.xhtml#Page_132)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.yticks()` method, [138](c08.xhtml#Page_138)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Point` class, [153](c09.xhtml#Page_153)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Point` object, [156](c09.xhtml#Page_156)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Polygon` class, [153](c09.xhtml#Page_153)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Polygon` object, [156](c09.xhtml#Page_156)'
  prefs: []
  type: TYPE_NORMAL
- en: polygons, [153](c09.xhtml#Page_153)
  prefs: []
  type: TYPE_NORMAL
- en: '`popleft()` method, [20](c02.xhtml#Page_20)'
  prefs: []
  type: TYPE_NORMAL
- en: '`predict()` method, [204](c12.xhtml#Page_204)'
  prefs: []
  type: TYPE_NORMAL
- en: previously unseen data, [197](c12.xhtml#Page_197)
  prefs: []
  type: TYPE_NORMAL
- en: primary keys, [76](c05.xhtml#Page_76)
  prefs: []
  type: TYPE_NORMAL
- en: Pythonic way, [13](c01.xhtml#Page_13)
  prefs: []
  type: TYPE_NORMAL
- en: '**Q**'
  prefs: []
  type: TYPE_NORMAL
- en: queue abstract data type, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  prefs: []
  type: TYPE_NORMAL
- en: '`rb` parameter, [62](c04.xhtml#Page_62)'
  prefs: []
  type: TYPE_NORMAL
- en: '`read_csv()` method, [54](c03.xhtml#Page_54), [138](c08.xhtml#Page_138)'
  prefs: []
  type: TYPE_NORMAL
- en: '`reader()` method, [60](c04.xhtml#Page_60)'
  prefs: []
  type: TYPE_NORMAL
- en: reader methods of pandas, [45](c03.xhtml#Page_45)
  prefs: []
  type: TYPE_NORMAL
- en: '`read_json()` method, [46](c03.xhtml#Page_46)'
  prefs: []
  type: TYPE_NORMAL
- en: '`read()` method, [62](c04.xhtml#Page_62)'
  prefs: []
  type: TYPE_NORMAL
- en: '`read_sql()` method, [87](c05.xhtml#Page_87)'
  prefs: []
  type: TYPE_NORMAL
- en: record, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: in a database, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: Redis, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: regression, [53](c03.xhtml#Page_53), [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: relational databases, [74](c05.xhtml#Page_74)
  prefs: []
  type: TYPE_NORMAL
- en: '`rename()` method, [69](c04.xhtml#Page_69)'
  prefs: []
  type: TYPE_NORMAL
- en: '`request()` method, [65](c04.xhtml#Page_65)'
  prefs: []
  type: TYPE_NORMAL
- en: requests, HTTP, [63](c04.xhtml#Page_63)
  prefs: []
  type: TYPE_NORMAL
- en: '`requests.get()`, [67](c04.xhtml#Page_67)'
  prefs: []
  type: TYPE_NORMAL
- en: Requests library, [67](c04.xhtml#Page_67)
  prefs: []
  type: TYPE_NORMAL
- en: '`reset_index()` method, [45](c03.xhtml#Page_45), [69](c04.xhtml#Page_69), [83](c05.xhtml#Page_83)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Response` object, [67](c04.xhtml#Page_67)'
  prefs: []
  type: TYPE_NORMAL
- en: responses, HTTP, [63](c04.xhtml#Page_63)
  prefs: []
  type: TYPE_NORMAL
- en: right join, [115](c07.xhtml#Page_115), [122](c07.xhtml#Page_122)
  prefs: []
  type: TYPE_NORMAL
- en: '`rolling()` method, [166](c10.xhtml#Page_166)'
  prefs: []
  type: TYPE_NORMAL
- en: rolling window calculations, [166](c10.xhtml#Page_166)
  prefs: []
  type: TYPE_NORMAL
- en: '**S**'
  prefs: []
  type: TYPE_NORMAL
- en: '`scatter()` method, [141](c08.xhtml#Page_141)'
  prefs: []
  type: TYPE_NORMAL
- en: scikit-learn, [52](c03.xhtml#Page_52)
  prefs: []
  type: TYPE_NORMAL
- en: '`select()` function, [210](c12.xhtml#Page_210)'
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT` statement, [81](c05.xhtml#Page_81)'
  prefs: []
  type: TYPE_NORMAL
- en: semistructured data, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: sentiment analysis, [11](c01.xhtml#Page_11), [198](c12.xhtml#Page_198)
  prefs: []
  type: TYPE_NORMAL
- en: series, [40](c03.xhtml#Page_40)
  prefs: []
  type: TYPE_NORMAL
- en: '`Series()` constructor, [43](c03.xhtml#Page_43)'
  prefs: []
  type: TYPE_NORMAL
- en: method, [41](c03.xhtml#Page_41)
  prefs: []
  type: TYPE_NORMAL
- en: '`setdefault()` method, [29](c02.xhtml#Page_29), [35](c02.xhtml#Page_35)'
  prefs: []
  type: TYPE_NORMAL
- en: '`setex()` method, [90](c05.xhtml#Page_90)'
  prefs: []
  type: TYPE_NORMAL
- en: '`set_index()` method, [45](c03.xhtml#Page_45)'
  prefs: []
  type: TYPE_NORMAL
- en: sets, [32](c02.xhtml#Page_32)
  prefs: []
  type: TYPE_NORMAL
- en: '`set_size_inches()` method, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: Shapely, [150](c09.xhtml#Page_150)
  prefs: []
  type: TYPE_NORMAL
- en: Shapely library, [153](c09.xhtml#Page_153)
  prefs: []
  type: TYPE_NORMAL
- en: '`shift()` method, [165](c10.xhtml#Page_165), [169](c10.xhtml#Page_169)'
  prefs: []
  type: TYPE_NORMAL
- en: '`size()` method, [205](c12.xhtml#Page_205)'
  prefs: []
  type: TYPE_NORMAL
- en: '`slice()` function, [103](c06.xhtml#Page_103)'
  prefs: []
  type: TYPE_NORMAL
- en: '`slice(None)`, [104](c06.xhtml#Page_104)'
  prefs: []
  type: TYPE_NORMAL
- en: slice notation, [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: slicing, [43](c03.xhtml#Page_43), [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: '`sorted()` function, [33](c02.xhtml#Page_33)'
  prefs: []
  type: TYPE_NORMAL
- en: '`sort_index()` method, [122](c07.xhtml#Page_122)'
  prefs: []
  type: TYPE_NORMAL
- en: sources of data, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: S&P 500, [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: data, [207](c12.xhtml#Page_207)
  prefs: []
  type: TYPE_NORMAL
- en: index, [71](c04.xhtml#Page_71)
  prefs: []
  type: TYPE_NORMAL
- en: spaCy, [22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: spatial analysis, [146](c09.xhtml#Page_146), [150](c09.xhtml#Page_150)
  prefs: []
  type: TYPE_NORMAL
- en: SQL, [75](c05.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: request, [8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: statements, [75](c05.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: stack, [20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: statistical model, [197](c12.xhtml#Page_197)
  prefs: []
  type: TYPE_NORMAL
- en: storage, [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: '`strip()` method, [59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: structured data, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: Structured Query Language. *See* SQL
  prefs: []
  type: TYPE_NORMAL
- en: '`subplots()` function, [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '`sum()` function, [52](c03.xhtml#Page_52), [115](c07.xhtml#Page_115)'
  prefs: []
  type: TYPE_NORMAL
- en: supervised learning, [194](c12.xhtml#Page_194)
  prefs: []
  type: TYPE_NORMAL
- en: support, [177](c11.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: '**T**'
  prefs: []
  type: TYPE_NORMAL
- en: table, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: tabular data file, [59](c04.xhtml#Page_59)
  prefs: []
  type: TYPE_NORMAL
- en: '`target` array, [210](c12.xhtml#Page_210)'
  prefs: []
  type: TYPE_NORMAL
- en: taxi service example, [146](c09.xhtml#Page_146), [150](c09.xhtml#Page_150)
  prefs: []
  type: TYPE_NORMAL
- en: Telegram Bot API, [147](c09.xhtml#Page_147)
  prefs: []
  type: TYPE_NORMAL
- en: third-party libraries, [37](c03.xhtml#Page_37)
  prefs: []
  type: TYPE_NORMAL
- en: 3D dataset, [101](c06.xhtml#Page_101)
  prefs: []
  type: TYPE_NORMAL
- en: '`timedelta` object, [90](c05.xhtml#Page_90)'
  prefs: []
  type: TYPE_NORMAL
- en: time series data, [5](c01.xhtml#Page_5), [161](c10.xhtml#Page_161)
  prefs: []
  type: TYPE_NORMAL
- en: timestamped data, [161](c10.xhtml#Page_161)
  prefs: []
  type: TYPE_NORMAL
- en: training set, [194](c12.xhtml#Page_194), [201](c12.xhtml#Page_201)
  prefs: []
  type: TYPE_NORMAL
- en: training the model, [203](c12.xhtml#Page_203)
  prefs: []
  type: TYPE_NORMAL
- en: '`train_test_split()` function, [54](c03.xhtml#Page_54), [56](c03.xhtml#Page_56),
    [202](c12.xhtml#Page_202), [210](c12.xhtml#Page_210)'
  prefs: []
  type: TYPE_NORMAL
- en: '`TransactionEncoder` object, [179](c11.xhtml#Page_179)'
  prefs: []
  type: TYPE_NORMAL
- en: transformation, [11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: '`transpose()` method, [118](c07.xhtml#Page_118)'
  prefs: []
  type: TYPE_NORMAL
- en: trigger, [74](c05.xhtml#Page_74)
  prefs: []
  type: TYPE_NORMAL
- en: '`try` clause, [80](c05.xhtml#Page_80)'
  prefs: []
  type: TYPE_NORMAL
- en: '`try/except` block, [80](c05.xhtml#Page_80)'
  prefs: []
  type: TYPE_NORMAL
- en: '*.tsv*, [59](c04.xhtml#Page_59)–[60](c04.xhtml#Page_60)'
  prefs: []
  type: TYPE_NORMAL
- en: tuple, [27](c02.xhtml#Page_27), [110](c07.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: types of machine learning, [194](c12.xhtml#Page_194)
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  prefs: []
  type: TYPE_NORMAL
- en: UCI Machine Learning Repository, [53](c03.xhtml#Page_53)
  prefs: []
  type: TYPE_NORMAL
- en: unordered collections, [28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: unstructured data, [2](c01.xhtml#Page_2)
  prefs: []
  type: TYPE_NORMAL
- en: unsupervised learning, [195](c12.xhtml#Page_195)
  prefs: []
  type: TYPE_NORMAL
- en: urllib3 library, [65](c04.xhtml#Page_65)
  prefs: []
  type: TYPE_NORMAL
- en: '**V**'
  prefs: []
  type: TYPE_NORMAL
- en: '`values()` method, [62](c04.xhtml#Page_62)'
  prefs: []
  type: TYPE_NORMAL
- en: '`values` property, [54](c03.xhtml#Page_54)'
  prefs: []
  type: TYPE_NORMAL
- en: '`VARCHAR` type, [78](c05.xhtml#Page_78)'
  prefs: []
  type: TYPE_NORMAL
- en: visual data analysis, [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: visualizations, [127](c08.xhtml#Page_127)
  prefs: []
  type: TYPE_NORMAL
- en: visualizing association rules, [182](c11.xhtml#Page_182)
  prefs: []
  type: TYPE_NORMAL
- en: '**W**'
  prefs: []
  type: TYPE_NORMAL
- en: web pages, [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: web scraping, [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: '`WHERE` clause, [81](c05.xhtml#Page_81)'
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loop, [20](c02.xhtml#Page_20)'
  prefs: []
  type: TYPE_NORMAL
- en: '`within()` method, [154](c09.xhtml#Page_154)'
  prefs: []
  type: TYPE_NORMAL
- en: '`with` keyword, [59](c04.xhtml#Page_59)'
  prefs: []
  type: TYPE_NORMAL
- en: '`writer.writerow()` method, [63](c04.xhtml#Page_63)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Y**'
  prefs: []
  type: TYPE_NORMAL
- en: Yahoo Finance API, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: yfinance library, [10](c01.xhtml#Page_10), [45](c03.xhtml#Page_45), [82](c05.xhtml#Page_82),
    [168](c10.xhtml#Page_168), [207](c12.xhtml#Page_207)
  prefs: []
  type: TYPE_NORMAL
