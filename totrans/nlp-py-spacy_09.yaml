- en: '**9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9'
- en: STORING USER INPUT IN A DATABASE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户输入存储在数据库中**
- en: '![Image](../Images/comm1.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/comm1.jpg)'
- en: Many applications designed for business need to transfer the data they work
    with to a database at some point. For example, a food-ordering chatbot might save
    an order form after filling it out using the information extracted from dialogue
    with a customer. Once the order appears in the database, it becomes available
    for further processing, and the product is eventually shipped to the customer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多为业务设计的应用程序在某个时候都需要将它们处理的数据转移到数据库中。例如，一个食品订购聊天机器人可能会在与客户对话中提取信息并填写订单表单后将其保存。一旦订单出现在数据库中，它就可以进行进一步处理，并最终将产品运送给客户。
- en: This chapter discusses how you can turn information extracted from submitted
    text into a structured format so you can store and manipulate it within a *relational*
    (row-and-column) database. Through examples, you’ll learn how a chatbot can shred
    input text into pieces and compose a ready-for-database structure from it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何将从提交文本中提取的信息转换为结构化格式，以便你可以在*关系*（行和列）数据库中存储和操作它。通过示例，你将学习如何将聊天机器人将输入文本剪碎成片段，并从中构建一个准备好进入数据库的结构。
- en: '**Converting Unstructured Data into Structured Data**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将非结构化数据转换为结构化数据**'
- en: '*Structured data* is organized using a predefined data schema in a formatted
    repository. If you’ve worked with relational databases before, you know you must
    first convert any data you’ll enter in the database into a structured format so
    it fits into a table or set of related tables.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*结构化数据* 是使用预定义的数据模式在格式化存储库中组织的。如果你以前使用过关系数据库，你会知道必须首先将要输入数据库的任何数据转换为结构化格式，以便它适合表或相关表中。'
- en: The problem is that the natural language input that apps receive from users
    is *unstructured*, meaning it has no predefined organizational schema. Typical
    examples of unstructured data include text and multimedia content, such as emails,
    web pages, business documents, videos, photos, and so on. Although you can still
    store unstructured data in a database, usually you must perform some preprocessing
    when you insert it. For example, you might need to label photos so the database
    can classify them or assign IDs to text documents so the database can distinguish
    between them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序收到的自然语言输入存在一个问题，即*非结构化*，意味着它没有预定义的组织模式。非结构化数据的典型例子包括文本和多媒体内容，比如电子邮件、网页、业务文件、视频、照片等等。尽管你仍然可以将非结构化数据存储在数据库中，通常在插入时需要进行一些预处理。例如，你可能需要标记照片以便数据库能够对其进行分类，或者为文本文档分配ID以便数据库能够区分它们。
- en: Sometimes, you might need to perform more radical transformations to unstructured
    text content, such as extracting pieces of information from it, before grouping
    those pieces into a formatted structure. For example, a business chatbot typically
    needs to parse a customer’s utterances to fill in a certain form. A different
    app might extract just certain elements from a web page, label those elements,
    and then convert the information into a table, as shown in [Figure 9-1](../Text/ch09.xhtml#ch09fig01).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要对非结构化文本内容执行更为激进的转换，例如从中提取信息片段，然后将这些片段分组到一个格式化的结构中。例如，业务聊天机器人通常需要解析客户的话语以填写某种表单。不同的应用程序可能仅从网页中提取特定元素，并为这些元素打上标签，然后将信息转换为表格，正如[图
    9-1](../Text/ch09.xhtml#ch09fig01)中所示。
- en: '![image](../Images/fig9-1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig9-1.jpg)'
- en: '*Figure 9-1: An example of converting unstructured content into structured
    data*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：将非结构化内容转换为结构化数据的示例*'
- en: Tools like spaCy reveal a text’s internal structure by tagging each token in
    a sentence with linguistic annotations. This preprocessing enables you to extract
    specific elements from it, usually by checking the text’s syntactic dependency
    labels. [Figure 9-2](../Text/ch09.xhtml#ch09fig02) describes how a food-ordering
    chatbot might recognize and extract necessary elements from a user’s utterance
    by relying on the syntactic dependency labels spaCy assigns to each token when
    you apply the text-processing pipeline to it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像 spaCy 这样的工具通过在句子中为每个标记打上语言学注释的方式揭示了文本的内部结构。这种预处理使你能够从中提取特定元素，通常通过检查文本的句法依赖标签来实现。[图
    9-2](../Text/ch09.xhtml#ch09fig02)描述了一个食品订购聊天机器人如何通过依赖于 spaCy 为每个标记分配的句法依赖标签，识别并提取用户话语中的必要元素时的情形，这是应用文本处理流程到其上的结果。
- en: '![image](../Images/fig9-2.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig9-2.jpg)'
- en: '*Figure 9-2: A high-level view of how raw text can be converted into row–column
    data.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-2：将原始文本转换为行-列数据的高层视图*'
- en: Next, you’ll see how, once you’ve extracted these elements, you can structure
    and insert them into a database table as a row.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将看到一旦提取了这些元素，如何将它们结构化并插入到数据库表格中作为一行数据。
- en: '***Extracting Data into Interchange Formats***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将数据提取到交换格式中***'
- en: Many current relational databases natively support multiple common data interchange
    formats. For example, MySQL natively supports XML and JSON, the two most common
    data interchange formats on the web.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多当前的关系型数据库原生支持多种常见的数据交换格式。例如，MySQL 原生支持 XML 和 JSON，这两种是网络上最常见的数据交换格式。
- en: 'Your data format choice can affect the way in which you decide to collect data.
    For example, if the database you’re using supports JSON, you can extract data
    directly into a JSON object that you’ll then send to the database for further
    processing. A JSON object is a key-value data format surrounded by curly brackets.
    It looks like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的数据格式会影响你收集数据的方式。例如，如果你使用的数据库支持 JSON，你可以直接将数据提取为 JSON 对象，然后将其发送到数据库进行进一步处理。JSON
    对象是一种由大括号包围的键值数据格式，格式如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Apart from basic values, such as strings and numbers, JSON supports complex
    values, such as arrays and other JSON objects. You’ll see how this works in “[Building
    a Database-Powered Chatbot](../Text/ch09.xhtml#lev122)” on [page 132](../Text/ch09.xhtml#page_132).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本值，如字符串和数字外，JSON 还支持复杂值，如数组和其他 JSON 对象。你将在“[构建数据库驱动的聊天机器人](../Text/ch09.xhtml#lev122)”一节中看到这一点，见[第
    132 页](../Text/ch09.xhtml#page_132)。
- en: In fact, using the JSON format significantly simplifies the process of composing
    a data structure for the database in your Python script. First, you don’t need
    to prepare a structure that conforms to a less widely used format, which makes
    your code less tied to a given database type. Second, the elements in a JSON object
    can follow any order, which imposes fewer restrictions on how the process of determining
    and extraction of necessary elements from an input text can be organized.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，使用 JSON 格式大大简化了在 Python 脚本中为数据库构建数据结构的过程。首先，你不需要准备符合较少使用的格式的结构，这样使得你的代码不那么依赖于特定的数据库类型。其次，JSON
    对象中的元素可以按照任意顺序排列，这对从输入文本中确定和提取必要元素的过程施加了较少的限制。
- en: '[Figure 9-3](../Text/ch09.xhtml#ch09fig03) illustrates how a food-ordering
    chatbot app might interact with its underlying database using JSON.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-3](../Text/ch09.xhtml#ch09fig03)展示了一个食品订购聊天机器人应用如何使用 JSON 与其底层数据库进行交互。'
- en: '![image](../Images/fig9-3.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig9-3.jpg)'
- en: '*Figure 9-3: The workflow of a food-ordering chatbot app*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-3：食品订购聊天机器人应用的工作流程*'
- en: In step 1, a user submits a request to the chatbot asking for a Greek pizza.
    In step 2, the chatbot processes the submitted utterance with spaCy, generating
    a JSON object that contains the information needed to take an order. In step 3,
    the JSON object representing the order form is submitted to the database, which
    stores the form and generates a response about it for the chatbot. In step 4,
    the chatbot informs the user about whether or not the order has been placed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 中，用户向聊天机器人提交一个请求，要求购买希腊披萨。在步骤 2 中，聊天机器人使用 spaCy 处理提交的语言表达，生成一个包含订单所需信息的
    JSON 对象。在步骤 3 中，表示订单表单的 JSON 对象被提交到数据库，数据库存储该表单并为聊天机器人生成关于订单的响应。在步骤 4 中，聊天机器人通知用户订单是否已经成功下单。
- en: '***Moving Application Logic to the Database***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将应用逻辑移至数据库***'
- en: Notice that the database in the chatbot application in [Figure 9-3](../Text/ch09.xhtml#ch09fig03)
    not only stores the submitted JSON object, but also generates a response to the
    application about whether the operation of saving the order has been successful.
    The reason is that the database runs a portion of the application logic.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在[图 9-3](../Text/ch09.xhtml#ch09fig03)所示的聊天机器人应用中的数据库，不仅存储提交的 JSON 对象，还会生成关于保存订单操作是否成功的响应。原因是数据库执行了一部分应用逻辑。
- en: It’s quite common for database-powered applications to keep application logic
    related to data processing within the database. This approach allows you to reduce
    data moves between the application’s logic tier and the underlying database, eliminating
    redundancy, improving data processing efficiency, and maintaining data security.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库驱动的应用程序来说，将与数据处理相关的应用逻辑保留在数据库中是相当常见的做法。这种方法可以减少应用程序逻辑层与底层数据库之间的数据传输，消除冗余，提高数据处理效率，并确保数据安全。
- en: '[Figure 9-4](../Text/ch09.xhtml#ch09fig04) details the database part of the
    chatbot application depicted in [Figure 9-3](../Text/ch09.xhtml#ch09fig03).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-4](../Text/ch09.xhtml#ch09fig04)详细描述了[图 9-3](../Text/ch09.xhtml#ch09fig03)中展示的聊天机器人应用的数据库部分。'
- en: '![image](../Images/fig9-4.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig9-4.jpg)'
- en: '*Figure 9-4: A more detailed view of the database used in the chatbot application
    depicted in [Figure 9-3](../Text/ch09.xhtml#ch09fig03)*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-4：聊天机器人应用中使用的数据库的更详细视图，如[图 9-3](../Text/ch09.xhtml#ch09fig03)所示*'
- en: In this application, the database will convert an input JSON object into relational
    data and store that data in a relational table in a way that guarantees that the
    data being inserted is correct and complete. If the value of a field is missing,
    the customer receives a message about what information they should supply.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，数据库将把输入的JSON对象转换为关系数据，并以确保数据正确完整的方式将其存储在关系表中。如果某个字段的值缺失，客户将收到一条消息，告知他们应该提供哪些信息。
- en: You can check the value of each field before moving the input to the table with
    the help of stored procedures, `ON ERROR` clauses in SQL statements, or triggers
    defined on the table to which the data is sent. A more thorough discussion of
    SQL is outside the scope of this book. But in “[Preparing Your Database Environment](../Text/ch09.xhtml#lev125)”
    on [page 135](../Text/ch09.xhtml#page_135), you’ll see an example of using SQL
    to create a database infrastructure to be used in the application, and then interact
    with this infrastructure using Python.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在将输入数据移到表中之前，你可以借助存储过程、SQL语句中的`ON ERROR`子句，或定义在数据表上的触发器来检查每个字段的值。关于SQL的更详细讨论超出了本书的范围。但在“[准备你的数据库环境](../Text/ch09.xhtml#lev125)”第135页中，你会看到一个使用SQL创建数据库基础设施并通过Python与其交互的示例。
- en: '**NOTE**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re using a database that doesn’t support features like converting JSON
    data into relational data, you’ll need to implement the logic that checks the
    data for completeness in Python on your own; however, this discussion is beyond
    the scope of this chapter.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的数据库不支持将JSON数据转换为关系数据等功能，你将需要在Python中自行实现检查数据完整性的逻辑；然而，这部分内容超出了本章的讨论范围。*'
- en: '**Building a Database-Powered Chatbot**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建基于数据库的聊天机器人**'
- en: Now that you have a basic idea of how to implement a database-powered chatbot
    app, let’s create a simple one for the application shown in [Figure 9-3](../Text/ch09.xhtml#ch09fig03).
    The app should process a user’s utterance, extracting the information necessary
    to fill in an order form, such as product name, product type, and amount. Then
    this information gets packed into a JSON object that is sent to the underlying
    database. The database should shred the JSON object into relational data and then
    send a response to the application based on the data’s completeness.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经大致了解了如何实现一个基于数据库的聊天机器人应用程序，让我们为[图 9-3](../Text/ch09.xhtml#ch09fig03)中展示的应用创建一个简单的示例。该应用应处理用户的发话，提取必要的信息来填写订单表格，如产品名称、产品类型和数量。然后，这些信息将被打包成一个JSON对象，并发送到底层数据库。数据库应将该JSON对象拆解成关系数据，并根据数据的完整性向应用发送响应。
- en: '***Gathering the Data and Building a JSON Object***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***收集数据并构建JSON对象***'
- en: 'We’ll start by developing the application’s logic tier and use Python to build
    a JSON object that we could then send to any database type. The following code
    shows what this implementation might look like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从开发应用程序的逻辑层开始，使用Python构建一个JSON对象，随后可以将其发送到任何类型的数据库。以下代码展示了该实现的可能样式：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We define the `orderdict` dictionary as a container for the JSON object being
    created ➊. We’ll be able to easily convert this dictionary to a JSON string later.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`orderdict`字典定义为正在创建的JSON对象的容器➊。稍后，我们将能够轻松地将这个字典转换为JSON字符串。
- en: Then we iterate over the utterance’s tokens ➋, looking for a direct object ➌.
    We might want a pizza, or we might ask someone to make us a pizza. In either case,
    “pizza” will be a direct object in our utterance so we’re hunting for a direct
    object here. Of course, a real implementation would make more checks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们遍历发话中的标记 ➋，寻找直接宾语 ➌。我们可能想要一个比萨，或者可能会要求某人给我们做一个比萨。无论哪种情况，“比萨”都将是我们发话中的直接宾语，因此我们在这里寻找直接宾语。当然，实际实现中会进行更多的检查。
- en: Once it’s found, we define a key-value pair in the `orderdict` dictionary, sending
    in `product` as the key and the direct object’s lemma as the value ➍. We use lemmatization
    to reduce the possible word forms of a product’s name to its base form (converting
    from plural to singular in most cases).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到它，我们在`orderdict`字典中定义一个键值对，将`product`作为键，直接对象的词根作为值➍。我们使用词形还原将产品名称的可能词形简化为其基本形式（在大多数情况下将复数转换为单数）。
- en: Next, we iterate over the direct object’s syntactic left children ➎, because
    that’s where we expect the information about the type of product requested. In
    terms of syntactic dependency labels, the product `type` can be either a compound
    or an adjectival modifier (`amod`) ➏. For example, spaCy would consider the word
    “Greek” in the phrase “a Greek pizza” an adjectival modifier, whereas it considers
    the word “Chicago” in the phrase “a Chicago pizza” a compound.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们遍历直接对象的句法左子节点 ➎，因为我们期望在这里获得关于请求的产品类型的信息。就句法依赖标签而言，产品的`type`可以是复合词或形容词修饰语（`amod`）➏。例如，spaCy会将短语“a
    Greek pizza”中的“Greek”视为形容词修饰语，而将“a Chicago pizza”中的“Chicago”视为复合词。
- en: Now we check for the presence of a determiner in the children of the modifier
    or compound. The presence of the “a” determiner implies that a customer requests
    a single unit of a product ➐. In contrast, a word labeled with the dependency
    label `nummod` would indicate a particular number of units ➑.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们检查修饰符或复合词的子节点中是否存在限定词。如果存在“a”限定词，则意味着客户请求一个单位的产品 ➐。相反，带有依赖标签`nummod`的词则表示特定数量的单位
    ➑。
- en: 'Print the `orderdict` dictionary using this command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令打印`orderdict`字典：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should give you the following result:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给出以下结果：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we have a JSON string that we can send to an underlying database for further
    processing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个JSON字符串，可以将其发送到底层数据库进行进一步处理。
- en: '***Converting Number Words to Numbers***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将数字单词转换为数字***'
- en: 'Before moving on to the code that will send your JSON string to a database,
    consider what it will look like when a user explicitly specifies the quantity
    of a product, as in the following utterance:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入将你的JSON字符串发送到数据库的代码之前，考虑一下当用户明确指定产品数量时，情况会如何，如以下语句所示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you put this into the previous script, you’d get the following result:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将这段代码放入之前的脚本中，你将得到以下结果：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the first sample sentence, the value of the `'qty'` key is a numeral. In
    the second, it’s a number spelled out as a word. At this stage, this difference
    doesn’t look like a problem. But the issue is that we must define a data type
    for each column of a relational table when we create it. Attempting to insert
    data of another type into that column will fail.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例句子中，`'qty'`键的值是一个数字。在第二个示例中，它是一个以单词拼写的数字。在此阶段，这种差异看起来不是什么问题。但问题在于，我们在创建关系表时必须为每个列定义一个数据类型。如果尝试将其他类型的数据插入该列，将会失败。
- en: You should prepare your chatbot for the fact that customers will specify a product’s
    quantity in any way they like. To solve this problem, you’ll have to convert strings
    representing number words to their corresponding integer values.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该为你的聊天机器人做好准备，因为客户会以任何他们喜欢的方式指定产品数量。为了解决这个问题，你需要将表示数字单词的字符串转换为相应的整数值。
- en: To do this, define a list containing numbers spelled in words and sorted in
    increasing order; then iterate over that list to find the correct number. In this
    example, we define a list for number words ranging from “zero” to “twenty,” which
    assumes we don’t expect that a customer will order more than twenty units of the
    same product with one transaction.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，定义一个包含拼写为单词的数字并按递增顺序排序的列表；然后遍历该列表以找到正确的数字。在此示例中，我们定义一个数字单词列表，范围从“zero”到“twenty”，假设我们不期望客户在一次交易中购买超过二十个同样的产品。
- en: 'We need to implement this conversion scenario as a function that takes either
    a number word or a number (in the latter case, no conversion is needed) and returns
    a number. We should then use the function to modify the script’s code in the preceding
    section. Here is what the implementation of such a function might look like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现一个转换场景，该场景作为一个函数，接受一个数字单词或数字（在后者情况下，不需要转换）并返回一个数字。然后，我们应该使用这个函数来修改前一部分中的脚本代码。下面是该函数实现可能的样子：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `word2int()` function takes a single parameter: either a number word to
    be converted to the correspondent digits or a number already, in which case we
    won’t need to convert it ➊. The function has to handle both cases, because we
    don’t know which one we’ll find in a customer’s utterance.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`word2int()`函数接受一个参数：要转换为相应数字的数字单词，或者已经是数字的情况，在这种情况下我们不需要转换它 ➊。该函数必须处理这两种情况，因为我们无法预知客户的发言中会是哪种情况。'
- en: We use the `try` and `except` block to handle cases when no conversion is needed
    ➋. We check whether the input is an integer ➌, and if it is, all we have to do
    is return the input number as is ➍. Otherwise, we ignore an error caused by an
    attempt to treat a nonnumber value as an integer and move on to converting it
    to a number ➎.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`try`和`except`块来处理无需转换的情况➋。我们检查输入是否为整数➌，如果是，我们只需要返回输入的数字 ➍。否则，我们忽略尝试将非数字值当作整数处理所引发的错误，并继续将其转换为数字
    ➎。
- en: We define a list of number words, starting from `zero` and listing them in increasing
    order ➏. Then we iterate over this list with the `enumerate()` method ➐, looking
    for the word the function received as input ➑. When we find the match, we return
    the iteration number (the index of the word in the list) as the digit representation
    of the input number word ➒.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个数字单词列表，从`zero`开始，并按递增顺序列出它们 ➏。然后我们使用`enumerate()`方法 ➐遍历这个列表，寻找函数接收到的输入单词
    ➑。当我们找到匹配项时，我们返回当前迭代的编号（该单词在列表中的索引）作为输入数字单词的数字表示 ➒。
- en: 'Add the `word2int()` function definition to the previous script. Then move
    to the end of the script and find the following lines of code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将`word2int()`函数定义添加到之前的脚本中。然后移动到脚本的末尾，找到以下代码行：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Change them as follows, using the `word2int()` function defined in this section:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式进行更改，使用本节中定义的`word2int()`函数：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now let’s see how the script handles this sentence:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看脚本如何处理这个句子：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This time, you should get the following result:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你应该得到以下结果：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The value of the `'qty'` field is now a digit, and we have a consistent format
    to send to the database.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`''qty''`字段的值现在是一个数字，我们拥有一致的格式来发送到数据库。'
- en: '***Preparing Your Database Environment***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***准备你的数据库环境***'
- en: To prepare your database environment, you need to install or obtain access to
    a database; create the components you’ll need in the database, such as a database
    schema, a table, and so on; and install a Python module that enables you to interact
    with the database.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备你的数据库环境，你需要安装或获得访问数据库的权限；创建你需要的数据库组件，例如数据库模式、表格等；并安装一个能够与数据库进行交互的Python模块。
- en: Although you can choose any database that can receive and process JSON data,
    such as an Oracle database, this section uses MySQL. The MySQL database has a
    long history of supporting the most popular data interchange formats, which are
    XML and JSON. Also, MySQL is the world’s most popular open source database and
    is available on a majority of modern operating systems, including Linux, Windows,
    Unix, and macOS. MySQL has a freely downloadable version and commercial editions
    to meet specific business requirements.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以选择任何能够接收和处理JSON数据的数据库，例如Oracle数据库，本节使用MySQL。MySQL数据库长期支持最流行的数据交换格式，XML和JSON。而且，MySQL是全球最受欢迎的开源数据库，并且可以在大多数现代操作系统上使用，包括Linux、Windows、Unix和macOS。MySQL提供了一个免费可下载版本，并且还有商业版来满足特定的业务需求。
- en: For this chapter, you can use MySQL Community Edition—the freely downloadable
    version available under the GPL license. To learn more about the MySQL Community
    Edition, visit its official page at *https://www.mysql.com/products/community/*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你可以使用MySQL Community Edition——在GPL许可证下可以自由下载的版本。要了解更多关于MySQL Community
    Edition的信息，请访问其官方网站 *[https://www.mysql.com/products/community/*](https://www.mysql.com/products/community/*)。
- en: You’ll first need to install MySQL on your system. At the time of this writing,
    MySQL 8.0 is the most recent version. Refer to the “Installing and Upgrading MySQL”
    chapter at *[https://dev.mysql.com/doc/refman/8.0/en/installing.html](https://dev.mysql.com/doc/refman/8.0/en/installing.html)*
    in the MySQL 8.0 Reference Manual, or the equivalent chapter for future versions
    of MySQL. Here, you’ll find the detailed installation instructions for your operating
    system.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要在系统上安装MySQL。截至本文写作时，MySQL 8.0是最新版本。请参考MySQL 8.0参考手册中的“安装和升级MySQL”章节 *[https://dev.mysql.com/doc/refman/8.0/en/installing.html](https://dev.mysql.com/doc/refman/8.0/en/installing.html)*，或者查看未来版本MySQL的等效章节。这里，你将找到适用于你的操作系统的详细安装说明。
- en: After installation, you can start the MySQL server using the command the installation
    guide specifies for your operating system. Before you can start working with the
    database, you need to obtain a password for the `mysql` superuser (‘root’@‘localhost’)
    generated during the installation. You’ll find the password in the installation
    error log file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以使用安装指南为您的操作系统指定的命令启动MySQL服务器。在开始与数据库工作之前，您需要获取在安装过程中生成的`mysql`超级用户（‘root’@‘localhost’）密码。您可以在安装错误日志文件中找到该密码。
- en: 'Once you have the superuser password, you can connect to the MySQL server from
    a system terminal using the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得超级用户密码，您可以从系统终端使用以下命令连接到MySQL服务器：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you prefer to use a GUI, you can take advantage of MySQL Workbench (*[https://www.mysql.com/products/workbench/](https://www.mysql.com/products/workbench/)*),
    which is a unified visual tool designed to model and manage MySQL databases.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用图形界面，您可以利用MySQL Workbench (*[https://www.mysql.com/products/workbench/](https://www.mysql.com/products/workbench/)*),
    这是一款统一的可视化工具，旨在建模和管理MySQL数据库。
- en: 'After connecting to the server, your first step is to choose a new password
    for the root user, replacing the random password generated during the installation.
    Use the following command to do so:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到服务器后，您的第一步是为root用户选择一个新密码，替换安装过程中生成的随机密码。使用以下命令进行更改：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you’re ready to start developing the infrastructure on the server that
    you need for your application. You’ll begin by creating a database that you’ll
    use as the container for the other objects the application needs to interact with.
    To create the database, enter the following command at the `mysql>` prompt:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已准备好开始在服务器上开发应用所需的基础设施。您将首先创建一个数据库，用作应用需要交互的其他对象的容器。要创建数据库，请在`mysql>`提示符下输入以下命令：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then select the newly created database for use, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择新创建的数据库进行使用，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You’re ready to start creating your database’s structure. For this example,
    you’ll need a single table you create with the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您已准备好开始创建数据库结构。对于此示例，您需要使用以下命令创建一个单独的表：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With this database infrastructure set up, you need to install the MySQL Connector/Python
    driver, which allows your Python code to interact with that infrastructure. On
    any operating system, you can install Connector/Python via `pip`, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好数据库基础设施后，您需要安装MySQL Connector/Python驱动程序，它允许您的Python代码与该基础设施进行交互。在任何操作系统上，您可以通过`pip`安装Connector/Python，如下所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For further details on how to install this driver, check the documentation at
    *[https://dev.mysql.com/doc/connector-python/en/](https://dev.mysql.com/doc/connector-python/en/).*
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何安装此驱动程序的更多详细信息，请查阅文档 *[https://dev.mysql.com/doc/connector-python/en/](https://dev.mysql.com/doc/connector-python/en/)*。
- en: 'Using the following simple script, ensure that you’ve installed Connector/Python:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下简单脚本，确保您已安装Connector/Python：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the install is successful, you should see no error messages.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，您应该看不到任何错误信息。
- en: '***Sending Data to the Underlying Database***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将数据发送到底层数据库***'
- en: 'Let’s return to the script we had on [page 134](../Text/ch09.xhtml#page_134).
    The following code connects to your database and passes order data to the `orders`
    table. Append this code to the script:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到[第134页](../Text/ch09.xhtml#page_134)的脚本。以下代码将连接到您的数据库，并将订单数据传递到`orders`表中。将此代码附加到脚本中：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We start by converting the `orderdict` dictionary into a JSON string ➊. Next,
    we connect to the database ➋ and define an insert SQL statement to be passed into
    the database for processing ➌. Note the use of a placeholder (called a *bind variable*)
    in the statement ➍. Using placeholders allows us to write SQL statements that
    accept inputs at runtime.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将`orderdict`字典转换为JSON字符串 ➊。接下来，我们连接到数据库 ➋，并定义一个插入SQL语句，将其传递到数据库进行处理 ➌。注意语句中使用了占位符（称为*绑定变量*）
    ➍。使用占位符允许我们编写在运行时接受输入的SQL语句。
- en: Before we can execute the statement, we create a `mysql.connector` cursor object
    ➎, which enables operations over the objects in the database we’re connected to.
    Then we can execute the `INSERT` statement ➏, binding the JSON string ➐ we obtained
    in the beginning of this code snippet to the placeholder in the statement. Note
    the use of the `JSON_TABLE` function that shreds the submitted JSON data to tabular
    data, making it appropriate for inserting into a relational table.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们执行语句之前，我们先创建一个`mysql.connector`光标对象 ➎，它使我们能够对连接到的数据库中的对象执行操作。然后我们可以执行`INSERT`语句
    ➏，将我们在这段代码开头获得的 JSON 字符串 ➐ 绑定到语句中的占位符。请注意，`JSON_TABLE`函数将提交的 JSON 数据转换为表格数据，从而使其适合插入到关系型表中。
- en: After the execution of the `INSERT` statement, we need to explicitly commit
    the statement’s changes with the `commit()` method ➑. Otherwise, the insertion
    will roll back when the connection closes (either explicitly with `cnx.close()`
    or when the script’s execution is complete).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行完`INSERT`语句后，我们需要显式地使用`commit()`方法 ➑提交语句的更改。否则，当连接关闭时（无论是显式地使用`cnx.close()`，还是脚本执行完成时），插入操作将会回滚。
- en: The `except` block will begin to execute if an error occurs on the database
    side ➒. In the next section, you’ll learn how to take advantage of this functionality
    when the JSON string passed in doesn’t contain all the fields.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库端发生错误，`except`块将开始执行 ➒。在下一部分，你将学习如何在传入的 JSON 字符串不包含所有字段时利用此功能。
- en: 'Now execute the script. If you don’t see any error messages, return to the
    `mysql` prompt you worked with in the preceding section and enter the following
    select statement:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行脚本。如果你没有看到任何错误消息，请返回到上一节中使用的`mysql`提示符并输入以下选择语句：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you can see this output, your Python script is working as expected.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能看到这个输出，说明你的 Python 脚本按预期工作。
- en: '***When a User’s Request Doesn’t Contain Enough Information***'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***当用户的请求没有包含足够的信息时***'
- en: 'Sometimes, a user’s request might not contain enough information to fill in
    all the fields in the order form. As an example, consider the following utterance:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，用户的请求可能没有包含足够的信息来填写订单表单中的所有字段。例如，考虑以下话语：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Table 9-1](../Text/ch09.xhtml#ch09tab01) shows the order form the application
    discussed here will generate from this sentence.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 9-1](../Text/ch09.xhtml#ch09tab01)展示了应用程序从这个句子生成的订单表单。'
- en: '**Table 9-1:** An Order Form Missing Information'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 9-1：** 缺失信息的订单表单'
- en: '| **product** | **ptype** | **quantity** |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **product** | **ptype** | **quantity** |'
- en: '| --- | --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| pizza |  | 2 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| pizza |  | 2 |'
- en: 'The value of the `ptype` field is missing because the user didn’t identify
    the type of pizza they want. To address this issue, enhance the `INSERT` statement
    in the previous script as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`ptype`字段的值缺失，因为用户没有指定他们想要的披萨类型。为了解决这个问题，可以按照以下方式增强之前脚本中的`INSERT`语句：'
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We add the `ERROR ON EMPTY` option ➊ to each column in `JSON_TABLE`. This option
    allows us to handle errors caused by trying to insert a JSON string that doesn’t
    contain all the fields it’s supposed to contain.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`JSON_TABLE`中的每一列添加了`ERROR ON EMPTY`选项 ➊。这个选项允许我们处理插入不包含所有应有字段的 JSON 字符串时产生的错误。
- en: 'Now when you execute the script with the “I want two pizzas.” sample sentence,
    you should see the following output:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你使用“我想要两张披萨。”这个示例句子执行脚本时，你应该能看到以下输出：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We could expand on the script so in such cases the chatbot asks the customer
    to clarify their order using the following question:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展脚本，以便在这种情况下，聊天机器人询问客户澄清订单，提问如下：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'An answer might look like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个答案可能是这样的：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The structure of the sentence representing the answer we’re supposed to receive
    here is similar to the structure of the original sentence. Therefore, we can use
    the same code to analyze this answer that we used to analyze the original sentence.
    Of course, this approach makes assumptions about a user’s response. A real implementation
    would start with this approach and then, if necessary, move on to the other possible
    response structures. For example, a user’s response might consist of a single
    word, “Greek.” In that case, all we need to do is to check whether it’s included
    in our list of pizza types.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 代表我们预期收到的答案的句子结构与原始句子的结构相似。因此，我们可以使用与分析原始句子时相同的代码来分析这个答案。当然，这种方法假设了用户的响应。一个实际的实现会以这种方法为起点，然后根据需要扩展到其他可能的响应结构。例如，用户的回答可能是一个单词，“Greek”。在这种情况下，我们只需检查它是否包含在我们的披萨类型列表中。
- en: '***Try This***'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***尝试这个***'
- en: The error message tells you what specific field is missing. But you still need
    to extract this field name from the message so you can ask the customer to clarify
    a specific part of their order. One way to do this is to look at the object of
    the preposition in the message. For example, in the message, `Error-Message:`
    `Missing value for JSON_TABLE column 'ptype'`, the object of the preposition is `ptype`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息会告诉你缺失的是哪个具体字段。但你仍然需要从信息中提取出这个字段名，以便你可以要求客户澄清订单中的某个具体部分。一种方法是查看信息中介词的宾语。例如，在信息中，`Error-Message:`
    `Missing value for JSON_TABLE column 'ptype'`，介词的宾语是`ptype`。
- en: '**Summary**'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you learned how to cut raw text into shreds to insert the text
    into a relational database. You used the JSON format to interact with a database
    that can process a JSON input, extracting it into relational data. You also learned
    to implement some application logic within the database with the help of pure
    SQL, allowing you to move data processing closer to the data. To implement more
    complicated scenarios, you might need to use triggers and stored procedures—the
    details can be found in the documentation for the database you’re using.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将原始文本切割成片段，以便将文本插入到关系型数据库中。你使用了 JSON 格式与能够处理 JSON 输入的数据库进行交互，将其提取为关系数据。你还学会了如何借助纯
    SQL 在数据库中实现一些应用逻辑，使数据处理更加接近数据本身。为了实现更复杂的场景，你可能需要使用触发器和存储过程——有关详细信息，可以参阅你使用的数据库文档。
