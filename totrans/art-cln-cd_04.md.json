["```py\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n```", "```py\nxxx = 10000\nyyy = 0.1\nzzz = 10\n\nfor iii in range(zzz):\n    print(xxx * (1 + yyy)**iii)\n```", "```py\ninvestments = 10000\nyearly_return = 0.1\nyears = 10\n\nfor year in range(years):\n    print(investments * (1 + yearly_return)**year)\n```", "```py\n# Aligned with the opening delimiter.\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n\n# Add 4 spaces (an extra level of indentation) to distinguish \n# arguments from the rest.\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# Hanging indents should add a level.\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)\n```", "```py\n# Arguments on first line forbidden when not using vertical alignment.\nfoo = longFunctionName(varone,varTwo,\n   var3,varxfour)\n\n# Further indentation required as indentation is not distinguishable.\ndef longfunctionname(\n  var1,var2,var3,\n  var4):\n  print(var_one)\n```", "```py\nimport re\n\ntext = '''\n    Ha! let me see her: out, alas! She's cold:\n    Her blood is settled, and her joints are stiff;\n    Life and these lips have long been separated:\n    Death lies on her like an untimely frost\n    Upon the sweetest flower of all the field.\n'''\n\n f_words = re.findall('\\\\bf\\w+\\\\b', text)\nprint(f_words)\n\nl_words = re.findall('\\\\bl\\w+\\\\b', text)\nprint(l_words)\n\n'''\nOUTPUT:\n['frost', 'flower', 'field']\n['let', 'lips', 'long', 'lies', 'like']\n\n'''\n```", "```py\nimport re\n\ntext = '''\n    Ha! let me see her: out, alas! She's cold:\n    Her blood is settled, and her joints are stiff;\n    Life and these lips have long been separated:\n    Death lies on her like an untimely frost\n    Upon the sweetest flower of all the field.\n'''\n\n❶ # Find all words starting with character 'f'.\nf_words = re.findall('\\\\bf\\w+\\\\b', text)\nprint(f_words)\n\n❷ # Find all words starting with character 'l'.\nl_words = re.findall('\\\\bl\\w+\\\\b', text)\nprint(l_words)\n\n'''\nOUTPUT:\n['frost', 'flower', 'field']\n['let', 'lips', 'long', 'lies', 'like']\n'''\n```", "```py\n❶ # Process next order\norder = get_next_order()\nuser = order.get_user()\ndatabase.update_user(user)\ndatabase.update_product(order.get_order())\n\n❷ # Ship order & confirm customer\nlogistics.ship(order, user.get_address())\nuser.send_confirmation()\n```", "```py\n##########################################################\n# WARNING                                                #\n# EXECUTING THIS FUNCTION WILL SHIP A $1,569,420 YACHT!! #\n##########################################################\ndef ship_yacht(customer):\n    database.update(customer.get_address())\n    logistics.ship_yacht(customer.get_address())\n    logistics.send_confirmation(customer)\n```", "```py\ninvestments = 10000\nyearly_return = 0.1\nyears = 10\n\nfor year in range(years):\n    print(investments * (1 + yearly_return)**year)\n```", "```py\ninvestments = 10000 # Your investments, change if needed\nyearly_return = 0.1 # Annual return (e.g., 0.1 --> 10%)\nyears = 10 # Number of years to compound\n\n# Go over each year\nfor year in range(years):\n    # Print value of your investment in current year\n    print(investments * (1 + yearly_return)**year)\n```", "```py\nprint('hello world')\nprint('hello world')\nprint('hello world')\nprint('hello world')\nprint('hello world')\n```", "```py\nfor i in range(5):\n    print('hello world')\n```", "```py\nmiles = 100\nkilometers = miles * 1.60934\n\ndistance = 20 * 1.60934\n\nprint(kilometers)\nprint(distance)\n\n'''\nOUTPUT:\n160.934\n32.1868\n'''\n```", "```py\ndef miles_to_km(miles):\n    return miles * 1.60934\n\nmiles = 100\nkilometers = miles_to_km(miles)\n\ndistance = miles_to_km(20)\n\nprint(kilometers)\nprint(distance)\n\n'''\nOUTPUT:\n160.934\n32.1868\n'''\n```", "```py\n❶ class Book:\n\n  ❷ def __init__(self):\n        self.title = \"Python One-Liners\"\n        self.publisher = \"NoStarch\"\n        self.author = \"Mayer\"\n        self.current_page = 0\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publisher(self):\n        return self.publisher\n\n ❸ def next_page(self):\n        self.current_page += 1\n        return self.current_page\n\n  ❹ def print_page(self):\n        print(f\"... Page Content {self.current_page} ...\")\n\n❺ python_one_liners = Book()\n\nprint(python_one_liners.get_publisher())\n# NoStarch\n\npython_one_liners.print_page()\n# ... Page Content 0 ...\n\npython_one_liners.next_page()\npython_one_liners.print_page()\n# ... Page Content 1 ... \n```", "```py\n❶ class Book:\n\n  ❷ def __init__(self):\n        self.title = \"Python One-Liners\"\n        self.publisher = \"NoStarch\"\n self.author = \"Mayer\"\n        self.current_page = 0\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publisher(self):\n        return self.publisher\n\n    def get_page(self):\n        return self.current_page\n\n    def next_page(self):\n        self.current_page += 1\n\n❸ class Printer:\n\n  ❹ def print_page(self, book):\n        print(f\"... Page Content {book.get_page()} ...\")\n\npython_one_liners = Book()\nprinter = Printer()\n\nprinter.print_page(python_one_liners)\n# ... Page Content 0 ...\n\npython_one_liners.next_page()\nprinter.print_page(python_one_liners)\n# ... Page Content 1 ...\n```", "```py\ndef read_int(query):\n    print(query)\n    print('Please type an integer next:')\n    try:\n        x = int(input())\n    except:\n        print('Try again - type an integer!')\n        return read_int(query)\n    return x\n\nprint(read_int('Your age?'))\n```", "```py\nYour age?\nPlease type an integer next:\nhello\nTry again - type an integer!\nYour age?\nPlease type an integer next:\ntwenty\nTry again - type an integer!\nYour age?\nPlease type an integer next:\n20\n20\n```", "```py\n# VIOLATE LAW OF DEMETER (BAD)\n\nclass Person:\n    def __init__(self, coffee_cup):\n        self.coffee_cup = coffee_cup\n\n    def price_per_cup(self):\n        cups = 798\n      ❶ machine_price = self.coffee_cup.get_creator_machine().get_price()\n        return machine_price / cups\n\nclass Coffee_Machine:\n    def __init__(self, price):\n self.price = price\n\n    def get_price(self):\n        return self.price\n\nclass Coffee_Cup:\n    def __init__(self, machine):\n        self.machine = machine\n\n    def get_creator_machine(self):\n        return self.machine\n\nm = Coffee_Machine(399)\nc = Coffee_Cup(m)\np = Person(c)\n\nprint('Price per cup:', p.price_per_cup())\n# 0.5\n```", "```py\n# ADHERE TO LAW OF DEMETER (GOOD)\n\nclass Person:\n    def __init__(self, coffee_cup):\n        self.coffee_cup = coffee_cup\n\n    def price_per_cup(self):\n        cups = 798\n      ❶ return self.coffee_cup.get_cost_per_cup(cups)\n\nclass Coffee_Machine:\n    def __init__(self, price):\n        self.price = price\n\n    def get_price(self):\n        return self.price\n\nclass Coffee_Cup:\n    def __init__(self, machine):\n        self.machine = machine\n\n    def get_creator_machine(self):\n        return self.machine\n\n    def get_cost_per_cup(self, cups):\n        return self.machine.get_price() / cups\n\nm = Coffee_Machine(399)\nc = Coffee_Cup(m)\np = Person(c)\n\nprint('Price per cup:', p.price_per_cup())\n# 0.5\n```", "```py\ndef if_confusion(x, y):\n    if x>y:\n        if x-5>0:\n            x = y\n            if y==y+y:\n                return \"A\"\n            else:\n                return \"B\"\n        elif x+y>0:\n            while x>y:\n                x = x-1\n            while y>x:\n                y = y-1\n            if x==y:\n                return \"E\"\n        else:\n            x = 2 * x\n            if x==y:\n                return \"F\"\n            else:\n                return \"G\"\n    else:\n        if x-2>y-4:\n            x_old = x\n            x = y * y\n            y = 2 * x_old\n            if (x-4)**2>(y-7)**2:\n                return \"C\"\n            else:\n                return \"D\"\n        else:\n            return \"H\"\n\nprint(if_confusion(2, 8))\n```", "```py\ndef if_confusion(x,y):\n    if x>y and x>5 and y==0:\n        return \"A\"\n    if x>y and x>5:\n        return \"B\"\n    if x>y and x+y>0:\n        return \"E\"\n    if x>y and 2*x==y:\n        return \"F\"\n    if x>y:\n        return \"G\"\n    if x>y-2 and (y*y-4)**2>(2*x-7)**2:\n        return \"C\"\n    if x>y-2:\n        return \"D\"\n    return \"H\"\n```"]