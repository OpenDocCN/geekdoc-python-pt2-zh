- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3'
- en: THE COMMAND LINE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行
- en: '![Image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common01.jpg)'
- en: '*Command line interfaces* let us give direct instructions to our computer.
    From the command line, we can run programs, search files, create and delete directories,
    connect to the internet, and do much more. With two exceptions, the applications
    that we’ll create in this book are all designed to be executed from the command
    line. In this chapter, we’ll briefly cover the basics of command line interfaces.
    Feel free to skip this chapter if you already know how to use them.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*命令行接口* 让我们可以直接向计算机发出指令。在命令行中，我们可以运行程序、搜索文件、创建和删除目录、连接互联网等。除两个例外外，本书中创建的所有应用程序都设计为从命令行执行。本章将简要介绍命令行接口的基础知识。如果您已经知道如何使用命令行，可以跳过本章。'
- en: '**Unix and Windows**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Unix 和 Windows**'
- en: 'Every operating system comes with a different flavor of a command line interface,
    but they all have a similar purpose: issuing commands directly to the operating
    system. Linux and macOS are both based on Unix, so they share a common syntax
    and use similar *command line processors*, which are programs that interpret your
    commands, issued in the form of plaintext, and translate them into a language
    the machine can execute. Several Unix command line processors exist; bash, bourne,
    and zsh are a few examples.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统都有不同的命令行界面（CLI），但它们的目的都是相似的：直接向操作系统发出指令。Linux 和 macOS 都基于 Unix，因此它们共享一个通用的语法，并使用相似的*命令行处理器*，这些程序可以解释您以纯文本形式发出的指令，并将其转换成计算机可以执行的语言。有几种
    Unix 命令行处理器，bash、bourne 和 zsh 就是其中的几个例子。
- en: The command line application in these systems is often called a *shell*, *terminal*,
    or *prompt*. Apple had macOS come bundled with a bash shell, but recently, it
    replaced bash with zsh, which is, arguably, more modern and feature rich. We won’t
    be worrying too much about the differences of these shell flavors; for our purposes,
    we can think of them as interchangeable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些系统中的命令行应用程序通常称为 *shell*、*终端* 或 *提示符*。苹果的 macOS 自带有 bash shell，但最近它将 bash 替换为
    zsh，zsh 可以说是更现代且功能更强大。我们不会过于关注这些 shell 版本之间的差异；在我们的使用场景中，它们可以互换使用。
- en: Windows has its own command line system, and it uses a different syntax than
    macOS or Linux. Fortunately enough, since most developers are more familiar with
    Unix-like shells, Windows decided to allow its users to install a Linux subsystem.
    In the next section, we’ll look at how to install this Windows Subsystem for Linux
    (WSL) support in case you’re following this book with a Windows machine.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 有自己的命令行系统，且与 macOS 或 Linux 使用不同的语法。幸运的是，由于大多数开发者更熟悉类似 Unix 的 shell，Windows
    决定允许其用户安装 Linux 子系统。在下一部分，我们将讨论如何安装 Windows 子系统 Linux（WSL）支持，以便您在使用 Windows 计算机跟随本书时使用。
- en: '**Finding Your Shell**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**查找您的 Shell**'
- en: 'If you are a Linux or macOS user, you don’t need to install any additional
    software: your system comes with a shell. You can find it inside your applications
    directory.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Linux 或 macOS 用户，您无需安装任何额外的软件：您的系统自带有一个终端。您可以在应用程序目录中找到它。
- en: If you’re a Windows user, your system also has a command line, but we won’t
    be using that one; we’ll install the WSL instead. This system will give you access
    to a shell you can use to follow along with this book. Let’s look at how to get
    it installed on your machine. If you aren’t a Windows user, feel free to skip
    this section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Windows 用户，您的系统也有命令行，但我们将不使用它；我们将安装 WSL（Windows Subsystem for Linux）。这个系统将让您访问一个可以用于跟随本书内容的
    shell。让我们看看如何在您的计算机上安装它。如果您不是 Windows 用户，可以跳过这一部分。
- en: '***Installing the Windows Subsystem for Linux***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装 Windows 子系统 Linux***'
- en: The *Windows Subsystem for Linux*, WSL for short, is an installation of a Linux
    operating system inside your Windows operating system. The WSL will let you access
    Linux’s main tools, including the shell.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*Windows 子系统 Linux*，简称 WSL，是在 Windows 操作系统内安装的 Linux 操作系统。WSL 将允许您访问 Linux
    的主要工具，包括 shell。'
- en: Since installation instructions tend to evolve with time, please refer to the
    official documentation if you find any issue with the following steps. You can
    find the official documentation at [*https://docs.microsoft.com/windows/wsl*](https://docs.microsoft.com/windows/wsl),
    where you’ll also find detailed information and a step-by-step installation guide.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安装说明通常会随着时间的推移而变化，如果您在以下步骤中遇到任何问题，请参考官方文档。您可以在[*https://docs.microsoft.com/windows/wsl*](https://docs.microsoft.com/windows/wsl)找到官方文档，那里还会有详细的信息和逐步的安装指南。
- en: 'As of the time of this writing, to install a Linux subsystem you first need
    to enable the WSL optional feature in your machine. To do this, open the PowerShell
    application as Administrator and then execute the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文编写时，要安装 Linux 子系统，你首先需要在你的机器上启用 WSL 可选功能。为此，打开 PowerShell 应用程序以管理员身份运行，然后执行以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that you should write this command on a single line; I had to break the
    line because it didn’t fit in the print version of the book. It may take a few
    seconds to finish. Once the command has run, restart your machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你应该将此命令写在一行上；我不得不换行，因为它在书籍的印刷版本中无法容纳。它可能需要几秒钟才能完成。一旦命令执行完毕，重启你的机器。
- en: When your machine is fully restarted, you can proceed to install any Linux distribution
    (also known as *distro*) of your choice. If you have no favorite Linux distro,
    I suggest you install Ubuntu; it’s reliable and developer-friendly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的机器完全重启后，你可以开始安装任何你选择的 Linux 发行版（也叫做*distro*）。如果你没有特别偏好的 Linux 发行版，我建议你安装
    Ubuntu；它既可靠又对开发者友好。
- en: To install a Linux subsystem, open the Microsoft Store and search for *Ubuntu*
    (or your distro of choice). For this book, I’ll be using Ubuntu’s 20 LTS version.
    Run the installer for the Linux subsystem; once the installation process finishes,
    open it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Linux 子系统，打开 Microsoft Store 并搜索 *Ubuntu*（或你选择的发行版）。在本书中，我将使用 Ubuntu 的 20
    LTS 版本。运行 Linux 子系统的安装程序；一旦安装过程完成，打开它。
- en: When you open your Linux subsystem for the first time, it’ll need to perform
    some installations, which may take a few minutes. As you will see, this installation
    includes the Linux operating system and a shell to communicate with it, but not
    the graphical interface. The shell will prompt you to create a new username and
    password. Don’t hesitate to read the documentation if you find yourself stuck
    at any point during the installation and configuration of the system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次打开 Linux 子系统时，它需要执行一些安装步骤，这可能需要几分钟。正如你所看到的，这个安装包括 Linux 操作系统和一个与其通信的 shell，但不包括图形界面。shell
    会提示你创建一个新的用户名和密码。如果你在安装和配置系统时遇到困难，不要犹豫，阅读文档。
- en: '***Taking a First Look at the Shell***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***初探 Shell***'
- en: 'When you open your shell, it shows something like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开 shell 时，它会显示如下内容：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You may see some different characters toward the end, but the first part is
    the logged-in user and the name of the machine separated by an at sign:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到一些不同的字符出现在最后，但第一部分是通过 @ 符号分隔的已登录用户和机器名：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the remainder of the book, we’ll use the dollar sign ($) to signify the
    shell, and we won’t show the user and machine names:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将使用美元符号（$）表示 shell，并且不再显示用户和机器的名称：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that you know how to open a shell, let’s look at some useful commands.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何打开 shell，我们来看看一些有用的命令。
- en: '**Files and Directories**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**文件和目录**'
- en: 'Let’s try our first command: pwd (short for *print working directory*). Type
    pwd in the shell and press ENTER or RETURN . This command shows the path of the
    current directory, that is, the directory the shell is currently in:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试第一个命令：pwd（即 *print working directory* 的缩写）。在 shell 中输入 pwd 并按回车键。这条命令会显示当前目录的路径，也就是
    shell 当前所在的目录：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, the shell is telling us the current working directory is *angel*,
    which is inside the *Users* directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，shell 告诉我们当前的工作目录是*angel*，它位于*Users*目录内。
- en: 'Using the whoami command, we can also ask the shell to tell us the currently
    logged-in user:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 whoami 命令，我们还可以让 shell 告诉我们当前登录的用户：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can then list the contents inside the current directory using the ls command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 ls 命令列出当前目录中的内容：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '***Moving Around***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***移动目录***'
- en: 'We can change directories using cd followed by the name of the directory we
    want to go to:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 cd 命令后跟我们想要切换到的目录名称来切换目录：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To go back one directory, to the parent directory, we use two dots:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要回到上一级目录，即父目录，我们使用两个点：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In these two examples of the cd command, we’ve changed directories using relative
    paths. A *relative path* is a path that starts from the current location. For
    example, if we want to change directories using a relative path, we simply provide
    the route like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个 cd 命令的示例中，我们使用相对路径切换了目录。*相对路径*是从当前目录开始的路径。例如，如果我们想使用相对路径切换目录，我们只需要提供如下的路径：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can use one dot (.) to signify the current directory. So, the following
    is an alternative way of switching to the *Documents/Video* directory:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个点（.）来表示当前目录。所以，下面是切换到 *Documents/Video* 目录的另一种方法：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We may also change directories using an *absolute path*, which is a path relative
    to the root directory. The root directory’s name is simply a slash character (/).
    Let’s try to change directories to the root directory using an absolute path:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 *绝对路径* 来更改目录，绝对路径是相对于根目录的路径。根目录的名称就是一个斜杠字符（/）。让我们尝试使用绝对路径切换到根目录：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now let’s move back to our home directory. The home directory also has a special
    shortcut name, a tilde (~):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到我们的主目录。主目录也有一个特殊的快捷方式名称，即波浪号（~）：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '***Creating Files and Directories***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建文件和目录***'
- en: 'We can create new directories using the mkdir command followed by the name
    of the directory we want to create:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `mkdir` 命令创建新目录，后面跟上我们想要创建的目录名称：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here we’ve just created a new directory named *tmp* inside the working directory,
    which has another new directory inside it named *mechanics*. We could have done
    the same thing in two steps, first creating the *tmp* directory,
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们刚刚在工作目录中创建了一个名为 *tmp* 的新目录，里面有一个名为 *mechanics* 的新目录。我们本可以通过两步完成相同的操作，首先创建
    *tmp* 目录，
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: and then changing directories to *tmp* (cd tmp) and creating the *mechanics*
    directory,
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进入 *tmp* 目录（`cd tmp`），再创建 *mechanics* 目录，
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The result is the same in both cases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 两种情况的结果是一样的。
- en: 'Let’s cd into that new directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入那个新目录：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To create a new file, we can use the touch command followed by the filename:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新文件，我们可以使用 `touch` 命令，后面跟上文件名：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can write some text to the file using input redirection, which we’ll explain
    a bit more in the next section:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用输入重定向将一些文本写入文件，我们将在下一节中对此做进一步解释：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command is a bit more complex than the ones we’ve seen so far, and it
    has two parts. The first part, on the left side of the > symbol, uses the echo
    command to output write me to the file. We can run this command separately to
    see what it does:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令比我们之前看到的命令稍微复杂一些，它有两个部分。左侧的部分，在 > 符号的左边，使用 `echo` 命令将“write me”输出到文件。我们可以单独运行这个命令来看看它的效果：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we can see, the echo command simply prints what we pass it. With the > symbol,
    we can redirect the output target from the standard output (the shell) to a file
    so that the message is written to the file instead of the shell.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`echo` 命令只是简单地打印我们传递给它的内容。使用 > 符号时，我们可以将输出目标从标准输出（shell）重定向到文件，这样消息就会写入文件，而不是输出到
    shell。
- en: 'To prove that we did this, let’s read the contents of the file using the cat
    command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明我们已经删除了文件，让我们使用 `cat` 命令读取文件内容：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The cat command prints the contents of the file. The command is short for *concatenate*
    and it concatenates the contents of the file passed to it. In fact, we can pass
    cat to the same file twice to see the concatenated result:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat` 命令会打印文件的内容。该命令是 *concatenate*（连接）的缩写，它会连接传递给它的文件内容。实际上，我们可以将 `cat` 命令传递给同一个文件两次，以查看连接的结果：'
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let’s now delete the file and directories we just created.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们删除刚刚创建的文件和目录。
- en: '***Deleting Files and Directories***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***删除文件和目录***'
- en: 'To remove a file, we use the rm command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除文件，我们使用 `rm` 命令：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The file is now gone forever: there’s no trash bin or any other safety mechanism
    when working with the command line. We need to be extra careful when deleting
    files or directories.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 文件现在永远消失了：在使用命令行时没有垃圾桶或其他安全机制。我们在删除文件或目录时需要格外小心。
- en: 'Let’s go back two directories to get out of the *tmp/mechanics* folder:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到上两级目录，离开 *tmp/mechanics* 文件夹：
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If a directory is empty, we can remove it using the -d command line option.
    A *command line option* is an argument that we can pass to the command to modify
    its behavior. Command line options appear in two forms: as a single dash followed
    by one or more lowercase letters, as in -f, or as a double dash followed by a
    single or compound word, as in --file or --file-name.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个目录是空的，我们可以使用 -d 命令行选项将其删除。*命令行选项*是我们可以传递给命令的参数，用来修改其行为。命令行选项有两种形式：一种是一个短横线后跟一个或多个小写字母，如
    -f；另一种是双短横线后跟一个单词或复合词，如 --file 或 --file-name。
- en: 'Removing an empty directory is done like so:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 删除一个空目录的操作如下：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you can see, the shell returned an error message because our *tmp* directory
    is not empty (it has a subdirectory). If we want to remove a directory and all
    its subdirectories, we can use the -r option instead:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，shell 返回了一个错误消息，因为我们的 *tmp* 目录不是空的（它有一个子目录）。如果我们想要删除一个目录及其所有子目录，我们可以使用
    -r 选项：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If the directory or any subdirectory had files inside, the previous command
    would fail. This command is useful when we want to remove directories that contain
    no files, because if a file is encountered, the command won’t remove anything
    as a safety measure. To remove directories with files inside, we can use the -rf
    option:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目录或任何子目录中包含文件，前面的命令会失败。此命令在我们想删除不包含文件的目录时非常有用，因为如果遇到文件，该命令将不会删除任何东西，以确保安全。要删除包含文件的目录，我们可以使用
    -rf 选项：
- en: '[PRE26]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You want to be *extremely careful* with the rm -rf command. You can do some
    nasty, unrecoverable harm with this one.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要对 rm -rf 命令保持 *极其小心*。这个命令可能会造成一些不可恢复的严重损害。
- en: '***Commands Summary***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***命令总结***'
- en: '[Table 3-1](ch03.xhtml#ch3tab1) summarizes the commands we’ve explored in this
    section.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 3-1](ch03.xhtml#ch3tab1) 总结了我们在本节中探讨的命令。'
- en: '**Table 3-1:** Shell Commands for Files and Directories'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 3-1：** 文件和目录的 shell 命令'
- en: '| **Command** | **Description** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| whoami | Displays the effective user ID |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| whoami | 显示有效用户 ID |'
- en: '| pwd | Returns the working directory name |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| pwd | 返回当前工作目录的名称 |'
- en: '| ls | Lists the directory’s contents |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| ls | 列出目录内容 |'
- en: '| cd | Changes the directory |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| cd | 更改目录 |'
- en: '| mkdir | Creates a new directory |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| mkdir | 创建新目录 |'
- en: '| echo | Writes arguments to the standard output |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| echo | 将参数写入标准输出 |'
- en: '| cat | Concatenates and prints files |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| cat | 拼接并打印文件内容 |'
- en: '| rm | Removes a file |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| rm | 删除文件 |'
- en: '| rm -d | Removes an empty directory |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| rm -d | 删除空目录 |'
- en: '| rm -r | Removes a directory with other directories inside |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| rm -r | 删除目录及其中的子目录 |'
- en: '| rm -rf | Removes directories and files (recursively) |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| rm -rf | 删除目录及文件（递归） |'
- en: '***Using Windows Subsystem for Linux***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 Windows 子系统运行 Linux***'
- en: Now that we know the basic commands we need to move around the directories of
    a machine, let’s take a look at some specifics when working with the Windows Subsystem
    for Linux.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了基本的命令来在机器的目录之间移动，接下来让我们看看在使用 Windows 子系统运行 Linux 时的一些具体情况。
- en: '**Finding Your C: Drive**'
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**查找 C: 驱动器**'
- en: 'Every time you open your Linux subsystem, the shell’s working directory will
    be set to the Linux subsystem’s home directory. You can reveal this current directory
    using the pwd command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你打开 Linux 子系统时，shell 的工作目录将设置为 Linux 子系统的主目录。你可以使用 pwd 命令查看当前目录：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The WSL has its own directory structure disconnected from your computer’s.
    But, since you’ll be writing the code for this book on your Windows machine, you’ll
    need a way of accessing your C: drive. WSL offers a simple way of accessing the
    C: drive.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'WSL 有自己独立的目录结构，与计算机本身的目录结构不同。不过，由于你将在 Windows 机器上编写本书的代码，你需要一种访问 C: 驱动器的方式。WSL
    提供了一个简单的访问 C: 驱动器的方法。'
- en: 'Your local drives are mounted inside a directory in your Linux subsystem called
    */mnt*. Let’s cd into */mnt* and then list its contents:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你的本地驱动器会被挂载到 Linux 子系统中的一个名为 */mnt* 的目录内。让我们进入 */mnt* 目录，然后列出其内容：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'It’s important to use the absolute path (starting with /) to navigate to /mnt.
    The ls command listed my two drives: C: and D:. To open one of them, simply change
    directories:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '使用绝对路径（以 / 开头）来导航到 /mnt 是非常重要的。ls 命令列出了我的两个驱动器：C: 和 D:。要打开其中一个，只需更改目录：'
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now your WSL’s working directory is your C: drive. You can find your *Users*
    home directory or whatever folder you’ll be using to write your code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，WSL 的工作目录就是你的 C: 驱动器。你可以找到你的 *Users* 主目录，或者任何你用来编写代码的文件夹：'
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Ensuring Python’s Installation (Ubuntu)**'
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**确保 Python 安装（Ubuntu）**'
- en: 'Ubuntu comes already packed with Python version 3 installed. You can check
    the installed version from the shell:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 已预装 Python 3 版本。你可以从 shell 中检查已安装的版本：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can update Python to its latest version using Ubuntu’s apt command line
    tool. First you’ll need to update the apt package lists so that they are up-to-date
    with the latest versions of the available software. You need to run this command
    as *superuser*. You can do this by prefixing the command you want to run with
    sudo, short for *superuser* do. You’ll need to provide your password for any command
    you run as superuser:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Ubuntu 的 apt 命令行工具将 Python 更新到最新版本。首先，你需要更新 apt 软件包列表，以确保它们与最新版本的软件保持同步。你需要以
    *超级用户* 身份运行此命令。你可以通过在命令前加上 sudo（即 *superuser* do）来实现这一点。运行任何超级用户命令时，你需要提供密码：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When you write your password, you won’t see anything written in the shell.
    As you type, the prompt will remain blank, mainly for security reasons. Once the
    package lists are up-to-date, you can upgrade Python’s version:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入密码时，你不会在终端看到任何内容。输入时，提示符将保持为空，主要出于安全原因。一旦包列表更新完成，你就可以升级 Python 的版本：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now you can be sure you have the latest stable release for Python’s version
    3 available for Ubuntu. You are now ready to learn how to run Python scripts.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以确保 Ubuntu 上有最新的 Python 版本 3 的稳定版本。你已经准备好学习如何运行 Python 脚本了。
- en: '**Running Python Scripts**'
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**运行 Python 脚本**'
- en: 'Running a Python file using the command line is a straightforward process:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行运行 Python 文件是一个简单的过程：
- en: '[PRE34]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: It’s important that we use Python’s version 3 interpreter because we’ll use
    some features available only in this version. As Python versions 2 and 3 can both
    be installed on the same machine, the version 3 interpreter is named with a 3
    at the end.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 版本 3 的解释器非常重要，因为我们将使用一些仅在此版本中可用的功能。由于 Python 版本 2 和 3 可以安装在同一台机器上，因此版本
    3 的解释器名称会以 3 结尾。
- en: 'Let’s create a Python file and execute it. In your shell, use the following
    command to create a new Python file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 Python 文件并执行它。在你的终端中，使用以下命令创建一个新的 Python 文件：
- en: '[PRE35]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will create a new file, *script.py*, in the shell’s working directory.
    Open the file in PyCharm, or your editor of choice, and enter a print statement:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在终端的工作目录中创建一个新文件 *script.py*。用 PyCharm 或你选择的编辑器打开文件，并输入一个打印语句：
- en: '[PRE36]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Make sure to save the file. Let’s check that our *script.py* file was correctly
    written:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 确保保存文件。让我们检查一下我们的*script.py*文件是否正确写入：
- en: '[PRE37]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, let’s execute our Python script from the command line:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们从命令行执行我们的 Python 脚本：
- en: '[PRE38]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As expected, our program gives us a hello, World! greeting.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们的程序给出了一个问候，World！问候。
- en: '**Passing Arguments to the Script**'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**向脚本传递参数**'
- en: 'Command line programs can accept arguments. Let’s try this and accept an argument
    in our Python script to personalize the greeting. Open the *script.py* file and
    modify it so that it now contains the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行程序可以接受参数。让我们尝试一下，在我们的 Python 脚本中接受一个参数来个性化问候。打开*script.py*文件并修改它，使其包含以下内容：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Python’s sys.argv is a list of the arguments passed in to the executing script.
    This first item of the list is always the name of the executing program, in this
    case, *script.py*. For this reason, we first need to check whether the list of
    arguments contains more than one item to know whether the name was passed to the
    program as an argument. If we detect that the user passed an argument, we use
    it as the name of the person we want to greet, but if no argument is passed, we
    default the name to unknown.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 sys.argv 是传递给执行脚本的参数列表。列表的第一个项始终是执行程序的名称，在本例中是*script.py*。因此，我们首先需要检查参数列表是否包含多个项，以确定是否将名称作为参数传递给程序。如果我们检测到用户传递了参数，就将其用作我们要问候的人的名字，但如果没有传递参数，则默认名字为未知。
- en: 'We can now run our program without arguments to get an impersonal greeting:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行没有参数的程序，得到一个非个人化的问候：
- en: '[PRE40]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can also pass the script a name to get a more personalized greeting:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传递一个名字给脚本，以获得一个更加个性化的问候：
- en: '[PRE41]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Standard Input and Output**'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**标准输入和输出**'
- en: Programs executed in the shell can read and write data. When a program, like
    our *script.py* from earlier, prints something, it appears as output in the shell.
    Our earlier program outputted a string like Hello, Jenny! that was then displayed
    in the shell. The shell’s screen is generally referred to as the *standard output*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中执行的程序可以读取和写入数据。当一个程序（比如我们之前的*script.py*）打印内容时，它作为输出出现在终端中。我们之前的程序输出了像 Hello,
    Jenny! 这样的字符串，然后显示在终端屏幕上。终端的屏幕通常被称为*标准输出*。
- en: '***Redirecting the Output to a File***'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将输出重定向到文件***'
- en: Earlier, we wrote the result of an echo command to a file by redirecting the
    output with the > character.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们通过使用 > 字符将 echo 命令的输出重定向到文件中。
- en: 'Try this in your shell:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中试试这个：
- en: '[PRE42]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This time, the result of the *script.py* program wasn’t printed to the shell’s
    screen, but instead it was written to a new file, *greeting.txt*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，*script.py* 程序的结果没有打印到终端屏幕上，而是写入了一个新文件 *greeting.txt*。
- en: 'Using the > character, we can redirect the output of a program to a new file.
    If the target file already exists, it gets overwritten. We can also use the >>
    characters to append something to an existing file instead of creating a new one:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 > 字符，我们可以将程序的输出重定向到一个新文件。如果目标文件已存在，它会被覆盖。我们还可以使用 >> 字符将内容追加到现有文件，而不是创建一个新文件：
- en: '[PRE43]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is a useful technique, and we’ll use it throughout the book to write the
    result of our programs to an external file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的技巧，我们将在全书中使用它将程序的结果写入外部文件。
- en: '***Redirecting the Input from a File***'
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从文件重定向输入***'
- en: 'Much like we can redirect the shell’s standard output, we can redirect the
    shell’s input. Let’s create a new script. Instead of reading a name from the program’s
    argument, it prompts the user to write their name. First, create a new empty file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们可以重定向 shell 的标准输出一样，我们也可以重定向 shell 的输入。让我们创建一个新的脚本。与其从程序的参数中读取名字，不如提示用户输入他们的名字。首先，创建一个新的空文件：
- en: '[PRE44]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Open the file and enter the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件并输入以下代码：
- en: '[PRE45]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If we run our new script now, it’ll prompt us to write our name:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行我们的新脚本，它会提示我们输入名字：
- en: '[PRE46]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This program reads the name from the *standard input*, that is, the shell. We
    had to write the name in the shell and press RETURN for our program to read it.
    We can redirect the input from a file to our program, this time using the < character.
    In this case, the program reads the contents of the file instead of reading from
    the shell.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序从*标准输入*读取名字，也就是从 shell 读取。我们必须在 shell 中输入名字并按回车键，程序才能读取它。我们可以使用 < 字符将输入从文件重定向到我们的程序。在这种情况下，程序会读取文件的内容，而不是从
    shell 中读取。
- en: 'Let’s write a name inside a new file:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个新文件中写下一个名字：
- en: '[PRE47]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, let’s redirect the input to be read from this file to our program:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将输入重定向为从这个文件读取到我们的程序：
- en: '[PRE48]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This time, instead of having to write anything ourselves when the program prompts
    for a name, the shell read in the contents of the *name.txt* file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，当程序提示输入名字时，shell 会读取 *name.txt* 文件的内容，而不需要我们自己输入任何东西。
- en: The applications we’ll write in this book will use input redirecting to read
    the contents of an input file into our Python programs.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们将编写的应用程序会使用输入重定向将输入文件的内容读入到 Python 程序中。
- en: '**Using PyCharm’s Python Console**'
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 PyCharm 的 Python 控制台**'
- en: 'As we saw in the introduction of the book, PyCharm comes with two consoles:
    a Python console and your system’s shell. The former is especially interesting
    as it allows us to run Python code directly as well as inspect all the loaded
    symbols. You can open your PyCharm’s Python console by clicking the Python Console
    button in the lower bar or by selecting View ▸ Tool Windows ▸ Python Console in
    the menu.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书的介绍部分所看到的，PyCharm 附带了两个控制台：一个是 Python 控制台，另一个是你系统的 shell。前者特别有趣，因为它允许我们直接运行
    Python 代码并检查所有加载的符号。你可以通过点击底部栏的 Python 控制台按钮或通过菜单选择 View ▸ Tool Windows ▸ Python
    Console 来打开 PyCharm 的 Python 控制台。
- en: 'The Python console, as you can see in [Figure 3-1](ch03.xhtml#ch3fig1), is
    divided into two panes: the left pane is the console where you write Python code,
    and the right pane includes a list of all the variables you’ve defined. Let’s
    do a practical exercise to learn how this works.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 3-1](ch03.xhtml#ch3fig1)所示，Python 控制台被分为两个窗格：左侧窗格是你编写 Python 代码的控制台，右侧窗格列出了你已定义的所有变量。让我们做一个实际练习来学习它是如何工作的。
- en: '![Image](../images/03fig01.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig01.jpg)'
- en: '*Figure 3-1: PyCharm Python console*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：PyCharm Python 控制台*'
- en: 'In the Python prompt, enter the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 提示符下，输入以下内容：
- en: '[PRE49]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Now the right pane includes a list of symbols that you can explore (see [Figure
    3-2](ch03.xhtml#ch3fig2)). You can expand the names symbol to inspect the items
    inside the list.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在右侧窗格中列出了你可以探索的符号列表（见[图 3-2](ch03.xhtml#ch3fig2)）。你可以展开名字符号，检查列表中的项目。
- en: '![Image](../images/03fig02.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig02.jpg)'
- en: '*Figure 3-2: Declaring a list of names*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：声明一个名字列表*'
- en: 'Let’s now write a function to filter a list of strings, keeping only those
    that are shorter than a given length. Write the following in the console (note
    the three dots marking the indentation when writing code in the console):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们写一个函数，过滤一个字符串列表，只保留那些长度小于给定值的字符串。请在控制台中输入以下内容（注意代码中的缩进用三个点表示）：
- en: '[PRE50]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If you want to keep a reference of the filtered list, you can save the result
    to a variable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想保存过滤后的列表的引用，你可以将结果保存到一个变量中：
- en: '[PRE51]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now you can use the Python console’s right pane to explore the result list.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用 Python 控制台的右侧窗格来查看结果列表。
- en: You can also import Python modules from the console. You can import modules
    from your own project or from the standard library. For instance, if you have
    the *Mechanics* project you downloaded earlier open in PyCharm, you can import
    the Point class.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从控制台导入 Python 模块。你可以从自己的项目或标准库中导入模块。例如，如果你之前在 PyCharm 中打开了 *Mechanics* 项目，你可以导入
    Point 类。
- en: '[PRE52]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Importing a module from the standard library is equally simple. For instance,
    to import the JSONDecoder class from the json module, use the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从标准库导入模块同样简单。例如，要从 json 模块导入 JSONDecoder 类，可以使用以下代码：
- en: '[PRE53]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: From time to time we may want to reload the console so that all the imported
    modules and defined variables are cleared. This is a good idea, because the modules
    you import and the variables you define might interact with the new code you write.
    We can reload the Python’s console by clicking the reload button located at the
    top left of the console (see [Figure 3-3](ch03.xhtml#ch3fig3)).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们可能需要重新加载控制台，以便清除所有导入的模块和已定义的变量。这是个好主意，因为你导入的模块和定义的变量可能会与新写的代码产生交互。我们可以通过点击控制台左上方的重新加载按钮来重新加载
    Python 控制台（见[图 3-3](ch03.xhtml#ch3fig3)）。
- en: '![Image](../images/03fig03.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig03.jpg)'
- en: '*Figure 3-3: Reloading the console*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：重新加载控制台*'
- en: Take your time exploring PyCharm’s Python console, as you’ll find it useful
    throughout the book; we’ll often test our code by running quick experiments in
    it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 慢慢探索 PyCharm 的 Python 控制台，因为你会发现它在本书中非常有用；我们会经常通过在其中运行快速实验来测试代码。
- en: '**Summary**'
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this short chapter, we covered the basics of using the bash/zsh command line.
    From this shell we can issue commands to the computer, and we’ll execute our Python
    scripts from here. We also explored the standard input and output redirection,
    a technique we’ll use extensively throughout the book.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一短小的章节中，我们介绍了使用 bash/zsh 命令行的基础知识。通过这个终端，我们可以向计算机发出命令，并从这里执行 Python 脚本。我们还探索了标准输入和输出重定向，这是我们在全书中会广泛使用的技术。
- en: Without further ado, let’s start creating our *Mechanics* project. Let the fun
    begin!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 不再浪费时间，让我们开始创建我们的 *Mechanics* 项目吧。让乐趣开始！
