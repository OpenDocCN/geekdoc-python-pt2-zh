["```py\ntransactions = []\nbalances = {}\n\n❶ def transfer(sender, receiver, amount): \n    transactions.append((sender, receiver, amount))\n    if not sender in balances:\n        balances[sender] = 0\n    if not receiver in balances:\n        balances[receiver] = 0\n  ❷ balances[sender] -= amount \n    balances[receiver] += amount\n\ndef get_balance(user):\n    return balances[user]\n\ndef max_transaction():\n    return max(transactions, key=lambda x:x[2])\n\n❸ transfer('Alice', 'Bob', 2000) \n❹ transfer('Bob', 'Carl', 4000) \n❺ transfer('Alice', 'Carl', 2000) \n\nprint('Balance Alice: ' + str(get_balance('Alice')))\nprint('Balance Bob: ' + str(get_balance('Bob')))\nprint('Balance Carl: ' + str(get_balance('Carl')))\n\nprint('Max Transaction: ' + str(max_transaction()))\n\n❻ transfer('Alice', 'Bob', 1000) \n❼ transfer('Carl', 'Alice', 8000) \n\nprint('Balance Alice: ' + str(get_balance('Alice')))\nprint('Balance Bob: ' + str(get_balance('Bob')))\nprint('Balance Carl: ' + str(get_balance('Carl')))\n\nprint('Max Transaction: ' + str(max_transaction()))\n```", "```py\nBalance Alice: -4000\nBalance Bob: -2000\nBalance Carl: 6000\nMax Transaction: ('Bob', 'Carl', 4000)\nBalance Alice: 3000\nBalance Bob: -1000\nBalance Carl: -2000\nMax Transaction: ('Carl', 'Alice', 8000)\n```", "```py\ntransactions = []\nbalances = {}\n**max_transaction = ('X', 'Y', float('-Inf'))**\n\ndef transfer(sender, receiver, amount):\n...\n    **if amount > max_transaction[2]:**\n **max_transaction = (sender, receiver, amount)**\n```", "```py\ndef fib(n):\n    if n < 2:\n        return n\n    fib_n = fib(n-1) + fib(n-2)\n    return fib_n\n\nprint(fib(100))\n```", "```py\n354224848179261915075\n```", "```py\ncache = dict()\n\ndef fib(n):\n    if n in cache:\n        return cache[n]\n    if n < 2:\n        return n\n    fib_n = fib(n-1) + fib(n-2)\n  ❶ cache[n] = fib_n \n    return fib_n\n\nprint(fib(100))\n# 354224848179261915075\n```"]