["```py\n$ **python -m pip install --upgrade pip**\n❶ Requirement already satisfied: pip in /.../python3.11/site-packages (22.0.4)\n`--snip--`\n❷ Successfully installed pip-22.1.2\n```", "```py\n$ **python -m pip install --upgrade** `package_name`\n```", "```py\n$ **python -m pip install --user pytest**\nCollecting pytest\n `--snip--`\nSuccessfully installed attrs-21.4.0 iniconfig-1.1.1 ...pytest-7.`x`.`x`\n```", "```py\n$ **python -m pip install --user** `package_name`\n```", "```py\ndef get_formatted_name(first, last):\n    \"\"\"Generate a neatly formatted full name.\"\"\"\n    full_name = f\"{first} {last}\"\n    return full_name.title()\n```", "```py\nfrom name_function import get_formatted_name\n\nprint(\"Enter 'q' at any time to quit.\")\nwhile True:\n    first = input(\"\\nPlease give me a first name: \")\n    if first == 'q':\n        break\n    last = input(\"Please give me a last name: \")\n    if last == 'q':\n        break\n\n    formatted_name = get_formatted_name(first, last)\n    print(f\"\\tNeatly formatted name: {formatted_name}.\")\n```", "```py\nEnter 'q' at any time to quit.\n\nPlease give me a first name: **janis**\nPlease give me a last name: **joplin**\n       Neatly formatted name: Janis Joplin.\n\nPlease give me a first name: **bob**\nPlease give me a last name: **dylan**\n        Neatly formatted name: Bob Dylan.\n\nPlease give me a first name: **q**\n```", "```py\nfrom name_function import get_formatted_name\n\n❶ def test_first_last_name():\n    \"\"\"Do names like 'Janis Joplin' work?\"\"\"\n❷     formatted_name = get_formatted_name('janis', 'joplin')\n❸     assert formatted_name == 'Janis Joplin'\n```", "```py\n$ **pytest**\n========================= test session starts =========================\n❶ platform darwin -- Python 3.`x`.`x`, pytest-7.`x`.`x`, pluggy-1.`x`.`x`\n❷ rootdir: /.../python_work/chapter_11\n❸ collected 1 item\n\n❹ test_name_function.py .                                          [100%]\n========================== 1 passed in 0.00s ==========================\n```", "```py\ndef get_formatted_name(first, middle, last):\n    \"\"\"Generate a neatly formatted full name.\"\"\"\n    full_name = f\"{first} {middle} {last}\"\n    return full_name.title()\n```", "```py\n$ **pytest**\n========================= test session starts =========================\n`--snip--`\n❶ test_name_function.py F                                          [100%]\n❷ ============================== FAILURES ===============================\n❸ ________________________ test_first_last_name _________________________\n    def test_first_last_name():\n        \"\"\"Do names like 'Janis Joplin' work?\"\"\"\n❹ >       formatted_name = get_formatted_name('janis', 'joplin')\n❺ E       TypeError: get_formatted_name() missing 1 required positional\n            argument: 'last'\n\ntest_name_function.py:5: TypeError\n======================= short test summary info =======================\nFAILED test_name_function.py::test_first_last_name - TypeError:\n    get_formatted_name() missing 1 required positional argument: 'last'\n========================== 1 failed in 0.04s ==========================\n```", "```py\ndef get_formatted_name(first, last, middle=''):\n    \"\"\"Generate a neatly formatted full name.\"\"\"\n    if middle:\n        full_name = f\"{first} {middle} {last}\"\n    else:\n        full_name = f\"{first} {last}\"\n    return full_name.title()\n```", "```py\n$ **pytest**\n========================= test session starts =========================\n`--snip--`\ntest_name_function.py .                                       [100%]\n========================== 1 passed in 0.00s ==========================\n```", "```py\nfrom name_function import get_formatted_name\n\ndef test_first_last_name():\n  *--snip--*\n\ndef test_first_last_middle_name():\n    \"\"\"Do names like 'Wolfgang Amadeus Mozart' work?\"\"\"\n❶     formatted_name = get_formatted_name(\n        'wolfgang', 'mozart', 'amadeus')\n❷     assert formatted_name == 'Wolfgang Amadeus Mozart'\n```", "```py\n$ pytest\n========================= test session starts =========================\n`--snip--`\ncollected 2 items\n\n❶ test_name_function.py ..                                         [100%]\n========================== 2 passed in 0.01s ==========================\n```", "```py\nclass AnonymousSurvey:\n    \"\"\"Collect anonymous answers to a survey question.\"\"\"\n\n❶     def __init__(self, question):\n        \"\"\"Store a question, and prepare to store responses.\"\"\"\n        self.question = question\n        self.responses = []\n\n❷     def show_question(self):\n        \"\"\"Show the survey question.\"\"\"\n        print(self.question)\n\n❸     def store_response(self, new_response):\n        \"\"\"Store a single response to the survey.\"\"\"\n        self.responses.append(new_response)\n\n❹     def show_results(self):\n        \"\"\"Show all the responses that have been given.\"\"\"\n        print(\"Survey results:\")\n        for response in self.responses:\n            print(f\"- {response}\")\n```", "```py\nfrom survey import AnonymousSurvey\n\n# Define a question, and make a survey.\nquestion = \"What language did you first learn to speak?\"\nlanguage_survey = AnonymousSurvey(question)\n\n# Show the question, and store responses to the question.\nlanguage_survey.show_question()\nprint(\"Enter 'q' at any time to quit.\\n\")\nwhile True:\n    response = input(\"Language: \")\n    if response == 'q':\n        break\n    language_survey.store_response(response)\n\n# Show the survey results.\nprint(\"\\nThank you to everyone who participated in the survey!\")\nlanguage_survey.show_results()\n```", "```py\nWhat language did you first learn to speak?\nEnter 'q' at any time to quit.\n\nLanguage: **English**\nLanguage: **Spanish**\nLanguage: **English**\nLanguage: **Mandarin**\nLanguage: **q**\n\nThank you to everyone who participated in the survey!\nSurvey results:\n- English\n- Spanish\n- English\n- Mandarin\n```", "```py\nfrom survey import AnonymousSurvey\n\n❶ def test_store_single_response():\n    \"\"\"Test that a single response is stored properly.\"\"\"\n    question = \"What language did you first learn to speak?\"\n❷     language_survey = AnonymousSurvey(question)\n    language_survey.store_response('English')\n❸     assert 'English' in language_survey.responses\n```", "```py\n$ **pytest test_survey.py**\n========================= test session starts =========================\n`--snip--`\ntest_survey.py .                                                 [100%]\n========================== 1 passed in 0.01s ==========================\n```", "```py\nfrom survey import AnonymousSurvey\n\ndef test_store_single_response():\n *--snip--*\n\ndef test_store_three_responses():\n    \"\"\"Test that three individual responses are stored properly.\"\"\"\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n❶     responses = ['English', 'Spanish', 'Mandarin']\n    for response in responses:\n        language_survey.store_response(response)\n\n❷     for response in responses:\n        assert response in language_survey.responses\n```", "```py\n$ **pytest test_survey.py**\n========================= test session starts =========================\n`--snip--`\ntest_survey.py ..                                                [100%]\n========================== 2 passed in 0.01s ==========================\n```", "```py\nimport pytest\nfrom survey import AnonymousSurvey\n\n❶ @pytest.fixture\n❷ def language_survey():\n    \"\"\"A survey that will be available to all test functions.\"\"\"\n question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    return language_survey\n\n❸ def test_store_single_response(language_survey):\n    \"\"\"Test that a single response is stored properly.\"\"\"\n❹     language_survey.store_response('English')\n assert 'English' in language_survey.responses\n\n❺ def test_store_three_responses(language_survey):\n    \"\"\"Test that three individual responses are stored properly.\"\"\"\n    responses = ['English', 'Spanish', 'Mandarin']\n for response in responses:\n❻ language_survey.store_response(response)\n\n for response in responses:\n assert response in language_survey.responses\n```"]