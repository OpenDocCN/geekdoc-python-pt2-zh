["```py\nanswer = 42\n```", "```py\ninsight = answer\n```", "```py\nspam = 123456789\nmaps = spam\neggs = 123456789\n```", "```py\nprint(spam == maps)  # prints True\nprint(spam == eggs)  # prints True\n```", "```py\nprint(spam is maps)  # prints True\nprint(spam is eggs)  # prints False (probably)\n```", "```py\nanswer = 42\ninsight = 42\nprint(answer is insight)  # prints True\n```", "```py\nanswer = 42\n```", "```py\nprint(type(answer))  # prints <class 'int'>\n```", "```py\nif type(answer) is int:\n    print(\"What's the question?\")\n```", "```py\nif **isinstance(answer, int):**\n    print(\"What's the question?\")\n```", "```py\ndef spam():\n    message = \"Spam\"\n    word = \"spam\"\n    for _ in range(100):\n        separator = \", \"\n        message += separator + word\n    message += separator\n    message += \"spam!\"\n\n    return message\n```", "```py\nprint(message)  # NameError: name 'message' is not defined\n```", "```py\noutput = spam()\nprint(output)\n```", "```py\nhigh_score = 10\n```", "```py\ndef score():\n    new_score = 465               # SCORING LOGIC HERE\n    if new_score > ❶ high_score:  # ERROR: UnboundLocalError\n        print(\"New high score\")\n      ❷ high_score = new_score\n\nscore()\nprint(high_score)\n```", "```py\ndef score():\n    **global high_score**\n    new_score = 465  # SCORING LOGIC HERE\n    if new_score > high_score:\n        print(\"New high score\")\n        high_score = new_score\n\nscore()\nprint(high_score)   # prints 465\n```", "```py\ncurrent_score = 0\n\ndef score():\n    new_score = 465   # SCORING LOGIC HERE\n    current_score = new_score\n\nscore()\nprint(current_score)  # prints 0\n```", "```py\ncurrent_score = 0\n\ndef score():\n    **global current_score**\n new_score = 465  # SCORING LOGIC HERE\n    current_score = new_score\n\nscore()\nprint(current_score)  # prints 465\n```", "```py\nspam = True\n\ndef order():\n    eggs = 12\n\n    def cook():\n      ❶ nonlocal eggs\n\n        if spam:\n            print(\"Spam!\")\n\n        if eggs:\n            eggs -= 1\n            print(\"...and eggs.\")\n\n    cook()\n\norder()\n```", "```py\nclass Nutrimatic:\n  ❶ output = \"Something almost, but not quite, entirely unlike tea.\"\n\n    def request(self, beverage):\n        return ❷ self.output\n\nmachine = Nutrimatic()\nmug = machine.request(\"Tea\")\nprint(mug)   # prints \"Something almost, but not quite, entirely unlike tea.\"\n\nprint( ❸ machine.output)\nprint( ❹ Nutrimatic.output)\n```", "```py\nSomething almost, but not quite, entirely unlike tea.\nSomething almost, but not quite, entirely unlike tea.\nSomething almost, but not quite, entirely unlike tea.\n```", "```py\neggs = 12\ncarton = eggs\nprint(eggs is carton)  # prints True\neggs += 1\nprint(eggs is carton)  # prints False\nprint(eggs)            # prints 13\nprint(carton)          # prints 12\n```", "```py\ntemps = [87, 76, 79]\nhighs = temps\nprint(temps is highs)  # prints True\n❶ temps += [81]\nprint(temps is highs)  # prints True\nprint(highs)           # prints [87, 76, 79, 81]\nprint(temps)           # prints [87, 76, 79, 81]\n```", "```py\ndef greet(person):\n    print(f\"Hello, {person}.\")\n\nmy_name = \"Jason\"\ngreet(my_name)\n```", "```py\ndef find_lowest(temperatures):\n    temperatures.sort()\n    print(temperatures[0])\n```", "```py\ntemps = [85, 76, 79, 72, 81]\nfind_lowest(temps)\nprint(temps)\n```", "```py\n72\n[72, 76, 79, 81, 85]\n```", "```py\ndef find_lowest(temperatures):\n    **sorted_temps =** ❶ **sorted(**temperatures**)**  # sorted returns a new list\n    print(sorted_temps[0])\n```", "```py\nboard = [[\"-\"] ❶ * 3] * 3  # Create a board\n```", "```py\n❷ board[1][0] = \"X\"  # Make a move\n\n# Print board to screen\nfor row in board:\n    print(f\"{row[0]} {row[1]} {row[2]}\")\n```", "```py\n- - -\nX - -\n- - -\n```", "```py\nX - -\nX - -\nX - -\n```", "```py\nboard = **[[\"-\"] * 3 for _ in range(3)]**\n```", "```py\n- - -\nX - -\n- - -\n```", "```py\nscores_team_1 = [100, 95, 120]\nscores_team_2 = [45, 30, 10]\nscores_team_3 = [200, 35, 190]\n\nscores = (scores_team_1, scores_team_2, scores_team_3)\n```", "```py\nscores_team_1[0] = 300\nprint(scores[0])  # prints [300, 95, 120]\n```", "```py\nscores[0][0] = 400\nprint(scores[0])  # prints [400, 95, 120]\n```", "```py\nclass Taco:\n\n    def __init__(self, toppings):\n        self.ingredients = toppings\n\n    def add_sauce(self, sauce):\n        self.ingredients.append(sauce)\n```", "```py\ndefault_toppings = [\"Lettuce\", \"Tomato\", \"Beef\"]\nmild_taco = Taco(default_toppings)\nhot_taco = Taco(default_toppings)\nhot_taco.add_sauce(\"Salsa\")\n```", "```py\nprint(f\"Hot: {hot_taco.ingredients}\")\nprint(f\"Mild: {mild_taco.ingredients}\")\nprint(f\"Default: {default_toppings}\")\n```", "```py\nHot: ['Lettuce', 'Tomato', 'Beef', 'Salsa']\nMild: ['Lettuce', 'Tomato', 'Beef', 'Salsa']\nDefault: ['Lettuce', 'Tomato', 'Beef', 'Salsa']\n```", "```py\n**import copy**\n\nclass Taco:\n\n    def __init__(self, toppings):\n        self.ingredients = ❶ **copy.copy(toppings)**\n\n    def add_sauce(self, sauce):\n        self.ingredients.append(sauce)\n```", "```py\nHot: ['Lettuce', 'Tomato', 'Beef', 'Salsa']\nMild: ['Lettuce', 'Tomato', 'Beef']\nDefault: ['Lettuce', 'Tomato', 'Beef']\n```", "```py\ndefault_toppings = [\"Lettuce\", \"Tomato\", \"Beef\"]\nmild_taco = Taco(default_toppings)\nhot_taco = ❶ **copy.copy(mild_taco)**\nhot_taco.add_sauce(\"Salsa\")\n```", "```py\nHot: [\"Lettuce\", \"Tomato\", \"Beef\", \"Salsa\"]\nMild: [\"Lettuce\", \"Tomato\", \"Beef\", \"Salsa\"]\nDefault: [\"Lettuce\", \"Tomato\", \"Beef\"]\n```", "```py\ndefault_toppings = [\"Lettuce\", \"Tomato\", \"Beef\"]\nmild_taco = Taco(default_toppings)\nhot_taco = ❶ copy.**deepcopy**(mild_taco)\nhot_taco.add_sauce(\"Salsa\")\n```", "```py\nHot: [\"Lettuce\", \"Tomato\", \"Cheese\", \"Beef\", \"Salsa\"]\nMild: [\"Lettuce\", \"Tomato\", \"Cheese\", \"Beef\"]\nDefault: [\"Lettuce\", \"Tomato\", \"Cheese\", \"Beef\"]\n```", "```py\nprint(42.5)   # coerces to a string\nx = 5 + 1.5   # coerces to a float (6.5)\ny = 5 + True  # coerces to an int (6)...and is also considered a bad idea\n```", "```py\nlife_universe_everything = \"42\"\n\nanswer = float(life_universe_everything)\n```", "```py\nprint(type(answer))\nprint(answer)\n```", "```py\n<class 'float'>\n42.0\n```", "```py\ndef calculate_age(intBirthYear, intCurrentYear):\n    intAge = intCurrentYear - intBirthYear\n    return intAge\n\ndef calculate_third_age_year(intCurrentAge, intCurrentYear):\n    floatThirdAge = intCurrentAge / 3\n    floatCurrentYear = float(intCurrentYear)\n    floatThirdAgeYear = floatCurrentYear - floatThirdAge\n    intThirdAgeYear = int(floatThirdAgeYear)\n    return intThirdAgeYear\n\nstrBirthYear = \"1985\"    # get from user, assume data validation\nintBirthYear = int(strBirthYear)\n\nstrCurrentYear = \"2010\"  # get from system\nintCurrentYear = int(strCurrentYear)\n\nintCurrentAge = calculate_age(intBirthYear, intCurrentYear)\nintThirdAgeYear = calculate_third_age_year(intCurrentAge, intCurrentYear)\nprint(intThirdAgeYear)\n```", "```py\ndef calculate_age(birth_year, current_year):\n    return (current_year - birth_year)\n\ndef calculate_third_age_year(current_age, current_year):\n    return int(current_year - (current_age / 3))\n\nbirth_year = \"1985\"    # get from user, assume data validation\nbirth_year = int(birth_year)\n\ncurrent_year = \"2010\"  # get from system\ncurrent_year = int(current_year)\n\ncurrent_age = calculate_age(birth_year, current_year)\nthird_age_year = calculate_third_age_year(current_age, current_year)\nprint(third_age_year)\n```"]