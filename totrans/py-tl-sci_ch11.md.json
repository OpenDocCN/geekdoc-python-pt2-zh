["```py\nIn [1]: def warning():\n   ...:     print(\"WARNING: Converting units from metric to Imperial!\")\n```", "```py\nIn [2]: warning()\nWARNING: Converting units from metric to Imperial!\n```", "```py\nIn [3]: type(warning)\nOut[3]: function\n```", "```py\nIn [4]: def calc_force(mass, acceleration):\n   ...:      return mass * acceleration\n```", "```py\nIn [5]: calc_force(15000, 9.78033)\nOut[5]: 146704.94999999998\n```", "```py\nIn [6]: calc_force(mass=15000, acceleration=9.78)\nOut[6]: 146700.0\n```", "```py\nIn [7]: calc_force(acceleration=9.78, mass=15000)\nOut[7]: 146700.0\n```", "```py\nIn [8]: calc_force(15000, acceleration=9.78)\nOut[8]: 146700.0\n```", "```py\nIn [9]: calc_force(mass=15000, 9.78)\n\nFile \"C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_3212/3649549750.py\", line 1\ncalc_force(mass=15000, 9.78)\n^\nSyntaxError: positional argument follows keyword argument\n```", "```py\nIn [10]: def calc_force(*, mass, acceleration):\n    ...:      return(mass * acceleration)\n```", "```py\nIn [11]: calc_force(15000, 9.78)\nTraceback (most recent call last):\n\nFile \"C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_3212/2133932729.py\", line 1, in <module>\ncalc_force(15000, 9.78)\n\nTypeError: calc_force() takes 0 positional arguments but 2 were given\n```", "```py\nIn [12]: def default_input(prompt, default=None):\n    ...:   ➊ prompt = f'{prompt} [{default}]:'\n    ...:      response = input(prompt)\n    ...:   ➋ if not response and default:\n    ...:           return default\n    ...:      else:\n    ...:           return response\n```", "```py\nIn [13]: birth_country = default_input('Enter your country of birth:', 'USA')\nEnter your country of birth: [USA]:\n\nIn [14]: birth_country\nOut[14]: 'USA'\n```", "```py\nIn [15]: birth_country = default_input('Enter your country of birth:', 'USA')\n\nEnter your country of birth: [USA]: Scotland\n\nIn [16]: birth_country\nOut[16]: 'Scotland'\n```", "```py\nIn [17]: def dog_breeds(new, current=['bulldog', 'dachshund']):\n    ...:     current.append(new)\n    ...:     return current\n\nIn [18]: my_dogs = dog_breeds('pomeranian')\n\nIn [19]: my_dogs\nOut[19]: ['bulldog', 'dachshund', 'pomeranian']\n\nIn [20]: your_dogs = dog_breeds('poodle')\n\nIn [21]: his_dogs = dog_breeds('mutt')\n\nIn [22]: his_dogs\nOut[22]: ['bulldog', 'dachshund', 'pomeranian', 'poodle', 'mutt']\n```", "```py\nIn [23]: force = calc_force(15000, 9.78033)\n\nIn [24]: force\nOut[24]: 146704.94999999998\n```", "```py\nIn [25]: def square_and_cube(a_number):\n    ...:      return a_number**2, a_number**3\n\nIn [26]: squared, cubed = square_and_cube(2)\n\nIn [27]: squared, cubed\nOut[27]: (4, 8)\n```", "```py\nIn [28]: def goldilocks(a_number):\n    ...:      num = int(a_number)\n    ...:      if num > 42:\n    ...:           return \"too high\"\n    ...:      elif num < 42:\n    ...:           return \"too low\"\n    ...:      else:\n    ...:           return \"just right!\"\n\nIn [29]: goldilocks(43)\nOut[29]: 'too high'\n\nIn [30]: goldilocks(41)\nOut[30]: 'too low'\n\nIn [31]: goldilocks(42)\nOut[31]: 'just right!'\n```", "```py\nIn [32]: def success():\n    ...:      print(\"You found the number 3!\")   \n\nIn [33]: def find_3():\n    ...:      for i in range(6):\n    ...:           if i == 3:\n    ...:                success()\n\nIn [34]: find_3()\nYou found the number 3!\n```", "```py\nIn [35]: def find_3():\n    ...:     for i in range(6):\n    ...:         if i == 3:\n    ...:             success()\n\nIn [36]: print(\"Here's some other code...\")\nHere's some other code...\n\nIn [37]: print(\"Here's some more code...\")\nHere's some more code...\n\nIn [38]: def success():\n    ...:      print(\"You found the number 3!\")\n\nIn [39]: find_3()\nYou found the number 3!\n```", "```py\nIn [40]: x = 42\n\nIn [41]: print(x)\n42\n\nIn [42]: def local_scope():\n    ...:     x = 5\n    ...:     print(x)\n\nIn [43]: local_scope()\n5\n\nIn [44]: print(x)\n42\n```", "```py\nIn [45]: x = 42\n\nIn [46]: def local_scope():\n    ...:      global x\n    ...:      x = 5\n    ...:      print(x)\n\nIn [47]: local_scope()\n5\n\nIn [48]: print(x)\n5\n```", "```py\nfrom random import uniform\n\ndef main():\n    data = generate_data()\n    print(f\"data = {data}\")\n    calc_mean(data)\n    calc_max_value(data)\n    calc_min_value(data)\n\ndef generate_data():\n    samples = []\n    for _ in range(10):\n     ➊ sample = round(uniform(0.0, 50.0), 1)\n        samples.append(sample)\n    return samples\n\ndef calc_mean(data):\n    print(f\"\\nMean = {round(sum(data) / len(data), 1)}\")\n\ndef calc_max_value(data):\n    print(f\"Max = {max(data)}\")\n\ndef calc_min_value(data):\n    print(f\"Min = {min(data)}\")\n\nmain()\n```", "```py\nIn [49]: def beer(bottles):\n    ...:   ➊ if bottles <= 0:\n    ...:           print(\"No more bottles of beer on the wall!\")\n    ...:      elif bottles == 1:\n    ...:           print(f\"{bottles} bottle of beer on the wall!\")\n    ...:           beer(bottles - 1)\n    ...:      else:\n    ...:           print(f\"{bottles} bottles of beer on the wall!\")\n    ...:           beer(bottles - 1)\n\nIn [50]: beer(3)\n3 bottles of beer on the wall!\n2 bottles of beer on the wall!\n1 bottle of beer on the wall!\nNo more bottles of beer on the wall!\n```", "```py\nIn [51]: def keep_on_keeping_on():\n    ...:      print(\"Somebody stop me!\")\n    ...:      keep_on_keeping_on()\n\nIn [52]: keep_on_keeping_on()\n```", "```py\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```", "```py\nIn [53]: import sys\n\nIn [54]: print(sys.getrecursionlimit())\n3000\n```", "```py\nIn [55]: def area_of_square(side_length):\n    ...:      area = side_length**2\n    ...:      print(f\"Area is {area}\")\n    ...:      return area\n\nIn [56]: area_of_square(50)\nArea is 2500\nOut[56]: 2500\n```", "```py\nlambda parameter_1, parameter_2: expression\n```", "```py\nIn [57]: multiply = lambda a, b: a * b\n\nIn [58]: multiply(6, 7)\nOut[58]: 42\n```", "```py\nIn [59]: (lambda a, b: a * b)(6, 7)\nOut[59]: 42\n```", "```py\nIn [60]: numbers = [5, 42, 26, 55, 12, 0, 99]\n\nIn [61]: filtered = filter(lambda x: x < 10, numbers)\n\nIn [62]: print(list(filtered))\n[5, 0]\n```", "```py\nIn [63]: def cubes(my_range):\n    ...:      for i in range(1, my_range + 1):\n    ...:           yield i**3 \nIn [64]:\n```", "```py\nIn [65]: cubes(5)\nOut[65]: <generator object cubes at 0x0000017FE06834A0>\n```", "```py\nIn [66]: cube_gen = cubes(5)\n\nIn [67]: next(cube_gen)\nOut[67]: 1\n\nIn [68]: next(cube_gen)\nOut[68]: 8\n\nIn [69]: next(cube_gen)\nOut[69]: 27\n\nIn [70]: next(cube_gen)\nOut[70]: 64\n\nIn [71]: next(cube_gen)\nOut[71]: 125\n\nIn [72]: next(cube_gen)\nTraceback (most recent call last): File \"C:\\Users\\hanna\\AppData\\Local\\Temp/ipykernel_23936/2492540236.py\", line 1, in <module>\nnext(cube_gen)\n\nStopIteration\n```", "```py\nIn [73]: for i in cube_gen:\n    ...:      print(i)\n\nIn [74]:\n```", "```py\nIn [75]: cube_gen = cubes(5)\n\nIn [76]: for i in cube_gen:\n    ...:      print(i)\n1\n8\n27\n64\n125\n```", "```py\nIn [77]: my_gen = (i for i in range(5))\n\nIn [78]: my_gen\nOut[78]: <generator object <genexpr> at 0x000001C0DC3280B0>\n```", "```py\nIn [79]: sum(x**2 for x in range(500))\nOut[79]: 41541750\n```", "```py\nIn [80]: my_list = list(range(5))\n\nIn [81]: my_list\nOut[81]: [0, 1, 2, 3, 4]\n```", "```py\nIn [82]: my_tuple = tuple(i**2 for i in my_list)\n\nIn [83]: my_tuple\nOut[83]: (0, 1, 4, 9, 16)\n```", "```py\nstatic PyObject *\nbuiltin_len(PyObject *module, PyObject *obj)\n/*[clinic end generated code: output=fa7a270d314dfb6c input=bc55598da9e9c9b5]*/\n{\n    Py_ssize_t res;\n\n    res = PyObject_Size(obj);\n    if (res < 0) {\n        assert(PyErr_Occurred());\n        return NULL;\n    }\n    return PyLong_FromSsize_t(res);\n}\n```", "```py\nIn [84]: import random\n```", "```py\nIn [85]: planets = ['Mars', 'Venus', 'Jupiter']\n\nIn [86]: planet = random.choice(planets)\n\nIn [87]: planet\nOut[87]: 'Venus'\n```", "```py\nIn [88]: from random import choice, randint, shuffle\n```", "```py\nIn [89]: from random import choice\n\nIn [90]: planet = choice(planets)\n\nIn [91]: planet\nOut[91]: 'Mars'\n```", "```py\nIn [92]: import random as ran\n\nIn [93]: planet = ran.choice(planets)\n\nIn [94]: planet\nOut[94]: 'Jupiter'\n```", "```py\nIn [95]: from random import *\n```", "```py\nIn [96]: import random\n\nIn [97]: dir(random)\nOut[97]: \n['BPF',\n--snip--\n'betavariate',\n'choice',\n'choices',\n'expovariate',\n'gammavariate',\n'gauss',\n'getrandbits',\n'getstate',\n'lognormvariate',\n'normalvariate',\n'paretovariate',\n'randint',\n'random',\n'randrange',\n'sample',\n'seed',\n'setstate',\n'shuffle',\n'triangular', 'uniform',\n'vonmisesvariate',\n'weibullvariate']\n```", "```py\nIn [98]: import inspect\n\nIn [99]: print(inspect.getsource(random.choice))\ndef choice(self, seq):\n     \"\"\"Choose a random element from a non-empty sequence.\"\"\"\n     try:\n          i = self._randbelow(len(seq))\n     except ValueError:\n          raise IndexError('Cannot choose from an empty sequence') from None\n     return seq[i]\n```", "```py\nIn [100]: print(inspect.getdoc(random.choice))\nChoose a random element from a non-empty sequence.\n```", "```py\nIn [101]: import sys\n\nIn [102]: sys.path.append(r'/path/to/my_module')\n```", "```py\nimport math\n\ndef quad(a, b, c):\n    x1 = (-b - (b**2 - 4 * a * c)**0.5) / (2 * a)\n    x2 = (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n    return x1, x2\n\ndef sphere_vol(r):\n    vol = (4 / 3) * math.pi * r**3\n    return round(vol, 2)\n```", "```py\nIn [103]: import os\n\nIn [104]: os.getcwd()\nOut[104]: 'C:\\\\Users\\\\hanna\\\\spyder_proj_w_env\\\\code'\n```", "```py\nIn [105]: import mymath\n\nIn [106]: mymath.quad(2, 5, -3)\nOut[106]: (-3.0, 0.5) In [107]: mymath.sphere_vol(100)\nOut[107]: 4188790.2\n```", "```py\nIn [108]: soln1, soln2 = mymath.quad(2, 5, -3)\n\nIn [109]: soln1, soln2 \nOut[109]: (-3.0, 0.5)\n```", "```py\n   import math\n\n➊ def main():\n       a = 2\n       b = 5 c = -3\n       r = 100\n       soln1, soln2 = quad(a, b, c)\n       vol = sphere_vol(r)\n       print(f'solution1 = {soln1}')\n       print(f'solution2 = {soln2}')\n       print(f'sphere volume = {vol}')\n\n   def quad(a, b, c):\n       x1 = (–b - (b**–2 - 4 * a * c)**0.5) / (2 * a)\n       x2 = (-b + (b**–2 - 4 * a * c)**0.5) / (2 * a)\n       return x1, x2\n\n   def sphere_vol(r):\n       vol = (4 / 3) * math.pi * r**3\n       return round(vol, 2)\n\n➋ if __name__ == '__main__':\n       main()\n```", "```py\nIn [110]: runfile('C:/Users/hanna/spyder_proj_w_env/code/mymath2.py', wdir='C:/Users/hanna/\nspyder_proj_w_env/code')\nsolution1 = -3.0\nsolution2 = 0.5\nsphere volume = 4188790.2\n```"]