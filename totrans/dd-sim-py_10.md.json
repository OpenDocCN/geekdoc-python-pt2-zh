["```py\nimport random\n\ndef generate_puzzle(low=1, high=100):\n    print(f\"I'm thinking of a number between {low} and {high}...\")\n    return random.randint(low, high)\n```", "```py\ndef make_guess(target):\n    guess = int(input(\"Guess: \"))\n\n    if guess == target:\n        return True\n\n    if guess < target:\n        print(\"Too low.\")\n    elif guess > target:\n        print(\"Too high.\")\n    return False\n```", "```py\ndef play(tries=8):\n    target = generate_puzzle()\n    while tries > 0:\n        if make_guess(target):\n            print(\"You win!\")\n            return\n\n tries -= 1\n        print(f\"{tries} tries left.\")\n\n    print(f\"Game over! The answer was {target}.\")\n```", "```py\nif __name__ == '__main__':\n    play()\n```", "```py\nI'm thinking of a number between 1 and 100...\nGuess: 50\nToo low.\n7 tries left.\nGuess: 75\nToo low.\n6 tries left.\nGuess: 90\nToo high.\n5 tries left.\nGuess: 87\nYou win!\n```", "```py\nI'm thinking of a number between 1 and 100...\nGuess: Fifty\nTraceback (most recent call last):\n  File \"./number_guess.py\", line 35, in <module>\n    play()\n  File \"./number_guess.py\", line 25, in play\n    if make_guess(target):\n File \"./number_guess.py\", line 10, in make_guess\n    guess = int(input(\"Guess: \"))\nValueError: invalid literal for int() with base 10: 'Fifty'\n```", "```py\nValueError: invalid literal for int() with base 10: 'Fifty'\n```", "```py\n File \"./number_guess.py\", line 10, in make_guess\n    guess = int(input(\"Guess: \"))\n```", "```py\n File \"./number_guess.py\", line 25, in play\n    if make_guess(target):\n```", "```py\n File \"./number_guess.py\", line 35, in <module>\n    play()\n```", "```py\nTraceback (most recent call last):\n```", "```py\ndef make_guess(target):\n    **guess = None**\n    **while guess is None:**\n        **try:**\n            guess = int(input(\"Guess: \"))\n        **except ValueError:**\n            **print(\"Enter an integer.\")**\n\n    if guess == target:\n        return True\n\n    if guess < target:\n        print(\"Too low.\")\n    elif guess > target:\n        print(\"Too high.\")\n    return False\n```", "```py\ndef make_guess(target):\n    guess = None\n    while guess is None:\n        guess = input()\n        **if guess.isdigit():**\n            guess = int(guess)\n        **else:**\n            print(\"Enter an integer.\")\n            guess = None\n\n    if guess == target:\n        return True\n\n    if guess < target:\n        print(\"Too low.\")\n    elif guess > target:\n        print(\"Too high.\")\n    return False\n```", "```py\nclass AverageCalculator:\n\n    def __init__(self):\n        self.total = 0\n        self.count = 0\n\n    def __call__(self, *values):\n        if values:\n            for value in values:\n                self.total += float(value)\n                self.count += 1\n        return self.total / self.count\n```", "```py\naverage = AverageCalculator()\nvalues = input(\"Enter scores, separated by spaces:\\n    \").split()\ntry:\n    print(f\"Average is {average(*values)}\")\nexcept ❶ ZeroDivisionError:\n    print(\"ERROR: No values provided.\")\nexcept ( ❷ ValueError, ❸ UnicodeError):\n    print(f\"ERROR: All inputs should be numeric.\")\n```", "```py\ntry:\n    some_scary_function()\nexcept:\n    print(\"An error occurred. Moving on!\")\n```", "```py\ndef greet():\n    name = input(\"What's your name? \")\n    print(f\"Hello, {name}.\")\n\nwhile True:\n    try:\n        greet()\n        break\n    except:\n        print(\"Error caught\")\n```", "```py\nWhat's your name? ^CError caught\nWhat's your name? ^CError caught\nWhat's your name? ^CError caught\nWhat's your name? \n```", "```py\ndef greet():\n    name = input(\"What's your name? \")\n    print(f\"Hello, {name}.\")\n\nwhile True:\n    try:\n        greet()\n        break\n **except Exception:**\n        print(\"Error caught\")\n```", "```py\ndef average(number_string):\n    total = 0\n    skip = 0\n    values = 0\n    for n in number_string.split():\n        values += 1\n      ❶ try:\n            total += float(n)\n      ❷ except ValueError:\n            skip += 1\n```", "```py\n ❸ if skip == values:\n        raise ValueError(\"No valid numbers provided.\")\n    elif skip:\n        print(f\"<!> Skipped {skip} invalid values.\")\n\n    return total / values\n```", "```py\nwhile True:\n    line = input(\"Enter numbers (space delimited):\\n    \")\n    avg = average(line)\n    print(avg)\n```", "```py\nEnter numbers (space delimited):\n    4 5 6 7 \n5.5\n```", "```py\nEnter numbers (space delimited):\n    four five 6 7\n<!> Skipped 2 invalid values.\n3.25\n```", "```py\nEnter numbers (space delimited):\n    four five six seven\nTraceback (most recent call last):\n  File \"./raiseexception.py\", line 25, in <module>\n    avg = average(line)\n  File \"./raiseexception.py\", line 16, in average\n    raise ValueError(\"No valid numbers provided.\")\nValueError: No valid numbers provided.\n```", "```py\nwhile True:\n    **try:**\n        line = input(\"Enter numbers (space delimited):\\n    \")\n        avg = average(line)\n print(avg)\n    **except ValueError:**\n        **print(\"No valid numbers provided.\")**\n```", "```py\nEnter numbers (space delimited):\n    four five six\nNo valid numbers provided.\nEnter numbers (space delimited):\n    4 5 6\n5.0\n```", "```py\nfriend_emails = {\n    \"Anne\": \"anne@example.com\",\n    \"Brent\": \"brent@example.com\",\n    \"Dan\": \"dan@example.com\",\n    \"David\": \"david@example.com\",\n    \"Fox\": \"fox@example.com\",\n    \"Jane\": \"jane@example.com\",\n    \"Kevin\": \"kevin@example.com\",\n    \"Robert\": \"robert@example.com\"\n}\n```", "```py\ndef lookup_email(name):\n    try:\n        return friend_emails[name]\n except KeyError ❶ as e:\n        print(f\"<No entry for friend {e}>\")\n```", "```py\nname = input(\"Enter name to look up: \")\nemail = lookup_email(name)\nprint(f\"Email: {email}\")\n```", "```py\nEnter name to look up: Jason\n<No entry for friend 'Jason'>\nEmail: None\n```", "```py\nimport logging\nfrom operator import add, sub, mul, truediv\nimport sys\n```", "```py\nlogging.basicConfig(filename='log.txt', level=logging.INFO)\n```", "```py\ndef calculator(a, b, op):\n    a = float(a)\n    b = float(b)\n    if op == '+':\n        return ❶ add(a, b)\n    elif op == '-':\n        return sub(a, b)\n    elif op == '*':\n        return mul(a, b)\n    elif op == '/':\n        return truediv(a, b)\n    else:\n      ❷ raise NotImplementedError(f\"No operator {op}\")\n```", "```py\nprint(\"\"\"CALCULATOR\nUse postfix notation.\nCtrl+C or Ctrl+D to quit.\n\"\"\")\n\n❶ while True:\n  ❷ try:\n        equation = input(\" \").split()\n        result = calculator(*equation)\n        print(result)\n```", "```py\n except NotImplementedError as e:\n        print(\"<!> Invalid operator.\")\n        logging.info(e)\n```", "```py\n except ValueError as e:\n        print(\"<!> Expected format: <A> <B> <OP>\")\n        logging.info(e)\n```", "```py\n except TypeError as e:\n        print(\"<!> Wrong number of arguments. Use: <A> <B> <OP>\")\n        logging.info(e)\n```", "```py\n except ZeroDivisionError as e:\n        print(\"<!> Cannot divide by zero.\")\n        logging.info(e)\n```", "```py\n except (KeyboardInterrupt, EOFError):\n        print(\"\\nGoodbye.\")\n        sys.exit(0)\n```", "```py\nCALCULATOR\nUse postfix notation.\nCtrl+C or Ctrl+D to quit.\n\n 11 31 +\n42.0\n 11 + 31\n<!> Expected format: <A> <B> <OP>\n 11 + 31 + 10\n<!> Wrong number of arguments. Use: <A> <B> <OP>\n 11 +\n<!> Wrong number of arguments. Use: <A> <B> <OP>\n 10 0 /\n<!> Cannot divide by zero.\n 10 40 @\n<!> Invalid operator.\n ^C\nGoodbye.\n```", "```py\nINFO:root:could not convert string to float: '+'\nINFO:root:calculator() takes 3 positional arguments but 5 were given\nINFO:root:calculator() missing 1 required positional argument: 'op'\nINFO:root:float division by zero\nINFO:root:No operator @\n```", "```py\n except Exception as e:\n        logging.exception(e)\n      ❶ raise\n```", "```py\ncities = {\n    \"SEATTLE\": \"WASHINGTON, USA\",\n    \"PORTLAND\": \"OREGON, USA\",\n    \"BOSTON\": \"MASSACHUSETTS, USA\",\n}\n\nlandmarks = {\n    \"SPACE NEEDLE\": \"SEATTLE\",\n    \"LIBERTY SHIP MEMORIAL\": \"PORTLAND\",\n    \"ALAMO\": \"SAN ANTONIO\",\n}\n```", "```py\ndef lookup_landmark(landmark):\n    landmark = landmark.upper()\n    try:\n        city = landmarks[landmark]\n        state = cities[city]\n  ❶ except KeyError as e:\n      ❷ raise KeyError(\"Landmark not found.\") from e\n    print(f\"{landmark} is in {city}, {state}\")\n```", "```py\nlookup_landmark(\"space needle\")\nlookup_landmark(\"alamo\")\nlookup_landmark(\"golden gate bridge\")\n```", "```py\nSPACE NEEDLE is in SEATTLE, WASHINGTON, USA\nTraceback (most recent call last):\n  File \"./chaining.py\", line 18, in lookup_landmark\n    state = cities[city]\n❶ KeyError: 'SAN ANTONIO'\n\n❷ The above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n File \"./chaining.py\", line 25, in <module>\n    lookup_landmark(\"alamo\")\n  File \"./chaining.py\", line 20, in lookup_landmark\n    raise KeyError(\"Landmark not found.\") from e\n❸ KeyError: 'Landmark not found.'\n```", "```py\nDuring handling of the above exception, another exception occurred:\n```", "```py\nimport math\n\ndef average_string(number_string):\n    try:\n        numbers = [float(n) for n in number_string.split()]\n except ValueError:\n        total = math.nan\n        values = 1\n```", "```py\n else:\n        total = sum(numbers)\n        values = len(numbers)\n```", "```py\n try:\n        average = total / values\n    except ZeroDivisionError:\n        average = math.inf\n\n    return average\n\nwhile True:\n    number_string = input(\"Enter space-delimited list of numbers:\\n    \")\n    print(average_string(number_string))\n```", "```py\n 4 5 6 7\n5.5\n\ninf\n    four five six\nnan\n```", "```py\ndef average_file(path):\n    file = open(path, 'r')\n\n    try:\n      ❶ numbers = [float(n) for n in file.readlines()]\n```", "```py\n except ValueError as e:\n        raise ValueError(\"File contains non-numeric values.\") from e\n```", "```py\n else:\n        try:\n            return sum(numbers) / len(numbers)\n        except ZeroDivisionError as e:\n            raise ValueError(\"Empty file.\") from e\n```", "```py\n finally:\n        print(\"Closing file.\")\n        file.close()\n```", "```py\nprint(average_file('numbers_good.txt'))\n```", "```py\nClosing file.\n42.0\n```", "```py\nprint(average_file('numbers_bad.txt'))\n```", "```py\n❶ Closing file.\nTraceback (most recent call last):\n  File \"tryfinally.py\", line 5, in average_file\n    numbers = [float(n) for n in file.readlines()]\n  File \"tryfinally.py\", line 5, in <listcomp>\n    numbers = [float(n) for n in file.readlines()]\nValueError: could not convert string to float: 'thirty-three\\n'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"tryfinally.py\", line 20, in <module>\n    print(average_file('numbers_bad.txt'))  # ValueError\n  File \"tryfinally.py\", line 7, in average_file\n    raise ValueError(\"File contains non-numeric values.\") from e\nValueError: File contains non-numeric values.\n```", "```py\nprint(average_file('numbers_empty.txt'))\n```", "```py\n❶ Closing file.\nTraceback (most recent call last):\n  File \"tryfinally.py\", line 10, in average_file\n    return sum(numbers) / len(numbers)\nZeroDivisionError: division by zero\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"tryfinally.py\", line 21, in <module>\n    print(average_file('numbers_empty.txt'))  # ValueError\n  File \"tryfinally.py\", line 12, in average_file\n    raise ValueError(\"Empty file.\") from e\n❷ ValueError: Empty file.\n```", "```py\nprint(average_file('nonexistent.txt'))\n```", "```py\nTraceback (most recent call last):\n  File \"tryfinally.py\", line 22, in <module>\n    print(average_file('nonexistent.txt'))  # FileNotFoundError\n  File \"tryfinally.py\", line 2, in average_file\n    file = open(path, 'r')\nFileNotFoundError: [Errno 2] No such file or directory: 'nonexistent.txt'\n```", "```py\nclass ❶ SillyWalkException( ❷ RuntimeError):\n    def __init__(self, ❸ message=\"Someone walked silly.\"):\n        super().__init__(message)\n\ndef walking():\n  ❹ raise SillyWalkException(\"My walk has gotten rather silly.\")\n\ntry:\n    walking()\n❺ except SillyWalkException as e:\n    print(e)\n```", "```py\nclass SillyWalkException(RuntimeError):\n    \"\"\"Exception for walking silly.\"\"\"\n```"]