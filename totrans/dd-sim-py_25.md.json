["```py\ntextproof/\n├── LICENSE\n├── MANIFEST.in\n├── pyproject.toml\n├── README.md\n├── requirements.txt\n├── setup.cfg\n├── setup.py\n├── src/\n│   └── textproof/\n│   │   ├── __init__.py\n│   │   └── __main__.py\n├── tests/\n│   ├── conftest.py\n│   └── __init__.py\n└── venv/\n```", "```py\n[options]\npackage_dir =\n    = src\npackages = find:\ninclude_package_data = True\ninstall_requires =\n    requests\n    click\npython_version = >=3.6, <4\n\n[options.packages.find]\nwhere = src\nexclude = tests\n\n[options.extras_require]\ntest =\n    pytest\n\n[options.entry_points]\nconsole_scripts =\n    textproof = textproof.__main__:main\n\n[flake8]\nmax-line-length = 120\n```", "```py\ninclude LICENSE *.md\n```", "```py\n[build-system]\nrequires = [\"setuptools>40.8.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n```", "```py\nimport pathlib\n\nclass FileIO:\n\n    def __init__(self, in_file, out_file=None):\n        self.in_file = pathlib.Path(in_file)\n\n        if out_file is None:\n            out_file = in_file\n        self.out_file = pathlib.Path(out_file)\n        self.out_file_tmp = pathlib.Path(out_file + '.tmp')\n\n        self.data = None\n\n    def load(self):\n        if not self.data:\n            with self.in_file.open('r') as file:\n                self.data = file.read()\n\n        return self.data\n\n    def save(self):\n        if not self.data:\n            raise RuntimeError(\"Nothing to save.\")\n\n        with self.out_file_tmp.open('w') as file:\n            file.write(self.data)\n        self.out_file_tmp.rename(self.out_file)\n```", "```py\nimport pathlib\nimport pytest\nfrom textproof.fileio import FileIO\n\nclass TestFileIO:\n\n    def test_in_path(self):\n        file = FileIO('tests/to_be.txt')\n        assert file.in_file == pathlib.Path('tests/to_be.txt')\n\n    def test_out_path(self):\n        file = FileIO('tests/to_be.txt', 'tests/out.txt')\n        assert file.out_file == pathlib.Path('tests/out.txt')\n\n    def test_no_out_path(self):\n        file = FileIO('tests/to_be.txt')\n        assert file.in_file == file.out_file\n```", "```py\nvenv/bin/pip install -e '.[test]'\n```", "```py\nvenv/bin/pytest\n```", "```py\n====================== test session starts =======================\nplatform linux -- \nrootdir: /home/jason/Code/Repositories/textproof\ncollected 3 items\n\ntests/test_fileio.py ...                                   [100%]\n\n======================= 3 passed in 0.02s ========================\n```", "```py\n def test_invalid_in_path(self):\n        with pytest.raises(FileNotFoundError):\n            FileIO('tests/idonotexist.txt')\n```", "```py\n====================== test session starts =======================\nplatform linux -- \nrootdir: /home/jason/Code/Repositories/textproof\ncollected 4 items\n\ntests/test_fileio.py ...❶  F                                  [100%]\n\n============================ FAILURES ============================\n________________ TestFileIO.test_invalid_in_path _________________\n\nself = <tests.test_fileio.TestFileIO object at 0x7f9945d29580>\n\n    def test_invalid_in_path(self):\n        with pytest.raises(FileNotFoundError):\n>           FileIO('tests/idonotexist.txt')\nE       ❷  Failed: DID NOT RAISE <class 'FileNotFoundError'>\n\ntests/test_fileio.py:21: Failed\n==================== short test summary info =====================\nFAILED tests/test_fileio.py::TestFileIO::test_invalid_in_path\n================== 1 failed, 3 passed in 0.03s ===================\n```", "```py\nimport pathlib\n\nclass FileIO:\n\n    def __init__(self, in_file, out_file=None):\n        self.in_file = pathlib.Path(in_file)\n        **if not self.in_file.exists():**\n **raise FileNotFoundError(f\"Invalid input file: {self.in_file}\")**\n\n        if out_file is None:\n            out_file = in_file\n        `# --snip--`\n```", "```py\nimport pytest\nimport pathlib\nfrom textproof.fileio import FileIO\n\nclass TestFileIO:\n\n    **demo_data = \"To be, or not to be, that is the question!\"**\n\n **@pytest.fixture**\n **def demo_in_file(self, tmp_path):**\n **test_in_file = pathlib.Path(tmp_path) / 'to_be.txt'**\n **with test_in_file.open('w') as file:**\n **file.write(self.demo_data)**\n **return str(test_in_file)**\n\n **@pytest.fixture**\n **def demo_out_file(self, tmp_path):**\n **test_out_file = pathlib.Path(tmp_path) / 'out.txt'**\n **return str(test_out_file)**\n\n    `#` `--snip--`\n```", "```py\n # `--snip--`\n    def test_in_path(self, **demo_in_file**):\n        file = FileIO(**demo_in_file**)\n        assert file.in_file == pathlib.Path(**demo_in_file**)\n\n    def test_out_path(self, **demo_in_file, demo_out_file**):\n        file = FileIO(**demo_in_file, demo_out_file**)\n        assert file.out_file == pathlib.Path(**demo_out_file**)\n\n    def test_no_out_path(self, **demo_in_file**):\n        file = FileIO(**demo_in_file**)\n        assert file.in_file == file.out_file\n```", "```py\n def test_load(self, demo_in_file):\n        file = FileIO(demo_in_file)\n        file.load()\n        assert file.data == self.demo_data\n\n    def test_save(self, demo_in_file, demo_out_file):\n        file = FileIO(demo_in_file, demo_out_file)\n        file.data = self.demo_data\n        file.save()\n        with pathlib.Path(demo_out_file).open('r') as check_file:\n            assert check_file.read() == self.demo_data\n\n    def test_save__no_load(self, demo_in_file, demo_out_file):\n        file = FileIO(demo_in_file, demo_out_file)\n        with pytest.raises(RuntimeError):\n            file.save()\n```", "```py\nimport requests\n\ndef api_query(text):\n    lang = \"en-US\"\n    response = requests.post(\n        \"https://languagetool.org/api/v2/check\",\n        headers={\"Content-Type\": \"application/json\"},\n        data={\"text\": text, \"language\": lang},\n    )\n if response.status_code != 200:\n        raise RuntimeError(f\"API error: [{response}] {response.text}\")\n\n    software = response.json()[\"software\"]\n    print(f\"{software['name']} v{software['version']}\")\n    print(response.json()['language']['name'])\n    return response.json()[\"matches\"]\n```", "```py\nimport pytest\n\nexample_text = \"He and me went too the stor.\"\n\nexample_output = \"He and I went to the store.\"\n\nexample_api_response = [\n    {\n        'context': {\n            'length': 2,\n            'offset': 7,\n 'text': 'He and me went too the stor.'\n        },\n        'length': 2,\n        'message': 'Did you mean \"I\"?',\n        'offset': 7,\n        'replacements': [{'value': 'I'}],\n    },\n    {\n        'context': {\n                'length': 7,\n                'offset': 15,\n                'text': 'He and me went too the stor.'\n        },\n        'length': 7,\n        'message': 'Did you mean \"to the\"?',\n        'offset': 15,\n        'replacements': [{'value': 'to the'}],\n    },\n    {\n        'context': {\n            'length': 4,\n            'offset': 23,\n            'text': 'He and me went too the stor.'\n        },\n        'length': 4,\n        'message': 'Possible spelling mistake found.',\n        'offset': 23,\n        'replacements': [{'value': 'story'},\n                        {'value': 'stop'},\n                        {'value': 'store'},\n                        {'value': 'storm'}]\n    }\n]\n\ndef pytest_configure(config):\n    pytest.example_text = example_text\n    pytest.example_output = example_output\n    pytest.example_api_response = example_api_response\n```", "```py\nimport pytest\nimport requests\n\ndef test_api_layout():\n    response = requests.post(\n        \"https://languagetool.org/api/v2/check\",\n        headers={\"Content-Type\": \"application/json\"},\n        data={\"text\": pytest.example_text, \"language\": \"en-US\"},\n    )\n    if response.status_code != 200:\n        pytest.skip(\"Server unavailable\")\n\n    matches = response.json()[\"matches\"]\n    for from_api, expected in zip(matches, pytest.example_api_response):\n        from_api = set(from_api.keys())\n        expected = set(expected.keys())\n        assert expected.issubset(from_api)\n```", "```py\nclass Typo:\n    def __init__(self, typo):\n        context = typo[\"context\"]\n        self.text = context[\"text\"]\n        self.hint_offset = int(context[\"offset\"])\n        self.offset = int(typo[\"offset\"])\n        self.length = int(typo[\"length\"])\n        self.message = typo[\"message\"]\n        self.suggestions = typo[\"replacements\"]\n\n    def __str__(self):\n        underline = \"\".join((\" \" * self.hint_offset, \"^\" * self.length))\n        return \"\\n\".join((self.text, underline, self.message))\n```", "```py\nHe and me went too the stor.\n       ^^\nDid you mean \"I\"?\n```", "```py\n def get_choice(self):\n        while True:\n            raw = input(\"Select an option: \")\n            try:\n                choice = int(raw)\n            except ValueError:\n                print(\"Please enter a valid integer.\")\n                continue\n\n            if choice < 0 or choice > len(self.suggestions):\n                print(\"Invalid choice.\")\n                continue\n\n            return choice\n```", "```py\n def select_fix(self):\n        print('')\n        print(self)\n\n        for num, suggestion in enumerate(self.suggestions, 1):\n            if \"shortDescription\" in suggestion:\n                print(\n                    f\"{num}: {suggestion['value']} \"\n                    f\"({suggestion['shortDescription']})\"\n                )\n            else:\n                print(f\"{num}: {suggestion['value']}\")\n        print(\"0: (Skip)\")\n\n        choice = self.get_choice()\n        if choice > 0:\n            suggestion = self.suggestions[choice - 1][\"value\"]\n            length_change = len(suggestion) - self.length\n            return (suggestion, self.offset, self.length, length_change)\n        else:\n            return (None, 0, 0, 0)\n```", "```py\nimport pytest\nfrom textproof.typo import Typo\n\nclass TestTypo:\n\n    @pytest.mark.parametrize(\"index\", range(3))\n    def test_create_typo(self, index):\n        example_response = pytest.example_api_response[index]\n        example_typo = Typo(example_response)\n        assert example_typo.offset == example_response['offset']\n        assert example_typo.length == example_response['length']\n        assert example_typo.message == example_response['message']\n        assert example_typo.suggestions == example_response['replacements']\n```", "```py\n====================== test session starts =======================\nplatform linux -- Python 3.8.10, pytest-7.1.2, pluggy-1.0.0\nrootdir: /home/jason/Code/Repositories/textproof\ncollected 11 items\n\ntests/test_api.py .                                        [  9%]\ntests/test_fileio.py .......                               [ 72%]\ntests/test_typo.py ...                                     [100%]\n\n======================= 11 passed in 0.58s =======================\n```", "```py\nFAILED tests/test_typo.py::TestTypo::test_create_typo[1] - ...\n```", "```py\n@pytest.fixture\ndef example_response(request):\n    return example_api_response[request.param]\n```", "```py\n@pytest.fixture\ndef example_typo(request):\n    from textproof.typo import Typo\n    return Typo(example_api_response[request.param])\n```", "```py\nimport pytest\nfrom textproof.typo import Typo\n\nclass TestTypo:\n\n    @pytest.mark.parametrize(\n        **(\"example_typo\", \"example_response\"),**\n **[(0, 0), (1, 1), (2, 2)],**\n **indirect=(\"example_typo\", \"example_response\")**\n    )\n    def test_create_typo(self, **example_typo, example_response**):\n        assert example_typo.offset == example_response['offset']\n        assert example_typo.length == example_response['length']\n        assert example_typo.message == example_response['message']\n        assert example_typo.suggestions == example_response['replacements']\n```", "```py\n@pytest.fixture\ndef fake_inputs(request, monkeypatch):\n    def fake():\n        value = iter(request.param)\n\n        def input(_):\n            return next(value)\n\n        return input\n\n    monkeypatch.setattr('builtins.input', fake())\n```", "```py\n @pytest.mark.parametrize(\n        \"fake_inputs\",\n        [('-1', '20', '3'), ('3',), ('fish', '1.1', '3')],\n        indirect=True\n    )\n    def test_choice(self, fake_inputs):\n        example_response = pytest.example_api_response[2]\n        example_typo = Typo(example_response)\n        assert example_typo.get_choice() == 3\n```", "```py\n@pytest.fixture\ndef example_response(request):\n    **marker = request.node.get_closest_marker(\"typo_id\")**\n    **if marker:**\n **index = marker.args[0]**\n **else:**\n        **index = request.param**\n    return example_api_response[**index**]\n```", "```py\n@pytest.fixture\ndef example_typo(request):\n    **marker = request.node.get_closest_marker(\"typo_id\")**\n **if marker:**\n **index = marker.args[0]**\n **else:**\n **index = request.param**\n\n    from textproof.typo import Typo\n    return Typo(example_api_response[**index**])\n```", "```py\n **@pytest.mark.typo_id(2)**\n    @pytest.mark.parametrize(\n        \"fake_inputs\",\n [('-1', '20', '3'), '3', ('fish', '1.1', '3')],\n        indirect=True\n    )\n    def test_choice(self, **example_typo,** fake_inputs):\n        assert example_typo.get_choice() == 3\n```", "```py\n===================== test session starts ======================\nplatform linux -- \nrootdir: /home/jason/Code/Repositories/textproof\ncollected 14 items                                             \n\ntests/test_api.py .                                      [  7%]\ntests/test_fileio.py .......                             [ 57%]\ntests/test_typo.py ......                                [100%]\n\n======================= warnings summary =======================\ntests/test_typo.py:38\n  /home/jason/Code/Repositories/textproof/tests/test_typo.py:38: PytestUnknownMarkWarning: Unknown pytest.mark.typo_id - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.xhtml\n    @pytest.mark.typo_id(2)\n\n-- Docs: https://docs.pytest.org/en/stable/warnings.xhtml\n================ 14 passed, 1 warning in 0.89s =================\n```", "```py\n[build-system]\nrequires = [\"setuptools>40.8.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n**[tool.pytest.ini_options]**\n**markers = [**\n **\"typo_id: the example scenario number\"**\n**]**\n```", "```py\ndef pytest_configure(config):\n    pytest.example_text = example_text\n    pytest.example_output = example_output\n    pytest.example_api_response = example_api_response\n\n    **config.addinivalue_line(**\n **\"markers\", \"typo_id: the example scenario number\"**\n **)**\n```", "```py\n# `--snip--`\n\n**example_prompts = [**\n**\"\"\"**\n**He and me went too the stor.**\n **^^**\n**Did you mean \"I\"?**\n**1: I**\n**0: (Skip)**\n**\"\"\",**\n**\"\"\"**\n**He and me went too the stor.**\n **^^^^^^^**\n**Did you mean \"to the\"?**\n**1: to the**\n**0: (Skip)**\n**\"\"\",**\n**\"\"\"**\n**He and me went too the stor.**\n **^^^^**\n**Possible spelling mistake found.**\n**1: story**\n**2: stop**\n**3: store**\n**4: storm**\n**0: (Skip)**\n**\"\"\"**\n**]**\n\ndef pytest_configure(config):\n    pytest.example_text = example_text\n    pytest.example_output = example_output\n    pytest.example_api_response = example_api_response\n    **pytest.example_prompts = example_prompts**\n```", "```py\n@pytest.fixture\ndef example_prompt(request):\n    marker = request.node.get_closest_marker(\"typo_id\")\n    if marker:\n        index = marker.args[0]\n    else:\n        index = request.param\n\n    return example_prompts[index]\n```", "```py\n @pytest.mark.parametrize(\n        (\"example_typo, example_prompt\"),\n        [(n, n) for n in range(3)],\n        indirect=[\"example_typo\", \"example_prompt\"]\n    )\n    def test_prompt(self, example_typo, example_prompt, capsys, monkeypatch):\n        monkeypatch.setattr('builtins.input', lambda _: '0')\n        example_typo.select_fix()\n        captured = capsys.readouterr()\n        assert captured.out == example_prompt\n```", "```py\nfrom textproof.typo import Typo\nfrom textproof.api import api_query\n\nclass CheckedText:\n    def __init__(self, text):\n        self.text = text\n        self.revised = text\n        self.length_change = 0\n        self.typos = [Typo(typo) for typo in api_query(text)]\n\n    def __str__(self):\n        return self.revised\n\n    def fix_typos(self):\n        for typo in self.typos:\n            suggestion, offset, length, change = typo.select_fix()\n            if not suggestion:\n                continue\n            offset += self.length_change\n            self.revised = \"\".join(\n                (\n                    self.revised[:offset],\n                    suggestion,\n self.revised[offset + length:]\n                )\n            )\n            self.length_change += change\n```", "```py\n@pytest.fixture(autouse=True)\ndef fake_api_query(monkeypatch):\n    def mock_api_query(_):\n        print(\"FAKING IT\")\n        return example_api_response\n\n    monkeypatch.setattr('textproof.api.api_query', mock_api_query)\n```", "```py\nfrom textproof.api import api_query\n```", "```py\n@pytest.fixture(autouse=True)\ndef fake_api_query(monkeypatch):\n    def mock_api_query(_):\n        print(\"FAKING IT\")\n        return example_api_response\n\n    monkeypatch.setattr('textproof.api.api_query', mock_api_query)\n    **monkeypatch.setattr('textproof.checked_text.api_query', mock_api_query)**\n```", "```py\nimport pytest\nfrom textproof.checked_text import CheckedText\n\nclass TestCheckedText:\n\n    @pytest.fixture\n    def example_checked(self, monkeypatch):\n        return CheckedText(pytest.example_text)\n\n    def test_checked_text__init(self, example_checked):\n        assert example_checked.text == pytest.example_text\n        assert len(example_checked.typos) == 3\n```", "```py\n @pytest.mark.parametrize(\n        (\"fake_inputs\", \"expected\"),\n        [\n            ((0, 0, 0), pytest.example_text),\n            ((1, 1, 3), pytest.example_output)\n        ],\n        indirect=[\"fake_inputs\"]\n    )\n    def test_fix_typo(self, example_checked, fake_inputs, expected):\n        example_checked.fix_typos()\n        assert example_checked.revised == expected\n```", "```py\n#!/usr/bin/env python3\n\nimport click\nfrom textproof.fileio import FileIO\nfrom textproof.checked_text import CheckedText\n\n@click.command()\n@click.argument('path')\n@click.option('--output', default=None, help=\"the path to write to\")\ndef main(path, output):\n    file = FileIO(path, output)\n    try:\n        file.load()\n    except FileNotFoundError:\n        print(f\"Could not open file {path}\")\n        return\n\n    check = CheckedText(file.data)\n    check.fix_typos()\n    file.data = str(check)\n\n    file.save()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nHe and me went too the stor.\nWe gott three bags of chips for the prty.\nthe cola was too much so we gott lemon lime insted.\n```", "```py\nvenv/bin/textproof fixme.txt --output fixmeout.txt\n```", "```py\n`# --snip--`\n[options.extras_require]\ntest =\n    pytest\n    **coverage**\n`# --snip--`\n```", "```py\nvenv/bin/pip install -e '.[test]'\n```", "```py\n[tool.coverage.run]\nsource = [\n    \"textproof\",\n]\n\n[tool.coverage.paths]\nsource = [\n    \"src/textproof\",\n    \"**/site-packages/textproof\"\n]\n```", "```py\nvenv/bin/coverage run -m pytest\nvenv/bin/coverage combine\nvenv/bin/coverage report\n```", "```py\nName                                                     Stmts   Miss  Cover\n----------------------------------------------------------------------------\nvenv/lib/python3.10/site-packages/textproof/__init__.py       0      0   100%\nvenv/lib/python3.10/site-packages/textproof/__main__.py      19     19     0%\nvenv/lib/python3.10/site-packages/textproof/api.py           10      8    20%\nvenv/lib/python3.10/site-packages/textproof/checked_text.py  17      1    94%\nvenv/lib/python3.10/site-packages/textproof/fileio.py        22      0   100%\nvenv/lib/python3.10/site-packages/textproof/typo.py          37      1    97%\n----------------------------------------------------------------------------\nTOTAL                                                      105     29    72%\n```", "```py\n`# --snip--`\n[options.extras_require]\ntest =\n    pytest\n    coverage\n    **tox**\n`# --snip--`\n```", "```py\n[tool.tox]\nlegacy_tox_ini = \"\"\"\n[tox]\nisolated_build = True\nenvlist = py38, py39, py310\n\n[testenv]\ndeps = pytest\ncommands = pytest\n\"\"\"\n```", "```py\nvenv/bin/pip install '.[test]'\n```", "```py\nvenv/bin/tox\n```", "```py\n__________________________ summary ___________________________\n  py38: commands succeeded\n  py39: commands succeeded\n  py310: commands succeeded\n  congratulations :)\n```", "```py\nfrom timeit import timeit\n\ncount = 10_000_000\n\ndef multiple_assign():\n    x, y, z = 'foo', 'bar', 'baz'\n\ntime_multiple_assign = timeit(multiple_assign)\n\ndef single_assign():\n    x = 'foo'\n    y = 'bar'\n    z = 'baz'\n\ntime_single_assign = timeit(single_assign)\n\nprint(\"Multiple assignment:\", time_multiple_assign, sep='\\t')\nprint(\"Individual assignment:\", time_single_assign, sep='\\t')\n```", "```py\nMultiple assignment:    0.21586943799957226\nIndividual assignment:  0.18725779700071143\n```", "```py\n$ **python3 -m timeit -n 10000000 'x, y, z = \"foo\", \"bar\", \"baz\"'**\n10000000 loops, best of 5: 20.8 nsec per loop\n$ **python3 -m timeit -n 10000000 'x = \"foo\"; y = \"bar\"; z = \"baz\"'**\n10000000 loops, best of 5: 19.1 nsec per loop\n```", "```py\n`# --snip--`\n\nif __name__ == \"__main__\":\n    # main()\n    **import cProfile**\n    **cProfile.run('main()')**\n```", "```py\nvenv/bin/pip install -e .\nvenv/bin/python3 -m textproof fixme.txt --output fixmeout.txt\n```", "```py\nif __name__ == \"__main__\":\n    # main()\n    import cProfile**, pstats**\n    **pr = cProfile.Profile()**\n **pr.enable()**\n **main()**\n **pr.disable()**\n **stats = pstats.Stats(pr)**\n **stats.strip_dirs()**\n **stats.sort_stats(pstats.SortKey.CUMULATIVE)**\n **stats.print_stats(10)**\n```", "```py\nif __name__ == \"__main__\":\n    # main()\n    import cProfile, pstats\n    **with cProfile.Profile() as pr:**\n        main()\n    stats = pstats.Stats(pr)\n    stats.strip_dirs()\n    stats.sort_stats(pstats.SortKey.CUMULATIVE)\n    stats.print_stats(10)\n```", "```py\n#!/usr/bin/env python3\n\nimport click\nfrom textproof.fileio import FileIO\nfrom textproof.checked_text import CheckedText\n\n@click.command()\n@click.argument('path')\n@click.option('--output', default=None, help=\"the path to write to\")\ndef main(path, output):\n    **import cProfile, pstats**\n    **with cProfile.Profile() as pr:**\n        file = FileIO(path, output)\n        `# --snip--`\n\n        file.save() ****stats = pstats.Stats(pr)**\n **stats.strip_dirs()**\n **stats.sort_stats(pstats.SortKey.CUMULATIVE)**\n **stats.print_stats(10)**\n\nif __name__ == \"__main__\":\n **main()****\n```", "```py\n 7146 function calls (7110 primitive calls) in 3.521 seconds\n\n Ordered by: cumulative time\n List reduced from 652 to 10 due to restriction <10>\n\n ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      1    0.000    0.000    2.693    2.693 checked_text.py:15(fix_typos)\n      9    0.000    0.000    2.693    0.299 typo.py:30(select_fix)\n      9    0.000    0.000    2.692    0.299 typo.py:15(get_choice)\n      9    2.691    0.299    2.691    0.299 {built-in method builtins.input}\n      1    0.000    0.000    0.827    0.827 checked_text.py:6(__init__)\n      1    0.000    0.000    0.827    0.827 api.py:4(api_query)\n      1    0.000    0.000    0.825    0.825 api.py:107(post)\n      1    0.000    0.000    0.825    0.825 api.py:16(request)\n      1    0.000    0.000    0.824    0.824 sessions.py:463(request)\n      1    0.000    0.000    0.820    0.820 sessions.py:614(send)\n```", "```py\nvenv/bin/python3 -m cProfile ❶ -o profile_out venv/bin/textproof fixme.txt --output fixmeout.txt\nvenv/bin/snakeviz profile_out\n```"]