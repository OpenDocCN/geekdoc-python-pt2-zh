["```py\nimport pandas as pd\ness = pd.read_csv('ess.csv')\n```", "```py\nprint(ess.shape)\n```", "```py\nprint(ess.loc[:,'happy'].head())\n```", "```py\nprint(ess.loc[:,'sclmeet'].head())\n```", "```py\ness = ess.loc[ess['sclmeet'] <= 10,:].copy()\ness = ess.loc[ess['rlgdgr'] <= 10,:].copy()\ness = ess.loc[ess['hhmmb'] <= 50,:].copy()\ness = ess.loc[ess['netusoft'] <= 5,:].copy()\ness = ess.loc[ess['agea'] <= 200,:].copy()\ness = ess.loc[ess['health'] <= 5,:].copy()\ness = ess.loc[ess['happy'] <= 10,:].copy()\ness = ess.loc[ess['eduyrs'] <= 100,:].copy().reset_index(drop=True)\n```", "```py\nimport numpy as np\nsocial = list(ess.loc[:,'sclmeet'])\nhappy = list(ess.loc[:,'happy'])\nlow_social_happiness = [hap for soc,hap in zip(social,happy) if soc <= 5]\nhigh_social_happiness = [hap for soc,hap in zip(social,happy) if soc > 5]\n\nmeanlower = np.mean(low_social_happiness)\nmeanhigher = np.mean(high_social_happiness)\n```", "```py\nlowererrors = [abs(lowhappy - meanlower) for lowhappy in low_social_happiness]\nhighererrors = [abs(highhappy - meanhigher) for highhappy in high_social_happiness]\n\ntotal_error = sum(lowererrors) + sum(highererrors)\n```", "```py\ndef get_splitpoint(allvalues,predictedvalues):\n    lowest_error = float('inf')\n    best_split = None\n    best_lowermean = np.mean(predictedvalues)\n    best_highermean = np.mean(predictedvalues)\n    for pctl in range(0,100):\n        split_candidate = np.percentile(allvalues, pctl)\n\n        loweroutcomes = [outcome for value,outcome in zip(allvalues,predictedvalues) if \\value <= split_candidate]\n        higheroutcomes = [outcome for value,outcome in zip(allvalues,predictedvalues) if \\value > split_candidate]\n\n        if np.min([len(loweroutcomes),len(higheroutcomes)]) > 0:\n            meanlower = np.mean(loweroutcomes)\n            meanhigher = np.mean(higheroutcomes)\n\n            lowererrors = [abs(outcome - meanlower) for outcome in loweroutcomes]\n            highererrors = [abs(outcome - meanhigher) for outcome in higheroutcomes]\n\n            total_error = sum(lowererrors) + sum(highererrors)\n\n            if total_error < lowest_error:\n                best_split = split_candidate\n                lowest_error = total_error\n                best_lowermean = meanlower\n                best_highermean = meanhigher\n    return(best_split,lowest_error,best_lowermean,best_highermean)\n```", "```py\nallvalues = list(ess.loc[:,'hhmmb'])\npredictedvalues = list(ess.loc[:,'happy'])\nprint(get_splitpoint(allvalues,predictedvalues))\n```", "```py\n(1.0, 60860.029867951016, 6.839403436723225, 7.620055170794695)\n```", "```py\ndef getsplit(data,variables,outcome_variable):\n    best_var = ''\n    lowest_error = float('inf')\n    best_split = None\n    predictedvalues = list(data.loc[:,outcome_variable])\n best_lowermean = -1\n    best_highermean = -1\n    for var in variables:\n        allvalues = list(data.loc[:,var])\n        splitted = get_splitpoint(allvalues,predictedvalues)\n\n        if(splitted[1] < lowest_error):\n            best_split = splitted[0]\n            lowest_error = splitted[1]\n            best_var = var\n            best_lowermean = splitted[2]\n            best_highermean = splitted[3]          \n\n    generated_tree = [[best_var,float('-inf'),best_split,best_lowermean],[best_var,best_split,\\    float('inf'),best_highermean]]\n\n    return(generated_tree)\n```", "```py\nvariables = ['rlgdgr','hhmmb','netusoft','agea','eduyrs']\noutcome_variable = 'happy'\nprint(getsplit(ess,variables,outcome_variable))\n```", "```py\n[['netusoft', -inf, 4.0, 7.041597337770383], ['netusoft', 4.0, inf, 7.73042471042471]]\n```", "```py\nmaxdepth = 3\ndef getsplit(depth,data,variables,outcome_variable):\n `--snip--`\n    generated_tree = [[best_var,float('-inf'),best_split,[]],[best_var,\\best_split,float('inf'),[]]]\n\n    if depth < maxdepth:\n        splitdata1=data.loc[data[best_var] <= best_split,:]\n        splitdata2=data.loc[data[best_var] > best_split,:]\n        if len(splitdata1.index) > 10 and len(splitdata2.index) > 10:\n            generated_tree[0][3] = getsplit(depth + 1,splitdata1,variables,outcome_variable)\n            generated_tree[1][3] = getsplit(depth + 1,splitdata2,variables,outcome_variable)\n        else:\n            depth = maxdepth + 1\n            generated_tree[0][3] = best_lowermean\n            generated_tree[1][3] = best_highermean\n else:\n        generated_tree[0][3] = best_lowermean\n        generated_tree[1][3] = best_highermean\n    return(generated_tree)\n```", "```py\nvariables = ['rlgdgr','hhmmb','netusoft','agea','eduyrs']\noutcome_variable = 'happy'\nmaxdepth = 2\nprint(getsplit(0,ess,variables,outcome_variable))\n```", "```py\n[['netusoft', -inf, 4.0, [['hhmmb', -inf, 4.0, [['agea', -inf, 15.0, 8.035714285714286], ['agea', 15.0, inf, 6.997666564322997]]], ['hhmmb', 4.0, inf, [['eduyrs', -inf, 11.0, 7.263969171483622], ['eduyrs', 11.0, inf, 8.0]]]]], ['netusoft', 4.0, inf, [['hhmmb', -inf, 1.0, [['agea', -inf, 66.0, 7.135361428970136], ['agea', 66.0, inf, 7.621993127147766]]], ['hhmmb', 1.0, inf, [['rlgdgr', -inf, 5.0, 7.743893678160919], ['rlgdgr', 5.0, inf, 7.9873320537428025]]]]]]\n```", "```py\nvariables = ['sclmeet','rlgdgr','hhmmb','netusoft','agea','eduyrs','health']\noutcome_variable = 'happy'\nmaxdepth = 3\nprint(getsplit(0,ess,variables,outcome_variable))\n```", "```py\n[['health', -inf, 2.0, [['sclmeet', -inf, 4.0, [['health', -inf, 1.0, [['rlgdgr', -inf, 9.0, 7.9919636617749825], ['rlgdgr', 9.0, inf, 8.713414634146341]]], ['health', 1.0, inf, [['netusoft', -inf, 4.0, 7.195121951219512], ['netusoft', 4.0, inf, 7.565659008464329]]]]], ['sclmeet', 4.0, inf, [['eduyrs', -inf, 25.0, [['eduyrs', -inf, 8.0, 7.9411764705882355], ['eduyrs', 8.0, inf, 7.999169779991698]]], ['eduyrs', 25.0, inf, [['hhmmb', -inf, 1.0, 7.297872340425532], ['hhmmb', 1.0, inf, 7.9603174603174605]]]]]]], ['health', 2.0, inf, [['sclmeet', -inf, 3.0, [['health', -inf, 3.0, [['sclmeet', -inf, 2.0, 6.049427365883062], ['sclmeet', 2.0, inf, 6.70435393258427]]], ['health', 3.0, inf, [['sclmeet', -inf, 1.0, 4.135036496350365], ['sclmeet', 1.0, inf, 5.407051282051282]]]]], ['sclmeet', 3.0, inf, [['health', -inf, 4.0, [['rlgdgr', -inf, 9.0, 6.992227707173616], ['rlgdgr', 9.0, inf, 7.434662998624484]]], ['health', 4.0, inf, [['hhmmb', -inf, 1.0, 4.948717948717949], ['hhmmb', 1.0, inf, 6.132075471698113]]]]]]]]\n```", "```py\ndef get_prediction(observation,tree):\n    j = 0\n    keepgoing = True\n    prediction = - 1\n    while(keepgoing):\n        j = j + 1\n        variable_tocheck = tree[0][0]\n        bound1 = tree[0][1]\n        bound2 = tree[0][2]\n        bound3 = tree[1][2]\n        if observation.loc[variable_tocheck] < bound2:\n            tree = tree[0][3]\n        else:\n            tree = tree[1][3]\n        if isinstance(tree,float):\n            keepgoing = False\n            prediction = tree\n    return(prediction)\n```", "```py\npredictions=[]\noutcome_variable = 'happy'\nmaxdepth = 4\nthetree = getsplit(0,ess,variables,outcome_variable)\nfor k in range(0,30):\n    observation = ess.loc[k,:]\n    predictions.append(get_prediction(observation,thetree))\n\nprint(predictions)\n```", "```py\npredictions = []\n\nfor k in range(0,len(ess.index)):\n    observation = ess.loc[k,:]\n    predictions.append(get_prediction(observation,thetree))\n\ness.loc[:,'predicted'] = predictions\nerrors = abs(ess.loc[:,'predicted'] - ess.loc[:,'happy'])\n\nprint(np.mean(errors))\n```", "```py\nimport numpy as np\nnp.random.seed(518)\ness_shuffled = ess.reindex(np.random.permutation(ess.index)).reset_index(drop = True)\ntraining_data = ess_shuffled.loc[0:37000,:]\ntest_data = ess_shuffled.loc[37001:,:].reset_index(drop = True)\n```", "```py\nthetree = getsplit(0,training_data,variables,outcome_variable)\n```", "```py\npredictions = []\nfor k in range(0,len(test_data.index)):\n    observation = test_data.loc[k,:]\n    predictions.append(get_prediction(observation,thetree))\n\ntest_data.loc[:,'predicted'] = predictions\nerrors = abs(test_data.loc[:,'predicted'] - test_data.loc[:,'happy'])\nprint(np.mean(errors))\n```"]