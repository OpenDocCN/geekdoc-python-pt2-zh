- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Why learn computer programming? Programming fosters creativity, reasoning, and
    problem solving. The programmer gets the opportunity to create something from
    nothing, use logic to turn programming constructs into a form that a computer
    can run, and, when things don’t work quite as well as expected, use problem solving
    to figure out what has gone wrong. Programming is a fun, sometimes challenging
    (and occasionally frustrating) activity, and the skills learned from it can be
    useful both in school and at work—even if your career has nothing to do with computers.
    And, if nothing else, programming is a great way to spend an afternoon when the
    weather outside is dreary.
  prefs: []
  type: TYPE_NORMAL
- en: Why Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is an easy-to-learn programming language that has some really useful
    features for a beginning programmer. The code is quite easy to read when compared
    to other programming languages, and it has an interactive shell into which you
    can enter your programs and see them run.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to its simple language structure and an interactive shell with which
    to experiment, Python has some features that greatly augment the learning process
    and allow you to put together simple animations for creating your own games. One
    is the turtle module, inspired by Turtle graphics (used by the Logo programming
    language back in the 1960s) and designed for educational use. Another is the tkinter
    module, an interface for the Tk graphical user interface (GUI) toolkit, which
    provides a simple way to create programs with slightly more advanced graphics
    and animation.
  prefs: []
  type: TYPE_NORMAL
- en: How to Learn to Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like anything you try for the first time, it’s always best to start with the
    basics, so begin with the first chapters and resist the urge to skip ahead to
    the later chapters. No one can play an orchestral symphony the first time they
    pick up an instrument. Student pilots don’t start flying a plane before they understand
    the basic controls. Gymnasts aren’t (usually) able to do backflips on their first
    try. If you jump ahead too quickly, not only will the basic ideas not stick in
    your head, but you’ll also find the content of the later chapters more complicated
    than it actually is.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you go through this book, try all of the examples so you can see how they
    work. Most chapters also include programming puzzles for you to try, which will
    help improve your programming skills. Remember that the better you understand
    the basics, the easier it will be to understand more complicated ideas later on.
    When you find something frustrating or too challenging, here are some things that
    I find helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: Break a problem down into smaller pieces. Try to understand what a small piece
    of code is doing or think about only a small part of a difficult idea (focus on
    a small piece of code rather than trying to understand the whole thing at once).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If that still doesn’t help, it might be best to leave it alone for a while.
    Sleep on it and come back to it another day. This is a good way to solve many
    problems, and it can be particularly helpful for computer programmers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who Should Read This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is for anyone interested in computer programming, whether that’s a
    child or an adult coming to programming for the first time. If you want to learn
    how to write your own software rather than just use the programs developed by
    others, *Python for Kids* is a great place to start.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, you’ll find information to help you install Python,
    start the Python Shell and perform basic calculations, print text on the screen
    and create lists, and perform simple control flow operations using if statements
    and for loops (and learn what if statements and for loops are!). You’ll learn
    how to reuse code with functions, the basics of classes and objects, and descriptions
    of some of the many built-in Python functions and modules.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find chapters on both simple and advanced turtle graphics, as well as
    on using the tkinter module to draw on the computer screen. Programming puzzles
    of varying complexity are at the ends of many chapters, which will help you cement
    your newfound knowledge by giving you a chance to write small programs by yourself.
    Once you’ve built up your fundamental programming knowledge, you’ll learn how
    to write your own games. You’ll develop two graphical games and learn about basic
    collision detection, events, and different animation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the examples in this book use Python’s IDLE (Integrated DeveLopment
    Environment) Shell. IDLE provides syntax highlighting, copy-and-paste functionality
    (similar to what you would use in other applications), and an editor window where
    you can save your code for later use. This means IDLE works as both an interactive
    environment for experimentation and something a bit like a text editor. The examples
    will work just as well with the standard console and a regular text editor, but
    IDLE’s syntax highlighting and slightly more user-friendly environment can aid
    understanding, so the very first chapter shows you how to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here’s a brief rundown of what you’ll find in each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1](ch01.xhtml#ch01)** is an introduction to programming with instructions
    for installing Python for the first time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2](ch02.xhtml#ch02)** introduces basic calculations and variables,
    and **[Chapter 3](ch03.xhtml#ch03)** describes some of the basic Python types,
    such as strings, lists, and tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4](ch04.xhtml#ch04)** is the first taste of the turtle module. We’ll
    jump from basic programming to moving a turtle (in the shape of an arrow) around
    the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5](ch05.xhtml#ch05)** covers the variations of conditions and if
    statements, and **[Chapter 6](ch06.xhtml#ch06)** moves on to for loops and while
    loops.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7](ch07.xhtml#ch07)** is where we start to use and create functions,
    and then in **[Chapter 8](ch08.xhtml#ch08)** we cover classes and objects. We
    cover enough of the basic ideas to support some of the programming techniques
    we’ll need in the games development chapters later on in the book. At this point,
    the material starts to get a little more complicated.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9](ch09.xhtml#ch09)** returns to the turtle module as you experiments
    with more complicated shapes. **[Chapter 10](ch10.xhtml#ch10)** moves on to using
    the tkinter module for more advanced graphics creation.'
  prefs: []
  type: TYPE_NORMAL
- en: In **[Chapters 11](ch11.xhtml#ch11)** and **[12](ch12.xhtml#ch12)**, we create
    our first game, *Bounce!*, which builds on the knowledge gained from the preceding
    chapters, and in **[Chapters 13](ch13.xhtml#ch13)****–****[16](ch16.xhtml#ch16)**,
    we create another game, *Mr. Stick Man Races for the Exit*. The game development
    chapters are where things could start to go seriously wrong. If all else fails,
    download the code from the companion website (*[http://python-for-kids.com](http://python-for-kids.com)*),
    and compare your code with these working examples.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the **[Afterword](aft.xhtml)**, we briefly look at how to use the
    Python package installer (pip) to install the PyGame module and a short PyGame
    example, before seeing some examples of other programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: In **[Appendix A](app01.xhtml#app01)**, you’ll find a list of the Python keywords,
    and in **[Appendix B](app02.xhtml#app02)**, a list of some of the useful built-in
    functions (you’ll learn what *keywords* and *functions* are later in the book).
    **[Appendix C](app03.xhtml#app03)** provides some troubleshooting information
    for common problems.
  prefs: []
  type: TYPE_NORMAL
- en: Python for Kids Website
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you find that you need help as you read, try the website *[http://python-for-kids.com](http://python-for-kids.com)*.
    There, you’ll find downloads for all the examples in this book and links to further
    information, including where you can download the source code used in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Have Fun!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember as you work your way through this book that programming can be fun.
    Don’t think of this as work. Think of programming as a way to create some fun
    games or applications that you can share with your friends or others.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to program is a wonderful mental exercise, and the results can be very
    rewarding. But most of all, whatever you do, have fun!
  prefs: []
  type: TYPE_NORMAL
