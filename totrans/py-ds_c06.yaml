- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Aggregating Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: To get the most decision-making value out of your data, you’ll often need to
    generate aggregations of the data. *Aggregation* is a process of collecting data
    so that it can be presented in summary form, grouped by subtotals, totals, averages,
    or other statistics. This chapter explores aggregation techniques built into pandas
    and discusses how you can use them to analyze your data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据中获得最大的决策价值，您通常需要生成数据的聚合。*聚合*是一个收集数据的过程，以便它可以以汇总形式呈现，通过小计、总计、平均数或其他统计数据分组。本章探讨了
    pandas 内置的聚合技术，并讨论了如何使用它们来分析您的数据。
- en: Aggregation is an efficient way to get a big-picture overview of a large dataset,
    allowing you to answer questions about the values in the data. For example, a
    large retail business might want to determine product performance based on brand
    or look at the sales totals for different regions. A website owner might want
    to identify the most attractive resources on the site based on the number of visitors.
    A climatologist might need to determine the sunniest places in a region based
    on the average number of sunny days per year.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合是快速获取大型数据集概览的有效方式，它使您能够回答有关数据值的问题。例如，大型零售企业可能希望根据品牌确定产品的表现，或者查看不同地区的销售总额。网站所有者可能希望根据访问者数量确定网站上最具吸引力的资源。气候学家可能需要根据每年阳光明媚的天数，确定一个地区最阳光明媚的地方。
- en: An aggregation can answer questions like these by collecting specific data values
    together and presenting them in a summarized format. Since aggregation presents
    information based on related clusters of data, it implies first grouping the data
    by one or more attributes. In the case of the large retailer, this might mean
    grouping the data by brand, or perhaps by both region and date.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合可以通过将特定的数据值收集在一起并以总结的形式呈现，来回答像这样的问提。由于聚合是基于相关数据集群呈现信息，因此它首先意味着按一个或多个属性对数据进行分组。在大型零售商的情况下，这可能意味着按品牌分组数据，或者按地区和日期同时分组。
- en: In the examples that follow, you’ll see how grouping, along with *aggregate
    functions* applied to each group of rows, can be implemented when using pandas
    DataFrames. An aggregate function returns a single result row based on an entire
    group of rows, thus forming a single aggregated summary row for each group.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，您将看到如何在使用 pandas DataFrame 时，通过对每组行应用*聚合函数*，实现数据分组。聚合函数基于整个行组返回一个单一的结果行，从而为每个组形成一个单一的聚合总结行。
- en: Data to Aggregate
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合数据
- en: To see how aggregation works, we’ll create a set of example DataFrames containing
    sales data for an online outdoor fashion retailer. The data will include values
    such as order numbers and dates; details about the items purchased in each order,
    such as price and quantity; the employees who fulfill each order; and the locations
    of the company’s fulfillment warehouses. In a real application, this data would
    most likely be stored in a database that you could access from your Python code,
    as described in Chapter 5. For simplicity, we’ll instead load the data into the
    DataFrames from lists of tuples. You can download the lists of tuples from this
    book’s GitHub repository.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解聚合如何工作，我们将创建一组包含在线户外时尚零售商销售数据的示例 DataFrame。数据将包括订单号和日期等值；每个订单中所购商品的详细信息，如价格和数量；完成每个订单的员工；以及公司履行订单的仓库位置。在实际应用中，这些数据很可能存储在数据库中，您可以从
    Python 代码中访问，如第 5 章所述。为了简化，我们将从元组列表中将数据加载到 DataFrame 中。您可以从本书的 GitHub 仓库下载这些元组列表。
- en: 'Let’s start with some sample orders. The list named `orders` contains several
    tuples, each of which represents one order. Each tuple has three fields: the order
    number, the date, and the ID of the employee who fulfilled the order, respectively:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些示例订单开始。名为`orders`的列表包含多个元组，每个元组代表一个订单。每个元组有三个字段：订单号、日期和完成订单的员工 ID，分别如下：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import pandas and load the list into a DataFrame like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 pandas 并按如下方式将列表加载到 DataFrame 中：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Order details (also known as *order lines*) are usually stored in another data
    container. In this case, we have a list of tuples named `details` that you’ll
    load into another DataFrame. Each tuple represents a line of an order, with fields
    corresponding to the order number, item name, brand, price, and quantity:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 订单详情（也称为*订单行*）通常存储在另一个数据容器中。在本例中，我们有一个名为`details`的元组列表，您将把它加载到另一个 DataFrame
    中。每个元组代表订单中的一行，包含订单号、商品名称、品牌、价格和数量等字段：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We’ll store information about the company’s employees in a third DataFrame.
    Create it from another list of tuples called `emps` with employee numbers, names,
    and locations:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第三个 DataFrame 中存储公司员工的信息。通过另一个名为 `emps` 的元组列表创建该 DataFrame，其中包含员工编号、姓名和位置：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we have the city and region of each warehouse in a list of tuples
    named `locations`, which you’ll store in a fourth DataFrame:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将每个仓库的城市和地区存储在一个名为 `locations` 的元组列表中，这将被存储在第四个 DataFrame 中：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that you’ve loaded the data into DataFrames, you can aggregate it in many
    ways, allowing you to answer all sorts of questions about the state of the business.
    For example, you might want to look at the sales performance for different regions,
    generating subtotals by date. To do this, you’ll first need to combine the relevant
    data into a single DataFrame. Then you can group the data and apply aggregate
    functions to the groups.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将数据加载到 DataFrame 中，你可以以多种方式进行汇总，从而回答关于业务状况的各种问题。例如，你可能想查看不同地区的销售表现，并按日期生成小计。为此，你首先需要将相关数据合并到一个单一的
    DataFrame 中。然后，你可以对数据进行分组，并应用聚合函数。
- en: Combining DataFrames
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并 DataFrame
- en: 'You’ll often need to collect data from many different containers before you
    have everything you need to produce the desired aggregation. Our example is no
    exception. Even the data representing the orders is distributed between two different
    DataFrames: `df_orders` and `df_details`. Your goal is to generate the sums of
    sales by region and by date. What DataFrames do you need to combine, and what
    columns from each should you include?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常需要从多个不同的容器中收集数据，才能获得完成所需聚合所需的所有信息。我们的示例也不例外。即使是表示订单的数据，也分布在两个不同的 DataFrame
    中：`df_orders` 和 `df_details`。你的目标是生成按地区和日期汇总的销售总额。你需要合并哪些 DataFrame？每个 DataFrame
    中应该包含哪些列？
- en: 'Since you need to total up the sales numbers, you’ll have to include the `Price`
    and `Quantity` columns from `df_details`. The `Date` column from `df_orders` and
    the `Region` column from `df_locations` have to be included as well. This means
    you’ll have to join the following DataFrames: `df_orders`, `df_details`, and `df_locations`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你需要汇总销售额，因此必须包含 `df_details` 中的 `Price` 和 `Quantity` 列。同时，还需要包含 `df_orders`
    中的 `Date` 列和 `df_locations` 中的 `Region` 列。这意味着你需要连接以下 DataFrame：`df_orders`、`df_details`
    和 `df_locations`。
- en: 'The `df_orders` and `df_details` DataFrames can be joined directly with a single
    call of the pandas `merge()` method, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`df_orders` 和 `df_details` DataFrame 可以通过 pandas 的 `merge()` 方法直接连接，代码如下：'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You join the DataFrames based on the `OrderNo` column. You don’t have to specify
    this explicitly, because `OrderNo` is present in both DataFrames and is therefore
    chosen by default. The newly merged DataFrame now contains one record for each
    order line, as in `df_details`, but with the information added from the corresponding
    records from `df_orders`. To see the records in the merged DataFrame, you can
    simply print the DataFrame:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据 `OrderNo` 列连接 DataFrame。无需明确指定这一点，因为 `OrderNo` 在两个 DataFrame 中都存在，因此默认选择它。新合并的
    DataFrame 现在包含每个订单行的一条记录，如同 `df_details` 中一样，但加入了来自 `df_orders` 的相应记录的信息。要查看合并后的
    DataFrame 中的记录，你可以直接打印 DataFrame：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The content of `df_sales` will look as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`df_sales` 的内容将如下所示：'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see in the `Quantity` column, there may be more than one of an item
    in a single order line. You therefore need to multiply the values of the `Price`
    and `Quantity` fields to calculate the total of an order line. You can store the
    result of this multiplication in a new field of the DataFrame, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 `Quantity` 列中所见，一条订单中可能包含多个相同的商品。因此，你需要将 `Price` 和 `Quantity` 字段的值相乘，以计算订单行的总额。你可以将这一乘法结果存储在
    DataFrame 的新字段中，如下所示：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This adds a `Total` column to the DataFrame, in addition to the existing seven
    columns. You now have the option to remove the columns that you don’t need for
    generating the sums of sales by region and date. At this stage, you only need
    to retain the `Date`, `Total`, and `Empno` columns. The first two will obviously
    be essential to your calculations. We’ll discuss the need for `Empno` momentarily.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在 DataFrame 中添加一个 `Total` 列，除了原有的七列之外。现在，你可以选择删除不需要的列，以便生成按地区和日期汇总的销售额。在这个阶段，你只需要保留
    `Date`、`Total` 和 `Empno` 列。前两列显然对你的计算至关重要。稍后我们将讨论 `Empno` 的必要性。
- en: 'To filter the DataFrame down to the necessary columns, pass a list of the column
    names in to the `[]` operator of the DataFrame, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 DataFrame 筛选到必要的列，传递一个列名列表给 DataFrame 的 `[]` 操作符，如下所示：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You now need to join the `df_sales` DataFrame that you just created with the
    `df_regions` DataFrame. However, you can’t join them directly, because they don’t
    have any columns in common. Instead, you’ll have to join them via the `df_emps`
    DataFrame, which shares one column with `df_sales` and one with `df_regions`.
    Specifically, `df_sales` and `df_emps` can be joined on the `Empno` column, which
    is why we kept the column in `df_sales`, while `df_emps` and `df_locations` can
    be joined on the `Location` column. Implement these joins with the `merge()` method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要将刚刚创建的 `df_sales` DataFrame 与 `df_regions` DataFrame 连接起来。然而，由于它们没有共同的列，不能直接连接。因此，你必须通过
    `df_emps` DataFrame 来连接它们，因为 `df_emps` 和 `df_sales` 共享一个列，`df_emps` 和 `df_regions`
    也共享一个列。具体来说，`df_sales` 和 `df_emps` 可以通过 `Empno` 列连接，这也是我们在 `df_sales` 中保留该列的原因，而
    `df_emps` 和 `df_locations` 可以通过 `Location` 列连接。使用 `merge()` 方法实现这些连接：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A printout of this `df_result` DataFrame will look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出的 `df_result` DataFrame 如下所示：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once again, you might want to remove unnecessary columns and keep only those
    that you actually need. This time you can get rid of the `Empno`, `Empname`, and
    `Location` columns, leaving only `Date`, `Region`, and `Total`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你可能想要移除不必要的列，只保留实际需要的列。这次你可以去掉 `Empno`、`Empname` 和 `Location` 列，保留 `Date`、`Region`
    和 `Total`：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now the content of `df_result` appears as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `df_result` 的内容如下所示：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Without including unnecessary columns, the `df_result` DataFrame is now ideally
    formatted for aggregating the sales data by region and by date.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在不包含不必要列的情况下，`df_result` DataFrame 现在已经理想地格式化，用于按地区和日期聚合销售数据。
- en: Grouping and Aggregating the Data
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据分组与聚合
- en: 'To perform aggregate calculations on your data, you must first sort it into
    relevant groups. The pandas `groupby()` function splits a DataFrame’s data into
    subsets that have matching values for one or more columns. For our example, you
    can use `groupby()` to group the `df_result` DataFrame by date and region. Then
    you can apply the pandas `sum()` aggregation function to each group. You can perform
    both operations in a single line of code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要对数据进行聚合计算，必须先将其排序为相关的组。pandas 的 `groupby()` 函数会将 DataFrame 的数据拆分为具有相同列值的子集。对于我们的例子，可以使用
    `groupby()` 按日期和地区对 `df_result` DataFrame 进行分组。然后，可以对每个组应用 pandas 的 `sum()` 聚合函数。你可以在一行代码中同时完成这两个操作：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The first grouping is based on the `Date` column. Then, within each date, you
    group based on `Region`. The `groupby()` function returns an object to which you
    then apply the `sum()` aggregation function. This function sums up the values
    of numeric columns. In this particular example, `sum()` is applied only to the
    `Total` column because this is the only numeric column in the DataFrame. (If the
    DataFrame had other numeric columns, the aggregation function would be applied
    to those too.) You end up with the following DataFrame:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次分组是基于 `Date` 列。然后，在每个日期内，按照 `Region` 分组。`groupby()` 函数返回一个对象，然后你可以对其应用 `sum()`
    聚合函数。这个函数会对数值型列的值进行求和。在这个特定的例子中，`sum()` 仅应用于 `Total` 列，因为这是 DataFrame 中唯一的数值型列。（如果
    DataFrame 中有其他数值型列，聚合函数也会应用到这些列。）最终，你将得到如下的 DataFrame：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Both `Date` and `Region` are index columns of the new DataFrame. Together they
    form a *hierarchical index*, also known as a *multilevel index*, or just a *MultiIndex*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date` 和 `Region` 是新 DataFrame 的索引列。它们一起构成了一个*层次化索引*，也称为*多级索引*，或者简称为*MultiIndex*。'
- en: A MultiIndex makes it possible to work with data that has an arbitrary number
    of dimensions within the 2D structure of a DataFrame by using multiple columns
    to uniquely identify each row. In our case, the `df_date_region` DataFrame can
    be viewed as a 3D dataset, with three axes corresponding to dates, regions, and
    aggregate values (each axis represents the corresponding dimension), as described
    in [Table 6-1](#table6-1).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: MultiIndex 使得在 DataFrame 的 2D 结构中，可以通过使用多列来唯一标识每一行，从而处理具有任意维度的数据。在我们的例子中，`df_date_region`
    DataFrame 可以视为一个 3D 数据集，三个轴分别对应日期、地区和汇总值（每个轴代表对应的维度），如 [表 6-1](#table6-1) 所示。
- en: 'Table 6-1: The Three Dimensions of the `df_date_region` DataFrame'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1：`df_date_region` DataFrame 的三个维度
- en: '| **Axis** | **Coordinates** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **轴** | **坐标** |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Date | 2022-02-04, 2022-02-05, 2022-02-06 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 2022-02-04, 2022-02-05, 2022-02-06 |'
- en: '| Region | West, East |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 地区 | 西部, 东部 |'
- en: '| Aggregation | Total |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 聚合 | 总计 |'
- en: Our DataFrame’s MultiIndex enables us to write queries that navigate the DataFrame’s
    dimensions, accessing totals by date, region, or both. We’ll be able to uniquely
    identify each row of the DataFrame and access selected aggregated values within
    different groups of data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据框的 MultiIndex 使我们能够编写查询，遍历数据框的维度，按日期、地区或两者的总和进行访问。我们将能够唯一标识数据框中的每一行，并访问不同数据组内的选定聚合值。
- en: Viewing Specific Aggregations by MultiIndex
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按 MultiIndex 查看特定的汇总信息
- en: Viewing specific categories of information in a DataFrame is a common requirement.
    For example, in the case of the `df_date_region` DataFrame you’ve just created,
    you might need to obtain the aggregated sales figures only for a certain date,
    or for a particular region and a certain date at the same time. You can use the
    DataFrame’s index (or MultiIndex) to find the required aggregation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据框中查看特定类别的信息是常见的需求。例如，在您刚创建的 `df_date_region` 数据框中，您可能只需要获取特定日期的聚合销售数据，或者同时获取某个地区和某个日期的销售数据。您可以使用数据框的索引（或
    MultiIndex）来查找所需的聚合数据。
- en: 'To get a feel for working with a MultiIndex, it will help to see how each MultiIndex
    value is represented in Python. You can use the `df_date_region` DataFrame’s `index`
    property for this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解如何使用 MultiIndex，查看每个 MultiIndex 值在 Python 中的表示方式会有所帮助。您可以使用 `df_date_region`
    数据框的 `index` 属性来实现这一点：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `index` property returns all the index values, or row labels, of a DataFrame,
    whether that DataFrame has a simple index or a MultiIndex. Here are the MultiIndex
    values for `df_date_region`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`index` 属性返回数据框的所有索引值或行标签，无论该数据框是使用简单索引还是 MultiIndex。以下是 `df_date_region` 的
    MultiIndex 值：'
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, each MultiIndex value is a tuple that you can use to access
    a corresponding sales figure in the `Total` field. With this in mind, here’s how
    to access the total figures for a certain date and region:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个 MultiIndex 值都是一个元组，您可以使用它来访问 `Total` 字段中的相应销售数据。考虑到这一点，以下是如何访问特定日期和地区的总销售数据：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You place the tuple representing the desired MultiIndex in the `[]` operator
    ❷ and pass it to the pandas `index.isin()` method. The method requires the passed
    parameter to be an iterable (list or tuple), Series, DataFrame, or dictionary,
    which is why you place the desired MultiIndex in square brackets. The method returns
    a Boolean array indicating whether the data at each of the DataFrame’s index values
    corresponds to the index value(s) you specify: `True` for matches or `False` otherwise.
    In this particular example, the `isin()` method generates the array `[False, False,
    False, True, False, False]`, meaning that the fourth index value is a match.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您将表示所需 MultiIndex 的元组放入 `[]` 运算符 ❷ 中，并将其传递给 pandas 的 `index.isin()` 方法。该方法要求传递的参数必须是可迭代对象（如列表或元组）、Series、DataFrame
    或字典，这就是为什么您需要将所需的 MultiIndex 放在方括号中的原因。该方法返回一个布尔数组，指示数据框中每个索引值是否与您指定的索引值匹配：如果匹配则为
    `True`，否则为 `False`。在这个特定示例中，`isin()` 方法生成了数组 `[False, False, False, True, False,
    False]`，表示第四个索引值是匹配的。
- en: 'You then pass the Boolean array to the `df_date_region` DataFrame in the `[]`
    operator ❶, resulting in the corresponding sales figure being selected, as shown
    here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将布尔数组传递给 `df_date_region` 数据框中的 `[]` 运算符 ❶，从而选择相应的销售数据，如下所示：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You aren’t limited to retrieving only a single row from the DataFrame. You
    can pass more than one index value to `index.isin()` to get a set of corresponding
    sales figures, as shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅限于从数据框中检索单行数据。您可以将多个索引值传递给 `index.isin()`，以获取一组对应的销售数据，如下所示：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will retrieve the following two rows from `df_date_region`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 `df_date_region` 中检索以下两行数据：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Although this particular example uses two neighboring indices, you can in fact
    pass any indices into `index.isin()` in any order, like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此特定示例使用了两个相邻的索引，实际上您可以按任意顺序将任何索引传递给 `index.isin()`，如下所示：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The set of retrieved rows will appear as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 检索到的行集合将如下所示：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice that the order of the retrieved records matches the order of the records
    in the DataFrame rather than the order in which you specified the indices.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，检索到的记录顺序与数据框中的记录顺序匹配，而不是您指定索引的顺序。
- en: Slicing a Range of Aggregated Values
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切片聚合值的范围
- en: 'Just as you can use slicing to obtain a range of values from a list, you can
    use it to extract a range of aggregated values from a DataFrame. You would do
    this in the `df_date_region` DataFrame by providing two tuples specifying the
    MultiIndex keys of the start and end positions of the slice range. The following
    example obtains the range of aggregated values for dates from `2022-02-04` through
    `2022-02-05` for all regions. You simply place the start and end MultiIndex keys
    in square brackets, separated by a colon:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以使用切片从列表中获取一系列值一样，你也可以使用它从DataFrame中提取一系列聚合值。你可以在`df_date_region` DataFrame中通过提供两个元组来实现，这两个元组指定了切片范围的开始和结束位置的MultiIndex键。以下示例获取了所有地区在`2022-02-04`到`2022-02-05`日期范围内的聚合值范围。你只需将开始和结束的MultiIndex键放在方括号内，用冒号分隔：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As a result, you get the following rows of the DataFrame:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，你将得到以下几行的DataFrame：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since in this particular example you’re obtaining the sales figures for all
    regions within a specified date range, you can leave off the region names and
    pass only the dates:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在这个特定示例中，你正在获取指定日期范围内所有地区的销售数据，你可以省略地区名称，仅传递日期：
- en: '[PRE26]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This should give you exactly the same result as the preceding example.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你与前一个示例完全相同的结果。
- en: Slicing Within Aggregation Levels
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在聚合级别中进行切片
- en: 'You might want to slice your aggregations within the different levels of a
    hierarchical index. In our example, the highest aggregation level is the `Date`
    level, within which we have the `Region` level. Say you need to obtain the sales
    figures for a specific slice of dates, selecting all the contents of the `Region`
    level. You can do this with Python’s `slice()` function in conjunction with the
    DataFrame’s `loc` property, as illustrated here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望在不同层次的层级索引中对聚合结果进行切片。在我们的示例中，最高的聚合级别是`Date`级别，在该级别下我们有`Region`级别。假设你需要获取特定日期范围内的销售数据，并选择`Region`级别的所有内容。你可以通过结合使用Python的`slice()`函数和DataFrame的`loc`属性来实现这一点，如下所示：
- en: '[PRE27]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You use `slice()` twice here. In the first instance, `slice()` defines the slicing
    range for `Date`, the highest aggregation level, generating the `slice` object
    that specifies the start and end dates. The second time you invoke `slice()`,
    you do so for the `Region` level (the next lowest level). By specifying `None`,
    you select all the contents of the `Region` level. In the `[]` operator of the
    `loc` property, you also include a comma followed by a colon (`:`). This syntax
    specifies that you’re using row labels rather than column labels.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你使用了两次`slice()`。第一次，`slice()`定义了`Date`（最高聚合级别）的切片范围，生成了指定开始和结束日期的`slice`对象。第二次调用`slice()`时，你针对的是`Region`级别（下一个较低级别）。通过指定`None`，你选择了`Region`级别的所有内容。在`loc`属性的`[]`操作符中，你还包括了一个逗号，后跟一个冒号（`:`）。这种语法表示你正在使用行标签而不是列标签。
- en: 'The result set is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 结果集如下：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the next example, you replace `slice(None)` with `slice(''East'')`, thus
    reducing the sales figures being retrieved to only rows containing `East`, taken
    from within the specified date range:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，你将`slice(None)`替换为`slice('East')`，从而将检索的销售数据减少到仅包含`East`的行，这些行是在指定日期范围内选取的：
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will retrieve the following rows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这将检索以下几行：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You could specify a range for the `Region` level rather than a single value,
    just as you specify a range for the `Date` level. In this particular example,
    however, that range could only start with `'East'` and end with `'West'`, implemented
    as `slice('East','West')`. Since this is the maximum possible range, a call of
    `slice('East','West')` will be equal to a call of `slice(None)`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为`Region`级别指定一个范围，而不是单个值，就像你为`Date`级别指定一个范围一样。然而，在这个特定示例中，该范围只能从`'East'`开始，并以`'West'`结束，表示为`slice('East','West')`。由于这是最大可能的范围，调用`slice('East','West')`将等同于调用`slice(None)`。
- en: Adding a Grand Total
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加总计
- en: 'When it comes to aggregating sales data, you might ultimately want to calculate
    the grand total, or the sum of all the other sales value totals, and add it to
    the DataFrame. In our example, since all the totals are in a single DataFrame,
    `df_date_region`, you can use the pandas `sum()` method to find the total sales
    across all regions and all dates. The method calculates the sum of the values
    for a specified axis, as shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在汇总销售数据时，你可能最终需要计算总计，或是所有其他销售值总和，并将其添加到DataFrame中。在我们的示例中，由于所有总计都在同一个DataFrame
    `df_date_region` 中，你可以使用pandas的`sum()`方法来计算所有地区和所有日期的销售总额。该方法会计算指定轴上的值的总和，如下所示：
- en: '[PRE31]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here, `sum()` returns a pandas Series with the sum over the `Total` column
    in the `df_date_region` DataFrame. Remember that it isn’t necessary to specify
    the `Total` column in your call to `sum()`, since it automatically applies to
    any numeric data. The content of the `ps` Series will be as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`sum()`返回一个pandas Series，它对`df_date_region` DataFrame中的`Total`列进行求和。记住，在调用`sum()`时无需指定`Total`列，因为它会自动应用于任何数值型数据。`ps`
    Series的内容如下所示：
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To append the newly created Series to the `df_date_region` DataFrame, you have
    to first give it a name. This name will be used as the index for the grand total
    row in the DataFrame. Because index keys are tuples in the `df_date_region` DataFrame,
    you use a tuple for the Series name as well:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新创建的Series附加到`df_date_region` DataFrame，首先需要为其命名。这个名称将作为DataFrame中总计行的索引。由于`df_date_region`
    DataFrame中的索引键是元组，因此你也需要为Series命名时使用元组：
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The first `''All''` in the tuple relates to the `Date` component of the index
    key, while the second relates to the `Region` index key component. Now you can
    append the Series to the DataFrame:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 元组中的第一个`'All'`与索引键的`Date`组件相关，而第二个`'All'`与`Region`索引键组件相关。现在，你可以将Series附加到DataFrame：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you print out the newly created DataFrame, its content will look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印出新创建的DataFrame，它的内容将如下所示：
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can access the grand total row by its index, as you would any other row
    in a DataFrame. Here, you pass the tuple representing the index of the row to
    the `index.isin()` method, as discussed earlier:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过其索引访问总计行，就像访问DataFrame中的任何其他行一样。在这里，你将表示该行索引的元组传递给`index.isin()`方法，如前所述：
- en: '[PRE36]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will give you the grand total row:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你提供总计行：
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Adding Subtotals
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加小计
- en: 'Apart from adding up the grand total, you might also want to add subtotals
    for each date to the DataFrame so that the resulting DataFrame appears as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 除了计算总计，你可能还希望为DataFrame中的每个日期添加小计，使得结果DataFrame如下所示：
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Generating this DataFrame requires a few steps. First you group the DataFrame
    by the `Date` level of the index. Then you iterate over the resulting GroupBy
    object, accessing each date along with a set of rows (known as a *subframe*) containing
    the region and total information for that date. You then select and append each
    subframe to an empty DataFrame, along with a corresponding subtotal row. Here’s
    how:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这个DataFrame需要几个步骤。首先，你按索引的`Date`级别对DataFrame进行分组。然后你遍历生成的GroupBy对象，访问每个日期及其对应的行集合（称为*子框架*），该集合包含该日期的区域和总计信息。接着，你选择并附加每个子框架到一个空的DataFrame，并附加一个对应的小计行。步骤如下：
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You begin by creating an empty DataFrame, `df_totals`, to receive the final
    data ❶. You then create a GroupBy object ❷, grouping the `df_date_region` DataFrame
    by the top hierarchical level (`level=0`) of its index (that is, the `Date` column)
    and enter a `for` loop iterating over the GroupBy object. With each iteration,
    you get a date and its corresponding subframe. You append the subframe to the
    `df_totals` DataFrame ❸, then create the subtotal row in the form of a Series
    containing the sum of the subframe’s rows ❹. Next, you name that Series with its
    associated date and `'All'` to denote all regions ❺, then append the Series to
    the `df_totals` DataFrame ❻.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先创建一个空的DataFrame，`df_totals`，用来接收最终的数据 ❶。然后你创建一个GroupBy对象 ❷，将`df_date_region`
    DataFrame按其索引的顶层层次（即`Date`列）进行分组，并进入一个`for`循环，遍历GroupBy对象。在每次迭代中，你将得到一个日期及其对应的子框架。你将子框架附加到`df_totals`
    DataFrame ❸，然后创建一个包含子框架行总和的Series作为小计行 ❹。接着，你用对应的日期和`'All'`为Series命名，表示所有区域 ❺，然后将Series附加到`df_totals`
    DataFrame ❻。
- en: 'Finally, you append the grand total row to the DataFrame, as shown here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将总计行附加到DataFrame，如下所示：
- en: '[PRE40]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As a result, you get a DataFrame that has both the sales sum for each date and
    the overall total for all the dates.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，你将得到一个包含每个日期的销售总和以及所有日期总和的DataFrame。
- en: Selecting All Rows in a Group
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择某组中的所有行
- en: 'In addition to aiding with aggregation, the `groupby()` function also helps
    you to select all the rows belonging to a certain group. To accomplish this, objects
    returned by `groupby()` provide the `get_group()` method. Here’s how it works:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助聚合，`groupby()`函数还可以帮助你选择属于某个特定组的所有行。为此，`groupby()`返回的对象提供了`get_group()`方法。操作方法如下：
- en: '[PRE41]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You group the `df_result` DataFrame by `Date` and `Region`, passing the column
    names in as a list to `groupby()`, just like you did previously. Then you invoke
    the `get_group()` method on the resulting GroupBy object, passing a tuple with
    the desired index. This returns the following DataFrame:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `df_result` DataFrame 按照 `Date` 和 `Region` 分组，将列名作为列表传递给 `groupby()`，就像你之前做的那样。然后，你在结果的
    GroupBy 对象上调用 `get_group()` 方法，传递包含所需索引的元组。这将返回以下 DataFrame：
- en: '[PRE42]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: As you can see, the result set isn’t an aggregation. Rather, it includes all
    the order rows related to the specified date and region.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，结果集并不是一个聚合结果。相反，它包含了与指定日期和地区相关的所有订单行。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You learned in this chapter that aggregation is the process of gathering data
    and expressing it in a summarized format. Typically, this process involves splitting
    data into groups and then computing summaries for each group. The examples in
    this chapter showed how to aggregate data contained in pandas DataFrames, employing
    DataFrame methods and properties such as `merge()`, `groupby()`, `sum()`, `index`,
    and `loc`. You learned to take advantage of a DataFrame’s hierarchical index,
    or MultiIndex, to model multilevel relationships in the data being aggregated.
    You also learned to view and slice aggregated data selectively using a MultiIndex.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本章中学到，聚合是收集数据并以总结格式表达它的过程。通常，这个过程涉及将数据分成多个组，然后为每个组计算总结。本章中的示例展示了如何聚合包含在 pandas
    DataFrame 中的数据，使用 DataFrame 方法和属性，如 `merge()`、`groupby()`、`sum()`、`index` 和 `loc`。你学习了如何利用
    DataFrame 的层次化索引（MultiIndex），以建模在聚合数据中的多级关系。你还学会了如何使用 MultiIndex 查看和切片聚合数据。
