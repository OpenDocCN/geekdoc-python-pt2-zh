["```py\nn1 = 89\nn2 = 18\n```", "```py\nhalving = [n1]\n```", "```py\nimport math\nprint(math.floor(halving[0]/2))\n```", "```py\nwhile(min(halving) > 1):\n    halving.append(math.floor(min(halving)/2))\n```", "```py\ndoubling = [n2]\nwhile(len(doubling) < len(halving)):\n    doubling.append(max(doubling) * 2)\n```", "```py\nimport pandas as pd\nhalf_double = pd.DataFrame(zip(halving,doubling))\n```", "```py\nhalf_double = half_double.loc[half_double[0]%2 == 1,:]\n```", "```py\nanswer = sum(half_double.loc[:,1])\n```", "```py\ndef gcd(x,y):\n    larger = max(x,y)\n    smaller = min(x,y)\n\n    remainder = larger % smaller\n\n    if(remainder == 0):\n        return(smaller)\n\n    if(remainder != 0):\n  1       return(gcd(smaller,remainder))\n```", "```py\nluoshu = [[4,9,2],[3,5,7],[8,1,6]]\n```", "```py\ndef verifysquare(square):\n    sums = []\n    rowsums = [sum(square[i]) for i in range(0,len(square))]\n    sums.append(rowsums)\n    colsums = [sum([row[i] for row in square]) for i in range(0,len(square))]\n    sums.append(colsums)\n    maindiag = sum([square[i][i] for i in range(0,len(square))])\n    sums.append([maindiag])\n    antidiag = sum([square[i][len(square) - 1 - i] for i in \\range(0,len(square))])\n    sums.append([antidiag])\n    flattened = [j for i in sums for j in i]\n    return(len(list(set(flattened))) == 1)\n```", "```py\nn = 7\nsquare = [[float('nan') for i in range(0,n)] for j in range(0,n)]\n```", "```py\n[[nan, nan, nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan, nan, nan]]\n```", "```py\ndef printsquare(square):\n    labels = ['['+str(x)+']' for x in range(0,len(square))]\n    format_row = \"{:>6}\" * (len(labels) + 1)\n    print(format_row.format(\"\", *labels))\n    for label, row in zip(labels, square):\n        print(format_row.format(label, *row))\n```", "```py\nimport math\ncenter_i = math.floor(n/2)\ncenter_j = math.floor(n/2)\n```", "```py\nsquare[center_i][center_j] = int((n**2 +1)/2)\nsquare[center_i + 1][center_j] = 1\nsquare[center_i - 1][center_j] = n**2\nsquare[center_i][center_j + 1] = n**2 + 1 - n\nsquare[center_i][center_j - 1] = n\n```", "```py\ndef rule1(x,n):\n    return((x + n)%n**2)\n```", "```py\nprint(rule1(5,3))\n```", "```py\ndef rule1(x,n,upright):\n    return((x + ((-1)**upright) * n)%n**2)\n```", "```py\nprint(rule1(1,3,True))\n```", "```py\ndef rule2(x,n,upleft):\n    return((x + ((-1)**upleft))%n**2)\n```", "```py\ndef rule3(x,n,upleft):\n    return((x + ((-1)**upleft * (-n + 1)))%n**2)\n```", "```py\ncenter_i = math.floor(n/2)\ncenter_j = math.floor(n/2)\n```", "```py\nimport random\nentry_i = center_i\nentry_j = center_j\nwhere_we_can_go = ['up_left','up_right','down_left','down_right']\nwhere_to_go = random.choice(where_we_can_go)\n```", "```py\nif(where_to_go == 'up_right'):\n    new_entry_i = entry_i - 1\n    new_entry_j = entry_j + 1\n    square[new_entry_i][new_entry_j] = rule1(square[entry_i][entry_j],n,True)\n if(where_to_go == 'down_left'):\n    new_entry_i = entry_i + 1\n    new_entry_j = entry_j - 1\n    square[new_entry_i][new_entry_j] = rule1(square[entry_i][entry_j],n,False)\n```", "```py\nif(where_to_go == 'up_left'):\n    new_entry_i = entry_i - 1\n    new_entry_j = entry_j - 1\n    square[new_entry_i][new_entry_j] = rule2(square[entry_i][entry_j],n,True)\n\nif(where_to_go == 'down_right'):\n    new_entry_i = entry_i + 1\n    new_entry_j = entry_j + 1\n    square[new_entry_i][new_entry_j] = rule2(square[entry_i][entry_j],n,False)\n```", "```py\nif(where_to_go == 'up_left' and (entry_i + entry_j) == (n)):\n    new_entry_i = entry_i - 1\n    new_entry_j = entry_j - 1\n    square[new_entry_i][new_entry_j] = rule3(square[entry_i][entry_j],n,True)\n\nif(where_to_go == 'down_right' and (entry_i + entry_j) == (n-2)):\n    new_entry_i = entry_i + 1\n    new_entry_j = entry_j + 1\n    square[new_entry_i][new_entry_j] = rule3(square[entry_i][entry_j],n,False)\n```", "```py\nwhere_we_can_go = []\n\nif(entry_i < (n - 1) and entry_j < (n - 1)):\n    where_we_can_go.append('down_right')\n\nif(entry_i < (n - 1) and entry_j > 0):\n    where_we_can_go.append('down_left')\n\nif(entry_i > 0 and entry_j < (n - 1)):\n    where_we_can_go.append('up_right')\n\nif(entry_i > 0 and entry_j > 0):\n    where_we_can_go.append('up_left')\n```", "```py\nimport random\ndef fillsquare(square,entry_i,entry_j,howfull):\n     while(sum(math.isnan(i) for row in square for i in row) > howfull):\n        where_we_can_go = []\n\n        if(entry_i < (n - 1) and entry_j < (n - 1)):\n            where_we_can_go.append('down_right')\n        if(entry_i < (n - 1) and entry_j > 0):\n            where_we_can_go.append('down_left')\n        if(entry_i > 0 and entry_j < (n - 1)):\n            where_we_can_go.append('up_right')\n        if(entry_i > 0 and entry_j > 0):\n            where_we_can_go.append('up_left')\n\n        where_to_go = random.choice(where_we_can_go)\n        if(where_to_go == 'up_right'):\n            new_entry_i = entry_i - 1\n            new_entry_j = entry_j + 1\n            square[new_entry_i][new_entry_j] = rule1(square[entry_i][entry_j],n,True)\n\n        if(where_to_go == 'down_left'):\n            new_entry_i = entry_i + 1\n            new_entry_j = entry_j - 1\n            square[new_entry_i][new_entry_j] = rule1(square[entry_i][entry_j],n,False)\n\n        if(where_to_go == 'up_left' and (entry_i + entry_j) != (n)):\n            new_entry_i = entry_i - 1\n            new_entry_j = entry_j - 1\n            square[new_entry_i][new_entry_j] = rule2(square[entry_i][entry_j],n,True)\n\n        if(where_to_go == 'down_right' and (entry_i + entry_j) != (n-2)):\n            new_entry_i = entry_i + 1\n            new_entry_j = entry_j + 1\n            square[new_entry_i][new_entry_j] = rule2(square[entry_i][entry_j],n,False)\n\n        if(where_to_go == 'up_left' and (entry_i + entry_j) == (n)):\n            new_entry_i = entry_i - 1\n            new_entry_j = entry_j - 1\n            square[new_entry_i][new_entry_j] = rule3(square[entry_i][entry_j],n,True)\n\n if(where_to_go == 'down_right' and (entry_i + entry_j) == (n-2)):\n            new_entry_i = entry_i + 1\n            new_entry_j = entry_j + 1\n            square[new_entry_i][new_entry_j] = rule3(square[entry_i][entry_j],n,False)\n\n     1 entry_i = new_entry_i\n        entry_j = new_entry_j\n\n    return(square)\n```", "```py\nentry_i = math.floor(n/2)\nentry_j = math.floor(n/2)\n\nsquare = fillsquare(square,entry_i,entry_j,(n**2)/2 - 4)\n```", "```py\nprintsquare(square)\n```", "```py\n [0]   [1]   [2]   [3]   [4]   [5]   [6]\n   [0]    22   nan    16   nan    10   nan     4\n   [1]   nan    23   nan    17   nan    11   nan\n   [2]    30   nan    24    49    18   nan    12\n   [3]   nan    31     7    25    43    19   nan\n   [4]    38   nan    32     1    26   nan    20\n   [5]   nan    39   nan    33   nan    27   nan\n   [6]    46   nan    40   nan    34   nan    28\n```", "```py\nentry_i = math.floor(n/2) + 1\nentry_j = math.floor(n/2)\n\nsquare = fillsquare(square,entry_i,entry_j,0)\n```", "```py\n>>> **printsquare(square)**\n         [0]   [1]   [2]   [3]   [4]   [5]   [6]\n   [0]    22    47    16    41    10    35     4\n   [1]     5    23    48    17    42    11    29\n   [2]    30     6    24     0    18    36    12\n   [3]    13    31     7    25    43    19    37\n   [4]    38    14    32     1    26    44    20\n   [5]    21    39     8    33     2    27    45\n   [6]    46    15    40     9    34     3    28\n```", "```py\nsquare=[[n**2 if x == 0 else x for x in row] for row in square]\n```", "```py\nverifysquare(square)\n```", "```py\nn = 11\nsquare=[[float('nan') for i in range(0,n)] for j in range(0,n)]\n\ncenter_i = math.floor(n/2)\ncenter_j = math.floor(n/2)\n\nsquare[center_i][center_j] = int((n**2 + 1)/2)\nsquare[center_i + 1][center_j] = 1\nsquare[center_i - 1][center_j] = n**2\nsquare[center_i][center_j + 1] = n**2 + 1 - n\nsquare[center_i][center_j - 1] = n\n\nentry_i = center_i\nentry_j = center_j\n\nsquare = fillsquare(square,entry_i,entry_j,(n**2)/2 - 4)\n\nentry_i = math.floor(n/2) + 1\nentry_j = math.floor(n/2)\n\nsquare = fillsquare(square,entry_i,entry_j,0)\n\nsquare = [[n**2 if x == 0 else x for x in row] for row in square]\n```", "```py\n>>> **printsquare(square)**\n         [0]   [1]   [2]   [3]   [4]   [5]   [6]   [7]   [8]   [9]  [10]\n   [0]    56   117    46   107    36    97    26    87    16    77     6\n   [1]     7    57   118    47   108    37    98    27    88    17    67\n   [2]    68     8    58   119    48   109    38    99    28    78    18\n   [3]    19    69     9    59   120    49   110    39    89    29    79\n   [4]    80    20    70    10    60   121    50   100    40    90    30\n   [5]    31    81    21    71    11    61   111    51   101    41    91\n   [6]    92    32    82    22    72     1    62   112    52   102    42\n   [7]    43    93    33    83    12    73     2    63   113    53   103\n   [8]   104    44    94    23    84    13    74     3    64   114    54\n   [9]    55   105    34    95    24    85    14    75     4    65   115\n  [10]   116    45   106    35    96    25    86    15    76     5    66\n```"]