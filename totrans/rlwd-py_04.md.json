["```py\nrebecca.py, part 1\nimport sys\nimport os\nimport random\nfrom collections import defaultdict, Counter\ndef main():\n    message = input(\"Enter plaintext or ciphertext: \")\n    process = input(\"Enter 'encrypt' or 'decrypt': \")\n    while process not in ('encrypt', 'decrypt'):\n        process = input(\"Invalid process. Enter 'encrypt' or 'decrypt': \")\n    shift = int(input(\"Shift value (1-366) = \"))\n    while not 1 <= shift <= 366:\n        shift = int(input(\"Invalid value. Enter digit from 1 to 366: \")\n ➊ infile = input(\"Enter filename with extension: \")\n\n    if not os.path.exists(infile):\n        print(\"File {} not found. Terminating.\".format(infile), file=sys.stderr)\n        sys.exit(1)    \n    text = load_file(infile)\n    char_dict = make_dict(text, shift)\n\n    if process == 'encrypt':\n        ciphertext = encrypt(message, char_dict)\n     ➋ if check_for_fail(ciphertext):\n            print(\"\\nProblem finding unique keys.\", file=sys.stderr)\n            print(\"Try again, change message, or change code book.\\n\",         \n                  file=sys.stderr)\n            sys.exit()\n     ➌ print(\"\\nCharacter and number of occurrences in char_dict: \\n\")\n        print(\"{: >10}{: >10}{: >10}\".format('Character', 'Unicode', 'Count'))\n        for key in sorted(char_dict.keys()):\n            print('{:>10}{:>10}{:>10}'.format(repr(key)[1:-1],\n                                              str(ord(key)), \n                                              len(char_dict[key])))\n        print('\\nNumber of distinct characters: {}'.format(len(char_dict)))\n        print(\"Total number of characters: {:,}\\n\".format(len(text)))\n\n        print(\"encrypted ciphertext = \\n {}\\n\".format(ciphertext))    \n        print(\"decrypted plaintext = \")\n\n     ➍ for i in ciphertext:\n            print(text[i - shift], end='', flush=True)\n\n   elif process == 'decrypt':\n       plaintext = decrypt(message, text, shift)\n       print(\"\\ndecrypted plaintext = \\n {}\".format(plaintext))\n```", "```py\nCharacter and number of occurrences in char_dict: \n\n Character   Unicode     Count\n        \\n        10      7865\n                  32     72185\n         !        33       282\n         \"        34      2205\n         '        39       761\n         (        40        62\n         )        41        62\n         ,        44      5158\n         -        45      1409\n         .        46      3910\n         0        48         1\n         1        49         7\n         2        50         3\n         3        51         2\n         4        52         2\n         5        53         2\n         6        54         1\n         7        55         4\n         8        56         5\n         9        57         2\n         :        58        41\n         ;        59       103\n         ?        63       357\n         a        97     26711\n         b        98      4887\n         c        99      8898\n         d       100     14083\n         e       101     41156\n         f       102      7705\n         g       103      6535\n         h       104     20221\n         i       105     21929\n         j       106       431\n         k       107      2480\n         l       108     13718\n         m       109      8438\n         n       110     21737\n         o       111     25050\n         p       112      5827\n         q       113       204\n         r       114     19407\n         s       115     19911\n         t       116     28729\n         u       117     10436\n         v       118      3265\n         w       119      8536\n         x       120       573\n         y       121      5951\n         z       122       296\n         {       123         1\n         }       125         1\n\nNumber of distinct characters: 51\nTotal number of characters: 421,545\n```", "```py\nrebecca.py, part 2\n   def load_file(infile):\n       \"\"\"Read and return text file as a string of lowercase characters.\"\"\"\n       with open(infile) as f:\n           loaded_string = f.read().lower()\n       return loaded_string\n\n➊ def make_dict(text, shift):\n       \"\"\"Return dictionary of characters and shifted indexes.\"\"\"\n       char_dict = defaultdict(list)\n       for index, char in enumerate(text):\n         ➋ char_dict[char].append(index + shift)\n       return char_dict\n```", "```py\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x81 in position\n27070:character maps to <undefined>\n```", "```py\n  with open(infile, encoding='utf-8', errors='ignore') as f:\n```", "```py\n>>> mylist = ['a', 'b', 'c']\n>>> d = dict()\n>>> for index, char in enumerate(mylist):\n d[char].append(index)\n\nTraceback (most recent call last):\n File \"<pyshell#16>\", line 2, in <module>\n  d[char].append(index)\nKeyError: 'a'\n```", "```py\nrebecca.py, part 3\ndef encrypt(message, char_dict):\n    \"\"\"Return list of indexes representing characters in a message.\"\"\"\n    encrypted = []\n    for char in message.lower():\n     ➊ if len(char_dict[char]) > 1:\n            index = random.choice(char_dict[char])\n        elif len(char_dict[char]) == 1: # Random.choice fails if only 1 choice\n            index = char_dict[char][0]\n     ➋ elif len(char_dict[char]) == 0:\n            print(\"\\nCharacter {} not in dictionary.\".format(char),\n                  file=sys.stderr)\n            continue\n        encrypted.append(index)\n    return encrypted\n```", "```py\n[125711, 106950, 85184, 43194, 45021, 129218, 146951, 157084, 75611, 122047,\n121257, 83946, 27657, 142387, 80255, 160165, 8634, 26620, 105915, 135897,\n22902, 149113, 110365, 58787, 133792, 150938, 123319, 38236, 23859, 131058,\n36637, 108445, 39877, 132085, 86608, 65750, 10733, 16934, 78282]\n```", "```py\nrebecca.py, part 4\ndef decrypt(message, text, shift):\n    \"\"\"Decrypt ciphertext list and return plaintext string.\"\"\"\n    plaintext = ''\n    indexes = [s.replace(',', '').replace('[', '').replace(']', '')\n               for s in message.split()]\n    for i in indexes:\n        plaintext += text[int(i) - shift]\n    return plaintext\n```", "```py\nrebecca.py, part 5\ndef check_for_fail(ciphertext):\n    \"\"\"Return True if ciphertext contains any duplicate keys.\"\"\"\n    check = [k for k, v in Counter(ciphertext).items() if v > 1]\n    if len(check) > 0:\n        return True\n\nif __name__ == '__main__':\n    main()\n```", "```py\nAllies plan major attack for Five June. Begins at oh five twenty with\nbombardment from Aslagh Ridge toward Rommel east flank. Followed by tenth\nIndian Brigade infantry with tanks of twenty second Armored Brigade on Sidi\nMuftah. At same time, thirty second Army Tank Brigade and infantry to charge\nnorth flank at Sidra Ridge. Three hundred thirty tanks deployed to south and\nseventy to north.\n```", "```py\nwith open('lost.txt') as f:\n  words = [word.lower() for line in f for word in line.split()]\n  words_no_punct = [\"\".join(char for char in word if char.isalpha())\n                for word in words]\n\nprint(words_no_punct[:20])  # Print first 20 words as a QC check\n```", "```py\n['i', 'have', 'wrought', 'my', 'simple', 'plan', 'if', 'i', 'give', 'one',\n'hour', 'of', 'joy', 'to', 'the', 'boy', 'whos', 'half', 'a', 'man']\n```", "```py\nEnter plaintext or ciphertext: sidi muftah with ten tanks\nEnter 'encrypt' or 'decrypt': encrypt\nShift value (1-365) = 5\nEnter filename with extension: lost.txt\n\nCharacter sidi not in dictionary.\n\nCharacter muftah not in dictionary.\n\nCharacter tanks not in dictionary.\n\nencrypted ciphertext = \n [23371, 7491]\n\ndecrypted plaintext = \nwith ten\n```", "```py\nEnter plaintext or ciphertext: a a so if do in my under for to all he the the\nwith ten a a tell all night kind so the the\nEnter 'encrypt' or 'decrypt': encrypt\nShift value (1-365) = 5\nEnter filename with extension: lost.txt\n\nencrypted ciphertext = \n [29910, 70641, 30556, 60850, 72292, 32501, 6507, 18593, 41777, 23831, 41833,\n16667, 32749, 3350, 46088, 37995, 12535, 30609, 3766, 62585, 46971, 8984,\n44083, 43414, 56950]\n\ndecrypted plaintext =\na a so if do in my under for to all he the the with ten a a tell all night\nkind so the the\n```"]