["```py\n# open the image and convert to grayscale\nimage = Image.open(fileName).convert(\"L\")\n# store the image dimensions\n❶ W, H = image.size[0], image.size[1]\n# compute the tile width\n❷ w = W/cols\n# compute the tile height based on the aspect ratio and scale of the font\n❸ h = w/scale\n# compute the number of rows to use in the final grid\n❹ rows = int(H/h)\n\n```", "```py\ndef getAverageL(image):\n    # get the image as a numpy array\n  ❶ im = np.array(image)\n    # get the dimensions\n    w,h = im.shape\n    # get the average\n  ❷ return np.average(im.reshape(w*h))\n\n```", "```py\n# an ASCII image is a list of character strings\n❶ aimg = []\n# generate the list of tile dimensions\n❷ for j in range(rows):\n    y1 = int(j*h)\n    y2 = int((j+1)*h)\n    # correct the last tile\n    if j == rows-1:\n      ❸ y2 = H\n    # append an empty string\n  ❹ aimg.append(\"\")\n  ❺ for i in range(cols):\n        # crop the image to fit the tile\n        x1 = int(i*w)\n        x2 = int((i+1)*w)\n        # correct the last tile\n        if i == cols-1:\n            x2 = W\n        # crop the image to extract the tile into another Image object\n      ❻ img = image.crop((x1, y1, x2, y2))\n        # get the average luminance\n      ❼ avg = int(getAverageL(img))\n        # look up the ASCII character for grayscale value (avg)\n        if moreLevels:\n          ❽ gsval = gscale1[int((avg*69)/255)]\n        else:\n          ❾ gsval = gscale2[int((avg*9)/255)]\n        # append the ASCII character to the string\n      ❿ aimg[j] += gsval\n\n```", "```py\nparser = argparse.ArgumentParser(description=\"descStr\")\n# add expected arguments\nparser.add_argument('--file', dest='imgFile', required=True)\nparser.add_argument('--scale', dest='scale', required=False)\nparser.add_argument('--out', dest='outFile', required=False)\nparser.add_argument('--cols', dest='cols', required=False)\nparser.add_argument('--morelevels', dest='moreLevels', action='store_true')\n\n```", "```py\n# open a new text file\n❶ f = open(outFile, 'w')\n# write each string in the list to the new file\n❷ for row in aimg:\n    f.write(row + '\\n')\n# clean up\n❸ f.close()\n\n```", "```py\n$ `python ascii.py --file` `data/robot.jpg` `--cols 100`\n\n```", "```py\n    $ ``python ascii.py --map \"@$%^`.\"``\n\n    ```"]