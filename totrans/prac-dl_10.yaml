- en: '**10'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EXPERIMENTS WITH NEURAL NETWORKS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: 'In [Chapter 9](ch09.xhtml#ch09), we discussed the theory behind neural networks.
    In this chapter, we’ll trade equations for code and run a number of experiments
    designed to increase our intuition regarding the essential parameters of neural
    networks: architecture and activation functions, batch size, base learning rate,
    training set size, L2 regularization, momentum, weight initialization, feature
    ordering, and the precision of the weights and biases.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: To save space and eliminate tedious repetition, we won’t show the specific code
    for each experiment. In most cases, the code is only trivially different from
    the previous example; we’re usually changing only the particular argument to the
    `MLPClassifier` constructor we’re interested in. The code for each experiment
    is included in the set of files associated with this book, and we’ll list the
    network parameters and the name of the file. When necessary, we’ll provide code
    to clarify a particular approach. We’ll show the code for the first experiment
    in its entirety.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Our Dataset
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll be working with the MNIST dataset’s vector form, which we assembled in
    [Chapter 5](ch05.xhtml#ch05). Recall that this dataset consists of 28×28 pixel
    8-bit grayscale images of handwritten digits, [0,9]. In vector form, each 28 ×
    28 image is unraveled into a vector of 28 × 28 = 784 elements, all bytes ([0,255]).
    The unraveling lays each row end to end. Therefore, each sample has 784 elements
    and an associated label. The training set has 60,000 samples, while the test set
    has 10,000\. For our experiments, we won’t use all of the data in the training
    set. This is to help illustrate the effect of network parameters and to keep our
    training times reasonable. Refer back to [Figure 5-3](ch05.xhtml#ch5fig3) for
    representative MNIST digits.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The MLPClassifier Class
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `MLPClassifier` class follows the same format as the other sklearn classifiers.
    There is a constructor and the expected methods: `fit` for training, `score` for
    applying the classifier to test data, and `predict` to make a prediction on unknown
    inputs. We’ll also use `predict_proba` to return the actual predicted per class
    probabilities. The constructor has many options:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we’ve provided the default values for each parameter. See the sklearn documentation
    page at [http://scikit-learn.org/](http://scikit-learn.org/) for a complete description
    of each parameter. We’ll set some of these to specific values, and others will
    be changed for the experiments while still others are relevant in only specific
    situations. The key parameters we’ll work with are in [Table 10-1](ch10.xhtml#ch10tab1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The following set of experiments explores the effect of various `MLPClassifier`
    parameters. As mentioned, we’ll show all the code used for the first experiment,
    understanding that only small changes are needed to perform the other experiments.
    At times, we’ll show little code snippets to make the change concrete.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-1:** Important `MLPClassifier` Constructor Keywords and Our Default
    Values for Them'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 10-1:** 重要的`MLPClassifier`构造函数关键词及其默认值'
- en: '| **Keyword** | **Description** |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **关键词** | **描述** |'
- en: '| --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `hidden_layer_sizes` | Tuple giving the hidden layer sizes |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `hidden_layer_sizes` | 隐藏层大小的元组 |'
- en: '| `activation` | Activation function type; for example, ReLU |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `activation` | 激活函数类型；例如，ReLU |'
- en: '| `alpha` | L2 parameter—we called it *λ* (lambda) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `alpha` | L2参数—我们称之为*λ*（lambda） |'
- en: '| `batch_size` | Minibatch size |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `batch_size` | 小批量大小 |'
- en: '| `learning_rate_init` | The learning rate, *η* (eta) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `learning_rate_init` | 学习率，*η*（eta） |'
- en: '| `max_iter` | Number of training epochs |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `max_iter` | 训练的轮数 |'
- en: '| `warm_start` | Continue training or start again |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `warm_start` | 继续训练或重新开始 |'
- en: '| `momentum` | Momentum |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `momentum` | 动量 |'
- en: '| `solver` | Solver algorithm ("sgd") |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `solver` | 求解算法（"sgd"） |'
- en: '| `nesterovs_momentum` | Use Nesterov momentum (False) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `nesterovs_momentum` | 是否使用Nesterov动量（默认：False） |'
- en: '| `early_stopping` | Use early stopping (False) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `early_stopping` | 是否使用提前停止（默认：False） |'
- en: '| `learning_rate` | Learning rate schedule ("constant") |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `learning_rate` | 学习率计划（"constant"） |'
- en: '| `tol` | Stop early if loss change < tol (1e-8) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `tol` | 如果损失变化小于tol，则提前停止（1e-8） |'
- en: '| `verbose` | Output to console while training (False) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `verbose` | 训练过程中是否输出到控制台（默认：False） |'
- en: Architecture and Activation Functions
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构和激活函数
- en: 'When designing a neural network, we immediately face two fundamental questions:
    what architecture and what activation function? These are arguably the most important
    deciding factors for a model’s success. Let’s explore what happens when we train
    a model using different architectures and activation functions while holding the
    training dataset fixed.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计神经网络时，我们首先面临两个基本问题：选择什么架构和什么激活函数？这无疑是决定模型成功的最重要因素。让我们探讨一下，当保持训练数据集固定时，使用不同的架构和激活函数进行训练时会发生什么。
- en: The Code
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码
- en: As promised, for this first experiment we’ll show the code in its entirety,
    starting with the helper functions in [Listing 10-1](ch10.xhtml#ch10lis1).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如所承诺，对于这个首次实验，我们将展示完整代码，从[Listing 10-1](ch10.xhtml#ch10lis1)中的辅助函数开始。
- en: import numpy as np
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import time
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: import time
- en: from sklearn.neural_network import MLPClassifier
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.neural_network import MLPClassifier
- en: 'def run(x_train, y_train, x_test, y_test, clf):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'def run(x_train, y_train, x_test, y_test, clf):'
- en: s = time.time()
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: s = time.time()
- en: (*\pagebreak*)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: (*\pagebreak*)
- en: clf.fit(x_train, y_train)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: clf.fit(x_train, y_train)
- en: e = time.time()-s
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: e = time.time()-s
- en: loss = clf.loss_
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: loss = clf.loss_
- en: weights = clf.coefs_
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: weights = clf.coefs_
- en: biases = clf.intercepts_
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: biases = clf.intercepts_
- en: params = 0
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: params = 0
- en: 'for w in weights:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'for w in weights:'
- en: params += w.shape[0]*w.shape[1]
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: params += w.shape[0]*w.shape[1]
- en: 'for b in biases:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'for b in biases:'
- en: params += b.shape[0]
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: params += b.shape[0]
- en: return [clf.score(x_test, y_test), loss, params, e]
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: return [clf.score(x_test, y_test), loss, params, e]
- en: 'def nn(layers, act):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'def nn(layers, act):'
- en: return MLPClassifier(solver="sgd", verbose=False, tol=1e-8,
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: return MLPClassifier(solver="sgd", verbose=False, tol=1e-8,
- en: nesterovs_momentum=False, early_stopping=False,
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: nesterovs_momentum=False, early_stopping=False,
- en: learning_rate_init=0.001, momentum=0.9, max_iter=200,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: learning_rate_init=0.001, momentum=0.9, max_iter=200,
- en: hidden_layer_sizes=layers, activation=act)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: hidden_layer_sizes=layers, activation=act)
- en: '*Listing 10-1: Helper functions for experimenting with the architecture and
    activation function. See* mnist_nn_experiments.py.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 10-1: 用于实验架构和激活函数的辅助函数。请参见* mnist_nn_experiments.py。'
- en: '[Listing 10-1](ch10.xhtml#ch10lis1) imports the usual modules and then defines
    two helper functions, `run` and `nn`. Starting with `nn`, we see that all it does
    is return an instance of `MLPClassifier` using the hidden layer sizes and the
    given activation function type.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 10-1](ch10.xhtml#ch10lis1)导入常用的模块，然后定义了两个辅助函数，`run`和`nn`。从`nn`开始，我们看到它所做的只是使用隐藏层大小和给定的激活函数类型返回一个`MLPClassifier`实例。'
- en: The hidden layer sizes are given as a tuple, where each element is the number
    of nodes in the corresponding layer. Recall that sklearn works with only fully
    connected layers, so a single number is all we need to specify the size. The input
    samples given for training determine the size of the input layer. Here the input
    samples are vectors representing the digit images, so there are 28 × 28 = 784
    nodes in the input layer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏层的大小以元组的形式给出，其中每个元素表示相应层的节点数。回想一下，sklearn只使用全连接层，因此我们只需要一个数字来指定大小。用于训练的输入样本决定了输入层的大小。这里，输入样本是表示数字图像的向量，因此输入层有28
    × 28 = 784个节点。
- en: What about the output layer? It’s not specified explicitly because it depends
    on the number of classes in the training labels. The MNIST dataset has 10 classes,
    so there will be 10 nodes in the output layer. When the `predict_proba` method
    is called to get an output probability, sklearn applies a softmax over the 10
    outputs. If the model is binary, meaning the only class labels are 0 and 1, then
    there is only one output node, a logistic (sigmoid), representing the probability
    of belonging to class 1.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at the parameters we passed in to `MLPClassifier`. First, we
    explicitly state that we want to use the SGD solver. The solver is the approach
    used to modify the weights and biases during training. All the solvers use backprop
    to calculate the gradients; how we use those gradients varies. Plain vanilla SGD
    is good enough for us right now.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set a low tolerance so that we’ll train the requested number of epochs
    (`max_iter`). We also turn off Nesterov momentum (a variant of standard momentum)
    and early stopping (generally useful but not desired here).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The initial learning rate is set to the default value of 0.001, as is the value
    of standard momentum, 0.9\. The number of epochs is arbitrarily set to 200 (the
    default), but we’ll explore this more in the experiments that follow. Please indulge
    your curiosity at all times and see what changing these values does to things.
    For consistency’s sake, we’ll use these values as defaults throughout unless they
    are the parameters we want to experiment with.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: The other helper function in [Listing 10-1](ch10.xhtml#ch10lis1) is `run`. This
    function will train and test the classifier object it’s passed using the standard
    sklearn `fit` and `score` methods. It also does some other things that we have
    not seen before.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: In particular, after timing how long training takes, we extract the final training
    loss value, the network weights, and the network biases from the `MLPClassifier`
    object so that we can return them. The `MLPClassifier` class minimizes the log-loss,
    which we described in [Chapter 9](ch09.xhtml#ch09). We store the log-loss in the
    `loss_` member variable. The size of this value, and how it changes during training,
    gives us a clue as to how well the network is learning. In general, the smaller
    the log-loss, the better the network is doing. As you explore neural networks
    more and more, you’ll begin to develop intuition for what a good loss value is
    and whether the training process is learning quickly or not by how rapidly the
    loss changes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The weights and biases are stored in the `coefs_` and `intercepts_` member variables.
    These are lists of NumPy matrices (weights) and vectors (biases), respectively.
    Here we use them to calculate the number of parameters in the network by summing
    the number of elements in each matrix and vector. This is what the two small loops
    in the `run` function do. Finally, we return all this information, including the
    score against the test set, to the `main` function. The `main` function is shown
    in [Listing 10-2](ch10.xhtml#ch10lis2).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 权重和偏置存储在 `coefs_` 和 `intercepts_` 成员变量中。这些分别是 NumPy 矩阵（权重）和向量（偏置）的列表。在这里，我们使用它们通过求和每个矩阵和向量中的元素数量来计算网络中的参数数量。这正是
    `run` 函数中两个小循环所做的。最后，我们将包括对测试集的评分在内的所有信息返回给 `main` 函数。`main` 函数见 [清单 10-2](ch10.xhtml#ch10lis2)。
- en: 'def main():'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'def main():'
- en: x_train = np.load("mnist_train_vectors.npy").astype("float64")/256.0
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: x_train = np.load("mnist_train_vectors.npy").astype("float64")/256.0
- en: y_train = np.load("mnist_train_labels.npy")
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: y_train = np.load("mnist_train_labels.npy")
- en: x_test = np.load("mnist_test_vectors.npy").astype("float64")/256.0
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: x_test = np.load("mnist_test_vectors.npy").astype("float64")/256.0
- en: y_test = np.load("mnist_test_labels.npy")
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: y_test = np.load("mnist_test_labels.npy")
- en: N = 1000
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: N = 1000
- en: x_train = x_train[:N]
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: x_train = x_train[:N]
- en: y_train = y_train[:N]
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: y_train = y_train[:N]
- en: x_test  = x_test[:N]
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: x_test = x_test[:N]
- en: y_test  = y_test[:N]
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: y_test = y_test[:N]
- en: layers = [
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: layers = [
- en: (1,), (500,), (800,), (1000,), (2000,), (3000,),
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: (1,), (500,), (800,), (1000,), (2000,), (3000,),
- en: (1000,500), (3000,1500),
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: (1000,500), (3000,1500),
- en: (2,2,2), (1000,500,250), (2000,1000,500),
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: (2,2,2), (1000,500,250), (2000,1000,500),
- en: ']'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: 'for act in ["relu", "logistic", "tanh"]:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'for act in ["relu", "logistic", "tanh"]:'
- en: print("%s:" % act)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: print("%s:" % act)
- en: 'for layer in layers:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'for layer in layers:'
- en: scores = []
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: scores = []
- en: loss = []
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: loss = []
- en: tm = []
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: tm = []
- en: 'for i in range(10):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: s,l,params,e = run(x_train, y_train, x_test, y_test,
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: s,l,params,e = run(x_train, y_train, x_test, y_test,
- en: nn(layer,act))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: nn(layer,act))
- en: scores.append(s)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: scores.append(s)
- en: loss.append(l)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: loss.append(l)
- en: tm.append(e)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: tm.append(e)
- en: s = np.array(scores)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: s = np.array(scores)
- en: l = np.array(loss)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: l = np.array(loss)
- en: t = np.array(tm)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: t = np.array(tm)
- en: n = np.sqrt(s.shape[0])
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: n = np.sqrt(s.shape[0])
- en: 'print("    layers: %14s, score= %0.4f +/- %0.4f,'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("    layers: %14s, score= %0.4f +/- %0.4f,'
- en: loss = %0.4f +/- %0.4f (params = %6d, time = %0.2f s)" % \
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: loss = %0.4f +/- %0.4f (params = %6d, time = %0.2f s)" % \
- en: (str(layer), s.mean(), s.std()/n, l.mean(),
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (str(layer), s.mean(), s.std()/n, l.mean(),
- en: l.std()/n, params, t.mean()))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: l.std()/n, params, t.mean()))
- en: '*Listing 10-2: The `main` function for experimenting with the architecture
    and activation function. See* mnist_nn_experiments.py.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-2：用于实验架构和激活函数的 `main` 函数。参见* mnist_nn_experiments.py。'
- en: We first load the MNIST train and test data stored in `x_train` (samples) and
    `y_train` (labels), and `x_test` and `y_test`. Notice that we divide the samples
    by 256.0 to make them floats in the range [0,1). This normalization is the only
    preprocessing we’ll do in this chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先加载存储在 `x_train`（样本）和 `y_train`（标签）、`x_test` 和 `y_test` 中的 MNIST 训练和测试数据。请注意，我们将样本除以
    256.0，使其转换为范围 [0,1) 内的浮点数。这是本章唯一的预处理步骤。
- en: As the full training set has 60,000 samples and we want to run many training
    sessions, we’ll use only the first 1,000 samples for training. We’ll likewise
    keep the first 1,000 test samples. Our goal in this chapter is to see relative
    differences as we change parameters, not to build the best model possible, so
    we’ll sacrifice the quality of the model to get results in a reasonable timeframe.
    With 1,000 training samples, we’ll have only 100 instances of each digit type,
    on average. We’ll vary the number of training samples for specific experiments.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于完整的训练集包含 60,000 个样本，而我们想进行多次训练，所以我们只使用前 1,000 个样本进行训练。同样，我们将保留前 1,000 个测试样本。本章的目标是通过改变参数来观察相对差异，而不是构建最佳的模型，因此我们会牺牲模型质量，以便在合理的时间内得到结果。使用
    1,000 个训练样本时，我们平均每个数字类型只有 100 个实例。对于特定实验，我们会改变训练样本的数量。
- en: The `layers` list holds the different architectures we’ll explore. Ultimately,
    we’ll pass these values to the `hidden_layer_sizes` argument of the `MLPClassifier`
    constructor. Notice that we’ll examine architectures ranging from a single hidden
    layer with a single node to three hidden layers with up to 2,000 nodes per layer.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`layers` 列表包含了我们将要探索的不同架构。最终，我们会将这些值传递给 `MLPClassifier` 构造函数的 `hidden_layer_sizes`
    参数。请注意，我们将会检查从一个包含单个节点的单一隐藏层到三个隐藏层（每个隐藏层最多有 2,000 个节点）的架构。'
- en: 'The `main` loop runs over three activation function types: rectified linear
    unit, logistic (sigmoid) unit, and the hyperbolic tangent. We’ll train a model
    for each combination of activation function type and architecture (`layers`).
    Moreover, since we know neural network training is stochastic, we’ll train 10
    models for each combination and report the mean and standard error of the mean,
    so we’re not thrown off by a particularly bad model that isn’t representative.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '**Note** *When you run the code in the experiments that follow, you’ll likely
    generate warning messages from sklearn like this one:*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*The messages are sklearn’s way of telling you that the number of training
    iterations completed before sklearn felt that the network had converged to a good
    set of weights.The warnings are safe to ignore and can be disabled completely
    by adding `-W ignore` to the command line when you run the code; for example:*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Results
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Running this code takes several hours to complete, and produces output with
    lines that look something like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This tells us that using a ReLU activation function, and an architecture with
    two hidden layers of 3,000 and 1,500 nodes each, the models had an average score
    of 88.2 percent and an average final training loss of 0.21 (remember that lower
    is better). It also tells us that the neural network had a total of nearly 6.9
    million parameters and took, on average, a little more than four minutes to train.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 10-2](ch10.xhtml#ch10tab2) summarizes the scores for the various network
    architectures and activation function types.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-2:** Mean Score (mean ± SE) on the MNIST Test Set as a Function
    of the Architecture and Activation Function Type'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '| Architecture | ReLU | Tanh | Logistic (sigmoid) |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.2066 ± 0.0046 | 0.2192 ± 0.0047 | 0.1718 ± 0.0118 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| 500 | 0.8616 ± 0.0014 | 0.8576 ± 0.0011 | 0.6645 ± 0.0029 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| 800 | 0.8669 ± 0.0014 | 0.8612 ± 0.0011 | 0.6841 ± 0.0030 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: '| 1000 | 0.8670 ± 0.001 | 0.8592 ± 0.0014 | 0.6874 ± 0.0028 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| 2000 | 0.8682 ± 0.0008 | 0.8630 ± 0.0012 | 0.7092 ± 0.0029 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| 3000 | 0.8691 ± 0.0005 | 0.8652 ± 0.0011 | 0.7088 ± 0.0024 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '| 1000; 500 | 0.8779 ± 0.0011 | 0.8720 ± 0.0011 | 0.1184 ± 0.0033 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| 3000; 1500 | 0.8822 ± 0.0007 | 0.8758 ± 0.0009 | 0.1221 ± 0.0001 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| 1000; 500; 250 | 0.8829 ± 0.0011 | 0.8746 ± 0.0012 | 0.1220 ± 0.0000 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| 2000; 1000; 500 | 0.8850 ± 0.0007 | 0.8771 ± 0.0010 | 0.1220 ± 0.0000 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: In each case, we show the mean score on the reduced test set averaged over the
    10 models trained (plus or minus the standard error of the mean). There is quite
    a bit of information in this table, so let’s look at it carefully.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the activation type, we immediately see something is off. The
    results for the logistic activation function show improved scores as the single
    hidden layer gets larger, something we might expect to see, but when we move to
    more than one hidden layer, the network fails to train. We know that it was unable
    to train because the scores on the test set are abysmal. If you check the output,
    you’ll see that the loss values do not go down. If the loss value does not decrease
    while training proceeds, something is wrong.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下激活类型，我们会立刻发现某些地方不对。逻辑激活函数的结果显示，随着单隐藏层的增大，得分有所提高，这是我们可能预期的，但当我们增加隐藏层数量超过一个时，网络无法训练。我们知道它无法训练，因为测试集上的得分非常糟糕。如果你检查输出，你会看到损失值并没有下降。如果在训练过程中，损失值没有减少，那么就说明出现了问题。
- en: It’s not immediately evident why training failed for the logistic activation
    function case. One possibility is a bug in sklearn, but this is rather unlikely
    given how widely used the toolkit is. The most likely culprit has to do with network
    initialization. The sklearn toolkit uses the standard, commonly used initialization
    schemes we discussed in [Chapter 8](ch08.xhtml#ch08). But these are tailored for
    ReLU and tanh activation functions and may not be performing well for the logistic
    case.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么逻辑激活函数的训练失败并不立即显现。一个可能性是sklearn中的错误，但考虑到该工具包的广泛使用，这种情况不太可能。最可能的原因与网络初始化有关。sklearn工具包使用了我们在[第8章](ch08.xhtml#ch08)中讨论过的标准、常用的初始化方案。但这些方案是针对ReLU和tanh激活函数设计的，可能不适合逻辑激活函数。
- en: For our purposes, we can view this failure as a glaring sign that the logistic
    activation function is not a good one to use for the hidden layers. Sadly, this
    is precisely the activation function that was widely used throughout much of the
    early history of neural networks, so we were shooting ourselves in the foot from
    the beginning. No wonder it took so long for neural networks to finally find their
    proper place! From here on out, we’ll ignore the logistic activation function
    results.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们可以将这个失败视为一个显著的信号，表明逻辑激活函数并不是适合用于隐藏层的激活函数。可悲的是，这正是神经网络早期历史中广泛使用的激活函数，所以我们从一开始就给自己设置了障碍。难怪神经网络要花这么长时间才最终找到了适合的位置！从现在开始，我们将忽略逻辑激活函数的结果。
- en: 'Consider again the scores for the single hidden layer networks (see [Table
    10-2](ch10.xhtml#ch10tab2), rows 1–6). For the ReLU and tanh activation functions,
    we see a steady improvement in the performance of the networks. Also, note that
    in each case, the ReLU activation function slightly outperforms tanh for the same
    number of nodes in the hidden layer, though these differences are likely not statistically
    significant with only 10 models per architecture. Still, it follows a general
    observation prevalent in the community: ReLU is preferred to tanh.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑单隐藏层网络的得分（见[表10-2](ch10.xhtml#ch10tab2)，第1–6行）。对于ReLU和tanh激活函数，我们看到网络性能有了稳定的改善。此外，注意到在每种情况下，对于相同数量的隐藏层节点，ReLU激活函数的表现稍微优于tanh，尽管这类差异在每种架构只有10个模型的情况下，可能在统计上并不显著。尽管如此，这符合一个在社区中普遍存在的观察：ReLU比tanh更受偏爱。
- en: If we look at the remaining rows of [Table 10-2](ch10.xhtml#ch10tab2), we see
    that adding a second and even third hidden layer continues to improve the test
    scores but with diminishing returns. This is also a widely experienced phenomenon
    that we should look at a little more closely. In particular, we should consider
    the number of parameters in the models of [Table 10-2](ch10.xhtml#ch10tab2). This
    makes the comparison a bit unfair. If, instead, we train models that have closely
    matched numbers of parameters, then we can more fairly compare the performance
    of the models. Any differences in performance we see can be plausibly attributed
    to the number of layers used since the overall number of parameters will be virtually
    the same.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下[表10-2](ch10.xhtml#ch10tab2)的其余行，我们会看到，添加第二个甚至第三个隐藏层继续改善测试得分，但随着层数增加，效果递减。这也是一个广泛经历的现象，我们应该更仔细地研究一下。特别是，我们应该考虑[表10-2](ch10.xhtml#ch10tab2)中模型的参数数量。这使得比较变得有些不公平。如果我们训练的模型具有大致相同数量的参数，那么我们就能更公平地比较模型的表现。我们所看到的任何性能差异都可以合理地归因于使用的层数，因为整体参数数量几乎是一样的。
- en: By modifying the layers array in [Listing 10-2](ch10.xhtml#ch10lis2), we can
    train multiple versions of the architectures shown in [Table 10-3](ch10.xhtml#ch10tab3).
    The number of nodes per layer was selected to parallel the overall number of parameters
    in the models.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-3:** Model Architectures Tested to Produce [Figure 10-1](ch10.xhtml#ch10fig1)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '| Architecture | Number of parameters |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| 1000 | 795,010 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| 2000 | 1,590,010 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| 4000 | 3,180,010 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| 8000 | 6,360,010 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| 700; 350 | 798,360 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| 1150; 575 | 1,570,335 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| 1850; 925 | 3,173,685 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| 2850; 1425 | 6,314,185 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| 660; 330; 165 | 792,505 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| 1080; 540; 270 | 1,580,320 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| 1714; 857; 429 | 3,187,627 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| 2620; 1310; 655 | 6,355,475 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: Where did the magic numbers in [Table 10-3](ch10.xhtml#ch10tab3) come from?
    We first picked the single-layer sizes we wanted to test. We then determined the
    number of parameters in models with those architectures. Next, we crafted two-layer
    architectures using the rules of thumb from [Chapter 8](ch08.xhtml#ch08) so that
    the number of parameters in those models will be close to the corresponding number
    of parameters in the single-layer models. Finally, we repeated the process for
    three-layer models. Doing things this way lets us compare the performance of the
    models for very similar numbers of parameters. In essence, we’re fixing the number
    of parameters in the model and altering only the way they interact with each other.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Training models as we did in [Listing 10-2](ch10.xhtml#ch10lis2), but this time
    averaging 25 models instead of just 10, gives us [Figure 10-1](ch10.xhtml#ch10fig1).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig01.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Scores (mean ± E) on the MNIST test set for the architectures
    of [Table 10-3](ch10.xhtml#ch10tab3) as a function of the number of parameters
    in the network*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Let’s parse [Figure 10-1](ch10.xhtml#ch10fig1). First, note that the x-axis,
    the number of parameters in the model, is given in millions. Second, we can compare
    the three lines going vertically as those models all have similar numbers of parameters.
    The legend tells us which plot represents models with one, two, or three hidden
    layers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the leftmost points, representing the smallest models in each case,
    we see that changing from a single layer to two layers gives us a jump in model
    performance. Also, moving from two layers to three results in another, smaller
    rise. This repeats for all the layer sizes moving left to right. We’ll address
    the dip in performance between the two largest models for single- and double-layer
    architectures in a bit. Fixing the number of parameters but increasing the depth
    of the network (number of layers) results in better performance. We might be tempted
    here to say, “Go deep, not wide,” but there will be cases where this doesn’t work.
    Still, it’s worth remembering: more layers can help, not just a wider layer with
    more nodes.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: What about the dip for the largest models in the one- and two-layer cases? These
    are the rightmost points of [Figure 10-1](ch10.xhtml#ch10fig1). Recall, the models
    used to make the plot were trained with only 1,000 samples each. For the largest
    models, there likely wasn’t enough data to adequately train such a wide model.
    If we were to increase the number of training samples, which we can do because
    we have 60,000 to choose from for MNIST, we might see the dip go away. I’ll leave
    this as an exercise for the reader.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Batch Size
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s now turn our attention to how batch size affects training. Recall that
    here *batch size* means minibatch size, a subset of the full training set used
    in the forward pass to calculate the average loss over the minibatch. From this
    loss, we use backprop to update the weights and biases. Processing a single minibatch,
    then, results in a single gradient-descent step—a single update to the parameters
    of the network.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: We’ll train a fixed-size subset of MNIST for a set number of epochs with different
    minibatch sizes to see how that affects the final test scores. Before we do that,
    however, we need to understand, for epochs and minibatches, the process sklearn
    uses to train a neural network.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look briefly at the actual sklearn source code for the `MLPClassifier`
    class, in the `_fit_stochastic` method, found at [https://github.com/scikit-learn/scikit-learn/blob/7389dba/sklearn/neural_network/multilayer_perceptron.py](https://github.com/scikit-learn/scikit-learn/blob/7389dba/sklearn/neural_network/multilayer_perceptron.py).
    Understanding that this method is an internal one and might change from version
    to version, we see code that looks like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are two `for` loops, the first over the number of epochs (`max_iter`),
    and the second over the number of minibatches present in the training data. The
    `gen_batches` function returns minibatches from the training set. In reality,
    it returns slice indices with `X[batch_slice]` returning the actual training samples,
    but the effect is the same. The calls to `_backprop` and `update_params` complete
    the gradient descent step for the current minibatch.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: An *epoch* is a full pass through the minibatches present in the training set.
    The minibatches themselves are groupings of the training data so that looping
    over the minibatches uses all the samples in the training set once. If the number
    of training samples is not an integer multiple of the minibatch size, the final
    minibatch will be smaller than expected, but that will not affect training in
    the long run.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: We can view this graphically as in [Figure 10-2](ch10.xhtml#ch10fig2), where
    we see how an epoch is built from the minibatches in the training set. In [Figure
    10-2](ch10.xhtml#ch10fig2), the entire training set is represented as the epoch
    with *n* samples. A minibatch has *m* samples, as indicated. The last minibatch
    is smaller than the rest to indicate that the *n*/*m* might not be an integer.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig02.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: The relationship between epochs (*n*), minibatches (*m*), and
    samples* {x[*0*],x[*1*], …,x[*n-1*]}'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：周期数（*n*）、小批量（*m*）和样本（{x[*0*],x[*1*], …,x[*n-1*]}）之间的关系*'
- en: '[Figure 10-2](ch10.xhtml#ch10fig2) also implies that the order of the samples
    in the training set is essential, which is why we shuffled the datasets when we
    made them. The sklearn toolkit will also rearrange the samples after every epoch
    during training if desired. As long as a minibatch is, statistically, a random
    sample from the training set as a whole, things should be okay. If the minibatch
    is not, then it might give a biased view of the gradient direction during backprop.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-2](ch10.xhtml#ch10fig2) 也意味着训练集中的样本顺序至关重要，这就是我们在创建数据集时打乱样本顺序的原因。如果需要，sklearn
    工具包还会在每个训练周期后重新排列样本。只要小批量在统计上是从整个训练集中随机选取的样本，通常情况应该没问题。如果小批量不是这样，那么在反向传播过程中它可能会给出一个有偏的梯度方向。'
- en: Our minibatch experiment will fix the number of MNIST training samples at 16,384
    while we vary the minibatch size. We’ll also fix the number of epochs at 100\.
    The scores we report are the mean and standard error for five different runs of
    the same model, each with a different random initialization. The `MLPClassifier`
    object is therefore instantiated via
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小批量实验将固定 MNIST 训练样本数为 16,384，同时变化小批量大小。我们还将固定训练周期数为 100。我们报告的分数是五次不同运行的平均值和标准误差，每次运行都有不同的随机初始化。因此，`MLPClassifier`
    对象是通过以下方式实例化的：
- en: '[PRE5]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code indicates that all of the models have two hidden layers of 1,000 and
    500 nodes, respectively, making the architecture of the entire network 784-1000-500-10
    when adding in the nodes of the input and output layers. The only parameter that
    varies when defining a network is the `batch_size`. We’ll use the batch sizes
    in [Table 10-4](ch10.xhtml#ch10tab4) along with the number of gradient descent
    steps taken for each epoch (see [Figure 10-2](ch10.xhtml#ch10fig2)).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码表明，所有的模型都有两个隐藏层，分别包含 1,000 和 500 个节点，整体网络架构为 784-1000-500-10，包含输入层和输出层的节点数。当定义网络时，唯一变化的参数是
    `batch_size`。我们将使用 [表 10-4](ch10.xhtml#ch10tab4) 中的小批量大小，并结合每个周期的梯度下降步数（见 [图 10-2](ch10.xhtml#ch10fig2)）。
- en: '**Table 10-4:** Minibatch Sizes and the Corresponding Number of Gradient Descent
    Steps per Epoch'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 10-4：** 小批量大小与每个周期梯度下降步数的对应关系'
- en: '| Minibatch size | SGD steps per epoch |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 小批量大小 | 每个周期的 SGD 步数 |'
- en: '| --- | --- |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2 | 8,192 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 8,192 |'
- en: '| 4 | 4,096 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 4,096 |'
- en: '| 8 | 2,048 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 2,048 |'
- en: '| 16 | 1,024 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 16 | 1,024 |'
- en: '| 32 | 512 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 32 | 512 |'
- en: '| 64 | 256 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 64 | 256 |'
- en: '| 128 | 128 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 128 | 128 |'
- en: '| 256 | 64 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 256 | 64 |'
- en: '| 512 | 32 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 512 | 32 |'
- en: '| 1,024 | 16 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 1,024 | 16 |'
- en: '| 2,048 | 8 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 2,048 | 8 |'
- en: '| 4,096 | 4 |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 4,096 | 4 |'
- en: '| 8,192 | 2 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 8,192 | 2 |'
- en: '| 16,384 | 1 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 16,384 | 1 |'
- en: When the minibatch size is 2, over 8,000 gradient descent steps will be taken
    per epoch, but when the minibatch size is 8,192, only 2 gradient descent steps
    are taken. Fixing the number of epochs should favor a smaller minibatch size since
    there will be correspondingly more gradient descent steps, implying more opportunity
    to move toward the optimal set of network parameters.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当小批量大小为 2 时，每个周期将进行超过 8,000 次梯度下降步骤，但当小批量大小为 8,192 时，仅进行 2 次梯度下降步骤。固定训练周期数应该有利于选择较小的小批量大小，因为相应地会有更多的梯度下降步骤，这意味着有更多机会朝着最优的网络参数集前进。
- en: '[Figure 10-3](ch10.xhtml#ch10fig3) plots the mean score as a function of the
    minibatch size. The code that generated the data for the plot is in the *mnist_nn_experiments
    _batch_size.py* file. The plotting code itself is in *mnist_nn_experiments_batch
    _size_plot.py*. The curve that concerns us for the moment is the one using circles.
    We’ll explain the square symbol curve shortly.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-3](ch10.xhtml#ch10fig3) 显示了小批量大小对平均分数的影响。生成该图的数据代码位于 *mnist_nn_experiments_batch_size.py*
    文件中。绘图代码本身位于 *mnist_nn_experiments_batch_size_plot.py* 文件中。此刻我们关注的曲线是使用圆圈标记的那条。我们稍后会解释使用方形符号的曲线。'
- en: '![image](Images/10fig03.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/10fig03.jpg)'
- en: '*Figure 10-3: Average score on the MNIST test set as a function of minibatch
    size (mean* ± *SE) for a fixed number of epochs (100) regardless of the minibatch
    size (circles) or a fixed number of minibatches (squares)*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：固定周期数（100）下，MNIST 测试集上平均分数与小批量大小（均值* ± *标准误差）之间的关系，无论小批量大小（圆圈）还是固定小批量数（方形）*'
- en: 'Here we’ve fixed the number of epochs at 100, so by varying the minibatch size,
    we vary the number of gradient steps: the larger the minibatch, the *fewer* gradient
    steps we take. Because the minibatch is larger, the steps themselves are based
    on a more faithful representation of the actual gradient direction; however, the
    number of steps is reduced because there are fewer minibatches per epoch, leading
    to poorer convergence: we are not reaching a good minimum of the loss function.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将迭代次数固定为100，因此通过改变小批量大小，我们改变了梯度步骤的数量：小批量越大，梯度步骤就越少。由于小批量更大，步骤本身基于对实际梯度方向的更真实表示；然而，由于每个迭代中的小批量较少，步骤数量减少，导致收敛变差：我们没有达到损失函数的良好最小值。
- en: A more “fair” test might be to see what happens when we adjust the number of
    epochs so that the number of *minibatches* examined is constant regardless of
    the minibatch size. One way to do that is to note that the number of minibatches
    per epoch is *n*/*m*, where *n* is the number of training samples, and *m* is
    the number of minibatches. If we call the overall number of minibatches we want
    to run *M*, then, to hold it fixed, we need to set the number of *epochs* to
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更“公平”的测试可能是，观察当我们调整迭代次数，使得检查的小批量数量在任何情况下都是恒定时会发生什么。实现这一点的一种方法是注意到每个迭代中的小批量数量是
    *n*/*m*，其中 *n* 是训练样本数，*m* 是小批量数量。如果我们将希望执行的总体小批量数量称为 *M*，那么为了保持其恒定，我们需要设置迭代次数为
- en: '![image](Images/235equ01.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/235equ01.jpg)'
- en: so that regardless of *m*, we perform a total of *M* gradient descent steps
    during training.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，无论 *m* 为何，我们在训练过程中都会执行 *M* 次梯度下降步骤。
- en: Let’s keep the same set of minibatches but alter the number of epochs according
    to the preceding equation. We need to select *M*, the overall number of minibatches
    (gradient descent steps). Let’s set it to *M* = 8,192 so that the number of epochs
    is an integer in each case. When the minibatch size is 2, we use one epoch to
    get 8,192 minibatches. And when the minibatch size is 16,384 (*n* is still also
    16,384 samples), we get 8,192 epochs. If we do this, we get a completely different
    set of results, the square symbol curve in [Figure 10-3](ch10.xhtml#ch10fig3),
    where we see that the mean score is pretty much a constant representing the constant
    number of gradient descent updates performed during training. When the minibatch
    size is small, corresponding to points near 0 in [Figure 10-3](ch10.xhtml#ch10fig3),
    we do see a degradation in performance, but after a certain minibatch size, the
    performance levels off, reflecting the constant number of gradient descent updates
    combined with a reasonable estimate of the true gradient from using a large enough
    minibatch.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持相同的小批量集合，但根据前面的公式调整迭代次数。我们需要选择 *M*，即总体的小批量数量（梯度下降步骤）。我们将其设置为 *M* = 8,192，以便每种情况下迭代次数都是整数。当小批量大小为2时，我们使用一个迭代来获取8,192个小批量。而当小批量大小为16,384（*n*
    仍然是16,384个样本）时，我们得到8,192个迭代。如果我们这样做，我们会得到完全不同的结果，正如在[图10-3](ch10.xhtml#ch10fig3)中看到的方形符号曲线一样，我们看到平均得分几乎是一个常数，代表了训练过程中执行的恒定梯度下降更新次数。当小批量大小较小时，对应于[图10-3](ch10.xhtml#ch10fig3)中的接近0的点，我们确实看到性能下降，但在达到一定的小批量大小后，性能趋于平稳，反映出梯度下降更新的恒定次数，并且通过使用足够大的小批量，合理地估计了真实的梯度。
- en: For the set of base neural network parameters, specifically for a fixed learning
    rate, fixing the number of epochs results in reduced performance because of the
    design of sklearn. Fixing the number of minibatches examined results in mainly
    constant performance.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一组基础神经网络参数，特别是对于固定学习率，固定迭代次数会导致性能下降，这是由于 sklearn 的设计所致。固定检查的小批量数量会导致性能保持基本恒定。
- en: Base Learning Rate
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础学习率
- en: 'In [Chapter 9](ch09.xhtml#ch09), we introduced the basic equation for updating
    the weights of a neural network during training:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.xhtml#ch09)中，我们介绍了训练过程中更新神经网络权重的基本公式：
- en: '*w* ← *w* – *η*Δ*w*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*w* ← *w* – *η*Δ*w*'
- en: Here *η* (eta) is the learning rate, the parameter that controls the step size
    based on the gradient value, *Δw*. In sklearn, *η* is specified via the `learning`
    `_rate_init` parameter. During training, the learning rate is often reduced, so
    that the step sizes get smaller the closer we get to the training minimum (hopefully!).
    For our experiments here, however, we’re using a constant learning rate, so whatever
    value we set `learning_rate_init` to persists throughout the entire training session.
    Let’s see how this value affects learning.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 *η*（希腊字母 eta）表示学习率，是基于梯度值 *Δw* 控制步长的参数。在 sklearn 中，*η* 通过 `learning` `_rate_init`
    参数指定。在训练过程中，学习率通常会降低，以便步长在接近训练最小值时逐渐变小（希望如此！）。然而，在我们的实验中，我们使用的是恒定的学习率，因此我们设置的
    `learning_rate_init` 值在整个训练过程中都保持不变。让我们看看这个值如何影响学习过程。
- en: For this experiment, we fix the minibatch size at 64 samples and the architecture
    to (1000,500), meaning two hidden layers with 1,000 and 500 nodes, respectively.
    We then look at two main effects. The first is what we get when we fix the number
    of epochs regardless of the base learning rate. In this case, we’ll always take
    a set number of gradient descent steps during training. The second case fixes
    the *product* of the base learning rate and the number of epochs. This case is
    interesting because it looks at the effect on the test score of fewer large steps
    versus many small steps. The code for these experiments is in *mnist_experiments_base_lr.py*.
    The training set is the first 20,000 MNIST samples.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们将小批量大小固定为64个样本，架构设置为（1000,500），即有两个隐藏层，分别包含1000和500个节点。接着，我们观察两个主要效果。第一个是固定训练轮次时，不考虑基础学习率的影响。在这种情况下，我们在训练期间始终进行固定数量的梯度下降步骤。第二种情况固定基础学习率与训练轮次的乘积。这种情况很有趣，因为它研究了较少的大步与更多的小步对测试成绩的影响。这些实验的代码在
    *mnist_experiments_base_lr.py* 中。训练集使用的是前20,000个MNIST样本。
- en: 'The first experiment fixes the epochs at 50 and loops over different base learning
    rates:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个实验固定训练轮次为50，并对不同的基础学习率进行循环测试：
- en: '[PRE6]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The second uses the same base learning rates but varies the number of epochs
    so that in each case the product of the base learning rate and epochs is 1.5\.
    This leads to the following number of epochs matched to the preceding base learning
    rates:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个实验使用相同的基础学习率，但调整训练轮次，使得每种情况中基础学习率与训练轮次的乘积都为1.5。这将导致以下与之前基础学习率相匹配的训练轮次数：
- en: '[PRE7]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running the two experiments takes some time. When they’re complete, we can plot
    the test score as a function of the base learning rate size. Doing this gives
    us [Figure 10-4](ch10.xhtml#ch10fig4).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这两个实验需要一些时间。完成后，我们可以将测试成绩与基础学习率大小的关系绘制成图。通过这种方式，我们得到了 [图 10-4](ch10.xhtml#ch10fig4)。
- en: '![image](Images/10fig04.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/10fig04.jpg)'
- en: '*Figure 10-4: MNIST test scores as a function of the base learning rate. The
    circles represent the fixed epochs case. The squares are the fixed product of
    the base learning rate and the epochs case.*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：MNIST 测试成绩与基础学习率的关系。圆圈代表固定训练轮次的情况。方框表示基础学习率与训练轮次乘积固定的情况。*'
- en: '[Figure 10-4](ch10.xhtml#ch10fig4) shows two plots. In the first plot, using
    circles, the number of epochs was fixed at 50\. Fixing the number of epochs fixes
    the number of gradient descent steps taken during training. We then vary the learning
    rate. The larger the learning rate, the bigger the steps we’ll take.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-4](ch10.xhtml#ch10fig4) 显示了两个图。第一个图中，使用圆圈表示，训练轮次固定为50。固定训练轮次意味着训练期间梯度下降步骤的数量固定。然后，我们调整学习率。学习率越大，步骤越大。'
- en: Imagine walking over a football field, attempting to get to the very center
    from one of the corners in a limited number of steps. If we take large steps,
    we might move over a lot of ground quickly, but we won’t be able to zero in on
    the center because we’ll keep stepping past it. If we take tiny steps, we’ll cover
    only a short distance from the corner toward the center. We might be on track,
    but since we’re allowed only a certain number steps, we can’t reach the center.
    Intuitively, we can perhaps convince ourselves that there is a sweet spot where
    the step size and the number of steps we get to take combine to get us to the
    center.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你走过一个足球场，试图从一个角落走到正中心，且步数有限。如果我们迈大步，可能很快就走过了很多地面，但我们无法精确地走到中心，因为我们会一直走过它。如果我们迈小步，从角落到中心的距离就很短。虽然我们可能在正确的轨道上，但由于步数有限，我们无法到达中心。直观上，我们或许可以说，存在一个最佳步长与步数的组合，能够让我们到达中心。
- en: We see this effect in the circle plot of [Figure 10-4](ch10.xhtml#ch10fig4).
    The leftmost point represents the case of tiny steps. We do relatively poorly
    because we haven’t traversed enough of the error space to find the minimum. Similarly,
    the rightmost point represents taking very large steps. We do poorly because we
    keep stepping past the minimum. The best score happens when the number of steps
    we get to make and the size of those steps work together to move us to the minimum.
    In the figure, this happens when the base learning rate is 0.1.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at the square symbol plot in [Figure 10-4](ch10.xhtml#ch10fig4).
    This plot comes from the scores found when the product of the base learning rate
    and the number of epochs is constant, meaning small learning rates will run for
    a large number of epochs. For the most part, the test scores are the same for
    all base learning rates except the very largest. In our walking over the football
    field thought experiment, the square symbol plot corresponds to taking a few large
    steps or very many small steps. We can imagine both approaches getting us close
    to the center of the field, at least until our step size is too large to let us
    land at the center.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Some readers might be objecting at this point. If we compare the first three
    points of both the circle and square plots in [Figure 10-4](ch10.xhtml#ch10fig4),
    we see a large gap. For the circles, the performance improves as the base learning
    rate increases. For the squares, however, the performance remains high and constant
    regardless of the base learning rate. For the circles, we trained for 50 epochs,
    always. This is a more significant number of epochs than were used for the squares
    plot for the corresponding base learning rates. This means that in the circles’
    case, we stomped around quite a bit after we got near the center of the field.
    For the case of the squares, however, we limited the number of epochs, so we stopped
    walking when we were near the center of the field, hence the improved performance.
    This implies that we need to adjust the number of epochs (gradient descent steps
    taken) to match the learning rate so that we get near to the minimum of the loss
    function quickly, without a lot of stomping around, but not so quickly that we
    are taking large steps that won’t let us converge on the minimum.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Thus far we’ve been holding the learning rate constant throughout training.
    Because of space considerations, we can’t fully explore the effect of changing
    the learning rate during training. Still, we can at least use our football field
    thought experiment to help us visualize why changing the learning rate during
    training makes sense. Recall, the network is initialized intelligently but randomly.
    This means we start somewhere on the field at random. The odds are low that this
    arbitrary position is near the center, the minimum of the error surface, so we
    do need to apply gradient descent to move us closer to the center. At first, we
    might as well take significant steps to move quickly through the field. Since
    we are following the gradient, this moves us toward the center. If we keep taking
    large steps, however, we might overshoot the center. After taking a few large
    steps, we might think it wise to start taking smaller steps, believing that we
    are now closer to our goal of reaching the center. The more we walk, the smaller
    our steps so we can get as close to the center as possible. This is why the learning
    rate is typically reduced during training.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Training Set Size
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve mentioned that the number of samples in the training set affects performance
    significantly. Let’s use the MNIST data to quantify this assertion. For this experiment,
    we’ll vary the number of training set samples while adjusting the number of epochs
    so that in each case, we take (approximately) 1,000 gradient descent steps during
    training. The code for this experiment is in *mnist_nn_experiments_samples.py*.
    In all cases, the minibatch size is 100, and the architecture of the network has
    two hidden layers of 1,000 and 500 nodes, respectively. [Figure 10-5](ch10.xhtml#ch10fig5)
    shows the results of this experiment.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig05.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5: MNIST test scores as a function of the number of training samples*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 10-5](ch10.xhtml#ch10fig5) is particularly satisfying because it shows
    exactly what we’d expect to see. If we have too little training data, we cannot
    learn to generalize well because we’re training the model with a very sparse sample
    from the parent distribution. As we add more and more training data, we’d expect
    a potentially rapid rise in the performance of the network since the training
    set is a better and better sample of the parent distribution we’re asking the
    model to learn.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 10-5](ch10.xhtml#ch10fig5) shows that increasing the training set size
    results in diminishing returns. Moving from 1,000 to 5,000 training set samples
    results in a substantial improvement in performance, but moving from 5,000 to
    even 10,000 samples gives us only a small performance boost, and further increases
    in the training set size level off at some ceiling performance. We can think of
    this level region as having reached some capacity—that the model has pretty much
    learned all it will learn from the dataset. At this point, we might think of enlarging
    the network architecture to see if we get a jump in test set scores provided we
    have enough training samples available.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: L2 Regularization
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 9](ch09.xhtml#ch09), we discussed regularization techniques that
    improve network generalization, including L2 regularization. We saw that L2 regularization,
    which adds a new term to the loss function during training, is functionally equivalent
    to weight decay and penalizes the network during training if the weights get large.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: In sklearn, the parameter controlling the strength of L2 regularization is `alpha`.
    If this parameter is 0, there is no L2 regularization, while the regularization
    increases in intensity as `alpha` increases. Let’s explore the effect of L2 regularization
    on our MNIST networks.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: For this experiment, we’ll fix the minibatch size at 64\. We’ll also set the
    momentum to 0 so that the effect we see is due to L2 regularization alone. Finally,
    we’ll use a smaller network with two hidden layers of 100 and 50 nodes each and
    a small training set of the first 3,000 MNIST samples. The code is in *mnist_nn_experiments_L2.py*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the previous experiments, in this case, we’d like to evaluate the test
    data after each training epoch so that we can watch the network learn over the
    training process. If it is learning, the error on the test set will go down as
    the number of training epochs increases. We know that sklearn will loop over all
    the minibatches in the dataset for one epoch, so we can set the number of training
    epochs to 1\. However, if we set `max_iter` to 1 and then call the `fit` method,
    the next time we call `fit`, we’ll start over with a newly initialized network.
    This won’t help us at all; we need to preserve the weights and biases between
    calls to `fit`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for us, the creators of sklearn thought ahead and added the `warm_start`
    parameter. If this parameter is set to `True`, a call to `fit` will *not* re-initialize
    the network but will use the existing weights and biases. If we set `max_iter`
    to 1 and `warm_start` to `True`, we’ll be able to watch the network learn by calling
    `score` after each epoch of training. Calling `score` gives us the accuracy on
    the test data. If we want the error, the value we need to track is 1 – `score`.
    This is the value we plot as a function of epoch. The `alpha` values we’ll plot
    are
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We’ve made these rather large compared to the default so we can see the effect.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Focusing on the test error only, the code for evaluating a single epoch is:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `fit` is called to perform one epoch of training. Then we calculate the
    error on the test set and store it in `val_err`. Setting `warm_start` to `True`
    after calling `fit` ensures that the first call to `epoch` will properly initialize
    the network, but subsequent calls will keep the weights and biases from the previous
    call.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Training then happens in a simple loop:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This loop collects the per epoch results and returns them to the `main` function,
    which itself loops over the *α* values we’re interested in.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Let’s run this code and plot `val_err`, the test error, as a function of the
    number of epochs for each `alpha`. [Figure 10-6](ch10.xhtml#ch10fig6) is the result.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig06.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: MNIST test error as a function of training epoch for different
    values of α*'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we notice in [Figure 10-6](ch10.xhtml#ch10fig6) is that any
    nonzero value for *α* produces a lower test error compared to not using L2 regularization
    at all. We can conclude that L2 regularization is helpful. The different *α* values
    all result in approximately the same test error, but larger values are slightly
    more effective and reach a lower test error sooner. Compare *α* = 0.1 to *α* =
    0.4, for example.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that larger *α* values seem noisier: the plot is thicker as the error
    jumps around more, relative to the smaller *α* values. To understand this, think
    about the total loss minimized during training. When *α* is large, we’re placing
    more importance on the L2 term relative to the network’s error over the minibatch.
    This means that when we ask the network to adjust the weights and biases during
    backprop, it’ll be more strongly affected by the magnitude of the parameters of
    the network than the training data itself. Because the network is focusing less
    on reducing the loss due to the training data, we might expect the per epoch test
    error to vary more.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Momentum
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Momentum alters the weight update during training by adding in a fraction of
    the gradient value used to update the weight in the previous minibatch. The fraction
    is specified as a multiplier on the previous gradient value, [0,1]. We covered
    momentum in [Chapter 9](ch09.xhtml#ch09).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how changing this parameter affects training. In this case, the setup
    for the experiment is simple. It’s identical to the approach used previously for
    L2 regularization, but instead of fixing the momentum parameter (*μ*) and varying
    the L2 weight (*α*), we’ll fix *α* = 0.0001 and vary *μ*. All the other parts
    remain the same: training by single epochs, the network configuration, and so
    forth. See the file *mnist_nn_experiments_momentum.py*.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll explore these momentum values:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: They range from no momentum term (*μ* = 0) to a large momentum term (*μ* = 0.99).
    Running the experiment produces [Figure 10-7](ch10.xhtml#ch10fig7).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 10-7](ch10.xhtml#ch10fig7), we see three distinct regions. The first,
    represented by no momentum or relatively small momentum values (*μ* = 0.3, *μ*
    = 0.5), shows the highest test set error. The second shows improvement with moderate
    momentum values (*μ* = 0.7, *μ* = 0.9), including the “standard” (sklearn default)
    value of 0.9\. In this case, however, a large momentum of 0.99 lowers the test
    set error from about 7.5 percent to about 6 percent. Momentum helps and should
    be used, especially with values near the standard of 0.9\. In practice, people
    seldom seem to alter the momentum much, but as this example shows, sometimes it
    makes a big difference to the results.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig07.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: MNIST test error as a function of training epoch for different
    values of μ*'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Note that we severely limited the training set to a mere 3,000 samples, about
    300 per digit, which likely made momentum matter more because the training set
    was a small and less complete of a sample of the parent distribution we want the
    model to learn. Increasing the training set size to 30,000 results in a different,
    and more typical, ordering of the plot, where a momentum of 0.9 is the best option.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Weight Initialization
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once treated rather cavalierly, the initial set of values used for the weights
    and biases of a network is now known to be extremely important. The simple experiment
    of this section shows this plainly.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: The sklearn toolkit initializes the weights and biases of a neural network by
    calling the `_init_coef` method of the `MLPClassifier` class. This method selects
    weights and biases randomly according to the Glorot algorithm we discussed in
    [Chapter 9](ch09.xhtml#ch09). This algorithm sets the weights and biases to values
    sampled uniformly from the range
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/243equ01.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: where *f*[*in*] is the number of inputs and *f*[*out*] is the number of outputs
    for the current layer being initialized. If the activation function is a sigmoid,
    *A* = 2; otherwise, *A* = 6.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: If we play a little trick, we can change the way that sklearn initializes the
    network and thereby experiment with alternative initialization schemes. The trick
    uses Python’s object-oriented programming abilities. If we make a subclass of
    `MLPClassifier`, let’s call it simply `Classifier`, we can override the `_init_coef`
    method with our own. Python also allows us to add new member variables to a class
    instance arbitrarily, which gives us all we need.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the experiment follows the format of the previous sections.
    We’ll ultimately plot the test error by epoch of the MNIST digits trained on a
    subset of the full data for different initialization approaches. The model itself
    will use the first 6,000 training samples, a minibatch size of 64, a constant
    learning rate of 0.01, a momentum of 0.9, an L2 regularization parameter of 0.2,
    and an architecture with two hidden layers of 100 and 50 nodes each. See *mnist_nn_experiments_init.py*
    for this experiment’s code.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: We’ll test four new weight initialization schemes along with the standard Glorot
    approach of sklearn. The schemes are shown in [Table 10-5](ch10.xhtml#ch10tab5).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-5:** Weight Initialization Schemes'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Equation | Description |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
- en: '| Glorot | ![Image](Images/244equ01.jpg) | sklearn default |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
- en: '| He | ![Image](Images/244equ02.jpg) | He initialization for ReLU |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: '| Xavier | ![Image](Images/244equ03.jpg) | Alternate Xavier |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: '| Uniform | 0.01(*U*(0,1)-0.5) | Classic small uniform |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '| Gaussian | 0.005*N*(0,1) | Classic small Gaussian |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: Recall that *N*(0,1) refers to a sample from a bell curve with a mean of 0 and
    a standard deviation of 1 while *U*(0,1) refers to a sample drawn uniformly from
    [0,1), meaning all values in that range are equally likely except 1.0\. Each of
    the new initialization methods sets the bias values to 0, always. However, sklearn’s
    Glorot implementation sets the bias values in the same way it sets the weights.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '**Note** *As mentioned in [Chapter 9](ch09.xhtml#ch09) , both* Xavier *and*
    Glorot *refer to the same person, Xavier Glorot. We’re differentiating here because
    the form we’re calling* Xavier *is referred to as such in other machine learning
    toolkits like Caffe, and the equation used is different from the equation used
    in the original paper.*'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'This all sounds nice and neat, but how to implement it in code? First, we define
    a new Python class, `Classifier`, which is a subclass of `MLPClassifier`. As a
    subclass, the new class immediately inherits all the functionality of the superclass
    (`MLPClassifier`) while allowing us the freedom to override any of the superclass
    methods with our own implementation. We simply need to define our own version
    of `_init_coef` with the same arguments and return values. In code, it looks like
    this:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The initialization we perform depends on the value of `init_scheme`. This is
    a new member variable that we use to select the initialization method (see [Table
    10-6](ch10.xhtml#ch10tab6)).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-6:** Initialization Scheme and `init_scheme` Value'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '| Value | Initialization method |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '| 0 | sklearn default |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: '| 1 | Classic small uniform |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
- en: '| 2 | Classic small Gaussian |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '| 3 | He initialization |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
- en: '| 4 | Alternate Xavier |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
- en: We set the variable immediately after creating the `Classifier` object.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that training a network more than once results in slightly different
    performance because of the way the network is initialized. Therefore, training
    a single network for each initialization type will likely lead to a wrong view
    of how well the initialization performs because we might hit a bad set of initial
    weights and biases. To mitigate this, we need to train multiple versions of the
    network and report the average performance. Since we want to plot the test error
    as a function of the training epoch, we need to track the test error at each epoch
    for each training of each initialization scheme. This suggests a three-dimensional
    array:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have `trainings` trainings of each initialization type (`init_types`) for
    a maximum of `epochs` epochs.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'With all of this in place, the generation and storage of the actual experiment
    output is straightforward, if rather slow, taking the better part of a day to
    run:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here `nn` is the classifier instance to train, `init_scheme` sets the initialization
    scheme to use, and `run` is the function we defined earlier to train and test
    the network incrementally.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: If we set the number of training sessions to 10, the number of epochs to 4,000,
    and plot the mean test error per epoch, we get [Figure 10-8](ch10.xhtml#ch10fig8).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig08.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: MNIST test error as a function of training epoch for different
    weight initialization methods (mean over 10 training runs)*'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: Let’s understand what the figure is showing us. The five initialization approaches
    are marked, each pointing to one of the five curves in the figure. The curves
    themselves are familiar to us by now; they show the test set error as a function
    of the training epoch. In this case, the value plotted for each curve is the average
    over 10 training runs of the same network architecture initialized with the same
    approach but different random values.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: We immediately see two distinct groups of results. On the top, we have the test
    error for the classic initialization approaches using small uniform or normally
    distributed values (Gaussian). On the bottom, we have the results for the more
    principled initialization in current use. Even this basic experiment shows the
    effectiveness of modern initialization approaches quite clearly. Recall, the classic
    approaches were part of the reason neural networks had a bad name a few decades
    ago. Networks were finicky and difficult to train in large part because of improper
    initialization.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the bottom set of results, we see that for this experiment, there
    is little difference between the sklearn default initialization, which we are
    calling *Glorot*, and the initialization approach of He. The two plots are virtually
    identical. The plot labeled *Xavier* is slightly worse at first , but toward the
    end of our training runs matches the other two. Sklearn is using a good initialization
    strategy.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: 'The plot also shows us something else. For the classic initialization approaches,
    we see the test set error level off and remain more or less constant. For the
    modern initialization approaches, we observe the test error increase slightly
    with the training epoch. This is particularly true for the Glorot and He methods.
    This increase is a telltale sign of overfitting: as we keep training, the model
    stops learning general features of the parent distribution and starts to focus
    on specific features of the training set. We didn’t plot the training set error,
    but it would be going down even as the test set error starts to rise. The lowest
    test set error is at about 1,200 epochs. Ideally, this would be where we stop
    training because we have the most reliable evidence that the model is in a good
    place to correctly predict new, unseen inputs. Further training tends to degrade
    model generalization.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Why did the increase in the test error happen? The likely cause of this effect
    is too small of a training set, only 6,000 samples. Also, the model architecture
    is not very large, with only 100 and 50 nodes in the hidden layers.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: This section dramatically demonstrates the benefit of using current, state-of-the-art
    network initialization. When we explore convolutional neural networks in [Chapter
    12](ch12.xhtml#ch12), we’ll use these approaches exclusively.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Feature Ordering
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll end our MNIST experiments with a bit of fun that we’ll return to again
    when we’re exploring convolutional neural networks. All of the experiments so
    far use the MNIST digits as a vector made by laying the rows of the digit images
    end to end. When we do this, we know that the elements of the vector are related
    to each other in a way that will reconstruct the digit should we take the vector
    and reshape it into a 28 × 28 element array. This means, except for the end of
    one row and the beginning of the next, that the pixels in the row are still part
    of the digit—the spatial relationship of the components of the image is preserved.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: However, if we scramble the pixels of the image, but always scramble the pixels
    in the same way, we’ll destroy the local spatial relationship between the pixels.
    This local relationship is what we use when we look at the image to decide what
    digit it represents. We look for the top part of a 5 to be a straight line segment
    and the bottom portion to curve on the right side, and so forth.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Look at [Figure 7-3](ch07.xhtml#ch7fig3). The figure shows MNIST digit images
    on the top row and what the same digit images look like after scrambling (bottom).
    In [Chapter 7](ch07.xhtml#ch07), we showed that this scrambling does not affect
    the accuracy of classic machine learning models; the models consider the inputs
    holistically, not by local spatial relationships as we do. Is this true for neural
    networks as well? Also, if true, will the network learn as quickly with the scrambled
    inputs as it does with the original images? Let’s find out.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: The code for this experiment is found in *mnist_nn_experiments_scrambled .py*,
    where we simply define our now expected neural network model
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: and train it on the first 6,000 MNIST digit samples—first as usual, and then
    using the scrambled versions. We compute the test set error as a function of the
    epoch and average the results over 10 runs before plotting. The result is [Figure
    10-9](ch10.xhtml#ch10fig9).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/10fig09.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: MNIST test error as a function of training epoch for scrambled
    and unscrambled digits*'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: In the figure, we see the answer to our earlier questions. First, yes, traditional
    neural networks do interpret their input vectors holistically, like the classic
    models. Second, yes, the network learns just as rapidly with the scrambled digits
    as it does with the unscrambled ones. The difference between the scrambled and
    unscrambled curves in [Figure 10-9](ch10.xhtml#ch10fig9) is not statistically
    significant.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: These results indicate that (traditional) neural networks “understand” their
    inputs in their entirety and do not look for local spatial relationships. We’ll
    see a different outcome to this experiment when we work with convolutional neural
    networks ([Chapter 12](ch12.xhtml#ch12)). It’s precisely this lack of spatial
    awareness (assuming images as inputs) that limited neural networks for so long
    and led to the development of convolutional neural networks, which are spatially
    aware.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we explored the concepts developed in [Chapters 8](ch08.xhtml#ch08)
    and [9](ch09.xhtml#ch09) via experiments with the MNIST dataset. By varying key
    parameters associated with the network architecture and gradient descent learning
    process, we increased our intuition as to how the parameters influence the overall
    performance of the network. Space considerations prevented us from thoroughly
    exploring all the `MLPClassifier` options, so I encourage you to experiment more
    on your own. In particular, experiment with using the different solvers, Nesterov
    momentum, early stopping, and, particularly crucial for training convolutional
    neural networks, nonconstant learning rates.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter explores techniques and metrics for evaluating the performance
    of machine learning models. This interlude before we jump to convolutional neural
    networks will supply us with tools we can use to help understand the performance
    of more advanced model types.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
