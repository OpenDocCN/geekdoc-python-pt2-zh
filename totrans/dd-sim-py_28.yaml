- en: B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python Debugger (pdb) Commands
  prefs: []
  type: TYPE_NORMAL
- en: The Python DeBugger (`pdb`) tool has quite a few commands you can enter at the
    `(Pdb)` prompt to control and monitor the execution of the code. In this appendix,
    I outline the most important `pdb` commands in an easy-to-use table.
  prefs: []
  type: TYPE_NORMAL
- en: If you need even more information, you will find all `pdb` commands exhaustively
    documented at [https://docs.python.org/3/library/pdb.xhtml](https://docs.python.org/3/library/pdb.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command(s)** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `h` `command` `help` `command` | Shows help for a command. If a command is
    omitted, this lists all available commands. |'
  prefs: []
  type: TYPE_TB
- en: '| `q` `quit` | Quits the current `pdb` session. |'
  prefs: []
  type: TYPE_TB
- en: '| **Moving around** |'
  prefs: []
  type: TYPE_TB
- en: '| `w` `where` | Prints the stack trace for the current position. |'
  prefs: []
  type: TYPE_TB
- en: '| `u` `count` `up` `count` | Moves the focus higher up the current stack trace,
    by `count` levels, or one level by default. |'
  prefs: []
  type: TYPE_TB
- en: '| `d` `count` `down` `count` | Moves the focus further down the current stack
    trace, by `count` levels, or one level by default. |'
  prefs: []
  type: TYPE_TB
- en: '| `s` `step` | Executes and steps into the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `n` `next` | Executes and steps over the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `r` `return` | Executes the rest of the current function. |'
  prefs: []
  type: TYPE_TB
- en: '| `c` `cont`'
  prefs: []
  type: TYPE_NORMAL
- en: '`continue` | Continues execution until another breakpoint is hit. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `unt` `lineno` `until` `lineno` | Continues execution until `lineno`, or
    until any line number greater than the current one. |'
  prefs: []
  type: TYPE_TB
- en: '| `j` `lineno` `jump` `lineno` | After the current line, executes the line
    of code at `lineno`. You can only do this on the bottommost frame, and you cannot
    do this in certain situations. One use for this is if you want to temporarily
    skip some code you think might be causing a problem. |'
  prefs: []
  type: TYPE_TB
- en: '| `run` `restart` | Restarts debugging from the beginning of the program, while
    retaining options, breakpoints, and history. This only works when you’ve invoked
    `pdb` directly. |'
  prefs: []
  type: TYPE_TB
- en: '| **Inspecting things** |'
  prefs: []
  type: TYPE_TB
- en: '| `p` `expression` | Runs `print(``expression``)`. |'
  prefs: []
  type: TYPE_TB
- en: '| `pp` `expression` | Runs `pprint(``expression``)` (pretty-print with `pprint`
    module). |'
  prefs: []
  type: TYPE_TB
- en: '| `whatis` `expression` | Prints `type(``expression``)`. |'
  prefs: []
  type: TYPE_TB
- en: '| `a` `args` | Prints the argument list for the current function. |'
  prefs: []
  type: TYPE_TB
- en: '| `retval` | Prints the last returned value for the current function. |'
  prefs: []
  type: TYPE_TB
- en: '| `display` `expression` | Watches the value of `expression`, printing it each
    time the debugger stops in the current frame. |'
  prefs: []
  type: TYPE_TB
- en: '| `undisplay` `expression` | Stops watching `expression`. If `expression` is
    omitted, this stops watching all expressions. |'
  prefs: []
  type: TYPE_TB
- en: '| `l` `lineno` `list` `lineno` | Displays the 11 lines of source code around
    line `lineno`, or around the current line if `lineno` is omitted. |'
  prefs: []
  type: TYPE_TB
- en: '| `l` `from to` `list` `from to` | Displays the source code from line number
    `from` to line number `to`. |'
  prefs: []
  type: TYPE_TB
- en: '| `source` `name` | Displays the source code for the given code object `object`,
    such as a function, method, class, or module. |'
  prefs: []
  type: TYPE_TB
- en: '| **Interacting with things** |'
  prefs: []
  type: TYPE_TB
- en: '| `!` `statement` | Executes the given one-line statement in the current context,
    as if it were the next line of code. |'
  prefs: []
  type: TYPE_TB
- en: '| `interact` | Switches to an interactive Python shell at the current context,
    so you can run additional code. |'
  prefs: []
  type: TYPE_TB
- en: '| `debug` `code` | Starts another `pdb` session for debugging the statement
    `code`. When you quit that session, you’ll return to the session you ran this
    command in. |'
  prefs: []
  type: TYPE_TB
- en: '| **Managing breakpoints** |'
  prefs: []
  type: TYPE_TB
- en: '| `b` `break` | Lists all breakpoints in the file, including how many times
    each one has been hit. |'
  prefs: []
  type: TYPE_TB
- en: '| `b` `lineno` `break` `lineno`'
  prefs: []
  type: TYPE_NORMAL
- en: '`b` `file:lineno`'
  prefs: []
  type: TYPE_NORMAL
- en: '`break``file:lineno` | Sets a breakpoint at line number `lineno` in the current
    file or at line number `lineno` in the file with filename `file`. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `b` `function` `break` `function` | Sets a breakpoint at the top of the function
    `function`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tbreak` `where` | Sets a temporary breakpoint at the location `where` (following
    the same syntax as the `break` command). The first time the temporary breakpoint
    is hit, it is removed. |'
  prefs: []
  type: TYPE_TB
- en: '| `cl` `clear` | Clears all breakpoints. Confirms before clearing everything.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cl` `file:lineno` `clear` `file:lineno` | Clears the breakpoint on line
    `lineno` in the file with filename `file`. |'
  prefs: []
  type: TYPE_TB
- en: '| `cl` `number` `clear` `number` | Clears the breakpoint `number`. You can
    specify multiple numbers, separated by spaces, to clear multiple breakpoints.
    |'
  prefs: []
  type: TYPE_TB
