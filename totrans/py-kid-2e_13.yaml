- en: '11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '11'
- en: 'Beginning Your First Game: Bounce!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开始你的第一个游戏：Bounce!
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: So far, we’ve covered the fundamentals of computer programming. You’ve learned
    how to use variables to store information, if statements for conditional code,
    and for loops for repeating code. You know how to create functions to reuse your
    code, and how to use classes and objects to divide your code into smaller chunks
    that are easier to understand. You’ve learned how to draw graphics on the screen
    with both the turtle and tkinter modules. Now, it’s time to use that knowledge
    to create your first game.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了计算机编程的基础知识。你已经学会了如何使用变量来存储信息，如何使用if语句进行条件判断，如何使用for循环来重复执行代码。你还学会了如何创建函数来重用代码，以及如何使用类和对象将代码分成更小、更易理解的块。你已经学会了如何使用turtle和tkinter模块在屏幕上绘制图形。现在，是时候用这些知识来创建你的第一个游戏了。
- en: Whack the Bouncing Ball
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打击弹跳球
- en: We’re going to develop a game with a bouncing ball and a paddle. The ball will
    fly around the screen, and the player will bounce it off the paddle. If the ball
    hits the bottom of the screen, the game ends. [Figure 11-1](ch11.xhtml#ch11fig01)
    shows a preview of the finished game.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个带有弹跳球和挡板的游戏。球会在屏幕上飞来飞去，玩家需要用挡板将球弹回。如果球撞到屏幕底部，游戏就结束了。[图 11-1](ch11.xhtml#ch11fig01)展示了完成游戏的预览。
- en: '![Image](Images/11fig01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/11fig01.jpg)'
- en: '*Figure 11-1: Bounce! game*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-1: Bounce! 游戏*'
- en: Our game may look quite simple, but the code will be a bit trickier than what
    we’ve written so far because it needs to handle a lot of things. For example,
    it needs to animate the paddle and the ball, and detect when the ball hits the
    paddle or the walls.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏看起来可能相当简单，但代码将比我们之前编写的稍微复杂一些，因为它需要处理很多内容。例如，它需要为挡板和球进行动画处理，并检测球何时碰到挡板或墙壁。
- en: In this chapter, we’ll begin creating the game by adding a game canvas and a
    bouncing ball. In the next chapter, we’ll complete the game by adding the paddle.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始通过添加游戏画布和一个弹跳球来创建游戏。在下一章中，我们将通过添加挡板来完成游戏。
- en: Creating the Game Canvas
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建游戏画布
- en: 'To create your game, first open a new file in IDLE by choosing **File** **▸**
    **New File**. Then import tkinter and create a canvas to draw on:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建你的游戏，首先在IDLE中打开一个新文件，选择**文件** **▸** **新建文件**。然后导入tkinter并创建一个画布来绘制：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code is a little different from previous examples. First, we import the
    time and random modules with import random and import time, to use a bit later
    in the code. The random module provides (among other things) functions for creating
    random numbers, and time has a useful function that will tell Python to pause
    what it’s doing for a period of time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与之前的例子有些不同。首先，我们通过`import random`和`import time`导入time和random模块，稍后将在代码中使用。random模块提供了（其中之一）用于创建随机数的函数，而time模块有一个有用的函数，可以让Python暂停当前操作一段时间。
- en: With tk.title(’Bounce Game’) ➊, we use the title function of the tk object we
    created with tk = Tk() to give the window a title. Then we use resizable to make
    the window a fixed size. The parameters (0, 0) say, “The size of the window cannot
    be changed either horizontally or vertically.” Next, we call wm_ attributes to
    tell tkinter to place the window containing our canvas in front of all other windows
    (‘-topmost’).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tk.title('Bounce Game')` ➊时，我们调用了我们通过`tk = Tk()`创建的tk对象的title函数，为窗口设置标题。然后，我们使用resizable来将窗口的大小固定。参数（0,
    0）表示“窗口的大小既不能水平改变，也不能垂直改变”。接下来，我们调用`wm_attributes`来告诉tkinter将包含画布的窗口置于所有其他窗口之前（‘-topmost’）。
- en: When we create a Canvas object, we pass in a few more named parameters than
    with previous examples. For example, both bd=0 and highlightthickness=0 make sure
    there’s no border around the outside of the canvas, which makes it look better
    on our game screen. The line canvas.pack() tells the canvas to size itself according
    to the width and height parameters given in the preceding line. Finally, tk.update()
    tells tkinter to initialize itself for the animation in our game. Without this
    last line, nothing would work as expected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个Canvas对象时，与之前的例子相比，我们传入了更多的命名参数。例如，`bd=0`和`highlightthickness=0`确保画布外面没有边框，这使得游戏屏幕看起来更美观。`canvas.pack()`这一行告诉画布根据前面给定的宽度和高度参数来调整自身大小。最后，`tk.update()`告诉tkinter为我们的游戏动画进行初始化。如果没有这一行，游戏将无法按预期工作。
- en: Make sure you save your code as you go. Give it a meaningful filename the first
    time you save it, such as *paddleball.py*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，一定要定期保存。第一次保存时，给它取个有意义的文件名，例如*paddleball.py*。
- en: '![Image](Images/f0173-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0173-01.jpg)'
- en: Creating the Ball Class
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Ball类
- en: 'Now we’ll create the class for the ball. We’ll begin with the code we need
    for the ball to draw itself on the canvas. We need to do the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建球的类。我们将从使球能够在画布上绘制自己的代码开始。我们需要做以下几件事：
- en: Create a class called Ball that takes parameters for the canvas and the color
    of the ball we’re going to draw.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Ball的类，接受画布和我们要绘制的球的颜色作为参数。
- en: Save the canvas as an object variable because we’ll draw our ball on it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将画布保存为一个对象变量，因为我们将在其上绘制球。
- en: Draw a filled circle on the canvas by using the value of the color parameter
    as the fill color.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用颜色参数的值作为填充颜色，在画布上绘制一个填充的圆形。
- en: Save the identifier tkinter returns when it draws the circle (oval) because
    we’re going use this to move the ball around the screen.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存tkinter绘制圆形（椭圆）时返回的标识符，因为我们将用它来移动球。
- en: Move the oval to the middle of the canvas.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将椭圆移动到画布的中央。
- en: 'This code should be added just after the first three lines in the file (after
    import time):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该在文件的前三行后添加（在导入time之后）：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, we name our class Ball. Then we create an initialization function (as
    described in “Initializing an Object” on [page 109](ch08.xhtml#ch08lev1sec11))
    that takes the parameters canvas and color. We set the object variable canvas
    to the value of the parameter of the same name. We then call the create_oval function
    with five parameters: *x* and *y* coordinates for the top-left corner (10 and
    10), *x* and *y* coordinates for the bottom-right corner (25 and 25), and the
    fill color for the oval.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将类命名为Ball。然后，我们创建一个初始化函数（如[第109页](ch08.xhtml#ch08lev1sec11)的“初始化对象”部分所述），它接受画布和颜色作为参数。我们将对象变量canvas设置为同名参数的值。接着我们调用create_oval函数，传入五个参数：椭圆的左上角的*x*和*y*坐标（10和10），右下角的*x*和*y*坐标（25和25），以及椭圆的填充颜色。
- en: The create_oval function returns an identifier for the shape it’s drawn, which
    we store in the object variable id. We move the oval to the middle of the canvas
    (coordinates 245, 100). The canvas knows what to move because we use the stored
    shape identifier (id) to identify it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: create_oval函数返回一个表示所绘制形状的标识符，我们将其存储在对象变量id中。我们将椭圆移动到画布的中央（坐标245, 100）。画布知道该移动什么，因为我们使用存储的形状标识符（id）来识别它。
- en: On the last two lines of the Ball class, we create the draw function with def
    draw(self), and the body of the function is simply the pass keyword. At the moment,
    it does nothing, but we’ll add more to this function shortly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ball类的最后两行，我们创建了draw函数，使用def draw(self)，函数的主体只是pass关键字。目前它什么也不做，但我们很快就会为这个函数添加更多的内容。
- en: '![Image](Images/f0175-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0175-01.jpg)'
- en: 'Now that we’ve created our Ball class, we need to create an object of this
    class (remember: a class describes what it can do, but the object is the thing
    that actually does it). Add this code to the bottom of the program to create a
    red ball object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了Ball类，我们需要创建这个类的一个对象（记住：类描述它能做什么，但对象才是实际执行这些操作的东西）。将以下代码添加到程序底部来创建一个红色的球对象：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can run this program using **Run** **▸** **Run Module**. If you do this
    outside of IDLE, the canvas will appear for a split second and then vanish. To
    stop the window from closing immediately, we need to add an animation loop, which
    is called the *main loop* of our game. (IDLE already has a main loop, which is
    why the window doesn’t vanish when you run it there.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**运行** **▸** **运行模块**来运行这个程序。如果你在IDLE外运行，它的画布会显示一瞬间然后消失。为了防止窗口立即关闭，我们需要添加一个动画循环，这个循环被称为游戏的*主循环*。（IDLE已经有一个主循环，这就是为什么在IDLE中运行时窗口不会消失的原因。）
- en: 'A main loop is the central part of a program that generally controls most of
    what it does. Our main loop, for the moment, just tells tkinter to redraw the
    screen. The loop, also called the *infinite loop*, keeps running forever (or at
    least until we close the window), constantly telling tkinter to redraw the screen
    and then sleeping for one hundredth of a second by using time.sleep. We’ll add
    this code to the end of our program:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 主循环是程序的核心部分，通常控制程序的大部分功能。目前，我们的主循环只是告诉tkinter重绘屏幕。这个循环，也叫做*无限循环*，会一直运行下去（或者至少直到我们关闭窗口），不断地告诉tkinter重绘屏幕，然后通过使用time.sleep使程序暂停百分之一秒。我们将在程序的最后添加这段代码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now if you run the code, the ball should appear in the center of the canvas,
    as shown in [Figure 11-2](ch11.xhtml#ch11fig02).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你运行代码，球应该会出现在画布的中央，如[图 11-2](ch11.xhtml#ch11fig02)所示。
- en: '![Image](Images/11fig02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/11fig02.jpg)'
- en: '*Figure 11-2: Ball in the center of the canvas*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-2：画布中央的球*'
- en: Adding Some Action
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加一些动作
- en: Now that we have the Ball class set up, it’s time to animate the ball. We’ll
    make it move, bounce, and change direction.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了 Ball 类，接下来是让球动起来。我们将让它移动、弹跳并改变方向。
- en: '![Image](Images/f0176-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0176-01.jpg)'
- en: Making the Ball Move
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让球运动起来
- en: 'To move the ball, change the draw function as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要移动球，修改 draw 函数如下：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Since __init__ saved the canvas parameter as the canvas object variable, we
    use that variable with self.canvas and call the move function on the canvas.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 __init__ 已经将画布参数保存为 canvas 对象变量，我们使用 self.canvas 这个变量并调用 canvas 上的 move 函数。
- en: 'We pass three parameters to move: the id of the oval, and the numbers 0 and
    -1. The 0 tells the ball to not move horizontally, and the -1 tells the ball to
    move 1 pixel up the screen.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向 move 函数传递三个参数：椭圆的 id 和数字 0 和 -1。数字 0 告诉球不水平移动，而 -1 告诉球向屏幕上方移动 1 像素。
- en: We’re making this small change because it’s beneficial to try things out as
    we go. Imagine writing the entire code for our game all at once and then discovering
    that it didn’t work. Where would we begin looking to figure out what went wrong?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做出这个小改动是因为在开发过程中尝试不同的方式是有益的。试想一下，如果我们一次性编写了整个游戏代码，然后发现它无法运行，我们该从哪里开始找出问题所在？
- en: 'We’ll also change the main loop at the bottom of our program. In the block
    of the while loop (our main loop), we add a call to the ball object’s draw function,
    like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将修改程序底部的主循环。在 while 循环块中（我们的主循环），我们添加对球对象的 draw 函数的调用，如下所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you run this code now, the ball should move up the canvas and vanish off
    the top of the screen—the commands update _idletasks and update tell tkinter to
    hurry up and draw what is on the canvas.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行这段代码，球应该会向上移动并从屏幕顶部消失——这些命令更新了 _idletasks 和 update，告诉 tkinter 加快速度并绘制画布上的内容。
- en: The time.sleep command is a call to the sleep function of the time module, which
    tells Python to sleep for one hundredth of a second (0.01). This ensures our program
    won’t run so fast that the ball vanishes before you even see it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: time.sleep 命令是对 time 模块的 sleep 函数的调用，它告诉 Python 程序暂停一百分之一秒（0.01）。这确保了我们的程序不会运行得太快，以至于在你看到球之前它就消失了。
- en: This loop is basically saying, “Move the ball a little, redraw the screen with
    the new position, sleep for a moment, and then start over again.”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环基本上是在说：“稍微移动一下球，重新绘制屏幕上的新位置，暂停片刻，然后重新开始。”
- en: '**NOTE**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You may see error messages written to the Python Shell when you close the
    game window. This is because closing the window interrupts what tkinter is doing,
    and Python is complaining about it. We can safely ignore these types of errors.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你关闭游戏窗口时，你可能会看到 Python Shell 中写入错误信息。这是因为关闭窗口中断了 tkinter 的操作，Python 对此发出了警告。我们可以安全地忽略这些类型的错误。*'
- en: 'Your game code should now look like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏代码现在应该如下所示：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you run this code, the ball will start moving upward and sail off the top
    of the window.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这段代码，球将开始向上移动，并从窗口顶部飞出去。
- en: Making the Ball Bounce
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让球弹跳起来
- en: 'A ball that vanishes off the top of the screen isn’t particularly useful for
    our game, so let’s make it bounce. First, we’ll save a few additional object variables
    in the initialization function of the Ball class, like so:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从屏幕顶部消失的球对于我们的游戏来说并没有什么用处，所以让我们让它弹跳起来。首先，我们将在 Ball 类的初始化函数中保存一些额外的对象变量，如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We’ve added three more lines to our program. With self.x = 0, we set the object
    variable x to 0; with self.y = -1, we set the variable y to −1\. Lastly, we set
    the object variable canvas_height by calling the winfo_height canvas function.
    This function returns the current height of the canvas.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向程序中添加了三行代码。通过 self.x = 0，我们将对象变量 x 设置为 0；通过 self.y = -1，我们将变量 y 设置为 -1。最后，我们通过调用
    winfo_height 画布函数设置了对象变量 canvas_height。该函数返回画布的当前高度。
- en: 'Next, we change the draw function again:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们再次修改 draw 函数：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We first change the call to the canvas’s move function by passing the x and
    y object variables. Next, we create a variable called pos by calling the coords
    canvas function. This function returns the current *x* and *y* coordinates of
    anything drawn on the canvas as long as you know its identifying number. In this
    case, we pass coords the object variable id, which contains the oval’s identifier.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过传递 x 和 y 对象变量来修改对 canvas 的 move 函数的调用。接下来，我们通过调用 coords 画布函数创建一个名为 pos
    的变量。该函数返回任何绘制在画布上的物体的当前 *x* 和 *y* 坐标，只要你知道它的标识号码。在这个例子中，我们将对象变量 id 传递给 coords，id
    包含椭圆的标识符。
- en: 'The coords function returns the coordinates as a list of four numbers. If we
    print the results of calling this function, we’ll see something like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: coords 函数返回四个数字的坐标列表。如果我们打印调用这个函数的结果，我们会看到类似下面的输出：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first two numbers in the list (255.0 and 29.0) contain the top-left coordinates
    of the oval (*x1* and *y1*), and the second pair (270.0 and 44.0) are the bottom-right
    *x2* and *y2* coordinates. We’ll use these values in the next few lines of code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的前两个数字（255.0 和 29.0）包含椭圆的左上角坐标（*x1* 和 *y1*），第二对数字（270.0 和 44.0）是右下角的 *x2*
    和 *y2* 坐标。我们将在接下来的几行代码中使用这些值。
- en: We continue our code by seeing if the *y1* coordinate (that’s the top of the
    ball!) is less than or equal to 0\. If so, we set the y object variable to 1.
    In effect, we’re saying if you hit the top of the screen, tkinter will stop subtracting
    1 from the vertical position, and the ball will stop moving up (this is a simple
    version of *collision detection*).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续编写代码，检查 *y1* 坐标（也就是球的顶部！）是否小于或等于 0。如果是，我们将 y 对象变量设置为 1。实际上，我们是在说，如果你碰到屏幕顶部，tkinter
    就会停止从垂直位置减去 1，球就会停止向上移动（这是一种简单的 *碰撞检测*）。
- en: '![Image](Images/f0180-01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0180-01.jpg)'
- en: We then see if the *y2* coordinate (that’s the bottom of the ball!) is greater
    than or equal to the variable canvas_height. If it is, we set the y object variable
    back to -1. Now the ball will stop moving down and head back up again.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查 *y2* 坐标（也就是球的底部！）是否大于或等于 canvas_height 变量。如果是，我们将 y 对象变量重置为 -1。现在，球将停止向下移动并再次向上移动。
- en: Run this code now, and the ball should bounce up and down the canvas until you
    close the window.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行这段代码，球应该会在画布上上下弹跳，直到你关闭窗口。
- en: Changing the Ball’s Starting Direction
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 改变球的起始方向
- en: Making a ball bounce slowly up and down isn’t much of a game, so let’s enhance
    things a bit by changing the ball’s starting direction—the angle it moves when
    the game starts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让球慢慢上下弹跳并不算什么游戏，所以我们来稍微增强一下，通过改变球的起始方向——即游戏开始时球的移动角度。
- en: '![Image](Images/f0180-02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0180-02.jpg)'
- en: 'In the __init__ function, change these two lines:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 __init__ 函数中，修改这两行代码：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'to the following code (make sure you have the right number of spaces—there
    are eight—at the beginning of each line):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到以下代码（确保每行的开头有正确的空格数——每行前面有八个空格）：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We begin by creating the starts variable with a list of six numbers. Then we
    set the value of the x variable, using the random.choice function, which returns
    a random item from a list. By using that function, x can be any number in the
    list, from –3 to 3.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个 starts 变量，包含六个数字的列表。然后，我们使用 random.choice 函数设置 x 变量的值，该函数从列表中返回一个随机项。通过使用这个函数，x
    可以是列表中的任何一个数字，从 –3 到 3。
- en: 'Lastly, we change y to –3 (so the ball starts the game moving upward). Now
    our ball can move in any direction, but we need to make a few more additions to
    be sure it won’t vanish off the side of the screen. Add the following line to
    the end of the __init__ function to save the width of the canvas to a new canvas_width
    object variable:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将 y 改为 –3（让球开始时向上移动）。现在我们的球可以朝任意方向移动，但我们还需要做一些补充，以确保它不会从屏幕的一侧消失。将以下代码添加到
    __init__ 函数的末尾，将画布的宽度保存到一个新的 canvas_width 对象变量中：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We’ll use this new object variable in the draw function to see if the ball
    has hit the left or right side of the canvas:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在绘制函数中使用这个新的对象变量，检查球是否碰到了画布的左侧或右侧：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the leftmost position of the ball is less than or equal to 0, or the rightmost
    position of the ball is greater than or equal to the width of the canvas, we do
    this odd little calculation self.x = self.x * -1. The x variable is set to the
    current value of x multiplied by –1\. So if the value of x is 2, the new value
    will be –2\. If the value of x is –3, the new value will be 3\. So when the ball
    hits a side, it will bounce back in the opposite direction. We can do a similar
    check for the top and bottom of the canvas, using the canvas height and multiplying
    the y variable by –1\. Your draw function should now look like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果球的最左边位置小于或等于 0，或者球的最右边位置大于或等于画布的宽度，我们就会进行这个奇怪的小计算 `self.x = self.x * -1`。x
    变量被设置为当前 x 值乘以 –1。所以如果 x 的值是 2，新值将是 –2。如果 x 的值是 –3，新值将是 3。所以当球撞到一边时，它会反弹到相反方向。我们也可以对画布的顶部和底部做类似的检查，使用画布的高度，并将
    y 变量乘以 –1。现在你的绘制函数应该看起来像这样：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The full program should look like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的程序应该是这样的：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save and run the code, and the ball should bounce around the screen without
    vanishing.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并运行代码，小球应该会在屏幕上弹跳而不会消失。
- en: What You Learned
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, we started creating our first game using the tkinter module.
    We created a Ball object and animated it to move around the screen. We used coordinates
    to check when the ball hits the sides of the canvas so we can make it bounce.
    We also used the choice function in the random module so our ball doesn’t always
    start moving in the same direction. In the next chapter, we’ll complete the game
    by adding the paddle.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们开始使用 tkinter 模块创建我们的第一个游戏。我们创建了一个 Ball 对象，并使它动起来在屏幕上移动。我们使用坐标来检查小球是否碰到画布的边缘，这样我们就可以让它反弹。我们还使用了
    random 模块中的选择函数，以确保小球不会总是朝同一方向开始移动。在下一章中，我们将通过添加挡板来完成游戏。
- en: Programming Puzzles
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程难题
- en: '#1: Changing Colors'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1：改变颜色'
- en: Try changing the starting color of the ball and the background color of the
    canvas—try a few different combinations of colors and see which ones you like.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试改变小球的起始颜色和画布的背景颜色——试试不同的颜色组合，看看你喜欢哪几种。
- en: '#2: Flashing Colors'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2：闪烁的颜色'
- en: Because there’s a loop at the bottom of our code, it should be quite easy to
    change the color of the ball as it moves across the screen. We can add some code
    to the loop that picks different colors (think about the choice function we used
    earlier in the chapter), and then updates the color of the ball (perhaps by calling
    a new function on our Ball class). To do this, you’ll need to use the itemconfig
    function on the canvas (see “More Ways to Use the Identifier” on [page 165](ch10.xhtml#ch10lev1sec14)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们代码的底部有一个循环，所以当小球在屏幕上移动时，改变小球的颜色应该是相当简单的。我们可以在循环中添加一些代码来选择不同的颜色（可以参考我们在本章之前使用的选择函数），然后更新小球的颜色（可能通过在
    Ball 类中调用一个新函数）。为了做到这一点，你需要在画布上使用 itemconfig 函数（请参见[第165页](ch10.xhtml#ch10lev1sec14)的“更多使用标识符的方法”）。
- en: '#3: Take Your Positions!'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3：就位！'
- en: Try to change the code so the ball starts in a different position on the screen.
    You could make the position random by using the random module (see section “Drawing
    a Lot of Rectangles” on [page 145](ch10.xhtml#ch10lev1sec6) for an example of
    how to use the randrange function in that module). But you’ll have to ensure the
    ball doesn’t start too close, or below, the paddle, which will make the game impossible
    to play.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试修改代码，让小球从屏幕上的不同位置开始。你可以使用 random 模块使位置随机（请参见[第145页](ch10.xhtml#ch10lev1sec6)中“绘制许多矩形”一节，了解如何使用该模块中的
    randrange 函数）。但是你必须确保小球不会从离挡板太近或在挡板下方的位置开始，否则游戏就无法进行。
- en: '#4: Adding the Paddle . . . ?'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4：添加挡板……？'
- en: Based on the code we’ve created so far, can you figure out how to add the paddle
    before reaching the next chapter? If you look back at [Chapter 10](ch10.xhtml#ch10),
    you might be able to figure out how to draw it before moving on. Then check the
    next few pages to see if you got it right!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们到目前为止写的代码，你能在进入下一个章节之前弄明白如何添加挡板吗？如果你回顾一下[第10章](ch10.xhtml#ch10)，你或许能弄明白如何在继续之前画出它。然后查看接下来的几页，看看你是否做对了！
