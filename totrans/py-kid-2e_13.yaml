- en: '11'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Beginning Your First Game: Bounce!'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So far, we’ve covered the fundamentals of computer programming. You’ve learned
    how to use variables to store information, if statements for conditional code,
    and for loops for repeating code. You know how to create functions to reuse your
    code, and how to use classes and objects to divide your code into smaller chunks
    that are easier to understand. You’ve learned how to draw graphics on the screen
    with both the turtle and tkinter modules. Now, it’s time to use that knowledge
    to create your first game.
  prefs: []
  type: TYPE_NORMAL
- en: Whack the Bouncing Ball
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’re going to develop a game with a bouncing ball and a paddle. The ball will
    fly around the screen, and the player will bounce it off the paddle. If the ball
    hits the bottom of the screen, the game ends. [Figure 11-1](ch11.xhtml#ch11fig01)
    shows a preview of the finished game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/11fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-1: Bounce! game*'
  prefs: []
  type: TYPE_NORMAL
- en: Our game may look quite simple, but the code will be a bit trickier than what
    we’ve written so far because it needs to handle a lot of things. For example,
    it needs to animate the paddle and the ball, and detect when the ball hits the
    paddle or the walls.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll begin creating the game by adding a game canvas and a
    bouncing ball. In the next chapter, we’ll complete the game by adding the paddle.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Game Canvas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create your game, first open a new file in IDLE by choosing **File** **▸**
    **New File**. Then import tkinter and create a canvas to draw on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code is a little different from previous examples. First, we import the
    time and random modules with import random and import time, to use a bit later
    in the code. The random module provides (among other things) functions for creating
    random numbers, and time has a useful function that will tell Python to pause
    what it’s doing for a period of time.
  prefs: []
  type: TYPE_NORMAL
- en: With tk.title(’Bounce Game’) ➊, we use the title function of the tk object we
    created with tk = Tk() to give the window a title. Then we use resizable to make
    the window a fixed size. The parameters (0, 0) say, “The size of the window cannot
    be changed either horizontally or vertically.” Next, we call wm_ attributes to
    tell tkinter to place the window containing our canvas in front of all other windows
    (‘-topmost’).
  prefs: []
  type: TYPE_NORMAL
- en: When we create a Canvas object, we pass in a few more named parameters than
    with previous examples. For example, both bd=0 and highlightthickness=0 make sure
    there’s no border around the outside of the canvas, which makes it look better
    on our game screen. The line canvas.pack() tells the canvas to size itself according
    to the width and height parameters given in the preceding line. Finally, tk.update()
    tells tkinter to initialize itself for the animation in our game. Without this
    last line, nothing would work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you save your code as you go. Give it a meaningful filename the first
    time you save it, such as *paddleball.py*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0173-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Ball Class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we’ll create the class for the ball. We’ll begin with the code we need
    for the ball to draw itself on the canvas. We need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class called Ball that takes parameters for the canvas and the color
    of the ball we’re going to draw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the canvas as an object variable because we’ll draw our ball on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a filled circle on the canvas by using the value of the color parameter
    as the fill color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the identifier tkinter returns when it draws the circle (oval) because
    we’re going use this to move the ball around the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the oval to the middle of the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This code should be added just after the first three lines in the file (after
    import time):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we name our class Ball. Then we create an initialization function (as
    described in “Initializing an Object” on [page 109](ch08.xhtml#ch08lev1sec11))
    that takes the parameters canvas and color. We set the object variable canvas
    to the value of the parameter of the same name. We then call the create_oval function
    with five parameters: *x* and *y* coordinates for the top-left corner (10 and
    10), *x* and *y* coordinates for the bottom-right corner (25 and 25), and the
    fill color for the oval.'
  prefs: []
  type: TYPE_NORMAL
- en: The create_oval function returns an identifier for the shape it’s drawn, which
    we store in the object variable id. We move the oval to the middle of the canvas
    (coordinates 245, 100). The canvas knows what to move because we use the stored
    shape identifier (id) to identify it.
  prefs: []
  type: TYPE_NORMAL
- en: On the last two lines of the Ball class, we create the draw function with def
    draw(self), and the body of the function is simply the pass keyword. At the moment,
    it does nothing, but we’ll add more to this function shortly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0175-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we’ve created our Ball class, we need to create an object of this
    class (remember: a class describes what it can do, but the object is the thing
    that actually does it). Add this code to the bottom of the program to create a
    red ball object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can run this program using **Run** **▸** **Run Module**. If you do this
    outside of IDLE, the canvas will appear for a split second and then vanish. To
    stop the window from closing immediately, we need to add an animation loop, which
    is called the *main loop* of our game. (IDLE already has a main loop, which is
    why the window doesn’t vanish when you run it there.)
  prefs: []
  type: TYPE_NORMAL
- en: 'A main loop is the central part of a program that generally controls most of
    what it does. Our main loop, for the moment, just tells tkinter to redraw the
    screen. The loop, also called the *infinite loop*, keeps running forever (or at
    least until we close the window), constantly telling tkinter to redraw the screen
    and then sleeping for one hundredth of a second by using time.sleep. We’ll add
    this code to the end of our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now if you run the code, the ball should appear in the center of the canvas,
    as shown in [Figure 11-2](ch11.xhtml#ch11fig02).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/11fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-2: Ball in the center of the canvas*'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Some Action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the Ball class set up, it’s time to animate the ball. We’ll
    make it move, bounce, and change direction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0176-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making the Ball Move
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To move the ball, change the draw function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Since __init__ saved the canvas parameter as the canvas object variable, we
    use that variable with self.canvas and call the move function on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'We pass three parameters to move: the id of the oval, and the numbers 0 and
    -1. The 0 tells the ball to not move horizontally, and the -1 tells the ball to
    move 1 pixel up the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: We’re making this small change because it’s beneficial to try things out as
    we go. Imagine writing the entire code for our game all at once and then discovering
    that it didn’t work. Where would we begin looking to figure out what went wrong?
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also change the main loop at the bottom of our program. In the block
    of the while loop (our main loop), we add a call to the ball object’s draw function,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you run this code now, the ball should move up the canvas and vanish off
    the top of the screen—the commands update _idletasks and update tell tkinter to
    hurry up and draw what is on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The time.sleep command is a call to the sleep function of the time module, which
    tells Python to sleep for one hundredth of a second (0.01). This ensures our program
    won’t run so fast that the ball vanishes before you even see it.
  prefs: []
  type: TYPE_NORMAL
- en: This loop is basically saying, “Move the ball a little, redraw the screen with
    the new position, sleep for a moment, and then start over again.”
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You may see error messages written to the Python Shell when you close the
    game window. This is because closing the window interrupts what tkinter is doing,
    and Python is complaining about it. We can safely ignore these types of errors.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your game code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you run this code, the ball will start moving upward and sail off the top
    of the window.
  prefs: []
  type: TYPE_NORMAL
- en: Making the Ball Bounce
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A ball that vanishes off the top of the screen isn’t particularly useful for
    our game, so let’s make it bounce. First, we’ll save a few additional object variables
    in the initialization function of the Ball class, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We’ve added three more lines to our program. With self.x = 0, we set the object
    variable x to 0; with self.y = -1, we set the variable y to −1\. Lastly, we set
    the object variable canvas_height by calling the winfo_height canvas function.
    This function returns the current height of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we change the draw function again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We first change the call to the canvas’s move function by passing the x and
    y object variables. Next, we create a variable called pos by calling the coords
    canvas function. This function returns the current *x* and *y* coordinates of
    anything drawn on the canvas as long as you know its identifying number. In this
    case, we pass coords the object variable id, which contains the oval’s identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The coords function returns the coordinates as a list of four numbers. If we
    print the results of calling this function, we’ll see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The first two numbers in the list (255.0 and 29.0) contain the top-left coordinates
    of the oval (*x1* and *y1*), and the second pair (270.0 and 44.0) are the bottom-right
    *x2* and *y2* coordinates. We’ll use these values in the next few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: We continue our code by seeing if the *y1* coordinate (that’s the top of the
    ball!) is less than or equal to 0\. If so, we set the y object variable to 1.
    In effect, we’re saying if you hit the top of the screen, tkinter will stop subtracting
    1 from the vertical position, and the ball will stop moving up (this is a simple
    version of *collision detection*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0180-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then see if the *y2* coordinate (that’s the bottom of the ball!) is greater
    than or equal to the variable canvas_height. If it is, we set the y object variable
    back to -1. Now the ball will stop moving down and head back up again.
  prefs: []
  type: TYPE_NORMAL
- en: Run this code now, and the ball should bounce up and down the canvas until you
    close the window.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Ball’s Starting Direction
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Making a ball bounce slowly up and down isn’t much of a game, so let’s enhance
    things a bit by changing the ball’s starting direction—the angle it moves when
    the game starts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/f0180-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the __init__ function, change these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'to the following code (make sure you have the right number of spaces—there
    are eight—at the beginning of each line):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We begin by creating the starts variable with a list of six numbers. Then we
    set the value of the x variable, using the random.choice function, which returns
    a random item from a list. By using that function, x can be any number in the
    list, from –3 to 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we change y to –3 (so the ball starts the game moving upward). Now
    our ball can move in any direction, but we need to make a few more additions to
    be sure it won’t vanish off the side of the screen. Add the following line to
    the end of the __init__ function to save the width of the canvas to a new canvas_width
    object variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll use this new object variable in the draw function to see if the ball
    has hit the left or right side of the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the leftmost position of the ball is less than or equal to 0, or the rightmost
    position of the ball is greater than or equal to the width of the canvas, we do
    this odd little calculation self.x = self.x * -1. The x variable is set to the
    current value of x multiplied by –1\. So if the value of x is 2, the new value
    will be –2\. If the value of x is –3, the new value will be 3\. So when the ball
    hits a side, it will bounce back in the opposite direction. We can do a similar
    check for the top and bottom of the canvas, using the canvas height and multiplying
    the y variable by –1\. Your draw function should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The full program should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save and run the code, and the ball should bounce around the screen without
    vanishing.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we started creating our first game using the tkinter module.
    We created a Ball object and animated it to move around the screen. We used coordinates
    to check when the ball hits the sides of the canvas so we can make it bounce.
    We also used the choice function in the random module so our ball doesn’t always
    start moving in the same direction. In the next chapter, we’ll complete the game
    by adding the paddle.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#1: Changing Colors'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try changing the starting color of the ball and the background color of the
    canvas—try a few different combinations of colors and see which ones you like.
  prefs: []
  type: TYPE_NORMAL
- en: '#2: Flashing Colors'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because there’s a loop at the bottom of our code, it should be quite easy to
    change the color of the ball as it moves across the screen. We can add some code
    to the loop that picks different colors (think about the choice function we used
    earlier in the chapter), and then updates the color of the ball (perhaps by calling
    a new function on our Ball class). To do this, you’ll need to use the itemconfig
    function on the canvas (see “More Ways to Use the Identifier” on [page 165](ch10.xhtml#ch10lev1sec14)).
  prefs: []
  type: TYPE_NORMAL
- en: '#3: Take Your Positions!'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try to change the code so the ball starts in a different position on the screen.
    You could make the position random by using the random module (see section “Drawing
    a Lot of Rectangles” on [page 145](ch10.xhtml#ch10lev1sec6) for an example of
    how to use the randrange function in that module). But you’ll have to ensure the
    ball doesn’t start too close, or below, the paddle, which will make the game impossible
    to play.
  prefs: []
  type: TYPE_NORMAL
- en: '#4: Adding the Paddle . . . ?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Based on the code we’ve created so far, can you figure out how to add the paddle
    before reaching the next chapter? If you look back at [Chapter 10](ch10.xhtml#ch10),
    you might be able to figure out how to draw it before moving on. Then check the
    next few pages to see if you got it right!
  prefs: []
  type: TYPE_NORMAL
