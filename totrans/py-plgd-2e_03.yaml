- en: '[2](nsp-venkitachalam503045-0008.xhtml#rch02)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[2](nsp-venkitachalam503045-0008.xhtml#rch02)'
- en: Spirographs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spirographs
- en: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
- en: You can use a Spirograph toy (shown in [Figure 2-1](nsp-venkitachalam503045-0013.xhtml#fig2-1))
    to draw mathematical curves. The toy consists of two different-sized rings with
    plastic gear teeth, one large and one small. The small one has several holes.
    You put a pen or pencil through one of the holes and then rotate the smaller wheel
    inside the larger one (which has gear teeth on its inside), keeping the wheels
    in contact with each other, to draw an endless number of complex and wonderfully
    symmetric patterns.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Spirograph 玩具（如[图 2-1](nsp-venkitachalam503045-0013.xhtml#fig2-1)所示）来绘制数学曲线。该玩具由两个不同大小的齿轮环组成，一个大一个小。小的环有几个孔。你将笔或铅笔插入一个孔，然后旋转小齿轮环，使其在大齿轮环内旋转（大齿轮环的内侧有齿轮），保持两个环相互接触，从而绘制出无尽的复杂且对称的图案。
- en: In this project, you’ll use Python to create an animation of Spirograph-like
    curves. The program will use parametric equations to describe the motion of a
    Spirograph’s rings and draw the curves (which I call *spiros*). You’ll save the
    completed drawings as PNG image files. Either the program will draw random spiros
    or you can use command line options to draw a spiro with specific parameters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用 Python 创建类似 Spirograph 的曲线动画。该程序将使用参数方程来描述 Spirograph 环的运动，并绘制曲线（我称之为*spiros*）。你将把完成的绘图保存为
    PNG 图像文件。程序会绘制随机的 spiros，或者你可以使用命令行选项来绘制具有特定参数的 spiro。
- en: '![](images/nsp-venkitachalam503045-f02001.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02001.jpg)'
- en: 'Figure 2-1: A Spirograph toy'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：Spirograph 玩具
- en: 'In this project, you’ll learn how to draw spiros on your computer. You’ll also
    learn how to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习如何在计算机上绘制 spiros。你还将学习如何做以下事情：
- en: • Use parametric equations to generate curves.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用参数方程生成曲线。
- en: • Draw a curve as a series of straight lines using the `turtle` module.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用 `turtle` 模块将曲线绘制为一系列直线。
- en: • Use a timer to animate graphics.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用定时器来使图形动画化。
- en: • Save graphics to image files.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 将图形保存为图像文件。
- en: 'A word of caution: I’ve chosen to use the `turtle` module to draw spiros mainly
    for illustrative purposes and because it’s fun, but `turtle` is slow and not ideal
    for creating graphics when performance is critical. (What do you expect from turtles?)
    If you want to draw something quickly, there are better ways to do so, and you’ll
    explore some of these options in upcoming projects.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一句：我选择使用 `turtle` 模块来绘制 spiros，主要是为了演示目的，并且因为它很有趣，但 `turtle` 运行较慢，在性能至关重要时并不理想。（你能指望海龟做什么呢？）如果你想快速绘制一些东西，有更好的方法可以做到这一点，你将在接下来的项目中探索其中的一些选项。
- en: '[How It Works](nsp-venkitachalam503045-0008.xhtml#rah0401)'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[工作原理](nsp-venkitachalam503045-0008.xhtml#rah0401)'
- en: This project hinges around using *parametric equations*, equations that express
    the coordinates of the points on a curve as functions of one or more variables,
    called *parameters*. You’ll plug values for the parameters into equations to calculate
    points that form a spiro pattern. Then you’ll feed those points to the `turtle`
    module to draw the curves.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的核心是使用 *参数方程*，即将曲线上的点的坐标表示为一个或多个变量（称为 *参数*）的函数。你将把参数的值代入方程，计算出形成 spiro 图案的点。然后，你将把这些点传递给
    `turtle` 模块来绘制曲线。
- en: '[Understanding Parametric Equations](nsp-venkitachalam503045-0008.xhtml#rbh0401)'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[理解参数方程](nsp-venkitachalam503045-0008.xhtml#rbh0401)'
- en: 'To understand how parametric equations work, we’ll begin with a simple example:
    a circle. Consider a circle with radius *r*, centered at the origin of a two-dimensional
    plane. That circle consists of all the points whose x- and y-coordinates satisfy
    the equation *x*² + *y*² = *r*². This isn’t a parametric equation, however. A
    parametric equation would give us all possible values of *x* and *y*, based on
    changes in some other variable (the parameter).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解参数方程如何工作，我们从一个简单的例子开始：圆。考虑一个半径为 *r* 的圆，圆心位于二维平面的原点。这个圆包含所有满足方程 *x*² + *y*²
    = *r*² 的点。然而，这并不是一个参数方程。一个参数方程会根据某个变量（即参数）的变化，给出所有可能的 *x* 和 *y* 值。
- en: 'Now, consider the following equations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下方程：
- en: '*x* = *r* cos(θ)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*x* = *r* cos(θ)'
- en: '*y* = *r* sin(θ)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = *r* sin(θ)'
- en: Together, these equations are a *parametric* representation of our circle, where
    the parameter is θ, the angle of point (*x*, *y*) relative to the positive x-axis.
    Any value of (*x*, *y*) in these equations will satisfy the original *x*² + *y*²
    = *r*² equation. As you vary θ from 0 to 2π, the x- and y-coordinates generated
    by these equations will form the circle. [Figure 2-2](nsp-venkitachalam503045-0013.xhtml#fig2-2)
    shows this scheme.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方程是我们圆的 *参数化* 表示，其中参数是 θ，表示点 (*x*, *y*) 相对于正 x 轴的角度。任何 (*x*, *y*) 的值都将满足原始的
    *x*² + *y*² = *r*² 方程。当你将 θ 从 0 变化到 2π 时，这些方程生成的 x 和 y 坐标将形成圆形。[图 2-2](nsp-venkitachalam503045-0013.xhtml#fig2-2)
    展示了这一方案。
- en: '![](images/nsp-venkitachalam503045-f02002.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02002.jpg)'
- en: 'Figure 2-2: Describing a circle with a parametric equation'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：用参数方程描述一个圆
- en: Remember, these two equations apply to a circle centered at the origin of the
    coordinate system. You can put a circle at any point in the XY plane by translating
    the center of the circle from the point (0, 0) to the point (*a*, *b*). The more
    general parametric equations then become *x* = *a* + *r* cos(θ) and *y* = *b*
    + *r* sin(θ).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这两个方程适用于以坐标系原点为中心的圆。你可以通过将圆心从 (0, 0) 平移到 (*a*, *b*) 来将圆放置在 XY 平面上的任何点。然后，较一般的参数方程变为
    *x* = *a* + *r* cos(θ) 和 *y* = *b* + *r* sin(θ)。
- en: Developing parametric equations that model a Spirograph toy isn’t that much
    different from developing parametric equations for a circle, since at heart a
    Spirograph simply draws two interlocking circles. [Figure 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3)
    shows a mathematical model of Spirograph-like motion. The model has no gear teeth;
    they’re used in Spirograph toys only to prevent slippage, and in the ideal world
    of mathematical modeling, you don’t have to worry about anything slipping.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 开发参数方程来模拟涡轮图玩具与开发圆的参数方程并没有太大区别，因为从本质上讲，涡轮图只不过是画两个互锁的圆。[图 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3)
    展示了类似涡轮图运动的数学模型。该模型没有齿轮齿；齿轮齿仅用于涡轮图玩具中防止滑动，在理想的数学建模世界中，你不需要担心任何东西会滑动。
- en: '![](images/nsp-venkitachalam503045-f02003.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02003.jpg)'
- en: 'Figure 2-3: A mathematical model of a Spirograph toy'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3：涡轮图玩具的数学模型
- en: 'In [Figure 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3), *C* is the center
    of the smaller circle, *P* is the pen’s tip, and *q* is the angle of *C* relative
    to the positive x-axis. The radius of the bigger circle is *R* and that of the
    smaller circle is *r*. You express the ratio of the radii as variable *k*, as
    follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3)中，*C* 是较小圆的中心，*P* 是笔尖，*q*
    是 *C* 相对于正 x 轴的角度。较大圆的半径是 *R*，较小圆的半径是 *r*。你可以将半径的比值表示为变量 *k*，如下所示：
- en: '![](images/nsp-venkitachalam503045-m02001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02001.jpg)'
- en: 'Line segment ![](images/nsp-venkitachalam503045-m02002.jpg) tells you how far
    the pen tip is from the center of the smaller circle. You express the ratio of
    ![](images/nsp-venkitachalam503045-m02002.jpg) to the smaller circle’s radius
    *r* as the variable *l*, like so:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 线段 ![](images/nsp-venkitachalam503045-m02002.jpg) 告诉你笔尖距离较小圆中心的距离。你可以将 ![](images/nsp-venkitachalam503045-m02002.jpg)
    与较小圆的半径 *r* 的比值表示为变量 *l*，如以下所示：
- en: '![](images/nsp-venkitachalam503045-m02003.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02003.jpg)'
- en: 'You can now combine these variables into the following parametric equations
    that represent the x- and y-coordinates of point *P* (the pen) as the smaller
    circle rotates inside the larger one:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以将这些变量结合成以下参数方程，表示较小圆在较大圆内旋转时 *P* 点（即笔尖）的 x 和 y 坐标：
- en: '![](images/nsp-venkitachalam503045-m02004.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02004.jpg)'
- en: '![](images/nsp-venkitachalam503045-m02005.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02005.jpg)'
- en: 'NOTE These curves are called *hypotrochoids*. Although the equations may look
    a bit scary, the derivation is pretty straightforward. See the Wikipedia page
    on Spirographs if you’d like to explore the math: [http://en.wikipedia.org/wiki/Spirograph](http://en.wikipedia.org/wiki/Spirograph).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 这些曲线被称为 *内切轨迹*。虽然方程式看起来有些吓人，但推导过程非常直接。如果你想深入了解数学部分，可以参考维基百科上的涡轮图页面：[http://en.wikipedia.org/wiki/Spirograph](http://en.wikipedia.org/wiki/Spirograph)。
- en: '[Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4) shows an example curve
    drawn with these equations. For this curve, I set *R* to 220, *r* to 65, and *l*
    to 0.8\. By choosing different values for these three parameters and then incrementing
    angle θ, you can produce an endless variety of fascinating curves.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)展示了使用这些方程绘制的示例曲线。对于这条曲线，我将*R*设置为220，*r*设置为65，*l*设置为0.8。通过选择这三个参数的不同值并增量地改变角度θ，你可以生成各种各样迷人的曲线。'
- en: '![](images/nsp-venkitachalam503045-f02004.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02004.jpg)'
- en: 'Figure 2-4: A sample curve'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：一个示例曲线
- en: 'The only task left is to determine when to stop drawing, since Spirographs
    can require many revolutions of the smaller circle around the larger circle to
    form a complete pattern. You can calculate the *periodicity* of the Spirograph
    (how long before the Spirograph starts repeating itself) by looking at the ratio
    of the radii of the inner and outer circles:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的任务是确定何时停止绘制，因为Spirographs可能需要小圆围绕大圆旋转多次才能形成完整的图案。你可以通过观察内外圆的半径比来计算Spirograph的*周期性*（即Spirograph开始重复的时间间隔）：
- en: '![](images/nsp-venkitachalam503045-m02006.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02006.jpg)'
- en: 'Reduce this fraction by dividing the numerator and denominator by the *greatest
    common divisor (**GCD)*. Then the numerator tells you how many periods the curve
    needs to complete itself. For example, in [Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4),
    the GCD of (*r*, *R*) is 5:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将分子和分母除以*最大公约数（**GCD**）*，可以简化这个分数。然后，分子告诉你曲线需要多少周期才能完成自身。例如，在[图 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)中，(*r*,
    *R*)的GCD是5：
- en: '![](images/nsp-venkitachalam503045-m02007.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02007.jpg)'
- en: This tells you that the curve will start repeating itself after 13 revolutions
    of the smaller circle around the larger circle. The 44 in the denominator tells
    you the number of times the smaller circle revolves around its own center, which
    gives you a hint as to the shape of the curve. If you count the petals (or lobes)
    in the drawing in [Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4), you’ll
    see there are exactly 44!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉你，在小圆围绕大圆旋转13圈后，曲线将开始重复自身。分母中的44告诉你小圆围绕其自身中心旋转的次数，这也为你提供了曲线形状的提示。如果你数一下[图
    2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)中的花瓣（或叶片），你会发现正好是44个！
- en: Once you express the radii ratio in the reduced form *r*/*R*, the range for
    the parameter θ to draw the spiro is [0, 2π*r*]. This tells you when to stop drawing
    a particular spiro. In the case of [Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4),
    you’d stop when θ reaches 26π (that is, 2π × 13). Without knowing the ending range
    of the angle, you’d end up looping around, repeating the curve unnecessarily.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将半径比表示为简化形式的*r*/*R*，绘制Spirograph的角度参数θ的范围是[0, 2π*r*]。这告诉你何时停止绘制特定的Spirograph。在[图
    2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)的例子中，你应该在θ达到26π（即2π × 13）时停止。如果没有知道角度的结束范围，你将会不停地循环，重复曲线。
- en: '[Drawing Curves with turtle Graphics](nsp-venkitachalam503045-0008.xhtml#rbh0402)'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[使用turtle图形绘制曲线](nsp-venkitachalam503045-0008.xhtml#rbh0402)'
- en: Python’s `turtle` module doesn’t have a method for drawing curved lines. Instead,
    you’ll draw a spiro as a collection of straight lines between different points
    calculated with the parametric equations discussed in the previous section. As
    long as the change in angle θ from one point to the next is relatively small,
    the result will appear curved.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`turtle`模块没有绘制曲线的功能。相反，你将通过之前讨论的参数方程计算出不同点之间的直线来绘制Spirograph。只要从一个点到下一个点的角度θ变化相对较小，结果就会看起来是弯曲的。
- en: 'To demonstrate, the following program draws a circle with `turtle`. It uses
    our basic parametric equations for a circle, *x* = *a* + *r* cos(θ) and *y* = *b* +
    *r* sin(θ), to calculate points along the circle, and it connects those points
    with straight lines. Technically, the program actually produces an *N*-sided polygon,
    but because the angle parameter will change in small increments, *N* will be very
    large, and the polygon will look like a circle. Enter the following code, save
    it as *drawcircle.py*, and run it in Python:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，以下程序使用`turtle`绘制一个圆。它利用我们基本的圆的参数方程，*x* = *a* + *r* cos(θ) 和 *y* = *b* +
    *r* sin(θ)，来计算圆上的点，并通过直线连接这些点。从技术上讲，该程序实际上生成的是一个*N*边的多边形，但由于角度参数会以小的增量变化，*N*会非常大，因此多边形看起来就像一个圆。输入以下代码，将其保存为*drawcircle.py*，并在Python中运行：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here you define the `drawCircleTurtle()` function, whose parameters are the
    center of the circle to be drawn, (*x*, *y*), and the circle’s radius, *r*. The
    function starts by moving the turtle into position at the first point on the circle’s
    horizontal axis: (*x* + *r*, *y*) ❶. The calls to `up()` and `down()` prevent
    the turtle from drawing while it’s getting into position. Next, you start a loop
    using `range(0, 365, 5)`, which increments the variable `i` in steps of 5 from
    0 to 360 ❷. The `i` variable is the angle parameter you’ll pass into the parametric
    circle equations, but first you convert it from degrees to radians ❸. (Most computer
    programs require radians for angle-based calculations.)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你定义了 `drawCircleTurtle()` 函数，其参数是要绘制的圆的中心（*x*，*y*）和圆的半径 *r*。该函数首先将海龟移动到圆的水平轴上的第一个点位置：（*x*
    + *r*，*y*）❶。调用 `up()` 和 `down()` 防止海龟在进入位置时进行绘制。接下来，你启动一个使用 `range(0, 365, 5)`
    的循环，它将变量 `i` 从 0 增加到 360，每次增加 5❷。`i` 变量是你将传递给参数化圆方程的角度参数，但首先你需要将其从度数转换为弧度❸。（大多数计算机程序需要使用弧度进行角度计算。）
- en: Compute the next set of circle coordinates using the two parametric equations,
    and you set the turtle’s position accordingly ❹. This draws a straight line from
    the last turtle position to the newly calculated one. Since you’re changing the
    angle parameter by just 5 degrees at a time, the straight lines will create the
    appearance of a round circle.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个参数方程计算下一组圆坐标，并相应地设置海龟的位置❹。这会从海龟的上一个位置绘制一条直线到新计算的位置。由于你每次只改变角度参数 5 度，直线将呈现出圆形的外观。
- en: Now that you have your function, you call it to draw a circle ❺. Calling `turtle.mainloop()`
    keeps the `tkinter` window open so that you can admire your work. (`tkinter` is
    the default GUI library used by Python.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了你的函数，你可以调用它来绘制一个圆❺。调用 `turtle.mainloop()` 会保持 `tkinter` 窗口打开，这样你就可以欣赏你的作品了。（`tkinter`
    是 Python 默认的图形用户界面库。）
- en: You’re now ready to draw some spiros! You’ll use the same `turtle` approach
    illustrated earlier. All that has to change are the details of the parametric
    equations used to calculate the points.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备好绘制一些螺旋图案了！你将使用之前展示过的相同 `turtle` 方法。唯一需要更改的是用于计算点的参数方程的细节。
- en: '[Requirements](nsp-venkitachalam503045-0008.xhtml#rah0402)'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[要求](nsp-venkitachalam503045-0008.xhtml#rah0402)'
- en: 'You’ll use the following to create your spiros:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用以下代码来创建你的螺旋图案：
- en: • The `turtle` module for drawing
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • `turtle` 模块用于绘图
- en: • `Pillow`, a fork of the *Python Imaging Library (**PIL)*, to save the spiro
    images
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • `Pillow`，一个 *Python Imaging Library (**PIL)* 的分支，用于保存螺旋图像
- en: '[The Code](nsp-venkitachalam503045-0008.xhtml#rah0403)'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[代码](nsp-venkitachalam503045-0008.xhtml#rah0403)'
- en: First you’ll define a class `Spiro` to draw the curves. You can use this class
    either to draw a single curve with customizable parameters or as part of an animation
    that draws several random spiros concurrently. To coordinate the animation, you’ll
    define another class called `SpiroAnimator`. At the top level of the program,
    you’ll write a function to save your drawings as image files, and you’ll use the
    `main()` function to take in user input and set the drawing in motion.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先你将定义一个 `Spiro` 类来绘制曲线。你可以使用这个类来绘制单个具有可定制参数的曲线，或者作为一个动画的一部分，绘制多个随机螺旋图案并行运行。为了协调动画，你将定义另一个名为
    `SpiroAnimator` 的类。在程序的顶层，你将编写一个函数来将你的绘图保存为图像文件，并使用 `main()` 函数来获取用户输入并启动绘图。
- en: To see the full project code, skip ahead to [“The Complete Code”](nsp-venkitachalam503045-0013.xhtml#ah0407)
    on [page 36](nsp-venkitachalam503045-0013.xhtml#p36). You can also download the
    code for this project from [https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py](https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的项目代码，请跳到[“完整代码”](nsp-venkitachalam503045-0013.xhtml#ah0407)在[第36页](nsp-venkitachalam503045-0013.xhtml#p36)。你也可以从[https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py](https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py)下载该项目的代码。
- en: '[Drawing the Spiros](nsp-venkitachalam503045-0008.xhtml#rbh0403)'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[绘制螺旋图案](nsp-venkitachalam503045-0008.xhtml#rbh0403)'
- en: 'The `Spiro` class features methods for drawing an individual spiro pattern.
    Here’s the `Spiro` class’s constructor:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spiro` 类提供了绘制单个螺旋图案的方法。以下是 `Spiro` 类的构造函数：'
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Spiro` constructor creates a new `turtle` object ❶. This way, each individual
    `Spiro` object will have its own `turtle` object associated with it, meaning you
    can create multiple `Spiro` objects to draw a bunch of spiros simultaneously.
    You set the shape of the turtle cursor to a turtle ❷. (You’ll find other choices
    in the `turtle` documentation at [https://docs.python.org/3/library/turtle.xhtml](https://docs.python.org/3/library/turtle.xhtml).)
    You set the angle increment for the parametric drawing to 5 degrees ❸ and create
    a Boolean `drawingComplete` flag for indicating when the spiro is done ❹. This
    flag will be useful when multiple `Spiro` objects are drawing in tandem; it allows
    you to keep track of whether a particular spiro is complete. You finish the constructor
    by calling two setup methods, as discussed next.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spiro` 构造函数创建一个新的 `turtle` 对象 ❶。这样，每个独立的 `Spiro` 对象都会有一个与之关联的 `turtle` 对象，这意味着你可以创建多个
    `Spiro` 对象，同时绘制多个螺旋线。你将海龟光标的形状设置为海龟 ❷。（你可以在 [https://docs.python.org/3/library/turtle.xhtml](https://docs.python.org/3/library/turtle.xhtml)
    的 `turtle` 文档中找到其他形状选项。）你将参数绘图的角度增量设置为 5 度 ❸，并创建一个布尔类型的 `drawingComplete` 标志，用于指示螺旋线是否绘制完成
    ❹。这个标志在多个 `Spiro` 对象并行绘制时非常有用，它可以帮助你追踪某一条螺旋线是否完成。构造函数的最后，你调用了两个设置方法，接下来会讨论这些方法。'
- en: The Setup Methods
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置方法
- en: 'The `Spiro` class’s `setparams()` and `restart()` methods both help with some
    setup that needs to be done before a spiro pattern can be drawn. Let’s look at
    the `setparams()` method first:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spiro` 类的 `setparams()` 和 `restart()` 方法都用于在绘制螺旋图案之前进行必要的设置。我们首先来看一下 `setparams()`
    方法：'
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First you store the coordinates of the center of the spiro (`xc` and `yc`).
    Then you convert the radius of each circle (`R` and `r`) to an integer and store
    the values. You also store `l`, which defines the position of the pen, and `col`,
    which determines the spiro’s color. Next, you use the `gcd()` method from Python’s
    built-in `math` module to compute the GCD of the radii ❶. You use this information
    to determine the periodicity of the curve, which you save as `self.nRot` ❷. Finally,
    you set the starting value of the angle parameter, `a`, to `0` ❸.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你存储螺旋线中心的坐标（`xc` 和 `yc`）。然后你将每个圆的半径（`R` 和 `r`）转换为整数并存储这些值。你还存储了 `l`，它定义了画笔的位置，以及
    `col`，它决定了螺旋线的颜色。接下来，你使用 Python 内置 `math` 模块中的 `gcd()` 方法来计算半径的最大公约数 ❶。你利用这些信息来确定曲线的周期性，并将其保存为
    `self.nRot` ❷。最后，你将角度参数 `a` 的起始值设为 `0` ❸。
- en: 'The `restart()` method continues with the setup by resetting the drawing parameters
    for the `Spiro` object and getting it into position to draw a spiro. This method
    makes it possible to reuse the same `Spiro` object to draw multiple spiros, one
    after the other, as part of the program’s animation. The program will call `restart()`
    each time the object is ready to draw a new spiro. Here’s the method:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`restart()` 方法通过重置 `Spiro` 对象的绘图参数并将其定位到绘制螺旋线的位置来继续设置工作。这个方法使得可以重复使用同一个 `Spiro`
    对象来依次绘制多个螺旋线，作为程序动画的一部分。每当对象准备好绘制新的螺旋线时，程序会调用 `restart()` 方法。以下是该方法的代码：'
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You reset the `drawingComplete` flag to `False`, indicating the object is ready
    to draw a new spiro. Then you show the turtle cursor, in case it was hidden. Next
    lift up the pen ❶ so you can move to the first position at ❹ without drawing a
    line. At ❷, you’re just using some local variables to keep the code compact. Then
    you feed those variables to the spiro parametric equations to compute the x- and
    y-coordinates of the curve’s starting point, using `0` as an initial value for
    angle `a` ❸. Finally, once the turtle is in place, you set the pen down so the
    turtle can start drawing the spiro ❺.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `drawingComplete` 标志重置为 `False`，表示该对象准备好绘制新的螺旋线。然后你显示海龟光标，以防它被隐藏。接下来抬起画笔
    ❶，这样你可以在不绘制线条的情况下移动到第一个位置 ❹。在 ❷ 处，你只是使用一些局部变量来保持代码的简洁。然后你将这些变量传递给螺旋线的参数方程，计算曲线起点的
    x 和 y 坐标，使用 `0` 作为角度 `a` 的初始值 ❸。最后，一旦海龟定位好，你就放下画笔，让海龟开始绘制螺旋线 ❺。
- en: The draw() Method
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`draw()` 方法'
- en: 'If you use command line options to set the parameters of a spiro, the program
    will draw just that one spiro, using the `Spiro` class’s `draw()` method. This
    method draws the entire spiro all in one go, as a continuous sequence of straight-line
    segments:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用命令行选项来设置螺旋线的参数，程序只会绘制那一条螺旋线，使用 `Spiro` 类的 `draw()` 方法。该方法一次性绘制整个螺旋线，作为一连串连续的直线段：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here you iterate through the complete range of the parameter `i`, which is expressed
    in degrees as 360 times `nRot` ❶. You use the parametric equations to compute
    the x- and y-coordinates for each value of the `i` parameter ❷, calling the turtle’s
    `setpos()` method ❸ to draw the line from one point to the next. This method is
    enclosed in a `try` block so that if an exception arises—such as the user closing
    the window in the middle of the drawing process—you can catch it and exit gracefully.
    Finally, you hide the cursor because you’ve finished drawing ❹.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你遍历参数`i`的完整范围，该范围以度数表示为 360 乘以`nRot` ❶。你使用参数方程计算每个`i`参数值对应的 x 和 y 坐标 ❷，调用海龟的`setpos()`方法
    ❸，从一个点画到下一个点。此方法被包含在`try`块中，这样如果出现异常—比如用户在绘制过程中关闭了窗口—你可以捕获异常并优雅地退出。最后，你隐藏光标，因为你已经完成绘制
    ❹。
- en: The update() Method
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`update()` 方法'
- en: 'If you don’t use any command line options, the program will draw multiple random
    spiros as an animation. This approach requires some restructuring of the drawing
    code we just looked at. Instead of drawing an entire spiro in one go, you need
    a method that draws just a single-line segment of the spiro. Then you’ll call
    that method at every time step in the animation. This `update()` method of the
    `Spiro` class fits the bill:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用任何命令行选项，程序将绘制多个随机的螺旋图形作为动画。这个方法需要对我们刚刚看到的绘图代码进行一些重构。你需要一种方法来绘制螺旋的单个线段，而不是一次性绘制整个螺旋图形。然后，你将在动画的每个时间步调用该方法。`Spiro`类的`update()`方法正好满足这个需求：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You first check to see whether the `drawingComplete` flag is set ❶; if not,
    you continue through the rest of the code. You increment the current angle ❷,
    calculate the (*x*, *y*) position corresponding to the current angle ❸, and move
    the turtle there, drawing the line segment in the process ❹. This is just like
    the code inside the `for()` loop in the `draw()` method, except it happens only
    once.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查`drawingComplete`标志是否已设置 ❶；如果没有，继续执行其余代码。你增加当前角度 ❷，计算与当前角度对应的 (*x*, *y*)
    位置 ❸，并将海龟移动到该位置，在此过程中绘制线段 ❹。这就像是`draw()`方法中的`for()`循环内部的代码，区别在于它只执行一次。
- en: When I discussed the Spirograph parametric equations, I talked about the periodicity
    of the curve. A Spirograph starts repeating itself after a certain angle. You
    finish the `update()` function by checking whether the angle has reached the full
    range computed for this particular curve ❺. If so, you set the `drawingComplete`
    flag because the spiro is finished. Finally, you hide the turtle cursor so you
    can see your beautiful creation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我讨论Spirograph参数方程时，我提到过曲线的周期性。Spirograph在某个角度之后会开始重复。你通过检查角度是否已达到为此特定曲线计算的完整范围来完成`update()`函数
    ❺。如果是这样，你就设置`drawingComplete`标志，因为螺旋图形已经完成。最后，你隐藏海龟光标，这样你就可以看到你美丽的作品。
- en: '[Coordinating the Animation](nsp-venkitachalam503045-0008.xhtml#rbh0404)'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[协调动画](nsp-venkitachalam503045-0008.xhtml#rbh0404)'
- en: The `SpiroAnimator` class will let you draw several random spiros simultaneously
    as an animation. This class coordinates the activity of multiple `Spiro` objects
    with randomly assigned parameters, using a timer to regularly call each `Spiro`
    object’s `update()` method. This technique updates the graphics periodically and
    lets the program process events such as button presses, mouse clicks, and so on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpiroAnimator`类将允许你同时绘制多个随机的螺旋图形作为动画。该类协调多个`Spiro`对象的活动，这些对象具有随机分配的参数，并使用计时器定期调用每个`Spiro`对象的`update()`方法。这种技术定期更新图形，并让程序处理诸如按钮按下、鼠标点击等事件。'
- en: 'Let’s look at the `SpiroAnimator` class’s constructor first:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看`SpiroAnimator`类的构造函数：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `SpiroAnimator` constructor sets `deltaT` to `10`, which is the time interval
    in milliseconds you’ll use for the timer ❶. You then store the dimensions of the
    turtle window ❷ and initialize a flag that will be used to indicate that a restart
    is in progress ❸. In a loop that repeats *N* times (`N` is passed into `SpiroAnimator`
    in the constructor), you create new `Spiro` objects ❺ and add them to a `spiros`
    list. Before creating each `Spiro` object, you call the `genRandomParams()` helper
    method ❹ to randomly assign the spiro’s parameters (we’ll look at this method
    next). The `rparams` here is a tuple that you need to pass into the `Spiro` constructor.
    However, the constructor expects multiple arguments, so you use the Python `*`
    operator to unpack the tuple into a series of arguments. Finally, you set the
    `turtle.ontimer()` method to call `update()` after `deltaT` milliseconds ❻, which
    sets the animation in motion.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpiroAnimator`构造函数将`deltaT`设置为`10`，这是你将在定时器中使用的毫秒时间间隔❶。然后你存储海龟窗口的尺寸❷，并初始化一个标志，用于指示重启正在进行中❸。在一个重复*N*次的循环中（`N`是作为构造函数参数传递给`SpiroAnimator`的），你创建新的`Spiro`对象❺并将它们添加到`spiros`列表中。在创建每个`Spiro`对象之前，你调用`genRandomParams()`辅助方法❹来随机分配螺旋的参数（我们接下来会看这个方法）。这里的`rparams`是一个元组，你需要将它传递给`Spiro`构造函数。然而，构造函数期望多个参数，因此你使用Python的`*`运算符将元组解包成一系列参数。最后，你设置`turtle.ontimer()`方法，在`deltaT`毫秒后调用`update()`❻，从而启动动画。'
- en: Generating Random Parameters
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成随机参数
- en: 'You’ll use the `genRandomParams()` method to generate random parameters to
    send to each `Spiro` object as it’s created to produce a wide variety of curves.
    You’ll also call this method each time a `Spiro` object finishes drawing a spiro
    and is ready to start drawing a new one:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用`genRandomParams()`方法生成随机参数，并在每个`Spiro`对象创建时将这些参数发送给它，以生成各种各样的曲线。每次`Spiro`对象完成绘制一个螺旋并准备开始绘制新的螺旋时，你也会调用这个方法：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To generate random numbers, you use three methods from Python’s `random` module:
    `randint()`, which returns random integers in the specified range; `uniform()`,
    which does the same for floating-point numbers; and `random()`, which returns
    a float between 0 and 1\. You set `R` to a random integer between 50 and the value
    of half the smallest dimension of your window, and you set `r` to between 10 percent
    and 90 percent of `R`. Then you set `l` to a random fraction between 0.1 and 0.9.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成随机数，你使用Python的`random`模块中的三个方法：`randint()`，它返回指定范围内的随机整数；`uniform()`，它对浮点数执行相同操作；以及`random()`，它返回一个介于0和1之间的浮点数。你将`R`设置为50到窗口最小维度一半之间的随机整数，并将`r`设置为`R`的10%到90%之间。然后你将`l`设置为0.1到0.9之间的随机分数。
- en: You next select a random point on the screen to place the center of the spiro
    by selecting random x- and y-coordinates (`xc` and `yc`) from within the screen
    boundaries. You assign a random color `col` to the curve by setting random values
    for the red, green, and blue color components (these are defined on a scale from
    0 to 1). Finally, all of your calculated parameters are returned as a tuple ❶.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你选择屏幕上的一个随机点来确定螺旋的中心，通过在屏幕边界内随机选择x和y坐标（`xc`和`yc`）。你通过设置随机的红色、绿色和蓝色色彩分量（这些值在0到1的范围内）为曲线分配一个随机颜色`col`。最后，所有计算出的参数将作为一个元组❶返回。
- en: Restarting the Animation
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重启动画
- en: 'The `SpiroAnimator` class has its own `restart()` method for restarting the
    animation to draw a new set of spiros:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpiroAnimator`类有它自己的`restart()`方法，用于重启动画以绘制一组新的螺旋：'
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method loops through all the `Spiro` objects. For each one, you clear the
    previous drawing and randomly generate a new set of spiro parameters. Then you
    use the `Spiro` object’s setup methods, `setparams()` and `restart()`, to assign
    the new parameters and get the object ready to draw the next spiro. The `self.restarting`
    flag ❶ prevents this method from being called before it’s had a chance to complete,
    which could happen if the user repeatedly hits the spacebar. The flag is reset
    at the end of the method so that the next restart won’t be ignored ❷.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法遍历所有的`Spiro`对象。对于每个对象，你清除之前的绘图并随机生成一组新的螺旋参数。然后你使用`Spiro`对象的设置方法`setparams()`和`restart()`，为它分配新的参数，并让对象准备好绘制下一个螺旋。`self.restarting`标志❶防止这个方法在完成之前被调用，如果用户反复按空格键，就可能发生这种情况。该标志会在方法结束时重置，这样下次重启就不会被忽略❷。
- en: Updating the Animation
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新动画
- en: 'The following code shows the `update()` method in `SpiroAnimator`, which is
    called by the timer every 10 milliseconds to update all the `Spiro` objects used
    in the animation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了 `SpiroAnimator` 中的 `update()` 方法，该方法每 10 毫秒由定时器调用一次，用于更新动画中使用的所有 `Spiro`
    对象：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `update()` method uses a counter `nComplete` to track the number of `Spiro`
    objects that have finished drawing ❶. The method loops through the list of `Spiro`
    objects and updates them ❷, which draws one more line segment in each spiro. You
    increment the counter if a `Spiro` is done ❸.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()` 方法使用计数器 `nComplete` 来追踪已完成绘制的 `Spiro` 对象的数量 ❶。该方法遍历 `Spiro` 对象列表并更新它们
    ❷，每次更新都会在每个 spiro 中绘制一个新的线段。如果某个 `Spiro` 已完成绘制，你会增加计数器 ❸。'
- en: Outside the loop, you check the counter to determine whether all the objects
    have finished drawing ❹. If so, you restart the animation with fresh spiros by
    calling the `restart()` method. The `update()` method ends with a call to the
    `turtle` module’s `ontimer()` method ❺, which calls `update()` again after `deltaT`
    milliseconds. This is what keeps the animation going.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环外，你检查计数器，以确定所有对象是否已经完成绘制 ❹。如果完成，你通过调用 `restart()` 方法重新开始动画，生成新的 spiro。`update()`
    方法最后会调用 `turtle` 模块的 `ontimer()` 方法 ❺，在 `deltaT` 毫秒后再次调用 `update()`。这就是保持动画持续进行的方式。
- en: Showing or Hiding the Cursor
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示或隐藏游标
- en: You use the following method of the `SpiroAnimator` class to toggle the turtle
    cursors on and off. Turning them off makes the drawing go more quickly.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用 `SpiroAnimator` 类的以下方法来切换 turtle 游标的显示与隐藏。关闭游标可以加快绘图速度。
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This method uses built-in `turtle` methods to hide the cursor if it’s visible
    or to show the cursor if it isn’t. Later, you’ll see how this `toggleTurtles()`
    method is triggered by keypresses while the animation is running.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法使用内置的 `turtle` 方法来隐藏游标（如果它可见）或显示游标（如果它不可见）。稍后你将看到，当动画运行时，这个 `toggleTurtles()`
    方法如何通过按键触发。
- en: '[Saving the Curves](nsp-venkitachalam503045-0008.xhtml#rbh0405)'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[保存曲线](nsp-venkitachalam503045-0008.xhtml#rbh0405)'
- en: 'After all your hard work generating spiros, it would be nice to have a way
    to save the results. The stand-alone `saveDrawing()` function saves the contents
    of the drawing window as a PNG image file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在你辛苦生成 spiro 之后，有一种方法可以保存结果会很方便。独立的 `saveDrawing()` 函数将绘图窗口的内容保存为 PNG 图片文件：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You hide the turtle cursors so that you won’t see them in the final drawing
    ❶. Then you use `datetime()` to generate unique, timestamp-based names for the
    image files (in the *day-month-year-hour-minute-second* format) ❷. You append
    this string to *spiro-* to generate the filename.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你隐藏 turtle 游标，这样它们就不会出现在最终的绘图中 ❶。然后，你使用 `datetime()` 生成基于时间戳的唯一图像文件名（采用 *日-月-年-小时-分钟-秒*
    格式） ❷。你将这个字符串附加到 *spiro-* 后生成文件名。
- en: The `turtle` program uses user interface (UI) windows created by `tkinter`,
    and you use the `canvas` object of `tkinter` to save the window in the Embedded
    PostScript (EPS) file format ❸. Because EPS is vector based, you can use it to
    print your images at high resolution, but the PNG format is more versatile, so
    you use `Pillow` to open the EPS file ❹ and save it as a PNG file ❺. Finally,
    you unhide the turtle cursors.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`turtle` 程序使用由 `tkinter` 创建的用户界面（UI）窗口，你使用 `tkinter` 的 `canvas` 对象将窗口保存为嵌入式
    PostScript（EPS）文件格式 ❸。由于 EPS 是基于矢量的，你可以使用它以高分辨率打印图像，但 PNG 格式更为通用，因此你使用 `Pillow`
    打开 EPS 文件 ❹ 并将其保存为 PNG 文件 ❺。最后，你会重新显示 turtle 游标。'
- en: '[Parsing Command Line Arguments and Initialization](nsp-venkitachalam503045-0008.xhtml#rbh0406)'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[解析命令行参数和初始化](nsp-venkitachalam503045-0008.xhtml#rbh0406)'
- en: 'Most projects in this book have command line arguments for customizing the
    code. Rather than trying to parse them by hand and creating a mess, delegate this
    mundane task to Python’s `argparse` module. That’s what you do in the first part
    of the spiro program’s `main()` function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数项目都有命令行参数，用于定制代码。与其试图手动解析它们并制造混乱，不如将这项繁琐的任务委托给 Python 的 `argparse` 模块。这就是你在
    spiro 程序的 `main()` 函数的第一部分中所做的：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You create an `ArgumentParser` object to manage the command line arguments ❶.
    Then you add the `--sparams` argument to the parser ❷. It consists of three components,
    for the *R*, *r*, and *l* parameters of a spiro. You use the `dest` option to
    specify the variable name the values should be stored under once the arguments
    are parsed, and `required=False` means this argument is optional. You call the
    `parse_args()` method ❸ to actually parse the arguments. This makes the arguments
    available as properties of the `args` object. In this case, the values of the
    `--sparams` argument will be available through `args.sparams`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个`ArgumentParser`对象来管理命令行参数 ❶。然后，你将`--sparams`参数添加到解析器中 ❷。它包含三个组件，分别是涡旋的*R*、*r*和*l*参数。你使用`dest`选项指定参数解析后存储值的变量名，而`required=False`表示该参数是可选的。你调用`parse_args()`方法
    ❸来实际解析参数。这将使得参数作为`args`对象的属性可以使用。在这个例子中，`--sparams`参数的值将通过`args.sparams`来访问。
- en: NOTE You’ll follow the same basic pattern described here throughout the book
    to create and parse each project’s command line arguments.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你将在本书中按照这里描述的基本模式，创建并解析每个项目的命令行参数。
- en: 'The `main()` function continues by setting up some `turtle` parameters:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数继续设置一些`turtle`参数：'
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You use `setup()` to set the width of the drawing window to 80 percent of the
    screen width ❶. (You could also give `setup()` specific height and origin parameters.)
    Then you set the cursor shape to a turtle and set the title of the program window
    to *Spirographs!* Next, you use `onkey()` with your `saveDrawing()` function to
    instruct the program to save the drawing when you press the S key on your keyboard
    ❷. Calling `listen()` makes the drawing window listen for user events (like keypresses)
    ❸. Finally, you hide the turtle cursor ❹.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`setup()`方法将绘图窗口的宽度设置为屏幕宽度的80% ❶。（你还可以给`setup()`方法指定特定的高度和原点参数。）接着，你将光标形状设置为海龟，并将程序窗口的标题设置为*Spirographs!*
    然后，你使用`onkey()`与`saveDrawing()`函数结合，指示程序在按下键盘上的S键时保存绘图 ❷。调用`listen()`方法使绘图窗口监听用户事件（例如按键输入）
    ❸。最后，你隐藏了海龟光标 ❹。
- en: 'The rest of the `main()` function proceeds as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数的其余部分如下：'
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You first check whether any arguments were given to `--sparams` ❶; if so, the
    program will just draw the one spiro defined by those arguments. The arguments
    currently exist as strings, but you need them to be interpreted as numbers. You
    use a list comprehension to convert them into a list of floats ❷. (A *list comprehension*
    is a Python construct that lets you create a list in a compact and powerful way.
    For example, `a = [2*x for x in range(1, 5)]` creates a list of the first four
    even numbers.) Then you use the parameters to construct a `Spiro` object ❸ (with
    the help of the Python `*` operator, which unpacks the list into a series of arguments)
    and call `draw()` to draw the spiro ❹.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先检查是否给`--sparams`参数提供了任何值 ❶；如果有，程序将仅绘制由这些参数定义的一个涡旋图。当前，这些参数作为字符串存在，但你需要将它们解释为数字。你使用列表推导式将它们转换为浮动数字的列表
    ❷。（*列表推导式*是Python中的一种构造方式，让你以简洁而强大的方式创建列表。例如，`a = [2*x for x in range(1, 5)]`将创建一个包含前四个偶数的列表。）接着，你使用这些参数构造一个`Spiro`对象
    ❸（通过Python的`*`运算符，它将列表解包成一系列参数），并调用`draw()`方法绘制涡旋图 ❹。
- en: If no arguments were specified at the command line, you enter random animation
    mode. For this, you create a `SpiroAnimator` object ❺, passing it the argument
    `4`, which tells it to draw four spiros at once. Then you use two `onkey` calls
    to capture additional keypresses. Pressing the T key will show or hide the turtle
    cursors with the `toggleTurtles()` method, while pressing the spacebar (`space`)
    will call `restart()` to interrupt the animation at any point and start drawing
    four different random spiros. Finally, you call `mainloop()` to tell the `tkinter`
    window to stay open, listening for events ❻.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在命令行没有指定任何参数，则进入随机动画模式。为此，你需要创建一个`SpiroAnimator`对象 ❺，并传递参数`4`，该参数告诉它同时绘制四个涡旋图。接着，你使用两个`onkey`调用来捕捉额外的按键输入。按下T键将通过`toggleTurtles()`方法显示或隐藏海龟光标，而按下空格键（`space`）则会调用`restart()`方法，在任何时候中断动画并开始绘制四个不同的随机涡旋图。最后，你调用`mainloop()`方法，告诉`tkinter`窗口保持打开，监听事件
    ❻。
- en: '[Running the Spirograph Animation](nsp-venkitachalam503045-0008.xhtml#rah0404)'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[运行涡旋动画](nsp-venkitachalam503045-0008.xhtml#rah0404)'
- en: 'Now it’s time to run your program:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候运行你的程序了：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By default, the *spiro.py* program draws four random spiros simultaneously,
    as shown in [Figure 2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5). Pressing
    S saves the drawing, pressing T toggles the cursors, and pressing the spacebar
    restarts the animation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，*spiro.py* 程序同时绘制四个随机的 spiro，如[图 2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5)所示。按
    S 键保存绘图，按 T 键切换光标，按空格键重新开始动画。
- en: '![](images/nsp-venkitachalam503045-f02005.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02005.jpg)'
- en: 'Figure 2-5: A sample run of *spiro.py*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：*spiro.py* 的示例运行
- en: 'Now run the program again, this time passing in parameters at the command line
    to draw a particular spiro:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行程序，这次在命令行传递参数来绘制一个特定的 spiro：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Figure 2-6](nsp-venkitachalam503045-0013.xhtml#fig2-6) shows the output. As
    you can see, this code draws a single spiro with the parameters specified by the
    user, in contrast to [Figure 2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5),
    which displays an animation of several random spiros.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-6](nsp-venkitachalam503045-0013.xhtml#fig2-6) 显示了输出。如你所见，这段代码根据用户指定的参数绘制了一个单一的
    spiro，与[图 2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5)的多个随机 spiro 动画展示不同。'
- en: '![](images/nsp-venkitachalam503045-f02006.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02006.jpg)'
- en: 'Figure 2-6: A sample run of *spiro.py* with specific parameters'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6：带有特定参数的 *spiro.py* 示例运行
- en: Have fun experimenting with different parameters to see how they influence the
    resulting curves.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心，尝试不同的参数，看看它们如何影响结果曲线。
- en: '[Summary](nsp-venkitachalam503045-0008.xhtml#rah0405)'
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[总结](nsp-venkitachalam503045-0008.xhtml#rah0405)'
- en: In this project, you learned how to create Spirograph-like curves. You also
    learned how to adjust the input parameters to generate a variety of different
    curves and to animate them on the screen. I hope you enjoy creating these spiros.
    (You’ll find a surprise in [Chapter 13](nsp-venkitachalam503045-0028.xhtml#ch13),
    where you’ll learn how to project spiros onto a wall!)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你学习了如何创建类似于旋转图形的曲线。你还学习了如何调整输入参数，以生成各种不同的曲线，并在屏幕上动画展示它们。希望你喜欢创建这些 spiro。（你会在[第
    13 章](nsp-venkitachalam503045-0028.xhtml#ch13)发现一个惊喜，在那里你将学习如何将 spiro 投影到墙上！）
- en: '[Experiments!](nsp-venkitachalam503045-0008.xhtml#rah0406)'
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[实验！](nsp-venkitachalam503045-0008.xhtml#rah0406)'
- en: 'Here are some ways to experiment further with spiros:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些进一步尝试 spiro 的方法：
- en: 1\. Now that you know how to draw circles, write a program to draw random *spirals*.
    Find the equation for a *logarithmic spiral* in parametric form and then use it
    to draw the spirals.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 现在你知道如何绘制圆形了，写一个程序来绘制随机的 *螺旋线*。找到 *对数螺旋* 的参数方程，然后用它来绘制螺旋线。
- en: '2\. You might have noticed that the turtle cursor is always oriented to the right
    as the curves are drawn, but that’s not how turtles move! Orient the turtle so
    that, as the curve is being drawn, it faces in the direction of drawing. (Hint:
    calculate the direction vector between successive points for every step and reorient
    the turtle using the `turtle`.`setheading()` method.)'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 你可能注意到，乌龟光标在绘制曲线时总是朝右，但这并不是乌龟的移动方式！将乌龟的方向调整为，在绘制曲线时，它朝着绘制的方向。 （提示：计算每一步连续点之间的方向向量，并使用
    `turtle`.`setheading()` 方法重新调整乌龟的方向。）
- en: '[The Complete Code](nsp-venkitachalam503045-0008.xhtml#rah0407)'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[完整代码](nsp-venkitachalam503045-0008.xhtml#rah0407)'
- en: 'Here’s the complete Spirograph program:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的 Spirograph 程序：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
