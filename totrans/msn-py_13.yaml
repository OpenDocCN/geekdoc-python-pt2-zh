- en: '**A'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ESCAPE: THE COMPLETE GAME LISTING**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This appendix shows the final listing for the *Escape* game. You can use it
    as a reference to see where to place particular functions and sections, or read
    through it if you want to see the whole listing in one place. This listing doesn’t
    include the temporary sections you wrote while building the game, such as the
    EXPLORER section. It just contains the code that is in the final game.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can also download the *escape.py* listing and read it in IDLE,
    which lets you search it by pressing CTRL-F.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve changed PLAYER_NAME to “Captain” in this listing. When you’re building
    or customizing the game, you can use your own name (see ➊ in [Listing 4-1](ch04.xhtml#ch04list1)
    on [page 63](ch04.xhtml#page_63)).
  prefs: []
  type: TYPE_NORMAL
- en: To test this project, I rebuilt the game using the instructions in this book.
    This game listing has been copied from game code that has been tested to completion
    on Windows, the Raspberry Pi 3 Model B+, and the Raspberry Pi 2 Model B.
  prefs: []
  type: TYPE_NORMAL
- en: Escape - A Python Adventure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: by Sean McManus / www.sean.co.uk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Art by Rafael Pimenta
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typed in by PUT YOUR NAME HERE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: import time, random, math
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'VARIABLES ##'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'WIDTH = 800 #window size'
  prefs: []
  type: TYPE_NORMAL
- en: HEIGHT = 800
  prefs: []
  type: TYPE_NORMAL
- en: '#PLAYER variables'
  prefs: []
  type: TYPE_NORMAL
- en: 'PLAYER_NAME = "Captain" # change this to your name!'
  prefs: []
  type: TYPE_NORMAL
- en: 'FRIEND1_NAME = "Karen" # change this to a friend''s name!'
  prefs: []
  type: TYPE_NORMAL
- en: 'FRIEND2_NAME = "Leo" # change this to another friend''s name!'
  prefs: []
  type: TYPE_NORMAL
- en: 'current_room = 31 # start room = 31'
  prefs: []
  type: TYPE_NORMAL
- en: top_left_x = 100
  prefs: []
  type: TYPE_NORMAL
- en: top_left_y = 150
  prefs: []
  type: TYPE_NORMAL
- en: DEMO_OBJECTS = [images.floor, images.pillar, images.soil]
  prefs: []
  type: TYPE_NORMAL
- en: LANDER_SECTOR = random.randint(1, 24)
  prefs: []
  type: TYPE_NORMAL
- en: LANDER_X = random.randint(2, 11)
  prefs: []
  type: TYPE_NORMAL
- en: LANDER_Y = random.randint(2, 11)
  prefs: []
  type: TYPE_NORMAL
- en: TILE_SIZE = 30
  prefs: []
  type: TYPE_NORMAL
- en: player_y, player_x = 2, 5
  prefs: []
  type: TYPE_NORMAL
- en: game_over = False
  prefs: []
  type: TYPE_NORMAL
- en: PLAYER = {
  prefs: []
  type: TYPE_NORMAL
- en: '"left": [images.spacesuit_left, images.spacesuit_left_1,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_left_2, images.spacesuit_left_3,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_left_4
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"right": [images.spacesuit_right, images.spacesuit_right_1,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_right_2, images.spacesuit_right_3,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_right_4
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"up": [images.spacesuit_back, images.spacesuit_back_1,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_back_2, images.spacesuit_back_3,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_back_4
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"down": [images.spacesuit_front, images.spacesuit_front_1,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_front_2, images.spacesuit_front_3,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_front_4
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: player_direction = "down"
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: player_image = PLAYER[player_direction][player_frame]
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_x, player_offset_y = 0, 0
  prefs: []
  type: TYPE_NORMAL
- en: PLAYER_SHADOW = {
  prefs: []
  type: TYPE_NORMAL
- en: '"left": [images.spacesuit_left_shadow, images.spacesuit_left_1_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_left_2_shadow, images.spacesuit_left_3_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_left_3_shadow
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"right": [images.spacesuit_right_shadow, images.spacesuit_right_1_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_right_2_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_right_3_shadow, images.spacesuit_right_3_shadow
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"up": [images.spacesuit_back_shadow, images.spacesuit_back_1_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_back_2_shadow, images.spacesuit_back_3_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_back_3_shadow
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"down": [images.spacesuit_front_shadow, images.spacesuit_front_1_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_front_2_shadow, images.spacesuit_front_3_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.spacesuit_front_3_shadow
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: player_image_shadow = PLAYER_SHADOW["down"][0]
  prefs: []
  type: TYPE_NORMAL
- en: PILLARS = [
  prefs: []
  type: TYPE_NORMAL
- en: images.pillar, images.pillar_95, images.pillar_80,
  prefs: []
  type: TYPE_NORMAL
- en: images.pillar_60, images.pillar_50
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: wall_transparency_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: BLACK = (0, 0, 0)
  prefs: []
  type: TYPE_NORMAL
- en: BLUE = (0, 155, 255)
  prefs: []
  type: TYPE_NORMAL
- en: YELLOW = (255, 255, 0)
  prefs: []
  type: TYPE_NORMAL
- en: WHITE = (255, 255, 255)
  prefs: []
  type: TYPE_NORMAL
- en: GREEN = (0, 255, 0)
  prefs: []
  type: TYPE_NORMAL
- en: RED = (128, 0, 0)
  prefs: []
  type: TYPE_NORMAL
- en: air, energy = 100, 100
  prefs: []
  type: TYPE_NORMAL
- en: suit_stitched, air_fixed = False, False
  prefs: []
  type: TYPE_NORMAL
- en: launch_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##    MAP    ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: MAP_WIDTH = 5
  prefs: []
  type: TYPE_NORMAL
- en: MAP_HEIGHT = 10
  prefs: []
  type: TYPE_NORMAL
- en: MAP_SIZE = MAP_WIDTH * MAP_HEIGHT
  prefs: []
  type: TYPE_NORMAL
- en: GAME_MAP = [ ["Room 0 - where unused objects are kept", 0, 0, False, False]
    ]
  prefs: []
  type: TYPE_NORMAL
- en: outdoor_rooms = range(1, 26)
  prefs: []
  type: TYPE_NORMAL
- en: 'for planetsectors in range(1, 26): #rooms 1 to 25 are generated here'
  prefs: []
  type: TYPE_NORMAL
- en: GAME_MAP.append( ["The dusty planet surface", 13, 13, True, True] )
  prefs: []
  type: TYPE_NORMAL
- en: GAME_MAP  += [
  prefs: []
  type: TYPE_NORMAL
- en: '#["Room name", height, width, Top exit?, Right exit?]'
  prefs: []
  type: TYPE_NORMAL
- en: '["The airlock", 13, 5, True, False], # room 26'
  prefs: []
  type: TYPE_NORMAL
- en: '["The engineering lab", 13, 13, False, False], # room 27'
  prefs: []
  type: TYPE_NORMAL
- en: '["Poodle Mission Control", 9, 13, False, True], # room 28'
  prefs: []
  type: TYPE_NORMAL
- en: '["The viewing gallery", 9, 15, False, False], # room 29'
  prefs: []
  type: TYPE_NORMAL
- en: '["The crew''s bathroom", 5, 5, False, False], # room 30'
  prefs: []
  type: TYPE_NORMAL
- en: '["The airlock entry bay", 7, 11, True, True], # room 31'
  prefs: []
  type: TYPE_NORMAL
- en: '["Left elbow room", 9, 7, True, False], # room 32'
  prefs: []
  type: TYPE_NORMAL
- en: '["Right elbow room", 7, 13, True, True], # room 33'
  prefs: []
  type: TYPE_NORMAL
- en: '["The science lab", 13, 13, False, True], # room 34'
  prefs: []
  type: TYPE_NORMAL
- en: '["The greenhouse", 13, 13, True, False], # room 35'
  prefs: []
  type: TYPE_NORMAL
- en: '[PLAYER_NAME + "''s sleeping quarters", 9, 11, False, False], # room 36'
  prefs: []
  type: TYPE_NORMAL
- en: '["West corridor", 15, 5, True, True], # room 37'
  prefs: []
  type: TYPE_NORMAL
- en: '["The briefing room", 7, 13, False, True], # room 38'
  prefs: []
  type: TYPE_NORMAL
- en: '["The crew''s community room", 11, 13, True, False], # room 39'
  prefs: []
  type: TYPE_NORMAL
- en: '["Main Mission Control", 14, 14, False, False], # room 40'
  prefs: []
  type: TYPE_NORMAL
- en: '["The sick bay", 12, 7, True, False], # room 41'
  prefs: []
  type: TYPE_NORMAL
- en: '["West corridor", 9, 7, True, False], # room 42'
  prefs: []
  type: TYPE_NORMAL
- en: '["Utilities control room", 9, 9, False, True], # room 43'
  prefs: []
  type: TYPE_NORMAL
- en: '["Systems engineering bay", 9, 11, False, False], # room 44'
  prefs: []
  type: TYPE_NORMAL
- en: '["Security portal to Mission Control", 7, 7, True, False], # room 45'
  prefs: []
  type: TYPE_NORMAL
- en: '[FRIEND1_NAME + "''s sleeping quarters", 9, 11, True, True], # room 46'
  prefs: []
  type: TYPE_NORMAL
- en: '[FRIEND2_NAME + "''s sleeping quarters", 9, 11, True, True], # room 47'
  prefs: []
  type: TYPE_NORMAL
- en: '["The pipeworks", 13, 11, True, False], # room 48'
  prefs: []
  type: TYPE_NORMAL
- en: '["The chief scientist''s office", 9, 7, True, True], # room 49'
  prefs: []
  type: TYPE_NORMAL
- en: '["The robot workshop", 9, 11, True, False] # room 50'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '#simple sanity check on map above to check data entry'
  prefs: []
  type: TYPE_NORMAL
- en: assert len(GAME_MAP)-1 == MAP_SIZE, "Map size and GAME_MAP don't match"
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##  OBJECTS  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: objects = {
  prefs: []
  type: TYPE_NORMAL
- en: '0: [images.floor, None, "The floor is shiny and clean"],'
  prefs: []
  type: TYPE_NORMAL
- en: '1: [images.pillar, images.full_shadow, "The wall is smooth and cold"],'
  prefs: []
  type: TYPE_NORMAL
- en: '2: [images.soil, None, "It''s like a desert. Or should that be dessert?"],'
  prefs: []
  type: TYPE_NORMAL
- en: '3: [images.pillar_low, images.half_shadow, "The wall is smooth and cold"],'
  prefs: []
  type: TYPE_NORMAL
- en: '4: [images.bed, images.half_shadow, "A tidy and comfortable bed"],'
  prefs: []
  type: TYPE_NORMAL
- en: '5: [images.table, images.half_shadow, "It''s made from strong plastic."],'
  prefs: []
  type: TYPE_NORMAL
- en: '6: [images.chair_left, None, "A chair with a soft cushion"],'
  prefs: []
  type: TYPE_NORMAL
- en: '7: [images.chair_right, None, "A chair with a soft cushion"],'
  prefs: []
  type: TYPE_NORMAL
- en: '8: [images.bookcase_tall, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Bookshelves, stacked with reference books"],'
  prefs: []
  type: TYPE_NORMAL
- en: '9: [images.bookcase_small, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Bookshelves, stacked with reference books"],'
  prefs: []
  type: TYPE_NORMAL
- en: '10: [images.cabinet, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A small locker, for storing personal items"],'
  prefs: []
  type: TYPE_NORMAL
- en: '11: [images.desk_computer, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A computer. Use it to run life support diagnostics"],'
  prefs: []
  type: TYPE_NORMAL
- en: '12: [images.plant, images.plant_shadow, "A spaceberry plant, grown here"],'
  prefs: []
  type: TYPE_NORMAL
- en: '13: [images.electrical1, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Electrical systems used for powering the space station"],'
  prefs: []
  type: TYPE_NORMAL
- en: '14: [images.electrical2, images.half_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Electrical systems used for powering the space station"],'
  prefs: []
  type: TYPE_NORMAL
- en: '15: [images.cactus, images.cactus_shadow, "Ouch! Careful on the cactus!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '16: [images.shrub, images.shrub_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A space lettuce. A bit limp, but amazing it''s growing here!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '17: [images.pipes1, images.pipes1_shadow, "Water purification pipes"],'
  prefs: []
  type: TYPE_NORMAL
- en: '18: [images.pipes2, images.pipes2_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Pipes for the life support systems"],'
  prefs: []
  type: TYPE_NORMAL
- en: '19: [images.pipes3, images.pipes3_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Pipes for the life support systems"],'
  prefs: []
  type: TYPE_NORMAL
- en: '20: [images.door, images.door_shadow, "Safety door. Opens automatically \'
  prefs: []
  type: TYPE_NORMAL
- en: for astronauts in functioning spacesuits."],
  prefs: []
  type: TYPE_NORMAL
- en: '21: [images.door, images.door_shadow, "The airlock door. \'
  prefs: []
  type: TYPE_NORMAL
- en: For safety reasons, it requires two person operation."],
  prefs: []
  type: TYPE_NORMAL
- en: '22: [images.door, images.door_shadow, "A locked door. It needs " \'
  prefs: []
  type: TYPE_NORMAL
- en: + PLAYER_NAME + "'s access card"],
  prefs: []
  type: TYPE_NORMAL
- en: '23: [images.door, images.door_shadow, "A locked door. It needs " \'
  prefs: []
  type: TYPE_NORMAL
- en: + FRIEND1_NAME + "'s access card"],
  prefs: []
  type: TYPE_NORMAL
- en: '24: [images.door, images.door_shadow, "A locked door. It needs " \'
  prefs: []
  type: TYPE_NORMAL
- en: + FRIEND2_NAME + "'s access card"],
  prefs: []
  type: TYPE_NORMAL
- en: '25: [images.door, images.door_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A locked door. It is opened from Main Mission Control"],'
  prefs: []
  type: TYPE_NORMAL
- en: '26: [images.door, images.door_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A locked door in the engineering bay."],'
  prefs: []
  type: TYPE_NORMAL
- en: '27: [images.map, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The screen says the crash site was Sector: " \'
  prefs: []
  type: TYPE_NORMAL
- en: '+ str(LANDER_SECTOR) + " // X: " + str(LANDER_X) + \'
  prefs: []
  type: TYPE_NORMAL
- en: '" // Y: " + str(LANDER_Y)],'
  prefs: []
  type: TYPE_NORMAL
- en: '28: [images.rock_large, images.rock_large_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A rock. Its coarse surface feels like a whetstone", "the rock"],'
  prefs: []
  type: TYPE_NORMAL
- en: '29: [images.rock_small, images.rock_small_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A small but heavy piece of Martian rock"],'
  prefs: []
  type: TYPE_NORMAL
- en: '30: [images.crater, None, "A crater in the planet surface"],'
  prefs: []
  type: TYPE_NORMAL
- en: '31: [images.fence, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A fine gauze fence. It helps protect the station from dust storms"],'
  prefs: []
  type: TYPE_NORMAL
- en: '32: [images.contraption, images.contraption_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"One of the scientific experiments. It gently vibrates"],'
  prefs: []
  type: TYPE_NORMAL
- en: '33: [images.robot_arm, images.robot_arm_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A robot arm, used for heavy lifting"],'
  prefs: []
  type: TYPE_NORMAL
- en: '34: [images.toilet, images.half_shadow, "A sparkling clean toilet"],'
  prefs: []
  type: TYPE_NORMAL
- en: '35: [images.sink, None, "A sink with running water", "the taps"],'
  prefs: []
  type: TYPE_NORMAL
- en: '36: [images.globe, images.globe_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A giant globe of the planet. It gently glows from inside"],'
  prefs: []
  type: TYPE_NORMAL
- en: '37: [images.science_lab_table, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A table of experiments, analyzing the planet soil and dust"],'
  prefs: []
  type: TYPE_NORMAL
- en: '38: [images.vending_machine, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A vending machine. It requires a credit.", "the vending machine"],'
  prefs: []
  type: TYPE_NORMAL
- en: '39: [images.floor_pad, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A pressure sensor to make sure nobody goes out alone."],'
  prefs: []
  type: TYPE_NORMAL
- en: '40: [images.rescue_ship, images.rescue_ship_shadow, "A rescue ship!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '41: [images.mission_control_desk, images.mission_control_desk_shadow, \'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mission Control stations."],'
  prefs: []
  type: TYPE_NORMAL
- en: '42: [images.button, images.button_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The button for opening the time-locked door in engineering."],'
  prefs: []
  type: TYPE_NORMAL
- en: '43: [images.whiteboard, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The whiteboard is used in brainstorms and planning meetings."],'
  prefs: []
  type: TYPE_NORMAL
- en: '44: [images.window, images.full_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The window provides a view out onto the planet surface."],'
  prefs: []
  type: TYPE_NORMAL
- en: '45: [images.robot, images.robot_shadow, "A cleaning robot, turned off."],'
  prefs: []
  type: TYPE_NORMAL
- en: '46: [images.robot2, images.robot2_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A planet surface exploration robot, awaiting set-up."],'
  prefs: []
  type: TYPE_NORMAL
- en: '47: [images.rocket, images.rocket_shadow, "A 1-person craft in repair."],'
  prefs: []
  type: TYPE_NORMAL
- en: '48: [images.toxic_floor, None, "Toxic floor - do not walk on!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '49: [images.drone, None, "A delivery drone"],'
  prefs: []
  type: TYPE_NORMAL
- en: '50: [images.energy_ball, None, "An energy ball - dangerous!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '51: [images.energy_ball2, None, "An energy ball - dangerous!"],'
  prefs: []
  type: TYPE_NORMAL
- en: '52: [images.computer, images.computer_shadow,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A computer workstation, for managing space station systems."],'
  prefs: []
  type: TYPE_NORMAL
- en: '53: [images.clipboard, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A clipboard. Someone has doodled on it.", "the clipboard"],'
  prefs: []
  type: TYPE_NORMAL
- en: '54: [images.bubble_gum, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A piece of sticky bubble gum. Spaceberry flavour.", "bubble gum"],'
  prefs: []
  type: TYPE_NORMAL
- en: '55: [images.yoyo, None, "A toy made of fine, strong string and plastic. \'
  prefs: []
  type: TYPE_NORMAL
- en: Used for antigrav experiments.", PLAYER_NAME + "'s yoyo"],
  prefs: []
  type: TYPE_NORMAL
- en: '56: [images.thread, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A piece of fine, strong string", "a piece of string"],'
  prefs: []
  type: TYPE_NORMAL
- en: '57: [images.needle, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A sharp needle from a cactus plant", "a cactus needle"],'
  prefs: []
  type: TYPE_NORMAL
- en: '58: [images.threaded_needle, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A cactus needle, spearing a length of string", "needle and string"],'
  prefs: []
  type: TYPE_NORMAL
- en: '59: [images.canister, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The air canister has a leak.", "a leaky air canister"],'
  prefs: []
  type: TYPE_NORMAL
- en: '60: [images.canister, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"It looks like the seal will hold!", "a sealed air canister"],'
  prefs: []
  type: TYPE_NORMAL
- en: '61: [images.mirror, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"The mirror throws a circle of light on the walls.", "a mirror"],'
  prefs: []
  type: TYPE_NORMAL
- en: '62: [images.bin_empty, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A rarely used bin, made of light plastic", "a bin"],'
  prefs: []
  type: TYPE_NORMAL
- en: '63: [images.bin_full, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A heavy bin full of water", "a bin full of water"],'
  prefs: []
  type: TYPE_NORMAL
- en: '64: [images.rags, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"An oily rag. Pick it up by a corner if you must!", "an oily rag"],'
  prefs: []
  type: TYPE_NORMAL
- en: '65: [images.hammer, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A hammer. Maybe good for cracking things open...", "a hammer"],'
  prefs: []
  type: TYPE_NORMAL
- en: '66: [images.spoon, None, "A large serving spoon", "a spoon"],'
  prefs: []
  type: TYPE_NORMAL
- en: '67: [images.food_pouch, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A dehydrated food pouch. It needs water.", "a dry food pack"],'
  prefs: []
  type: TYPE_NORMAL
- en: '68: [images.food, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A food pouch. Use it to get 100% energy.", "ready-to-eat food"],'
  prefs: []
  type: TYPE_NORMAL
- en: '69: [images.book, None, "The book has the words ''Don''t Panic'' on the \'
  prefs: []
  type: TYPE_NORMAL
- en: cover in large, friendly letters", "a book"],
  prefs: []
  type: TYPE_NORMAL
- en: '70: [images.mp3_player, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"An MP3 player, with all the latest tunes", "an MP3 player"],'
  prefs: []
  type: TYPE_NORMAL
- en: '71: [images.lander, None, "The Poodle, a small space exploration craft. \'
  prefs: []
  type: TYPE_NORMAL
- en: Its black box has a radio sealed inside.", "the Poodle lander"],
  prefs: []
  type: TYPE_NORMAL
- en: '72: [images.radio, None, "A radio communications system, from the \'
  prefs: []
  type: TYPE_NORMAL
- en: Poodle", "a communications radio"],
  prefs: []
  type: TYPE_NORMAL
- en: '73: [images.gps_module, None, "A GPS Module", "a GPS module"],'
  prefs: []
  type: TYPE_NORMAL
- en: '74: [images.positioning_system, None, "Part of a positioning system. \'
  prefs: []
  type: TYPE_NORMAL
- en: Needs a GPS module.", "a positioning interface"],
  prefs: []
  type: TYPE_NORMAL
- en: '75: [images.positioning_system, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A working positioning system", "a positioning computer"],'
  prefs: []
  type: TYPE_NORMAL
- en: '76: [images.scissors, None, "Scissors. They''re too blunt to cut \'
  prefs: []
  type: TYPE_NORMAL
- en: anything. Can you sharpen them?", "blunt scissors"],
  prefs: []
  type: TYPE_NORMAL
- en: '77: [images.scissors, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"Razor-sharp scissors. Careful!", "sharpened scissors"],'
  prefs: []
  type: TYPE_NORMAL
- en: '78: [images.credit, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"A small coin for the station''s vending systems",'
  prefs: []
  type: TYPE_NORMAL
- en: '"a station credit"],'
  prefs: []
  type: TYPE_NORMAL
- en: '79: [images.access_card, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"This access card belongs to " + PLAYER_NAME, "an access card"],'
  prefs: []
  type: TYPE_NORMAL
- en: '80: [images.access_card, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"This access card belongs to " + FRIEND1_NAME, "an access card"],'
  prefs: []
  type: TYPE_NORMAL
- en: '81: [images.access_card, None,'
  prefs: []
  type: TYPE_NORMAL
- en: '"This access card belongs to " + FRIEND2_NAME, "an access card"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: items_player_may_carry = list(range(53, 82))
  prefs: []
  type: TYPE_NORMAL
- en: Numbers below are for floor, pressure pad, soil, toxic floor.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: items_player_may_stand_on = items_player_may_carry + [0, 39, 2, 48]
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##  SCENERY  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: Scenery describes objects that cannot move between rooms.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'room number: [[object number, y position, x position]...]'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: scenery = {
  prefs: []
  type: TYPE_NORMAL
- en: '26: [[39,8,2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '27: [[33,5,5], [33,1,1], [33,1,8], [47,5,2],'
  prefs: []
  type: TYPE_NORMAL
- en: '[47,3,10], [47,9,8], [42,1,6]],'
  prefs: []
  type: TYPE_NORMAL
- en: '28: [[27,0,3], [41,4,3], [41,4,7]],'
  prefs: []
  type: TYPE_NORMAL
- en: '29: [[7,2,6], [6,2,8], [12,1,13], [44,0,1],'
  prefs: []
  type: TYPE_NORMAL
- en: '[36,4,10], [10,1,1], [19,4,2], [17,4,4]],'
  prefs: []
  type: TYPE_NORMAL
- en: '30: [[34,1,1], [35,1,3]],'
  prefs: []
  type: TYPE_NORMAL
- en: '31: [[11,1,1], [19,1,8], [46,1,3]],'
  prefs: []
  type: TYPE_NORMAL
- en: '32: [[48,2,2], [48,2,3], [48,2,4], [48,3,2], [48,3,3],'
  prefs: []
  type: TYPE_NORMAL
- en: '[48,3,4], [48,4,2], [48,4,3], [48,4,4]],'
  prefs: []
  type: TYPE_NORMAL
- en: '33: [[13,1,1], [13,1,3], [13,1,8], [13,1,10], [48,2,1],'
  prefs: []
  type: TYPE_NORMAL
- en: '[48,2,7], [48,3,6], [48,3,3]],'
  prefs: []
  type: TYPE_NORMAL
- en: '34: [[37,2,2], [32,6,7], [37,10,4], [28,5,3]],'
  prefs: []
  type: TYPE_NORMAL
- en: '35: [[16,2,9], [16,2,2], [16,3,3], [16,3,8], [16,8,9], [16,8,2], [16,1,8],'
  prefs: []
  type: TYPE_NORMAL
- en: '[16,1,3], [12,8,6], [12,9,4], [12,9,8],'
  prefs: []
  type: TYPE_NORMAL
- en: '[15,4,6], [12,7,1], [12,7,11]],'
  prefs: []
  type: TYPE_NORMAL
- en: '36: [[4,3,1], [9,1,7], [8,1,8], [8,1,9],'
  prefs: []
  type: TYPE_NORMAL
- en: '[5,5,4], [6,5,7], [10,1,1], [12,1,2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '37: [[48,3,1], [48,3,2], [48,7,1], [48,5,2], [48,5,3],'
  prefs: []
  type: TYPE_NORMAL
- en: '[48,7,2], [48,9,2], [48,9,3], [48,11,1], [48,11,2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '38: [[43,0,2], [6,2,2], [6,3,5], [6,4,7], [6,2,9], [45,1,10]],'
  prefs: []
  type: TYPE_NORMAL
- en: '39: [[38,1,1], [7,3,4], [7,6,4], [5,3,6], [5,6,6],'
  prefs: []
  type: TYPE_NORMAL
- en: '[6,3,9], [6,6,9], [45,1,11], [12,1,8], [12,1,4]],'
  prefs: []
  type: TYPE_NORMAL
- en: '40: [[41,5,3], [41,5,7], [41,9,3], [41,9,7],'
  prefs: []
  type: TYPE_NORMAL
- en: '[13,1,1], [13,1,3], [42,1,12]],'
  prefs: []
  type: TYPE_NORMAL
- en: '41: [[4,3,1], [10,3,5], [4,5,1], [10,5,5], [4,7,1],'
  prefs: []
  type: TYPE_NORMAL
- en: '[10,7,5], [12,1,1], [12,1,5]],'
  prefs: []
  type: TYPE_NORMAL
- en: '44: [[46,4,3], [46,4,5], [18,1,1], [19,1,3],'
  prefs: []
  type: TYPE_NORMAL
- en: '[19,1,5], [52,4,7], [14,1,8]],'
  prefs: []
  type: TYPE_NORMAL
- en: '45: [[48,2,1], [48,2,2], [48,3,3], [48,3,4], [48,1,4], [48,1,1]],'
  prefs: []
  type: TYPE_NORMAL
- en: '46: [[10,1,1], [4,1,2], [8,1,7], [9,1,8], [8,1,9], [5,4,3], [7,3,2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '47: [[9,1,1], [9,1,2], [10,1,3], [12,1,7], [5,4,4], [6,4,7], [4,1,8]],'
  prefs: []
  type: TYPE_NORMAL
- en: '48: [[17,4,1], [17,4,2], [17,4,3], [17,4,4], [17,4,5], [17,4,6], [17,4,7],'
  prefs: []
  type: TYPE_NORMAL
- en: '[17,8,1], [17,8,2], [17,8,3], [17,8,4],'
  prefs: []
  type: TYPE_NORMAL
- en: '[17,8,5], [17,8,6], [17,8,7], [14,1,1]],'
  prefs: []
  type: TYPE_NORMAL
- en: '49: [[14,2,2], [14,2,4], [7,5,1], [5,5,3], [48,3,3], [48,3,4]],'
  prefs: []
  type: TYPE_NORMAL
- en: '50: [[45,4,8], [11,1,1], [13,1,8], [33,2,1], [46,4,6]]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: checksum = 0
  prefs: []
  type: TYPE_NORMAL
- en: check_counter = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for key, room_scenery_list in scenery.items():'
  prefs: []
  type: TYPE_NORMAL
- en: 'for scenery_item_list in room_scenery_list:'
  prefs: []
  type: TYPE_NORMAL
- en: checksum += (scenery_item_list[0] * key
  prefs: []
  type: TYPE_NORMAL
- en: + scenery_item_list[1] * (key + 1)
  prefs: []
  type: TYPE_NORMAL
- en: + scenery_item_list[2] * (key + 2))
  prefs: []
  type: TYPE_NORMAL
- en: check_counter += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(check_counter, "scenery items")
  prefs: []
  type: TYPE_NORMAL
- en: assert check_counter == 161, "Expected 161 scenery items"
  prefs: []
  type: TYPE_NORMAL
- en: assert checksum == 200095, "Error in scenery data"
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Scenery checksum: " + str(checksum))'
  prefs: []
  type: TYPE_NORMAL
- en: 'for room in range(1, 26): # Add random scenery in planet locations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'if room != 13: # Skip room 13.'
  prefs: []
  type: TYPE_NORMAL
- en: scenery_item = random.choice([16, 28, 29, 30])
  prefs: []
  type: TYPE_NORMAL
- en: scenery[room] = [[scenery_item, random.randint(2, 10),
  prefs: []
  type: TYPE_NORMAL
- en: random.randint(2, 10)]]
  prefs: []
  type: TYPE_NORMAL
- en: Use loops to add fences to the planet surface rooms.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for room_coordinate in range(0, 13):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for room_number in [1, 2, 3, 4, 5]: # Add top fence'
  prefs: []
  type: TYPE_NORMAL
- en: scenery[room_number] += [[31, 0, room_coordinate]]
  prefs: []
  type: TYPE_NORMAL
- en: 'for room_number in [1, 6, 11, 16, 21]: # Add left fence'
  prefs: []
  type: TYPE_NORMAL
- en: scenery[room_number] += [[31, room_coordinate, 0]]
  prefs: []
  type: TYPE_NORMAL
- en: 'for room_number in [5, 10, 15, 20, 25]: # Add right fence'
  prefs: []
  type: TYPE_NORMAL
- en: scenery[room_number] += [[31, room_coordinate, 12]]
  prefs: []
  type: TYPE_NORMAL
- en: 'del scenery[21][-1] # Delete last fence panel in Room 21'
  prefs: []
  type: TYPE_NORMAL
- en: 'del scenery[25][-1] # Delete last fence panel in Room 25'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: MAKE MAP  ##
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'def get_floor_type():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room in outdoor_rooms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'return 2 # soil'
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'return 0 # tiled floor'
  prefs: []
  type: TYPE_NORMAL
- en: 'def generate_map():'
  prefs: []
  type: TYPE_NORMAL
- en: This function makes the map for the current room,
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: using room data, scenery data and prop data.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: global room_map, room_width, room_height, room_name, hazard_map
  prefs: []
  type: TYPE_NORMAL
- en: global top_left_x, top_left_y, wall_transparency_frame
  prefs: []
  type: TYPE_NORMAL
- en: room_data = GAME_MAP[current_room]
  prefs: []
  type: TYPE_NORMAL
- en: room_name = room_data[0]
  prefs: []
  type: TYPE_NORMAL
- en: room_height = room_data[1]
  prefs: []
  type: TYPE_NORMAL
- en: room_width = room_data[2]
  prefs: []
  type: TYPE_NORMAL
- en: floor_type = get_floor_type()
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room in range(1, 21):'
  prefs: []
  type: TYPE_NORMAL
- en: 'bottom_edge = 2 #soil'
  prefs: []
  type: TYPE_NORMAL
- en: 'side_edge = 2 #soil'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room in range(21, 26):'
  prefs: []
  type: TYPE_NORMAL
- en: 'bottom_edge = 1 #wall'
  prefs: []
  type: TYPE_NORMAL
- en: 'side_edge = 2 #soil'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room > 25:'
  prefs: []
  type: TYPE_NORMAL
- en: 'bottom_edge = 1 #wall'
  prefs: []
  type: TYPE_NORMAL
- en: 'side_edge = 1 #wall'
  prefs: []
  type: TYPE_NORMAL
- en: '# Create top line of room map.'
  prefs: []
  type: TYPE_NORMAL
- en: room_map=[[side_edge] * room_width]
  prefs: []
  type: TYPE_NORMAL
- en: '# Add middle lines of room map (wall, floor to fill width, wall).'
  prefs: []
  type: TYPE_NORMAL
- en: 'for y in range(room_height - 2):'
  prefs: []
  type: TYPE_NORMAL
- en: room_map.append([side_edge]
  prefs: []
  type: TYPE_NORMAL
- en: + [floor_type]*(room_width - 2) + [side_edge])
  prefs: []
  type: TYPE_NORMAL
- en: '# Add bottom line of room map.'
  prefs: []
  type: TYPE_NORMAL
- en: room_map.append([bottom_edge] * room_width)
  prefs: []
  type: TYPE_NORMAL
- en: '# Add doorways.'
  prefs: []
  type: TYPE_NORMAL
- en: middle_row = int(room_height / 2)
  prefs: []
  type: TYPE_NORMAL
- en: middle_column = int(room_width / 2)
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_data[4]: # If exit at right of this room'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[middle_row][room_width - 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[middle_row+1][room_width - 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[middle_row-1][room_width - 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room % MAP_WIDTH != 1: # If room is not on left of map'
  prefs: []
  type: TYPE_NORMAL
- en: room_to_left = GAME_MAP[current_room - 1]
  prefs: []
  type: TYPE_NORMAL
- en: '# If room on the left has a right exit, add left exit in this room'
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_to_left[4]:'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[middle_row][0] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[middle_row + 1][0] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[middle_row - 1][0] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_data[3]: # If exit at top of this room'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][middle_column] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][middle_column + 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][middle_column - 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room <= MAP_SIZE - MAP_WIDTH: # If room is not on bottom row'
  prefs: []
  type: TYPE_NORMAL
- en: room_below = GAME_MAP[current_room+MAP_WIDTH]
  prefs: []
  type: TYPE_NORMAL
- en: '# If room below has a top exit, add exit at bottom of this one'
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_below[3]:'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[room_height-1][middle_column] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[room_height-1][middle_column + 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: room_map[room_height-1][middle_column - 1] = floor_type
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room in scenery:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for this_scenery in scenery[current_room]:'
  prefs: []
  type: TYPE_NORMAL
- en: scenery_number = this_scenery[0]
  prefs: []
  type: TYPE_NORMAL
- en: scenery_y = this_scenery[1]
  prefs: []
  type: TYPE_NORMAL
- en: scenery_x = this_scenery[2]
  prefs: []
  type: TYPE_NORMAL
- en: room_map[scenery_y][scenery_x] = scenery_number
  prefs: []
  type: TYPE_NORMAL
- en: image_here = objects[scenery_number][0]
  prefs: []
  type: TYPE_NORMAL
- en: image_width = image_here.get_width()
  prefs: []
  type: TYPE_NORMAL
- en: image_width_in_tiles = int(image_width / TILE_SIZE)
  prefs: []
  type: TYPE_NORMAL
- en: 'for tile_number in range(1, image_width_in_tiles):'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[scenery_y][scenery_x + tile_number] = 255
  prefs: []
  type: TYPE_NORMAL
- en: 'center_y = int(HEIGHT / 2) # Center of game window'
  prefs: []
  type: TYPE_NORMAL
- en: center_x = int(WIDTH / 2)
  prefs: []
  type: TYPE_NORMAL
- en: 'room_pixel_width = room_width * TILE_SIZE # Size of room in pixels'
  prefs: []
  type: TYPE_NORMAL
- en: room_pixel_height = room_height * TILE_SIZE
  prefs: []
  type: TYPE_NORMAL
- en: top_left_x = center_x - 0.5 * room_pixel_width
  prefs: []
  type: TYPE_NORMAL
- en: top_left_y = (center_y - 0.5 * room_pixel_height) + 110
  prefs: []
  type: TYPE_NORMAL
- en: 'for prop_number, prop_info in props.items():'
  prefs: []
  type: TYPE_NORMAL
- en: prop_room = prop_info[0]
  prefs: []
  type: TYPE_NORMAL
- en: prop_y = prop_info[1]
  prefs: []
  type: TYPE_NORMAL
- en: prop_x = prop_info[2]
  prefs: []
  type: TYPE_NORMAL
- en: if (prop_room == current_room and
  prefs: []
  type: TYPE_NORMAL
- en: 'room_map[prop_y][prop_x] in [0, 39, 2]):'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[prop_y][prop_x] = prop_number
  prefs: []
  type: TYPE_NORMAL
- en: image_here = objects[prop_number][0]
  prefs: []
  type: TYPE_NORMAL
- en: image_width = image_here.get_width()
  prefs: []
  type: TYPE_NORMAL
- en: image_width_in_tiles = int(image_width / TILE_SIZE)
  prefs: []
  type: TYPE_NORMAL
- en: 'for tile_number in range(1, image_width_in_tiles):'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[prop_y][prop_x + tile_number] = 255
  prefs: []
  type: TYPE_NORMAL
- en: 'hazard_map = [] # empty list'
  prefs: []
  type: TYPE_NORMAL
- en: 'for y in range(room_height):'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_map.append( [0] * room_width )
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'GAME LOOP ##'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'def start_room():'
  prefs: []
  type: TYPE_NORMAL
- en: global airlock_door_frame
  prefs: []
  type: TYPE_NORMAL
- en: 'show_text("You are here: " + room_name, 0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room == 26: # Room with self-shutting airlock door'
  prefs: []
  type: TYPE_NORMAL
- en: airlock_door_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_interval(door_in_room_26, 0.05)
  prefs: []
  type: TYPE_NORMAL
- en: hazard_start()
  prefs: []
  type: TYPE_NORMAL
- en: 'def game_loop():'
  prefs: []
  type: TYPE_NORMAL
- en: global player_x, player_y, current_room
  prefs: []
  type: TYPE_NORMAL
- en: global from_player_x, from_player_y
  prefs: []
  type: TYPE_NORMAL
- en: global player_image, player_image_shadow
  prefs: []
  type: TYPE_NORMAL
- en: global selected_item, item_carrying, energy
  prefs: []
  type: TYPE_NORMAL
- en: global player_offset_x, player_offset_y
  prefs: []
  type: TYPE_NORMAL
- en: global player_frame, player_direction
  prefs: []
  type: TYPE_NORMAL
- en: 'if game_over:'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_frame > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: player_frame += 1
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.05)
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_frame == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_x = 0
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_y = 0
  prefs: []
  type: TYPE_NORMAL
- en: save player's current position
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: old_player_x = player_x
  prefs: []
  type: TYPE_NORMAL
- en: old_player_y = player_y
  prefs: []
  type: TYPE_NORMAL
- en: move if key is pressed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'if player_frame == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if keyboard.right:'
  prefs: []
  type: TYPE_NORMAL
- en: from_player_x = player_x
  prefs: []
  type: TYPE_NORMAL
- en: from_player_y = player_y
  prefs: []
  type: TYPE_NORMAL
- en: player_x += 1
  prefs: []
  type: TYPE_NORMAL
- en: player_direction = "right"
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif keyboard.left: #elif stops player making diagonal movements'
  prefs: []
  type: TYPE_NORMAL
- en: from_player_x = player_x
  prefs: []
  type: TYPE_NORMAL
- en: from_player_y = player_y
  prefs: []
  type: TYPE_NORMAL
- en: player_x -= 1
  prefs: []
  type: TYPE_NORMAL
- en: player_direction = "left"
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif keyboard.up:'
  prefs: []
  type: TYPE_NORMAL
- en: from_player_x = player_x
  prefs: []
  type: TYPE_NORMAL
- en: from_player_y = player_y
  prefs: []
  type: TYPE_NORMAL
- en: player_y -= 1
  prefs: []
  type: TYPE_NORMAL
- en: player_direction = "up"
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif keyboard.down:'
  prefs: []
  type: TYPE_NORMAL
- en: from_player_x = player_x
  prefs: []
  type: TYPE_NORMAL
- en: from_player_y = player_y
  prefs: []
  type: TYPE_NORMAL
- en: player_y += 1
  prefs: []
  type: TYPE_NORMAL
- en: player_direction = "down"
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 1
  prefs: []
  type: TYPE_NORMAL
- en: check for exiting the room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'if player_x == room_width: # through door on RIGHT'
  prefs: []
  type: TYPE_NORMAL
- en: clock.unschedule(hazard_move)
  prefs: []
  type: TYPE_NORMAL
- en: current_room += 1
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: 'player_x = 0 # enter at left'
  prefs: []
  type: TYPE_NORMAL
- en: 'player_y = int(room_height / 2) # enter at door'
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: start_room()
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_x == -1: # through door on LEFT'
  prefs: []
  type: TYPE_NORMAL
- en: clock.unschedule(hazard_move)
  prefs: []
  type: TYPE_NORMAL
- en: current_room -= 1
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: player_x = room_width - 1  # enter at right
  prefs: []
  type: TYPE_NORMAL
- en: 'player_y = int(room_height / 2) # enter at door'
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: start_room()
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_y == room_height: # through door at BOTTOM'
  prefs: []
  type: TYPE_NORMAL
- en: clock.unschedule(hazard_move)
  prefs: []
  type: TYPE_NORMAL
- en: current_room += MAP_WIDTH
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: 'player_y = 0 # enter at top'
  prefs: []
  type: TYPE_NORMAL
- en: 'player_x = int(room_width / 2) # enter at door'
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: start_room()
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_y == -1: # through door at TOP'
  prefs: []
  type: TYPE_NORMAL
- en: clock.unschedule(hazard_move)
  prefs: []
  type: TYPE_NORMAL
- en: current_room -= MAP_WIDTH
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: 'player_y = room_height - 1 # enter at bottom'
  prefs: []
  type: TYPE_NORMAL
- en: 'player_x = int(room_width / 2) # enter at door'
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: start_room()
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'if keyboard.g:'
  prefs: []
  type: TYPE_NORMAL
- en: pick_up_object()
  prefs: []
  type: TYPE_NORMAL
- en: 'if keyboard.tab and len(in_my_pockets) > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: selected_item += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if selected_item > len(in_my_pockets) - 1:'
  prefs: []
  type: TYPE_NORMAL
- en: selected_item = 0
  prefs: []
  type: TYPE_NORMAL
- en: item_carrying = in_my_pockets[selected_item]
  prefs: []
  type: TYPE_NORMAL
- en: display_inventory()
  prefs: []
  type: TYPE_NORMAL
- en: 'if keyboard.d and item_carrying:'
  prefs: []
  type: TYPE_NORMAL
- en: drop_object(old_player_y, old_player_x)
  prefs: []
  type: TYPE_NORMAL
- en: 'if keyboard.space:'
  prefs: []
  type: TYPE_NORMAL
- en: examine_object()
  prefs: []
  type: TYPE_NORMAL
- en: 'if keyboard.u:'
  prefs: []
  type: TYPE_NORMAL
- en: use_object()
  prefs: []
  type: TYPE_NORMAL
- en: Teleporter for testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Remove this section for the real game
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '##    if keyboard.x:'
  prefs: []
  type: TYPE_NORMAL
- en: '##        current_room = int(input("Enter room number:"))'
  prefs: []
  type: TYPE_NORMAL
- en: '##        player_x = 2'
  prefs: []
  type: TYPE_NORMAL
- en: '##        player_y = 2'
  prefs: []
  type: TYPE_NORMAL
- en: '##        generate_map()'
  prefs: []
  type: TYPE_NORMAL
- en: '##        start_room()'
  prefs: []
  type: TYPE_NORMAL
- en: '##        sounds.teleport.play()'
  prefs: []
  type: TYPE_NORMAL
- en: Teleport section ends
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '# If the player is standing somewhere they shouldn''t, move them back.'
  prefs: []
  type: TYPE_NORMAL
- en: if room_map[player_y][player_x] not in items_player_may_stand_on \
  prefs: []
  type: TYPE_NORMAL
- en: 'or hazard_map[player_y][player_x] != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: player_x = old_player_x
  prefs: []
  type: TYPE_NORMAL
- en: player_y = old_player_y
  prefs: []
  type: TYPE_NORMAL
- en: player_frame = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_map[player_y][player_x] == 48: # toxic floor'
  prefs: []
  type: TYPE_NORMAL
- en: deplete_energy(1)
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_direction == "right" and player_frame > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_x = -1 + (0.25 * player_frame)
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_direction == "left" and player_frame > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_x = 1 - (0.25 * player_frame)
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_direction == "up" and player_frame > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_y = 1 - (0.25 * player_frame)
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_direction == "down" and player_frame > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: player_offset_y = -1 + (0.25 * player_frame)
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##  DISPLAY  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw_image(image, y, x):'
  prefs: []
  type: TYPE_NORMAL
- en: screen.blit(
  prefs: []
  type: TYPE_NORMAL
- en: image,
  prefs: []
  type: TYPE_NORMAL
- en: (top_left_x + (x * TILE_SIZE),
  prefs: []
  type: TYPE_NORMAL
- en: top_left_y + (y * TILE_SIZE) - image.get_height())
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw_shadow(image, y, x):'
  prefs: []
  type: TYPE_NORMAL
- en: screen.blit(
  prefs: []
  type: TYPE_NORMAL
- en: image,
  prefs: []
  type: TYPE_NORMAL
- en: (top_left_x + (x * TILE_SIZE),
  prefs: []
  type: TYPE_NORMAL
- en: top_left_y + (y * TILE_SIZE))
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw_player():'
  prefs: []
  type: TYPE_NORMAL
- en: player_image = PLAYER[player_direction][player_frame]
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(player_image, player_y + player_offset_y,
  prefs: []
  type: TYPE_NORMAL
- en: player_x + player_offset_x)
  prefs: []
  type: TYPE_NORMAL
- en: player_image_shadow = PLAYER_SHADOW[player_direction][player_frame]
  prefs: []
  type: TYPE_NORMAL
- en: draw_shadow(player_image_shadow, player_y + player_offset_y,
  prefs: []
  type: TYPE_NORMAL
- en: player_x + player_offset_x)
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if game_over:'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: '# Clear the game arena area.'
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((0, 150), (800, 600))
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.filled_rect(box, RED)
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect ((0, 0), (800, top_left_y + (room_height - 1)*30))
  prefs: []
  type: TYPE_NORMAL
- en: screen.surface.set_clip(box)
  prefs: []
  type: TYPE_NORMAL
- en: floor_type = get_floor_type()
  prefs: []
  type: TYPE_NORMAL
- en: 'for y in range(room_height): # Lay down floor tiles, then items on floor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in range(room_width):'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(objects[floor_type][0], y, x)
  prefs: []
  type: TYPE_NORMAL
- en: '# Next line enables shadows to fall on top of objects on floor'
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_map[y][x] in items_player_may_stand_on:'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(objects[room_map[y][x]][0], y, x)
  prefs: []
  type: TYPE_NORMAL
- en: '# Pressure pad in room 26 is added here, so props can go on top of it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room == 26:'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(objects[39][0], 8, 2)
  prefs: []
  type: TYPE_NORMAL
- en: image_on_pad = room_map[8][2]
  prefs: []
  type: TYPE_NORMAL
- en: 'if image_on_pad > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(objects[image_on_pad][0], 8, 2)
  prefs: []
  type: TYPE_NORMAL
- en: 'for y in range(room_height):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in range(room_width):'
  prefs: []
  type: TYPE_NORMAL
- en: item_here = room_map[y][x]
  prefs: []
  type: TYPE_NORMAL
- en: '# Player cannot walk on 255: it marks spaces used by wide objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'if item_here not in items_player_may_stand_on + [255]:'
  prefs: []
  type: TYPE_NORMAL
- en: image = objects[item_here][0]
  prefs: []
  type: TYPE_NORMAL
- en: if (current_room in outdoor_rooms
  prefs: []
  type: TYPE_NORMAL
- en: and y == room_height - 1
  prefs: []
  type: TYPE_NORMAL
- en: and room_map[y][x] == 1) or \
  prefs: []
  type: TYPE_NORMAL
- en: (current_room not in outdoor_rooms
  prefs: []
  type: TYPE_NORMAL
- en: and y == room_height - 1
  prefs: []
  type: TYPE_NORMAL
- en: and room_map[y][x] == 1
  prefs: []
  type: TYPE_NORMAL
- en: and x > 0
  prefs: []
  type: TYPE_NORMAL
- en: 'and x < room_width - 1):'
  prefs: []
  type: TYPE_NORMAL
- en: '# Add transparent wall image in the front row.'
  prefs: []
  type: TYPE_NORMAL
- en: image = PILLARS[wall_transparency_frame]
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(image, y, x)
  prefs: []
  type: TYPE_NORMAL
- en: 'if objects[item_here][1] is not None: # If object has a shadow'
  prefs: []
  type: TYPE_NORMAL
- en: shadow_image = objects[item_here][1]
  prefs: []
  type: TYPE_NORMAL
- en: '# if shadow might need horizontal tiling'
  prefs: []
  type: TYPE_NORMAL
- en: if shadow_image in [images.half_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: 'images.full_shadow]:'
  prefs: []
  type: TYPE_NORMAL
- en: shadow_width = int(image.get_width() / TILE_SIZE)
  prefs: []
  type: TYPE_NORMAL
- en: '# Use shadow across width of object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for z in range(0, shadow_width):'
  prefs: []
  type: TYPE_NORMAL
- en: draw_shadow(shadow_image, y, x+z)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: draw_shadow(shadow_image, y, x)
  prefs: []
  type: TYPE_NORMAL
- en: hazard_here = hazard_map[y][x]
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_here != 0: # If there''s a hazard at this position'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(objects[hazard_here][0], y, x)
  prefs: []
  type: TYPE_NORMAL
- en: 'if (player_y == y):'
  prefs: []
  type: TYPE_NORMAL
- en: draw_player()
  prefs: []
  type: TYPE_NORMAL
- en: screen.surface.set_clip(None)
  prefs: []
  type: TYPE_NORMAL
- en: 'def adjust_wall_transparency():'
  prefs: []
  type: TYPE_NORMAL
- en: global wall_transparency_frame
  prefs: []
  type: TYPE_NORMAL
- en: if (player_y == room_height - 2
  prefs: []
  type: TYPE_NORMAL
- en: and room_map[room_height - 1][player_x] == 1
  prefs: []
  type: TYPE_NORMAL
- en: 'and wall_transparency_frame < 4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'wall_transparency_frame += 1 # Fade wall out.'
  prefs: []
  type: TYPE_NORMAL
- en: if ((player_y < room_height - 2
  prefs: []
  type: TYPE_NORMAL
- en: or room_map[room_height - 1][player_x] != 1)
  prefs: []
  type: TYPE_NORMAL
- en: 'and wall_transparency_frame > 0):'
  prefs: []
  type: TYPE_NORMAL
- en: 'wall_transparency_frame -= 1 # Fade wall in.'
  prefs: []
  type: TYPE_NORMAL
- en: 'def show_text(text_to_show, line_number):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if game_over:'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: text_lines = [15, 50]
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((0, text_lines[line_number]), (800, 35))
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.filled_rect(box, BLACK)
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text(text_to_show,
  prefs: []
  type: TYPE_NORMAL
- en: (20, text_lines[line_number]), color=GREEN)
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##   PROPS   ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: Props are objects that may move between rooms, appear or disappear.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All props must be set up here. Props not yet in the game go into room 0.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'object number : [room, y, x]'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: props = {
  prefs: []
  type: TYPE_NORMAL
- en: '20: [31, 0, 4], 21: [26, 0, 1], 22: [41, 0, 2], 23: [39, 0, 5],'
  prefs: []
  type: TYPE_NORMAL
- en: '24: [45, 0, 2],'
  prefs: []
  type: TYPE_NORMAL
- en: '25: [32, 0, 2], 26: [27, 12, 5], # two sides of same door'
  prefs: []
  type: TYPE_NORMAL
- en: '40: [0, 8, 6], 53: [45, 1, 5], 54: [0, 0, 0], 55: [0, 0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '56: [0, 0, 0], 57: [35, 4, 6], 58: [0, 0, 0], 59: [31, 1, 7],'
  prefs: []
  type: TYPE_NORMAL
- en: '60: [0, 0, 0], 61: [36, 1, 1], 62: [36, 1, 6], 63: [0, 0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '64: [27, 8, 3], 65: [50, 1, 7], 66: [39, 5, 6], 67: [46, 1, 1],'
  prefs: []
  type: TYPE_NORMAL
- en: '68: [0, 0, 0], 69: [30, 3, 3], 70: [47, 1, 3],'
  prefs: []
  type: TYPE_NORMAL
- en: '71: [0, LANDER_Y, LANDER_X], 72: [0, 0, 0], 73: [27, 4, 6],'
  prefs: []
  type: TYPE_NORMAL
- en: '74: [28, 1, 11], 75: [0, 0, 0], 76: [41, 3, 5], 77: [0, 0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '78: [35, 9, 11], 79: [26, 3, 2], 80: [41, 7, 5], 81: [29, 1, 1]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: checksum = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for key, prop in props.items():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if key != 71: # 71 is skipped because it''s different each game.'
  prefs: []
  type: TYPE_NORMAL
- en: checksum += (prop[0] * key
  prefs: []
  type: TYPE_NORMAL
- en: + prop[1] * (key + 1)
  prefs: []
  type: TYPE_NORMAL
- en: + prop[2] * (key + 2))
  prefs: []
  type: TYPE_NORMAL
- en: print(len(props), "props")
  prefs: []
  type: TYPE_NORMAL
- en: assert len(props) == 37, "Expected 37 prop items"
  prefs: []
  type: TYPE_NORMAL
- en: print("Prop checksum:", checksum)
  prefs: []
  type: TYPE_NORMAL
- en: assert checksum == 61414, "Error in props data"
  prefs: []
  type: TYPE_NORMAL
- en: in_my_pockets = [55]
  prefs: []
  type: TYPE_NORMAL
- en: 'selected_item = 0 # the first item'
  prefs: []
  type: TYPE_NORMAL
- en: item_carrying = in_my_pockets[selected_item]
  prefs: []
  type: TYPE_NORMAL
- en: RECIPES = [
  prefs: []
  type: TYPE_NORMAL
- en: '[62, 35, 63], [76, 28, 77], [78, 38, 54], [73, 74, 75],'
  prefs: []
  type: TYPE_NORMAL
- en: '[59, 54, 60], [77, 55, 56], [56, 57, 58], [71, 65, 72],'
  prefs: []
  type: TYPE_NORMAL
- en: '[88, 58, 89], [89, 60, 90], [67, 35, 68]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: checksum = 0
  prefs: []
  type: TYPE_NORMAL
- en: check_counter = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'for recipe in RECIPES:'
  prefs: []
  type: TYPE_NORMAL
- en: checksum += (recipe[0] * check_counter
  prefs: []
  type: TYPE_NORMAL
- en: + recipe[1] * (check_counter + 1)
  prefs: []
  type: TYPE_NORMAL
- en: + recipe[2] * (check_counter + 2))
  prefs: []
  type: TYPE_NORMAL
- en: check_counter += 3
  prefs: []
  type: TYPE_NORMAL
- en: print(len(RECIPES), "recipes")
  prefs: []
  type: TYPE_NORMAL
- en: assert len(RECIPES) == 11, "Expected 11 recipes"
  prefs: []
  type: TYPE_NORMAL
- en: assert checksum == 37296, "Error in recipes data"
  prefs: []
  type: TYPE_NORMAL
- en: print("Recipe checksum:", checksum)
  prefs: []
  type: TYPE_NORMAL
- en: '#######################'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROP INTERACTIONS ##'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#######################'
  prefs: []
  type: TYPE_NORMAL
- en: 'def find_object_start_x():'
  prefs: []
  type: TYPE_NORMAL
- en: checker_x = player_x
  prefs: []
  type: TYPE_NORMAL
- en: 'while room_map[player_y][checker_x] == 255:'
  prefs: []
  type: TYPE_NORMAL
- en: checker_x -= 1
  prefs: []
  type: TYPE_NORMAL
- en: return checker_x
  prefs: []
  type: TYPE_NORMAL
- en: 'def get_item_under_player():'
  prefs: []
  type: TYPE_NORMAL
- en: item_x = find_object_start_x()
  prefs: []
  type: TYPE_NORMAL
- en: item_player_is_on = room_map[player_y][item_x]
  prefs: []
  type: TYPE_NORMAL
- en: return item_player_is_on
  prefs: []
  type: TYPE_NORMAL
- en: 'def pick_up_object():'
  prefs: []
  type: TYPE_NORMAL
- en: global room_map
  prefs: []
  type: TYPE_NORMAL
- en: '# Get object number at player''s location.'
  prefs: []
  type: TYPE_NORMAL
- en: item_player_is_on = get_item_under_player()
  prefs: []
  type: TYPE_NORMAL
- en: 'if item_player_is_on in items_player_may_carry:'
  prefs: []
  type: TYPE_NORMAL
- en: '# Clear the floor space.'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[player_y][player_x] = get_floor_type()
  prefs: []
  type: TYPE_NORMAL
- en: add_object(item_player_is_on)
  prefs: []
  type: TYPE_NORMAL
- en: show_text("Now carrying " + objects[item_player_is_on][3], 0)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.pickup.play()
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: show_text("You can't carry that!", 0)
  prefs: []
  type: TYPE_NORMAL
- en: 'def add_object(item): # Adds item to inventory.'
  prefs: []
  type: TYPE_NORMAL
- en: global selected_item, item_carrying
  prefs: []
  type: TYPE_NORMAL
- en: in_my_pockets.append(item)
  prefs: []
  type: TYPE_NORMAL
- en: item_carrying = item
  prefs: []
  type: TYPE_NORMAL
- en: '# Minus one because indexes start at 0.'
  prefs: []
  type: TYPE_NORMAL
- en: selected_item = len(in_my_pockets) - 1
  prefs: []
  type: TYPE_NORMAL
- en: display_inventory()
  prefs: []
  type: TYPE_NORMAL
- en: 'props[item][0] = 0 # Carried objects go into room 0 (off the map).'
  prefs: []
  type: TYPE_NORMAL
- en: 'def display_inventory():'
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((0, 45), (800, 105))
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.filled_rect(box, BLACK)
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(in_my_pockets) == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: start_display = (selected_item // 16) * 16
  prefs: []
  type: TYPE_NORMAL
- en: 'list_to_show = in_my_pockets[start_display : start_display + 16]'
  prefs: []
  type: TYPE_NORMAL
- en: selected_marker = selected_item % 16
  prefs: []
  type: TYPE_NORMAL
- en: 'for item_counter in range(len(list_to_show)):'
  prefs: []
  type: TYPE_NORMAL
- en: item_number = list_to_show[item_counter]
  prefs: []
  type: TYPE_NORMAL
- en: image = objects[item_number][0]
  prefs: []
  type: TYPE_NORMAL
- en: screen.blit(image, (25 + (46 * item_counter), 90))
  prefs: []
  type: TYPE_NORMAL
- en: box_left = (selected_marker * 46) - 3
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((22 + box_left, 85), (40, 40))
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.rect(box, WHITE)
  prefs: []
  type: TYPE_NORMAL
- en: item_highlighted = in_my_pockets[selected_item]
  prefs: []
  type: TYPE_NORMAL
- en: description = objects[item_highlighted][2]
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text(description, (20, 130), color="white")
  prefs: []
  type: TYPE_NORMAL
- en: 'def drop_object(old_y, old_x):'
  prefs: []
  type: TYPE_NORMAL
- en: global room_map, props
  prefs: []
  type: TYPE_NORMAL
- en: 'if room_map[old_y][old_x] in [0, 2, 39]: # places you can drop things'
  prefs: []
  type: TYPE_NORMAL
- en: props[item_carrying][0] = current_room
  prefs: []
  type: TYPE_NORMAL
- en: props[item_carrying][1] = old_y
  prefs: []
  type: TYPE_NORMAL
- en: props[item_carrying][2] = old_x
  prefs: []
  type: TYPE_NORMAL
- en: room_map[old_y][old_x] = item_carrying
  prefs: []
  type: TYPE_NORMAL
- en: show_text("You have dropped " + objects[item_carrying][3], 0)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.drop.play()
  prefs: []
  type: TYPE_NORMAL
- en: remove_object(item_carrying)
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: 'else: # This only happens if there is already a prop here'
  prefs: []
  type: TYPE_NORMAL
- en: show_text("You can't drop that there.", 0)
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: 'def remove_object(item): # Takes item out of inventory'
  prefs: []
  type: TYPE_NORMAL
- en: global selected_item, in_my_pockets, item_carrying
  prefs: []
  type: TYPE_NORMAL
- en: in_my_pockets.remove(item)
  prefs: []
  type: TYPE_NORMAL
- en: selected_item = selected_item - 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if selected_item < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: selected_item = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(in_my_pockets) == 0: # If they''re not carrying anything'
  prefs: []
  type: TYPE_NORMAL
- en: 'item_carrying = False # Set item_carrying to False'
  prefs: []
  type: TYPE_NORMAL
- en: 'else: # Otherwise set it to the new selected item'
  prefs: []
  type: TYPE_NORMAL
- en: item_carrying = in_my_pockets[selected_item]
  prefs: []
  type: TYPE_NORMAL
- en: display_inventory()
  prefs: []
  type: TYPE_NORMAL
- en: 'def examine_object():'
  prefs: []
  type: TYPE_NORMAL
- en: item_player_is_on = get_item_under_player()
  prefs: []
  type: TYPE_NORMAL
- en: left_tile_of_item = find_object_start_x()
  prefs: []
  type: TYPE_NORMAL
- en: 'if item_player_is_on in [0, 2]: # don''t describe the floor'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'description = "You see: " + objects[item_player_is_on][2]'
  prefs: []
  type: TYPE_NORMAL
- en: 'for prop_number, details in props.items():'
  prefs: []
  type: TYPE_NORMAL
- en: '# props = object number: [room number, y, x]'
  prefs: []
  type: TYPE_NORMAL
- en: 'if details[0] == current_room: # if prop is in the room'
  prefs: []
  type: TYPE_NORMAL
- en: '# If prop is hidden (= at player''s location but not on map)'
  prefs: []
  type: TYPE_NORMAL
- en: if (details[1] == player_y
  prefs: []
  type: TYPE_NORMAL
- en: and details[2] == left_tile_of_item
  prefs: []
  type: TYPE_NORMAL
- en: 'and room_map[details[1]][details[2]] != prop_number):'
  prefs: []
  type: TYPE_NORMAL
- en: add_object(prop_number)
  prefs: []
  type: TYPE_NORMAL
- en: description = "You found " + objects[prop_number][3]
  prefs: []
  type: TYPE_NORMAL
- en: sounds.combine.play()
  prefs: []
  type: TYPE_NORMAL
- en: show_text(description, 0)
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: '#################'
  prefs: []
  type: TYPE_NORMAL
- en: 'USE OBJECTS ##'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#################'
  prefs: []
  type: TYPE_NORMAL
- en: 'def use_object():'
  prefs: []
  type: TYPE_NORMAL
- en: global room_map, props, item_carrying, air, selected_item, energy
  prefs: []
  type: TYPE_NORMAL
- en: global in_my_pockets, suit_stitched, air_fixed, game_over
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You fiddle around with it but don't get anywhere."
  prefs: []
  type: TYPE_NORMAL
- en: standard_responses = {
  prefs: []
  type: TYPE_NORMAL
- en: '4: "Air is running out! You can''t take this lying down!",'
  prefs: []
  type: TYPE_NORMAL
- en: '6: "This is no time to sit around!",'
  prefs: []
  type: TYPE_NORMAL
- en: '7: "This is no time to sit around!",'
  prefs: []
  type: TYPE_NORMAL
- en: '32: "It shakes and rumbles, but nothing else happens.",'
  prefs: []
  type: TYPE_NORMAL
- en: '34: "Ah! That''s better. Now wash your hands.",'
  prefs: []
  type: TYPE_NORMAL
- en: '35: "You wash your hands and shake the water off.",'
  prefs: []
  type: TYPE_NORMAL
- en: '37: "The test tubes smoke slightly as you shake them.",'
  prefs: []
  type: TYPE_NORMAL
- en: '54: "You chew the gum. It''s sticky like glue.",'
  prefs: []
  type: TYPE_NORMAL
- en: '55: "The yoyo bounces up and down, slightly slower than on Earth",'
  prefs: []
  type: TYPE_NORMAL
- en: '56: "It''s a bit too fiddly. Can you thread it on something?",'
  prefs: []
  type: TYPE_NORMAL
- en: '59: "You need to fix the leak before you can use the canister",'
  prefs: []
  type: TYPE_NORMAL
- en: '61: "You try signalling with the mirror, but nobody can see you.",'
  prefs: []
  type: TYPE_NORMAL
- en: '62: "Don''t throw resources away. Things might come in handy...",'
  prefs: []
  type: TYPE_NORMAL
- en: '67: "To enjoy yummy space food, just add water!",'
  prefs: []
  type: TYPE_NORMAL
- en: '75: "You are at Sector: " + str(current_room) + " // X: " \'
  prefs: []
  type: TYPE_NORMAL
- en: '+ str(player_x) + " // Y: " + str(player_y)'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '# Get object number at player''s location.'
  prefs: []
  type: TYPE_NORMAL
- en: item_player_is_on = get_item_under_player()
  prefs: []
  type: TYPE_NORMAL
- en: 'for this_item in [item_player_is_on, item_carrying]:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if this_item in standard_responses:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = standard_responses[this_item]
  prefs: []
  type: TYPE_NORMAL
- en: 'if item_carrying == 70 or item_player_is_on == 70:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "Banging tunes!"
  prefs: []
  type: TYPE_NORMAL
- en: sounds.steelmusic.play(2)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_player_is_on == 11:'
  prefs: []
  type: TYPE_NORMAL
- en: 'use_message = "AIR: " + str(air) + \'
  prefs: []
  type: TYPE_NORMAL
- en: '"% / ENERGY " + str(energy) + "% / "'
  prefs: []
  type: TYPE_NORMAL
- en: 'if not suit_stitched:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message += "*ALERT* SUIT FABRIC TORN / "
  prefs: []
  type: TYPE_NORMAL
- en: 'if not air_fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message += "*ALERT* SUIT AIR BOTTLE MISSING"
  prefs: []
  type: TYPE_NORMAL
- en: 'if suit_stitched and air_fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message += " SUIT OK"
  prefs: []
  type: TYPE_NORMAL
- en: show_text(use_message, 0)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_status_report.play()
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: '# If "on" the computer, player intention is clearly status update.'
  prefs: []
  type: TYPE_NORMAL
- en: '# Return to stop another object use accidentally overriding this.'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_carrying == 60 or item_player_is_on == 60:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You fix " + objects[60][3] + " to the suit"
  prefs: []
  type: TYPE_NORMAL
- en: air_fixed = True
  prefs: []
  type: TYPE_NORMAL
- en: air = 90
  prefs: []
  type: TYPE_NORMAL
- en: air_countdown()
  prefs: []
  type: TYPE_NORMAL
- en: remove_object(60)
  prefs: []
  type: TYPE_NORMAL
- en: elif (item_carrying == 58 or item_player_is_on == 58) \
  prefs: []
  type: TYPE_NORMAL
- en: 'and not suit_stitched:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You use " + objects[56][3] + \
  prefs: []
  type: TYPE_NORMAL
- en: '" to repair the suit fabric"'
  prefs: []
  type: TYPE_NORMAL
- en: suit_stitched = True
  prefs: []
  type: TYPE_NORMAL
- en: remove_object(58)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_carrying == 72 or item_player_is_on == 72:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You radio for help. A rescue ship is coming. \
  prefs: []
  type: TYPE_NORMAL
- en: Rendezvous Sector 13, outside."
  prefs: []
  type: TYPE_NORMAL
- en: props[40][0] = 13
  prefs: []
  type: TYPE_NORMAL
- en: elif (item_carrying == 66 or item_player_is_on == 66) \
  prefs: []
  type: TYPE_NORMAL
- en: 'and current_room in outdoor_rooms:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You dig..."
  prefs: []
  type: TYPE_NORMAL
- en: if (current_room == LANDER_SECTOR
  prefs: []
  type: TYPE_NORMAL
- en: and player_x == LANDER_X
  prefs: []
  type: TYPE_NORMAL
- en: 'and player_y == LANDER_Y):'
  prefs: []
  type: TYPE_NORMAL
- en: add_object(71)
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You found the Poodle lander!"
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_player_is_on == 40:'
  prefs: []
  type: TYPE_NORMAL
- en: clock.unschedule(air_countdown)
  prefs: []
  type: TYPE_NORMAL
- en: show_text("Congratulations, "+ PLAYER_NAME +"!", 0)
  prefs: []
  type: TYPE_NORMAL
- en: show_text("Mission success! You have made it to safety.", 1)
  prefs: []
  type: TYPE_NORMAL
- en: game_over = True
  prefs: []
  type: TYPE_NORMAL
- en: sounds.take_off.play()
  prefs: []
  type: TYPE_NORMAL
- en: game_completion_sequence()
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_player_is_on == 16:'
  prefs: []
  type: TYPE_NORMAL
- en: energy += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if energy > 100:'
  prefs: []
  type: TYPE_NORMAL
- en: energy = 100
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You munch the lettuce and get a little energy back"
  prefs: []
  type: TYPE_NORMAL
- en: draw_energy_air()
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_player_is_on == 42:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room == 27:'
  prefs: []
  type: TYPE_NORMAL
- en: open_door(26)
  prefs: []
  type: TYPE_NORMAL
- en: 'props[25][0] = 0 # Door from RM32 to engineering bay'
  prefs: []
  type: TYPE_NORMAL
- en: 'props[26][0] = 0 # Door inside engineering bay'
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_unique(shut_engineering_door, 60)
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You press the button"
  prefs: []
  type: TYPE_NORMAL
- en: show_text("Door to engineering bay is open for 60 seconds", 1)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_doors_open.play()
  prefs: []
  type: TYPE_NORMAL
- en: sounds.doors.play()
  prefs: []
  type: TYPE_NORMAL
- en: 'elif item_carrying == 68 or item_player_is_on == 68:'
  prefs: []
  type: TYPE_NORMAL
- en: energy = 100
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You use the food to restore your energy"
  prefs: []
  type: TYPE_NORMAL
- en: remove_object(68)
  prefs: []
  type: TYPE_NORMAL
- en: draw_energy_air()
  prefs: []
  type: TYPE_NORMAL
- en: 'if suit_stitched and air_fixed: # open airlock access'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room == 31 and props[20][0] == 31:'
  prefs: []
  type: TYPE_NORMAL
- en: 'open_door(20) # which includes removing the door'
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_airlock_open.play()
  prefs: []
  type: TYPE_NORMAL
- en: show_text("The computer tells you the airlock is now open.", 1)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif props[20][0] == 31:'
  prefs: []
  type: TYPE_NORMAL
- en: 'props[20][0] = 0 # remove door from map'
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_airlock_open.play()
  prefs: []
  type: TYPE_NORMAL
- en: show_text("The computer tells you the airlock is now open.", 1)
  prefs: []
  type: TYPE_NORMAL
- en: 'for recipe in RECIPES:'
  prefs: []
  type: TYPE_NORMAL
- en: ingredient1 = recipe[0]
  prefs: []
  type: TYPE_NORMAL
- en: ingredient2 = recipe[1]
  prefs: []
  type: TYPE_NORMAL
- en: combination = recipe[2]
  prefs: []
  type: TYPE_NORMAL
- en: if (item_carrying == ingredient1
  prefs: []
  type: TYPE_NORMAL
- en: and item_player_is_on == ingredient2) \
  prefs: []
  type: TYPE_NORMAL
- en: or (item_carrying == ingredient2
  prefs: []
  type: TYPE_NORMAL
- en: 'and item_player_is_on == ingredient1):'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You combine " + objects[ingredient1][3] \
  prefs: []
  type: TYPE_NORMAL
- en: + " and " + objects[ingredient2][3] \
  prefs: []
  type: TYPE_NORMAL
- en: + " to make " + objects[combination][3]
  prefs: []
  type: TYPE_NORMAL
- en: 'if item_player_is_on in props.keys():'
  prefs: []
  type: TYPE_NORMAL
- en: props[item_player_is_on][0] = 0
  prefs: []
  type: TYPE_NORMAL
- en: room_map[player_y][player_x] = get_floor_type()
  prefs: []
  type: TYPE_NORMAL
- en: in_my_pockets.remove(item_carrying)
  prefs: []
  type: TYPE_NORMAL
- en: add_object(combination)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.combine.play()
  prefs: []
  type: TYPE_NORMAL
- en: '# {key object number: door object number}'
  prefs: []
  type: TYPE_NORMAL
- en: ACCESS_DICTIONARY = { 79:22, 80:23, 81:24 }
  prefs: []
  type: TYPE_NORMAL
- en: 'if item_carrying in ACCESS_DICTIONARY:'
  prefs: []
  type: TYPE_NORMAL
- en: door_number = ACCESS_DICTIONARY[item_carrying]
  prefs: []
  type: TYPE_NORMAL
- en: 'if props[door_number][0] == current_room:'
  prefs: []
  type: TYPE_NORMAL
- en: use_message = "You unlock the door!"
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_doors_open.play()
  prefs: []
  type: TYPE_NORMAL
- en: sounds.doors.play()
  prefs: []
  type: TYPE_NORMAL
- en: open_door(door_number)
  prefs: []
  type: TYPE_NORMAL
- en: show_text(use_message, 0)
  prefs: []
  type: TYPE_NORMAL
- en: time.sleep(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: 'def game_completion_sequence():'
  prefs: []
  type: TYPE_NORMAL
- en: 'global launch_frame #(initial value is 0, set up in VARIABLES section)'
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((0, 150), (800, 600))
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.filled_rect(box, (128, 0, 0))
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect ((0, top_left_y - 30), (800, 390))
  prefs: []
  type: TYPE_NORMAL
- en: screen.surface.set_clip(box)
  prefs: []
  type: TYPE_NORMAL
- en: 'for y in range(0, 13):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in range(0, 13):'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(images.soil, y, x)
  prefs: []
  type: TYPE_NORMAL
- en: launch_frame += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if launch_frame < 9:'
  prefs: []
  type: TYPE_NORMAL
- en: draw_image(images.rescue_ship, 8 - launch_frame, 6)
  prefs: []
  type: TYPE_NORMAL
- en: draw_shadow(images.rescue_ship_shadow, 8 + launch_frame, 6)
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule(game_completion_sequence, 0.25)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: screen.surface.set_clip(None)
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text("MISSION", (200, 380), color = "white",
  prefs: []
  type: TYPE_NORMAL
- en: fontsize = 128, shadow = (1, 1), scolor = "black")
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text("COMPLETE", (145, 480), color = "white",
  prefs: []
  type: TYPE_NORMAL
- en: fontsize = 128, shadow = (1, 1), scolor = "black")
  prefs: []
  type: TYPE_NORMAL
- en: sounds.completion.play()
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_mission_complete.play()
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##   DOORS   ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'def open_door(opening_door_number):'
  prefs: []
  type: TYPE_NORMAL
- en: global door_frames, door_shadow_frames
  prefs: []
  type: TYPE_NORMAL
- en: global door_frame_number, door_object_number
  prefs: []
  type: TYPE_NORMAL
- en: door_frames = [images.door1, images.door2, images.door3,
  prefs: []
  type: TYPE_NORMAL
- en: images.door4, images.floor]
  prefs: []
  type: TYPE_NORMAL
- en: '# (Final frame restores shadow ready for when door reappears).'
  prefs: []
  type: TYPE_NORMAL
- en: door_shadow_frames = [images.door1_shadow, images.door2_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.door3_shadow, images.door4_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.door_shadow]
  prefs: []
  type: TYPE_NORMAL
- en: door_frame_number = 0
  prefs: []
  type: TYPE_NORMAL
- en: door_object_number = opening_door_number
  prefs: []
  type: TYPE_NORMAL
- en: do_door_animation()
  prefs: []
  type: TYPE_NORMAL
- en: 'def close_door(closing_door_number):'
  prefs: []
  type: TYPE_NORMAL
- en: global door_frames, door_shadow_frames
  prefs: []
  type: TYPE_NORMAL
- en: global door_frame_number, door_object_number, player_y
  prefs: []
  type: TYPE_NORMAL
- en: door_frames = [images.door4, images.door3, images.door2,
  prefs: []
  type: TYPE_NORMAL
- en: images.door1, images.door]
  prefs: []
  type: TYPE_NORMAL
- en: door_shadow_frames = [images.door4_shadow, images.door3_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.door2_shadow, images.door1_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.door_shadow]
  prefs: []
  type: TYPE_NORMAL
- en: door_frame_number = 0
  prefs: []
  type: TYPE_NORMAL
- en: door_object_number = closing_door_number
  prefs: []
  type: TYPE_NORMAL
- en: '# If player is in same row as a door, they must be in open doorway'
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_y == props[door_object_number][1]:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if player_y == 0: # if in the top doorway'
  prefs: []
  type: TYPE_NORMAL
- en: 'player_y = 1 # move them down'
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'player_y = room_height - 2 # move them up'
  prefs: []
  type: TYPE_NORMAL
- en: do_door_animation()
  prefs: []
  type: TYPE_NORMAL
- en: 'def do_door_animation():'
  prefs: []
  type: TYPE_NORMAL
- en: global door_frames, door_frame_number, door_object_number, objects
  prefs: []
  type: TYPE_NORMAL
- en: objects[door_object_number][0] = door_frames[door_frame_number]
  prefs: []
  type: TYPE_NORMAL
- en: objects[door_object_number][1] = door_shadow_frames[door_frame_number]
  prefs: []
  type: TYPE_NORMAL
- en: door_frame_number += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if door_frame_number == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if door_frames[-1] == images.floor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'props[door_object_number][0] = 0 # remove door from props list'
  prefs: []
  type: TYPE_NORMAL
- en: '# Regenerate room map from the props'
  prefs: []
  type: TYPE_NORMAL
- en: '# to put the door in the room if required.'
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule(do_door_animation, 0.15)
  prefs: []
  type: TYPE_NORMAL
- en: 'def shut_engineering_door():'
  prefs: []
  type: TYPE_NORMAL
- en: global current_room, door_room_number, props
  prefs: []
  type: TYPE_NORMAL
- en: 'props[25][0] = 32 # Door from room 32 to the engineering bay.'
  prefs: []
  type: TYPE_NORMAL
- en: 'props[26][0] = 27 # Door inside engineering bay.'
  prefs: []
  type: TYPE_NORMAL
- en: 'generate_map() # Add door to room_map for if in affected room.'
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room == 27:'
  prefs: []
  type: TYPE_NORMAL
- en: close_door(26)
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room == 32:'
  prefs: []
  type: TYPE_NORMAL
- en: close_door(25)
  prefs: []
  type: TYPE_NORMAL
- en: show_text("The computer tells you the doors are closed.", 1)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_doors_closed.play()
  prefs: []
  type: TYPE_NORMAL
- en: 'def door_in_room_26():'
  prefs: []
  type: TYPE_NORMAL
- en: global airlock_door_frame, room_map
  prefs: []
  type: TYPE_NORMAL
- en: frames = [images.door, images.door1, images.door2,
  prefs: []
  type: TYPE_NORMAL
- en: images.door3,images.door4, images.floor
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: shadow_frames = [images.door_shadow, images.door1_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.door2_shadow, images.door3_shadow,
  prefs: []
  type: TYPE_NORMAL
- en: images.door4_shadow, None]
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room != 26:'
  prefs: []
  type: TYPE_NORMAL
- en: clock.unschedule(door_in_room_26)
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: '# prop 21 is the door in Room 26.'
  prefs: []
  type: TYPE_NORMAL
- en: if ((player_y == 8 and player_x == 2) or props[63] == [26, 8, 2]) \
  prefs: []
  type: TYPE_NORMAL
- en: 'and props[21][0] == 26:'
  prefs: []
  type: TYPE_NORMAL
- en: airlock_door_frame += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if airlock_door_frame == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: 'props[21][0] = 0 # Remove door from map when fully open.'
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][1] = 0
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][2] = 0
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][3] = 0
  prefs: []
  type: TYPE_NORMAL
- en: if ((player_y != 8 or player_x != 2) and props[63] != [26, 8, 2]) \
  prefs: []
  type: TYPE_NORMAL
- en: 'and airlock_door_frame > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if airlock_door_frame == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '# Add door to props and map so animation is shown.'
  prefs: []
  type: TYPE_NORMAL
- en: props[21][0] = 26
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][1] = 21
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][2] = 255
  prefs: []
  type: TYPE_NORMAL
- en: room_map[0][3] = 255
  prefs: []
  type: TYPE_NORMAL
- en: airlock_door_frame -= 1
  prefs: []
  type: TYPE_NORMAL
- en: objects[21][0] = frames[airlock_door_frame]
  prefs: []
  type: TYPE_NORMAL
- en: objects[21][1] = shadow_frames[airlock_door_frame]
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##    AIR    ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: 'def draw_energy_air():'
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((20, 765), (350, 20))
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.filled_rect(box, BLACK)
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text("AIR", (20, 766), color=BLUE)
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text("ENERGY", (180, 766), color=YELLOW)
  prefs: []
  type: TYPE_NORMAL
- en: 'if air > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((50, 765), (air, 20))
  prefs: []
  type: TYPE_NORMAL
- en: 'screen.draw.filled_rect(box, BLUE) # Draw new air bar.'
  prefs: []
  type: TYPE_NORMAL
- en: 'if energy > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: box = Rect((250, 765), (energy, 20))
  prefs: []
  type: TYPE_NORMAL
- en: 'screen.draw.filled_rect(box, YELLOW) # Draw new energy bar.'
  prefs: []
  type: TYPE_NORMAL
- en: 'def end_the_game(reason):'
  prefs: []
  type: TYPE_NORMAL
- en: global game_over
  prefs: []
  type: TYPE_NORMAL
- en: show_text(reason, 1)
  prefs: []
  type: TYPE_NORMAL
- en: game_over = True
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_mission_fail.play()
  prefs: []
  type: TYPE_NORMAL
- en: sounds.gameover.play()
  prefs: []
  type: TYPE_NORMAL
- en: screen.draw.text("GAME OVER", (120, 400), color = "white",
  prefs: []
  type: TYPE_NORMAL
- en: fontsize = 128, shadow = (1, 1), scolor = "black")
  prefs: []
  type: TYPE_NORMAL
- en: 'def air_countdown():'
  prefs: []
  type: TYPE_NORMAL
- en: global air, game_over
  prefs: []
  type: TYPE_NORMAL
- en: 'if game_over:'
  prefs: []
  type: TYPE_NORMAL
- en: 'return # Don''t sap air when they''re already dead.'
  prefs: []
  type: TYPE_NORMAL
- en: air -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if air == 20:'
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_air_low.play()
  prefs: []
  type: TYPE_NORMAL
- en: 'if air == 10:'
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_act_now.play()
  prefs: []
  type: TYPE_NORMAL
- en: draw_energy_air()
  prefs: []
  type: TYPE_NORMAL
- en: 'if air < 1:'
  prefs: []
  type: TYPE_NORMAL
- en: end_the_game("You're out of air!")
  prefs: []
  type: TYPE_NORMAL
- en: 'def alarm():'
  prefs: []
  type: TYPE_NORMAL
- en: show_text("Air is running out, " + PLAYER_NAME
  prefs: []
  type: TYPE_NORMAL
- en: + "! Get to safety, then radio for help!", 1)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.alarm.play(3)
  prefs: []
  type: TYPE_NORMAL
- en: sounds.say_breach.play()
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##  HAZARDS  ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_data = {
  prefs: []
  type: TYPE_NORMAL
- en: '# room number: [[y, x, direction, bounce addition to direction]]'
  prefs: []
  type: TYPE_NORMAL
- en: '28: [[1, 8, 2, 1], [7, 3, 4, 1]], 32: [[1, 5, 4, -1]],'
  prefs: []
  type: TYPE_NORMAL
- en: '34: [[5, 1, 1, 1], [5, 5, 1, 2]], 35: [[4, 4, 1, 2], [2, 5, 2, 2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '36: [[2, 1, 2, 2]], 38: [[1, 4, 3, 2], [5, 8, 1, 2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '40: [[3, 1, 3, -1], [6, 5, 2, 2], [7, 5, 4, 2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '41: [[4, 5, 2, 2], [6, 3, 4, 2], [8, 1, 2, 2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '42: [[2, 1, 2, 2], [4, 3, 2, 2], [6, 5, 2, 2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '46: [[2, 1, 2, 2]],'
  prefs: []
  type: TYPE_NORMAL
- en: '48: [[1, 8, 3, 2], [8, 8, 1, 2], [3, 9, 3, 2]]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'def deplete_energy(penalty):'
  prefs: []
  type: TYPE_NORMAL
- en: global energy, game_over
  prefs: []
  type: TYPE_NORMAL
- en: 'if game_over:'
  prefs: []
  type: TYPE_NORMAL
- en: 'return # Don''t sap energy when they''re already dead.'
  prefs: []
  type: TYPE_NORMAL
- en: energy = energy - penalty
  prefs: []
  type: TYPE_NORMAL
- en: draw_energy_air()
  prefs: []
  type: TYPE_NORMAL
- en: 'if energy < 1:'
  prefs: []
  type: TYPE_NORMAL
- en: end_the_game("You're out of energy!")
  prefs: []
  type: TYPE_NORMAL
- en: 'def hazard_start():'
  prefs: []
  type: TYPE_NORMAL
- en: global current_room_hazards_list, hazard_map
  prefs: []
  type: TYPE_NORMAL
- en: 'if current_room in hazard_data.keys():'
  prefs: []
  type: TYPE_NORMAL
- en: current_room_hazards_list = hazard_data[current_room]
  prefs: []
  type: TYPE_NORMAL
- en: 'for hazard in current_room_hazards_list:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_y = hazard[0]
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x = hazard[1]
  prefs: []
  type: TYPE_NORMAL
- en: hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_interval(hazard_move, 0.15)
  prefs: []
  type: TYPE_NORMAL
- en: 'def hazard_move():'
  prefs: []
  type: TYPE_NORMAL
- en: global current_room_hazards_list, hazard_data, hazard_map
  prefs: []
  type: TYPE_NORMAL
- en: global old_player_x, old_player_y
  prefs: []
  type: TYPE_NORMAL
- en: 'if game_over:'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'for hazard in current_room_hazards_list:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_y = hazard[0]
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x = hazard[1]
  prefs: []
  type: TYPE_NORMAL
- en: hazard_direction = hazard[2]
  prefs: []
  type: TYPE_NORMAL
- en: old_hazard_x = hazard_x
  prefs: []
  type: TYPE_NORMAL
- en: old_hazard_y = hazard_y
  prefs: []
  type: TYPE_NORMAL
- en: hazard_map[old_hazard_y][old_hazard_x] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_direction == 1: # up'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_y -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_direction == 2: # right'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_direction == 3: # down'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_y += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_direction == 4: # left'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x -= 1
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = False
  prefs: []
  type: TYPE_NORMAL
- en: if (hazard_y == player_y and hazard_x == player_x) or \
  prefs: []
  type: TYPE_NORMAL
- en: (hazard_y == from_player_y and hazard_x == from_player_x
  prefs: []
  type: TYPE_NORMAL
- en: 'and player_frame > 0):'
  prefs: []
  type: TYPE_NORMAL
- en: sounds.ouch.play()
  prefs: []
  type: TYPE_NORMAL
- en: deplete_energy(10)
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = True
  prefs: []
  type: TYPE_NORMAL
- en: '# Stop hazard going out of the doors'
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_x == room_width:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = True
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x = room_width - 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_x == -1:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = True
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_y == room_height:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = True
  prefs: []
  type: TYPE_NORMAL
- en: hazard_y = room_height - 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_y == -1:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = True
  prefs: []
  type: TYPE_NORMAL
- en: hazard_y = 0
  prefs: []
  type: TYPE_NORMAL
- en: '# Stop when hazard hits scenery or another hazard.'
  prefs: []
  type: TYPE_NORMAL
- en: if room_map[hazard_y][hazard_x] not in items_player_may_stand_on \
  prefs: []
  type: TYPE_NORMAL
- en: 'or hazard_map[hazard_y][hazard_x] != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_should_bounce = True
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_should_bounce:'
  prefs: []
  type: TYPE_NORMAL
- en: 'hazard_y = old_hazard_y # Move back to last valid position.'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_x = old_hazard_x
  prefs: []
  type: TYPE_NORMAL
- en: hazard_direction += hazard[3]
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_direction > 4:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_direction -= 4
  prefs: []
  type: TYPE_NORMAL
- en: 'if hazard_direction < 1:'
  prefs: []
  type: TYPE_NORMAL
- en: hazard_direction += 4
  prefs: []
  type: TYPE_NORMAL
- en: hazard[2] = hazard_direction
  prefs: []
  type: TYPE_NORMAL
- en: hazard_map[hazard_y][hazard_x] = 49 + (current_room % 3)
  prefs: []
  type: TYPE_NORMAL
- en: hazard[0] = hazard_y
  prefs: []
  type: TYPE_NORMAL
- en: hazard[1] = hazard_x
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: '##   START   ##'
  prefs: []
  type: TYPE_NORMAL
- en: '###############'
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_interval(game_loop, 0.03)
  prefs: []
  type: TYPE_NORMAL
- en: generate_map()
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_interval(adjust_wall_transparency, 0.05)
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_unique(display_inventory, 1)
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_unique(draw_energy_air, 0.5)
  prefs: []
  type: TYPE_NORMAL
- en: clock.schedule_unique(alarm, 10)
  prefs: []
  type: TYPE_NORMAL
- en: A higher number below gives a longer time limit.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: clock.schedule_interval(air_countdown, 5)
  prefs: []
  type: TYPE_NORMAL
- en: 'sounds.mission.play() # Intro music'
  prefs: []
  type: TYPE_NORMAL
