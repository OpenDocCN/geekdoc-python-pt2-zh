["```py\nclass AffineTransform:\n    def __init__(self, sx=1, sy=1, tx=0, ty=0, shx=0, shy=0):\n        self.sx = sx\n        self.sy = sy\n        self.tx = tx\n        self.ty = ty\n        self.shx = shx\n        self.shy = shy\n```", "```py\nfrom geom2d.point import Point\n\nclass AffineTransform:\n   --snip--\n\n   def apply_to_point(self, point: Point):\n       return Point(\n           (self.sx * point.x) + (self.shx * point.y) + self.tx,\n           (self.shy * point.x) + (self.sy * point.y) + self.ty\n       )\n```", "```py\nimport unittest\n\nfrom geom2d.point import Point\nfrom geom2d.affine_transf import AffineTransform\n\nclass TestAffineTransform(unittest.TestCase):\n    point = Point(2, 3)\n    scale = AffineTransform(2, 5)\n    trans = AffineTransform(1, 1, 10, 15)\n    shear = AffineTransform(1, 1, 0, 0, 3, 4)\n\n ➊ def test_scale_point(self):\n        expected = Point(4, 15)\n        actual = self.scale.apply_to_point(self.point)\n        self.assertEqual(expected, actual)\n ➋ def test_translate_point(self):\n        expected = Point(12, 18)\n        actual = self.trans.apply_to_point(self.point)\n        self.assertEqual(expected, actual)\n ➌ def test_shear_point(self):\n        expected = Point(11, 11)\n        actual = self.shear.apply_to_point(self.point)\n        self.assertEqual(expected, actual)\n```", "```py\n$ python3 -m unittest geom2d/affine_transf_test.py\n```", "```py\nRan 3 tests in 0.001s\n\nOK\n```", "```py\nfrom geom2d.segment import Segment\nfrom geom2d.point import Point\n\nclass AffineTransform:\n   --snip--\n\n   def apply_to_segment(self, segment: Segment):\n       return Segment(\n           self.apply_to_point(segment.start),\n           self.apply_to_point(segment.end)\n       )\n```", "```py\nfrom geom2d.polygon import Polygon\nfrom geom2d.segment import Segment\nfrom geom2d.point import Point\n\nclass AffineTransform:\n   --snip--\n\n   def apply_to_polygon(self, polygon: Polygon):\n       return Polygon(\n           [self.apply_to_point(v) for v in polygon.vertices]\n       )\n```", "```py\nfrom geom2d.rect import Rect\nfrom geom2d.circle import Circle\nfrom geom2d.polygon import Polygon\nfrom geom2d.segment import Segment\nfrom geom2d.point import Point\n\nclass AffineTransform:\n   --snip--\n\n   def apply_to_rect(self, rect: Rect):\n       return self.apply_to_polygon(\n           rect.to_polygon()\n       )\n\n   def apply_to_circle(self, circle: Circle, divisions=30):\n       return self.apply_to_polygon(\n           circle.to_polygon(divisions)\n       )\n```", "```py\nclass AffineTransform:\n   --snip--\n\n   def then(self, other):\n       return AffineTransform(\n           sx=other.sx * self.sx + other.shx * self.shy,\n           sy=other.shy * self.shx + other.sy * self.sy,\n           tx=other.sx * self.tx + other.shx * self.ty + other.tx,\n           ty=other.shy * self.tx + other.sy * self.ty + other.ty,\n           shx=other.sx * self.shx + other.shx * self.sy,\n           shy=other.shy * self.sx + other.sy * self.shy\n       )\n```", "```py\nfrom geom2d.nums import are_close_enough\nfrom geom2d.rect import Rect\nfrom geom2d.circle import Circle\nfrom geom2d.polygon import Polygon\nfrom geom2d.segment import Segment\nfrom geom2d.point import Point\n\nclass AffineTransform:\n    --snip--\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n\n        if not isinstance(other, AffineTransform):\n            return False\n\n        return are_close_enough(self.sx, other.sx) \\\n               and are_close_enough(self.sy, other.sy) \\\n               and are_close_enough(self.tx, other.tx) \\\n               and are_close_enough(self.ty, other.ty) \\\n               and are_close_enough(self.shx, other.shx) \\\n               and are_close_enough(self.shy, other.shy)\n```", "```py\nclass TestAffineTransform(unittest.TestCase):\n   --snip--\n\n   def test_concatenate_scale_then_translate(self):\n       expected = AffineTransform(2, 5, 10, 15)\n       actual = self.scale.then(self.trans)\n       self.assertEqual(expected, actual)\n\n   def test_concatenate_translate_then_scale(self):\n       expected = AffineTransform(2, 5, 20, 75)\n       actual = self.trans.then(self.scale)\n       self.assertEqual(expected, actual)\n```", "```py\n$ python3 -m unittest geom2d/affine_transf_test.py\n```", "```py\nclass AffineTransform:\n    --snip--\n\n   def inverse(self):\n       denom = self.sx * self.sy - self.shx * self.shy\n       return AffineTransform(\n           sx=self.sy / denom,\n           sy=self.sx / denom,\n           tx=(self.ty * self.shx - self.sy * self.tx) / denom,\n           ty=(self.tx * self.shy - self.sx * self.ty) / denom,\n           shx=-self.shx / denom,\n           shy=-self.shy / denom\n       )\n```", "```py\nclass TestAffineTransform(unittest.TestCase):\n   --snip--\n\n   def test_inverse(self):\n       transf = AffineTransform(1, 2, 3, 4, 5, 6)\n       expected = AffineTransform()\n       actual = transf.then(transf.inverse())\n       self.assertEqual(expected, actual)\n```", "```py\n$ python3 -m unittest geom2d/affine_transf_test.py\n```", "```py\n>>> from geom2d.affine_transf import AffineTransform\n>>> from geom2d.point import Point\n>>> trans = AffineTransform(tx=10, ty=20)\n>>> original = Point(5, 7)\n```", "```py\n>>> translated = trans.apply_to_point(original)\n>>> str(translated)\n'(15, 27)'\n```", "```py\n>>> inverse = trans.inverse().apply_to_point(translated)\n>>> str(inverse)\n'(5.0, 7.0)'\n```", "```py\nfrom geom2d.affine_transf import AffineTransform\nfrom geom2d.point import Point\n\ndef make_scale(sx: float, sy: float , center=Point(0, 0)):\n    return AffineTransform(\n        sx=sx,\n        sy=sy,\n        tx=center.x * (1.0 - sx),\n        ty=center.y * (1.0 - sy)\n    )\n```", "```py\nimport math\n\nfrom geom2d.affine_transf import AffineTransform\nfrom geom2d.point import Point\n\n--snip--\n\ndef make_rotation(radians: float, center=Point(0, 0)):\n    cos = math.cos(radians)\n    sin = math.sin(radians)\n    one_minus_cos = 1.0 - cos\n\n    return AffineTransform(\n        sx=cos,\n        sy=cos,\n        tx=center.x * one_minus_cos + center.y * sin,\n        ty=center.y * one_minus_cos - center.x * sin,\n        shx=-sin,\n        shy=sin\n    )\n```", "```py\n>>> from geom2d.affine_transforms import make_rotation\n>>> from geom2d.point import Point\n>>> import math\n>>> point = Point(15, 15)\n```", "```py\n>>> rot_origin = make_rotation(math.pi / 4)\n>>> str(rot_origin.apply_to_point(point))\n'(1.7763568394002505e-15, 21.213203435596427)'\n```", "```py\n>>> rot_other = make_rotation(math.pi / 4, Point(10, 10))\n>>> str(rot_other.apply_to_point(point))\n'(10.000000000000002, 17.071067811865476)'\n```", "```py\ndef uniform_t_sequence(steps: int):\n    return [t / steps for t in range(steps + 1)]\n\ndef ease_in_out_t_sequence(steps: int):\n    return [ease_in_out_t(t) for t in uniform_t_sequence(steps)]\n\ndef ease_in_out_t(t: float):\n    return t ** 2 / (t ** 2 + (1 - t) ** 2)\n```", "```py\n>>> from geom2d.interpolation import uniform_t_sequence\n>>> uniform_t_sequence(10)\n[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n```", "```py\n>>> ease_in_out_t_sequence(10)\n[0.0, 0.012195121951219514, 0.058823529411764705,\n0.15517241379310345, 0.30769230769230776, 0.5,\n0.6923076923076923, 0.8448275862068965,\n0.9411764705882353, 0.9878048780487805, 1.0]\n```", "```py\nimport geom2d.tparam as tparam\n\n--snip--\n\ndef interpolate(vs: float, ve: float, t: float):\n    tparam.ensure_valid(t)\n    return vs + t * (ve - vs)\n```", "```py\nimport math\n\nfrom geom2d.affine_transf import AffineTransform\nfrom geom2d.interpolation import ease_in_out_t_sequence, interpolate\nfrom geom2d.point import Point\n\n--snip--\n\ndef ease_in_out_interpolation(start, end, steps):\n ➊ t_seq = ease_in_out_t_sequence(steps)\n ➋ return [__interpolated(start, end, t) for t in t_seq]\n\ndef __interpolated(s: AffineTransform, e: AffineTransform, t):\n ➌ return AffineTransform(\n        sx=interpolate(s.sx, e.sx, t),\n        sy=interpolate(s.sy, e.sy, t),\n        tx=interpolate(s.tx, e.tx, t),\n        ty=interpolate(s.ty, e.ty, t),\n        shx=interpolate(s.shx, e.shx, t),\n        shy=interpolate(s.shy, e.shy, t)\n    )\n```", "```py\n$ python3 -m unittest discover -s geom2d/tests/ -p '*_test.py'\n```", "```py\nRan 58 tests in 0.004s\n\nOK\n```", "```py\nfrom geom2d import Point, Polygon\n```", "```py\nfrom geom2d.point import Point\nfrom geom2d.polygon import Polygon\n```", "```py\nfrom .point import Point\nfrom .vector import Vector\nfrom .vectors import *\nfrom .circle import Circle\nfrom .circles import *\nfrom .interpolation import *\nfrom .line import Line\nfrom .nums import *\nfrom .open_interval import OpenInterval\nfrom .polygon import Polygon\nfrom .rect import Rect\nfrom .rects import *\nfrom .segment import Segment\nfrom .size import Size\nfrom .tparam import *\nfrom .affine_transf import *\nfrom .affine_transforms import *\n```", "```py\n>>> from geom2d import Point, Size, Rect\n>>> origin = Point(2, 3)\n>>> size = Size(10, 15)\n>>> rect = Rect(origin, size)\n```"]