- en: '**2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: KEEPING ORGANIZED WITH CONDA ENVIRONMENTS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Conda 环境保持组织**
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Each of your Python projects should have its own conda environment. Conda environments
    let you use any version of any package you want, including Python, without the
    risk of compatibility conflicts. You can organize your packages based on project
    needs rather than cluttering your base directory with unnecessary packages. And
    you can share your environments with others, making it possible for them to perfectly
    reproduce your projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Python 项目应该有自己的 conda 环境。Conda 环境让你可以使用任何你想要的包版本，包括 Python，而不会面临兼容性冲突的风险。你可以根据项目需求来组织你的包，而不是把不必要的包堆积在基础目录中。你还可以与他人共享你的环境，使他们能够完美地重现你的项目。
- en: Anaconda Navigator, introduced in the previous chapter, provides an easy point-and-click
    interface for managing environments and packages. For even more control, conda
    lets you perform similar tasks using text commands in Anaconda Prompt (for Windows)
    or in a terminal (for macOS or Linux).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中介绍的 Anaconda Navigator 提供了一个简单的点选界面来管理环境和包。为了更高的控制，conda 让你可以通过文本命令在 Anaconda
    Prompt（Windows）或终端（macOS 或 Linux）中执行类似的任务。
- en: In this chapter, we’ll use both Navigator and conda to create conda environments,
    install packages, manage the packages, remove the environment, and more. Before
    we begin, let’s take a closer look at why a conda environment is useful.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Navigator 和 conda 来创建 conda 环境、安装包、管理包、删除环境等。在开始之前，让我们更详细地了解为什么 conda
    环境如此有用。
- en: '**Understanding Conda Environments**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解 Conda 环境**'
- en: You can think of conda environments as separate Python installations. The *conda
    environment manager*, represented by the cargo ship in [Figure 2-1](ch02.xhtml#ch02fig1),
    treats each environment much like a secure shipping container. Each “container”
    can have its own version of both Python and any other packages you need to run
    for a specific project. These containers are nothing more than dedicated directories
    in your computer’s directory tree.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把 conda 环境看作是独立的 Python 安装。*conda 环境管理器*，在 [图 2-1](ch02.xhtml#ch02fig1) 中由货船表示，将每个环境视为一个安全的运输容器。每个“容器”都可以有自己的
    Python 版本和你为特定项目需要运行的任何其他包的版本。这些容器不过是你计算机目录树中的专用目录。
- en: '![Image](../images/02fig01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig01.jpg)'
- en: '*Figure 2-1: A conceptual diagram for the conda environment and package managers*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：conda 环境和包管理器的概念图*'
- en: As shown in [Figure 2-1](ch02.xhtml#ch02fig1), you can have different versions
    of Python and different versions of the same libraries loaded on your computer.
    If they’re in separate environments, they’ll be isolated and won’t conflict with
    one another. This is important because you might inherit legacy projects that
    run only with older versions of some packages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 2-1](ch02.xhtml#ch02fig1) 所示，你可以在计算机上加载不同版本的 Python 和相同库的不同版本。如果它们在不同的环境中，它们将被隔离，不会互相冲突。这一点很重要，因为你可能会继承只在某些旧版本的包上运行的遗留项目。
- en: The *conda package manager*, represented by the crane in [Figure 2-1](ch02.xhtml#ch02fig1),
    finds and installs packages into your environments. Think of each package as a
    separate item packed in a shipping container like that heavy box of *National
    Geographic* magazines you should’ve recycled years ago.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*conda 包管理器*，在 [图 2-1](ch02.xhtml#ch02fig1) 中由起重机表示，用于查找并安装包到你的环境中。可以把每个包想象成一个单独的项目，就像你应该早就回收掉的那箱
    *《国家地理》* 杂志一样，打包在一个运输容器里。'
- en: The package manager ensures that you have the latest stable version of a package
    or of a version that you specify. It also finds and loads all the *dependencies*
    the main package needs to run at the correctly matched versions. A dependency
    is just another Python package that provides supporting functionality. For example,
    Matplotlib (for plotting) and pandas (for data analysis) are both built on NumPy
    (Numerical Python) and won’t run without it. For this reason, it’s best to install
    all the packages that you’re going to need for a project at the same time, if
    possible, to avoid dependency conflicts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理器确保你拥有最新的稳定版本，或者是你指定的版本的包。它还会查找并加载主包运行所需的所有 *依赖项*，并确保依赖项的版本匹配。依赖项只是提供支持功能的另一个
    Python 包。例如，Matplotlib（用于绘图）和 pandas（用于数据分析）都建立在 NumPy（数值 Python）之上，且没有它们无法运行。因此，最好在可能的情况下，同时安装所有项目所需的包，以避免依赖冲突。
- en: If you’re worried that installing packages in each conda environment is poor
    space management, set your mind to rest. No copies are created. Conda downloads
    packages into a package cache, and each environment links to the appropriate packages
    in this cache.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你担心在每个 conda 环境中安装软件包会浪费空间，完全不用担心。不会创建任何副本。Conda 会将软件包下载到软件包缓存中，每个环境都链接到该缓存中的相应软件包。
- en: By default, this package cache is in the *pkgs* directory of your Anaconda distribution.
    To find it, open Anaconda Prompt or a terminal (see the instructions in [Chapter
    1](ch01.xhtml)) and enter conda info. Depending on your operating system, you
    should find the package cache at *C:\Users\<username>\anaconda3\pkgs* (Windows),
    *~/opt/anaconda3* (macOS), or */home/<username>/anaconda3/pkgs* (Linux).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个软件包缓存位于 Anaconda 发行版的 *pkgs* 目录中。要找到它，可以打开 Anaconda 提示符或终端（参见 [第 1 章](ch01.xhtml)
    的说明），并输入 conda info。根据你的操作系统，你应该能在 *C:\Users\<username>\anaconda3\pkgs*（Windows）、*~/opt/anaconda3*（macOS）或
    */home/<username>/anaconda3/pkgs*（Linux）找到软件包缓存。
- en: Of course, *<username>* here refers to your personal username. The macOS location
    shown is for the graphical installation. If you installed Anaconda using the shell,
    you can find it at */Users/<username>/anaconda3*. In any case, the `conda info`
    command will reveal its location.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里的 *<username>* 指的是你的个人用户名。macOS 显示的位置是图形化安装路径。如果你使用命令行安装 Anaconda，你可以在
    */Users/<username>/anaconda3* 找到它。无论如何，`conda info` 命令都会显示其位置。
- en: '**NOTE**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*By default, each user has their own package cache that’s not shared with anyone
    else. It’s possible to set up a shared package cache to save disk space and reduce
    installation times. If you want to share packages among multiple users, see the
    instructions at [https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/](https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/).*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*默认情况下，每个用户都有自己的软件包缓存，并且不会与其他人共享。如果你想设置一个共享的软件包缓存来节省磁盘空间并减少安装时间，可以查看 [https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/](https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/)
    中的说明。*'
- en: You can also use the `conda info` command (or `conda info --envs`) to show where
    your conda environments are stored. In Windows, for example, the default location
    is *C:\Users\<username>\anaconda3\envs*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`conda info`命令（或`conda info --envs`）来查看你的 conda 环境存储的位置。例如，在 Windows 中，默认位置是
    *C:\Users\<username>\anaconda3\envs*。
- en: The base environment is created by default when you install Anaconda, and it
    includes a Python installation and core system libraries and dependencies of conda.
    As a general guideline, *avoid installing additional packages into your base environment*.
    If you need to install additional packages for a new project, first create a new
    conda environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基础环境在安装 Anaconda 时默认创建，并包含 Python 安装和 conda 的核心系统库及依赖项。一般建议是，*避免在基础环境中安装额外的软件包*。如果你需要为新项目安装额外的软件包，最好首先创建一个新的
    conda 环境。
- en: '**CONDA AND PIP**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**CONDA 和 PIP**'
- en: You’ll occasionally encounter a package that can’t be installed with conda.
    In this case, you’ll need to do so using the Python *package management system
    (pip)*. Conda and pip work similarly with two exceptions. First, pip works only
    with Python, whereas conda works with multiple languages. Second, pip installs
    packages from the *Python Package Index* (*[https://pypi.org/](https://pypi.org/)*),
    otherwise known as *PyPI*, whereas conda installs packages from the *Anaconda
    repository* (*[https://repo.anaconda.com/](https://repo.anaconda.com/)*) and *[Anaconda.org](http://Anaconda.org)*
    (*[https://anaconda.org/](https://anaconda.org/)*). You can also install packages
    from PyPI in an active conda environment using pip. For your convenience, conda
    will automatically install a copy of pip in each new environment you create.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会遇到无法通过 conda 安装的软件包。在这种情况下，你需要使用 Python 的 *包管理系统（pip）* 来安装。Conda 和 pip 的工作原理类似，但有两个不同之处。首先，pip
    只适用于 Python，而 conda 支持多种语言。其次，pip 从 *Python 包索引*（*[https://pypi.org/](https://pypi.org/)*）即
    *PyPI* 安装软件包，而 conda 则从 *Anaconda 仓库*（*[https://repo.anaconda.com/](https://repo.anaconda.com/)*）和
    *[Anaconda.org](http://Anaconda.org)*（*[https://anaconda.org/](https://anaconda.org/)*）安装软件包。你也可以在激活的
    conda 环境中使用 pip 从 PyPI 安装软件包。为了方便起见，conda 会在你创建的每个新环境中自动安装一份 pip。
- en: 'Unfortunately, issues can arise when conda and pip are used together to create
    an environment, especially when the tools are used back to back multiple times,
    establishing a state that can be difficult to reproduce. Most of these issues
    stem from that fact that conda, like other package managers, has limited abilities
    to control packages that it did not install. When using conda and pip together,
    here are the general guidelines:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当conda和pip一起使用创建环境时，可能会出现问题，特别是在多次连续使用这些工具时，会形成一种很难复现的状态。大多数问题源于这样一个事实：conda像其他包管理器一样，对于它没有安装的包控制能力有限。在一起使用conda和pip时，以下是一般的指导原则：
- en: Install packages needing pip only after installing packages available through
    conda.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安装通过conda可用的包之后，再安装仅通过pip需要的包。
- en: Don’t run pip in the root environment.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在根环境中运行pip。
- en: Re-create the conda environment from scratch if changes are needed.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要更改，可以从头开始重新创建conda环境。
- en: Store conda and pip requirements in an environment (text) file.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将conda和pip的需求存储在环境（文本）文件中。
- en: For more details on this issue, see *[https://www.anaconda.com/blog/using-pip-in-a-conda-environment/](https://www.anaconda.com/blog/using-pip-in-a-conda-environment/)*.
    For more on pip, see *[https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment/](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment/)*.
    We’ll look at creating a requirements text file later in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此问题的更多细节，请参见 *[https://www.anaconda.com/blog/using-pip-in-a-conda-environment/](https://www.anaconda.com/blog/using-pip-in-a-conda-environment/)*。关于pip的更多信息，请参见
    *[https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment/](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment/)*。我们将在本章稍后讨论如何创建需求文本文件。
- en: '**Working with Conda Environments Using Navigator**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用Navigator管理Conda环境**'
- en: Setting up your first conda environment is easy. In the sections that follow,
    we’ll use the Anaconda Navigator GUI to work with conda environments. Later in
    this chapter, we’ll use conda in Anaconda Prompt (or a terminal) to do the same
    things. Anaconda Prompt and Navigator were introduced in [Chapter 1](ch01.xhtml).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 设置你的第一个conda环境非常简单。在接下来的部分中，我们将使用Anaconda Navigator图形用户界面来管理conda环境。稍后在本章中，我们将使用Anaconda
    Prompt（或终端）来做相同的操作。Anaconda Prompt和Navigator在[第1章](ch01.xhtml)中已有介绍。
- en: '***Launching Navigator***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***启动Navigator***'
- en: In Windows, go to the Start menu and click the Anaconda Navigator desktop app.
    In macOS, open Launchpad and then click the Anaconda-Navigator icon. In Linux,
    open a terminal window and enter anaconda-navigator.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，打开开始菜单并点击Anaconda Navigator桌面应用程序；在macOS中，打开Launchpad，然后点击Anaconda-Navigator图标；在Linux中，打开终端窗口并输入anaconda-navigator。
- en: When Navigator starts, it automatically checks for a new version. If you see
    an Update Application message box asking you if you would like to update Navigator,
    click **Yes**. For a review of the Navigator interface, see [Chapter 1](ch01.xhtml).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当Navigator启动时，它会自动检查是否有新版本。如果你看到一个更新应用程序的消息框，询问是否要更新Navigator，请点击**是**。有关Navigator界面的复习，请参见[第1章](ch01.xhtml)。
- en: '***Creating a New Environment***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建新环境***'
- en: In Navigator, select the **Environments** tab and then click the **Create**
    button. This opens the Create New Environment dialog ([Figure 2-2](ch02.xhtml#ch02fig2)).
    Because this is your first environment, name it ***my_first_env***.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Navigator中，选择**环境**标签，然后点击**创建**按钮。这将打开创建新环境对话框（见[图2-2](ch02.xhtml#ch02fig2)）。因为这是你的第一个环境，所以命名为***my_first_env***。
- en: '![Image](../images/02fig02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig02.jpg)'
- en: '*Figure 2-2: The Navigator Create New Environment dialog*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-2：Navigator 创建新环境对话框*'
- en: Note the Location information in [Figure 2-2](ch02.xhtml#ch02fig2). By default,
    conda environments are stored in the *envs* folder within your Anaconda installation.
    For this reason, you must give each environment a unique name when using Navigator.
    It’s also possible to create environments in other locations using the command
    line interface. We’ll look at this option later in the section “Specifying an
    Environment’s Location” on [page 37](ch02.xhtml#ch00lev2sec20).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意[图2-2](ch02.xhtml#ch02fig2)中的位置说明。默认情况下，conda环境存储在Anaconda安装目录中的*envs*文件夹内。因此，在使用Navigator时，必须为每个环境指定一个唯一的名称。也可以通过命令行界面在其他位置创建环境。我们将在“指定环境位置”一节中进一步探讨这一选项，详见[第37页](ch02.xhtml#ch00lev2sec20)。
- en: The first package installed is Python. By default, this is the same version
    of Python you used when you downloaded and installed Anaconda. If you want to
    install a different version, you can use the pull-down menu to select it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个安装的包是Python。默认情况下，这与你下载并安装Anaconda时使用的Python版本相同。如果你想安装不同版本的Python，可以使用下拉菜单进行选择。
- en: Click **Create**. In a minute or so, you should see the new environment on the
    Environments tab. You should now have two environments, *base (root)* and *my_first_env*.
    The arrow to the right of the name indicates that *my_first_env* is now the active
    environment ([Figure 2-3](ch02.xhtml#ch02fig3)). *Active* means that this is the
    environment in which you are now working, and any packages you load will be put
    in this folder. Clicking a name in the list activates that name and deactivates
    any other environments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**。大约一分钟后，你应该能在“环境”标签页上看到新环境。现在你应该有两个环境，*base (root)*和*my_first_env*。名称右侧的箭头表示*my_first_env*现在是活动环境（[图2-3](ch02.xhtml#ch02fig3)）。*活动*意味着这是你当前工作的环境，任何你加载的包都会被放入这个文件夹中。点击列表中的名称会激活该名称，并停用其他环境。
- en: '![Image](../images/02fig03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig03.jpg)'
- en: '*Figure 2-3: The newly created active environment (my_first_env) on the Navigator
    Environments tab*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-3：在Navigator环境标签页上创建的活动环境(my_first_env)*'
- en: Also on the Environments tab is a listing of packages installed in *my_first_env*
    and their version numbers ([Figure 2-4](ch02.xhtml#ch02fig4)). At the bottom of
    the window, you can see that 12 packages were installed. These are all packages
    associated with Python. Over time, the number of packages may change, so you may
    see a different number.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在“环境”标签页上，还列出了*my_first_env*中安装的包及其版本号（[图2-4](ch02.xhtml#ch02fig4)）。在窗口底部，你可以看到已经安装了12个包。这些都是与Python相关的包。随着时间的推移，包的数量可能会变化，因此你可能看到不同的数字。
- en: '![Image](../images/02fig04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig04.jpg)'
- en: '*Figure 2-4: The list of initially installed packages on the Navigator Environments
    tab*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-4：在Navigator环境标签页上最初安装的包列表*'
- en: Congratulations, you just created your first conda environment! You can start
    using Python right away. But if you need additional packages, such as pandas and
    NumPy, you must install them in this environment. So let’s get to it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你刚刚创建了第一个conda环境！你可以立即开始使用Python。但是，如果你需要额外的包，比如pandas和NumPy，你必须在此环境中安装它们。那么，让我们开始吧。
- en: '***Managing Packages***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***管理包***'
- en: After you create an environment, you can use the Environments tab to see which
    packages are installed, check for available packages, find a specific package
    and install it, and update and remove packages.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建环境后，你可以使用“环境”标签页查看已安装的包，检查可用的包，查找并安装特定的包，以及更新和删除包。
- en: '**Finding and Installing Packages**'
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**查找和安装包**'
- en: To find an installed package, activate the environment you want to search by
    clicking its name (see [Figure 2-3](ch02.xhtml#ch02fig3)). If the list of installed
    packages in the pane on the right is long and you don’t want to scroll, start
    typing the name of the package in the Search Packages box. This will reduce the
    number of packages displayed until only the package you want remains.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找已安装的包，点击你想要搜索的环境名称以激活它（见[图2-3](ch02.xhtml#ch02fig3)）。如果右侧窗格中的已安装包列表很长且你不想滚动，可以在“搜索包”框中输入包的名称。这会减少显示的包的数量，直到只剩下你想要的包。
- en: To find a package that is not installed, change the selection of packages displayed
    in the right pane by clicking the drop-down menu above it and selecting **Not
    installed** (see [Figure 2-5](ch02.xhtml#ch02fig5)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找未安装的包，点击右窗格上方的下拉菜单并选择**未安装**（见[图2-5](ch02.xhtml#ch02fig5)）。
- en: '![Image](../images/02fig05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig05.jpg)'
- en: '*Figure 2-5: The list of available but uninstalled packages on the Navigator
    Environments tab*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-5：在Navigator环境标签页上可用但未安装的包列表*'
- en: As shown in the lower left of [Figure 2-5](ch02.xhtml#ch02fig5), there are currently
    8,601 packages automatically available after you create the new environment (this
    number may change over time, so the one you see might be different). To see more
    packages, you can add a channel using the Channels button on the Environments
    tab.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图2-5](ch02.xhtml#ch02fig5)左下角所示，创建新环境后，当前有8,601个包可以自动使用（这个数字可能随时间变化，因此你看到的数字可能不同）。要查看更多包，你可以使用“环境”标签页上的“频道”按钮添加频道。
- en: Click **Channels** to open a dialog ([Figure 2-6](ch02.xhtml#ch02fig6)). Then,
    enter **conda-forge** for access to the conda-forge community channel. This channel
    is made up of thousands of contributors who provide packages for a wide range
    of software (for more information, see *[https://conda-forge.org/docs/user/introduction.html](https://conda-forge.org/docs/user/introduction.html)*).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Channels**以打开对话框 ([图 2-6](ch02.xhtml#ch02fig6))。然后，输入**conda-forge**以访问conda-forge社区频道。该频道由成千上万的贡献者组成，提供各种软件的包（更多信息，请参见*[https://conda-forge.org/docs/user/introduction.html](https://conda-forge.org/docs/user/introduction.html)*）。
- en: '![Image](../images/02fig06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/02fig06.jpg)'
- en: '*Figure 2-6: Adding conda-forge using the Channels dialog*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-6：通过Channels对话框添加conda-forge*'
- en: Press ENTER and then click the **Update channels** button to add conda-forge
    ([Figure 2-7](ch02.xhtml#ch02fig7)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按ENTER键，然后点击**更新频道**按钮以添加conda-forge ([图 2-7](ch02.xhtml#ch02fig7))。
- en: '![Image](../images/02fig07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/02fig07.jpg)'
- en: '*Figure 2-7: Updating channels with the Channels dialog*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-7：使用Channels对话框更新频道*'
- en: The pane on the right side of the Environments tab should now refresh to show
    that you have tens of thousands of packages available. You can remove channels
    by clicking the corresponding trash cans in the dialog (see [Figure 2-7](ch02.xhtml#ch02fig7)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Environments标签页右侧的面板现在应该会刷新，显示你有成千上万个可用包。你可以通过点击对话框中的相应垃圾桶来移除频道（请参见[图 2-7](ch02.xhtml#ch02fig7)）。
- en: '**NOTE**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If a package you want isn’t available from Anaconda, you can try installing
    it from the Python Package Index ([PyPI.org/](http://PyPI.org/)) using pip, which
    conda installs by default in conda environments (see the “Conda and PIP” sidebar
    on [page 24](ch02.xhtml#ch00sidebar10)).*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想要的包在Anaconda中不可用，可以尝试通过Python包索引（[PyPI.org/](http://PyPI.org/)）使用pip进行安装，conda默认在conda环境中安装了pip（有关更多信息，请参见[第24页](ch02.xhtml#ch00sidebar10)的“Conda和PIP”侧边栏）。*'
- en: Remember that we wanted to add NumPy and pandas. Because NumPy is a requirement
    for pandas, it’s included in the pandas dependencies list. Consequently, you need
    to install only pandas. Enter **pandas** in the search box at the top of the right
    pane ([Figure 2-8](ch02.xhtml#ch02fig8)). Then, click the checkbox next to the
    pandas package and click **Apply** at the lower right. To install multiple packages
    at the same time, click each of the corresponding checkboxes prior to clicking
    Apply.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们想要添加NumPy和pandas。由于NumPy是pandas的依赖，因此它已包含在pandas的依赖列表中。因此，你只需要安装pandas。在右侧面板顶部的搜索框中输入**pandas**
    ([图 2-8](ch02.xhtml#ch02fig8))。然后，点击pandas包旁边的复选框，并点击右下角的**应用**按钮。要同时安装多个包，在点击应用之前，请先勾选每个相应的复选框。
- en: '![Image](../images/02fig08.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/02fig08.jpg)'
- en: '*Figure 2-8: Finding and installing the pandas package on the Environments
    tab*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-8：在Environments标签页中查找并安装pandas包*'
- en: A new dialog opens and, after a few moments, displays a list of packages on
    which pandas is dependent ([Figure 2-9](ch02.xhtml#ch02fig9)). As you can see,
    NumPy is among them. Click the **Apply** button to complete the installation of
    pandas.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的对话框，并在片刻后显示pandas依赖的包列表 ([图 2-9](ch02.xhtml#ch02fig9))。如你所见，NumPy就在其中。点击**应用**按钮以完成pandas的安装。
- en: If you switch to the Installed list, the number of installed packages will have
    increased, and the list will include both pandas and NumPy. Be aware that you
    might need to clear the Search Packages box to see the full list.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你切换到已安装列表，已安装包的数量将增加，列表中将包括pandas和NumPy。请注意，你可能需要清除“搜索包”框才能查看完整列表。
- en: '![Image](../images/02fig09.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/02fig09.jpg)'
- en: '*Figure 2-9: The list of packages to be installed including dependencies*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-9：包含依赖包的安装包列表*'
- en: You might notice that some of the major libraries appear to be duplicated in
    the Not installed list. For example, you can choose between “matplotlib” and “matplotlib-base”
    ([Figure 2-10](ch02.xhtml#ch02fig10)). The “-base” options tend to be lighter
    versions for when a package, like Matplotlib, is used by other packages as a dependency.
    As a result, it might not be fully functional; thus, you should not install this
    “-base” version when installing packages like Matplotlib or NumPy. This way, you
    can be sure that everything will work with no surprises.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到一些主要的库在“未安装”列表中似乎有重复。例如，你可以在“matplotlib”和“matplotlib-base”之间选择 ([图 2-10](ch02.xhtml#ch02fig10))。“-base”选项通常是轻量级版本，适用于当像Matplotlib这样的包作为其他包的依赖时。因此，它可能无法完全功能化；因此，在安装像Matplotlib或NumPy这样的包时，你不应安装此“-base”版本。这样，你可以确保一切正常工作，没有意外。
- en: '![Image](../images/02fig10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/02fig10.jpg)'
- en: '*Figure 2-10: There are two choices for the matplotlib library in the list
    of uninstalled packages.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-10：在未安装的包列表中，有两个可选的 matplotlib 库。*'
- en: '**Updating and Removing Packages**'
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更新和删除包**'
- en: Over time, newer versions of installed packages may become available. To check
    for these, select the **Updatable** filter at the top of the right pane of the
    Environments tab ([Figure 2-11](ch02.xhtml#ch02fig11)). The list you see might
    not exactly match the one shown.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，已安装包的新版可能会发布。要检查这些版本，请在“环境”选项卡的右侧窗格顶部选择**可更新**筛选器（见[图 2-11](ch02.xhtml#ch02fig11)）。你看到的列表可能与所示列表略有不同。
- en: '![Image](../images/02fig11.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig11.jpg)'
- en: '*Figure 2-11: The right pane of the Environments tab, showing installed packages
    with available updates*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-11：环境选项卡的右侧窗格，显示可用更新的已安装包*'
- en: In this example, Python is out of date, so let’s update it to the current version.
    If your version is already current, try updating another package in the Updatable
    list.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，Python 已过时，因此我们将其更新到当前版本。如果你的版本已经是最新的，尝试更新可更新列表中的另一个包。
- en: First, click the checkbox next to Python and then, from the pop-up menu, select
    **Mark for update** ([Figure 2-12](ch02.xhtml#ch02fig12)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，点击 Python 旁边的复选框，然后从弹出菜单中选择**标记为更新**（见[图 2-12](ch02.xhtml#ch02fig12)）。
- en: '![Image](../images/02fig12.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig12.jpg)'
- en: '*Figure 2-12: Click a package checkbox to open the menu for updating and removing
    packages.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-12：点击包旁边的复选框以打开用于更新和删除包的菜单。*'
- en: Click the **Apply** button at the lower right. This will open the Update Packages
    window, showing you which packages will be modified and which will be installed
    ([Figure 2-13](ch02.xhtml#ch02fig13)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击右下角的**应用**按钮。这将打开“更新包”窗口，显示哪些包将被修改，哪些将被安装（见[图 2-13](ch02.xhtml#ch02fig13)）。
- en: '![Image](../images/02fig13.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig13.jpg)'
- en: '*Figure 2-13: The Update Packages window for updating Python*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-13：用于更新 Python 的更新包窗口*'
- en: Click **Apply** to continue. After a few minutes, Python will vanish from the
    Updatable list. Change the filter to **Installed** and you will see that the version
    of Python has changed. The Python version in the base (root) environment has not
    changed since all the changes you are making are to the *active* conda environment
    only, which is *my_first_env*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**应用**以继续。几分钟后，Python 将从可更新列表中消失。将筛选器改为**已安装**，你将看到 Python 的版本已更改。基础（root）环境中的
    Python 版本没有变化，因为你所做的所有更改仅针对*活动*的 conda 环境，即*my_first_env*。
- en: You should be careful about updating packages for no reason, as other packages
    may be dependent on an older version. In the event you do break your environment
    in this way, it’s not the end of the world; you can restore it using an environment
    file, which we’ll discuss later in this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有充分理由的情况下更新包应谨慎，因为其他包可能依赖于旧版本。如果你这样破坏了环境，世界并不终结；你可以使用环境文件恢复它，我们将在本章稍后讨论。
- en: If you want to install a *specific version* of a package, click the checkbox
    by the installed package name and use the menu in [Figure 2-12](ch02.xhtml#ch02fig12).
    Click **Mark for specific version installation** and then select the version number
    from the pop-up window that appears. Click **Apply** to launch the installation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想安装*特定版本*的包，请点击已安装包名称旁边的复选框，并使用[图 2-12](ch02.xhtml#ch02fig12)中的菜单。点击**标记为特定版本安装**，然后从弹出窗口中选择版本号。点击**应用**以启动安装。
- en: 'If the list of updatable packages is long and you don’t want to click each
    checkbox, you can use the command line for efficiency. On the Environments tab,
    click the triangular arrow beside the active environment’s name (see [Figure 2-3](ch02.xhtml#ch02fig3)).
    Then, select **Open Terminal** and enter the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可更新包的列表很长，而你不想点击每个复选框，你可以使用命令行来提高效率。在“环境”选项卡中，点击活动环境名称旁边的三角箭头（见[图 2-3](ch02.xhtml#ch02fig3)）。然后，选择**打开终端**并输入以下命令：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll be shown a list of packages to be updated and asked to proceed or not.
    Later in this chapter, when we look at the command line interface, we’ll talk
    about this command in more detail. We’ll also discuss ways to lock or freeze a
    package so that it doesn’t update.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示一个待更新包的列表，并询问你是否继续。稍后在本章中，我们将讨论命令行界面时，会更详细地介绍这个命令。我们还会讨论如何锁定或冻结包，以便它不会被更新。
- en: To remove a package from an environment, click its checkbox, select the **Mark
    for removal option** (see [Figure 2-12](ch02.xhtml#ch02fig12)), and then click
    **Apply**. This will remove the package, *including its dependencies*. That last
    part is important. If you remove pandas from *my_first_env*, you will also remove
    NumPy! To prevent this, you need to explicitly install NumPy before installing
    pandas.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要从环境中移除一个软件包，点击其复选框，选择 **标记为移除选项**（见 [图 2-12](ch02.xhtml#ch02fig12)），然后点击 **应用**。这将移除该软件包，*包括它的依赖项*。这一点很重要。如果您从
    *my_first_env* 中移除 pandas，那么 NumPy 也会被一并移除！为了避免这种情况，您需要在安装 pandas 之前明确安装 NumPy。
- en: '***Duplicating Environments***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***复制环境***'
- en: The Clone and Import buttons at the bottom of the Environments pane ([Figure
    2-14](ch02.xhtml#ch02fig14)) let you make an exact copy of an environment and
    create a new environment from a specifications file, respectively. To clone an
    environment, you first must activate that environment by clicking its name. When
    using Import, you’ll be prompted to name the new environment and point to a specifications
    file. We’ll look at creating a new environment from a file in more depth in the
    section “Duplicating and Sharing Environments” on [page 44](ch02.xhtml#ch00lev2sec22).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Environments 窗格底部的克隆和导入按钮（[图 2-14](ch02.xhtml#ch02fig14)）分别允许您创建环境的精确副本，和从规格文件创建新环境。要克隆环境，您首先需要通过点击环境名称来激活该环境。在使用导入时，系统会提示您为新环境命名，并指向规格文件。我们将在“复制和共享环境”一节中更详细地讨论如何从文件创建新环境，详见
    [第 44 页](ch02.xhtml#ch00lev2sec22)。
- en: '![Image](../images/02fig14.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/02fig14.jpg)'
- en: '*Figure 2-14: Buttons along the bottom of the middle pane of the Environments
    tab help you to manage conda environments.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-14：Environments 选项卡中间窗格底部的按钮帮助您管理 conda 环境。*'
- en: '***Backing Up Environments***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***备份环境***'
- en: In newer releases of Anaconda Navigator, you might see a Backup button beside
    the Import button. This button lets you back up your environments to the cloud
    and import them back. You can use this to checkpoint your work, keep a copy for
    disaster recovery, or migrate from machine to machine. You’ll need to have an
    Anaconda Nucleus account. For details, visit *[https://www.anaconda.com/blog/keeping-your-conda-environments-safe-and-secure-with-your-anaconda-nucleus-account/](https://www.anaconda.com/blog/keeping-your-conda-environments-safe-and-secure-with-your-anaconda-nucleus-account/)*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在新版的 Anaconda Navigator 中，您可能会看到在导入按钮旁边有一个备份按钮。这个按钮允许您将环境备份到云端，并可以将其恢复。您可以用它来保存工作进度，保持灾难恢复的副本，或实现从一台机器到另一台机器的迁移。您需要拥有
    Anaconda Nucleus 账户。详情请访问 *[https://www.anaconda.com/blog/keeping-your-conda-environments-safe-and-secure-with-your-anaconda-nucleus-account/](https://www.anaconda.com/blog/keeping-your-conda-environments-safe-and-secure-with-your-anaconda-nucleus-account/)*。
- en: '***Removing Environments***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***移除环境***'
- en: To delete a conda environment, first click the name of the environment that
    you want to remove and then click the **Remove** button (with the trash can icon)
    at the bottom of the Environments tab ([Figure 2-14](ch02.xhtml#ch02fig14)). A
    pop-up window will then show you the location of the environment and request confirmation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个 conda 环境，首先点击要删除的环境名称，然后点击 Environments 选项卡底部的 **移除** 按钮（带垃圾桶图标）（[图 2-14](ch02.xhtml#ch02fig14)）。接着会弹出一个窗口，显示该环境的位置并请求确认。
- en: It’s good practice to make an environment file before deleting an environment
    so that you can restore it if necessary. We go over how to do this in a later
    section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除环境之前，最好先创建一个环境文件，这样在需要时可以恢复该环境。我们将在后面的章节中介绍如何操作。
- en: Also be aware that environments are folders, and any data that you store in
    that folder will be deleted when you remove the environment. You should keep data
    in a separate folder or folders.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 同时请注意，环境是文件夹，您在该文件夹中存储的任何数据都会在删除环境时被删除。您应该将数据保存在一个或多个独立的文件夹中。
- en: '**Working with Conda Environments Using the Command Line Interface**'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用命令行界面操作 Conda 环境**'
- en: You can also work with conda environments in the *command line interface*, or
    *CLI* (pronounced *Clie*). Advanced users might prefer the control offered by
    this text-based interface to the point-and-click functionality offered by Navigator.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 *命令行界面*（*CLI*，发音为 *Clie*）中使用 conda 环境。高级用户可能更喜欢这种基于文本的界面提供的控制功能，而不是 Navigator
    提供的点选功能。
- en: '***Launching the Command Line Interface***'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***启动命令行界面***'
- en: 'To begin in Windows, use the Start menu to launch Anaconda Prompt; in macOS
    or Linux, open a terminal window. In the CLI, the `conda` command is the primary
    interface for managing environments and installations of various packages. Like
    Navigator, you can use it to do the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，使用开始菜单启动 Anaconda Prompt；在 macOS 或 Linux 中，打开终端窗口。在命令行界面（CLI）中，`conda`
    命令是管理环境和各种软件包安装的主要接口。和 Navigator 一样，你可以使用它来完成以下任务：
- en: Query and search the Anaconda package index and current Anaconda installation
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询和搜索 Anaconda 软件包索引及当前的 Anaconda 安装
- en: Create and manage conda environments
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理 conda 环境
- en: Install and update packages into existing conda environments
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并更新现有 conda 环境中的软件包
- en: As with Navigator, you should start by either creating a new conda environment
    or activating an existing one. [Table 2-1](ch02.xhtml#ch02tab1) lists some of
    the more useful single-line `conda` commands for working with environments. These
    commands let you reproduce and augment the functionality in Navigator. You’ll
    need to replace words in all uppercase with a specific name. For example, for
    ENVNAME, you should substitute the actual name of your environment, such as *my_first_env*.
    You can also abbreviate many command options that begin with two dashes (`--`)
    to a single dash plus the first letter of the option. In other words, you can
    use `-n` instead of `--name`, and `-e` instead of `--envs`. We’ll look at these
    commands in more detail in the sections that follow.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Navigator 一样，你应从创建一个新的 conda 环境或激活一个现有的环境开始。[表 2-1](ch02.xhtml#ch02tab1)列出了处理环境时一些更有用的单行
    `conda` 命令。这些命令使你能够重现并扩展 Navigator 的功能。你需要将所有大写字母的单词替换为具体的名称。例如，对于 ENVNAME，你应替换为你的环境实际名称，如
    *my_first_env*。你还可以将许多以双破折号（`--`）开头的命令选项缩写为一个破折号加上选项的第一个字母。换句话说，你可以使用 `-n` 替代
    `--name`，使用 `-e` 替代 `--envs`。我们将在接下来的部分中更详细地讨论这些命令。
- en: '**Table 2-1:** Useful `conda` Commands for Working with Environments'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2-1：** 用于处理环境的有用 `conda` 命令'
- en: '| **Command** | **Description** |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `conda help` | Display an explanation of conda positional arguments |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `conda help` | 显示 conda 命令位置参数的解释 |'
- en: '| `conda info` | Verify installations, version numbers, directory locations
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `conda info` | 验证安装、版本号、目录位置 |'
- en: '| `conda update --name base conda` | Update conda to the current version |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `conda update --name base conda` | 更新 conda 到当前版本 |'
- en: '| `conda create --name` ENVNAME `python` | Create a new environment and install
    Python |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `conda create --name` ENVNAME `python` | 创建新环境并安装 Python |'
- en: '| `conda create --name` ENVNAME `python=3.`x | Create a new environment with
    a specific Python version |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `conda create --name` ENVNAME `python=3.`x | 使用特定 Python 版本创建新环境 |'
- en: '| `conda create --prefix` path\ENVNAME | Create a new environment at a named
    disk location |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `conda create --prefix` path\ENVNAME | 在指定位置创建新环境 |'
- en: '| `conda activate` ENVNAME | Activate the named environment |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `conda activate` ENVNAME | 激活指定的环境 |'
- en: '| `conda activate` path\to\environment-dir | Activate an environment at a named
    disk location |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `conda activate` path\to\environment-dir | 激活指定位置的环境 |'
- en: '| `conda deactivate` | Deactivate the current environment |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `conda deactivate` | 停用当前环境 |'
- en: '| `conda list` | List all packages and versions in the active environment |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `conda list` | 列出当前环境中的所有软件包和版本 |'
- en: '| `conda list --name` ENVNAME | List all packages and versions in a named environment
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `conda list --name` ENVNAME | 列出指定环境中的所有软件包及其版本 |'
- en: '| `conda list --revisions` | List the versions of an active environment |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `conda list --revisions` | 列出当前环境的版本 |'
- en: '| `conda install -n` ENVNAME `--``revision` REVNUM | Restore an environment
    to a previous version |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `conda install -n` ENVNAME `--``revision` REVNUM | 恢复环境到先前的版本 |'
- en: '| `conda remove --name` ENVNAME `--all` | Delete a deactivated environment
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `conda remove --name` ENVNAME `--all` | 删除已停用的环境 |'
- en: '| `conda create --clone` ENVNAME `--name` NEWENV | Make an exact copy of an
    environment |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `conda create --clone` ENVNAME `--name` NEWENV | 创建环境的精确副本 |'
- en: '| `conda env export --name` ENVNAME `> envname.yml` | Export an environment
    to a readable YAML file |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `conda env export --name` ENVNAME `> envname.yml` | 导出环境到可读的 YAML 文件 |'
- en: '| `conda env create --file` ENVNAME`.yml` | Create an environment from a YAML
    file |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `conda env create --file` ENVNAME`.yml` | 从 YAML 文件创建环境 |'
- en: '| `conda list --explicit >` pkgs`.txt` | Export environment with exact versions
    for one OS |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `conda list --explicit >` pkgs`.txt` | 导出具有精确版本的软件包列表（适用于单一操作系统） |'
- en: '| `conda create --name` NEWENV `--file` pkgs`.txt` | Create environment based
    on exact package versions |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `conda create --name` NEWENV `--file` pkgs`.txt` | 基于精确的软件包版本创建环境 |'
- en: For a complete list of commands, see the “conda cheat sheet” at *[https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf](https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf)*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的命令列表，请参见 *[conda 备忘单](https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf)*。
- en: '**NOTE**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*This chapter assumes that you followed the instructions in [Chapter 1](ch01.xhtml)
    for installing Anaconda. Doing so will ensure that Anaconda is correctly added
    with respect to your PATH, the environment variable that specifies a set of directories
    where executable programs are located on your computer. This is important for
    using conda commands in the terminal with macOS and Linux.*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章假设你已按照[第 1 章](ch01.xhtml)中的说明安装了 Anaconda。这样可以确保 Anaconda 正确添加到你的 PATH 中，PATH
    是一个环境变量，指定了可执行程序所在的目录集。这对于在 macOS 和 Linux 上使用终端中的 conda 命令非常重要。*'
- en: '***Creating a New Environment***'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建新环境***'
- en: 'Let’s create a new conda environment named *my_second_env*, given that we’ve
    already used Navigator to create *my_first_env*. In the Anaconda Prompt window
    or terminal, enter the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的 conda 环境，命名为 *my_second_env*，因为我们已经使用 Navigator 创建了 *my_first_env*。在
    Anaconda 提示符窗口或终端中，输入以下命令：
- en: '[PRE1]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will create a new environment with the current version of Python. Enter
    `y` when asked if you want to proceed (and continue to do this throughout the
    chapter).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个带有当前版本 Python 的新环境。当系统提示你是否继续时，输入 `y`（并在本章中继续执行此操作）。
- en: '**NOTE**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can disable the verification prompt by adding the --yes or -y flag to
    the end of a command. This is helpful if you are automating processes, but you
    should avoid it with day-to-day work to lessen the chance of error.*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以通过在命令末尾添加 --yes 或 -y 标志来禁用验证提示。如果你在自动化过程中使用，这很有帮助，但在日常工作中应避免使用，以减少出错的可能性。*'
- en: 'If you want to install a particular version of Python, say 3.9, you can use
    this command (but don’t run it now):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想安装某个特定版本的 Python，比如 3.9，可以使用以下命令（但现在不要运行）：
- en: '[PRE2]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command is subtle. Because we used a *single* equal sign (`=`) when assigning
    the Python version, the result is the *latest* version in the Python 3.9 tree
    (such as Python 3.9.4). To get *exactly* Python 3.9, you must use a double equal
    sign (`==`) when assigning the version number.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令有些微妙。因为我们在指定 Python 版本时使用了*单个*等号（`=`），结果是 Python 3.9 树中的*最新*版本（例如 Python
    3.9.4）。要获得*精确的* Python 3.9，必须在指定版本号时使用双等号（`==`）。
- en: 'To install multiple packages when creating an environment, list them after
    the Python installation (don’t do this now, either):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建环境时安装多个软件包，可以在 Python 安装后列出它们（现在也不要执行此操作）：
- en: '[PRE3]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To activate the new environment, enter the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活新环境，请输入以下命令：
- en: '[PRE4]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, let’s check that the environment was created and is active:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们检查环境是否已创建并处于活动状态：
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will produce the list shown in [Figure 2-15](ch02.xhtml#ch02fig15). The
    asterisk (*) marks the active environment. You can also see *my_first_env*, which
    we created with Navigator in the previous section, as well as environments that
    I created earlier, some of which we’ll use later in this book.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成[图 2-15](ch02.xhtml#ch02fig15)中显示的列表。星号（*）标记了活动环境。你还可以看到我们在上一节中使用 Navigator
    创建的 *my_first_env*，以及我之前创建的其他环境，其中一些将在本书后面使用。
- en: So that you’re always cognizant of which environment is active, the command
    prompt now includes the name of the environment (first line in [Figure 2-15](ch02.xhtml#ch02fig15)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你始终清楚哪个环境处于活动状态，命令提示符现在会显示环境的名称（如[图 2-15](ch02.xhtml#ch02fig15)中的第一行）。
- en: To see the list of the packages currently installed in the environment, enter
    conda list. This returns the package names, versions, build, and channel information.
    To see the contents of a *non-active* environment, such as *my_first_env*, use
    conda list -n my_first_env. Remember, `-n` is just shorthand for `--name`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前环境中已安装的软件包列表，请输入 `conda list`。这将返回软件包名称、版本、构建和频道信息。要查看*非活动*环境的内容，例如*my_first_env*，请使用
    `conda list -n my_first_env`。记住，`-n` 只是 `--name` 的简写。
- en: '![Image](../images/02fig15.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig15.jpg)'
- en: '*Figure 2-15: The output of the conda env list command in the Anaconda Prompt
    window*'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-15：Anaconda 提示符窗口中 `conda env list` 命令的输出*'
- en: '***Specifying an Environment’s Location***'
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***指定环境的位置***'
- en: The conda environments that you create are stored by default in the *envs* folder
    beneath your Anaconda installation. For example, on my Windows machine, the environment
    we just created is stored at *C:\Users\hanna\anaconda3\envs\my_second_env*. (My
    wife, Hannah, set up the computer; hence, she’s listed as the user.)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的conda环境默认存储在Anaconda安装目录下的*envs*文件夹中。例如，在我的Windows电脑上，我们刚才创建的环境存储在*C:\Users\hanna\anaconda3\envs\my_second_env*（是我妻子Hannah设置的电脑，因此她被列为用户）。
- en: It’s possible, however, to store the environment elsewhere. This lets you place
    the conda environment in a project folder and consistently name it something like
    *conda_env* ([Figure 2-16](ch02.xhtml#ch02fig16)).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，确实可以将环境存储在其他地方。这样，你可以将conda环境放入项目文件夹，并始终命名为类似*conda_env*的名称（参见[图2-16](ch02.xhtml#ch02fig16)）。
- en: '![Image](../images/02fig16.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig16.jpg)'
- en: '*Figure 2-16: An example directory tree for storing a conda environment outside
    of the default location*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-16：将conda环境存储在默认位置之外的示例目录树*'
- en: 'To create a conda environment outside of the default *envs* folder, replace
    the `--name` (`-n`) flag with `--prefix` (`-p`):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要在默认的*envs*文件夹之外创建conda环境，请将`--name`（`-n`）标志替换为`--prefix`（`-p`）：
- en: '[PRE6]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To activate the environment, run the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活环境，请运行以下命令：
- en: '[PRE7]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Placing your conda environment within a project directory provides several benefits.
    First, you can immediately determine whether a project uses an isolated environment.
    Second, it makes your project self-contained, as opposed to having the environment,
    the data, and things like Jupyter notebooks stored in different, unrelated locations.
    Third, you can use the same name, such as *conda_env*, for all your environments,
    making them instantly recognizable to anyone.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将conda环境放在项目目录中有几个好处。首先，你可以立即判断一个项目是否使用了隔离的环境。其次，它使得你的项目自包含，而不是将环境、数据和像Jupyter笔记本这样的文件存储在不同、不相关的地方。第三，你可以为所有环境使用相同的名称，例如*conda_env*，使其对任何人来说都一目了然。
- en: Like environments in the default location, your new environment will show up
    when using the `conda env list` and `conda info -e` commands, though it won’t
    have an official name, such as *my_first_env* or *base* (see the * in [Figure
    2-17](ch02.xhtml#ch02fig17)).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 像默认位置的环境一样，你的新环境会在使用`conda env list`和`conda info -e`命令时显示，尽管它没有官方名称，比如*my_first_env*或*base*（参见[图2-17](ch02.xhtml#ch02fig17)中的*）。
- en: '![Image](../images/02fig17.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig17.jpg)'
- en: '*Figure 2-17: The output of the conda info -e command showing the active environment
    on the D:\ drive*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-17：显示在D:\驱动器上活动环境的`conda info -e`命令输出*'
- en: 'Not surprisingly, there are some drawbacks to specifying an install path other
    than the default location when creating conda environments. For instance, conda
    won’t be able to find your environment with the `--name` flag. For example, to
    list the contents of *my_first_env*, located in the default location, you can
    simply enter the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不足为奇的是，在创建conda环境时指定非默认安装路径会有一些缺点。例如，conda将无法通过`--name`标志找到你的环境。例如，要列出位于默认位置的*my_first_env*的内容，你可以简单地输入以下命令：
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For environments in other locations, you must use the `--prefix` flag plus
    the full path:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他位置的环境，你必须使用`--prefix`标志并指定完整路径：
- en: '[PRE9]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Another issue is that your command prompt is now prefixed with the active environment’s
    *absolute path* rather than the environment’s *name*. This can make for some long
    and unwieldy prompts, as seen in the first line in [Figure 2-17](ch02.xhtml#ch02fig17).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，你的命令提示符现在会以活动环境的*绝对路径*作为前缀，而不是环境的*名称*。这可能会导致一些冗长且难以管理的提示符，就像[图2-17](ch02.xhtml#ch02fig17)中第一行所看到的那样。
- en: You can force conda to always use the environment name for the prompt by modifying
    the `env_prompt` setting in the *.condarc* file. This is the *conda configuration
    file*, an optional runtime configuration file that allows advanced users to configure
    various aspects of conda, such as which channels are searched for packages. You
    can read about it in the documentation at *[https://conda.io/projects/conda/en/latest/user-guide/configuration/index.html](https://conda.io/projects/conda/en/latest/user-guide/configuration/index.html)*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过修改*.condarc*文件中的`env_prompt`设置，强制conda始终使用环境名称作为提示符。这是*conda配置文件*，一个可选的运行时配置文件，允许高级用户配置conda的各个方面，例如搜索包的频道。你可以在文档中阅读关于它的内容，链接为*[https://conda.io/projects/conda/en/latest/user-guide/configuration/index.html](https://conda.io/projects/conda/en/latest/user-guide/configuration/index.html)*。
- en: 'If you want to alter (or create) a .*condarc* file to shorten the long prefix
    in your shell prompt, use this command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想修改（或创建）一个 .*condarc* 文件，以缩短你在 shell 提示符中的长前缀，请使用以下命令：
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now you will see only the environment name in the prompt, regardless of where
    the environment is stored. This won’t be very enlightening if you use the generic
    *conda_env* moniker, and you run the risk of getting confused and working in the
    wrong environment. For this reason, you might want to stick with the long prefix
    format or append each environment name with the project name, such as *conda_env_penguins*
    or *conda_env_covid*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你在提示符中将只看到环境名称，而不管该环境存储在哪里。如果你使用通用的 *conda_env* 名称，这样显示并不会非常有帮助，反而可能会让你感到困惑，甚至在错误的环境中工作。因此，你可能想继续使用长前缀格式，或者将每个环境名称与项目名称拼接，比如
    *conda_env_penguins* 或 *conda_env_covid*。
- en: '***Managing Packages***'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***管理包***'
- en: After you create an environment, you can use conda to check for all available
    packages, find a specific package and install it, and update and remove packages.
    As noted in the “Launching Navigator” section, you should install all the packages
    you need for a project at the same time to ensure that there are no dependency
    conflicts.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建一个环境后，可以使用 conda 来检查所有可用的包，找到特定的包并安装，更新和删除包。如在“启动 Navigator”部分中所述，应该同时安装项目所需的所有包，以确保没有依赖冲突。
- en: '[Table 2-2](ch02.xhtml#ch02tab2) lists some useful conda commands for working
    with packages. The table mainly shows commands for working *within* active environments,
    as this is considered a best practice. You’ll need to replace words in all uppercase
    with a specific name.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 2-2](ch02.xhtml#ch02tab2) 列出了在处理包时一些有用的 conda 命令。该表主要展示了在活动环境中使用的命令，因为这被认为是最佳实践。你需要用具体的名称替换所有大写字母的词汇。'
- en: '**Table 2-2:** Useful `conda` Commands for Working with Packages'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2-2：** 用于处理包的有用 `conda` 命令'
- en: '| **Command** | **Description** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `conda search` PKGNAME | Search for a package in currently configured channels
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `conda search` PKGNAME | 在当前配置的通道中搜索一个包 |'
- en: '| `conda search` PKGNAME`=3.9` | Search for a specific version in configured
    channels |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `conda search` PKGNAME`=3.9` | 在配置的通道中搜索特定版本 |'
- en: '| `conda search` PKGNAME `--info` | Get detailed info on a package including
    its dependencies |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `conda search` PKGNAME `--info` | 获取包的详细信息，包括其依赖关系 |'
- en: '| `conda install` PKGNAME | Install current version of a package in an active
    environment |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `conda install` PKGNAME | 在当前环境中安装当前版本的包 |'
- en: '| `conda install` PKGNAME`=3.4.2` | Install specific package version in an
    active environment |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `conda install` PKGNAME`=3.4.2` | 在当前环境中安装指定版本的包 |'
- en: '| `conda install` PKG1 PKG2 PKG3 | Install multiple packages in an active environment
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `conda install` PKG1 PKG2 PKG3 | 在当前环境中安装多个包 |'
- en: '| `conda install -c` CHANNELNAME PKGNAME`=3.4.2` | Install specific version
    from named channel in an active environment |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `conda install -c` CHANNELNAME PKGNAME`=3.4.2` | 从指定通道安装指定版本的包 |'
- en: '| `conda uninstall` PKGNAME | Remove a package from an active environment |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `conda uninstall` PKGNAME | 从当前环境中移除一个包 |'
- en: '| `conda update` PKGNAME | Update a specific package in an active environment
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `conda update` PKGNAME | 更新当前环境中指定的包 |'
- en: '| `conda update --all` | Update all updatable packages in an active environment
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `conda update --all` | 更新当前环境中所有可以更新的包 |'
- en: '| `conda list` | List all packages in an active environment |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `conda list` | 列出当前环境中的所有包 |'
- en: '| `conda list anaconda` | Show version number of installed Anaconda distribution
    |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `conda list anaconda` | 显示已安装的 Anaconda 发行版的版本号 |'
- en: '| `conda clean --all` | Remove unused cached files including unused packages
    |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `conda clean --all` | 删除未使用的缓存文件，包括未使用的包 |'
- en: '| `conda config --show` | Examine the conda configuration file |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `conda config --show` | 检查 conda 配置文件 |'
- en: '| PKGNAME `--version` | Show the version number of an installed package |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| PKGNAME `--version` | 显示已安装包的版本号 |'
- en: For a complete list of commands, see the “conda Cheat Sheet” at *[https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf](https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf)*.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的命令列表，请参阅“conda备忘单”，链接如下：*[https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf](https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf)*。
- en: '**Installing Packages**'
  id: totrans-198
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**安装包**'
- en: The recommended way to install packages using conda is *from within an active
    environment*. Alternatively, you can install packages from outside an environment
    by using `--name` or the `--prefix` flag with a directory path. This approach
    isn’t advisable. Not only is it more trouble, but you run the risk of installing
    packages in the wrong environment.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 conda 安装包的推荐方式是*在一个激活的环境内*。或者，你也可以通过使用`--name`或`--prefix`标志并指定目录路径，从环境外安装包。此方法不建议使用。因为不仅麻烦，而且你还可能会把包安装到错误的环境中。
- en: 'To demonstrate how to find and install packages using conda, let’s add to *my_second_env*
    two packages, Matplotlib (for plotting) and pillow (used for working with images).
    First, activate the environment:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何使用 conda 查找和安装包，让我们将两个包（Matplotlib 用于绘图，pillow 用于处理图像）添加到 *my_second_env*
    环境中。首先，激活环境：
- en: '[PRE11]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It’s preferable to specify the version of each package when installing. This
    will help you to explicitly capture what’s in your environment in the event that
    you want to rebuild or share your project in the future. Because we have no need
    to use an old version of Matplotlib or pillow, let’s search for the package to
    see its current version number:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装时，最好指定每个包的版本。这将帮助你明确记录环境中的内容，以防将来需要重建或共享你的项目。由于我们不需要使用旧版的 Matplotlib 或 pillow，让我们搜索包以查看其当前的版本号：
- en: '[PRE12]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This returns a long list of all the available versions of Matplotlib, shown
    truncated for brevity in the example that follows. The far-right column represents
    the channel information. Of course, the version numbers will change through time,
    so you’ll see a different list:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个包含所有可用版本的长列表，在下面的示例中为简洁起见进行了截断。最右侧的列表示频道信息。当然，版本号会随着时间变化，因此你会看到不同的列表：
- en: '[PRE13]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The *pkgs/main* channel is the top priority channel in conda’s *defaults* channel,
    which is set by default to the Anaconda Repository. In this example, notice that
    the defaults channel has Matplotlib 3.3.4, whereas the conda-forge channel has
    Matplotlib 3.4.2.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*pkgs/main*频道是 conda 的*defaults*频道中的最高优先级频道，默认设置为 Anaconda Repository。在这个例子中，注意到默认频道中有
    Matplotlib 3.3.4，而 conda-forge 频道则有 Matplotlib 3.4.2。'
- en: Packages on conda-forge may be more up to date than those on the defaults channel,
    and you can find packages on conda-forge that aren’t in defaults. With the defaults
    channel, however, you can be certain that the available packages have been checked
    for compatibility, thus making it the “safest” alternative.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 conda-forge 上的包可能比默认频道上的包更新，并且你可以在 conda-forge 上找到默认频道没有的包。然而，使用默认频道，你可以确保可用的包已经过兼容性检查，因此它是最“安全”的选择。
- en: 'If you don’t specify a channel, Anaconda will automatically use the channel
    at the *top* of the channels configuration list in your *.condarc* file. To see
    your channels list, enter:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定频道，Anaconda 会自动使用你*.condarc*文件中频道配置列表顶部的频道。要查看你的频道列表，请输入：
- en: '[PRE14]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'which produces this output:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE15]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As configured in this example, Anaconda will look for packages in the conda-forge
    channel first.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这个示例配置，Anaconda 会首先在 conda-forge 频道中查找包。
- en: If the package you’re looking for is in the highest priority channel, it will
    be installed, *even if more up-to-date versions are available in the next channel
    in the list*. In this case, if you install Matplotlib without specifying a version
    or channel, you’ll end up with the most up-to-date version available, as conda-forge
    has top priority.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找的包位于最高优先级的频道，它会被安装，*即使在列表中的下一个频道有更新的版本*。在这种情况下，如果你在没有指定版本或频道的情况下安装 Matplotlib，你将获得最新的版本，因为
    conda-forge 拥有最高优先级。
- en: 'When I repeat the previous exercise for the pillow package, I see that both
    channels use the same version (8.2.0), so the channel doesn’t matter. Now, let’s
    install both packages together in *my_second_env*, specifying the latest versions
    (use the version numbers shown here or update them to whatever is current for
    you):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当我对 pillow 包进行相同操作时，我发现两个频道使用的是相同的版本（8.2.0），因此频道不重要。现在，让我们在*my_second_env*环境中同时安装这两个包，指定最新版本（使用此处显示的版本号，或者根据需要更新为当前版本）：
- en: '[PRE16]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now let’s verify the installation:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证一下安装：
- en: '[PRE17]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should see the correct versions for the packages as well as the conda-forge
    source channel. The defaults channel, however, will appear as a blank in the “Channel”
    column.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到正确的包版本以及 conda-forge 源频道。然而，默认频道将在“Channel”列中显示为空白。
- en: 'If you want conda to install the newest version of a package in *any* listed
    channel, you can turn off the channel priority order using this command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望 conda 安装 *任何* 列出的渠道中的最新版本软件包，您可以使用以下命令关闭渠道优先级顺序：
- en: '[PRE18]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can force conda to use a specific channel by using the `--channel` flag
    and the name of the channel, like this (for the defaults channel):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `--channel` 标志和渠道名称来强制 conda 使用特定渠道，如下所示（对于默认渠道）：
- en: '[PRE19]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To get the most up-to-date version available on that channel, you can leave
    off the version number, though this is not advised.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得该渠道上最现代的版本，您可以省略版本号，尽管这不建议这样做。
- en: 'To change the membership and ordering in the list of channels in your configuration
    file, you can use flags like `--remove`, `--append`, and `--prepend`. Generally,
    you’ll want the defaults channel on top, so let’s move it up by first removing
    it and then adding it back:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改配置文件中渠道列表的成员资格和顺序，您可以使用 `--remove`、`--append` 和 `--prepend` 等标志。通常，您希望将默认渠道放在顶部，因此首先将其删除然后再添加回来：
- en: '[PRE20]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**NOTE**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can add your own channel by signing up at [https://anaconda.org/](https://anaconda.org/)
    and uploading your own conda packages.*'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '*您可以通过在 [https://anaconda.org/](https://anaconda.org/) 注册并上传自己的 conda 包，来添加自己的渠道。*'
- en: If you can’t find a package you need through Anaconda, try the Python Package
    Index (*[https://pypi.org/](https://pypi.org/)*). For more on this resource, see
    the “Conda and PIP” sidebar on [page 24](ch02.xhtml#ch00sidebar10). When you install
    a package using pip and then use the `conda list` command, the channel designation
    for that package will be “pypi.”
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过 Anaconda 找不到所需的软件包，请尝试 Python 包索引 (*[https://pypi.org/](https://pypi.org/)*)。有关此资源的更多信息，请参见
    [第 24 页](ch02.xhtml#ch00sidebar10)上的“Conda 和 PIP”侧边栏。当您使用 pip 安装软件包并使用 `conda
    list` 命令时，该软件包的渠道标识将是“pypi”。
- en: 'Finally, if you want to install a base package or set of packages in every
    environment you create, you can edit your configuration file to automatically
    add them. For example, to always install the highest version of Python by default,
    run the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您希望在每个创建的环境中都安装基础软件包或一组软件包，可以编辑配置文件以自动添加它们。例如，要始终默认安装 Python 的最新版本，请运行以下命令：
- en: '[PRE21]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now every time you create a new conda environment, Python will be included
    by default. If you do a lot of data science work, you’ll probably want to add
    NumPy, pandas, and a plotting library, as well. You can review the default packages
    list by entering this:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每次创建新的 conda 环境时，Python 默认会被包含在内。如果您做大量数据科学工作，您可能还希望添加 NumPy、pandas 和绘图库。您可以通过输入以下命令来查看默认软件包列表：
- en: '[PRE22]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To remove a package from the default packages list, use the `--remove` flag
    in place of `--add`. You can also override this option at the command prompt with
    the `--no-default-packages` flag.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要从默认软件包列表中删除软件包，请使用 `--remove` 标志替代 `--add`。您还可以在命令提示符下通过 `--no-default-packages`
    标志覆盖此选项。
- en: For more options for editing your configuration file, enter conda config --help.
    For more information on installing packages and managing channels, go to *[https://docs.conda.io/](https://docs.conda.io/)*
    and search for “installing with conda” and “managing channels,” respectively.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多编辑配置文件的选项，请输入 conda config --help。有关安装软件包和管理渠道的更多信息，请访问 *[https://docs.conda.io/](https://docs.conda.io/)*
    并分别搜索“使用 conda 安装”和“管理渠道”。
- en: '**Updating and Removing Packages**'
  id: totrans-235
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更新和删除软件包**'
- en: Over time, newer versions of installed packages may become available. The following
    commands will help you to keep your environment up to date.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，可能会有安装的软件包的新版本可用。以下命令将帮助您保持环境的最新状态。
- en: 'First, be sure that conda is up to date by running the following (from anywhere):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保 conda 是最新的，运行以下命令（在任何位置）：
- en: '[PRE23]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To check whether an update is available for a specific package, such as pip,
    in an active environment, enter:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查在活动环境中是否有特定软件包（例如 pip）的更新，请输入：
- en: '[PRE24]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If updates are available, you’ll be shown the new package information, such
    as its version, build, memory requirements, and channel, and you’ll be prompted
    to accept or decline the update.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有更新，您将看到新的软件包信息，如其版本、构建、内存要求和渠道，并会提示您接受或拒绝更新。
- en: 'To update all the packages in an active environment to the current version,
    enter:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要将活动环境中的所有软件包更新为当前版本，请输入：
- en: '[PRE25]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To update a non-active environment, enter the following, where ENV_NAME is the
    name of the environment.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新非活动环境，请输入以下命令，其中 ENV_NAME 是环境的名称。
- en: '[PRE26]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Even though the `update` command tries to make everything as new as it can,
    it might not be able to upgrade all packages to the latest versions. If there
    are conflicting constraints in your environment, Anaconda might use an older version
    of some packages to satisfy dependency constraints when updating.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`update`命令尝试将所有内容更新到最新版本，它也可能无法将所有软件包升级到最新版本。如果环境中存在冲突的约束条件，Anaconda可能会使用较旧版本的某些软件包来满足依赖关系约束。
- en: With great power comes great responsibility. Be careful about updating the Anaconda
    package itself, as upgrades to this metapackage are released less frequently than
    those for other packages. Thus, you can unknowingly downgrade packages with the
    update. Also never try to manage an exact set of packages in the base (root) environment.
    The latter is the job of specific conda environments.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有强大功能就意味着更大的责任。小心更新Anaconda软件包，因为这个元包的升级发布频率低于其他软件包。因此，你可能在更新时不经意地降级了某些软件包。而且，绝不要尝试在基础（root）环境中管理一组精确的软件包。这是特定conda环境的任务。
- en: For more on these topics, see *[https://www.anaconda.com/blog/keeping-anaconda-date/](https://www.anaconda.com/blog/keeping-anaconda-date/)*,
    *[https://docs.anaconda.com/anaconda/install/update-version/](https://docs.anaconda.com/anaconda/install/update-version/),*
    and *[https://www.anaconda.com/blog/whats-in-a-name-clarifying-the-anaconda-metapackage/](https://www.anaconda.com/blog/whats-in-a-name-clarifying-the-anaconda-metapackage/)*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些主题的更多信息，请参见* [https://www.anaconda.com/blog/keeping-anaconda-date/](https://www.anaconda.com/blog/keeping-anaconda-date/)，*
    [https://docs.anaconda.com/anaconda/install/update-version/](https://docs.anaconda.com/anaconda/install/update-version/)，*和*
    [https://www.anaconda.com/blog/whats-in-a-name-clarifying-the-anaconda-metapackage/](https://www.anaconda.com/blog/whats-in-a-name-clarifying-the-anaconda-metapackage/)*。
- en: '**NOTE**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*It’s possible to prevent some packages from updating by creating an exceptions
    list and saving it as a file named pinned.txt in an environment’s conda-meta directory.
    You can learn more at “Preventing packages from updating (pinning)” at [https://docs.conda.io/](https://docs.conda.io/).*'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过创建一个例外列表并将其保存为名为pinned.txt的文件在环境的conda-meta目录中，可以防止某些软件包更新。你可以在[https://docs.conda.io/](https://docs.conda.io/)了解更多关于“防止软件包更新（锁定）”的信息。*'
- en: 'To *remove* a package, such as Matplotlib, from an active environment, enter:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要从活动环境中*删除*一个软件包，比如Matplotlib，请输入：
- en: '[PRE27]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To remove multiple packages at the same time, list them one after another.
    Let’s do this now for *my_second_env*:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时删除多个软件包，可以将它们一个接一个列出。现在就为*my_second_env*执行此操作：
- en: '[PRE28]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To remove the same package from a non-active environment, provide the name
    of the environment using the `--name` (`-n`) flag:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要从非活动环境中删除相同的软件包，请使用`--name`（`-n`）标志提供环境的名称：
- en: '[PRE29]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Remember, working with non-active environments in this way is discouraged due
    to the increased chance for error. Whether you work with Navigator or conda, it’s
    shockingly easy to lose track of which environment you’re working in and cause
    all kinds of mayhem.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，以这种方式处理非活动环境是不推荐的，因为这样更容易出错。无论是使用Navigator还是conda，失去对所工作环境的追踪都极其容易，从而导致各种混乱。
- en: To verify the results of updating and removing packages, use the conda list
    command in the active environment.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证更新和删除软件包的结果，请在活动环境中使用conda list命令。
- en: '***Duplicating and Sharing Environments***'
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***复制和共享环境***'
- en: You can exactly duplicate an environment by either cloning it or using a special
    file that lists its contents, which makes it easy to share environments with others,
    archive them, or restore deleted versions.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过克隆环境或使用列出其内容的特殊文件来精确复制一个环境，这样就可以轻松地与他人共享环境、存档或恢复已删除的版本。
- en: '**Cloning Environments**'
  id: totrans-261
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**克隆环境**'
- en: 'The simplest way to duplicate an environment is to use the `--clone` flag.
    For example, to produce an exact copy of *my_second_env* called *my_third_env*,
    use the following:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 复制环境的最简单方法是使用`--clone`标志。例如，要创建一个名为*my_third_env*的*my_second_env*的精确副本，可以使用以下命令：
- en: '[PRE30]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To verify the results, enter:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证结果，请输入：
- en: '[PRE31]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Using an Environment File**'
  id: totrans-266
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用环境文件**'
- en: You can also duplicate an environment by recording its contents. An *environment
    file* is a text file that lists all the packages and versions that are installed
    in an environment, including those installed using pip. This helps you both restore
    an environment and share it with others.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过记录其内容来复制环境。*环境文件*是一个文本文件，列出了环境中安装的所有软件包和版本，包括使用pip安装的那些软件包。这有助于你恢复环境并与他人共享。
- en: The environment file is written in *YAML (.yml)*, a human-readable data-serialization
    format used for data storage. YAML originally meant “Yet Another Markup Language”
    but now stands for “YAML Ain’t Markup Language” to stress that it’s more than
    just a document markup tool.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 环境文件是以*YAML (.yml)*格式编写的，这是一种用于数据存储的可读数据序列化格式。YAML 最初意味着“Yet Another Markup
    Language”，但现在代表“YAML Ain’t Markup Language”，强调它不仅仅是一个文档标记工具。
- en: 'To generate an environment file, you must activate and then export the environment.
    Here’s how to make a file for *my_second_env*:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成环境文件，您必须先激活环境，然后导出环境。以下是为*my_second_env*创建文件的方法：
- en: '[PRE32]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can name the file any valid filename, such as *my_second_env.yml*, but be
    careful because an existing file with the same name will be overwritten.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将文件命名为任何有效的文件名，例如*my_second_env.yml*，但请小心，因为如果已经存在同名文件，它将被覆盖。
- en: 'By default, this file is written to the user directory. For my Windows setup,
    this is *C:\Users\hanna*. Here are the file contents (specific versions and dates
    have been replaced with x, as these values are time dependent and your output
    may differ):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，文件会写入用户目录。对于我的 Windows 配置，这个目录是*C:\Users\hanna*。以下是文件内容（特定版本和日期已被替换为 x，因为这些值是时间依赖的，您的输出可能会有所不同）：
- en: '[PRE33]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can now email this file to a coworker, and they can perfectly reproduce
    your environment. If they use a different operating system, you can use the `--from-history`
    flag to generate a file that will work across platforms:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将此文件通过电子邮件发送给同事，他们可以完美地重现您的环境。如果他们使用不同的操作系统，您可以使用`--from-history`标志生成一个跨平台都能使用的文件：
- en: '[PRE34]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here’s how the new environment file looks:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 新的环境文件如下所示：
- en: '[PRE35]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this case, the environment file includes only packages that you’ve explicitly
    asked for, like Python, without their dependencies. Solving for dependencies can
    introduce packages that might not be compatible across platforms, so they are
    not included.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，环境文件仅包含您明确要求的包，如 Python，而不包括其依赖项。解决依赖问题可能会引入一些在不同平台间不兼容的包，因此它们未被包含在内。
- en: 'Remember when I said that it was best practice to specify a version number
    when installing a package, even if you wanted to take the most recent version?
    Well, look at `-python` in the last environment file listing: *there’s no version
    number*. When you use the history flag, the environment file includes *exactly
    what you asked for*. By not specifying a version, you told conda to install the
    current version of Python. If someone uses your file after the release of a new
    version of Python, not only will they not reproduce your environment (assuming
    you haven’t updated it), but they also won’t *know* they haven’t reproduced it!'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我曾说过，安装包时最好指定版本号，即使您想安装最新版本吗？现在看看最后一个环境文件中的`-python`：*没有版本号*。当您使用历史标志时，环境文件包括*您要求的内容*。如果不指定版本，您告诉
    conda 安装当前版本的 Python。如果某人在 Python 新版本发布后使用您的文件，不仅他们无法重现您的环境（假设您没有更新它），而且他们也*不知道*他们没有重现环境！
- en: 'After you have an *environment.yml* file, you can use it to re-create an environment.
    For example, a coworker could duplicate *my_second_env* by entering this command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在拥有*environment.yml*文件后，您可以使用它来重新创建一个环境。例如，一位同事可以通过输入以下命令来复制*my_second_env*：
- en: '[PRE36]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can also add packages in the file to another environment, by providing
    the environment name, represented here by ENV_NAME:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过提供环境名称（此处用 ENV_NAME 表示）将包添加到文件中的另一个环境：
- en: '[PRE37]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: For more on environment files, including how to manually produce them, visit
    *[https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment/](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment/)*.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于环境文件的信息，包括如何手动生成它们，请访问*[https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment/](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment/)*。
- en: '**Using a Specifications File**'
  id: totrans-285
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用规范文件**'
- en: 'If your environment does not include packages installed using pip, you can
    also use a *specifications file* to reproduce a conda environment on the same
    operating system. To create a specification file, activate an environment, such
    as *my_second_env*, and enter the following command:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的环境中不包括使用 pip 安装的包，您也可以使用*规范文件*在相同操作系统上重现 conda 环境。要创建规范文件，激活一个环境，例如*my_second_env*，然后输入以下命令：
- en: '[PRE38]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This produces the following output, truncated for brevity:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出，出于简洁性考虑已被截断：
- en: '[PRE39]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To re-create *my_second_env* using this text file, run the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个文本文件重新创建 *my_second_env*，运行以下命令：
- en: '[PRE40]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Note that the `--explicit` flag ensures that the targeted platform is annotated
    in the file, in this case, `# platform: win-64` in the third line.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，`--explicit` 标志确保文件中标注了目标平台，在这种情况下，第三行会显示 `# platform: win-64`。'
- en: '***Restoring Environments***'
  id: totrans-293
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***恢复环境***'
- en: 'Because conda keeps a history of all the changes made to an environment, you
    can always roll back to a previous version. To see the list of available versions,
    first activate the environment and then enter the following:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 conda 会保留对环境所做的所有更改的历史记录，你可以随时回滚到以前的版本。要查看可用版本的列表，首先激活环境，然后输入以下命令：
- en: '[PRE41]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the list of revisions, a plus sign ( `+` ) before a package name means that
    it was added, a minus sign ( `–` `)` means that it was uninstalled, and no symbol
    before the name means that it was updated.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在修订列表中，包名前的加号（ `+` ）表示该包已被添加，减号（ `–` ）表示该包已被卸载，包名前没有符号表示该包已被更新。
- en: 'To restore the environment to a previous version, such as rev 3, use this command:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 要将环境恢复到之前的版本，例如版本 3，使用以下命令：
- en: '[PRE42]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Alternatively, enter the following:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，输入以下命令：
- en: '[PRE43]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If you restore to an older revision, this revision will get its own number,
    so you can still restore back to an earlier one. For example, if the revisions
    list shows eight revisions, and you restore to revision 6, when you regenerate
    the revisions list, you’ll see nine revisions. Revision 9 will be identical to
    revision 6.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你恢复到较旧的修订版本，该修订将获得自己的编号，因此你仍然可以恢复到更早的版本。例如，如果修订列表显示有八个修订版本，且你恢复到修订版 6，当你重新生成修订列表时，你会看到九个修订版本。修订版
    9 将与修订版 6 完全相同。
- en: '***Removing Environments***'
  id: totrans-302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***删除环境***'
- en: 'To delete a conda environment, you first must deactivate it by running the
    following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个 conda 环境，首先必须通过运行以下命令将其停用：
- en: '[PRE44]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, to remove the deactivated environment, run this command, substituting
    the name of the environment for ENVNAME:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要删除停用的环境，运行此命令，替换 ENVNAME 为环境的名称：
- en: '[PRE45]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Alternatively, you can run the following:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以运行以下命令：
- en: '[PRE46]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To verify the removal, run:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证删除操作，运行以下命令：
- en: '[PRE47]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can also use the `info` command to verify this:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `info` 命令来验证这一点：
- en: '[PRE48]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The removed environment should be absent from the environments list.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 被删除的环境应该不会出现在环境列表中。
- en: 'Remember, for environments outside of Anaconda’s *envs* folder, you’ll need
    to include the directory path:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，对于位于 Anaconda *envs* 文件夹之外的环境，你需要包括目录路径：
- en: '[PRE49]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '***Cleaning the Package Cache***'
  id: totrans-316
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***清理包缓存***'
- en: Over time, as you create and remove environments and install and uninstall packages,
    your *anaconda3* folder will consume more and more disk space. You can recover
    some of this space by cleaning the package cache. As discussed in “Understanding
    Conda Environments” on [page 22](ch02.xhtml#ch00lev1sec11), this is the folder
    that holds all your installed packages.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间推移，随着你创建和删除环境，以及安装和卸载包，你的 *anaconda3* 文件夹将占用越来越多的磁盘空间。你可以通过清理包缓存来恢复部分空间。如《理解
    Conda 环境》一节中所述（[第 22 页](ch02.xhtml#ch00lev1sec11)），这个文件夹保存了你所有已安装的包。
- en: 'To clean the package cache, run the conda clean command from any environment.
    To get a preview of the files it flags for removal, you can make a dry run:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 要清理包缓存，可以在任何环境中运行 conda clean 命令。为了预览它将标记为删除的文件，可以执行一次干运行：
- en: '[PRE50]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To commit, use:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 提交时，使用以下命令：
- en: '[PRE51]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will remove the index cache, unused cache packages (packages that are no
    longer linked to any environment), tarballs (files that combine and compress multiple
    files), and lock files from under the *pkgs* directory. Windows users will want
    to reboot after running this command.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除索引缓存、未使用的缓存包（不再与任何环境关联的包）、tar 包（将多个文件合并并压缩的文件）以及 *pkgs* 目录下的锁文件。Windows
    用户在运行此命令后，建议重启计算机。
- en: For more options when running `conda clean`, see *[https://docs.conda.io/projects/conda/en/latest/commands/clean.html](https://docs.conda.io/projects/conda/en/latest/commands/clean.html)*.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多运行 `conda clean` 时的选项，请参阅 *[https://docs.conda.io/projects/conda/en/latest/commands/clean.html](https://docs.conda.io/projects/conda/en/latest/commands/clean.html)*。
- en: '**Summary**'
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Every Python project should have its own conda environment to keep your work
    organized, isolated, up to date, reproducible, and sharable. Although Anaconda
    Navigator provides easy point-and-click manipulation of environments, you’ll want
    to learn some command line interface commands for complete control.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Python 项目都应该有自己的 conda 环境，以保持工作有序、隔离、更新、可重现并且可共享。尽管 Anaconda Navigator 提供了便捷的环境图形化操作，你还是应该学习一些命令行接口命令，以便获得完全的控制。
