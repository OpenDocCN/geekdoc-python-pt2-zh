- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Conditional Statements
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: The programs you have written so far execute line by line, beginning at the
    top of the code and ending at the bottom. You can visualize this flow as a series
    of steps that execute in a linear fashion, which means that the program can run
    in only one way. In this chapter, you’ll explore how to write divergent paths
    for Python to follow, depending on whether certain conditions are met. This is
    useful because you can execute different actions in your program depending on
    the scenario—think of the way a video game directs you to different levels or
    screens contingent on your performance.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你编写的程序是逐行执行的，从代码的顶部开始，一直到底部。你可以将这个执行流程想象为一系列按顺序执行的步骤，这意味着程序只能以一种方式运行。在本章中，你将学习如何编写不同的路径，让Python根据是否满足某些条件来选择不同的执行路线。这非常有用，因为你可以根据不同的场景执行程序中的不同操作——就像视频游戏根据你的表现将你引导到不同的关卡或屏幕。
- en: 'To evaluate a condition, you’ll use the *Boolean* data type, which represents
    one of two states: true or false. You’ll learn to write Boolean expressions to
    test whether a statement is true or false. Then you’ll use `if`, `elif`, and `else`
    statements to make your code carry out different actions in response to the true
    or false outcomes.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估一个条件，你将使用*布尔*数据类型，它表示两种状态之一：真或假。你将学习编写布尔表达式来测试某个语句是否为真或假。然后，你会使用`if`、`elif`和`else`语句，根据真假结果让代码执行不同的操作。
- en: Control Flow
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制流
- en: '*Control flow* refers to the order in which your lines of code execute. By
    default, this flow begins from the top of your code and proceeds one line at a
    time until it reaches the bottom. Using control flow statements like `if`, `elif`,
    `else`, `while`, and `for`, you can direct Python to skip, jump to, and repeat
    lines of code.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*控制流*指的是代码行执行的顺序。默认情况下，这个流从代码的顶部开始，并按顺序逐行执行，直到达到代码的底部。通过使用控制流语句，如`if`、`elif`、`else`、`while`和`for`，你可以指示Python跳过、跳转或重复某些代码行。'
- en: 'For example, say you want to fill the display window with circles. [Figure
    4-1](#figure4-1) depicts two arrangements: 9 circles aligned three by three, and
    81 circles aligned nine by nine.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你想用圆形填充显示窗口。[图 4-1](#figure4-1)展示了两种排列方式：9个圆形按三行三列排列，81个圆形按九行九列排列。
- en: '![f04001](image_fi/500969c04/f04001.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![f04001](image_fi/500969c04/f04001.png)'
- en: 'Figure 4-1: The 9-circle (left) and 81-circle (right) arrangements'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-1：9个圆形（左）和81个圆形（右）排列方式
- en: You could write a `circle()` function for each and every circle displayed. If
    you’re drawing only 9 circles, writing 9 `circle()` functions might be manageable,
    but writing 81 `circle()` functions is tedious and can lead to errors. If you
    want several circles, the better approach is to write a single `circle()` line
    and have Python repeat it as many times as needed. [Figure 4-2](#figure4-2) shows
    these two approaches, using flowcharts representing the programming logic.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为每个显示的圆形编写一个`circle()`函数。如果你只绘制9个圆形，编写9个`circle()`函数可能是可行的，但如果要编写81个`circle()`函数，这将是繁琐的，并且容易出错。如果你需要多个圆形，更好的方法是编写一行`circle()`，然后让Python根据需要重复执行这行代码。[图
    4-2](#figure4-2)展示了这两种方法，使用流程图表示编程逻辑。
- en: '![f04002](image_fi/500969c04/f04002.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f04002](image_fi/500969c04/f04002.png)'
- en: 'Figure 4-2: Flowcharts comparing manual (left) and conditional (right) approaches
    to drawing multiple circles'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-2：手动方法（左）与条件方法（右）绘制多个圆形的流程图比较
- en: The manual method is shown on the left. Each *draw circle* represents a `circle()`
    function; in this case, there are two *draw circle* steps, but you can add as
    many as required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 手动方法如左侧所示。每个*绘制圆形*表示一个`circle()`函数；在这种情况下，有两个*绘制圆形*步骤，但你可以根据需要添加更多。
- en: The flowchart on the right in [Figure 4-2](#figure4-2) repeats the *draw circle*
    step until a particular condition is met. The diamond containing *81?* represents
    a decision step, which checks whether the current number of circles is 81\. If
    true, the program proceeds to the *stop* step; if false, Processing draws another
    circle and returns to the decision step.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 4-2](#figure4-2)中的右侧流程图会重复*绘制圆形*步骤，直到满足某个条件。包含*81?*的菱形表示一个决策步骤，检查当前圆形的数量是否为81。如果为真，程序将继续执行*停止*步骤；如果为假，Processing会绘制另一个圆形并返回到决策步骤。
- en: This chapter and the next examine how to implement this kind of logic in Python,
    which will be your first foray into algorithmic thinking. In later chapters, you’ll
    be applying flow control techniques in most of your sketches.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章及下一章将探讨如何在Python中实现这种逻辑，这将是你首次接触算法思维。之后的章节中，你将在大多数草图中应用流程控制技术。
- en: Conditional Statements
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句
- en: '*Conditional statements* are used to test one or many conditions and then execute
    appropriate responses.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*条件语句*用于测试一个或多个条件，并根据测试结果执行相应的响应。'
- en: To explore Python’s various conditional statements, create a new sketch and
    save it as *conditional_statements*. In the sections that follow, you’ll enter
    code into this working sketch.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索Python的各种条件语句，创建一个新草图并将其保存为*conditional_statements*。在接下来的章节中，你将向这个工作草图中输入代码。
- en: The Boolean Data Type
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔数据类型
- en: 'As mentioned previously, a Boolean is a value that can represent one of two
    possible states: `True` or `False`. To see how the Boolean data type operates,
    add these two variables to the sketch:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，布尔值是可以表示两种可能状态的值：`True`或`False`。为了查看布尔数据类型的操作方式，请在草图中添加以下两个变量：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first letter of a Boolean value is always uppercase, and no quotation marks
    are used since that would make it a string.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值的首字母总是大写，并且不使用引号，因为那样会使其变成字符串。
- en: Whenever Python is required to manage Booleans as numeric values, it converts
    a `True` value to `1`, and a `False` value to `0`; this, however, works both ways.
    For instance, Python’s `bool()` function, which converts any value to Boolean,
    converts a `1` to `True` and a `0` to `False`. This will prove useful when you
    encounter `if` statements, where you’ll instruct Python to execute different lines
    of code based on `True`/`False` outcomes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每当Python需要将布尔值作为数值处理时，它会将`True`转换为`1`，将`False`转换为`0`；不过，这个过程是双向的。例如，Python的`bool()`函数会将任何值转换为布尔值，将`1`转换为`True`，将`0`转换为`False`。当你遇到`if`语句时，这个特性非常有用，因你可以指示Python根据`True`/`False`的结果执行不同的代码行。
- en: 'In your sketch, add a series of `print()` functions to test this behavior:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的草图中，添加一系列的`print()`函数来测试这种行为：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first two `print` statements repeat the variable values back to the console.
    The third `print` statement uses an arithmetic addition (`+`) operator to add
    one `True` Boolean to another. Adding `True` and `True` results in `2`. Converting
    Booleans to numbers works with mathematical operators or any functions that convert
    values to numbers, such as the `int()` function for converting to integers. The
    final two `print` statements, which contain `bool()` functions, convert `1` and
    `0` to their respective Boolean equivalents.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前两条`print`语句会将变量值重复输出到控制台。第三条`print`语句使用算术加法（`+`）运算符将一个`True`布尔值与另一个`True`布尔值相加。将`True`和`True`相加的结果是`2`。将布尔值转换为数字可以与数学运算符一起使用，或者使用任何将值转换为数字的函数，例如`int()`函数，它将值转换为整数。最后两条`print`语句，其中包含`bool()`函数，将`1`和`0`转换为各自的布尔值。
- en: Relational Operators
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系运算符
- en: The previous example explicitly defines whether the ball is red and/or spiky,
    but relational operators also can direct your program to make its own decisions
    as to what is true or false. *Relational operators*, like greater-than (`>`) and
    less-than (`<`) signs, determine the relationship between two operands. For example,
    given 3 > 2, the 3 and 2 are the operands, and the greater-than sign is the relational
    operator. Because 3 is indeed greater than 2, this statement is true.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子明确地定义了球是否是红色和/或有刺，但关系运算符也可以指引你的程序自行判断哪些是对的，哪些是错的。*关系运算符*，例如大于符号（`>`）和小于符号（`<`），用来确定两个操作数之间的关系。例如，给定`3
    > 2`，3和2是操作数，而大于符号是关系运算符。因为3确实大于2，所以这个语句是正确的。
- en: 'To see how this works, add the following code to your *conditional_statements*
    sketch:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这个如何工作，向你的*conditional_statements*草图中添加以下代码：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The variable `x` is equal to `2`, which is greater than `1`, so the console
    should display `True`. However, `2` is not less than `1`, so the final line should
    print `False`. Notice that the relational operators return a Boolean value. This
    will be important for the next section, where the results of such comparisons
    determine which lines of code your program will execute. [Table 4-1](#table4-1)
    shows a list of Python’s relational operators.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`x`等于`2`，大于`1`，所以控制台应该显示`True`。然而，`2`并不小于`1`，因此最后一行应该打印`False`。注意，关系运算符返回的是布尔值。这在下一部分中非常重要，因为这些比较结果将决定程序执行哪些代码行。[表格4-1](#table4-1)列出了Python的关系运算符。
- en: 'Table 4-1: Relational Operators'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表格4-1：关系运算符
- en: '| **Operator** | **Description** | **Example** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `>` | Left operand is greater than right | `2 > 1` returns `True` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 左操作数大于右操作数 | `2 > 1` 返回 `True` |'
- en: '| `<` | Left operand is less than right | `1 < 2` returns `True` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 左操作数小于右操作数 | `1 < 2` 返回 `True` |'
- en: '| `>=` | Left operand is greater than or equal to right | `1 >= 2` returns
    `False` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 左操作数大于或等于右操作数 | `1 >= 2` 返回 `False` |'
- en: '| `<=` | Left operand is less than or equal to right | `2 <= 2` returns `True`
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 左操作数小于或等于右操作数 | `2 <= 2` 返回 `True` |'
- en: '| `==` | Left operand is equal to right | `2 == 2` returns `True` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 左操作数等于右操作数 | `2 == 2` 返回 `True` |'
- en: '| `!=` | Left operand is not equal to right | `2 != 2` returns `False` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 左操作数不等于右操作数 | `2 != 2` 返回 `False` |'
- en: 'What [Table 4-1](#table4-1) doesn’t show is that the `==` and `!=` operators
    can operate on both numbers and strings. Add the following code to test this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[表4-1](#table4-1)没有显示的是，`==`和`!=`运算符可以同时作用于数字和字符串。添加以下代码来测试这一点：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next you’ll combine relational operators with `if` and other conditional statements
    to specify the conditions for executing lines of code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将把关系运算符与`if`语句以及其他条件语句结合使用，以指定执行代码行的条件。
- en: if Statements
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: 'The `if`statement requires two ingredients: an expression that returns `True`
    or `False`, and code to execute should the former evaluate as `True`. [Figure
    4-3](#figure4-3) illustrates the syntax of an `if` statement.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句需要两个元素：一个返回`True`或`False`的表达式，以及在前者为`True`时要执行的代码。[图4-3](#figure4-3)展示了`if`语句的语法。'
- en: '![f04003](image_fi/500969c04/f04003.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![f04003](image_fi/500969c04/f04003.png)'
- en: 'Figure 4-3: An `if` statement syntax'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-3：`if`语句的语法
- en: Everything in pale blue is placeholder *pseudocode*, which is just English text
    that describes what’s happening in the code; the idea is that you could later
    replace this with Python.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有淡蓝色部分是占位符*伪代码*，它只是用英文描述代码中正在发生的事情；意思是，你以后可以用Python代码替换它。
- en: Assigning a Passing Grade
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分配及格成绩
- en: 'To get started with `if` statements, you’ll build a simple program that assigns
    letter grades to students, depending on their percentage test scores. Begin by
    adding this code to your working sketch:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用`if`语句，你将编写一个简单的程序，根据学生的考试成绩为他们分配字母成绩。首先，将以下代码添加到你的工作草图中：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This awards a `PASS` grade for any score greater than or equal to 50\. In this
    instance, the `score >= 50` returns `True`, so the `print('PASS')` line is executed.
    Be sure to indent the `print` line, which you can do by using the tab key.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为任何分数大于或等于50的学生赋予`PASS`（通过）成绩。在这个例子中，`score >= 50`返回`True`，因此`print('PASS')`这一行会被执行。确保缩进`print`这一行，你可以通过按Tab键来完成。
- en: 'Everything indented beneath the `if` line is executed if the condition returns
    `True`. For example, add the following line to your code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在`if`语句下面缩进的内容都会在条件为`True`时执行。例如，将以下代码行添加到你的代码中：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This should now print both `PASS` and `Well done!` for any score greater than
    or equal to 50.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于任何分数大于或等于50的学生，这段代码应该同时打印`PASS`和`Well done!`。
- en: 'On the other hand, a `print` line flush against the left margin prints `Well
    done!`, regardless of whether the score exceeds 50:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，靠左边的`print`语句无论分数是否超过50都会打印`Well done!`：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you ever need to nest an `if` statement within another `if` statement, increase
    the indentation accordingly. Most code editors allow you to select multiple lines
    of code and press the tab key to indent them simultaneously. Processing’s editor
    is no exception. If you need to “out-dent,” hold the shift key while pressing
    tab.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在一个`if`语句中嵌套另一个`if`语句，请相应地增加缩进。大多数代码编辑器允许你选择多行代码并按Tab键进行缩进，Processing的编辑器也不例外。如果你需要取消缩进，按住Shift键并同时按Tab键。
- en: 'Without adding this next example to your code, see if you can predict the result:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有添加下一个示例到你的代码中之前，看看你能否预测结果：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you predicted that the console would display a `PASS` line followed by `Bien
    hecho!`, you’re correct. The `'ES'` string value is assigned to a new variable
    named `language` 1. The score is greater than or equal to 50, so the program executes
    the contents of the outermost `if` statement 2. The `PASS` line 3 is first to
    print. The condition of the next `if` statement 4, however, evaluates as `False`,
    so the program skips the `Well done!` line. The final `if` statement 5 then tests
    for Spanish. Because the language variable is equal to `'ES'`, Processing prints
    `Bien hecho!` to the console.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你预测控制台会先显示 `PASS` 行，然后显示 `Bien hecho!`，那你是对的。`'ES'` 字符串值被分配给一个名为 `language`
    的新变量 1。分数大于或等于 50，因此程序会执行最外层 `if` 语句的内容 2。`PASS` 行 3 会首先打印。然而，下一条 `if` 语句 4 的条件评估为
    `False`，因此程序跳过了 `Well done!` 行。最后的 `if` 语句 5 会检查西班牙语。由于语言变量等于 `'ES'`，Processing
    会将 `Bien hecho!` 打印到控制台。
- en: Assigning Letter Grades
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分配字母成绩
- en: Currently, your grading program can award only a `PASS`. To assign letter grades
    like A, B, or C, you’ll need to use additional `if` statements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的评分程序只能授予 `PASS`。要分配字母成绩，如 A、B 或 C，你需要使用更多的 `if` 语句。
- en: 'Adapt your code, changing the `PASS` string to a `C` and inserting a new `if`
    statement that awards a B for any score greater than or equal to 65:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 修改你的代码，将 `PASS` 字符串改为 `C`，并插入一个新的 `if` 语句，对于任何大于或等于 65 的分数，授予 B：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the sketch. Because the `score` variable holds a value greater than 50,
    the console displays a `C`. But there’s an issue—when you change the score value
    to a `70`, you get `B` *and* `C` ([Figure 4-4](#figure4-4)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图。由于 `score` 变量的值大于 50，控制台显示了 `C`。但是有一个问题——当你将分数改为 `70` 时，控制台会显示 `B` *和*
    `C`（[图 4-4](#figure4-4)）。
- en: '![f04004](image_fi/500969c04/f04004.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![f04004](image_fi/500969c04/f04004.png)'
- en: 'Figure 4-4: A score of 70 is awarded both B *and* C.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-4：70 分获得了 B *和* C。
- en: Because the score is greater than 65 and greater than 50, both `if` statements
    are triggered to print, resulting in two letter grades. To avoid getting more
    than one grade, you need to chain together the `if` statements, such that, if
    the first condition is found to be true, the subsequent `if` statement is skipped.
    This is where the else-if style structure comes into play.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因为分数大于 65 且大于 50，两个 `if` 语句都会被触发，导致打印出两个字母成绩。为了避免出现多个成绩，需要将 `if` 语句连接起来，这样如果第一个条件为真，后续的
    `if` 语句会被跳过。这就是 `else-if` 结构发挥作用的地方。
- en: elif Statements
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: elif 语句
- en: 'An *else-if statement*, or `elif` in Python, runs only after an `if` condition
    returns `False`. Using an `elif` will solve the preceding problem of having both
    `if` statements operate independently. So, just change the second `if` to an `elif`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*else-if 语句*，或 Python 中的 `elif`，只有在 `if` 条件返回 `False` 后才会运行。使用 `elif` 将解决之前的问题，即让两个
    `if` 语句独立操作。因此，只需将第二个 `if` 改为 `elif`：'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, if the value of `score` results in `B`, there is no need to check the `C`
    condition, and Python will skip the `elif` statement altogether. On the other
    hand, should the initial `if` statement condition return `False`, the `elif` will
    test whether `score` is greater than or equal to 50; if so, it prints a `C`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果 `score` 的值是 `B`，就不需要检查 `C` 条件，Python 会完全跳过 `elif` 语句。另一方面，如果最初的 `if` 语句条件返回
    `False`，那么 `elif` 会检查 `score` 是否大于或等于 50；如果是，它会打印出 `C`。
- en: Set the `score` variable to something B-worthy, like `70`, and then run the
    sketch. The console should now display a `B`, but no `C`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `score` 变量设置为一个适合 B 的值，比如 `70`，然后运行草图。此时控制台应该显示 `B`，但没有 `C`。
- en: Order Matters
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 顺序很重要
- en: 'It’s important to order this `if...elif` logic correctly. Consider, for instance,
    the following code that places the `C` condition first:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正确排序 `if...elif` 逻辑非常重要。比如，考虑下面这段代码，将 `C` 条件放在了前面：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this scenario, any score greater than or equal to 50 gets a C, even if it’s
    higher than 65 and should get a B. In fact, no B grades will ever print to the
    console, because the program can never check the `B` condition.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，任何大于或等于 50 的分数都会获得 C，即使它高于 65 应该得到 B。事实上，B 成绩永远不会打印到控制台，因为程序永远无法检查 `B`
    条件。
- en: Checking for A
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查 A
- en: 'In your *conditional_statements* sketch, insert a new `if` statement to handle
    A grades (80 or greater). Also, change the `B` statement to an `elif`. Adjust
    the `score` to test that this is working correctly:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 *conditional_statements* 草图中，插入一个新的 `if` 语句来处理 A 成绩（80 或更高）。另外，将 `B` 语句改为
    `elif`。调整 `score` 来测试是否正常工作：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can add as many `elif` statements as you need, but it’s always a single
    `if` that marks the beginning of the `if...elif` chain.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要添加尽可能多的`elif`语句，但始终是一个`if`语句标志着`if...elif`链的开始。
- en: Your A/B/C logic is now in place, but a score below 50 will pass through all
    of the `if...elif` statements without invoking any actions, not receiving any
    grade at all.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的A/B/C逻辑已经到位，但如果成绩低于50，它将通过所有的`if...elif`语句而不触发任何动作，根本没有得到任何成绩。
- en: else Statements
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else语句
- en: 'If a student does not receive an A, B, or C, you can conclude that the grade
    is a `FAIL`. To handle `FAIL` cases, use an *else statement* to account for any
    condition that doesn’t match those in the `if...elif` grouping. You don’t need
    to check whether the `score` variable is less than 50, as this is implied by its
    failing to match any of the preceding criteria. To handle `FAIL` cases, add the
    following `else` statement to your code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果学生没有得到A、B或C，可以得出成绩为`FAIL`的结论。为了处理`FAIL`情况，可以使用*else语句*来处理任何不符合`if...elif`分组的条件。你无需检查`score`变量是否小于50，因为这一点已经通过其未能匹配之前的任何条件而隐含了。为了处理`FAIL`情况，可以在代码中添加以下`else`语句：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `else` statement has no condition and always comes at the end of the `if...elif`
    grouping.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`语句没有条件，总是出现在`if...elif`分组的末尾。'
- en: Adjust the `score` value to something like 40 and test the code. The console
    should display a `FAIL`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将`score`值调整为类似40的数值并测试代码。控制台应该显示`FAIL`。
- en: else Statements Without elif
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 没有`elif`的`else`语句
- en: 'An `else` statement need not necessarily follow an `elif`. You can use an `if...else`
    structure where you don’t require `elif` clauses. Consider a program that grades
    any score 50 and above as a `PASS`, and everything else as a `FAIL`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`语句不一定需要紧跟在`elif`之后。你可以使用`if...else`结构，在不需要`elif`分支的情况下。例如，考虑一个程序，它将所有成绩为50及以上的视为`PASS`，而其他所有成绩则为`FAIL`：'
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are no `elif` statements, so the `else` handles any score that the `if`
    doesn’t catch. Of course, whether you include any `elif` statements all depends
    on the logic you intend to implement.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有`elif`语句，`else`会处理`if`没有捕获到的任何分数。当然，是否包含`elif`语句完全取决于你打算实现的逻辑。
- en: Logical Operators
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: So far, each `if...elif` statement has relied on the outcome of a single relational
    operation. But often it’s useful to evaluate multiple relational operations within
    a single expression. For example, you might want to check whether the ball from
    earlier is red *and* spiky. To do this, you can use *logical operators*, or an
    `if` statement nested within another `if` statement, to make a decision based
    on the outcomes of multiple conditions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，每个`if...elif`语句都依赖于单一关系运算的结果。但通常情况下，在单个表达式中评估多个关系运算是非常有用的。例如，你可能想检查先前提到的球是否是红色的*并且*有刺。为此，你可以使用*逻辑运算符*，或者在另一个`if`语句中嵌套一个`if`语句，以根据多个条件的结果做出决定。
- en: 'Let’s modify the earlier example to handle red, spiky balls. You could use
    a nested `if` statement as shown in the following pseudocode:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改之前的示例，以处理红色且有刺的球。你可以使用嵌套的`if`语句，如下面的伪代码所示：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The outer `if` checks whether the ball is red, and then the inner `if` checks
    whether it’s spiky.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 外部的`if`检查球是否是红色的，然后内部的`if`检查球是否有刺。
- en: 'You can do the same thing by using a single `if` statement with the logical
    operator `and`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用单一的`if`语句结合逻辑运算符`and`来做同样的事情：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `and` operator returns `True` if the expressions on both sides of the operator
    also return `True`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`and`运算符在两边的表达式都为真时返回`True`。'
- en: '[Table 4-2](#table4-2) provides a list of Python’s logical operators, along
    with a brief description of each and an example.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[表4-2](#table4-2)列出了Python的逻辑运算符，并提供了每个运算符的简要说明和示例。'
- en: 'Table 4-2: Logical Operators'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 表4-2：逻辑运算符
- en: '| **Operator** | **Description** | **Example** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `and` | Returns `True` if both operands are true | `2 > 1 and 4 > 3` returns
    `True` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `and` | 如果两个操作数都为真，则返回`True` | `2 > 1 and 4 > 3` 返回 `True` |'
- en: '| `or` | Returns `True` if at least one operand is true | `2 > 1 or 4 < 3`
    returns `True` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `or` | 如果至少一个操作数为真，则返回`True` | `2 > 1 or 4 < 3` 返回 `True` |'
- en: '| `not` | `True` becomes `False`, and vice versa | `not 4 < 3` returns `True`
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `not` | `True`变为`False`，反之亦然 | `not 4 < 3` 返回 `True` |'
- en: 'Now let’s join two expressions by using the `and` operator to check for a much
    narrower condition. Add another `if` statement to check whether the student’s
    score is greater than or equal to 45 *and* less than 50, and display `OFFER RETAKE`
    if so:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过使用 `and` 运算符将两个表达式连接起来，以检查一个更为狭窄的条件。添加另一个 `if` 语句来检查学生的分数是否大于或等于 45 *并且*
    小于 50，如果是，则显示 `OFFER RETAKE`：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This condition includes the logical operator `and`. For this to evaluate as
    `True`, both `score >= 45` and `score < 50` must return `True`. Change the `score`
    value to something within this range, like `46`, and confirm that the console
    displays `FAIL` and `OFFER RETAKE`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个条件包含了逻辑运算符 `and`。为了使其评估为 `True`，`score >= 45` 和 `score < 50` 都必须返回 `True`。将
    `score` 值改为此范围内的数字，例如 `46`，并确认控制台显示 `FAIL` 和 `OFFER RETAKE`。
- en: Checking for Invalid Input
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查无效输入
- en: 'Now, let’s add another `if` statement that uses the `or` condition to account
    for any scores outside the valid range (0 to 100). Place this at the top of the
    `if...elif` chain, and change the `A` statement to an `elif`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加另一个 `if` 语句，使用 `or` 条件来处理任何超出有效范围（0到100）的分数。将此语句放在 `if...elif` 链的顶部，并将
    `A` 语句改为 `elif`：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, if the `score` is `105`, the program should print `INVALID SCORE`. For
    the `or` operation 1 to evaluate as `True`, at least one of its two operands,
    `score < 0` and `score > 100`, must return `True`. Experiment with different score
    values to test the code. If the console displays the invalid score message as
    well as a grade, ensure that you’ve changed the second statement to an `elif`
    2.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果 `score` 是 `105`，程序应该打印 `INVALID SCORE`。对于 `or` 运算符 1 来说，要评估为 `True`，它的两个操作数之一，`score
    < 0` 和 `score > 100`，必须返回 `True`。尝试不同的分数值以测试代码。如果控制台显示无效的分数信息以及一个成绩，确保你已将第二个语句更改为
    `elif` 2。
- en: Displaying a Message for Invalid Input
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示无效输入的消息
- en: There is room for one last improvement. Currently, if the user enters a score
    of `0`, the program grades it as a `FAIL`. However, a score of 0 is relatively
    unusual, so add one final `if` statement to display a warning message that the
    user may have entered invalid input.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个最后的改进空间。目前，如果用户输入一个 `0` 的分数，程序会将其判定为 `FAIL`。然而，`0` 的分数相对不常见，因此添加一个最终的 `if`
    语句，显示一个警告消息，提示用户可能输入了无效的内容。
- en: 'Here is the complete grading program:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的评分程序：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Recall that, when dealing with Booleans, Python interprets a `0` as `False`.
    This means if the `score` is assigned a `0`, it’s evaluated as `False`. However,
    the `not` operator 1 reverses this Boolean, converting it to a `True`, thereby
    triggering the warning message. You could use `mark == 0` to test the same condition,
    which is more explicit and easier to read, but this was a good opportunity to
    show the `not` operator in action. Note that this is a separate `if` statement,
    so for a score of `0`, the console displays both the `FAIL` and a warning message.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，当处理布尔值时，Python 将 `0` 解释为 `False`。这意味着如果 `score` 被赋值为 `0`，它会被评估为 `False`。然而，`not`
    运算符 1 会反转这个布尔值，将其转换为 `True`，从而触发警告信息。你也可以使用 `mark == 0` 来测试相同的条件，这样更加明确且易于阅读，但这是一个很好的机会来展示
    `not` 运算符的实际应用。请注意，这是一个独立的 `if` 语句，因此对于 `0` 的得分，控制台会同时显示 `FAIL` 和警告信息。
- en: You might decide that the program could use some clickable buttons and input
    fields. Chapter 11 covers mouse and keyboard interaction techniques you can use
    to add a graphical user interface to this kind of program.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会决定程序需要一些可点击的按钮和输入框。第11章介绍了鼠标和键盘交互技术，你可以用它们为这种程序添加图形用户界面。
- en: 'Challenge #3: Four-Square Task'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '挑战 #3：四方任务'
- en: 'In this challenge, you’ll use conditional statements to gauge the position
    of a point in a four-colored square. Add the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个挑战中，你将使用条件语句来判断一个点在四种颜色方格中的位置。请添加以下代码：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Run the sketch. The display window should appear, equally divided into different-colored
    quadrants ([Figure 4-5](#figure4-5)). Each `fill()` and `rect()` line pair draws
    a colored square spanning from the center of the display window to each corner.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图。显示窗口应该出现，平等地分为不同颜色的象限（[图 4-5](#figure4-5)）。每一对 `fill()` 和 `rect()` 行绘制了一个从显示窗口中心到每个角落的彩色方块。
- en: '![f04005](image_fi/500969c04/f04005.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![f04005](image_fi/500969c04/f04005.png)'
- en: 'Figure 4-5: Grid with four colors'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-5：四种颜色的网格
- en: 'Next, place a single text character in the upper right quadrant:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在右上象限放置一个单一的文本字符：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `txt` value 1, a question mark, is positioned in the red quadrant ([Figure
    4-6](#figure4-6)). The `text()` function 2 relies on the `x` and `y` variables
    to control this character’s position.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`txt`值 1，一个问号，位于红色象限中（[图 4-6](#figure4-6)）。`text()`函数 2 依赖于`x`和`y`变量来控制该字符的位置。'
- en: '![f04006](image_fi/500969c04/f04006.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![f04006](image_fi/500969c04/f04006.png)'
- en: 'Figure 4-6: Placing the question mark in the red (upper right) quadrant'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-6：将问号放置在红色（右上）象限中
- en: Your challenge is to write conditional statements to replace the ? character
    with an R (for red), B (for blue), P (for purple), or O (for orange) in the appropriate
    squares to match the color beneath it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您的挑战是编写条件语句，将?字符替换为 R（红色）、B（蓝色）、P（紫色）或 O（橙色），并放入适当的方格中，以匹配下面的颜色。
- en: 'To start, insert an `if` statement to manage the R (red) condition:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，插入一个`if`语句来管理 R（红色）条件：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `if` statement sets the `txt` variable to `'R'` for any `x` values to the
    right of the display window’s center. Run the sketch to confirm that the code
    displays an R over the red quadrant. If you’re still seeing a question mark, ensure
    that you have inserted the `if` statement above the `fill('#FFFFFF')` line.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句将`txt`变量设置为`''R''`，适用于显示窗口中心右侧的任何`x`值。运行草图，确认代码在红色象限中显示 R。如果仍然看到一个问号，确保已将`if`语句插入到`fill(''#FFFFFF'')`行之上。'
- en: Now, set the `y` value to `400` to place the character in the orange quadrant.
    Run the sketch. It’s still an R. To display an O instead, you need to add an `elif`
    statement (and a logical `and` operator). Once the O is working correctly, try
    positioning the character in another quadrant, and so forth. [Figure 4-7](#figure4-7)
    displays four screenshots of the completed task; the caption lists the corresponding
    x-y coordinates.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将`y`值设置为`400`，以将字符放置在橙色象限中。运行草图。它仍然是一个 R。要显示 O，您需要添加一个`elif`语句（以及一个逻辑`and`操作符）。一旦
    O 正常工作，尝试将字符放置在另一个象限中，依此类推。[图 4-7](#figure4-7)显示了完成任务的四个截图；标题列出了相应的 x-y 坐标。
- en: Now that you have a good grasp of `if...elif...else` logic, you’re ready to
    use Boolean expressions for iteration. If you need help, you can access the solution
    at [https://github.com/tabreturn/processing.py-book/tree/master/chapter-04-conditional_statements/four_square/](https://github.com/tabreturn/processing.py-book/tree/master/chapter-04-conditional_statements/four_square/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经掌握了`if...elif...else`逻辑，您可以开始使用布尔表达式进行迭代。如果需要帮助，可以访问解决方案：[https://github.com/tabreturn/processing.py-book/tree/master/chapter-04-conditional_statements/four_square/](https://github.com/tabreturn/processing.py-book/tree/master/chapter-04-conditional_statements/four_square/)。
- en: '![f04007](image_fi/500969c04/f04007.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![f04007](image_fi/500969c04/f04007.png)'
- en: 'Figure 4-7: Clockwise from the upper left: the x-y coordinates of each letter
    are R = (400, 100), O = (400, 400), P = (250, 485), and B = (38, 121).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-7：从左上角开始顺时针：每个字母的 x-y 坐标为 R = (400, 100)、O = (400, 400)、P = (250, 485) 和
    B = (38, 121)。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, you learned about the Boolean data type, relational operators,
    and how to write Boolean expressions that work with `if` statements to instruct
    Python to execute particular lines of code. You explored logical operators for
    constructing richer expressions, as well as how to combine `if`, `elif`, and `else`
    statements.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了布尔数据类型、关系运算符以及如何编写布尔表达式，这些表达式与`if`语句一起工作，指示 Python 执行特定的代码行。您还探索了构造更复杂表达式的逻辑运算符，以及如何组合使用`if`、`elif`和`else`语句。
- en: In Chapter 5, you’ll take control flow a step further and learn how to write
    programs that can repeat an operation until a certain requirement is met. For
    some especially interesting results, you’ll be adding randomness to your creations.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 5 章中，您将进一步控制流程，学习如何编写可以重复操作直到满足某些要求的程序。为了获得一些特别有趣的结果，您将为创作添加随机性。
