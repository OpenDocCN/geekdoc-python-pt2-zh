- en: '**4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: CREATING THE SPACE STATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建空间站**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In this chapter, you’ll build the map for your space station on Mars. Using
    the simple *Explorer* code that you’ll add in this chapter, you’ll be able to
    look at the walls of each room and start to find your bearings. We’ll use lists,
    loops, and the techniques you learned in [Chapters 1](ch01.xhtml#ch01), [2](ch02.xhtml#ch02),
    and [3](ch03.xhtml#ch03) to create the map data and display the room in 3D.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将构建火星上的空间站地图。使用本章中你将添加的简单*Explorer*代码，你将能够查看每个房间的墙壁，并开始找到方向。我们将使用列表、循环和你在[第1章](ch01.xhtml#ch01)、[第2章](ch02.xhtml#ch02)和[第3章](ch03.xhtml#ch03)中学到的技术来创建地图数据并以3D显示房间。
- en: '**AUTOMATING THE MAP MAKING PROCESS**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**自动化地图制作过程**'
- en: The problem with our current room_map data is that there’s a lot of it. The
    *Escape* game includes 50 locations. If you had to enter room_map data for every
    location, it would take ages and be hugely inefficient. As an example, if each
    room consisted of 9 × 9 tiles, we would have 81 data items per room, or 4,050
    data items in total. Just the room data would take up 10 pages of this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的room_map数据的问题在于它太庞大了。*Escape*游戏包括50个位置。如果你必须为每个位置输入room_map数据，那将是极其低效并且费时的。例如，如果每个房间由9
    × 9的瓷砖组成，那么每个房间将有81个数据项，总共会有4,050个数据项。仅房间数据就会占据本书的10页。
- en: 'Much of that data is repeated: 0s mark the floor and exits, and 1s mark the
    walls at the edges. You know from [Chapter 3](ch03.xhtml#ch03) that we can use
    loops to efficiently manage repetition. We can use that knowledge to make a program
    that will generate the room_map data automatically when we give it certain information,
    such as the room size and the location of the exits.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中大部分数据是重复的：0表示地板和出口，1表示墙壁边缘。从[第3章](ch03.xhtml#ch03)你已经知道我们可以使用循环来高效地管理重复数据。我们可以利用这个知识制作一个程序，当我们提供某些信息（如房间大小和出口位置）时，它将自动生成room_map数据。
- en: '**HOW THE AUTOMATIC MAP MAKER WORKS**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**自动地图生成器的工作原理**'
- en: 'The *Escape* program will work like this: when the player visits a room, our
    code will take the data for that room (its size and exit positions) and convert
    it into the room_map data. The room_map data will include columns and rows that
    represent the floor, walls around the edge, and gaps where the exits should be.
    Eventually, we’ll use the room_map data to draw the room with the floor and walls
    in the correct place.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Escape*程序的工作方式是这样的：当玩家访问一个房间时，我们的代码将获取该房间的数据（其大小和出口位置），并将其转换为room_map数据。room_map数据将包括表示地板、边缘墙壁和出口位置的列和行。最终，我们将使用room_map数据来绘制房间，确保地板和墙壁的位置正确。'
- en: '[Figure 4-1](ch04.xhtml#ch04fig1) shows the map for the space station. I’ll
    refer to each location as a room, although numbers 1 to 25 are sectors on the
    planet surface within the station compound, similar to a garden. Numbers 26 to
    50 are rooms inside the space station.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-1](ch04.xhtml#ch04fig1)展示了空间站的地图。我将每个位置称为房间，尽管1到25号是空间站区域内的地面部分，类似于一个花园。26到50号是空间站内的房间。'
- en: The indoor layout is a simple maze with many corridors, dead-ends, and rooms
    to explore. When you make your own maps, try to create winding paths and corners
    to explore, even if the map isn’t very big. Be sure to reward players for their
    exploration by placing a useful or appealing item at the end of each corridor.
    Players also often feel more comfortable travelling from left to right as they
    explore a game world, so the player’s character will start on the left of the
    map in room 31.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 室内布局是一个简单的迷宫，有许多走廊、死胡同和房间可供探索。当你制作自己的地图时，尽量创造曲折的小路和角落供玩家探索，即使地图不大。一定要通过在每个走廊的尽头放置一个有用或吸引人的物品来奖励玩家的探索。玩家在探索游戏世界时通常更喜欢从左向右行进，所以玩家的角色将在地图的左侧31号房间开始。
- en: Outside, players can walk anywhere, but a fence will stop them from leaving
    the station compound (or wandering off the game map). Due to the claustrophobic
    atmosphere inside the space station, players will experience a sense of freedom
    outside with space to roam.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在外面，玩家可以随意走动，但篱笆会阻止他们离开车站区域（或偏离游戏地图）。由于空间站内部的封闭氛围，玩家在外面会体验到一种自由感，拥有可以漫游的空间。
- en: '![image](../images/fig4-1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-1.jpg)'
- en: '*Figure 4-1: The space station map*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-1：空间站地图*'
- en: When you’re playing the final *Escape* game, you can refer to this map, but
    you might find it more enjoyable to explore without a map or to make your own.
    This map doesn’t show where the doors are, which in the final game will stop players
    from accessing some parts of the map until they find the right key cards.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你玩最终版的*逃脱*游戏时，你可以参考这张地图，但你可能会觉得没有地图或者自己制作地图更有趣。该地图没有显示门的位置，在最终游戏中，这将防止玩家在找到正确的钥匙卡之前访问地图的某些部分。
- en: '**CREATING THE MAP DATA**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建地图数据**'
- en: Let’s create the map data. The rooms in our space station will all join up,
    so we only need to store the location of an exit from one side of the wall. For
    instance, an exit on the right of room 31 and an exit on the left of room 32 would
    be the same doorway connecting the two rooms. We don’t need to specify that exit
    for both rooms. For each room in the map, we’ll store whether it has an exit at
    the top or on the right. The program can work out on its own whether an exit exists
    at the bottom or on the left (as I’ll explain shortly). This approach also ensures
    that the map is consistent and no exits seem to vanish after you walk through
    them. If you can go one way through an exit, you can always go back the other
    way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建地图数据。我们空间站的房间将全部连接起来，因此我们只需要存储从一侧墙壁到出口的位置。例如，房间31右侧的出口和房间32左侧的出口是连接两间房间的相同门口。我们不需要为两间房间都指定该出口。对于地图中的每个房间，我们将存储是否在顶部或右侧有出口。程序可以自行判断是否在底部或左侧有出口（我稍后会解释）。这种方法还确保地图的一致性，且不会出现走过出口后出口消失的情况。如果你能通过一个出口进入，你总是能从另一个方向返回。
- en: 'Each room in the map needs the following data:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 地图中的每个房间需要以下数据：
- en: A short description of the room.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 房间的简短描述。
- en: Height in tiles, which is the size of the room from top to bottom on the screen.
    (This has nothing to do with the distance from floor to ceiling.)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓷砖高度，这是房间从屏幕上到下的大小。（这与从地板到天花板的距离无关。）
- en: Width in tiles, which is the size of the room from left to right across the
    screen.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓷砖宽度，这是房间从屏幕左侧到右侧的大小。
- en: Whether or not there is an exit at the top (True or False).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否在顶部有出口（真或假）。
- en: Whether or not there is an exit on the right (True or False).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否在右侧有出口（真或假）。
- en: '**TIP**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: True and False are known as *Boolean values*. In Python, these values must start
    with a capital letter, and they don’t need quotes around them, because they’re
    not strings.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 真和假被称为*布尔值*。在Python中，这些值必须以大写字母开头，而且不需要加引号，因为它们不是字符串。
- en: We call the unit we use to measure the room size a *tile* because it’s the same
    size as a floor tile. As you learned in [Chapter 3](ch03.xhtml#ch03), a tile will
    be our basic unit of measurement for all objects. For instance, a single object
    in the room, such as a chair or a cabinet, will often be the size of one tile.
    In [Chapter 3](ch03.xhtml#ch03) (see [Figure 3-1](ch03.xhtml#ch03fig1) and [Listing
    3-5](ch03.xhtml#ch03list5)), we made a room map that had seven rows with five
    list items in each row, so that room would be seven tiles high and five tiles
    wide.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用来衡量房间大小的单位称为*瓷砖*，因为它的大小与地砖相同。正如你在[第3章](ch03.xhtml#ch03)中学到的，瓷砖将作为我们所有物体的基本测量单位。例如，房间中的单个物体，如椅子或柜子，通常是一个瓷砖的大小。在[第3章](ch03.xhtml#ch03)（参见[图3-1](ch03.xhtml#ch03fig1)和[清单3-5](ch03.xhtml#ch03list5)），我们制作了一个房间地图，地图有七行，每行五个列表项，因此该房间的高度为七个瓷砖，宽度为五个瓷砖。
- en: 'Having rooms of different sizes adds variety to the map: some rooms can be
    narrow like corridors, and some can be expansive like community rooms. To fit
    in our game window, the maximum size of a room is 15 tiles high by 25 tiles wide.
    Large rooms or rooms with lots of objects in them might run more slowly on older
    computers, though.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有不同大小的房间可以为地图增添多样性：有些房间可以像走廊一样狭窄，有些房间则可以像社区房间一样宽敞。为了适应我们的游戏窗口，房间的最大大小为15个瓷砖高，25个瓷砖宽。不过，较大的房间或包含许多物品的房间在旧电脑上可能会运行较慢。
- en: 'Here’s an example of the data for room 26: it’s a narrow room 13 tiles high
    and 5 tiles wide with an exit at the top but none to the right (see the map in
    [Figure 4-1](ch04.xhtml#ch04fig1)).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是房间26的数据示例：它是一个狭窄的房间，13个瓷砖高，5个瓷砖宽，顶部有出口，但右侧没有出口（参见[图4-1](ch04.xhtml#ch04fig1)中的地图）。
- en: '["The airlock", 13, 5, True, False]'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '["气闸", 13, 5, 真, 假]'
- en: We give the room a name (or description), numbers for the height and width respectively,
    and True and False values for whether the top and right edges have an exit. In
    this game, each wall can have only one exit, and that exit will be automatically
    positioned in the middle of the wall.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为房间命名（或描述），分别给出高度和宽度的数字，以及顶部和右侧是否有出口的 True 和 False 值。在这个游戏中，每面墙只能有一个出口，且出口会自动定位在墙的中间。
- en: When the program makes the room_map data for room 27 next door, it will check
    room 26 to see whether it has an exit on the right. Because room 26 has no exit
    on the right, the program will know that room 27 has no left exit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序为隔壁的房间 27 生成 room_map 数据时，它将检查房间 26 是否在右侧有出口。因为房间 26 没有右侧出口，程序将知道房间 27 没有左侧出口。
- en: We’ll store the lists of data for each room in a list called GAME_MAP.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每个房间的数据显示创建一个名为GAME_MAP的列表。
- en: '**WRITING THE GAME_MAP CODE**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写 GAME_MAP 代码**'
- en: Click **File** ▸ **New File** to start a new file in Python. Enter the code
    from [Listing 4-1](ch04.xhtml#ch04list1) to start building the space station.
    Save your listing as *listing4-1.py*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **文件** ▸ **新建文件** 来在 Python 中创建新文件。输入来自[示例 4-1](ch04.xhtml#ch04list1)的代码来开始构建太空站。将你的文件保存为
    *listing4-1.py*。
- en: '**TIP**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Remember to save your work regularly when you’re typing a long program. As in
    many applications, you can press CTRL-S to save in IDLE.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个长程序时，记得定期保存工作。就像许多应用程序一样，你可以在 IDLE 中按 CTRL-S 来保存。
- en: '*listing4-1.py*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing4-1.py*'
- en: '# Escape - A Python Adventure'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '# Escape - 一款 Python 冒险游戏'
- en: '# by Sean McManus / www.sean.co.uk'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '# 由 Sean McManus / www.sean.co.uk 编写'
- en: '# Typed in by PUT YOUR NAME HERE'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '# 由 PUT YOUR NAME HERE 输入'
- en: import time, random, math
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: import time, random, math
- en: '###############'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## VARIABLES ##'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '## 变量 ##'
- en: '###############'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: 'WIDTH = 800 # window size'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'WIDTH = 800 # 窗口大小'
- en: HEIGHT = 800
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: HEIGHT = 800
- en: '#PLAYER variables'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '#PLAYER变量'
- en: '➊ PLAYER_NAME = "Sean" # change this to your name!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ PLAYER_NAME = "Sean" # 改成你的名字！'
- en: 'FRIEND1_NAME = "Karen" # change this to a friend''s name!'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'FRIEND1_NAME = "Karen" # 改成朋友的名字！'
- en: 'FRIEND2_NAME = "Leo" # change this to another friend''s name!'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'FRIEND2_NAME = "Leo" # 改成另一个朋友的名字！'
- en: 'current_room = 31 # start room = 31'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'current_room = 31 # 起始房间 = 31'
- en: ➋ top_left_x = 100
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ top_left_x = 100
- en: top_left_y = 150
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: top_left_y = 150
- en: ➌ DEMO_OBJECTS = [images.floor, images.pillar, images.soil]
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ DEMO_OBJECTS = [images.floor, images.pillar, images.soil]
- en: '###############'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '##    MAP    ##'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '##    地图    ##'
- en: '###############'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: ➍ MAP_WIDTH = 5
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ MAP_WIDTH = 5
- en: MAP_HEIGHT = 10
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: MAP_HEIGHT = 10
- en: MAP_SIZE = MAP_WIDTH * MAP_HEIGHT
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: MAP_SIZE = MAP_WIDTH * MAP_HEIGHT
- en: ➎ GAME_MAP = [ ["Room 0 - where unused objects are kept", 0, 0, False, False]
    ]
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ GAME_MAP = [ ["房间 0 - 存放未使用物品的地方", 0, 0, False, False] ]
- en: outdoor_rooms = range(1, 26)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: outdoor_rooms = range(1, 26)
- en: '➏ for planetsectors in range(1, 26): #rooms 1 to 25 are generated here'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '➏ for planetsectors in range(1, 26): # 这里生成房间 1 到 25'
- en: GAME_MAP.append( ["The dusty planet surface", 13, 13, True, True] )
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GAME_MAP.append( ["尘土飞扬的星球表面", 13, 13, True, True] )
- en: ➐ GAME_MAP += [
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ➐ GAME_MAP += [
- en: '#["Room name", height, width, Top exit?, Right exit?]'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '#["房间名称", 高度, 宽度, 顶部出口?, 右侧出口?]'
- en: '["The airlock", 13, 5, True, False], # room 26'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '["气闸", 13, 5, True, False], # 房间 26'
- en: '["The engineering lab", 13, 13, False, False], # room 27'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '["工程实验室", 13, 13, False, False], # 房间 27'
- en: '["Poodle Mission Control", 9, 13, False, True], # room 28'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '["贵宾任务控制室", 9, 13, False, True], # 房间 28'
- en: '["The viewing gallery", 9, 15, False, False], # room 29'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '["观景厅", 9, 15, False, False], # 房间 29'
- en: '["The crew''s bathroom", 5, 5, False, False], # room 30'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '["船员浴室", 5, 5, False, False], # 房间 30'
- en: '["The airlock entry bay", 7, 11, True, True], # room 31'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '["气闸入口舱", 7, 11, True, True], # 房间 31'
- en: '["Left elbow room", 9, 7, True, False], # room 32'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '["左肘房", 9, 7, True, False], # 房间 32'
- en: '["Right elbow room", 7, 13, True, True], # room 33'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '["右肘房", 7, 13, True, True], # 房间 33'
- en: '["The science lab", 13, 13, False, True], # room 34'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '["科学实验室", 13, 13, False, True], # 房间 34'
- en: '["The greenhouse", 13, 13, True, False], # room 35'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '["温室", 13, 13, True, False], # 房间 35'
- en: '[PLAYER_NAME + "''s sleeping quarters", 9, 11, False, False], # room 36'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[PLAYER_NAME + "的卧室", 9, 11, False, False], # 房间 36'
- en: '["West corridor", 15, 5, True, True], # room 37'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '["西走廊", 15, 5, True, True], # 房间 37'
- en: '["The briefing room", 7, 13, False, True], # room 38'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '["简报室", 7, 13, False, True], # 房间 38'
- en: '["The crew''s community room", 11, 13, True, False], # room 39'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '["船员公共休息室", 11, 13, True, False], # 房间 39'
- en: '["Main Mission Control", 14, 14, False, False], # room 40'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '["主任务控制室", 14, 14, False, False], # 房间 40'
- en: '["The sick bay", 12, 7, True, False], # room 41'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '["医务舱", 12, 7, True, False], # 房间 41'
- en: '["West corridor", 9, 7, True, False], # room 42'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '["西走廊", 9, 7, True, False], # 房间 42'
- en: '["Utilities control room", 9, 9, False, True], # room 43'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '["公用控制室", 9, 9, False, True], # 房间 43'
- en: '["Systems engineering bay", 9, 11, False, False], # room 44'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '["系统工程舱", 9, 11, False, False], # 房间 44'
- en: '["Security portal to Mission Control", 7, 7, True, False], # room 45'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '["“安全入口通道到任务控制中心”", 7, 7, True, False], # 房间 45'
- en: '➑         [FRIEND1_NAME + "''s sleeping quarters", 9, 11, True, True], # room
    46'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '➑          [FRIEND1_NAME + "的休息区", 9, 11, True, True], # 房间 46'
- en: '[FRIEND2_NAME + "''s sleeping quarters", 9, 11, True, True], # room 47'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[FRIEND2_NAME + "的休息区", 9, 11, True, True], # 房间 47'
- en: '["The pipeworks", 13, 11, True, False], # room 48'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '["“管道工作区”", 13, 11, True, False], # 房间 48'
- en: '["The chief scientist''s office", 9, 7, True, True], # room 49'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '["“首席科学家办公室”", 9, 7, True, True], # 房间 49'
- en: '["The robot workshop", 9, 11, True, False] # room 50'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '["“机器人车间”", 9, 11, True, False] # 房间 50'
- en: ']'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '# simple sanity check on map above to check data entry'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '# 对上面的地图进行简单的检查，确保数据输入正确'
- en: ➒ assert len(GAME_MAP)-1 == MAP_SIZE, "Map size and GAME_MAP don't match"
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ➒ assert len(GAME_MAP)-1 == MAP_SIZE, "地图大小与 GAME_MAP 不匹配"
- en: '*Listing 4-1: The* GAME_MAP *data*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 4-1：* GAME_MAP *数据*'
- en: 'Let’s take a closer look at this code for setting out the room map data. Keep
    in mind that as we build the *Escape* game, we’ll keep adding to the program.
    To help you find your way around the program, I’ll mark the different sections
    with headings like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这段设置房间地图数据的代码。请记住，在构建 *Escape* 游戏时，我们将不断地添加新的内容。为了帮助你更好地浏览程序，我会用类似这样的标题标记不同的部分：
- en: '###############'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: 'VARIABLES ##'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '变量 ##'
- en: '###############'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: 'The # symbol marks a comment and tells Python to ignore anything after it on
    the same line, so the game will work with or without these comments. The comments
    will make it easier to figure out where you are in the code and where you need
    to add new instructions as the program gets bigger. I’ve drawn boxes using the
    comment symbols to make the headings stand out as you scroll through the program
    code.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '# 符号标记为注释，告诉 Python 忽略它后面的内容，因此无论是否有这些注释，游戏都能正常运行。这些注释将帮助你在浏览代码时了解自己所在的位置，并知道何时需要添加新的指令，尤其是当程序变得越来越大时。我使用注释符号画了框，以便在浏览程序代码时，标题能够突出显示。'
- en: 'Three astronauts are based on the space station, and you can personalize their
    names in the code ➊. Change the PLAYER_NAME to your own, and add the names of
    two friends for the FRIEND1_NAME and FRIEND2_NAME variables. Throughout the code,
    we’ll use these variables wherever we need to use the name of one of your friends:
    for example, each astronaut has their own sleeping quarters. We need to set up
    these variables now because we’ll use them to set up some of the room descriptions
    later in this program. Who will you take with you to Mars?'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 三名宇航员驻扎在空间站，你可以在代码中个性化他们的名字 ➊。将 PLAYER_NAME 改成你自己的名字，并为 FRIEND1_NAME 和 FRIEND2_NAME
    变量添加两个朋友的名字。在整个代码中，每当需要使用你朋友的名字时，我们都会用到这些变量：例如，每个宇航员都有自己的休息区。我们现在需要设置这些变量，因为稍后我们将在程序中使用它们来设置一些房间描述。你会带谁一起去火星？
- en: 'The program also sets up some variables we’ll need at the end of this chapter
    to draw our room: the top_left_x and top_left_y variables ➋ specify where to start
    drawing the room; and the DEMO_OBJECTS list contains the images to use ➌.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 程序还设置了一些我们将在本章结束时需要的变量来绘制房间：top_left_x 和 top_left_y 变量 ➋ 指定从哪里开始绘制房间；DEMO_OBJECTS
    列表包含要使用的图像 ➌。
- en: 'First, we set up variables to contain the height, width, and overall size of
    the map in tiles ➍. We create the GAME_MAP list ➎ and give it the data for room
    0: this room is for storing items that aren’t in the game yet because the player
    hasn’t discovered or created them. It’s not a real room the player can visit.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们设置变量来包含地图的高度、宽度和整体大小（以瓦片为单位） ➍。我们创建 GAME_MAP 列表 ➎ 并为房间 0 提供数据：这个房间用于存储游戏中尚未出现的物品，因为玩家还没有发现或创建它们。这不是玩家可以访问的真实房间。
- en: 'We then use a loop ➏ to add the same data for each of the 25 planet surface
    rooms that make up the grounds of the compound. The range(1, 26) function is used
    to repeat 25 times. The first number is the one we want to start at, and the second
    is the number we want to finish at plus one (range() doesn’t include the last
    number you give it, remember). Each time through the loop, the program adds the
    same data to the end of GAME_MAP because all the planet surface “rooms” are the
    same size and have exits in every direction. The data for every surface room looks
    like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用一个循环 ➏ 为构成复合体地面的 25 个行星表面房间添加相同的数据。range(1, 26) 函数被用来重复 25 次。第一个数字是我们想要开始的数字，第二个数字是我们想要结束的数字加一（range()
    不包括你给它的最后一个数字，记住这一点）。每次通过循环，程序都会将相同的数据添加到 GAME_MAP 的末尾，因为所有的行星表面“房间”大小相同并且有四个方向的出口。每个表面房间的数据看起来是这样的：
- en: '["The dusty planet surface", 13, 13, True, True]'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '["“尘土飞扬的行星表面”", 13, 13, True, True]'
- en: When this loop finishes, GAME_MAP will include room 0 and also have the same
    “dusty planet surface” data for rooms 1 to 25\. We also set up the outdoor_rooms
    range to store the room numbers 1 to 25\. We’ll use this range when we need to
    check whether a room is inside or outside the space station.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个循环完成后，GAME_MAP将包括房间0，并且房间1到25会有相同的“尘土飞扬的星球表面”数据。我们还设置了outdoor_rooms范围来存储房间1到25的房间号。当我们需要检查某个房间是否位于空间站内外时，会使用这个范围。
- en: 'Finally, we add rooms 26 to 50 to GAME_MAP ➐. We do this by using += to add
    a new list to the end of GAME_MAP. That new list includes the data for the remaining
    rooms. Each of these rooms will be different, so we need to enter the data for
    them separately. You saw the information for room 26 earlier: the data contains
    the room name, its height and width, and whether it has exits at the top and the
    right. Each piece of room data is a list, so it has square brackets at the start
    and end. At the end of each piece of room data (except the last one), we must
    use a comma to separate it from the next one. I’ve also put the room number in
    a comment at the end of each line to help keep track of the room numbers. These
    comments will be helpful as you develop the game. It’s good practice to annotate
    your code like this so you can understand it when you revisit it.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将房间26到50添加到GAME_MAP ➐中。我们通过使用+=操作符将一个新列表添加到GAME_MAP的末尾。这个新列表包含了剩余房间的数据。每个房间的数据都不同，因此我们需要分别输入它们的数据。你之前已经看到了房间26的信息：数据包括房间名称、房间的高度和宽度，以及它是否在顶部和右侧有出口。每一项房间数据都是一个列表，因此它的开始和结束都有方括号。在每一项房间数据的末尾（除了最后一项），我们必须使用逗号将其与下一项分隔开。我还在每行的末尾加了房间编号的注释，以帮助跟踪房间号。这些注释在开发游戏时会非常有用。像这样注释代码是一个好习惯，这样你在回头查看时能够理解代码。
- en: Rooms 46 and 47 add the variables FRIEND1_NAME and FRIEND2_NAME to the room
    description, so you have two rooms called something like “Karen’s sleeping quarters,”
    using your friends’ names ➑. As well as using the + symbol to add numbers and
    combine lists, you can also use it to combine strings.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 房间46和47会将变量FRIEND1_NAME和FRIEND2_NAME添加到房间描述中，因此你会有两个房间的名称类似于“凯伦的睡房”，使用你朋友的名字
    ➑。除了使用+符号来添加数字和合并列表外，你还可以使用它来合并字符串。
- en: At the end of *listing4-1.py*, we perform a simple check using assert() to make
    sure the map data makes sense ➒. We check whether the length of the GAME_MAP (the
    number of rooms in the map data) is the same as the size of the map, which we
    calculated at ➍ by multiplying its width by its height. If it’s not, it means
    we’re missing some data or have too much.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在*listing4-1.py*的末尾，我们通过使用assert()进行一个简单的检查，确保地图数据是合理的 ➒。我们检查GAME_MAP的长度（地图数据中的房间数量）是否与地图的大小相同，地图的大小是通过➍处计算的，方法是将宽度和高度相乘。如果不相同，意味着我们丢失了一些数据或者数据过多。
- en: We have to subtract 1 from the length of GAME_MAP because it also includes room
    0, which we didn’t include when we calculated the map size. This check won’t catch
    all errors, but it can tell you whether you missed a line of the map data when
    entering it. Wherever possible, I’ll try to include simple tests like this to
    help you check for any errors as you enter the program code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须从GAME_MAP的长度中减去1，因为它也包含了房间0，而我们在计算地图大小时没有包括房间0。这个检查不会捕获所有的错误，但它可以告诉你在输入地图数据时是否遗漏了某一行。尽可能的，我会尝试添加像这样的简单测试，帮助你在输入程序代码时检查是否有错误。
- en: '**TESTING AND DEBUGGING THE CODE**'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**测试与调试代码**'
- en: 'Run *listing4-1.py* by clicking **Run** ▸ **Run Module** or press F5 (the keyboard
    shortcut). Nothing much should happen. The shell window should just display a
    message that says "RESTART:" together with your filename. The reason is that all
    we’ve asked the program to do is set up some variables and a list, so there is
    nothing to see. But if you made a mistake entering the listing, you might also
    see a red error message in the shell window. If you do get an error, double-check
    the following details:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**运行** ▸ **运行模块**，或按F5（快捷键）来运行*listing4-1.py*。应该不会发生什么特别的事情。命令行窗口应该只会显示一条消息，上面写着"RESTART:"以及你的文件名。原因是我们要求程序做的只是设置一些变量和列表，因此没有什么可见的内容。但是如果你在输入代码时犯了错误，你可能会在命令行窗口看到一个红色的错误信息。如果你确实看到错误，请仔细检查以下细节：
- en: Are the quote marks in the right place? Strings are in green in the Python program
    window, so look for large areas of green, which suggest you didn’t close your
    string. If room descriptions are in black, you didn’t open the string. Both indicate
    a missing quote mark.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引号是否放置在正确的位置？在Python程序窗口中，字符串显示为绿色，所以你可以注意到大块的绿色区域，提示你可能没有关闭字符串。如果房间描述是黑色的，说明你没有打开字符串。这两种情况都表示缺少引号。
- en: Are you using the correct brackets and parentheses in the proper places? In
    this listing, square brackets surround list items, and parentheses (curved brackets)
    are used for functions, such as range() and append(). Curly brackets {…} are not
    used at all.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否在正确的位置使用了正确的括号和圆括号？在这个列表中，方括号用于包围列表项，圆括号（即弯括号）用于函数，比如range()和append()。大括号{…}根本没有用到。
- en: Are you missing any brackets or parentheses? A simple way to check is to count
    the number of opening and closing brackets and parentheses. Every opening bracket
    or parenthesis should have a closing bracket or parenthesis of the same shape.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否漏掉了任何括号或圆括号？一个简单的检查方法是数一下开括号和闭括号、开圆括号和闭圆括号的数量。每个开括号或圆括号都应该有一个形状相同的闭括号或圆括号。
- en: 'You have to close brackets and parentheses in the reverse order of how you
    opened them. If you have an opening parenthesis and then an opening square bracket,
    you must close them first with a closing square bracket and then a closing parenthesis.
    This format is correct: ( [ … ] ). This format is wrong: ( [ … ) ].'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须按照打开括号和圆括号的顺序反向关闭它们。如果先打开一个圆括号，再打开一个方括号，你必须先用闭方括号关闭它们，然后再用闭圆括号关闭。正确的格式是：（[
    … ]）。错误的格式是：（[ … ) ]。
- en: Are your commas in the correct place? Remember that each list for a room in
    GAME_MAP must have a comma after the closing square bracket to separate it from
    the next room’s data (except for the last room).
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的逗号放置正确吗？请记住，GAME_MAP中的每个房间列表后面都必须有一个逗号，用来将其与下一个房间的数据分开（除了最后一个房间）。
- en: '**TIP**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Why not ask a friend to help you build the game? Programmers often work in pairs
    to help each other with ideas and, perhaps most importantly, have two pairs of
    eyes checking everything. You can take turns typing too!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不邀请一个朋友帮忙一起开发游戏呢？程序员经常成对工作，互相帮助出主意，也许最重要的是，能有两双眼睛检查所有内容。你们也可以轮流输入代码！
- en: '**GENERATING ROOMS FROM THE DATA**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**根据数据生成房间**'
- en: Now the space station map is stored in our GAME_MAP list. The next step is to
    add the function that takes the data for the current room from GAME_MAP and expands
    it into the room_map list that the *Escape* game will use to see what’s at each
    position in the room. The room_map list always stores information about the room
    the player is currently in. When the player enters a different room, we replace
    the data in room_map with the map of the new room. Later in the book, we’ll add
    scenery and props to the room_map, so the player has items to interact with too.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，空间站地图存储在我们的GAME_MAP列表中。下一步是添加一个功能，从GAME_MAP中获取当前房间的数据，并将其扩展到*Escape*游戏中使用的room_map列表，以查看房间内每个位置的内容。room_map列表始终存储玩家当前所在房间的信息。当玩家进入不同的房间时，我们将用新房间的地图替换room_map中的数据。在本书后面，我们还会向room_map中添加场景和道具，供玩家互动。
- en: The room_map data is made by a function we’ll create called generate_map(),
    shown in [Listing 4-2](ch04.xhtml#ch04list2).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: room_map数据是通过我们将要创建的函数generate_map()生成的，如[Listing 4-2](ch04.xhtml#ch04list2)所示。
- en: Add the code in [Listing 4-2](ch04.xhtml#ch04list2) to the end of [Listing 4-1](ch04.xhtml#ch04list1).
    The grayed out code shows you where [Listing 4-1](ch04.xhtml#ch04list1) ends.
    Make sure all the indentation is correct. The indentation determines whether code
    belongs to the get_floor_type() or generate_map() function, and some code is indented
    further to tell Python which if or for command it belongs to.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将[Listing 4-2](ch04.xhtml#ch04list2)中的代码添加到[Listing 4-1](ch04.xhtml#ch04list1)的末尾。灰色的代码显示了[Listing
    4-1](ch04.xhtml#ch04list1)的结束位置。确保所有的缩进都是正确的。缩进决定了代码是属于get_floor_type()还是generate_map()函数，某些代码进一步缩进是为了告诉Python它属于哪个if或for语句。
- en: Save your program as *listing4-2.py* and click **Run** ▸ **Run Module** to run
    it and check for any error messages in the shell.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing4-2.py*，然后点击**Run** ▸ **Run Module**来运行它，并检查是否有任何错误信息出现在终端。
- en: '**RED ALERT**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Don’t start a new program with the code in [Listing 4-2](ch04.xhtml#ch04list2):
    make sure you add [Listing 4-2](ch04.xhtml#ch04list2) to the end of [Listing 4-1](ch04.xhtml#ch04list1).
    As you follow along in this book, you’ll increasingly add to your existing program
    to build the* Escape *game.*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要用[Listing 4-2](ch04.xhtml#ch04list2)中的代码开始新的程序：确保你将[Listing 4-2](ch04.xhtml#ch04list2)添加到[Listing
    4-1](ch04.xhtml#ch04list1)的末尾。随着你在本书中学习，你将不断扩展现有的程序来构建*Escape*游戏。*'
- en: '*listing4-2.py*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing4-2.py*'
- en: --snip--
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '# simple sanity check on map above to check data entry'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '# 对上述地图进行简单的合理性检查，检查数据录入'
- en: assert len(GAME_MAP)-1 == MAP_SIZE, "Map size and GAME_MAP don't match"
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: assert len(GAME_MAP)-1 == MAP_SIZE, "地图大小和GAME_MAP不匹配"
- en: '###############'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## MAKE MAP  ##'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建地图  ##'
- en: '###############'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '➊ def get_floor_type():'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ def get_floor_type():'
- en: 'if current_room in outdoor_rooms:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'if current_room in outdoor_rooms:'
- en: 'return 2 # soil'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'return 2 # 土壤'
- en: 'else:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'return 0 # tiled floor'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'return 0 # 瓦片地板'
- en: 'def generate_map():'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'def generate_map():'
- en: '# This function makes the map for the current room,'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '# 这个函数为当前房间创建地图，'
- en: '# using room data, scenery data and prop data.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用房间数据、场景数据和道具数据。'
- en: global room_map, room_width, room_height, room_name, hazard_map
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: global room_map, room_width, room_height, room_name, hazard_map
- en: global top_left_x, top_left_y, wall_transparency_frame
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: global top_left_x, top_left_y, wall_transparency_frame
- en: ➋     room_data = GAME_MAP[current_room]
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ➋     room_data = GAME_MAP[current_room]
- en: room_name = room_data[0]
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: room_name = room_data[0]
- en: room_height = room_data[1]
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: room_height = room_data[1]
- en: room_width = room_data[2]
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: room_width = room_data[2]
- en: ➌     floor_type = get_floor_type()
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ➌     floor_type = get_floor_type()
- en: 'if current_room in range(1, 21):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'if current_room in range(1, 21):'
- en: 'bottom_edge = 2 #soil'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'bottom_edge = 2 #土壤'
- en: 'side_edge = 2 #soil'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'side_edge = 2 #土壤'
- en: 'if current_room in range(21, 26):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'if current_room in range(21, 26):'
- en: 'bottom_edge = 1 #wall'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'bottom_edge = 1 #墙'
- en: 'side_edge = 2 #soil'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'side_edge = 2 #土壤'
- en: 'if current_room > 25:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'if current_room > 25:'
- en: 'bottom_edge = 1 #wall'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'bottom_edge = 1 #墙'
- en: 'side_edge = 1 #wall'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'side_edge = 1 #墙'
- en: '# Create top line of room map.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建房间地图的顶部线。'
- en: ➍     room_map=[[side_edge] * room_width]
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: ➍     room_map=[[side_edge] * room_width]
- en: '# Add middle lines of room map (wall, floor to fill width, wall).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加房间地图的中间线（墙、地板填充宽度、墙）。'
- en: '➎     for y in range(room_height - 2):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '➎     for y in range(room_height - 2):'
- en: room_map.append([side_edge]
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: room_map.append([side_edge]
- en: + [floor_type]*(room_width - 2) + [side_edge])
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: + [floor_type]*(room_width - 2) + [side_edge])
- en: '# Add bottom line of room map.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加房间地图的底部线。'
- en: ➏     room_map.append([bottom_edge] * room_width)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ➏     room_map.append([bottom_edge] * room_width)
- en: '# Add doorways.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加门口。'
- en: ➐     middle_row = int(room_height / 2)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ➐     middle_row = int(room_height / 2)
- en: middle_column = int(room_width / 2)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: middle_column = int(room_width / 2)
- en: '➑     if room_data[4]: # If exit at right of this room'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '➑     if room_data[4]: # 如果此房间的右侧有出口'
- en: room_map[middle_row][room_width - 1] = floor_type
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[middle_row][room_width - 1] = floor_type
- en: room_map[middle_row+1][room_width - 1] = floor_type
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[middle_row+1][room_width - 1] = floor_type
- en: room_map[middle_row-1][room_width - 1] = floor_type
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[middle_row-1][room_width - 1] = floor_type
- en: '➒     if current_room % MAP_WIDTH != 1: # If room is not on left of map'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '➒     if current_room % MAP_WIDTH != 1: # 如果房间不在地图的左边'
- en: room_to_left = GAME_MAP[current_room - 1]
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: room_to_left = GAME_MAP[current_room - 1]
- en: '# If room on the left has a right exit, add left exit in this room'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果左侧的房间有右侧出口，则在此房间添加左侧出口'
- en: 'if room_to_left[4]:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'if room_to_left[4]:'
- en: room_map[middle_row][0] = floor_type
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[middle_row][0] = floor_type
- en: room_map[middle_row + 1][0] = floor_type
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[middle_row + 1][0] = floor_type
- en: room_map[middle_row - 1][0] = floor_type
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[middle_row - 1][0] = floor_type
- en: '➓     if room_data[3]: # If exit at top of this room'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '➓     if room_data[3]: # 如果此房间的顶部有出口'
- en: room_map[0][middle_column] = floor_type
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[0][middle_column] = floor_type
- en: room_map[0][middle_column + 1] = floor_type
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[0][middle_column + 1] = floor_type
- en: room_map[0][middle_column - 1] = floor_type
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[0][middle_column - 1] = floor_type
- en: 'if current_room <= MAP_SIZE - MAP_WIDTH: # If room is not on bottom row'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'if current_room <= MAP_SIZE - MAP_WIDTH: # 如果房间不在底部行'
- en: room_below = GAME_MAP[current_room+MAP_WIDTH]
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: room_below = GAME_MAP[current_room+MAP_WIDTH]
- en: '# If room below has a top exit, add exit at bottom of this one'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果下方的房间有顶部出口，则在此房间的底部添加出口'
- en: 'if room_below[3]:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'if room_below[3]:'
- en: room_map[room_height-1][middle_column] = floor_type
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[room_height-1][middle_column] = floor_type
- en: room_map[room_height-1][middle_column + 1] = floor_type
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[room_height-1][middle_column + 1] = floor_type
- en: room_map[room_height-1][middle_column - 1] = floor_type
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[room_height-1][middle_column - 1] = floor_type
- en: '*Listing 4-2: Generating the* room_map *data*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 4-2: 生成*room_map*数据*'
- en: You can build the *Escape* game and even make your own game maps without understanding
    how the room_map code works. But if you’re curious, read on and I’ll walk you
    through it.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建*Escape*游戏，甚至在不了解room_map代码如何工作的情况下制作你自己的游戏地图。但如果你感到好奇，继续阅读，我会带你一步步了解。
- en: '**HOW THE ROOM GENERATING CODE WORKS**'
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**房间生成代码的工作原理**'
- en: 'Let’s start with a reminder of what we want the generate_map() function to
    do. Given the height and width of a room, and the location of the exits, we want
    it to generate a room map, which might look something like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先回顾一下generate_map()函数的目标。根据房间的高度和宽度，以及出口的位置，我们希望它生成一个房间地图，可能看起来像这样：
- en: '['
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '['
- en: '[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],'
- en: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],'
- en: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],'
- en: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],'
- en: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],'
- en: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],'
- en: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]'
- en: ']'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: This is room number 31 on the map, the room the player starts the game in. It’s
    7 tiles high and 11 tiles wide, and it has an exit at the top and right. The floor
    spaces (and exits in the wall) are marked with a 0\. The walls around the room
    are marked with a 1\. [Figure 4-2](ch04.xhtml#ch04fig2) shows the same room in
    a grid layout, with the index numbers for the lists shown at the top and on the
    left.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是地图上的31号房间，玩家开始游戏的房间。它的高度是7个瓷砖，宽度是11个瓷砖，顶部和右侧都有出口。地板区域（以及墙壁中的出口）用0表示。房间周围的墙壁用1表示。[图4-2](ch04.xhtml#ch04fig2)显示了同一个房间的网格布局，索引号显示在顶部和左侧的列表中。
- en: '![image](../images/fig4-2.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-2.jpg)'
- en: '*Figure 4-2: A grid representing room 31; the 1s are wall pillars, and the
    0s are empty floor spaces.*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-2：表示31号房间的网格；1表示墙壁柱子，0表示空地。*'
- en: The number of the room the player is currently in is stored in the current_room
    variable, which you set up in the VARIABLES section of your program (see [Listing
    4-1](ch04.xhtml#ch04list1)). The generate_map() function starts by collecting
    the room data for the current room from the GAME_MAP ➋ and putting it into a list
    called room_data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家当前所在房间的编号存储在current_room变量中，你在程序的VARIABLES部分设置了这个变量（见[清单4-1](ch04.xhtml#ch04list1)）。generate_map()函数首先从GAME_MAP
    ➋中收集当前房间的数据，并将其存储到一个名为room_data的列表中。
- en: 'If you cast your mind back to when we set up GAME_MAP, the information in the
    room_data list will now look similar to this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回忆一下我们设置GAME_MAP时的情况，room_data列表中的信息现在会类似于这样：
- en: '["The airlock", 13, 5, True, False]'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '["气闸", 13, 5, True, False]'
- en: This list format allows us to set up the room_name by taking the first element
    from this list at index 0\. We can find the room’s height at index 1 and width
    at index 2 by taking the next elements. The generate_map() function stores the
    height and width information in the room_height and room_width variables.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这种列表格式使我们能够通过获取索引为0的第一个元素来设置room_name。我们可以通过获取下一个元素来找到房间的高度（索引1）和宽度（索引2）。generate_map()函数将高度和宽度信息存储在room_height和room_width变量中。
- en: '**CREATING THE BASIC ROOM SHAPE**'
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建基本房间形状**'
- en: 'The next step is to set the materials we’ll use to build the rooms and create
    the basic room shape using them. We’ll add exits later. We’ll use three elements
    for each room:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置我们将用于建造房间的材料，并使用这些材料创建基本的房间形状。我们稍后会添加出口。我们将为每个房间使用三个元素：
- en: The *floor type*, which is stored in the variable floor_type. Inside the space
    station, we use floor tiles (represented by 0 in room_map), and outside we use
    soil (represented by 2 in room_map).
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*地板类型*，它存储在变量floor_type中。在空间站内部，我们使用地板砖（在room_map中表示为0），而在外部我们使用土壤（在room_map中表示为2）。'
- en: The *edge type*, which appears in each space at the edge of the room. For an
    inside room, this is a wall pillar, represented by 1\. For an outside room, this
    is the soil.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*边缘类型*，出现在房间边缘的每个空间中。对于内部房间，这是一个墙壁柱子，表示为1。对于外部房间，这是土壤。'
- en: The *bottom edge type*, which is a wall inside the station and usually soil
    outside. The bottom row of the outside compound, where it meets the space station,
    is a special case because the station wall is visible here, so the bottom_edge
    type is a wall pillar (see [Figure 4-3](ch04.xhtml#ch04fig3)).
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*底边类型*，它是空间站内部的墙壁，外部通常是土壤。外部复合区域的底部行，在与空间站交接的地方，是一个特殊的情况，因为这里可以看到空间站的墙壁，因此bottom_edge类型是墙壁柱子（见[图4-3](ch04.xhtml#ch04fig3)）。'
- en: '![image](../images/fig4-3.jpg)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/fig4-3.jpg)'
- en: '*Figure 4-3: Different materials are used for the edges and bottom edge of
    the room, depending on where the room is in the space station compound. (Note
    that the astronaut and additional scenery won’t be in your game yet.)*'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图4-3：根据房间在空间站中的位置，房间的边缘和底部边缘使用不同的材料。（请注意，宇航员和额外的景观还不会出现在你的游戏中。）*'
- en: We use a function called get_floor_type() ➊ to find out the correct floor type
    for the room. Functions can send information back to other parts of the program
    using the return instruction, as you can see in this function. The get_floor_type()
    function checks whether the current_room value is in the outdoor_rooms range.
    If so, the function returns the number 2, which represents Martian soil. Otherwise,
    it returns the number 0, which represents a tiled floor. This check is in a separate
    function so other parts of the program can use it too. The generate_map() function
    puts the number that get_floor_type() returns into the floor_type variable. Using
    one instruction ➌, generate_map() sets up the floor_type variable to be equal
    to whatever get_floor_type() sends back, and it tells the get_floor_type() function
    to run now too.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为 get_floor_type() ➊ 的函数来查找该房间的正确地面类型。函数可以通过 return 指令将信息传回程序的其他部分，如你在这个函数中看到的那样。get_floor_type()
    函数会检查当前房间值是否在户外房间范围内。如果是，该函数返回数字 2，表示火星土壤。否则，返回数字 0，表示瓷砖地面。这个检查被放在一个单独的函数中，以便程序的其他部分也可以使用它。generate_map()
    函数将 get_floor_type() 返回的数字放入 floor_type 变量中。使用一条指令 ➌，generate_map() 将 floor_type
    变量设置为 get_floor_type() 返回的内容，并且告诉 get_floor_type() 函数现在开始运行。
- en: 'The generate_map() function also sets up variables for the bottom_edge and
    side_edge. These variables store the type of material that will be used to make
    the edges of the room, as shown in [Figure 4-3](ch04.xhtml#ch04fig3). The side
    edge material is used for the top, left, and right sides, and the bottom edge
    material is for the bottom edge. If the room number is between 1 and 20 inclusive,
    it’s a regular planet surface room. The bottom and edge are soil in that case.
    If the room number is between 21 and 25, it’s a planet surface room that touches
    the space station at the bottom. This is a special case: the side edge material
    is soil, but the bottom edge is made of wall pillars. If the room number is higher
    than 25, the side and bottom edges are made of wall pillars because it’s an inside
    room. (You can check that these room numbers make sense in [Figure 4-1](ch04.xhtml#ch04fig1).)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: generate_map() 函数还为底部边缘和侧边缘设置了变量。这些变量存储将用于构建房间边缘的材料类型，如[图 4-3](ch04.xhtml#ch04fig3)所示。侧边缘材料用于顶部、左侧和右侧，底部边缘材料用于底部边缘。如果房间编号在1到20之间（含20），则是普通的行星表面房间，底部和边缘为土壤。在这种情况下，房间编号在21到25之间时，则是一个与太空站底部接触的行星表面房间。这是一个特殊情况：侧边缘材料为土壤，但底部边缘是由墙柱构成。如果房间编号高于25，则侧边缘和底边缘由墙柱构成，因为它是一个室内房间。（你可以在[图
    4-1](ch04.xhtml#ch04fig1)中查看这些房间编号是否合理。）
- en: 'We start making the room_map list by creating the top row, which will be a
    row of soil outside or the back wall inside. The top row is made of the same material
    all the way across, so we can use a shortcut. Try this in the shell:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建顶部行来开始制作 room_map 列表，这将是外面的土壤行或里面的后墙行。顶部行由相同的材料组成，因此我们可以使用快捷方式。你可以在终端中尝试这个：
- en: '>>> print([1] * 10)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print([1] * 10)'
- en: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]'
- en: The [1] in the print() instruction is a list that contains just one item. When
    we multiply it by 10, we get a list that contains that item 10 times. In our program,
    we multiply the edge type we’re using by the width of the room ➍. If the top edge
    has an exit in it, we’ll add that shortly.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: print() 指令中的[1]是一个仅包含一个项目的列表。当我们将其乘以10时，得到一个包含该项目10次的列表。在我们的程序中，我们将正在使用的边缘类型乘以房间的宽度
    ➍。如果顶部边缘中有出口，我们会稍后添加它。
- en: 'The middle rows of the room are made using a loop ➎ that adds each row in turn
    to the end of room_map. All the middle rows in a room are the same and are made
    up of the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 房间的中间行通过一个循环 ➎ 来制作，该循环依次将每一行添加到 room_map 的末尾。房间中的所有中间行都是相同的，并且由以下内容组成：
- en: An edge tile (either wall or soil) for the left side of the room.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 房间左侧的边缘瓷砖（墙壁或土壤）。
- en: The floor in the middle. We can use our shortcut again here. We multiply the
    floor_type by the size of the space in the middle of the room. That is the room_width
    minus 2 because there are two edge spaces.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 房间中间的地面。我们可以在这里再次使用我们的快捷方式。我们将**地面类型**乘以房间中间空间的大小。即房间宽度减去2，因为两侧有边缘空间。
- en: The edge piece at the right side.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右侧的边缘部分。
- en: The bottom line is then added ➏ and is generated in the same way as the top
    line.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 底部边缘然后加上 ➏，并以与顶部边缘相同的方式生成。
- en: '**ADDING EXITS**'
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加出口**'
- en: Next, we add exits in the walls where required. We’ll put the exits in the middle
    of the walls, so we start by figuring out where the middle row and middle column
    are ➐ by dividing the room height and width by 2\. Sometimes this calculation
    results in a number with a decimal. We need a whole number for our index positions,
    so we use the int() function to remove the decimal part ➐. The int() function
    converts a decimal number into a whole number (an *integer*).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在需要的地方添加墙壁的出口。我们将出口放在墙壁的中间，所以我们先计算出中间的行和列 ➐，通过将房间的高度和宽度分别除以 2。 有时候这个计算结果会是一个带小数的数字。我们需要一个整数来作为索引位置，所以我们使用
    int() 函数去掉小数部分 ➐。int() 函数将一个带小数的数字转换成整数（一个 *整数*）。
- en: 'We check for a right exit first ➑. Remember that room_data contains the information
    for this room, which was originally taken from GAME_MAP. The value room_data[4]
    tells us whether there is an exit on the right of this room. This instruction:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查右侧出口 ➑。记住，room_data 包含了这个房间的信息，这些信息最初来自 GAME_MAP。值 room_data[4] 告诉我们这个房间右侧是否有出口。这条指令：
- en: 'if room_data[4]:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 room_data[4]：
- en: 'is shorthand for this instruction:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 是这条指令的简写：
- en: 'if room_data[4] == True:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 room_data[4] == True：
- en: We use == to check whether two things are the same. One reason that Boolean
    values are often a great choice to use for your data is that they make the code
    easier to read and write, as this example shows.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 == 来检查两个事物是否相同。布尔值通常是处理数据的好选择，因为它们使代码更容易阅读和编写，就像这个例子所展示的那样。
- en: 'When there is a right exit, we change three positions in the middle of the
    right wall from the edge type to the floor type, making a gap in the wall there.
    The value room_width-1 finds the *x* position on the right edge: we subtract 1
    because index numbers start at 0\. In [Figure 4-2](ch04.xhtml#ch04fig2), for example,
    you can see that the room width is 11 tiles, but the index position for the right
    wall is 10\. On the planet surface, this code doesn’t change anything, because
    there’s no wall there to put a gap in. But it’s simpler to let the program add
    the floor tiles anyway so we don’t have to write code for special cases.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当有右侧出口时，我们将右墙中间的三个位置从边缘类型改为地板类型，形成墙壁的一个空隙。值 room_width-1 找到右边缘的 *x* 位置：我们减去
    1 是因为索引从 0 开始。在 [图 4-2](ch04.xhtml#ch04fig2) 中，你可以看到房间宽度是 11 个瓦片，但右墙的索引位置是 10。例如，在行星表面，这段代码不会改变任何东西，因为那里没有墙来留下空隙。但让程序添加地板瓦片会更简单，这样我们就不必为特殊情况编写代码。
- en: Before we check whether we need an exit for the left wall, we make sure the
    room isn’t on the left edge of the map where there can be no exit ➒. The % operator
    gives us the remainder when we divide one number by another. If we divide the
    current room number by the map width, 5, using the % operator, we’ll get a 1 if
    the room is on the left edge. The left edge room numbers are 1, 6, 11, 16, 21,
    26, 31, 36, 41, and 46\. So we only continue checking for a left exit if the remainder
    is not 1 (!= means “is not equal to”).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查是否需要左侧墙壁的出口之前，我们先确保房间不在地图的左边缘，因为那里无法设置出口 ➒。% 运算符用于求余，给我们提供了一个数除以另一个数后的余数。如果我们使用
    % 运算符将当前的房间编号除以地图宽度 5，得到的余数是 1 时，说明房间在左边缘。左边缘的房间编号是 1、6、11、16、21、26、31、36、41 和
    46。所以只有在余数不是 1 时，我们才继续检查左出口（!= 表示“不等于”）。
- en: To see whether we need an exit on the left in this room, we work out which room
    is on the other side of that wall by subtracting 1 from the current room number.
    Then we check whether that room has a right exit. If so, our current room needs
    a left exit, and we add it.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个房间是否需要左侧出口，我们通过从当前房间编号减去 1 来计算出墙壁另一侧的房间。然后我们检查那个房间是否有右侧出口。如果有，我们当前的房间就需要左出口，我们就添加它。
- en: The exits at the top and bottom are added in a similar way ➓. We check room_data
    directly to see whether there’s an exit at the top of the room, and if so, we
    add a gap in that wall. We can check the room below as well to see whether there
    should be a bottom exit in the room.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部和底部的出口以类似的方式添加 ➓。我们直接检查 room_data 来查看房间顶部是否有出口，如果有，我们就在墙壁上添加一个空隙。我们还可以检查下面的房间，以判断是否需要在该房间添加底部出口。
- en: '**TESTING THE PROGRAM**'
  id: totrans-239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试程序**'
- en: 'When you run the program, you can confirm that you don’t see any errors in
    the Python shell. You can also check that the program is working by generating
    the map and then printing it from the shell, like this:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，你可以确认在 Python shell 中没有看到任何错误。你也可以通过生成地图并从 shell 打印出来来检查程序是否正常工作，像这样：
- en: '>>> generate_map()'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> generate_map()'
- en: '>>> print(room_map)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(room_map)'
- en: '[[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0,'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0,'
- en: 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1,
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1,
- en: 1, 1, 1]]
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 1, 1, 1]]
- en: 'The current_room variable is set by default to be room 31, the starting room
    in the game, so that is the room_map data that prints. From our GAME_MAP data
    (and [Figure 4-2](ch04.xhtml#ch04fig2)) we can see that this room has 7 rows and
    11 columns, and our output confirms that we have 7 lists, each containing 11 numbers:
    perfect. What’s more, we can see that the first row features four wall pillars,
    three empty spaces, and then four more wall pillars, so the function has put an
    exit here as we would expect. Three of the lists have a 0 as their last number
    too, indicating an exit on the right. It looks like the program is working!'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: current_room变量默认设置为房间31，即游戏中的起始房间，因此打印出的就是该房间的room_map数据。通过我们的GAME_MAP数据（以及[图4-2](ch04.xhtml#ch04fig2)），我们可以看到这个房间有7行11列，而我们的输出也确认了这一点：我们有7个列表，每个列表包含11个数字：完美。此外，我们还可以看到第一行有四个墙柱，三个空格，然后又是四个墙柱，所以函数在此处放置了一个出口，正如我们预期的那样。三列列表的最后一个数字也是0，表示右侧有一个出口。看起来程序运行正常！
- en: '**TRAINING MISSION #1**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务#1**'
- en: 'You can change the value of current_room from the shell to print a different
    room. Try entering different values for the room, regenerating the map, and printing
    it. Check the output against the map and the GAME_MAP code to make sure the results
    match what you expect. Here is one example:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令行更改current_room的值，以打印不同的房间。尝试输入不同的房间值，重新生成地图并打印出来。将输出与地图以及GAME_MAP代码进行对比，确保结果与预期一致。以下是一个示例：
- en: '>>> current_room = 45'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> current_room = 45'
- en: '>>> generate_map()'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> generate_map()'
- en: '>>> print(room_map)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(room_map)'
- en: '[[1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1],'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1],'
- en: '[1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1],'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1],'
- en: '[1, 1, 0, 0, 0, 1, 1]]'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 1, 0, 0, 0, 1, 1]]'
- en: What happens when you enter a value for one of the planet surface rooms?
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入一个行星表面房间的值时，会发生什么情况？
- en: '**EXPLORING THE SPACE STATION IN 3D**'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**探索太空站的3D视图**'
- en: Let’s turn our room maps into rooms! We’ll combine the code we created for turning
    room maps into 3D rooms in [Chapter 3](ch03.xhtml#ch03) with our code for extracting
    the room map from the game map. Then we can tour the space station and start to
    get our bearings.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把房间地图变成房间！我们将把我们在[第3章](ch03.xhtml#ch03)中创建的将房间地图转化为3D房间的代码与提取游戏地图中房间地图的代码结合起来。这样我们就可以开始在太空站上进行巡游，并开始熟悉环境。
- en: The *Explorer* feature of our program will enable us to view all the rooms on
    the space station. We’ll give it its own EXPLORER section in the program. It’s
    a temporary measure to enable us to quickly see results. We’ll replace the *Explorer*
    with better code for viewing rooms in [Chapters 7](ch07.xhtml#ch07) and [8](ch08.xhtml#ch08).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们程序中的*Explorer*功能将允许我们查看太空站的所有房间。我们将在程序中为其创建一个EXPLORER部分。这是一个临时措施，用于快速查看结果。我们将在[第7章](ch07.xhtml#ch07)和[第8章](ch08.xhtml#ch08)中用更好的代码替换*Explorer*来查看房间。
- en: Add the code in [Listing 4-3](ch04.xhtml#ch04list3) to the end of your program
    for [Listing 4-2](ch04.xhtml#ch04list2), after the instructions shown in gray.
    Then save the program as *listing4-3.py*. Remember to save it with your other
    programs for this book in the *escape* folder so the *images* folder is in the
    right place (see “[Downloading the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7)).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 将[代码清单4-3](ch04.xhtml#ch04list3)的代码添加到你的程序中，放在[代码清单4-2](ch04.xhtml#ch04list2)的末尾，在灰色区域显示的指令之后。然后将程序保存为*listing4-3.py*。记得将其保存在本书的其他程序所在的*escape*文件夹中，这样*images*文件夹就会在正确的位置（参见“[下载游戏文件](intro.xhtml#lev8)”在[第7页](intro.xhtml#page_7)）。
- en: '*listing4-3.py*'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing4-3.py*'
- en: room_map[room_height-1][middle_column] = floor_type
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[room_height-1][middle_column] = floor_type
- en: room_map[room_height-1][middle_column + 1] = floor_type
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[room_height-1][middle_column + 1] = floor_type
- en: room_map[room_height-1][middle_column - 1] = floor_type
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: room_map[room_height-1][middle_column - 1] = floor_type
- en: '###############'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: '## EXPLORER  ##'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '## EXPLORER  ##'
- en: '###############'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '###############'
- en: 'def draw():'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 'def draw():'
- en: global room_height, room_width, room_map
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: global room_height, room_width, room_map
- en: ➊     generate_map()
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: ➊     generate_map()
- en: screen.clear()
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: screen.clear()
- en: '➋     for y in range(room_height):'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     for y in range(room_height):'
- en: 'for x in range(room_width):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'for x in range(room_width):'
- en: image_to_draw = DEMO_OBJECTS[room_map[y][x]]
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: image_to_draw = DEMO_OBJECTS[room_map[y][x]]
- en: screen.blit(image_to_draw,
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(image_to_draw,
- en: (top_left_x + (x*30),
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '(top_left_x + (x*30),  '
- en: top_left_y + (y*30) - image_to_draw.get_height()))
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'top_left_y + (y*30) - image_to_draw.get_height()))  '
- en: '➌ def movement():'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '➌ def movement():  '
- en: global current_room
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'global current_room  '
- en: old_room = current_room
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'old_room = current_room  '
- en: 'if keyboard.left:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 'if keyboard.left:  '
- en: current_room -= 1
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'current_room -= 1  '
- en: 'if keyboard.right:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 'if keyboard.right:  '
- en: current_room += 1
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 'current_room += 1  '
- en: 'if keyboard.up:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 'if keyboard.up:  '
- en: current_room -= MAP_WIDTH
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 'current_room -= MAP_WIDTH  '
- en: 'if keyboard.down:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 'if keyboard.down:  '
- en: current_room += MAP_WIDTH
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 'current_room += MAP_WIDTH  '
- en: '➍     if current_room > 50:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '➍     if current_room > 50:  '
- en: ➎         current_room = 50
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '➎         current_room = 50  '
- en: 'if current_room < 1:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'if current_room < 1:  '
- en: current_room = 1
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: current_room = 1
- en: '➏     if current_room != old_room:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '➏     if current_room != old_room:  '
- en: ➐         print("Entering room:" + str(current_room))
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '➐         print("Entering room:" + str(current_room))  '
- en: ➑ clock.schedule_interval(movement, 0.1)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '➑ clock.schedule_interval(movement, 0.1)  '
- en: '*Listing 4-3: The* Explorer *code*'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 4-3：* Explorer *代码*  '
- en: The new additions in [Listing 4-3](ch04.xhtml#ch04list3) should look familiar
    to you. We call the generate_map() function to create the room_map data for the
    current room ➊. We then display it ➋ using the code we created in [Listing 3-5](ch03.xhtml#ch03list5)
    in [Chapter 3](ch03.xhtml#ch03). We use keyboard controls to change the current_room
    variable ➌, similar to how we changed the *x* and *y* position of our spacewalking
    astronaut in [Chapter 1](ch01.xhtml#ch01) (see [Listing 1-4](ch01.xhtml#ch01list4)).
    To go up or down a row in the map, we change the current_room number by the width
    of the game map. For example, to go up a row from room 32, we subtract 5 to go
    into room 27 (see [Figure 4-1](ch04.xhtml#ch04fig1)). If the room number has changed,
    the program prints the current_room variable ➏. The str() function converts the
    room number to a string ➐, so it can be joined to the "Entering room:" string.
    Without using the str() function, you can’t join a number to a string.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 4-3](ch04.xhtml#ch04list3) 中的新添加内容你应该感到熟悉。我们调用 generate_map() 函数来为当前房间
    ➊ 创建 room_map 数据。然后，我们使用在 [清单 3-5](ch03.xhtml#ch03list5) 中创建的代码在 [第 3 章](ch03.xhtml#ch03)
    中显示它 ➋。我们使用键盘控制来改变 current_room 变量 ➌，这与我们在 [第 1 章](ch01.xhtml#ch01) 中改变太空行走宇航员的
    *x* 和 *y* 位置的方式类似（见 [清单 1-4](ch01.xhtml#ch01list4)）。要在地图中上下移动一行，我们通过改变游戏地图的宽度来改变
    current_room 的数字。例如，要从房间 32 向上移一行，我们减去 5 进入房间 27（见 [图 4-1](ch04.xhtml#ch04fig1)）。如果房间号发生变化，程序将打印
    current_room 变量 ➏。str() 函数将房间号转换为字符串 ➐，这样它就可以与 "进入房间：" 字符串连接。没有使用 str() 函数，你无法将数字与字符串连接。  '
- en: Finally, we schedule the movement function to run at regular intervals ➑, as
    we did in [Chapter 1](ch01.xhtml#ch01). This time, we have a longer gap between
    each time the function runs (0.1 seconds), so the keys are less responsive.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，我们安排在定期间隔运行 movement 函数 ➑，就像我们在 [第 1 章](ch01.xhtml#ch01) 中做的那样。这次，我们在每次函数运行之间有一个更长的间隔（0.1
    秒），因此按键响应较慢。  '
- en: From the command line, navigate to your *escape* folder and run the program
    from the command line using pgzrun listing4-3.py.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '从命令行中，导航到你的 *escape* 文件夹，并使用命令行中的 pgzrun listing4-3.py 来运行程序。  '
- en: The screen should be similar to [Figure 4-4](ch04.xhtml#ch04fig4), which shows
    the walls and doorways for room 31.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '屏幕应类似于 [图 4-4](ch04.xhtml#ch04fig4)，显示房间 31 的墙壁和门口。  '
- en: '![image](../images/fig4-4.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-4.jpg)  '
- en: '*Figure 4-4: The* Explorer *shows your starting room in 3D.*'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-4：* Explorer *以 3D 显示你的起始房间*  '
- en: 'Now you can use the arrow keys to explore the map. The program will draw a
    room for you and enable you to go to the neighboring rooms by pressing an arrow
    key. At this point, you only see the shell of the room: walls and floor. We’ll
    add more objects in the rooms and your character later.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你可以使用箭头键来探索地图。程序将为你绘制一个房间，并允许你通过按箭头键进入邻近的房间。此时，你只看到房间的外壳：墙壁和地板。稍后我们会在房间里添加更多的物体和角色。  '
- en: 'At the moment, you can walk in any direction, including through walls: the
    program doesn’t check for any movement errors. If you walk off the left of the
    map, you’ll reappear on the right, a row higher. If you walk off the right, you’ll
    reappear on the left, a row lower. If you try to go off the top or the bottom
    of the map, the program will return you to room 1 (at the top) or room 50 (at
    the bottom). For example, if the room number is more than (>) 50 ➍ it’s reset
    to 50 ➎. In this code, I’ve lowered the sensitivity of the keys to reduce the
    risk of whizzing through the rooms too fast. If you find the controls unresponsive
    or sluggish, you might need to press the keys for slightly longer.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你可以朝任何方向走，包括穿过墙壁：程序不会检查任何移动错误。如果你从地图的左边走出去，你会在右边重新出现，且高出一行。如果你从右边走出去，你会在左边重新出现，且低出一行。如果你尝试走出地图的顶部或底部，程序会将你返回到房间1（顶部）或房间50（底部）。例如，如果房间号超过（>）50
    ➍，它会被重置为50 ➎。在这段代码中，我降低了键盘的灵敏度，以减少房间穿越过快的风险。如果你发现控制不响应或有些迟钝，可能需要稍微长按一下按键。
- en: Explore the space station and compare what you see on screen with the map in
    [Figure 4-1](ch04.xhtml#ch04fig1). If you see any errors, go back to the GAME_MAP
    data to check the data, and then take another look at the generate_map() function
    to make sure it’s been entered correctly. To help you follow the map, when you
    move to a new room, its number will appear in the command line window where you
    entered the pgzrun command, as shown in [Figure 4-5](ch04.xhtml#ch04fig5).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 探索空间站，并将你屏幕上看到的与[图4-1](ch04.xhtml#ch04fig1)中的地图进行对比。如果看到任何错误，回到GAME_MAP数据检查数据，然后再检查generate_map()函数，确保它已正确输入。为了帮助你跟随地图，当你进入新房间时，房间号会显示在你输入pgzrun命令的命令行窗口中，如[图4-5](ch04.xhtml#ch04fig5)所示。
- en: '![image](../images/fig4-5.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig4-5.jpg)'
- en: '*Figure 4-5: The command line window tells you which room you’re entering.*'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-5：命令行窗口会告诉你你正在进入哪个房间。*'
- en: 'Also, check that exits exist from both sides: if you go through a door and
    it isn’t there when you look from the other side, generate_map() has been entered
    incorrectly. Follow along on the map first to make sure you’re not going off the
    edge of the map and coming back on the other side before you start debugging.
    It’s worth taking the time to make sure your map data and functions are all correct
    at this point, because broken map data can make it impossible to complete the
    *Escape* game!'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，检查两侧是否都有出口：如果你走过一扇门，而从另一边看时它不在那里，那么generate_map()函数就输入错误了。在开始调试之前，最好先沿着地图走一遍，确保你没有走出地图边界再回到另一侧。此时花时间确认你的地图数据和函数都正确是值得的，因为破损的地图数据会使你无法完成*Escape*游戏！
- en: '**TRAINING MISSION #2**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: To enjoy playing *Escape* and solving the puzzles, I recommend that you use
    the data I’ve provided for the game map. It’s best not to change the data until
    you’ve completed playing the game and have decided to redesign it. Otherwise,
    objects might be in locations you can’t reach, making the game impossible to complete.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地享受玩*Escape*并解决谜题，我建议你使用我为游戏地图提供的数据。最好不要更改数据，直到你完成游戏并决定重新设计它。否则，某些物品可能会出现在你无法到达的地方，从而使游戏无法完成。
- en: However, you can safely extend the map. The easiest way to do so is to add another
    row of rooms at the bottom of the map, making sure a door connects at least one
    of the new rooms to the existing bottom row of the map. Remember to change the
    MAP_HEIGHT variable. You’ll also need to change the number 50 in the *Explorer*
    code (*listing4-3.py*) to your highest room number (see ➍ and ➎). Why not add
    a corridor now?
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，你可以安全地扩展地图。最简单的方法是，在地图底部添加一行房间，确保至少有一个新房间通过门与现有的底部房间连接。记得修改MAP_HEIGHT变量。你还需要将*Explorer*代码（*listing4-3.py*）中的数字50改成你的最高房间编号（见
    ➍ 和 ➎）。现在为什么不添加一个走廊呢？
- en: '**MAKING YOUR OWN MAPS**'
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作你自己的地图**'
- en: After you’ve finished building and playing *Escape*, you can customize the map
    or design your own game layouts using this code.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在你完成*Escape*的构建和游戏后，你可以使用这段代码自定义地图或设计你自己的游戏布局。
- en: If you want to add your own map data for rooms 1 to 25, delete the code that
    generates their data automatically (see ➏ in [Listing 4-1](ch04.xhtml#ch04list1)).
    You can then add your own data for these rooms.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为房间1到25添加你自己的地图数据，删除自动生成这些数据的代码（见[Listing 4-1](ch04.xhtml#ch04list1)中的 ➏）。然后，你可以为这些房间添加你自己的数据。
- en: Alternatively, if you don’t want to use the planet surface locations, just block
    the exit to them. The exit onto the planet surface is in room 26\. Change that
    room’s entry in the GAME_MAP list so it doesn’t have a top exit. You can use room
    numbers starting at room 26 and extend the map downward to make a game that is
    completely indoors. As a result, you won’t need to make any code changes to account
    for the planet surface.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你不想使用行星表面的地点，只需封锁通往它们的出口。通往行星表面的出口位于26号房间。更改该房间在GAME_MAP列表中的条目，使其不再有顶部出口。你可以从26号房间开始使用房间编号，并将地图向下扩展，制作一个完全封闭在室内的游戏。这样，你就不需要对代码进行任何更改来处理行星表面。
- en: If you remove a doorway from the *Escape* game map (including the one in room
    26), you might also need to remove a door. Some of the exits at the top and bottom
    of the room will have doors that seal them off. (We’ll add doors to the *Escape*
    game in [Chapter 11](ch11.xhtml#ch11).)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从*Escape*游戏地图中移除一个门口（包括26号房间中的门口），你可能还需要移除一个门。房间的顶部和底部一些出口会有门将它们封闭。（我们将在[第11章](ch11.xhtml#ch11)中向*Escape*游戏中添加门。）
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你适合飞行吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选下列框以确认你已学习本章的关键内容。
- en: '![Images](../images/box.jpg)  The GAME_MAP list stores the main map data for
    *Escape*.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  GAME_MAP列表存储*Escape*的主要地图数据。'
- en: '![Images](../images/box.jpg)  The GAME_MAP only needs to store the exit at
    the top and right of a room.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  GAME_MAP只需要存储房间顶部和右侧的出口。'
- en: '![Images](../images/box.jpg)  When the player visits a room, the generate_map()
    function makes the room_map list for the current room. The room_map list describes
    where the walls and objects are in the room.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  当玩家访问一个房间时，generate_map()函数会为当前房间生成room_map列表。room_map列表描述了房间内墙壁和物体的位置。'
- en: '![Images](../images/box.jpg)  Locations 1 to 25 are on the planet surface,
    and a loop generates their map data. Locations 26 to 50 are the space station
    rooms, and you need to input their data manually.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  位置1到25位于行星表面，循环会生成它们的地图数据。位置26到50是空间站的房间，你需要手动输入它们的数据。'
- en: '![Images](../images/box.jpg)  We use comments to help us find our way around
    the *Escape* program listing.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  我们使用注释来帮助我们在*Escape*程序列表中找到自己的位置。'
- en: '![Images](../images/box.jpg)  When adding data using a program in script mode,
    you can use the shell to check the contents of lists and variables to make sure
    the program is working correctly. Remember to run the program first to set up
    the data!'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  在脚本模式下使用程序添加数据时，你可以使用Shell来检查列表和变量的内容，确保程序正确运行。记得首先运行程序以设置数据！'
- en: '![Images](../images/box.jpg)  The *Explorer* code enables you to look at every
    room in the game map using the arrow keys.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  *Explorer*代码使你能够使用箭头键查看游戏地图中的每个房间。'
- en: '![Images](../images/box.jpg)  It’s important to make sure the game map matches
    [Figure 4-1](ch04.xhtml#ch04fig1). Otherwise, it might not be possible for players
    to complete the *Escape* game. You can use the *Explorer* program to do this.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  确保游戏地图与[图4-1](ch04.xhtml#ch04fig1)匹配是非常重要的。否则，玩家可能无法完成*Escape*游戏。你可以使用*Explorer*程序来进行检查。'
- en: '![image](../images/f0077-01.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0077-01.jpg)'
