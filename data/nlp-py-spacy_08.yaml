- en: '**8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8'
- en: INTENT RECOGNITION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 意图识别**
- en: '![Image](../Images/comm1.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/comm1.jpg)'
- en: A chatbot should be smart enough to understand a user’s needs. For example,
    a conversational chatbot must recognize a user’s intent to properly sustain a
    conversation with the user, and a food-ordering chatbot needs to understand a
    customer’s intent to take an order. Although the task of intent recognition was
    touched on in previous chapters, this chapter discusses it in more depth.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人应足够聪明，能够理解用户的需求。例如，一个对话型聊天机器人必须识别用户的意图，才能与用户维持正确的对话，而一个食品订购聊天机器人则需要理解顾客的意图才能接单。虽然意图识别的任务在前面的章节中有所涉及，但本章会更深入地讨论它。
- en: You’ll start by recognizing a user’s intent by extracting the transitive verb
    and direct object of an utterance. Then you’ll explore how to derive a user’s
    intent from a sequence of sentences, recognize synonyms for different possible
    intents, and determine a user’s intent using semantic similarity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从通过提取发话中的及物动词和直接宾语来识别用户的意图开始。然后，你将探索如何从一系列句子中推导出用户的意图，识别不同可能意图的同义词，并通过语义相似性来确定用户的意图。
- en: '**Extracting the Transitive Verb and Direct Object for Intent Recognition**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**提取及物动词和直接宾语以进行意图识别**'
- en: 'You can typically recognize a user’s intent in three steps: parsing the sentence
    into tokens, connecting the tokens with labeled arcs representing syntactic relations,
    and navigating the arcs to extract the relevant tokens. In many cases, extracting
    the sentence’s transitive verb and direct object can identify the user’s intent,
    as shown by the syntactic dependency parsing in [Figure 8-1](../Text/ch08.xhtml#ch08fig01).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以通过三步来识别用户的意图：将句子解析为标记，将标记连接起来，标记之间的弧线表示句法关系，并通过遍历这些弧线提取相关标记。在许多情况下，提取句子的及物动词和直接宾语可以识别用户的意图，如[图
    8-1](../Text/ch08.xhtml#ch08fig01)所示的句法依赖解析所示。
- en: '![image](../Images/fig8-1.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-1.jpg)'
- en: '*Figure 8-1: An example of a graphical representation of a sentence’s syntactic
    structure*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：句子句法结构的图形表示示例*'
- en: 'The arc connecting the transitive verb with the direct object indicates that
    the user’s intent is finding a hotel, or just `findHotel`, if you merged the transitive
    verb and the direct object into a single word. You could use this structure as
    an *intent identifier* in a later part of a program, as in the following code
    fragment:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 连接及物动词和直接宾语的弧线表示用户的意图是寻找一家酒店，或者如果你将及物动词和直接宾语合并成一个词，就是`findHotel`。你可以在程序的后续部分使用这种结构作为*意图标识符*，如下所示的代码片段：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**NOTE**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In [Chapter 11](../Text/ch11.xhtml#ch11), you’ll see more detailed examples
    of how to use intent identifiers in a chatbot app’s code.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*在[第 11 章](../Text/ch11.xhtml#ch11)中，你将看到更多关于如何在聊天机器人应用的代码中使用意图标识符的详细示例。*'
- en: But sometimes finding the meaning from the transitive verb/direct object pair
    isn’t so easy. You might need to explore the transitive verb and direct object’s
    syntactic relations to find the verb and noun that best describe the intent.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时从及物动词/直接宾语对中找出含义并不那么容易。你可能需要探讨及物动词和直接宾语的句法关系，以找到最佳描述意图的动词和名词。
- en: In other situations, a user’s intent isn’t expressed explicitly, so you must
    figure out an implied intent. In this section, you’ll learn strategies for extracting
    intent using the syntactic dependency structure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，用户的意图并未明确表达出来，因此你必须通过推测隐含的意图来理解。在本节中，你将学习如何使用句法依赖结构来提取意图的策略。
- en: '***Obtaining the Transitive Verb/Direct Object Pair***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***获取及物动词/直接宾语对***'
- en: 'Let’s start by extracting the transitive verb/direct object pair from a sentence
    by checking the dependency label of each token, looking for `dobj`. Once we find
    the direct object, we can easily get the corresponding transitive verb by obtaining
    the syntactic head of the direct object, as illustrated in the following script:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过检查每个标记的依赖标签，寻找`dobj`来从句子中提取及物动词/直接宾语对。一旦找到直接宾语，我们就可以通过获取直接宾语的句法主干，轻松找到相应的及物动词，正如以下脚本所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this script, we apply the pipeline to a sample sentence ➊ and then iterate
    over the tokens, searching for the one whose dependency label is `dobj` ➋. When
    it’s found, we determine the corresponding transitive verb by obtaining the direct
    object’s head ➌. In this example, we also concatenate the transitive verb and
    its direct object to express the intent in the form of a single word.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们首先对示例句子 ➊ 应用管道处理，然后遍历标记，查找其依赖标签为 `dobj` 的标记 ➋。找到后，我们通过获取直接宾语的中心词 ➌
    来确定对应的及物动词。在这个例子中，我们还将及物动词和其直接宾语连接起来，以便将意图以单一单词的形式表达出来。
- en: 'The script generates the following string:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本生成以下字符串：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Keep in mind that not all sentences containing a transitive verb/direct object
    pair express intent. For example, “He gave me a book” is just a statement of fact.
    We could filter out such sentences by checking the verb’s characteristics, picking
    up only those sentences whose verbs are in the present tense and not third person.
    Still, it would be uncommon to hear a sentence like that from a customer talking
    to a chatbot that takes orders for a business.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，并非所有包含及物动词/直接宾语对的句子都表示意图。例如，“他给了我一本书”只是陈述事实。我们可以通过检查动词的特征来过滤掉这样的句子，仅挑选出那些动词为现在时并且不是第三人称的句子。然而，像这样的句子从客户与接单聊天机器人之间的对话中听到的可能性不大。
- en: '***Extracting Multiple Intents with token.conjuncts***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 token.conjuncts 提取多个意图***'
- en: 'Sometimes, you might find a sentence that seems to express more than one intent.
    For example, consider the following sentence:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能会遇到似乎表达多个意图的句子。例如，考虑以下句子：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this scenario, a user wants to order a pizza and a cola. But in most cases,
    you can consider these intents part of a single complex intent. Although a user
    requests items of different types, you’d typically treat this sentence as a single
    order consisting of several items. In this example, you might recognize the intent
    as `orderPizza`, formed by combining the transitive verb and direct object pair,
    but extract `pizza` and `cola` as items for the order being placed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，用户想要订购一份披萨和一瓶可乐。但在大多数情况下，你可以将这些意图视为单一复杂意图的一部分。尽管用户请求不同类型的物品，你通常会将这个句子视为由多个物品组成的单一订单。在这个例子中，你可能会将意图识别为
    `orderPizza`，这是通过将及物动词和直接宾语对结合起来形成的，但会提取 `pizza` 和 `cola` 作为订单中的物品。
- en: '[Figure 8-2](../Text/ch08.xhtml#ch08fig02) shows the dependency tree for the
    sample sentence.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-2](../Text/ch08.xhtml#ch08fig02) 显示了示例句子的依赖树。'
- en: '![image](../Images/fig8-2.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-2.jpg)'
- en: '*Figure 8-2: The dependency tree of a sentence containing a direct object and
    its conjunct*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：包含直接宾语及其连接词的句子的依赖树*'
- en: 'In the diagram, you can see two arrows pointing to the arcs for the direct
    object “pizza” and the conjunct “cola” associated with it. The *conjunct* of a
    noun is another noun that is joined to it by a conjunction, such as “and,” “or,”
    and so on. To extract the direct object and the conjunct associated with it, we
    can use the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在图示中，你可以看到有两条箭头指向直接宾语“pizza”和与之相关的连接词“cola”。名词的*连接词*是通过连词如“和”、“或”等连接的另一个名词。为了提取直接宾语及其相关的连接词，我们可以使用以下代码：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We extract the conjunct associated with the direct object using the `conjuncts`
    property of the Token object used for the direct object ➊. Once we’ve obtained
    the direct object and its conjuncts, we combine them into a single list ➋.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用直接宾语 ➊ 的 Token 对象的 `conjuncts` 属性来提取与直接宾语相关的连接词。一旦获得了直接宾语及其连接词，我们将它们合并成一个列表
    ➋。
- en: 'The script output should be as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出应该如下所示：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To compose the intent, we should extract the verb, too. The simplest way to
    obtain it when we already have the direct object is to obtain the direct object’s
    syntactic head (you saw an example of this in “[Obtaining the Transitive Verb/Direct
    Object Pair](../Text/ch08.xhtml#lev105)” on [page 113](../Text/ch08.xhtml#page_113)):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建意图，我们还应提取动词。我们在已经拥有直接宾语的情况下，获取直接宾语的句法中心词是获得动词的最简单方法（你在《[获取及物动词/直接宾语对](../Text/ch08.xhtml#lev105)》中[第113页](../Text/ch08.xhtml#page_113)看到过这个例子）：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, using the text property of the verb and the direct object, we can compose
    the intent.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用动词和直接宾语的文本属性，我们可以组合出意图。
- en: '***Try This***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***试一试***'
- en: In the script provided in on [page 114](../Text/ch08.xhtml#page_114), you accessed
    the conjunct linked to the direct object through the Token object’s `conjuncts`
    property. In a new script, replace that line with code that extracts the conjunct
    by finding the arc labeled `conj` moving outward from the direct object. You can
    do this within the same loop in which you obtain the direct object by finding
    the arc labeled `dobj`. Be sure to check that the head of the `conj` arc matches
    the direct object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 114 页](../Text/ch08.xhtml#page_114)提供的脚本中，你通过 `Token` 对象的 `conjuncts` 属性访问了与直接宾语相关的连接词。在新的脚本中，替换这一行代码，通过寻找从直接宾语向外延伸的标记为
    `conj` 的弧线来提取连接词。你可以在同一个循环中完成这项工作，在该循环中，你通过寻找标记为 `dobj` 的弧线获得直接宾语。务必检查 `conj`
    弧线的头词是否与直接宾语匹配。
- en: '***Using Word Lists to Extract the Intent***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用词汇表提取意图***'
- en: In some cases, tokens other than the transitive verb and direct object best
    describe the user’s intent. These tokens are typically related to the transitive
    verb or direct object. So you’ll need to go a step further and explore the transitive
    verb and direct object’s syntactic relations to discover the words that best formulate
    the intent.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，除了及物动词和直接宾语外，其他词汇可能更好地描述用户的意图。这些词汇通常与及物动词或直接宾语相关。因此，你需要进一步探讨及物动词和直接宾语的句法关系，以发现能够最好表达意图的词汇。
- en: 'As an example, consider the following utterance:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑以下话语：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this sentence, the words “want” and “pizza” best describe the intent, but
    neither word is a direct object or transitive verb. However, looking at the utterance’s
    dependency tree, you’ll see that “want” and “pizza” are related to the transitive
    verb “place” and the direct object “order,” respectively. [Figure 8-3](../Text/ch08.xhtml#ch08fig03)
    shows the dependency tree discussed here.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个句子中，“want”和“pizza”这两个词最能表达意图，但它们都不是直接宾语或及物动词。然而，通过查看话语的依赖树，你会发现“want”和“pizza”分别与及物动词“place”和直接宾语“order”相关。[图
    8-3](../Text/ch08.xhtml#ch08fig03)展示了这里讨论的依赖树。
- en: '![image](../Images/fig8-3.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-3.jpg)'
- en: '*Figure 8-3: The dependency tree of an utterance whose transitive verb and
    direct object don’t convey the user’s intent*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-3：一个话语的依赖树，其中的及物动词和直接宾语并未传达用户的意图*'
- en: To extract these words from the utterance, we’ll use a list of predefined words,
    and then search the user’s utterance for those words.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从话语中提取这些词，我们将使用一个预定义的词汇表，然后在用户的话语中搜索这些词。
- en: 'An experienced programmer might call into question the effectiveness of hardcoding
    such a list, because it can be quite long, especially if used in many different
    contexts. But if the list is intended for a specific context, say, ordering pizza,
    it can be surprisingly short, which makes this approach very efficient. The following
    code implements this approach:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一位经验丰富的程序员可能会质疑硬编码如此长的列表的有效性，尤其是在多种不同场景下使用时。但如果这个列表是针对特定场景的，例如下订单披萨，它可能出奇的简短，这使得这种方法非常高效。以下代码实现了这种方法：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As always, we start by finding and extracting the direct object and its transitive
    verb ➊. Once we’ve obtained them, we check whether they can be found in the corresponding
    lists of predefined words. Here, we use simplified lists, of course: the `verbList`
    list contains the verbs a customer might use to place an order, and the `objList`
    contains direct objects that are possible menu items. We start by checking the
    transitive verb ➋. If it’s not in the list of allowed verbs ➌, we check the main
    verb (`ROOT`) of the sentence, which is the head of the transitive verb. If the
    transitive verb is the main verb of the sentence, this implementation will work
    anyway, because the head of the main verb (`ROOT`) refers to itself.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们从查找并提取直接宾语及其及物动词 ➊ 开始。一旦得到它们，我们检查它们是否能在相应的预定义词汇表中找到。这里我们当然使用简化的词表：`verbList`
    列表包含顾客可能用来下订单的动词，而 `objList` 列表包含可能的菜单项作为直接宾语。我们首先检查及物动词 ➋。如果它不在允许的动词列表 ➌ 中，我们就检查句子的主动词（`ROOT`），它是及物动词的头词。如果及物动词是句子的主动词，这个实现依然有效，因为主动词（`ROOT`）的头词指向它自己。
- en: Next, we move on to checking the direct object ➍. If it’s not in the list of
    allowed words, we check its syntactic children. We start by checking the preposition
    of the direct object. If it exists, we pick up the preposition’s child (it can
    have only one child) ➎, which is always the object of the preposition.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们继续检查直接宾语 ➍。如果它不在允许的词汇列表中，我们检查它的句法子节点。我们首先检查直接宾语的介词。如果存在介词，我们会选取介词的子节点（它只能有一个子节点）
    ➎，该子节点始终是介词的宾语。
- en: 'To make this approach applicable to a wider variety of cases, it’s not enough
    to just check for prepositions in the direct object’s children. For example, this
    logic wouldn’t work for the following utterance: “I want to place a pizza order,”
    where there is no preposition child branch. Instead, the direct object has a left
    child, “pizza,” which spaCy tags as a compound. Therefore, we check for compounds
    in the direct object’s children ➏.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这种方法适用于更多的情况，光是检查直接宾语的子节点中的介词是不够的。例如，下面这句话就无法使用此逻辑：“I want to place a pizza
    order”（我想下个披萨订单），其中没有介词子分支。相反，直接宾语有一个左子节点，“pizza”（披萨），spaCy 将其标记为复合词。因此，我们检查直接宾语的子节点中是否有复合词
    ➏。
- en: 'Finally, we print the string representing the intent identifier. We should
    get the following string:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们打印表示意图标识符的字符串。我们应该得到以下字符串：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that we use `wantPizza` as the intent identifier instead of `placeOrder`
    (which we would have gotten if we’d simply used the transitive verb/direct object
    pair). This approach allows us to reduce the number of intent identifiers used
    in the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用 `wantPizza` 作为意图标识符，而不是 `placeOrder`（如果我们仅仅使用及物动词/直接宾语对，本来会得到这个标识符）。这种方法使我们能够减少应用程序中使用的意图标识符的数量。
- en: '**Finding the Meanings of Words Using Synonyms and Semantic Similarity**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用同义词和语义相似性来找出词义**'
- en: English, like many other natural languages, lets you express the same thoughts
    and intents in different ways, because it contains *synonyms*—words or phrases
    that mean nearly the same thing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 英语，像许多其他自然语言一样，允许你以不同的方式表达相同的思想和意图，因为它包含了*同义词*——意思几乎相同的单词或短语。
- en: As a developer of a chatbot application, you need to account for the fact that
    your users might use a fairly wide set of phrases for each intent the application
    is supposed to support. This means that your application must recognize synonymous
    phrases in user input. In fact, if you’re building your chatbot on a popular bot
    platform, such as Google’s Dialogflow, you’re required to submit a set of phrases
    for each possible intent. You then use these utterances behind the scenes to train
    the bot’s model.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个聊天机器人应用程序的开发者，你需要考虑到用户可能会使用一套相当广泛的短语来表达每个应用程序应支持的意图。这意味着你的应用程序必须能够识别用户输入中的同义短语。事实上，如果你是在像
    Google 的 Dialogflow 这样的流行机器人平台上构建你的聊天机器人，你需要为每个可能的意图提交一组短语。然后，你可以在后台使用这些话语来训练机器人的模型。
- en: There’s more than one approach to recognizing synonyms. One option is to use
    a set of predefined lists of synonyms. You check a word of interest against those
    lists, recognizing the word’s meaning based on the list in which it was found.
    Another option is to recognize synonyms based on semantic similarity, a task described
    in [Chapter 5](../Text/ch05.xhtml#ch05) in detail. I discuss both approaches in
    the following sections.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 识别同义词有不止一种方法。一种方法是使用预定义的同义词列表。你可以将感兴趣的单词与这些列表进行比对，从而根据它所在的列表识别单词的意义。另一种方法是基于语义相似性来识别同义词，这个任务在[第五章](../Text/ch05.xhtml#ch05)中有详细描述。我将在接下来的部分讨论这两种方法。
- en: '***Recognizing Synonyms Using Predefined Lists***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用预定义列表识别同义词***'
- en: You already know that, in most cases, the transitive verb and its direct object
    best describe the intent of a phrase. A simple way to recognize whether two phrases
    express the same intent is to make sure the transitive verbs in both phrases are
    synonymous and their direct objects are synonyms as well.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道，在大多数情况下，及物动词和它的直接宾语能最准确地描述一个短语的意图。识别两个短语是否表达相同意图的一个简单方法是，确保这两个短语中的及物动词是同义的，并且它们的直接宾语也是同义的。
- en: 'For example, the following three sentences express the same intent, which you
    might define as `orderPizza`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面这三句话表达了相同的意图，你可以将其定义为 `orderPizza`（订披萨）：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To process these utterances, you use the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些话语的步骤如下：
- en: Perform dependency parsing to extract a transitive verb and its direct object
    from a sentence.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行依存句法分析，从句子中提取及物动词及其直接宾语。
- en: Check with the predefined lists of synonyms to replace the transitive verb and
    the direct object with words that the application recognizes.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用预定义的同义词列表，替换及物动词和直接宾语，用应用程序识别的单词替代。
- en: Compose the string that represents the intent.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建表示意图的字符串。
- en: The diagram in [Figure 8-4](../Text/ch08.xhtml#ch08fig04) summarizes these steps,
    illustrating how this might work for, say, “I want a dish.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-4](../Text/ch08.xhtml#ch08fig04)中的图示总结了这些步骤，展示了这如何适用于例如“我想要一份菜”的情况。'
- en: '![image](../Images/fig8-4.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-4.jpg)'
- en: '*Figure 8-4: Processing intent recognition using lists of synonyms*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-4：使用同义词列表处理意图识别*'
- en: After dependency parsing (done implicitly when you apply the pipeline to an
    utterance), you extract the direct object and the transitive verb, and then check
    them against the corresponding list of synonyms. If you find a match, you replace
    the word with the one that tops the list, which the application should recognize.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在依赖分析之后（在你应用管道处理语句时会隐式完成），你提取出直接宾语和及物动词，然后将它们与对应的同义词列表进行对比。如果找到匹配项，你将该单词替换为列表中的第一个元素，应用程序应该能够识别这个词。
- en: 'Let’s examine what a Python implementation of this scenario might look like:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个场景的 Python 实现可能是什么样的：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We start by creating a Doc object instance for the sample sentence. Then we
    iterate over the dependency tree available through the Doc object, extracting
    the transitive verb and its direct object ➊. Next, we create a list of tuples
    containing all allowable transitive verbs along with their synonyms ➋. The first
    element in each tuple contains a transitive verb that the application can recognize,
    and the other elements in the tuple are its synonyms.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为示例句子创建一个 Doc 对象实例。然后，我们通过 Doc 对象迭代可用的依赖树，提取及物动词及其直接宾语 ➊。接下来，我们创建一个包含所有允许的及物动词及其同义词的元组列表
    ➋。每个元组的第一个元素是应用程序可以识别的及物动词，元组中的其他元素是其同义词。
- en: Now that we’ve defined the allowable transitive verbs and their synonyms and
    put them all in a list of tuples, we can loop over the entire list to find a tuple
    that contains the transitive verb extracted from the sample sentence ➌.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了允许的及物动词及其同义词，并将它们放入一个元组列表中，我们可以遍历整个列表，寻找包含从示例句子提取的及物动词的元组 ➌。
- en: Similarly, we create a list of tuples for the recognized direct objects and
    their synonyms, and then find the tuple containing the direct object extracted
    from the sample ➍.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们为已识别的直接宾语及其同义词创建一个元组列表，然后找到包含从示例中提取的直接宾语的元组 ➍。
- en: 'Finally, we concatenate the first elements of the chosen tuples to compose
    the intent name ➎. As a result, the print command should output the following
    string:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将选择的元组的第一个元素拼接起来，组成意图名称 ➎。结果，打印命令应该输出以下字符串：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Keep in mind that the set of synonyms to choose for a given verb depends largely
    on the type of application we’re creating. For example, in the context of a bot
    application that takes pizza orders, the verbs “make” and “give” can be considered
    synonymous. The reason is that users might interchangeably use the phrases “Make
    me a pizza” and “Give me a pizza” when ordering a pizza.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，选择给定动词的同义词集合在很大程度上取决于我们正在创建的应用类型。例如，在一个接收披萨订单的机器人应用中，“make”和“give”这两个动词可以被认为是同义的。原因是用户在点披萨时可能交替使用“Make
    me a pizza”和“Give me a pizza”这两种说法。
- en: '***Try This***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***试试看***'
- en: 'Use the sample code provided on [page 118](../Text/ch08.xhtml#page_118) as
    the basis for creating a new script. Make the script retain the original functionality
    but generate “unrecognized” as the intent name when the transitive verb, its direct
    object, or both can’t be found in the respective lists. To test your code, experiment
    with the sample sentence, changing it so the new functionality can be seen in
    action. For example, you might use the following sentence:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[第118页](../Text/ch08.xhtml#page_118)提供的示例代码作为创建新脚本的基础。让脚本保持原有功能，但当找不到及物动词、直接宾语或两者时，将意图名称生成“unrecognized”。为了测试代码，可以用示例句子进行实验，修改它以便看到新功能的效果。例如，你可以使用以下句子：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Test it with a sentence containing a verb that isn’t included in the list.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个包含列表中没有的动词的句子来测试它。
- en: Also, you might try to handle the conjunction problem discussed in the previous
    sections using synonym lists.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可能会尝试使用同义词列表处理前面章节中讨论的连接词问题。
- en: '***Recognizing Implied Intents Using Semantic Similarity***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过语义相似性识别隐含的意图***'
- en: Real-world implementations will likely include more complex logic than you’ve
    seen in the examples provided in this chapter so far. Even using a large set of
    predefined lists of synonyms won’t always work. The reason is that users express
    their intentions in many different ways, and they don’t always do so explicitly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的实现可能会比本章所展示的示例更为复杂。即使使用大量预定义的同义词列表，也不总是奏效。原因在于用户以多种不同方式表达他们的意图，而且他们并不总是明确表达。
- en: Recognizing an implied intent depends heavily on the context. For example, if
    your bot is designed for a specific type of task, say, ordering food, it should
    recognize phrases that imply a request, such as “I feel like eating a pie.”, as
    the intention to place a pizza order.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 识别隐含意图很大程度上依赖于上下文。例如，如果你的机器人是为特定类型的任务设计的，比如订餐，它应该能够识别暗示请求的短语，如“我想吃一个馅饼。”，并理解这是下披萨订单的意图。
- en: One widely known technique to make the user express their intent more clearly
    is asking clarifying questions. To determine what question to ask, you can calculate
    the semantic similarity of the previous user utterance.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一种广为人知的技巧是通过询问澄清性问题来让用户更明确地表达他们的意图。为了确定该问什么问题，你可以计算之前用户话语的语义相似度。
- en: '[Figure 8-5](../Text/ch08.xhtml#ch08fig05) illustrates how to implement this
    task.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-5](../Text/ch08.xhtml#ch08fig05)展示了如何实现这一任务。'
- en: '![image](../Images/fig8-5.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-5.jpg)'
- en: '*Figure 8-5: Recognizing an implied intent by calculating semantic similarity
    and asking clarifying questions*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-5：通过计算语义相似度并询问澄清性问题来识别隐含意图*'
- en: You start by analyzing the dependency tree of the input utterance to extract
    the direct object and its transitive verb. If, for example, the direct object
    can’t be found in the predefined list of synonyms, as discussed in “[Recognizing
    Synonyms Using Predefined Lists](../Text/ch08.xhtml#lev110)” on [page 117](../Text/ch08.xhtml#page_117),
    you might try to determine how similar the direct object is to the words included
    in the list. Based on the results of calculating semantic similarity, you can
    then generate a clarifying user question.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先分析输入语句的依存关系树，以提取直接宾语及其及物动词。例如，如果在预定义的同义词列表中找不到直接宾语，如在“[使用预定义列表识别同义词](../Text/ch08.xhtml#lev110)”[第117页](../Text/ch08.xhtml#page_117)中讨论的那样，你可以尝试确定直接宾语与列表中词汇的相似度。基于计算语义相似度的结果，你可以生成一个澄清性问题。
- en: 'Let’s implement this technique in code, which I’ll break up into sections.
    As usual, we start with applying the text-processing pipeline to the sample sentence:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过代码来实现这一技巧，我将其分成几个部分。和往常一样，我们从将文本处理管道应用于示例句子开始：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we extract the direct object token:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们提取直接宾语词元：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We create a token for the word “food.” We’ll calculate the semantic similarity
    between this token and the direct object token:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为“食物”一词创建一个词元。我们将计算这个词元与直接宾语词元之间的语义相似度：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the level of similarity is greater than a predefined threshold, the application
    guesses that the user is most likely interested in placing an order. Then it asks
    a clarifying question to confirm this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相似度超过预定阈值，应用程序会猜测用户很可能有下单的意图。然后，它会提出一个澄清性问题以确认这一点：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Recall from [Chapter 5](../Text/ch05.xhtml#ch05) that spaCy uses word vectors
    to calculate the semantic similarity of tokens. The closer two vectors are in
    the vector space, the higher the level of similarity is between them. In this
    example, we use 0.6 as the minimum degree of similarity required to assume the
    direct object resembles a food product.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下[第 5 章](../Text/ch05.xhtml#ch05)中提到的，spaCy使用词向量来计算词元的语义相似度。两个向量在向量空间中的距离越近，它们之间的相似度就越高。在这个示例中，我们使用0.6作为假设直接宾语与食品产品相似的最低相似度标准。
- en: '***Try This***'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***尝试这个***'
- en: Of course, you won’t know in advance which phrases the user will use and how
    easy it will be to recognize the user’s intent. Neither will your application.
    That’s why real-world applications typically combine several approaches to recognize
    intent. Combine the approach based on recognizing synonyms with the approach based
    on handling implied intents, discussed in the previous sections, so you can handle
    more possible situations. Start by trying to extract the intent from an utterance
    using the synonyms-based approach. Then, if that fails, try the approach based
    on using semantic similarity. If both approaches fail, you might label the utterance
    as expressing an unrecognized intent.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你无法预先知道用户将使用哪些短语，也无法预测识别用户意图的难易程度。你的应用程序也无法做到这一点。这就是为什么实际应用通常结合多种方法来识别意图。结合基于识别同义词的方法与基于处理隐含意图的方法（如前文所述），这样你可以应对更多的可能情况。首先尝试使用基于同义词的方法从发话中提取意图。如果失败，再尝试基于语义相似性的方式。如果两种方法都失败，你可以将发话标记为表达了无法识别的意图。
- en: '**Extracting Intent from a Sequence of Sentences**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从一系列句子中提取意图**'
- en: 'In a discourse, the words reflecting a user’s intent might appear across different
    sentences, as in the following example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个话语中，反映用户意图的词语可能分布在不同的句子中，如以下示例所示：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Your bot should be ready to handle this scenario by extracting a user’s intent
    from an entire discourse. In this section, I’ll walk you through a technique for
    doing this.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人应该能够处理这种场景，从整个话语中提取用户的意图。在本节中，我将向你介绍一种实现这一目标的技术。
- en: '***Walking the Dependency Structures of a Discourse***'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***遍历话语的依赖结构***'
- en: Let’s start by looking at the dependency parsing for the discourse, which will
    disclose the transitive verb/direct object pairs in each sentence, as shown in
    [Figure 8-6](../Text/ch08.xhtml#ch08fig06).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看话语的依赖解析，它将揭示每个句子中的及物动词/直接宾语对，如[图 8-6](../Text/ch08.xhtml#ch08fig06)所示。
- en: '![image](../Images/fig8-6.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-6.jpg)'
- en: '*Figure 8-6: A visual representation of the dependency parsing of the entire
    discourse*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-6：整个话语的依赖解析的可视化表示*'
- en: The pale arrow in the diagram represents the dependency of interest. In other
    words, you want to replace the substitute “one” with the noun “pizza” it stands
    for. But the dependency parser in spaCy doesn’t show this link because it can’t
    connect tokens from different sentences. So the task of determining these dependencies
    is left to you.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的淡箭头表示相关的依赖关系。换句话说，你需要将代词“one”替换成它所代表的名词“pizza”。但是spaCy中的依赖解析器并不会显示这一连接，因为它无法连接来自不同句子的标记。所以，确定这些依赖关系的任务交给了你。
- en: '***Replacing Proforms with Their Antecedents***'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***替换代词与其先行词***'
- en: 'An *antecedent* is an expression (such as a word or clause) that gives its
    meaning to a *proform* (such as a pronoun or pro-verb). In this kind of intent
    extraction, you’ll have to determine the antecedents and replace the corresponding
    proforms with them. You can do so using the following steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*先行词*是一个表达（如单词或从句），它为*代词*（如代词或代动词）赋予了意义。在这种意图提取中，你需要确定先行词，并将相应的代词替换为先行词。你可以通过以下步骤进行操作：'
- en: Parse the dependencies of the entire discourse.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析整个话语的依赖关系。
- en: Dissect the discourse into sentences.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将话语分解为句子。
- en: Find the antecedent for the pronoun that is the direct object of the transitive
    verb to be used in the intent definition.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到与及物动词的直接宾语相关的代词先行词，用于意图定义。
- en: '[Figure 8-7](../Text/ch08.xhtml#ch08fig07) shows these steps diagrammatically.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-7](../Text/ch08.xhtml#ch08fig07)以图示方式展示了这些步骤。'
- en: '![image](../Images/fig8-7.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig8-7.jpg)'
- en: '*Figure 8-7: A graphical depiction of extracting intent from a sequence of
    sentences*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-7：从一系列句子中提取意图的图示*'
- en: 'In spaCy, we can implement the first two steps with a couple lines of code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在spaCy中，我们可以通过几行代码实现前两个步骤：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We convert the object that the `doc.sents` property returns into a list so we
    can refer to each sentence in the text by its index. (We could also directly iterate
    over a sequence of sentences contained in `doc.sents` using a `for` loop.)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`doc.sents`属性返回的对象转换为列表，这样我们就可以通过索引引用文本中的每个句子。（我们也可以直接使用`for`循环遍历`doc.sents`中的句子序列。）
- en: 'Next, we define two lists containing the allowable transitive verbs and allowable
    direct objects, respectively:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义两个列表，分别包含允许的及物动词和允许的直接宾语：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: These lists contain tuples of synonyms (refer to “[Recognizing Synonyms Using
    Predefined Lists](../Text/ch08.xhtml#lev110)” on [page 117](../Text/ch08.xhtml#page_117)
    for details).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些列表包含同义词元组（详情请参见 “[使用预定义列表识别同义词](../Text/ch08.xhtml#lev110)” 以及 [第117页](../Text/ch08.xhtml#page_117)）。
- en: 'We also need to define a list for allowable substitutes. To do so, we must
    determine what proforms the direct object could be. Let’s first figure out what
    other phrases we could use in place of the last sentence, and then highlight the
    direct object in each phrase. Possible alternatives include the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要定义一个允许的替代品列表。为此，我们必须确定直接宾语可能是什么代词。首先，让我们弄清楚可以替代最后一个句子的其他短语，并在每个短语中突出显示直接宾语。可能的替代包括以下内容：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'So, we can define the substitute list as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将替代列表定义如下：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Unlike the transitive verb and direct object lists, the substitute list has
    a simple structure, because we don’t need to group substitutes. The same substitute
    could refer to any of the direct objects.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 与及物动词和直接宾语列表不同，替代列表结构简单，因为我们不需要对替代项进行分组。同一个替代项可以指代任何一个直接宾语。
- en: 'In addition to the lists, we might want to define a dictionary to hold the
    intent definition parts as they’re being extracted:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些列表，我们还可能想定义一个字典，以便在提取过程中存储意图定义的各个部分：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we’re ready to start the intent recognition process:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始意图识别过程：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The outer loop iterates over the sequence of sentences held in the Doc object.
    The inner loop, in turn, iterates over the tokens found in a sentence. We check
    each token to see whether it’s a direct object. If it is, we determine whether
    the direct object is part of either the direct object synonyms list or the substitutes
    list ➊. We also check whether the corresponding transitive verb is in the transitive
    verb synonyms list.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 外层循环遍历存储在Doc对象中的句子序列。内层循环则遍历句子中的每个标记。我们检查每个标记，看看它是否是直接宾语。如果是，我们进一步判断该直接宾语是否在直接宾语同义词列表或替代列表中
    ➊。我们还会检查对应的及物动词是否在及物动词同义词列表中。
- en: 'We extract the direct object only if it’s in either the direct object synonyms
    list or the substitutes list ➋. For example, we wouldn’t be interested in extracting
    the transitive verb from the following phrase (unless we sell apples, of course):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当直接宾语在直接宾语同义词列表或替代列表中时，我们才会提取它 ➋。例如，我们不会对以下短语中的及物动词感兴趣（除非我们卖苹果，当然）：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Nor are we interested in a transitive verb if it’s not in the allowable list
    ➌, even if its direct object satisfies this condition, as in the following phrase:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果及物动词不在允许列表 ➌ 中，即使它的直接宾语满足此条件，我们也不关心该及物动词，如以下短语所示：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: That’s why, before picking up the transitive verb, we check not only whether
    the direct object is in either the direct object synonyms list or the substitutes
    list, but also whether the transitive verb is in the transitive verb synonyms
    list.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么，在提取及物动词之前，我们不仅检查直接宾语是否在直接宾语同义词列表或替代列表中，还要检查及物动词是否在及物动词同义词列表中。
- en: 'Finally, to pick up the direct object that defines the intent, we make sure
    we can find it in the direct object synonyms list ➍. Now we can compose the intent
    definition:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了提取定义意图的直接宾语，我们需要确保它能在直接宾语同义词列表 ➍ 中找到。现在我们可以组成意图定义了：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Optionally, we might want to print it to make sure everything works as expected:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们可能想要打印出来，以确保一切按预期工作：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We should get the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该得到以下输出：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This result indicates that the user intends to order a pizza.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果表明用户打算点一个披萨。
- en: '***Try This***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***尝试一下***'
- en: 'In some discourses, several sentences might separate an antecedent from its
    proform. For example, consider the following sequence of sentences:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些语境中，几个句子可能会把一个先行词与其代词分开。例如，考虑以下句子序列：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Edit the script provided on [page 124](../Text/ch08.xhtml#page_124) so it can
    handle this or a similar sequence of sentences.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 [第124页](../Text/ch08.xhtml#page_124) 提供的脚本，使其能够处理这个或类似的句子序列。
- en: '**Summary**'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Intent recognition is a complex task that might require you to combine several
    approaches. In this chapter, you learned how to extract the most important parts
    of an utterance’s dependency tree for intent recognition. Then you analyzed them
    using predefined lists, semantic similarity, or both approaches. You also extracted
    the intent from a sequence of sentences by replacing proforms with their antecedents.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 意图识别是一项复杂的任务，可能需要你结合多种方法。在本章中，你学习了如何提取话语依存树中最重要的部分用于意图识别。然后，你使用预定义的列表、语义相似度或两者结合的方法进行分析。你还通过用指代词替换其指代词先行词，从一系列句子中提取意图。
