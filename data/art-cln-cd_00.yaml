- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Once upon a time, Bill Gates’ parents invited legendary investor Warren Buffett
    to the family home to spend some time together. In a CNBC interview, Warren Buffett
    recounts how on this occasion, Bill’s father asked Warren and Bill to write down
    the secrets of their success. I’ll tell you in a moment what they wrote.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 曾几何时，比尔·盖茨的父母邀请传奇投资者沃伦·巴菲特到家里一起度过一段时光。在一次CNBC的采访中，沃伦·巴菲特回忆道，这次机会中，比尔的父亲请沃伦和比尔写下他们成功的秘诀。我会马上告诉你他们写了什么。
- en: At the time, the tech prodigy Bill Gates had met the famous investor Buffett
    only once or twice, but they had become fast friends, both leading successful
    billion-dollar companies. The young Bill Gates was on the verge of achieving his
    mission of placing a *computer on every desk* with his fast-growing software giant
    Microsoft. Warren Buffett had made his name as one of the most successful business
    geniuses in the world. Famously, Warren had grown his majority-owned company,
    Berkshire Hathaway, from a broke textile manufacturer to an international heavyweight
    in diversified business areas such as insurance, transportation, and energy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，技术神童比尔·盖茨只见过著名投资者沃伦·巴菲特一两次，但他们已经成为了快速的朋友，两人都在领导着成功的亿万级公司。年轻的比尔·盖茨正处于实现自己的使命的边缘——通过快速增长的软件巨头微软，将*每张桌子上都放一台电脑*。沃伦·巴菲特则凭借其作为世界上最成功的商业天才之一而成名。著名的是，沃伦将他控股的公司——伯克希尔·哈撒韦，成功地从一家破产的纺织厂发展成为了一个国际化的商业巨头，涉足保险、运输和能源等多个行业。
- en: 'So, what did those two business legends consider the secret of their success?
    As the story goes, without any collaboration, Bill and Warren each wrote down
    a single word: *Focus*.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这两位商业传奇人物认为他们成功的秘诀是什么呢？故事是这样的，在没有任何合作的情况下，比尔和沃伦各自写下了一个词：*专注*。
- en: 'While this “success secret” sounds simple enough, you may wonder: Does it apply
    to my career as a coder too? What does focus look like in practice—coding through
    the night with energy drinks and pizza, or perhaps eating an all-protein diet
    and getting up at sunrise? What are the not-so-obvious consequences of leading
    a focused life? And, importantly, are there actionable tips on how a programmer
    like me can benefit from the abstract principle to increase my productivity?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个“成功秘诀”听起来简单，你可能会想：它也适用于我的编程职业吗？专注在实际中是什么样的——通宵编程喝能量饮料和吃比萨，还是吃全蛋白饮食并在日出时起床？过专注的生活会有哪些不太明显的后果？更重要的是，作为一个程序员，我如何从这一抽象原则中获得可操作的建议，以提高我的工作效率？
- en: This book aims to answer these questions to help you lead a more focused life
    as a programmer and become more effective in your daily work. I’ll show you how
    you can increase your productivity by writing clean, concise, and focused code
    that is easier to read, write, and collaborate on with other programmers. As I’ll
    show you in the upcoming chapters, the focusing principle holds in every stage
    of software development; you’ll learn how to write clean code, create focused
    functions that do one thing well, create fast and responsive applications, design
    focused user interfaces for usability and aesthetics, and plan product roadmaps
    using minimum viable products. I’ll even show you how achieving a pure state of
    focus can vastly increase your concentration and help you experience more excitement
    and joy from your tasks. As you’ll see, the overarching theme of this book is
    to focus in every way you can—I’ll show you exactly how to do this in the upcoming
    chapters.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在回答这些问题，帮助你作为程序员过上更加专注的生活，并在日常工作中变得更加高效。我会告诉你如何通过编写简洁、清晰、专注的代码来提高工作效率，这种代码更易于阅读、编写，并与其他程序员协作。正如我将在接下来的章节中展示的那样，专注的原则适用于软件开发的每个阶段；你将学会如何编写清晰的代码，创建专注的函数做到“一件事做得好”，创建快速响应的应用程序，设计符合可用性和美学的专注用户界面，以及使用最小可行产品规划产品路线图。我甚至会展示如何通过专注的纯粹状态显著提升你的集中力，并帮助你从工作中获得更多的兴奋和乐趣。正如你将看到的，这本书的主旨是：在所有方面做到专注——接下来的章节里，我将向你展示如何做到这一点。
- en: 'For any serious coder, continuous improvement of your focus and productivity
    is essential. When you do more valuable work, you tend to get greater rewards.
    However, simply increasing your output is not the solution. The trap goes like
    this: *if I write more code, create more tests, read more books, learn more, think
    more, communicate more, and meet more people, I’ll get more done.* But you cannot
    do *more* without doing something *less*. Time is limited—you have 24 hours per
    day and 7 days a week, just like me and everybody else. There’s an inescapable
    mathematical limitation: in a limited space, if one thing grows, something else
    must shrink to make room. If you read more books, you may meet fewer people. If
    you meet more people, you may write less code. If you write more code, you may
    have less time with the people you love. You cannot escape the fundamental trade-off:
    there cannot be *more* without *less* in a limited space.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何一位认真的编码者来说，持续提高专注力和生产力是至关重要的。当你做更多有价值的工作时，通常会获得更多的回报。然而，仅仅增加产出并不是解决问题的办法。陷阱是这样的：*如果我写更多的代码，创建更多的测试，读更多的书，学更多的东西，想更多的东西，沟通更多，结识更多的人，我就能做得更多。*但你不能在不做*少*的情况下做*更多*。时间是有限的——你每天有24小时，一周有7天，就像我和其他所有人一样。存在一个不可逃避的数学限制：在有限的空间中，如果一件事增长了，其他事必须缩小以腾出空间。如果你读更多的书，你可能会见到更少的人。如果你见到更多的人，你可能会写更少的代码。如果你写更多的代码，你可能会有更少的时间陪伴你爱的人。你无法逃避这种根本性的权衡：在有限的空间里，不能有*更多*而没有*更少*。
- en: 'Rather than focus on the obvious consequence of simply doing more, this book
    takes the reverse perspective: you reduce complexity, allowing you to work less
    while getting more value from your results. Thoughtful minimalism is the holy
    grail of personal productivity, and, as you’ll see in later chapters, it works.
    You can create more value with fewer resources by programming computers the right
    way and using the timeless principles presented in this book.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不是仅仅聚焦于做更多的显而易见结果，而是从相反的角度出发：你减少复杂性，从而让自己在工作更少的情况下，从结果中获得更多的价值。深思熟虑的极简主义是个人生产力的圣杯，正如你在后续章节中看到的那样，它是有效的。通过以正确的方式编写计算机程序并运用本书中展示的永恒原则，你可以用更少的资源创造更多的价值。
- en: By creating more value, you can also command higher pay. Bill Gates famously
    said that a “great lathe operator commands several times the wage of an average
    lathe operator, but a great writer of software code is worth 10,000 times the
    price of an average software writer.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创造更多的价值，你也能获得更高的报酬。比尔·盖茨曾说：“一位优秀的车床操作工的工资是普通车床操作工的数倍，而一位优秀的软件编程师的价值是普通软件编程师的10,000倍。”
- en: 'One reason is that a great software developer performs a highly leveraged activity:
    programming a computer the right way can replace thousands of jobs and millions
    of hours of paid work. Code that runs self-driving cars, for example, can replace
    the labor of millions of human drivers while being cheaper, more reliable, and
    (arguably) much safer.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因是，优秀的软件开发者从事的是一种高杠杆活动：以正确的方式编写计算机程序可以取代成千上万的工作和数百万小时的有偿劳动。例如，运行自动驾驶汽车的代码可以取代数百万名人类司机的劳动，同时更便宜、更可靠，并且（可以说）更安全。
- en: Who Is This Book For?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这本书适合谁？
- en: Are you a coding practitioner who wants to create more value with faster code
    and less pain? Do you ever find yourself stuck in bug-finding mode? Does the complexity
    of code often overwhelm you? Do you struggle to decide on the next thing to learn,
    having to choose from hundreds of programming languages—Python, Java, C++, HTML,
    CSS, JavaScript—and thousands of frameworks and technologies—Android apps, Bootstrap,
    TensorFlow, NumPy? If you can answer any of the questions with “YES!” (or even
    “yes”), you have the right book in your hands!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一个希望通过更快的代码和更少的痛苦创造更多价值的编码从业者吗？你是否曾经发现自己陷入了找 bug 的模式？代码的复杂性是否经常让你不堪重负？你是否为选择下一个要学习的内容而苦恼，面对数百种编程语言——Python、Java、C++、HTML、CSS、JavaScript——以及成千上万的框架和技术——Android
    应用、Bootstrap、TensorFlow、NumPy？如果你能用“YES!”（甚至是“yes”）回答任何一个问题，那么你手里拿的是一本对的书！
- en: 'This book is for every programmer who’s interested in increasing their productivity—doing
    more with less. It’s for you if you seek simplicity and believe in Occam’s razor:
    “It is futile to do with more things that which can be done with fewer.”'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合所有希望提高生产力——用更少的资源做更多事的程序员。如果你寻求简单并相信奥卡姆剃刀原理：“用更少的东西做能够做到的事情，是徒劳的”，这本书就是为你而写的。
- en: What Will You Learn?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你将学到什么？
- en: This book shows you how to practically apply nine principles to increase your
    potential as a programmer by orders of magnitude. These principles will simplify
    your life and reduce complexity, struggles, and working hours. I don’t claim that
    any of the principles are new. They’re variously well known and established—and
    proven to work by the most successful coders, engineers, philosophers, and creators.
    That’s what makes them principles in the first place! However, in this book I
    will apply the principles explicitly to coders, giving real-world examples and,
    where possible, code examples.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书向你展示如何实际应用九条原则，成倍提升作为程序员的潜力。这些原则将简化你的生活，减少复杂性、困惑和工作时间。我并不声称这些原则是全新的，它们已经广为人知并且被许多最成功的编码员、工程师、哲学家和创造者验证有效。正是这些验证过的原则才使得它们成为原则！然而，在本书中，我将把这些原则明确地应用于程序员，提供现实世界的例子，并尽可能提供代码示例。
- en: '**Chapter 1** will set up the main challenge to increasing value in productivity:
    complexity. You’ll learn to recognize the sources of complexity in your life and
    your code and gain an understanding that complexity can harm your productivity
    and output. Complexity is everywhere, and you need to be constantly vigilant against
    it. *Keep it simple!*'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第1章**将揭示提高生产力价值的主要挑战：复杂性。你将学习识别生活和代码中复杂性的来源，并理解复杂性可能对生产力和产出造成的危害。复杂性无处不在，你需要时刻保持警惕，抵御它。*保持简洁！*'
- en: 'In **Chapter 2**, you’ll learn the profound impact the *80/20 principle* can
    have on your life as a programmer. The majority of effects (80 percent) come from
    a minority of causes (20 percent); this is a ubiquitous theme in programming.
    You’ll learn that the 80/20 principle is fractal: 20 percent of the 20 percent
    of coders will earn 80 percent of the 80 percent of salary. In other words, 4
    percent of the world’s coders earn 64 percent of the money. The quest for continuous
    leverage and optimization is always on!'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第2章**中，你将了解*80/20原则*对作为程序员的你生活产生的深远影响。大多数效果（80%）源自少数原因（20%）；这是编程中的普遍主题。你将了解到80/20原则是分形的：20%的20%的程序员赚取80%的80%的薪资。换句话说，全球4%的程序员赚取64%的薪资。追求持续的杠杆效应和优化始终在进行中！
- en: In **Chapter 3**, you'll learn about *building minimal viable products* to test
    your assumptions early, minimize waste, and increase the speed by which you go
    through the build, measure, and learn cycle. The idea is to learn where to focus
    your energy and attention by getting feedback early.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第3章**中，你将学习如何*构建最小可行产品*，以便早期验证假设、减少浪费，并提高通过构建、衡量和学习循环的速度。其核心思想是通过尽早获取反馈，了解应该集中精力和注意力的地方。
- en: In **Chapter 4**, you’ll learn about the benefits of *writing clean and simple
    code*. Contrary to what most people intuitively assume, code should be written,
    first and foremost, to maximize readability rather than minimize the usage of
    central processing unit (CPU) cycles. Collective programmer time and effort are
    far scarcer than CPU cycles, and writing code that’s hard to grasp reduces the
    efficiency of your organization—and of our collective human intelligence.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第4章**中，你将学习到*编写简洁清晰代码*的好处。与大多数人直观假设的相反，编写代码时，首要目标应该是最大化可读性，而不是最小化中央处理器（CPU）周期的使用。集体程序员的时间和精力比CPU周期更为稀缺，写出难以理解的代码会降低你所在组织的效率——以及我们共同的人类智慧。
- en: 'In **Chapter 5**, you’ll learn about the conceptual foundation of performance
    optimization and the pitfalls of optimizing prematurely. Donald Knuth, one of
    the fathers of computer science, used to say, “*Premature optimization is the
    root of all evil!*” When you do need to optimize your code, use the 80/20 principle:
    optimize the 20 percent of functions that run 80 percent of the time. Get rid
    of the bottlenecks. Ignore the rest. Repeat.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第5章**中，你将学习到性能优化的概念基础以及过早优化的陷阱。计算机科学之父之一的唐纳德·克努斯曾说过：“*过早的优化是万恶之源!*”当你确实需要优化代码时，使用80/20原则：优化运行80%时间的20%的函数。消除瓶颈，忽略其余部分。重复此过程。
- en: In **Chapter 6**, you’ll join me for an excursion into Mihaly Csikszentmihalyi’s
    (literally) exciting world of *flow*. The state of flow is a state of pure concentration
    that increases productivity by magnitudes and helps to build a culture around
    deep work—speaking in the words of computer science professor Cal Newport, who
    also lends some ideas to this chapter.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第6章**中，你将和我一起探索米哈伊·契克森米哈伊（Mihaly Csikszentmihalyi）那令人兴奋的*心流*世界。心流状态是一种纯粹的专注状态，能够成倍提高生产力，并帮助在深度工作中建立文化——这也是计算机科学教授Cal
    Newport的观点，他的思想也为本章贡献了一些观点。
- en: In **Chapter 7**, you’ll learn about the Unix philosophy of *doing one thing*
    and doing it well. Rather than having a monolithic (and, potentially, more efficient)
    kernel with a huge provision of functionality, the developers of Unix chose to
    implement a small kernel with lots of optional helper functions. This helped the
    Unix ecosystem to scale up while remaining clean and (relatively) simple. We’ll
    see how you can apply these principles to your own work.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第7章**中，你将学习Unix哲学中的*做一件事*并做好的理念。与其拥有一个庞大功能的单体内核（并可能更高效），Unix的开发者选择实现一个小巧的内核，并提供大量可选的辅助功能。这帮助Unix生态系统在扩展的同时保持简洁和（相对）简单。我们将看到如何将这些原则应用到你自己的工作中。
- en: 'In **Chapter 8**, you’ll enter another vital area in computer science that
    benefits from a minimalistic mindset: design and user experience (UX). Think of
    the differences between Yahoo Search and Google Search, the Blackberry and the
    iPhone, and OkCupid and Tinder. The most successful technologies often come with
    a radically simple user interface for the reason that, in design, *less is more*.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第8章**中，你将进入计算机科学中的另一个重要领域，这一领域同样受益于极简主义思维：设计与用户体验（UX）。想想Yahoo搜索和Google搜索、黑莓和iPhone、OkCupid和Tinder之间的差异。最成功的技术往往都配有极其简单的用户界面，因为在设计中，*少即是多*。
- en: In **Chapter 9**, you’ll revisit the power of *focus* and learn how to apply
    it in diverse areas to increase your (and your programs’) output vastly!
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**第9章**中，你将重新审视*专注*的力量，并学习如何将其应用到不同领域，以大幅提升你的（以及你项目的）产出！
- en: Finally, we’ll wrap things up, give you actionable next steps, and release you
    into the complex world equipped with a set of reliable tools to simplify that
    world.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将总结本章内容，给你一些可操作的下一步建议，并将你释放到复杂的世界中，带着一套可靠的工具来简化这个世界。
