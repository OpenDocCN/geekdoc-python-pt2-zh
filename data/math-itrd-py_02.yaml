- en: '1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1'
- en: DRAWING POLYGONS WITH THE TURTLE MODULE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用海龟模块绘制多边形
- en: '*Centuries ago a Westerner heard a Hindu say the Earth rested on the back of
    a turtle. When asked what the turtle was standing on, the Hindu explained, “It’s
    turtles all the way down.”*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*几个世纪前，一位西方人听到一位印度教徒说地球是靠在海龟背上。当被问到海龟站在什么上面时，印度教徒解释道：“是海龟，一直是海龟。”*'
- en: '![image](../images/fintro-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fintro-01.jpg)'
- en: Before you can start using math to build all the cool things you see in this
    book, you’ll need to learn how to give instructions to your computer using a programming
    language called Python. In this chapter you’ll get familiar with some basic programming
    concepts like loops, variables, and functions by using Python’s built-in turtle
    tool to draw different shapes. As you’ll see, the turtle module is a fun way to
    learn about Python’s basic features and get a taste of what you’ll be able to
    create with programming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始使用数学构建书中展示的所有酷炫内容之前，你需要学习如何使用一种名为 Python 的编程语言来给计算机下指令。在本章中，你将通过使用 Python
    内置的海龟工具绘制不同的图形，熟悉一些基本的编程概念，如循环、变量和函数。正如你将看到的，海龟模块是学习 Python 基本特性的一种有趣方式，同时也能让你品尝到编程能够创造的精彩成果。
- en: PYTHON’S TURTLE MODULE
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 的海龟模块
- en: The Python turtle tool is based on the original “turtle” agent from the Logo
    programming language, which was invented in the 1960s to make computer programming
    more accessible to everyone. Logo’s graphical environment made interacting with
    the computer visual and engaging. (Check out Seymour Papert’s brilliant book *Mindstorms*
    for more great ideas for learning math using Logo’s virtual turtles.) The creators
    of the Python programming language liked the Logo turtles so much that they wrote
    a module called *turtle* in Python to copy the Logo turtle functionality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的海龟工具基于原始的“海龟”代理，该代理来自 1960 年代的 Logo 编程语言，Logo 旨在使计算机编程更加易于理解，面向大众。Logo
    的图形化环境使与计算机的互动变得直观且富有趣味。（查看 Seymour Papert 的精彩著作 *Mindstorms*，了解更多使用 Logo 虚拟海龟学习数学的绝妙创意。）Python
    编程语言的创始人非常喜欢 Logo 中的海龟，以至于他们写了一个名为 *turtle* 的模块，用 Python 来复制 Logo 海龟的功能。
- en: Python’s turtle module lets you control a small image shaped like a turtle,
    just like a video game character. You need to give precise instructions to direct
    the turtle around the screen. Because the turtle leaves a trail wherever it goes,
    we can use it to write a program that draws different shapes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的海龟模块允许你控制一个小图像，它的形状像一只海龟，就像视频游戏中的角色一样。你需要给出精确的指令来引导海龟在屏幕上移动。因为海龟走到哪里都会留下痕迹，我们可以利用它来编写程序，绘制不同的图形。
- en: Let’s begin by importing the turtle module!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从导入海龟模块开始吧！
- en: IMPORTING THE TURTLE MODULE
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入海龟模块
- en: Open a new Python file in IDLE and save it as *myturtle.py* in the Python folder.
    You should see a blank page. To use turtles in Python, you have to import the
    functions from the turtle module first.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中打开一个新的 Python 文件，并将其保存为 *myturtle.py*，保存在 Python 文件夹中。你应该看到一个空白页面。要在
    Python 中使用海龟，你首先需要导入海龟模块中的函数。
- en: A *function* is a set of reusable code for performing a specific action in a
    program. There are many built-in functions you can use in Python, but you can
    also write your own functions (you’ll learn how to write your own functions later
    in this chapter).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数* 是一组可重复使用的代码，用于在程序中执行特定的操作。Python 中有许多内置函数可以使用，但你也可以编写自己的函数（稍后你将学习如何编写自己的函数）。'
- en: A *module* in Python is a file that contains predefined functions and statements
    that you can use in another program. For example, the turtle module contains a
    lot of useful code that was automatically downloaded when you installed Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的 *模块* 是一个包含预定义函数和语句的文件，这些函数和语句可以在另一个程序中使用。例如，海龟模块包含了许多有用的代码，这些代码会在你安装
    Python 时自动下载。
- en: 'Although functions can be imported from a module in many ways, we’ll use a
    simple one here. In the *myturtle.py* file you just created, enter the following
    at the top:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以通过多种方式从模块中导入函数，但在这里我们将使用一种简单的方法。在你刚创建的 *myturtle.py* 文件中，输入以下内容作为开头：
- en: from turtle import *
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: from turtle import *
- en: The from command indicates that we’re importing something from outside our file.
    We then give the name of the module we want to import from, which is turtle in
    this case. We use the import keyword to get the useful code we want *from* the
    turtle module. We use the asterisk (*) here as a *wildcard command* that means
    “import everything from that module.” Make sure to put a space between import
    and the asterisk.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: from命令表示我们正在从文件外部导入内容。接着，我们给出要导入的模块的名称，这里是turtle。我们使用import关键字来获取我们需要的turtle模块中的有用代码。我们在这里使用星号（*）作为*通配符命令*，意味着“从该模块导入所有内容。”确保在import和星号之间留有空格。
- en: Save the file and make sure it’s in the Python folder; otherwise, the program
    will throw an error.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并确保它位于Python文件夹中，否则程序会抛出错误。
- en: '**WARNING**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Do not save the file as* turtle.py. *This filename already exists and will
    cause a conflict with the import from the turtle module! Anything else will work:*
    myturtle.py, turtle2.py, mondayturtle.py, *and so on*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要将文件保存为* turtle.py。*这个文件名已经存在，会与turtle模块的导入发生冲突！其他任何文件名都可以：* myturtle.py,
    turtle2.py, mondayturtle.py, *等等*。'
- en: MOVING YOUR TURTLE
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动你的海龟
- en: 'Now that you’ve imported the turtle module, you’re ready to enter instructions
    to move the turtle. We’ll use the forward() function (abbreviated as fd) to move
    the turtle forward a certain number of steps while leaving a trail behind it.
    Note that forward() is one of the functions we just imported from the turtle module.
    Enter the following to make the turtle go forward:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经导入了海龟模块，可以开始输入指令来移动海龟了。我们将使用forward()函数（简称fd）来让海龟向前移动一定步数，并且在它后面留下痕迹。请注意，forward()是我们刚刚从海龟模块导入的函数之一。输入以下内容来让海龟向前移动：
- en: forward(100)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: forward(100)
- en: Here, we use the forward() function with the number 100 inside parentheses to
    indicate how many steps the turtle should move. In this case, 100 is the *argument*
    we pass to the forward() function. All functions take one or more arguments. Feel
    free to pass other numbers to this function. When you press F5 to run the program,
    a new window should open with an arrow in the center, as shown in [Figure 1-1](ch01.xhtml#ch01fig1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用forward()函数，并在括号内输入数字100，表示海龟应该向前走多少步。在这种情况下，100是我们传递给forward()函数的*参数*。所有函数都接受一个或多个参数。你可以自由传递其他数字给这个函数。当你按下F5运行程序时，应该会打开一个新窗口，中央有一个箭头，如[图
    1-1](ch01.xhtml#ch01fig1)所示。
- en: '![image](../images/f005-01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f005-01.jpg)'
- en: '*Figure 1-1: Running your first line of code!*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：运行你的第一行代码！*'
- en: 'As you can see, the turtle started in the middle of the screen and walked forward
    100 steps (it’s actually 100 pixels). Notice that the default shape is an arrow,
    not a turtle, and the default direction the arrow is facing is to the right. To
    change the arrow into a turtle, update your code so that it looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，海龟从屏幕中间开始，向前走了100步（实际上是100像素）。注意，默认形状是箭头而不是海龟，且箭头默认朝向右方。要将箭头改成海龟，更新你的代码，使其如下所示：
- en: '*myturtle.py*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: from turtle import *
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: from turtle import *
- en: forward(100)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: forward(100)
- en: shape('turtle')
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: shape('turtle')
- en: As you can probably tell, shape() is another function defined in the turtle
    module. It lets you change the shape of the default arrow into other shapes, like
    a circle, a square, or an arrow. Here, the shape() function takes the string value
    'turtle' as its argument, not a number. (You’ll learn more about strings and different
    data types in the next chapter.) Save and run the *myturtle.py* file again. You
    should see something like [Figure 1-2](ch01.xhtml#ch01fig2).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的，shape()是海龟模块中定义的另一个函数。它允许你将默认的箭头形状更改为其他形状，如圆形、方形或箭头。这里，shape()函数的参数是字符串值'turtle'，而不是数字。（你将在下一章学习更多关于字符串和不同数据类型的内容。）再次保存并运行*myturtle.py*文件。你应该能看到类似于[图
    1-2](ch01.xhtml#ch01fig2)的效果。
- en: '![image](../images/f006-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f006-01.jpg)'
- en: '*Figure 1-2: Changing the arrow into a turtle!*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：将箭头变成海龟！*'
- en: Now your arrow should look like a tiny turtle!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的箭头应该看起来像一个小海龟了！
- en: CHANGING DIRECTIONS
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 改变方向
- en: 'The turtle can go only in the direction it’s facing. To change the turtle’s
    direction, you must first make the turtle turn a specified number of degrees using
    the right() or left() function and then go forward. Update your *myturtle.py*
    program by adding the last two lines of code shown next:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 海龟只能朝着它当前所面向的方向前进。要改变海龟的方向，必须先使用right()或left()函数让海龟转动指定的角度，然后再向前移动。通过添加下面的最后两行代码，更新你的*myturtle.py*程序：
- en: '*myturtle.py*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: from turtle import *
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: from turtle import *
- en: forward(100)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: forward(100)
- en: shape('turtle')
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: shape('turtle')
- en: right(45)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: right(45)
- en: forward(150)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: forward(150)
- en: Here, we’ll use the right() function (or rt() for short) to make the turtle
    turn right 45 degrees before moving forward by 150 steps. When you run this code,
    the output should look like [Figure 1-3](ch01.xhtml#ch01fig3).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用right()函数（或者简写为rt()）让海龟右转45度，然后再向前走150步。当你运行这段代码时，输出应该像[图 1-3](ch01.xhtml#ch01fig3)一样。
- en: '![image](../images/f006-02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f006-02.jpg)'
- en: '*Figure 1-3: Changing turtle’s direction*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：改变海龟的方向*'
- en: As you can see, the turtle started in the middle of the screen, went forward
    100 steps, turned right 45 degrees, and then went forward another 150 steps. Notice
    that Python runs each line of code in order, from top to bottom.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，海龟从屏幕的中间开始，向前走了100步，右转45度，然后再向前走150步。请注意，Python按顺序逐行运行代码，从上到下。
- en: 'EXERCISE 1-1: SQUARE DANCE'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-1：广场舞
- en: Return to the *myturtle.py* program. Your first challenge is to modify the code
    in the program using only the forward and right functions so that the turtle draws
    a square.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到*myturtle.py*程序。你的第一个挑战是仅使用forward和right函数修改程序中的代码，让海龟画出一个正方形。
- en: REPEATING CODE WITH LOOPS
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用循环重复代码
- en: Every programming language has a way to automatically repeat commands a given
    number of times. This is useful because it saves you from having to type out the
    same code over and over and cluttering your program. It also helps you avoid typos
    that can prevent your program from running properly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有一种方法可以自动重复执行命令一定次数。这非常有用，因为它可以避免你不断重复输入相同的代码，从而让程序更简洁。它还帮助你避免因输入错误而导致程序无法正常运行。
- en: USING THE FOR LOOP
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用FOR循环
- en: 'In Python we use the for loop to repeat code. We also use the range keyword
    to specify the number of times we go through the loop. Open a new program file
    in IDLE, save it as *for_loop.py*, and then enter the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们使用for循环来重复代码。我们还使用range关键字来指定循环的次数。在IDLE中打开一个新程序文件，保存为*for_loop.py*，然后输入以下内容：
- en: '*for_loop.py*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*for_loop.py*'
- en: 'for i in range(2):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(2):'
- en: print('hello')
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: print('hello')
- en: Here, the range() function creates i, or an *iterator*, for each for loop. The
    iterator is a value that increases each time it’s used. The number 2 in parentheses
    is the argument we pass to the function to control its behavior. This is similar
    to the way we passed different values to the forward() and right() functions in
    previous sections.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，range()函数为每个for循环创建了i，或者称为*迭代器*。迭代器是一个每次使用时增加的值。括号中的数字2是我们传递给函数的参数，用来控制它的行为。这类似于我们在前面的章节中将不同的值传递给forward()和right()函数的方式。
- en: In this case, range(2) creates a sequence of two numbers, 0 and 1\. For each
    of these two numbers, the for command performs the action specified after the
    colon, which is to print the word *hello*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，range(2)创建了一个包含两个数字0和1的序列。对于这两个数字中的每一个，for命令会执行冒号后指定的动作，即打印*hello*。
- en: 'Be sure to indent all the lines of the code you want to repeat by pressing
    TAB (one tab is four spaces). Indentation tells Python which lines are inside
    the loop so for knows exactly what code to repeat. And don’t forget the colon
    at the end; it tells the computer what’s coming up after it is in the loop. When
    you run the program, you should see the following printed in the shell:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 确保通过按TAB键（一个Tab键等于四个空格）缩进你想要重复的所有代码行。缩进告诉Python哪些代码行在循环内，这样for循环就知道确切要重复哪些代码。别忘了冒号，它告诉计算机循环后面会执行什么内容。当你运行程序时，你应该看到以下内容被打印到shell中：
- en: hello
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: 'As you can see, the program prints hello twice because range(2) creates a sequence
    containing two numbers, 0 and 1\. This means that the for command loops over the
    two items in the sequence, printing “hello” each time. Let’s update the number
    in the parentheses, like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，程序打印了两次hello，因为range(2)创建了一个包含两个数字0和1的序列。这意味着for命令会遍历序列中的两个项，每次打印“hello”。让我们像这样更新括号中的数字：
- en: '*for_loop.py*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*for_loop.py*'
- en: 'for i in range(10):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: print('hello')
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: print('hello')
- en: 'When you run this program, you should get hello ten times, like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，你应该看到hello打印十次，像这样：
- en: hello
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: hello
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: hello
- en: 'Let’s try another example since you’ll be writing a lot of for loops in this
    book:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试另一个例子，因为在本书中你将会写很多的for循环：
- en: '*for_loop.py*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*for_loop.py*'
- en: 'for i in range(10):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: print(i)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: 'Because counting begins at 0 rather than 1 in Python, for i in range(10) gives
    us the numbers 0 through 9\. This sample code is saying “for each value in the
    range 0 to 9, display the current number.” The for loop then repeats the code
    until it runs out of numbers in the range. When you run this code, you should
    get something like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Python 中的计数从 0 开始，而不是从 1，所以 `for i in range(10)` 会给我们从 0 到 9 的数字。这段示例代码的意思是：“对于
    0 到 9 范围内的每个值，显示当前的数字。”然后，for 循环会重复这段代码，直到数字用完。运行这段代码时，你应该看到类似这样的输出：
- en: '0'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: '1'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: 'In the future you’ll have to remember that i starts at 0 and ends before the
    last number in a loop using range, but for now, if you want something repeated
    four times, you can use this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以后你需要记住，使用 `range` 循环时，`i` 从 0 开始，到循环中的最后一个数字之前结束，但现在，如果你想让某些操作重复四次，你可以这样做：
- en: 'for i in range(4):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`for i in range(4):`'
- en: It’s as simple as that! Let’s see how we can put this to use.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单！让我们看看如何将其应用到实际中。
- en: USING A FOR LOOP TO DRAW A SQUARE
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 for 循环绘制正方形
- en: In Exercise 1-1 your challenge was to make a square using only the forward()
    and right() functions. To do this, you had to repeat forward(100) and right(90)
    four times. But this required entering the same code multiple times, which is
    time-consuming and can lead to mistakes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在练习 1-1 中，你的挑战是仅使用 `forward()` 和 `right()` 函数来绘制一个正方形。为此，你必须四次重复调用 `forward(100)`
    和 `right(90)`。但这样就需要多次输入相同的代码，既费时又容易出错。
- en: 'Let’s use a for loop to avoid repeating the same code. Here’s the *myturtle.py*
    program, which uses a for loop instead of repeating the forward() and right()
    functions four times:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一个 for 循环来避免重复相同的代码。这里是 *myturtle.py* 程序，它使用一个 for 循环来代替重复调用 `forward()`
    和 `right()` 函数四次：
- en: '*myturtle.py*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: from turtle import *
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`from turtle import *`'
- en: shape('turtle')
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`shape(''turtle'')`'
- en: 'for i in range(4):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`for i in range(4):`'
- en: forward(100)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`forward(100)`'
- en: right(90)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`right(90)`'
- en: Note that shape('turtle') should come right after you import the turtle module
    and before you start drawing. The two lines of code inside this for loop tell
    the turtle to go forward 100 steps and then turn 90 degrees to the right. (You
    might have to face the same way as the turtle to know which way “right” is!) Because
    a square has four sides, we use range(4) to repeat these two lines of code four
    times. Run the program, and you should see something like [Figure 1-4](ch01.xhtml#ch01fig4).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`shape('turtle')` 应该在导入 turtle 模块后、开始绘图之前使用。这个 for 循环中的两行代码指示海龟向前移动 100
    步，然后右转 90 度。（你可能需要和海龟面对同一个方向才能知道“右”是哪个方向！）因为一个正方形有四条边，我们使用 `range(4)` 来重复这两行代码四次。运行程序，你应该看到类似于
    [图 1-4](ch01.xhtml#ch01fig4) 的效果。
- en: '![image](../images/f009-01.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f009-01.jpg)'
- en: '*Figure 1-4: A square made with a for loop*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：用 for 循环绘制的正方形*'
- en: You should see that the turtle moves forward and turns to the right a total
    of four times, finally returning to its original position. You successfully drew
    a square using a for loop!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到海龟总共向前移动并右转四次，最终返回到原来的位置。你成功地使用 for 循环绘制了一个正方形！
- en: CREATING SHORTCUTS WITH FUNCTIONS
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用函数创建快捷方式
- en: Now that we’ve written code to draw a square, we can save all that code to a
    magic keyword that we can call any time we want to use that square code again.
    Every programming language has a way to do this, and in Python it’s called a *function*,
    which is the most important feature of computer programming. Functions make code
    compact and easier to maintain, and dividing a problem up into functions often
    allows you to see the best way of solving it. Earlier you used some built-in functions
    that come with the turtle module. In this section you learn how to define your
    own function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经写好了绘制正方形的代码，我们可以将这些代码保存到一个魔法关键词中，以便我们以后随时调用这个正方形的代码。每种编程语言都有办法做到这一点，而在
    Python 中，它被称为 *函数*，是计算机编程中最重要的特性。函数使代码更加简洁，且更易于维护，分解问题为多个函数通常能帮助我们找到最好的解决方法。之前你已经使用了一些
    turtle 模块中的内置函数，在这一节中你将学习如何定义自己的函数。
- en: 'To define a function you start by giving it a name. This name can be anything
    you want, as long as it’s not already a Python keyword, like list, range, and
    so on. When you’re naming functions, it’s better to be descriptive so you can
    remember what they’re for when you use them again. Let’s call our function square()
    because we’ll be using it to make a square:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个函数，首先给它起个名字。这个名字可以是任何你想要的，只要它不是 Python 关键字，比如 `list`、`range` 等等。在命名函数时，最好使用具有描述性的名字，这样以后使用时可以记得它的用途。我们将我们的函数命名为
    `square()`，因为我们将用它来绘制一个正方形：
- en: '*myturtle.py*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: 'def square():'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`def square():`'
- en: 'for i in range(4):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`for i in range(4):`'
- en: forward(100)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: forward(100)
- en: right(90)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: right(90)
- en: The def command tells Python we’re defining a function, and the word we list
    afterward will become the function name; here, it’s square(). Don’t forget the
    parentheses after square! They’re a sign in Python that you’re dealing with a
    function. Later we’ll put values inside them, but even without any values inside,
    the parentheses need to be included to let Python know you are defining a function.
    Also, don’t forget the colon at the end of the function definition. Note that
    we indent all the code inside the function to let Python know which code goes
    inside it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: def命令告诉Python我们正在定义一个函数，接下来列出的单词将成为函数名称；这里是square()。不要忘记square后面的圆括号！它们在Python中表示你正在处理一个函数。稍后我们会在括号中放入值，但即使括号内没有任何值，也需要包括括号，这样Python才知道你正在定义一个函数。还有，别忘了在函数定义的末尾加上冒号。注意，我们会缩进函数内部的所有代码，让Python知道哪些代码是属于函数内部的。
- en: If you run this program now, nothing will happen. You’ve defined a function,
    but you didn’t tell the program to run it yet. To do this, you need to *call*
    the function at the end of the *myturtle.py* file after the function definition.
    Enter the code shown in [Listing 1-1](ch01.xhtml#ch01list1).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行这个程序，什么也不会发生。你已经定义了一个函数，但你还没有告诉程序去运行它。要做到这一点，你需要在*myturtle.py*文件末尾的函数定义后面*调用*这个函数。输入[列表1-1](ch01.xhtml#ch01list1)中显示的代码。
- en: '*myturtle.py*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: from turtle import *
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: from turtle import *
- en: shape('turtle')
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: shape('turtle')
- en: 'def square():'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'def square():'
- en: 'for i in range(4):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(4):'
- en: forward(100)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: forward(100)
- en: right(90)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: right(90)
- en: square()
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: square()
- en: '*Listing 1-1: The square() function is called at the end of the file*.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表1-1：square()函数在文件末尾被调用*。'
- en: When you call square() at the end like this, the program should run properly.
    Now you can use the square() function at any point later in the program to quickly
    draw another square.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当你像这样在最后调用square()时，程序应该可以正常运行。现在你可以在程序的任何地方再次使用square()函数，快速绘制另一个正方形。
- en: You can also use this function in a loop to build something more complicated.
    For example, to draw a square, turn right a little, make another square, turn
    right a little, and repeat those steps multiple times, putting the function inside
    a loop makes sense.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在循环中使用这个函数来构建更复杂的图形。例如，要绘制一个正方形，稍微向右转一下，画另一个正方形，再向右转一下，重复这些步骤多次，把函数放在循环内会更有意义。
- en: The next exercise shows an interesting-looking shape that’s made of squares!
    It might take your turtle a while to create this shape, so you can speed it up
    by adding the speed() function to *myturtle.py* after shape('turtle'). Using speed(0)
    makes the turtle move the fastest, whereas speed(1) is the slowest. Try different
    speeds, like speed(5) and speed(10), if you want.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个练习展示了一种由正方形组成的有趣形状！可能需要一段时间才能绘制出这个形状，因此你可以通过在*myturtle.py*中shape('turtle')后添加speed()函数来加速它的绘制。使用speed(0)使乌龟移动得最快，而speed(1)则是最慢的。如果你愿意，可以尝试不同的速度，比如speed(5)和speed(10)。
- en: 'EXERCISE 1-2: A CIRCLE OF SQUARES'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-2：正方形的圆
- en: 'Write and run a function that draws 60 squares, turning right 5 degrees after
    each square. Use a loop! Your result should end up looking like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 编写并运行一个绘制60个正方形的函数，每个正方形绘制完后向右转5度。使用循环！你的结果应该像这样：
- en: '![image](../images/f011-01.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f011-01.jpg)'
- en: USING VARIABLES TO DRAW SHAPES
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用变量绘制图形
- en: So far all our squares are the same size. To make squares of different sizes,
    we’ll need to vary the distance the turtle walks forward for each side. Instead
    of changing the definition for the square() function every time we want a different
    size, we can use a *variable*, which in Python is a word that represents a value
    you can change. This is similar to the way *x* in algebra can represent a value
    that can change in an equation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的所有正方形大小都一样。为了绘制不同大小的正方形，我们需要改变乌龟每条边前进的距离。与其每次想要不同的大小时都修改square()函数的定义，我们可以使用一个*变量*，在Python中，变量是代表可以更改的值的一个单词。这类似于代数中的*x*，它可以表示一个在方程中可以变化的值。
- en: In math class, variables are single letters, but in programming you can give
    a variable any name you want! Like with functions, I suggest naming variables
    something descriptive to make reading and understanding your code easier.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，变量通常是单个字母，但在编程中，你可以给变量任何你想要的名称！就像函数一样，我建议给变量取一些具有描述性的名字，这样有助于更容易地阅读和理解你的代码。
- en: USING VARIABLES IN FUNCTIONS
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在函数中使用变量
- en: 'When you define a function, you can use variables as the function’s parameters
    inside the parentheses. For example, you can change your square() function definition
    in the *myturtle.py* program to the following to create squares of any size rather
    than a fixed size:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义一个函数时，可以使用变量作为函数的参数放在括号内。例如，你可以将 *myturtle.py* 程序中的 square() 函数定义更改为如下，来创建任何大小的正方形，而不是固定大小的正方形：
- en: '*myturtle.py*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: 'def square(sidelength):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'def square(sidelength):'
- en: 'for i in range(4):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(4):'
- en: forward(sidelength)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: forward(sidelength)
- en: right(90)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: right(90)
- en: Here, we use sidelength to define the square() function. Now when you call this
    function, you have to place a value, which we call an *argument*, inside the parentheses,
    and whatever number is inside the parentheses will be used in place of sidelength.
    For example, calling square(50) and square(80) would look like [Figure 1-5](ch01.xhtml#ch01fig5).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 sidelength 来定义 square() 函数。现在，当你调用这个函数时，必须在括号内放入一个值，我们称之为 *参数*，无论括号内的数字是什么，它都会取代
    sidelength。比如，调用 square(50) 和 square(80) 将如下所示：[图 1-5](ch01.xhtml#ch01fig5)。
- en: '![image](../images/f012-01.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f012-01.jpg)'
- en: '*Figure 1-5: A square of size 50 and a square of size 80*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-5：一个大小为50的正方形和一个大小为80的正方形*'
- en: When you use a variable to define a function, you can simply call the square()
    function by entering different numbers without having to update the function definition
    each time.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用一个变量来定义一个函数时，你可以简单地通过输入不同的数字来调用 square() 函数，而无需每次更新函数定义。
- en: VARIABLE ERRORS
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变量错误
- en: 'At the moment, if we forget to put a value in the parentheses for the function,
    we’ll get this error:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果我们忘记在函数的括号中填入值，我们将得到这个错误：
- en: 'Traceback (most recent call last):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 'Traceback (most recent call last):'
- en: File "C:/Something/Something/my_turtle.py", line 12, in <module>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 "C:/Something/Something/my_turtle.py"，第12行，位于 <module>
- en: square()
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: square()
- en: 'TypeError: square() missing 1 required positional argument: ''sidelength'''
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeError: square() 缺少 1 个必需的位置参数：''sidelength'''
- en: 'This error tells us that we’re missing a value for sidelength, so Python doesn’t
    know how big to make the square. To avoid this, we can give a default value for
    the length in the first line of the function definition, like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误告诉我们，我们缺少了边长的值，因此Python不知道正方形的大小。为避免此问题，我们可以在函数定义的第一行为边长设置一个默认值，像这样：
- en: 'def square(sidelength=100):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'def square(sidelength=100):'
- en: 'Here, we place a default value of 100 in sidelength. Now if we put a value
    in the parentheses after square, it’ll make a square of that length, but if we
    leave the parentheses empty, it’ll default to a square of sidelength 100 and won’t
    give us an error. The updated code should produce the drawing shown in [Figure
    1-6](ch01.xhtml#ch01fig6):'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为 sidelength 设置了一个默认值100。现在，如果我们在 square 后面的括号内输入一个值，它将画出那个长度的正方形；如果我们留空括号，它将默认画出边长为100的正方形，并且不会给我们错误。更新后的代码应生成如下所示的图形：[图
    1-6](ch01.xhtml#ch01fig6)：
- en: square(50)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: square(50)
- en: square(30)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: square(30)
- en: square()
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: square()
- en: '![image](../images/f012-02.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f012-02.jpg)'
- en: '*Figure 1-6: A default square of size 100, a square of size 50, and a square
    of size 30*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-6：一个默认大小为100的正方形，一个大小为50的正方形，一个大小为30的正方形*'
- en: Setting a default value like this makes it easier to use our function without
    having to worry about getting errors if we do something wrong. In programming
    this is called making the program more *robust*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 设置像这样的默认值使得使用我们的函数变得更容易，不必担心如果做错了什么会出错。在编程中，这被称为让程序变得更加 *健壮*。
- en: 'EXERCISE 1-3: TRI AND TRI AGAIN'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-3：尝试再试
- en: Write a triangle() function that will draw a triangle of a given “side length.”
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 triangle() 函数，绘制一个给定“边长”的三角形。
- en: EQUILATERAL TRIANGLES
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 等边三角形
- en: A *polygon* is a many-sided figure. An *equilateral triangle* is a special type
    of polygon that has three equal sides. [Figure 1-7](ch01.xhtml#ch01fig7) shows
    what it looks like.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *多边形* 是一个多边形的图形。一个 *等边三角形* 是一种特殊类型的多边形，它有三个相等的边。[图 1-7](ch01.xhtml#ch01fig7)
    展示了它的样子。
- en: '![image](../images/f013-01.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f013-01.jpg)'
- en: '*Figure 1-7: The angles in an equilateral triangle, including one external
    angle*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：等边三角形的角度，包括一个外角*'
- en: 'An equilateral triangle has three equal internal angles of 60 degrees. Here’s
    a rule you might remember from geometry class: all three angles of an equilateral
    triangle add up to 180 degrees. In fact, this is true for all triangles, not just
    equilateral triangles.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 等边三角形有三个相等的内角，角度为60度。这是你可能从几何课上记得的一个规则：所有等边三角形的三个角度加起来为180度。实际上，这对于所有三角形都适用，不仅仅是等边三角形。
- en: WRITING THE TRIANGLE() FUNCTION
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写 triangle() 函数
- en: 'Let’s use what you’ve learned so far to write a function that makes the turtle walk
    in a triangular path. Because each angle in an equilateral triangle is 60 degrees,
    you can update the right() movement in your square() function to 60, like this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用你迄今为止学到的知识，编写一个函数，使海龟沿着三角形路径行走。因为等边三角形的每个角度都是60度，你可以将 `square()` 函数中的 `right()`
    移动更新为60度，像这样：
- en: '*myturtle.py*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*myturtle.py*'
- en: 'def triangle(sidelength=100):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'def triangle(sidelength=100):'
- en: 'for i in range(3):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: forward(sidelength)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: forward(sidelength)
- en: right(60)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: right(60)
- en: triangle()
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: triangle()
- en: But when you save and run this program, you won’t get a triangle. Instead, you'll
    see something like [Figure 1-8](ch01.xhtml#ch01fig8).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 但当你保存并运行这个程序时，你不会得到一个三角形。相反，你会看到类似 [图 1-8](ch01.xhtml#ch01fig8) 的内容。
- en: '![image](../images/f014-01.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f014-01.jpg)'
- en: '*Figure 1-8: A first attempt at drawing a triangle*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-8：首次尝试绘制三角形*'
- en: 'That looks like we’re starting to draw a hexagon (a six-sided polygon), not
    a triangle. We get a hexagon instead of a triangle because we entered 60 degrees,
    which is the *internal* angle of an equilateral triangle. We need to enter the
    *external* angle to the right() function instead, because the turtle *turns* the
    external angle, not the internal angle. This wasn’t a problem with the square
    because it just so happens the internal angle of a square and the external angle
    are the same: 90 degrees.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们开始绘制的是一个六边形（六边形多边形），而不是三角形。我们得到一个六边形而不是三角形，是因为我们输入了60度，这是等边三角形的*内角*。我们需要将*外角*输入到
    `right()` 函数中，因为海龟是转动外角，而不是内角。正方形没有这个问题，因为正方形的内角和外角恰好是相同的：90度。
- en: To find the external angle for a triangle, simply subtract the internal angle
    from 180\. This means the external angle of an equilateral triangle is 120 degrees.
    Update 60 in the code to 120, and you should get a triangle.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到三角形的外角，只需从180度中减去内角的值。也就是说，等边三角形的外角是120度。将代码中的60更新为120，你就应该得到一个三角形。
- en: 'EXERCISE 1-4: POLYGON FUNCTIONS'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-4：多边形函数
- en: Write a function called polygon that takes an integer as an argument and makes
    the turtle draw a polygon with that integer’s number of sides.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为 `polygon` 的函数，该函数接收一个整数作为参数，并让海龟绘制一个具有该整数个边的多边形。
- en: MAKING VARIABLES VARY
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让变量变化
- en: 'There’s more we can do with variables: we can automatically increase the variable
    by a certain amount so that each time we run the function, the square is bigger
    than the last. For example, using a length variable, we can make a square, then
    increase the length variable a little before making the next square by incrementing
    the variable like this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 变量还有更多的用途：我们可以自动增加变量的值，使得每次运行函数时，绘制的正方形比上一个更大。例如，使用一个长度变量，我们可以绘制一个正方形，然后在绘制下一个正方形之前稍微增加该长度变量，如下所示：
- en: length = length + 5
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: length = length + 5
- en: As a math guy, this line of code didn’t make sense to me when I first saw it!
    How can “length equal length + 5”? It’s not possible! But code isn’t an equation,
    and an equal sign (=) in this case doesn’t mean “this side equals that side.”
    *The equal sign in programming means we’re assigning a value*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个数学爱好者，当我第一次看到这行代码时，我完全不理解！怎么可能“length 等于 length + 5”？这不可能！但是代码并不是方程式，在这种情况下，等号（=）并不意味着“这一边等于那一边”。*在编程中，等号意味着我们在赋值*。
- en: 'Take the following example. Open the Python shell and enter the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下示例。打开 Python 终端并输入以下代码：
- en: '>>> radius = 10'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> radius = 10'
- en: 'This means we’re creating a variable called radius (if there isn’t one already)
    and assigning it the value 10\. You can always assign a different value to it
    later, like this:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们正在创建一个名为 `radius` 的变量（如果它还不存在的话），并将其赋值为 10。你以后可以随时为它赋不同的值，像这样：
- en: radius = 20
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: radius = 20
- en: 'Press ENTER and your code will be executed. This means the value 20 will be
    assigned to the radius variable. To check whether a variable is equal to something,
    use double equal signs (==). For example, to check whether the value of the radius
    variable is 20, you can enter this into the shell:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 键，代码将会被执行。这意味着值 20 将被赋给 `radius` 变量。要检查一个变量是否等于某个值，可以使用双等号（==）。例如，要检查
    `radius` 变量的值是否为 20，你可以在终端中输入以下代码：
- en: '>>> radius == 20'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> radius == 20'
- en: 'Press ENTER and it should print the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 键，它应该打印出以下内容：
- en: 'True'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: 'Now the value of the radius variable is 20\. It’s often useful to increment
    variables rather than assign them number values manually. You can use a variable
    called count to count how many times something happens in a program. It should
    start at 0 and go up by one after every occurrence. To make a variable go up by
    one in value, you add 1 to its value and then assign the new value to the variable,
    like this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在半径变量的值是 20。递增变量通常比手动赋值更有用。你可以使用一个叫做 count 的变量来计数程序中某个事件发生了多少次。它应该从 0 开始，每发生一次事件就增加
    1。为了使一个变量的值增加 1，你可以将其值加 1 然后将新值赋给该变量，像这样：
- en: count = count + 1
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: count = count + 1
- en: 'You can also write this as follows to make the code more compact:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以按如下方式编写代码，使代码更加简洁：
- en: count += 1
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: count += 1
- en: 'This means “add 1 to my count variable.” You can use addition, subtraction,
    multiplication, and division in this notation. Let’s see it in action by running
    this code in the Python shell. We’ll assign x the value 12 and y the value 3,
    and then make x go up by y:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着“把 1 加到我的 count 变量”。你可以使用加法、减法、乘法和除法来表示这种语法。让我们通过在 Python shell 中运行以下代码来看看实际效果。我们将
    x 赋值为 12，y 赋值为 3，然后让 x 增加 y 的值：
- en: '>>> x = 12'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = 12'
- en: '>>> y = 3'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> y = 3'
- en: '>>> x += y'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x += y'
- en: '>>> x'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '15'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '>>> y'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> y'
- en: '3'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: 'Notice y didn’t change. We can increment x using addition, subtraction, multiplication,
    and division with similar notation:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 y 没有变化。我们可以使用加法、减法、乘法和除法来递增 x，方法类似：
- en: '>>> x += 2'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x += 2'
- en: '>>> x'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '17'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: 'Now we’ll set x to one less than its current value:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将 x 设置为当前值减去 1：
- en: '>>> x -= 1'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x -= 1'
- en: '>>> x'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '16'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: 'We know that x is 16\. Now let’s set x to two times its current value:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 x 是 16。现在让我们将 x 设置为当前值的两倍：
- en: '>>> x *= 2'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x *= 2'
- en: '>>> x'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '32'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: 'Finally, we can set x to a quarter of its value by dividing it by 4:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过将 x 除以 4 来将它设置为当前值的四分之一：
- en: '>>> x /= 4'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x /= 4'
- en: '>>> x'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '8.0'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '8.0'
- en: Now you know how to increment a variable using arithmetic operators followed
    by an equal sign. In sum, x += 3 will make x go up by 3, whereas x -= 1 will make
    it go down by 1, and so on.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何使用算术运算符和等号递增一个变量了。总结一下，x += 3 会使 x 增加 3，而 x -= 1 会使它减少 1，依此类推。
- en: 'You can use the following line of code to make the length increment by 5 every
    loop, which will come in handy in the next exercises:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码使长度在每次循环时递增 5，这将在接下来的练习中派上用场：
- en: length += 5
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: length += 5
- en: With this notation, every time the length variable is used, 5 is added to the
    value and saved into the variable.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种语法，每次使用 length 变量时，5 会被加到该值上并保存在变量中。
- en: 'EXERCISE 1-5: TURTLE SP IRAL'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-5：TURTLE 螺旋
- en: 'Make a function to draw 60 squares, turning 5 degrees after each square and
    making each successive square bigger. Start at a length of 5 and increment 5 units
    every square. It should look like this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个函数绘制 60 个方形，每画一个方形后旋转 5 度，每个后续的方形比前一个大。起始长度为 5，每个方形递增 5 单位。它应该像这样：
- en: '![image](../images/f016-01.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f016-01.jpg)'
- en: SUMMARY
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you learned how to use Python’s turtle module and its built-in
    functions like forward() and right() to draw different shapes. You also saw that
    the turtle can perform many more functions than those we covered here. There are
    dozens more that I encourage you to experiment with before moving on to the next
    chapter. If you do a web search for “python turtle,” the first result will probably
    be the turtle module documentation on the official Python website (*[https://python.org/](https://python.org/)*)
    website. You’ll find all the turtle methods on that page, some of which is shown
    in [Figure 1-9](ch01.xhtml#ch01fig9).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何使用 Python 的 turtle 模块及其内置函数，如 forward() 和 right()，来绘制不同的形状。你还看到，turtle
    能执行比我们这里讲解的更多功能。还有很多其他功能，我鼓励你在进入下一章之前先进行实验。如果你在网上搜索 “python turtle”，第一个结果可能会是官方
    Python 网站上的 turtle 模块文档 (*[https://python.org/](https://python.org/)*)。你将在该页面上找到所有的
    turtle 方法，其中一些在[图 1-9](ch01.xhtml#ch01fig9)中有展示。
- en: '![image](../images/f017-01.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f017-01.jpg)'
- en: '*Figure 1-9: You can find many more turtle functions and methods on the Python
    website!*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-9：你可以在 Python 官网找到更多的 turtle 函数和方法！*'
- en: You learned how to define your own functions, thus saving valuable code that
    can be reused at any time. You also learned how to run code multiple times using
    for loops without having to rewrite the code. Knowing how to save time and avoid
    mistakes using functions and loops will be useful when you build more complicated
    math tools later on.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何定义自己的函数，从而节省了宝贵的代码，可以随时重用。你还学会了如何使用 for 循环多次运行代码，而不必重写代码。掌握如何使用函数和循环节省时间并避免错误，对于以后构建更复杂的数学工具会非常有用。
- en: In the next chapter we’ll build on the basic arithmetic operators you used to
    increment variables. You’ll learn more about the basic operators and data types
    in Python and how to use them to build simple computation tools. We’ll also explore
    how to store items in lists and use indices to access list items.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将基于你用于递增变量的基本算术运算符进行扩展。你将学习更多关于 Python 中基本运算符和数据类型的内容，并了解如何使用它们来构建简单的计算工具。我们还将探讨如何将项存储在列表中，并使用索引来访问列表项。
- en: 'EXERCISE 1-6: A STAR IS BORN'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1-6：星星的诞生
- en: 'First, write a “star” function that will draw a five-pointed star, like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编写一个“star”函数，它将绘制一个五角星，像这样：
- en: '![image](../images/f018-01.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f018-01.jpg)'
- en: 'Next, write a function called starSpiral() that will draw a spiral of stars,
    like this:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写一个名为 starSpiral() 的函数，它将绘制一个星形螺旋，像这样：
- en: '![image](../images/f018-02.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f018-02.jpg)'
