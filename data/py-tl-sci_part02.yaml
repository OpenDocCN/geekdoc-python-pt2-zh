- en: '**PART II'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第二部分**'
- en: A PYTHON PRIMER**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**PYTHON 入门**'
- en: If you’ve never used the Python programming language before, this primer will
    get you up to speed quickly. You’ll learn the language’s basics, as well as helpful
    hints and tips for solving real-world problems on your own. If you already know
    some Python, use this primer as reference material to jog your memory when needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未使用过 Python 编程语言，这本入门书将帮助你快速上手。你将学习语言的基础知识，以及一些解决实际问题的有用提示和技巧。如果你已经了解一些
    Python，可以将这本入门书作为参考材料，在需要时帮助你回忆起相关内容。
- en: When you learn a human language in school, you begin with the alphabet and parts
    of speech like nouns, verbs, and adverbs. Next, you might learn how to diagram
    sentences using these building blocks, stringing them together to form cohesive
    thoughts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在学校学习人类语言时，你会从字母表和名词、动词、副词等词类开始。接下来，你可能会学习如何使用这些构建块来分析句子，将它们串联起来形成连贯的思想。
- en: Learning a programming language works much the same way. Just as human language
    uses grammatical rules to join parts of speech into understandable expressions,
    Python uses syntactical rules to join objects into executable programs. But this
    isn’t a linear process. Like a toddler learning to speak, a whole lot happens
    at the same time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 学习编程语言的方式与学习人类语言非常相似。就像人类语言通过语法规则将词语连接成可理解的表达，Python 也通过语法规则将对象连接成可执行的程序。但这不是一个线性过程。就像一个学说话的幼儿，很多事情会同时发生。
- en: From the start, you’ll acquire a lot of “nested” knowledge. You can’t understand
    what a variable is without understanding what an object is, and you can’t understand
    objects without understanding values, or values without data types. Therefore,
    if you browse the tables of contents in beginner programming books, you won’t
    see a consistent approach to presenting the information.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，你将获得大量“嵌套”的知识。你无法理解变量是什么，直到你理解对象是什么；而你无法理解对象，直到你理解值，或者无法理解值，直到你理解数据类型。因此，如果你浏览初学者编程书籍的目录，你会发现它们呈现信息的方式并不一致。
- en: In the chapters that follow, I’ll attempt to progress through the language logically
    so that each step builds on the one that came before. There’ll be times, however,
    when we’ll need to run functions before we define them, or touch on a concept
    before fully developing it. That’s okay. Humans learn by doing, and we’re good
    at filling in knowledge gaps using context and interpolation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将尝试按照逻辑顺序推进语言的学习，使得每一步都在前一步的基础上构建。然而，有时候我们可能需要先运行某些函数再进行定义，或者在完全展开一个概念之前就提到它。没关系，人类是通过实践来学习的，我们擅长利用上下文和推断填补知识空白。
- en: 'Of course, this short introduction can’t cover all the features of Python in
    detail, but it should give you a good foundation to begin programming on your
    own. If you want a more thorough introduction to Python, I suggest reading *Python
    Crash Course, 2nd edition: A Hands-On, Project-Based Introduction to Programming*
    (No Starch Press, 2019) by Eric Matthes. Alternatively, for a more technical and
    hard-core introduction, try *Learning Python,* 5th edition (O’Reilly Media, 2013)
    by Mark Lutz. To expand your knowledge beyond the beginner books, I suggest *Beyond
    the Basic Stuff with Python: Best Practices for Writing Clean Code* (No Starch
    Press, 2021) by Al Sweigart.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '当然，这个简短的介绍无法详细涵盖 Python 的所有特性，但它应该为你提供一个良好的基础，帮助你开始自己的编程之旅。如果你想要更深入地了解 Python，我建议阅读
    *Python Crash Course, 2nd edition: A Hands-On, Project-Based Introduction to Programming*（No
    Starch Press, 2019），作者是 Eric Matthes。或者，如果你想要一个更技术性、更深入的介绍，可以尝试 *Learning Python*（第五版，O’Reilly
    Media, 2013），作者是 Mark Lutz。为了拓展你在初学者书籍之外的知识，我建议阅读 *Beyond the Basic Stuff with
    Python: Best Practices for Writing Clean Code*（No Starch Press, 2021），作者是 Al Sweigart。'
- en: To find online tutorials, bootcamps, videos, and so on, visit *[https://wiki.python.org/moin/BeginnersGuide/Programmers/](https://wiki.python.org/moin/BeginnersGuide/Programmers/)*.
    This Wiki page includes a section for nonprogrammers (*[https://wiki.python.org/moin/BeginnersGuide/NonProgrammers/](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers/)*)
    as well as for those with a range of programming experience and will help guide
    you to additional resources. I’ve also found the *Real Python* site (*[https://realpython.com/](https://realpython.com/)*)
    to be a great source of Python tutorials and information. It includes both free
    and paid content.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查找在线教程、编程训练营、视频等资源，请访问 *[https://wiki.python.org/moin/BeginnersGuide/Programmers/](https://wiki.python.org/moin/BeginnersGuide/Programmers/)*。该
    Wiki 页面包括面向非程序员的部分 (*[https://wiki.python.org/moin/BeginnersGuide/NonProgrammers/](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers/)*)，同时也为不同编程经验的学习者提供了资源，帮助你找到更多的学习资料。我还发现
    *Real Python* 网站 (*[https://realpython.com/](https://realpython.com/)*)，是一个很好的
    Python 教程和信息来源。它提供了免费的内容和付费内容。
- en: And to be a true Pythonista, you’ll want to check out the *Zen of Python* (*[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)*),
    a collection of 19 guiding principles that influence the design of the Python
    language. According to these principles, “There should be one—and preferably only
    one—obvious way to do something.” In the spirit of providing a single obvious
    “right way” of doing things and building consensus around these practices, the
    Python community releases coding conventions known as *Python Enhancement Proposals*,
    or *PEPs*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为一名真正的 Python 爱好者，你需要了解 *Python 的禅意* (*[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)*)，这是一组影响
    Python 语言设计的 19 条指导原则。根据这些原则，“做某件事应该有一个——并且最好只有一个——明显的方法。” 本着提供单一明显的“正确方式”并围绕这些实践建立共识的精神，Python
    社区发布了被称为 *Python 增强提案* 或 *PEP* 的编码规范。
- en: The most important PEP is *PEP 8* (*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*),
    a set of standards for the style of your Python code. It includes naming conventions;
    rules about the use of blank lines, tabs, and spaces; maximum line lengths; the
    format of comments; and so on. The goal is to improve the readability of code
    and make it consistent across a wide spectrum of Python programs. Another useful
    style guide is PEP 257 (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*),
    which covers code documentation. We look at both these guides in the chapters
    that follow.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的 PEP 是 *PEP 8* (*[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)*)，它是关于
    Python 代码风格的一套标准。它包括命名规范、关于空行、制表符和空格使用的规则、最大行长度、注释格式等。其目标是提高代码的可读性，并在广泛的 Python
    程序中保持一致性。另一个有用的风格指南是 PEP 257 (*[https://www.python.org/dev/peps/pep-0257/](https://www.python.org/dev/peps/pep-0257/)*)，它涵盖了代码文档的编写。在接下来的章节中，我们将详细介绍这两个指南。
- en: 'Finally, if books and online searches fail to meet your needs, the next step
    is to ask someone for help. If no coworkers or classmates can help, you can do
    this online, either for a fee or at free forums like Stack Overflow (*[https://stackoverflow.com/](https://stackoverflow.com/)*).
    But be warned: the members of these sites don’t suffer fools gladly. Be sure to
    read their “How do I ask a good question?” pages before posting. You can find
    advice and counsel for Stack Overflow at *[http://stackoverflow.com/help/how-to-ask/](http://stackoverflow.com/help/how-to-ask/)*.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果书籍和在线搜索无法满足你的需求，下一步就是寻求他人的帮助。如果没有同事或同学能够帮忙，你可以在网上寻求帮助，既可以付费也可以在像 Stack
    Overflow 这样的免费论坛上找到答案 (*[https://stackoverflow.com/](https://stackoverflow.com/)*)。但要警告你的是：这些网站的成员不容忍愚蠢的提问。在发帖前，一定要阅读他们的“如何提问？”页面。你可以在
    *[http://stackoverflow.com/help/how-to-ask/](http://stackoverflow.com/help/how-to-ask/)*
    找到 Stack Overflow 的相关建议和指导。
