- en: '**21'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**21**'
- en: MANAGING DATES AND TIMES WITH PYTHON AND PANDAS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Python 和 Pandas 管理日期和时间**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: In mathematics, a *time series* is a series of data points indexed in chronological
    order. They are common components in scientific datasets where observations are
    made over periods of time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，*时间序列* 是按时间顺序索引的一系列数据点。它们是科学数据集中常见的组件，其中观察是在一段时间内进行的。
- en: Although you and I recognize “11/11/1918” as a date, a computer sees this value
    as a string. To intelligently work with calendar dates as well as hours, minutes,
    seconds, and so on, Python and pandas treat them as special objects. These objects
    are “aware” of the mechanics of the Gregorian calendar, the sexagesimal (base
    60) time system, time zones, daylight-saving time, leap years, and more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你我都将“11/11/1918”识别为日期，但计算机将此值视为字符串。为了智能地处理日历日期以及小时、分钟、秒等，Python 和 pandas 将它们视为特殊对象。这些对象“知道”公历日历、六十进制（基础
    60）时间系统、时区、夏令时、闰年等机制。
- en: Native Python supports times series through its `datetime` module, and pandas
    is oriented toward using arrays of dates, such as for an index or column in a
    DataFrame. In addition to its built-in tools and algorithms for working with both
    fixed-frequency and irregular time series, pandas also uses the `datetime` module.
    Observations in *fixed frequency* time series are those recorded at regular intervals
    such as once a day. Otherwise, the time series is said to be *irregular* in nature.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 Python 支持通过其 `datetime` 模块的时间序列，而 pandas 则是面向使用日期数组，例如 DataFrame 中的索引或列。除了其用于处理固定频率和不规则时间序列的内置工具和算法外，pandas
    还使用 `datetime` 模块。*固定频率* 时间序列中的观察是以固定间隔（例如每天一次）记录的。否则，时间序列被认为是*不规则*的性质。
- en: We’ll look at both the Python and pandas approaches here, with the goal of introducing
    you to the basics of working with time series and making you conversant in the
    subject. For more detail, you can visit *[https://docs.python.org/3/library/datetime.html](https://docs.python.org/3/library/datetime.html)*
    for Python’s `datetime` module and *[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)*
    for the pandas tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里看一看 Python 和 pandas 的方法，目标是介绍与时间序列工作的基础，并使您熟悉这一主题。更详细的信息，您可以访问 *[https://docs.python.org/3/library/datetime.html](https://docs.python.org/3/library/datetime.html)*
    获取 Python 的 `datetime` 模块和 *[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)*
    获取 pandas 工具。
- en: '**Python datetime Module**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Python datetime 模块**'
- en: Python’s built-in `datetime` module includes the `date`, `time`, and combined
    `datetime` types. By treating time information as specific data types, Python
    knows how to manipulate it properly and efficiently. This includes working with
    time zones, daylight saving time (DST), leap years, and different international
    formatting methods.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的内置 `datetime` 模块包括 `date`、`time` 和组合的 `datetime` 类型。通过将时间信息视为特定数据类型，Python
    知道如何正确高效地操作它。这包括处理时区、夏令时 (DST)、闰年和不同的国际格式化方法。
- en: In this brief introduction, we’ll look at marking time series data with *timestamps*,
    for specific time instants; time *intervals*, delineated by a starting and ending
    timestamp; and fixed *periods*, such as a year. You can keep track of *elapsed*
    time, too, such as the time relative to the start of an experiment. We’ll also
    look at converting `datetime` objects to strings and back again.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简要介绍中，我们将看一看如何用 *时间戳* 标记时间序列数据，表示特定的时间点；时间 *间隔*，由开始和结束时间戳划分；以及 *固定周期*，如一年。您还可以追踪*经过的*时间，例如相对于实验开始的时间。我们还将讨论如何将
    `datetime` 对象转换为字符串，然后再转换回来。
- en: '***Getting the Current Date and Time***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***获取当前日期和时间***'
- en: 'The `datetime.now()` method returns the current date and time based on your
    computer’s clock. In an environment where you have NumPy, pandas, and Matplotlib
    installed, start the Jupyter Qt console and enter the following (you will see
    a different date, for obvious reasons):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime.now()` 方法基于您计算机的时钟返回当前日期和时间。在安装了 NumPy、pandas 和 Matplotlib 的环境中，启动
    Jupyter Qt 控制台并输入以下内容（您将看到一个不同的日期，由于明显的原因）：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `now()` method returns dates in ISO 8601 format (year-month-day). ISO 8601
    is the global standard format for numeric dates.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`now()` 方法以 ISO 8601 格式（年-月-日）返回日期。ISO 8601 是数字日期的全球标准格式。'
- en: The `now` variable represents the `datetime` data type. Other types for storing
    date and time information are shown in [Table 20-1](ch20.xhtml#ch020tab1).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`now` 变量表示 `datetime` 数据类型。用于存储日期和时间信息的其他类型见 [表20-1](ch20.xhtml#ch020tab1)。'
- en: '**Table 21-1:** Data Types in the Python `datetime` Module'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**表21-1：** Python `datetime` 模块中的数据类型'
- en: '| **Datatype** | **Description** |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型** | **描述** |'
- en: '| --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `date` | Gregorian calendar date in year, month, day format |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `date` | 公历日期，格式为年、月、日 |'
- en: '| `datetime` | Combined `date` and `time` types |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `datetime` | 组合的 `date` 和 `time` 类型 |'
- en: '| `time` | Twenty-four-hour (military) time in hours, minutes, seconds, and
    microseconds |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `time` | 二十四小时制（军用）时间，包含小时、分钟、秒和微秒 |'
- en: '| `timedelta` | Difference between two `datetime` objects in days, seconds,
    and microseconds |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `timedelta` | 两个 `datetime` 对象之间的差值，单位为天数、秒数和微秒数 |'
- en: '| `tzinfo` | Time zone information |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `tzinfo` | 时区信息 |'
- en: 'To access `date` and `time` data in the `now` object, or any other timestamp,
    use its `datetime` attributes, called with dot notation:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 `now` 对象中的 `date` 和 `time` 数据，或任何其他时间戳，使用它的 `datetime` 属性，使用点符号调用：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To extract the `date` and `time` *objects*, call `datetime` methods with the
    same name:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取 `date` 和 `time` *对象*，请使用相同名称调用 `datetime` 方法：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '***Assigning Timestamps and Calculating Time Delta***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分配时间戳并计算时间差***'
- en: 'To assign a timestamp to a variable, pass `datetime()` the date and time in
    the year-month-day-hour-minute-second-microsecond format:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要将时间戳分配给变量，将 `datetime()` 与年-月-日-小时-分钟-秒-微秒格式的日期和时间传递：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To view it as a string, pass the variable to Python’s built-in `str()` function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其作为字符串查看，将变量传递给 Python 内置的 `str()` 函数：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you’re not interested in time data, just pass `datetime()` the date:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不关心时间数据，只需将 `datetime()` 与日期一起传递：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A `timedelta` object represents a *duration*, or the difference between two
    dates or times. Subtracting two `datetime` objects yields the elapsed time. To
    demonstrate, let’s calculate Python creator Guido van Rossum’s age on October
    28, 2022:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`timedelta` 对象表示一个 *持续时间*，即两个日期或时间之间的差异。减去两个 `datetime` 对象得到的是经过的时间。为了演示，我们来计算
    Python 创建者 Guido van Rossum 在 2022 年 10 月 28 日的年龄：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you include both date and time information, the `timedelta` object will
    present days, seconds, and microseconds, which are the only units stored internally:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你同时包含日期和时间信息，`timedelta` 对象将显示天数、秒数和微秒数，这些是唯一存储的内部单位：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `timedelta` object supports arithmetic operations like addition, subtraction,
    multiplication, division, modulus, and more. To see the complete list of supported
    operations, visit *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timedelta.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timedelta.html)*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`timedelta` 对象支持加法、减法、乘法、除法、取模等算术运算。要查看支持的完整操作列表，请访问 *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timedelta.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timedelta.html)*。'
- en: '***Formatting Dates and Times***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***格式化日期和时间***'
- en: As you’ve seen, the datetime output isn’t very human friendly. Converting it
    to a string using the `str()` function helps, but you can accomplish even more
    by using the `datetime` `strftime()` method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，datetime 输出并不十分友好。使用 `str()` 函数将其转换为字符串可以有所帮助，但你还可以通过使用 `datetime` 的 `strftime()`
    方法做得更多。
- en: The `strftime()` method uses C programming language (ISO C89)–compatible specifications,
    or *directives*, preceded by the `%` sign. Some of the most useful directives
    are listed in [Table 21-2](ch21.xhtml#ch021tab2).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`strftime()` 方法使用 C 语言（ISO C89）兼容的规范或 *指令*，这些指令以 `%` 符号开头。常用的一些指令列在 [表21-2](ch21.xhtml#ch021tab2)
    中。'
- en: '**Table 21-2:** Selected `Datetime` Format Specifications'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**表21-2：** 选择的 `Datetime` 格式规范'
- en: '| **Directive** | **Description** | **Examples** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **指令** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| %a | Weekday as abbreviated name | Sun, So, Mon, Mo, Sat, Sa |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| %a | 缩写的星期几名称 | Sun, So, Mon, Mo, Sat, Sa |'
- en: '| %A | Weekday as full name | Sunday, Sonntag |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| %A | 星期几的全名 | Sunday, Sonntag |'
- en: '| `%d` | Two-digit weekday | 01, 02, . . ., 05 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 两位数的星期几 | 01, 02, ..., 05 |'
- en: '| %b | Month as abbreviated name | Jan, Feb, Dec, Dez |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| %b | 月份的缩写 | Jan, Feb, Dec, Dez |'
- en: '| %B | Month as full name | February, Februar |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| %B | 月份的全名 | February, Februar |'
- en: '| `%m` | Two-digit month | 01, 02, . . ., 31 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 两位数的月份 | 01, 02, ..., 31 |'
- en: '| `%y` | Two-digit year | 00, 01, . . ., 99 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `%y` | 两位数的年份 | 00, 01, ..., 99 |'
- en: '| `%Y` | Year with century as a decimal number | 0001, . . . 2022, . . . 9999
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 带世纪的年份，十进制数 | 0001, ..., 2022, ..., 9999 |'
- en: '| `%H` | Twenty-four-hour clock hour | 01, 02, . . ., 23 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `%H` | 二十四小时制的小时 | 01, 02, ..., 23 |'
- en: '| `%I` | Twelve-hour clock hour | 01, 02, . . ., 12 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `%I` | 十二小时制的小时数 | 01, 02, . . ., 12 |'
- en: '| %p | AM or PM | AM, am, PM, pm |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| %p | 上午或下午 | AM, am, PM, pm |'
- en: '| `%M` | Two-digit minute | 01, 02, . . ., 59 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 两位数的分钟数 | 01, 02, . . ., 59 |'
- en: '| `%S` | Two-digit second (60, 61 account for leap seconds) | 01, 02, . . .,
    59 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `%S` | 两位数的秒数（60, 61用于闰秒） | 01, 02, . . ., 59 |'
- en: '| `%f` | Microsecond as decimal number (zero-padded six digits) | 000000, 000001,
    . . ., 999999 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `%f` | 微秒的十进制表示（零填充六位数字） | 000000, 000001, . . ., 999999 |'
- en: '| `%w` | Integer weekday with 0 for Sunday | 0, 1, . . ., 6 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `%w` | 星期几的整数，0代表星期日 | 0, 1, . . ., 6 |'
- en: '| `%W` | Week number of year (Monday = 1st day of week; days before 1st Monday
    are week 0) | 00, 01, . . . 53 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `%W` | 一年中的星期数（星期一 = 一周的第一天；在第一个星期一之前的天数为第0周） | 00, 01, . . . 53 |'
- en: '| `%U` | Week number of year (Sunday = 1st day of week; days before 1st Sunday
    are week 0) | 00, 01, . . . 53 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `%U` | 一年中的星期数（星期日 = 一周的第一天；在第一个星期日之前的天数为第0周） | 00, 01, . . . 53 |'
- en: '| `%Z` | Time zone name (empty is naive object) | (empty), UTC, GMT |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `%Z` | 时区名称（空为天真对象） | (空)，UTC，GMT |'
- en: '| %c | Appropriate date and time representation for locale | Wed Mar 30 09:14:12
    2022 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| %c | 适合地区的日期和时间表示 | Wed Mar 30 09:14:12 2022 |'
- en: '| %x | Appropriate date representation for locale | 07/31/1984, 31.07.1984
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| %x | 适合地区的日期表示 | 07/31/1984, 31.07.1984 |'
- en: '| %X | Appropriate time representation for locale | 13:30:15 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| %X | 适合地区的时间表示 | 13:30:15 |'
- en: '| `%F` | Shortcut for `%Y-%m-%d` format | 2022-03-30 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `%F` | `%Y-%m-%d`格式的快捷方式 | 2022-03-30 |'
- en: '| `%D` | Shortcut for `%m/%d/%y` format | 03/30/22 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `%D` | `%m/%d/%y`格式的快捷方式 | 03/30/22 |'
- en: '| Bold = locale-specific date formatting |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 粗体 = 地区特定的日期格式 |'
- en: 'In the console, enter the following to see some example formats:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中，输入以下内容以查看一些示例格式：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can find more formatting directives at *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Period.strftime.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Period.strftime.html)*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Period.strftime.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Period.strftime.html)*
    找到更多格式化指令。
- en: '***Converting Strings to Dates and Times***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将字符串转换为日期和时间***'
- en: Sometimes, you might need to import date and time information from a file rather
    than creating it yourself. If the input data is in string format, you’ll need
    to convert the strings into dates. This is basically the opposite of the operation
    we performed in the previous section, and you can do this using either the `dateutil.parser.parse()`
    method or the `datetime.strptime()` method. The third-party `dateutil` date utility
    package extends the `datetime` module and is automatically installed with pandas.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要从文件导入日期和时间信息，而不是自己创建。如果输入数据是字符串格式，你需要将字符串转换为日期。这基本上是我们在上一节中执行的操作的反向操作，你可以使用`dateutil.parser.parse()`方法或`datetime.strptime()`方法来实现这一点。第三方`dateutil`日期工具包扩展了`datetime`模块，并随着pandas一起自动安装。
- en: 'For common `datetime` formats, use the `parse()` method for convenience. In
    the console, enter the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于常见的`datetime`格式，使用`parse()`方法会更方便。在控制台中，输入以下内容：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `parse()` method can handle most date representations. If you enter the
    month before the day, as in the US, it will honor this convention in the `datetime`
    object:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`parse()`方法可以处理大多数日期表示。如果你输入的日期是月份在前，像美国那样，它会在`datetime`对象中遵循这种惯例：'
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For locales where the day comes before the month, set the `dayfirst` argument
    to `True`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日期在月份之前的地区，将`dayfirst`参数设置为`True`：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s look at a real-world example. Suppose that you’ve recorded, by date,
    the type of animal captured in a trail camera. You’ve loaded the data as a list
    and want to replace the dates in string format with `datetime` objects:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个现实世界的例子。假设你已经按日期记录了在自动相机中捕获到的动物类型。你已将数据加载为列表，并希望将字符串格式的日期替换为`datetime`对象：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, we made a copy (`date_dt`) of the initial data list and then
    looped through the `data` list using the built-in `enumerate()` function to get
    both the item in the list and its index. If the index is an even number, which
    corresponds to the locations of the dates, we parsed the date at that location
    in the `data_dt` list. Now we have the original data plus a version for which
    the dates are `datetime` objects.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们对初始数据列表进行了复制（`date_dt`），然后使用内置的`enumerate()`函数遍历`data`列表，以获取列表中的项及其索引。如果索引是偶数，对应的是日期的位置，我们就解析`data_dt`列表中该位置的日期。现在，我们得到了原始数据以及一个日期为`datetime`对象的版本。
- en: 'Although `parse()` is useful for common, known date formats, it can’t handle
    every situation. For edge cases, you’ll need to use the `datetime` module’s `strptime()`
    method and pass it the proper format specification. For example, Suppose that
    your lab assistant input a bunch of dates using an underscore to separate the
    date components:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`parse()`对于常见的已知日期格式非常有用，但它无法处理每种情况。对于边缘情况，你需要使用`datetime`模块的`strptime()`方法，并传递正确的格式规范。例如，假设你的实验助理使用下划线来分隔日期组件输入了一堆日期：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `parse()` method is unable to recognize this format and will raise an error
    (`ParserError: Unknown string format: 2022_10_31`). To handle this nonstandard
    format, use `strptime()` with directives from [Table 21-2](ch21.xhtml#ch021tab2).
    Be sure to place the underscores in the same relative position:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`parse()`方法无法识别此格式并将引发错误（`ParserError: Unknown string format: 2022_10_31`）。要处理此非标准格式，请使用`strptime()`并从[表21-2](ch21.xhtml#ch021tab2)中使用指令，并确保在相对位置放置下划线：'
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As with `parse()`, you can convert a sequence of dates using `strptime()`.
    Here’s an example using list comprehension, in place of a `for` loop:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与`parse()`类似，你可以使用`strptime()`将一系列日期转换。以下是使用列表推导而不是`for`循环的示例：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For more on the `dateutil` package, visit *[https://pypi.org/project/python-dateutil](https://pypi.org/project/python-dateutil)*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于`dateutil`包的信息，请访问*[https://pypi.org/project/python-dateutil](https://pypi.org/project/python-dateutil)*。
- en: '***Plotting with datetime Objects***'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用datetime对象绘图***'
- en: 'Plotting dates can be messy due to the tendency of long date labels to overlap.
    In addition, standard plotting defaults don’t consider proper time intervals when
    displaying ticks. To see an example using Matplotlib, in the console, enter the
    following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制日期可能会因为日期标签过长而变得混乱。此外，标准绘图默认值在显示刻度时不考虑适当的时间间隔。要查看使用Matplotlib的示例，请在控制台中输入以下内容：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This produces the unreadable results in [Figure 21-1](ch21.xhtml#ch021fig1).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在[图21-1](ch21.xhtml#ch021fig1)中生成难以阅读的结果。
- en: '![Image](../images/21fig01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig01.jpg)'
- en: '*Figure 21-1: Overlapping date labels on the x-axis*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图21-1：x轴上重叠的日期标签*'
- en: To handle dates when plotting, you must inform Matplotlib that it’s dealing
    with `datetime` objects by importing the `matplotlib`.`dates` module. This specialized
    module is built on the `datetime` and third-party `dateutil` modules. Among its
    sophisticated plotting capabilities, it helps you define time scales using *locator*
    methods, which find and comprehend the types of dates you’re using, such as months
    and years.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 处理绘图日期时，必须通过导入`matplotlib`.`dates`模块告知Matplotlib处理`datetime`对象。这个专用模块建立在`datetime`和第三方`dateutil`模块之上。在其复杂的绘图能力中，它帮助你使用*定位器*方法定义时间尺度，这些方法能够找到并理解你使用的日期类型，例如月份和年份。
- en: 'Let’s rebuild the previous plot using `matplotlib.dates`. Remember to use CTRL-ENTER
    to prevent early execution when entering the code in line `In [48]`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`matplotlib.dates`重新构建上一个图。记得在输入第`In [48]`行代码时使用CTRL-ENTER以防止过早执行：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This produces the results in [Figure 21-2](ch21.xhtml#ch021fig2).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在[图21-2](ch21.xhtml#ch021fig2)中生成结果。
- en: '![Image](../images/21fig02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig02.jpg)'
- en: '*Figure 21-2: A properly formatted plot of dates*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图21-2：日期格式正确的绘图*'
- en: The date labels are now readable and, if your eyesight is good enough, you’ll
    be able to count the proper number of tick marks for each day of the month. Locator
    functions are also available for other units such as hours, minutes, seconds,
    and weekdays. To learn more, visit the module documentation at *[https://matplotlib.org/stable/api/dates_api.html](https://matplotlib.org/stable/api/dates_api.html)*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在日期标签可读，并且如果你的视力足够好，你将能够数出每个月每天的正确刻度数。定位器函数也适用于其他单位，如小时、分钟、秒和工作日。要了解更多信息，请访问*[https://matplotlib.org/stable/api/dates_api.html](https://matplotlib.org/stable/api/dates_api.html)*模块文档。
- en: '***Creating Naive vs. Aware Objects***'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建朴素对象与知情对象***'
- en: Python `datetime` objects may be categorized as either *naive* or *aware* depending
    on whether they include time zone information. A naive object does not contain
    time zone information and can’t locate itself relative to other `datetime` objects.
    With knowledge of metadata such as time zone and DST information, an aware object
    represents a specific and unambiguous moment in time that can be located with
    respect to other aware objects.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`datetime`对象可以根据是否包含时区信息分为*朴素*或*知情*。朴素对象不包含时区信息，无法相对于其他`datetime`对象定位自身。具有元数据（如时区和夏令时信息）的知情对象表示特定且明确的时间点，可以相对于其他知情对象定位。
- en: To generate an aware object, `datetime` and `time` objects have an optional
    time zone attribute, `tzinfo`, that is used to capture information about the offset
    from the *coordinated universal time (UTC)*, the time zone name, and whether DST
    is in effect.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成带时区信息的对象，`datetime`和`time`对象具有一个可选的时区属性`tzinfo`，用于捕捉协调世界时（*UTC*）的时差、时区名称以及是否处于夏令时（DST）。
- en: UTC is the successor to Greenwich Mean Time (GMT) and represents the primary
    time standard by which the world regulates clocks and time. Precision is usually
    in milliseconds, but submicrosecond precision is possible when using satellite
    signals. UTC does not change with the seasons, nor is it affected by DST. By working
    in UTC, you can confidently share your work and remove the need for fiddly time
    zone and similar corrections.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: UTC是格林威治标准时间（GMT）的继任者，是世界用来调节时钟和时间的主要时间标准。精度通常为毫秒，但使用卫星信号时可以达到亚微秒级精度。UTC不随季节变化，也不受夏令时（DST）的影响。通过使用UTC，你可以自信地分享你的工作，避免了复杂的时区和类似的调整。
- en: Although it’s possible for the `tzinfo` attribute to hold detailed, country-specific
    time zone information, the `datetime` module’s `timezone` class can represent
    only simple time zones with fixed offsets from UTC, such as UTC itself or North
    American EST and EDT time zones.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`tzinfo`属性可以包含详细的、特定于国家的时区信息，但`datetime`模块的`timezone`类只能表示与UTC有固定时差的简单时区，如UTC本身或北美的EST和EDT时区。
- en: 'To access more detailed time zone information, you can use the third-party
    `pytz` library (*[https://pypi.org/project/pytz/](https://pypi.org/project/pytz/)*),
    which is wrapped by pandas. To make an aware timestamp, import `pytz` and pass
    the `datatime` method the `pytz` library’s name for a time zone. You can find
    these names using the `common_timezones` attribute, shown here sliced to the last
    10 items in the list:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问更详细的时区信息，你可以使用第三方库`pytz`（*[https://pypi.org/project/pytz/](https://pypi.org/project/pytz/)*），该库被pandas封装。要创建带时区信息的时间戳，导入`pytz`并将`datetime`方法的时区名称传递给`pytz`库。你可以使用`common_timezones`属性查找这些名称，下面是列出的最后10个时区名称：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'First, let’s make an *aware* timestamp in UTC:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个*带时区信息*的UTC时间戳：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that the `aware` timestamp has time zone metadata (`tzinfo=<UTC>`).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，带时区信息的时间戳包含时区元数据（`tzinfo=<UTC>`）。
- en: 'To convert an existing unaware timestamp to an aware timestamp, call the `localize()`
    method on the `pytz` time zone and pass the method the `datetime` object, like
    so:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要将现有的无时区信息的时间戳转换为带时区信息的时间戳，可以在`pytz`时区上调用`localize()`方法，并将`datetime`对象传递给该方法，如下所示：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To convert from one time zone to another, you can use the `astimezone()` method:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要从一个时区转换到另一个时区，可以使用`astimezone()`方法：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `pytz` library will consider the idiosyncrasies of your local area, such
    as DST, when making the conversion.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytz`库在转换时会考虑本地区域的特殊情况，比如夏令时（DST）。'
- en: '**NOTE**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Because naive datetime objects are treated by many datetime methods as local
    times, it’s preferable to use aware datetimes to represent times in UTC. As such,
    the recommended way to create an object representing the current time in UTC is
    by calling datetime.now(timezone.utc).*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*因为许多日期时间方法将天真的日期时间对象视为本地时间，所以最好使用带时区信息的日期时间来表示UTC时间。因此，推荐的创建当前UTC时间对象的方式是调用`datetime.now(timezone.utc)`。*'
- en: '**TEST YOUR KNOWLEDGE**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的知识**'
- en: 1.  Which date is written in the global standard numeric date format?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  哪个日期是以全球标准的数字日期格式书写的？
- en: a.  23-2-2021
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: a.  23-2-2021
- en: b.  2021-2-23
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: b.  2021年2月23日
- en: c.  2-23-2021
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: c.  2021年2月23日
- en: d.  23/2/21
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: d.  23/2/21
- en: 2.  Which methods convert a string representation of a date into a `datetime`
    object?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  哪些方法可以将日期的字符串表示转换为`datetime`对象？
- en: a.  `strftime()`
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `strftime()`
- en: b.  `str()`
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: b.  `str()`
- en: c.  `strptime()`
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: c.  `strptime()`
- en: d.  `parse()`
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: d.  `parse()`
- en: 3.  Which directive produces the format `'03/30/2022 21:09'`?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  哪个指令产生格式`'03/30/2022 21:09'`？
- en: a.  `'%m/%d/%y %H:%M'`
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `'%m/%d/%y %H:%M'`
- en: b.  `'%M/%D/%Y %H:%m'`
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: b.  `'%M/%D/%Y %H:%m'`
- en: c.  `'%m/%d/%Y %H:%M'`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: c.  `'%m/%d/%Y %H:%M'`
- en: d.  `'%m/%d/%y %H:%M'`
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: d.  `'%m/%d/%y %H:%M'`
- en: 4.  What is the global time standard?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  什么是全球时间标准？
- en: a.  `pytz`
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `pytz`
- en: b.  US/Eastern
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: b.  美国东部时间（US/Eastern）
- en: c.  UTC
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: c.  UTC
- en: d.  GMT
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: d.  格林威治标准时间（GMT）
- en: 5.  Which method lets you convert naive `datetime` objects to a new time zone?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 5.  哪种方法可以将天真的`datetime`对象转换到新时区？
- en: a.  `mdates()`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `mdates()`
- en: b.  `parse()`
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: b.  `parse()`
- en: c.  `timedelta()`
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: c.  `timedelta()`
- en: d.  `localize()`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: d.  `localize()`
- en: '**Time Series and Date Functionality with pandas**'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用pandas进行时间序列和日期功能**'
- en: As you might expect, pandas has extensive capabilities for working with time
    series. This functionality is based on the NumPy `datetime64` and `timedelta64`
    data types with nanosecond resolution. In addition, features have been consolidated
    from many other Python libraries, and new functionality has been developed. With
    pandas, you can load time series; convert data to the proper `datetime` format;
    generate ranges of datetimes; index, merge, and resample both fixed- and irregular-frequency
    data; and more.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能预料的那样，pandas 在处理时间序列方面具有广泛的功能。该功能基于 NumPy 的 `datetime64` 和 `timedelta64`
    数据类型，具有纳秒级分辨率。此外，许多其他 Python 库的功能已被合并，并且开发了新的功能。使用 pandas，您可以加载时间序列；将数据转换为适当的
    `datetime` 格式；生成日期时间范围；索引、合并和重新采样固定频率和不规则频率的数据；等等。
- en: The pandas library uses four general time-related concepts. These are date times,
    time deltas, time spans, and date offsets ([Table 21-3](ch21.xhtml#ch021tab3)).
    Except for date offsets, each time concept has a *scalar* class, for single observations,
    along with an associated *array* class, which serves as an index structure.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库使用四个与时间相关的通用概念。它们分别是日期时间、时间差、时间跨度和日期偏移量（[表 21-3](ch21.xhtml#ch021tab3)）。除了日期偏移量，每个时间概念都有一个*标量*类，用于单一观测值，以及一个相关的*数组*类，用作索引结构。
- en: '**Table 21-3:** Time-Related Concepts in pandas'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 21-3：** pandas 中的时间相关概念'
- en: '| **Concept** | **Scalar class** | **Array class** | **Data type** | **Creation
    method** |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **概念** | **标量类** | **数组类** | **数据类型** | **创建方法** |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Date times | `Timestamp` | `DatetimeIndex` | `datetime64[ns]``datetime64[ns,
    tz]` | `to_datetime` or`date_range` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 日期时间 | `Timestamp` | `DatetimeIndex` | `datetime64[ns]``datetime64[ns, tz]`
    | `to_datetime` 或 `date_range` |'
- en: '| Time deltas | `Timedelta` | `TimedeltaIndex` | `timedelta64[ns]` | `to_timedelta`
    or`timedelta_range` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 时间差 | `Timedelta` | `TimedeltaIndex` | `timedelta64[ns]` | `to_timedelta`
    或 `timedelta_range` |'
- en: '| Time spans | `Period` | `PeriodIndex` | `period[freq]` | `Period` or`period_range`
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 时间跨度 | `Period` | `PeriodIndex` | `period[freq]` | `Period` 或 `period_range`
    |'
- en: '| Date offsets | `DateOffset` | None | None | `Dateoffset` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 日期偏移量 | `DateOffset` | 无 | 无 | `Dateoffset` |'
- en: A *date time* represents a specific date and time with time zone support. It’s
    similar to `datetime.datetime` from the Python standard library. A *time delta*
    is an absolute time duration, similar to `datetime.timedelta` from the standard
    library. *Time spans* are a period defined by a point in time and its associated
    frequency (daily, monthly, and so on). A *date offset* represents a relative time
    duration that respects calendar arithmetic.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*日期时间*表示具有时区支持的特定日期和时间。它类似于 Python 标准库中的 `datetime.datetime`。*时间差*是一个绝对的时间持续时间，类似于标准库中的
    `datetime.timedelta`。*时间跨度*是由某个时间点及其相关的频率（如每日、每月等）定义的一个周期。*日期偏移量*表示一个相对的时间持续时间，遵循日历运算规则。'
- en: In the sections that follow, we’ll look at these various concepts and the methods
    used to create them. For more detail, you can visit the official documentation
    at *[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨这些不同的概念以及创建它们的方法。欲了解更多详情，您可以访问官方文档，地址为 *[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)*。
- en: '***Parsing Time Series Information***'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***解析时间序列信息***'
- en: 'To create a timestamp representing the time for a particular event, use the
    `Timestamp` class:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个表示特定事件时间的时间戳，使用 `Timestamp` 类：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Likewise, to create a `DatetimeIndex` object, use the `DatetimeIndex` class:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要创建 `DatetimeIndex` 对象，使用 `DatetimeIndex` 类：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For existing data, the pandas `to_datetime()` method converts scalar, array-like,
    dictionary-like, and pandas series or DataFrame objects to pandas `datetime64[ns]`
    objects. This lets you easily parse time series information from various sources
    and formats.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现有数据，pandas 的 `to_datetime()` 方法将标量、类似数组、类似字典以及 pandas 的 Series 或 DataFrame
    对象转换为 pandas `datetime64[ns]` 对象。这使得您可以轻松地从各种来源和格式中解析时间序列信息。
- en: 'To see what I’m talking about, in the console, enter the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我所说的内容，请在控制台中输入以下命令：
- en: '[PRE24]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this example, we passed a list of dates in three different formats to the
    `to_datetime()` method. These included a string, a NumPy `datetime64` object,
    and a Python `datetime` object. The method returned a pandas `DatetimeIndex` object
    that consistently stores the dates as `datetime64[ns]` objects in ISO 8601 format
    (year-month-day).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们向 `to_datetime()` 方法传递了三种不同格式的日期列表。这包括一个字符串、一个 NumPy `datetime64` 对象和一个
    Python `datetime` 对象。该方法返回一个 pandas `DatetimeIndex` 对象，它将日期统一存储为 ISO 8601 格式（年-月-日）的
    `datetime64[ns]` 对象。
- en: 'The method can accommodate times as well as dates:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法可以处理时间以及日期：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this example, we passed a list of both dates and times, which were all correctly
    converted. Note that we included an empty item (`''`) at the end of the list.
    The `to_datetime()` method converted this entry into a `NaT` (Not a Time) value,
    which is the timestamp equivalent of the pandas `NaN` (Not a Number) value that
    you learned about in the previous chapter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们传递了一个包含日期和时间的列表，所有日期和时间都被正确转换了。注意，我们在列表末尾包含了一个空项（`''`）。`to_datetime()`
    方法将此条目转换为 `NaT`（Not a Time）值，这相当于你在前一章学到的 pandas `NaN`（Not a Number）值的时间戳等价物。
- en: The `to_datetime()` method also works with pandas DataFrames. Let’s look at
    an example in which you have recorded (in Microsoft Excel) the date and time a
    trail camera captured an image of an animal. You’ve exported the spreadsheet as
    a .*csv* file that you now want to load and parse using pandas.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`to_datetime()` 方法也适用于 pandas 数据框。让我们看一个示例，在这个示例中，你记录了（在 Microsoft Excel 中）一个拍摄动物图像的野外摄像机的日期和时间。你已将电子表格导出为
    .*csv* 文件，现在想要使用 pandas 加载并解析它。'
- en: 'To create the .*csv* file, in a text editor such as Notepad or TextEdit, enter
    the following and then save it as *camera_1.csv*:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 .*csv* 文件，在诸如记事本或TextEdit之类的文本编辑器中，输入以下内容，然后将其保存为 *camera_1.csv*：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Back in the console, enter the following to read the file in as a DataFrame
    (substitute your path to the .*csv* file):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 回到控制台，输入以下内容以将文件读取为 DataFrame（替换为你的 .*csv* 文件路径）：
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To convert the `Date` column to ISO 8601 format, enter the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `Date` 列转换为 ISO 8601 格式，请输入以下内容：
- en: '[PRE28]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'These datetimes were recorded in the Eastern US time zone, but that information
    is not encoded. To make the datetimes aware, first make the following imports:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日期时间记录在美国东部时区，但没有包含该信息。为了使日期时间具有意识，首先进行以下导入：
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, assign a variable to a `pytz tzfile` object and then pass the variable
    to the `localize()` method:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将一个变量分配给 `pytz tzfile` 对象，然后将变量传递给 `localize()` 方法：
- en: '[PRE30]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can do all this in one line, but using a `my_tz` variable makes the code
    more readable and less likely to wrap. To check the results, print the `Date`
    column:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在一行中完成所有操作，但使用 `my_tz` 变量可以使代码更易读且不太可能换行。要检查结果，请打印 `Date` 列：
- en: '[PRE31]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Even though it’s a good idea to work in UTC, it’s also important to have *meaningful*
    time data. For example, you’ll probably want to study when these animals are on
    the prowl in *local* time, so you’ll want to preserve the times recorded in the
    Eastern US. In this case, you’ll want to make a new “UTC-aware” column based on
    the `Date` column so that you can have the best of both worlds. Because the `Date`
    column is now aware of its time zone, you must use `tz_convert()` instead of `tz_localize()`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 UTC 中工作是个好主意，保留有意义的时间数据也很重要。例如，你可能希望研究这些动物何时在当地时间活动，因此你会希望保留记录在美国东部的时间。在这种情况下，你将希望基于
    `Date` 列创建一个新的“UTC-aware”列，以便同时兼顾两者。因为 `Date` 列现在意识到其时区，所以你必须使用 `tz_convert()`
    而不是 `tz_localize()`：
- en: '[PRE32]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Print the columns to verify the conversion:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 打印列以验证转换是否成功：
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**NOTE**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*To remove time zone information from a datetime so that it becomes naive,
    pass the tz_convert() method None, like so: csv_df[''Date''] = csv_df[''Date'']`.`dt.tz_convert(None).*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*要从日期时间中删除时区信息以使其变为 naive，可以像这样将 tz_convert() 方法设置为 None：csv_df[''Date''] =
    csv_df[''Date'']`.`dt.tz_convert(None).*'
- en: 'Finally, if you look at the previous printout of the `csv_df` DataFrame, you’ll
    see that the index values range from 0 to 2\. This is by default, but there’s
    no reason why you can’t use `datetime` values as the index instead. In fact, `datetime`
    indexes can be helpful when doing things like plotting. So, let’s make the `Date_UTC`
    column the index for the DataFrame. In the console, enter the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你查看 `csv_df` DataFrame 的前面输出，你会看到索引值从 0 到 2。这是默认的，但你完全可以使用 `datetime` 值作为索引。事实上，当进行绘图等操作时，`datetime`
    索引非常有用。因此，让我们将 `Date_UTC` 列作为 DataFrame 的索引。在控制台中，输入以下内容来完成这一步：
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To read more about the `to_datetime()` method, visit *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)*.
    You can find the documentation for `dt.tz_localize()` and `dt.tz_convert()` at
    *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_localize.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_localize.html)*
    and *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html)*,
    respectively.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`to_datetime()`方法的信息，请访问*[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)*。你可以在*[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_localize.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_localize.html)*和*[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html)*中找到`dt.tz_localize()`和`dt.tz_convert()`的文档。
- en: '***Creating Date Ranges***'
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建日期范围***'
- en: Time series with a *fixed* frequency occur often in science for jobs as diverse
    as sampling waveforms in signal processing, observing target behaviors in psychology,
    recording stock market movements in economics, and logging traffic flow in transportation
    engineering. Not surprisingly, pandas ships with many standardized frequencies
    and tools that generate them, resample them, and infer them.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*固定*频率的时间序列在科学中经常出现，应用领域广泛，如信号处理中的波形采样、心理学中的目标行为观察、经济学中的股市变动记录以及交通工程中的交通流量记录。毫不奇怪，pandas提供了许多标准化的频率和生成它们、重采样它们及推断它们的工具。'
- en: 'The pandas `date_range()` method returns a `DatetimeIndex` object with a fixed
    frequency. To generate an index composed of days, pass it a start and end date,
    as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: pandas的`date_range()`方法返回一个具有固定频率的`DatetimeIndex`对象。要生成由天组成的索引，传入一个开始日期和结束日期，如下所示：
- en: '[PRE35]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can also pass it either a start date or an end date, along with the number
    of periods to generate (such as a number of days). In the following example, we
    start with a timestamp for a certain observation and ask for six periods:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以传入开始日期或结束日期，以及要生成的周期数量（例如，天数）。在以下示例中，我们从某个观察点的时间戳开始，并请求六个周期：
- en: '[PRE36]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Note that the six datetimes represent days starting at 12:59:59\. Normally,
    you want the days to start at midnight, so, pandas provides a handy `normalize`
    parameter to make this adjustment:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这六个日期时间表示的是从12:59:59开始的日期。通常，你希望日期从午夜开始，因此，pandas提供了一个方便的`normalize`参数来进行此调整：
- en: '[PRE37]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After they’re normalized to days, the output `datetime64` objects no longer
    include a time component.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在它们被标准化为天后，输出的`datetime64`对象将不再包含时间部分。
- en: By default, the `date_range()` method assumes that you want a *daily* frequency.
    Other frequencies are available, however, with many designed for business applications
    (such as the end of a business month, end of a business year, and so on).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`date_range()`方法假设你想要的是*按天*的频率。然而，也可以使用其他频率，许多频率是为商业应用设计的（例如，商业月末、商业年末等）。
- en: '[Table 21-4](ch21.xhtml#ch021tab4) lists some of the time series frequencies
    more relevant for science. For the complete list, including financial frequencies,
    see “DateOffset objects” at *[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)*.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 21-4](ch21.xhtml#ch021tab4)列出了与科学更相关的一些时间序列频率。完整的列表，包括金融频率，请参见“DateOffset对象”在*[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html)*。'
- en: '**Table 21-4:** Useful Time Series Frequencies'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 21-4：** 有用的时间序列频率'
- en: '| **Freq string** | **Offset type** | **Description** |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| **Freq string** | **Offset type** | **Description** |'
- en: '| --- | --- | --- |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `N` | `Nano` | By nanosecond |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `N` | `Nano` | 按纳秒 |'
- en: '| `U` | `Micro` | By microsecond |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `U` | `Micro` | 按微秒 |'
- en: '| `L or ms` | `Milli` | By millisecond |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `L or ms` | `Milli` | 按毫秒 |'
- en: '| `S` | `Second` | By second |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `S` | `Second` | 按秒 |'
- en: '| `T or min` | `Minute` | By minute |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `T or min` | `Minute` | 按分钟 |'
- en: '| `H` | `Hour` | By hour |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `H` | `Hour` | 按小时 |'
- en: '| `D` | `Day` | By calendar day |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `D` | `Day` | 按日历天 |'
- en: '| `W-MON, W-TUE,` . . . | `Week` | Weekly, optionally anchored on a day of
    the week |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `W-MON, W-TUE,` . . . | `Week` | 每周，且可选地固定在某一星期几 |'
- en: '| `MS` | `MonthBegin` | By first calendar day of month |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `MS` | `MonthBegin` | 按月的第一天 |'
- en: '| `M` | `MonthEnd` | By last calendar day of month |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `M` | `MonthEnd` | 按月的最后一天 |'
- en: '| `Q` | `Quarter` | By quarter year |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `Q` | `Quarter` | 按季度 |'
- en: '| `AS-JAN, AS-FEB,` . . . | `YearBegin` | Yearly, anchored on first calendar
    day of given month |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `AS-JAN, AS-FEB,` . . . | `YearBegin` | 每年，锚定在给定月份的第一个日历日 |'
- en: '| `A-JAN, A-FEB,` . . . | `YearEnd` | Yearly, anchored on last calendar day
    of given month |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `A-JAN, A-FEB,` . . . | `YearEnd` | 每年，锚定在给定月份的最后一个日历日 |'
- en: 'To specify an offset type, pass a frequency string alias from [Table 21-4](ch21.xhtml#ch021tab4)
    as the `freq` argument. You can also specify a time zone using the `tz` argument.
    Here’s how to make an hourly frequency referenced to UTC:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定偏移类型，请将来自 [表 21-4](ch21.xhtml#ch021tab4) 的频率字符串别名作为`freq`参数传递。您还可以使用`tz`参数指定时区。以下是如何创建与UTC参考的每小时频率：
- en: '[PRE38]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For an existing time series, you can retrieve its frequency by using the `freq`
    attribute, as shown here:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现有时间序列，您可以通过使用`freq`属性检索其频率，如下所示：
- en: '[PRE39]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The frequencies shown in [Table 21-4](ch21.xhtml#ch021tab4) represent *base*
    frequencies. Think of these as building blocks for alternative frequencies, such
    as bi-hourly. To make this new frequency, just place the integer `2` before the
    `H` in the `freq` argument, as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 21-4](ch21.xhtml#ch021tab4) 中显示的频率代表*基础*频率。将整数`2`放在`freq`参数中的`H`前面，即可制作此新频率，例如双小时。'
- en: '[PRE40]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can also combine offsets by passing frequency strings like `''2H30min''`,
    like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过传递像`'2H30min'`这样的频率字符串来组合偏移量。
- en: '[PRE41]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '***Creating Periods***'
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建周期***'
- en: Timestamps associate data with points in time. Sometimes, however, data remains
    constant through a certain *time span*, such as a month, and you want to associate
    the data with that interval.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳将数据与时间点关联起来。然而，有时数据在某个*时间跨度*内保持恒定，例如一个月，您希望将数据与该间隔关联起来。
- en: In pandas, regular intervals of time such as a day, month, year, and so on are
    represented by `Period` objects. With the `period_range()` method, `Period` objects
    can be collected into a sequence to form a `PeriodIndex`. You can specify a period’s
    time span using the `freq` keyword with frequency aliases from [Table 21-4](ch21.xhtml#ch021tab4).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，诸如日、月、年等的常规时间间隔由`Period`对象表示。使用`period_range()`方法，`Period`对象可以收集到一个序列中以形成`PeriodIndex`。您可以使用`freq`关键字和来自
    [表 21-4](ch21.xhtml#ch021tab4) 的频率别名指定周期的时间跨度。
- en: 'Suppose that you want to keep track of a daily observation for the month of
    September 2022\. First, use the `period_range()` method to create a time span
    with a frequency of days:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要跟踪2022年9月的每日观察。首先，使用`period_range()`方法创建一个频率为天的时间跨度：
- en: '[PRE42]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, create a pandas series and use the NumPy `random.randn()` method to generate
    some fake data on the fly. Note that the number of data points must equal the
    number of days in the index:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 pandas 系列，并使用 NumPy 的`random.randn()`方法即时生成一些虚假数据。请注意，数据点的数量必须等于索引中的天数。
- en: '[PRE43]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You now have a time series, organized by day, for the month of September.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在拥有一个按日组织的2022年9月时间序列。
- en: 'To shift a period by its own frequency, just add or subtract an integer. Here’s
    an example using a yearly time span:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要将周期按其自身的频率移动，只需添加或减去一个整数。这是使用年度时间跨度的示例：
- en: '[PRE44]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Using a frequency of `'A-DEC'` means that each year represents January 1 through
    December 31\. Adding `10` shifted the periods up by 10 years. You can only perform
    arithmetic in this manner between `Period` objects with the *same* frequency.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`'A-DEC'`的频率意味着每年表示1月1日到12月31日。通过添加`10`来将周期向上移动10年。您只能在具有*相同*频率的`Period`对象之间以这种方式执行算术运算。
- en: 'Here’s an example of making monthly periods:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建月度周期的示例：
- en: '[PRE45]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'With the `asfreq()` method, you can convert an existing period to another frequency.
    Here’s an example in which we convert the `month_index` variable’s period to hours,
    anchored on the first hour of each month:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`asfreq()`方法，您可以将现有期间转换为另一个频率。这是一个示例，我们将`month_index`变量的期间转换为每个月第一小时锚定的小时：
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: To read more about the pandas `Period` class and the `asfreq()` method, visit
    *[https://pandas.pydata.org/docs/reference/api/pandas.Period.html](https://pandas.pydata.org/docs/reference/api/pandas.Period.html)*
    and *[https://pandas.pydata.org/docs/reference/api/pandas.Period.asfreq.html](https://pandas.pydata.org/docs/reference/api/pandas.Period.asfreq.html)*,
    respectively.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关 pandas `Period` 类和`asfreq()`方法的更多信息，请访问 *[https://pandas.pydata.org/docs/reference/api/pandas.Period.html](https://pandas.pydata.org/docs/reference/api/pandas.Period.html)*
    和 *[https://pandas.pydata.org/docs/reference/api/pandas.Period.asfreq.html](https://pandas.pydata.org/docs/reference/api/pandas.Period.asfreq.html)*。
- en: '***Creating Time Deltas***'
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建时间间隔***'
- en: 'The `timedelta_range()` method creates `TimedeltaIndex` objects. It behaves
    similarly to `date_range()` and `period_range()`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`timedelta_range()`方法创建`TimedeltaIndex`对象。它的行为类似于`date_range()`和`period_range()`：'
- en: '[PRE47]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the television drama *Lost*, a character had to enter a code and push a
    button every 108 minutes to avert some unknown catastrophe. With the `timedelta_range()`
    method and a frequency argument, he could schedule his day around this requirement.
    Assuming he last pushed the button at midnight, he won’t be getting much uninterrupted
    sleep:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在电视剧《*迷失*》中，某个角色每隔108分钟必须输入代码并按下按钮，以避免某种未知的灾难。使用`timedelta_range()`方法和频率参数，他可以围绕这一要求安排自己的日程。假设他最后一次按下按钮是在午夜，他将无法获得多少不被打扰的睡眠：
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '***Shifting Dates with Offsets***'
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用偏移量平移日期***'
- en: 'In addition to working with frequencies, you can import offsets and use them
    to shift `Timestamp` and `DatetimeIndex` objects. Here’s an example in which we
    import the `Day` class and use it to shift a famous date:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 除了处理频率外，你还可以导入偏移量并使用它们来偏移`Timestamp`和`DatetimeIndex`对象。以下是一个示例，我们导入`Day`类并用它来偏移一个著名的日期：
- en: '[PRE49]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can also import `DateOffset` class and then pass it the time span as an
    argument:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以导入`DateOffset`类，然后将时间跨度作为参数传递：
- en: '[PRE50]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'A nice thing about `DateOffset` objects is that they honor DST transitions.
    You just need to import the appropriate class from `pandas.tseries.offsets`. Here’s
    an example of shifting one hour across the vernal DST transition in the US Central
    time zone:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`DateOffset`对象的一个优点是它们遵循夏令时（DST）转换。你只需要从`pandas.tseries.offsets`导入适当的类。下面是一个示例，演示如何在美国中部时区的春季夏令时转换中，将时间偏移一小时：'
- en: '[PRE51]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that the final datetime (`03:00:00`) is *two hours* later than the starting
    datetime (`01:00:00`), even though you shifted it *one hour*. This is due to crossing
    the DST transition.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，最终的日期时间（`03:00:00`）比起始日期时间（`01:00:00`）晚了*两小时*，即使你只偏移了*一个小时*。这是因为跨越了夏令时转换。
- en: Along these lines, you can combine two time series even if they are in different
    time zones. The result will be in UTC, as pandas automatically keeps track of
    the equivalent UTC timestamps for each time series.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，即使两个时间序列位于不同的时区，你也可以将它们结合起来。结果将是UTC时间，因为pandas会自动跟踪每个时间序列的等效UTC时间戳。
- en: To see the long list of available offsets, visit *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html)*.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用的偏移量列表，请访问 *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html)*。
- en: '***Indexing and Slicing Time Series***'
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***时间序列的索引与切片***'
- en: 'When you’re working with time series data, it’s conventional to use the time
    component as the index of a series or DataFrame so that you can perform manipulations
    with respect to the time element. Here, we make a series whose index represents
    a time series and whose data is the integers 0 through 9:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理时间序列数据时，通常将时间组件作为系列或数据框的索引，以便可以根据时间元素进行操作。在这里，我们创建了一个其索引表示时间序列、数据为从0到9的整数的系列：
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Even though the indexes are now dates, you can slice and dice the series, just
    as with integer indexes. For example, to select every other row, enter the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 即使索引现在是日期，你仍然可以像使用整数索引那样切片和操作系列。例如，要选择每隔一行的数据，可以输入以下内容：
- en: '[PRE53]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'To select the data associated with the January 5, index the series using that
    date:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择与1月5日相关的数据，请使用该日期索引系列：
- en: '[PRE54]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Conveniently, you don’t need to enter the date in the same format that it was
    input. Any string interpretable as a date will do:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，你不需要以输入日期时的相同格式输入日期。任何可以解析为日期的字符串都可以使用：
- en: '[PRE55]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*Duplicate* dates will produce a *slice* of the series showing all values associated
    with that date. Likewise, you will see all the rows in a DataFrame indexed by
    the same date using the syntax: dataframe`.loc[''`datetime_index`'']`.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '*重复*的日期将产生一个*切片*，显示与该日期相关的所有值。同样，你也可以使用以下语法查看按相同日期索引的所有行：dataframe`.loc[''`datetime_index`'']`。'
- en: Additionally, if you have a time series with multiple years, you can index based
    on the year and retrieve all the indexes and data that include that year. This
    also works for other timespans, such as months.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你有一个包含多个年份的时间序列，可以根据年份进行索引，并检索包含该年份的所有索引和数据。这对于其他时间跨度（如月份）也适用。
- en: 'Slicing works the same way. You can use timestamps not explicitly included
    in the time series, such as `2021-12-31`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 切片的操作方式相同。你可以使用时间序列中未明确包含的时间戳，如`2021-12-31`：
- en: '[PRE56]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In this case, we started indexing with December 31, 2021, which precedes the
    dates in the time series.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们从2021年12月31日开始索引，该日期在时间序列中的日期之前。
- en: '**NOTE**'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Remember that pandas is based on NumPy, so slicing creates views rather than
    copies. Any operation you perform on a view will change the source series or DataFrame.*'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，pandas是基于NumPy的，因此切片创建的是视图而非副本。对视图执行的任何操作都会改变源series或DataFrame。*'
- en: 'If you want the datetime component to be the data instead of the index, leave
    off the index argument when creating the series:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望日期时间组件作为数据而不是索引，在创建series时省略索引参数：
- en: '[PRE57]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The result is a pandas series with an integer index and the dates treated as
    data.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个带有整数索引的pandas系列，并且日期被当作数据处理。
- en: '***Resampling Time Series***'
  id: totrans-277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重采样时间序列***'
- en: The process of converting the frequency of a time series to a different frequency
    is called *resampling*. This can involve *downsampling*, by which you aggregate
    data to a lower frequency, perhaps to reduce memory requirements or see trends
    in the data; *upsampling*, wherein you move to a higher frequency, perhaps to
    permit mathematical operations between two datasets with different resolutions;
    or simple resampling, for which you keep the same frequency but change the anchor
    point from, say, the start of the year (`AS-JAN`) to the year end (`A-JAN`).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将时间序列的频率转换为不同频率的过程称为*重采样*。这可能涉及*降采样*，即将数据聚合到较低的频率，可能是为了减少内存需求或查看数据趋势；*上采样*，即将频率提高，可能是为了在两个分辨率不同的数据集之间进行数学操作；或者简单的重采样，即保持相同的频率，但改变基准点，比如从年初(`AS-JAN`)到年末(`A-JAN`)。
- en: In pandas, resampling is accomplished by calling the `resample()` method on
    a pandas object using dot notation. Some of its commonly used parameters are listed
    in [Table 21-5](ch21.xhtml#ch021tab5). To see the complete list, visit *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html)*.
    Both series and `dataframe` objects use the same parameters.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，重采样是通过在pandas对象上调用`resample()`方法来完成的，使用点符号表示法。它的一些常用参数列在[表格21-5](ch21.xhtml#ch021tab5)中。要查看完整的列表，请访问*[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html)*。series和`dataframe`对象使用相同的参数。
- en: '**Table 21-5:** Useful Parameters of the pandas `resample()` Method'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**表21-5：** pandas `resample()`方法的有用参数'
- en: '| **Parameter** | **Description** |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| --- | --- |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `freq` | `DateOffset` or `Timedelta` object, or string, indicating resampling
    frequency (such as `''D''`, `''Q''`, `''10min''`). |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `freq` | `DateOffset`或`Timedelta`对象，或字符串，表示重采样频率（如`''D''`、`''Q''`、`''10min''`）。
    |'
- en: '| `axis` | Axis on which to resample (`0` or `''index''`, `1` or `''columns''`).
    Defaults to `0`. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `axis` | 要进行重采样的轴（`0`或`''index''`，`1`或`''columns''`）。默认为`0`。 |'
- en: '| `closed` | When downsampling, indicates which interval end is inclusive,
    either `''right''` or `''left''`. The default value changes depending on `freq`
    type. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `closed` | 在降采样时，指示哪个区间的结束是包含的，可以是`''right''`或`''left''`。默认值会根据`freq`类型而变化。
    |'
- en: '| `label` | When downsampling, which bin edge to use to label the result, either
    `''right''` or `''left''`. The default value changes depending on `freq` type.
    |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `label` | 在降采样时，选择使用哪个区间边缘来标记结果，可以是`''right''`或`''left''`。默认值会根据`freq`类型而变化。
    |'
- en: '| `convention` | For `PeriodIndex` only, controls whether to use the start
    or end of `freq` when converting frequencies from low to high. Defaults to `''start''`.
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `convention` | 仅对`PeriodIndex`有效，控制在将频率从低频转换为高频时是否使用`freq`的开始或结束。默认为`''start''`。
    |'
- en: '| `kind` | Pass `''timestamp''` to convert the resulting index to a `DateTimeIndex`
    or `''period''` to convert it to a `PeriodIndex`. By default, the input representation
    is retained. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `kind` | 传入`''timestamp''`将结果索引转换为`DateTimeIndex`，传入`''period''`将其转换为`PeriodIndex`。默认情况下，保留输入表示法。
    |'
- en: '| `on` | For a DataFrame, specifies the column to use instead of `index` for
    resampling. The column must be datetime-like. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `on` | 对于DataFrame，指定要用于重采样的列，而不是`index`。该列必须是类似datetime的类型。 |'
- en: '**Upsampling**'
  id: totrans-290
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**上采样**'
- en: Upsampling refers to resampling to a *shorter* time span, such as from daily
    to hourly. This creates bins with `NaN` values that must be filled; for example,
    as with the forward-fill and backfill methods `ffill()` and `bfill()`. This two-step
    process can be accomplished by chaining together the calls to the resample and
    fill methods.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 上采样是指将数据重采样到*更短*的时间跨度，例如从日数据转换为小时数据。这会创建包含`NaN`值的桶，这些值必须填充；例如，使用前向填充和后向填充方法`ffill()`和`bfill()`。这个两步过程可以通过链式调用resample方法和填充方法来完成。
- en: 'To illustrate, let’s make a toy dataset with yearly values and expand it to
    quarterly values. This might be necessary when, say, production targets go up
    every year, but progress must be tracked against quarterly production. In the
    console, enter the following:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们创建一个包含年度值的玩具数据集，并将其扩展为季度值。这可能在某些情况下是必要的，例如，生产目标每年增加，但进展必须以季度生产来跟踪。在控制台中输入以下内容：
- en: '[PRE58]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: After importing pandas, establish an annual `PeriodIndex` named `dti`. Next,
    create the DataFrame and pass it a dictionary with the values in list form. Then,
    set the `index` argument to the `dti` object. Call the `resample()` method and
    pass it `Q`, for quarterly, and then call the `ffill()` method, chained to the
    end.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入pandas之后，创建一个名为`dti`的年度`PeriodIndex`。接着，创建数据框，并传入一个字典，其值以列表形式提供。然后，将`index`参数设置为`dti`对象。调用`resample()`方法并传入`Q`，表示季度，然后调用`ffill()`方法，链式调用在末尾。
- en: The results of this code are broken down in [Figure 21-3](ch21.xhtml#ch021fig3),
    which, from left to right, shows the original DataFrame, the resampling results,
    and the fill results. The original annual values are shown in bold.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码的结果在[图21-3](ch21.xhtml#ch021fig3)中进行了分解，图中从左到右依次展示了原始数据框、重采样结果和填充结果。原始的年度值以粗体显示。
- en: '![Image](../images/21fig03.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig03.jpg)'
- en: '*Figure 21-3: Resampling a DataFrame with a yearly range to a quarterly range
    using resample() followed by ffill()*'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '*图21-3：使用resample()方法将年度范围的数据框重采样为季度范围，之后跟随ffill()方法*'
- en: The `resample()` method builds the new quarterly index and fills the new rows
    with `NaN` values. Calling `ffill()` fills the empty rows going “forward.” What
    you’re saying here is, “The value for the first quarter of each year (Q1) is the
    value to use for all quarters within that year.”
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`resample()`方法构建新的季度索引，并用`NaN`值填充新行。调用`ffill()`方法会填充这些空行，填充方向是“前向”的。这里的意思是，“每年第一季度（Q1）的值将用于该年内所有季度的值。”'
- en: 'Backfilling does the opposite and assumes that the value at the start of each
    new year (Q1) should apply to the quarters in the previous year *excluding* the
    previous first quarter:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 后向填充执行相反的操作，假设每年新年（Q1）开始时的值应适用于前一年中的季度，*不包括*前一个第一季度：
- en: '[PRE59]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The execution of this code is described by [Figure 21-4](ch21.xhtml#ch021fig4).
    Again, original annual values are shown in bold.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的执行结果在[图21-4](ch21.xhtml#ch021fig4)中进行了描述。再次强调，原始的年度值以粗体显示。
- en: '![Image](../images/21fig04.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig04.jpg)'
- en: '*Figure 21-4: Resampling a DataFrame with a yearly range to a quarterly range
    using resample() followed by bfill()*'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '*图21-4：使用resample()方法将年度范围的数据框重采样为季度范围，之后跟随bfill()方法*'
- en: In this case, the values associated with the first quarter are “back filled”
    to the previous three quarters. You must be careful, however, as “leftover” `NaN`s
    can occur. You can see these at the end of the value column in the right-hand
    DataFrame in [Figure 21-4](ch21.xhtml#ch021fig4). The last three values are unchanged
    because no `2024Q1` data was available to set the value.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，与第一季度相关的值被“回填”到前面三个季度。然而，你需要小心，因为可能会出现“剩余”的`NaN`值。这些值可以在[图21-4](ch21.xhtml#ch021fig4)中右侧数据框的值列末尾看到。最后三个值没有变化，因为没有可用的`2024Q1`数据来设置该值。
- en: 'To fill the missing data, let’s assume that the values keep increasing by 10
    each quarter and rerun the code using the `fillna()` method chained to the end.
    Pass it `40` to fill the remaining holes:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充缺失的数据，假设每个季度的值都以10为增量增长，然后使用链式调用`fillna()`方法重新运行代码。传入`40`来填充剩余的空缺：
- en: '[PRE60]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Both `bfill()` and `ffill()` are synonyms for the `fillna()` method. You can
    read more about it at *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html)*.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`bfill()`和`ffill()`都是`fillna()`方法的同义词。你可以在*[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html)*中查看更多关于它的信息。'
- en: '**Downsampling**'
  id: totrans-308
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**降采样**'
- en: Downsampling refers to resampling from a higher frequency to a lower frequency,
    such as from minutes to hours. Because multiple samples must be combined into
    one, the `resample()` method is usually chained to a method for *aggregating*
    the data (see [Table 21-6](ch21.xhtml#ch021tab6)).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 下采样是指将高频数据重采样到低频数据，例如将分钟数据转为小时数据。由于需要将多个样本合并为一个样本，`resample()` 方法通常与用于 *聚合*
    数据的方法链式使用（参见 [表 21-6](ch21.xhtml#ch021tab6)）。
- en: '**Table 21-6:** Useful Aggregation Methods in pandas'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 21-6：** pandas 中有用的聚合方法'
- en: '| **Method** | **Description** |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `count()` | Returns the number of non-null values |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `count()` | 返回非空值的数量 |'
- en: '| `max()` | Returns the maximum value |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `max()` | 返回最大值 |'
- en: '| `mean()` | Returns the arithmetic mean of the values |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `mean()` | 返回值的算术平均数 |'
- en: '| `median()` | Returns the median of the values |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `median()` | 返回值的中位数 |'
- en: '| `min()` | Returns the minimum value |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `min()` | 返回最小值 |'
- en: '| `std()` | Returns the standard deviation of the values |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `std()` | 返回值的标准差 |'
- en: '| `sum()` | Returns the sum of the values |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `sum()` | 返回值的总和 |'
- en: '| `var()` | Returns the variance of the values |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `var()` | 返回值的方差 |'
- en: To practice downsampling, let’s use a real-world dataset from “The COVID Tracking
    Project” at *The Atlantic*. This dataset includes COVID-19 statistics from March
    3, 2020, to March 7, 2021.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习下采样，我们将使用 *The Atlantic* 的 “COVID Tracking Project” 提供的真实数据集。该数据集包括从 2020
    年 3 月 3 日到 2021 年 3 月 7 日的 COVID-19 统计数据。
- en: To reduce the size of the dataset, we’ll download the data for just the state
    of Texas. Navigate to *[https://covidtracking.com/data/download/](https://covidtracking.com/data/download/)*,
    scroll down, and then click the link for **Texas**. For convenience, I recommend
    moving this file to the same folder from which you launched Jupyter Qt console;
    this prevents the need for a file path when loading the data.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缩小数据集的规模，我们将只下载德克萨斯州的数据。请访问 *[https://covidtracking.com/data/download/](https://covidtracking.com/data/download/)*，向下滚动，然后点击
    **Texas** 的链接。为了方便起见，我建议将此文件移动到启动 Jupyter Qt 控制台的同一文件夹中；这样加载数据时就不需要提供文件路径。
- en: To begin, load the data as a pandas DataFrame. The input file has many columns
    of data that we don’t need, so we’ll select only the `date` and `deathIncrease`
    columns. The latter column is the number of COVID-related deaths for the day.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将数据加载为 pandas DataFrame。输入文件包含许多我们不需要的列，因此我们只选择 `date` 和 `deathIncrease`
    两列。后者是当天与 COVID 相关的死亡人数。
- en: '[PRE61]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'It’s good to keep an eye on what’s happening to the data by calling the `head()`
    method on the DataFrame, which returns the first five rows by default. Here, we
    see that dates are organized in *descending* order, but we generally use and plot
    datetime data in *ascending* order. So, call the pandas `sort_values()` method,
    pass it the column name, and set the ascending argument to `True`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 DataFrame 上调用 `head()` 方法，保持关注数据的变化是很有帮助的，默认情况下该方法返回前五行数据。在这里，我们看到日期是按 *降序*
    排列的，但我们通常使用并绘制按 *升序* 排列的日期数据。因此，我们调用 pandas 的 `sort_values()` 方法，传入列名，并将 ascending
    参数设置为 `True`：
- en: '[PRE62]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, the dates look like dates, but are they? Check the DataFrame’s `dtypes`
    attribute to confirm one way or the other:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，日期看起来像日期，但它们真的是日期吗？通过检查 DataFrame 的 `dtypes` 属性，可以确认这一点：
- en: '[PRE63]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'They’re not. This is important because the `resample()` method works only with
    objects that have a `datetime`-like index, such as `DatetimeIndex`, `PeriodIndex`,
    or `TimedeltaIndex`. We’ll need to change their type and set them as the DataFrame’s
    index, replacing the current integer values. We’ll also drop the `date` column
    because we no longer need it:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示它们并不是日期。这一点很重要，因为 `resample()` 方法仅适用于具有 `datetime` 类型索引的对象，如 `DatetimeIndex`、`PeriodIndex`
    或 `TimedeltaIndex`。我们需要将它们的类型更改并将其设置为 DataFrame 的索引，替换当前的整数值。我们还将删除 `date` 列，因为我们不再需要它。
- en: '[PRE64]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'At this point, we’ve wrangled the data so that our DataFrame uses a `DatetimeIndex`
    with dates in ascending order. Let’s see how it looks by making a quick plot using
    pandas plotting, which is quick and easy for data exploration:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经整理了数据，使得我们的 DataFrame 使用了一个按升序排列日期的 `DatetimeIndex`。接下来，使用 pandas
    绘图工具快速绘制图形，来查看数据的表现，这对于数据探索既快速又方便：
- en: '[PRE65]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This returns the plot depicted in [Figure 21-5](ch21.xhtml#ch021fig5).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回图 [图 21-5](ch21.xhtml#ch021fig5) 中展示的图形。
- en: '![Image](../images/21fig05.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig05.jpg)'
- en: '*Figure 21-5: Texas COVID-19-related daily deaths for the period March 3, 2020,
    through March 7, 2021*'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-5：2020 年 3 月 3 日至 2021 年 3 月 7 日期间德克萨斯州与 COVID-19 相关的每日死亡人数*'
- en: 'One aspect of [Figure 21-5](ch21.xhtml#ch021fig5) that really stands out is
    the spike in values near the start of August 2020\. Because this is clearly a
    *maximum* value, you can easily retrieve the value and its date index by using
    the `max()` and `idxmax()` methods, respectively:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 21-5](ch21.xhtml#ch021fig5)中一个非常突出的方面是2020年8月初的峰值。因为这显然是一个*最大*值，你可以使用`max()`和`idxmax()`方法分别轻松获取该值及其日期索引：'
- en: '[PRE66]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This is most likely an anomalous value, especially given that the CDC records
    only 239 deaths on this date, which is more consistent with the adjacent data
    (see *[https://covid.cdc.gov/covid-data-tracker/#trends_dailydeaths/](https://covid.cdc.gov/covid-data-tracker/#trends_dailydeaths/)*).
    Let’s use the CDC value going forward. To change the DataFrame, apply the `.loc`
    indexer, passing it the date (index) and column name, as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这很可能是一个异常值，特别是考虑到CDC在该日期仅记录了239例死亡，这与相邻的数据更为一致（请参见* [https://covid.cdc.gov/covid-data-tracker/#trends_dailydeaths/](https://covid.cdc.gov/covid-data-tracker/#trends_dailydeaths/)*）。接下来，我们将使用CDC的数据。要更改DataFrame，应用`.loc`索引器，并传递日期（索引）和列名，如下所示：
- en: '[PRE67]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The spike is gone now, and the plot looks more reasonable, as demonstrated in
    [Figure 21-6](ch21.xhtml#ch021fig6).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 峰值现在已经消失，图形看起来更合理，如[图 21-6](ch21.xhtml#ch021fig6)所示。
- en: '![Image](../images/21fig06.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/21fig06.jpg)'
- en: '*Figure 21-6: Texas COVID-19-related daily deaths with the anomalous spike
    removed*'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-6：删除异常峰值后的德克萨斯州COVID-19相关每日死亡人数*'
- en: Another thing that’s noticeable is the “sawtooth” nature of the curve caused
    by periodic oscillations in the number of deaths. These oscillations have a high
    frequency, and it’s doubtful that the disease progressed in this manner.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显著的现象是曲线的“锯齿状”特征，这由死亡人数的周期性振荡所造成。这些振荡的频率很高，怀疑疾病是以这种方式进展的。
- en: 'To investigate this anomaly, make a new DataFrame that includes a column for
    weekdays:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调查这个异常，创建一个新的DataFrame，其中包括一列表示星期几：
- en: '[PRE68]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, print out multiple weeks’ worth of data using pandas’ `iloc[]` indexing:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用pandas的`iloc[]`索引打印出多周的数据：
- en: '[PRE69]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: As I’ve highlighted in gray, the lowest reported number of deaths consistently
    occurs on a Monday, and the Sunday results also appear suppressed. This suggests
    a reporting issue over the weekend, with a one-day time lag. You can read more
    about this reporting phenomenon at *[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7363007/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7363007/)*.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在灰色部分所强调的，最低的死亡人数通常发生在星期一，星期天的死亡人数也似乎被压缩了。这表明周末存在报告问题，存在一天的时间滞后。你可以在* [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7363007/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7363007/)*
    上了解更多关于这一报告现象的内容。
- en: '**NOTE**'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you were on social media during the pandemic, you might have noticed people
    questioning the veracity of COVID data based on plots like [Figure 21-5](ch21.xhtml#ch021fig5).
    This is a good example of how, with a simple application of data science, you
    can easily solve mysteries and quickly quell conspiracy theories.*'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你在大流行期间活跃在社交媒体上，可能注意到有人质疑基于像[图 21-5](ch21.xhtml#ch021fig5)这样的图表的COVID数据的真实性。这是一个很好的例子，说明如何通过简单的数据科学应用，快速解决谜题并有效平息阴谋论。*'
- en: 'Because the oscillations occur *weekly*, downsampling from daily to weekly
    should merge the low and high reports and smooth the curve. Enter the following
    to test the hypothesis:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些振荡是*每周*发生的，从每日到每周的降采样应该能够合并低和高的报告，并平滑曲线。输入以下内容来测试这一假设：
- en: '[PRE70]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This produces the plot in [Figure 21-7](ch21.xhtml#ch021fig7). The high-frequency
    oscillations are gone.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生[图 21-7](ch21.xhtml#ch021fig7)中的图形，振荡的高频部分已消失。
- en: '![Image](../images/21fig07.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/21fig07.jpg)'
- en: '*Figure 21-7: Texas COVID-19-related weekly deaths for the period March 3,
    2020, through March 7, 2021*'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-7：2020年3月3日至2021年3月7日德克萨斯州COVID-19相关每周死亡人数*'
- en: 'Now, let’s downsample to a monthly period:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将数据降采样到每月周期：
- en: '[PRE71]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This produces the even smoother plot in [Figure 21-8](ch21.xhtml#ch021fig8).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生[图 21-8](ch21.xhtml#ch021fig8)中的更平滑图形。
- en: '![Image](../images/21fig08.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/21fig08.jpg)'
- en: '*Figure 21-8: Texas COVID-19-related monthly deaths for the period March 3,
    2020, through March 7, 2021*'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-8：2020年3月3日至2021年3月7日德克萨斯州与COVID-19相关的每月死亡人数*'
- en: Note that you can also downsample to custom periods, such as `'4D'`, for every
    four days.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你也可以降采样到自定义周期，例如每四天的`'4D'`。
- en: '**Changing the Start Date When Resampling**'
  id: totrans-362
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**重采样时更改开始日期**'
- en: 'So far, we’ve been taking the *default* origin (start date) when aggregating
    intervals, but this can lead to unwanted results. Here’s an example:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在聚合间隔时一直使用的是*默认*起始日期，但这可能导致不希望出现的结果。以下是一个例子：
- en: '[PRE72]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Despite the first data point being recorded *at* 9 AM, the resampled sums *start*
    at 8 AM. This is because the default for aggregated intervals is `0`, causing
    the two-hour (`'2H'`) frequency timestamps to be `00:00:00`, . . . `08:00:00`,
    `10:00:00`, and so on, skipping `09:00:00`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管第一个数据点在早上9点被记录，重新采样后的总和却*从*早上8点开始。这是因为聚合间隔的默认值是 `0`，导致两小时（`'2H'`）频率的时间戳为 `00:00:00`，...
    `08:00:00`，`10:00:00` 等，因此跳过了 `09:00:00`。
- en: 'To force the output range to start at `09:00:00`, pass the method’s `origin`
    argument `''start''`. Now it should use the actual start of the time series:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制输出范围从 `09:00:00` 开始，传递方法的 `origin` 参数 `'start'`。现在它应该使用时间序列的实际开始时间：
- en: '[PRE73]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The aggregation starts at 9 AM, as desired.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合从早上9点开始，正如所期望的那样。
- en: '**Resampling Irregular Time Series Using Interpolation**'
  id: totrans-369
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用插值重新采样不规则时间序列**'
- en: Scientific observations are often irregular in nature. After all, wildebeests
    don’t show up at waterholes on a fixed schedule. Fortunately, resampling works
    the same whether a time series has an irregular or fixed frequency.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 科学观察通常是 irregular 的。毕竟，角马不会按照固定的时间表出现在水坑旁。幸运的是，无论时间序列的频率是 irregular 还是 fixed，重新采样的工作方式都是一样的。
- en: As with upsampling, *regularizing* a time series will generate new timestamps
    with empty values. Previously, we filled these blank values using backfilling
    and front filling. In the next example, we’ll use the pandas `interpolate()` method.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 与上采样类似，*正则化*时间序列会生成带有空值的新时间戳。之前，我们使用反向填充和前向填充来填补这些空白值。在下一个示例中，我们将使用 pandas 的`interpolate()`方法。
- en: 'Let’s begin by generating a list of irregularly spaced datetimes with a resolution
    measured in seconds:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先生成一个不规则间隔的日期时间列表，分辨率为秒：
- en: '[PRE74]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Next, in a single line, create a pandas series object where the index is the
    `datetime` string converted to a `DatetimeIndex`:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在一行代码中创建一个 pandas 序列对象，其中索引是转换为 `DatetimeIndex` 的 `datetime` 字符串：
- en: '[PRE75]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, resample this time series at the same resolution (`''s''`) and call `interpolate()`
    using `''linear''` for the `method` argument:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以相同的分辨率（`'s'`）重新采样此时间序列，并使用 `'linear'` 作为 `method` 参数调用 `interpolate()`：
- en: '[PRE76]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: You now have timestamps for every second, and new values have been interpolated
    between the original data points. The `method` argument comes with other options,
    including `nearest`, `pad`, `zero`, `spline`, and more. You can read about them
    at *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.interpolate.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.interpolate.html)*.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经为每秒生成了时间戳，并且在原始数据点之间插值了新值。`method` 参数还提供了其他选项，包括 `nearest`、`pad`、`zero`、`spline`
    等。你可以在 *[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.interpolate.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.interpolate.html)*
    中阅读相关内容。
- en: '**Resampling and Analyzing Irregular Time Series: A Binary Example**'
  id: totrans-379
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**重新采样与分析不规则时间序列：一个二进制示例**'
- en: Let’s look at a realistic example of working with irregular time series. Imagine
    that you’ve attached a sensor to the compressor of a refrigeration unit to see
    how often it’s on (`1`) and off (`0`) during a day.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个处理不规则时间序列的实际例子。假设你已经将一个传感器安装在制冷机的压缩机上，用来查看压缩机在一天内的开（`1`）和关（`0`）状态。
- en: 'To build the toy dataset, enter the following in the console:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建玩具数据集，请在控制台中输入以下内容：
- en: '[PRE77]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This produces the plot in [Figure 21-9](ch21.xhtml#ch021fig9). Note that it
    doesn’t reflect the binary (`0` or `1`) nature of the data.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了[图 21-9](ch21.xhtml#ch021fig9)中的图形。注意，它并未反映数据的二进制（`0` 或 `1`）特性。
- en: '![Image](../images/21fig09.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig09.jpg)'
- en: '*Figure 21-9: A plot of an irregular time series of compressor on-off data*'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-9：压缩机开关数据的不规则时间序列图*'
- en: 'In its raw, irregular form, the data is difficult to visualize and work with.
    For example, if you try to check the state of the compressor at 11 AM, you’ll
    get an error:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在其原始的不规则形式中，数据难以可视化和处理。例如，如果你尝试检查上午11点压缩机的状态，你会遇到错误：
- en: '[PRE78]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The problem is that series indexing doesn’t interpolate on the fly. We need
    to first resample the data to a “working resolution,” in this case, seconds:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，系列索引不能即时插值。我们需要先将数据重新采样到一个“工作分辨率”，在这个例子中是秒：
- en: '[PRE79]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '![Image](../images/21fig10.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/21fig10.jpg)'
- en: '*Figure 21-10: The plot of time series resampled to one-second frequency*'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-10：重新采样为每秒频率的时间序列图*'
- en: 'Now the plot reflects the binary “on-off” nature of the data, and you can extract
    the state at 11 AM:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，图表反映了数据的二进制“开关”特性，你可以提取出上午 11 点的状态：
- en: '[PRE80]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'To determine how many seconds the compressor was off and on during the time
    period, call the `value_counts()` method on the series:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定压缩机在该时间段内的开关时间，请对序列调用`value_counts()`方法：
- en: '[PRE81]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'To determine the fraction of the day that the compressor was on, just divide
    the `value_counts()` output at index `1` by the number of seconds in a day:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定压缩机运行的时间占一天的比例，只需将`value_counts()`输出中的索引`1`的值除以一天的秒数：
- en: '[PRE82]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The compressor ran for only three percent of the day. That’s some good insulation!
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩机只运行了当天的三分之一。这真是很好的隔热效果！
- en: '**Sliding Window Functions**'
  id: totrans-399
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**滑动窗口函数**'
- en: The pandas library comes with functions for transforming time series using a
    *sliding window* or with exponentially decaying weights. These functions smooth
    raw data points so that long-term trends are more apparent.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库提供了用于转换时间序列的函数，这些函数使用*滑动窗口*或具有指数衰减权重的方法。这些函数平滑原始数据点，使得长期趋势更加明显。
- en: A *moving average* is a commonly used time series technique for smoothing noise
    and gaps and revealing underlying data trends. Well-known examples are the 50-
    and 200-day moving averages used to analyze stock market data.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '*移动平均*是常用的时间序列技术，用于平滑噪声和空隙，并揭示潜在的数据趋势。广为人知的例子是用于分析股市数据的 50 天和 200 天移动平均线。'
- en: 'To make a moving average, a “window” of a specified length is used to average
    rows in a DataFrame column. The window starts at the earliest date and slides
    down the column one time unit at a time, and then it repeats this process. Here’s
    an example for a three-day moving average, with the averaged values in bold:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算移动平均，使用指定长度的“窗口”来对 DataFrame 列中的行进行平均。窗口从最早的日期开始，并按时间单位逐步滑动到列的下方，然后重复这个过程。以下是一个三天移动平均的示例，平均值用粗体显示：
- en: '[PRE83]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'To make a “monthly” 30-day moving average of our COVID data from the section
    “Downsampling” on [page 650](ch21.xhtml#ch00lev3sec104), let’s first reimport
    it as a new DataFrame named `df_roll` and replace the anomalous value. (If you
    still have the data in memory, you can use `df_roll = df.copy()` in place of the
    next five lines):'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作我们 COVID 数据的“月度”30 天移动平均（来自“下采样”部分，见[第 650 页](ch21.xhtml#ch00lev3sec104)），首先将其重新导入为一个名为`df_roll`的新
    DataFrame，并替换异常值。（如果你仍然有数据在内存中，可以用`df_roll = df.copy()`替代接下来的五行）：
- en: '[PRE84]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Next, make a `30_day_ma` column for this DataFrame and calculate the values
    by calling the `rolling()` method on the `deathIncrease` column, passing it `30`
    and then tacking on the `mean()` method. Finish by calling `plot()`:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为该 DataFrame 创建一个`30_day_ma`列，并通过调用`rolling()`方法对`deathIncrease`列进行计算，传递`30`，然后加上`mean()`方法。最后调用`plot()`来完成：
- en: '[PRE85]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: As you can see in [Figure 21-11](ch21.xhtml#ch021fig11), the moving average
    curve is smoother than the curve produced by monthly resampling ([Figure 21-8](ch21.xhtml#ch021fig8))
    but retains some of the periodic oscillations.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 21-11](ch21.xhtml#ch021fig11)所示，移动平均曲线比每月重采样所产生的曲线（见[图 21-8](ch21.xhtml#ch021fig8)）更加平滑，但保留了一些周期性的波动。
- en: '![Image](../images/21fig11.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/21fig11.jpg)'
- en: '*Figure 21-11: Texas COVID-related deaths with 30-day moving average curve*'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-11：德克萨斯州与 COVID 相关的死亡人数及 30 天移动平均曲线*'
- en: 'By default, the averaged values are posted at the *end* of the window, which
    makes the average curve look offset relative to the daily data. To post at the
    *center* of the window, pass `True` to the `rolling()` method’s `center` argument:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，平均值会显示在窗口的*末尾*，这使得平均曲线相对于日常数据看起来有所偏移。要将其显示在窗口的*中心*，请将`True`传递给`rolling()`方法的`center`参数：
- en: '[PRE86]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Now, the peaks and valleys in the averaged curve and the raw data are better
    aligned, as illustrated in [Figure 21-12](ch21.xhtml#ch021fig12).
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，平均曲线和原始数据中的峰值和谷值更好地对齐，如[图 21-12](ch21.xhtml#ch021fig12)所示。
- en: '![Image](../images/21fig12.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/21fig12.jpg)'
- en: '*Figure 21-12: Texas COVID-related deaths with 30-day moving average curve
    posted at the center of the window interval*'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-12：德克萨斯州与 COVID 相关的死亡人数及 30 天移动平均曲线，显示在窗口间隔的中心*'
- en: 'You can call other aggregation methods in [Table 21-6](ch21.xhtml#ch021tab6)
    with `rolling()`. Here, we call the standard deviation method on the same 30-day
    sliding window and display the new column with the others ([Figure 21-13](ch21.xhtml#ch021fig13)):'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[表 21-6](ch21.xhtml#ch021tab6)中使用`rolling()`调用其他聚合方法。在这里，我们对同一 30 天滑动窗口调用标准差方法，并将新列与其他列一起显示（见[图
    21-13](ch21.xhtml#ch021fig13)）：
- en: '[PRE87]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '![Image](../images/21fig13.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/21fig13.jpg)'
- en: '*Figure 21-13: A 30-day sliding window standard deviation and moving average
    for COVID-related daily deaths in Texas*'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 21-13：德克萨斯州 COVID 相关每日死亡的 30 天滑动窗口标准差和移动平均*'
- en: In addition to rolling averages with a fixed-sized window, pandas has methods
    for using expanding windows (`expanding()`), binary moving windows (`corr()`),
    exponentially weighted functions (`ewm()`), and user-defined moving window functions
    (`apply()`). You can read about these at *[https://pandas.pydata.org/pandas-docs/stable/reference/frame.html](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html)*
    for DataFrames, and *[https://pandas.pydata.org/pandas-docs/stable/reference/series.html](https://pandas.pydata.org/pandas-docs/stable/reference/series.html)*
    for series.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 除了具有固定窗口大小的滚动平均外，pandas 还提供了使用扩展窗口（`expanding()`）、二进制移动窗口（`corr()`）、指数加权函数（`ewm()`）和用户定义的移动窗口函数（`apply()`）的方法。你可以在
    *[https://pandas.pydata.org/pandas-docs/stable/reference/frame.html](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html)*
    了解关于 DataFrame 的相关信息，在 *[https://pandas.pydata.org/pandas-docs/stable/reference/series.html](https://pandas.pydata.org/pandas-docs/stable/reference/series.html)*
    了解关于 Series 的相关信息。
- en: '**TEST YOUR KNOWLEDGE**'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的知识**'
- en: 6.  What is the index structure associated with the pandas `Timestamp` class?
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 6.  与 pandas `Timestamp` 类相关的索引结构是什么？
- en: a.  `datetime64`
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: a.  `datetime64`
- en: b.  `datetime64[ns]`
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: b.  `datetime64[ns]`
- en: c.  `TimedeltaIndex`
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: c.  `TimedeltaIndex`
- en: d.  `DatetimeIndex`
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: d.  `DatetimeIndex`
- en: 7.  Convert `'2021-2-23 00:00:00'` to a pandas `Timestamp`.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 7.  将 `'2021-2-23 00:00:00'` 转换为 pandas `Timestamp`。
- en: 8.  Localize the previous timestamp to the Europe/Warsaw time zone.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 8.  将上面的时间戳本地化到欧洲/华沙时区。
- en: 9.  Create a PeriodIndex for every hour in May 1, 2021.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 9.  为 2021 年 5 月 1 日的每个小时创建一个 PeriodIndex。
- en: 10.  Which of the following are examples of downsampling?
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 10.  以下哪项是降采样的示例？
- en: a.  Minutes to seconds
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: a.  从分钟到秒
- en: b.  Minutes to hours
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: b.  从分钟到小时
- en: c.  Years to weeks
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: c.  从年到周
- en: d.  Days to months
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: d.  从天到月
- en: '**Summary**'
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Time series represent data indexed to a time reference. Both native Python and
    pandas provide special “time-aware” data types and tools. These let you easily
    handle issues like sexagesimal arithmetic, time zone transitions, daylight saving
    time, leap years, datetime plotting, and more. With the ability to manipulate
    time series, you can gain insights into your data and solve otherwise imponderable
    problems.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列表示以时间为参考的数据索引。Python 和 pandas 都提供了特殊的“时间感知”数据类型和工具。这些工具让你可以轻松处理如六十进制运算、时区转换、夏令时、闰年、日期时间绘图等问题。通过操作时间序列，你可以深入理解数据，解决其他无法预测的问题。
- en: 'Well, that does it for *Python Tools for Scientists*. This book had a simple
    goal: to get you up and running as a scientist using Python.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是*科学家用 Python 的工具*。这本书有一个简单的目标：让你作为一名科学家开始使用 Python。
- en: If you’ve finished the book, you’ve learned how to set your computer up for
    doing science with the Anaconda distribution, organize your projects using conda
    environments and dedicated project folders, and become familiar with coding tools
    like the Jupyter Qt console, Spyder, Jupyter Notebook, and JupyterLab. If you
    were new to Python, you’ve now learned the basics of the language. You’re aware
    of many of the important scientific and visualization packages, and you should
    have some ideas about how to choose among them. Finally, you’ve gotten some hands-on
    experience with key libraries like NumPy, Matplotlib, pandas, seaborn, and scikit-learn.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经读完了这本书，你就学会了如何通过 Anaconda 配置你的计算机进行科学计算，如何使用 conda 环境和专用项目文件夹来组织项目，如何熟悉
    Jupyter Qt 控制台、Spyder、Jupyter Notebook 和 JupyterLab 等编码工具。如果你是 Python 新手，你现在已经掌握了语言的基础知识。你了解了许多重要的科学和可视化包，并且应该对如何在它们之间做出选择有所了解。最后，你已经在像
    NumPy、Matplotlib、pandas、seaborn 和 scikit-learn 等关键库上获得了一些实际操作经验。
- en: Moving forward, the absolute best way to progress your programming knowledge
    and skill is to *do projects*, either for pay or for play. Projects let you reduce
    the enormous Python universe into manageable chunks, force you to focus your full
    attention on a select group of tasks, and grow your confidence. They’ll lead to
    questions that you never knew you had, and seeking the answers will help you further
    your own education. Onward!
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，提升你编程知识和技能的最佳方法是*做项目*，无论是赚钱还是娱乐。项目让你将庞大的 Python 世界拆解成可管理的小块，迫使你集中精力完成一组特定的任务，并提高你的信心。它们会引发你从未想过的问题，寻找答案的过程将有助于你进一步提升自己的教育水平。继续前进！
