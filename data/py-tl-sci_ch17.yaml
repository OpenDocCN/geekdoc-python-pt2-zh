- en: '**17'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**17'
- en: THE GEOVIS LIBRARIES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**地理空间库**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: '*Geospatial* data is anything that includes a reference to geographical location,
    such as latitude and longitude, street address, and ZIP code. It’s important to
    many fields of science, including geology, geography, meteorology, climatology,
    biology, archeology, anthropology, oceanography, economics, and sociology. As
    a result, there are lots of Python libraries dedicated to working with geospatial
    data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*地理空间*数据是指包含地理位置参考的任何数据，例如纬度和经度、街道地址和邮政编码。这对许多科学领域都非常重要，包括地质学、地理学、气象学、气候学、生物学、考古学、人类学、海洋学、经济学和社会学。因此，有很多
    Python 库专门用于处理地理空间数据。'
- en: Geospatial data comprises *vector* and *raster* data ([Figure 17-1](ch17.xhtml#ch017fig1)).
    With vector data, spatial elements (think polygons, lines, and points) are represented
    by x and y coordinates. Examples include road centerlines, country boundaries,
    and Starbucks locations. Raster data consists of a matrix of rows and columns
    with some information associated with each cell (think pixels). Examples include
    aerial photos and satellite images. These data types can be applied to maps as
    *layers*, letting you show just what you need for a given task, such as using
    only vector-based street maps for navigation. You can also use vector data to
    calculate distances and areas.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间数据包括*矢量*和*栅格*数据（[图 17-1](ch17.xhtml#ch017fig1)）。在矢量数据中，空间元素（如多边形、线条和点）通过
    x 和 y 坐标表示。举例来说，包括道路中心线、国家边界和星巴克位置。栅格数据由一组行列组成，每个单元格都有一些相关信息（类似于像素）。例如，航拍照片和卫星图像就是栅格数据的例子。这些数据类型可以作为*图层*应用于地图，让你根据任务需求仅显示所需的内容，比如仅使用基于矢量的街道地图进行导航。你还可以使用矢量数据来计算距离和面积。
- en: '![Image](../images/17fig01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig01.jpg)'
- en: '*Figure 17-1: Representing the world with a combination of vector and raster
    data*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-1：通过矢量和栅格数据的组合表示世界*'
- en: '*Geographic Information Systems (GIS)*, *Global Positioning Systems (GPS)*,
    and remote sensing are examples of technology used to acquire, process, and store
    geospatial data. Python’s flexibility makes it great for wrangling this data from
    a file or a database into something usable. Around 2008, major GIS platforms such
    as ArcGIS and QGIS adopted Python for scripting, toolmaking, and analysis. As
    a result, Python is now the dominant computer language for performing geospatial
    analysis. And just as with statistical visualization, there are a daunting number
    of Python libraries designed to help you visualize geospatial data.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*地理信息系统（GIS）*、*全球定位系统（GPS）*和遥感是用于获取、处理和存储地理空间数据的技术示例。Python 的灵活性使其在将数据从文件或数据库转换为可用数据方面非常出色。大约在
    2008 年，主要的 GIS 平台，如 ArcGIS 和 QGIS，开始采用 Python 进行脚本编写、工具制作和分析。因此，Python 现在成为执行地理空间分析的主流编程语言。正如统计可视化一样，有大量的
    Python 库专为帮助你可视化地理空间数据而设计。'
- en: '**The Geospatial Libraries**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**地理空间库**'
- en: The purpose of geospatial libraries is to keep track of and use spatial object
    types (like points and polygons), spatial reference systems (for projecting the
    Earth’s curved surface onto a plane), geography and geometry formats (for measuring
    distances and areas accurately or quickly), common GIS data formats (for input/output),
    spatial indexing (to speed up processing), and map decorators (such as country
    borders and coastlines). Most will let you create animations, either by converting
    frames to MP4 or directly as live animation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间库的目的是跟踪和使用空间对象类型（如点和多边形）、空间参考系统（用于将地球的曲面投影到平面上）、地理和几何格式（用于精确或快速测量距离和面积）、常见的
    GIS 数据格式（用于输入/输出）、空间索引（加速处理）以及地图装饰器（如国界和海岸线）。大多数库都允许你创建动画，可以通过将帧转换为 MP4 或直接作为实时动画。
- en: '[Table 17-1](ch17.xhtml#ch017tab1) lists some of the more important and popular
    geospatial libraries, along with a few specialty libraries. We’ll take a high-level
    look at several of these in the sections that follow.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 17-1](ch17.xhtml#ch017tab1)列出了一些重要且流行的地理空间库，以及一些特殊的库。接下来的章节中，我们将从高层次上简要了解其中的几个库。'
- en: '**Table 17-1:** Python’s More Important Geospatial Libraries'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 17-1：** Python 的重要地理空间库'
- en: '| **Library** | **Description** | **Website** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **库名** | **描述** | **网站** |'
- en: '| --- | --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| GeoPandas | GIS library meets “pandas with geometry” | *[https://geopandas.org/](https://geopandas.org/)*
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| GeoPandas | GIS 库结合了“带几何的 pandas” | *[https://geopandas.org/](https://geopandas.org/)*
    |'
- en: '| Cartopy | Tools for projection-aware plots with Matplotlib | *[https://scitools.org.uk/cartopy/](https://scitools.org.uk/cartopy/)*
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| Cartopy | 用于与 Matplotlib 一起进行投影感知绘图的工具 | *[https://scitools.org.uk/cartopy/](https://scitools.org.uk/cartopy/)*
    |'
- en: '| geoplot | Cartopy extension (“seaborn for geospatial”) | *[https://residentmario.github.io/geoplot/](https://residentmario.github.io/geoplot/)*
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| geoplot | Cartopy 扩展（“seaborn for geospatial”） | *[https://residentmario.github.io/geoplot/](https://residentmario.github.io/geoplot/)*
    |'
- en: '| Plotly | Easy interactive maps | *[https://plotly.com/python/maps/](https://plotly.com/python/maps/)*
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| Plotly | 易用的交互式地图 | *[https://plotly.com/python/maps/](https://plotly.com/python/maps/)*
    |'
- en: '| folium | Easy interactive maps with low resource usage | *[https://python-visualization.github.io/folium/](https://python-visualization.github.io/folium/)*
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| folium | 低资源消耗的易用交互式地图 | *[https://python-visualization.github.io/folium/](https://python-visualization.github.io/folium/)*
    |'
- en: '| ipyleaflet | Jupyter-LeafletJS bridge based on ipywidgets | *[https://github.com/jupyter-widgets/ipyleaflet/](https://github.com/jupyter-widgets/ipyleaflet/)*
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| ipyleaflet | 基于 ipywidgets 的 Jupyter-LeafletJS 桥接 | *[https://github.com/jupyter-widgets/ipyleaflet/](https://github.com/jupyter-widgets/ipyleaflet/)*
    |'
- en: '| GeoViews | Geographic plots with HoloViews and Cartopy. | *[http://geoviews.org/](http://geoviews.org/)*
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| GeoViews | 使用 HoloViews 和 Cartopy 进行地理绘图。 | *[http://geoviews.org/](http://geoviews.org/)*
    |'
- en: '| KeplerGL | Tools to visualize large datasets in Jupyter | *[https://docs.kepler.gl/docs/keplergl-jupyter/](https://docs.kepler.gl/docs/keplergl-jupyter/)*
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| KeplerGL | 在 Jupyter 中可视化大数据集的工具 | *[https://docs.kepler.gl/docs/keplergl-jupyter/](https://docs.kepler.gl/docs/keplergl-jupyter/)*
    |'
- en: '| pydeck | Large-scale interactivity tools optimized for Jupyter | *[https://pydeck.gl/](https://pydeck.gl/)*
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| pydeck | 优化的适用于 Jupyter 的大规模交互工具 | *[https://pydeck.gl/](https://pydeck.gl/)*
    |'
- en: '| PyGMT | Python wrapper for Generic Mapping tools | *[https://www.pygmt.org/](https://www.pygmt.org/)*
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| PyGMT | 用于通用地图工具的 Python 封装 | *[https://www.pygmt.org/](https://www.pygmt.org/)*
    |'
- en: '| Bokeh | Reactive plots including on Google Maps | *[https://docs.bokeh.org/](https://docs.bokeh.org/)*
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| Bokeh | 包括 Google 地图在内的响应式绘图 | *[https://docs.bokeh.org/](https://docs.bokeh.org/)*
    |'
- en: '| EarthPy | Helper functions for working with spatial data | *[https://earthpy.readthedocs.io/](https://earthpy.readthedocs.io/)*
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| EarthPy | 用于处理空间数据的辅助函数 | *[https://earthpy.readthedocs.io/](https://earthpy.readthedocs.io/)*
    |'
- en: '| gmplot | Matplotlib-like interface to plot on Google Maps | *[https://github.com/gmplot/gmplot/](https://github.com/gmplot/gmplot/)*
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| gmplot | 类似 Matplotlib 的接口，用于在 Google 地图上绘图 | *[https://github.com/gmplot/gmplot/](https://github.com/gmplot/gmplot/)*
    |'
- en: '| MovingPandas | Tools to track and analyze movement data | *[https://anitagraser.github.io/movingpandas/](https://anitagraser.github.io/movingpandas/)*
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| MovingPandas | 用于跟踪和分析运动数据的工具 | *[https://anitagraser.github.io/movingpandas/](https://anitagraser.github.io/movingpandas/)*
    |'
- en: '| cuSpatial | GPU acceleration tool for common spatial operations | *[https://github.com/rapidsai/cuspatial/](https://github.com/rapidsai/cuspatial/)*
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| cuSpatial | 用于常见空间操作的 GPU 加速工具 | *[https://github.com/rapidsai/cuspatial/](https://github.com/rapidsai/cuspatial/)*
    |'
- en: '**NOTE**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The plotting examples in this chapter are intended to demonstrate the complexity
    of the code and the types of plots produced. You’re not expected to run the code
    snippets, because most of the libraries discussed do not come preinstalled with
    Anaconda. If you do want to test them for yourself, you can find installation
    instructions in the product web page cited in each section. I recommend that you
    install them all in a dedicated conda environment (see [Chapter 2](ch02.xhtml))
    rather than dump them in your base environment.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章中的绘图示例旨在展示代码的复杂性和所生成的图形类型。你不需要运行这些代码片段，因为大多数讨论的库并未预先安装在 Anaconda 中。如果你确实想自己测试它们，可以在每个部分引用的产品网页上找到安装说明。我建议你在专门的
    conda 环境中安装它们（请参见[第 2 章](ch02.xhtml)），而不是将它们安装到基础环境中。*'
- en: '***GeoPandas***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GeoPandas***'
- en: '*GeoPandas* is the most popular open source library for parsing geospatial
    data in Python. As you can guess from the name, it extends the data types used
    by pandas (see “pandas” on [page 403](ch15.xhtml#ch00lev2sec198)) and makes working
    with geospatial vector data similar to working with tabular data. It also enables
    operations in Python that would otherwise require a dedicated spatial database
    such as PostGIS.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*GeoPandas* 是 Python 中解析地理空间数据的最流行的开源库。正如你从名字中可以猜到的，它扩展了 pandas 使用的数据类型（参见[第
    403 页](ch15.xhtml#ch00lev2sec198)中的“pandas”），使得处理地理空间矢量数据类似于处理表格数据。它还使得在 Python
    中进行的操作，可以避免使用专用的空间数据库（如 PostGIS）。 '
- en: A *GeoDataFrame* in GeoPandas looks a lot like a tabular DataFrame in pandas
    but with a special “geometry” column for the location data ([Figure 17-2](ch17.xhtml#ch017fig2)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在GeoPandas中，*GeoDataFrame*看起来像pandas中的表格DataFrame，但它有一个特殊的“geometry”列来存储位置数据（[图17-2](ch17.xhtml#ch017fig2)）。
- en: '![Image](../images/17fig02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig02.jpg)'
- en: '*Figure 17-2: The geometry column (boxed) distinguishes a GeoDataFrame from
    a DataFrame.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-2：几何列（框住的部分）区分了GeoDataFrame和DataFrame。*'
- en: This geometry column bundles together both the *type* of geometric object ([Table
    17-2](ch17.xhtml#ch017tab2)) and the *coordinates* (as longitude and latitude)
    needed to draw it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该几何列将几何对象的*类型*（[表17-2](ch17.xhtml#ch017tab2)）和绘制该对象所需的*坐标*（以经纬度表示）捆绑在一起。
- en: '**Table 17-2:** Geometries Used in GeoPandas'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**表17-2：** GeoPandas中使用的几何体'
- en: '| **Geometry type** | **Description** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **几何类型** | **描述** |'
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Point | A point |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Point | 一个点 |'
- en: '| MultiPoint | A set of points |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| MultiPoint | 一组点 |'
- en: '| LineString | A line segment |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| LineString | 一段线段 |'
- en: '| MultiLineSting | A sequence of connected line segments |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| MultiLineString | 一系列连接的线段 |'
- en: '| LinearRing | A closed collection of lines (zero-area polygon) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| LinearRing | 一个封闭的线段集合（零面积多边形） |'
- en: '| Polygon | A closed shape defined by a sequence of points |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Polygon | 由一系列点定义的闭合形状 |'
- en: '| MultiPolygon | A collection of polygons |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| MultiPolygon | 一组多边形 |'
- en: GeoPandas uses not only pandas but several other important open source libraries
    to produce a simple and convenient framework for handling geospatial data. It
    relies on the capabilities of *Shapely* (*[https://pypi.org/project/Shapely/](https://pypi.org/project/Shapely/)*)
    for working with planar geometric shapes (such as street centerlines or country
    boundary polygons), Fiona (*[https://pypi.org/project/Fiona/](https://pypi.org/project/Fiona/)*)
    for reading and writing geographic data file formats, pyproj (*[https://pypi.org/project/pyproj/](https://pypi.org/project/pyproj/)*)
    for handling projections, Matplotlib for plotting, and descartes (*[https://pypi.org/project/descartes/](https://pypi.org/project/descartes/)*)
    for integrating Shapely geometry objects with Matplotlib.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas不仅使用pandas，还使用其他几个重要的开源库，提供一个简单而方便的框架来处理地理空间数据。它依赖于*Shapely*（*[https://pypi.org/project/Shapely/](https://pypi.org/project/Shapely/)*）来处理平面几何形状（如街道中心线或国家边界多边形）、Fiona（*[https://pypi.org/project/Fiona/](https://pypi.org/project/Fiona/)*）来读取和写入地理数据文件格式、pyproj（*[https://pypi.org/project/pyproj/](https://pypi.org/project/pyproj/)*）来处理投影、Matplotlib来绘图，以及descartes（*[https://pypi.org/project/descartes/](https://pypi.org/project/descartes/)*）来将Shapely几何对象与Matplotlib进行集成。
- en: 'As a result, you can plot a map from a GeoSeries or GeoDataFrame with only
    a couple of lines of code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，你可以通过几行代码从GeoSeries或GeoDataFrame绘制地图：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Image](../images/f0461-01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0461-01.jpg)'
- en: In this Jupyter Notebook example, the `world` variable represents a GeoDataFrame
    made from one of GeoPandas’ internal global datasets. Of course, this simple plot
    can be customized further. Style options that you can pass to Matplotlib, especially
    those for lines, will work with the `plot()` method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Jupyter Notebook示例中，`world`变量表示一个由GeoPandas内部全球数据集生成的GeoDataFrame。当然，这个简单的图表可以进一步自定义。你可以传递给Matplotlib的样式选项，特别是针对线条的样式，将与`plot()`方法一起使用。
- en: 'Here’s an example of a choropleth map—where regions are shaded based on a data
    value—for population by country:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个人口按国家划分的分级颜色地图示例——其中各区域根据数据值进行着色：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Image](../images/f0462-01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0462-01.jpg)'
- en: 'With the world data loaded as a GeoDataFrame, it’s easy to filter the data
    and replot it. In the previous plot, we removed Antarctica, given that it has
    no permanent population. Now let’s look at all the countries with a population
    greater than 300 million by changing one line of code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将世界数据加载为GeoDataFrame，可以轻松地过滤数据并重新绘制。在之前的图表中，我们移除了南极洲，因为它没有常住人口。现在，让我们通过修改一行代码来查看所有人口超过3亿的国家：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Rerunning the code block reveals only China, India, and the United States:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行代码块后，仅显示中国、印度和美国：
- en: '![Image](../images/f0462-02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0462-02.jpg)'
- en: Historically, you could plot only static maps with GeoPandas. Now, thanks to
    Contextily (*[https://github.com/geopandas/contextily](https://github.com/geopandas/contextily)*)
    for base maps, and IPYMPL (*[https://github.com/matplotlib/ipympl](https://github.com/matplotlib/ipympl)*)
    for interactive Matplotlib plots in Jupyter, it’s possible to make interactive
    maps with GeoPandas. Likewise, hvPlot, built on HoloViews (see [Chapter 16](ch16.xhtml)),
    uses an interactive Bokeh-based plotting API to add zooming, panning, querying,
    sliders, and clickable legends to both pandas and GeoPandas output ([Figure 17-3](ch17.xhtml#ch017fig3)).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，你只能使用 GeoPandas 绘制静态地图。现在，多亏了 Contextily (*[https://github.com/geopandas/contextily](https://github.com/geopandas/contextily)*)
    提供的基础地图和 IPYMPL (*[https://github.com/matplotlib/ipympl](https://github.com/matplotlib/ipympl)*)
    提供的 Jupyter 中交互式的 Matplotlib 图表，现在可以使用 GeoPandas 创建交互式地图。同样，基于 HoloViews 构建的 hvPlot（见
    [第 16 章](ch16.xhtml)）使用基于 Bokeh 的交互式绘图 API，为 pandas 和 GeoPandas 输出添加了缩放、平移、查询、滑块和可点击图例等功能（见
    [图 17-3](ch17.xhtml#ch017fig3)）。
- en: '![Image](../images/17fig03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig03.jpg)'
- en: '*Figure 17-3: An interactive hvPlot with toolbar and slider widget (courtesy
    of [holoviz.org](http://holoviz.org))*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-3：带工具栏和滑块小部件的交互式 hvPlot（感谢 [holoviz.org](http://holoviz.org) 提供）*'
- en: With the Contextily library installed and imported, GeoPandas can support *tile-based*
    maps as well as the outline-based geo-maps shown previously. A tile map (or *web
    map tile*) is a map displayed in a browser by seamlessly joining dozens of individually
    requested image or vector data files over the Internet. The street and terrain
    layers in Google Maps are familiar examples of tile-based maps. Contextily provides
    easy access to popular tile sources like OpenStreetMap and Stamen, letting you
    add backgrounds similar to those in Google Maps ([Figure 17-4](ch17.xhtml#ch017fig4)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并导入 Contextily 库后，GeoPandas 可以支持*基于瓦片*的地图，以及前面展示的基于轮廓的地理地图。瓦片地图（或 *Web地图瓦片*）是一种通过无缝拼接数十个通过互联网单独请求的图像或矢量数据文件，在浏览器中显示的地图。Google
    Maps 中的街道和地形图层就是基于瓦片的地图的典型例子。Contextily 提供了轻松访问流行瓦片源的功能，如 OpenStreetMap 和 Stamen，允许你添加类似
    Google Maps 背景的地图（见 [图 17-4](ch17.xhtml#ch017fig4)）。
- en: '![Image](../images/17fig04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig04.jpg)'
- en: '*Figure 17-4: A tile map of part of Tokyo, Japan*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-4：东京一部分的瓦片地图*'
- en: Like pandas, GeoPandas operates on a single core, but it also supports *spatial
    indexing*, a technique that can significantly boost performance when querying
    large geospatial datasets. GeoPandas can generate spatial indexes, automatically
    in some cases and manually in others, by letting you call the `sindex` attribute
    on a GeoDataFrame. In addition, a new library, *geofeather* (*[https://pypi.org/project/geofeather/](https://pypi.org/project/geofeather/)*),
    can significantly speed-up reading and writing standard spatial file formats (such
    as *shapefile*).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与 pandas 类似，GeoPandas 在单核上运行，但它还支持*空间索引*，这是一种可以显著提升查询大型地理空间数据集性能的技术。GeoPandas
    可以生成空间索引，在某些情况下自动生成，在其他情况下则需要手动生成，你可以通过调用 GeoDataFrame 上的 `sindex` 属性来实现。此外，一个新的库，*geofeather*
    (*[https://pypi.org/project/geofeather/](https://pypi.org/project/geofeather/)*)，可以显著加快读取和写入标准空间文件格式（如
    *shapefile*）的速度。
- en: GeoPandas is a good all-purpose tool if you’re not planning to perform complex
    data transformations or work with millions of records. Plotting with this tool
    requires knowledge of the somewhat arcane Matplotlib syntax, and add-ons are needed
    to add interactivity. GeoPandas works best with vector data but you can also perform
    limited raster processing using *rasterio* (*[https://rasterio.readthedocs.io/en/latest/](https://rasterio.readthedocs.io/en/latest/)*).
    Fortunately, many other geospatial libraries work well with GeoPandas, so you
    have the option of organizing your data in GeoPandas and plotting it with a different
    tool.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不打算执行复杂的数据转换或处理百万级记录，GeoPandas 是一个非常好的通用工具。使用这个工具进行绘图需要了解一些晦涩的 Matplotlib
    语法，且需要插件来增加交互性。GeoPandas 最适合处理矢量数据，但你也可以使用 *rasterio* (*[https://rasterio.readthedocs.io/en/latest/](https://rasterio.readthedocs.io/en/latest/)*
    ) 执行有限的栅格处理。幸运的是，许多其他地理空间库与 GeoPandas 配合得很好，因此你可以选择在 GeoPandas 中组织数据，并使用其他工具进行绘图。
- en: '***Cartopy***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Cartopy***'
- en: '*Cartopy* is an open source library for producing maps and performing geospatial
    analyses. It’s engineered for scientists and maintained by an active development
    community. Cartopy is an extension of Python’s standard plotting library, Matplotlib,
    and makes use of other libraries, including NumPy, Shapely, and PROJ.4.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*Cartopy* 是一个开源库，用于制作地图和进行地理空间分析。它专为科学家设计，并由一个活跃的开发社区维护。Cartopy 是 Python 标准绘图库
    Matplotlib 的扩展，利用了包括 NumPy、Shapely 和 PROJ.4 在内的其他库。'
- en: Cartopy prides itself on being very “projection aware.” That is, it can handle
    a large number of projections ([Figure 17-5](ch17.xhtml#ch017fig5)) and transform
    points, lines, vectors, polygons, and images between these projections. It also
    pairs well with GeoPandas, allowing you to easily create cartographically accurate
    maps while using raster data more easily than in GeoPandas alone. If you use Matplotlib
    for basic plots, Cartopy lets you extend your skills into cartography with little
    extra effort.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Cartopy 引以为傲的是其“投影感知”功能。也就是说，它能够处理大量的投影（[图 17-5](ch17.xhtml#ch017fig5)），并在这些投影之间转换点、线、向量、多边形和图像。它还与
    GeoPandas 配合得很好，使你能够在使用栅格数据时，比仅使用 GeoPandas 更轻松地创建符合地图学准确性的地图。如果你使用 Matplotlib
    进行基本绘图，Cartopy 使你能够轻松将技能扩展到制图学领域。
- en: '![Image](../images/17fig05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig05.jpg)'
- en: '*Figure 17-5: A few of the many map projections available in Cartopy*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-5：Cartopy 中可用的一些地图投影*'
- en: 'As with many other geospatial libraries, you can make a basic map using only
    a few lines of code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他地理空间库一样，你可以仅用几行代码制作一个基础地图：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Image](../images/f0465-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0465-01.jpg)'
- en: Depending on your setup, Cartopy can post up to a million points quickly but
    performance noticeably drags with larger datasets. You can see more Cartopy plot
    examples on its gallery page (*[https://scitools.org.uk/cartopy/docs/latest/gallery/index.html](https://scitools.org.uk/cartopy/docs/latest/gallery/index.html)*)
    and a list of supported map projections at *[https://scitools.org.uk/cartopy/docs/v0.19/crs/projections.html](https://scitools.org.uk/cartopy/docs/v0.19/crs/projections.html)*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的设置，Cartopy 可以快速绘制最多一百万个点，但随着数据集变大，性能会明显下降。你可以在其画廊页面查看更多 Cartopy 绘图示例 (*[https://scitools.org.uk/cartopy/docs/latest/gallery/index.html](https://scitools.org.uk/cartopy/docs/latest/gallery/index.html)*)，以及支持的地图投影列表
    (*[https://scitools.org.uk/cartopy/docs/v0.19/crs/projections.html](https://scitools.org.uk/cartopy/docs/v0.19/crs/projections.html)*)。
- en: '***Geoplot***'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Geoplot***'
- en: '*Geoplot* is a fairly new, high-level, open source geospatial plotting library.
    As an extension to Cartopy and Matplotlib, it claims to be the “seaborn of geospatial,”
    which means that it builds on the underlying libraries to make mapping easy.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*Geoplot* 是一个相对较新的高级开源地理空间绘图库。作为 Cartopy 和 Matplotlib 的扩展，它自称为“地理空间领域的 seaborn”，这意味着它在底层库的基础上简化了绘图过程，使得地图制作变得更容易。'
- en: Geoplot is designed to work well with GeoPandas input and provides a selection
    of easy-to-use geospatial visualizations (presumably, 90 percent of what you will
    ever need). And because geoplot is built on Cartopy, it can take advantage of
    Cartopy’s extensive list of map projections.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Geoplot 旨在与 GeoPandas 输入良好配合，提供了一系列易于使用的地理空间可视化工具（大概涵盖了你将需要的 90% 的功能）。由于 geoplot
    是基于 Cartopy 构建的，它能够充分利用 Cartopy 广泛的地图投影列表。
- en: 'A standout feature for geoplot is the *cartogram*, a thematic map of polygons,
    such as provinces or states, whose geographic size is warped to be proportional
    to a selected variable, like population, gross domestic product, or obesity level.
    In the following example from geoplot’s plot reference page, you use geopandas
    and one of geoplot’s native datasets, `contiguous_usa`, to easily generate a cartogram
    of the US population by state:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: geoplot 的一大特色是 *卡托图*，这是一种将多边形（如省份或州）在地图上呈现的主题图，其中地理大小根据选定的变量（如人口、国内生产总值或肥胖率）进行扭曲变换。在以下来自
    geoplot 的绘图参考页面的示例中，你使用 geopandas 和 geoplot 的一个原生数据集 `contiguous_usa`，轻松生成了按州划分的美国人口卡托图：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Image](../images/f0466-01.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0466-01.jpg)'
- en: In this cartogram, California, the most populous state, is shown at its true
    size. The remaining states are reduced in size based on the relative size of their
    population.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个卡托图中，加利福尼亚州是美国人口最多的州，按照其真实大小展示。其余州的大小根据各自人口的相对规模进行了缩小。
- en: Geoplot also lets you produce Sankey diagrams. These are a type of flow diagram
    in which the width of lines and arrows is proportional to the volume of movement
    being visualized, such as the flow of traffic over city streets ([Figure 17-6](ch17.xhtml#ch017fig6)).
    The most famous Sankey diagram depicts Napoleon’s infamous Russian campaign and
    retreat from Moscow.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Geoplot 还允许你制作桑基图。这是一种流动图，其中线条和箭头的宽度与可视化的移动量成比例，例如城市街道上的交通流动（[图 17-6](ch17.xhtml#ch017fig6)）。最著名的桑基图描绘了拿破仑著名的俄罗斯战役及其从莫斯科撤退的过程。
- en: '![Image](../images/17fig06.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig06.jpg)'
- en: '*Figure 17-6: Sankey diagram of streets in Washington DC by average daily traffic
    (courtesy of geoplot)*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-6：华盛顿特区街道的桑基图，按日均交通量排序（感谢 geoplot 提供）*'
- en: Like GeoPandas, geoplot makes only static maps. With some extra work, however,
    such as writing your figure to HTML and using the mplleaflet library, you can
    enable interactivity like zooming and panning.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 像 GeoPandas 一样，geoplot 只制作静态地图。然而，通过一些额外的工作，比如将你的图形写入 HTML 并使用 mplleaflet 库，你可以实现交互功能，如缩放和平移。
- en: Geoplot lets you easily make maps if you’re comfortable with giving up a lot
    of design control. To move beyond the basic functionality and produce highly customized
    maps, you’ll need to be familiar with Matplotlib. And even though the core documentation
    is not bad, the immaturity of geoplot means you might have trouble finding tutorials
    or examples to match your specific use cases. Geoplot is also in “maintenance”
    state, with no new features planned.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意放弃较多的设计控制，geoplot 让你可以轻松制作地图。要超越基本功能并制作高度自定义的地图，你需要熟悉 Matplotlib。尽管核心文档还不错，但由于
    geoplot 尚处于不成熟阶段，你可能很难找到符合你特定需求的教程或示例。此外，geoplot 目前处于“维护”状态，没有计划推出新功能。
- en: '***Plotly***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Plotly***'
- en: Plotly and Plotly Express, introduced in [Chapter 16](ch16.xhtml), have extensive
    geospatial data visualization capabilities. They offer many mapping options and
    the Plotly Express API is easy to use. You can make an animated choropleth map
    with a single line of code and deploy it to the web using Dash.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第16章](ch16.xhtml)中介绍的 Plotly 和 Plotly Express，具有广泛的地理空间数据可视化功能。它们提供了许多制图选项，且
    Plotly Express API 使用简便。你可以用一行代码制作动画的 choropleth 地图，并通过 Dash 部署到网页上。
- en: Plotly maps are useful for quickly exploring data, identifying outliers, and
    recognizing trends. You can use the convenience of GeoPandas, or if you have latitude
    and longitude in columns, plot straight from a pandas DataFrame. The following
    Jupyter Notebook example, using Plotly Express, turns a Plotly dataset on worldwide
    volcanoes into a highly interactive figure with only a few lines of code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 地图对于快速探索数据、识别异常值和发现趋势非常有用。你可以使用 GeoPandas 的便利，或者如果你的数据框中有经纬度列，直接从 pandas
    DataFrame 中绘制。以下的 Jupyter Notebook 示例，使用 Plotly Express，将一个关于全球火山的 Plotly 数据集转化为一个高度互动的图形，只需几行代码。
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Image](../images/f0468-01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0468-01.jpg)'
- en: Most of the code consists of importing libraries ➊ and loading the data before
    performing the actual plotting ➋. Within this plot, you can use the cursor to
    grab and rotate the map as if it were a real three-dimensional globe. You can
    hover the cursor over a volcano marker and get a pop-up window listing the type
    of volcano along with other information such as its location, country, and name.
    You also have the option to make markers clickable so that pop-up windows appear
    only when you deliberately use a mouse button.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码由导入库 ➊ 和加载数据构成，之后才是实际的绘图步骤 ➋。在这个图表中，你可以使用光标抓取并旋转地图，就像它是一个真实的三维地球仪一样。你可以将光标悬停在火山标记上，弹出一个窗口显示火山类型以及其他信息，如其位置、国家和名称。你还可以选择让标记可以点击，只有在故意按下鼠标按钮时，弹出窗口才会出现。
- en: If you look at the upper-right corner of this plot, you’ll see a toolbar that
    lets you take screenshots, pan, zoom, and so on. These tools are hugely helpful,
    especially when you need to resolve closely packed data points, such as the numerous
    volcanoes in Iceland ([Figure 17-7](ch17.xhtml#ch017fig7)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看这个图的右上角，你会看到一个工具栏，它可以让你截屏、平移、缩放等。这些工具非常有帮助，特别是当你需要解决密集的数据点时，例如冰岛的众多火山（见[图
    17-7](ch17.xhtml#ch017fig7)）。
- en: '![Image](../images/17fig07.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig07.jpg)'
- en: '*Figure 17-7: Plotly Express reposts data at the appropriate scale for the
    zoom level.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-7：Plotly Express 根据缩放级别重新发布数据，适应合适的比例。*'
- en: 'You can also make 3D surface plots with Plotly, whose automatic toolbars permit
    rotations about multiple axes. Here’s an example for a single volcano:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 Plotly 制作 3D 表面图，其自动工具栏允许围绕多个轴进行旋转。下面是一个单个火山的示例：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Image](../images/f0469-01.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0469-01.jpg)'
- en: Like most other geospatial libraries, Plotly and Plotly Express support *tile-based*
    maps (see [Figure 17-4](ch17.xhtml#ch017fig4)) for adding streets, terrain, imagery,
    and so on. Unlike GeoPandas, you can access these directly, without the need for
    a separate library, like Contextily.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数其他地理空间库一样，Plotly 和 Plotly Express 支持*基于瓦片*的地图（见[图 17-4](ch17.xhtml#ch017fig4)），用于添加街道、地形、影像等内容。与
    GeoPandas 不同，你可以直接访问这些功能，而无需使用像 Contextily 这样的额外库。
- en: If you want to quickly build interactive plots in which you can query a map
    by hovering the cursor over a region, or position user-input widgets like sliders
    on the same screen as the map, Plotly and Plotly Express are sound choices. And
    with Plotly’s Dash library (see “Dash” on [page 446](ch16.xhtml#ch00lev2sec220)),
    you can seamlessly convert your work into a dashboard.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想快速构建交互式图表，可以通过将光标悬停在某个区域来查询地图，或者将用户输入的小部件（如滑块）放置在与地图同一屏幕上，Plotly 和 Plotly
    Express 是不错的选择。通过 Plotly 的 Dash 库（请参阅 [第 446 页](ch16.xhtml#ch00lev2sec220)中的“Dash”），你可以将你的工作无缝地转换为一个仪表盘。
- en: '***folium***'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***folium***'
- en: The open source *folium* library lets you visualize maps using *Leaflet.JS*,
    a powerful JavaScript library for building interactive web-mapping applications
    on most mobile and desktop platforms. First released in 2013, folium is extremely
    popular, and as a result, you’ll find a wealth of material on the internet to
    help you learn how to use it and customize it to your needs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的 *folium* 库让你能够使用 *Leaflet.JS* 可视化地图，Leaflet.JS 是一个强大的 JavaScript 库，用于在大多数移动和桌面平台上构建交互式网页地图应用。Folium
    首次发布于 2013 年，极受欢迎，因此你可以在网上找到大量的资料，帮助你学习如何使用它并根据自己的需求进行定制。
- en: 'With folium, you can select from a number of *tilesets* from mapping services
    like OpenStreetMap, Mapbox, and Stamen. Tilesets are collections of raster or
    vector data broken up into a uniform grid of square tiles with up to 22 preset
    zoom levels. They let you produce beautiful leaflet maps with no effort at all:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 folium，你可以从 OpenStreetMap、Mapbox 和 Stamen 等地图服务中选择多个 *图块集*。图块集是由光栅或矢量数据组成的集合，这些数据被划分成均匀的正方形网格图块，最多有
    22 个预设的缩放级别。它们让你轻松制作出美观的 Leaflet 地图：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Image](../images/f0470-01.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0470-01.jpg)'
- en: This Jupyter Notebook example uses the OpenStreetMap tile by default. The location
    coordinates for the center of the map are in latitude and longitude (this can
    trip you up, as many libraries use the modern longitude-latitude order). You can
    look up these values for an address using tools like *LatLong.net* (*[https://www.latlong.net/geo-tools](https://www.latlong.net/geo-tools)*)
    or by simply doing an online search for a geographic feature’s coordinates. It’s
    also possible to query folium maps for this information using your cursor. This
    map is also scalable; when you zoom in, you get more and more detailed information
    until you exhaust the available tileset zoom levels.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Jupyter Notebook 示例默认使用 OpenStreetMap 图块。地图中心的位置坐标是经纬度（这可能会让你感到困惑，因为许多库使用的是现代的经度-纬度顺序）。你可以使用
    *LatLong.net* (*[https://www.latlong.net/geo-tools](https://www.latlong.net/geo-tools)*)
    等工具查找地址的坐标，或者通过在线搜索地理特征的坐标来获取。也可以通过光标查询 folium 地图来获取这些信息。此地图还具有可缩放性；当你放大时，地图会显示越来越详细的信息，直到你耗尽可用的图块缩放级别。
- en: 'Another strength of folium is its support of *markers*. You’ve probably seen
    these teardrop-shaped icons used to identify search locations on Google maps.
    Folium comes with several predefined markers and will also let you build a custom
    marker by using an image or by accessing free icon libraries. You can also include
    a pop-up window with content. Let’s look at an example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: folium 的另一个优点是它支持 *标记*。你可能见过这些泪滴形的图标，用于在 Google 地图上标识搜索位置。Folium 提供了几个预定义的标记，也允许你通过使用图片或访问免费图标库来创建自定义标记。你还可以在标记上添加弹出窗口。我们来看一个例子：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Image](../images/f0471-01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0471-01.jpg)'
- en: This code uses the “Stamen Terrain” tile depicting the area around Lake Powell
    in Utah. The marker represents the location of a water quality sample, and clicking
    it reveals the sample number.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了“Stamen Terrain”图块，显示了犹他州鲍威尔湖周围的区域。标记表示水质样本的位置，点击标记会显示样本编号。
- en: Now let’s revisit the volcanoes dataset used in “Plotly” on [page 467](ch17.xhtml#ch00lev2sec233).
    If you’re running the code, you can download the volcano icon from sites such
    as Free [onlinewebfonts.com](http://onlinewebfonts.com) (*[https://onlinewebfonts.com/fonts](https://onlinewebfonts.com/fonts))*
    or Iconfinder (*[https://iconfinder.com/](https://iconfinder.com/))*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回顾一下在 [第 467 页](ch17.xhtml#ch00lev2sec233)中使用的火山数据集。如果你运行代码，可以从像 Free [onlinewebfonts.com](http://onlinewebfonts.com)
    (*[https://onlinewebfonts.com/fonts](https://onlinewebfonts.com/fonts)*) 或 Iconfinder
    (*[https://iconfinder.com/](https://iconfinder.com/))* 这样的网站下载火山图标。
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This script produces another world map of volcano locations. [Figure 17-8](ch17.xhtml#ch017fig8)
    is this map zoomed in to Iceland, similar to [Figure 17-7](ch17.xhtml#ch017fig7).
    Note the custom volcano icons, terrain background, hover window, index map at
    lower right, and scale bar at lower left. All with just a few lines of code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本生成了另一个世界火山位置地图。[图17-8](ch17.xhtml#ch017fig8)是该地图缩放至冰岛，类似于[图17-7](ch17.xhtml#ch017fig7)。请注意自定义的火山图标、地形背景、悬停窗口、右下角的索引图以及左下角的比例尺。所有这些都只需几行代码。
- en: '![Image](../images/17fig08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig08.jpg)'
- en: '*Figure 17-8: Icelandic volcanoes plotted with folium*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-8：使用folium绘制的冰岛火山*'
- en: Because folium embeds lots of information, file sizes can grow quite large.
    For example, the previous code produced a 138MB notebook file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于folium嵌入了大量信息，文件大小可能会变得非常大。例如，前面的代码生成了一个138MB的笔记本文件。
- en: Combining folium with the popular GeoPandas library is a great way to visualize
    georeferenced data. Imagine that you’re studying the urban “heat island” effect
    around Paris, France. You’ve recorded thousands of temperature measurements east
    of the city and you’re using GeoPandas to manipulate this data. With a folium
    heatmap, the measurements will aggregate or separate depending on the map’s zoom
    level ([Figure 17-9](ch17.xhtml#ch017fig9)). You can also add a time series, making
    it possible for you to see temperature variations throughout the day, month, year,
    and so on. And with folium’s `MarkerCluster` plug-in, you can adapt this same
    technique to individual markers. Just don’t try adding a legend; folium’s support
    for this feature extends only to choropleth maps.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将folium与流行的GeoPandas库结合使用是可视化地理参考数据的绝佳方法。假设您正在研究法国巴黎周围的城市“热岛”效应。您已记录下成千上万的数据点，记录了城市东部的温度，并且正在使用GeoPandas来处理这些数据。通过folium的热图，数据点将根据地图的缩放级别进行聚合或分离（[图17-9](ch17.xhtml#ch017fig9)）。您还可以添加时间序列，使您能够查看全天、整个月份、全年等的温度变化。而且，借助folium的`MarkerCluster`插件，您可以将这种技术应用于单独的标记。只是不要尝试添加图例；folium仅对分级图有图例支持。
- en: '![Image](../images/17fig09.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig09.jpg)'
- en: '*Figure 17-9: A heatmap of temperature data zoomed out (left) versus zoomed
    in (right)*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-9：温度数据的热图，缩小（左）与放大（右）*'
- en: The folium library is designed for simplicity, performance, and usability. By
    combining the data analysis capabilities of Python libraries like GeoPandas with
    the mapping strengths of LeafletJS, folium lets you generate maps with multiple
    layers of data representation. It’s extremely easy to include useful backgrounds
    such as street maps and terrain maps, and there are lots of plug-ins available
    to extend folium’s functionality (see *[https://python-visualization.github.io/folium/plugins.html#folium-plugins/](https://python-visualization.github.io/folium/plugins.html#folium-plugins/)*).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: folium库旨在简化操作、提高性能和可用性。通过将Python库（如GeoPandas）中的数据分析能力与LeafletJS的映射功能相结合，folium使您能够生成具有多层数据表示的地图。包含有用的背景图像（例如街道地图和地形图）非常简单，而且有许多插件可用来扩展folium的功能（请参见*[https://python-visualization.github.io/folium/plugins.html#folium-plugins/](https://python-visualization.github.io/folium/plugins.html#folium-plugins/)*）。
- en: '***ipyleaflet***'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***ipyleaflet***'
- en: The *ipyleaflet* open source interactive widgets library is based on ipywidgets
    (*[https://github.com/jupyter-widgets/ipywidgets/](https://github.com/jupyter-widgets/ipywidgets/)*).
    Like folium, ipyleaflet wraps Leaflet.JS to bring mapping capabilities to both
    Jupyter Notebook and JupyterLab. Although folium is considered easier to use,
    ipyleaflet is considered more customizable and provides more avenues for interactivity.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*ipyleaflet*开源互动小部件库基于ipywidgets（*[https://github.com/jupyter-widgets/ipywidgets/](https://github.com/jupyter-widgets/ipywidgets/)*）。与folium类似，ipyleaflet封装了Leaflet.JS，为Jupyter
    Notebook和JupyterLab带来映射功能。尽管folium被认为更易于使用，但ipyleaflet被认为更具可定制性，且提供了更多的交互性选择。'
- en: Everything in ipyleaflet, such as tile maps and markers, is interactive, and
    you can dynamically update attributes from Python or the Notebook interface. And
    because ipyleaflet is built upon ipywidgets, you can write programs that use widgets
    to capture user input.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ipyleaflet中的一切，例如瓦片地图和标记，都是互动式的，您可以从Python或笔记本界面动态更新属性。而且，因为ipyleaflet是建立在ipywidgets之上的，您可以编写程序，使用小部件捕捉用户输入。
- en: 'Suppose that you’re compiling statistics on terrestrial impact craters. In
    this example, you use the measure control widget and your mouse to interactively
    find both the radius and area of Aorounga Crater in the Republic of Chad:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在编制地面撞击陨石坑的统计数据。在这个示例中，您使用测量控制小部件和鼠标交互式地找出乍得共和国的阿罗昂加陨石坑的半径和面积：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Image](../images/f0474-01.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0474-01.jpg)'
- en: Clicking the square (![Image](../images/icon01.jpg)) icon on the map activates
    the Measure Distances and Areas tool. You can then click two locations to get
    the linear measurement between them or draw a polygon to get an area, as shown
    in the preceding example. You can even customize the units.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 点击地图上的方形 (![Image](../images/icon01.jpg)) 图标可以激活测量距离和面积工具。然后，你可以点击两个位置以获取它们之间的线性测量，或者绘制一个多边形来获得一个区域，正如前面的示例所示。你甚至可以自定义单位。
- en: 'Another interesting control option is the *SplitMap*, which lets you compare
    a different set of layers at the same location. Imagine that you’re studying a
    night view of Europe and you’re curious about which city is causing a bright cluster
    of lights. With only a few lines of code, you can generate a dual-layer display
    to answer the question:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的控制选项是*SplitMap*，它让你可以在同一位置比较不同的图层集。假设你正在研究欧洲的夜景，并且你很好奇哪座城市造成了一个明亮的光斑。只需几行代码，你就可以生成一个双层显示来回答这个问题：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Image](../images/f0475-01.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0475-01.jpg)'
- en: The previous code produces a “split” map with cities and streets on the left
    and the nighttime satellite view on the right. You can grab the round “|||” marker
    at the center of the screen and drag it to each side to extend one of the maps
    at the expense of the other ([Figure 17-10](ch17.xhtml#ch017fig10)). This lets
    you peek beneath the nighttime map to see the cities and roads, without the need
    to clutter one map by combining it with another or by adjusting the upper map’s
    transparency. You can also zoom in to see smaller cities.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了一个“分割”地图，左侧显示城市和街道，右侧显示夜间卫星图。你可以抓住屏幕中央的圆形“|||”标记并拖动它到每一侧，以牺牲另一侧的地图来扩展一侧的显示（[图17-10](ch17.xhtml#ch017fig10)）。这让你可以在夜间地图下窥视城市和道路，而无需通过将地图合并或调整上方地图的透明度来增加一个地图的混乱。你还可以缩放查看更小的城市。
- en: '![Image](../images/17fig10.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig10.jpg)'
- en: '*Figure 17-10: The SplitMap boundary dragged to the right*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-10：SplitMap边界被拖动到右侧*'
- en: The *Magnifying Glass* is a particularly fun feature that lets you view details
    without changing the overall zoom level of a map. When it’s active, you simply
    move a circle over a map with your cursor to get a zoomed-in view within the circle
    ([Figure 17-11](ch17.xhtml#ch017fig11)). It works at any zoom level and with all
    of the available base maps.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*放大镜* 是一个特别有趣的功能，允许你在不改变地图整体缩放级别的情况下查看详细信息。当它被激活时，你只需将光标移到地图上的一个圆圈内，即可查看该圆圈内的放大视图（[图17-11](ch17.xhtml#ch017fig11)）。它适用于任何缩放级别，并且与所有可用的底图兼容。'
- en: '![Image](../images/17fig11.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig11.jpg)'
- en: '*Figure 17-11: The Magnifying Glass option in ipyleaflet*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-11：ipyleaflet中的放大镜选项*'
- en: Much of this functionality, along with things like marker clustering, is also
    available in folium, though you might need to use a plug-in (*[https://python-visualization.github.io/folium/plugins.html#folium-plugins/](https://python-visualization.github.io/folium/plugins.html#folium-plugins/)*)
    to replicate what you can do in ipyleaflet. However, this functionality overlap
    does not include ways to get user interactions such as selections back into Python
    for further processing, as folium provides only a one-way path from Python into
    a JavaScript map.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 许多此类功能，包括标记聚类等，也可以在folium中使用，尽管你可能需要使用一个插件（*[https://python-visualization.github.io/folium/plugins.html#folium-plugins/](https://python-visualization.github.io/folium/plugins.html#folium-plugins/)）*来复制在ipyleaflet中可以做到的功能。然而，这些功能重叠并不包括将用户交互（如选择）返回到Python中进行进一步处理的方式，因为folium仅提供从Python到JavaScript地图的单向路径。
- en: '**NOTE**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Similar to ipyleaflet, Jupyter-gmaps ([https://github.com/pbugnion/gmaps/](https://github.com/pbugnion/gmaps/))
    is also built upon the Jupyter interactive widgets framework but bridges between
    Jupyter and Google Maps rather than Leaflet.JS.*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*与ipyleaflet类似，Jupyter-gmaps* ([https://github.com/pbugnion/gmaps/](https://github.com/pbugnion/gmaps/))
    *也是建立在Jupyter交互式小部件框架之上，但它连接的是Jupyter和Google Maps，而非Leaflet.JS。*'
- en: '***GeoViews: The HoloViz Approach***'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GeoViews: HoloViz方法***'
- en: The HoloViz-maintained libraries, discussed in [Chapter 16](ch16.xhtml) (see
    [Figure 16-9](ch16.xhtml#ch016fig9)), provide a unified solution for working with
    geospatial data. This includes dashboards and other types of interactive visualization.
    Within this collection of open source libraries, HoloViews provides a lot of support
    for geospatial data, including the ability to perform basic geoscience work.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: HoloViz 维护的库，如 [第 16 章](ch16.xhtml)（见 [图 16-9](ch16.xhtml#ch016fig9)）中讨论的，提供了一个统一的解决方案，用于处理地理空间数据。这包括仪表板和其他类型的交互式可视化。在这系列开源库中，HoloViews
    为地理空间数据提供了大量支持，包括执行基础地球科学工作的能力。
- en: For more advanced work, especially work involving map projections, HoloViz includes
    a dedicated geospatial library called *GeoViews*. Built on HoloViews, and with
    geographic plot types based on the Cartopy library, GeoViews can use either Matplotlib
    or Bokeh as a plotting backend.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的工作，尤其是涉及地图投影的工作，HoloViz 包括一个专门的地理空间库，称为 *GeoViews*。GeoViews 基于 HoloViews，并且基于
    Cartopy 库的地理绘图类型，可以使用 Matplotlib 或 Bokeh 作为绘图后端。
- en: GeoViews lets you work with large, multidimensional geographic datasets, quickly
    visualizing subsets or combinations with access to the underlying raw data. It’s
    designed to work with Iris and xarray libraries and can accept multiple data formats
    including NumPy arrays, pandas DataFrames, and GeoPandas GeoDataFrames. In these
    cases, the data is wrapped in a HoloViews or GeoViews object that provides instant
    interactive visualizations (see “HoloViews” on [page 436](ch16.xhtml#ch00lev2sec217)).
    Geographic projections use the extensive Cartopy coordinate reference system.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: GeoViews 使你能够处理大型、多维的地理数据集，快速可视化子集或组合，并可以访问底层的原始数据。它设计为与 Iris 和 xarray 库一起使用，并且可以接受多种数据格式，包括
    NumPy 数组、pandas DataFrame 和 GeoPandas GeoDataFrame。在这些情况下，数据被封装在 HoloViews 或 GeoViews
    对象中，提供即时交互式可视化（见[第 436 页](ch16.xhtml#ch00lev2sec217)的 “HoloViews”）。地理投影使用广泛的 Cartopy
    坐标参考系统。
- en: 'Like other geospatial libraries, GeoViews gives you access to all kinds of
    useful databases, polygon sets (such as for country boundaries), and tile maps
    of streets and terrain. Plots can be made from only a few lines of code, as in
    this Jupyter Notebook example from the official web page:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他地理空间库类似，GeoViews 让你能够访问各种有用的数据库、多边形集合（如国家边界）以及街道和地形的瓦片地图。只需几行代码，就能生成图表，如官方网页上的
    Jupyter Notebook 示例所示：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Image](../images/f0477-01.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0477-01.jpg)'
- en: 'GeoViews’ support for GeoPandas data structures allows for easy plotting of
    shapefiles and choropleths. Here’s an example of plotting a human population choropleth
    map using a GeoPandas dataset:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: GeoViews 支持 GeoPandas 数据结构，使得绘制 shapefile 和分级图变得轻松。以下是使用 GeoPandas 数据集绘制人口分级图的示例：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Image](../images/f0478-01.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0478-01.jpg)'
- en: 'Finally, here’s the volcanoes example with a twist. Because GeoViews is part
    of HoloViz, you have the option of plotting with hvPlot, which I personally find
    easier to use (much like Plotly Express versus Plotly):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是带有新变化的火山示例。因为 GeoViews 是 HoloViz 的一部分，你可以选择使用 hvPlot 绘制图表，我个人觉得它更容易使用（就像
    Plotly Express 相较于 Plotly）。
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Image](../images/f0479-01.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0479-01.jpg)'
- en: In this case, all the volcano types other than shield volcanoes, stratovolcanoes,
    and cones were dropped from the DataFrame ➊. The map was then customized to plot
    these volcano types with unique shapes ➋, sizes, and colors. Although not shown
    here, you also have the option of assigning a default shape and size.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，除了盾形火山、层状火山和锥形火山之外，所有其他类型的火山都从 DataFrame ➊ 中被移除。然后，地图被定制化，以独特的形状 ➋、大小和颜色绘制这些火山类型。尽管这里没有展示，你也可以选择分配默认的形状和大小。
- en: Note the toolbar along the right side, with icons for panning, zooming, saving,
    and so on, and the customizable hover window. Unfortunately, there’s no tool for
    rotating a globe in an orthographic projection as you can do with Plotly Express,
    as hvPlot uses only Bokeh rather than Plotly as a plotting backend.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意右侧工具栏，包含平移、缩放、保存等图标，以及可自定义的悬停窗口。不幸的是，没有像 Plotly Express 那样能够在正射投影中旋转地球的工具，因为
    hvPlot 仅使用 Bokeh，而不是 Plotly 作为绘图后端。
- en: A major selling point for GeoViews is that it’s part of a holistic, forward-looking
    solution designed to satisfy all your plotting and mapping needs. On the downside,
    documentation is somewhat limited compared to other libraries.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: GeoViews 的一个主要卖点是，它是一个全面、前瞻性的解决方案的一部分，旨在满足你所有绘图和制图的需求。另一方面，与其他库相比，其文档支持相对有限。
- en: '***KeplerGL***'
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***KeplerGL***'
- en: '*KeplerGL JupyterLab extension* is an advanced open source geospatial library
    built on top of Mapbox GL (*[https://www.mapbox.com/](https://www.mapbox.com/)*)
    and deck.gl (*[https://deck.gl/](https://deck.gl/)*). The latter is a WebGL (GPU)-powered
    framework for visually exploring large datasets using a layered approach. It has
    an extensive catalog of layer types for bitmaps, icons, point clouds, grids, contours,
    terrain, and more (see *[https://deck.gl/docs/api-reference/layers/](https://deck.gl/docs/api-reference/layers/)*).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*KeplerGL JupyterLab 扩展* 是一个先进的开源地理空间库，建立在 Mapbox GL (*[https://www.mapbox.com/](https://www.mapbox.com/)*)
    和 deck.gl (*[https://deck.gl/](https://deck.gl/)*）之上。后者是一个 WebGL（GPU）驱动的框架，用于使用分层方法可视化大规模数据集。它拥有大量层类型，支持位图、图标、点云、网格、等高线、地形等多种数据展示（详见
    *[https://deck.gl/docs/api-reference/layers/](https://deck.gl/docs/api-reference/layers/)*）。'
- en: Uber developed KeplerGL (*[https://kepler.gl/](https://kepler.gl/)*) as a web-based
    tool to make it easier for users with a variety of experience and skill levels
    to create meaningful data visualizations. It’s designed for working with large
    geospatial datasets, especially those related to mobility. It includes impressive
    functionality including a GUI ([Figure 17-12](ch17.xhtml#ch017fig12)) that lets
    you drag and drop datasets, use built-in time–series animations, visualize in
    3D, handle millions of data points, perform spatial aggregations on the fly, and
    customize maps by tweaking colors, changing sizes, filtering, and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Uber 开发了 KeplerGL (*[https://kepler.gl/](https://kepler.gl/)*) 作为一个基于 web 的工具，旨在让不同经验和技能水平的用户更容易创建有意义的数据可视化。它专为处理大型地理空间数据集设计，特别是与流动性相关的数据集。它包括令人印象深刻的功能，包括一个图形用户界面（[图
    17-12](ch17.xhtml#ch017fig12)），你可以通过拖放数据集、使用内置的时间序列动画、进行 3D 可视化、处理数百万个数据点、动态执行空间聚合、以及通过调整颜色、大小、过滤等方式定制地图。
- en: '![Image](../images/17fig12.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig12.jpg)'
- en: '*Figure 17-12: The KeplerGL interface for customizing maps works in JupyterLab
    (courtesy of KeplerGL).*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-12：KeplerGL 界面用于在 JupyterLab 中定制地图（图片来自 KeplerGL）。*'
- en: With the KeplerGL GUI running in Jupyter, you can eschew Python completely.
    You can drag and drop a data file into the browser, visualize it with different
    map layers, explore it by filtering and aggregating it, and eventually export
    the final visualization as a static map or an animated video. The website will
    walk you through the map-making workflow (*[https://docs.kepler.gl/docs/user-guides/b-kepler-gl-workflow/](https://docs.kepler.gl/docs/user-guides/b-kepler-gl-workflow/)*)
    and show you how to use the GUI’s friendly menus ([Figure 17-13](ch17.xhtml#ch017fig13)).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中运行 KeplerGL GUI 时，你可以完全避免使用 Python。你可以将数据文件拖放到浏览器中，用不同的地图图层进行可视化，进行过滤和聚合探索，最后将最终的可视化结果导出为静态地图或动画视频。该网站会引导你完成制图工作流程
    (*[https://docs.kepler.gl/docs/user-guides/b-kepler-gl-workflow/](https://docs.kepler.gl/docs/user-guides/b-kepler-gl-workflow/)*)，并展示如何使用
    GUI 的友好菜单（[图 17-13](ch17.xhtml#ch017fig13)）。
- en: '![Image](../images/17fig13.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig13.jpg)'
- en: '*Figure 17-13: A KeplerGL interface menu for selecting a map layer type (courtesy
    of KeplerGL)*'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-13：KeplerGL 界面菜单，用于选择地图图层类型（图片来自 KeplerGL）*'
- en: KeplerGL provides a set of Mapbox basemaps for backgrounds including ones for
    land, water, roads, building footprints, 3D buildings, and labels. You have to
    register with Mapbox, and the free plan comes with 50,000 map downloads per month,
    sufficient for most small applications. You’re also restricted to using data in
    CSV, GeoJSON, pandas DataFrame, or GeoPandas GeoDataFrame formats, which rules
    out live streaming.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: KeplerGL 提供了一组 Mapbox 背景地图，包括用于显示陆地、水域、道路、建筑物轮廓、3D 建筑物和标签的地图。你需要在 Mapbox 注册，免费计划每月提供
    50,000 次地图下载，足以应付大多数小型应用程序。你还被限制使用 CSV、GeoJSON、pandas DataFrame 或 GeoPandas GeoDataFrame
    格式的数据，这意味着无法进行实时数据流处理。
- en: Setting up and using KeplerGL is a little more involved than other geospatial
    libraries. It works in JupyterLab and (currently) must be installed using Python’s
    standard package manager (`pip`) rather than with conda or conda-forge.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和使用 KeplerGL 比其他地理空间库稍微复杂一些。它可以在 JupyterLab 中使用，并且（目前）必须通过 Python 的标准包管理器（`pip`）进行安装，而不是通过
    conda 或 conda-forge 安装。
- en: '***pydeck***'
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***pydeck***'
- en: The *pydeck* graphics library is a set of Python bindings, optimized for a Jupyter
    Notebook environment, for making spatial visualizations using deck.gl. As mentioned
    in the previous section, deck.gl is a WebGL-powered framework for visually exploring
    large datasets using a layered approach.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*pydeck* 图形库是一组针对 Jupyter Notebook 环境优化的 Python 绑定，用于使用 deck.gl 创建空间可视化。如前所述，deck.gl
    是一个 WebGL 驱动的框架，用于使用分层方法可视化大规模数据集。'
- en: The pydeck library grants you access to the full deck.gl layer catalog in Python.
    You can create beautiful deck.gl maps ([Figure 17-14](ch17.xhtml#ch017fig14))
    without using a lot of JavaScript, and you can embed these maps in a Jupyter notebook
    or export them to a stand-alone HTML file. The library has been designed to work
    in tandem with popular JavaScript base map providers, especially Mapbox, but other
    map tile solutions, like OpenStreetMap, may come with different levels of compatibility.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: pydeck 库为你提供了在 Python 中访问完整的 deck.gl 图层目录的权限。你可以创建美丽的 deck.gl 地图（[图 17-14](ch17.xhtml#ch017fig14)），无需编写大量
    JavaScript，还可以将这些地图嵌入到 Jupyter Notebook 中，或者导出为独立的 HTML 文件。该库的设计目的是与流行的 JavaScript
    基础地图提供商（尤其是 Mapbox）协同工作，但其他地图瓦片解决方案，如 OpenStreetMap，可能具有不同的兼容性级别。
- en: '![Image](../images/17fig14.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig14.jpg)'
- en: '*Figure 17-14: Personal injury road accidents in Great Britain ([https://pydeck.gl/gallery/hexagon_layer.html](https://pydeck.gl/gallery/hexagon_layer.html))*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-14：英国的个人伤害道路事故 ([https://pydeck.gl/gallery/hexagon_layer.html](https://pydeck.gl/gallery/hexagon_layer.html))*'
- en: Pydeck supports large-scale updates, such as color changes or data modification,
    to hundreds of thousands of visualized data points in 2D and 3D. And like ipyleaflet,
    there’s support for two-way communication, by which data selected in a visualization
    can be passed back to the Jupyter Notebook kernel. For example, you can pass geometry
    data loaded into a map from a government source into a pandas DataFrame.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Pydeck 支持大规模更新，例如在 2D 和 3D 中对成千上万的数据点进行颜色更改或数据修改。像 ipyleaflet 一样，它支持双向通信，即可以将可视化中选择的数据传回
    Jupyter Notebook 内核。例如，你可以将从政府来源加载到地图上的几何数据传回 pandas DataFrame。
- en: 'Let’s visit our volcano database yet again. The following code snippet, entered
    in a Jupyter notebook, loads the data as a pandas DataFrame and then produces
    a global map zoomed-in on the Horn of Africa:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次访问我们的火山数据库。以下代码片段输入到 Jupyter Notebook 中，会将数据加载为 pandas DataFrame，并生成一个聚焦在非洲之角的全球地图：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Image](../images/f0482-01.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0482-01.jpg)'
- en: After importing the libraries and reading the CSV file in as a DataFrame, you
    call pydeck’s `Layer` method and choose a `ScatterplotLayer` ➊. In the process,
    you also make the points 10 km in radius, color them white, and make them “pickable”
    so that you can hover the cursor over each point to see the associated data in
    the DataFrame (as shown on the map for the “Dama Ali” volcano).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 导入库并将 CSV 文件读取为 DataFrame 后，你调用 pydeck 的 `Layer` 方法并选择 `ScatterplotLayer` ➊。在此过程中，你还将点的半径设置为
    10 公里，颜色设置为白色，并使其“可选”，这样你就可以将光标悬停在每个点上，查看与 DataFrame 中数据相关的内容（如“达马·阿里”火山地图所示）。
- en: Next, you need to set the `view_state`, which tells pydeck where to center the
    map, how far in to zoom, and the `pitch` and `bearing` ➋. These last two let you
    produce a tilted view, like the one in [Figure 17-14](ch17.xhtml#ch017fig14).
    You end by telling pydeck how to render the map and save it as an HTML file ➌.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要设置 `view_state`，它告诉 pydeck 地图的中心位置、缩放比例，以及 `pitch` 和 `bearing` ➋。后两个参数允许你生成一个倾斜的视角，就像
    [图 17-14](ch17.xhtml#ch017fig14) 中的那样。最后，你告诉 pydeck 如何渲染地图并将其保存为 HTML 文件 ➌。
- en: 'If you play with this example for a few minutes, some issues become apparent.
    To assign each type of volcano a unique color, you need to create a new column
    in the DataFrame using the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你玩这个示例几分钟，某些问题会变得显而易见。要为每种类型的火山分配一个独特的颜色，你需要使用以下代码在 DataFrame 中创建一个新列：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Likewise, if you want a legend, you’ll need to use an external library like
    Matplotlib to make one (search for `matplotlib.pyplot.colorbar`) and then render
    it beside your pydeck visualization. Compare this to the Plotly Express and hvPlot
    examples, in which both of these tasks were either extremely intuitive or completely
    automatic.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你需要一个图例，你需要使用像 Matplotlib 这样的外部库来创建一个（搜索 `matplotlib.pyplot.colorbar`），然后将其渲染到你的
    pydeck 可视化旁边。与 Plotly Express 和 hvPlot 示例相比，这两个任务要么非常直观，要么完全自动化。
- en: These issues are partly a function of pydeck’s immaturity and might be addressed
    by the time you read this. However, the current takeaway is that pydeck is best
    reserved for data analytics use cases with large datasets—and that’s where it
    excels.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题部分是由于 pydeck 的不成熟，可能在你读到这篇文章时已经得到解决。然而，目前的结论是，pydeck 最适合用于处理大数据集的数据分析场景——而这正是它的强项所在。
- en: With pydeck, you can use Python to access *Google Earth Engine* (*[https://earthengine.google.com/](https://earthengine.google.com/)*),
    a cloud computing platform for processing satellite imagery and other Earth observation
    data. Earth Engine hosts a multi-petabyte catalog of geospatial datasets and satellite
    imagery that includes historical earth images going back more than 40 years. It
    ingests images on a daily basis, stores them in a public data archive, and then
    makes them freely available for global-scale data mining by academic, nonprofit,
    business, and government users.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pydeck，您可以使用Python访问*Google Earth Engine*（* [https://earthengine.google.com/](https://earthengine.google.com/)
    *），这是一个用于处理卫星图像和其他地球观测数据的云计算平台。Earth Engine托管了一个多拍字节的地理空间数据集和卫星图像目录，包括超过40年的历史地球图像。它每天摄取图像，存储在公共数据档案中，并将其免费提供给学术、非营利、商业和政府用户进行全球规模的数据挖掘。
- en: In addition to allowing access to a large warehouse of geospatial data, Earth
    Engine provides the computational power, APIs, and other tools needed to analyze
    the large datasets. According to the website, these tools provide planetary-scale
    analysis capabilities that allow scientists, researchers, and developers to detect
    changes, map trends, and quantify differences on the Earth’s surface.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供访问大量地理空间数据的仓库，Earth Engine还提供了分析大数据集所需的计算能力、API和其他工具。根据网站介绍，这些工具提供了行星级的分析能力，使科学家、研究人员和开发人员能够检测变化、绘制趋势并量化地球表面差异。
- en: The *pydeck-earthengine-layer* wrapper (*[https://github.com/UnfoldedInc/earthengine-layers/tree/master/py/](https://github.com/UnfoldedInc/earthengine-layers/tree/master/py/)*)
    connects pydeck to Google Earth Engine using deck.gl layers for the Earth Engine
    API (*[https://earthengine-layers.com/](https://earthengine-layers.com/)*). This
    makes it possible to visualize enormous geospatial datasets with Python. The pydeck
    wrapper, released in 2020, can be easily installed through conda-forge. To use
    it, you’ll need to authenticate with an Earth Engine–enabled Google Account (you
    can sign up at *[https://earthengine.google.com/new_signup/](https://earthengine.google.com/new_signup/)*).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*pydeck-earthengine-layer*包装器（* [https://github.com/UnfoldedInc/earthengine-layers/tree/master/py/](https://github.com/UnfoldedInc/earthengine-layers/tree/master/py/)
    *）通过使用deck.gl层将pydeck与Google Earth Engine连接，支持Earth Engine API（* [https://earthengine-layers.com/](https://earthengine-layers.com/)
    *）。这使得通过Python可视化庞大的地理空间数据集成为可能。该pydeck包装器于2020年发布，可以通过conda-forge轻松安装。使用它时，您需要使用启用Earth
    Engine的Google帐户进行身份验证（您可以在* [https://earthengine.google.com/new_signup/](https://earthengine.google.com/new_signup/)
    *注册）。'
- en: Whereas Earth Engine visualizations are typically raster based, pydeck gives
    you the ability to mix raster- and vector-based graphics to open up new visualization
    opportunities. You can add interactivity, such as hover-based tooltips, and you
    can interpret Earth Engine data as terrain elevations to display them in 3D. You
    can even upload and manipulate your own datasets using Earth Engine *platform*
    (*[https://earthengine.google.com/platform/](https://earthengine.google.com/platform/)*).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 而Earth Engine可视化通常是基于栅格的，pydeck则赋予您混合栅格和矢量图形的能力，开辟了新的可视化机会。您可以添加交互性功能，例如基于悬停的工具提示，还可以将Earth
    Engine数据解释为地形高度，以在3D中显示它们。您甚至可以使用Earth Engine *平台*（* [https://earthengine.google.com/platform/](https://earthengine.google.com/platform/)
    *）上传和操作您自己的数据集。
- en: To help you get started, Earth Engine comes with many prepackaged datasets (*[https://developers.google.com/earth-engine/datasets/](https://developers.google.com/earth-engine/datasets/)*)
    and example case studies (*[https://earthengine.google.com/case_studies/](https://earthengine.google.com/case_studies/)*).
    With pydeck and Earth Engine, you can monitor rainfall and floods, vegetation
    changes, forest fires and deforestation, urban sprawl, and more, without the need
    to download thousands of satellite images to your computer.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您入门，Earth Engine提供了许多预打包的数据集（* [https://developers.google.com/earth-engine/datasets/](https://developers.google.com/earth-engine/datasets/)
    *）和示例案例研究（* [https://earthengine.google.com/case_studies/](https://earthengine.google.com/case_studies/)
    *）。通过pydeck和Earth Engine，您可以监控降水和洪水、植被变化、森林火灾和森林砍伐、城市扩展等，而无需将成千上万的卫星图像下载到您的计算机中。
- en: If you expect to work regularly with “planetary scale” datasets, pydeck is a
    great solution. It’s also easier to install than KeplerGL because you can use
    conda-forge. Though it can’t compete with Plotly Express or hvPlot for making
    quick and simple plots on smaller datasets, that gap should start to close as
    the product matures.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你预计会经常处理“行星级”数据集，pydeck 是一个很好的解决方案。它也比 KeplerGL 更容易安装，因为你可以使用 conda-forge。尽管它无法与
    Plotly Express 或 hvPlot 在较小数据集上的快速简单绘图相竞争，但随着产品的成熟，这一差距应该会逐渐缩小。
- en: '***Bokeh***'
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Bokeh***'
- en: Bokeh, introduced in [Chapter 16](ch16.xhtml), is one of the major plotting
    libraries for Python. Like the Matplotlib and Plotly libraries, it comes with
    its own geospatial capabilities (*[https://docs.bokeh.org/en/latest/docs/user_guide/geo.html](https://docs.bokeh.org/en/latest/docs/user_guide/geo.html)*).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Bokeh，已在[第 16 章](ch16.xhtml)介绍，是 Python 主要的绘图库之一。与 Matplotlib 和 Plotly 库类似，它也具有自己的地理空间能力
    (*[https://docs.bokeh.org/en/latest/docs/user_guide/geo.html](https://docs.bokeh.org/en/latest/docs/user_guide/geo.html)*).
- en: Bokeh can accept geospatial data from multiple sources, including GeoPandas
    and GeoJSON. It can also consume XYZ tile services which use the Web Mercator
    projection. With the `gmap()` method you can plot glyphs over a Google Map, though
    you must pass the method a Google API Key, and any use of Bokeh with Google Maps
    must be within Google’s Terms of Service.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Bokeh 可以接收来自多个来源的地理空间数据，包括 GeoPandas 和 GeoJSON。它还可以使用 Web Mercator 投影的 XYZ 瓦片服务。通过
    `gmap()` 方法，你可以在 Google 地图上绘制符号，但你必须提供一个 Google API 密钥，任何使用 Bokeh 与 Google 地图的操作都必须符合
    Google 的服务条款。
- en: Although Bokeh lets you reproduce geospatial capabilities available in other
    libraries, such as choropleths, heatmaps, map tiles, and so on, you might find
    the process more difficult. A common user complaint is that the documentation
    and learning resources are limited. Beginners can also struggle with the “mid-level”
    API that is not exactly difficult, but it’s not exactly easy, either. This can
    be mitigated somewhat by using a high-level API like hvPlot that uses Bokeh as
    its plotting backend.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Bokeh 允许你重现其他库中可用的地理空间功能，例如人口图、热图、地图瓦片等，但你可能会发现这个过程比较困难。一个常见的用户抱怨是文档和学习资源有限。初学者也可能会在“中级”API上遇到困难，这个
    API 并不算难，但也不算容易。使用像 hvPlot 这样高层 API 可以在一定程度上缓解这个问题，hvPlot 使用 Bokeh 作为其绘图后端。
- en: '**Choosing a GeoVis Library**'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**选择 GeoVis 库**'
- en: At this point, you’ve probably concluded that choosing any kind of visualization
    library in Python is like shopping for a new car. You’ll never get all the features
    you want in one place, and for every really useful feature there’s an offsetting
    limitation that forces you to compromise.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 到这时，你可能已经得出结论，选择任何一种 Python 可视化库就像是在买新车。你永远无法在一个地方得到所有你想要的功能，而每一个非常有用的功能背后总有一个相应的限制，迫使你做出妥协。
- en: There is hope, however. Thanks to “bridging” libraries like Contextily, IPYMPL,
    hvPlot, and others, the lines between geospatial plotting libraries are becoming
    increasingly blurred. In addition, most libraries can work with GeoPandas, Python’s
    workhorse for parsing geospatial data, and libraries like Datashader can help
    with plotting large datasets.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然有希望。得益于像 Contextily、IPYMPL、hvPlot 等“桥接”库，地理空间绘图库之间的界限正变得越来越模糊。此外，大多数库都可以与
    GeoPandas 配合使用，GeoPandas 是 Python 用于解析地理空间数据的主要工具，像 Datashader 这样的库也可以帮助绘制大型数据集。
- en: Nevertheless, there are still some important differences that can inform your
    decision of which library, or libraries, to use. As noted in the previous chapter,
    maturity can be a discriminating factor among plotting libraries. [Figure 17-15](ch17.xhtml#ch017fig15)
    shows the age of the various GeoVis libraries as of the year 2022\. This plot
    is at the same scale as Figure 16-26, and if you compare the two, you’ll see that
    even the oldest GeoVis libraries are less than half the age of the oldest InfoVis
    and SciVis library.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然存在一些重要的差异，可以帮助你决定使用哪个库或哪些库。正如上一章所述，成熟度可以作为区分绘图库的重要因素。[图 17-15](ch17.xhtml#ch017fig15)展示了各种
    GeoVis 库到 2022 年的年龄。这个图与图 16-26 使用相同的比例尺，如果你比较这两个图，你会发现即便是最老的 GeoVis 库，其年龄也不到最老的
    InfoVis 和 SciVis 库的一半。
- en: '![Image](../images/17fig15.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/17fig15.jpg)'
- en: '*Figure 17-15: The relative ages of the GeoVis libraries*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-15：GeoVis 库的相对年龄*'
- en: Still, the volume of discussion around mature and widely used libraries such
    as GeoPandas, folium, and Plotly means you’ll find abundant material on how to
    use them. They will be more battle-tested, and you’re unlikely to be the first
    person to encounter a frustrating bug or show-stopping limitation. At the same
    time, some younger libraries have “old bones.” For example, geoplot is built on
    Cartopy, and GeoViews is built on HoloViews and Cartopy, both of which have 10
    times the number of users of GeoViews itself. Whether a library is mature and
    well used depends to some degree on the libraries on which it is built.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，成熟且广泛使用的库（如 GeoPandas、folium 和 Plotly）有大量讨论材料，你可以找到如何使用它们的丰富资料。它们经过了更多的实战考验，你不太可能是第一个遇到令人沮丧的
    bug 或无法解决的限制问题的人。与此同时，一些较年轻的库也有“老骨头”。例如，geoplot 是基于 Cartopy 构建的，GeoViews 则基于 HoloViews
    和 Cartopy 构建，后者的用户数量是 GeoViews 本身的 10 倍。一个库是否成熟且广泛使用，在某种程度上取决于它所构建的基础库。
- en: To further discriminate among libraries, let’s focus on strongpoints. This book
    assumes that most scientists will want to abstract away as much programming as
    possible and learn only one API. To this end, the shaded cells in [Figure 17-16](ch17.xhtml#ch017fig16)
    indicate an out-of-the-box distinguishing feature of a library, based on a combination
    of factors such as the developer’s claims, online tutorials and reviews, and my
    own personal experience. The darker the shade the better, and qualifying factors
    are annotated. Lack of shading does not necessarily mean a feature is absent from
    a library but that 1) it’s subordinate to what you can find in competing libraries,
    or 2) it requires the use of additional libraries for implementation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步区分各个库，让我们关注它们的优势。本书假设大多数科学家希望尽可能抽象化编程，只学习一个 API。为此，[图 17-16](ch17.xhtml#ch017fig16)中的阴影区域标示了库的开箱即用的显著特点，这些特点基于开发者的声明、在线教程与评论以及我个人的经验等多种因素的综合评估。阴影越深，代表该特点越突出，相关的评估因素已注明。没有阴影并不一定意味着某个库缺乏该特性，而是说明：1）它相较于竞争库中的特性较为次要，或
    2）实现该特性需要额外使用其他库。
- en: '![Image](../images/17fig16.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/17fig16.jpg)'
- en: '*Figure 17-16: Strongpoints (shaded with qualifiers) of important Python geospatial
    libraries*'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-16：重要 Python 地理空间库的优势（带有评估标注的阴影区域）*'
- en: As an example, one of Cartopy’s main selling points is its powerful projection
    system, permitting highly accurate mapping together with the ability to perform
    complex data transformations between reference systems. This doesn’t mean the
    other libraries will plot New York City in the middle of the Atlantic, it just
    means that they are subordinate to Cartopy, and libraries built on it, when it
    comes to handling projections. So, if this capability is very important to you,
    Cartopy, geoplot, and GeoViews should be on your radar.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，Cartopy 的一个主要卖点是其强大的投影系统，它不仅能够提供高度准确的地图绘制，还能执行复杂的参考系统数据转换。这并不意味着其他库会把纽约市绘制在大西洋中央，它只是意味着在处理投影时，其他库不如
    Cartopy 及基于 Cartopy 的库。因此，如果这个功能对你非常重要，Cartopy、geoplot 和 GeoViews 应该是你关注的对象。
- en: The folium and ipyleaflet libraries come with a large selection of easily accessible
    map tiles. GeoPandas provides access to these through the Contextily library.
    Although this isn’t a high hurdle to clear, it does break the premise of *science
    first, programming second*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: folium 和 ipyleaflet 库提供了大量易于访问的地图图块。GeoPandas 通过 Contextily 库提供对这些图块的访问。虽然这不是一个很高的门槛，但它确实违背了*科学优先，编程其次*的原则。
- en: If you expect to do a lot of remote sensing work, the pydeck library comes with
    an easy connection to Google Earth Engine with its petabytes of satellite imagery.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你预计进行大量遥感工作，pydeck 库提供了一个轻松连接到 Google Earth Engine 的方式，Google Earth Engine
    拥有PB级的卫星影像数据。
- en: When it comes to ease of use, Plotly Express and folium can’t be beat. They
    represent plotting “sweet spots” that do many things well, as long as you’re not
    using huge datasets. To appreciate this, try to reproduce the Plotly Express map
    in [Figure 17-7](ch17.xhtml#ch017fig7) with other libraries and the same amount
    of code, as shown on [page 467](ch17.xhtml#ch00lev2sec233).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在易用性方面，Plotly Express 和 folium 无可比拟。它们代表了绘图的“甜蜜点”，做得很多事情都很好，只要你不使用庞大的数据集。要理解这一点，可以尝试使用其他库和相同的代码量，重现[图
    17-7](ch17.xhtml#ch017fig7)中的 Plotly Express 地图，如[第 467 页](ch17.xhtml#ch00lev2sec233)所示。
- en: 'If you’re already a seaborn and Matplotlib user, you should find GeoPandas,
    Cartopy, and geoplot somewhat intuitive. GeoViews suffers from limited documentation,
    but you can use hvPlot, also part of the HoloViz family, as an easy-to-use “Plotly
    Express-like” plotting option (see “GeoViews: The HoloViz Approach” on [page 476](ch17.xhtml#ch00lev2sec236)).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经是 seaborn 和 Matplotlib 用户，你应该会发现 GeoPandas、Cartopy 和 geoplot 有一定的直观性。GeoViews
    的文档较为有限，但你可以使用同为 HoloViz 系列的一部分的 hvPlot 作为一种易于使用的“Plotly Express-like”绘图选项（参见[第
    476 页](ch17.xhtml#ch00lev2sec236)中的“GeoViews：HoloViz 方法”）。
- en: GeoViews appears to check all the boxes to some degree. It’s a single, do-it-all,
    cradle-to-grave library that, as part of the unified HoloViz family, may position
    you well for the future. First released in 2016, GeoViews has time to grow its
    popularity and, hopefully, its supporting documentation.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: GeoViews 在某种程度上似乎满足了所有需求。它是一个全功能的库，从头到尾应有尽有，作为统一的 HoloViz 系列的一部分，可能为你未来的工作提供良好的支持。GeoViews
    首次发布于 2016 年，已有时间积累其受欢迎程度，并希望能提供更完善的文档支持。
- en: In terms of data size, most libraries have no trouble plotting hundreds of thousands
    of points, but many begin to choke on larger datasets. This can be mitigated somewhat
    with Datashader. Though not a geospatial library per se, it’s a must-have library
    for scientists who deal with really large geospatial datasets. It breaks the visualization
    process into multiple steps and runs in parallel to quickly create displays for
    large datasets. Likewise, pydeck helps you manage the enormous datasets available
    through sites like Google Earth Engine.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据大小方面，大多数库在绘制数十万点时没有问题，但许多库在处理更大数据集时开始变得吃力。这在一定程度上可以通过 Datashader 缓解。虽然 Datashader
    本身不是一个地理空间库，但它是处理大型地理空间数据集的科学家的必备库。它将可视化过程分解为多个步骤并行运行，从而快速为大数据集创建显示。同样，pydeck
    帮助你管理像 Google Earth Engine 这样的网站提供的大型数据集。
- en: Finally, just because GeoPandas doesn’t tick many boxes doesn’t mean you won’t
    be using it. It’s still the most popular way to wrangle geospatial data. There
    are just better ways to plot and explore the results.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽管 GeoPandas 没有满足许多需求，但这并不意味着你不会使用它。它仍然是处理地理空间数据的最流行方法。只是有更好的方式来绘制和探索结果。
- en: '**Summary**'
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Geospatial data comprises vector and/or raster data that includes a reference
    to geographical location. In this chapter, we reviewed the more important Python
    libraries for plotting this type of data.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间数据包括带有地理位置参考的矢量数据和/或栅格数据。在本章中，我们回顾了用于绘制此类数据的主要 Python 库。
- en: The most popular open source Python library for parsing geospatial data is GeoPandas,
    which also comes with plotting capability built on top of Matplotlib. As many
    other packages work with GeoPandas, you might find yourself using this library
    for preparing data while plotting the results using a different tool.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的开源 Python 库用于解析地理空间数据的是 GeoPandas，它还内置了基于 Matplotlib 的绘图功能。由于许多其他包与 GeoPandas
    配合使用，你可能会发现自己在准备数据时使用这个库，而使用其他工具绘制结果。
- en: As with the InfoVis libraries discussed in the [Chapter 16](ch16.xhtml), your
    personal choice for a geospatial plotting library will depend largely on what
    you need to plot—both now and in the future—and how much effort you want to expend.
    To help you choose, [Figure 17-16](ch17.xhtml#ch017fig16) provided a summary of
    the out-of-the-box distinguishing features of the major geospatial libraries.
    Keep in mind, however, that it’s always possible to cobble-together a custom suite
    of packages using “bridging” libraries that fill-in missing capabilities.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第 16 章](ch16.xhtml)讨论的 InfoVis 库一样，选择一个地理空间绘图库在很大程度上取决于你需要绘制的内容——无论是现在还是将来——以及你愿意投入多少精力。为了帮助你做出选择，[图
    17-16](ch17.xhtml#ch017fig16)提供了主要地理空间库的即用型区分特性总结。需要记住的是，始终有可能通过“桥接”库将缺失的功能填补起来，从而将一组自定义的包组合起来。
