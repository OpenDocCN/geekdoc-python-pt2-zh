- en: A
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A
- en: Python Keywords
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 关键字
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common.jpg)'
- en: '*Keywords* in Python (and most programming languages) are words that have special
    meaning. They are used as part of the programming language itself, and therefore
    must not be used for anything else. For example, if you try to use keywords as
    variables, or use them in the wrong way, you’ll get strange error messages from
    the Python console. This appendix describes each of the Python keywords. You should
    find this to be a handy reference as you continue to program.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python（以及大多数编程语言）中，*关键字*是具有特殊意义的单词。它们是编程语言本身的一部分，因此不能用于其他任何用途。例如，如果你试图将关键字用作变量，或以错误的方式使用它们，Python控制台会显示奇怪的错误信息。本附录描述了每个Python关键字。你可以将它作为一个方便的参考，继续编程时使用。
- en: and
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: and
- en: 'The keyword and is used to join two expressions together in a statement (like
    an if statement) to say that both expressions must be true. Here’s an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`and`用于在语句中将两个表达式连接在一起（例如if语句），表示这两个表达式都必须为真。以下是一个示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code means that the value of the variable age must be greater than 12 and
    less than 20 before the message will be printed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码意味着变量age的值必须大于12且小于20，消息才会被打印出来。
- en: as
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: as
- en: 'The keyword as can be used to give another name to an imported module. For
    example, suppose you had a module with a very long name:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`as`用于为导入的模块指定一个别名。例如，假设你有一个非常长的模块名称：
- en: i_am_a_python_module_that_is_not_very_useful.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: i_am_a_python_module_that_is_not_very_useful.
- en: 'It would be enormously annoying to need to type this module name every time
    you wanted to use it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用该模块时都需要输入这个模块名称会非常烦人：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Instead, you can give the module a new, shorter name when you import it, and
    then simply use that new name (like a nickname), as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以在导入模块时给它一个新的、更短的名字，然后只需使用这个新名字（就像昵称一样），如下所示：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Assert
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Assert
- en: 'The assert keyword is used to say that a value must be true. It’s another way
    of catching errors and problems in code, usually in more advanced programs (which
    is why we don’t use assert in *Python for Kids*). Here’s a simple assert statement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert`关键字用于表示某个值必须为真。这是捕获代码中的错误和问题的另一种方式，通常用于更高级的程序中（这也是我们在*Python for Kids*中不使用`assert`的原因）。以下是一个简单的assert语句：'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we assert that the value of the variable mynumber is less than
    5\. It isn’t, so Python displays an error (called an AssertionError).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们断言变量mynumber的值小于5。它并不是，所以Python会显示一个错误（称为AssertionError）。
- en: ASYNC
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ASYNC
- en: The async keyword is used to define something called a *native coroutine*. This
    is an advanced concept used in asynchronous programming (which is doing multiple
    things in parallel, or doing things after some time).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`关键字用于定义一种叫做*原生协程*的东西。这是异步编程中的一个高级概念（即并行做多件事，或者做一些延迟的事情）。'
- en: Await
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Await
- en: The await keyword is also used for asynchronous programming (similar to async).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`await`关键字也用于异步编程（与`async`类似）。'
- en: Break
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Break
- en: 'The break keyword is used to stop some code from running. You might use break
    inside a for loop, like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`关键字用于停止某段代码的执行。你可以在for循环中使用`break`，像这样：'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since the variable age is set to 10 here, this code will print out the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于变量age在这里被设置为10，代码将打印出以下内容：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the value of the variable x reaches 10, the code prints the text “end counting”
    and then breaks out of the loop.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦变量x的值达到10，代码将打印文本“end counting”，然后跳出循环。
- en: Class
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Class
- en: 'The keyword class is used to define a type of object, like a vehicle, animal,
    or person. Classes can have a function called __init__, which is used to perform
    all the tasks an object of the class needs when it is created. For example, an
    object of the Car class might need a color variable when it’s created:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`class`关键字用于定义一种对象类型，比如车辆、动物或人类。类可以有一个叫做`__init__`的函数，用于执行对象创建时所需的所有任务。例如，创建Car类的对象时可能需要一个颜色变量：'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Continue
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Continue
- en: 'The continue keyword is a way to “jump” to the next item in a loop so the remaining
    code in the loop block is not executed. Unlike break, we don’t jump out of the
    loop—we just carry on with the next item. For example, if we had a list of items
    and wanted to skip items starting with *b*, we could use the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue`关键字是“跳到”循环中的下一个项，这样循环块中的其余代码就不会被执行。与`break`不同，我们不是跳出循环——我们只是继续执行下一个项。例如，如果我们有一个物品列表，并且希望跳过以*b*开头的项，可以使用以下代码：'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We first create our list of items, and then use a for loop to loop over the
    items and run a block of code for each. If the item starts with the letter *b*,
    we continue to the next item. Otherwise, we print out the item.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建我们的项目清单，然后使用`for`循环遍历这些项目，并为每个项目执行一段代码。如果项目以字母*b*开头，我们会跳过该项目。否则，我们打印出该项目。
- en: DEF
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义
- en: 'The def keyword is used to define a function. For example, we can create a
    function to convert a number of years into the equivalent number of minutes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`def`关键字用于定义一个函数。例如，我们可以创建一个函数，将一段年份转化为等效的分钟数：'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: DEL
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除
- en: 'The del keyword is used to delete something. For example, if you had a list
    of things you wanted for your birthday in your diary, but then changed your mind
    about one of them, you might cross it off the list and add something new:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`del`关键字用于删除某个东西。例如，如果你在日记中有一个生日愿望清单，但后来改变了对某个愿望的想法，你可能会把它从清单中划掉，并添加一个新的愿望：'
- en: '![Image](Images/288fig01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/288fig01.jpg)'
- en: 'In Python, the original list would look like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，原始列表看起来像这样：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You could remove the computer game by using del and the index of the item you
    want to delete. You could then add the new item with the append function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`del`和你想删除的项目的索引来移除计算机游戏。然后，你可以通过`append`函数添加新项目：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And then print the new list:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打印出新的列表：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Elif
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 否则
- en: The keyword elif is used as part of an if statement. See the description of
    the if keyword for an example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`elif`关键字作为`if`语句的一部分使用。参见`if`关键字的描述，了解示例。'
- en: Else
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 否则
- en: The keyword else is used as part of an if statement. See the description of
    the if keyword for an example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`关键字作为`if`语句的一部分使用。参见`if`关键字的描述，了解示例。'
- en: Except
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 除外
- en: The except keyword is used for catching problems in fairly complicated code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`except`关键字用于捕捉在比较复杂的代码中可能出现的问题。'
- en: Finally
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最后
- en: The keyword finally is used to make sure that if an error occurs, certain code
    runs (usually to tidy up any mess that a piece of code has left behind). This
    keyword is for more advanced programming.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`finally`关键字用于确保发生错误时，某些代码能够运行（通常用于清理代码留下的任何残余）。这个关键字用于更高级的编程。'
- en: For
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环
- en: 'The for keyword is used to create a loop of code that runs a certain number
    of times. Here’s an example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`关键字用于创建一个执行特定次数的代码循环。这里有一个例子：'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This for loop executes the block of code (the print statement) five times,
    resulting in the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`for`循环执行代码块（打印语句）五次，结果如下输出：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: From
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从
- en: 'When importing a module, you can import just the part you need using the from
    keyword. For example, the turtle module introduced in [Chapter 4](ch04.xhtml#ch04)
    has a class called Turtle, which we use to create a Turtle object (which includes
    the canvas on which the turtle moves). Here’s how we import the entire turtle
    module and then use the Turtle class:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块时，你可以使用`from`关键字仅导入你需要的部分。例如，第[4章](ch04.xhtml#ch04)介绍的`turtle`模块有一个叫做`Turtle`的类，我们使用它来创建一个Turtle对象（该对象包括海龟移动的画布）。下面是如何导入整个`turtle`模块并使用`Turtle`类：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You could also import the Turtle class on its own, and then use it directly
    (without referring to the turtle module at all):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以单独导入Turtle类，然后直接使用它（完全不需要引用turtle模块）：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You might do this so the next time you look at the top of that program, you
    can see all the functions and classes you’re using (which is particularly useful
    in larger programs that import a lot of modules). However, if you choose to do
    this, you won’t be able to use the parts of the module you haven’t imported. For
    example, the time module has functions called localtime and gmtime, but if you
    import only localtime and then try to use gmtime, you’ll get an error:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能这么做是为了，下次查看该程序顶部时，可以看到你正在使用的所有函数和类（这在导入许多模块的较大程序中特别有用）。然而，如果你选择这么做，你将无法使用你没有导入的模块部分。例如，`time`模块有`localtime`和`gmtime`函数，但如果你只导入了`localtime`，然后尝试使用`gmtime`，你会得到一个错误：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The error message name ’gmtime’ is not defined means that Python doesn’t know
    anything about the function gmtime, which is because you haven’t imported it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息“`gmtime`未定义”意味着Python对`gmtime`函数一无所知，这是因为你没有导入它。
- en: 'If a particular module has multiple functions that you want to use, and you
    don’t want to refer to them by using module names (for example, time.localtime,
    or time.gmtime), you can import everything in the module by using an asterisk
    (*), like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个特定模块有多个你想使用的函数，而你不想通过模块名来引用它们（例如，time.localtime，或time.gmtime），你可以使用星号（*）导入模块中的所有内容，像这样：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This form imports everything from the time module, and you can now refer to
    the individual functions by name.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式从time模块中导入了所有内容，你现在可以按名称引用各个函数。
- en: Global
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局
- en: 'The idea of *scope* in programs is introduced in [Chapter 7](ch07.xhtml#ch07).
    Scope refers to the visibility of a variable. If a variable is defined outside
    a function, it can usually be seen (it’s visible) inside the function. On the
    other hand, if the variable is defined inside a function, usually it can’t be
    seen outside that function. The global keyword is one exception to this rule.
    A variable defined as global can be seen everywhere. Here’s an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中*作用域*的概念在[第7章](ch07.xhtml#ch07)中介绍。作用域是指变量的可见性。如果一个变量在函数外部定义，通常可以在函数内部看到（它是可见的）。另一方面，如果变量在函数内部定义，通常无法在函数外部看到。`global`关键字是此规则的一个例外。定义为全局变量的变量可以在任何地方看到。下面是一个示例：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'What do you think happens when you call print(a) and then print(b) after running
    the function test? The first will work, but the second will display an error message:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为当你调用`print(a)`然后运行`print(b)`时会发生什么？第一个会正常工作，但第二个会显示一个错误消息：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The variable a has been changed to have global scope inside the function, so
    it’s visible, even once the function has completed; but b is still visible only
    inside the function. (You must use the global keyword before setting the value
    of your variable.)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 变量a已经被更改为在函数内部具有全局作用域，因此它在函数执行完毕后仍然可见；但变量b仍然仅在函数内部可见。（在设置变量值之前，必须使用`global`关键字。）
- en: If
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果
- en: 'The if keyword is used to make a decision about something. It can also be used
    with the keywords else and elif (else if). An if statement is a way of saying,
    “If something is true, then perform an action of some kind.” Here’s an example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`关键字用于对某件事做出决策。它也可以与`else`和`elif`（else if）一起使用。一个if语句就是在说：“如果某个条件为真，那么执行某个操作。”下面是一个示例：'
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This if statement says that if a toy price is over $1,000, display a message
    that it is overpriced; otherwise, if the toy price is over $100, display a message
    that it’s expensive. If neither of those conditions is true, it should display
    the message, “I can afford that toy.”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个if语句表示，如果玩具价格超过$1,000，显示一条消息说它被高价出售；否则，如果玩具价格超过$100，显示一条消息说它很贵。如果这两个条件都不成立，则应该显示消息：“我能买得起这个玩具。”
- en: Import
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入
- en: 'The import keyword tells Python to load a module so it can be used. For example,
    the following code tells Python to use the sys module:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`关键字告诉Python加载一个模块，以便可以使用。例如，以下代码告诉Python使用`sys`模块：'
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在
- en: The in keyword is used in expressions to see if an item is within a collection
    of items. For example, can the number 1 be found in a list (a collection) of numbers?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`in`关键字用于表达式中，查看某个项目是否在一组项目中。例如，数字1是否可以在一个数字列表（一个集合）中找到？'
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here’s how to find out if the string ’pants’ is in a list of clothing items:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何判断字符串’pants’是否在服装列表中的示例：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Is
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 是
- en: The is keyword is a bit like the *equal to* operator (==), which is used to
    tell if two things are equal (for example, 10 == 10 is true, and 10 == 11 is false).
    However, there is a fundamental difference between is and ==. If you are comparing
    two objects (such as lists), == may return true, while is may not (even if you
    think the objects are the same). This is an advanced programming concept.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`is`关键字有点像*等于*操作符（==），用于判断两个东西是否相等（例如，10 == 10为真，10 == 11为假）。然而，`is`和`==`之间有一个根本的区别。如果你在比较两个对象（如列表），`==`可能返回真，而`is`则可能不返回真（即使你认为这些对象是相同的）。这是一个高级编程概念。'
- en: Lambda
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Lambda
- en: The lambda keyword is used to create anonymous, or inline, functions. This keyword
    is used in more advanced programs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`lambda`关键字用于创建匿名或内联函数。这个关键字用于更高级的程序中。'
- en: Nonlocal
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nonlocal`'
- en: The nonlocal keyword is used to include a variable in the scope of a function
    when it’s declared outside the function. This keyword is used in more advanced
    programs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`nonlocal`关键字用于将一个变量包含到一个函数的作用域中，当它在函数外部声明时。这个关键字用于更高级的程序中。'
- en: Not
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`not`'
- en: 'If something is true, the not keyword makes it false. For example, if we create
    a variable a and set it to the value True, and then print the value of this variable
    using not, we get the following result:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个条件为真，`not`关键字使其变为假。例如，如果我们创建一个变量a并将其设置为True的值，然后使用`not`打印该变量的值，结果如下：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And similarly for a False value, we get True:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于一个False值，我们得到True：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This doesn’t seem very useful until you start using the keyword in if statements.
    For example, to find out whether an item is not in a list, we could write something
    like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来似乎不是很有用，直到你开始在if语句中使用这个关键字。例如，要检查一个项目是否不在列表中，我们可以写如下代码：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Or
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 或者
- en: 'The or keyword joins two conditions in a statement (such as an if statement)
    to say that at least one of the conditions should be true. Here’s an example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: or关键字将两个条件连接在一起，表示至少一个条件应为真。下面是一个示例：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this case, if the value of the variable dino is Tyrannosaurus or Allosaurus,
    the program prints Carnivores. If it is Ankylosaurus or Apatosaurus, the program
    prints Herbivores.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果变量dino的值是暴龙（Tyrannosaurus）或异特龙（Allosaurus），程序会打印出“食肉动物”。如果是甲龙（Ankylosaurus）或梁龙（Apatosaurus），程序会打印出“食草动物”。
- en: Pass
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pass
- en: 'Sometimes when you’re developing a program, you want to write only small pieces
    of it to try things out. The problem with doing this is that you can’t have an
    if statement without the block of code that should be run if the condition in
    the if statement is true. You also cannot have a for loop without the block of
    code that should be run in the loop. For example, the following code works just
    fine:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候在开发程序时，你可能只想写一些小片段来尝试一些功能。这样做的问题是，如果你没有代码块，不能使用if语句来检查条件是否为真；同样，如果没有执行体，你也不能使用for循环。例如，以下代码是可以正常工作的：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'But if you don’t fill in the block of code (the body) for the if statement,
    you’ll get an error message:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你没有为if语句提供代码块（主体），你会得到一个错误信息：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is the error message Python displays when you should have a block of code
    after a statement of some kind (it won’t even let you type this kind of code if
    you’re using IDLE). In cases like these, you can use the pass keyword to write
    a statement but not provide the block of code that goes with it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python显示的错误信息，当你在某些语句后面缺少代码块时（如果你使用的是IDLE，它甚至不允许你输入这样的代码）。在这种情况下，你可以使用pass关键字写一个语句，但不提供与之对应的代码块。
- en: 'For example, say you want to create a for loop with an if statement inside
    it. Perhaps you haven’t decided what to put in the if statement yet—maybe you’ll
    use the print function, or put in a break, or something else. For now, you can
    use pass, and the code will still work (even if it doesn’t do exactly what you
    want yet). Here’s our if statement again, this time using the pass keyword:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你想在一个for循环中使用if语句。也许你还没决定在if语句中写什么——或许你会使用print函数，或者加入break，或者其他什么操作。此时，你可以使用pass，代码仍然能正常工作（即使它还没完全做你想做的事）。以下是我们再次使用pass关键字的if语句：
- en: '[PRE30]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following code shows another use of the pass keyword:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了pass关键字的另一种用法：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Python still checks whether the x variable contains the value 4 every time
    it executes the block of code in the loop, but it will do nothing as a consequence,
    so it will print every number in the range 0 to 7\. Later, you could add the code
    in the block for the if statement, replacing the pass keyword with something else,
    such as break:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 每次Python执行循环体中的代码时，它仍然会检查x变量是否等于4，但因为没有提供其他操作，它什么也不做，所以它会打印出从0到7的每一个数字。稍后，你可以在if语句的代码块中添加其他代码，将pass关键字替换为其他内容，比如break：
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The pass keyword is most commonly used when you’re creating a function but don’t
    want to write the code for it yet.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: pass关键字最常见的用法是，在创建函数时，如果你还不想写出函数的代码，可以先使用它。
- en: Raise
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: raise
- en: The raise keyword can be used to cause an error to happen. That might sound
    like a strange thing to do, but in advanced programming, it can actually be quite
    useful.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: raise关键字可以用来触发一个错误。听起来可能有点奇怪，但在高级编程中，它实际上非常有用。
- en: Return
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: return
- en: 'The return keyword is used to return a value from a function. For example,
    you might create a function to calculate the number of seconds you’ve been alive
    up till your last birthday:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: return关键字用于从函数中返回一个值。例如，你可以创建一个函数来计算你到上一个生日为止活了多少秒：
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'When you call this function, the returned value can be assigned to another
    variable or it can be printed:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用这个函数时，返回的值可以赋值给另一个变量，或者可以直接打印出来：
- en: '[PRE34]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Try
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: try
- en: The try keyword begins a block of code that ends with the except and finally
    keywords. Together, these try/except/finally blocks of code are used to handle
    errors in a program, such as making sure that the program displays a useful message
    to the user rather than an unfriendly Python error. They’re very useful in advanced
    programs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: try 关键字开始一个代码块，这个块以 except 和 finally 关键字结束。try/except/finally 代码块一起用于处理程序中的错误，例如确保程序向用户显示有用的消息，而不是一个难懂的
    Python 错误。它们在高级程序中非常有用。
- en: While
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while
- en: 'The while keyword is a bit like for, except that a for loop counts through
    a range (of numbers), but a while loop keeps on running while an expression is
    true. Be careful with while loops—if the expression is always true, the loop will
    never end (this is called an *infinite loop*). Here’s an example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: while 关键字有点像 for，不过 for 循环遍历一个范围（数字），而 while 循环在某个表达式为真时会一直运行。使用 while 循环时要小心——如果表达式始终为真，循环将永远不会结束（这叫做
    *无限循环*）。以下是一个例子：
- en: '[PRE35]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you run this code, it will loop forever, or at least until you close the
    Python Shell or press CTRL-C to interrupt it. However, the following code will
    print “hello” nine times (each time adding 1 to the variable x, until x is no
    longer less than 10):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这段代码，它会永远循环下去，或者至少直到你关闭 Python Shell 或按下 CTRL-C 来中断它。然而，以下代码会打印出“hello”九次（每次将变量
    x 加 1，直到 x 不再小于 10）：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: with
- en: The with keyword is used with a special kind of object to create a block of
    code, in a similar way to the try and finally keywords, and then manages resources
    for that object. This keyword is used in advanced programs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: with 关键字与一种特殊的对象一起使用，用来创建一个代码块，类似于 try 和 finally 关键字，然后管理该对象的资源。这个关键字通常用于高级程序中。
- en: Yield
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: yield
- en: The yield keyword is a little bit like return, except that it is used with a
    specific class of object called a *generator*. Generators create values on request,
    so in that respect, the range function behaves like a generator.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: yield 关键字有点像 return，但它与一种叫做 *生成器* 的特定对象一起使用。生成器根据请求生成值，因此在这方面，range 函数的行为像一个生成器。
