- en: '7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '7'
- en: Recycling Your Code with Functions and Modules
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数和模块回收你的代码
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: 'Think about how much stuff you throw away each day: water bottles, soda cans,
    potato chip bags, plastic sandwich wrappers, bags that held carrot sticks or apple
    slices, shopping bags, newspapers, magazines, and so on. Now imagine all of that
    trash just got dumped in a pile at the end of your driveway, without separating
    out the paper, the plastic, and the tin cans.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 想想你每天扔掉多少东西：水瓶、汽水罐、薯片袋、塑料三明治包装袋、曾装胡萝卜条或苹果片的袋子、购物袋、报纸、杂志等等。现在想象一下，所有这些垃圾都被堆放在你车道的尽头，且没有分类纸张、塑料和铁罐。
- en: You probably recycle as much as possible, which is good, because no one likes
    to climb over a pile of trash on the way to school. Rather than sitting in an
    enormous, gross pile, recycled glass bottles are melted down and turned into new
    jars and bottles; paper is pulped into recycled paper; and plastic is turned into
    heavier plastic goods. We reuse things we would otherwise throw away.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会尽量回收利用，这很好，因为没有人喜欢在上学的路上爬过一堆垃圾。与其坐在一堆又大又脏的垃圾堆里，回收后的玻璃瓶被熔化并转变成新的罐子和瓶子；纸张被制成再生纸；塑料被转化为更重的塑料制品。我们重新利用那些本应被丢弃的物品。
- en: In the programming world, recycling is just as important. Your program might
    not disappear under a pile of garbage, but if you never reuse any code, you’ll
    type so much that your fingers might eventually wear down to painful stubs! Recycling
    also makes your code shorter and easier to read.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程世界中，回收同样很重要。你的程序可能不会在一堆垃圾下消失，但如果你从不重用任何代码，你将输入大量内容，最终手指可能会疼到无法忍受！回收还可以使你的代码更简洁、更易读。
- en: '![Image](Images/f0084-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0084-01.jpg)'
- en: As you’ll learn in this chapter, Python offers a number of ways to reuse code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将在本章中学到的，Python 提供了多种重用代码的方法。
- en: Using Functions
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用函数
- en: '*Functions* are chunks of code that tell Python to do something. They are one
    way to reuse code—you can use functions in your programs again and again. Python
    has many functions available to use; these are called *built-in* functions, or
    *builtins* (for more information on builtins, see [Appendix B](app02.xhtml#app02)).
    There are also functions available in modules (more on those below), and you can
    even write functions yourself.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数* 是告诉 Python 做某事的代码块。它们是重用代码的一种方式——你可以在程序中反复使用函数。Python 提供了许多可以使用的函数，这些被称为*内置函数*，或*内建函数*（有关内建函数的更多信息，请参见
    [附录 B](app02.xhtml#app02)）。模块中也有可用的函数（下文会讲到），你甚至可以自己编写函数。'
- en: 'We started learning about functions in the previous chapter, when we used range
    and list to make Python count:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章就开始学习函数，当时我们使用 range 和 list 来实现 Python 的计数：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s not too hard to type a list of consecutive numbers yourself, but the larger
    the list, the more you need to type. With functions, you can just as easily create
    a list of a thousand numbers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自己输入一串连续的数字并不太难，但列表越大，输入的内容就越多。使用函数时，你可以轻松地创建一个包含千个数字的列表。
- en: 'Here’s an example that uses the list and range functions to produce a list
    of numbers:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 list 和 range 函数生成数字列表的示例：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When you’re writing simple programs, functions are handy. Once you start writing
    long, complex programs—like games—functions are *essential* (assuming you want
    to finish writing your program this century).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你写简单程序时，函数非常方便。一旦你开始编写长且复杂的程序——比如游戏——函数就变得*不可或缺*（假设你希望在这个世纪完成编写程序）。
- en: Let’s look at how to write our own functions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何编写我们自己的函数。
- en: Parts of a Function
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数的组成部分
- en: 'A function has three parts: a name, parameters, and a body. Here’s an example
    of a simple function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数有三个部分：名称、参数和函数体。以下是一个简单函数的示例：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The name of this function is testfunc. It has a single parameter, myname, and
    its body is the block of code immediately following the line beginning with def
    (short for *define*). A *parameter* is a variable that exists only while a function
    is being used.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的名称是 testfunc。它有一个参数 myname，函数体是紧随 def 这一行（*define*的缩写）后的代码块。*参数* 是在函数使用期间存在的变量。
- en: 'You can run the function by calling its name, using parentheses around the
    parameter value:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用函数的名称并使用括号将参数值传递进去来运行函数：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Functions can take any number of parameters:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接受任意数量的参数：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When using multiple parameters, make sure you separate the values with a comma:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个参数时，确保用逗号分隔各个值：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also create variables first and then call the function with them:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以先创建变量，然后使用它们来调用函数：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A function can return a value with a return statement. For example, you could
    write a function to calculate how much money you’re saving:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以通过return语句返回一个值。例如，你可以写一个函数来计算你节省了多少钱：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This function takes three parameters. It adds the first two (pocket_money and
    paper_route) and subtracts the last (spending). The result is returned and can
    be assigned to a variable (the same way we set other values to variables) or printed:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数有三个参数。它将前两个参数（pocket_money 和 paper_route）相加，再减去最后一个参数（spending）。结果会返回，并且可以赋值给一个变量（就像我们设置其他值给变量一样）或打印出来：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We pass in parameters 10, 10, and 5, and the savings function calculates 15
    as the result and then returns the value.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传入10、10和5三个参数，savings函数计算出15作为结果，然后返回这个值。
- en: Variables and Scope
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量和作用域
- en: 'A variable that’s inside the body of a function can’t be used again once the
    function has finished running because it exists only inside the function. In the
    world of programming, where a variable can be used is called its *scope*. Let’s
    look at a simple function that uses a couple of variables but doesn’t have any
    parameters:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在函数体内的变量在函数运行结束后不能再次使用，因为它只存在于函数内部。在编程的世界中，一个变量可以在哪些地方使用被称为它的*作用域*。让我们来看一个使用几个变量但没有任何参数的简单函数：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this example, we create the variable_test function, which multiplies first_variable
    and second_variable and returns the result:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了变量_test函数，它将first_variable和second_variable相乘并返回结果：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we call this function using print, we get 200\. However, if we try to print
    the contents of first_variable (or second_variable, for that matter) outside of
    the block of code in the function, we get an error message:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用print调用这个函数，我们得到200。然而，如果我们尝试在函数的代码块外打印first_variable（或second_variable，实际上是一样的）的内容，我们会得到一个错误信息：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If a variable is defined outside the function, it has a different scope. For
    example, let’s define a variable before we create our function, and then try using
    it inside the function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个变量在函数外定义，它有不同的作用域。例如，让我们在创建函数之前定义一个变量，然后在函数内部尝试使用它：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this code, even though the variables first_variable and second_variable can’t
    be used outside the function, the variable another_variable (which was created
    outside the function ➊) can be used inside it ➋.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，尽管变量first_variable和second_variable不能在函数外使用，但变量another_variable（它是在函数外创建的➊）可以在函数内部使用➋。
- en: 'Here’s the result of calling this function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是调用这个函数的结果：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, suppose you were building a spaceship out of something economical like
    recycled tin cans. You can flatten two cans a week to create the curved walls
    of your spaceship, but you’ll need about 500 cans to finish the fuselage. Let’s
    try writing a function to print out the total cans flattened each week over a
    year.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你正在用一种经济的材料，比如回收的锡罐，来建造一艘宇宙飞船。你每周可以压扁两个罐子来打造宇宙飞船的弯曲墙壁，但你需要大约500个罐子才能完成机身。让我们尝试写一个函数，打印出每周压扁的总罐子数量，持续一整年。
- en: '![Image](Images/f0087-01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0087-01.jpg)'
- en: 'Our function will calculate how many cans we’ve flattened each week, with the
    number of cans as a parameter (that makes it easier to change the number of cans
    later):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数将计算每周我们压扁了多少罐子，罐子的数量作为参数（这使得以后修改罐子数量更容易）：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On the first line of the function, we create the total_cans variable and set
    its value to 0\. We then create a loop for the weeks in the year and add the number
    of cans flattened each week. This block of code makes up the content of our function,
    and the last two lines make up another block of the for loop.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的第一行，我们创建了total_cans变量并将其值设置为0。然后，我们创建一个循环来遍历一年的每周，并将每周压扁的罐子数量加起来。这段代码构成了我们函数的内容，最后两行构成了for循环的另一个代码块。
- en: 'Let’s try entering that function in the Python Shell and calling it with different
    values for the number of cans, starting with 2:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在Python Shell中输入这个函数，并用不同的罐子数量调用它，从2开始：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This function can be reused with different values for the number of cans per
    week, which is a bit more efficient than retyping the for loop every time you
    want to try it with different numbers. When we run spaceship_building(10), we
    can see we’ll have enough cans to build the spaceship walls at week 50.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可以在每周压扁不同数量的罐子的情况下重复使用，比每次想尝试不同数量时重新输入for循环更高效。当我们运行spaceship_building(10)时，我们可以看到在第50周时，我们会有足够的罐子来建造宇宙飞船的墙壁。
- en: Functions can also be grouped together into modules, which makes Python *really*
    useful, as opposed to just mildly useful.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 函数也可以组合成模块，这使得 Python *非常*有用，而不仅仅是稍微有用。
- en: Using Modules
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模块
- en: '*Modules* are used to group functions, variables, and other things together
    into larger, more powerful programs. Some modules are built in to Python, and
    others must be downloaded separately. There are modules to help you write games
    (such as tkinter, which is built in, and PyGame, which is not), modules for manipulating
    images (such as Pillow, the Python Imaging Library), and modules for drawing three-dimensional
    graphics (such as Panda3D).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块*用于将函数、变量和其他内容组织成更大、更强大的程序。有些模块是内置的，有些则需要单独下载。比如有帮助编写游戏的模块（如内置的 tkinter
    和非内置的 PyGame），也有用于处理图像的模块（如 Python 图像库 Pillow），还有用于绘制三维图形的模块（如 Panda3D）。'
- en: '![Image](Images/f0089-01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0089-01.jpg)'
- en: 'Modules can be used to do all sorts of useful things. For example, if you were
    designing a simulation game and you wanted the world to change according to the
    real world, you could calculate the current date and time by using the built-in
    time module:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以用来做各种有用的事情。例如，如果你在设计一个模拟游戏，并且希望世界根据现实世界发生变化，你可以使用内置的 `time` 模块计算当前的日期和时间：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The import command tells Python we want to use the time module.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 命令告诉 Python 我们想使用 `time` 模块。'
- en: 'We can then call functions available in this module by using the dot symbol.
    (We used similar functions to work with the turtle module in [Chapter 4](ch04.xhtml#ch04),
    such as t.forward(50).) For example, here’s how we might call the asctime function
    in the time module:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用点符号调用此模块中可用的函数。（我们在 [第 4 章](ch04.xhtml#ch04) 中使用了类似的函数来处理 `turtle`
    模块，如 `t.forward(50)`。）例如，下面是我们如何调用 `time` 模块中的 `asctime` 函数：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The asctime function is a part of the time module that returns the current date
    and time as a string.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`asctime` 函数是 `time` 模块的一部分，它返回当前的日期和时间作为一个字符串。'
- en: 'Now suppose you want to ask someone to enter a value, like their date of birth
    or age. You can do this using a print statement to display a message, and the
    sys (short for *system*) module, which contains utilities for interacting with
    the Python system itself. First, we import the sys module:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你想要求某人输入一个值，比如他们的出生日期或年龄。你可以使用 `print` 语句显示一条信息，并使用 `sys`（即 *系统*）模块，这个模块包含了与
    Python 系统交互的工具。首先，我们导入 `sys` 模块：
- en: '![Image](Images/f0090-01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0090-01.jpg)'
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inside the sys module is a special object called stdin (for *standard input*),
    which provides a useful function called readline. The readline function is used
    to read a line of text typed on the keyboard until you press ENTER. (We’ll look
    at how objects work in [Chapter 8](ch08.xhtml#ch08).) To test readline, enter
    the following code in the Python Shell:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sys` 模块中，有一个特殊的对象叫做 `stdin`（即 *标准输入*），它提供了一个有用的函数 `readline`。`readline` 函数用于读取键盘上输入的一行文本，直到你按下
    ENTER 键。（我们将在 [第 8 章](ch08.xhtml#ch08) 中查看对象的工作原理。）要测试 `readline`，可以在 Python Shell
    中输入以下代码：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you then type some words and press ENTER, those words will be printed out
    in the Python Shell.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你接着输入一些文字并按下 ENTER，这些文字会在 Python Shell 中显示出来。
- en: 'Think back to the code we wrote in [Chapter 5](ch05.xhtml#ch05), using an if
    statement:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们在 [第 5 章](ch05.xhtml#ch05) 中编写的代码，使用了 `if` 语句：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Rather than creating the age variable and giving it a specific value before
    the if statement, we can now ask someone to enter the value instead. But first,
    let’s turn the code into a function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以让某人输入值，而不需要在 `if` 语句之前就创建 `age` 变量并赋予它一个具体的值。首先，让我们将代码改成一个函数：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now you can call the function by entering its name and telling it what number
    to use by entering the number in parentheses. Does it work?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过输入函数的名称并在括号中输入数字来调用函数。这样能正常工作吗？
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It works! Now let’s make the function ask for a person’s age. (You can add to
    or change a function as many times as you want.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它工作了！现在让我们让函数要求输入一个人的年龄。（你可以随时增加或修改函数的内容。）
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Did you recognize the function int ➊, which converts a string to a number?
    We included that function because sys.stdin. readline() returns whatever someone
    enters as a string, but we want a number so we can compare it with the numbers
    10 and 13 ➋. To try this yourself, call the function without any parameters, and
    then type a number when How old are you? appears:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你认出了函数 `int` ➊ 吗？它将字符串转换为数字。我们包含了这个函数，因为 `sys.stdin.readline()` 返回的是用户输入的字符串，但我们需要一个数字来与数字
    10 和 13 ➋ 进行比较。要自己尝试一下，请调用该函数而不传递任何参数，然后在显示 “How old are you?” 时输入一个数字：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The first time we call the function, it displays “How old are you?”; then we
    enter 10, and it prints the joke. The second time, we enter 15 and it prints “Huh?”
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用函数时，它会显示“你多大了？”然后我们输入 10，它打印出笑话。第二次我们输入 15，它打印出“哈？”
- en: The input function
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入函数
- en: 'The sys.stdin.readline function is not the only way to read input from the
    keyboard. A much simpler option is the built-in input function. The input function
    takes an optional prompt parameter (a string with the message you want to display),
    and then returns whatever is typed until the ENTER key is hit. [Figure 7-1](ch07.xhtml#ch07fig01)
    shows what happens when you run this code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys.stdin.readline` 并不是读取键盘输入的唯一方式。一个更简单的选择是内置的 `input` 函数。`input` 函数接受一个可选的提示参数（你想要显示的消息字符串），然后返回输入的内容，直到按下
    ENTER 键。[图 7-1](ch07.xhtml#ch07fig01) 展示了运行这段代码时的结果：'
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Image](Images/07fig01.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/07fig01.jpg)'
- en: '*Figure 7-1: Using the input function*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：使用输入函数*'
- en: 'Let’s rewrite the silly_age_joke function to use input instead:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 silly_age_joke 函数重写为使用输入：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Apart from having slightly fewer lines, another difference between the earlier
    code and this version is that we add a *newline* character (∖n) at the end of
    our string (‘How old are you?∖n’). A newline simply moves the cursor from one
    line of the display down to the next one. This happens automatically with print,
    but not with the input function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了行数略少外，早期代码与此版本的另一个区别在于我们在字符串末尾添加了一个*换行*字符（∖n）('How old are you?∖n')。换行符只是将光标从当前行移动到下一行。使用
    print 时这一操作会自动发生，但在输入函数中则不会。
- en: Regardless, this code works exactly the same as before.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这段代码的效果和以前完全一样。
- en: What You Learned
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, you learned to make reusable chunks of code in Python with
    functions and use functions provided by modules. You saw how the scope of variables
    controls whether they can be seen inside or outside of functions. You also learned
    how to create functions by using the def keyword and how to import modules to
    use their contents.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在 Python 中使用函数制作可重用的代码块，并使用模块提供的函数。你了解了变量的作用域如何控制它们是否可以在函数内外访问。你还学会了如何使用
    `def` 关键字创建函数，并如何导入模块来使用其内容。
- en: Programming Puzzles
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程难题
- en: Try the following examples to experiment with creating your own functions. The
    solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下示例来实验创建你自己的函数。解决方案可以在 *[http://python-for-kids.com](http://python-for-kids.com)*
    找到。
- en: '#1: Basic Moon Weight Function'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1: 基本月球体重函数'
- en: 'In one of [Chapter 6](ch06.xhtml#ch06)’s programming puzzles, we created a
    for loop to determine your weight on the moon over a period of 15 years. That
    for loop could easily be turned into a function. Try creating a function that
    takes a starting weight and increases its amount each year. You might call the
    new function using code like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 6 章](ch06.xhtml#ch06) 的编程难题中，我们创建了一个 for 循环来确定你在月球上的体重，时间跨度为 15 年。这个 for
    循环可以很容易地转化为一个函数。尝试创建一个接受起始体重并每年增加一定体重的函数。你可以使用如下代码来调用这个新函数：
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '#2: Moon Weight Function and Years'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2: 月球体重函数与年数'
- en: 'Take the function you’ve just created and change it to work out the weight
    over different periods, such as 5 years or 20 years. Be sure to change the function
    so it takes three arguments: the initial weight, the weight gained each year,
    and the number of years:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 拿到你刚创建的函数，并将其修改为计算不同时间段的体重变化，例如 5 年或 20 年。务必修改函数，使其接受三个参数：初始体重、每年增加的体重和年数：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '#3: Moon Weight Program'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3: 月球体重程序'
- en: 'Instead of using a simple function and passing in the values as parameters,
    you can use sys.stdin.readline() or input() to make a mini-program that prompts
    for the values. In this case, you call the function without any parameters at
    all:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以不使用简单的函数并将值作为参数传入，而是使用 `sys.stdin.readline()` 或 `input()` 创建一个小程序来提示输入这些值。在这种情况下，你可以直接调用没有任何参数的函数：
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The function will display a message asking for the starting weight, a second
    message asking for the amount the weight will increase each year, and a final
    message asking for the number of years. You would see something like the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将显示一条消息，询问起始体重，第二条消息询问每年增加的体重，最后一条消息询问年份。你会看到类似下面的内容：
- en: '[PRE30]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Remember to import the sys module before creating your function, if you are
    using sys.stdin.readline():'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `sys.stdin.readline()`，记得在创建函数之前先导入 sys 模块：
- en: '[PRE31]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '#4: Mars Weight Program'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4: 火星体重程序'
- en: Let’s change our moon weight program to calculate weights on Mars—only this
    time, for your entire family. The function should ask for each family member’s
    weight, calculate how much they would weigh on Mars (by multiplying the number
    by 0.3782), and then add up and display the total weight at the end. You can write
    this code in many ways; what’s important is that it displays the total weight
    at the end.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改月球体重计算程序，改为计算在火星上的体重——这次是为你全家计算。这个函数应该要求输入每个家庭成员的体重，计算他们在火星上的体重（通过将体重乘以0.3782），然后加总并在最后显示总重量。你可以用多种方式来编写这个代码；重要的是它最终能够显示总重量。
