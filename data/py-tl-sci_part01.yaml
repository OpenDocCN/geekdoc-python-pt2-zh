- en: '**PART I'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第一部分'
- en: SETTING UP YOUR SCIENTIFIC CODING ENVIRONMENT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设置你的科学编码环境**
- en: In [Part I](part01.xhtml#part01), you’ll create a scientific coding environment
    to build upon for years to come. You’ll start by installing *Anaconda*, a distribution
    of Python that works on Windows, macOS, and Linux and provides access to the science
    libraries we’ll use in this book. You’ll then learn to use the conda package and
    environment manager to keep your projects organized and up to date. After that,
    you’ll familiarize yourself with the popular coding tools Jupyter Qt console,
    Spyder, Jupyter Notebook, and JupyterLab.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第一部分](part01.xhtml#part01)中，你将创建一个科学编码环境，为未来多年的工作打下基础。你将首先安装*Anaconda*，这是一个适用于Windows、macOS和Linux的Python发行版，提供了本书中将使用的科学库。然后，你将学习使用conda包和环境管理器来保持项目的组织和更新。之后，你将熟悉流行的编码工具Jupyter
    Qt控制台、Spyder、Jupyter Notebook和JupyterLab。
- en: These coding tools help you write code, run code, and review the output, and
    are summarized in [Table I-1](part01.xhtml#ch0itab1). If you’re unsure of the
    meaning of any of the terminology in the table, see the “Terminology” sidebar.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编码工具帮助你编写代码、运行代码并查看输出，已总结在[表I-1](part01.xhtml#ch0itab1)中。如果你不确定表中任何术语的含义，请参见“术语”侧边栏。
- en: '**Table I-1:** Coding Tool Summaries'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**表I-1：** 编码工具摘要'
- en: '![Image](../images/part01_table1fig1.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/part01_table1fig1.jpg)'
- en: The Jupyter Qt console lets you execute commands inside windows called IPython
    interpreters and immediately displays the results. You can use this console to
    interact with and visualize data. It’s also great for learning Python.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Qt控制台让你在名为IPython解释器的窗口内执行命令，并立即显示结果。你可以使用此控制台与数据交互和可视化。它也非常适合学习Python。
- en: The famous Jupyter Notebook is a web application that allows you to create and
    share documents that contain live code, equations, visualizations, and narrative
    text. It’s a wildly popular tool for data science that lets you do everything
    from exploring and cleaning data to producing polished and interactive reports,
    presentations, and dashboards. Using the cloud-based *JupyterHub*, you can serve
    Jupyter notebooks to multiple users such as a class of students or a scientific
    research group.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的Jupyter Notebook是一个Web应用程序，允许你创建和共享包含实时代码、方程式、可视化以及叙述文本的文档。它是数据科学中广泛使用的工具，可以让你做从探索和清洗数据到生成精美的交互式报告、演示和仪表盘的一切。通过基于云的*JupyterHub*，你可以为多个用户提供Jupyter笔记本，例如一班学生或一个科学研究小组。
- en: Spyder and JupyterLab are *integrated development environments (IDEs)*. An IDE
    is an application that provides programmers with a set of tools for software development.
    For example, an IDE might include tools for debugging software and timing how
    long the code, or parts of the code, take to run. IDEs are built to work with
    specific application platforms and remove barriers involved in the development
    life cycle. They are generally used for more heavy-duty programming than is normally
    done in consoles or notebooks. *JupyterLab*, the next-generation user interface
    for Anaconda’s Project Jupyter, combines the classic Jupyter Notebook with a user
    interface that offers an IDE-like experience. It will someday replace Jupyter
    Notebook.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder和JupyterLab是*集成开发环境（IDEs）*。IDE是为程序员提供一套软件开发工具的应用程序。例如，IDE可能包括调试软件和测量代码或代码部分运行时间的工具。IDE旨在与特定的应用平台一起使用，消除开发生命周期中的障碍。它们通常用于比控制台或笔记本中通常做的更复杂的编程。*JupyterLab*是Anaconda的Jupyter项目的下一代用户界面，结合了经典的Jupyter
    Notebook和提供类似IDE体验的用户界面。它将来有一天会取代Jupyter Notebook。
- en: These coding tools are products of *Interactive Python (IPython)*, a command
    shell used for interactive computing. (A *command shell* exposes the operating
    system’s services to a program or human user.) IPython is still evolving, and
    in 2015 the project split so that the language-agnostic parts, such as the notebook
    format, Qt console, web applications, message protocol, and so on, were put in
    the Jupyter project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编码工具是*Interactive Python (IPython)*的产品，IPython是用于交互式计算的命令行外壳。（*命令行外壳*将操作系统的服务暴露给程序或用户。）IPython仍在不断发展，2015年该项目分裂，语言无关的部分（如笔记本格式、Qt控制台、Web应用程序、消息协议等）被移至Jupyter项目。
- en: The name *Jupyter* references the Julia, Python, and R languages, though the
    project supports more than 40 languages. After the split, some terms changed.
    Most notably, IPython Notebook became Jupyter Notebook. There is also some overlap
    in the functionality of IPython products. This can cause confusion, especially
    given the volume of online articles and tutorials that reference the old terminology.
    If you’re interested in the history of IPython and Jupyter Notebook, check out
    the datacamp blog post “IPython or Jupyter?” at *[https://www.datacamp.com/community/blog/ipython-jupyter/](https://www.datacamp.com/community/blog/ipython-jupyter/)*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jupyter*这个名字来源于Julia、Python和R语言，尽管该项目支持超过40种语言。拆分后，一些术语发生了变化。最显著的是，IPython
    Notebook变成了Jupyter Notebook。IPython产品的功能也存在一些重叠。这可能会导致混淆，尤其是考虑到许多在线文章和教程中引用了旧的术语。如果你对IPython和Jupyter
    Notebook的历史感兴趣，可以查看datacamp博客文章“IPython还是Jupyter？”*，[https://www.datacamp.com/community/blog/ipython-jupyter/](https://www.datacamp.com/community/blog/ipython-jupyter/)。'
- en: '**TERMINOLOGY**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**术语**'
- en: The following are some important terms that we’ll be using in [Part I](part01.xhtml#part01).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在[第一部分](part01.xhtml#part01)中使用的一些重要术语。
- en: '**Debugging**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试**'
- en: A multistep process for finding, isolating, and resolving problems that prevent
    proper program operation, known as *bugs*. Debugging is usually performed with
    a program called, appropriately, a *debugger*. Debuggers run the problem program
    under controlled conditions in a step-by-step mode to track its operations. This
    typically involves running or halting the program at specific points, skipping
    over certain parts, displaying memory content, showing the position of errors
    that cause the program to crash, and so on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个多步骤的过程，用于查找、隔离和解决阻止程序正常运行的问题，这些问题被称为*bug*。调试通常使用一个名为*调试器*的程序来进行。调试器在受控条件下以逐步模式运行问题程序，以跟踪其操作。这通常包括在特定点运行或暂停程序，跳过某些部分，显示内存内容，显示导致程序崩溃的错误位置，等等。
- en: '**Extensible**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展**'
- en: '*Extensibility* is a principle used in software engineering and systems design
    that indicates whether a tool provides for future growth. JupyterLab, for example,
    is designed as an extensible environment. JupyterLab *extensions* are add-ons
    that provide new interactive features to the JupyterLab interface. For instance,
    *JupyterLab LaTeX* is an extension that lets you live-edit LaTeX documents, *JupyterLab
    Plotly* is an extension for rendering Plotly charts, and *JupyterLab System Monitor*
    lets you monitor your own resource usage, such as memory and CPU time. You can
    even write custom plug-ins for your own projects.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*可扩展性*是软件工程和系统设计中的一个原则，它表明一个工具是否提供了未来发展的空间。例如，JupyterLab被设计为一个可扩展的环境。JupyterLab的*扩展*是提供新的交互功能的附加组件。例如，*JupyterLab
    LaTeX*是一个允许你实时编辑LaTeX文档的扩展，*JupyterLab Plotly*是一个渲染Plotly图表的扩展，*JupyterLab系统监视器*让你监控自己的资源使用情况，比如内存和CPU时间。你甚至可以为自己的项目编写自定义插件。'
- en: '**IDE**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成开发环境（IDE）**'
- en: An IDE is a coding tool that integrates other specialized utilities into a single
    programming environment. Among these specialized tools are a text editor, a debugger,
    functions for autocompleting code, functions for highlighting mistakes, file managers,
    project managers, a performance profiler, a deployment tool, a compiler, and so
    on. By combining common software-writing tools into a single application, IDEs
    increase programmer productivity and make it easier to manage big projects with
    lots of interrelated scripts. The downside is that IDEs can be *heavy*, meaning
    they can take up a lot of system resources. They can also be a bit intense for
    beginners and those who need to write only relatively simple scripts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: IDE是一种编程工具，它将其他专用工具集成到一个单一的编程环境中。这些专用工具包括文本编辑器、调试器、代码自动完成功能、错误高亮功能、文件管理器、项目管理器、性能分析器、部署工具、编译器等等。通过将常见的软件开发工具整合到一个应用程序中，IDE提高了程序员的生产力，并且使得管理有许多互相关联脚本的大型项目变得更加容易。缺点是，IDE可能会比较*沉重*，意味着它们可能占用大量系统资源。对于初学者和只需要编写相对简单脚本的人来说，IDE也可能显得有些过于复杂。
- en: '**Introspection**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**自省**'
- en: The ability to determine the type of an object and check its properties at runtime.
    In Python, an *object* is a code feature that has attributes and methods; you’ll
    learn more about these in [Chapter 13](ch13.xhtml). Code introspection dynamically
    examines these objects and provides information about them. When introspection
    is available, hovering the cursor over an object in your code will launch a pop-up
    window listing the type of object as well as useful tips about using it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确定对象类型并在运行时检查其属性的能力。在Python中，*对象*是一种具有属性和方法的代码特性；你将在[第13章](ch13.xhtml)中进一步了解这些内容。代码自省动态检查这些对象并提供关于它们的信息。当自省功能可用时，将鼠标悬停在代码中的对象上会弹出一个窗口，列出对象的类型以及有关如何使用它的有用提示。
- en: '**Kernel**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**内核**'
- en: The computational engine at the core of an operating system. It is always resident
    in memory, which means that the operating system is not permitted to swap it out
    to a storage device. The kernel manages disks, tasks, and memory and acts as a
    bridge between applications and the data processing performed at the hardware
    level.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统核心中的计算引擎。它始终驻留在内存中，这意味着操作系统不能将其交换到存储设备上。内核管理磁盘、任务和内存，并作为应用程序与硬件层面数据处理之间的桥梁。
- en: '**Profiling**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能分析**'
- en: An analysis that measures the amount of time or memory required for a program,
    or a program’s components, to run. Profiling information can optimize code and
    improve its performance. IDEs, such as Spyder, come with profiling tools built
    in.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一种分析方法，用于衡量程序或程序组件在运行时所需的时间或内存。性能分析信息可以优化代码并提高其性能。集成开发环境（IDE），如Spyder，内置了性能分析工具。
- en: '**Qt**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt**'
- en: Pronounced *cute*, this is a widget (“Windows gadget”) toolkit for creating
    graphical user interfaces and cross-platform applications that run on Windows,
    macOS, Linux, and Android.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 发音为*cute*，这是一个小工具（“Windows 小工具”）工具包，用于创建图形用户界面和跨平台应用程序，这些应用程序可以在Windows、macOS、Linux和Android上运行。
- en: '**Terminal**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**终端**'
- en: In modern usage, *terminal* refers to a *terminal emulator* rather than actual
    hardware such as a monitor and keyboard. Emulators provide a text-based interface
    at which to enter commands and may also be referred to as a *command line interface
    (CLI)*, *command prompt*, *console*, or *shell*. The major operating systems all
    come with some type of terminal. Windows includes the Command Prompt executable,
    *cmd.exe*, for running Disk Operating System (DOS) commands and to connect to
    other servers. macOS ships with the aptly named *Terminal*, which you can use
    to run Unix commands within the operating system or to access other machines using
    the Zsh or Z shell. Unix normally includes a program called *xterm*, which can
    run *Bash* or other Unix shells.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代用法中，*终端*指的是*终端仿真器*，而非实际的硬件，如显示器和键盘。仿真器提供一个基于文本的界面，用于输入命令，也可以被称为*命令行界面（CLI）*、*命令提示符*、*控制台*或*shell*。所有主要操作系统都配备了某种类型的终端。Windows包括用于运行磁盘操作系统（DOS）命令的命令提示符可执行文件*cmd.exe*，并可以连接到其他服务器。macOS附带了恰如其名的*终端*，你可以使用它在操作系统中运行Unix命令，或使用Zsh或Z
    shell访问其他计算机。Unix通常包括一个名为*xterm*的程序，可以运行*Bash*或其他Unix shell。
- en: Terminals are not very user friendly, but they allow access to information and
    software that sometimes is available only on a central computer, such as a File
    Transfer Protocol (FTP) server. Manipulating thousands of files and folders in
    the operating system is also easier in a terminal than in a graphics window. You
    can automate and expedite workflows on your computer, saving you time and aggravation.
    Additionally, you can run Python programs from a terminal as well as a lot of
    Anaconda operations (as an alternative to performing them with the Anaconda Navigator
    GUI). Best of all, knowing how to use a terminal will greatly impress your colleagues.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 终端并不是很用户友好，但它们可以访问某些信息和软件，这些内容有时只在中央计算机上可用，例如文件传输协议（FTP）服务器。在终端中操作成千上万的文件和文件夹比在图形窗口中更容易。你可以在计算机上自动化和加速工作流，从而节省时间并减少烦恼。此外，你还可以通过终端运行Python程序，以及许多Anaconda操作（作为使用Anaconda
    Navigator GUI的替代方法）。最棒的是，知道如何使用终端将大大给你的同事们留下深刻印象。
- en: After you finish [Chapter 4](ch04.xhtml) in [Part I](part01.xhtml#part01), you
    can proceed to [Part II](part02.xhtml#part02), “A Python Primer,” for an introduction
    to Python programming. If you’re comfortable with Python, complete [Part I](part01.xhtml#part01)
    and go straight to [Part III](part03.xhtml#part03), “The Anaconda Ecosystem,”
    to learn more about the essential packages for scientific computing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成[第4章](ch04.xhtml)的内容后，你可以继续学习[第一部分](part01.xhtml#part01)，"Python入门"，以了解Python编程的基础。如果你已经对Python有一定了解，可以直接完成[第一部分](part01.xhtml#part01)，然后跳到[第三部分](part03.xhtml#part03)，"Anaconda生态系统"，深入学习科学计算中常用的关键包。
