- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Mouse and Keyboard Interaction
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标和键盘交互
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll learn how to program interactive sketches that respond
    to mouse and keyboard input. You can combine those input devices in interesting
    and useful ways. For example, many computer games use a combination of keys for
    player movement and the mouse for aiming. Here, you’ll program sketches that use
    the mouse to paint as well as to select items from a tool palette. You’ll also
    add shortcut keys to activate tools by using the keyboard.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何编程互动草图，响应鼠标和键盘输入。你可以以有趣且实用的方式结合这些输入设备。例如，许多电脑游戏使用组合键来控制玩家移动，鼠标用于瞄准。在这里，你将编程草图，使用鼠标进行绘画并从工具调色板中选择项目。你还将添加快捷键，通过键盘激活工具。
- en: This chapter introduces system variables you can use to monitor mouse clicks
    and keypresses. You’ll also learn about *event functions* that execute whenever
    a particular type of mouse or keyboard event occurs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了你可以用来监控鼠标点击和键盘按键的系统变量。你还将学习到*事件函数*，这些函数会在特定类型的鼠标或键盘事件发生时执行。
- en: The first task you’ll complete is a simple doodling program. The second is a
    more elaborate paint app that includes a tool palette for selecting colors and
    brushes. When you’re programming interactive sketches, you need to be able to
    change the contents of the display window in response to user input so both programs
    are set up as animated sketches.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将完成的第一个任务是一个简单的涂鸦程序。第二个任务是一个更复杂的画图应用，它包括一个用于选择颜色和画笔的工具调色板。当你编程互动式草图时，你需要能够根据用户输入更改显示窗口的内容，因此这两个程序都设置为动画草图。
- en: Mouse Interaction
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标交互
- en: You can use mouse input to perform point-and-click operations. You can also
    program gesture-type motions that combine mouse movements and clicks, like a drag-and-drop
    or pan. Most mice include three buttons—a left button, a right button, and a clickable
    scroll wheel that doubles as a center button.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用鼠标输入执行点击操作。你还可以编程手势类型的动作，结合鼠标移动和点击，例如拖放或平移。大多数鼠标有三个按钮——一个左键，一个右键，还有一个可以点击的滚轮，滚轮也可以作为中间按钮使用。
- en: Mouse Variables
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼠标变量
- en: Processing’s `mouseX` and `mouseY` variables hold the horizontal and vertical
    position of your mouse pointer in the display window. Processing also provides
    the system variables `pmouseX` and `pmouseY` that contain the mouse coordinates
    of the previous frame. There’s also a `mousePressed` variable that’s set to `True`
    whenever a mouse button is held down.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Processing的`mouseX`和`mouseY`变量存储了你鼠标指针在显示窗口中的水平和垂直位置。Processing还提供了系统变量`pmouseX`和`pmouseY`，它们包含了上一帧的鼠标坐标。还有一个`mousePressed`变量，它在鼠标按钮被按下时会被设置为`True`。
- en: The first task in this chapter focuses on Processing’s mouse variables to monitor
    the position of the mouse pointer and detect when mouse buttons are pressed. You’ll
    program a simple sketch for making *scratch art*. A sheet of scratch art paper
    is covered with a rainbow blend of colors, then coated in a layer of black ([Figure
    11-1](#figure11-1)). The “scratcher” uses a plastic or wooden stylus to etch lines
    in the black surface, revealing the colors beneath.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个任务专注于Processing的鼠标变量，用于监控鼠标指针的位置并检测鼠标按钮是否被按下。你将编程一个简单的草图来制作*划痕艺术*。一张划痕艺术纸上覆盖着彩虹色的混合色彩，接着涂上一层黑色（[图11-1](#figure11-1)）。"刮痕者"使用塑料或木制触控笔在黑色表面上刻划线条，揭示下面的颜色。
- en: '![f11001](image_fi/500969c11/f11001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f11001](image_fi/500969c11/f11001.png)'
- en: 'Figure 11-1: The layers that make up a sheet of scratch art paper (left), and
    doodling with a stylus (right)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-1：构成划痕艺术纸张的一层层材料（左），用触控笔涂鸦（右）
- en: You could buy scratch paper ready-made or make it yourself, but pixels are cheap
    and reusable!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以购买现成的划痕纸，或者自己制作，但像素是便宜且可重复使用的！
- en: 'Create a new file and save it as *scratch_art*. Add the following code to get
    your mouse drawing a trail of white circles:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件并将其保存为*scratch_art*。添加以下代码，让你的鼠标绘制一串白色圆圈：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each frame, Processing draws a new circle positioned using the `mouseX` and
    `mouseY` values. Those coordinates are retrieved once each frame, and the frame
    rate is relatively low (20 fps). The `draw()` block has no `background()` function,
    so every circle drawn persists until you close the display window. If you move
    the mouse slowly, the circles will form a solid white line; wherever you move
    the mouse quickly, you’ll leave discernible gaps in the line ([Figure 11-2](#figure11-2)).
    The upper left corner of the display window always contains a circle, because
    the first x-y coordinate pair for the mouse is equal to (0, 0).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每一帧，Processing 都会根据 `mouseX` 和 `mouseY` 值绘制一个新圆。每帧都会获取这些坐标，并且帧率相对较低（20 fps）。`draw()`
    块中没有 `background()` 函数，因此每个绘制的圆形都会持续存在，直到你关闭显示窗口。如果你慢慢移动鼠标，圆形会形成一条实心的白线；而当你快速移动鼠标时，线条中会留下一些明显的间隙（[图
    11-2](#figure11-2)）。显示窗口的左上角总是会有一个圆形，因为鼠标的第一个 x-y 坐标对等于 (0, 0)。
- en: '![f11002](image_fi/500969c11/f11002.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![f11002](image_fi/500969c11/f11002.png)'
- en: 'Figure 11-2: The faster you move your mouse, the larger the gaps in the line.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2：你移动鼠标的速度越快，线条中的间隙就越大。
- en: 'You can increase the frame rate to fill in the line better, but you’ll still
    get gaps if you move the mouse fast enough. To ensure a continuous line, replace
    the `circle()` function with code for drawing lines:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以增加帧率以便更好地填充线条，但如果你足够快地移动鼠标，仍然会出现间隙。为了确保线条连续，可以用绘制线条的代码替换`circle()`函数：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `strokeWeight()` argument of `15` matches the circle diameter from before.
    The `line()` function draws a line between the mouse coordinates of the current
    frame and those of the previous frame.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`strokeWeight()` 的参数 `15` 与之前的圆形直径相匹配。`line()` 函数绘制从当前帧到前一帧的鼠标坐标之间的线条。'
- en: Run the sketch. The first `line()` function will extend from the upper left
    corner (0, 0) to where your mouse pointer first enters the display window. In
    [Figure 11-3](#figure11-3), my mouse enters the display window from the left edge
    (I’m drawing the wave from left to right).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图。第一个 `line()` 函数将从左上角 (0, 0) 延伸到鼠标指针首次进入显示窗口的位置。在 [图 11-3](#figure11-3)
    中，我的鼠标从左边缘进入显示窗口（我正从左向右画波浪）。
- en: '![f11003](image_fi/500969c11/f11003.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![f11003](image_fi/500969c11/f11003.png)'
- en: 'Figure 11-3: Drawing a continuous line by using a `line(``)` function for each
    frame'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-3：使用 `line()` 函数绘制每一帧的连续线条
- en: 'To turn the “brush” on and off, insert an `if` statement to activate the `line()`
    function while the left mouse button is being pressed:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打开和关闭“画笔”，插入一个 `if` 语句，当左键按下时激活 `line()` 函数：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `mousePressed` variable holds a Boolean value that’s set to `True` while
    any mouse button is pressed. The `mouseButton` variable is equal to `LEFT`, `RIGHT`,
    or `CENTER`, depending on which button is pressed, and `0` if it’s none of them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`mousePressed` 变量保存一个布尔值，当任意鼠标按钮被按下时，该值为 `True`。`mouseButton` 变量根据按下的按钮为 `LEFT`、`RIGHT`
    或 `CENTER`，若没有按下任何按钮，则为 `0`。'
- en: Run the sketch to confirm that Processing draws a white line while you’re holding
    down the left- mouse button.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图，确认在按住左键时，Processing 绘制的是一条白色的线。
- en: 'For the rainbow-color scratch art effect, insert code to base the stroke color
    on the position of the mouse pointer. The horizontal position will control hue,
    and the vertical position will control saturation:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现彩虹色的涂鸦艺术效果，插入代码使得笔触颜色基于鼠标指针的位置。水平方向控制色相，垂直方向控制饱和度：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, you set the color mode to `HSB` (hue, saturation, brightness).
    The `h` variable is assigned a hue value between 0 and 360; the `s` variable is
    assigned a saturation value between 0 and 100\. Both the `h` and `s` values are
    based on the mouse pointer’s position relative to the width and height of the
    display window. The color’s brightness value is always 100 percent.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你将颜色模式设置为 `HSB`（色相、饱和度、亮度）。`h` 变量分配一个 0 到 360 之间的色相值；`s` 变量分配一个 0 到 100
    之间的饱和度值。`h` 和 `s` 的值基于鼠标指针相对于显示窗口宽度和高度的位置。颜色的亮度值始终为 100%。
- en: Run the sketch to test out the finished scratch art program ([Figure 11-4](#figure11-4)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图，测试完成的涂鸦艺术程序（[图 11-4](#figure11-4)）。
- en: '![f11004](image_fi/500969c11/f11004.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f11004](image_fi/500969c11/f11004.png)'
- en: 'Figure 11-4: Doodling in the scratch art program'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-4：在涂鸦艺术程序中涂鸦
- en: Now that you’ve seen Processing’s mouse variables, in the next task, you’ll
    learn about mouse event functions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Processing 的鼠标变量，在接下来的任务中，你将学习鼠标事件函数。
- en: Mouse Events
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼠标事件
- en: Processing offers a selection of mouse event functions that run each time a
    particular mouse event takes place. Those functions are `mouseClicked()`, `mouseDragged()`,
    `mouseMoved()`, `mousePressed()`, `mouseReleased()`, and `mouseWheel()`. You add
    code to an event function block that executes when the event function is triggered.
    To illustrate how this works, I’ll compare an example using a `mousePressed` variable
    with another that employs a `mousePressed()` event function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Processing 提供了一些鼠标事件函数，每当发生特定的鼠标事件时，它们就会被执行。这些函数包括 `mouseClicked()`、`mouseDragged()`、`mouseMoved()`、`mousePressed()`、`mouseReleased()`
    和 `mouseWheel()`。你可以在事件函数块中添加代码，当事件函数被触发时，该代码就会执行。为了说明这一点，我将通过一个使用 `mousePressed`
    变量的例子与另一个使用 `mousePressed()` 事件函数的例子进行对比。
- en: 'The following code uses the `mousePressed` system variable to switch the background
    color from red to blue with the press of a mouse button:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用 `mousePressed` 系统变量，通过按下鼠标按钮将背景颜色从红色切换为蓝色：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The background color is blue as long as the user is holding down a mouse button;
    otherwise, it’s red. The next example uses a mouse event—a `mousePressed()` function—to
    perform a similar operation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按住鼠标按钮时，背景颜色为蓝色；否则，背景颜色为红色。下一个例子使用一个鼠标事件——`mousePressed()` 函数——来执行类似的操作：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Each time a mouse button is pressed, the `mousePressed()` function executes
    the blue background line, and the display window will briefly flash blue (for
    a single frame). It immediately returns to red, regardless of how long you hold
    down the mouse button. This is because an event function executes just once per
    event; in other words, the background will not flash blue again until you release
    and then re-press the mouse button.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每次按下鼠标按钮时，`mousePressed()` 函数会执行蓝色背景的代码，显示窗口会短暂地闪烁为蓝色（仅一帧）。无论你按住鼠标按钮多长时间，它都会立即返回红色。这是因为事件函数每次事件发生时只执行一次；换句话说，直到你松开并重新按下鼠标按钮，背景才会再次闪烁为蓝色。
- en: Creating a Paint App
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个绘图应用
- en: For the next exercise, you’ll program a basic painting app that will feature
    a tool palette for selecting color swatches and other options. You’ll use the
    `mousePressed()`, `mouseReleased()`, and `mouseWheel()` functions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，你将编写一个基础的绘画应用程序，其中包括一个用于选择颜色样本和其他选项的工具面板。你将使用 `mousePressed()`、`mouseReleased()`
    和 `mouseWheel()` 函数。
- en: The large dark blue area, to the right in [Figure 11-5](#figure11-5), is your
    canvas for drawing; the tool palette sits against the left edge. You hold down
    the left-mouse button to draw.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 11-5](#figure11-5) 中，右侧的大块深蓝色区域是你的绘图画布；工具面板位于左边缘。按住左键可以进行绘制。
- en: '![f11005](image_fi/500969c11/f11005.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![f11005](image_fi/500969c11/f11005.png)'
- en: 'Figure 11-5: The paint app with a (badly drawn) Python logo'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-5：带有（画得很糟的）Python 标志的绘画应用
- en: 'To begin, create a new sketch and save it as *paint_app*. You’ll use the Ernest
    font, created by Marc André “Mieps” Misman, to label the buttons in your tool
    palette. Download this font from the book’s GitHub web page:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的草图并将其保存为 *paint_app*。你将使用由 Marc André “Mieps” Misman 创建的 Ernest 字体来标记工具面板中的按钮。你可以从本书的
    GitHub 页面下载这个字体：
- en: Open your web browser and go to [https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，访问 [https://github.com/tabreturn/processing.py-book/](https://github.com/tabreturn/processing.py-book/)。
- en: Navigate to *chapter-11-mouse_and_keyboard_interaction*.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 *chapter-11-mouse_and_keyboard_interaction*。
- en: Download the *Ernest.ttf* file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 *Ernest.ttf* 文件。
- en: Create a new *data* subfolder within your sketch folder and place the *Ernest.ttf*
    file in it.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的草图文件夹中创建一个新的 *data* 子文件夹，并将 *Ernest.ttf* 文件放入其中。
- en: 'Add the following code to set up your sketch. This defines the display window
    size, background color, font, and global variables for the paint app:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码来设置你的草图。这段代码定义了显示窗口的大小、背景颜色、字体以及绘图应用的全局变量：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’ll use the global variables (`swatches`, `brushcolor`, and so on) to adjust
    and monitor the state of the brush. The default brush color is set to yellow.
    Later, you’ll use the `palette` variable to set the width of the tool palette.
    You haven’t added anything visual yet, so if you run the sketch, all you’ll see
    is a plain blue display window.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用全局变量（如 `swatches`、`brushcolor` 等）来调整和监控画笔的状态。默认的画笔颜色设为黄色。稍后，你将使用 `palette`
    变量来设置工具面板的宽度。此时你还没有添加任何视觉元素，因此如果运行草图，你看到的将只是一个简单的蓝色显示窗口。
- en: Controlling the Draw Loop with loop() and noLoop() Functions
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 `loop()` 和 `noLoop()` 函数控制绘制循环
- en: You’ll control the `draw()` function behavior by using mouse events. While the
    left mouse button is pressed, the `draw()` function will loop; once it’s released,
    the looping stops, which is a convenient way to control how the paint app works.
    Of course, the `draw()` function loops by default, so you’ll need the `loop()`
    and `noLoop()` functions to take control of this behavior.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你将通过使用鼠标事件来控制`draw()`函数的行为。当按下左键时，`draw()`函数将进入循环；一旦释放左键，循环停止，这是一种方便的方式来控制绘图应用的工作方式。当然，`draw()`函数默认是循环的，因此你需要使用`loop()`和`noLoop()`函数来控制这种行为。
- en: The `noLoop()` function stops Processing from continually executing the code
    in the `draw()` block. A `loop()` function reactivates the standard `draw()` function
    behavior, and a `redraw()` function is available if you need to execute the `draw()`
    code just once.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`noLoop()`函数停止Processing持续执行`draw()`块中的代码。`loop()`函数重新激活标准的`draw()`函数行为，如果你只需要执行一次`draw()`代码，可以使用`redraw()`函数。'
- en: 'To start, add a `noLoop()` function to the `setup()` block, and a `draw()`
    function that prints the frame count:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`setup()`块中添加一个`noLoop()`函数，然后在`draw()`函数中打印帧计数：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you run the sketch, the console should display a single `1`, confirming that
    the `draw()` function has run only once.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行草图，控制台应该只显示一个`1`，确认`draw()`函数只运行了一次。
- en: 'Now add code to the `draw()` function to make the mouse draw lines in the display
    window, and add two mouse events to start and stop the flow of paint:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`draw()`函数中添加代码，使鼠标在显示窗口中绘制线条，并添加两个鼠标事件来启动和停止绘画流程：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Read over this code while simulating the process in your mind, paying careful
    attention to when `painting` is equal to `True` or `False`, and when the `draw()`
    function is running continuously. The sketch begins with the `painting` variable
    set to `False`; the `draw()` function isn’t looping at this point. When you press
    the left mouse button 5, the `loop()` function instructs Processing to resume
    looping the `draw()` function; when you release the button 6, the `noLoop()` function
    halts the draw behavior again. The `paintmode` variable is set to `free` 1 by
    default, so Python checks whether you’re currently painting 2. You’ll add other
    paint modes later. If `painting` is equal to `True`, Processing draws a line between
    the mouse coordinates of the current frame and those of the previous frame 3;
    if not, it checks that the frame count has passed `1` 4 before setting the `painting`
    variable to `True`. The `if` 2 and `elif` 4 steps are necessary to avoid drawing
    straight lines between where you cease and resume painting (release the left button,
    move the mouse, and then press the button again), and the `frameCount > 1` stops
    Processing from drawing a line from the upper left corner to where you first begin
    painting. In [Figure 11-6](#figure11-6), the left screenshot depicts what happens
    if you omit those statements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟过程中，仔细阅读这段代码，关注`painting`变量为`True`或`False`时的情况，以及`draw()`函数何时会持续运行。草图开始时，`painting`变量被设置为`False`；此时`draw()`函数并没有进入循环。当你按下左键5时，`loop()`函数指示Processing重新开始循环`draw()`函数；当你释放按钮6时，`noLoop()`函数再次停止绘制行为。`paintmode`变量默认设置为`free`
    1，因此Python会检查你当前是否在绘画2。你稍后会添加其他绘画模式。如果`painting`等于`True`，Processing会在当前帧的鼠标坐标和上一帧的坐标之间绘制一条线3；如果不是，它会检查帧计数是否已经超过`1`
    4，才会将`painting`变量设置为`True`。`if` 2和`elif` 4步骤是必要的，以避免在停止和继续绘画（释放左键、移动鼠标，然后再次按下按钮）时绘制直线，而`frameCount
    > 1`则阻止Processing在从左上角到第一次开始绘画的地方绘制一条线。在[图11-6](#figure11-6)中，左侧截图展示了如果省略这些语句时发生的情况。
- en: '![f11006](image_fi/500969c11/f11006.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f11006](image_fi/500969c11/f11006.png)'
- en: 'Figure 11-6: Processing drawing straight lines between the points where painting
    stops and starts (left), and your version of the program (right)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-6：Processing在停止和开始绘画的点之间绘制直线（左），以及你版本的程序（右）
- en: Run the sketch, and draw a few circles to test that the code is working. Watch
    the console and note that the frame count increases only while you’re pressing
    the left mouse button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图，绘制几个圆圈以测试代码是否正常工作。观察控制台并注意，帧计数只有在你按住左键时才会增加。
- en: Adding Selectable Color Swatches
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加可选颜色样本
- en: 'The tool palette will include six color swatches that you can use to change
    the brush color. Add the following code to the bottom of the `draw()` block to
    render a black panel against the left edge of the display window, and within it,
    six color swatches based on the `swatches` list:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 工具面板将包括六个颜色选色板，你可以用它们来更改画笔颜色。将以下代码添加到 `draw()` 块的底部，以在显示窗口的左侧渲染一个黑色面板，并在其中根据
    `swatches` 列表绘制六个颜色选色板：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `for` loop iterates the swatches list, drawing a grid of squares filled
    in different colors. Your program draws the panel (and swatch elements) after
    the brushstrokes to prevent unwanted strokes appearing over the palette as you
    select things.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环遍历 `swatches` 列表，绘制一个由不同颜色填充的方格网格。程序会在画笔描边之后绘制面板（和选色板元素），以防止在选择时出现不需要的描边覆盖在选色板上。'
- en: 'If a user clicks a color swatch, you must assign that color to the `brushcolor`
    variable; add code for this to the `mousePressed()` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击了某个颜色选色板，你必须将该颜色赋值给 `brushcolor` 变量；为此，向 `mousePressed()` 函数中添加代码：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `if` statement tests for a left-click and checks that the mouse pointer
    is positioned somewhere over the color swatches. The `get()` function returns
    the color for the pixel under the mouse pointer and assigns it to the `brushcolor`
    variable. You add a `global` line to overwrite the `brushcolor` variable in the
    global scope, the same variable that the `draw()` function uses to apply the stroke
    for the brush color.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句测试鼠标左键单击，并检查鼠标指针是否位于颜色选色板的某个位置。`get()` 函数返回鼠标指针下方像素的颜色，并将其赋值给 `brushcolor`
    变量。你添加一行 `global` 代码来覆盖全局作用域中的 `brushcolor` 变量，该变量在 `draw()` 函数中用于应用画笔颜色的描边。'
- en: Run the sketch. You can now select colors for painting ([Figure 11-7](#figure11-7)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图。你现在可以选择颜色进行绘画（[图 11-7](#figure11-7)）。
- en: '![f11007](image_fi/500969c11/f11007.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![f11007](image_fi/500969c11/f11007.png)'
- en: 'Figure 11-7: Click the swatches in the tool palette to change the brush’s color.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-7：点击工具面板中的选色板以更改画笔颜色。
- en: Next, you’ll add a feature for resizing the brush, mapping this to the scroll
    wheel.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将添加一个调整画笔大小的功能，将其映射到滚轮上。
- en: Resizing the Brush by Using the Scroll Wheel
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用滚轮调整画笔大小
- en: The `mouseWheel()` event function is used to execute code when the mouse wheel
    is moved. Additionally, you can use it to retrieve positive or negative values
    depending on the direction of the scroll wheel’s rotation. The direction of rotation
    for positive/negative values, however, depends on your system’s configuration.
    Your touch pad scroll should work for this too, usually with a two-finger drag.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseWheel()` 事件函数用于在鼠标滚轮移动时执行代码。此外，你还可以使用它来根据滚轮的旋转方向获取正值或负值。然而，正负值的旋转方向取决于系统配置。触控板滚动也应该适用，通常通过两指拖动来实现。'
- en: 'Add a `mouseWheel()` function to the very bottom of your code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的最底部添加一个 `mouseWheel()` 函数：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `e` within the `mouseWheel()` function’s parentheses serves as a variable
    to which the event details are assigned. You may name this whatever you like;
    programmers commonly use `e` or `event`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseWheel()` 函数括号中的 `e` 作为一个变量，用于接收事件的详细信息。你可以将其命名为任何你喜欢的名称；程序员通常使用 `e` 或
    `event`。'
- en: 'Run the sketch, position your mouse pointer somewhere over the display window,
    and use the scroll wheel. The console should display something like the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图，将鼠标指针放置在显示窗口的某个位置，并使用滚轮。控制台应该会显示类似以下内容：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From this output, you can establish that the type of mouse event is `WHEEL`.
    At the moment of the event, the horizontal mouse position is 407, and the vertical
    position is 370 (`@407,370`). The scroll direction is positive (`count:1`). Of
    course, your values will vary somewhat.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从此输出中，你可以确定鼠标事件类型是 `WHEEL`。事件发生时，水平鼠标位置为 407，垂直位置为 370（`@407,370`）。滚动方向为正（`count:1`）。当然，你的值会有所不同。
- en: 'Add code that uses the `mouseWheel()` function to adjust the brush size. This
    code will also display a brush preview below the swatches, which will reflect
    the active brush’s color, size, and shape:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代码，使用 `mouseWheel()` 函数来调整画笔的大小。此代码还会在选色板下方显示一个画笔预览，反映当前画笔的颜色、大小和形状：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You don’t want to paint while adjusting the brush size, so `paintmode` is switched
    to `select` 2. The `e.count` is used to retrieve the negative/positive scroll
    value from the event variable, which is added to `brushsize` 3. It’s necessary,
    however, to include checks (`if` statements) to ensure that the new brush size
    remains within a reasonable range (between `3` 4 and `45` 5). Finally, the `redraw()`
    function runs the `draw()` function, just once, to update the brush preview and
    switch `paintmode` back to `free` 1.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你不希望在调整画笔大小时进行绘画，因此 `paintmode` 被切换为 `select` 2。`e.count` 用来从事件变量中获取负/正滚动值，并将其添加到
    `brushsize` 3。然而，必须包括检查（`if` 语句）以确保新画笔大小保持在合理范围内（介于 `3` 4 和 `45` 5 之间）。最后，`redraw()`
    函数只运行一次 `draw()` 函数，以更新画笔预览并将 `paintmode` 切换回 `free` 1。
- en: Run the sketch to confirm that you can resize the brush by using the scroll
    wheel, which updates the brush preview in the palette ([Figure 11-8](#figure11-8)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图以确认你可以使用滚轮调整画笔大小，这会更新调色板中的画笔预览图（[图 11-8](#figure11-8)）。
- en: '![f11008](image_fi/500969c11/f11008.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![f11008](image_fi/500969c11/f11008.png)'
- en: 'Figure 11-8: Painting with brushes of different sizes'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-8：使用不同大小的画笔进行绘画
- en: There’s one problem, though. When selecting swatches with a large brush, a blob
    of paint might extend into the dark blue canvas area ([Figure 11-9](#figure11-9)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一个问题。当使用大画笔选择颜色样本时，颜料块可能会扩展到深蓝色的画布区域（[图 11-9](#figure11-9)）。
- en: '![f11009](image_fi/500969c11/f11009.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![f11009](image_fi/500969c11/f11009.png)'
- en: 'Figure 11-9: Selecting a color swatch with a large brush'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-9：使用大画笔选择颜色样本
- en: 'To solve this problem, add an `if` statement to the `draw()` function that
    disables painting while the mouse is over the palette. Use the `paintmode` variable
    to control this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，向 `draw()` 函数中添加一个 `if` 语句，以在鼠标悬停在调色板上时禁用绘画功能。使用 `paintmode` 变量来控制这一点：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the sketch to confirm that you can select color swatches with large brushes,
    without blobs encroaching on the canvas area.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图以确认你可以使用大画笔选择颜色样本，而不会有颜料块侵占画布区域。
- en: 'Now that you understand how mouse events work, consult the online reference
    if you need a `mouseDragged()` or `mouseMoved()` function. You’ll try out a `mouseClicked()`
    function in “Challenge #11: Adding Paint App Features” on page 252. If you’d like
    to change the mouse pointer from an arrow to something else, you can use the `cursor()`
    function. For example, you can add a `cursor(CROSS)` function to the `setup()`
    block for a crosshair.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你了解了鼠标事件的工作原理，如果需要 `mouseDragged()` 或 `mouseMoved()` 函数，可以查阅在线文档。在第 252 页的“挑战
    #11：为画图应用程序添加功能”中，你将尝试使用 `mouseClicked()` 函数。如果你想将鼠标指针从箭头更改为其他形状，可以使用 `cursor()`
    函数。例如，你可以在 `setup()` 块中添加 `cursor(CROSS)` 来显示十字准星。'
- en: Keyboard Interaction
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键盘交互
- en: Computers inherited their keyboard designs from typewriters. In the process,
    computer keyboards spawned various new keys, such as the arrow, escape, and function
    keys, and a number pad for more efficient numeric entry. They also have modifier
    keys (like alt and ctrl) that you can use in conjunction with other keys to perform
    specific operations. For example, the Z, X, C, and V keys combine with ctrl or
     to perform undo/cut/copy/paste operations.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机的键盘设计继承自打字机。在这个过程中，计算机键盘增加了许多新的键位，如方向键、Esc 键和功能键，以及数字键盘以便更高效地输入数字。它们还配有修饰键（如
    alt 和 ctrl），你可以与其他键组合使用，执行特定的操作。例如，Z、X、C 和 V 键与 ctrl 或  键结合使用，可以执行撤销/剪切/复制/粘贴操作。
- en: Keyboard interaction in Processing works similarly to mouse interaction, with
    system variables such as `key` and `keyPressed`, and event functions like `keyPressed()`,
    `keyReleased()`, and `keyTyped()`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Processing 中，键盘交互与鼠标交互类似，通过系统变量如 `key` 和 `keyPressed`，以及事件函数如 `keyPressed()`、`keyReleased()`
    和 `keyTyped()` 来实现。
- en: Now, let’s add keyboard shortcuts to the paint app for selecting colors.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为画图应用程序添加选择颜色的键盘快捷键。
- en: Adding Keyboard Shortcuts to the Paint App
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为画图应用程序添加键盘快捷键
- en: To program the shortcuts, you’ll combine the `key` system variable and `keyPressed()`
    event function. The `keyPressed()` function runs once each time a key is pressed.
    However, holding down a key may cause repeated function calls. The operating system
    controls this repetitive behavior, and configurations can vary among users. Processing
    stores the value of the most recently used key in the `key` system variable.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写快捷键，你需要将 `key` 系统变量和 `keyPressed()` 事件函数结合使用。每次按下一个键时，`keyPressed()` 函数会执行一次。但是，按住一个键可能会导致重复调用该函数。操作系统控制这种重复行为，且不同用户的配置可能有所不同。Processing
    会将最近使用的键值存储在 `key` 系统变量中。
- en: 'Add a `keyPressed()` event function to the end of your code. For now, this
    will print the `key` value in the console:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的末尾添加一个`keyPressed()`事件函数。暂时，这将打印控制台中的`key`值：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the sketch and press different keys. Numbers, letters, and symbols display
    in the console as you might expect them to—you get a `1` when you press the 1
    key, a `q` when you press the Q key, and so on. If caps lock is on, you get uppercase
    letters.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 运行草图并按下不同的键。数字、字母和符号会如你所预期地显示在控制台中——当你按下数字1键时，显示`1`，按下Q键时，显示`q`，依此类推。如果开启了大写锁定，显示的将是大写字母。
- en: 'To select different color swatches, replace the `print()` function with code
    that uses the number keys 1 to 6:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择不同的颜色样本，将`print()`函数替换为使用数字键1到6的代码：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Python’s `isdigit()` method returns `True` if all of the characters in a string
    are digits. This works only on characters/strings and will handle most `key` values
    fine, returning `False` for any letters and symbols. However, Processing represents
    special keys (arrows and modifiers) by using numeric codes—in other words, integers,
    not strings. So, you use `str(key)` to convert any numeric codes to strings to
    prevent certain keypresses from crashing the app. If the `key` value is a digit,
    Python will subtract 1 from it and assign it to variable `k`. Because the `swatches`
    list is zero-indexed, color 1 is equal to `swatches[0]`, and so forth. The final
    `if` statement verifies that the index value (`k`) is less than the length of
    the swatches list—in other words, a number between 0 and 5\. The `redraw()` function
    updates the brush preview.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`isdigit()`方法如果字符串中的所有字符都是数字，则返回`True`。这只适用于字符/字符串，并且能够很好地处理大部分`key`值，对于任何字母和符号返回`False`。然而，Processing使用数字代码（换句话说，整数，而非字符串）表示特殊键（箭头键和修饰键）。因此，你需要使用`str(key)`将任何数字代码转换为字符串，以防止某些按键导致应用崩溃。如果`key`值是数字，Python会减去1并将其赋值给变量`k`。因为`swatches`列表是从0开始索引的，颜色1等于`swatches[0]`，依此类推。最终的`if`语句验证索引值（`k`）是否小于样本列表的长度——换句话说，是一个介于0到5之间的数字。`redraw()`函数会更新画笔预览。
- en: The paint app can paint in different colors, in strokes of varying thickness.
    Experiment with adding other features to your paint app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 画图应用程序可以用不同的颜色进行绘画，且笔触的厚度各不相同。尝试向你的画图应用添加其他功能。
- en: 'Challenge #11: Adding Paint App Features'
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 挑战#11：添加画图应用功能
- en: One of the most useful features you can add is a Clear button so you don’t need
    to close and reopen the app when you want a blank, new canvas. You’ll program
    a button that resets the canvas to dark blue.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加的最有用的功能之一是一个清除按钮，这样当你想要一个空白的新画布时，就不需要关闭并重新打开应用程序了。你将编程一个按钮，重置画布为深蓝色。
- en: 'Add a button labeled `CLEAR` to the palette:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 向调色板添加一个标记为`CLEAR`的按钮：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This draws `CLEAR`, in the Ernest font, in the lower left corner of the display
    window ([Figure 11-10](#figure11-10)).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在显示窗口的左下角绘制`CLEAR`，使用Ernest字体（见[图11-10](#figure11-10)）。
- en: '![f11010](image_fi/500969c11/f11010.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![f11010](image_fi/500969c11/f11010.png)'
- en: 'Figure 11-10: The Clear button'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-10：清除按钮
- en: 'You can use a `mouseClicked()` function to execute code when a mouse button
    is clicked, at the moment of release. Like the other mouse events, this code executes
    just once until you repeat the action. Add a `mouseClicked()` function to your
    code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`mouseClicked()`函数在鼠标按键点击的瞬间执行代码，就在松开按钮的时刻。像其他鼠标事件一样，这段代码只会执行一次，直到你重复该操作。将一个`mouseClicked()`函数添加到你的代码中：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you click anywhere in the display window, this code will draw a circle over
    the entire paint app. Now replace the `circle()` line with code that responds
    only to clicks over the Clear button and not anywhere outside that region. Additionally,
    this code must draw a dark blue square over the canvas area.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在显示窗口的任何位置点击，这段代码将在整个画图应用程序上绘制一个圆圈。现在，将`circle()`这一行替换为只响应清除按钮上的点击，而不响应该区域外的点击的代码。此外，这段代码还必须在画布区域上绘制一个深蓝色的正方形。
- en: Once you have the Clear button working correctly, try adding a Save (As Image)
    button, an eraser, more swatches, or maybe even a color mixer. If you need help,
    you can find the solution at [https://github.com/tabreturn/processing.py-book/tree/master/chapter-11-mouse_and_keyboard_interaction/paint_app/](https://github.com/tabreturn/processing.py-book/tree/master/chapter-11-mouse_and_keyboard_interaction/paint_app/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你正确实现了清除按钮，尝试添加一个保存（为图片）按钮、橡皮擦、更多颜色样本，甚至可以加入一个颜色混合器。如果你需要帮助，可以在[https://github.com/tabreturn/processing.py-book/tree/master/chapter-11-mouse_and_keyboard_interaction/paint_app/](https://github.com/tabreturn/processing.py-book/tree/master/chapter-11-mouse_and_keyboard_interaction/paint_app/)找到解决方案。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to add interactivity to your sketches by using
    mouse and keyboard input. You learned about Processing’s system variables for
    those input devices, as well as their event functions that execute, just once,
    when a specific event occurs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过鼠标和键盘输入为你的草图添加交互性。你了解了 Processing 的系统变量，用于处理这些输入设备，以及当特定事件发生时触发的事件函数，这些函数只会执行一次。
- en: Processing supports a range of input devices, such as microphones, cameras,
    and game controllers, and I encourage you to explore those features. You can also
    connect an Arduino board to Processing if you want to build custom input devices.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Processing 支持多种输入设备，如麦克风、摄像头和游戏控制器，我鼓励你去探索这些功能。如果你想制作自定义输入设备，还可以将 Arduino 板连接到
    Processing。
- en: In this chapter, you programmed a simple tool palette for selecting color swatches.
    Many software and web development projects require graphic interface development,
    and many graphical user interface (GUI) toolkits provide sets of ready-made widgets
    for things like buttons, checkboxes, sliders, drop-down lists, and text fields.
    Processing has GUI libraries to explore if you want to build more complex interfaces.
    For Python (outside of Processing), Tkinter, PyQt, and Kivy are a few options.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你编写了一个简单的工具面板来选择颜色样本。许多软件和网页开发项目需要图形界面开发，许多图形用户界面（GUI）工具包提供了预制的控件集，例如按钮、复选框、滑块、下拉列表和文本框。如果你想构建更复杂的界面，Processing
    也有图形界面库可以探索。对于 Python（Processing 之外），Tkinter、PyQt 和 Kivy 是一些选择。
- en: In the Afterword, I’ll point you to other useful resources and suggest the next
    steps you might consider taking in your creative coding adventures.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在后记中，我将为你指向其他有用的资源，并建议你在创意编程冒险中可能考虑的下一步。
