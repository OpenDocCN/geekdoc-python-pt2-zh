- en: '<samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">GLOBAL
    DATA ANALYSIS: ADVANCED LAYOUTS</samp> <samp class="SANS_Dogma_OT_Bold_B_11">AND
    GRAPHS</samp>'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">全球数据分析：高级布局</samp>
    <samp class="SANS_Dogma_OT_Bold_B_11">与图表</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: 'In this chapter you’ll expand your knowledge of Dash by building an app that
    compares and analyzes world data on three metrics: internet usage, proportion
    of females in parliament, and carbon dioxide (CO[2]) emissions. We’ll refer to
    these metrics as *indicators*. We’ll look more closely at Dash callbacks, and
    you’ll learn to plot a *choropleth map*, which represents quantitative data in
    the form of shades and colors within certain spatial areas on a map: countries,
    states, provinces, and so on. You’ll also discover a new way to manage layout
    and styling using dash-bootstrap-components, a library that provides complex and
    responsive layouts.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过构建一个应用程序来扩展你对 Dash 的知识，该应用程序比较和分析世界数据的三个指标：互联网使用率、女性在议会中的比例和二氧化碳（CO[2]）排放量。我们将这些指标称为*指标*。我们将更深入地了解
    Dash 回调函数，并学习绘制*热力图*，这是一种通过在地图上特定区域（如国家、州、省等）内的阴影和颜色来表示定量数据的方式。你还将发现一种新的布局和样式管理方法，使用
    dash-bootstrap-components 库，该库提供了复杂且响应式的布局。
- en: To gather the data for this app, we’ll access the World Bank application programming
    interface (API) using pandas. *APIs* provide an interface that allows you to connect
    to an external server and request data to feed into your app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集这个应用程序的数据，我们将使用 pandas 访问世界银行的应用程序编程接口（API）。*API* 提供了一个接口，允许你连接到外部服务器并请求数据以供应用程序使用。
- en: 'By the end of this chapter, you’ll be a lot more comfortable plotting data
    on a map, managing more advanced layouts, understanding callbacks, and working
    with dash-core-components. But first things first: let’s set up the app and the
    corresponding code.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将能够更自如地在地图上绘制数据，管理更复杂的布局，理解回调函数，并使用 dash-core-components。但首先，让我们先设置应用程序和相应的代码。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the Project</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置项目</samp>
- en: 'As usual, first you need to create your project folder and place the app code
    inside it. Create a new project folder called *world-bank-app*, and locate the
    *[Chapter-5](chapter5.xhtml)* folder included in the ZIP file you downloaded from
    [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    at the beginning of [Chapter 4](chapter4.xhtml). The folder should contain two
    files: *worldbank.py* and *our_indicator.py*. Copy these files into your world-bank-app
    folder.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，首先你需要创建项目文件夹并将应用程序代码放入其中。创建一个新的项目文件夹，命名为*world-bank-app*，并将 ZIP 文件中包含的*
    [第 5 章](chapter5.xhtml) *文件夹放入其中，该文件夹可以从 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    下载，下载位置在[第 4 章](chapter4.xhtml)开始时提供。该文件夹应该包含两个文件：*worldbank.py* 和 *our_indicator.py*。将这些文件复制到你的
    world-bank-app 文件夹中。
- en: 'The project folder should look like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件夹应该如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- world-bank-app</samp>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- world-bank-app</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--our_indicator.py</samp>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--our_indicator.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--worldbank.py</samp>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--worldbank.py</samp>
- en: 'We’ll need four libraries: the usual pandas and Dash libraries, as well as
    dash-bootstrap-components and pandas datareader. Open your command prompt (Terminal
    for Mac users) or the Terminal tab in PyCharm or your Python IDE of choice. Then,
    line by line, enter the following to install the four libraries:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要四个库：常用的 pandas 和 Dash 库，以及 dash-bootstrap-components 和 pandas datareader。打开命令提示符（Mac
    用户使用 Terminal）或在 PyCharm 或你选择的 Python IDE 中打开 Terminal 标签。然后，逐行输入以下命令来安装这四个库：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-components</samp>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-components</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas-datareader</samp>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas-datareader</samp>
- en: 'To check that the libraries have installed properly, enter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查库是否已正确安装，请输入：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
- en: This will list all Python packages you currently have installed. If any of the
    four libraries we need isn’t listed, try reentering the corresponding <samp class="SANS_TheSansMonoCd_W5Regular_11">install</samp>
    line.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出你当前安装的所有 Python 包。如果我们需要的四个库中有任何一个没有列出，请尝试重新输入相应的<samp class="SANS_TheSansMonoCd_W5Regular_11">安装</samp>命令。
- en: 'Before we look at the code, let’s check out the app. Open *worldbank.py* in
    your IDE and run the script. You should see a message with an HTTP link. Click
    that link or copy it into your web browser:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看代码之前，我们先来了解一下这个应用程序。打开你的 IDE 中的*worldbank.py*文件并运行脚本。你应该会看到一条带有 HTTP 链接的消息。点击该链接或将其复制到浏览器中：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash 正在运行于</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * Serving Flask app "worldbank"
    (lazy loading)</samp>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 正在服务 Flask 应用 "worldbank"（懒加载）</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Environment: production</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 环境：生产</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     警告：这是一个开发服务器，勿在生产环境中使用。</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     Use a production WSGI server
    instead.</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     请改用生产环境中的 WSGI 服务器。</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Debug mode: on</samp>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 调试模式：开启</samp>
- en: You should now see the World Bank Data Analysis dashboard app, as shown in [Figure
    5-1](chapter5.xhtml#fig5-1).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能看到世界银行数据分析仪表板应用，如[图 5-1](chapter5.xhtml#fig5-1)所示。
- en: '![](../images/Figure5-1.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: The World Bank
    Data Analysis app</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-1：世界银行数据分析应用</samp>
- en: Have a little fun! Use the slider to change the dates, and use the radio buttons
    to choose a different World Bank data indicator, such as the one for parliament
    seats or the one for CO[2] emissions. Move the map around and hover your mouse
    cursor over certain countries to compare their data. Which country has the highest
    percentage of females in parliament? Which country has seen the biggest growth
    in percentage of internet usage over time? Get familiar with the app, and the
    code should make more sense as we go through it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心一点！使用滑块更改日期，并使用单选按钮选择一个不同的世界银行数据指标，例如议会席位或 CO[2] 排放量的指标。移动地图，鼠标悬停在某些国家上以比较它们的数据。哪个国家在议会中女性的比例最高？哪个国家的互联网使用比例在时间上增长最大？熟悉一下应用程序，随着我们逐步分析代码，你会更容易理解。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Importing the Libraries</samp>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">导入库</samp>
- en: 'In this app we’re introducing two new Python libraries: dash-bootstrap-components
    and pandas datareader.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们引入了两个新的 Python 库：dash-bootstrap-components 和 pandas datareader。
- en: dash-bootstrap-components is a package that makes it easier to manage the layout
    of the app. Bootstrap supplies components that allow you to do things like place
    app elements more precisely on a page, create more components like graphs and
    radio buttons, and style each element in very detailed ways. It’s basically an
    add-on to the built-in Dash layout capabilities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: dash-bootstrap-components 是一个使得管理应用布局更加便捷的包。Bootstrap 提供了一些组件，可以让你精确地将应用元素放置在页面上，创建更多的组件（如图表和单选按钮），并且对每个元素进行非常详细的样式设计。它基本上是
    Dash 内置布局能力的一个附加功能。
- en: We’ll use pandas to filter and prepare the data for plotting, as we did with
    the app in [Chapter 4](chapter4.xhtml). This app, however, will also use pandas
    datareader, a pandas extension that retrieves data via APIs and creates DataFrames
    from that data. The pandas datareader extension has methods for extracting data
    from multiple common internet sources, such as NASDAQ, the Bank of Canada, the
    World Bank, and several more. Our app uses data from the World Bank only, so to
    access that data we need to import the <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp>
    World Bank module from the datareader extension, as shown in [Listing 5-1](chapter5.xhtml#List5-1).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 pandas 来过滤并准备数据进行绘图，就像我们在[第 4 章](chapter4.xhtml)中的应用一样。然而，这个应用还将使用 pandas
    datareader，这是一个通过 API 获取数据并从中创建 DataFrame 的 pandas 扩展。pandas datareader 扩展提供了从多个常见的互联网来源提取数据的方法，如
    NASDAQ、加拿大银行、世界银行等。我们的应用只使用世界银行的数据，因此为了访问这些数据，我们需要从 datareader 扩展中导入 <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp>
    世界银行模块，如[清单 5-1](chapter5.xhtml#List5-1)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-1: The import section
    of the</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-1：worldbank.py 应用的导入部分</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Management</samp>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据管理</samp>
- en: The next section is the data management code, where we incorporate data into
    our app from the World Bank API. We’ll also clean the data, taking out corrupt
    values, taking out corrupt values, extracting only the data we need, and merging
    it with another DataFrame to get the missing values.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分是数据管理代码，我们将通过世界银行 API 将数据导入到我们的应用中。我们还将清理数据，去除损坏的值，提取我们需要的数据，并将其与另一个 DataFrame
    合并以获取缺失的值。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Connecting to an API</samp>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">连接到 API</samp>
- en: Connecting to an API lets our app read data dynamically, allowing us to add
    and change the data we’re reading on the fly, without having to alter and upload
    a static Excel file. By connecting to the API via pandas datareader, we can upload
    new data into the app immediately upon request.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 API 使我们的应用能够动态读取数据，让我们能够即时添加和更改正在读取的数据，而不需要修改和上传静态的 Excel 文件。通过使用 pandas
    datareader 连接到 API，我们可以在请求时立即将新数据上传到应用中。
- en: It’s important to note that some APIs enforce a limit on the number of requests
    an individual can make, in order to prevent an API from being overwhelmed. If
    that limit is surpassed, you may be blocked from making more requests for a certain
    amount of time. Taking timeouts between requests is one way to avoid overloading
    the API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，一些 API 对个人请求的次数有限制，以防止 API 受到过载。如果超过这个限制，可能会被阻止在一段时间内继续发起请求。请求之间设置超时是避免过载
    API 的一种方式。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp> module contains
    functions for getting different types of data pertaining to the World Bank. For
    example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">download()</samp> function
    will extract information from the World Bank’s World Development Indicators when
    passed an indicator as an argument, while <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    will query information about specified countries. We will focus on these two for
    our app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp> 模块包含用于获取与世界银行相关的不同类型数据的函数。例如，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">download()</samp> 函数在传入一个指标作为参数时，会从世界银行的《世界发展指标》提取信息，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp> 会查询指定国家的信息。我们将在应用中重点使用这两个函数。
- en: Let’s start by downloading the necessary country data into our app, as shown
    in [Listing 5-2](chapter5.xhtml#List5-2).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载所需的国家数据开始，将其导入到我们的应用中，如[清单 5-2](chapter5.xhtml#List5-2)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.get_countries()</samp>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.get_countries()</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries["capitalCity"].replace({"
    ": None}, inplace=True)</samp>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries["capitalCity"].replace({"
    ": None}, inplace=True)</samp>'
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries.dropna(subset=["capitalCity"],
    inplace=True)</samp>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries.dropna(subset=["capitalCity"],
    inplace=True)</samp>
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[["name",
    "iso3c"]]</samp>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[["name",
    "iso3c"]]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[countries["name"]
    != "Kosovo"]</samp>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[countries["name"]
    != "Kosovo"]</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries.rename(columns=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">{"name": "country"})</samp>'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries.rename(columns=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">{"name": "country"})</samp>'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-2: Downloading country
    data from the World Bank API</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-2：从世界银行 API 下载国家数据</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">应用程序</samp>
- en: 'First we connect to the World Bank API and use <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    to extract the names of all the countries. However, the data isn’t as clean as
    we’d like, and some of the rows actually contain names of regions rather than
    countries. For example, if you print the first 10 rows using the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们连接到世界银行 API，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    提取所有国家的名称。然而，数据并不像我们希望的那样干净，其中一些行实际上包含的是地区名称而不是国家名称。例如，如果你使用以下代码打印前 10 行：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = wb.get_countries()</samp>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = wb.get_countries()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(countries.head(10)[['name']])</samp>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(countries.head(10)[['name']])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">exit()</samp>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">exit()</samp>
- en: you will find that row 1 contains the “Africa Eastern and Southern” region.
    Our app is focused on just countries, so we use <samp class="SANS_TheSansMonoCd_W5Regular_11">dropna()</samp>
    to exclude regions by dropping all rows that don’t have a capital city ❶, which
    should leave us with country names only.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，第 1 行包含的是“非洲东部和南部”地区。我们的应用程序只关注国家，因此我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dropna()</samp>
    来排除地区，删除所有没有首都城市的行 ❶，这样我们应该只剩下国家名称。
- en: To plot points on a map Plotly uses country codes rather than country names,
    so next we need to provide the app with country codes. These codes are called
    *alpha-3* or *ISO3* codes, and each country has a different code. For example,
    Austria’s is AUT, Azerbaijan’s is AZE, Burundi’s is BDI, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在地图上绘制点，Plotly 使用国家代码而不是国家名称，因此接下来我们需要为应用程序提供国家代码。这些代码称为 *alpha-3* 或 *ISO3*
    代码，每个国家都有不同的代码。例如，奥地利的代码是 AUT，阿塞拜疆是 AZE，布隆迪是 BDI，等等。
- en: 'We don’t need the other information <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    returns, so we limit the DataFrame to two necessary columns: the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column and the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> country
    code column ❷.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要 <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp> 返回的其他信息，因此我们将数据框限制为两个必要的列：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 列和 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    国家代码列 ❷。
- en: The authors’ previous experiments with our app have shown that the ISO3 data
    for Kosovo is corrupt, so we filter the DataFrame to take out the Kosovo row.
    Lastly, we rename the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column to <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> to make
    the DataFrame easier to merge with another DataFrame later on (in [Listing 5-4](chapter5.xhtml#List5-4)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作者之前对我们的应用程序进行的实验表明，科索沃的 ISO3 数据已损坏，因此我们过滤掉数据框中的科索沃行。最后，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    列重命名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>，以便后续更容易与另一个数据框合并（参见
    [清单 5-4](chapter5.xhtml#List5-4)）。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Identifying the Indicators</samp>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">识别指标</samp>
- en: 'With the countries’ DataFrame built, we need to extract the World Bank data
    tied to our three indicators: internet usage, female politicians, and emissions
    data. We first need to find the indicator’s exact name and then find its respective
    ID so that we can query the API correctly. We get the indicator name directly
    from the World Bank website. Go to [*https://<wbr>data<wbr>.worldbank<wbr>.org<wbr>/indicator*](https://data.worldbank.org/indicator).
    To get the name for the internet usage indicator, click the **All Indicators**
    tab at the top of the page. Then, under the Infrastructure section, click **Individuals
    Using the Internet (% of Population)**. This is the exact name of the indicator
    we will be using in our app. If the World Bank website changes the names of the
    indicators, make sure you search for something similar and grab the exact name.
    We’ll also keep the code in the book’s resources up-to-date, if you get stuck.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 构建好国家的 DataFrame 后，我们需要提取与三个指标相关的世界银行数据：互联网使用、女性政治家和排放数据。我们首先需要找到指标的确切名称，然后找到相应的ID，以便正确查询API。我们直接从世界银行网站获取指标名称。访问[*https://<wbr>data<wbr>.worldbank<wbr>.org<wbr>/indicator*](https://data.worldbank.org/indicator)。要获取互联网使用指标的名称，点击页面顶部的
    **All Indicators** 标签。然后，在基础设施部分，点击 **Individuals Using the Internet (% of Population)**。这就是我们将在应用中使用的指标的确切名称。如果世界银行网站更改了指标名称，确保你搜索相似的名称并获取准确的名称。如果你遇到困难，我们也会保持书中的代码资源更新。
- en: 'Next we use the indicator name to get its ID using the *our_indicator.py* file
    you downloaded with the book’s resources. In your project folder, open the *our_indicator.py*
    file in a new IDE window and run it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用指标名称通过你从书籍资源下载的 *our_indicator.py* 文件来获取其ID。在你的项目文件夹中，打开 *our_indicator.py*
    文件，并在新的 IDE 窗口中运行它：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = wb.get_indicators()[['id','name']]</samp>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = wb.get_indicators()[['id','name']]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df[df.name
    == 'Individuals using the Internet (% of population)']</samp>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df[df.name
    == 'Individuals using the Internet (% of population)']</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
- en: 'This simply scrapes the entries from the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> columns of the DataFrame
    pertaining to the World Bank site. The output should reveal the ID pertaining
    to that indicator:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是从 DataFrame 中抓取与世界银行网站相关的 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 列的条目。输出应该显示与该指标相关的ID：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    |  |  |  |  |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    |  |  |  |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8045</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using the Internet
    (% of population)</samp> |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8045</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using the Internet
    (% of population)</samp> |'
- en: 'You’ll need to repeat this process to get the names for the remaining two indicators
    from the World Bank website by replacing <samp class="SANS_TheSansMonoCd_W5Regular_11">''Individuals
    using the Internet (% of population)''</samp> with the name of the other two indicators:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''Proportion of seats held by women
    in national parliaments (%)''</samp>, found in the Gender section, and <samp class="SANS_TheSansMonoCd_W5Regular_11">''CO2
    emissions (kt)''</samp>, found in the Climate Change section. Again, these names
    change every now and then, so if you don’t get a result, make sure you search
    the World Bank indicators page and find the closest match. We then store the indicator
    names and IDs inside a dictionary located in the *worldbank.py* file, which we’ll
    use later on, as shown in [Listing 5-3](chapter5.xhtml#List5-3).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要重复这个过程，从世界银行网站获取其余两个指标的名称，方法是将 <samp class="SANS_TheSansMonoCd_W5Regular_11">'Individuals
    using the Internet (% of population)'</samp> 替换为另外两个指标的名称：<samp class="SANS_TheSansMonoCd_W5Regular_11">'Proportion
    of seats held by women in national parliaments (%)'</samp>，位于性别部分，以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">'CO2
    emissions (kt)'</samp>，位于气候变化部分。同样，这些名称会不时变化，因此如果没有结果，确保你在世界银行的指标页面上进行搜索，找到最接近的匹配项。然后，我们将指标的名称和ID存储在
    *worldbank.py* 文件中的字典里，后续会用到，如[清单 5-3](chapter5.xhtml#List5-3)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators = {</samp>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators = {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "IT.NET.USER.ZS": "Individuals
    using the Internet (% of population)",</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "IT.NET.USER.ZS": "使用互联网的个人（占人口比例）",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "SG.GEN.PARL.ZS": "Proportion
    of seats held by women in national parliaments (%)",</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "SG.GEN.PARL.ZS": "女性在国家议会中所占席位比例（%）",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "EN.ATM.CO2E.KT": "CO2 emissions
    (kt)",</samp>'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "EN.ATM.CO2E.KT": "二氧化碳排放量（千吨）",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-3: Defining indicators
    inside</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-3：在</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">中定义指标</samp>
- en: The main code you downloaded will have these IDs, but it’s useful to practice
    retrieving them yourself since they do change from time to time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你下载的主要代码会有这些 ID，但自己练习获取这些 ID 是很有用的，因为它们会不时发生变化。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Extracting the Data</samp>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">提取数据</samp>
- en: Now we can build a function that downloads historical data for these three World
    Bank indicators, shown in [Listing 5-4](chapter5.xhtml#List5-4). We’ll save the
    data in a new DataFrame called <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以构建一个函数，下载这三个世界银行指标的历史数据，如[列表 5-4](chapter5.xhtml#List5-4)所示。我们将把数据保存到一个新的
    DataFrame 中，名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_wb_data():</samp>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_wb_data():</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Retrieve specific world bank
    data from API</samp>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 从 API 获取特定的世界银行数据</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = wb.download(</samp>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = wb.download(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      indicator=(list(indicators)),
    country=countries["iso3c"],</samp>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      indicator=(list(indicators)),
    country=countries["iso3c"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start=2005, end=2016</samp>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start=2005, end=2016</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.reset_index()</samp>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.reset_index()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.year =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df.year.astype(int)</samp>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.year =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df.year.astype(int)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Add country ISO3 ID to main
    df</samp>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 将国家 ISO3 ID 添加到主数据框</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = pd.merge(df, countries,
    on="country")</samp>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = pd.merge(df, countries,
    on="country")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.rename(columns=indicators)</samp>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.rename(columns=indicators)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return df</samp>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return df</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-4: The</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">section
    where historical data is downloaded</samp>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-4：历史数据下载部分</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">中的代码</samp>
- en: We retrieve the data with the <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.download()</samp>
    method, which has a few parameters. The first is <samp class="SANS_TheSansMonoCd_W5Regular_11">indicator</samp>,
    which takes a list of strings that represent the indicator IDs. Here we assign
    it the keys of the <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators</samp>
    dictionary from [Listing 5-3](chapter5.xhtml#List5-3). The next parameter is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">country</samp>, which takes a list of
    strings that represent the countries’ ISO3 codes. We assign it the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp> DataFrame
    created in [Listing 5-2](chapter5.xhtml#List5-2). Lastly, the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">end</samp> parameters allow
    us to define the range of years for which we would like the data pulled. We stop
    at 2016 simply because that’s the last year for which the World Bank has complete
    data for the CO[2] indicator.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.download()</samp> 方法来获取数据，该方法有一些参数。第一个是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">indicator</samp>，它接受一个表示指标ID的字符串列表。在这里，我们将其赋值为
    [Listing 5-3](chapter5.xhtml#List5-3) 中 <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators</samp>
    字典的键。下一个参数是 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>，它接受一个表示国家ISO3代码的字符串列表。我们将其赋值为
    [Listing 5-2](chapter5.xhtml#List5-2) 中创建的 <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> 列。最后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">start</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">end</samp>
    参数允许我们定义要拉取数据的年份范围。我们停留在2016年，因为那是世界银行为CO[2]指标提供完整数据的最后一年。
- en: We then reset the index so that <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp>, which are part
    of the index, become new columns, and we have a dedicated <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp>
    column with nothing but integers, which will help with filtering later. You can
    see the effect of resetting an index in [Listing 5-5](chapter5.xhtml#List5-5),
    where we showcase the DataFrame before and after resetting the index.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们重置索引，使得 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> 和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> 成为新的列，而不再是索引的一部分，并且我们拥有一个专门的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp> 列，其中只包含整数，这将在后续的过滤操作中派上用场。你可以在
    [Listing 5-5](chapter5.xhtml#List5-5) 中看到重置索引的效果，我们展示了重置前后的 DataFrame。
- en: '|  |  | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp> |  |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|  |  | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp> |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    |  |  |  |  |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    |  |  |  |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> |  |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> |  |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp> |  |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp> |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |  |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |  |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |  |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |  |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 3 columns]</samp>
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 行 x 3 列]</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">>>> df.reset_index()</samp>
    |  |  |  |  |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">>>> df.reset_index()</samp>
    |  |  |  |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp>
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">国家</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">年份</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2515</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp>
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2515</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2516</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2516</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2517</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2517</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2518</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2518</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2519</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2519</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 5 columns]</samp>
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 5 columns]</samp>
    |'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-5: The DataFrame
    before and after resetting the index</samp>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-5：重置索引前后的 DataFrame</samp>
- en: Before resetting the index, <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> were part of the
    index, but not part of the resultant row associated with an index element. After
    resetting the index, they are both individual columns of the DataFrame, which
    makes it a lot easier to access the individual rows that contain the country and
    year data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在重置索引之前，<samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">year</samp> 是索引的一部分，但不是与索引元素相关联的结果行的一部分。重置索引后，它们都变成了
    DataFrame 的独立列，这使得访问包含国家和年份数据的各行变得更加容易。
- en: Next we convert the values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp>
    column from strings to integers so that the data can be filtered correctly with
    pandas later on. The original <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame does not contain the ISO3 country codes we need for querying the API,
    so we extract those codes from the <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame and merge the two DataFrames with <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.merge</samp>
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> column. Finally,
    we rename the columns so that they show the indicator names rather than the IDs,
    for human readability. For example, the column <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    will now be named <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using
    the Internet (% of population)</samp>.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> 列中的值从字符串转换为整数，以便以后能用
    pandas 正确地过滤数据。原始的 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame
    中不包含我们需要的 ISO3 国家代码来查询 API，因此我们从 <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame 中提取这些代码，并通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.merge</samp>
    将两个 DataFrame 按照 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    列进行合并。最后，我们重命名列名，使其显示指标名称而非 ID，以便于人类阅读。例如，列 <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    现在将被命名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">使用互联网的个人（占总人口的百分比）</samp>。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data()</samp> function
    is now complete and will be called inside the first callback as soon as the app
    starts. You’ll learn all about this process later in the chapter. In the meantime,
    let’s learn how to use dash-bootstrap-components to create the layout and style
    the app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data()</samp> 函数现在已经完成，并将在应用启动时在第一个回调中被调用。你将在本章稍后学习这个过程。与此同时，我们来学习如何使用
    dash-bootstrap-components 创建布局并为应用添加样式。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Dash Bootstrap Styling</samp>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Dash Bootstrap 样式</samp>
- en: Dash Bootstrap is a powerful tool for styling Dash apps, helping us create the
    layout, style the app, and add Bootstrap components such as buttons and radio
    items. Buttons and radio items also exist in dash-core-components, but we’ll use
    the dash-bootstrap-components versions for better compatibility with the rest
    of our Bootstrap styling. Bootstrap also contains modules that store items for
    various stylesheet themes as strings, which allows us to simply include links
    to those modules to style the elements.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Dash Bootstrap 是一个强大的工具，可以为 Dash 应用添加样式，帮助我们创建布局、为应用加样式，并添加 Bootstrap 组件，如按钮和单选项。按钮和单选项在
    dash-core-components 中也存在，但我们将使用 dash-bootstrap-components 版本，以便与其他 Bootstrap
    样式更好地兼容。Bootstrap 还包含存储各种样式表主题的模块，这些模块将项作为字符串存储，使我们可以简单地包含这些模块的链接来样式化元素。
- en: To incorporate Bootstrap into the Dash app, we must first choose a theme and
    assign it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter right below our imports section, as shown in [Listing 5-6](chapter5.xhtml#List5-6).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Bootstrap 纳入 Dash 应用，我们首先必须选择一个主题，并将其分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    参数，该参数位于导入部分下方，如 [列表 5-6](chapter5.xhtml#List5-6) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-6: The</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">section
    where Dash is instantiated</samp>'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-6：Dash 被实例化的</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">部分</samp>
- en: A Bootstrap theme is a stylesheet hosted online that determines the type of
    font, color, shape, and size of the elements on the page.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 主题是一个在线托管的样式表，用于决定页面元素的字体类型、颜色、形状和大小。
- en: In this app, we use the default theme <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>,
    which is the first theme on the themes list. Bootstrap has several other themes
    at your disposal. To check out the themes, you can go to [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com)
    and click the **Change Theme** button on the left side of the page. You can switch
    up the theme for this app if you like; just make sure you use the exact name in
    capital letters when assigning it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter. You should only assign one theme at a time, so if you choose a new
    theme, make sure you replace <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，我们使用默认主题 <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>，它是主题列表中的第一个主题。Bootstrap
    还有其他几个主题可以选择。要查看这些主题，你可以访问 [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com)，然后点击页面左侧的
    **Change Theme** 按钮。如果你喜欢，可以更换本应用的主题；只需确保在将其分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    参数时使用大写的准确名称。每次只能分配一个主题，因此如果选择了新主题，请确保替换掉 <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>。
- en: For a complete video tutorial on Dash Bootstrap, see the video “Complete Guide
    to Bootstrap Dashboard Apps” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 若要观看完整的 Dash Bootstrap 视频教程，请查看视频“完整的 Bootstrap 仪表盘应用指南”，网址为 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Layout</samp>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">布局</samp>
- en: As you know, we generally refer to the layout of an app as a grid, which commonly
    consists of 12 columns and an infinite number of rows. To start building the layout,
    we need to create a container that will house all our rows and columns as well
    as the components that will go inside them. The <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp>
    syntax is pretty much like an <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>,
    but it is more compatible with Bootstrap styling. First we’ll declare the rows,
    then we’ll declare the columns that go inside each row. Finally, we’ll put the
    app components inside the columns. This final step defines the location of each
    component on the page.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，我们通常将应用的布局称为网格，网格通常由12列和无限行组成。为了开始构建布局，我们需要创建一个容器来容纳所有的行和列，以及将放置在其中的组件。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp> 语法与 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    非常相似，但它更兼容 Bootstrap 样式。首先，我们声明行，然后声明每行内部的列。最后，我们将应用组件放入列中。最后一步确定了每个组件在页面上的位置。
- en: To avoid overwhelming you with the 80 lines of code used to create the layout
    in our app, [Listing 5-7](chapter5.xhtml#List5-7) is a simplified version that
    removes the props within each <samp class="SANS_TheSansMonoCd_W5Regular_11">html</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc</samp>
    component to just show the general structure.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免向你展示我们应用中用于创建布局的80行代码，[列表 5-7](chapter5.xhtml#List5-7) 提供了一个简化版本，去除了每个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">html</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc</samp> 组件中的 props，只显示了整体结构。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              [</samp>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                html.H1(),</samp>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                html.H1(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dcc.Graph()</samp>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dcc.Graph()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=12,</samp>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=12,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    [</samp>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.Label(),</samp>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.Label(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.RadioItems(),</samp>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.RadioItems(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=4,</samp>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=4,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Label(),</samp>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Label()，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              dcc.RangeSlider(),</samp>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              dcc.RangeSlider()，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Button()</samp>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Button()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ],</samp>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ]，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  width=6,</samp>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  width=6，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              )，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          ]</samp>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     )，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-7: App layout simplified</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列 5-7：简化的应用布局</samp>
- en: This app contains three rows. The first row ❶ has a column component that stretches
    12 columns wide and contains the <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    heading and <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> visualization
    components. These correspond to the title and the choropleth map in the app, shown
    in [Figure 5-1](chapter5.xhtml#fig5-1).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用包含三行。第一行 ❶ 有一个列组件，宽度为 12 列，其中包含 <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    标题和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 可视化组件。这些对应于应用中的标题和区域图，见
    [图 5-1](chapter5.xhtml#fig5-1)。
- en: In the second row ❷ we place a column component that stretches only four columns
    wide, inside which we place the <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>. These correspond
    to the “Select Data Set” subtitle and the three radio buttons beneath it in the
    app.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行 ❷ 中，我们放置了一个仅占四列宽度的列组件，里面放置了 <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>。这些对应于应用中的“选择数据集”副标题和其下的三个单选按钮。
- en: The last row ❸ contains the <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>,
    all of which are wrapped in a column component that is six columns wide.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行 ❸ 包含了 <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>，它们都被包裹在一个宽度为六列的列组件中。
- en: <samp class="SANS_Dogma_OT_Bold_B_11">MULTICOMPONENT ROWS</samp>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">多组件行</samp>
- en: <samp class="SANS_Futura_Std_Book_11">It’s important to reiterate that an effective
    and popular approach to building dashboards is to set a maximum of 12 columns
    per page and allow components to span the width of multiple columns. In this app,
    each row has just one column component, but if we were to add several components
    in a row, we would have to make sure that, combined, they do not surpass the width
    of 12\. Let’s see an example:</samp>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">需要重申的是，构建仪表板时，一种有效且受欢迎的方法是每页设置最多 12 列，并允许组件跨越多个列的宽度。在这个应用中，每行只有一个列组件，但如果我们要在一行中添加多个组件，我们必须确保它们的总宽度不超过
    12。让我们来看一个例子：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=6),</samp>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=6)，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5),</samp>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5)，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">])，</samp>
- en: <samp class="SANS_Futura_Std_Book_11">In the preceding code, the total width
    is 11, which means that all the Dash components will be displayed on one row.
    Here’s an example of what</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">not</samp>
    <samp class="SANS_Futura_Std_Book_11">to do:</samp>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">在上面的代码中，总宽度为 11，这意味着所有的 Dash 组件会显示在同一行。以下是一个不推荐的示例：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=8),</samp>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=8),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=6),</samp>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=6),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
- en: <samp class="SANS_Futura_Std_Book_11">With a total width of 14, the Dash components
    from the second</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp>
    <samp class="SANS_Futura_Std_Book_11">will wrap into a row underneath the first</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp><samp class="SANS_Futura_Std_Book_11">,
    resulting in two rows instead of one. This can mess up your layout.</samp>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">当总宽度为 14 时，第二个</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp>
    <samp class="SANS_Futura_Std_Book_11">中的 Dash 组件将换行显示在第一个</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp><samp
    class="SANS_Futura_Std_Book_11">下面，导致出现两行而非一行，这可能会破坏你的布局。</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Components and Styling</samp>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">组件与样式</samp>
- en: 'Dash Bootstrap components are similar to Dash Core components, but with the
    advantage that they are easier to use and integrate with Bootstrap stylesheets.
    In our app, we use three Bootstrap components: <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>.
    Let’s look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> components.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Dash Bootstrap 组件类似于 Dash Core 组件，但其优势在于它们更易于使用，并且能与 Bootstrap 样式表更好地集成。在我们的应用中，我们使用了三个
    Bootstrap 组件：<samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>。让我们来看一下
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    组件。
- en: 'We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp> using
    five props: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>, as shown in
    [Listing 5-8](chapter5.xhtml#List5-8).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过五个属性来定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>，如 [Listing 5-8](chapter5.xhtml#List5-8)
    所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)，</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-8: Defining a Bootstrap
    Button</samp>'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-8: 定义一个 Bootstrap
    按钮</samp>'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop is used to
    uniquely identify this component and will be assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    inside the Dash callback to allow interaction with other components. Here we call
    it <samp class="SANS_TheSansMonoCd_W5Regular_11">my-button</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop represents the text displayed on the button. The <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    prop counts the number of times the button has been clicked by the user, so we
    initialize it at 0\. The <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>
    prop sets the color of the button background. Here it is assigned the Bootstrap
    contextual color <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>,
    which represents the color blue (we could also use <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp>
    to make it gray, <samp class="SANS_TheSansMonoCd_W5Regular_11">success</samp>
    for green, <samp class="SANS_TheSansMonoCd_W5Regular_11">warning</samp> for orange,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">danger</samp> for red). Note
    that the color represented by <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>
    depends on which theme you’ve chosen; if you were to choose the LUX theme for
    your Dash app, <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp> would
    represent the color black, and <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp>
    would be white.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 属性用于唯一标识该组件，并将在 Dash
    回调中分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>，以便与其他组件进行交互。这里我们将它命名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">my-button</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    属性表示按钮上显示的文本。<samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp> 属性计算按钮被用户点击的次数，因此我们将其初始化为
    0。<samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp> 属性设置按钮背景的颜色。这里，它被分配了
    Bootstrap 上下文颜色 <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>，表示蓝色（我们也可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp> 来使其为灰色，<samp class="SANS_TheSansMonoCd_W5Regular_11">success</samp>
    表示绿色，<samp class="SANS_TheSansMonoCd_W5Regular_11">warning</samp> 表示橙色，或 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">danger</samp> 表示红色）。请注意，<samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>
    所代表的颜色取决于你选择的主题；如果你为 Dash 应用选择了 LUX 主题，那么 <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>
    将代表黑色，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp> 将是白色。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> controls
    the styling of the component. Here we assign it the Bootstrap class <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp>,
    which controls how much margin there is between the top of the button and the
    component above it. The <samp class="SANS_TheSansMonoCd_W5Regular_11">mt</samp>
    stands for *margin top*, and <samp class="SANS_TheSansMonoCd_W5Regular_11">–4</samp>
    creates four units of space in the margin above the component. All of this creates
    the button shown in [Figure 5-2](chapter5.xhtml#fig5-2).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 控制组件的样式。在这里，我们为它分配了
    Bootstrap 类 <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp>，它控制按钮顶部和组件之间的边距大小。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">mt</samp> 代表 *margin top*，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">–4</samp>
    在组件上方创建了四个单位的边距。这一切共同构成了图 [Figure 5-2](chapter5.xhtml#fig5-2) 中所示的按钮。
- en: '![](../images/Figure5-2.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: The Submit button
    for our app</samp>'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: 我们应用的提交按钮</samp>'
- en: Try changing the margin to <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-1</samp>
    and see how the space shrinks between the button and the range slider above it.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将边距改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-1</samp>，看看按钮和上方的范围滑块之间的空隙如何缩小。
- en: 'You can also combine multiple classes within the <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    prop to add more styling by adding space between every additional class. For example,
    try adding <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp> after
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> as one string to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> prop to make the
    Submit text bold, like so:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 属性中组合多个类，通过在每个附加类之间加空格来添加更多样式。例如，尝试在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> 后添加 <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp>，将其作为一个字符串传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 属性，这样可以让“Submit”文本变为粗体，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4</samp> <samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">fw-bold</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">",</samp>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4</samp> <samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">fw-bold</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: 'There are a few other <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    props that we aren’t using but are worth highlighting. The <samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp>
    prop can be assigned a URL, thereby taking the user to a new website once the
    button is clicked. The <samp class="SANS_TheSansMonoCd_W5Regular_11">size</samp>
    prop controls the size of the button by assigning one of the following values:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''lg''</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">''md''</samp>,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">''sm''</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">disabled</samp>
    prop disables the button when we assign <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    to it; we might want to, for example, create a callback to instruct the app to
    disable the button if it’s no longer needed.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些我们没有使用，但值得注意的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    属性。<samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp> 属性可以分配一个 URL，点击按钮后会将用户带到一个新网站。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">size</samp> 属性通过赋值以下之一来控制按钮的大小：<samp class="SANS_TheSansMonoCd_W5Regular_11">'lg'</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">'md'</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">'sm'</samp>。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">disabled</samp> 属性可以禁用按钮，当我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    赋值给它时；例如，我们可能想创建一个回调，指示应用在不再需要按钮时禁用它。
- en: Next we have <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    (also known as radio buttons), which are small circles or boxes next to a label
    that can be clicked. A radio button is similar to a checkbox except that, while
    the checkbox allows the user to choose multiple labels, the radio button only
    allows one label to be chosen at a time. The user will use it to choose which
    indicator they want to show the data for, as in [Figure 5-3](chapter5.xhtml#fig5-3).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>（也称为单选按钮），它是一个小圆圈或框，旁边有标签，用户可以点击它。单选按钮与复选框类似，不同的是，复选框允许用户选择多个标签，而单选按钮一次只允许选择一个标签。用户将使用它来选择他们想要显示数据的指示器，如
    [图 5-3](chapter5.xhtml#fig5-3) 所示。
- en: '![](../images/Figure5-3.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: The indicator selection
    RadioItems component</samp>'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-3：指示器选择 RadioItems 组件</samp>
- en: We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    with the four props shown in [Listing 5-9](chapter5.xhtml#List5-9).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 [清单 5-9](chapter5.xhtml#List5-9) 中显示的四个属性来定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems(</samp>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="radio-indicator",</samp>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="radio-indicator",</samp>
- en: '❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[{"label": i, "value":
    i} for i in indicators.values()],</samp>'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[{"label": i, "value":
    i} for i in indicators.values()],</samp>'
- en: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">value=list(indicators.values())
    [0],</samp>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">value=list(indicators.values())
    [0],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   input_class_name=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"me-2",</samp>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   input_class_name=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"me-2",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-9: The RadioItems
    component in the layout section of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-9：layout 部分中的 RadioItems
    组件</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: 'We first give the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> name. The <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    prop is responsible for displaying the labels. We pass it a list of dictionaries
    ❶, each of which represents a label; we use list comprehension to loop over all
    the indicators and create a label for each item. Alternatively, written out the
    long way in the following code, we could have assigned a list of three dictionaries
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems options</samp>
    prop like this (abridged) version. This would have achieved the exact same result:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先给 <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> 分配一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 名称。<samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    属性负责显示标签。我们传递给它一个字典列表 ❶，每个字典代表一个标签；我们使用列表推导遍历所有指示器并为每个项目创建一个标签。或者，如果以下面这种较长的方式编写代码，我们也可以像这个（简化版）一样将一个包含三个字典的列表分配给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems options</samp> 属性，这将实现完全相同的效果：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[</samp>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "Individuals using…",
    "value": "Individuals using…"},</samp>'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "使用中的个人…", "value":
    "使用中的个人…"},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "Proportion of seats…",
    "value": "Proportion of seats…"},</samp>'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "座位比例…", "value":
    "座位比例…"},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "CO2 emissions (kt)",
    "value": "CO2 emissions (kt)"}</samp>'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "CO2 排放量（kt）", "value":
    "CO2 排放量（kt）"}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
- en: 'Each dictionary has two keys: the <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key determines the text to display to the user, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    key is the actual value of the indicator. For example, we use the exact text “CO2
    emissions (kt)” for the value in order to match the indicator’s dictionary key
    value, as in [Listing 5-3](chapter5.xhtml#List5-3). This makes it a lot easier
    to filter the data later in the callback section. The <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key can be anything you want to display, but here we use the same string for the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> and the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    since the string is already clear, informative, and not too long to display.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字典有两个键：<samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> 键决定要显示给用户的文本，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> 键是指示器的实际值。例如，我们使用确切的文本“CO2
    排放量（kt）”作为值，以便与指示器的字典键值匹配，如 [列表 5-3](chapter5.xhtml#List5-3) 所示。这样，在回调部分过滤数据时会更容易。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">label</samp> 键可以是任何你想显示的内容，但在这里我们使用相同的字符串作为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>，因为这个字符串已经很清晰、信息量大，而且长度适中，适合显示。
- en: The next prop is <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    ❷, which registers the value selected by the user, depending on which radio button
    the user clicks; the object assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    prop in [Listing 5-9](chapter5.xhtml#List5-9) represents the value chosen by default
    as the app loads for the first time. We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">input_class_name</samp>
    prop to style the radio button; in this case, we assign it the Bootstrap class
    <samp class="SANS_TheSansMonoCd_W5Regular_11">me-2</samp> to set the circle two
    units of space to the left of the label. Try changing the number to see how this
    affects the appearance. Note that we can use Bootstrap classes to style Dash Core
    components, as well as Bootstrap components
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个属性是 <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> ❷，它注册用户选择的值，取决于用户点击了哪个单选按钮；分配给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> 属性的对象在 [列表 5-9](chapter5.xhtml#List5-9)
    中表示应用首次加载时默认选择的值。我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">input_class_name</samp>
    属性来设置单选按钮的样式；在这个例子中，我们将它设置为 Bootstrap 类 <samp class="SANS_TheSansMonoCd_W5Regular_11">me-2</samp>，将圆形左边的间距设置为两单位。尝试更改数字，看看这如何影响外观。请注意，我们可以使用
    Bootstrap 类来为 Dash Core 组件以及 Bootstrap 组件设置样式。
- en: There are innumerable Bootstrap classes, helpfully summarized and organized
    in the cheat sheet at [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> class, for example,
    is located under the <samp class="SANS_TheSansMonoCd_W5Regular_11">Spacing</samp>
    utility section, while <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp>
    is located under the <samp class="SANS_TheSansMonoCd_W5Regular_11">Text</samp>
    utility section. Play around with the other utilities and give the app your own
    personal style. We won’t go over all the Bootstrap classes here, given the sheer
    number of them; instead, we recommend that you use the cheat sheet and experiment
    with incorporating different classes.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 有无数的 Bootstrap 类，已在 [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com)
    的备忘单中做了有益的总结和组织。例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> 类位于
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Spacing</samp> 工具部分，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp>
    类位于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Text</samp> 工具部分。可以尝试其他工具并为应用添加自己的个性化样式。由于
    Bootstrap 类的数量庞大，我们在这里不会一一列举；而是建议您使用备忘单并尝试整合不同的类。
- en: Always assign a Bootstrap theme to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter, as we did in [Listing 5-6](chapter5.xhtml#List5-6), or the Bootstrap
    layout, styling, and elements will fail to function throughout the app.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 始终将一个 Bootstrap 主题分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    参数，正如我们在 [Listing 5-6](chapter5.xhtml#List5-6) 中所做的，否则 Bootstrap 布局、样式和元素将在整个应用中无法正常工作。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Core Components</samp>
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 核心组件</samp>
- en: We’ll add a few new Dash Core components to the app, namely <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向应用程序中添加几个新的 Dash 核心组件，即 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> is commonly
    used when we want to present a wide range of values to select from or when the
    user can select a range rather than discrete values. In this case, we’ll use it
    to allow the user to select a single year or a range of years, as shown in [Figure
    5-4](chapter5.xhtml#fig5-4).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 通常用于展示一个广泛的可选值范围，或者当用户可以选择一个范围而不是离散值时。在这个例子中，我们将使用它来让用户选择单个年份或一段年份范围，如
    [Figure 5-4](chapter5.xhtml#fig5-4) 所示。
- en: '![](../images/Figure5-4.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: The years selection
    RangeSlider component</samp>'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-4：年份选择 RangeSlider 组件</samp>
- en: We’ll define our <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    with six props, as shown in [Listing 5-10](chapter5.xhtml#List5-10).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过六个属性来定义我们的 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>，如
    [Listing 5-10](chapter5.xhtml#List5-10) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider(</samp>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="years-range",</samp>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="years-range",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=2005,</samp>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=2005,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=2016,</samp>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=2016,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   step=1,</samp>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   step=1,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=[2005, 2006],</samp>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=[2005, 2006],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2005: "2005",</samp>'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2005: "2005",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2006: " ''06",</samp>'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2006: " ''06",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2007: " ''07",</samp>'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2007: " ''07",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2008: " ''08",</samp>'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2008: " ''08",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2009: " ''09",</samp>'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2009: " ''09",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2010:
    " ''10",</samp>'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2010："
    '10"，</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2011: " ''11",</samp>'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         2011：" '11"，</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2012: " ''12",</samp>'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         2012：" '12"，</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2013: " ''13",</samp>'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         2013：" '13"，</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2014:
    " ''14",</samp>'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2014："
    '14"，</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2015: " ''15",</samp>'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         2015：" '15"，</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2016: "2016",</samp>'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         2016："2016"，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   }，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)，</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-10: The RangeSlider
    component in the layout section of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-10：布局部分的 RangeSlider 组件</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    props define the lowest and highest values on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    usually from left to right. The <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    prop determines the increment to make when the slider is moved. We set the value
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> so that each movement
    of the slider will change the year by one. However, because we have marks for
    every year, assigning <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    to another value, say <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>,
    would achieve the same result; the user’s selection will automatically snap to
    the nearest mark. If we removed the marks for all the years between 2005 and 2016
    and just kept those two, the slider would move to the nearest value in increments
    of three, assuming you assigned <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    属性定义了 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 上的最小值和最大值，通常是从左到右。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">step</samp> 属性决定了移动滑块时的增量。我们将其值设置为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，使得每次滑块的移动都会改变一年。但是，因为我们为每个年份都设置了标记，所以将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp> 设置为另一个值，比如 <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>，也会得到相同的结果；用户的选择会自动对齐到最接近的标记。如果我们移除了
    2005 年到 2016 年之间所有年份的标记，只保留这两个年份，假设你将 <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>，那么滑块就会以三为增量移动到最接近的值。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> prop determines
    the initial range that’s selected by default when the app loads; it will also
    detect the range of years selected by the app user. The <samp class="SANS_TheSansMonoCd_W5Regular_11">marks</samp>
    prop labels the marks. We assign it a dictionary: the key determines the position
    of the year on the slider, while the value indicates the text to display in that
    position on the app.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> 属性决定了应用加载时默认选中的初始范围；它还会检测应用用户选择的年份范围。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">marks</samp> 属性标记了标记点。我们为它分配一个字典：键决定年份在滑块上的位置，而值表示在该位置上显示的文本。
- en: Another common <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    prop, not used here, is <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross</samp>,
    which allows the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    handles (the blue circles you see above 2005 and ’06 in [Figure 5-4](chapter5.xhtml#fig5-4))
    to cross each other when set to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>.
    By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross=False</samp>,
    but if you changed that to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    you would be able to pull the 2005 handle to the right and over the ’06 handle.
    For a full list of <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    props, go to the Dash components documentation (*http://dash.plotly.com/dash-core-components*)
    and select <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>.
    The props can be found at the bottom of the page. For a complete video tutorial
    on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    see the video “Range Slider—Python Dash Plotly” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的<samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>属性，这里没有使用，是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">allowCross</samp>，它允许<samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>的滑块（即你在[图5-4](chapter5.xhtml#fig5-4)中看到的2005年和'06年上方的蓝色圆圈）在设置为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp>时相互交叉。默认情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross=False</samp>，但如果你将其改为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp>，你就能够将2005年的滑块拉到右侧，跨过'06年的滑块。关于<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>的完整属性列表，参见Dash组件文档（*http://dash.plotly.com/dash-core-components*），并选择<samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>。属性可以在页面底部找到。有关Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>的完整视频教程，请观看视频“Range
    Slider—Python Dash Plotly”，网址为[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: The Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component
    is typically used to save dashboard data in memory on the user’s web browser so
    that the data can be called and recalled quickly and efficiently. The store is
    invisible and does not appear on the user’s page, though we must still declare
    it in the layout section, as shown in [Listing 5-11](chapter5.xhtml#List5-11).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>组件通常用于将仪表板数据保存在用户的Web浏览器的内存中，以便快速高效地调用和恢复这些数据。该存储是不可见的，不会出现在用户的页面上，但我们仍然需要在布局部分声明它，如[列表5-11](chapter5.xhtml#List5-11)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Store(id="storage", storage_type="local",
    data={}),</samp>
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Store(id="storage", storage_type="local",
    data={}),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-11: The Store component
    in the last section of the layout in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表5-11：布局中最后部分的Store组件</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: 'This component allows for seamless and quick sharing of data between callbacks.
    There is a limit to the amount of data it can store, however: around 2MB of data
    in mobile environments and from 5MB to approximately 10MB in most desktop-only
    applications. We’ll see how callbacks use the store in the next section.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件允许在回调之间无缝且快速地共享数据。然而，它能够存储的数据量是有限的：在移动环境中大约为2MB，在大多数仅限桌面的应用中则为5MB到大约10MB。我们将在下一节中看到回调如何使用这个存储。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop will be used
    later in the callback to identify this component. The <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    prop represents the stored data; this data can be in the form of a dictionary,
    list, integer, string, or Boolean. We don’t actually need to declare the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp> prop or assign an empty dictionary,
    as we did in [Listing 5-11](chapter5.xhtml#List5-11), but we’ve added it here
    for descriptive purposes. The <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    component will always assume it’s there, which is why we don’t have to declare
    it.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>属性将在回调中用于标识此组件。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp>属性表示存储的数据；这些数据可以是字典、列表、整数、字符串或布尔值的形式。实际上，我们并不需要声明<data</samp>属性或分配一个空字典，正如我们在[列表5-11](chapter5.xhtml#List5-11)中所做的那样，但我们在这里添加它是为了说明问题。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>组件会假定它存在，这就是为什么我们不需要声明它的原因。
- en: 'The prop <samp class="SANS_TheSansMonoCd_W5Regular_11">storage_type</samp>
    declares how we want to store the data. It has three options: <samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp> option retains
    the data until the browser tab or the browser itself is closed and a new one is
    opened. The <samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp> option
    saves the data to the browser until all browsing history and cookies are deleted.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp> option resets
    the data when the browser is refreshed.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: prop <samp class="SANS_TheSansMonoCd_W5Regular_11">storage_type</samp> 声明了我们希望如何存储数据。它有三个选项：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">session</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp>
    选项会保留数据，直到浏览器标签页或浏览器本身关闭，并且新标签页被打开。<samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>
    选项会将数据保存到浏览器中，直到所有浏览历史和 cookies 被删除。<samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>
    选项会在浏览器刷新时重置数据。
- en: Our last component is the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>,
    used to automatically update the app without having to refresh the browser page
    manually. This is typically used with apps that use data in real time, such as
    financial apps, which need to update themselves with new data every couple of
    seconds. In our app, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    activates the first callback, which itself creates the DataFrame from the data
    pulled from the World Bank pandas API. Then, every 60 seconds, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    reactivates the callback to pull the data again and create a new DataFrame.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个组件是 Dash 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>，用于自动更新应用程序，而不需要手动刷新浏览器页面。这个通常与需要实时数据的应用程序一起使用，比如金融应用，它们需要每隔几秒更新一次数据。在我们的应用程序中，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 激活第一个回调，该回调从世界银行的 pandas
    API 拉取数据并创建 DataFrame。然后，每隔 60 秒，<samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    重新激活回调，再次拉取数据并创建一个新的 DataFrame。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> has a few
    important props, shown in [Listing 5-12](chapter5.xhtml#List5-12).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 有几个重要的属性，见 [Listing
    5-12](chapter5.xhtml#List5-12)。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 60, n_intervals=0),</samp>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 60, n_intervals=0),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-12: The Interval
    component in the last section of the layout in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-12: 上一节布局中的 Interval
    组件</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">interval</samp> prop tells
    the app how much time should transpire between every activation of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>.
    We assign this interval in milliseconds, so here we use <samp class="SANS_TheSansMonoCd_W5Regular_11">1000
    * 60</samp>, which is equal to 60 seconds. Every 60 seconds you should see the
    word “Updating” appear in the browser’s window tab. The <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>
    prop counts the number of times the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    has been activated: after 60 seconds <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=1</samp>,
    after 120 seconds <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=2</samp>,
    and so on until the end of time. One other common prop not presented here is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">max_intervals</samp>, which defines the
    maximum number of times <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    will be activated. If, for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals=2</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">interval=1000*60</samp>, the
    app will stop updating itself after 120 seconds.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">interval</samp> 属性告诉应用程序每次激活 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 之间应该间隔多少时间。我们将这个间隔设定为毫秒，因此在这里我们使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1000 * 60</samp>，即 60 秒。每 60 秒，你应该看到浏览器标签页中出现“Updating”字样。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp> 属性计数 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    被激活的次数：60 秒后 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=1</samp>，120
    秒后 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=2</samp>，以此类推，直到结束。这里没有展示的另一个常见属性是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals</samp>，它定义了 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 激活的最大次数。例如，如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals=2</samp>
    且 <samp class="SANS_TheSansMonoCd_W5Regular_11">interval=1000*60</samp>，那么在 120
    秒后，应用程序将停止更新。
- en: In reality, we don’t really need to update the data every 60 seconds, because
    the World Bank probably only updates its data every couple of weeks. We simply
    chose 60-second intervals so that you can see the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    component in action.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们并不需要每 60 秒更新一次数据，因为世界银行可能每隔几周才更新一次数据。我们选择了 60 秒的间隔，以便你能看到 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    组件的实际效果。
- en: For a complete video tutorial on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>,
    see the video “The Dash Interval Overview” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 的完整视频教程，请观看视频
    “Dash Interval 概述”：[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Callbacks</samp>
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 回调</samp>
- en: Our app uses two callbacks. The first callback is responsible for retrieving
    data from the World Bank through the pandas datareader API, while the second callback
    is responsible for creating and displaying the choropleth map on the app.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用使用了两个回调。第一个回调负责通过 pandas datareader API 从世界银行获取数据，而第二个回调负责在应用中创建并显示 choropleth
    地图。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Retrieval Callback</samp>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据获取回调</samp>
- en: 'The data retrieval callback will call on the appropriate components to retrieve
    the chosen data every 60 seconds and return a DataFrame of that data, which is
    stored on the user’s web browser. As always, the callback has two sections: the
    callback decorator and the callback function, as shown in [Listing 5-13](chapter5.xhtml#List5-13).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 数据获取回调会调用适当的组件，每 60 秒检索一次所选数据，并返回该数据的 DataFrame，该数据将存储在用户的网页浏览器中。像往常一样，回调有两个部分：回调装饰器和回调函数，如
    [Listing 5-13](chapter5.xhtml#List5-13) 所示。
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"))</samp>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"))</samp>
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">def store_data(n_time):</samp>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">def store_data(n_time):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dataframe = update_wb_data()</samp>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dataframe = update_wb_data()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dataframe.to_dict("records")</samp>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dataframe.to_dict("records")</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-13: The first callback
    in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-13：第一个回调函数在</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: 'Within the callback decorator ❶ the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> parameters take
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp> and a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>, whose assigned
    values refer to components in the layout section of the app. The <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> parameter in
    this case is <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>, and
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> refers
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp>. These are
    positional arguments, so we don’t need to include the parameters in the decorator
    function code. In fact, the same line of code written the long way would look
    like this:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调装饰器❶内，<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> 参数各自包含一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    和一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>，这些值对应应用程序布局部分中的组件。此处
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    为 <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>
    对应 <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp>。这些是位置参数，因此我们无需在装饰器函数的代码中包含这些参数。事实上，若将这行代码写得更长，应该是这样的：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="storage",
    component_property="data"),</samp>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="storage",
    component_property="data"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input(component_id="timer",
    component_property=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals")</samp>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input(component_id="timer",
    component_property=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: As shown in [Listing 5-13](chapter5.xhtml#List5-13), <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>
    refers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of the Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> component and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp> refers to the prop
    that represents the number of times the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    has been fired. Following the same logic, <samp class="SANS_TheSansMonoCd_W5Regular_11">"storage"</samp>
    refers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of the Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"data"</samp> refers to the prop that
    represents the data being stored on the user’s browser.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如[清单 5-13](chapter5.xhtml#List5-13)所示，<samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>指的是
    Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 组件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp> 指的是表示 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 被触发次数的属性。按照相同的逻辑，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"storage"</samp> 指的是 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    组件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">"data"</samp>
    指的是表示存储在用户浏览器中的数据的属性。
- en: Inside the callback function ❷ we pass in the single <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    argument <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>. The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp> argument refers to the value
    assigned to <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>’s <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>, which is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>. Because <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    refers to <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>, every
    time the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> is triggered
    (every 60 seconds) the callback function will be triggered as well. The first
    trigger occurs as soon as the app is rendered on the page for the first time or
    as soon as the page is refreshed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数内 ❷ 我们传入了唯一的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    参数 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    参数指的是分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>，即
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>。因为 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    指代的是 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>，所以每当 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 被触发（每60秒一次）时，回调函数也会被触发。第一次触发发生在应用程序首次渲染页面时，或者页面被刷新时。
- en: You can call this argument anything you’d like; it doesn’t have to be called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>. However, it’s important
    to note that only one argument is passed into the callback function because the
    callback decorator only has one <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个参数命名为你喜欢的任何名称；它不一定要叫做 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>。然而，重要的是要注意，只有一个参数被传递到回调函数中，因为回调装饰器只有一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>。
- en: Once the function is triggered, it activates the <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data</samp>
    function at the beginning of the app ([Listing 5-4](chapter5.xhtml#List5-4)),
    and it saves the results to the <samp class="SANS_TheSansMonoCd_W5Regular_11">dataframe</samp>
    object. This DataFrame now contains data from the World Bank. The DataFrame is
    then returned. Every object returned in the callback function corresponds to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> argument. In this
    case, the returned DataFrame corresponds to the <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    prop of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component,
    as seen in [Listing 5-13](chapter5.xhtml#List5-13). As a result, the retrieved
    World Bank data is stored on the user’s web browser for future use.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发该函数，它会激活应用程序开始时的 <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data</samp>
    函数（见 [Listing 5-4](chapter5.xhtml#List5-4)），并将结果保存到 <samp class="SANS_TheSansMonoCd_W5Regular_11">dataframe</samp>
    对象中。这个 DataFrame 现在包含来自世界银行的数据。接着，DataFrame 被返回。回调函数中返回的每个对象都对应着 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    参数的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>。在这种情况下，返回的
    DataFrame 对应于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 组件的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp> 属性，具体参见 [Listing 5-13](chapter5.xhtml#List5-13)。因此，检索到的世界银行数据会存储在用户的网页浏览器中以供未来使用。
- en: 'Our callback decorator has only one output, so one object is returned in the
    callback function. In apps where the callback decorator has multiple outputs,
    you will have to return the same number of objects in the callback function. For
    example, here the callback function returns two messages because the decorator
    function has two outputs:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的回调装饰器只有一个输出，因此回调函数中只返回一个对象。在回调装饰器有多个输出的应用中，你需要在回调函数中返回相同数量的对象。例如，这里回调函数返回了两个消息，因为装饰器函数有两个输出：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content1",
    "children"),</samp>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content1",
    "children"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content2",
    "children"),</samp>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content2",
    "children"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("timer", "n_intervals")</samp>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("timer", "n_intervals")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_data(n_time):</samp>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_data(n_time):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message1 = "text to display
    in the children prop of the 1st Output."</samp>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message1 = "在第一个输出的 children
    prop 中显示的文本。"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message2 = "text to display
    in the children prop of the 2nd Output."</samp>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message2 = "在第二个输出的 children
    prop 中显示的文本。"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return message1, message2</samp>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return message1, message2</samp>
- en: For a complete video tutorial on the Dash callback function, see the video “The
    Dash Callback—Input, Output, State, and more” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看有关 Dash 回调函数的完整视频教程，请观看视频“Dash 回调——输入、输出、状态等”，访问 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Dogma_OT_Bold_B_11">DISABLING CALLBACKS ON STARTUP</samp>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">禁用启动时的回调</samp>
- en: <samp class="SANS_Futura_Std_Book_11">By default, all callbacks are triggered
    when the app starts. However, sometimes you’ll need to stop this from occurring.
    For example, you might have a callback that returns a graph only when a button
    is clicked, so you don’t want that callback to activate at startup before the
    button is clicked. There are two ways to stop the callback from being triggered
    automatically when the app first loads. One is by adding the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_callbacks</samp>
    <samp class="SANS_Futura_Std_Book_11">line to the start of the app where Dash
    is instantiated and setting it to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp
    class="SANS_Futura_Std_Book_11">, as such:</samp>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">默认情况下，所有回调在应用程序启动时都会触发。然而，有时你需要阻止这种情况的发生。例如，你可能有一个回调，只有在按钮被点击时才会返回一个图形，因此你不希望该回调在按钮被点击之前就激活。在应用程序首次加载时，有两种方法可以阻止回调自动触发。一种是在应用程序启动时添加</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_callbacks</samp>
    <samp class="SANS_Futura_Std_Book_11">行，并将其设置为</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp
    class="SANS_Futura_Std_Book_11">，如下所示：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP],</samp>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">prevent_initial_callbacks=True</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">prevent_initial_callbacks=True</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_Futura_Std_Book_11">This will stop all callbacks from triggering
    when the page loads for the first time or when the page is refreshed. The second
    method is to enter</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_Futura_Std_Book_11">inside
    the particular callback you don’t want to trigger when the page loads. If we were
    to do so in our first callback, it would look like this:</samp>
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">这将阻止所有回调在页面首次加载或页面刷新时触发。第二种方法是将</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_Futura_Std_Book_11">放入你不希望在页面加载时触发的特定回调中。如果我们在第一个回调中这样做，它将是这样的：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"),</samp>
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=True)</samp>
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=True)</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Figure Creation Callback</samp>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">图形创建回调</samp>
- en: The figure creation callback will retrieve the stored DataFrame from the user’s
    browser, filter the DataFrame based on the years and dataset selected by the user,
    and return a graph that represents that data visually. The decorator function
    has two <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> arguments,
    two <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments, and
    one <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>, as seen in [Listing
    5-14](chapter5.xhtml#List5-14).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图形创建回调将从用户浏览器中检索存储的 DataFrame，基于用户选择的年份和数据集过滤 DataFrame，并返回一个可视化的图表来展示这些数据。装饰器函数有两个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数，两个 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数和一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> 参数，如 [清单 5-14](chapter5.xhtml#List5-14)
    所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("my-choropleth", "figure"),</samp>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("my-choropleth", "figure"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("my-button", "n_clicks"),</samp>
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("my-button", "n_clicks"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("storage", "data"),</samp>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("storage", "data"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("years-range", "value"),</samp>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("years-range", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("radio-indicator", "value"),</samp>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("radio-indicator", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-14: The callback
    decorator of the second callback in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-14：第二个回调函数的回调装饰器</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: The first <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> refers
    to the number of times the button is clicked, and the second refers to the data
    stored on the user’s browser by the first callback. Next we define a couple of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments. A <samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp> argument doesn’t trigger
    the callback when its components are altered, but rather makes note of the user’s
    selection. Here, the first <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    argument checks which range of years the user has chosen on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    and the second one refers to the indicator chosen from the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 表示按钮被点击的次数，第二个则表示第一个回调函数在用户浏览器中存储的数据。接下来，我们定义了几个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 参数。<samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数不会在其组件发生变化时触发回调，而是记录用户的选择。在这里，第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数检查用户在 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 上选择了哪个年份范围，第二个则指示用户从
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> 中选择的指标。
- en: When the user changes the year(s) selected on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    or chooses a different <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    World Bank indicator, the values are saved, but the choropleth map does not update
    until the button is clicked. This is because the button’s <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    is a component property of an <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    argument ([Listing 5-14](chapter5.xhtml#List5-14)). Remember, <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    arguments always trigger callbacks. <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    arguments do not.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更改 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 上选择的年份，或者选择了不同的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> 世界银行指标时，值会被保存，但
    choropleth 地图不会更新，直到按钮被点击。这是因为按钮的 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    是一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数的组件属性（见 [清单 5-14](chapter5.xhtml#List5-14)）。记住，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数总是会触发回调，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数则不会。
- en: Now let’s look at the callback function. The callback decorator has four arguments
    that are not <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>s, so
    the callback function must also be assigned four arguments, as shown in [Listing
    5-15](chapter5.xhtml#List5-15).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: "现在让我们来看回调函数。回调装饰器有四个非<\tsamp class=\"SANS_TheSansMonoCd_W5Regular_11\">Output</samp>的参数，因此回调函数也必须赋予四个参数，如[列表\
    \ 5-15](chapter5.xhtml#List5-15)所示。"
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(n_clicks, stored_dataframe,
    years_chosen, indct_chosen):</samp>
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(n_clicks, stored_dataframe,
    years_chosen, indct_chosen):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = pd.DataFrame.from_records(stored_dataframe)</samp>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = pd.DataFrame.from_records(stored_dataframe)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      print(years_chosen)</samp>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      print(years_chosen)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] != years_chosen[1]:</samp>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] != years_chosen[1]:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❸   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff.year.between(years_chosen[0], years_chosen[1])]</samp>
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❸   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff.year.between(years_chosen[0], years_chosen[1])]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❹   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff.groupby(["iso3c", "country"])[indct_chosen].mean()</samp>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❹   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff.groupby(["iso3c", "country"])[indct_chosen].mean()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         dff = dff.reset_index()</samp>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         dff = dff.reset_index()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth(</samp>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations="iso3c",</samp>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations="iso3c",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          scope="world",</samp>
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          scope="world",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❺  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] == years_chosen[1]:</samp>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❺  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] == years_chosen[1]:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❻   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff["year"].isin(years_chosen)]</samp>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❻   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff["year"].isin(years_chosen)]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❼   <samp class="SANS_TheSansMonoCd_W5Regular_11">fig
    = px.choropleth(</samp>
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❼   <samp class="SANS_TheSansMonoCd_W5Regular_11">fig
    = px.choropleth(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"iso3c",</samp>
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"iso3c",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    scope="world",</samp>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    scope="world",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           )</samp>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=50, t=50, b=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50),</samp>
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=50, t=50, b=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-15: Defining the
    callback function of the second callback in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-15：定义第二个回调函数的回调函数</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: 'The four arguments correspond to the component properties of <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> in [Listing 5-14](chapter5.xhtml#List5-14)
    in the following manner:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个参数对应于[列表 5-14](chapter5.xhtml#List5-14)中 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 组件属性的定义方式：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp> 转换为 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">stored_dataframe</samp> to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">stored_dataframe</samp> 转换为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> 转换为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp> 转换为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
- en: The first line of code within the callback function ❶ converts the stored data,
    which is currently a list of dictionaries, to a pandas DataFrame to make it easier
    to create the Plotly Express graphs.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数中的第一行代码❶将存储的数据（目前是字典列表）转换为 pandas DataFrame，以便更容易创建 Plotly Express 图表。
- en: 'We next need to filter the data to prepare it for plotting the choropleth map.
    To see how best to filter the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    data, go to the app and try to move the slider handles to select multiple years
    or only one year and hit **Submit**. See what’s then printed out in the Python
    IDE. You should see something like this:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要过滤数据，为绘制 Choropleth 地图做准备。要了解如何最好地过滤 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    数据，可以进入应用程序，尝试移动滑块句柄选择多个年份或仅选择一个年份，然后点击 **提交**。查看 Python IDE 中打印出来的内容。你应该会看到类似这样的内容：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2006]</samp>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2006]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2009]</samp>
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2009]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2009, 2009]</samp>
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2009, 2009]</samp>
- en: We can see that the app must distinguish whether the two values in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> list are different
    from each other ❷ or the same ❺ so that it knows whether to use data from a range
    or a single year. Now that we know what the data looks like, it’s easier to filter.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，应用程序必须区分 <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    列表中的两个值是不同的❷，还是相同的❺，以便知道是使用年份范围的数据还是单一年份的数据。现在我们知道数据的结构，过滤起来更容易。
- en: If the two values are different, it means the user has selected a range. First
    we create a DataFrame that is limited to only those rows pertaining to the range
    of years selected by the user ❸. If the user moved the slider handles to choose
    [2005, 2009], the new DataFrame will include all the years between 2005 and 2009\.
    Next, for each country we extract the mean value for the indicator chosen. Because
    each country appears multiple times on multiple rows—once for each year—we also
    group the DataFrame by the <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> columns ❹. This
    ensures that each country will be represented only once in the new DataFrame.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个值不同，则意味着用户选择了一个范围。首先，我们创建一个只包含用户选择的年份范围的行的 DataFrame❸。如果用户将滑块句柄移动到选择[2005,
    2009]，则新的 DataFrame 将包括 2005 到 2009 年之间的所有年份。接下来，对于每个国家，我们提取所选指标的平均值。因为每个国家在多个行中出现——每年一次——我们还按
    <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    列进行分组❹。这样可以确保每个国家在新的 DataFrame 中只出现一次。
- en: If you’re not sure what certain lines of code do, add print statements between
    the lines to clarify what the data looks like before and after each manipulation.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定某些代码行的作用，可以在行与行之间添加打印语句，以明确每次操作前后数据的变化。
- en: If the two values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    list are the same ❺, it means the user selected only one year (for example, [2009,
    2009]). Consequently, there is no need to use <samp class="SANS_TheSansMonoCd_W5Regular_11">groupby</samp>,
    because every country will appear only once. Lastly, we filter the DataFrame so
    that it contains only rows with the selected year ❻.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> 列表中的两个值相同❺，则意味着用户只选择了一个年份（例如，[2009,
    2009]）。因此，不需要使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">groupby</samp>，因为每个国家只会出现一次。最后，我们过滤
    DataFrame 以确保它只包含所选年份的行❻。
- en: With the data fully filtered, it is now ready to be used to plot the choropleth
    map. We will use the last section of this chapter, “Plotly Express Choropleth
    Maps,” to go over the creation of the choropleth ❼.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 数据完全过滤后，现在可以用来绘制 Choropleth 地图。我们将在本章的最后部分“Plotly Express Choropleth 地图”中讲解
    Choropleth 图的创建❼。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Diagram</samp>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调图表</samp>
- en: To depict more clearly what’s happening in the callbacks, we’ll look at the
    callback diagram, as we did in [Chapter 4](chapter4.xhtml), to get information
    on the order in which the callbacks are triggered, the amount of time it takes
    to fully render each callback, and the component within the callback that’s being
    activated.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰地描述回调中发生的情况，我们将查看回调图示，正如在[第 4 章](chapter4.xhtml)中所做的那样，以便获取回调触发的顺序、每个回调完全渲染所需的时间以及回调中被激活的组件信息。
- en: First, as shown in [Listing 5-16](chapter5.xhtml#List5-16), reduce the interval
    in the layout section to 10 seconds so that the callback is triggered more frequently
    and you can see what’s happening in the callback diagram every 10 seconds. Also
    check that <samp class="SANS_TheSansMonoCd_W5Regular_11">debug=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    at the end of the code; otherwise, the diagram won’t appear.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如[清单 5-16](chapter5.xhtml#List5-16)所示，将布局部分的间隔时间减少到 10 秒，这样回调会更频繁地触发，你可以看到每隔
    10 秒钟回调图示的变化。同时检查代码末尾是否有 <samp class="SANS_TheSansMonoCd_W5Regular_11">debug=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp>；否则，图示不会显示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 10, n_intervals=0),</samp>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 10, n_intervals=0),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-16: The Interval
    component and the last line of code in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-16：Interval 组件和代码中的最后一行，位于</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: Now run the app, and in the browser click the **Callbacks** button in the lower-right
    corner. [Figure 5-5](chapter5.xhtml#fig5-5) shows the diagram that should appear.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，并在浏览器中点击右下角的**回调**按钮。[图 5-5](chapter5.xhtml#fig5-5)展示了应显示的图示。
- en: '![](../images/Figure5-5.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: The callback diagram</samp>'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-5：回调图示</samp>
- en: Each callback argument (<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>)
    is represented by a box, and another box tells you the number of times a callback
    was triggered and how quickly. As you can see, the first input refers to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> component. The box in
    the second row tells us that the callback has been triggered once (when the page
    loaded), and that it took a little over one second (1,428 milliseconds) to complete
    the callback and store the data on the browser. Observe how the arrow from that
    box points to the storage component in the third row. You should see the top digit
    in the box in the second row increase by one every 10 seconds.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 每个回调参数（<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>，<samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>，或
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>）由一个框表示，另一个框告诉你回调被触发的次数以及触发的速度。如你所见，第一个输入指的是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 组件。第二行的框告诉我们回调已被触发一次（页面加载时），并且回调完成并将数据存储到浏览器中大约花费了一秒多（1,428
    毫秒）。观察箭头如何从该框指向第三行的存储组件。你应该会看到第二行框中的顶部数字每 10 秒增加一次。
- en: The four boxes in the third row represent the two <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    and two <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments in
    the second callback. The box beneath informs us that the second callback has been
    triggered once and that it took less than one-tenth of a second to return a figure
    of the choropleth map as an <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行的四个框代表第二个回调中的两个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    和两个 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 参数。下面的框告诉我们第二个回调已经触发一次，并且返回一个**区域图**的结果，耗时不到十分之一秒，作为一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>。
- en: Approximately one second after the first callback is complete, you should see
    the outline of the storage component highlighted in purple on your screen. This
    is because the storage component activates the second callback.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次回调完成约一秒钟后，您应该会看到存储组件的轮廓在屏幕上以紫色突出显示。这是因为存储组件激活了第二次回调。
- en: Let’s see how the diagram changes as the user interacts with the app. Click
    the button, choose a different <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>,
    and move the years of the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>.
    Whenever you interact with a component, its respective blue box in the diagram
    should highlight. Notice how the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> do not
    trigger the second callback; only the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> components trigger
    the second callback because they are <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    arguments, as opposed to <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    arguments.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当用户与应用程序交互时，图表如何变化。点击按钮，选择不同的 <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>，并调整
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 的年份。每当您与组件交互时，图表中相应的蓝色框应该会突出显示。请注意，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    并不会触发第二次回调；只有 <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 组件会触发第二次回调，因为它们是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    参数，而不是 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 参数。
- en: Don’t forget to change the interval in the layout section back to 60 seconds
    to avoid overloading the API with requests.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了在布局部分将时间间隔设置回60秒，以避免因请求过多而导致API超载。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Ordering</samp>
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调顺序</samp>
- en: Before we move on, it’s important to discuss the order in which we write callbacks.
    If callbacks do not depend on each other, the order does not matter because when
    the page first loads, the callbacks can be called in any order. However, for callbacks
    that do depend on each other, as they do in this app, the writing order is important.
    The callback that needs to be triggered first should be written above any callbacks
    that depend on it; accordingly, we placed the callback that stores the data above
    the callback that uses the stored data to plot the figure.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，重要的是讨论我们编写回调的顺序。如果回调之间没有相互依赖，顺序无关紧要，因为页面首次加载时，回调可以按任意顺序调用。然而，对于那些相互依赖的回调（如本应用程序中的回调），编写顺序非常重要。需要首先触发的回调应该写在依赖于它的回调之上；因此，我们将存储数据的回调放在了使用存储数据绘制图形的回调之上。
- en: For a complete video tutorial on Dash chained callbacks, see the video “Chained
    Callback in Dash” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看完整的视频教程，了解Dash链式回调，请访问视频“Dash中的链式回调”：[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express Choropleth Maps</samp>
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express 分层地图</samp>
- en: The choropleth map represents quantitative data in shades and colors over a
    map of certain spatial areas. The choropleth map is a great data visualization
    tool for displaying variations in data across regions. The earliest known choropleth
    map was created by Charles Dupin in 1826 to depict the availability of basic education
    in departments of France, as seen in [Figure 5-6](chapter5.xhtml#fig5-6). Choropleths
    were first referred to as *cartes teintées*, or “color maps.”
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 分层地图通过不同的色调和颜色展示特定空间区域的定量数据。分层地图是一个非常有效的数据可视化工具，用于展示不同区域数据的变化。已知最早的分层地图由查尔斯·杜潘（Charles
    Dupin）于1826年创建，用来展示法国各部门基本教育的可用性，如[图 5-6](chapter5.xhtml#fig5-6)所示。分层地图最初被称为*cartes
    teintées*，即“彩色地图”。
- en: '![](../images/Figure5-6.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: The earliest known
    choropleth map (Source:</samp> [<samp class="SANS_Futura_Std_Book_11">https://en.wikipedia.org/wiki/Choropleth_map</samp>](https://en.wikipedia.org/wiki/Choropleth_map))'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-6：已知最早的分层地图（来源：</samp> [<samp
    class="SANS_Futura_Std_Book_11">https://en.wikipedia.org/wiki/Choropleth_map</samp>](https://en.wikipedia.org/wiki/Choropleth_map))
- en: 'We visualize our data as a choropleth using the Plotly Express method <samp
    class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth</samp>. Here is a complete
    list of the attributes pertaining to the choropleth map in Plotly Express:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Plotly Express 方法 <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth</samp>
    将数据可视化为一个分级色图。以下是 Plotly Express 中与分级色图相关的所有属性列表：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.choropleth(data_frame=None,
    lat=None, lon=None, locations=None, locationmode=None, geojson=None, featureidkey=None,
    color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, facet_row=None,
    facet_col=None, facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None,
    hover_name=None, hover_data=None, custom_data=None, animation_frame=None, animation_group=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, category_orders=None, labels=None,
    color_discrete_sequence=None, color_discrete_map=None, color_continuous_scale=None,
    range_color=None, color_continuous_midpoint=None, projection=None, scope=None,
    center=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, fitbounds=None,
    basemap_visible=None, title=None, template=None, width=None, height=None)</samp>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.choropleth(data_frame=None,
    lat=None, lon=None, locations=None, locationmode=None, geojson=None, featureidkey=None,
    color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, facet_row=None,
    facet_col=None, facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None,
    hover_name=None, hover_data=None, custom_data=None, animation_frame=None, animation_group=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, category_orders=None, labels=None,
    color_discrete_sequence=None, color_discrete_map=None, color_continuous_scale=None,
    range_color=None, color_continuous_midpoint=None, projection=None, scope=None,
    center=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, fitbounds=None,
    basemap_visible=None, title=None, template=None, width=None, height=None)</samp>
- en: To build our choropleth, we only need six of these attributes, as shown in [Listing
    5-17](chapter5.xhtml#List5-17).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们的分级色图，我们只需要六个这些属性，如[列表 5-17](chapter5.xhtml#List5-17)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.choropleth(</samp>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.choropleth(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=dff,</samp>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=dff,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   locations="iso3c",</samp>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   locations="iso3c",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen,</samp>
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   scope="world",</samp>
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   scope="world",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   hover_data={"iso3c": False,
    "country": True},</samp>'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   hover_data={"iso3c": False,
    "country": True},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={indicators["SG.GEN.PARL.ZS"]:
    "% 女性议员",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           indicators["IT.NET.USER.ZS"]:
    "pop % using internet"},</samp>'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           indicators["IT.NET.USER.ZS"]:
    "使用互联网的总人口百分比"},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-17: The choropleth
    figure inside the second callback function of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-17：第二个回调函数中的分级色图，来自</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: To the <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp> attribute
    we assign the dataset we filtered earlier, according to the <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    argument. To <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp> we
    assign the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> column,
    which contains three-letter country codes as defined at the Natural Earth website
    ([*https://<wbr>www<wbr>.naturalearthdata<wbr>.com*](https://www.naturalearthdata.com)).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp> attribute controls
    how the map uses color distinctions. We pass it <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp>,
    which corresponds to the indicator that the user chooses from the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp> 属性，我们分配了之前根据
    <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> 参数筛选过的数据集。对于
    <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp>，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    列分配给它，其中包含根据 Natural Earth 网站定义的三字母国家代码（[https://<wbr>www<wbr>.naturalearthdata<wbr>.com](https://www.naturalearthdata.com)）。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">color</samp> 属性控制了地图如何使用颜色区分。我们将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp> 传递给它，该值对应于用户从 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp> 中选择的指标。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> attribute describes
    the area of the map that the figure will feature, and has specific keywords we
    can assign to it: <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">usa</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">asia</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">europe</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">north america</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">south
    america</samp>. For example, if the data plotted was only for Africa, the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> chosen should be <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>
    instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>. Here we
    choose the whole world. The <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    attribute controls what information appears in the tool tips when the user hovers
    their mouse over the map. Here we assign <samp class="SANS_TheSansMonoCd_W5Regular_11">"country":
    True</samp> to show the country names but hide the country codes. The <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>
    attribute instructs the app to change the names of certain columns. Because in
    this case the names are used in the hover tool tip and in the title of the color
    bar to the right of the graph, space is limited. We therefore change the names
    of the labels so that they are shorter and can fit in their respective displayed
    location in the app.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> 属性描述了图形将要展示的地图区域，并且有一些我们可以为其分配的特定关键字：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">world</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">usa</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">asia</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">europe</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">north
    america</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">south america</samp>。例如，如果绘制的数据仅仅是关于非洲的，那么应选择
    <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp> 作为 <samp class="SANS_TheSansMonoCd_W5Regular_11">scope</samp>，而不是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>。在这里，我们选择的是整个世界。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp> 属性控制了当用户将鼠标悬停在地图上时，工具提示中显示的信息。在这里，我们将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"country": True</samp> 赋值给它，以显示国家名称，但隐藏国家代码。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">labels</samp> 属性指示应用程序更改某些列的名称。因为在这种情况下，这些名称既用于悬停工具提示，也用于图表右侧颜色条的标题，空间有限。因此，我们更改了标签的名称，以便它们更短并且能够适应在应用程序中显示的位置。'
- en: 'To manipulate certain aspects of the choropleth layout, we must turn to Plotly
    Graph Objects: the low-level interface for creating graphs from the bottom up.
    Given that Plotly Express is built on top of Plotly Graph Objects, anytime a figure
    needs more elaborate customization features that don’t exist in Plotly Express,
    you can use figure attributes from Graph Objects. In [Listing 5-18](chapter5.xhtml#List5-18),
    we use it to change the displayed shape of the map and reduce the empty margin
    space around it, thereby enlarging the map itself.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 要调整 choropleth 布局的某些方面，我们必须使用 Plotly Graph Objects：这是一个低级接口，用于从底层创建图表。由于 Plotly
    Express 是构建在 Plotly Graph Objects 之上的，当图表需要更多复杂的自定义功能，而这些功能在 Plotly Express 中不存在时，可以使用
    Graph Objects 中的图形属性。在[示例 5-18](chapter5.xhtml#List5-18)中，我们使用它来改变地图的显示形状，并减少地图周围的空白边距，从而放大地图本身。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout(</samp>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   geo={"projection": {"type":
    "natural earth"}},</samp>'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   geo={"projection": {"type":
    "natural earth"}},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   margin=dict(l=50, r=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   margin=dict(l=50, r=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-18: Updating the
    layout of the choropleth figure inside the second callback function of</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">示例 5-18：在第二个回调函数中更新 choropleth
    图表的布局</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">geo</samp> attribute can take
    many dictionary keys that are responsible for changing the layout of the map,
    including <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">oceancolor</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">resolution</samp>,
    among others. The <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>
    key has its own dictionary key called <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>,
    which determines the shape of the frame for the map. Assigning <samp class="SANS_TheSansMonoCd_W5Regular_11">natural
    earth</samp> to the <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    key displays the map in an oblong frame instead of a boxed frame. Try changing
    <samp class="SANS_TheSansMonoCd_W5Regular_11">natural earth</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">satellite</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">bonne</samp> and see how the
    shape of the map is altered. The second attribute, <samp class="SANS_TheSansMonoCd_W5Regular_11">margin</samp>,
    enlarges the map size displayed by reducing the margins from the default of 80
    pixels to 50 pixels. A complete list of the Plotly Graph Objects attributes for
    choropleths is available at [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>/reference<wbr>/choropleth*](https://plotly.com/python/reference/choropleth).
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">geo</samp> 属性可以包含许多字典键，用于更改地图的布局，包括
    <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">oceancolor</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">resolution</samp> 等。<samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>
    键有一个名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp> 的字典键，用于决定地图框架的形状。将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">natural earth</samp> 赋值给 <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    键，会使地图显示为椭圆形框架，而不是方框。尝试将 <samp class="SANS_TheSansMonoCd_W5Regular_11">natural
    earth</samp> 改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">satellite</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">bonne</samp>，观察地图的形状如何变化。第二个属性
    <samp class="SANS_TheSansMonoCd_W5Regular_11">margin</samp> 通过将边距从默认的 80 像素减少到
    50 像素，从而放大了显示的地图尺寸。关于 choropleth 图表的完整 Plotly Graph Objects 属性列表，请访问 [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>/reference<wbr>/choropleth*](https://plotly.com/python/reference/choropleth)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: 'In this chapter you learned several new concepts: you learned to use pandas
    datareader to extract data from the web; you were introduced to Dash Bootstrap
    components to manage the layout and styling of an app and to some new and important
    Dash Core components, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>; you learned
    how to create an app with multiple callbacks; and you dove headfirst into the
    trendy choropleth map. With these skills, you can create ever more effective and
    complex dashboards that update in real time.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学到了几个新概念：你学会了使用 pandas datareader 从网络中提取数据；你了解了 Dash Bootstrap 组件来管理应用的布局和样式，以及一些新的重要
    Dash Core 组件，如 <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>；你学会了如何创建具有多个回调的应用；并且你深入探讨了流行的分级地图。凭借这些技能，你可以创建越来越有效且复杂的实时更新仪表板。
