- en: B
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: B
- en: Text Editors and IDEs
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器和 IDE
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Programmers spend a lot of time writing, reading, and editing code, and using
    a text editor or an IDE (integrated development environment) to make this work
    as efficient as possible is essential. A good editor will do simple tasks, like
    highlighting your code’s structure so you can catch common bugs as you’re working.
    But it won’t do so much that it distracts you from your thinking. Editors also
    have useful features like automatic indenting, markers to show appropriate line
    length, and keyboard shortcuts for common operations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员花费大量时间编写、阅读和编辑代码，使用文本编辑器或 IDE（集成开发环境）来提高工作的效率是至关重要的。一个好的编辑器能够完成简单的任务，例如突出显示代码结构，让你在工作时及时发现常见的错误。但它不会做得过多，以至于分散你思考的注意力。编辑器还具有自动缩进、标记合适行长以及常见操作的快捷键等有用功能。
- en: An *IDE* is a text editor with a number of other tools included, like interactive
    debuggers and code introspection. An IDE examines your code as you enter it and
    tries to learn about the project you’re building. For example, when you start
    typing the name of a function, an IDE might show you all the arguments that function
    accepts. This behavior can be very helpful when everything works and you understand
    what you’re seeing. But it can also be overwhelming as a beginner and difficult
    to troubleshoot when you aren’t sure why your code isn’t working in the IDE.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*IDE* 是一种文本编辑器，包含许多其他工具，如交互式调试器和代码自省。IDE 在你输入代码时会分析你的代码，并试图了解你正在构建的项目。例如，当你开始输入函数名时，IDE
    可能会显示该函数接受的所有参数。这种行为在一切正常且你理解自己看到的内容时非常有帮助。但作为初学者，它也可能让人感到不知所措，并且当你不确定为什么代码在 IDE
    中无法正常工作时，排除故障可能会变得很困难。'
- en: These days, the lines have blurred between text editors and IDEs. Most popular
    editors have some features that used to be exclusive to IDEs. Likewise, most IDEs
    can be configured to run in a lighter mode that’s less distracting as you work,
    but lets you use the more advanced features when you need them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，文本编辑器和 IDE 之间的界限已经模糊。大多数流行的编辑器都具有曾经只有 IDE 才有的功能。同样，大多数 IDE 可以配置成运行在一个较轻的模式下，减少干扰，帮助你专注工作，但当你需要时，也能让你使用更高级的功能。
- en: If you already have an editor or IDE installed that you like, and if it’s already
    configured to work with a recent version of Python that’s installed on your system,
    then I encourage you to stick with what you already know. Exploring different
    editors can be fun, but it’s also a way to avoid the work of learning a new language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了一个你喜欢的编辑器或 IDE，并且它已经配置好与系统上安装的最新版本 Python 一起使用，那么我建议你继续使用你已经熟悉的工具。探索不同的编辑器可以很有趣，但这也是避免学习新语言的一种方式。
- en: 'If you don’t already have an editor or IDE installed, I recommend VS Code for
    a number of reasons:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装编辑器或 IDE，我推荐 VS Code，原因有很多：
- en: It’s free, and it’s released under an open source license.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费的，并且以开源许可证发布。
- en: It can be installed on all major operating systems.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在所有主要操作系统上安装。
- en: It’s beginner-friendly but also powerful enough that many professional programmers
    use it as their main editor.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对初学者友好，但也足够强大，许多专业程序员将其作为主要编辑器使用。
- en: It finds the versions of Python you have installed, and it typically does not
    require any configuration to run your first programs.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以查找你已安装的 Python 版本，通常无需配置即可运行你的第一个程序。
- en: It has an integrated terminal, so your output appears in the same window as
    your code.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个集成终端，因此你的输出会显示在与代码相同的窗口中。
- en: A Python extension is available that makes the editor highly efficient for writing
    and maintaining Python code.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个 Python 扩展，它使得编辑器在编写和维护 Python 代码时非常高效。
- en: It’s highly customizable, so you can tune it to match the way you work with
    code.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它高度可定制，因此你可以根据自己的工作方式来调整它，以便更好地使用代码。
- en: In this appendix, you’ll learn how to start configuring VS Code so that it works
    well for you. You’ll also learn some shortcuts that let you work more efficiently.
    Being a fast typist is not as important as many people think in programming, but
    understanding your editor and knowing how to use it efficiently is quite helpful.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，你将学习如何开始配置 VS Code，以使其更适合你的工作。你还将学习一些快捷键，帮助你提高工作效率。成为一个快速打字员在编程中并不像许多人认为的那么重要，但了解你的编辑器并知道如何高效使用它是非常有帮助的。
- en: With all that said, VS Code doesn’t work for everyone. If it doesn’t work well
    on your system for some reason, or if it’s distracting you as you work, there
    are a number of other editors that you might find more appealing. This appendix
    includes a brief description of some of the other editors and IDEs you should
    consider.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，VS Code 并不适合所有人。如果由于某些原因它在你的系统上运行不良，或者在工作时让你分心，还有许多其他编辑器你可能会觉得更合适。本附录包含了对一些其他编辑器和集成开发环境（IDE）的简要描述，你可以考虑一下。
- en: Working Efficiently with VS Code
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高效使用 VS Code
- en: In Chapter 1, you installed VS Code and added the Python extension as well.
    This section will show you some further configurations you can make, plus shortcuts
    for working efficiently with your code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 章中，你已经安装了 VS Code 并添加了 Python 扩展。本节将向你展示一些你可以进行的进一步配置，以及提高工作效率的快捷键。
- en: Configuring VS Code
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 VS Code
- en: There are a few ways to change the default configuration settings for VS Code.
    Some changes can be made through the interface, and some will require changes
    in configuration files. These changes will sometimes take effect for everything
    you do in VS Code, while others will affect only the files within the folder that
    contains the configuration file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以更改 VS Code 的默认配置设置。一些更改可以通过界面进行，而另一些则需要修改配置文件。这些更改有时会对你在 VS Code 中的所有操作生效，而其他一些则仅会影响包含配置文件的文件夹中的文件。
- en: For example, if you have a configuration file in your *python_work* folder,
    those settings will only affect the files in that folder (and its subfolders).
    This is a good feature, because it means you can have project-specific settings
    that override your global settings.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 *python_work* 文件夹中有一个配置文件，那么这些设置只会影响该文件夹（及其子文件夹）中的文件。这是一个很好的特性，因为它意味着你可以为项目设置特定的配置，覆盖全局设置。
- en: Using Tabs and Spaces
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用制表符和空格
- en: If you use a mix of tabs and spaces in your code, it can cause problems in your
    programs that are difficult to diagnose. When working in a *.py* file with the
    Python extension installed, VS Code is configured to insert four spaces whenever
    you press the TAB key. If you’re writing only your own code and you have the Python
    extension installed, you’ll likely never have an issue with tabs and spaces.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码中混合使用了制表符和空格，这可能会导致程序出现难以诊断的问题。当你在安装了 Python 扩展的 *.py* 文件中工作时，VS Code
    会配置为每次按下 TAB 键时插入四个空格。如果你只写自己的代码，并且安装了 Python 扩展，你可能永远不会遇到制表符和空格的问题。
- en: However, your installation of VS Code may not be configured correctly. Also,
    at some point, you may end up working on a file that has only tabs or a mix of
    tabs and spaces. If you suspect any issue with tabs and spaces, look at the status
    bar at the bottom of the VS Code window and click either **Spaces** or **Tab Size**.
    A drop-down menu will appear that lets you switch between using tabs and using
    spaces. You can also change the default indentation level and convert all indentation
    in the file to either tabs or spaces.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你的 VS Code 安装可能没有正确配置。而且，在某些时候，你可能会遇到一个只有制表符或制表符与空格混合使用的文件。如果你怀疑有关于制表符和空格的问题，请查看
    VS Code 窗口底部的状态栏，点击 **空格** 或 **制表符大小**。下拉菜单将出现，允许你在使用制表符和使用空格之间切换。你还可以更改默认缩进级别，并将文件中的所有缩进转换为制表符或空格。
- en: If you’re looking at some code and you’re not sure whether the indentation consists
    of tabs or spaces, highlight several lines of code. This will make the invisible
    whitespace characters visible. Each space will show up as a dot, and each tab
    will show up as an arrow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在查看一些代码，不确定缩进是由制表符还是空格组成，可以高亮显示几行代码。这会使不可见的空白字符变得可见。每个空格将显示为一个点，每个制表符将显示为一个箭头。
- en: Changing the Color Theme
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改颜色主题
- en: VS Code uses a dark theme by default. If you want to change this, click **File**
    (**Code** in the menu bar on macOS), then click **Preferences** and choose **Color
    Theme**. A drop-down list will appear, and it will let you choose a theme that
    works well for you.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，VS Code 使用暗色主题。如果你想更改它，请点击 **文件**（在 macOS 上是 **Code** 菜单），然后点击 **首选项**，选择
    **颜色主题**。会出现一个下拉列表，允许你选择一个适合你的主题。
- en: Setting the Line Length Indicator
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置行长度指示器
- en: Most editors allow you to set up a visual cue, usually a vertical line, to show
    where your lines should end. In the Python community, the convention is to limit
    lines to 79 characters or less.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编辑器允许你设置一个视觉提示，通常是垂直线，来显示行的结束位置。在 Python 社区中，约定是将每行限制为 79 个字符或更少。
- en: 'To set this feature, click **Code** and then **Preferences**, and then choose
    **Settings**. In the dialog that appears, enter `rulers`. You’ll see a setting
    for Editor: Rulers; click the link labeled *Edit in settings.json*. In the file
    that appears, add the following to the `editor.rulers` setting:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '要设置此功能，请点击**代码**，然后点击**首选项**，接着选择**设置**。在弹出的对话框中，输入`rulers`。你将看到一个名为“Editor:
    Rulers”的设置；点击标记为*在 settings.json 中编辑*的链接。在弹出的文件中，向 `editor.rulers` 设置中添加以下内容：'
- en: '**settings.json**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.json**'
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will add a vertical line in the editing window at the 80-character position.
    You can have more than one vertical line; for example, if you want an additional
    line at 120 characters, the value for your setting would be `[80, 120]`. If you
    don’t see the vertical lines, make sure you saved the settings file; you may also
    need to quit and reopen VS Code for the changes to take effect on some systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在编辑窗口的80个字符位置添加一条垂直线。你可以设置多个垂直线；例如，如果你想在120个字符的位置添加一条线，你的设置值将是`[80, 120]`。如果你没有看到垂直线，请确保你已保存设置文件；在某些系统上，可能需要退出并重新打开VS
    Code才能使更改生效。
- en: Simplifying the Output
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简化输出
- en: By default, VS Code shows the output of your programs in an embedded terminal
    window. This output includes the commands that are being used to run the file.
    For many situations, this is ideal, but it might be more distracting than you
    want when you’re first learning Python.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，VS Code会在嵌入式终端窗口中显示你的程序输出。该输出包含用于运行文件的命令。对于许多情况，这是理想的，但当你刚开始学习Python时，可能会比你想要的更分散注意力。
- en: To simplify the output, close all the tabs that are open in VS Code and then
    quit VS Code. Launch VS Code again and open the folder that contains the Python
    files you’re working on; this could just be the *python_work* folder where *hello_world.py*
    is saved.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化输出，关闭所有在VS Code中打开的标签页，然后退出VS Code。重新启动VS Code，并打开包含你正在处理的Python文件的文件夹；这可以是保存*hello_world.py*的*python_work*文件夹。
- en: 'Click the Run/Debug icon (which looks like a triangle with a small bug), and
    then click **Create a** ***launch.json*** **File**. Select the Python options
    in the prompts that appear. In the *launch.json* file that opens, make the following
    change:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 点击运行/调试图标（像一个带小虫子的三角形），然后点击**创建一个** ***launch.json*** **文件**。在弹出的提示中选择Python选项。在打开的*launch.json*文件中，进行以下更改：
- en: '**launch.json**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**launch.json**'
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we’re changing the `console` setting from `integratedTerminal` to `internalConsole`.
    After saving the settings file, open a *.py* file such as *hello_world.py*, and
    run it by pressing CTRL-F5\. In the output pane of VS Code, click **Debug Console**
    if it’s not already selected. You should see only your program’s output, and the
    output should be refreshed every time you run a program.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`console`设置从`integratedTerminal`更改为`internalConsole`。保存设置文件后，打开一个*.py*文件，例如*hello_world.py*，然后按CTRL-F5运行它。在VS
    Code的输出窗格中，如果没有选中，请点击**调试控制台**。你应该只看到程序的输出，并且每次运行程序时输出都会刷新。
- en: Exploring Further Customizations
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进一步探索自定义设置
- en: You can customize VS Code in many ways to help you work more efficiently. To
    start exploring the customizations available, click **Code** and then **Preferences**,
    and then choose **Settings**. You’ll see a list titled Commonly Used; click any
    of the subheadings to see some common ways you can modify your installation of
    VS Code. Take some time to see if there are any that make VS Code work better
    for you, but don’t get so lost in configuring your editor that you put off learning
    how to use Python!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式自定义VS Code，以帮助你更高效地工作。要开始探索可用的自定义选项，请点击**代码**，然后点击**首选项**，接着选择**设置**。你将看到一个名为“常用”的列表；点击任何子标题，查看一些常见的方式，修改你安装的VS
    Code。花些时间查看是否有任何设置可以让VS Code更好地为你工作，但不要在配置编辑器时迷失，耽误了学习如何使用Python！
- en: VS Code Shortcuts
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VS Code快捷键
- en: All editors and IDEs offer efficient ways to do common tasks that everyone needs
    to do when writing and maintaining code. For example, you can easily indent a
    single line of code or an entire block of code; you can just as easily move a
    block of lines up or down in a file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编辑器和集成开发环境（IDE）都提供了高效的方式来完成每个人在编写和维护代码时需要做的常见任务。例如，你可以轻松缩进单行代码或整块代码；你也可以同样轻松地将代码块上下移动。
- en: There are too many shortcuts to describe fully here. This section will share
    just a few that you’ll likely find helpful as you’re writing your first Python
    files. If you end up using a different editor than VS Code, make sure you learn
    how to do these same tasks efficiently in the editor you’ve chosen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有太多快捷键无法一一描述。本节将分享一些在编写第一个 Python 文件时，你可能会发现有用的快捷键。如果你使用与 VS Code 不同的编辑器，确保学习如何在你选择的编辑器中高效地完成这些相同的任务。
- en: Indenting and Unindenting Code Blocks
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缩进和取消缩进代码块
- en: To indent an entire block of code, highlight it and press CTRL-], or ⌘-] on
    macOS. To unindent a block of code, highlight it and press CTRL-[, or ⌘-[ on macOS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要缩进整个代码块，选中它并按 CTRL-]，或 macOS 上的 ⌘-]。要取消缩进一个代码块，选中它并按 CTRL-[，或 macOS 上的 ⌘-[。
- en: Commenting Out Blocks of Code
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注释掉代码块
- en: To temporarily disable a block of code, you can highlight the block and comment
    it so Python will ignore it. Highlight the section of code you want to ignore
    and press CTRL-/, or ⌘-/ on macOS. The selected lines will be commented out with
    a hash mark (`#`) indented at the same level as the line of code, to indicate
    these are not regular comments. When you want to uncomment the block of code,
    highlight the block and reissue the same command.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要暂时禁用一块代码，你可以选中该代码块并注释掉它，这样 Python 就会忽略它。选中你想忽略的代码部分并按 CTRL-/，或 macOS 上的 ⌘-/。所选行将会被注释掉，并且以
    `#` 号标记缩进到与代码行相同的层级，以表示这些不是普通的注释。当你想取消注释代码块时，选中代码块并重新执行相同的命令。
- en: Moving Lines Up or Down
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 上下移动行
- en: As your programs grow more complex, you may find that you want to move a block
    of code up or down within a file. To do so, highlight the code you want to move
    and press ALT-up arrow, or Option-up arrow on macOS. The same key combination
    with the down arrow will move the block down in the file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序变得越来越复杂，你可能会发现需要在文件中上下移动代码块。为此，选中你想要移动的代码并按 ALT-上箭头，或 macOS 上的 Option-上箭头。按相同的键组合并配合下箭头，可以将代码块向下移动。
- en: If you’re moving a single line up or down, you can click anywhere in that line;
    you don’t need to highlight the whole line to move it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想上下移动一行，可以点击该行的任意位置；不需要高亮整个行就能移动它。
- en: Hiding the File Explorer
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 隐藏文件资源管理器
- en: The integrated file explorer in VS Code is really convenient. However, it can
    be distracting when you’re writing code and can take up valuable space on a smaller
    screen. The command CTRL-B, or ⌘-B on macOS, toggles the visibility of the file
    explorer pane.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 中集成的文件资源管理器非常方便。然而，当你编写代码时，它可能会让你分心，并且在较小的屏幕上可能占用宝贵的空间。命令 CTRL-B 或 macOS
    上的 ⌘-B 可以切换文件资源管理器面板的可见性。
- en: Finding Additional Shortcuts
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找其他快捷键
- en: Working efficiently in an editing environment takes practice, but it also takes
    intention. When you’re learning to work with code, try to notice the things you
    do repeatedly. Any action you take in your editor likely has a shortcut; if you’re
    clicking menu items to carry out editing tasks, look for the shortcuts for those
    actions. If you’re switching between your keyboard and mouse frequently, look
    for the navigation shortcuts that keep you from reaching for your mouse so often.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑环境中高效工作需要练习，但同样也需要有意识。当你学习编写代码时，试着注意自己重复做的事情。你在编辑器中执行的任何操作很可能都有快捷键；如果你通过点击菜单项来执行编辑任务，寻找这些操作的快捷键。如果你经常在键盘和鼠标之间切换，找一些可以减少频繁拿起鼠标的导航快捷键。
- en: You can see all the keyboard shortcuts in VS Code by clicking **Code** and then
    **Preferences**, and then choosing **Keyboard** **Shortcuts**. You can use the
    search bar to find a particular shortcut, or you can scroll through the list to
    find shortcuts that might help you work more efficiently.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击 **Code** 然后选择 **Preferences**，再选择 **Keyboard** **Shortcuts** 来查看 VS
    Code 中所有的键盘快捷键。你可以使用搜索框来查找特定的快捷键，或者可以滚动浏览列表，找到能帮助你提高工作效率的快捷键。
- en: Remember, it’s better to focus on the code that you’re working on, and avoid
    spending too much time on the tools you’re using.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，专注于你正在编写的代码比花太多时间在你使用的工具上更为重要。
- en: Other Text Editors and IDEs
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他文本编辑器和 IDE
- en: You’ll hear about and see people using a number of other text editors. Most
    of them can be configured to help you in the same way you’ve customized VS Code.
    Here’s a small selection of text editors you might hear about.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你会听到并看到一些人使用其他文本编辑器。大多数编辑器可以像你自定义 VS Code 一样进行配置，以帮助你完成任务。这里有一些你可能会听到的文本编辑器。
- en: IDLE
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDLE
- en: '*IDLE* is a text editor that’s included with Python. It’s a little less intuitive
    to work with than other, more modern editors. However, you’ll see references to
    it in other tutorials aimed at beginners, so you might want to give it a try.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*IDLE* 是随 Python 附带的文本编辑器。与其他更现代的编辑器相比，它的操作稍显不直观。然而，你会在其他针对初学者的教程中看到它的引用，所以你可能想试试看。'
- en: Geany
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Geany
- en: '*Geany* is a simple text editor that displays all of your output in a separate
    terminal window, which helps you become comfortable using terminals. Geany has
    a very minimalist interface, but it’s powerful enough that a significant number
    of experienced programmers still use it.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*Geany* 是一个简单的文本编辑器，它将在一个单独的终端窗口中显示所有输出，帮助你习惯使用终端。Geany 拥有非常简洁的界面，但它足够强大，许多经验丰富的程序员仍然在使用它。'
- en: If you find VS Code too distracting and full of too many features, consider
    using Geany instead.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得 VS Code 太分散注意力、功能过多，可以考虑改用 Geany。
- en: Sublime Text
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sublime Text
- en: '*Sublime Text* is another minimalist editor that you should consider using
    if you find VS Code too busy. Sublime Text has a really clean interface and is
    known for working well even on very large files. It’s an editor that will get
    out of your way and let you focus on the code you’re writing.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*Sublime Text* 是另一个极简主义的编辑器，如果你觉得 VS Code 功能太多，太复杂，可以考虑使用 Sublime Text。Sublime
    Text 拥有非常简洁的界面，并且以即使在处理非常大的文件时也能运行良好而闻名。它是一个不会干扰你、让你专注于编写代码的编辑器。'
- en: Sublime Text has an unlimited free trial, but it’s not free or open source.
    If you decide you like it and can afford to purchase a full license, you should
    do so. The purchase is a one-time fee; it’s not a software subscription.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text 提供无限期的免费试用，但它并不是免费的，也不是开源的。如果你决定喜欢它并且能够负担得起购买完整版许可，你应该这么做。购买是一次性费用；并不是软件订阅。
- en: Emacs and Vim
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Emacs 和 Vim
- en: '*Emacs* and *Vim* are two popular editors favored by many experienced programmers,
    because they’re designed so you can use them without your hands ever having to
    leave the keyboard. This makes writing, reading, and modifying code very efficient,
    once you learn how the editor works. It also means both editors have a fairly
    steep learning curve. Vim is included on most Linux and macOS machines, and both
    Emacs and Vim can be run entirely inside a terminal. For this reason, they’re
    often used to write code on servers through remote terminal sessions.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*Emacs* 和 *Vim* 是许多有经验的程序员偏好的两款编辑器，因为它们的设计可以让你在不离开键盘的情况下使用它们。这使得编写、阅读和修改代码非常高效，一旦你学会了如何使用这些编辑器。也正因为如此，这两个编辑器的学习曲线都比较陡峭。Vim
    已经预装在大多数 Linux 和 macOS 机器上，Emacs 和 Vim 都可以完全在终端中运行。因此，它们经常被用来通过远程终端会话在服务器上编写代码。'
- en: Programmers will often recommend that you give them a try, but many proficient
    programmers forget how much new programmers are already trying to learn. It’s
    good to be aware of these editors, but you should hold off on using them until
    you’re comfortable working with code in a more user-friendly editor that lets
    you focus on learning to program, rather than learning to use an editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员们通常会推荐你尝试一下它，但许多熟练的程序员忘记了新手程序员已经在努力学习的内容。了解这些编辑器是好的，但在你能在一个更具用户友好的编辑器中舒适地处理代码之前，你应该暂时避免使用它们，专注于学习编程，而不是学习如何使用编辑器。
- en: PyCharm
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCharm
- en: '*PyCharm* is a popular IDE among Python programmers because it was built to
    work specifically with Python. The full version requires a paid subscription,
    but a free version called the PyCharm Community Edition is also available, and
    many developers find it useful.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*PyCharm* 是 Python 程序员中流行的集成开发环境（IDE），因为它是专门为 Python 设计的。完整版需要付费订阅，但也有一个免费的
    PyCharm Community Edition 版本可供使用，许多开发者觉得它非常实用。'
- en: If you try PyCharm, be aware that, by default, it sets up an isolated environment
    for each of your projects. This is usually a good thing, but it can lead to unexpected
    behavior if you don’t understand what it’s doing for you.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试使用 PyCharm，请注意，默认情况下，它为你的每个项目设置了一个隔离的环境。这通常是好事，但如果你不了解它为你做了什么，可能会导致意外的行为。
- en: Jupyter Notebooks
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jupyter Notebooks
- en: '*Jupyter Notebook* is a different kind of tool than traditional text editors
    or IDEs, in that it’s a web app primarily built of blocks; each block is either
    a code block or a text block. The text blocks are rendered in Markdown, so you
    can include simple formatting in your text blocks.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jupyter Notebook* 是一种不同于传统文本编辑器或集成开发环境（IDE）的工具，它是一个主要由代码块和文本块组成的 Web 应用。文本块以
    Markdown 渲染，因此你可以在文本块中使用简单的格式化。'
- en: Jupyter Notebooks were developed to support the use of Python in scientific
    applications, but they have since expanded to become useful in a wide variety
    of situations. Rather than just writing comments inside a *.py* file, you can
    write clear text with simple formatting, such as headers, bulleted lists, and
    hyperlinks in between sections of code. Every code block can be run independently,
    allowing you to test small pieces of your program, or you can run all the code
    blocks at once. Each code block has its own output area, and you can toggle the
    output areas on or off as needed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 是为了支持 Python 在科学应用中的使用而开发的，但它们后来扩展到在各种场景中都非常有用。与其在 *.py* 文件中仅仅写注释，你还可以在代码段之间写清晰的文本，并使用简单的格式化，例如标题、项目符号列表和超链接。每个代码块都可以独立运行，允许你测试程序中的小部分，或者一次性运行所有代码块。每个代码块都有自己的输出区域，你可以根据需要切换输出区域的显示与否。
- en: Jupyter Notebooks can be confusing at times because of the interactions between
    different cells. If you define a function in one cell, that function is available
    to other cells as well. This is beneficial most of the time, but it can be confusing
    in longer notebooks and if you don’t fully understand how the Notebook environment
    works.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 有时会让人困惑，因为不同单元格之间的交互。如果你在一个单元格中定义了一个函数，那么这个函数在其他单元格中也可以使用。这大多数情况下是有益的，但在较长的笔记本中，或者当你没有完全理解
    Notebook 环境是如何工作的时，它可能会让人感到困惑。
- en: If you’re doing any scientific or data-focused work in Python, you’ll almost
    certainly see Jupyter Notebooks at some point.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从事任何科学或数据分析相关的 Python 工作，你几乎肯定会在某个时候接触到 Jupyter Notebook。
