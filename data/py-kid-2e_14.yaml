- en: '12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '12'
- en: 'Finishing Your First Game: Bounce!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 完成你的第一个游戏：Bounce！
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: In the previous chapter, we got started building our first game, *Bounce*!,
    by creating a canvas and adding a bouncing ball to our code. Right now, our ball
    will bounce around the screen forever, which doesn’t make for much of a game.
    In this chapter, we’ll add a paddle for the player to use. We’ll also add an element
    of chance to the game, which will make it more challenging and fun to play.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开始构建我们的第一个游戏*Bounce*！通过创建画布并将一个弹跳球添加到我们的代码中。目前，我们的球会永远在屏幕上弹跳，这并不能算是一个有趣的游戏。在这一章中，我们将为玩家添加一个挡板。我们还会给游戏加入一些随机元素，让它更具挑战性和趣味性。
- en: Adding the Paddle
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加挡板
- en: There’s not much fun to be had with a bouncing ball when there’s nothing to
    hit it with. So let’s create a paddle!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有东西能击打弹跳球，那就没有什么乐趣可言了。所以，让我们创建一个挡板吧！
- en: 'We begin by adding the following code directly after the Ball class to create
    a paddle (you’ll put this in a new line below the ball’s draw function):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在Ball类后面直接添加以下代码来创建一个挡板（你需要将其放在球的draw函数下方的一行）：
- en: '![Image](Images/f0186-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0186-01.jpg)'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This added code is almost exactly the same as what we did with our first version
    of the Ball class, except that we call create_rectangle (rather than create_oval)
    and we move the rectangle to position 200, 300 (200 pixels across and 300 pixels
    down).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这段新增的代码几乎与我们为Ball类编写的第一版代码完全相同，唯一的区别是我们调用的是create_rectangle（而不是create_oval），并将矩形移动到位置200,
    300（水平200像素，垂直300像素）。
- en: 'Next, at the bottom of your code listing, create an object of the Paddle class,
    and then change the main loop to call the paddle’s draw function, as shown here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在代码列表的底部创建一个Paddle类的对象，然后更改主循环以调用挡板的draw函数，如下所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Changes can be seen at ➊ and ➋. If you run the game now, you should see the
    bouncing ball and a stationary rectangular paddle ([Figure 12-1](ch12.xhtml#ch12fig01)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 更改可以在➊和➋看到。如果你现在运行游戏，你应该会看到弹跳球和一个静止的矩形挡板（[图12-1](ch12.xhtml#ch12fig01)）。
- en: '![Image](Images/12fig01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/12fig01.jpg)'
- en: '*Figure 12-1: Ball and paddle*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-1：球和挡板*'
- en: Making the Paddle Move
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让挡板移动
- en: To make the paddle move left and right, we’ll use event bindings to bind the
    *left* and *right* arrow keys to new functions in the Paddle class. When the player
    presses the left arrow key, the x variable will be set to −2 (to move left). Pressing
    the right arrow key sets the x variable to 2 (to move right).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让挡板左右移动，我们将使用事件绑定，将*左*箭头和*右*箭头键分别绑定到Paddle类中的新函数。当玩家按下左箭头键时，x变量将被设置为−2（向左移动）。按下右箭头键时，x变量将被设置为2（向右移动）。
- en: '![Image](Images/f0187-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0187-01.jpg)'
- en: 'The first step is to add the x object variable to the __init__ function of
    our Paddle class, as well as a variable for the canvas width, as we did with the
    Ball class:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将x对象变量添加到Paddle类的__init__函数中，并像在Ball类中那样添加一个画布宽度的变量：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'See ➊ and ➋ for changes. Now we’ll add the functions for changing the direction
    between left (turn_left) and right (turn_right) just after the draw function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见➊和➋了解更改。现在我们将在draw函数之后添加用于改变方向的函数，分别是左转（turn_left）和右转（turn_right）：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can bind these functions to the correct key in the __init__ function of
    the class with these two lines. We used binding in “Making an Object React to
    Something” on [page 162](ch10.xhtml#ch10lev1sec13) to make Python call a function
    when a key is pressed. In this case, we bind the turn_left function of our Paddle
    class to the left arrow key, using the event name <KeyPress-Left>. We then bind
    the turn_right function to the right arrow key, using the event name <KeyPress-Right>.
    Our __init__ function now looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这两行代码在类的__init__函数中将这些函数绑定到正确的键位。在[第162页](ch10.xhtml#ch10lev1sec13)的“让对象对某些事情作出反应”部分，我们使用了绑定方法使Python在按下某个键时调用函数。在这种情况下，我们将Paddle类的turn_left函数绑定到左箭头键，使用事件名称<KeyPress-Left>。然后我们将turn_right函数绑定到右箭头键，使用事件名称<KeyPress-Right>。我们的__init__函数现在看起来是这样的：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'See ➊ and ➋ for the changes. The draw function for the Paddle class is similar
    to that for the Ball class:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见➊和➋了解更改。Paddle类的draw函数与Ball类的draw函数类似：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We use the canvas’s move function to move the paddle in the direction of the
    x variable with self.canvas.move(self.id, self.x, 0). Then we get the paddle’s
    coordinates to see if it has hit the left or right side of the screen, using the
    value in pos. Rather than bouncing like the ball, the paddle should stop moving.
    So, when the left *x* coordinate (pos[0]) is less than or equal to 0 (<= 0), we
    set the x variable to 0 with self.x = 0. In the same way, when the right *x* coordinate
    (pos[2]) is greater than or equal to the canvas width (>= self.canvas_width),
    we also set the x variable to 0.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用画布的move函数通过self.canvas.move(self.id, self.x, 0)将球拍移动到x变量的方向。然后，我们获取球拍的坐标，查看它是否碰到屏幕的左侧或右侧，使用pos中的值。与球弹跳不同，球拍应该停止移动。因此，当左侧的*x*坐标(pos[0])小于或等于0(<=
    0)时，我们将x变量设置为0，使用self.x = 0。同样地，当右侧的*x*坐标(pos[2])大于或等于画布宽度(>= self.canvas_width)时，我们也将x变量设置为0。
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*If you run the program now, you may need to click the canvas before the game
    will recognize the left and right arrow key actions. Clicking the canvas gives
    the canvas focus, which means it knows to take charge when someone presses a key
    on the keyboard.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你现在运行程序，可能需要点击画布，才能让游戏识别左右箭头键的操作。点击画布会使画布获得焦点，这意味着它知道在有人按下键盘时应该接管控制。*'
- en: Finding Out When the Ball Hits the Paddle
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找球何时碰到球拍
- en: At this point in our code, the ball won’t hit the paddle. In fact, the ball
    will fly straight through the paddle. The ball needs to know when it has hit the
    paddle, just as it needs to know when it’s hit a wall.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们代码的这一部分，球不会碰到球拍。实际上，球会直接穿过球拍。球需要知道何时碰到球拍，就像它需要知道何时碰到墙壁一样。
- en: '![Image](Images/f0189-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0189-01.jpg)'
- en: We could solve this problem by adding code to the draw function (where we have
    code that checks for walls), but it’s a better idea to move this code into new
    functions to break things into smaller chunks. If we put too much code in one
    place (inside one function, for example), we can make the code much more difficult
    to understand. Let’s make the necessary changes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在绘制函数中添加代码来解决这个问题（在该函数中，我们已有检查墙壁的代码），但更好的做法是将这些代码移到新的函数中，把事情拆分成更小的部分。如果我们把太多代码放在一个地方（例如在一个函数内部），就会使代码变得更难理解。让我们进行必要的更改。
- en: 'First, we change the ball’s __init__ function so we can pass in the paddle
    object as a parameter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们修改球的__init__函数，以便可以将球拍对象作为参数传递：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that we change the parameters of __init__ to include the paddle ➊. Then,
    we assign the paddle parameter to the object variable paddle ➋.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们改变了__init__函数的参数，加入了球拍 ➊。然后，我们将球拍参数赋值给对象变量paddle ➋。
- en: 'Having saved the paddle object, we need to change the code where we create
    the ball object. This change is at the bottom of our program, just before the
    main while loop:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 保存了球拍对象后，我们需要更改创建球对象的代码。这个更改位于程序的底部，就在主while循环之前：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To see if the ball has struck the paddle, we need code that’s a little more
    complicated than the previously added code to check for walls. We’ll name this
    function hit_paddle and call it in the draw function of the Ball class, where
    we check to see if the ball has hit the bottom of the screen:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要判断球是否碰到球拍，我们需要一些比之前添加的检查墙壁的代码更复杂的代码。我们将这个函数命名为hit_paddle，并在Ball类的绘制函数中调用它，那里我们检查球是否碰到屏幕底部：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the newly added code, if hit_paddle returns True ➊, we change the direction
    of the ball by setting the y object variable to its value multiplied by –1 ➋ (the
    same as when it hits the top or bottom of the canvas). With this code, we’re basically
    saying, “If the ball (self) has hit the paddle, then we reverse its vertical direction.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在新添加的代码中，如果hit_paddle返回True ➊，我们通过将y对象变量设置为其值乘以-1 ➋（与球碰到画布顶部或底部时一样）来改变球的方向。通过这段代码，我们基本上是在说：“如果球(self)碰到球拍，那么我们就反转它的垂直方向。”
- en: We could combine the top, bottom, and paddle checks into one if-statement—but
    it’s easier for new programmers to read this code if we keep them separate.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将顶部、底部和球拍的检查合并到一个if语句中——但如果我们将它们分开，新的程序员会更容易理解这段代码。
- en: 'Don’t try to run the game yet; we still need to create the hit_paddle function.
    Let’s do that now. Add the hit_paddle function just before the draw function in
    the Ball class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还不要尝试运行游戏；我们还需要创建hit_paddle函数。让我们现在就做这个。在Ball类的绘制函数前面添加hit_paddle函数：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First, we define the function with the pos parameter. This parameter contains
    the ball’s current coordinates. Then, we get the paddle’s coordinates and store
    them in the paddle_pos variable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个带有 pos 参数的函数。这个参数包含球的当前坐标。然后，我们获取挡板的坐标，并将其存储在 paddle_pos 变量中。
- en: Next, we have the first part of our if-then statement, which says, “If the right
    side of the ball is greater than the left side of the paddle, and the left side
    of the ball is less than the right side of the paddle. . .” Here, pos[2] contains
    the *x* coordinate for the ball’s right side, and pos[0] contains the *x* coordinate
    for its left side. The variable paddle_pos[0] contains the *x* coordinate for
    the paddle’s left side, and paddle_pos[2] contains its *x* coordinate for the
    right side. [Figure 12-2](ch12.xhtml#ch12fig02) shows how these coordinates look
    when the ball is about to hit the paddle.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有了 if-then 语句的第一部分，它表示：“如果球的右侧大于挡板的左侧，并且球的左侧小于挡板的右侧……”在这里，pos[2] 包含球的右侧的
    *x* 坐标，pos[0] 包含球的左侧的 *x* 坐标。变量 paddle_pos[0] 包含挡板左侧的 *x* 坐标，paddle_pos[2] 包含挡板右侧的
    *x* 坐标。[图 12-2](ch12.xhtml#ch12fig02) 显示了球即将击中挡板时这些坐标的样子。
- en: '![Image](Images/12fig02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/12fig02.jpg)'
- en: '*Figure 12-2: Ball about to hit the paddle—showing horizontal coordinates*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-2：球即将击中挡板—显示水平坐标*'
- en: The ball is falling toward the paddle, but in this case, you see that the right
    side of the ball (pos[2]) hasn’t yet crossed over the left side of the paddle
    (that’s paddle_pos[0]).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 球正在朝着挡板下落，但在这种情况下，您可以看到球的右侧 (pos[2]) 还没有越过挡板的左侧 (那就是 paddle_pos[0])。
- en: Next, we see if the bottom of the ball (pos[3]) is between the paddle’s top
    (paddle_pos[1]) and bottom (paddle_pos[3]). In [Figure 12-3](ch12.xhtml#ch12fig03),
    you can see that the bottom of the ball (pos[3]) has yet to hit the top of the
    paddle (paddle_pos[1]).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查球的底部 (pos[3]) 是否在挡板的顶部 (paddle_pos[1]) 和底部 (paddle_pos[3]) 之间。在[图 12-3](ch12.xhtml#ch12fig03)中，您可以看到球的底部
    (pos[3]) 还没有击中挡板的顶部 (paddle_pos[1])。
- en: '![Image](Images/12fig03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/12fig03.jpg)'
- en: '*Figure 12-3: Ball about to hit the paddle—showing vertical coordinates*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-3：球即将击中挡板—显示垂直坐标*'
- en: So, based on the current position of the ball, the hit_paddle function would
    return False.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基于当前球的位置，hit_paddle 函数会返回 False。
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*Why do we need to see if the bottom of the ball is between the top and bottom
    of the paddle? Why not just see if the bottom of the ball has hit the top of the
    paddle? Because each time we move the ball across the canvas, we move in 3-pixel
    jumps. If we just checked to see if the ball had reached the top of the paddle
    (pos[1]), we might have jumped past that position. In that case, the ball would
    continue traveling and would pass through the paddle without stopping.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么我们需要检查球的底部是否在挡板的上下边缘之间？为什么不直接检查球的底部是否击中了挡板的顶部？因为每次我们在画布上移动球时，都会以 3 像素为单位跳跃。如果我们只检查球是否到达挡板的顶部（pos[1]），可能会跳过该位置。这样，球会继续移动，并会穿过挡板而停不下来。*'
- en: Adding an Element of Chance
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个随机因素
- en: Now it’s time to turn our program into a game rather than just a bouncing ball
    and a paddle. Games need an *element of chance*, or a way for the player to lose.
    In our current game, the ball will bounce forever, so there’s nothing to lose.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们的程序变成一个游戏，而不仅仅是一个弹跳的球和一个挡板。游戏需要一个*随机因素*，或者一种让玩家失去的方式。在我们当前的游戏中，球会永远弹跳，因此没有任何东西可以失去。
- en: '![Image](Images/f0192-01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0192-01.jpg)'
- en: We’ll finish our game by adding code that says that the game ends if the ball
    hits the bottom of the canvas (in other words, once it hits the ground).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加代码来完成游戏，使得当球击中画布底部时游戏结束（换句话说，一旦球触地）。
- en: 'First, we add the hit_bottom object variable to the bottom of the Ball class’s
    __init__ function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将 hit_bottom 对象变量添加到 Ball 类的 __init__ 函数的底部：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we change the main loop at the bottom of the program, like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们更改程序底部的主循环，如下所示：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now the loop keeps checking hit_bottom ➊ to see if the ball has indeed hit the
    bottom of the screen. The code should continue moving the ball and paddle only
    if the ball hasn’t touched the bottom, as you can see in the preceding if statement.
    The game ends when the ball and paddle stop moving. (We no longer animate them.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，循环不断检查 hit_bottom ➊，以查看球是否已经碰到屏幕底部。只有当球没有碰到底部时，代码才会继续移动球和挡板，正如前面的 if 语句所示。游戏在球和挡板停止移动时结束。（我们不再对它们进行动画处理。）
- en: 'The final change is to the draw function of the Ball class:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的修改是对Ball类的draw函数进行的：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We altered the if statement to see if the ball has hit the bottom of the screen
    (that is, if the ball’s position is greater than or equal to canvas_height) ➊.
    If so, in the following line, we set hit_bottom to True, rather than changing
    the value of the y variable, because there’s no need to bounce the ball once it
    hits the bottom of the screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了if语句，检查球是否击中屏幕底部（即，球的位置是否大于或等于canvas_height） ➊。如果是这样，在接下来的行中，我们将hit_bottom设置为True，而不是改变y变量的值，因为一旦球击中屏幕底部，就不需要让球反弹了。
- en: When you run the game now and miss hitting the ball with the paddle, all movement
    on your screen should stop. The game should end once the ball touches the bottom
    of the canvas, as shown in [Figure 12-4](ch12.xhtml#ch12fig04).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行游戏，当你未能用球拍击中球时，屏幕上的所有动作应该停止。当球触及画布底部时，游戏应该结束，如[图 12-4](ch12.xhtml#ch12fig04)所示。
- en: '![Image](Images/12fig04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/12fig04.jpg)'
- en: '*Figure 12-4: Ball hitting the bottom of the screen*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-4：球击中屏幕底部*'
- en: 'Your program should now look like the following code. If you have trouble getting
    your game to work, check what you’ve entered against this code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序现在应该看起来像下面的代码。如果你在让游戏运行时遇到问题，请检查你的输入是否与这段代码一致：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What You Learned
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, we finished creating our first game using the tkinter module.
    We created classes for the paddle used in our game, and used coordinates to check
    when the ball hits the paddle or the walls of our game canvas. We used event bindings
    to bind the left and right arrow keys to the movement of the paddle, and used
    a main loop to call the draw function, to animate it. Finally, we changed our
    code to add an element of chance, so that when the player misses the ball and
    it hits the bottom of the canvas, the game is over.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们完成了使用tkinter模块创建我们的第一个游戏。我们为游戏中的球拍创建了类，并使用坐标来检查球何时击中球拍或游戏画布的墙壁。我们使用事件绑定将左右箭头键绑定到球拍的移动，并使用主循环调用draw函数来进行动画。最后，我们修改了代码，添加了一个随机元素，使得当玩家未能击中球并且球触及画布底部时，游戏结束。
- en: '![Image](Images/f0196-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0196-01.jpg)'
- en: Programming Puzzles
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程难题
- en: At the moment, our game is pretty simple. You could change a lot to create a
    more interesting game. Try enhancing your code in the following ways, and then
    compare your answers with the solutions at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的游戏相当简单。你可以做很多修改来创建一个更有趣的游戏。尝试通过以下方式改进你的代码，然后将你的答案与* [http://python-for-kids.com](http://python-for-kids.com)*上的解决方案进行比较。
- en: '#1: Delay the Game Start'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1：延迟游戏开始'
- en: Our game starts quickly, and you need to click the canvas before it will recognize
    pressing the left and right arrow keys on your keyboard. Can you add a delay to
    the start of the game in order to give the player enough time to click the canvas?
    Or even better, can you add an event binding for a mouse click, which starts the
    game only then?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏启动很快，你需要点击画布才能让它识别键盘上的左右箭头键。你能否在游戏开始时添加延迟，以便给玩家足够的时间点击画布？或者更好的是，你能否添加鼠标点击的事件绑定，只有在点击时才开始游戏？
- en: 'Hint 1: You’ve already added event bindings to the Paddle class, so that might
    be a good place to start.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 1：你已经为Paddle类添加了事件绑定，所以可以从那里开始。
- en: 'Hint 2: The event binding for the left mouse button is the string ’<Button-1>’.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 2：左键鼠标的事件绑定是字符串’<Button-1>’。
- en: '#2: A Proper “Game Over”'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2：一个合适的“游戏结束”'
- en: Everything freezes when the game ends, which isn’t very player-friendly. Try
    adding the text “Game Over” when the ball hits the bottom of the screen. You can
    use the create_text function, but you might also find the named parameter state
    useful (it takes values such as normal and hidden). Have a look at itemconfig
    in “More Ways to Use the Identifier” on [page 165](ch10.xhtml#ch10lev1sec14).
    As an additional challenge, add a delay so that the text doesn’t appear right
    away.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏结束时一切冻结，这对玩家来说不太友好。当球触及画布底部时，尝试添加“游戏结束”文字。你可以使用create_text函数，但你可能也会发现命名参数state很有用（它的取值包括normal和hidden）。请查看[第165页](ch10.xhtml#ch10lev1sec14)的“更多使用标识符的方法”中的itemconfig。作为额外挑战，添加一个延迟，这样文字就不会立刻出现。
- en: '#3: Accelerate the Ball'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3：加速球'
- en: In tennis, when a ball hits your racket, it sometimes flies away faster than
    the speed at which it arrived, depending on how hard you swing. The ball in our
    game goes at the same speed, whether or not the paddle is moving. Try changing
    the program so that the paddle’s speed is passed on to the speed of the ball.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在网球中，当球击中你的球拍时，球有时会比到达时的速度飞得更快，这取决于你挥拍的力度。在我们的游戏中，无论球拍是否在移动，球的速度都是相同的。尝试修改程序，使得球拍的速度传递给球的速度。
- en: '#4: Record the Player’s Score'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4: 记录玩家的得分'
- en: How about recording the score? Every time the ball hits the paddle, the score
    should increase. Try displaying the score at the top-right corner of the canvas.
    You might want to look back at itemconfig in “More Ways to Use the Identifier”
    on [page 165](ch10.xhtml#ch10lev1sec14) for a hint.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何记录得分呢？每次球击中球拍时，得分应该增加。尝试在画布的右上角显示得分。你可能想回顾一下[第165页](ch10.xhtml#ch10lev1sec14)中“更多使用标识符的方法”部分的
    itemconfig 来获取一些提示。
