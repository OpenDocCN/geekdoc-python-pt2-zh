- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This is a book about computational thinking through the lens of *data structures*,
    constructs for organizing and storing data. It is more than a cookbook of handy
    data structures. Rather, it explores the thinking behind these structures and
    their fundamental impact on solving complex problems, using real-world analogies
    to make abstract computational concepts intuitive. The goal of this book is to
    provide new insights into how you can use preexisting structure within the data
    to your advantage or create new structures to efficiently solve problems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本通过*数据结构*的视角探讨计算思维的书，数据结构是用于组织和存储数据的构造。它不仅仅是一本实用数据结构的手册，更是探讨这些结构背后的思维方式及其在解决复杂问题中的根本影响，利用现实世界的类比使抽象的计算概念变得直观易懂。本书的目标是提供新的见解，帮助你利用数据中现有的结构发挥优势，或者创造新的结构来高效地解决问题。
- en: Among other things, I discuss the differences between arrays and linked lists,
    the complexity and power of pointers, the effect of data structures on algorithmic
    behavior, the branching of tree-based data structures, mathematical mappings in
    hash tables, and the usefulness of randomization. In short, you’ll learn to think
    about algorithms by investigating different ways to organize the data they process.
    You’ll also apply these computational approaches to real-world problems, a surprising
    number of which focus on procuring a decent cup of coffee.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我讨论了数组和链表的区别、指针的复杂性与强大功能、数据结构对算法行为的影响、基于树的数据结构的分支、哈希表中的数学映射以及随机化的有用性。简而言之，你将通过调查组织数据的不同方式来思考算法。你还将把这些计算方法应用到现实问题中，令人惊讶的是，许多问题都集中在如何获得一杯好咖啡。
- en: Understanding how data structures function is critical to using them effectively.
    Just as an experienced carpenter wouldn’t pound screws into wood with a hammer
    or use sandpaper to cut a two-by-four in half, an experienced programmer needs
    to choose the right tools for every job. As we’ll see repeatedly throughout the
    following chapters, every data structure comes with tradeoffs. Saws cut through
    wood more effectively than sandpaper but create coarse edges. There is no single
    data structure that is perfect for every possible use case, but this is what makes
    computer science and the development of algorithms so interesting. A good computer
    scientist must understand how different data structures behave in order to determine
    where they can be best used.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 了解数据结构的运作方式对于有效使用它们至关重要。就像一个经验丰富的木匠不会用锤子敲入螺丝，或者用砂纸切割一块两乘四的木板一样，经验丰富的程序员也需要为每项任务选择合适的工具。正如我们将在接下来的章节中反复看到的那样，每种数据结构都有其权衡利弊。锯子比砂纸更有效地切割木材，但会产生粗糙的边缘。没有任何一种数据结构是适用于所有可能用例的完美选择，但这正是计算机科学和算法开发如此有趣的原因。一个优秀的计算机科学家必须理解不同数据结构的行为，以便确定它们在哪些场景下可以发挥最佳作用。
- en: This book focuses on a few canonical data structures and uses them to explore
    fundamental themes in computational thinking. Each of these data structures is
    a useful exemplar of a more general class of data structures and of a conceptual
    approach. For example, B-trees demonstrate one approach to the problems of keeping
    search trees balanced and optimizing for expensive memory accesses. I discuss
    the tradeoffs between memory usage and accuracy with Bloom filters; the use of
    randomization with skip lists; and how to capture multidimensional structure with
    grids, quadtrees, or k-d trees. As such, this book is neither an introduction
    to programming, a comprehensive anthology of data structures, nor a full analysis
    of brewing coffee (although we will touch repeatedly on this important topic).
    Our goals are different—to develop mental tools that apply across a range of specific
    problems and programming languages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书聚焦于几种经典数据结构，并以它们为基础探索计算思维中的基本主题。每种数据结构都是更一般类别的数据结构和概念方法的有用示范。例如，B树展示了解决保持搜索树平衡和优化昂贵内存访问问题的一种方法。我会讨论布隆过滤器中内存使用与准确性之间的权衡；跳表中随机化的使用；以及如何通过网格、四叉树或k-d树捕捉多维结构。因此，本书既不是编程入门，也不是数据结构的全面选集，更不是咖啡酿造的详细分析（尽管我们会反复讨论这一重要话题）。我们的目标不同——开发能应用于一系列特定问题和编程语言的思维工具。
- en: Intended Audience
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标读者
- en: This book is for anyone who wants to learn more about the thinking behind the
    data structures that lie at the heart of computer science. I assume such basic
    familiarity with programming as can be expected after taking an introductory course,
    participating in a boot camp, or working through a beginners’ programming book.
    Readers should be familiar with fundamental programming concepts such as variables,
    loops, and conditional statements. Some more adventurous readers might even have
    coded up some of the data structures or algorithms in this book already or might
    do so as they read through it. However, you won’t need to know the specific details
    of particular programming languages or algorithms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适合任何想要深入了解计算机科学核心数据结构背后思维的人。我假设读者至少具备一定的编程基础，通常可以通过参加入门课程、参加训练营或学习初学者编程书籍来获得这些基础。读者应该熟悉基本的编程概念，如变量、循环和条件语句。一些更有冒险精神的读者甚至可能已经编写过本书中涉及的一些数据结构或算法，或者在阅读过程中会亲自编写。然而，读者无需了解特定编程语言或算法的细节。
- en: I hope this book appeals to a wide range of audiences. Practitioners who have
    learned basic programming from an introductory course will find an introduction
    to computational thinking that can provide a foundation for future investigation.
    Students will find a new way to understand particularly difficult or tricky topics.
    Mathematicians will learn new names and jargon for ideas they’ve used since well
    before computer science existed. And experienced computer scientists will find
    amusing new analogies to explain concepts they use every day.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望本书能吸引广泛的读者群体。通过入门课程学习过基本编程的从业人员，将发现一种计算思维的介绍，为未来的深入探索打下基础。学生将找到一种理解特别困难或棘手课题的新方法。数学家将学到一些新的术语和行话，这些概念早在计算机科学存在之前就已经被他们使用过了。而经验丰富的计算机科学家将发现一些有趣的新类比，来解释他们日常使用的概念。
- en: Language-Agnostic
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与语言无关
- en: This book is designed to apply to a wide range of programming languages. While
    this might come as a disappointment to the more opinionated readers who want to
    either (a) see their favorite language featured throughout these pages or (b)
    argue about the author’s terrible language preferences and how they must reflect
    suboptimal life choices (since programming languages, like sports teams, are always
    a topic for heated debate), the concepts presented in the book are generally applicable
    across a range of languages. You can implement a binary search tree in almost
    any language, for instance. In fact, most programming languages already include
    many of these basic data structures as part of their core language or a standard
    library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在适用于多种编程语言。虽然这可能会让一些有强烈偏好的读者感到失望，他们希望要么 (a) 在书中看到自己喜爱的编程语言，要么 (b) 争论作者的编程语言偏好，认为这反映了不佳的生活选择（因为编程语言就像体育队伍一样，总是热议的对象），但书中呈现的概念在多种语言中通常都是适用的。例如，几乎任何编程语言都可以实现二叉搜索树。事实上，大多数编程语言已经将许多这些基本数据结构作为核心语言的一部分或标准库提供。
- en: The book uses pseudocode examples that are largely based on Python’s general
    syntax, since Python is a widely used and easily readable programming language.
    I denote code blocks via indentation, use standard equality notation (`==` for
    equal and `!=` for not equal), use `True` and `False` to indicate Boolean values,
    denote comments with lines starting with the `#` symbol, and pass composite data
    structures as references. Arrays are zero indexed, and the value at index `i`
    is referenced as `arr[i]`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的伪代码示例主要基于 Python 的通用语法，因为 Python 是一种广泛使用且易于阅读的编程语言。我通过缩进表示代码块，使用标准的等式符号（`==`
    表示相等，`!=` 表示不相等），使用 `True` 和 `False` 来表示布尔值，用以 `#` 符号开头的行来表示注释，并且以引用的方式传递复合数据结构。数组是从零开始索引的，索引
    `i` 位置的值通过 `arr[i]` 来引用。
- en: 'However, I also deviate from the Python syntax wherever this aids readability.
    I specify all variables as `Type: Name` to make the types explicit, and I use
    the value `null` to indicate a null pointer. I often use `WHILE` loops over `FOR`
    loops or other compact forms to clearly show how the loop is iterating and its
    termination condition.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，我也会在有助于提高可读性的地方偏离 Python 语法。我将所有变量指定为 `Type: Name` 以明确类型，并使用值 `null` 来表示空指针。我常常使用
    `WHILE` 循环而非 `FOR` 循环或其他紧凑的形式，以清晰地展示循环是如何迭代的及其终止条件。'
- en: 'I’ve intentionally kept the examples in this book simple in order to focus
    on the computational ideas behind them. This means that individual implementations
    may not be fully optimized and will often be more verbose than strictly necessary.
    Throughout the text, I break out different conditions to illustrate the thought
    process behind the approach. At times the implementations vary from programming
    best practices in order to structure the code in a way that matches the explanation.
    In addition, to keep the examples simple, I often leave out the basic validity
    checks that are vital to include in production programs, such as checking that
    our array access is inbounds. Needless to say, treat these examples only as illustrations
    of the concepts at hand, rather than using them verbatim in your own projects.
    This is a good rule in general: never treat pseudocode as a full implementation.
    Always incorporate the relevant testing, validity checks, and other best practices
    when implementing algorithms yourself.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意将本书中的例子保持简单，以便专注于它们背后的计算思想。这意味着个别实现可能没有完全优化，通常会比严格必要的更加冗长。在整本书中，我会分解不同的条件，以阐明方法背后的思维过程。有时，为了使代码结构更符合解释，我的实现会与编程最佳实践有所不同。此外，为了保持例子的简洁，我经常省略那些在生产程序中至关重要的基本有效性检查，例如检查我们的数组访问是否越界。不言而喻，应该把这些例子当作概念的说明，而不是直接在自己的项目中使用它们。一般来说，这是一个很好的原则：永远不要将伪代码当作完整的实现。自己实现算法时，务必加入相关的测试、有效性检查和其他最佳实践。
- en: On Analogies and Brewing Coffee
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于类比和冲泡咖啡
- en: This book makes extensive use of metaphor and analogy, illustrating complex
    technical concepts by comparison to (sometimes absurd) real-world scenarios. Similes
    are scattered through this book like blueberries through a muffin. Each chapter
    explains the intricate working of data structures and algorithms with examples
    ranging from organizing your kitchen to determining whether you’ve ever tried
    a specific brew of coffee, inviting you to consider how these computational concepts
    work in a different way from computer code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书广泛使用隐喻和类比，通过与（有时荒谬的）现实世界情境的比较来阐明复杂的技术概念。比喻就像蓝莓散布在松饼里一样，遍布全书。每一章都用从整理厨房到判断你是否尝试过某种特定咖啡饮品等例子，来解释数据结构和算法的复杂运作，邀请你以不同于计算机代码的方式思考这些计算概念是如何工作的。
- en: The examples will often bend the rules of reality, be oversimplified, or border
    on the ridiculous. For example, we repeatedly consider the question of storing
    and sorting extensive coffee collections, ignoring the tragic fact that coffee
    does go stale. While that means this book is not a strictly realistic guide to
    making the ultimate cup of coffee, the absurd analogies keep things fun and should
    encourage you to think outside your normal approaches. Simplifying the analogies
    allows us to focus on just those aspects that are critical to the computational
    concept. For example, when discussing the use of nearest-neighbor search to find
    a close cup of coffee, I focus on distances (the core computational concept) and
    neglect such complicating factors as fences or rivers. My goal is to tailor the
    analogy to the core of the problem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子常常会打破现实的规则，过于简化，甚至有些荒谬。例如，我们反复探讨存储和排序大量咖啡的收集问题，却忽视了一个悲惨的事实——咖啡确实会变陈旧。虽然这意味着本书并非一本严格现实的终极咖啡制作指南，但这些荒诞的类比让事情变得有趣，并应当鼓励你跳出常规思维方式。简化类比让我们可以专注于那些对计算概念至关重要的方面。例如，在讨论使用最近邻搜索来寻找一杯接近的咖啡时，我专注于距离（核心计算概念），忽略了诸如栅栏或河流等复杂因素。我的目标是将类比调整到问题的核心。
- en: I use analogies to augment formal descriptions and precise code. Personally,
    I find it easier to break free from technicalities and minutiae when viewing a
    data structure’s operation in an active, narrative context with people (or even
    overcaffeinated squirrels) interacting with physical objects, rather than sticking
    to the vocabulary of `FOR` loops and variable counters. Visualizing a frantic
    chase through a maze of alleyways provides a different perspective of a graph
    algorithm from the formal context of iterating over abstract nodes and edges.
    I encourage readers to map these analogies to their own broad range of concepts,
    whether part of their daily life or fancies of the absurd.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用类比来增强正式的描述和精确的代码。就个人而言，我发现当以一种生动的叙述性背景来看待数据结构的操作时，比起固守`FOR`循环和变量计数器的术语，我更容易摆脱技术细节和琐碎事务。想象一场通过胡同迷宫的疯狂追逐，从而提供了与正式的图算法背景不同的视角，后者是围绕抽象节点和边的迭代。我鼓励读者将这些类比映射到他们自己广泛的概念范围内，无论是日常生活的一部分，还是荒诞的幻想。
- en: How to Use This Book
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用本书
- en: The book is structured progressively. That is, while each chapter focuses on
    a different computational concept—either a data structure or motivating problem—each
    also builds upon the previous chapters. Most of the later chapters, for example,
    rely on the discussion of memory-linked data structures and the use of pointers
    introduced in Chapter 3. We return to the basic binary search tree structure introduced
    in Chapter 5 again and again as we examine variations of branching data structures.
    Thus, I recommend that you approach the chapters in order.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是按进阶结构编排的。也就是说，尽管每一章都集中讨论一个不同的计算概念——无论是数据结构还是问题的动机——每一章也都是建立在前面章节的基础上。例如，后面的章节大多依赖于第3章中介绍的内存关联数据结构和指针的使用。当我们审视分支数据结构的变种时，会一再回到第5章介绍的基本二叉搜索树结构。因此，我建议你按照章节顺序阅读。
- en: 'As we explore different data structures and how they apply to various problems,
    we will see consistent themes appear, including:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索不同的数据结构及其如何应用于各种问题时，我们会看到一些持续出现的主题，包括：
- en: The impact of the data’s structure on algorithms accessing it
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构对访问它的算法的影响
- en: How to think about performance in the worst case
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何考虑最坏情况的性能
- en: The importance of allowing for dynamic changes in your data set and how to efficiently
    enable these changes
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许数据集动态变化的重要性，以及如何高效地启用这些变化
- en: Tradeoffs among memory, runtime, code complexity, and accuracy
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存、运行时间、代码复杂性和准确性之间的权衡
- en: How we may need to tune data structures for the problem and what tradeoffs to
    consider
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能需要如何调整数据结构以适应问题，并且需要考虑哪些权衡
- en: How we can adapt data structures to tackle new problems
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何调整数据结构以应对新问题
- en: These themes provide both a framework for thinking about the data structures
    and a set of questions to ask when facing a new problem. A critical aspect of
    choosing the data structure is understanding why it performs the way it does and
    how it will apply to new data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题提供了思考数据结构的框架，以及在面对新问题时应提出的一组问题。选择数据结构的关键在于理解为什么它会以这种方式执行，以及它如何应用于新数据。
- en: Most of all, the two questions that you should keep in mind throughout the book
    are “How?” and “Why?” *How* does a given data structure enable a computation?
    *How* do we structure the data to maximize efficiency in a given context? *Why*
    does a given structure enable these computations? *How* does this data structure
    break down in a different context? *Why* is the author using that ridiculous analogy?
    *Why* is the author so obsessed with coffee? Understanding the answers to these
    questions (other than the last one) will provide the foundation you need to effectively
    use already-existing data structures and develop novel techniques in the future.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，贯穿全书你应始终牢记的两个问题是：“如何？”和“为什么？”*如何*一个给定的数据结构能实现计算？*如何*我们组织数据，以在特定上下文中最大化效率？*为什么*一个给定的结构能实现这些计算？*如何*在不同的上下文中这个数据结构会崩溃？*为什么*作者使用那个荒谬的类比？*为什么*作者如此痴迷于咖啡？理解这些问题的答案（除了最后一个）将为你有效使用现有数据结构并在未来开发新技术奠定基础。
