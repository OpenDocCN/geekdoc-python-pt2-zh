- en: '**11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11'
- en: DEPLOYING YOUR OWN CHATBOT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署你自己的聊天机器人**'
- en: '![Image](../Images/comm1.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/comm1.jpg)'
- en: In previous chapters, you hardcoded all the input to your NLP scripts by manually
    assigning text to a doc object. But when you build chatbots for tasks like taking
    orders, things get more complicated. You’ll need to deploy your app to a *bot
    channel*, such as Telegram, which facilitates communication between a bot and
    a user.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你通过手动将文本分配给 doc 对象来将所有输入硬编码到 NLP 脚本中。但是当你为像接收订单这样的任务构建聊天机器人时，事情会变得更加复杂。你需要将应用程序部署到一个*机器人频道*，比如
    Telegram，这样可以促进机器人与用户之间的通信。
- en: This chapter begins with an overview of how to organize a chatbot app. You’ll
    be guided through the process of preparing a platform for your chatbot with Telegram
    and then deploying the bot to that platform. You’ll learn how to process multiple
    kinds of user input with the Telegram API and hold the state of a conversation
    to keep track of which questions have already been asked.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从概述如何组织一个聊天机器人应用程序开始。你将学习如何为你的聊天机器人准备一个平台，并将其部署到 Telegram 平台。你将了解如何使用 Telegram
    API 处理多种类型的用户输入，并保持对话状态，以跟踪哪些问题已经被询问过。
- en: '**How Implementing and Deploying a Chatbot Works**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**聊天机器人实现与部署的工作原理**'
- en: This section looks closely at how information is transmitted between a typical
    chatbot and a user, as well as at the structure this transmission needs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将详细介绍典型聊天机器人与用户之间如何传递信息，以及这种传输所需的结构。
- en: A typical chatbot app consists of multiple tiers. After you’ve implemented the
    logic for processing user input on your machine, you’ll need a messenger app that
    allows you to create accounts that programs operate. Users won’t interact with
    the bot implementation on your machine directly; instead, they’ll chat with the
    bot through the messenger. Apart from a messenger, your chatbot might require
    some additional services, such as a database or other storage.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的聊天机器人应用程序由多个层次组成。在你已经在本地机器上实现了处理用户输入的逻辑之后，你还需要一个消息平台应用程序，允许你创建供程序操作的账户。用户不会直接与本地机器上的机器人实现互动；相反，他们将通过消息平台与机器人聊天。除了消息平台之外，你的聊天机器人可能还需要一些额外的服务，比如数据库或其他存储。
- en: The diagram in [Figure 11-1](../Text/ch11.xhtml#ch11fig01) represents how a
    typical chatbot application combines these tiers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-1](../Text/ch11.xhtml#ch11fig01)中的示意图展示了典型聊天机器人应用程序如何将这些层次结合起来。'
- en: '![image](../Images/fig11-1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig11-1.jpg)'
- en: '*Figure 11-1: Typical interactions between a user and a bot integrated to a
    messenger*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-1：用户与集成到消息平台的机器人之间的典型交互*'
- en: The bot application first sends requests to the messenger in an infinite loop,
    checking whether a user has started a conversation. These requests include an
    authentication token generated when the developer created the bot in the messenger.
    An *authentication token* (also called an access token or API key) is unique to
    the bot that allows the messenger to recognize requests coming from this particular
    bot.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人应用程序首先以无限循环的方式向消息平台发送请求，检查用户是否已开始对话。这些请求包括在开发者创建机器人时生成的认证令牌。*认证令牌*（也叫访问令牌或
    API 密钥）是唯一的，允许消息平台识别来自此特定机器人的请求。
- en: When a user sends a message to the bot, the messenger processes it and then
    forwards it to the addressee. The bot chooses an appropriate *handler—*a routine
    that generates responses to a certain type of user messages—and sends the generated
    reply to the user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户向机器人发送消息时，消息平台处理它，并将其转发给接收方。机器人选择一个合适的*处理程序*—一个针对特定类型的用户消息生成响应的程序—并将生成的回复发送给用户。
- en: The intermediary program that the chatbot uses to interact with users is often
    a bot platform provided by a messenger app, such as Skype, Facebook Messenger,
    or Telegram. From the messenger’s standpoint, the bot is a third-party application
    that runs inside the messenger.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人用来与用户互动的中介程序通常是由消息平台应用提供的机器人平台，比如 Skype、Facebook Messenger 或 Telegram。从消息平台的角度看，机器人是一个在消息平台内运行的第三方应用程序。
- en: The next section guides you through the process of deploying a chatbot implemented
    in Python to the Telegram’s bot platform. You’ll see some bot implementation details
    that are specific to the Telegram’s bot platform and will learn to use its features
    to make bot development easy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将指导你如何将用 Python 实现的聊天机器人部署到 Telegram 的机器人平台。你将看到一些特定于 Telegram 机器人平台的实现细节，并学习如何使用其功能，使机器人开发变得更加简便。
- en: I chose the Telegram bot platform for this example because it provides comprehensive
    resources for Python developers, including the Python Telegram Bot documentation,
    guides and tutorials, and examples on GitHub. That is, Telegram provides everything
    you need to build a chatbot in Python. In other messaging apps, like Facebook
    Messenger for example, you’d need to use third-party tools, such as Flask or Ngrok,
    complicating a bot’s implementation and not strictly focusing on NLP tasks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了 Telegram 机器人平台作为这个例子，因为它为 Python 开发者提供了全面的资源，包括 Python Telegram Bot 文档、指南和教程，以及
    GitHub 上的示例。也就是说，Telegram 提供了构建 Python 聊天机器人的一切所需。在其他消息应用程序中，例如 Facebook Messenger，你需要使用第三方工具，如
    Flask 或 Ngrok，这会使机器人的实现更加复杂，并且无法严格集中在 NLP 任务上。
- en: '**Using Telegram as a Platform for Your Bot**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 Telegram 作为你的机器人平台**'
- en: Telegram is a cloud-based messenger and one of the top messenger apps in the
    world. Among other features, it provides a platform for creating bots along with
    a Python library that offers an easy-to-use interface. You can use Telegram on
    Android, iOS, Windows, Linux, and macOS platforms. But it’s primarily designed
    for smartphones.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Telegram 是一款基于云的即时通讯应用，也是全球领先的消息应用之一。除了其他功能外，它提供了一个创建机器人的平台，并提供了一个 Python 库，提供了易于使用的接口。你可以在
    Android、iOS、Windows、Linux 和 macOS 平台上使用 Telegram。但它主要是为智能手机设计的。
- en: '***Creating a Telegram Account and Authorizing Your Bot***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建 Telegram 账户并授权你的机器人***'
- en: Before you can create a bot in Telegram, you must sign up for a Telegram account.
    To do so, you’ll need a smartphone or tablet that runs either iOS or Android.
    A PC version of Telegram won’t work for this operation. However, once you create
    a Telegram account, you can use it on a PC.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够在 Telegram 中创建机器人之前，你必须注册一个 Telegram 账户。为此，你需要一部运行 iOS 或 Android 的智能手机或平板。Telegram
    的 PC 版本无法完成此操作。然而，一旦你创建了 Telegram 账户，你就可以在 PC 上使用它。
- en: 'You’ll find steps that guide you through the process of creating a Telegram
    account at *[https://telegramguide.com/create-a-telegram-account/](https://telegramguide.com/create-a-telegram-account/)*.
    Once you have a Telegram account, you can create a bot. You can do this from either
    a smartphone or a PC, as described in the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://telegramguide.com/create-a-telegram-account/](https://telegramguide.com/create-a-telegram-account/)*
    上找到创建 Telegram 账户的详细步骤。一旦你拥有了 Telegram 账户，你就可以创建一个机器人。你可以通过智能手机或 PC 来完成这个操作，具体步骤如下所示：
- en: In the Telegram app, perform a search for @BotFather or open the URL *[https://telegram.me/botfather/](https://telegram.me/botfather/)*.
    BotFather is a Telegram bot that manages all the other bots in your account.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Telegram 应用中，搜索 @BotFather 或者打开链接 *[https://telegram.me/botfather/](https://telegram.me/botfather/)*。BotFather
    是一个 Telegram 机器人，用于管理你账户中的所有其他机器人。
- en: On the BotFather page, click the **Start** button to see the list of commands
    that you can use to set up your Telegram bots.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 BotFather 页面，点击**开始**按钮，你将看到可以用来设置 Telegram 机器人命令的列表。
- en: To create a new bot, enter the `/newbot` command in the **Write a message**
    box. You’ll be prompted for a name and a username for your bot. Then you’ll be
    given an authorization token for the new bot. [Figure 11-2](../Text/ch11.xhtml#ch11fig02)
    shows a screenshot of this process on a smartphone.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的机器人，请在**写信息**框中输入`/newbot`命令。系统会提示你为你的机器人设置一个名称和用户名。然后你会得到一个新机器人的授权令牌。[图
    11-2](../Text/ch11.xhtml#ch11fig02)展示了这一过程在智能手机上的截图。
- en: '![image](../Images/fig11-2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig11-2.jpg)'
- en: '*Figure 11-2: Creating a new bot in Telegram using a smartphone*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-2：在智能手机上创建 Telegram 机器人的过程*'
- en: Now you can integrate the bot functionality implemented on your machine in a
    Python file with the bot you just created in Telegram, as discussed in the next
    section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将你在本地机器上用 Python 文件实现的机器人功能与刚刚在 Telegram 创建的机器人进行集成，具体操作将在下一节讨论。
- en: '**NOTE**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*It’s important to know that a bot you just created in Telegram doesn’t implement
    the logic for handling user input. In fact, it’s just a wrapper for the actual
    bot you need to implement on your own.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*重要的是要知道，你刚刚在 Telegram 中创建的机器人并没有实现处理用户输入的逻辑。事实上，它只是你需要自己实现的实际机器人的一个封装。*'
- en: '***Getting Started with the python-telegram-bot Library***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***开始使用 python-telegram-bot 库***'
- en: To connect chatbot functionality implemented in Python, you’ll need the `python-telegram-bot`
    library, which is built on top of the Telegram Bot API. The library provides an
    easy-to-use interface for bot programmers developing apps for Telegram. It allows
    you to focus on coding the bot rather than on the details related to the interactions
    between the messenger and the bot implementation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 若要将Python中实现的聊天机器人功能连接到Telegram，你需要`python-telegram-bot`库，该库建立在Telegram Bot
    API之上。该库为开发Telegram应用的机器人程序员提供了一个易于使用的接口。它使你能够专注于编写机器人的代码，而不必关注消息传递应用与机器人实现之间的交互细节。
- en: 'The `python-telegram-bot` library is free software distributed under an LGPLv3
    license. You can install or upgrade it via `pip` using the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`python-telegram-bot`库是一个自由软件，采用LGPLv3许可证发布。你可以通过`pip`使用以下命令安装或升级它：'
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**NOTE**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The examples provided throughout the rest of this chapter assume that you’re
    using `python-telegram-bot` version 12.0 or later.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章其余部分提供的示例假设你正在使用`python-telegram-bot`版本12.0或更高版本。*'
- en: Once you’ve installed the library, use the following lines of code to perform
    a quick test to verify that you can access your Telegram bot from Python. You
    must have an internet connection for this test to work.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好库后，使用以下代码行进行快速测试，以验证你是否能通过Python访问Telegram机器人。此测试需要网络连接才能正常工作。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In place of `''XXXXX''`, include the token you were given when creating the
    bot. Then check your credentials using this line:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`'XXXXX'`的位置，填写你在创建机器人时获得的令牌。然后使用这一行代码检查你的凭证：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the `bot.get_me()` function returns your credentials, the bot’s authentication
    token you specified previously is valid.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`bot.get_me()`函数返回你的凭证，则你之前指定的机器人认证令牌是有效的。
- en: '***Using the telegram.ext Objects***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用telegram.ext对象***'
- en: 'To build a real bot, you’ll need to use the `telegram.ext` objects, including
    `telegram.ext.Updater` and `telegram.ext.Dispatcher`. These are two of the most
    important objects in the library, because they’re required in every implementation.
    In a nutshell, an `Updater` object receives the messages from Telegram and delivers
    them to a `Dispatcher`. In turn, the `Dispatcher` passes the data to an appropriate
    handler for processing. The following code illustrates how to use these objects
    in a simple echo bot that replies to each message with a message that has the
    same text:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个真正的机器人，你需要使用`telegram.ext`对象，包括`telegram.ext.Updater`和`telegram.ext.Dispatcher`。这两个对象是库中最重要的对象，因为它们在每个实现中都是必需的。简而言之，`Updater`对象接收来自Telegram的消息，并将其传递给`Dispatcher`。然后，`Dispatcher`将数据传递给适当的处理程序进行处理。以下代码展示了如何在一个简单的回显机器人中使用这些对象，该机器人会回复每条消息，内容与原始消息相同：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We start by importing the `Updater` and `MessageHandler` modules from the `telegram.ext`
    package. Then we define the `echo()` function, which takes two objects as parameters:
    `update` and `context` ➊. The `update` object represents an incoming message,
    which can be text, a photo, a sticker, and so on. The `context` object contains
    attributes that can hold data from the same chat and user. Both `update` and `context`
    are generated for you behind the scenes and passed to the *callback*—a message
    processing function assigned to a certain handler. In this example, the text message
    handler’s callback function is `echo()`; it contains a single line of code that
    instructs Telegram to return a user’s text message without any change.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从`telegram.ext`包中导入`Updater`和`MessageHandler`模块。然后定义`echo()`函数，它接收两个对象作为参数：`update`和`context`
    ➊。`update`对象表示一个传入的消息，可以是文本、照片、贴纸等。`context`对象包含一些属性，可以存储来自同一聊天和用户的数据。`update`和`context`这两个对象是在后台自动生成的，并传递给*回调*函数——这是分配给特定处理程序的消息处理函数。在这个示例中，文本消息处理程序的回调函数是`echo()`；它包含一行代码，指示Telegram将用户的文本消息原封不动地返回。
- en: Next, we create an `Updater` object ➋, which we’ll use to orchestrate the bot
    execution process throughout the script. When we create an `Updater` object, a
    `Dispatcher` object is created automatically for us, allowing us to register handlers
    for different types of input data, such as text and photo. In this example, we
    register a single handler designed to handle only text messages, passing it the
    callback function implemented earlier in this script. Now the chatbot will call
    the callback function every time it receives a Telegram message that contains
    text.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个`Updater`对象➋，我们将使用它来协调脚本中的机器人执行过程。当我们创建一个`Updater`对象时，`Dispatcher`对象会自动为我们创建，这样我们就可以注册不同类型的输入数据的处理程序，比如文本和照片。在这个例子中，我们注册了一个处理程序，专门处理文本消息，并将之前在脚本中实现的回调函数传给它。现在，每当聊天机器人收到包含文本的Telegram消息时，它都会调用这个回调函数。
- en: Then we start the bot by invoking the `start_polling()` method of the `Updater`,
    which launches the process of polling new messages from the messenger. Because
    `start_polling()` is a non-blocking method, we also have to call the `idle()`
    method of the `Updater`, which blocks our script until a message is received or
    a user enters an exit shortcut (CTRL-C). For further details on the classes and
    methods available in the `python-telegram-bot` library, read the Python Telegram
    Bot’s documentation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过调用`Updater`的`start_polling()`方法来启动机器人，该方法启动从消息应用程序中轮询新消息的过程。由于`start_polling()`是一个非阻塞方法，我们还必须调用`Updater`的`idle()`方法，这会阻塞我们的脚本，直到接收到消息或用户输入退出快捷键（CTRL-C）。有关`python-telegram-bot`库中可用的类和方法的更多细节，请参阅Python
    Telegram Bot的文档。
- en: To test the script, run it on an internet-connected machine. Once it’s running,
    any Telegram user can start a conversation with your chatbot. In the Telegram
    app, search for @*<username>*, entering the username you gave your bot when you
    created it; then select it. To start a conversation, click the **/start** button
    or enter the `/start` command. You can then start sending messages to your bot.
    Because you’ve implemented an echo bot, any reply message from the bot should
    contain the same text you sent it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个脚本，可以在连接互联网的机器上运行它。运行后，任何Telegram用户都可以与你的聊天机器人开始对话。在Telegram应用中，搜索@*<用户名>*，输入你为机器人创建时指定的用户名，然后选择它。要开始对话，点击**/start**按钮或输入`/start`命令。然后，你可以开始向机器人发送消息。因为你实现了一个回音机器人，所以机器人回复的任何消息应该都包含你发送的相同文本。
- en: '***Creating a Telegram Chatbot That Uses spaCy***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建一个使用spaCy的Telegram聊天机器人***'
- en: In the preceding section, we used the `python-telegram-bot` library and built
    a simple script integrated into Telegram. Let’s now enhance our implementation
    and add spaCy to make sure the bot created in Telegram is fully operational.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了`python-telegram-bot`库，并构建了一个集成到Telegram中的简单脚本。现在，让我们增强我们的实现，添加spaCy，以确保在Telegram中创建的机器人能够完全运行。
- en: The following code creates a simple bot that processes a user’s utterance and
    determines whether or not it contains a direct object. Based on that information,
    it generates a reply message for the user. This code isn’t very useful on its
    own, but it should show you how to connect text-processing code implemented with
    spaCy to the code implemented with the `python-``telegram-bot` library.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了一个简单的机器人，该机器人处理用户的语句并判断它是否包含直接宾语。根据这些信息，它会生成一个回复消息。这段代码本身并不特别有用，但它应该向你展示如何将使用spaCy实现的文本处理代码与使用`python-telegram-bot`库实现的代码连接起来。
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the code responsible for interactions with Telegram is the same
    as in the preceding script. The only difference here is the implementation of
    the callback function ➊. In this case, the `utterance()` function uses spaCy to
    process a user’s input.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，负责与Telegram交互的代码与前一个脚本中的代码是一样的。唯一的区别在于回调函数的实现➊。在这种情况下，`utterance()`函数使用spaCy来处理用户的输入。
- en: In that function, we first extract the message text from the `update` object
    passed to the function. Next, we convert it into a spaCy Doc object and then check
    whether the utterance in the doc includes a direct object. If the utterance doesn’t
    include a direct object, we ask the user to be more specific. For example, a user
    might say “I am hungry,” which implies they want to order some food. But to place
    an order, we need them to be more specific; for example, “I want a pizza.”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个函数中，我们首先从传递给该函数的`update`对象中提取消息文本。接下来，我们将其转换为一个spaCy的Doc对象，然后检查这个语句中是否包含直接宾语。如果语句中不包含直接宾语，我们会要求用户更加具体。例如，用户可能会说“我饿了”，这暗示着他们想要点一些食物。但要下订单，我们需要他们更加明确；比如“我想要一个披萨”。
- en: Perhaps the most interesting aspect of this example is that it illustrates where
    utterances that spaCy will process can come from in a bot application. In the
    examples in previous chapters, we used utterances hardcoded in scripts. This is
    the first time you can see how real chatbots obtain their input.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子最有趣的一点是，它展示了spaCy能够处理的输入在机器人应用中可能来自哪里。在前几章的示例中，我们使用了硬编码在脚本中的输入。这是你第一次看到现实中的聊天机器人如何获取输入。
- en: '***Expanding the Chatbot***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***扩展聊天机器人功能***'
- en: Now that you generally know how to integrate a chatbot that uses spaCy into
    Telegram, let’s create a more interesting bot. For example, you might enhance
    the bot’s functionality in the previous section so it extracts the intent from
    a user’s message rather than just printing a message that the request is being
    processed. To accomplish this, you could recycle a script from one of the previous
    chapters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你大致知道如何将使用spaCy的聊天机器人集成到Telegram中，让我们创建一个更有趣的机器人。例如，你可以增强前一节中机器人的功能，使其从用户的消息中提取意图，而不是仅仅打印“正在处理请求”的消息。为了实现这一点，你可以重用前面章节中的某个脚本。
- en: 'Go back to the script in “[Recognizing Synonyms Using Predefined Lists](../Text/ch08.xhtml#lev110)”
    on [page 117](../Text/ch08.xhtml#page_117) in [Chapter 8](../Text/ch08.xhtml#ch08),
    which uses lists of synonyms to extract the intent from a submitted utterance.
    Put the code from this script into a separate function, say, `extract_intent()`,
    which should take a single parameter—the text of a user’s message as a Doc object
    (be sure to exclude the line of code with the hardcoded utterance at the beginning
    of the script as well as the line that prints the intent at the end). Additionally,
    the function you’re creating must return a recognized intent as a string. In the
    script you’re creating, place the new function above the callback function and
    revise the callback so it looks as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第8章](../Text/ch08.xhtml#ch08)的“[使用预定义列表识别同义词](../Text/ch08.xhtml#lev110)”脚本，该脚本使用同义词列表来提取用户输入的意图。将此脚本中的代码放入一个独立的函数中，比如命名为`extract_intent()`，该函数应接收一个参数——作为Doc对象的用户消息文本（确保排除脚本开头的硬编码输入行以及脚本末尾打印意图的那行）。此外，你创建的函数必须返回一个识别出的意图，作为字符串返回。在你创建的脚本中，将新函数放在回调函数上方，并将回调函数修改为如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We call the newly created `extract_intent()` function from within the utterance
    callback to obtain the user’s intent ➊. Then we take an appropriate action, depending
    on the intent obtained. In this example, we simply send the user a relevant message
    ➋.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在用户输入的回调函数中调用了新创建的`extract_intent()`函数来获取用户的意图 ➊。然后，根据获取的意图采取适当的行动。在这个例子中，我们只是简单地向用户发送一条相关的消息
    ➋。
- en: Although we could put the code from [Chapter 8](../Text/ch08.xhtml#ch08) into
    the callback function directly, doing so would decrease the overall readability
    of the code, so it’s considered bad practice.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将[第8章](../Text/ch08.xhtml#ch08)中的代码直接放入回调函数，但这样做会降低代码的可读性，因此被认为是不好的编程习惯。
- en: '***Holding the State of the Current Chat***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保持当前聊天状态***'
- en: The bot you have now does more than simply evaluate a user’s message; it can
    recognize a user’s intent. Still, this isn’t enough to take orders from users.
    The primary flaw is that the chatbot will use the same utterance callback function
    for each user input, even when the intent has been recognized and it’s time to
    ask the user additional questions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在使用的机器人不仅仅是评估用户的消息；它还能识别用户的意图。不过，这还不足以从用户那里接收指令。主要的问题在于，即使机器人已经识别了意图，到了需要向用户提问的时刻，它仍会对每个用户输入使用相同的回调函数。
- en: To address this problem, you need to *hold the state* of the current chat so
    your bot knows what questions have already been answered and what it still has
    to ask. Then you’ll need to modify the callback so it can process user messages
    according to the chat’s current state.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你需要*保持*当前聊天的状态，这样机器人就知道哪些问题已经回答，哪些问题还需要询问。接着，你需要修改回调函数，使其能够根据当前聊天状态处理用户消息。
- en: 'This bot could work as follows: if the chatbot hasn’t yet discovered an intent,
    it should ask the user to express it. After finding the intent, the bot should
    switch to another question that is relevant to the conversation’s current state.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人可以这样工作：如果机器人还没有发现用户意图，它应该询问用户表达意图。找到意图后，机器人应该切换到另一个与当前聊天状态相关的问题。
- en: To help you simplify this kind of implementation, the `python-telegram-bot`
    library includes the `ConversationHandler` object; it allows you to define entry
    points and states of the conversation by tying them to a handler.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化这种实现，`python-telegram-bot` 库包含了 `ConversationHandler` 对象；它允许你通过将入口点和对话状态与处理程序绑定，来定义对话的入口点和状态。
- en: An entry point—for example, a Telegram command like `/start`—is attached to
    a handler that can trigger the start of a chat. The handler’s callback must return
    the initial state of conversation; this action determines what handler to use
    for the user message that follows. To change the state of conversation, the handler’s
    callback returns a new state after replying to the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个入口点——例如，类似 `/start` 的 Telegram 命令——与一个处理程序绑定，可以触发聊天的开始。处理程序的回调函数必须返回对话的初始状态；这个动作决定了接下来用户消息应该使用哪个处理程序。要改变对话的状态，处理程序的回调函数在回复用户后返回一个新的状态。
- en: 'The following code includes fragments of a script that illustrates how to change
    the conversation’s state between a chatbot and a user using `ConversationHandler`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何使用 `ConversationHandler` 在聊天机器人和用户之间切换对话状态：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using `ConversationHandler` lets us define several callback functions and the
    order in which they should be called. A callback processes the user’s message,
    and depending on the processing results, might change the state of the conversation
    flow.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ConversationHandler` 允许我们定义多个回调函数，并指定它们的调用顺序。回调函数处理用户的消息，根据处理结果，可能会改变对话流程的状态。
- en: In this example, the callback for the `/start` command switches the conversation
    to the `ORDERING` state ➊, which means that the next message coming in from the
    user will be processed by the `intent_ext()` function. The reason is that the
    `intent_ext()` function is the callback that belongs to the `ORDERING` state’s
    handler ➌, as defined in the `ConversationHandler` object’s `states` dictionary.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`/start` 命令的回调函数将对话切换到 `ORDERING` 状态 ➊，这意味着接下来用户发送的消息将由 `intent_ext()`
    函数处理。原因是 `intent_ext()` 函数是属于 `ORDERING` 状态的处理程序 ➌ 中的回调函数，正如在 `ConversationHandler`
    对象的 `states` 字典中所定义的那样。
- en: 'Note that the chatbot can switch between states based on a conditional logic,
    as illustrated in the `intent_ext()` function: there, the conversation’s state
    will change to `ADD_INFO` (the state in which you collect additional information)
    only if the intent has been recognized ➋.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，聊天机器人可以根据条件逻辑在状态之间切换，正如 `intent_ext()` 函数中所展示的那样：在那里，只有当识别到意图 ➋ 时，对话的状态才会变更为
    `ADD_INFO`（即收集附加信息的状态）。
- en: '***Putting All the Pieces Together***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将所有部分组合在一起***'
- en: Now that you have a cursory understanding of how to structure a Telegram bot
    that follows a predefined conversation flow, let’s look at what a full implementation
    of such a script might look like. This bot needs to ask the user a series of questions,
    one after another, to complete an order form. Because this is a simplified example,
    the chatbot can process only one intent, `orderPizza`, and ask a user to specify
    only the type of pizza when completing the order form.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对如何构建一个遵循预定义对话流程的 Telegram 机器人有了初步了解，接下来让我们看看完整实现这种脚本的样子。这个机器人需要依次向用户询问一系列问题，以完成一个订单表单。因为这是一个简化的例子，聊天机器人只能处理一个意图，`orderPizza`，并且在填写订单表单时只要求用户指定披萨的种类。
- en: 'The following script is broken into chunks representing each function definition:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本分成多个部分，每个部分代表一个函数定义：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `extract_intent()` function extracts the intent from a submitted utterance.
    We’ll call this function from within the `intent_ext()` callback function defined
    next. The code for `extract_intent()` isn’t provided here, but you can use the
    code described earlier in “[Expanding the Chatbot](../Text/ch11.xhtml#lev152)”
    on [page 161](../Text/ch11.xhtml#page_161).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract_intent()` 函数从提交的语句中提取意图。我们将在接下来的 `intent_ext()` 回调函数中调用这个函数。`extract_intent()`
    函数的代码在这里没有提供，但你可以参考前面在《[扩展聊天机器人](../Text/ch11.xhtml#lev152)》中描述的代码，见[第161页](../Text/ch11.xhtml#page_161)。'
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `details_to_str()` function simply converts the content of the `user_data`
    dictionary to a string. The `user_data` dictionary contains information that the
    chatbot will extract from the conversation, such as the kind of pizza and number
    of pizzas the user wants. The bot includes this information in the final message
    sent to the user.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`details_to_str()` 函数简单地将 `user_data` 字典的内容转换为字符串。`user_data` 字典包含了聊天机器人从对话中提取的信息，比如用户想要的披萨种类和披萨数量。机器人将这些信息包含在发送给用户的最终消息中。'
- en: So far, we have defined the helper functions that will be invoked—either directly
    or indirectly—from within the bot’s callback functions. Let’s now define the callback
    functions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了将在机器人回调函数中直接或间接调用的辅助函数。现在让我们定义回调函数。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `start()` function is the callback for the `/start` Telegram command. In
    other words, the chatbot calls this function upon starting a chat. The function
    returns the `ORDERING` state, which means that the next message received will
    be processed by the callback attached to the `ORDERING` state’s handler (the `intent_ext()`
    function in this example).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`start()`函数是`/start` Telegram命令的回调函数。换句话说，聊天机器人在开始聊天时会调用这个函数。该函数返回`ORDERING`状态，这意味着接收到的下一个消息将由附加到`ORDERING`状态处理器（此例中的`intent_ext()`函数）的回调进行处理。'
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For simplicity, the `intent_ext()` function used here can recognize only one
    intent: `orderPizza`. If it detects this intent, it returns the `ADD_INFO` state.
    Otherwise, it returns the `ORDERING` state, which will cause the `intent_ext()`
    function to be invoked again to process the next user message. The `ADD_INFO`
    state’s handler can be implemented as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，这里使用的`intent_ext()`函数只能识别一个意图：`orderPizza`。如果它检测到此意图，它将返回`ADD_INFO`状态。否则，它将返回`ORDERING`状态，这将导致再次调用`intent_ext()`函数以处理下一个用户消息。`ADD_INFO`状态的处理函数可以这样实现：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `add_info()` function is the callback for the `ADD_INFO` state handler.
    In this implementation, it expects that a user ordering pizza will specify the
    type of pizza they want, then switches the state to `ConversationHandler.END`,
    the last state, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_info()`函数是`ADD_INFO`状态处理器的回调函数。在这个实现中，它期望用户在订购披萨时指定他们想要的披萨类型，然后将状态切换为`ConversationHandler.END`，即最后一个状态，如下所示：'
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `cancel()` function used here simply sends a goodbye message to the user
    and switches the state to `ConversationHandler.END`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的`cancel()`函数只是向用户发送一个告别消息，并将状态切换为`ConversationHandler.END`。
- en: 'Finally, the `main()` function should look like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`main()`函数应该如下所示：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As usual, a bot script’s `main()` function orchestrates the bot execution process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，机器人脚本的`main()`函数协调机器人执行过程。
- en: You can test the script using either the Telegram web app on a computer or the
    Telegram app on a smartphone. [Figure 11-3](../Text/ch11.xhtml#ch11fig03) shows
    a screenshot from the Telegram web app when it’s running the script.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用计算机上的Telegram网页版应用或智能手机上的Telegram应用来测试脚本。[图 11-3](../Text/ch11.xhtml#ch11fig03)展示了Telegram网页版应用运行脚本时的截图。
- en: '![image](../Images/fig11-3.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fig11-3.jpg)'
- en: '*Figure 11-3: Testing your bot using the Telegram web app*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-3：使用Telegram网页版应用测试你的机器人*'
- en: '***Try This***'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***动手试试***'
- en: Modify the script in the preceding section so it can recognize and process more
    intents than just `orderPizza`. Another relevant intent could be `showPizza`,
    meaning the user wants to look at the menu. To implement this, you’ll need to
    modify the `intent_ext()` function, adding an `if intent ==` `'showPizza'` condition
    in the doc processing loop. Also, you’ll need to add a new state to the `states`
    dictionary in the `ConversationHandler` object—say, `SHOW_MENU`—and implement
    the callback for it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 修改前面章节中的脚本，使其能够识别和处理比`orderPizza`更多的意图。另一个相关的意图可能是`showPizza`，意味着用户想查看菜单。为了实现这一点，你需要修改`intent_ext()`函数，在文档处理循环中添加`if
    intent == 'showPizza'`条件。同时，你还需要在`ConversationHandler`对象的`states`字典中添加一个新的状态——例如`SHOW_MENU`——并实现其回调函数。
- en: '**Summary**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you learned how to implement and deploy a simple chatbot app
    using the Telegram bot platform, a popular messenger app. You learned how to define
    and hold states in a conversation. Notably, you also saw an example of where the
    user messages that you’d process with spaCy might actually come from.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用Telegram机器人平台这个流行的消息应用程序来实现和部署一个简单的聊天机器人应用。你学会了如何在对话中定义和保持状态。特别地，你还看到了一个例子，展示了你可能会使用spaCy处理的用户消息究竟来自哪里。
