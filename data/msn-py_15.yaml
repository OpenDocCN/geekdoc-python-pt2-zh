- en: '**C'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**C**'
- en: DEBUGGING YOUR LISTINGS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试你的列表**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Some of the listings in this book might not work for you the first time. Don’t
    be put off! This is normal when programming, even for experienced coders. It’s
    easy to overlook details that will make a huge difference to the program. Fixing
    errors in a program is called *debugging*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的一些列表可能第一次无法运行。不要气馁！在编程中，即使是经验丰富的编码者也会遇到这种情况。这是很正常的，尤其是容易忽略那些会对程序产生巨大影响的细节。修复程序中的错误称为
    *调试*。
- en: To minimize problems, I’ve kept the listings as short as possible, so if something
    doesn’t work in a listing, you won’t have to check many instructions. I’ve also
    included warnings in the text when there’s anything particularly tricky that you
    should look out for.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽量减少问题，我将列表保持尽可能简短，因此如果某个列表中的内容不起作用，你就不必检查太多的指令。当文本中有任何特别棘手的地方时，我也会给出警告，提醒你需要注意。
- en: Remember that if you can’t work out how to fix a program, you can use my version
    of that listing that you downloaded in the book’s resources (see “[What’s in the
    ZIP File](intro.xhtml#lev11)” on [page 8](intro.xhtml#page_8)). If you’ve modified
    the program, try copying and pasting the new bits from my listing into your program.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你无法找出修复程序的方法，可以使用你在书籍资源中下载的该列表版本（参见 [“ZIP 文件中包含的内容”](intro.xhtml#lev11)
    在 [第 8 页](intro.xhtml#page_8)）。如果你已修改程序，试着将我提供的列表中新的部分复制并粘贴到你的程序中。
- en: 'In this appendix, I’ve compiled some tips to help you fix any programs that
    aren’t working for you. When Python spots an error, it usually shows you the line
    in the program where it first noticed something was wrong. That isn’t always the
    line where the mistake actually is: it’s just how far Python got before it noticed
    a problem. If the line shown looks okay, check the previous line first and then
    check the other new instructions in the listing for mistakes.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我总结了一些提示，帮助你修复无法运行的程序。当 Python 检测到错误时，通常会显示出程序中第一次发现问题的那一行。这并不总是实际错误所在的那一行，它仅仅表示
    Python 在检测到问题之前执行到的那一行。如果显示的这一行看起来没问题，可以先检查上一行，然后检查列表中的其他新指令是否存在错误。
- en: '**INDENTATION**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缩进**'
- en: Indentation is used to tell Python which bits of the program belong together.
    For example, all the instructions that belong to a function need to be indented
    underneath the def instruction that defines the function. Instructions that belong
    to a while, for, if, or else command need to be indented too. Listing C-1 provides
    an example, part of the get_floor_type() function.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进用于告诉 Python 哪些部分属于程序中的同一块。例如，所有属于一个函数的指令都需要在定义函数的 def 指令下面进行缩进。属于 while、for、if
    或 else 命令的指令也需要缩进。列表 C-1 提供了一个示例，这是 get_floor_type() 函数的一部分。
- en: --snip--
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '➊ def get_floor_type():'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ def get_floor_type():'
- en: '➋     if current_room in outdoor_rooms:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '➋     if current_room in outdoor_rooms:'
- en: '➌         return 2 # soil'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '➌         return 2 # 土壤'
- en: '➍     else:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '➍     else:'
- en: '➎         return 0 # tiled floor'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '➎         return 0 # 瓷砖地板'
- en: --snip--
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '*Listing C-1: An excerpt from the game listing, showing indentation levels*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 C-1：游戏列表的摘录，显示缩进级别*'
- en: All the instructions belong to the function get_floor_type() ➊, so they’re all
    indented by at least four spaces (see ➋ and ➍). The return instructions (➌ and
    ➎) also belong to the if ➋ and else ➍ commands above them, so they’re indented
    by another four spaces, making eight spaces in total. When you add the colon at
    the end of the line when typing in the def, if, and else instructions, the indentation
    on the next line is added automatically in IDLE. Use the DELETE key to remove
    indentation you don’t need.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的指令都属于函数 get_floor_type() ➊，因此它们都缩进了至少四个空格（参见 ➋ 和 ➍）。返回指令（➌ 和 ➎）也属于 if ➋ 和
    else ➍ 命令，因此它们再缩进了四个空格，总共是八个空格。当你在输入 def、if 和 else 指令时，在行末加上冒号后，IDLE 会自动添加下一行的缩进。使用
    DELETE 键删除不需要的缩进。
- en: If you get the indentation level wrong for some instructions, the program might
    behave strangely or simply run slower, even if Python doesn’t report any errors.
    So it’s worth double-checking your indentation levels.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在某些指令的缩进级别上出错，程序可能会表现得异常，甚至变得更慢，即使 Python 没有报告任何错误。所以，值得仔细检查你的缩进级别。
- en: If Python does give an error that shows it expected an indented block, it means
    you haven’t indented something that you should have. If Python tells you there’s
    an unexpected indent, you’ve added too many spaces at the start of the instruction,
    or you might have instructions indented at different levels that should be lined
    up. In this book, I’ve used four spaces for each level of indentation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Python 给出一个错误提示，表明它期待一个缩进的代码块，意味着你没有对应该缩进的内容进行缩进。如果 Python 提示你有一个意外的缩进，说明你在指令的开头加了过多的空格，或者你可能有指令的缩进层级不一致，应该对齐。在本书中，我使用了四个空格作为每个缩进层级。
- en: '**CASE SENSITIVITY**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**大小写敏感性**'
- en: 'Python is case sensitive, which means it matters whether you use uppercase
    (ABC…) or lowercase (abc…) letters. Most of the time, you should use lowercase
    when writing Python code. Here are the exceptions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是大小写敏感的，这意味着使用大写字母（ABC…）或小写字母（abc…）是有区别的。通常，写 Python 代码时应该使用小写字母。以下是例外情况：
- en: The values True, False, and None have a capital letter at the start. When you
    type them correctly, they’ll be orange in IDLE.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值 True、False 和 None 以大写字母开头。正确输入时，它们在 IDLE 中会显示为橙色。
- en: Some of the variable, dictionary, and list names in the program are uppercase,
    such as TILE_SIZE and PLAYER. If your capitalization is inconsistent, you might
    get an error message saying that a particular name is not defined. Python doesn’t
    recognize two names with different capitalization as the same name. (Check for
    spelling errors in the name too.)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序中的某些变量、字典和列表名称是大写的，例如 TILE_SIZE 和 PLAYER。如果你的大小写不一致，可能会收到错误提示，指出某个名称未定义。Python
    不会将大小写不同的两个名称视为相同的名称。（同时检查名称的拼写错误。）
- en: Anything inside quotation marks may vary in case. This is text the program uses
    to do something and is often written so it looks correct when people read it.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引号中的内容可以有大小写差异。这是程序用来执行某些操作的文本，通常写得让人类阅读时看起来是正确的。
- en: 'Python ignores anything after a # symbol on the same line, so you can use whatever
    capitalization you like there.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python 会忽略行中 # 符号后的内容，因此你可以随意使用任何大小写格式。'
- en: '**PARENTHESES AND BRACKETS**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**圆括号和方括号**'
- en: 'Check that you’re using the correct bracket shapes in the correct order, especially
    if Python tells you there’s a problem with something in a list or dictionary:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你是否使用了正确的括号形状和顺序，尤其是当 Python 提示你列表或字典中有问题时：
- en: Parentheses () are used for tuples and for giving information to a function.
    For example, the range(), print() and len() functions use parentheses. So do our
    own functions in the *Escape* game, such as remove_object() and draw_image().
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆括号 () 用于元组以及向函数提供信息。例如，range()、print() 和 len() 函数都使用圆括号。我们的 *Escape* 游戏中的函数也如此，例如
    remove_object() 和 draw_image()。
- en: Square brackets [] mark the start and the end of a list. Sometimes, you might
    have a list inside another list, so you’ll have several pairs.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号 [] 标记一个列表的开始和结束。有时候，你可能会在一个列表中嵌套另一个列表，因此会有多个方括号对。
- en: Curly brackets {} mark the start and the end of a dictionary.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花括号 {} 用于标记字典的开始和结束。
- en: '**COLONS**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**冒号**'
- en: When the code line begins with for, while, if, else or def, it needs a colon
    (:) at the end of it. A colon also separates the key from the data in a dictionary.
    The *Escape* listing doesn’t use semicolons (;), so if there’s one in your code,
    change it to a colon.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码行以 for、while、if、else 或 def 开头时，需要在行末加上冒号（:）。冒号还用于在字典中分隔键和值。*Escape* 列表中没有使用分号（;），因此如果你的代码中有分号，请将其改为冒号。
- en: '**COMMAS**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**逗号**'
- en: Items in a list or tuple need commas between them. When adding new lines to
    a list, make sure you include a comma after the last item before adding new items.
    Look for patterns in the data to help you spot any mistakes involving commas.
    For example, each list in the props dictionary and recipes list has three numbers
    in it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 列表或元组中的项之间需要使用逗号。当向列表添加新行时，确保在添加新项之前，在最后一项后面加上逗号。通过检查数据中的模式，你可以帮助自己发现任何关于逗号的错误。例如，在
    props 字典和 recipes 列表中的每个列表都有三个数字。
- en: '**IMAGES AND SOUNDS**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**图像和声音**'
- en: If Python tells you that no images or sounds directory was found, check that
    you’ve downloaded the files and are saving your files in the right place. See
    “[Downloading the Game Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7)
    and [Listing 1-1](ch01.xhtml#ch01list1) on [page 19](ch01.xhtml#page_19).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Python 提示你没有找到图像或声音目录，检查你是否已下载了文件，并将文件保存在正确的位置。参见 “[下载游戏文件](intro.xhtml#lev8)”
    第7页和 [Listing 1-1](ch01.xhtml#ch01list1) 第19页。
- en: '**SPELLING**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拼写**'
- en: 'IDLE’s color coding can help you spot spelling errors in some instructions.
    Check that the colors on your screen match the colors in the book. Be careful
    when you’re spelling variables and lists: any mistakes might cause the program
    to stop or behave strangely.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE 的颜色编码可以帮助你发现某些指令中的拼写错误。检查屏幕上的颜色是否与书中的颜色匹配。拼写变量和列表时要小心：任何错误都可能导致程序停止或表现异常。
