- en: '**4**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4**'
- en: '**HANDLING TIMESTAMPS AND TIME ZONES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理时间戳和时区**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Time zones are complicated. Most people expect dealing with time zones to involve
    merely adding or subtracting a few hours from the universal time reference, UTC
    (Coordinated Universal Time), from −12 hours to +12 hours.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 时区很复杂。大多数人认为处理时区仅仅是从协调世界时（UTC）中加减几个小时，从−12小时到+12小时。
- en: 'However, reality shows otherwise: time zones are not logical or predictable.
    There are time zones with 15-minute granularity; countries that change time zones
    twice a year; countries that use a custom time zone during summer, known as daylight
    saving time, that starts on different dates; plus tons of special and corner cases.
    These make the history of time zones interesting but also complicate how to handle
    them. All of those particularities should make you stop and think when dealing
    with time zones.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现实情况并非如此：时区并不符合逻辑，也不可预测。有些时区的粒度是15分钟；一些国家每年会调整时区两次；还有一些国家在夏季使用一种特殊时区，叫做夏令时，且夏令时的开始日期各不相同；此外，还有很多特殊情况和边缘案例。这些使得时区的历史既有趣又复杂，处理起来充满挑战。所有这些特殊情况应该在处理时区时引起你的关注。
- en: This chapter will outline why dealing with time zones is tricky and how to best
    handle them in your programs. We’ll look at how to build timestamp objects, how
    and why to make them time zone aware, and how to deal with corner cases you might
    come across.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将概述为什么处理时区很棘手，以及如何在程序中最好地处理它们。我们将讨论如何构建时间戳对象，如何以及为什么使它们具备时区感知能力，以及如何处理可能遇到的边缘案例。
- en: '**The Problem of Missing Time Zones**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缺失时区的问题**'
- en: A timestamp without a time zone attached gives no useful information, because
    without the time zone, you cannot infer what point in time your application is
    really referring to. Without their respective time zones, therefore, you can’t
    compare two timestamps; that would be like comparing days of the week without
    accompanying dates—whether Monday is before or after Tuesday depends on what weeks
    they’re in. Timestamps without time zones attached should be considered irrelevant.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个时间戳没有附带时区信息，它就没有任何有用的信息，因为没有时区，你无法推断出应用程序实际上所指的时间点。因此，缺少时区的时间戳不能进行比较；这就像没有日期的星期几比较——是否周一在周二之前，取决于它们属于哪个星期。没有附带时区的时间戳应该视为无关紧要。
- en: For that reason, your application should never have to handle timestamps with
    no time zone. Instead, it must raise an error if no time zone is provided, or
    it should make clear what default time zone is assumed—for example, it’s common
    practice to choose UTC as the default time zone.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你的应用程序绝不应该处理没有时区的时间戳。如果没有提供时区，它必须抛出错误，或者明确假设默认时区——例如，选择UTC作为默认时区是一种常见做法。
- en: You also must be careful of making any kind of time zone conversion before *storing*
    your timestamps. Imagine a user creates a recurring event every Wednesday at 10:00
    AM in their local time zone, say Central European Time (CET). CET is an hour ahead
    of UTC, so if you convert that timestamp to UTC to store it, the event will be
    stored as every Wednesday at 09:00 AM. The CET time zone switches from UTC+01:00
    to UTC+02:00 in the summer, so on top of that, in the summer months, your application
    will compute that the event starts at 11:00 AM CET every Wednesday. You can see
    how this program quickly becomes redundant!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须小心在*存储*时间戳之前进行任何时区转换。假设某个用户在他们的本地时区（比如中欧时间 CET）每周三上午10:00创建一个重复事件。CET比UTC快一个小时，如果你将该时间戳转换为UTC并存储，那么事件将被存储为每周三上午09:00。CET时区在夏季从UTC+01:00切换到UTC+02:00，因此在夏季，应用程序会计算出每周三事件的开始时间为上午11:00
    CET。你可以看到，这个程序很快就变得冗余了！
- en: Now that you understand the general problem of handling time zones, let’s dig
    into our favorite language. Python comes with a timestamp object named `datetime.datetime`
    that can store date and time precise to the microsecond. The `datetime.datetime`
    object can be either time zone *aware*, in which case it embeds time zone information,
    or time zone *unaware*, in which case it does not. Unfortunately, the `datetime`
    API returns a time zone–unaware object by default, as you’ll soon see in [Listing
    4-1](ch04.xhtml#ch4list1). Let’s look at how to build a default timestamp object
    and then how to rectify it so that it uses time zones.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你理解了处理时区的一般问题，让我们深入了解我们最喜欢的编程语言。Python提供了一个名为`datetime.datetime`的时间戳对象，可以精确到微秒存储日期和时间。`datetime.datetime`对象可以是时区*感知*的，在这种情况下它会嵌入时区信息，或者是时区*无感知*的，在这种情况下它没有时区信息。不幸的是，`datetime`
    API默认返回一个无感知时区的对象，正如你将在[清单4-1](ch04.xhtml#ch4list1)中看到的那样。接下来我们来看看如何构建一个默认的时间戳对象，然后如何修正它，使其使用时区信息。
- en: '**Building Default datetime Objects**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建默认的datetime对象**'
- en: To build a `datetime` object with the current date and time as values, you can
    use the `datetime.datetime.utcnow()` function. This function retrieves the date
    and time for the UTC time zone right now, as shown in [Listing 4-1](ch04.xhtml#ch4list1).
    To build this same object using the date and time for the time zone of the region
    the machine is in, you can use the `datetime.datetime.now()` method. [Listing
    4-1](ch04.xhtml#ch4list1) retrieves the time and date for both UTC and my region’s
    time zone.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个带有当前日期和时间值的`datetime`对象，你可以使用`datetime.datetime.utcnow()`函数。这个函数会获取当前UTC时区的日期和时间，如[清单4-1](ch04.xhtml#ch4list1)所示。要使用机器所在地区时区的日期和时间来构建相同的对象，你可以使用`datetime.datetime.now()`方法。[清单4-1](ch04.xhtml#ch4list1)检索了UTC和我所在地区的时区的日期和时间。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 4-1: Getting the time of the day with datetime*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单4-1：使用datetime获取一天中的时间*'
- en: We import the `datetime` library and define the `datetime` object as using the
    UTC time zone. This returns a UTC timestamp whose values are year, month, date,
    hours, minutes, seconds, and microseconds ➊, respectively, in the listing. We
    can check whether this object has time zone information by checking the `tzinfo`
    object, and here we’re told that it doesn’t ➋.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`datetime`库，并将`datetime`对象定义为使用UTC时区。这将返回一个UTC时间戳，其值依次为年份、月份、日期、小时、分钟、秒和微秒
    ➊，如列表所示。我们可以通过检查`tzinfo`对象来检查这个对象是否包含时区信息，结果显示它没有 ➋。
- en: 'We then create the `datetime` object using the `datetime.datetime.now()` method
    to retrieve the current date and time in the default time zone for the region
    of the machine:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`datetime.datetime.now()`方法创建`datetime`对象，以检索当前机器区域的默认时区的日期和时间：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This timestamp, too, is returned without any time zone, as we can tell from
    the absence of the `tzinfo` field ➌—if the time zone information had been present,
    it would have appeared at the end of the output as something like `tzinfo=<UTC>`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个时间戳同样没有返回任何时区信息，正如我们从缺少`tzinfo`字段可以看出 ➌—如果时区信息存在，它会以类似`tzinfo=<UTC>`的形式出现在输出的末尾。
- en: The `datetime` API always returns unaware `datetime` objects by default, and
    since there is no way for you to tell what the time zone is from the output, these
    objects are pretty useless.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` API默认总是返回无时区感知的`datetime`对象，而且由于输出中无法判断时区信息，这些对象几乎没有什么用处。'
- en: Armin Ronacher, creator of the Flask framework, suggests that an application
    should always assume the unaware `datetime` objects in Python are UTC. However,
    as we just saw, this doesn’t work for objects returned by `datetime.datetime.now()`.
    When you are building datetime objects, I strongly recommend that you always make
    sure they are time zone aware. That ensures you can always compare your objects
    directly and check whether they are returned correctly with the information you
    need. Let’s see how to create time zone–aware timestamps using `tzinfo` objects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Flask框架的创始人Armin Ronacher建议，应用程序应始终假设Python中的`datetime`对象默认是UTC时区。然而，正如我们刚刚看到的，这对于由`datetime.datetime.now()`返回的对象并不适用。当你构建`datetime`对象时，我强烈建议你始终确保它们是时区感知的。这样可以确保你能够直接比较对象，并检查它们是否正确返回了所需的时区信息。接下来我们来看如何使用`tzinfo`对象创建时区感知的时间戳。
- en: '**BONUS: CONSTRUCT ING A DATETIME OB JECT FROM A DATE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加内容：从日期构建datetime对象**'
- en: You can also build your own `datetime` object with a particular date by passing
    the values you want for the different components of the day, as shown in [Listing
    4-2](ch04.xhtml#ch4list2).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过传递你想要的日期的各个组件的值来构建你自己的`datetime`对象，如[列表 4-2](ch04.xhtml#ch4list2)所示。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 4-2: Building your own `timestamp` object*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-2：构建你自己的`timestamp`对象*'
- en: '**Time Zone–Aware Timestamps with dateutil**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用dateutil实现时区感知的时间戳**'
- en: 'There are already many databases of existing time zones, maintained by central
    authorities such as IANA (Internet Assigned Numbers Authority), which are shipped
    with all major operating systems. For this reason, rather than creating our own
    time zone classes and manually duplicating those in each Python project, Python
    developers rely on the `dateutil` project to obtain `tzinfo` classes. The `dateutil`
    project provides the Python module `tz`, which makes time zone information available
    directly, without much effort: the `tz` module can access the operating system’s
    time zone information, as well as ship and embed the time zone database so it
    is directly accessible from Python.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前已经有很多现有的时区数据库，由IANA（互联网号码分配局）等中央机构维护，并且这些数据库已经包含在所有主要操作系统中。因此，Python开发者不需要创建自己的时区类并在每个Python项目中手动复制它们，而是依赖`dateutil`项目来获取`tzinfo`类。`dateutil`项目提供了Python模块`tz`，它直接提供时区信息，无需太多操作：`tz`模块可以访问操作系统的时区信息，并且可以携带和嵌入时区数据库，使得这些信息可以直接在Python中访问。
- en: 'You can install `dateutil` using `pip` with the command `pip install python-dateutil`.
    The `dateutil` API allows you to obtain a `tzinfo` object based on a time zone
    name, like so:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`pip`命令`pip install python-dateutil`来安装`dateutil`。`dateutil` API允许你基于时区名称获取一个`tzinfo`对象，示例如下：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `dateutil.tz.gettz()` method returns an object implementing the `tzinfo`
    interface. This method accepts various string formats as argument, such as the
    time zone based on a location (for example, “Europe/Paris”) or a time zone relative
    to GMT. The `dateutil` time zone objects can be used as `tzinfo` classes directly,
    as demonstrated in [Listing 4-3](ch04.xhtml#ch4list3).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`dateutil.tz.gettz()`方法返回一个实现`tzinfo`接口的对象。这个方法接受多种字符串格式作为参数，比如基于位置的时区（例如，“Europe/Paris”）或相对于GMT的时区。`dateutil`时区对象可以直接作为`tzinfo`类使用，如[列表
    4-3](ch04.xhtml#ch4list3)所示。'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 4-3: Using dateutil objects as tzinfo classes*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-3：使用dateutil对象作为tzinfo类*'
- en: 'As long as you know the name of the desired time zone, you can obtain a `tzinfo`
    object that matches the time zone you target. The `dateutil` module can access
    the time zone managed by the operating system, and if that information is for
    some reason unavailable, will fall back on its own list of embedded time zones.
    If you ever need to access this embedded list, you can do so via the `datetutil.zoneinfo`
    module:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你知道所需时区的名称，就可以获得与目标时区匹配的`tzinfo`对象。`dateutil`模块可以访问操作系统管理的时区，如果由于某种原因这些信息不可用，它将回退到其嵌入的时区列表。如果你需要访问这个嵌入的列表，可以通过`datetutil.zoneinfo`模块进行访问：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In some cases, your program does not know which time zone it’s running in, so
    you’ll need to determine it yourself. The `datetutil.tz.gettz()` function will
    return the local time zone of your computer if you pass no argument to it, as
    shown in [Listing 4-4](ch04.xhtml#ch4list4).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你的程序并不知道自己在哪个时区运行，因此你需要自己确定它。`datetutil.tz.gettz()`函数如果不传入参数，将返回你计算机的本地时区，如[列表
    4-4](ch04.xhtml#ch4list4)所示。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 4-4: Obtaining your local time zone*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-4：获取本地时区*'
- en: As you can see, we pass two dates to `localzone.tzname(datetime.datetime())`
    separately, and `dateutil` is able to tell us that one is in Central European
    Summer Time (CEST) and the other is in Central European Time (no summer). If you
    pass in your current date, you’ll get your own current time zone.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们分别将两个日期传递给`localzone.tzname(datetime.datetime())`，`dateutil`能够告诉我们一个是在中欧夏令时（CEST），另一个是在中欧时间（非夏令时）。如果你传入当前日期，你将得到你所在的当前时区。
- en: You can use objects from the `dateutil` library in `tzinfo` classes without
    having to bother implementing those yourself in your application. This makes it
    easy to convert unaware `datetime` objects to aware `datetime` objects.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`tzinfo`类中使用来自`dateutil`库的对象，而无需在应用程序中自己实现这些类。这使得将不具备时区信息的`datetime`对象转换为具备时区信息的`datetime`对象变得容易。
- en: '**IMPLEMENTING YOUR OWN TIME ZONE CLASSES**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**实现你自己的时区类**'
- en: 'A class exists in Python that allows you to implement time zone classes yourself:
    the `datetime.tzinfo` class is an abstract class that provides a base for implementing
    classes representing time zones. If you ever want to implement a class to represent
    a time zone, you need to use this as the parent class and implement three different
    methods:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中有一个类允许你自己实现时区类：`datetime.tzinfo` 类是一个抽象类，提供了实现表示时区的类的基础。如果你想实现一个表示时区的类，你需要使用它作为父类，并实现三个不同的方法：
- en: '`utcoffset(dt)`, which must return an offset from UTC in minutes east of UTC
    for the time zone'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utcoffset(dt)`，必须返回该时区相对于 UTC 的偏移量，以分钟为单位，表示从 UTC 向东的偏移。'
- en: '`dst(dt)`, which must return the daylight saving time adjustment in minutes
    east of UTC for the time zone'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dst(dt)`，必须返回该时区的夏令时调整，以 UTC 为基准，表示向东的分钟数。'
- en: '`tzname(dt)`, which must return the name of the time zone as a string'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tzname(dt)`，必须返回时区名称的字符串形式。'
- en: These three methods will embed a `tzinfo object`, allowing you to translate
    any time zone–aware `datetime` to another time zone.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种方法将嵌入一个 `tzinfo 对象`，允许你将任何带有时区信息的`datetime`转换为另一个时区。
- en: However, as mentioned, since time zone databases exist, it’s impractical to
    implement those time zone classes oneself.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如前所述，由于存在时区数据库，自己实现这些时区类是不实际的。
- en: '**Serializing Time Zone–Aware datetime Objects**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**序列化带时区信息的 datetime 对象**'
- en: You’ll often need to transport a `datetime` object from one point to another,
    where those different points might not be Python native. The typical case nowadays
    would be with an HTTP REST API, which must return `datetime` objects serialized
    to a client. The native Python method named `isoformat` can be used to serialize
    `datetime` objects for non-Python native points, as shown in [Listing 4-5](ch04.xhtml#ch4list5).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常需要将一个`datetime`对象从一个地方传输到另一个地方，而这些地方可能不是 Python 原生的。现在的典型情况是通过 HTTP REST
    API，它必须将`datetime`对象序列化并返回给客户端。Python 原生方法 `isoformat` 可以用来将`datetime`对象序列化到非
    Python 原生的地方，如 [示例 4-5](ch04.xhtml#ch4list5)所示。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 4-5: Serializing a time zone–aware datetime object*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 4-5：序列化带时区信息的 datetime 对象*'
- en: We define a new function called `utcnow` and tell it explicitly to return an
    object with the UTC time zone ➊. As you can see, the object returned now contains
    time zone information ➋. We then format the string using the ISO format ➌, ensuring
    the timestamp also contains some time zone information (the `+00:00` part).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个新的函数 `utcnow` 并明确告诉它返回一个带有 UTC 时区的对象 ➊。如你所见，现在返回的对象包含时区信息 ➋。然后我们使用 ISO
    格式 ➌ 格式化字符串，确保时间戳也包含一些时区信息（`+00:00` 部分）。
- en: You can see I’ve used the method `isoformat()` to format the output. I recommend
    that you always format your `datetime` input and output strings using ISO 8601,
    with the method `datetime.datetime.isoformat()`, to return timestamps formatted
    in a readable way that includes the time zone information.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我使用了 `isoformat()` 方法来格式化输出。我建议你始终使用 ISO 8601 格式来格式化你的`datetime`输入和输出字符串，使用方法
    `datetime.datetime.isoformat()`，以返回带有时区信息的可读格式的时间戳。
- en: Your ISO 8601–formatted strings can then be converted to native `datetime.datetime`
    objects. The `iso8601` module offers only one function, `parse_date`, which does
    all the hard work of parsing the string and determining the timestamp and time
    zone values. The `iso8601` module is not provided as a built-in module in Python,
    so you need to install it using `pip install iso8601`. [Listing 4-6](ch04.xhtml#ch4list6)
    shows how to parse a timestamp using ISO 8601.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 ISO 8601 格式字符串可以转换为原生的 `datetime.datetime` 对象。`iso8601` 模块只提供一个函数，`parse_date`，它完成了解析字符串并确定时间戳和时区值的所有繁重工作。`iso8601`
    模块不是 Python 的内置模块，所以你需要使用 `pip install iso8601` 来安装它。[示例 4-6](ch04.xhtml#ch4list6)展示了如何使用
    ISO 8601 解析时间戳。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 4-6: Using the iso8601 module to parse an ISO 8601–formatted timestamp*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 4-6：使用 iso8601 模块解析 ISO 8601 格式的时间戳*'
- en: In [Listing 4-6](ch04.xhtml#ch4list6), the `iso8601` module is used to construct
    a `datetime` object from a string. By calling `iso8601.parse_date` on a string
    containing an ISO 8601–formatted timestamp ➊, the library is able to return a
    `datetime` object. Since that string does not contain any time zone information,
    the `iso8601` module assumes that the time zone is UTC. If a time zone contains
    correct time zone information, the `iso8601` module returns correctly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表 4-6](ch04.xhtml#ch4list6)中，使用`iso8601`模块从字符串构造`datetime`对象。通过对包含ISO 8601格式时间戳的字符串
    ➊ 调用`iso8601.parse_date`，该库能够返回一个`datetime`对象。由于该字符串不包含任何时区信息，`iso8601`模块假设时区为UTC。如果字符串包含正确的时区信息，`iso8601`模块会正确返回结果。
- en: Using time zone–aware `datetime` objects and using ISO 8601 as the format for
    their string representation is a perfect solution for most problems around time
    zone, making sure no mistakes are made and building great interoperability between
    your application and the outside world.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用时区感知的`datetime`对象并将ISO 8601作为其字符串表示格式，是解决大多数时区问题的完美方案，确保不犯错误，并在你的应用程序与外部世界之间建立良好的互操作性。
- en: '**Solving Ambiguous Times**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**解决模糊时间**'
- en: There are certain cases where the time of the day can be ambiguous; for example
    during the daylight saving time transition when the same “wall clock” time occurs
    twice a day. The `dateutil` library provides us with the `is_ambiguous` method
    to distinguish such timestamps. To show this in action, we’ll create an ambiguous
    timestamp in [Listing 4-7](ch04.xhtml#ch4list7).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，时间可能是模糊的；例如在夏令时转换期间，同一“钟表”时间一天出现两次。`dateutil`库提供了`is_ambiguous`方法来区分此类时间戳。为了展示这一点，我们将在[列表
    4-7](ch04.xhtml#ch4list7)中创建一个模糊的时间戳。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 4-7: A confusing timestamp, occurring during the daylight saving time
    crossover*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-7：一个令人困惑的时间戳，发生在夏令时交替期间*'
- en: On the night of October 30, 2017, Paris switched from summer to winter time.
    The city switched at 3:00 AM, when the time goes back to 2:00 AM. If we try to
    use a timestamp at 2:30 on that date, there is no way for this object to be sure
    whether it is after or before the daylight saving time change.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年10月30日晚上，巴黎从夏令时切换到冬令时。切换发生在凌晨3:00，此时时间回拨至2:00 AM。如果我们尝试在该日期使用2:30的时间戳，这个对象无法确定它是在夏令时更改前还是后。
- en: However, it is possible to specify which side of the fold a timestamp is on
    by using the `fold` attribute, added to `datetime` objects from Python 3.6 by
    PEP 495 (Local Time Disambiguation—*[https://www.python.org/dev/peps/pep-0495/](https://www.python.org/dev/peps/pep-0495/)*).
    This attribute indicates which side of the fold the datetime is on, as demonstrated
    in [Listing 4-8](ch04.xhtml#ch4list8).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过使用`fold`属性，可以指定时间戳位于折叠的哪一侧，该属性通过PEP 495（本地时间消歧义—*[https://www.python.org/dev/peps/pep-0495/](https://www.python.org/dev/peps/pep-0495/)*）在Python
    3.6中被添加到`datetime`对象中。此属性指示datetime位于折叠的哪一侧，如[列表 4-8](ch04.xhtml#ch4list8)所示。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 4-8: Disambiguating the ambiguous timestamp*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 4-8：消除模糊的时间戳*'
- en: You’ll need to use this in only very rare cases, since ambiguous timestamps
    occur only in a small window. Sticking to UTC is a great workaround to keep life
    simple and avoid running into time zone issues. However, it is good to know that
    the `fold` attribute exists and that `dateutil` is able to help in such cases.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要在非常少见的情况下使用此方法，因为模糊时间戳只会出现在一个小的时间窗口内。坚持使用UTC是一个很好的解决方法，可以保持生活简单，避免时区问题。然而，了解`fold`属性的存在以及`dateutil`在这种情况下能够提供帮助，还是很有用的。
- en: '**Summary**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'In this chapter, we have seen how crucial it is to carry time zone information
    in time stamps. The built-in `datetime` module is not complete in this regard,
    but the `dateutil` module is a great complement: it allows us to get `tzinfo`-compatible
    objects that are ready to be used. The `dateutil` module also helps us solve subtle
    issues such as daylight saving time ambiguity.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到携带时区信息在时间戳中是多么重要。内置的`datetime`模块在这方面并不完备，但`dateutil`模块是一个很好的补充：它允许我们获取与`tzinfo`兼容的对象，这些对象已准备好使用。`dateutil`模块还帮助我们解决了如夏令时模糊性等细微问题。
- en: The ISO 8601 standard format is an excellent choice for serializing and unserializing
    timestamps because it is readily available in Python and compatible with any other
    programming language.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ISO 8601标准格式是序列化和反序列化时间戳的绝佳选择，因为它在Python中可以轻松使用，并与任何其他编程语言兼容。
