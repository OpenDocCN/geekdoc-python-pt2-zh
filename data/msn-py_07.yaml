- en: '**7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: MOVING INTO THE SPACE STATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**进入空间站**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Now that we’ve outfitted the space station with scenery, life support systems,
    and other equipment, it’s time to move in. In this chapter, you’ll see yourself
    in the space station for the first time, and you’ll be able to move around and
    explore the rooms. You might feel a bit stiff from the journey to begin with,
    but you’ll soon be walking all over the base.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为空间站配备了景观、生命支持系统和其他设备，是时候搬进来了。在这一章中，你将第一次看到自己在空间站的样子，并且能够四处走动，探索各个房间。刚开始你可能会因为旅途而感到有些僵硬，但很快你就会在基地里四处行走。
- en: You’ll discover how to animate the astronaut and use the keyboard controls to
    move them around. You’ll also add code to enable the astronaut to move between
    rooms. Is there life on Mars? There is now.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何给宇航员动画，并使用键盘控制让他们移动。你还将添加代码，使宇航员能够在房间之间移动。火星上有生命吗？现在有了。
- en: '**ARRIVING ON THE SPACE STATION**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**到达空间站**'
- en: We’ll use [Listing 6-6](ch06.xhtml#ch06list6) from [Chapter 6](ch06.xhtml#ch06)
    as a starting point in this chapter, so open *listing6-6.py*. We’ll add code to
    show you in your space suit in the space station. Eventually, you’ll be able to
    move around using the arrow keys.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中以[第6章](ch06.xhtml#ch06)的[清单 6-6](ch06.xhtml#ch06list6)为起点，因此请打开*listing6-6.py*。我们将添加代码，展示你穿着太空服的样子在空间站内。最终，你将能够使用箭头键进行移动。
- en: '**DISABLING THE ROOM NAVIGATION CONTROLS IN THE EXPLORER SECTION**'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**禁用探索者部分的房间导航控制**'
- en: So far, we’ve been using the arrow keys in the `EXPLORER` section to show different
    rooms on the map. We’re going to start using those keys to move the astronaut
    around the rooms. First, we need to disable the existing controls. Scroll down
    to the `EXPLORER` part of the program and highlight the instructions shown in
    [Listing 7-1](ch07.xhtml#ch07list1). Click **Format** ▸ **Comment Out Region**
    to turn those instructions into comments so the program will ignore them. (You
    can also just delete them if you prefer.) Save your program as *listing7-1.py*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用`EXPLORER`部分的箭头键来显示地图上的不同房间。现在我们将开始使用这些键来移动宇航员在房间内。首先，我们需要禁用现有的控制功能。向下滚动到程序中的`EXPLORER`部分，并高亮显示[清单
    7-1](ch07.xhtml#ch07list1)中的指令。点击**格式** ▸ **注释区域**，将这些指令变为注释，这样程序就会忽略它们。（如果你更喜欢，也可以直接删除它们。）将程序保存为*listing7-1.py*。
- en: '*listing7-1.py*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-1.py*'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 7-1: Turning off the keyboard controls in the* EXPLORER *section*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-1：禁用*EXPLORER*部分的键盘控制*'
- en: Now we can add code that uses the arrow keys to move the astronaut.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加代码，使用箭头键来移动宇航员。
- en: '**ADDING NEW VARIABLES**'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加新变量**'
- en: Let’s start by setting up some variables. The most important of these are your
    starting coordinates where you’ll teleport in. As before, we add variables to
    the `VARIABLES` part of the program, near the start. Add the new lines in [Listing
    7-2](ch07.xhtml#ch07list2). Save your program as *listing7-2.py*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置一些变量开始。最重要的变量是你传送进入的起始坐标。像之前一样，我们将变量添加到程序的`VARIABLES`部分，靠近程序的开始位置。在[清单
    7-2](ch07.xhtml#ch07list2)中添加新行。将程序保存为*listing7-2.py*。
- en: '*listing7-2.py*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-2.py*'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 7-2: Adding player variables*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-2：添加玩家变量*'
- en: The `VARIABLES` section already includes a value for `current_room`, which is
    the room you’ll start in. (If you changed the value of `current_room` while experimenting
    in [Chapter 6](ch06.xhtml#ch06), make sure you change it back to 31.) We make
    new `player_y` and `player_x` variables ➊ to contain numbers for your starting
    position in the room. Here, we’re setting up two variables in a single line. The
    numbers are put into the variables in the same order they’re listed, so `2` goes
    into `player_y` (the first number goes into the first variable), and `5` goes
    into `player_x`. These variables will change as you move around the rooms on the
    space station and will be used to check where you are and draw you in the correct
    place. Your position is measured using the same tile coordinates as for the scenery
    positions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`VARIABLES`部分已经包含了`current_room`的值，它是你开始时所在的房间。（如果你在[第6章](ch06.xhtml#ch06)中实验时更改了`current_room`的值，请确保将其改回31。）我们创建了新的`player_y`和`player_x`变量➊，用于存储你在房间中的起始位置的数字。这里，我们在一行中设置了两个变量。数字按它们的列出顺序放入变量中，所以`2`被放入`player_y`（第一个数字放入第一个变量），而`5`被放入`player_x`。这些变量会随着你在空间站中房间的移动而变化，并且将用于检查你的位置并在正确的地方绘制你。你的位置信息使用与景观位置相同的瓦片坐标来衡量。'
- en: We also set up a `game_over` variable ➋ to tell the program whether the game
    has ended. At the start of the program, we set the variable to `False`. It will
    stay `False` until the game ends and then become `True`. The program checks this
    variable to see whether the player is allowed to move. It would be odd if the
    player kept moving after they died!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了一个`game_over`变量 ➋ 用于告诉程序游戏是否已经结束。在程序开始时，我们将该变量设置为`False`。它会保持`False`，直到游戏结束后变为`True`。程序会检查这个变量，看看玩家是否可以继续移动。如果玩家在死后还继续移动，那就显得很奇怪了！
- en: Next, we’ll set up the images for the player’s walking animation. Animation
    is a trick of the eye. You start with a series of similar pictures with slight
    differences that show small movements. When you switch between them quickly, you
    can fool the eye into thinking the image is moving. In our game, we’ll use a series
    of images of the astronaut walking that show the legs in different positions.
    When we switch between them quickly, the astronaut’s legs will look like they’re
    moving.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置玩家的行走动画图像。动画是一种视觉技巧。你从一系列相似的图片开始，每张图片之间有细微的差别，展示了小的运动。当你快速切换这些图片时，可以欺骗眼睛，让它认为图像在移动。在我们的游戏中，我们将使用一系列宇航员行走的图片，展示宇航员腿部的不同位置。当我们快速切换这些图片时，宇航员的腿看起来就像在移动。
- en: '**TIP**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The key to making animation work is to make sure the images are similar enough.
    If the images are too different, the effect doesn’t work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使动画生效的关键是确保图像足够相似。如果图像差别太大，效果就无法实现。
- en: Each image in an animation is known as a *frame*. [Table 7-1](ch07.xhtml#ch07tab1)
    shows the animation frames we’ll use. We’ll number our frames starting at 0, which
    will be the resting position when the astronaut isn’t walking. When the player
    is walking up the screen, we see their back because they’re walking away from
    us in the room.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 动画中的每一张图片称为*帧*。[表 7-1](ch07.xhtml#ch07tab1)展示了我们将使用的动画帧。我们将从0开始编号帧，这将是宇航员不行走时的静止位置。当玩家向上走时，我们会看到他们的背面，因为他们是在背离我们走出房间。
- en: '**Table 7-1:** The Animation Frames for the Astronaut'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 7-1：** 宇航员的动画帧'
- en: '| **Key** | **Frame 0** | **Frame 1** | **Frame 2** | **Frame 3** | **Frame
    4** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **帧 0** | **帧 1** | **帧 2** | **帧 3** | **帧 4** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| `left` | ![image](../images/f0114-01.jpg) | ![image](../images/f0114-02.jpg)
    | ![image](../images/f0114-03.jpg) | ![image](../images/f0114-04.jpg) | ![image](../images/f0114-05.jpg)
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `left` | ![image](../images/f0114-01.jpg) | ![image](../images/f0114-02.jpg)
    | ![image](../images/f0114-03.jpg) | ![image](../images/f0114-04.jpg) | ![image](../images/f0114-05.jpg)
    |'
- en: '| `right` | ![image](../images/f0114-06.jpg) | ![image](../images/f0114-07.jpg)
    | ![image](../images/f0114-08.jpg) | ![image](../images/f0114-09.jpg) | ![image](../images/f0114-10.jpg)
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `right` | ![image](../images/f0114-06.jpg) | ![image](../images/f0114-07.jpg)
    | ![image](../images/f0114-08.jpg) | ![image](../images/f0114-09.jpg) | ![image](../images/f0114-10.jpg)
    |'
- en: '| `up` | ![image](../images/f0114-11.jpg) | ![image](../images/f0114-12.jpg)
    | ![image](../images/f0114-13.jpg) | ![image](../images/f0114-14.jpg) | ![image](../images/f0114-15.jpg)
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `up` | ![image](../images/f0114-11.jpg) | ![image](../images/f0114-12.jpg)
    | ![image](../images/f0114-13.jpg) | ![image](../images/f0114-14.jpg) | ![image](../images/f0114-15.jpg)
    |'
- en: '| `down` | ![image](../images/f0114-16.jpg) | ![image](../images/f0114-17.jpg)
    | ![image](../images/f0114-18.jpg) | ![image](../images/f0114-19.jpg) | ![image](../images/f0114-20.jpg)
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `down` | ![image](../images/f0114-16.jpg) | ![image](../images/f0114-17.jpg)
    | ![image](../images/f0114-18.jpg) | ![image](../images/f0114-19.jpg) | ![image](../images/f0114-20.jpg)
    |'
- en: The `PLAYER` dictionary ➌ stores the animation frames. The direction names—up,
    down, left, and right—are the dictionary keys. Each dictionary entry is a list
    that has the image of the player standing, plus four animation frames for that
    direction of walking (see [Table 7-1](ch07.xhtml#ch07tab1)). The `PLAYER` dictionary
    will be used together with the direction the player is facing ➍ and the number
    of the animation frame ➎ to display the correct image as the player walks or stands
    still. The `player_image` variable ➏ stores the current image of the astronaut.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`PLAYER` 字典 ➌ 存储动画帧。方向名称——上、下、左、右——是字典的键。每个字典条目是一个列表，其中包含玩家站立的图像，以及该方向行走的四个动画帧（参见[表
    7-1](ch07.xhtml#ch07tab1)）。`PLAYER` 字典将与玩家面朝的方向 ➍ 以及动画帧的编号 ➎ 一起使用，以在玩家行走或静止时显示正确的图像。`player_image`
    变量 ➏ 存储当前的宇航员图像。'
- en: '**TIP**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '[Appendix B](appb.xhtml#appb) at the back of the book describes the important
    variables in the *Escape* program, so look there if you can’t remember what a
    particular variable does.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录 B](appb.xhtml#appb) 在书的后面描述了*Escape*程序中的重要变量，如果你不记得某个变量的作用，可以去那里查看。'
- en: '**TELEPORTING ONTO THE SPACE STATION**'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**传送到太空站**'
- en: Get ready to beam down! With the starting coordinates in place, let’s add the
    code to make you appear in the space station.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好传送下去吧！有了起始坐标后，让我们添加代码让你出现在太空站上。
- en: '[Listing 7-3](ch07.xhtml#ch07list3) shows the lines you need to add to the
    `EXPLORER` part of the program. As before, you only need to add the new lines.
    Don’t change the other lines. Just use them to find your way around the program
    code. The first new line ➊ is indented by eight spaces because it’s inside a function
    and also inside a loop. Save your program as *listing7-3.py*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-3](ch07.xhtml#ch07list3) 显示了你需要添加到程序的 `EXPLORER` 部分的代码行。如前所述，你只需要添加新行，不要更改其他行。只需用它们来帮助你理解程序代码。第一行新代码
    ➊ 缩进了八个空格，因为它在一个函数内，且在一个循环内。将你的程序保存为 *listing7-3.py*。'
- en: '*listing7-3.py*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-3.py*'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 7-3: Drawing the player in the room*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-3：在房间中绘制玩家*'
- en: These new instructions draw you in the room. The `y` loop draws the room from
    back to front. The `x` loop draws the scenery in each row from left to right.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新指令会将你绘制在房间中。`y` 循环从后往前绘制房间。`x` 循环在每一行中从左到右绘制景物。
- en: After each row is drawn, the program checks whether the player is standing in
    that row ➊. This instruction should be lined up with the `for x in range(room_width)`
    line rather than indented further, because it’s not inside the `x` loop. It will
    run once, after the `x` loop has finished.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行绘制完成后，程序会检查玩家是否站在该行 ➊ 中。此指令应该与 `for x in range(room_width)` 行对齐，而不是进一步缩进，因为它不在
    `x` 循环内。它将在 `x` 循环完成后执行一次。
- en: If the player *is* in the row the program has just drawn, the next line ➋ puts
    the picture of the player into the variable `image_to_draw`. The image is taken
    from the `PLAYER` dictionary of animation frames, using the player’s direction
    and the animation frame number.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家*位于*程序刚绘制的那一行中，下一行 ➋ 会将玩家的图像放入变量 `image_to_draw` 中。图像来自 `PLAYER` 动画帧字典，使用玩家的方向和动画帧编号。
- en: The last new line ➌ draws the player using the `image_to_draw` variable you
    just set up, which contains the picture. It also uses the player’s *x* and *y*
    position variables to work out where to draw the image on the screen. [Chapter
    3](ch03.xhtml#ch03) explains how the position onscreen is calculated (see “[Working
    Out Where to Draw Each Item](ch03.xhtml#lev58)” on [page 56](ch03.xhtml#page_56)).
    The `player_offset_x` and `player_offset_y` variables were set up in [Listing
    7-2](ch07.xhtml#ch07list2) and are used to position the player partway between
    tiles as they walk between them. You’ll learn more about these variables shortly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行新代码 ➌ 使用你刚设置的 `image_to_draw` 变量绘制玩家图像，该变量包含图像。它还使用玩家的 *x* 和 *y* 位置变量来计算图像在屏幕上的绘制位置。[第
    3 章](ch03.xhtml#ch03) 解释了如何计算屏幕上的位置（见 “[计算绘制每个物品的位置](ch03.xhtml#lev58)” 第 56 页）。`player_offset_x`
    和 `player_offset_y` 变量在 [清单 7-2](ch07.xhtml#ch07list2) 中设置，用于在玩家走过瓷砖时将其部分位置放置在瓷砖之间。你稍后会了解更多关于这些变量的内容。
- en: Get ready to teleport! Brace yourself! Take a deep breath.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好传送吧！做好准备！深呼吸。
- en: Run your program using pgzrun listing7-3.py. If your teleportation was successful,
    you should be on the space station (see [Figure 7-1](ch07.xhtml#ch07fig1)). If
    not, check the program changes you made in this chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pgzrun 运行你的程序 listing7-3.py。如果传送成功，你应该在太空站上（见 [图 7-1](ch07.xhtml#ch07fig1)）。如果没有，检查你在本章中所做的程序更改。
- en: One side effect of teleporting is that at first you can’t move. As we add more
    code, you’ll find that the side effect wears off.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 传送的一个副作用是，刚开始你无法移动。随着代码的增加，你会发现这个副作用会逐渐消失。
- en: '![image](../images/fig7-1.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig7-1.jpg)'
- en: '*Figure 7-1: The astronaut arrives!*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：宇航员到达了！*'
- en: '**ADDING THE MOVEMENT CODE**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加移动代码**'
- en: Now we’ll add a totally new section called `GAME LOOP`. This is the heart of
    the program. The `game_loop()` function will run several times a second and enable
    you to move. Later in the book, we’ll add more instructions here that enable you
    to do things with the objects you find.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个全新的部分，称为 `游戏循环`。这是程序的核心。`game_loop()` 函数将每秒运行多次，并允许你移动。稍后在书中，我们将在这里添加更多指令，让你可以与发现的物体进行交互。
- en: Add this new section between the `MAKE MAP` and `EXPLORER` sections. [Listing
    7-4](ch07.xhtml#ch07list4) shows you what it looks like. Save the program as *listing7-4.py*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个新部分添加到 `MAKE MAP` 和 `EXPLORER` 部分之间。[清单 7-4](ch07.xhtml#ch07list4) 会展示它的样子。将程序保存为
    *listing7-4.py*。
- en: '*listing7-4.py*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-4.py*'
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 7-4: Adding player movement*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-4：添加玩家移动*'
- en: At the very end of the program, you also need to add a new section called `START`,
    which will make the `game_loop()` function run every 0.03 seconds. [Listing 7-5](ch07.xhtml#ch07list5)
    shows you the lines to add. This instruction isn’t indented, because it doesn’t
    belong to a function. Python runs the instructions that *aren’t* inside a function
    in the order they appear in the program, from top to bottom. This instruction
    runs after all the variables, map, scenery, and prop data have been set up and
    the functions have been defined in the instructions above. Save your program as
    *listing7-5.py*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的最后，你还需要添加一个名为`START`的新部分，它将使`game_loop()`函数每0.03秒运行一次。[清单 7-5](ch07.xhtml#ch07list5)展示了你需要添加的行。这条指令没有缩进，因为它不属于任何函数。Python会按照程序中出现的顺序从上到下执行不在函数中的指令。这条指令会在所有变量、地图、景物和道具数据被设置好，并且函数在上面被定义之后执行。将你的程序保存为*listing7-5.py*。
- en: '*listing7-5.py*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-5.py*'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 7-5: Setting the* game_loop() *function to run regularly*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-5：使* game_loop() *函数定期运行*'
- en: Run the program using pgzrun listing7-5.py. You should be in the room (as shown
    in [Figure 7-1](ch07.xhtml#ch07fig1)) and be able to move using the arrow keys!
    You might notice your legs disappear when you walk up the screen. This is a side
    effect of teleportation that will wear off when we improve the code for drawing
    rooms in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pgzrun运行程序，命令为listing7-5.py。你应该已经在房间里（如[图 7-1](ch07.xhtml#ch07fig1)所示），并且能够使用箭头键进行移动！你可能会注意到当你向上走时，你的腿会消失。这是瞬移的副作用，当我们在[第8章](ch08.xhtml#ch08)改进绘制房间的代码时，这个问题会消失。
- en: At this point, the program won’t work properly if you walk out the door, but
    it should stop you from walking through walls or furniture. If you *can* walk
    through objects, double-check the new code you just added. If you still have problems,
    carefully check the line that sets up the `items_player_may_stand_on` list at
    the end of the `OBJECTS` part of the program.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果你走出房间，程序可能不会正常工作，但它应该能阻止你穿过墙壁或家具。如果你*能够*穿过物体，请再次检查你刚刚添加的代码。如果仍然有问题，仔细检查在程序的`OBJECTS`部分末尾设置`items_player_may_stand_on`列表的那一行。
- en: '**UNDERSTANDING THE MOVEMENT CODE**'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**理解运动代码**'
- en: If you want to play the game and customize it with your own designs, you don’t
    need to understand how the code in this chapter works. You can simply replace
    the images and the data for maps, scenery, and props. This movement code, and
    the code for moving between rooms, which you’ll add later in this chapter, should
    keep working. However, if you want to understand how the code works and want to
    see how you could add animation to your programs, I’ll break it down now. This
    code is the real engine of the game, so in many ways it’s the most exciting bit!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想玩这个游戏并自定义它的设计，你不需要理解本章节中的代码是如何工作的。你只需要替换图像和地图、景物及道具的数据。这段运动代码，以及你将在本章节稍后添加的在房间间移动的代码，应该仍然能够正常运行。然而，如果你想理解这些代码是如何工作的，并且希望了解如何为程序添加动画效果，我现在会详细解释。这段代码是游戏的真正引擎，所以在很多方面，它是最令人兴奋的部分！
- en: If you’re getting a sense of déjà vu, it’s because you’ve already seen much
    of this code. In [Chapter 2](ch02.xhtml#ch02), for your spacewalk, you used code
    to change the player’s position using keyboard controls and a function called
    `game_loop()` to control movement. Let’s refresh our memories and see what’s new
    in [Listing 7-4](ch07.xhtml#ch07list4).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一种似曾相识的感觉，那是因为你已经见过大部分代码。在[第2章](ch02.xhtml#ch02)中，你使用代码通过键盘控制改变玩家的位置，并使用名为`game_loop()`的函数控制运动。让我们回顾一下，并看看[清单
    7-4](ch07.xhtml#ch07list4)中的新内容。
- en: In [Listing 7-4](ch07.xhtml#ch07list4), we define a function called `game_loop()`
    ➊ at the start of this new section. The `clock.schedule_interval()` function we
    added at the end of the program (see [Listing 7-5](ch07.xhtml#ch07list5)) makes
    this `game_loop()` function run every 0.03 seconds. Each time the `game_loop()`
    function runs, it checks whether you’ve pressed an arrow key or are walking and,
    if so, updates your position.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 7-4](ch07.xhtml#ch07list4)中，我们在这个新章节的开始定义了一个名为`game_loop()`的函数➊。我们在程序末尾添加的`clock.schedule_interval()`函数（见[清单
    7-5](ch07.xhtml#ch07list5)）让`game_loop()`函数每0.03秒执行一次。每次`game_loop()`函数运行时，它会检查你是否按下了箭头键或正在行走，如果是，它会更新你的当前位置。
- en: At the start of `game_loop()`, we tell Python which variables are global variables
    ➋ (see “[Understanding the Spacewalk Listing](ch01.xhtml#lev30)” on [page 27](ch01.xhtml#page_27)
    for a refresher on why we need to do this). Some of these aren’t used yet, but
    we’ll need them later.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `game_loop()` 开始时，我们告诉 Python 哪些变量是全局变量 ➋（如需复习为什么要这样做，请参考 “[理解太空漫步示例](ch01.xhtml#lev30)”
    在 [第27页](ch01.xhtml#page_27)）。这些变量有些目前还未使用，但稍后会用到。
- en: Then we check the `game_over` variable. If it’s set to `True` ➌, the `game_loop()`
    function finishes without running any of its other instructions because the game
    is over. This variable stops the player from moving when the game ends. For now,
    it won’t do anything, because nothing in our program causes the game to end.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查 `game_over` 变量。如果它被设置为 `True` ➌，`game_loop()` 函数将结束，不再执行其余的指令，因为游戏已经结束。这个变量会在游戏结束时阻止玩家继续移动。目前它不会起作用，因为程序中没有任何部分会导致游戏结束。
- en: The `game_loop()` function checks whether the player is already walking ➍. It
    takes four animation frames to walk one tile across the screen. If the player
    is moving, the `player_frame` variable contains a number between 1 and 4, which
    represents the animation frame being used. If the player is walking, the program
    increases the `player_frame` variable by 1 to move to the next animation frame.
    That means the `draw()` function in the `EXPLORER` section will show the next
    animation frame the next time it runs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`game_loop()` 函数检查玩家是否已经在行走 ➍。走一步需要四帧动画来跨越一个屏幕格子。如果玩家在移动，`player_frame` 变量的值在
    1 和 4 之间，表示当前使用的动画帧。如果玩家在行走，程序会将 `player_frame` 变量加 1，切换到下一个动画帧。这意味着 `EXPLORER`
    部分中的 `draw()` 函数将在下一次运行时显示下一个动画帧。'
- en: When `player_frame` reaches 5, it means all the animation frames have been shown
    and the animation has ended. In that case, the program resets `player_frame` to
    0 to end the animation. When the animation ends, the program also resets the `player_offset_x`
    and `player_offset_y` variables. I’ll tell you what these do in a minute.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `player_frame` 达到 5 时，意味着所有动画帧都已经显示完毕，动画结束。在这种情况下，程序将重置 `player_frame` 为 0，结束动画。当动画结束时，程序还会重置
    `player_offset_x` 和 `player_offset_y` 变量。我稍后会告诉你这些变量的作用。
- en: Next, we see whether the player has pressed a key to start a new walking animation.
    Before we let the player move, we save their current position ➎ by storing the
    *x* position in the variable `old_player_x` and the *y* position in the variable
    `old_player_y`. We will use these variables to move the player back if they try
    to walk somewhere they shouldn’t, such as into a wall pillar.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查玩家是否按下了某个键来启动新的行走动画。在允许玩家移动之前，我们通过将 *x* 位置存储在 `old_player_x` 变量中，并将
    *y* 位置存储在 `old_player_y` 变量中来保存他们的当前位置 ➎。我们将使用这些变量来将玩家移回原位，如果他们试图走到不该去的地方，例如走进墙壁或柱子里。
- en: The program then uses a familiar block of code to change the player’s *x* and
    *y* position variables if an arrow key is pressed ➏. We measure the player’s position
    in tiles, the same units we use for positioning the scenery. This is different
    from when we used pixels as the measurement in [Chapter 1](ch01.xhtml#ch01).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接着使用一段熟悉的代码来改变玩家的 *x* 和 *y* 位置变量，前提是玩家按下了箭头键 ➏。我们以格子为单位来衡量玩家的位置，这与我们用来定位场景的单位相同。这与我们在[第1章](ch01.xhtml#ch01)中使用像素作为度量单位不同。
- en: When the player presses the right arrow key, the program adds 1 to the *x* position.
    If the player presses the left arrow key, it subtracts 1\. We use similar code
    to change the *y* position if the player presses the up or down arrow keys.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家按下右箭头键时，程序会将 *x* 位置加 1。如果玩家按下左箭头键，程序会将 *x* 位置减 1。类似的代码用于在玩家按下上下箭头键时改变 *y*
    位置。
- en: When the player moves, the global variables `from_player_x` and `from_player_y`
    store the position the player is walking from. These variables will be used later
    to check whether the player has been hit by a hazard while walking. The `player_direction`
    variable is also set to the direction they’re moving, and the `player_frame` is
    set to 1, the first frame in the animation sequence.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家移动时，全局变量 `from_player_x` 和 `from_player_y` 存储玩家行走的起始位置。这些变量稍后将用于检查玩家在行走过程中是否被障碍物撞到。同时，`player_direction`
    变量也会被设置为玩家移动的方向，`player_frame` 设置为 1，即动画序列中的第一帧。
- en: As in [Chapter 1](ch01.xhtml#ch01), we use `elif` to combine our checks for
    a keypress. This ensures the player cannot change the *x* and *y* positions at
    the same time to move diagonally. In our 3D room, walking diagonally would enable
    the player to walk through obstacles, squeezing through impossible gaps.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第 1 章](ch01.xhtml#ch01)所示，我们使用`elif`来结合我们对按键的检查。这确保玩家不能同时改变*x*和*y*位置，从而进行对角线移动。在我们的3D房间中，对角线行走会让玩家穿过障碍物，挤过不可能的缝隙。
- en: After moving the player, we check whether the new position puts them somewhere
    they’re allowed to be ➐. We do this by using `room_map` to see what item is in
    the position they’re standing at and checking it against the list `items_player_may_stand_on`.
    There is some code I’ve commented out here too, which we’ll need to enable later
    to stop players from walking through hazards.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动玩家后，我们检查新位置是否把他们放在允许站立的地方 ➐。我们通过使用`room_map`查看他们站立位置的物品，并与`items_player_may_stand_on`列表进行比较来实现这一点。这里也有一些被注释掉的代码，我们稍后需要启用它来防止玩家穿越危险区域。
- en: We can use the keyword `in` to check whether something is in a list. By using
    the keyword `not` with it, we can see whether something is missing from a list.
    The following line means “If the number in the map where the player is standing
    isn’t in the list of items, the player is allowed to stand on . . .”
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用关键字`in`来检查某个元素是否在列表中。通过与`not`一起使用，我们可以看到某个元素是否缺失在列表中。以下代码的意思是：“如果玩家站立的地图位置中的数字不在物品列表中，玩家可以站立在……”
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the player is standing on something that isn’t in the `items_player_may_stand_on`
    list, we reset the player’s *x* and *y* positions to their position before they
    moved.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家站在不在`items_player_may_stand_on`列表中的物体上，我们会将玩家的*x*和*y*位置重置为他们移动前的位置。
- en: All of this happens so fast that the player doesn’t notice anything. If they
    try to walk into a wall, it looks like they never went anywhere! This is a simpler
    way of stopping the player from walking through walls than checking whether each
    movement is allowed before making it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些过程发生得非常快，以至于玩家几乎察觉不到。如果他们尝试走进墙壁，看起来就像他们从没移动过一样！这种方式比在每次移动前都检查是否允许更简单地防止玩家穿墙。
- en: The program also sets the `player_frame` variable to 0 if the player’s position
    must be reset ➑. This turns off the player animation again.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家的位置必须重置，程序还会将`player_frame`变量设置为0 ➑。这会再次关闭玩家的动画。
- en: When you press the right arrow key, the astronaut steps one tile to the right.
    It takes four frames to animate this, so the astronaut is displayed at positions
    that are partway across the tile while this animation plays out. The `player_offset_x`
    and `player_offset_y` variables are used to work out where to draw the astronaut.
    These variables are calculated at the end of the `game_loop()` function ➒. The
    `draw()` function (see [Listing 7-3](ch07.xhtml#ch07list3)) multiplies the offset
    values by the size of a tile (30 pixels) because images are drawn in pixels. For
    example, if the offset is 0.25 tiles, the astronaut is drawn roughly 7 pixels
    away from the center of the new tile. The computer will round the number because
    you can’t position something using half a pixel.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下右箭头键时，宇航员会向右走一个瓦片。这需要四个帧来动画化，因此在此动画播放过程中，宇航员会显示在瓦片的中途位置。`player_offset_x`和`player_offset_y`变量用于计算绘制宇航员的位置。这些变量是在`game_loop()`函数的末尾计算的
    ➒。`draw()`函数（见[列表 7-3](ch07.xhtml#ch07list3)）将偏移值乘以瓦片的大小（30像素），因为图像是以像素为单位绘制的。例如，如果偏移量是0.25瓦片，宇航员大约会被绘制在距离新瓦片中心7个像素的位置。计算机会四舍五入这个数值，因为你不能用半个像素来定位物体。
- en: Look at the left side of [Figure 7-2](ch07.xhtml#ch07fig2). For the first animation
    frame when the astronaut is walking left, we need to add three-quarters of a tile
    to the player’s new tile position (0.75). For the second animation frame, we add
    half a tile (0.5) to the player’s new tile position before drawing it. For the
    third animation frame, we add a quarter of a tile to the player’s new tile position.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[图 7-2](ch07.xhtml#ch07fig2)的左侧。对于宇航员向左行走的第一个动画帧，我们需要将四分之三的瓦片添加到玩家的新瓦片位置（0.75）。对于第二个动画帧，我们在绘制之前将半个瓦片（0.5）添加到玩家的新瓦片位置。对于第三个动画帧，我们将四分之一的瓦片添加到玩家的新瓦片位置。
- en: '![image](../images/fig7-2.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig7-2.jpg)'
- en: '*Figure 7-2: Understanding how the astronaut is positioned during the animation*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：理解宇航员在动画过程中的定位*'
- en: 'We can calculate these offset numbers using the frame number. Here’s the calculation
    for walking left:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过帧编号计算这些偏移量。以下是向左行走的计算方法：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Check that this calculation makes sense by working out the numbers on your
    own. For example, here is the calculation when the animation frame is 2:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自己算一算，检查这个计算是否合理。例如，当动画帧为2时，计算如下：
- en: 0.25 × 2 = 0.5
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 0.25 × 2 = 0.5
- en: 1 − 0.5 = 0.5
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 1 − 0.5 = 0.5
- en: In [Figure 7-2](ch07.xhtml#ch07fig2), 0.5 is the correct offset for frame 2.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 7-2](ch07.xhtml#ch07fig2)中，0.5是帧2的正确偏移量。
- en: When the player walks right, we need to subtract part of a tile from the player’s
    position, so the offsets are negative. Look at the right side of [Figure 7-2](ch07.xhtml#ch07fig2).
    For frame 1, adding −0.75 puts the astronaut three-quarters of a tile to the *left*
    of their new position.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家向右走时，我们需要从玩家的位置中减去一部分瓦片，因此偏移量是负数。请查看[图 7-2](ch07.xhtml#ch07fig2)的右侧。对于帧1，添加−0.75将宇航员放置在其新位置的*左侧*三分之四的位置。
- en: 'We can work out the *x* offset for walking right using the frame number too.
    Here’s the formula:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过帧编号来计算向右行走的* x *偏移量。这里是公式：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**TRAINING MISSION #1**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Can you check that the formula works? Use it to find the offset values for frames
    1 and 3, and check that they match the offset values in [Figure 7-2](ch07.xhtml#ch07fig2).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你能检查一下公式是否有效吗？使用它来查找帧1和帧3的偏移值，并检查它们是否与[图 7-2](ch07.xhtml#ch07fig2)中的偏移值相符。
- en: The offsets for the *y* direction work the same. When the astronaut is moving
    up, we calculate the *y* offset using the same formula as the left offset. When
    the astronaut is moving down, we calculate the *y* offset using the same formula
    as the right offset.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '* y *方向的偏移量计算方式相同。当宇航员向上移动时，我们使用与向左偏移量相同的公式计算* y *偏移量。当宇航员向下移动时，我们使用与向右偏移量相同的公式计算*
    y *偏移量。'
- en: 'In summary, the `game_loop()` function does this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，`game_loop()`函数的作用如下：
- en: If you’re not walking, it starts the walking animation when you press a key.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有在行走，按下一个键时会启动行走动画。
- en: If you are walking, it works out the next animation frame and the positions
    partway across the tile to use when drawing you.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在行走，它会计算下一个动画帧，以及在绘制你时用于部分跨越瓦片的位置信息。
- en: If you’ve reached the end of the animation sequence, it resets it so you can
    move again. The movement is fluid, so if you hold down a key, you’ll cycle through
    animation frames 1 to 4 and won’t see the standing position until you stop walking.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经到达动画序列的末尾，它会重置动画，这样你就可以继续移动了。移动非常流畅，所以如果你按住一个键，你将会在动画帧1到4之间循环，直到停止行走才会看到站立姿势。
- en: '**MOVING BETWEEN ROOMS**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**房间间移动**'
- en: Now that you’re on your feet, you’ll want to explore the space station fully.
    Let’s add some code to the `game_loop()` function that lets you walk into the
    next room. Add the new code in [Listing 7-6](ch07.xhtml#ch07list6), which goes
    after we check for keypresses and before we check whether the player is standing
    somewhere they shouldn’t be. Make sure you include the instructions with comment
    symbols (`#`) at the start. We’ll need them later.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经站起来了，应该完全探索一下空间站。让我们在`game_loop()`函数中添加一些代码，允许你走进下一个房间。把新代码添加到[清单 7-6](ch07.xhtml#ch07list6)中，位置是在检查按键之后和检查玩家是否站在不该站的位置之前。确保包括带有注释符号（`#`）的指令。我们稍后需要它们。
- en: The grayed-out lines in [Listing 7-6](ch07.xhtml#ch07list6) show you where to
    add the new code. Save your program as *listing7-6.py*. Run it using pgzrun listing7-6.py
    and then walk around the space station! This is a good time to look around, before
    the doors are fitted and certain areas are locked down.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-6](ch07.xhtml#ch07list6)中的灰色行告诉你在哪些地方添加新代码。将程序保存为*listing7-6.py*。使用pgzrun运行listing7-6.py，然后在空间站内四处走走！现在正是一个好时机，可以环顾四周，在门装上之前，某些区域尚未锁定。'
- en: '*listing7-6.py*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing7-6.py*'
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 7-6: Enabling the player to move between rooms*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-6：启用玩家在房间间移动*'
- en: To see how this code works, let’s use an example room map. [Figure 7-3](ch07.xhtml#ch07fig3)
    shows a room 9 tiles wide and 9 tiles high with exits on each wall. We’ll use
    this image to understand the player’s position when they’ve left the room.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看这段代码是如何工作的，让我们使用一个示例房间地图。[图 7-3](ch07.xhtml#ch07fig3)显示了一个9个瓦片宽和9个瓦片高的房间，每面墙都有出口。我们将使用这张图来理解玩家离开房间时的位置。
- en: 'As you know, the positions on the map are numbered starting at 0 in the top
    left. The yellow squares show where the player might be if they walked out of
    the room:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，地图上的位置从左上角的0开始编号。黄色方块表示玩家走出房间后可能的位置：
- en: If the player’s *y* position is −1, they’ve walked out of the top exit.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的* y *位置是−1，说明他们走出了顶部出口。
- en: If the player’s *x* position is −1, they’ve walked out of the left exit.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的* x *位置是−1，说明他们走出了左侧出口。
- en: If the player’s *y* position is the same as the `room_height` variable, they’ve
    walked out of the bottom. The tile positions are numbered starting at 0, so if
    the player goes into row 9 in a room that has 9 rows, they’ve already left the
    room.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家的* y *位置与`room_height`变量相同，他们已经走出了底部。瓦片位置从0开始编号，所以如果玩家进入了一个有9行的房间的第9行，他们已经离开了房间。
- en: Similarly, if the player’s *x* position is the same as the `room_width` variable,
    they’ve walked out of the right exit.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，如果玩家的* x *位置与`room_width`变量相同，则表示他们已经从右侧出口走了出去。
- en: '![image](../images/fig7-3.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig7-3.jpg)'
- en: '*Figure 7-3: Working out whether the player has walked through an exit*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：判断玩家是否走过出口*'
- en: The new code lines check whether the player position means they’ve walked out
    of the room. If the player’s *x* position is the same as `room_width` ➊, they’re
    outside the door on the right, as shown in [Figure 7-3](ch07.xhtml#ch07fig3).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 新的代码行检查玩家的位置是否意味着他们已经走出了房间。如果玩家的* x *位置与`room_width`相同 ➊，他们就在右侧门外，如[图 7-3](ch07.xhtml#ch07fig3)所示。
- en: 'When a player leaves the room, we need to change the number of the room they’re
    in, which is stored in the `current_room` variable. When they go through a door
    on the right, the room number increases by 1 ➋. Look at the room map again (flip
    back to [Figure 4-1](ch04.xhtml#ch04fig1) on [page 60](ch04.xhtml#page_60)) to
    see that this makes sense: room numbers increase from left to right. For example,
    if the player is in room 33 and walks through the exit on the right, they end
    up in room 34.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家离开房间时，我们需要改变他们所在的房间编号，这个编号保存在`current_room`变量中。当他们通过右侧门时，房间编号会增加1 ➋。再次查看房间地图（翻回[图
    4-1](ch04.xhtml#ch04fig1)在[第60页](ch04.xhtml#page_60)），以确认这一点：房间编号是从左到右递增的。例如，如果玩家在房间33中，走过右侧出口，他们将进入房间34。
- en: The program then generates a new `room_map` list ➌ to use in displaying and
    navigating the new room. The player is repositioned at the opposite side of the
    room ➍, so it looks like they’ve walked through the doorway. If the player exits
    to the right of the room, they enter the next room from the left ➍.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后程序生成一个新的`room_map`列表 ➌，用于显示和导航新房间。玩家被重新定位到房间的另一侧 ➍，看起来像是他们已经走过了门口。如果玩家从房间的右侧出口出去，他们将从左侧进入下一个房间
    ➍。
- en: Rooms are lots of different sizes, so we also need to change the player’s *y*
    position to put them in the middle of the doorway. Otherwise, the player might
    emerge from a wall! We set the player’s position to be half the height of the
    room ➎, which means they’re right in the middle of the doorway. When they enter
    the room, we reset the player animation, too ➏.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 房间有很多不同的大小，所以我们还需要改变玩家的* y *位置，将他们放置在门口的中央。否则，玩家可能会从墙壁里出来！我们将玩家的位置设置为房间高度的一半
    ➎，这样他们就正好站在门口的中央。当他们进入房间时，我们也会重置玩家动画 ➏。
- en: I’ve included a couple of features here that we’ll need later, so make sure
    you include the `clock.unschedule(hazard_move)` ➊ and `start_room()` ➐ instructions.
    The `start_room()` function will display the room name when the player enters
    a new room. We’ll talk about those instructions more later in the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里包含了几个我们稍后需要的功能，所以确保你包括了`clock.unschedule(hazard_move)` ➊和`start_room()`
    ➐指令。`start_room()`函数将在玩家进入新房间时显示房间名称。我们将在书中的后面部分进一步讨论这些指令。
- en: Finally, the `return` instruction exits the `game_loop()` function ➑. Any further
    instructions in the function won’t run this time around. When the function starts
    again, it will start from the top as usual.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`return`指令退出`game_loop()`函数 ➑。此时函数中的任何进一步指令都不会执行。当函数重新开始时，它将像往常一样从头开始。
- en: 'The next code block ➒ checks whether the player went through the left door.
    To go through the left door, the program does the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码块 ➒ 检查玩家是否走过左侧门。要通过左侧门，程序执行以下操作：
- en: Checks whether the `player_x` variable contains `-1` (see [Figure 7-3](ch07.xhtml#ch07fig3)).
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`player_x`变量是否包含`-1`（见[图 7-3](ch07.xhtml#ch07fig3)）。
- en: Subtracts 1 from the current room number to go into the room on the left.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从当前房间编号中减去1，进入左侧房间。
- en: Sets the player’s *x* position to be just inside the doorway on the right. This
    position is the `room_width` minus 1\. (You can check this in [Figure 7-3](ch07.xhtml#ch07fig3).
    In a room that has a `room_width` of 9, the player’s *x* position should be 8.)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将玩家的* x *位置设置为刚好位于右侧门口内部。这个位置是`room_width`减去1。（你可以在[图 7-3](ch07.xhtml#ch07fig3)中检查这一点。在一个`room_width`为9的房间中，玩家的*
    x *位置应该是8。）
- en: Sets the player’s *y* position to the middle using the `room_height`. This is
    the same approach as walking through the right exit.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`room_height`将玩家的*y*位置设置为中间。这与通过右侧出口行走的方式相同。
- en: The same code structure is used for the top and bottom exits ➓. However, the
    program checks the player’s *y* position to see if they used an exit and sets
    their new position to enter through a top or bottom doorway.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上下出口➓，使用了相同的代码结构。但是，程序会检查玩家的*y*位置，看看他们是否使用了出口，并将他们的新位置设置为通过上方或下方的门进入。
- en: This time, we change the room number by 5 instead of 1 because that’s how many
    rooms wide the game map is (see [Figure 4-1](ch04.xhtml#ch04fig1)). For example,
    if you’re in room 37 and you go through the top exit, you end up in room 32 (which
    is 37 minus 5). If you’re in room 37 and go through the bottom exit, you end up
    in room 42 (37 plus 5). We stored the number 5 in the variable `MAP_WIDTH` earlier,
    and the program uses it here.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们通过5来改变房间号，而不是1，因为游戏地图宽度是5个房间（见[图4-1](ch04.xhtml#ch04fig1)）。例如，如果你在房间37，走过上方出口，你将进入房间32（37减去5）。如果你在房间37，走过下方出口，你将进入房间42（37加上5）。我们之前将数字5存储在变量`MAP_WIDTH`中，程序在这里使用它。
- en: Now you’re able to freely explore the space station. In the next chapter, we’ll
    fix the remaining few bugs in the room display.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以自由探索空间站了。在下一章，我们将修复房间显示中的剩余几个错误。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞行了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框以确认你已经掌握了本章的关键知识点。
- en: '![Images](../images/box.jpg)  The player’s position in the *Escape* game is
    measured in tiles, just like the scenery.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  玩家在*逃脱*游戏中的位置是以格子为单位的，就像风景一样。'
- en: '![Images](../images/box.jpg)  The `game_loop()` function controls player movement
    and is scheduled to run every 0.03 seconds.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `game_loop()`函数控制玩家移动，并计划每0.03秒运行一次。'
- en: '![Images](../images/box.jpg)  If the player moves somewhere they aren’t allowed
    to be, they’re put back in their previous position so fast you won’t see them
    move.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  如果玩家移动到一个不允许的位置，他们会迅速被送回到之前的位置，快到你几乎看不见他们移动。'
- en: '![Images](../images/box.jpg)  The program checks the player’s *x* and *y* positions
    to see whether they’ve walked out of an exit. If they have, they’ll appear in
    the middle of the opposite exit in the next room.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  程序检查玩家的*x*和*y*位置，以查看他们是否已走出出口。如果是，他们将在下一个房间的相对出口中间出现。'
- en: '![Images](../images/box.jpg)  The animation frames are stored in the `PLAYER`
    dictionary and have a list of images for each direction. The dictionary key is
    the direction name, and an index number gets the particular frame needed.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  动画帧存储在`PLAYER`字典中，并为每个方向列出了图像。字典的键是方向名称，索引号获取所需的特定帧。'
- en: '![Images](../images/box.jpg)  Frame 0 is the standing-still position. Frames
    1, 2, 3, and 4 show the astronaut walking.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  帧0是静止位置。帧1、2、3和4显示宇航员行走的动画。'
- en: '![Images](../images/box.jpg)  The `game_loop()` function increases the animation
    frame number used when the player is walking.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `game_loop()`函数在玩家行走时增加使用的动画帧数。'
- en: '![Images](../images/box.jpg)  The `player_offset_x` and `player_offset_y` variables
    are used to position the astronaut correctly when walking into a new tile.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  `player_offset_x`和`player_offset_y`变量用于在进入新格子时正确地定位宇航员。'
- en: '![image](../images/f0126-01.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0126-01.jpg)'
