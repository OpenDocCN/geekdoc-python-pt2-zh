- en: '[8](nsp-venkitachalam503045-0008.xhtml#rch08)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[8](nsp-venkitachalam503045-0008.xhtml#rch08)'
- en: Autostereograms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动立体图
- en: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
- en: Stare at [Figure 8-1](nsp-venkitachalam503045-0021.xhtml#fig8-1) for a minute.
    Do you see anything other than random dots? [Figure 8-1](nsp-venkitachalam503045-0021.xhtml#fig8-1)
    is an *autostereogram*, a two-dimensional image that creates the illusion of three
    dimensions. Autostereograms usually consist of repeating patterns that resolve
    into three dimensions on closer inspection. If you can’t see any sort of image,
    don’t worry; it took me a while and a bit of experimentation before I could. (If
    you aren’t having any luck with the version printed in this book, try the color
    version in the *images* folder of the book’s GitHub repository. The footnote to
    the caption reveals what you should see.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好凝视[图8-1](nsp-venkitachalam503045-0021.xhtml#fig8-1)一分钟。你看到除了随机点以外的其他东西了吗？[图8-1](nsp-venkitachalam503045-0021.xhtml#fig8-1)是一个*自动立体图*，它是一个二维图像，能创造出三维的幻觉。自动立体图通常由重复的图案组成，经过仔细观察后会变成三维。如果你看不到任何图像，不用担心；我自己也花了一些时间和实验才看到。（如果你在书中打印的版本看不清楚，试试书的GitHub仓库中*images*文件夹里的彩色版本。图注的脚注会告诉你应该看到什么。）
- en: 'In this project, you’ll use Python to create autostereograms. Here are some
    of the concepts covered in this project:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，你将使用Python来创建自动立体图。以下是本项目中涉及的一些概念：
- en: • Linear spacing and depth perception
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 线性间距与深度感知
- en: • Depth maps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 深度图
- en: • Creating and editing images using `Pillow`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用`Pillow`创建和编辑图像
- en: • Drawing into images using `Pillow`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用`Pillow`在图像中绘制
- en: '![](images/nsp-venkitachalam503045-f08001.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08001.jpg)'
- en: 'Figure 8-1: A puzzling image that might gnaw at you[1](nsp-venkitachalam503045-0021.xhtml#fn1)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-1：一个可能让你头疼的难题[1](nsp-venkitachalam503045-0021.xhtml#fn1)
- en: The autostereograms you’ll generate in this project are designed for “wall-eyed”
    viewing. The best way to see them is to focus your eyes on a point behind the
    image (such as a wall). Almost magically, once you perceive something in the patterns,
    your eyes should automatically bring it into focus, and when the three-dimensional
    image “locks in,” you’ll have a hard time shaking it off. (If you’re still having
    trouble viewing the image, see Gene Levin’s article “How to View Stereograms and
    Viewing Practice”[2](nsp-venkitachalam503045-0021.xhtml#fn2) for help.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本项目中生成的自动立体图是为“斜视”观看设计的。查看这些图像的最佳方法是将眼睛聚焦于图像后面的一个点（例如墙壁）。几乎神奇的是，一旦你在图案中感知到某些东西，你的眼睛应该会自动将其聚焦，当三维图像“锁定”后，你将很难把它移除。（如果你仍然难以查看图像，可以参考Gene
    Levin的文章《如何观看立体图和观看练习》[2](nsp-venkitachalam503045-0021.xhtml#fn2)寻求帮助。）
- en: '[How It Works](nsp-venkitachalam503045-0008.xhtml#rah1001)'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[工作原理](nsp-venkitachalam503045-0008.xhtml#rah1001)'
- en: An autostereogram starts as an image with a repeating tiled pattern. The hidden
    3D image is embedded into it by changing the linear spacing between the repeating
    patterns, thereby creating the illusion of depth. When you look at repeating patterns
    in an autostereogram, your brain can interpret the spacing as depth information,
    especially if there are multiple patterns with different spacing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自动立体图从一个具有重复平铺图案的图像开始。通过改变重复图案之间的线性间距，将隐藏的3D图像嵌入其中，从而创造出深度的幻觉。当你在自动立体图中查看重复的图案时，大脑可以将这些间距解读为深度信息，特别是当有多个不同间距的图案时。
- en: '[Perceiving Depth in an Autostereogram](nsp-venkitachalam503045-0008.xhtml#rbh1001)'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[在自动立体图中感知深度](nsp-venkitachalam503045-0008.xhtml#rbh1001)'
- en: When your eyes converge at an imaginary point behind the image, your brain matches
    the points seen by your left eye with a different group seen by your right eye,
    and you see these points lying on a plane behind the image. The perceived distance
    to this plane depends on the amount of spacing in the pattern. For example, [Figure
    8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2) shows three rows of *A*s. The
    *A*s are equidistant within each row, but their horizontal spacing increases from
    top to bottom.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的眼睛聚焦于图像后面的一个假想点时，大脑会将左眼看到的点与右眼看到的不同组点进行匹配，从而使你看到这些点位于图像后的平面上。感知到的平面距离取决于图案中的间距。例如，[图8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)显示了三行*A*。这些*A*在每一行内的间距是相等的，但它们的水平间距从上到下逐渐增大。
- en: '![](images/nsp-venkitachalam503045-f08002.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08002.jpg)'
- en: 'Figure 8-2: Linear spacing and depth perception'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：线性间距与深度感知
- en: When this image is viewed “wall-eyed,” the top row in [Figure 8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)
    should appear to be behind the paper, the middle row should look like it’s a little
    behind the first row, and the bottom row should appear farthest from your eye.
    The text that says *floating text* should appear to “float” on top of these rows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当以“交叉眼”的方式查看此图像时，[图8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)中的最上面一行应该看起来位于纸张的后面，中间一行应该显得稍微在第一行的后面，最下面一行应该看起来离你的眼睛最远。标有*浮动文本*的文字应该看起来“漂浮”在这些行的上方。
- en: Why does your brain interpret the spacing between these patterns as depth? Normally,
    when you look at a distant object, your eyes work together to focus and converge
    at the same point, with both eyes rotating inward to point directly at the object.
    But when viewing a “wall-eyed” autostereogram, focus and convergence happen at
    different locations. Your eyes focus on the autostereogram, but your brain sees
    the repeated patterns as coming from the same virtual (imaginary) object, and
    your eyes converge on a point behind the image, as shown in [Figure 8-3](nsp-venkitachalam503045-0021.xhtml#fig8-3).
    This combination of decoupled focus and convergence allows you to see depth in
    an autostereogram.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你的大脑将这些图案之间的间距解释为深度？通常，当你看远处的物体时，你的眼睛会一起工作，对焦并向同一点汇聚，两只眼睛会向内旋转，直接指向物体。但当你查看“交叉眼”自动立体图时，焦点和汇聚发生在不同的位置。你的眼睛对焦于自动立体图，但大脑将重复的图案视为来自同一个虚拟（假想的）物体，而你的眼睛则汇聚在图像的后方，如[图8-3](nsp-venkitachalam503045-0021.xhtml#fig8-3)所示。这种焦点与汇聚解耦的组合使你能够在自动立体图中看到深度。
- en: '![](images/nsp-venkitachalam503045-f08003.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08003.jpg)'
- en: 'Figure 8-3: Seeing depth in autostereograms'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：在自动立体图中看到深度
- en: The perceived depth of the autostereogram depends on the horizontal spacing
    of pixels. Because the first row in [Figure 8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)
    has the closest spacing, it appears in front of the other rows. However, if the
    spacing of the points were varied in the image, your brain would perceive each
    point at a different depth, and you could see a virtual three-dimensional image
    appear.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自动立体图的感知深度取决于像素的水平间距。由于[图8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)中的第一行间距最小，它看起来位于其他行的前面。然而，如果图像中的点间距有所变化，大脑会感知每个点的不同深度，并且你可以看到一个虚拟的三维图像显现出来。
- en: '[Working with Depth Maps](nsp-venkitachalam503045-0008.xhtml#rbh1002)'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[与深度图一起工作](nsp-venkitachalam503045-0008.xhtml#rbh1002)'
- en: The hidden image in an autostereogram comes from a *depth map*, an image in
    which the value of each pixel represents a depth value, which is the distance
    from the eye to the part of the object represented by that pixel. A depth map
    is often shown as a grayscale image, with light areas for nearby points and darker
    areas for points farther away, as shown in [Figure 8-4](nsp-venkitachalam503045-0021.xhtml#fig8-4).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 自动立体图中的隐藏图像来自*深度图*，它是一种图像，其中每个像素的值表示深度值，即从眼睛到该像素所代表的物体部分的距离。深度图通常以灰度图像显示，靠近的点为亮色，远处的点为暗色，如[图8-4](nsp-venkitachalam503045-0021.xhtml#fig8-4)所示。
- en: '![](images/nsp-venkitachalam503045-f08004.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08004.jpg)'
- en: 'Figure 8-4: A depth map'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：深度图
- en: Notice that the nose of the shark, the lightest part of the image, seems closest
    to you. The darker area toward the tail seems farthest away. (By the way, the
    image in [Figure 8-4](nsp-venkitachalam503045-0021.xhtml#fig8-4) is the same depth
    map used to create the first autostereogram shown in [Figure 8-1](nsp-venkitachalam503045-0021.xhtml#fig8-1).)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到鲨鱼的鼻子，图像中最亮的部分，看起来离你最近。朝尾部延伸的较暗区域似乎最远。（顺便提一下，[图8-4](nsp-venkitachalam503045-0021.xhtml#fig8-4)中的图像与用于创建[图8-1](nsp-venkitachalam503045-0021.xhtml#fig8-1)中展示的第一个自动立体图的深度图相同。）
- en: Because the depth map represents the depth or distance from the center of each
    pixel to the eye, you can use it to get the depth value associated with a pixel
    location in the image. You know that horizontal shifts are perceived as depth
    in images. So if you shift a pixel in a (patterned) image proportionally to the
    corresponding pixel’s depth value, you would create a depth perception for that
    pixel consistent with the depth map. If you do this for all pixels, you’ll end
    up encoding the entire depth map into the image, creating an autostereogram.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于深度图表示的是从每个像素中心到眼睛的深度或距离，因此你可以用它来获取与图像中某个像素位置相关的深度值。你知道，水平位移在图像中被感知为深度。因此，如果你根据相应像素的深度值按比例移动图像中的某个像素，你将为该像素创建与深度图一致的深度感知。如果你对所有像素执行此操作，你将把整个深度图编码到图像中，从而创建出自动立体图。
- en: Depth maps store depth values for each pixel, and the resolution of the value
    depends on the number of bits used to represent it. Because you’ll be using common
    8-bit images in this chapter, depth values will be in the range [0, 255].
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 深度图存储每个像素的深度值，值的分辨率取决于用于表示它的位数。由于本章将使用常见的 8 位图像，深度值将位于 [0, 255] 范围内。
- en: 'For the purposes of this project, I’ve posted several example depth maps to
    the book’s GitHub repository. You can download the maps and use them as input
    for generating autostereograms. However, you may also want to try making your
    own depth maps to create some fancier images. There are two approaches you can
    take: using synthetic images created with 3D modeling software or using photographs
    taken with a smartphone camera.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本项目的目的，我已经将几个示例深度图上传到本书的 GitHub 仓库。你可以下载这些图像，并将它们作为生成自动立体图的输入。不过，你也可以尝试自己制作深度图，创造一些更有创意的图像。有两种方法可以选择：使用
    3D 建模软件创建的合成图像，或使用智能手机相机拍摄的照片。
- en: Creating Depth Maps from 3D Models
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从 3D 模型创建深度图
- en: If you create a 3D model of something using a 3D computer graphics program like
    Blender, you can also use the program to generate a depth map of the model. [Figure
    8-5](nsp-venkitachalam503045-0021.xhtml#fig8-5) shows an example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用像 Blender 这样的 3D 计算机图形程序创建了某个物体的 3D 模型，你也可以使用该程序生成该模型的深度图。[图 8-5](nsp-venkitachalam503045-0021.xhtml#fig8-5)展示了一个示例。
- en: '![](images/nsp-venkitachalam503045-f08005a.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08005a.jpg)'
- en: (a)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: (a)
- en: '![](images/nsp-venkitachalam503045-f08005b.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08005b.jpg)'
- en: (b)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: (b)
- en: 'Figure 8-5: A 3D model (a) and its associated depth map (b)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-5：3D 模型（a）及其对应的深度图（b）
- en: '[Figure 8-5(a)](nsp-venkitachalam503045-0021.xhtml#fig8-5) shows a 3D model
    rendered using Blender, and [Figure 8-5(b)](nsp-venkitachalam503045-0021.xhtml#fig8-5)
    shows the depth map created from this model. Search YouTube for “Blender depth
    map in 5 minutes!” for a tutorial[3](nsp-venkitachalam503045-0021.xhtml#fn3) from
    Jonty Schmidt on how to do this. The key is to color the image based on the Z-distance
    from the camera.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-5(a)](nsp-venkitachalam503045-0021.xhtml#fig8-5)展示了使用 Blender 渲染的 3D 模型，[图
    8-5(b)](nsp-venkitachalam503045-0021.xhtml#fig8-5)展示了从该模型创建的深度图。在 YouTube 上搜索“Blender
    深度图 5 分钟教程！”可以找到 Jonty Schmidt 的教程[3](nsp-venkitachalam503045-0021.xhtml#fn3)，介绍如何做到这一点。关键是根据从相机的
    Z 距离为图像着色。'
- en: Creating Depth Maps from Smartphone Photographs
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从智能手机照片创建深度图
- en: These days, many smartphone cameras have a *portrait mode*, which captures depth
    information along with the photograph to selectively blur out the background.
    If you could get hold of this depth data, you’d have a depth map of the photograph
    that you can use to create an autostereogram! [Figure 8-6](nsp-venkitachalam503045-0021.xhtml#fig8-6)
    shows an example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，许多智能手机相机都有 *人像模式*，它不仅拍摄照片，还记录深度信息，以便选择性地模糊背景。如果你能获取到这些深度数据，你将得到该照片的深度图，进而可以用来创建自动立体图！[图
    8-6](nsp-venkitachalam503045-0021.xhtml#fig8-6)展示了一个示例。
- en: '![](images/nsp-venkitachalam503045-f08006a.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08006a.jpg)'
- en: (a)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: (a)
- en: '![](images/nsp-venkitachalam503045-f08006b.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08006b.jpg)'
- en: (b)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: (b)
- en: 'Figure 8-6: A portrait mode photo (a) and depth map (b) from an iPhone 11 camera'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-6：iPhone 11 相机拍摄的人像模式照片（a）和深度图（b）
- en: '[Figure 8-6(a)](nsp-venkitachalam503045-0021.xhtml#fig8-6) shows a photograph
    taken in portrait mode with an iPhone 11, and [Figure 8-6(b)](nsp-venkitachalam503045-0021.xhtml#fig8-6)
    shows the corresponding depth map. The depth map was created with the open source
    software ExifTool using this command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-6(a)](nsp-venkitachalam503045-0021.xhtml#fig8-6)展示了使用 iPhone 11 拍摄的竖屏照片，[图
    8-6(b)](nsp-venkitachalam503045-0021.xhtml#fig8-6)展示了相应的深度图。深度图是通过开源软件 ExifTool
    和以下命令创建的：'
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command extracts the depth information from the metadata in the file *photo.jpg*
    and saves it to the file *depth.jpg*. Download ExifTool from [https://exiftool.org](https://exiftool.org)
    to try the process for yourself. The command works for photos from an iPhone,
    but you can use similar techniques to extract the depth data from images taken
    with other types of phones. There are also various apps available on the Android
    and iOS app stores that can help you with this. Here’s one online depth map extractor
    that works with portrait mode images from a variety of phone models: [http://www.hasaranga.com/dmap](http://www.hasaranga.com/dmap/).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令从文件 *photo.jpg* 的元数据中提取深度信息，并将其保存到文件 *depth.jpg* 中。可以从[https://exiftool.org](https://exiftool.org)下载ExifTool，自己尝试这个过程。该命令适用于iPhone的照片，但你也可以使用类似的技术从其他类型的手机拍摄的图像中提取深度数据。还有一些应用程序可在Android和iOS应用商店中找到，可以帮助你完成此操作。这里有一个在线深度图提取器，适用于多种手机型号拍摄的肖像模式图像：[http://www.hasaranga.com/dmap](http://www.hasaranga.com/dmap/)。
- en: '[Shifting Pixels](nsp-venkitachalam503045-0008.xhtml#rbh1003)'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[平移像素](nsp-venkitachalam503045-0008.xhtml#rbh1003)'
- en: We’ve looked at how our brains perceive the spacing between repeating elements
    in an image as depth information, and we’ve seen how depth information is conveyed
    through a depth map. Now let’s look at how to shift the pixels in a tiled image
    in proportion to the values in a depth map. This is the key step in creating an
    autostereogram.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了大脑如何将图像中重复元素之间的间距视为深度信息，并且我们已经看到深度信息是如何通过深度图传递的。现在让我们看看如何根据深度图中的值来平移瓷砖图像中的像素。这是创建自立体图像的关键步骤。
- en: 'A tiled image is created by repeating a smaller image (the tile) in the x-
    and y-directions, although for depth perception, we’re concerned only with the
    x-direction. If the tile that makes up the image is *w* pixels wide, you know
    the color values of the image’s pixels will repeat every *w* pixels in the x-direction
    for any given row. Put another way, the color of the pixel in some row at point
    *i* along the x-axis can be expressed as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 瓷砖图像是通过在x轴和y轴方向上重复一个较小的图像（即瓷砖）来创建的，但对于深度感知，我们只关心x轴方向。如果构成图像的瓷砖宽度为 *w* 像素，你知道图像的像素颜色值会在x轴的每一行中每隔
    *w* 像素重复一次。换句话说，某一行中位于x轴上 *i* 点的像素的颜色可以表示为：
- en: '*C*[i] = *C*[i] [−] [w] for *i* ≥ *w*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*C*[i] = *C*[i − w] 对于 *i* ≥ *w*'
- en: Let’s consider an example. Given a tile width of 100 pixels, for a pixel with
    an x-axis position of 140, the equation tells you that *C*[140] = *C*[140 − 100] = *C*[40].
    This means the color value of the pixel at x-position 140 is the same as that
    of the pixel at x-position 40, due to the repetition of the image. (For values of
    *i* less than *w* in the previous formula, the color is just *C*[i], since the
    tile hasn’t repeated yet.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。给定一个100像素宽度的瓷砖，对于一个x轴位置为140的像素，方程式告诉你 *C*[140] = *C*[140 − 100] =
    *C*[40]。这意味着x位置为140的像素的颜色值与x位置为40的像素相同，因为图像是重复的。（对于前面公式中小于*w*的*i*值，颜色就是 *C*[i]，因为瓷砖尚未重复。）
- en: 'The goal is to shift pixels in the tiled image according to the values in the
    depth map. Let δ[i] be the value at x-position *i* in the depth map. The shifted
    color value of the corresponding pixel in the tiled image is given by:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是根据深度图中的值来平移瓷砖图像中的像素。令 δ[i] 为深度图中x位置 *i* 的值。相应像素在瓷砖图像中的平移后的颜色值由以下公式给出：
- en: '![](images/nsp-venkitachalam503045-m08001.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m08001.jpg)'
- en: Returning to the example where the tile width is 100 pixels, given a pixel at
    x-position 140 and a corresponding depth map value of 10, the formula says that
    *C*[140] = *C*[140 − 100 + 10] = *C*[50]. Because of the depth map, the color
    of the pixel at position 140 should be changed to match the color of the pixel
    at position 50\. Since *C*[50] is the same as *C*[150], this is effectively taking
    the pixel at x-position 150 and shifting it 10 pixels to the left. As a result, the
    repetition between positions 50 and 150 has become 10 pixels narrower, and your
    brain will perceive this change as depth information.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到之前的例子，假设瓷砖宽度为100像素，给定一个x位置为140的像素以及一个对应的深度图值为10，公式表示 *C*[140] = *C*[140 −
    100 + 10] = *C*[50]。由于深度图，位置为140的像素的颜色应当改变为与位置50的像素颜色一致。由于 *C*[50] 与 *C*[150]
    相同，这实际上是将x位置为150的像素向左移动了10个像素。结果，位置50和150之间的重复变得10像素更窄，而你的大脑会将这一变化感知为深度信息。
- en: To create the complete autostereogram, you’ll repeat this shifting process across
    the width of the image and over all the rows. You’ll see how the shifting is actually
    implemented when you review the code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建完整的自视立体图，你将沿着图像的宽度和所有行重复这一移动过程。你可以在查看代码时看到如何实现这种移动。
- en: '[Requirements](nsp-venkitachalam503045-0008.xhtml#rah1002)'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[要求](nsp-venkitachalam503045-0008.xhtml#rah1002)'
- en: In this project, you’ll use `Pillow` to read in images, access their underlying
    data, and create and modify images.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，你将使用`Pillow`读取图像，访问它们的底层数据，并创建和修改图像。
- en: '[The Code](nsp-venkitachalam503045-0008.xhtml#rah1003)'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[代码](nsp-venkitachalam503045-0008.xhtml#rah1003)'
- en: 'The code for this project will follow these steps to create an autostereogram:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的代码将按照以下步骤创建自视立体图：
- en: 1\. Read in a depth map.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 读取深度图。
- en: 2\. Read in a tile image or create a “random dot” tile. This will serve as the
    basis for the autostereogram’s repeating pattern.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 读取图块图像或创建一个“随机点”图块。这将作为自视立体图的重复模式基础。
- en: 3\. Create a new image by repeating the tile. The dimensions of this image should
    match those of the depth map.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3\. 通过重复拼接图块创建一个新图像。该图像的尺寸应与深度图相匹配。
- en: 4\. For each pixel in the new image, shift the pixel by an amount proportional
    to the depth value associated with the corresponding pixel in the depth map.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4\. 对于新图像中的每个像素，根据深度图中对应像素的深度值，按比例移动该像素。
- en: 5\. Write the resulting autostereogram to a file.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5\. 将生成的自视立体图写入文件。
- en: To see the complete project, skip ahead to [“The Complete Code”](nsp-venkitachalam503045-0021.xhtml#ah1007)
    on [page 147](nsp-venkitachalam503045-0021.xhtml#p147). You can also download
    the full code listing for this chapter from [https://github.com/mkvenkit/pp2e/tree/main/autos](https://github.com/mkvenkit/pp2e/tree/main/autos).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看完整项目，请跳到[“完整代码”](nsp-venkitachalam503045-0021.xhtml#ah1007)部分，见[第147页](nsp-venkitachalam503045-0021.xhtml#p147)。你还可以从[https://github.com/mkvenkit/pp2e/tree/main/autos](https://github.com/mkvenkit/pp2e/tree/main/autos)下载本章的完整代码。
- en: '[Creating a Tile from Random Circles](nsp-venkitachalam503045-0008.xhtml#rbh1004)'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[从随机圆形创建图块](nsp-venkitachalam503045-0008.xhtml#rbh1004)'
- en: The user will have the option to provide a tile image at the start of the program
    (I’ve uploaded an image based on an M.C. Escher drawing to GitHub for this purpose).
    If one isn’t provided, create a tile with random circles using the `createRandomTile()`
    function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以选择在程序开始时提供一个图块图像（我已将一幅基于M.C. Escher画作的图像上传到GitHub以供使用）。如果没有提供，将使用`createRandomTile()`函数创建一个随机圆点图块。
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First you create a new Python Imaging Library (PIL) `Image` object with the
    dimensions given by `dims` ❶. Then you use `ImageDraw.Draw()` ❷ to draw circles
    inside the image with an arbitrarily chosen radius (`r`) of 1/100th of either
    the width or the height of the image, whichever is smaller ❸. (The Python `*`
    operator unpacks the width and height values in the `dims` tuple so that they
    can be passed into the `min()` method.)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建一个新的Python图像库（PIL）`Image`对象，其尺寸由`dims` ❶给出。然后使用`ImageDraw.Draw()` ❷在图像中绘制圆形，半径（`r`）任意选择为图像宽度或高度的1/100，取较小值
    ❸。（Python的`*`操作符解包`dims`元组中的宽度和高度值，以便将其传递给`min()`方法。）
- en: You set the number of circles to draw to `1000` ❹ and then calculate the x-
    and y-coordinates of the center of each circle by calling `random.randint()` to
    get random integers in the range [`r`, `width``-r`] and [`r`, `height``-r`] ❺.
    Offsetting the range by `r` ensures the generated circles will fall entirely inside
    the boundaries of the tile. Without it, you could end up drawing a circle right
    at the edge of the image, which means it would be partly cut off. If you tiled
    such an image to create the autostereogram, the result wouldn’t look good because
    the circles at the edge between two tiles would have no spacing between them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你设置绘制的圆形数量为`1000` ❹，然后通过调用`random.randint()`获取随机整数，计算每个圆形的中心点的x和y坐标，范围为[`r`,
    `width`-r]和[`r`, `height`-r] ❺。通过将范围偏移`r`，可以确保生成的圆形完全落在图块的边界内。如果不这样做，圆形可能会画到图像的边缘，导致部分被裁剪。如果你用这样的图像拼接生成自视立体图，结果看起来不好，因为两个图块之间的边缘处，圆形没有间隔。
- en: Next, you select a fill color for each circle by randomly choosing RGB values
    from the range [`0`, `255`] ❻. Finally, you use the `ellipse()` method in `draw`
    to draw each of your circles ❼. The first argument to this method is a tuple defining
    the bounding box of the circle, which is given by the top-left and bottom-right
    corners as (`x-r`, `y-r`) and (`x+r`, `y+r`), respectively, where (`x`, `y`) is
    the center of the circle and `r` is its radius. The other argument is the randomly
    chosen fill color.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你为每个圆选择一个填充颜色，方法是从 `[0`, `255`] 范围内随机选择 RGB 值❻。最后，你使用 `draw` 中的 `ellipse()`
    方法绘制每个圆❼。此方法的第一个参数是一个元组，定义了圆的边界框，由左上角和右下角的坐标 (`x-r`, `y-r`) 和 (`x+r`, `y+r`) 给出，其中
    (`x`, `y`) 是圆心，`r` 是圆的半径。另一个参数是随机选择的填充颜色。
- en: 'You can test this method in the Python interpreter as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Python 解释器中按如下方式测试此方法：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Figure 8-7](nsp-venkitachalam503045-0021.xhtml#fig8-7) shows the output from
    the test.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-7](nsp-venkitachalam503045-0021.xhtml#fig8-7)展示了测试的输出结果。'
- en: '![](images/nsp-venkitachalam503045-f08007.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08007.jpg)'
- en: 'Figure 8-7: A sample run of `createRandomTile()`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-7：`createRandomTile()` 的示例运行
- en: As you can see in [Figure 8-7](nsp-venkitachalam503045-0021.xhtml#fig8-7), you’ve
    created an image with random dots that you can use as the autostereogram’s tiled
    pattern.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[图 8-7](nsp-venkitachalam503045-0021.xhtml#fig8-7)中所见，你已经创建了一个带有随机点的图像，可以将其用作自动立体图的平铺图案。
- en: '[Repeating a Given Tile](nsp-venkitachalam503045-0008.xhtml#rbh1005)'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[重复给定的平铺图案](nsp-venkitachalam503045-0008.xhtml#rbh1005)'
- en: Now that you have a tile to work with, you can create an image by repeating
    that tile. This will form the basis of your autostereogram. Define a `createTiledImage()`
    function to do the work.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经有了一个平铺图案，可以通过重复该图案来创建图像。这将成为你的自动立体图的基础。定义一个`createTiledImage()`函数来完成这项工作。
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function takes in an image that will serve as the tiled pattern (`tile`),
    and the desired dimensions of the output image (`dims`). The dimensions are given
    as a tuple in the form (`width`, `height`). You create a new `Image` object using
    the supplied dimensions ❶. Next, you store the width and height of both the individual
    tile and the overall image. Dividing the overall image dimensions by those of
    the tile gives you the number of columns ❷ and rows ❸ of tiles you need to have
    in the image. You add 1 to each calculation to make sure that the last column
    of tiles on the right and the last row of tiles on the bottom aren’t missed when
    the output image dimension isn’t an exact integer multiple of the tile dimension.
    Without this precaution, the right and bottom of the image might be cut off. Finally,
    you loop through the rows and columns and fill them with tiles ❹. You determine the
    location of the top-left corner of the tile by multiplying `(j*w, i*h)` so it
    aligns with the rows and columns, just as you did in the photomosaic project.
    Once complete, the function returns an `Image` object of the specified dimensions,
    tiled with the input image `tile`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接收一张将作为平铺图案的图像（`tile`），以及输出图像的期望尺寸（`dims`）。尺寸以元组的形式给出，格式为（`width`，`height`）。你使用提供的尺寸创建一个新的`Image`对象❶。接下来，你存储了单个平铺图案和整个图像的宽度和高度。将整个图像的尺寸除以平铺图案的尺寸可以得到所需的列数❷和行数❸。你需要对每个计算结果加1，以确保当输出图像尺寸不是平铺图案尺寸的整数倍时，右侧的最后一列和底部的最后一行不会丢失。没有这一预防措施，图像的右边和底部可能会被裁剪。最后，你通过行和列循环，将其填充为平铺图案❹。你通过将
    `(j*w, i*h)` 相乘来确定平铺图案左上角的位置，这样它就能与行列对齐，就像你在摄影马赛克项目中做的那样。完成后，函数返回一个指定尺寸的`Image`对象，该对象已用输入图像`tile`进行平铺。
- en: '[Creating Autostereograms](nsp-venkitachalam503045-0008.xhtml#rbh1006)'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[创建自动立体图](nsp-venkitachalam503045-0008.xhtml#rbh1006)'
- en: 'Now let’s create some autostereograms. The `createAutostereogram()` function
    does most of the work. Here it is:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一些自动立体图。`createAutostereogram()` 函数完成大部分工作。代码如下：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First you convert the provided depth map (`dmap`) into a single-channel grayscale
    image if needed ❶. If the user doesn’t supply an image for the tile, you then
    create a tile of random circles using the `createRandomTile()` function you defined
    earlier ❷. Next, you use your `createTiledImage()` function to create a tiled
    image that matches the size of the supplied depth map image ❸. You then make a
    copy of this tiled image ❹. This copy will become the final autostereogram.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将提供的深度图（`dmap`）转换为单通道灰度图像（如有需要） ❶。如果用户没有提供平铺图像，你将使用之前定义的 `createRandomTile()`
    函数创建一个随机圆形的平铺 ❷。接下来，你使用 `createTiledImage()` 函数创建一个与提供的深度图像大小匹配的平铺图像 ❸。然后，你复制该平铺图像
    ❹。此副本将成为最终的自动立体图。
- en: The function continues by using the `Image.load()` method on the depth map and
    the output image ❺. This method loads image data into memory, allowing you to
    access an image’s pixels as a two-dimensional array in the form `[i, j]`. You
    store the image dimensions as a number of rows and columns ❻, treating the image
    as a grid of individual pixels.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接下来使用 `Image.load()` 方法加载深度图和输出图像 ❺。该方法将图像数据加载到内存中，使你可以将图像的像素作为二维数组 `[i, j]`
    来访问。你将图像尺寸存储为行数和列数 ❻，将图像视为一个像素网格。
- en: The core of the autostereogram creation algorithm lies in the way you shift
    the pixels in the tiled image according to the information gathered from the depth
    map. To do this, you iterate through the tiled image and process each pixel. First
    you look up the value of the corresponding pixel from the depth map and divide
    this value by 10 to determine a shift value for the tiled image ❼. You divide
    by 10 because you’re using an 8-bit depth map here, which means the depth varies
    from 0 to 255\. If you divide these values by 10, you get depth values in the
    approximate range of 0 to 25\. Since the depth map input image dimensions are
    usually in the hundreds of pixels, these shift values work fine. (Play around
    by changing the value you divide by to see how it affects the final image.)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 自动立体图生成算法的核心在于根据深度图信息调整平铺图像中的像素。为此，你需要遍历平铺图像并处理每个像素。首先，你查找深度图中对应像素的值，并将该值除以
    10，以确定平铺图像的位移值 ❼。除以 10 是因为这里使用的是 8 位深度图，这意味着深度值的范围是从 0 到 255。如果将这些值除以 10，你将得到大约在
    0 到 25 之间的深度值。由于深度图输入图像的尺寸通常是数百像素，这些位移值是可行的。（你可以通过改变除数来实验，看看它如何影响最终图像。）
- en: Next, you use the formula discussed in [“Shifting Pixels”](nsp-venkitachalam503045-0021.xhtml#bh1003)
    on [page 140](nsp-venkitachalam503045-0021.xhtml#p140) to calculate the x-axis
    coordinate to look for the pixel’s new color value ❽. Pixels with a depth map
    value of 0 (black) won’t be shifted and will be perceived as the background. After
    checking to make sure you’re not trying to access a pixel that’s not in the image
    (which can happen at the image’s edges because of the shift) ❾, you replace each
    pixel with its shifted value ❿.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你使用在 [“像素位移”](nsp-venkitachalam503045-0021.xhtml#bh1003) 中讨论的公式，在 [第 140
    页](nsp-venkitachalam503045-0021.xhtml#p140) 计算 x 轴坐标，以寻找像素的新颜色值 ❽。深度图值为 0（黑色）的像素将不会被位移，并将被视为背景。检查确保你没有试图访问图像中不存在的像素（因为位移可能会发生在图像的边缘）
    ❾，然后将每个像素替换为其位移后的值 ❿。
- en: '[Providing Command Line Options](nsp-venkitachalam503045-0008.xhtml#rbh1007)'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[提供命令行选项](nsp-venkitachalam503045-0008.xhtml#rbh1007)'
- en: The `main()` function of the program provides some command line options to customize
    the autostereogram.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的 `main()` 函数提供了一些命令行选项，用于自定义自动立体图。
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with previous projects, you define the command line options for the program
    using `argparse`. The one required argument is the name of the depth map file
    ❶. There are also two optional arguments, one to provide an image file to use
    as the tile pattern and the other to set the name of the output file. If a tile
    image isn’t specified, the program will generate a tile of random circles. If
    the output filename isn’t specified, the autostereogram is written to a file named
    *as.png*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的项目一样，你使用 `argparse` 来定义程序的命令行选项。唯一必需的参数是深度图文件的名称 ❶。还有两个可选参数，一个用于提供作为平铺模式的图像文件，另一个用于设置输出文件的名称。如果未指定平铺图像，程序将生成一个随机圆形平铺。如果未指定输出文件名，自动立体图将写入名为
    *as.png* 的文件。
- en: '[Running the Autostereogram Generator](nsp-venkitachalam503045-0008.xhtml#rah1004)'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[运行自动立体图生成器](nsp-venkitachalam503045-0008.xhtml#rah1004)'
- en: 'Now let’s run the program using a depth map of a stool (*stool-depth.png*),
    which you’ll find in the *data* folder of this project’s GitHub repository:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用一个凳子的深度图（*stool-depth.png*），它在这个项目的 GitHub 仓库中的 *data* 文件夹里，来运行程序：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Figure 8-8](nsp-venkitachalam503045-0021.xhtml#fig8-8) shows the depth map
    image on the left and the generated autostereogram on the right. Because you haven’t
    supplied a graphic for the tile, this autostereogram is created using random tiles.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-8](nsp-venkitachalam503045-0021.xhtml#fig8-8) 显示了左侧的深度图像和右侧生成的自动立体图。因为你没有为图块提供图像，所以这个自动立体图是通过随机图块生成的。'
- en: '![](images/nsp-venkitachalam503045-f08008.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08008.jpg)'
- en: 'Figure 8-8: A sample run of *autos.py*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-8：*autos.py* 的一次示例运行
- en: Now let’s give a tile image as input. Use the *stool-depth.png* depth map as
    you did earlier, but this time, supply the image *escher-tile.jpg* for the tiles.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们提供一个图块图像作为输入。使用之前提到的 *stool-depth.png* 深度图，但这次为图块提供图像 *escher-tile.jpg*。
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Figure 8-9](nsp-venkitachalam503045-0021.xhtml#fig8-9) shows the output.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-9](nsp-venkitachalam503045-0021.xhtml#fig8-9) 显示了输出结果。'
- en: '![](images/nsp-venkitachalam503045-f08009.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f08009.jpg)'
- en: 'Figure 8-9: A sample run of *autos.py* using tiles'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-9：使用图块的 *autos.py* 示例运行
- en: Enjoy creating moiré autostereograms using the images I’ve provided on GitHub
    or using your own depth maps!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 享受使用我在 GitHub 上提供的图像或你自己的深度图来创建莫尔纹自动立体图吧！
- en: '[Summary](nsp-venkitachalam503045-0008.xhtml#rah1005)'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[总结](nsp-venkitachalam503045-0008.xhtml#rah1005)'
- en: In this project, you learned how to create autostereograms. Given a depth map
    image, you can now create either a random dot autostereogram or one tiled with
    an image you supply.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你学习了如何创建自动立体图。从深度图像开始，你现在可以创建一个随机点的自动立体图，或者创建一个用你提供的图像拼贴的自动立体图。
- en: '[Experiments!](nsp-venkitachalam503045-0008.xhtml#rah1006)'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[实验！](nsp-venkitachalam503045-0008.xhtml#rah1006)'
- en: 'Here are some ways to further explore autostereograms:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些进一步探索自动立体图的方法：
- en: '1\. Write code to create an image similar to [Figure 8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)
    that demonstrates how changes in the linear spacing in an image can create illusions
    of depth. (Hint: use image tiles and the `Image.paste()` method.)'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1. 编写代码创建一个类似于[图 8-2](nsp-venkitachalam503045-0021.xhtml#fig8-2)的图像，演示图像中线性间距的变化如何产生深度的错觉。（提示：使用图像拼贴和
    `Image.paste()` 方法。）
- en: 2\. Add a command line option to the program to specify the scale to be applied
    to the depth map values. (Remember that the code divides the depth map value by
    10.) How does changing the value affect the autostereogram?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2. 向程序添加一个命令行选项，指定要应用于深度图值的缩放比例。（记住，代码会将深度图值除以10。）改变这个值会如何影响自动立体图？
- en: '[The Complete Code](nsp-venkitachalam503045-0008.xhtml#rah1007)'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[完整代码](nsp-venkitachalam503045-0008.xhtml#rah1007)'
- en: 'Here’s the complete autostereogram project code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的自动立体图项目代码：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[1](nsp-venkitachalam503045-0021.xhtml#fn1r) The hidden image is a shark.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[1](nsp-venkitachalam503045-0021.xhtml#fn1r) 隐藏的图像是鲨鱼。'
- en: '[2](nsp-venkitachalam503045-0021.xhtml#fn2r) [http://colorstereo.com/texts_.txt/practice.htm](http://colorstereo.com/texts_.txt/practice.htm)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[2](nsp-venkitachalam503045-0021.xhtml#fn2r) [http://colorstereo.com/texts_.txt/practice.htm](http://colorstereo.com/texts_.txt/practice.htm)'
- en: '[3](nsp-venkitachalam503045-0021.xhtml#fn3r) [https://www.youtube.com/watch?v=oqpDqKpOChE](https://www.youtube.com/watch?v=oqpDqKpOChE)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[3](nsp-venkitachalam503045-0021.xhtml#fn3r) [https://www.youtube.com/watch?v=oqpDqKpOChE](https://www.youtube.com/watch?v=oqpDqKpOChE)'
