- en: '**5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5  '
- en: 'JUPYTER NOTEBOOK: AN INTERACTIVE JOURNAL FOR COMPUTATIONAL RESEARCH**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JUPYTER NOTEBOOK：计算研究的交互式日志**
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: The classic Jupyter Notebook is the world’s most popular tool for data science.
    As a savable web-based application, Notebook lets you capture the entire computational
    process, from loading and exploring data to developing and executing code, and
    even documenting and presenting the results. It’s no wonder Notebook has become
    the default environment for code-based research.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的Jupyter Notebook是全球最流行的数据科学工具。作为一个可以保存的基于Web的应用程序，Notebook让你能够捕捉整个计算过程，从加载和探索数据到开发和执行代码，甚至记录和展示结果。难怪Notebook已成为基于代码的研究的默认环境。
- en: To paraphrase James Bednar, director of custom services at Anaconda, *notebooks
    tell stories*. They’re designed to capture and convey a code-based narrative that
    has a linear flow and is composed of small, human-digestible steps. They can include
    documentation that concisely and precisely explains what’s going on. This helps
    scientists, researchers, developers, and students generate *reproducible* code-based
    research.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 用Anaconda的定制服务总监James Bednar的话来说，*notebooks讲述故事*。它们旨在捕捉并传达一个基于代码的叙事，这个叙事有线性的流程，并由小而易于理解的步骤组成。它们可以包括简明且准确地解释发生了什么的文档。这帮助科学家、研究人员、开发者和学生生成*可重复*的基于代码的研究。
- en: Like a personal science journal, a Jupyter notebook can serve as a complete
    record of a computational session. To make your work more understandable and repeatable,
    you can interleave inputs and outputs with narrative text, mathematical formulas,
    images, links, and more. You can also share your notebooks directly or turn them
    into interactive slideshows or dashboards.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 像个人科学日志一样，Jupyter notebook可以作为一次计算会话的完整记录。为了让你的工作更易于理解和重复，你可以将输入和输出与叙述文本、数学公式、图片、链接等交织在一起。你还可以直接分享你的notebooks，或者将它们转换为互动幻灯片或仪表板。
- en: In this chapter, we delve into the details of Jupyter Notebook using the classic
    version. In the next chapter, we’ll look at the newer implementation in JupyterLab,
    the next-generation interface for Project Jupyter. Except for some slight rearrangement
    of the menus, the newer version works the same and uses the same file formats
    as classic Notebook. In fact, the two can be run side by side on the same computer,
    and JupyterLab even comes with a button for launching the classic version.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将深入探讨经典版本的Jupyter Notebook。下一章中，我们将介绍JupyterLab中的新版本，它是Project Jupyter的下一代界面。除了菜单的轻微重排，新版本的功能和经典Notebook一样，并且使用相同的文件格式。事实上，这两个版本可以在同一台计算机上并行运行，JupyterLab甚至配有一个按钮用于启动经典版本。
- en: '**NOTE**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In the pages that follow, Jupyter Notebook or Notebook (uppercase “N”) refers
    to the application, whereas Jupyter notebook or notebook (lowercase “n”) refers
    to an actual notebook file generated by the application. These files have a .ipynb
    extension, which is short for “IPython notebook.”*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*在接下来的页面中，Jupyter Notebook或Notebook（大写“N”）指的是应用程序，而Jupyter notebook或notebook（小写“n”）指的是应用程序生成的实际notebook文件。这些文件的扩展名为.ipynb，代表“IPython
    notebook”。*'
- en: To supplement this chapter, you can find a quick start guide at *[https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/](https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/)*
    and the full documentation at *[https://jupyter-notebook.readthedocs.io/en/stable/notebook.html](https://jupyter-notebook.readthedocs.io/en/stable/notebook.html)*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了补充这一章，你可以在*[https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/](https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/)*找到快速入门指南，并在*[https://jupyter-notebook.readthedocs.io/en/stable/notebook.html](https://jupyter-notebook.readthedocs.io/en/stable/notebook.html)*找到完整的文档。
- en: '**Installing Jupyter Notebook**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安装Jupyter Notebook**'
- en: Jupyter Notebook is an open source package that comes preinstalled in Anaconda’s
    *base* environment. However, it’s not a good idea to work on projects in *base*,
    as that can get messy. To keep your project packages organized, safe, and sharable,
    they need to be in dedicated conda environments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook是一个开源包，预装在Anaconda的*base*环境中。然而，在*base*环境中工作并不是一个好主意，因为那样会变得混乱。为了保持项目包的有序、安全和可共享，它们需要放在专门的conda环境中。
- en: To use Jupyter Notebook with conda environments, you have two main options.
    You can install Jupyter Notebook directly in each conda environment, or you can
    link each environment to the Notebook installation in the *base* environment.
    To mimic what we did with Spyder in [Chapter 4](ch04.xhtml), let’s call the first
    option the *naive* approach and the second the *modular* approach. Although the
    modular approach is generally recommended, if a project needs to lock down a specific
    version of Notebook, you’ll need to use the naive approach.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在conda环境中使用Jupyter Notebook，你有两种主要选择。你可以在每个conda环境中直接安装Jupyter Notebook，或者将每个环境链接到*base*环境中的Notebook安装。为了模仿我们在[第4章](ch04.xhtml)中使用Spyder的做法，我们将第一种选择称为*幼稚的做法*，第二种选择称为*模块化的做法*。虽然模块化的做法通常更为推荐，但如果一个项目需要锁定特定版本的Notebook，你将需要使用幼稚的做法。
- en: '***The Naive Approach***'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***幼稚的做法***'
- en: The naive approach is to install Jupyter Notebook directly in each of your conda
    environments. Notebook can then import and use any packages installed in the same
    environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幼稚的做法是直接在每个conda环境中安装Jupyter Notebook。然后，Notebook可以导入并使用同一环境中安装的任何包。
- en: This is the simplest approach, but it can become resource intensive over time
    as your *pkgs* folder becomes populated with different versions of Notebook. You
    might also struggle to keep all of the installations up to date and might not
    be able to see or switch to other environments from within Notebook.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的方法，但随着时间的推移，随着*pkgs*文件夹中不同版本的Notebook逐渐堆积，它可能会变得资源密集。你可能还会发现很难保持所有安装版本的更新，并且可能无法在Notebook中查看或切换到其他环境。
- en: '**Installing and Launching Jupyter Notebook Using Anaconda Navigator**'
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**通过Anaconda Navigator安装和启动Jupyter Notebook**'
- en: To install Jupyter Notebook in a new environment using Anaconda Navigator, first
    launch Navigator using the Start menu in Windows, or Launchpad in macOS, or by
    entering anaconda-navigator in a terminal in Linux. Then, in the Applications
    on pull-down menu near the top of the Home tab ([Figure 5-1](ch05.xhtml#ch05fig1)),
    activate the environment by selecting its name. In this example, we’re using *my_first_env*,
    created in [Chapter 2](ch02.xhtml). If you skipped this step in [Chapter 2](ch02.xhtml),
    see “Creating a New Environment” on [page 36](ch02.xhtml#ch00lev2sec19).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Anaconda Navigator在新环境中安装Jupyter Notebook，首先通过Windows中的开始菜单、macOS中的Launchpad，或者在Linux中通过终端输入anaconda-navigator启动Navigator。然后，在主页标签页顶部附近的下拉菜单中的“应用程序”（[图5-1](ch05.xhtml#ch05fig1)）中，选择该环境的名称以激活它。在这个示例中，我们使用的是[第2章](ch02.xhtml)中创建的*my_first_env*环境。如果你在[第2章](ch02.xhtml)中跳过了这一步，参见“创建新环境”部分，详见[第36页](ch02.xhtml#ch00lev2sec19)。
- en: '![Image](../images/05fig01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig01.jpg)'
- en: '*Figure 5-1: The Anaconda Navigator Home tab showing the active environment
    (my_first_env) and the Notebook tile*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-1：Anaconda Navigator主页标签，显示活动环境（my_first_env）和Notebook图块*'
- en: Next, find the **Jupyter Notebook** app tile and then click the **Install**
    button. You might need to scroll down the Home tab to find the tile. This will
    install the most current version of Notebook available from the top channel in
    your Channels listing, located near the top of the Home tab. If you want to install
    a specific version of Jupyter Notebook, click the “gear” icon at the upper right
    of the Notebook tile to see a listing of available version numbers (see [Figure
    5-1](ch05.xhtml#ch05fig1)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到**Jupyter Notebook**应用程序的图块，然后点击**安装**按钮。你可能需要向下滚动主页标签页才能找到该图块。这将安装来自顶部频道的最新版本的Notebook，频道列表位于主页标签页顶部附近。如果你想安装特定版本的Jupyter
    Notebook，可以点击Notebook图块右上角的“齿轮”图标，查看可用版本号的列表（见[图5-1](ch05.xhtml#ch05fig1)）。
- en: After a few moments, the Install button should change to a Launch button. This
    button starts a local web server on your computer that displays the Jupyter dashboard.
    Because it’s running locally, you don’t need an active internet connection. You’ll
    need to leave Navigator open, however, because it’s running the local server for
    Notebook that lets you interact with your web browser.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，安装按钮应该会变成启动按钮。此按钮会在你的计算机上启动一个本地Web服务器，显示Jupyter仪表盘。因为它是本地运行的，所以你不需要连接到互联网。不过，你需要保持Navigator打开，因为它正在运行本地服务器来支持Notebook的功能，让你能在浏览器中与之互动。
- en: '**Installing and Launching Jupyter Notebook Using the CLI**'
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**通过CLI安装和启动Jupyter Notebook**'
- en: To install Jupyter Notebook in a new environment using conda, first open Anaconda
    Prompt (in Windows) or a terminal (in macOS and Linux) and activate the conda
    environment. Let’s do this for *my_second_env* that we created in [Chapter 2](ch02.xhtml).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在新环境中使用conda安装Jupyter Notebook，首先打开Anaconda Prompt（Windows中）或终端（macOS和Linux中），并激活conda环境。让我们为[第2章](ch02.xhtml)中创建的*my_second_env*执行此操作。
- en: 'If you skipped this step in [Chapter 2](ch02.xhtml), create the environment
    using the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在[第2章](ch02.xhtml)中跳过了这一步，使用以下命令创建环境：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, activate the environment by entering:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过输入以下命令来激活环境：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, use conda to install Notebook:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用conda安装Notebook：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To install a specific version, such as 6.4.1, you would use this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装特定版本（例如6.4.1），可以使用以下命令：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To launch Notebook, enter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Notebook，输入：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This starts a local web server on your computer that displays the Jupyter dashboard.
    Because it’s running locally, you don’t need an active internet connection. You’ll
    need to leave your Prompt window or terminal open, however, because it’s running
    the local server for Notebook that lets you interact with your web browser.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在你的计算机上启动一个本地Web服务器，显示Jupyter仪表板。由于它是本地运行的，因此你不需要活动的互联网连接。不过，你需要保持提示窗口或终端打开，因为它在本地运行Notebook服务器，允许你与浏览器进行交互。
- en: '**NOTE**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*There are conda packages named notebook and jupyter. The notebook package
    is the classic Jupyter Notebook application. The larger jupyter package bundles
    Jupyter Notebook, Qt console, and IPython kernel.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*有名为notebook和jupyter的conda包。notebook包是经典的Jupyter Notebook应用程序，而更大的jupyter包则捆绑了Jupyter
    Notebook、Qt控制台和IPython内核。*'
- en: '***The Modular Approach***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***模块化方法***'
- en: The modular approach links each conda environment back to the Notebook package
    that was loaded in the *base* environment when you installed Anaconda. This approach
    is resource efficient, lets you easily keep the Notebook package up to date, and
    lets you see and choose among different environments from the same Notebook.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化方法将每个conda环境链接回安装Anaconda时在*base*环境中加载的Notebook包。这种方法资源高效，便于更新Notebook包，并能让你在相同的Notebook中查看和选择不同的环境。
- en: 'You can use the modular approach with either Navigator or the CLI. For simplicity,
    let’s use the CLI. Open Anaconda Prompt (in Windows) or a terminal (in macOS or
    Linux) and enter the following to create a new environment named *my_jupe_env*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用模块化方法，无论是通过Navigator还是CLI。为了简化，让我们使用CLI。在Anaconda Prompt（Windows中）或终端（macOS或Linux中）中输入以下命令来创建一个名为*my_jupe_env*的新环境：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Enter y when prompted to accept the installation. Next, activate the new environment:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时输入y以接受安装。接下来，激活新环境：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To link this environment with the Jupyter Notebook installation in the *base*
    environment, use the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此环境与*base*环境中的Jupyter Notebook安装链接，使用以下命令：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because we’re using the *ipykernel* package, we don’t need to explicitly install
    Python in the environment. However, if you do need to use a specific version of
    Python in your project, you’ll need to install it in the environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了*ipykernel*包，所以在环境中不需要显式安装Python。然而，如果你需要在项目中使用特定版本的Python，你需要在环境中安装它。
- en: 'Now, deactivate *my_jupe_env*, which returns you to *base*, and then install
    the *nb_conda_kernels* package (you’ll need to do this only once):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，停用*my_jupe_env*，这会将你返回到*base*环境，然后安装*nb_conda_kernels*包（你只需要做一次）：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The nb_conda_kernels package enables a Jupyter instance in an environment to
    automatically recognize any other environment that has the ipykernel package installed.
    It’s this combination of nb_conda_kernels in the *base* environment and ipykernel
    in other conda environments that allows you to use a single installation of Jupyter
    Notebook.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: nb_conda_kernels包使得在环境中的Jupyter实例能够自动识别任何其他安装了ipykernel包的环境。正是*base*环境中的nb_conda_kernels和其他conda环境中的ipykernel的组合，才允许你使用单一的Jupyter
    Notebook安装。
- en: 'To start Notebook from *base* you’ll need to enter this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要从*base*环境启动Notebook，你需要输入以下命令：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This starts a local web server on your computer that displays the Jupyter dashboard.
    Because it’s running locally, you don’t need an active internet connection. You’ll
    need to leave your Prompt window or terminal open, however, because it’s running
    the local server for Notebook that lets you interact with your web browser.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在你的计算机上启动一个本地Web服务器，显示Jupyter仪表板。由于它是本地运行的，因此你不需要活动的互联网连接。不过，你需要保持提示窗口或终端打开，因为它在本地运行Notebook服务器，允许你与浏览器进行交互。
- en: '**Your First Jupyter Notebook**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你的第一个Jupyter Notebook**'
- en: To begin, let’s work through an example. In this case, we’ll use a notebook
    to summarize the eruption cycle of the famous Old Faithful geyser in Yellowstone
    National Park. We’ll load some data, prepare it, plot it, and then add a decorative
    image.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过一个例子来进行操作。在这个例子中，我们将使用一个笔记本来总结著名的黄石公园老忠实间歇泉的喷发周期。我们将加载一些数据，进行准备，绘制图表，然后添加一张装饰性图片。
- en: If you launched Notebook in the previous sections, your browser opened a dashboard
    page like the one in [Figure 5-2](ch05.xhtml#ch05fig2). Shut it down now using
    the **Quit** button in the upper-right corner of the page, and then close the
    browser tab. If Navigator is open, close it by selecting **File** ▸ **Quit**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在前面的章节中启动了 Notebook，浏览器将打开一个像 [图 5-2](ch05.xhtml#ch05fig2) 中那样的仪表板页面。现在使用页面右上角的
    **Quit** 按钮关闭它，然后关闭浏览器标签。如果 Navigator 已经打开，通过选择 **文件** ▸ **退出** 来关闭它。
- en: '![Image](../images/05fig02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig02.jpg)'
- en: '*Figure 5-2: The Jupyter dashboard appears in your browser when you start Jupyter
    Notebook.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2：当你启动 Jupyter Notebook 时，Jupyter 仪表板会出现在你的浏览器中。*'
- en: 'Going forward, we’ll use the modular approach described in the previous section,
    so be sure to install the nb_conda_kernels package in your *base* environment
    if you haven’t done so already. To do this with the CLI, open Anaconda Prompt
    (Windows) or a terminal (macOS or Linux) and then activate *base*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用上一节中描述的模块化方法，所以如果你还没有安装 nb_conda_kernels 包，请确保在 *base* 环境中安装它。要通过 CLI
    执行此操作，请打开 Anaconda Prompt（Windows）或终端（macOS 或 Linux），然后激活 *base* 环境：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then enter the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下内容：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The notebook package ships with Anaconda, so it’s already in the *base* environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: notebook 包随 Anaconda 一起提供，因此它已经包含在 *base* 环境中。
- en: '***Creating Dedicated Project Folders***'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建专用项目文件夹***'
- en: Jupyter notebooks are saved to the folder from which you started the application.
    This means notebooks will tend to accumulate in your home or user directory. In
    addition, Anaconda uses dedicated folders to keep track of your installed packages
    and conda environments (see [Chapter 2](ch02.xhtml)). Although Anaconda is designed
    to work smoothly with this structure and help you navigate it, not everyone wants
    their project files scattered around their directory tree. As we discussed in
    the previous chapter, there are multiple benefits to keeping all your project
    files together in a single folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 笔记本会保存在你启动应用程序的文件夹中。这意味着笔记本通常会积累在你的主目录或用户目录中。此外，Anaconda 使用专用文件夹来跟踪你安装的包和
    conda 环境（参见 [第 2 章](ch02.xhtml)）。尽管 Anaconda 设计时就考虑到与这种结构的兼容性，并帮助你进行导航，但并非每个人都希望项目文件散落在目录树的各个位置。正如我们在前一章中讨论的，将所有项目文件保存在一个文件夹中有许多好处。
- en: For this project, let’s store the conda environment and Jupyter notebooks in
    a folder named *my_nb_proj*, short for “my notebook project.” I’ll create this
    in my user directory in Windows, and I suggest that you use a similar location
    on your system. Although you can do this through Anaconda Navigator, the command
    line is more succinct, so we’ll use that going forward.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，让我们将 conda 环境和 Jupyter 笔记本存储在一个名为 *my_nb_proj* 的文件夹中，*my_nb_proj* 是“我的笔记本项目”的缩写。我将在
    Windows 的用户目录中创建这个文件夹，建议你也在你的系统中使用类似的位置。虽然你可以通过 Anaconda Navigator 来操作，但命令行更简洁，所以我们接下来将使用命令行。
- en: 'To make the directories for the project, open Anaconda Prompt (in Windows)
    or a terminal (in macOS or Linux) and enter the following (using your own directory
    path):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要为项目创建目录，打开 Anaconda Prompt（在 Windows 中）或终端（在 macOS 或 Linux 中），然后输入以下内容（使用你自己的目录路径）：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This makes a *my_nb_proj* directory with *notebooks* and *data* subdirectories.
    Next, create a conda environment named *my_nb_proj_env* in the project directory,
    activate it, and install some libraries (substitute your own path where needed):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含 *notebooks* 和 *data* 子目录的 *my_nb_proj* 目录。接下来，在项目目录中创建一个名为 *my_nb_proj_env*
    的 conda 环境，激活它，并安装一些库（根据需要替换你自己的路径）：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As described previously, the ipykernel package lets you use the Jupyter Notebook
    application in the *base* environment. The pandas package is Python’s primary
    data analysis library, and seaborn is a plotting library that includes some useful
    datasets. (We look at these libraries in more detail later in the book.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，ipykernel 包让你可以在 *base* 环境中使用 Jupyter Notebook 应用程序。pandas 包是 Python 的主要数据分析库，seaborn
    是一个包含一些有用数据集的绘图库。（我们将在本书后续章节中更详细地介绍这些库。）
- en: At this point, your project directory structure should look like [Figure 5-3](ch05.xhtml#ch05fig3).
    Of course, with a real project, you might include additional folders for specific
    types of data, non-notebook scripts, miscellaneous items, and more.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你的项目目录结构应该类似于[图 5-3](ch05.xhtml#ch05fig3)。当然，实际项目中，你可能会包含其他文件夹，用于存储特定类型的数据、非笔记本脚本、杂项文件等。
- en: '![Image](../images/05fig03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig03.jpg)'
- en: '*Figure 5-3: Directory structure for my_nb_proj*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-3：我的*my_nb_proj*目录结构*'
- en: 'Jupyter Notebook likes to save to its current directory. The first time you
    save a file, it’s easiest if you start Notebook from within that folder. Afterward,
    you can launch Notebook from anywhere and still access the file. To launch Notebook
    in your new *notebooks* folder, first activate the *base* environment (where Jupyter
    Notebook is installed), and then use the `cd` command to change directories:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 喜欢保存到其当前目录。第一次保存文件时，如果你从该文件夹启动 Notebook，操作最为简便。之后，你可以从任何位置启动
    Notebook，并且仍然可以访问该文件。要在新的*notebooks*文件夹中启动 Notebook，首先激活*base*环境（其中安装了 Jupyter
    Notebook），然后使用`cd`命令切换目录：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because this folder is already in my user directory, I could have also used
    the relative path:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该文件夹已经在我的用户目录中，我也可以使用相对路径：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To start Notebook, enter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 Notebook，输入：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should now see the Jupyter dashboard in your browser.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能在浏览器中看到 Jupyter 仪表板。
- en: '***Navigating the Notebook Dashboard and User Interface***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***浏览笔记本仪表板和用户界面***'
- en: The Jupyter Notebook dashboard, also called the *Home page*, opens with an intuitive
    file explorer tab (see [Figure 5-4](ch05.xhtml#ch05fig4)). This tab displays notebook
    documents and other files in the directory from which you launched Notebook, known
    as the *current directory*. When you click a file or folder, you’re presented
    with standard options like duplicating, renaming, deleting, and so on. The dashboard
    also helps you to create new notebooks, exit the application, and manage currently
    running Jupyter processes and clusters used for parallel processing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 仪表板，也叫做*首页*，会打开一个直观的文件浏览器标签页（见[图 5-4](ch05.xhtml#ch05fig4)）。该标签页展示了从启动
    Notebook 的目录中打开的笔记本文档和其他文件，这个目录被称为*当前目录*。当你点击文件或文件夹时，会看到标准的选项，如复制、重命名、删除等。仪表板还帮助你创建新的笔记本、退出应用程序，并管理当前运行的
    Jupyter 进程和用于并行处理的集群。
- en: Because we launched Notebook from the empty *notebooks* folder, no files or
    folders are visible. Let’s fix that by creating a new notebook. Start by clicking
    the **New** button at the upper right of the Files tab to open a drop-down menu,
    as shown in [Figure 5-4](ch05.xhtml#ch05fig4).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们是从空的*notebooks*文件夹启动的 Notebook，所以没有文件或文件夹可见。让我们通过创建一个新笔记本来解决这个问题。首先，点击文件标签页右上角的**新建**按钮，打开下拉菜单，如[图
    5-4](ch05.xhtml#ch05fig4)所示。
- en: '![Image](../images/05fig04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig04.jpg)'
- en: '*Figure 5-4: Choosing a kernel from the Jupyter dashboard New menu*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-4：从 Jupyter 仪表板新菜单中选择内核*'
- en: The menu offers you a choice of kernels in the various conda environments you’ve
    created, including ones not in the default *envs* folder. It’s able to do this
    thanks to the nb_conda_kernels package installed in *base* and the ipykernel package
    installed in each environment. At the bottom of the list, you have other choices
    including creating a new text file, folder, or terminal.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单为你提供了在你创建的各种 conda 环境中选择内核的选项，包括那些不在默认*envs*文件夹中的内核。它能够做到这一点，因为安装了 nb_conda_kernels
    包在*base*环境中，并且每个环境中都安装了 ipykernel 包。在列表的底部，你还有其他选项，包括创建新文本文件、文件夹或终端。
- en: To activate the kernel in your *my_nb_proj* environment, select **Python [conda
    env:my_nb_proj_env]** from the list. This opens the notebook’s user interface
    (UI). The notebook UI is where you interactively build your notebook document.
    Its primary components are the menu bar, toolbar, and cells ([Figure 5-5](ch05.xhtml#ch05fig5)).
    I encourage you to take the quick interactive tour of these components by clicking
    **Help** ▸ **User Interface Tour** in the menu.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的*my_nb_proj*环境中激活内核，从列表中选择**Python [conda env:my_nb_proj_env]**。这将打开笔记本的用户界面（UI）。笔记本
    UI 是你交互式构建笔记本文档的地方。其主要组件包括菜单栏、工具栏和单元格（见[图 5-5](ch05.xhtml#ch05fig5)）。我鼓励你通过点击菜单中的**帮助**
    ▸ **用户界面导览**来快速体验这些组件。
- en: '![Image](../images/05fig05.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig05.jpg)'
- en: '*Figure 5-5: The notebook user interface*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-5：笔记本用户界面*'
- en: At the right side of the menu bar, you’ll see the active kernel and conda environment
    (*Python[conda env:my_nb_proj_env]*). If this is not the name you expect, you’re
    using packages from a different environment, which might not contain packages
    you need or their correct versions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单栏的右侧，你会看到活动内核和conda环境（*Python[conda env:my_nb_proj_env]*）。如果这不是你预期的名称，那么你正在使用来自其他环境的包，这些包可能不包含你需要的包或其正确的版本。
- en: The modular nature of Jupyter Notebook is the key to its success. It’s built
    of blocks, called *cells*, that can contain either code or “text” (such as headers,
    bulleted lists, images, and hyperlinks). Code cells can be run independently or
    all at once, and each has its own output area. This lets you break your computational
    problem into pieces and organize related ideas into cells. When you get a cell
    (or cells) working properly, you can move on. This is convenient for interactive
    exploration and is especially useful for long-running processes that you need
    to run only once per session.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook的模块化特性是其成功的关键。它由块组成，称为*单元格*，可以包含代码或“文本”（例如标题、项目符号列表、图片和超链接）。代码单元可以独立运行，也可以一起运行，每个单元都有自己的输出区域。这使你能够将计算问题分解为多个部分，并将相关的想法组织到不同的单元格中。当你让一个（或多个）单元格正常工作时，你就可以继续。这对于交互式探索非常方便，尤其适用于你只需要每个会话运行一次的长时间运行过程。
- en: '***Naming a Notebook***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***命名笔记本***'
- en: Let’s learn about the UI components and workflow by actively creating a notebook.
    First, give your new notebook a name by clicking **Untitled**, located just above
    the menu bar, entering **geyser** in the text box, and then clicking **Rename**
    ([Figure 5-6](ch05.xhtml#ch05fig6)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过主动创建一个笔记本来学习UI组件和工作流程。首先，通过点击位于菜单栏上方的**Untitled**，在文本框中输入**geyser**，然后点击**重命名**来为你的新笔记本命名（见[图
    5-6](ch05.xhtml#ch05fig6)）。
- en: '![Image](../images/05fig06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig06.jpg)'
- en: '*Figure 5-6: Renaming a notebook*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-6：重命名笔记本*'
- en: At this point, you should see a new file and folder appear in your project’s
    *notebooks* folder. The *geyser.ipynb* file is the notebook document. This is
    just a plaintext JSON file saved with a *.ipynb* extension. The *.ipynb_checkpoints*
    folder contains the *geyser-checkpoint.ipynb* file, which lets you restore your
    notebook back to a previous version.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该可以在项目的*notebooks*文件夹中看到一个新的文件和文件夹。*geyser.ipynb*文件是笔记本文档。这只是一个以*.ipynb*扩展名保存的纯文本JSON文件。*.ipynb_checkpoints*文件夹包含*geyser-checkpoint.ipynb*文件，它可以让你将笔记本恢复到之前的版本。
- en: You’ll also see the notebook file appear in your dashboard ([Figure 5-7](ch05.xhtml#ch05fig7)).
    If you click the box next to its name, you’ll launch a menu bar with options for
    working with the file, such as moving, renaming, and deleting it (the “trash can”
    icon).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会在仪表盘中看到笔记本文件出现（见[图 5-7](ch05.xhtml#ch05fig7)）。如果点击文件名旁边的框，你将启动一个菜单栏，提供操作文件的选项，例如移动、重命名和删除它（“垃圾桶”图标）。
- en: '![Image](../images/05fig07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig07.jpg)'
- en: '*Figure 5-7: The Jupyter dashboard with the file actions menu active*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-7：激活文件操作菜单的Jupyter仪表盘*'
- en: To open the geyser notebook in the future, just click the filename in the dashboard.
    The “book” icon will turn green to indicate an actively running notebook, and
    you can use the drop-down menu just above the filename to filter all running notebooks.
    Note that you can’t access notebook files that are outside (above) the root of
    the directory tree shown in the dashboard. The root directory is the directory
    from which you started Notebook.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要在以后打开geyser笔记本，只需在仪表盘中点击文件名。书籍图标会变绿，表示笔记本正在运行，你可以使用文件名上方的下拉菜单来筛选所有正在运行的笔记本。请注意，你无法访问仪表盘中目录树根目录（上层）的外部（更高层）笔记本文件。根目录是你启动Notebook时所在的目录。
- en: '***Adding Text with a Markdown Cell***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用Markdown单元添加文本***'
- en: Now let’s provide a descriptive header for the notebook, to let people know
    what it’s about and to cite the source of the geyser data. Click in the first
    cell, labeled `In [ ]:` on the left side. Next, on the toolbar, change the cell
    type from **Code** to **Markdown**, as depicted in [Figure 5-8](ch05.xhtml#ch05fig8).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为笔记本提供一个描述性标题，让大家知道它的内容，并引用geysers数据的来源。点击第一个单元格，左侧标记为`In [ ]:`。接着，在工具栏上，将单元格类型从**代码**更改为**Markdown**，如[图
    5-8](ch05.xhtml#ch05fig8)所示。
- en: '![Image](../images/05fig08.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig08.jpg)'
- en: '*Figure 5-8: Changing the cell type using the Toolbar*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-8：使用工具栏更改单元类型*'
- en: '*Markdown* (*[https://daringfireball.net/projects/markdown/](https://daringfireball.net/projects/markdown/)*),
    a superset of the HTML markup language, lets you add explanatory text to your
    notebook. You can style this text in multiple ways, including text size, bold,
    italics, and strike-through. You can change colors, use style sheets, make lists,
    and add hyperlinks. You can even drag and drop images and videos into a Markdown
    cell.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*Markdown* (*[https://daringfireball.net/projects/markdown/](https://daringfireball.net/projects/markdown/)*),
    是 HTML 标记语言的超集，让你可以在笔记本中添加解释性文本。你可以以多种方式格式化这些文本，包括文字大小、粗体、斜体和删除线。你可以更改颜色，使用样式表，创建列表，添加超链接。你甚至可以将图片和视频拖放到
    Markdown 单元格中。'
- en: Some commonly used Markdown styles are listed in [Table 5-1](ch05.xhtml#ch05tab1).
    Insert your own text for words in ALL-CAPS. To see additional styles, search for
    “Markdown cells” at *[https://jupyter-notebook.readthedocs.io/](https://jupyter-notebook.readthedocs.io/)*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的 Markdown 样式列在 [表 5-1](ch05.xhtml#ch05tab1) 中。将自己的文本插入到全大写的词语中。要查看更多样式，请访问
    *[https://jupyter-notebook.readthedocs.io/](https://jupyter-notebook.readthedocs.io/)*。
- en: '**Table 5-1:** Common Markdown Styles'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 5-1：** 常见的 Markdown 样式'
- en: '| **Style syntax** | **Description** |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| **样式语法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `# YOUR TEXT` | Heading size; # (largest) → ##### (smallest) |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `# YOUR TEXT` | 标题大小；#（最大）→ #####（最小） |'
- en: '| `**YOUR TEXT**` | Makes text **bold** |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `**YOUR TEXT**` | 将文本设置为 **粗体** |'
- en: '| `*YOUR TEXT*` | Makes text *italic* |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `*YOUR TEXT*` | 将文本设置为 *斜体* |'
- en: '| `~~YOUR TEXT~~` | Strikes through text |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `~~YOUR TEXT~~` | 给文本添加删除线 |'
- en: '| `- YOUR TEXT` | Creates a bulleted list (also accepts + and *) |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `- YOUR TEXT` | 创建项目符号列表（也支持 + 和 *） |'
- en: '| `<span style=``″``color:red``″``>YOUR TEXT</span>` | Changes text to the
    specified color (in JupyterLab) |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `<span style=``″``color:red``″``>YOUR TEXT</span>` | 将文本更改为指定颜色（在 JupyterLab
    中） |'
- en: '| `[Text](URL)` | Inserts a hyperlink to a website URL |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `[Text](URL)` | 插入指向网站 URL 的超链接 |'
- en: '| `![title](FILENAME)``![title](URL)` | Inserts an image using a filename or
    URL address. You can also drag and drop an image into the cell. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `![title](FILENAME)``![title](URL)` | 使用文件名或 URL 地址插入图片。你也可以将图片拖放到单元格中。 |'
- en: '**NOTE**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The Heading choice in the style menu has been deprecated and no longer works.
    Notebook will direct you to the Markdown option for creating headers.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*样式菜单中的标题选项已被弃用，不再有效。笔记本将引导你使用 Markdown 选项来创建标题。*'
- en: 'To make a header for your notebook, click in the cell and enter the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要为你的笔记本创建标题，请点击单元格并输入以下内容：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Be sure to include a space after the hash marks. Your cell should look like
    [Figure 5-9](ch05.xhtml#ch05fig9).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在井号后面加一个空格。你的单元格应类似于 [图 5-9](ch05.xhtml#ch05fig9)。
- en: '![Image](../images/05fig09.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig09.jpg)'
- en: '*Figure 5-9: Creating a header using a Markdown cell*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-9：使用 Markdown 单元格创建标题*'
- en: To run the cell, click the **Run** button on the toolbar or, on your keyboard,
    press SHIFT-ENTER. Your cell should look like [Figure 5-10](ch05.xhtml#ch05fig10).
    Notice that “Applied Linear Regression” is in italics. To go back and edit the
    cell again, just double-click it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行单元格，请点击工具栏上的 **运行** 按钮，或者在键盘上按 SHIFT-ENTER。你的单元格应类似于 [图 5-10](ch05.xhtml#ch05fig10)。注意，“应用线性回归”是斜体的。要返回并再次编辑单元格，只需双击它。
- en: '![Image](../images/05fig10.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig10.jpg)'
- en: '*Figure 5-10: The formatted header*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-10：格式化的标题*'
- en: '**NOTE**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*SHIFT-ENTER executes a cell and advances the cursor to the next cell, creating
    a new cell if necessary. CTRL-ENTER executes the current cell but does not advance
    to the next one.*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*SHIFT-ENTER 执行单元并将光标移到下一个单元，如果必要会创建一个新单元。CTRL-ENTER 执行当前单元但不移到下一个单元。*'
- en: '***Adding Code and Making Plots with a Code Cell***'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过代码单元添加代码和制作图表***'
- en: Notebook supports in-browser code editing, and it includes features found in
    Spyder, like automatic syntax highlighting, indentation, and tab completion/introspection.
    In other words, you can execute code from the browser, and see the output of the
    computations, including plots and images, in dedicated output cells within the
    notebook.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本支持浏览器内的代码编辑，并且包含了像 Spyder 一样的功能，例如自动语法高亮、缩进和标签补全/自省。换句话说，你可以在浏览器中执行代码，并在笔记本中的专用输出单元中看到计算结果，包括图表和图像。
- en: 'To begin coding, click in the new code cell and enter the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编写代码，请点击新的代码单元并输入以下内容：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This time, use CTRL-ENTER to run the cell. You may have noticed that this is
    the opposite of the Jupyter Qt console, in which you execute code by pressing
    ENTER and add multiple lines without execution using CTRL-ENTER.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，使用 CTRL-ENTER 来运行单元格。你可能已经注意到，这与 Jupyter Qt 控制台相反，在该控制台中，你按 ENTER 执行代码，而使用
    CTRL-ENTER 可以输入多行但不执行。
- en: 'To add another cell in a different way, from the menu bar click **Insert**
    ▸ **Insert Cell Below**. Click in this new cell and enter and run the following
    code to make a “violin plot”:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 若要以不同方式添加另一个单元格，请从菜单栏点击 **插入** ▸ **插入下方单元格**。点击新单元格，输入并运行以下代码以生成“小提琴图”：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The semicolon at the end of the line prevents Notebook from displaying the *textural*
    information about the plot object. Your notebook should now look like [Figure
    5-11](ch05.xhtml#ch05fig11).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 行末的分号防止 Notebook 显示关于图形对象的*文本*信息。现在你的 Notebook 应该看起来像 [图 5-11](ch05.xhtml#ch05fig11)。
- en: '![Image](../images/05fig11.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig11.jpg)'
- en: '*Figure 5-11: The geyser.ipynb notebook with inline plot*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-11：带有内联图形的 geyser.ipynb Notebook*'
- en: Something important just happened. In the first cell, you imported packages,
    loaded the seaborn “geysers” dataset as a pandas DataFrame, peeked at the first
    five lines of the DataFrame (`df.head()`), and then changed the name of one of
    the columns to something more meaningful. In the second cell, you plotted the
    DataFrame.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有件重要的事情刚刚发生。在第一个单元格中，你导入了包，加载了 seaborn 的“geysers”数据集作为 pandas DataFrame，查看了
    DataFrame 的前五行（`df.head()`），然后将其中一列的名称更改为更有意义的内容。在第二个单元格中，你绘制了 DataFrame。
- en: The key here is that you isolated the (potentially) time-consuming steps of
    data loading and preparation in their own cell. If you import packages and load
    the dataset in the first cell (labeled `In [1]:`), you’re then free to “play”
    with the data in subsequent cells. There’s no reason to wait for data to load
    with each execution. You saw a similar cellular approach in Spyder (see “Defining
    Code Cells” on [page 81](ch04.xhtml#ch00lev2sec42)).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于，你将数据加载和准备这些（可能）耗时的步骤隔离在了各自的单元格中。如果你在第一个单元格中导入了包并加载了数据集（标记为 `In [1]:`），那么你就可以在后续单元格中“玩”数据。每次执行时没有理由等待数据加载。你在
    Spyder 中看到了类似的单元格方法（请参见 [第 81 页](ch04.xhtml#ch00lev2sec42)的“定义代码单元格”）。
- en: Another thing worth noting is that you used a magic command to make Matplotlib
    plot *inside* the notebook (you didn’t need to explicitly import the Matplotlib
    library, because it’s a dependency of seaborn). You can also add simple interactivity
    to the plot by using `%matplotlib notebook`, though this can slow down rendering.
    Magic commands were first introduced in [Chapter 3](ch03.xhtml). To see the list
    of magics, including *cell* magics, run `%lsmagic` in a cell. Cell magics are
    preceded by *two* percent signs (`%%`).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得注意的地方是，你使用了一个魔法命令使 Matplotlib 图形*嵌入*在 Notebook 中（你不需要显式导入 Matplotlib 库，因为它是
    seaborn 的依赖项）。你还可以通过使用 `%matplotlib notebook` 为图表添加简单的交互性，尽管这可能会减慢渲染速度。魔法命令最早是在
    [第 3 章](ch03.xhtml)中引入的。要查看所有魔法命令的列表，包括*单元格*魔法命令，可以在单元格中运行 `%lsmagic`。单元格魔法命令以*两个*百分号（`%%`）开头。
- en: The plot itself shows that Old Faithful has a short and long eruption cycle.
    The longer you wait, the longer the eruption tends to last, so as a tourist, your
    patience is rewarded.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图表本身显示了老忠实喷泉有一个短周期和一个长周期的喷发。你等待的时间越长，喷发持续的时间就越长，因此作为游客，你的耐心会得到回报。
- en: '***Working with Output Cells***'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***与输出单元格的工作***'
- en: 'By default, Notebook shows only the output of the last command in a code cell.
    Depending on the circumstance, you can get around this by using either the `print()`
    or `display()` functions. In the previous section, we used `display()` to show
    the head (first few rows) of the DataFrame. It also works to put multiple commands,
    separated by commas, on the same line. Alternatively, you can import the IPython
    InteractiveShell at the start of your notebook and set its interactivity option
    to “all”:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Notebook 只显示代码单元格中最后一条命令的输出。根据不同情况，你可以通过使用 `print()` 或 `display()` 函数来绕过这个限制。在前一节中，我们使用了
    `display()` 来显示 DataFrame 的前几行（`df.head()`）。你也可以将多个命令用逗号隔开写在同一行。或者，你可以在 Notebook
    开始时导入 IPython InteractiveShell，并将其交互性选项设置为“all”：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Besides `all`, other `InteractiveShell` options include `none`, `last`, `last_expr`,
    and `last_expr_or_assign` (where “expr” stands for “expression” and “assign” stands
    for “assignment”).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `all`，`InteractiveShell` 还有其他选项，包括 `none`、`last`、`last_expr` 和 `last_expr_or_assign`（其中“expr”代表“表达式”，“assign”代表“赋值”）。
- en: For more control over output cells, use the Cell menu ([Figure 5-12](ch05.xhtml#ch05fig12)).
    The Current Outputs and All Output options let you hide output, clear output,
    or toggle scrolling for a single cell or the entire notebook, respectively.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要对输出单元进行更多控制，请使用单元格菜单（[图 5-12](ch05.xhtml#ch05fig12)）。“当前输出”和“所有输出”选项允许你隐藏输出、清除输出或为单个单元或整个笔记本切换滚动。
- en: '![Image](../images/05fig12.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig12.jpg)'
- en: '*Figure 5-12: The Toggle Scrolling option adds a scrollbar to an output cell*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-12：切换滚动选项会向输出单元添加滚动条*'
- en: The scrolling option is helpful if you’re displaying an object that’s too large
    for the output cell. [Figure 5-12](ch05.xhtml#ch05fig12) displays the full DataFrame
    in the geyser notebook (using `display(df)`), and toggling on the scrollbar allows
    you to view the last lines of the DataFrame.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动选项在显示超大对象时非常有用，超出了输出单元的显示范围。[图 5-12](ch05.xhtml#ch05fig12) 显示了间歇泉笔记本中的完整 DataFrame（使用
    `display(df)`），并且开启滚动条后，你可以查看 DataFrame 的最后几行。
- en: '***Adding an Image with a Markdown Cell***'
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 Markdown 单元格添加图片***'
- en: 'To finish off the notebook, let’s add Jim Peaco’s ariel view of Old Faithful,
    available from the National Park Service image gallery. Insert a new cell and
    change its type to **Markdown**. Enter and run the following code, which references
    the image’s web address:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成笔记本，我们来添加 Jim Peaco 提供的老忠实喷泉的鸟瞰图，这张图片可以从国家公园管理局的图像库中找到。插入一个新单元并将其类型更改为 **Markdown**。输入并运行以下代码，引用图片的网络地址：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Assuming that you have an active internet connection, this produces the output
    in [Figure 5-13](ch05.xhtml#ch05fig13).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个活跃的互联网连接，这会生成 [图 5-13](ch05.xhtml#ch05fig13) 中的输出。
- en: '![Image](../images/05fig13.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig13.jpg)'
- en: '*Figure 5-13: Bottom half of notebook with National Park Service image of Old
    Faithful*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-13：包含国家公园管理局老忠实喷泉图像的笔记本下半部分*'
- en: 'If you want control over the size of the image, use this command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想控制图像的大小，可以使用以下命令：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you don’t want to worry about broken links, unreliable internet connections,
    or keeping track of external files, you can embed images in notebooks using **Edit**
    ▸ **Insert Image** from the menu bar, by pasting from your clipboard, or by dragging
    and dropping the image into the Markdown cell. Embedded images make your notebook
    more portable but have the disadvantage of increasing its file size and making
    code revisions less friendly.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想担心链接失效、不稳定的互联网连接或跟踪外部文件，你可以通过菜单栏中的 **编辑** ▸ **插入图片**，粘贴剪贴板中的内容，或者直接将图片拖放到
    Markdown 单元格中，来嵌入图像。嵌入的图像使得笔记本更具可携带性，但也有增加文件大小和使代码修订变得不太友好的缺点。
- en: Markdown cells, and notebooks in general, make it easy to include code, equations,
    and graphics in formatted documents. In fact, many online articles, such as those
    on *Medium* and *Towards Data Science*, are created using Jupyter Notebook.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 单元格和笔记本通常使得在格式化文档中包含代码、方程式和图形变得非常容易。事实上，许多在线文章，如 *Medium* 和 *Towards
    Data Science* 上的文章，都是使用 Jupyter Notebook 创建的。
- en: '***Saving the Notebook***'
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保存笔记本***'
- en: Notebook automatically saves after a set period, usually 120 seconds. You can
    override this by running the `%autosave n` magic command in a cell, where `n`
    is the number of seconds and `n=0` disables autosaving. This applies only to an
    individual notebook and for the current session. You’ll need to run the cell containing
    the magic command every time you open the notebook for it to take effect. For
    instructions on how to globally change autosave settings for all notebooks, search
    online for the `autosavetime` Jupyter extension (we’ll look at using extensions
    later in this chapter).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本会在设定的时间段后自动保存，通常是 120 秒。你可以通过在单元格中运行 `%autosave n` 魔法命令来覆盖此设置，其中 `n` 是秒数，`n=0`
    会禁用自动保存。这仅适用于单个笔记本，并且仅对当前会话有效。每次打开笔记本时，你都需要运行包含魔法命令的单元格才能生效。有关如何全局更改所有笔记本的自动保存设置的说明，请在线搜索
    `autosavetime` Jupyter 扩展（我们将在本章后面讨论如何使用扩展）。
- en: To manually save your notebook at any time, use either the **Save** icon on
    the toolbar, the keyboard shortcut CTRL-S, or **File** ▸ **Save and Checkpoint**
    from the menu bar.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要在任何时候手动保存笔记本，可以使用工具栏上的 **保存** 图标、快捷键 CTRL-S 或菜单栏中的 **文件** ▸ **保存并创建检查点**。
- en: Each time you manually save your notebook, you create a *checkpoint* file in
    a folder named *.ipynb_checkpoints*, located in the same folder as the initial
    *.ipynb* file. You can reset your notebook to the checkpoint version by clicking
    **File** ▸ **Revert to Checkpoint** from the menu and then clicking on the date
    stamp for the last checkpoint.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 每次手动保存笔记本时，你都会在一个名为*.ipynb_checkpoints*的文件夹中创建一个*检查点*文件，该文件夹位于初始*.ipynb*文件所在的文件夹中。你可以通过从菜单中点击**文件**
    ▸ **恢复到检查点**，然后点击最后一次检查点的日期戳来重置笔记本到检查点版本。
- en: Checkpoints are important because autosaving updates only the *.ipynb* file.
    This lets you safely work for a while without saving manually. If you find you’ve
    gone down a blind alley or made some mistake, you can always restore back to an
    earlier copy using the checkpoint file.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点很重要，因为自动保存仅更新*.ipynb*文件。这让你可以在不手动保存的情况下安全地工作一段时间。如果你发现自己走入了死胡同或犯了错误，你总是可以使用检查点文件恢复到早期的版本。
- en: '***Closing the Notebook***'
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关闭笔记本***'
- en: To properly close your notebook, from the menu bar select **File** ▸ **Close
    and Halt**. Next, in the dashboard, press the **Quit** button, and then close
    the window.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确关闭笔记本，从菜单栏选择**文件** ▸ **关闭并停止**。接下来，在仪表板中按**退出**按钮，然后关闭窗口。
- en: If you are logged in to another server, as opposed to working locally, you’ll
    want to log out using either the **Logout** button at the upper right of the notebook
    or at the upper right of the Jupyter dashboard.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你登录到另一个服务器，而不是本地工作，你需要通过点击笔记本右上角的**注销**按钮，或者在Jupyter仪表板的右上角注销。
- en: '**Getting Help**'
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取帮助**'
- en: The Help menu, though very intuitive, is useful enough to warrant a mention.
    In addition to the Notebook interface tour and documentation, it provides handy
    links to the documentation of many useful libraries like Python, NumPy, pandas,
    Matplotlib, and more ([Figure 5-14](ch05.xhtml#ch05fig14)).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助菜单虽然非常直观，但足够实用，值得一提。除了笔记本界面游览和文档外，它还提供了许多有用库的文档链接，如Python、NumPy、pandas、Matplotlib等
    ([图 5-14](ch05.xhtml#ch05fig14))。
- en: '![Image](../images/05fig14.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig14.jpg)'
- en: '*Figure 5-14: The Help menu*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-14：帮助菜单*'
- en: '***Keyboard Shortcuts***'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***键盘快捷键***'
- en: You can also bring up a list of keyboard shortcuts for both *command* mode and
    *edit* mode. You may have noticed that cell borders start out blue and then switch
    to green when you click inside them. *Blue* cells indicate that you’re in command
    mode; *green* cells designate edit mode.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以调出命令模式和编辑模式的键盘快捷键列表。你可能已经注意到，单元格边框最初是蓝色的，点击单元格后会切换为绿色。*蓝色*单元格表示你处于命令模式；*绿色*单元格表示你处于编辑模式。
- en: In command mode, the whole notebook is selected. In edit mode, the focus is
    on a single cell. Although there’s some overlap, keyboard shortcuts for the command
    mode ([Table 5-2](ch05.xhtml#ch05tab2)) help you manipulate *cells*, while shortcuts
    for the edit mode ([Table 5-3](ch05.xhtml#ch05tab3)) help you work with *text
    in cells*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令模式下，整个笔记本会被选中。在编辑模式下，焦点集中在单个单元格上。尽管有所重叠，但命令模式的键盘快捷键 ([表 5-2](ch05.xhtml#ch05tab2))
    帮助你操作*单元格*，而编辑模式的快捷键 ([表 5-3](ch05.xhtml#ch05tab3)) 帮助你处理*单元格中的文本*。
- en: '**Table 5-2:** Selected Command Mode Keyboard Shortcuts'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 5-2：** 选择的命令模式键盘快捷键'
- en: '| **Shortcut** | **Description** |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| **快捷键** | **描述** |'
- en: '| --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| H | Show all keyboard shortcuts |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| H | 显示所有键盘快捷键 |'
- en: '| ENTER | Enter cell Edit mode |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| ENTER | 进入单元格编辑模式 |'
- en: '| SHIFT-ENTER | Run cell and select cell below |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-ENTER | 运行单元格并选择下方单元格 |'
- en: '| CTRL-ENTER | Run selected cell |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-ENTER | 运行选定的单元格 |'
- en: '| F | Find and replace |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| F | 查找并替换 |'
- en: '| Y | Change cell mode to Code |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| Y | 将单元格模式更改为代码 |'
- en: '| M | Change cell mode to Markdown |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| M | 将单元格模式更改为Markdown |'
- en: '| 1 through 6 | Change cell to heading mode (1 = Largest; 6 = Smallest) |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 1 到 6 | 将单元格更改为标题模式（1 = 最大，6 = 最小） |'
- en: '| UP | Select cell above |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| UP | 选择上方单元格 |'
- en: '| DOWN | Select cell below |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| DOWN | 选择下方单元格 |'
- en: '| A | Insert cell above |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| A | 在上方插入单元格 |'
- en: '| B | Insert cell below |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| B | 在下方插入单元格 |'
- en: '| X | Cut selected cell |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| X | 剪切选定的单元格 |'
- en: '| C | Copy selected cell |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| C | 复制选定的单元格 |'
- en: '| V | Paste cells below |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| V | 将单元格粘贴到下方 |'
- en: '| SHIFT-V | Paste cells above |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-V | 将单元格粘贴到上方 |'
- en: '| D, D | Delete selected cell |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| D, D | 删除选定的单元格 |'
- en: '| Z | Undo cell deletion |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| Z | 撤销单元格删除 |'
- en: '| SHIFT-M | Merge selected cells, or current cell with one below if only one
    selected |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-M | 合并选定单元格，或如果只选择了一个单元格，则与下方单元格合并 |'
- en: '| S (or CTRL-S) | Save and Checkpoint |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| S（或 CTRL-S） | 保存并创建检查点 |'
- en: '| L | Toggle line numbers |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| L | 切换行号 |'
- en: '| O | Toggle output of selected cells |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| O | 切换选定单元格的输出 |'
- en: '| I, I | Interrupt the kernel |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| I, I | 中断内核 |'
- en: '| SPACE | Scroll notebook down |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| SPACE | 向下滚动笔记本 |'
- en: '| SHIFT-SPACE | Scroll notebook up |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-SPACE | 向上滚动笔记本 |'
- en: '**Table 5-3:** Selected Edit Mode Keyboard Shortcuts'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 5-3:** 选定的编辑模式快捷键'
- en: '| **Shortcut** | **Description** |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| **快捷键** | **描述** |'
- en: '| --- | --- |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| CTRL-M (or ESC) | Enter Command mode |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-M (或 ESC) | 进入命令模式 |'
- en: '| UP | Move cursor up |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| UP | 向上移动光标 |'
- en: '| DOWN | Move cursor down |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| DOWN | 向下移动光标 |'
- en: '| CTRL-UP | Go to cell start |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-UP | 跳转到单元格开始 |'
- en: '| CTRL-DOWN | Go to cell end |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-DOWN | 跳转到单元格结束 |'
- en: '| CTRL-LEFT | Move one word left |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-LEFT | 向左移动一个单词 |'
- en: '| CTRL-RIGHT | Move one word right |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-RIGHT | 向右移动一个单词 |'
- en: '| CTRL-] | Indent |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-] | 增缩 |'
- en: '| CTRL-[ | Dedent |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-[ | 缩进 |'
- en: '| CTRL-/ | Toggle comment |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-/ | 切换注释 |'
- en: '| CTRL-D | Delete whole line |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-D | 删除整行 |'
- en: '| CTRL-A | Select all |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-A | 全选 |'
- en: '| CTRL-Z | Undo |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-Z | 撤销 |'
- en: '| CTRL-Y | Redo |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-Y | 重做 |'
- en: '| CTRL-BACKSPACE | Delete word before |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-BACKSPACE | 删除前一个单词 |'
- en: '| CTRL-DELETE | Delete word after |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-DELETE | 删除后一个单词 |'
- en: '| SHIFT-ENTER | Run cell and select below |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-ENTER | 运行单元格并选择下方单元格 |'
- en: '| CTRL-ENTER | Run selected cells |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-ENTER | 运行选中的单元格 |'
- en: '| CTRL-SHIFT-hyphen | Split cell at cursor |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-SHIFT-hyphen | 在光标处拆分单元格 |'
- en: '| INSERT | Toggle overwrite flag |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| INSERT | 切换覆盖标志 |'
- en: '| CTRL-S | Save and Checkpoint |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| CTRL-S | 保存并创建检查点 |'
- en: To see the complete list of available shortcuts, click **Help** ▸ **Keyboard
    Shortcuts** or, on your keyboard, press H while in command mode. If these shortcuts
    aren’t enough, you can customize the command mode shortcuts from within the Notebook
    application itself, using the **Edit keyboard Shortcuts** item. A dialog will
    guide you through the process of adding custom keyboard shortcuts. Afterward,
    the keyboard shortcut set from within Notebook will be saved to your configuration
    file.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的快捷键列表，请点击**帮助** ▸ **键盘快捷键**，或者在命令模式下按键盘上的H键。如果这些快捷键还不够用，你可以通过笔记本应用程序本身自定义命令模式快捷键，使用**编辑键盘快捷键**项。对话框会引导你添加自定义快捷键。之后，来自笔记本的快捷键设置将保存到你的配置文件中。
- en: '***The Command Palette***'
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***命令面板***'
- en: You can hover your cursor over items in the toolbar ([Figure 5-5](ch05.xhtml#ch05fig5))
    to reveal their purpose. These are straightforward except perhaps for the Command
    Palette icon, shaped like a keyboard.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将光标悬停在工具栏上的项目上（见[图 5-5](ch05.xhtml#ch05fig5)），以查看它们的功能。除非是命令面板图标，它像一个键盘，否则它们都很直观。
- en: In Jupyter Notebook and JupyterLab, all user actions are processed through a
    centralized command system. These include the menu bar, context menus, keyboard
    shortcuts, and so on. For your convenience, the command palette provides a keyboard-driven
    way to search for and run these commands ([Figure 5-15](ch05.xhtml#ch05fig15)).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter Notebook和JupyterLab中，所有用户操作都通过一个集中式的命令系统进行处理。这些操作包括菜单栏、上下文菜单、键盘快捷键等。为了方便使用，命令面板提供了一种通过键盘搜索和运行这些命令的方式（见[图
    5-15](ch05.xhtml#ch05fig15)）。
- en: '![Image](../images/05fig15.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig15.jpg)'
- en: '*Figure 5-15: A portion of the Command Palette*'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-15：命令面板的一部分*'
- en: You can also open the command palette using P in command mode and CTRL-SHIFT-P
    in edit mode. To exit the command palette, press the ESC key.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在命令模式下按P打开命令面板，在编辑模式下按CTRL-SHIFT-P打开命令面板。要退出命令面板，请按ESC键。
- en: '**Using Notebook Extensions**'
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用笔记本扩展**'
- en: You can expand the functionality of the Notebook environment by using extensions
    written in JavaScript. These modules, referred to as *nbextensions*, are basically
    add-ons or plug-ins that do things like autocomplete code, hide coding cells,
    spellcheck Markdown cells, create a table of contents, open a “scratchpad” cell
    for isolated experimentation, and more. You can also write your own custom extensions.
    To see the complete list of available extensions, visit *[https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions.html](https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions.html)*.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用用JavaScript编写的扩展来扩展笔记本环境的功能。这些模块，称为*nbextensions*，基本上是附加组件或插件，执行诸如自动完成代码、隐藏代码单元、拼写检查Markdown单元、创建目录、打开“草稿”单元进行独立实验等任务。你还可以编写自己的自定义扩展。要查看完整的扩展列表，请访问*[https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions.html](https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions.html)*。
- en: '**NOTE**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Classic Notebook extensions won’t work in the JupyterLab version, which has
    its own set of extensions. You can read about these in the next chapter.*'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*经典笔记本扩展在JupyterLab版本中无法使用，因为JupyterLab有自己的一套扩展。你可以在下一章阅读相关内容。*'
- en: '***Installing Extensions***'
  id: totrans-239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装扩展***'
- en: 'The *jupyter_contrib_nbextensions* package is a collection of community-contributed
    nbextensions. To load these extensions locally in your browser, you need to install
    it in your *base* environment (if you’re using the modular approach) or your project
    environment (if using the naive approach). For example, to install in *base* using
    the CLI, first activate the environment with this command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*jupyter_contrib_nbextensions* 包是一个社区贡献的 nbextensions 集合。要在浏览器中本地加载这些扩展，你需要在
    *base* 环境中安装它（如果你使用的是模块化方法），或在你的项目环境中安装它（如果使用的是简单方法）。例如，要使用命令行在 *base* 环境中安装，首先使用以下命令激活环境：'
- en: '[PRE23]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, enter the following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下内容：
- en: '[PRE24]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, install the JavaScript and CSS files to a location where Notebook
    can find them:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 JavaScript 和 CSS 文件安装到 Notebook 可以找到的位置：
- en: '[PRE25]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*CSS* (short for *Cascading Style Sheets*) describe how the HTML elements in
    notebooks are displayed. The `--user` flag installs into the user’s home Jupyter
    directories. Alternatively, using the `--system` flag will install into system-wide
    Jupyter directories.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '*CSS*（即 *层叠样式表*）描述了笔记本中 HTML 元素的显示方式。`--user` 标志将文件安装到用户的 Jupyter 目录中。或者，使用
    `--system` 标志将安装到系统范围的 Jupyter 目录中。'
- en: After you’ve confirmed installation, restart the notebook server.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 确认安装后，重新启动笔记本服务器。
- en: '***Enabling Extensions***'
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***启用扩展***'
- en: You should now have an Nbextensions tab on the Jupyter Home page with a list
    of selectable nbextensions, as illustrated in [Figure 5-16](ch05.xhtml#ch05fig16).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该可以在 Jupyter 首页看到一个 Nbextensions 标签，列出了可选择的 nbextensions，如 [图 5-16](ch05.xhtml#ch05fig16)
    所示。
- en: '![Image](../images/05fig16.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig16.jpg)'
- en: '*Figure 5-16: The new Nbextensions tab (shown truncated) on the Jupyter dashboard*'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-16：Jupyter 仪表板上的新 Nbextensions 标签（显示为截断形式）*'
- en: Clicking an extension name launches its README file. For example, if you click
    the **Tree Filter** nbextension and scroll down, you’ll see a description of what
    it does and a demonstration of how to use it ([Figure 5-17](ch05.xhtml#ch05fig17)).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 点击扩展名会启动其 README 文件。例如，如果点击 **Tree Filter** nbextension 并向下滚动，你将看到它的功能描述以及如何使用的演示（[图
    5-17](ch05.xhtml#ch05fig17)）。
- en: '![Image](../images/05fig17.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig17.jpg)'
- en: '*Figure 5-17: Clicking an nbextension name launches its descriptive README
    file.*'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-17：点击 nbextension 名称将启动其描述性 README 文件。*'
- en: 'Clicking the checkbox beside an extension turns on that extension. You can
    also enable and disable nbextensions from the CLI (where <extension_name> represents
    the name of the extension):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 点击扩展旁边的复选框将启用该扩展。你还可以通过命令行启用和禁用 nbextensions（其中 <extension_name> 表示扩展的名称）：
- en: '[PRE26]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'and:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 和：
- en: '[PRE27]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To learn more about the jupyter_contrib_nbextension package, visit *[https://jupyter-contrib-nbextensions.readthedocs.io/](https://jupyter-contrib-nbextensions.readthedocs.io/)*.
    To find the latest extensions, search online for “useful Jupyter Notebook extensions.”
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 jupyter_contrib_nbextension 包的信息，请访问 *[https://jupyter-contrib-nbextensions.readthedocs.io/](https://jupyter-contrib-nbextensions.readthedocs.io/)*。要查找最新的扩展，可以在线搜索“有用的
    Jupyter Notebook 扩展”。
- en: '**Working with Widgets**'
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用小部件**'
- en: '*Widgets*, short for “Windows Gadgets,” are interactive objects such as sliders,
    radio buttons, drop-down menus, checkboxes, and the like. Widgets let you build
    a GUI for your notebook, making it easier to explore data, set up simulations,
    accept user input, and so on.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*Widgets*（即“窗口小工具”）是互动对象，如滑块、单选按钮、下拉菜单、复选框等。小部件让你为笔记本构建一个图形用户界面（GUI），使得探索数据、设置模拟、接受用户输入等任务变得更加容易。'
- en: In this section, we’ll use the *ipywidgets* extension to create widgets. Some
    examples are shown in [Figure 5-18](ch05.xhtml#ch05fig18). For a full list of
    widgets, along with their configurable parameters, visit the documentation at
    *[https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20List.html](https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20List.html)*.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 *ipywidgets* 扩展来创建小部件。一些示例显示在 [图 5-18](ch05.xhtml#ch05fig18) 中。要查看完整的小部件列表及其可配置的参数，请访问文档
    *[https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20List.html](https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20List.html)*。
- en: '![Image](../images/05fig18.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig18.jpg)'
- en: '*Figure 5-18: Some of the many widget types available in ipywidgets*'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-18：在 ipywidgets 中可用的众多小部件类型之一*'
- en: We won’t cover every type of widget here, but we’ll cover enough for you to
    feel confident exploring on your own
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在此覆盖所有类型的小部件，但会介绍足够的内容，让你有信心自行探索。
- en: '***Installing ipywidgets***'
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装 ipywidgets***'
- en: The ipywidgets extension can be installed like any package. The instructions
    that follow will use the CLI, but you can easily duplicate them using the Navigator
    GUI.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ipywidgets扩展可以像任何包一样安装。以下的指令将使用CLI，但你也可以通过Navigator GUI轻松地复制这些步骤。
- en: 'If you’re using the naive approach, wherein the notebook package is installed
    in your conda environment, open Anaconda Prompt (Windows) or a terminal (macOS
    and Linux), activate the target environment, and then enter the following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是简单的方法，即Notebook包安装在你的conda环境中，打开Anaconda Prompt（Windows）或终端（macOS和Linux），激活目标环境，然后输入以下命令：
- en: '[PRE28]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you’re using the modular approach, wherein your Jupyter Notebook and the
    IPython kernel are installed in different environments, you’ll need to also install
    the *widgetsnbextension* package in the environment containing the Jupyter Notebook
    server. The widgetsnbextension package configures the classic Jupyter Notebook
    to display and use widgets. Let’s do this now for the *base* and *my_nb_proj_env*
    environments (you’ll need to substitute your path to *my_nb_proj_env*):'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是模块化方法，其中Jupyter Notebook和IPython内核安装在不同的环境中，你还需要在包含Jupyter Notebook服务器的环境中安装*widgetsnbextension*包。widgetsnbextension包配置经典的Jupyter
    Notebook以显示和使用小部件。现在让我们在*base*和*my_nb_proj_env*环境中执行此操作（你需要将*my_nb_proj_env*的路径替换为你的路径）：
- en: '[PRE29]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With the ipywidget package installed, you can easily create widgets either manually
    or by using the `interact` or `interactive` classes.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了ipywidget包后，你可以轻松地手动创建小部件，或者通过使用`interact`或`interactive`类来创建。
- en: '***Creating Widgets with Interact***'
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用Interact创建小部件***'
- en: The `ipywidgets.interact` class helps you generate widgets for exploring and
    interacting with data. Let’s try it out in a new notebook.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipywidgets.interact`类帮助你生成小部件，用于探索和与数据交互。让我们在一个新的Notebook中试试。'
- en: 'Open Anaconda Prompt (in Windows) or a terminal (in macOS or Linux). You should
    be in the *base* environment (if not, enter conda activate base). Because we’re
    saving a new notebook, navigate to your *my_nb_proj\notebooks* directory before
    launching Jupyter Notebook:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Anaconda Prompt（在Windows中）或终端（在macOS或Linux中）。你应该处于*base*环境中（如果不是，请输入conda
    activate base）。由于我们将保存一个新的Notebook，请在启动Jupyter Notebook之前，导航到*my_nb_proj\notebooks*目录：
- en: '[PRE30]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: From the Jupyter Dashboard, select **New** ▸ **Python [conda env:my_nb_proj_env]**.
    When the untitled notebook appears in your browser, rename it *widgets* and save
    it.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 从Jupyter仪表板中，选择**新建** ▸ **Python [conda env:my_nb_proj_env]**。当浏览器中出现未命名的Notebook时，将其重命名为*widgets*并保存。
- en: 'In the first cell, enter and run the following code:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个单元格中，输入并运行以下代码：
- en: '[PRE31]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: With this code, you import NumPy, Matplotlib, and the interact class from ipywidgets
    ➊. You then use NumPy’s `linspace()` method to return an array of evenly spaced
    numbers over the specified interval (0-6), and assign it to the `x` variable (we
    look at NumPy in detail in [Chapter 18](ch18.xhtml)). Next, you define a short
    function that multiplies the `x` values by the sine of `x` times a scalar named
    `w` and plots the results. Finally, you call `interact()` and pass it the `sine_wave()`
    function ➋. This produces the slider widget shown in [Figure 5-19](ch05.xhtml#ch05fig19).
    Sliding the control nob redefines the value of `w` and automatically calls the
    `sine_wave()` function to update the plot.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，你导入了NumPy、Matplotlib和ipywidgets中的interact类 ➊。然后，你使用NumPy的`linspace()`方法返回指定区间（0-6）内均匀分布的数字数组，并将其分配给`x`变量（我们在[第18章](ch18.xhtml)中详细介绍NumPy）。接下来，你定义了一个简短的函数，它将`x`值乘以`x`的正弦值，再乘以一个名为`w`的标量，并绘制结果。最后，你调用`interact()`并传入`sine_wave()`函数
    ➋。这会生成在[图 5-19](ch05.xhtml#ch05fig19)中显示的滑块小部件。滑动控制按钮会重新定义`w`的值，并自动调用`sine_wave()`函数以更新图表。
- en: '![Image](../images/05fig19.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/05fig19.jpg)'
- en: '*Figure 5-19: Changing the slider interactively updates the sine wave plot.*'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-19：更改滑块会交互式地更新正弦波图。*'
- en: Note that you didn’t need to specify a slider widget. Ipywidgets detected that
    we passed the `sine_wave()` function a floating-point value (`w=1.0`) and knew
    to use a float slider. Had we passed an integer, it would’ve made an integer slider.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你不需要指定滑块小部件。Ipywidgets自动检测到我们传递给`sine_wave()`函数的是一个浮动值（`w=1.0`），因此知道使用浮动滑块。如果我们传递的是整数，它将使用整数滑块。
- en: 'You can also use `interact()` as a Python *decorator*. We covered decorators
    in [Chapter 13](ch13.xhtml); these are functions used to enhance the behavior
    of another function. To use `interact()` as a decorator, insert a new cell at
    the bottom of your *widgets* notebook and run the following code:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将 `interact()` 用作 Python 的 *装饰器*。我们在[第 13 章](ch13.xhtml)中讲解了装饰器；这些是用于增强其他函数行为的函数。要将
    `interact()` 作为装饰器使用，请在你的 *widgets* 笔记本底部插入一个新单元格并运行以下代码：
- en: '[PRE32]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You must run the proceeding cell for this to work, as we aren’t reimporting
    the libraries or reassigning the `x` value. When you run the current cell, the
    decorator ➊ calls the sine wave function for you.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须运行前面的单元格才能使其生效，因为我们没有重新导入库或重新赋值 `x`。当你运行当前单元格时，装饰器 ➊ 会为你调用正弦波函数。
- en: In these examples, `interact()` tries to update the plot as you move the slider,
    sometimes introducing latency in the display. To prevent `interact()` from immediately
    updating, you can instead import the `interact_manual()` method from ipywidgets
    and use it to call the `sine_wave()` function. In this case, the plot won’t update
    until you stop moving the slider and press the **Run Interact** button ([Figure
    5-20](ch05.xhtml#ch05fig20)).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些例子中，`interact()` 会在你移动滑块时尝试更新图表，有时会导致显示延迟。为了防止 `interact()` 立即更新，你可以从 ipywidgets
    导入 `interact_manual()` 方法，并用它来调用 `sine_wave()` 函数。在这种情况下，图表不会更新，直到你停止移动滑块并按下 **运行交互**
    按钮（[图 5-20](ch05.xhtml#ch05fig20)）。
- en: '![Image](../images/05fig20.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig20.jpg)'
- en: '*Figure 5-20: The interact_manual() method produces a button for manually running
    interact.*'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-20：`interact_manual()` 方法生成一个用于手动运行 `interact` 的按钮*'
- en: 'As you’ve seen, `interact` determines the type of widget to produce based on
    the input. If you pass it a Boolean, such as `x=True`, it will produce a checkbox.
    A string, like `x=`′`Hello, World!`′, produces a textbox. Passing a list or dictionary
    will generate a drop-down menu. For example, insert a new cell at the bottom of
    your *widgets* notebook and run the following code:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`interact` 根据输入的类型来确定生成的小部件类型。如果你传递一个布尔值，如 `x=True`，它会生成一个复选框。如果传递一个字符串，如
    `x='Hello, World!'`，它会生成一个文本框。传递一个列表或字典会生成一个下拉菜单。例如，在你的 *widgets* 笔记本底部插入一个新单元格并运行以下代码：
- en: '[PRE33]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You should get the output shown in [Figure 5-21](ch05.xhtml#ch05fig21).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能得到[图 5-21](ch05.xhtml#ch05fig21)所示的输出。
- en: '![Image](../images/05fig21.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig21.jpg)'
- en: '*Figure 5-21: An interact-generated drop-down menu*'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-21：一个 `interact` 生成的下拉菜单*'
- en: The `interact` class abstracts away a lot of decisions, so it’s easy to use.
    For more control, you’ll want to try the `interactive` class or manually generate
    the widgets.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`interact` 类抽象化了许多决策，因此很容易使用。若要获得更多控制，你可以尝试使用 `interactive` 类或手动生成小部件。'
- en: '***Creating Widgets with Interactive***'
  id: totrans-296
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用交互式小部件创建***'
- en: The `ipywidgets.interactive` class gives you access to information that is bound
    to the widget, such as its keyword arguments and result. Unlike with `interact()`,
    you’ll need to explicitly show the widget on the screen using the `display()`
    method.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipywidgets.interactive` 类让你能够访问与小部件绑定的信息，如它的关键字参数和结果。与 `interact()` 不同，你需要显式地使用
    `display()` 方法将小部件显示在屏幕上。'
- en: 'Let’s look at an example. Insert a new cell at the bottom of your widgets notebook
    and enter the following code:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。在你的 widgets 笔记本底部插入一个新单元格并输入以下代码：
- en: '[PRE34]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the cell and move the slider to a value of `8`. Now, insert a cell below
    and run this code:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单元格并将滑块移到 `8` 的值。现在，插入一个单元格并运行以下代码：
- en: '[PRE35]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The output should be `8`. This lets you use the widget’s result in subsequent
    code rather than just viewing the result.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是 `8`。这使你可以在后续代码中使用小部件的结果，而不仅仅是查看结果。
- en: '***Manually Creating Widgets***'
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***手动创建小部件***'
- en: The `interact` and `interactive` classes make creating widgets almost automatic.
    But if you want more control over the process, you can create them “manually”
    by specifying which widget you want. You’ll be able to define the layout and style,
    name the widgets, link them together, get events, and more.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`interact` 和 `interactive` 类使得创建小部件几乎是自动化的。但如果你想对过程有更多控制权，可以通过指定所需的小部件来“手动”创建它们。你可以定义布局和样式，命名小部件，将它们连接在一起，获取事件等。'
- en: 'Let’s work an example. Start by inserting a new cell at the bottom of your
    *widgets.ipynb* notebook, and then run this code:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个例子。首先在你的 *widgets.ipynb* 笔记本底部插入一个新单元格，然后运行以下代码：
- en: '[PRE36]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This produces the integer slider bar in [Figure 5-22](ch05.xhtml#ch05fig22).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成整数滑块条，如[图 5-22](ch05.xhtml#ch05fig22)所示。
- en: '![Image](../images/05fig22.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig22.jpg)'
- en: '*Figure 5-22: A named integer slider bar*'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-22：一个命名的整数滑动条*'
- en: By building the widget directly, you’re able to specify additional parameters
    like the displayed name (`description`) and orientation (`horizontal` or `vertical`).
    To see all the available parameters, add `display(slider.keys)` to the current
    cell or, in a new cell, run `slider.keys`. You can find example use cases at the
    documentation link cited earlier.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 通过直接构建小部件，你可以指定额外的参数，比如显示名称（`description`）和方向（`horizontal` 或 `vertical`）。要查看所有可用的参数，可以将
    `display(slider.keys)` 添加到当前单元格，或者在新单元格中运行 `slider.keys`。你可以在前面提到的文档链接中找到示例用例。
- en: 'A slider bar by itself isn’t much use, but as with the `interactive` class,
    you have access to the slider value, in this case through the `.value` attribute.
    In a new cell, run this code:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的滑动条本身用处不大，但像 `interactive` 类一样，你可以访问滑动条的值，在这种情况下，通过 `.value` 属性。在新单元格中，运行以下代码：
- en: '[PRE37]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This should produce the following output:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该产生以下输出：
- en: '[PRE38]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '***Handling Events***'
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***处理事件***'
- en: A user interacting with a widget creates an *event*. For example, a *click*
    event occurs when you press a button widget. When you handle an event, you tell
    your program what to do with the results. This usually involves writing an “event
    handler” function.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 用户与小部件交互时会创建一个 *事件*。例如，当你按下按钮小部件时，会发生一个 *点击* 事件。处理事件时，你告诉程序如何处理结果。这通常涉及编写一个“事件处理”函数。
- en: To capture output and ensure that it’s displayed, you must send it to an `Output`
    widget or put the information you want to display into an `HTML` widget. Let’s
    look at an `Output` example.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获输出并确保它被显示，你必须将其发送到一个 `Output` 小部件，或者将你希望显示的信息放入 `HTML` 小部件。让我们来看一个 `Output`
    的例子。
- en: 'Insert a new cell at the bottom of your widgets notebook and then run the following:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的小部件笔记本的底部插入一个新单元格，然后运行以下代码：
- en: '[PRE39]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This produces the output in [Figure 5-23](ch05.xhtml#ch05fig23). Clicking a
    button prints out the button’s description (name).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生如 [图 5-23](ch05.xhtml#ch05fig23) 所示的输出。点击按钮将打印出按钮的描述（名称）。
- en: '![Image](../images/05fig23.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig23.jpg)'
- en: '*Figure 5-23: Handling a button click event*'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-23：处理按钮点击事件*'
- en: Each time you click a button, the output will hang around in the output cell,
    so import the `clear_output()` method from `IPython` ➊. This method will let you
    start fresh each time a button is clicked. Next, make three button widgets and
    an output widget to display the results ➋.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 每次点击按钮时，输出会保留在输出单元格中，所以从 `IPython` 导入 `clear_output()` 方法 ➊。这个方法让你每次点击按钮时都能重新开始。接下来，创建三个按钮小部件和一个输出小部件来显示结果
    ➋。
- en: To handle the button click event, define a function called `event_handler()`
    that takes a button object as an argument ➌. Using the output widget, first clear
    the display to remove the output of any previous button clicks, and then print
    the name of the clicked button. Finally, for each button, use the `Button` widget’s
    `on_click()` method and pass it the event handler function ➍. This binds the function
    to the button click event.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理按钮点击事件，定义一个名为 `event_handler()` 的函数，接受一个按钮对象作为参数 ➌。使用输出小部件，首先清除显示，以移除任何先前按钮点击的输出，然后打印被点击按钮的名称。最后，对于每个按钮，使用
    `Button` 小部件的 `on_click()` 方法并传递事件处理函数 ➍。这将把函数绑定到按钮点击事件。
- en: '***Customizing Widgets***'
  id: totrans-325
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自定义小部件***'
- en: The widgets provided by ipywidgets are attractive out of the box, but you can
    modify them if you want. The widget `layout` attribute gives you control over
    things like the widget size, borders, alignment, and position. You can also arrange
    widgets in gridded patterns.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ipywidgets 提供的小部件开箱即用非常吸引人，但如果你愿意，可以对其进行修改。小部件的 `layout` 属性让你可以控制小部件的大小、边框、对齐方式和位置。你还可以将小部件按网格方式排列。
- en: 'In the events-handling code example from the previous section, add the following
    line above the `button1` variable assignment and change the `button1` code, as
    indicated here:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中的事件处理代码示例中，在 `button1` 变量赋值之前添加以下行，并按照这里所示的方式更改 `button1` 的代码：
- en: '[PRE40]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Run the cell and you should get the output shown in [Figure 5-24](ch05.xhtml#ch05fig24).
    As you might have guessed, *px* stands for *pixel*.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单元格，你应该会看到 [图 5-24](ch05.xhtml#ch05fig24) 中所示的输出。正如你可能猜到的，*px* 代表 *像素*。
- en: '![Image](../images/05fig24.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig24.jpg)'
- en: '*Figure 5-24: The new layout for the Python button (button1)*'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-24：Python 按钮（button1）的新布局*'
- en: 'Conveniently, many widgets let you use predefined styles. In the previous example,
    change the `button1` assignment as follows and then run the cell:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，许多小部件允许你使用预定义样式。在前面的例子中，将 `button1` 的赋值更改为以下内容，然后运行单元格：
- en: '[PRE41]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The Python button should turn red. Other predefined button style choices are
    `primary` (blue), `success` (green), `info` (teal), and `warning` (orange).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Python 按钮应该变成红色。其他预定义的按钮样式选择包括 `primary`（蓝色）、`success`（绿色）、`info`（青色）和 `warning`（橙色）。
- en: If you need even more control, the `style` attribute exposes non-layout-related
    styling attributes of widgets. The properties of this attribute are widget specific;
    you can list them by using the `keys` property. For example, for `button1` in
    the previous example, you would run `button1.style.keys`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多控制，`style` 属性可以显示与布局无关的小部件样式属性。这个属性的属性是小部件特定的；你可以通过使用 `keys` 属性列出它们。例如，在前面的例子中，对于
    `button1`，你可以运行 `button1.style.keys`。
- en: 'Suppose that you want the Python button to be pink, a color not available in
    the predefined styles. In this case, you’d first change `button1` back to its
    original state and then set its background color using the `style` attribute:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望 Python 按钮变成粉红色，而这种颜色在预定义样式中不可用。在这种情况下，你首先需要将 `button1` 恢复到原始状态，然后使用 `style`
    属性设置它的背景色：
- en: '[PRE42]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These examples are just a small taste of what you can do. To see more options,
    visit the documentation at *[https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Styling.html](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Styling.html)*.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例仅仅是你可以做的一个小小的尝试。要查看更多选项，请访问文档 *[https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Styling.html](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Styling.html)*。
- en: '***Embedding Widgets in Other Formats***'
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在其他格式中嵌入小部件***'
- en: 'The Notebook menu bar provides a Widgets option for embedding interactive widgets
    into static web pages, Sphinx documentation (the familiar “Read the Docs” web
    pages), and HTML-converted notebooks on the *nbviewer* web app. Following are
    the menu items:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本菜单栏提供了一个小部件选项，用于将交互式小部件嵌入到静态网页、Sphinx 文档（熟悉的“Read the Docs”网页）以及 HTML 转换后的笔记本中，使用
    *nbviewer* 网络应用程序。以下是菜单项：
- en: '**Save Notebook Widget State** Saves with the current widget state as metadata,
    allowing the notebook file to be rendered with rendered widgets.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**保存笔记本小部件状态** 将当前小部件状态保存为元数据，允许笔记本文件在渲染的小部件下呈现。'
- en: '**Clear Notebook Widget State** Deletes the saved state (you’ll need to restart
    the kernel).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '**清除笔记本小部件状态** 删除已保存的状态（你需要重新启动内核）。'
- en: '**Download Widget State** Triggers the downloading of a JSON file containing
    the serialized state of all the widget models currently in use.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载小部件状态** 触发下载包含当前使用的小部件模型序列化状态的 JSON 文件。'
- en: '**Embed Widgets** Provides a dialog containing an HTML page, which embeds the
    current widgets. To support custom widgets, it uses the RequireJS embedder.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌入小部件** 提供一个对话框，包含嵌入当前小部件的 HTML 页面。为了支持自定义小部件，它使用 RequireJS 嵌入器。'
- en: To learn more about embedding, visit *[https://ipywidgets.readthedocs.io/en/latest/embedding.html#](https://ipywidgets.readthedocs.io/en/latest/embedding.html#)*.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于嵌入的信息，请访问 *[https://ipywidgets.readthedocs.io/en/latest/embedding.html#](https://ipywidgets.readthedocs.io/en/latest/embedding.html#)*。
- en: '**Sharing Notebooks**'
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**共享笔记本**'
- en: Scientific work is rarely done in isolation. You’ll need a way to share your
    notebooks. In some cases, you’ll want to share an *executable* version; for example,
    for coworkers who will run and modify the notebook (think coders). In other cases,
    you’ll want to share a static copy of an *executed* notebook that contains all
    the generated plots and outputs (think non-coders). This latter group might include
    stakeholders who don’t want to install Notebook, deal with its data or package
    dependencies, or wait for long-running notebooks to complete.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 科学工作很少是孤立进行的。你需要一种方式来共享你的笔记本。在某些情况下，你可能希望共享一个*可执行*版本；例如，供同事运行和修改笔记本（想想程序员）。在其他情况下，你可能想要共享一个*已执行*的笔记本的静态副本，其中包含所有生成的图表和输出（想想非程序员）。后一组人可能包括那些不想安装笔记本、处理其数据或包依赖关系，或等待长时间运行的笔记本完成的利益相关者。
- en: Notebooks are saved in JSON format and need to be rendered to be readable. In
    the following sections, we’ll talk about some of the methods for downloading and
    sharing notebooks.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本以 JSON 格式保存，需要渲染才能读取。在接下来的章节中，我们将讨论一些下载和共享笔记本的方法。
- en: '***Checking and Running Notebooks with the Kernel Menu***'
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***检查并运行带有内核菜单的笔记本***'
- en: A problem with notebooks is that cells can be run out of order, they can be
    deleted, and there’s no guarantee that the correct execution order is easily repeatable.
    And as we saw in previous chapters on the Jupyter Qt console and Spyder, imports
    and variable assignments that are resident in memory can cause confusion and unintended
    consequences.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本的问题在于，单元格可能会被乱序运行、被删除，并且没有保证正确的执行顺序能够轻松重复。如我们在前面关于 Jupyter Qt 控制台和 Spyder
    的章节中看到的那样，驻留内存中的导入和变量赋值可能会导致混淆和意外后果。
- en: Consequently, before sharing your work, it is strongly recommended that you
    click **Restart & Run All** from the **Kernel** menu ([Figure 5-25](ch05.xhtml#ch05fig25)).
    If errors occur, fix the first one, repeat the command, and move to the next.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在分享你的工作之前，强烈建议你点击 **内核** 菜单中的 **重启并运行全部**（[图 5-25](ch05.xhtml#ch05fig25)）。如果出现错误，修复第一个错误，重复该命令，然后继续处理下一个错误。
- en: '![Image](../images/05fig25.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig25.jpg)'
- en: '*Figure 5-25: The Notebook Kernel menu*'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-25：笔记本内核菜单*'
- en: Another useful menu item is Interrupt. This is handy for long-running notebooks,
    in the event that you forgot to change a parameter or you recognize some error
    in the code or input.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的菜单项是“中断”。对于长时间运行的笔记本，当你忘记更改参数或识别到代码或输入中的错误时，这非常方便。
- en: '***Downloading Notebooks***'
  id: totrans-355
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***下载笔记本***'
- en: Notebooks are automatically saved as interactive **.ipynb* files. You can email
    these directly to a colleague who uses Notebook. Alternatively, the **File** ▸
    **Download as** command lets you save your notebook in many different formats
    ([Figure 5-26](ch05.xhtml#ch05fig26)). Some of these formats, like PDF via LaTeX,
    require certain packages be installed (if they’re not, don’t worry, you’ll get
    an error message informing you of what’s needed). Among the more important formats
    are HTML and Python.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本会自动保存为交互式 **.ipynb** 文件。你可以直接通过电子邮件将它们发送给使用笔记本的同事。或者，**文件** ▸ **另存为** 命令让你可以将笔记本保存为多种不同格式（[图
    5-26](ch05.xhtml#ch05fig26)）。这些格式中有些，例如通过 LaTeX 导出的 PDF，需要安装特定的包（如果未安装，也不必担心，你会收到一个错误消息，告知你需要什么）。其中较为重要的格式有
    HTML 和 Python。
- en: '![Image](../images/05fig26.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig26.jpg)'
- en: '*Figure 5-26: The Notebook File menu*'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-26：笔记本文件菜单*'
- en: The Python option saves your notebook as a text file with a *.py* extension
    in your downloads folder. You can then run this file as a Python script in a console
    or an IDE like Spyder. Markdown cells, cell numbers, and other non-code material
    is commented out by using the `#` symbol.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: Python 选项会将你的笔记本保存为一个带有 *.py* 扩展名的文本文件，保存在你的下载文件夹中。然后你可以将该文件作为 Python 脚本在控制台或
    IDE（如 Spyder）中运行。Markdown 单元格、单元格编号及其他非代码材料会通过 `#` 符号被注释掉。
- en: 'For example, if you download the geyser notebook from the previous section
    using Python (*.py*), you’ll get the following script:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你使用 Python（*.py*）下载上一节中的间歇泉笔记本，你将得到以下脚本：
- en: '[PRE43]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If you open this *geyser.py* file in Spyder and run it, you’ll see the tabular
    DataFrame output and the violin plot, but not the header or the image of Old Faithful.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Spyder 中打开这个 *geyser.py* 文件并运行它，你将看到表格形式的 DataFrame 输出和小提琴图，但看不到标题或老忠实喷泉的图像。
- en: You can also export your notebook from the command line using the *nbconvert*
    tool. This tool already powers the **Download as** menu option, but when used
    in the CLI (invoked as `jupyter nbconvert`), you can conveniently convert a batch
    of notebook files to another format with a single command. To learn more, visit
    *[https://nbconvert.readthedocs.io/](https://nbconvert.readthedocs.io/)*.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用命令行通过 *nbconvert* 工具导出你的笔记本。这个工具已经驱动了 **另存为** 菜单选项，但在 CLI 中使用时（通过 `jupyter
    nbconvert` 调用），你可以方便地通过单个命令将一批笔记本文件转换为另一种格式。想了解更多，访问 *[https://nbconvert.readthedocs.io/](https://nbconvert.readthedocs.io/)*。
- en: After you’ve downloaded your notebook in the appropriate format, you’ll still
    need to share it. Email is one option, but for collaborative work, you’ll need
    to include any external data files that you used. And if your notebook uses third-party
    packages, you’ll want to share an environment or requirements file (see [Chapter
    2](ch02.xhtml)) so that those with whom you’re sharing can set up an identical
    environment. In the following sections, we’ll look at some convenient ways to
    share notebooks via third-party websites.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在你以合适的格式下载了笔记本之后，你仍然需要分享它。电子邮件是一种选择，但对于协作工作，你需要包含你所使用的任何外部数据文件。如果你的笔记本使用了第三方包，你还需要分享一个环境或需求文件（请参阅
    [第 2 章](ch02.xhtml)），这样与您共享的人就可以设置相同的环境。在接下来的章节中，我们将介绍一些通过第三方网站分享笔记本的便捷方式。
- en: '***Sharing Notebooks via GitHub and Gist***'
  id: totrans-365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过 GitHub 和 Gist 分享笔记本***'
- en: An easy and flexible way to deploy notebooks is to put them in a *code repository*.
    These sites store source code archives, provide version control to track changes,
    and have both public and private components. Although there are many free hosts
    to choose from, the most popular is *GitHub*.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 部署笔记本的一种简单灵活的方式是将其放入一个*代码仓库*。这些网站存储源代码档案，提供版本控制以跟踪变更，并且既有公共组件也有私人组件。虽然有很多免费的主机可以选择，但最受欢迎的是*GitHub*。
- en: GitHub, Inc., a subsidiary of Microsoft, is a provider of internet hosting for
    software development and version control using the *Git* program. Git lets you
    store the notebooks you want to share in a folder on your computer, which you
    can think of as a *local* repository. To make this folder function as a repository,
    Git also stores snapshots (records of the state of versions at a specific point
    in time) and metadata in a hidden folder named *.git*. This lets it keep track
    of contents and changes to the files. You can also include supporting data files
    and folders.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 公司是微软的子公司，提供基于*Git* 程序的互联网托管服务，用于软件开发和版本控制。Git 让你能够将你想要共享的笔记本存储在你计算机上的文件夹中，可以将其视为*本地*仓库。为了使这个文件夹充当仓库，Git
    还会在一个名为*.git*的隐藏文件夹中存储快照（特定时间点版本状态的记录）和元数据。这使得它能够追踪文件内容和变更。你还可以包含支持数据文件和文件夹。
- en: The GitHub website lets you host clones of these Git repositories online for
    the purpose of sharing, performing collaborative work, and providing a safe backup.
    You can include a *README.md* file to describe what’s in the repository. Other
    users can download your notebooks to run and edit them. They can upload their
    changes using Git’s version control system, which ensures your original work isn’t
    overwritten.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 网站让你能够在线托管这些 Git 仓库的克隆，以便共享、进行协作工作以及提供安全备份。你可以包含一个*README.md* 文件来描述仓库中的内容。其他用户可以下载你的笔记本进行运行和编辑。通过
    Git 的版本控制系统，他们可以上传他们的更改，从而确保你的原始作品不会被覆盖。
- en: 'To see an example repository, follow this link: *[https://github.com/rlvaugh/Impractical_Python_Projects/](https://github.com/rlvaugh/Impractical_Python_Projects/)*.
    Be sure to scroll down to see the README file.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看示例仓库，请访问这个链接：*[https://github.com/rlvaugh/Impractical_Python_Projects/](https://github.com/rlvaugh/Impractical_Python_Projects/)*。确保向下滚动以查看
    README 文件。
- en: You can run Git from the command line, but if you’re new to the process, or
    just want to share notebooks, I recommend using the *GitHub Desktop* GUI. The
    Desktop website (*[https://docs.github.com/en/desktop/](https://docs.github.com/en/desktop/)*)
    will walk you through the steps for setting up a free account and creating your
    first repository. In addition, a quick online search will reveal many excellent
    tutorials for using GitHub.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令行运行 Git，但如果你是新手，或者只是想共享笔记本，我推荐使用*GitHub Desktop* 图形用户界面。Desktop 网站 (*[https://docs.github.com/en/desktop/](https://docs.github.com/en/desktop/)*
    )会指导你完成设置免费账户和创建第一个仓库的步骤。此外，快速在线搜索还会提供许多优秀的 GitHub 使用教程。
- en: Alternatively, if you want a fast, easy, and lightweight option for sharing
    a notebook, you can use *GitHub Gist*. Gist is basically a tool for sharing text,
    and because notebooks are saved in JSON format, they qualify. Gist is a simple
    solution for when you don’t need a big repository, yet you still get Git’s version
    control system. In fact, a *gist* is a Git repository, with full commit history,
    differences (diffs), fork and clone options, and more.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你需要一个快速、简单且轻量的共享笔记本的选项，你可以使用*GitHub Gist*。Gist 基本上是一个共享文本的工具，由于笔记本是以 JSON
    格式保存的，因此也符合条件。Gist 是一个简单的解决方案，适用于你不需要大规模仓库，但仍然能享受 Git 版本控制系统的情况下。实际上，*gist* 就是一个
    Git 仓库，具备完整的提交历史、差异（diff）、分叉和克隆选项等功能。
- en: When you create a gist, you have the option to add multiple files but with limits.
    For example, to add an Excel spreadsheet, you’ll need to save it as a comma-separated
    values (CSV) file. Likewise, you can’t add image files. Nor can you add directories.
    So, if your project is data heavy, you’ll probably want to create a full GitHub
    repository using GitHub Desktop or Git with the command line.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个 gist 时，你可以选择添加多个文件，但会有一定的限制。例如，若要添加 Excel 表格，你需要将其保存为逗号分隔值（CSV）文件。同样，你不能添加图片文件，也不能添加目录。因此，如果你的项目数据量较大，你可能需要使用
    GitHub Desktop 或通过命令行使用 Git 创建一个完整的 GitHub 仓库。
- en: Given that our *geyser.ipynb* notebook is simple and stand-alone, let’s add
    it to Gist. First, go to the website at *[https://gist.github.com/](https://gist.github.com/)*.
    If you already have a GitHub account, click **Sign in** on the right side of the
    Gist banner ([Figure 5-27](ch05.xhtml#ch05fig27)). Otherwise, click **Sign up**
    to create a free account.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们的*geyser.ipynb*笔记本很简单且独立，让我们将其添加到 Gist 中。首先，访问网站* [https://gist.github.com/](https://gist.github.com/)*。如果你已经有
    GitHub 账户，点击 Gist 横幅右侧的**登录**按钮（[图 5-27](ch05.xhtml#ch05fig27)）。否则，点击**注册**以创建一个免费账户。
- en: '![Image](../images/05fig27.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig27.jpg)'
- en: '*Figure 5-27: The GitHub Gist startup banner*'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-27：GitHub Gist 启动横幅*'
- en: After you sign in, click the plus sign (**+**) on the banner ([Figure 5-28](ch05.xhtml#ch05fig28))
    to create a gist.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，点击横幅上的加号（**+**）（[图 5-28](ch05.xhtml#ch05fig28)）来创建一个 Gist。
- en: '![Image](../images/05fig28.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig28.jpg)'
- en: '*Figure 5-28: The GitHub Gist banner after sign-in*'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-28：登录后的 GitHub Gist 横幅*'
- en: In the next window, you’ll see a large blank area for adding text ([Figure 5-29](ch05.xhtml#ch05fig29)).
    You’ll also be prompted to add a filename with extension. Enter **geyser.ipynb**
    and then, in the **Gist description** box, enter **Old Faithful eruption notebook**.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，你将看到一个大的空白区域，用于添加文本（[图 5-29](ch05.xhtml#ch05fig29)）。你还会被提示输入带扩展名的文件名。请输入**geyser.ipynb**，然后在**Gist
    描述**框中输入**老忠实喷发笔记本**。
- en: '![Image](../images/05fig29.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig29.jpg)'
- en: '*Figure 5-29: The Gist creation page*'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-29：Gist 创建页面*'
- en: Now for the fun part. In the file explorer for your operating system, navigate
    to the *geyser.ipynb* file that we built earlier and drag and drop it into the
    blank text box area in the Gist creation page. You should see the JSON text file
    for your notebook ([Figure 5-30](ch05.xhtml#ch05fig30)).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分。在你操作系统的文件资源管理器中，导航到我们之前构建的*geyser.ipynb*文件，并将其拖放到 Gist 创建页面的空白文本框区域中。你应该能看到你笔记本的
    JSON 文本文件（[图 5-30](ch05.xhtml#ch05fig30)）。
- en: '![Image](../images/05fig30.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig30.jpg)'
- en: '*Figure 5-30: The results of dragging and dropping the notebook into Gist*'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-30：拖放笔记本到 Gist 中的结果*'
- en: Finish by clicking the *arrow* on the green button in the lower right to see
    the save options. You can create a private (secret) or public gist ([Figure 5-31](ch05.xhtml#ch05fig31)).
    With the secret option, only people who know your URL can see the contents. Let’s
    keep this between us, so click **Create secret gist**.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击右下角绿色按钮上的*箭头*，查看保存选项。你可以创建一个私人（秘密）或公共的 Gist（[图 5-31](ch05.xhtml#ch05fig31)）。使用秘密选项时，只有知道你的
    URL 的人才能看到内容。让我们保密，所以点击**创建秘密 Gist**。
- en: '![Image](../images/05fig31.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig31.jpg)'
- en: '*Figure 5-31: The options for creating a gist*'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-31：创建 Gist 的选项*'
- en: '**NOTE**'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If someone guesses or accidently discovers the URL to a secret gist, they’ll
    be able to see it. For better security, you’ll need to use GitHub Desktop or Git
    to create a private repository (see “Creating Your First Repository Using GitHub
    Desktop” at [https://docs.github.com/](https://docs.github.com/)).*'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果有人猜测或意外发现了秘密 Gist 的 URL，他们将能够查看它。为了更好的安全性，你需要使用 GitHub Desktop 或 Git 创建一个私人仓库（参见“使用
    GitHub Desktop 创建你的第一个仓库” [https://docs.github.com/](https://docs.github.com/)）。*'
- en: After a few seconds, you should see your notebook fully rendered as a static
    HTML file. Output such as the violin plot will show up only if the notebook was
    executed prior to saving.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，你应该能看到你的笔记本已完全渲染为静态 HTML 文件。输出内容，如小提琴图，仅会在笔记本在保存之前已经执行过时显示。
- en: If you scroll down, you’ll see a box for adding comments. If you scroll to the
    top, you’ll see icons for actions such as deleting or editing files, as illustrated
    in [Figure 5-32](ch05.xhtml#ch05fig32). If you click Edit, the notebook will revert
    to the JSON format ([Figure 5-30](ch05.xhtml#ch05fig30)). Although it’s possible
    to edit this text and change the notebook, I doubt you’ll want to. Let’s look
    at some other options.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向下滚动，你将看到一个添加评论的框。如果你向上滚动，你会看到一些操作图标，例如删除或编辑文件，正如[图 5-32](ch05.xhtml#ch05fig32)所示。如果你点击编辑，笔记本将恢复为
    JSON 格式（[图 5-30](ch05.xhtml#ch05fig30)）。虽然可以编辑这些文本并更改笔记本，但我怀疑你会想这么做。我们来看看其他选项。
- en: '![Image](../images/05fig32.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig32.jpg)'
- en: '*Figure 5-32: Options for working with the gist*'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-32：与 Gist 一起工作的选项*'
- en: By clicking the **Download ZIP** button, users can download your gist as a folder
    on their machine, where they can edit and run the notebook. The Embed pull-down
    menu provides options for embedding the gist in a website (such as a blog post),
    copying a sharable link, or cloning the gist. The embed option works in any text
    field that supports JavaScript. To the left of the **Download ZIP** button, there’s
    an icon for saving the gist to your computer and using it in GitHub Desktop.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击 **下载 ZIP** 按钮，用户可以将你的 Gist 下载为一个文件夹到他们的计算机中，在那里他们可以编辑和运行该笔记本。嵌入下拉菜单提供了将
    Gist 嵌入到网站（例如博客文章）、复制共享链接或克隆 Gist 的选项。嵌入选项适用于任何支持 JavaScript 的文本字段。在 **下载 ZIP**
    按钮的左侧，有一个图标用于将 Gist 保存到你的计算机，并在 GitHub Desktop 中使用它。
- en: '**NOTE**'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If your main reason for sharing notebooks on GitHub is to work collaboratively
    on the notebook’s content, you should clear the output from your notebook before
    adding it to the repository. This will make it easier to track changes to the
    code. To learn more, visit [https://mg.readthedocs.io/git-jupyter.html](https://mg.readthedocs.io/git-jupyter.html).*'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你分享笔记本的主要目的是与他人协作修改笔记本内容，那么在将其添加到仓库之前，应该清除笔记本中的输出。这将使得跟踪代码的变化变得更加容易。欲了解更多信息，请访问
    [https://mg.readthedocs.io/git-jupyter.html](https://mg.readthedocs.io/git-jupyter.html)。*'
- en: To see the full documentation for Gist, visit *[https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists/](https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists/)*.
    There’s also a notebook extension, called *gist-it*, for creating gists (*[https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/gist_it/readme.html](https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/gist_it/readme.html)*).
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Gist 的完整文档，请访问 *[https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists/](https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists/)*。此外，还有一个名为
    *gist-it* 的笔记本扩展，用于创建 Gist (*[https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/gist_it/readme.html](https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/gist_it/readme.html)*)。
- en: With your notebooks in a repository, you’ll have additional options for distributing
    them. Let’s look at some of the most popular.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 将笔记本放入仓库后，你将有更多分发它们的选项。让我们来看看一些最受欢迎的选项。
- en: '***Sharing Notebooks via Jupyter Notebook Viewer***'
  id: totrans-399
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过 Jupyter Notebook Viewer 分享笔记本***'
- en: '*Jupyter nbviewer*, or *Notebook Viewer*, is a free service for rendering GitHub-hosted
    notebooks online. It’s useful for when the GitHub rendering engine has difficulty,
    such as with large notebooks, using a mobile device, or using some JavaScript-based
    libraries. Colleagues and stakeholders can use nbviewer to view inputs and outputs,
    but to execute code, they must download the notebook to a local Jupyter installation.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jupyter nbviewer*，或称 *Notebook Viewer*，是一个免费的在线渲染 GitHub 托管笔记本的服务。当 GitHub
    渲染引擎遇到困难时，例如处理大型笔记本、使用移动设备或使用某些基于 JavaScript 的库时，这个服务特别有用。同行和利益相关者可以使用 nbviewer
    查看输入和输出，但要执行代码，他们必须将笔记本下载到本地 Jupyter 安装中。'
- en: To use nbviewer, you simply launch the website (*[https://nbviewer.jupyter.org/](https://nbviewer.jupyter.org/)*)
    and paste the notebook’s URL into a text box ([Figure 5-33](ch05.xhtml#ch05fig33)).
    This renders the notebook as a static HTML web page and gives you a stable link
    to that page that you can share with others. This link will remain active so long
    as the notebook location in the GitHub repository doesn’t change.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 nbviewer，你只需启动网站 (*[https://nbviewer.jupyter.org/](https://nbviewer.jupyter.org/)*)，并将笔记本的
    URL 粘贴到文本框中（[图 5-33](ch05.xhtml#ch05fig33)）。这将把笔记本渲染为一个静态的 HTML 网页，并为你提供一个稳定的链接，可以与他人分享。只要
    GitHub 仓库中的笔记本位置没有改变，这个链接将保持有效。
- en: '![Image](../images/05fig33.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig33.jpg)'
- en: '*Figure 5-33: The nbviewer web application*'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-33：nbviewer Web 应用程序*'
- en: The application also supports browsing collections of notebooks and rendering
    notebooks in other formats, such as slides and scripts. To share multiple notebooks,
    first place them all in the same repository. Then, point nbviewer to the repository’s
    address, and it will automatically create a navigable index for users.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序还支持浏览笔记本集合，并渲染其他格式的笔记本，如幻灯片和脚本。要分享多个笔记本，首先将它们都放入同一个仓库中。然后，将 nbviewer 指向该仓库的地址，它将自动为用户创建一个可导航的索引。
- en: You can test nbviewer using the gist we made in the previous section. Just copy
    the link using either the Embed menu or the clipboard icon (see [Figure 5-32](ch05.xhtml#ch05fig32))
    and then paste it into nbviewer.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用我们在上一节中制作的 gist 来测试 nbviewer。只需使用嵌入菜单或剪贴板图标复制链接（参见 [图 5-32](ch05.xhtml#ch05fig32)），然后将其粘贴到
    nbviewer 中。
- en: '***Sharing Notebooks via Binder***'
  id: totrans-406
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过 Binder 分享笔记本***'
- en: '*Binder* (*[https://mybinder.org](https://mybinder.org)*) is a free website
    designed for use with *public* repositories such as on GitHub. Binder lets you
    run notebooks stored in these static repositories by building a *Docker image*
    of the repository. A Docker image is a combination of a filesystem and parameters
    (see *[https://www.docker.com/](https://www.docker.com/)*). When you share your
    notebook, via a URL, Binder provides both your code and all the software needed
    to run it. The user doesn’t need to download or install anything.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '*Binder* (*[https://mybinder.org](https://mybinder.org)*) 是一个为使用 *公开* 仓库（例如
    GitHub 上的仓库）而设计的免费网站。Binder 通过构建仓库的 *Docker 镜像*，让你运行存储在这些静态仓库中的笔记本。Docker 镜像是一个包含文件系统和参数的组合（参见
    *[https://www.docker.com/](https://www.docker.com/)*）。当你通过 URL 分享你的笔记本时，Binder
    会提供你的代码以及运行它所需的所有软件。用户无需下载或安装任何东西。'
- en: Binder’s base environment is barebones. If your project uses any third-party
    packages, such as Matplotlib or NumPy, your GitHub repository should include either
    an *environment.yml* or a *requirements.txt* file. These files list your project’s
    package requirements (see the “Duplicating and Sharing Environments” on [page
    44](ch02.xhtml#ch00lev2sec22)). Binder will read the file and include any packages
    in the Docker image. It will update this image if you commit new changes to GitHub.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: Binder 的基础环境是精简的。如果你的项目使用了任何第三方包，例如 Matplotlib 或 NumPy，你的 GitHub 仓库应包含 *environment.yml*
    或 *requirements.txt* 文件。这些文件列出了你的项目所需的包（参见 [第 44 页](ch02.xhtml#ch00lev2sec22)的“复制和共享环境”部分）。Binder
    会读取该文件，并将所有包包括在 Docker 镜像中。如果你向 GitHub 提交新的更改，Binder 会更新该镜像。
- en: After the image is built, you can use the Binder URL to share your notebook.
    Binder uses a free *JupyterHub* (*[https://jupyter.org/hub](https://jupyter.org/hub)*)
    server to host your repository. JupyterHub is an open source service that allows
    institutions to share notebooks across large pools of users. With the public IP
    address that you provide, users can interact with your code and environment within
    a live JupyterHub instance.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像构建完成后，你可以使用 Binder URL 分享你的笔记本。Binder 使用免费的 *JupyterHub* (*[https://jupyter.org/hub](https://jupyter.org/hub)*)
    服务器来托管你的仓库。JupyterHub 是一个开源服务，允许机构在大量用户之间共享笔记本。通过你提供的公共 IP 地址，用户可以在一个实时的 JupyterHub
    实例中与代码和环境进行交互。
- en: '[Figure 5-34](ch05.xhtml#ch05fig34) shows the Binder start-up screen. I highly
    recommend viewing the “Zero-to-Binder” beginner tutorial by clicking the Python
    link visible at the top of this figure. Additional guidance (not shown) is included
    at the bottom of the home page.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-34](ch05.xhtml#ch05fig34) 显示了 Binder 启动屏幕。我强烈推荐点击图中顶部可见的 Python 链接，查看“从零开始使用
    Binder”的初学者教程。附加的指导（未显示）包含在主页底部。'
- en: '![Image](../images/05fig34.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig34.jpg)'
- en: '*Figure 5-34: The Binder online form for sharing interactive notebooks*'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-34：Binder 在线表单用于分享互动笔记本*'
- en: Users can execute your notebooks, so you’ll need to provide any data dependencies.
    If these data files require 10MB or less of memory, the simplest solution is to
    add them directly into your GitHub repository. Remember, this must be a public
    repository for Binder to access it, so you don’t want to include any sensitive
    information. And you need to keep in mind Binder downloads data only when the
    Docker image is built, not when the Binder link is clicked. Images are rebuilt
    only when there is a new commit to the repository.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以执行你的笔记本，因此你需要提供任何数据依赖项。如果这些数据文件占用的内存为 10MB 或更少，最简单的解决方案是直接将它们添加到你的 GitHub
    仓库中。记住，这必须是一个公开仓库，以便 Binder 访问它，因此你不应包含任何敏感信息。你还需要记住，Binder 仅在构建 Docker 镜像时下载数据，而不是在点击
    Binder 链接时。只有当仓库有新的提交时，镜像才会被重建。
- en: For data sizes between 10MB and a few hundred megabytes, you need to add a file
    called *postBuild* to your repository. This file is a shell script that is executed
    as part of the Docker image construction and is executed only once when a new
    image is built. To learn more, see the documentation at *[https://mybinder.readthedocs.io/en/latest/using/config_files.html#postbuild-run-code-after-installing-the-environment/](https://mybinder.readthedocs.io/en/latest/using/config_files.html#postbuild-run-code-after-installing-the-environment/)*.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大小在 10MB 到几百兆字节之间的数据，你需要向你的仓库添加一个名为 *postBuild* 的文件。这个文件是一个 shell 脚本，它会作为
    Docker 镜像构建的一部分执行，并且只会在新镜像构建时执行一次。要了解更多信息，请参见文档中的 *[https://mybinder.readthedocs.io/en/latest/using/config_files.html#postbuild-run-code-after-installing-the-environment/](https://mybinder.readthedocs.io/en/latest/using/config_files.html#postbuild-run-code-after-installing-the-environment/)*。
- en: It’s impractical to place large files in your GitHub repository or include them
    directly in the image that Binder builds. You’re better off using a library specific
    to the data format to stream the data as you’re using it. Alternatively, you can
    download it on demand as part of your code. For security reasons, outgoing traffic
    is restricted to HTTP or GitHub connections only, so you can’t use FTP sites to
    fetch data using Binder.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 将大文件放入 GitHub 仓库或直接包含在 Binder 构建的镜像中并不实际。你最好使用一个特定于数据格式的库，在使用数据时流式传输它。或者，你可以在代码中按需下载它。出于安全原因，外发流量仅限于
    HTTP 或 GitHub 连接，因此你不能使用 FTP 网站通过 Binder 获取数据。
- en: If a user changes your notebook through Binder, they will not be able to save
    or push changes to the GitHub repository. To save changes, they will need to download
    the notebook to their computer by clicking **File** ▸ **Download as** ▸ **Notebook
    (.ipynb)**.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户通过 Binder 更改了你的笔记本，他们将无法保存或推送更改到 GitHub 仓库。要保存更改，他们需要通过点击 **文件** ▸ **下载为**
    ▸ **笔记本 (.ipynb)** 将笔记本下载到他们的计算机。
- en: Because of its data limits, saving issues, and lack of version control, Binder
    is best for viewing and running notebooks. To collaboratively *develop* notebooks,
    Git with GitHub is preferred.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据限制、保存问题和缺乏版本控制，Binder 最适合用来查看和运行笔记本。要协作 *开发* 笔记本，最好使用 Git 和 GitHub。
- en: '***Other Sharing Options***'
  id: totrans-418
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***其他共享选项***'
- en: Other options for sharing notebooks include—but are not limited to—*Jovian*
    (*[https://jovian.ai/docs/](https://jovian.ai/docs/)*), *Google Colaboratory*
    (*[https://colab.research.google.com/notebooks/intro.ipynb/](https://colab.research.google.com/notebooks/intro.ipynb/)*),
    and *Microsoft Azure Notebooks ([https://notebooks.azure.com/](https://notebooks.azure.com/)*).
    These options tend to require more setup than those we discussed previously and
    might not play well with GitHub. All require you have an account, and Jovian needs
    to be locally installed. The notebook interface will look a bit different in the
    Google and Microsoft options.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 共享笔记本的其他选项包括但不限于 *Jovian* (*[https://jovian.ai/docs/](https://jovian.ai/docs/)*),
    *Google Colaboratory* (*[https://colab.research.google.com/notebooks/intro.ipynb/](https://colab.research.google.com/notebooks/intro.ipynb/)*),
    和 *Microsoft Azure Notebooks* (*[https://notebooks.azure.com/](https://notebooks.azure.com/)*)。这些选项通常比我们之前讨论的选项需要更多的设置，并且可能与
    GitHub 兼容性较差。所有这些都要求你拥有一个帐户，而且 Jovian 需要本地安装。Google 和 Microsoft 的选项中，笔记本界面看起来会稍有不同。
- en: Colab lets users collaborate and run code that exploits Google’s cloud resources.
    This includes using free GPUs, saving documents to Google Drive, and running the
    *TensorFlow* machine learning library directly in the browser. In fact, Google
    has a “Seedbank” repository of example deep learning notebooks that you can open
    and run with the click of a button.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: Colab 让用户能够协作并运行利用 Google 云资源的代码。这包括使用免费的 GPU，将文档保存到 Google Drive，以及直接在浏览器中运行
    *TensorFlow* 机器学习库。实际上，Google 有一个名为 “Seedbank” 的示例深度学习笔记本仓库，你可以一键打开并运行。
- en: Jovian permits cell-level commenting and discussion to aid collaboration. Azure
    helps you to create interactive presentations from your notebooks and share them
    easily, though this is simple to do, regardless.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: Jovian 允许在单元格级别进行注释和讨论，以促进协作。Azure 帮助你从笔记本创建交互式演示并轻松分享，尽管无论如何，做到这一点都很简单。
- en: Finally, if you want total control over who can access your notebooks and how
    they’re used, you can set up your own *JupyterHub* multiuser *Hub*. This lets
    you offer notebook servers to a class of students, a corporate data science workgroup,
    a scientific research project, and so on.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你希望完全控制谁可以访问你的笔记本以及如何使用它们，你可以设置自己的 *JupyterHub* 多用户 *Hub*。这让你可以为学生班级、企业数据科学工作组、科研项目等提供笔记本服务器。
- en: To use JupyterHub, you need a Unix server (typically Linux) running somewhere
    that is accessible to your users on a network. This can require configuring a
    public server, something best done by an IT team to ensure security issues are
    properly addressed. To learn more, visit *[https://jupyterhub.readthedocs.io/en/latest/](https://jupyterhub.readthedocs.io/en/latest/)*
    and *[https://jupyter-server.readthedocs.io/en/latest/operators/public-server.html](https://jupyter-server.readthedocs.io/en/latest/operators/public-server.html)*.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JupyterHub时，你需要在某个地方运行一个可供用户通过网络访问的Unix服务器（通常是Linux）。这可能需要配置一个公共服务器，最好由IT团队来完成，以确保安全问题得到妥善解决。了解更多信息，请访问*[https://jupyterhub.readthedocs.io/en/latest/](https://jupyterhub.readthedocs.io/en/latest/)*和*[https://jupyter-server.readthedocs.io/en/latest/operators/public-server.html](https://jupyter-server.readthedocs.io/en/latest/operators/public-server.html)*。
- en: '**NOTE**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If all you need is remote access to your personal machine, you can set up
    a public server with a single user by following the instructions at [https://jupyter-notebook.readthedocs.io/en/stable/public_server.html](https://jupyter-notebook.readthedocs.io/en/stable/public_server.html).*'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你只需要远程访问你的个人机器，可以按照[https://jupyter-notebook.readthedocs.io/en/stable/public_server.html](https://jupyter-notebook.readthedocs.io/en/stable/public_server.html)上的说明设置一个单用户的公共服务器。*'
- en: '***Trusting Notebooks***'
  id: totrans-426
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***信任笔记本***'
- en: If you’re running Notebook locally on your own computer, your notebook is as
    secure as your computer. But if you’re accessing a notebook remotely, sharing
    your notebooks, or creating a server for multiple users, the potential for hackers
    to exploit the notebook increases.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在自己的计算机上本地运行笔记本，那么笔记本的安全性取决于你的计算机。但如果你是远程访问笔记本、共享笔记本或为多个用户创建服务器，则黑客利用笔记本的潜力会增加。
- en: The problem is that a notebook includes output that exists in a context that
    can execute code (via JavaScript). Ideally, code should not execute just because
    a user opens a notebook, especially code that they didn’t write. But after a user
    decides to execute code in the notebook, it should be considered trusted, regardless
    of what it does.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于笔记本包含在可以执行代码的上下文中存在的输出（通过JavaScript）。理想情况下，代码不应仅仅因为用户打开了笔记本就执行，尤其是那些他们没有编写的代码。但一旦用户决定执行笔记本中的代码，无论其执行什么内容，都应视为受信任的。
- en: 'To address this, the Jupyter developers have implemented security models designed
    to prevent execution of untrusted code without explicit user input. To ensure
    that a notebook is “trustworthy,” whenever it’s executed and saved, a signature
    is computed from a digest of the notebook’s contents along with a secret key.
    This is stored in a database, writable only by the current user. By default, here’s
    where this database is located:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Jupyter开发者实现了旨在防止未经明确用户输入执行不受信任代码的安全模型。为了确保笔记本是“可信的”，每次执行和保存时，都会通过笔记本内容的摘要和一个秘密密钥计算签名。该签名被存储在一个数据库中，只有当前用户可以写入。默认情况下，该数据库位于以下位置：
- en: '*%APPDATA%/jupyter/nbsignatures.db* in Windows'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows中的*%APPDATA%/jupyter/nbsignatures.db*
- en: '*~/Library/Jupyter/nbsignatures.db* in macOS'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS中的*~/Library/Jupyter/nbsignatures.db*
- en: '*~/.local/share/jupyter/nbsignatures.db* in Linux'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux中的*~/.local/share/jupyter/nbsignatures.db*
- en: Each signature represents a series of outputs, which were produced by code that
    the user executed. As stated previously, any output generated and saved during
    an interactive session is considered trustworthy.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 每个签名代表一系列输出，这些输出是用户执行代码后产生的。如前所述，在交互式会话中生成并保存的任何输出都被视为可信的。
- en: When a user opens a notebook, the server computes its signature. If it finds
    it in the user’s database, any HTML and JavaScript output will be trusted. Otherwise,
    it’s untrusted.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户打开一个笔记本时，服务器会计算其签名。如果它在用户的数据库中找到该签名，任何HTML和JavaScript输出将被信任。否则，它是不受信任的。
- en: 'When collaborating on a notebook, other users will have different keys, so
    the notebook will be in an untrusted state when shared to them. There are three
    recommended methods for managing this situation:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在合作编辑笔记本时，其他用户将拥有不同的密钥，因此当笔记本共享给他们时，它将处于不受信任的状态。针对这种情况，有三种推荐的方法进行管理：
- en: Rerun the notebook after opening (not always viable and you should trust the
    sender).
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开后重新运行笔记本（并非总是可行，你应该信任发送者）。
- en: Explicitly trust notebooks via **File** ▸ **Trusted notebook** (see [Figure
    5-26](ch05.xhtml#ch05fig26)) or, at the CLI, run jupyter trust /path/to/notebook.ipynb.
    These methods load the notebook, compute a new signature, and add that signature
    to the user’s database
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**文件** ▸ **信任的笔记本**明确信任笔记本（参见[图5-26](ch05.xhtml#ch05fig26)）或在CLI中运行`jupyter
    trust /path/to/notebook.ipynb`。这些方法加载笔记本，计算新的签名，并将该签名添加到用户的数据库中。
- en: Share a “notebook signatures database” and use a configuration dedicated to
    the project.
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享一个“笔记本签名数据库”，并使用一个专门针对该项目的配置。
- en: For detailed instructions on the last approach, along with more information
    on notebook and server security, see the documentation at *[https://jupyter-notebook.readthedocs.io/en/stable/security.html](https://jupyter-notebook.readthedocs.io/en/stable/security.html)*.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 有关最后一种方法的详细说明，以及有关笔记本和服务器安全的更多信息，请参见[文档](https://jupyter-notebook.readthedocs.io/en/stable/security.html)。
- en: '**Turning Notebooks into Slideshows**'
  id: totrans-440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将笔记本转化为幻灯片**'
- en: When you complete your project, you can present the results directly from your
    notebook by turning it into a slideshow. This works much like Microsoft PowerPoint,
    with the notable difference being that you can run code live for a dynamic and
    immersive experience. Let’s work through an example using the modular approach,
    whereby you run Jupyter Notebook from the *base* environment.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 完成项目后，您可以通过将笔记本转化为幻灯片直接展示结果。这与Microsoft PowerPoint的工作方式类似，唯一的区别是，您可以实时运行代码，带来动态和沉浸式的体验。我们将通过一个示例来演示模块化的方法，在这种方法中，您从*base*环境运行Jupyter
    Notebook。
- en: '***Installing the RISE Extension***'
  id: totrans-442
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装RISE扩展***'
- en: 'To enable interactive coding in the slideshow, you’ll need to install the *Reveal.js
    – Jupyter/IPython Slideshow Extension (RISE)*. First, shut down any currently
    running Jupyter notebooks. Next, open Anaconda Prompt (on Windows) or a terminal
    (on macOS or Linux) and run the following in the *base* environment:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 要在幻灯片中启用交互式编程，您需要安装*Reveal.js – Jupyter/IPython幻灯片扩展（RISE）*。首先，关闭所有正在运行的Jupyter笔记本。接下来，打开Anaconda
    Prompt（Windows系统）或终端（macOS或Linux系统），并在*base*环境中运行以下命令：
- en: '[PRE44]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, Notebook can find this extension and display it on the nbextensions tab
    on the Dashboard page. Make sure that you install RISE in the conda environment
    in which you installed Notebook.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，笔记本可以找到这个扩展并将其显示在仪表盘页面的nbextensions标签上。确保在安装笔记本的conda环境中安装RISE。
- en: '***Creating a Slideshow***'
  id: totrans-446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建幻灯片***'
- en: Let’s create a new notebook that we can use to demonstrate slideshow capabilities.
    Because we’re saving a new file, we’ll launch Notebook from the *notebooks* folder,
    created previously.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的笔记本，用来演示幻灯片功能。由于我们要保存一个新文件，因此我们将在之前创建的*notebooks*文件夹中启动笔记本。
- en: 'Activate the *base* environment (where Jupyter Notebook is installed). Next,
    use the `cd` command and your personal path to open your *notebooks* directory
    and then start Notebook:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 激活*base*环境（即Jupyter Notebook已安装的环境）。接下来，使用`cd`命令和您的个人路径打开*notebooks*目录，然后启动笔记本：
- en: '[PRE45]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When the Notebook dashboard opens in your browser, click the **New** button
    at the upper right of the Files tab to open a drop-down menu ([Figure 5-4](ch05.xhtml#ch05fig4)).
    To activate the kernel in your *my_nb_proj* environment, select **Python [conda
    env:my_nb_proj_env]** from the list. Remember, this lets us start Notebook from
    the *base* environment and then work in *another* environment.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 当笔记本仪表盘在浏览器中打开时，点击文件标签页右上角的**新建**按钮，打开下拉菜单（见[图5-4](ch05.xhtml#ch05fig4)）。为了激活*my_nb_proj*环境中的内核，从列表中选择**Python
    [conda env:my_nb_proj_env]**。请记住，这样可以从*base*环境启动笔记本，然后在*另一个*环境中工作。
- en: When the blank notebook appears, click **Untitled** near the top of the window,
    rename the new notebook **slideshow** and save it. You should also see the new
    RISE icon on the far-right side of the toolbar ([Figure 5-35](ch05.xhtml#ch05fig35)).
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 当空白笔记本出现时，点击窗口顶部的**无标题**，将新笔记本重命名为**幻灯片**并保存。您还应该在工具栏的最右侧看到新的RISE图标（见[图5-35](ch05.xhtml#ch05fig35)）。
- en: '![Image](../images/05fig35.jpg)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig35.jpg)'
- en: '*Figure 5-35: The RISE icon at the end of the toolbar*'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-35：工具栏末端的RISE图标*'
- en: From the top menu, click **View** ▸ **Cell Toolbar** ▸ **Slideshow**. The first
    empty cell in your notebook should now include a drop-down menu for selecting
    the slide type, as illustrated in [Figure 5-36](ch05.xhtml#ch05fig36).
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部菜单点击**视图** ▸ **单元格工具栏** ▸ **幻灯片**。您的笔记本中的第一个空单元格现在应该包含一个用于选择幻灯片类型的下拉菜单，如[图5-36](ch05.xhtml#ch05fig36)所示。
- en: '![Image](../images/05fig36.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig36.jpg)'
- en: '*Figure 5-36: An empty notebook cell in slideshow mode. Note the menu for selecting
    the slide type on the right.*'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-36：幻灯片模式下的空笔记本单元格。注意右侧用于选择幻灯片类型的菜单。*'
- en: This menu gives you the six options, described in [Table 5-4](ch05.xhtml#ch05tab4).
    The most used are Slide, Skip, and Notes.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜单提供了六个选项，详见[表5-4](ch05.xhtml#ch05tab4)。最常用的是“幻灯片”、“跳过”和“备注”。
- en: '**Table 5-4:** The Slide Type Menu'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '**表5-4：** 幻灯片类型菜单'
- en: '| **Slide type** | **Description** |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| **幻灯片类型** | **描述** |'
- en: '| --- | --- |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Slide | Start a new slide. When presenting, use the left and right arrow
    keys to switch slides. |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| 幻灯片 | 开始新的一张幻灯片。在展示时，使用左右箭头键切换幻灯片。 |'
- en: '| Sub-slide | Create a subpage with transition animation. Use up and down arrow
    keys to switch. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| 子幻灯片 | 创建带有过渡动画的子页面。使用上下箭头键切换。 |'
- en: '| Fragment | Create a hidden part of a slide transitioned to using the spacebar.
    |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| 片段 | 创建一个隐藏的幻灯片部分，可以通过空格键过渡显示。 |'
- en: '| Skip | Indicate that the selected slide should be skipped and not shown.
    Useful for hiding code that does not generate an in-show visualization. |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| 跳过 | 表示该幻灯片应被跳过，不显示。适用于隐藏不生成展示中可视化效果的代码。 |'
- en: '| Notes | Indicate that the selected slide represents speaker notes. |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| 备注 | 表示该幻灯片为演讲者备注。 |'
- en: '| - | Indicate that the current cell should behave like the previous cell.
    |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| - | 表示当前单元格应与前一个单元格的行为一致。 |'
- en: Now, let’s make a short slideshow about *logarithmic spirals*, a common shape
    found in nature ([Figure 5-37](ch05.xhtml#ch05fig37)).
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们做一个关于*对数螺旋*的简短幻灯片，这是自然界中常见的形状（[图 5-37](ch05.xhtml#ch05fig37)）。
- en: '![Image](../images/05fig37.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/05fig37.jpg)'
- en: '*Figure 5-37: Some examples of the logarithmic spiral in nature*'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-37：自然界中对数螺旋的一些例子*'
- en: 'Start by making a title slide. In the first cell, set the **Slide Type** menu
    to **Slide**. Then, using the top toolbar, change the cell type to **Markdown**
    and enter the following:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 从制作标题幻灯片开始。在第一个单元格中，将**幻灯片类型**菜单设置为**幻灯片**。然后，使用顶部工具栏将单元格类型更改为**Markdown**并输入以下内容：
- en: '[PRE46]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: On your keyboard, press CTRL-ENTER to exit Markdown mode.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在键盘上按CTRL-ENTER退出Markdown模式。
- en: 'Insert a new cell beneath the title, set its types to **Slide** and **Markdown**,
    as before, and then enter the following:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题下方插入一个新单元格，继续将其类型设置为**幻灯片**和**Markdown**，然后输入以下内容：
- en: '[PRE47]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Press CTRL-ENTER to execute the code.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 按CTRL-ENTER执行代码。
- en: Insert a new cell and set its types to **Slide** and **Code**. Next, enter the
    following code, which applies the polar equation and generates interactive slider
    bars. These sliders let you assess the impact of the a, b, and θ parameters. Don’t
    worry about all the details for now; we’ll go over the NumPy and Matplotlib libraries
    later in the book.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 插入一个新单元格，并将其类型设置为**幻灯片**和**代码**。接下来，输入以下代码，应用极坐标方程并生成互动滑块。这些滑块让你评估a、b和θ参数的影响。暂时不用担心所有的细节，我们将在书中的后面部分介绍NumPy和Matplotlib库。
- en: '[PRE48]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Next, insert a new cell below the previous cell and set its types to **Notes**
    and **Markdown**. This cell can prompt you on the meaning of the parameters while
    you’re describing the dynamic plot to your audience. Enter the following and then
    press CTRL-ENTER to execute:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上一个单元格下方插入一个新单元格，并将其类型设置为**备注**和**Markdown**。此单元格可以在你向观众描述动态图时提示参数的含义。输入以下内容，然后按CTRL-ENTER执行：
- en: '[PRE49]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Cells representing “slide notes” must come immediately after the cell with which
    they’re associated.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 表示“幻灯片备注”的单元格必须紧接在与之关联的单元格之后。
- en: 'Finish the presentation with a new cell whose types are set to **Slide** and
    **Markdown**. Enter the following and then press CTRL-ENTER:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个新的单元格来结束展示，将其类型设置为**幻灯片**和**Markdown**。输入以下内容，然后按CTRL-ENTER执行：
- en: '[PRE50]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: To launch the slideshow, first save the notebook, next click in the top cell,
    and then click the **RISE** button ([Figure 5-35](ch05.xhtml#ch05fig35)). To operate
    the slideshow, use the keyboard shortcuts in [Table 5-5](ch05.xhtml#ch05tab5).
    For a full list of shortcuts, including ones for operating a virtual chalkboard,
    click the **?** icon visible at the lower left of each slide.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动幻灯片，首先保存笔记本，然后点击顶部单元格，再点击**RISE**按钮（[图 5-35](ch05.xhtml#ch05fig35)）。操作幻灯片时，使用[表
    5-5](ch05.xhtml#ch05tab5)中的键盘快捷键。有关所有快捷键的完整列表，包括操作虚拟黑板的快捷键，请点击每张幻灯片左下角可见的**?**图标。
- en: '**Table 5-5:** Selected RISE Keyboard Shortcuts'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 5-5：** 选定的RISE键盘快捷键'
- en: '| **Shortcut** | **Result** |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| **快捷键** | **结果** |'
- en: '| --- | --- |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ALT-R | Enter or exit RISE (slideshow mode) |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| ALT-R | 进入或退出RISE（幻灯片模式） |'
- en: '| SPACE | Move forward to next slide |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| SPACE | 向前切换到下一张幻灯片 |'
- en: '| SHIFT-SPACE | Move back to previous slide |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-SPACE | 返回上一张幻灯片 |'
- en: '| SHIFT-ENTER | Evaluate and select next cell if visible |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT-ENTER | 评估并选择下一个可见单元格 |'
- en: '| HOME/END | Jump to start/end |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
  zh: '| HOME/END | 跳转到开始/结束 |'
- en: '| T | Open speaker notes window |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| T | 打开演讲者备注窗口 |'
- en: Use the spacebar to navigate to the code cell. If you haven’t executed this
    cell already, do so now by pressing either CTRL-ENTER or SHIFT-ENTER. You may
    need to manually adjust the window for the plot to fit correctly. Move the sliders
    slowly to see how the parameters affect the plot. You can’t do this in PowerPoint!
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 使用空格键导航到代码单元。如果你还没有执行这个单元，现在可以按 CTRL-ENTER 或 SHIFT-ENTER 执行。你可能需要手动调整窗口以使图表正确显示。慢慢移动滑块，观察参数如何影响图表。这是
    PowerPoint 做不到的！
- en: '***Using Speaker Notes***'
  id: totrans-494
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用演讲者备注***'
- en: Slideshow comes with a Speaker Notes window that can help you run the presentation.
    It shows the current slide, upcoming slide, speaker notes, and current and elapsed
    time ([Figure 5-38](ch05.xhtml#ch05fig38)). You can have this window open on your
    laptop screen while you’re projecting the slideshow. To enter this mode, press
    the T key while in the slideshow.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: Slideshow 附带一个演讲者备注窗口，可以帮助你进行演示。它显示当前幻灯片、接下来的幻灯片、演讲者备注以及当前和经过的时间（[图 5-38](ch05.xhtml#ch05fig38)）。你可以在投影幻灯片的同时将此窗口打开在你的笔记本屏幕上。要进入此模式，演示时按下
    T 键。
- en: '![Image](../images/05fig38.jpg)'
  id: totrans-496
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/05fig38.jpg)'
- en: '*Figure 5-38: The RISE Speaker Notes window*'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-38：RISE 演讲者备注窗口*'
- en: For remote meetings, Binder (discussed in “Sharing Notebooks via Binder” on
    [page 129](ch05.xhtml#ch00lev2sec71)) lets you host a live slideshow session for
    free within a browser, and users won’t need Python or Jupyter to view it. For
    non-live viewing, the slideshow can be exported to a single HTML file.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 对于远程会议，Binder（在[第129页](ch05.xhtml#ch00lev2sec71)的“通过 Binder 分享笔记本”中讨论）允许你在浏览器中免费托管实时幻灯片会议，用户无需安装
    Python 或 Jupyter 即可查看。对于非实时查看，幻灯片可以导出为单个 HTML 文件。
- en: There’s a lot more to slideshows than I can cover here. The Jupyter Project
    documentation doesn’t include much on the slideshow mode, but you can find plenty
    of detailed tutorials and tips by searching online for “Jupyter Notebook slideshow.”
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 幻灯片的内容远不止我在这里能涉及的。Jupyter 项目的文档没有太多关于幻灯片模式的内容，但你可以通过在线搜索“Jupyter Notebook 幻灯片”找到大量详细的教程和技巧。
- en: '**Summary**'
  id: totrans-500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Jupyter Notebook is wildly popular for good reason; it’s useful, easy, and fun!
    By allowing you to store all your analysis and commentary in one place, notebooks
    make it simple to document your work, share it, present it, and quickly pick up
    where you left off.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 之所以广受欢迎，是有充分理由的；它既实用、又简单、还充满乐趣！通过允许你将所有的分析和评论存储在一个地方，笔记本让记录工作、分享、展示以及快速恢复进度变得非常简单。
- en: Despite this, don’t become *too* enamored with notebooks, because they’re not
    perfect. Their cellular organization encourages pollution of the global namespace,
    discourages writing reusable functions and classes, and makes source control and
    unit testing difficult. Those are some of the reasons why we learned about Spyder
    in [Chapter 4](ch04.xhtml), and why we’ll look at JupyterLab next. With knowledge
    of Notebook, Spyder, and JupyterLab, you’ll always be ready to apply the best
    tool to the task at hand.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，不要对笔记本*过于*迷恋，因为它们并不完美。它们的单元组织方式容易污染全局命名空间，且不利于编写可重用的函数和类，也让源代码管理和单元测试变得困难。这些正是我们在[第4章](ch04.xhtml)中学习
    Spyder 的一些原因，也是接下来我们将要了解 JupyterLab 的原因。掌握了 Notebook、Spyder 和 JupyterLab，你将始终能够根据任务需要选择最佳工具。
