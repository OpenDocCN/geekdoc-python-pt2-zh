- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Problem-Solving With Algorithms
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用算法解决问题
- en: '![](Images/circleart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/circleart.png)'
- en: The act of catching a ball is remarkable. A ball may start so far away that
    it seems only a speck on the horizon. It may be in the air for only a few short
    seconds or less. The ball will meet air resistance, wind, and of course, gravity,
    moving in something like a parabolic arc. And each time a ball is thrown, it is
    sent with a different force, at a different angle, and in a different environment
    with different conditions. So how is it that the moment a batter hits a baseball,
    an outfielder 300 feet away seems to immediately know where to run in order to
    catch it before it hits the ground?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接住一个球的动作是值得称奇的。一个球可能从非常远的地方开始，似乎只是地平线上的一个小点。它可能只在空中停留几秒钟甚至更短的时间。球会遇到空气阻力、风力，当然还有重力，沿着类似抛物线的轨迹运动。而且每次投掷球时，所施加的力、角度和环境条件都各不相同。那么，如何解释当击球员打出一颗棒球时，300英尺外的外野手似乎立刻知道该跑到哪里，以便在球落地之前接住它呢？
- en: 'This question is called *the outfielder problem,* and it’s still being discussed
    in scholarly journals today. We’re starting with the outfielder problem because
    it has two very different solutions: an analytic solution and an algorithmic solution.
    Comparing these solutions will provide a vivid illustration of what an algorithm
    is and how it’s different from other approaches to problem-solving. Additionally,
    the outfielder problem will help us visualize a field that is occasionally abstract—you
    probably have some experience throwing and catching something, and this experience
    can help you understand the theory behind your practice.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题被称为*外野手问题*，至今仍在学术期刊中讨论。我们从外野手问题开始，因为它有两种截然不同的解决方案：分析性解决方案和算法性解决方案。比较这两种解决方案将生动地说明什么是算法，它与其他问题解决方法有何不同。此外，外野手问题将帮助我们可视化一个偶尔显得抽象的领域——你可能有过投掷和接住某物的经验，而这种经验可以帮助你理解实践背后的理论。
- en: Before we can really understand how a human knows exactly where a ball will
    land, it will help to understand how a machine does it. We’ll start by looking
    at an analytic solution to the outfielder problem. This solution is mathematically
    precise and easy for computers to execute instantaneously, and some version of
    it is usually taught in introductory physics classes. It would enable a sufficiently
    agile robot to play outfield for a baseball team.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正理解人类如何准确知道一个球会落在哪里之前，理解机器是如何做到这一点的将会有所帮助。我们将从分析性解决方案开始，研究外野手问题。这个解决方案在数学上是精确的，且计算机可以瞬间执行，而且它通常会在基础物理课程中教授。它可以使足够灵活的机器人为棒球队担任外野手。
- en: 'However, humans can’t easily run analytic equations in their heads, and certainly
    not as quickly as computers can. A solution that’s better suited to human brains
    is an algorithmic solution, which we’ll use to explore what an algorithm is and
    what its strengths are compared to other problem-solving solutions. Moreover,
    the algorithmic solution will show us that algorithms are natural to human thought
    processes and don’t need to be intimidating. The outfielder problem is meant to
    introduce a new way to solve problems: the algorithmic approach.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，人类不容易在脑中快速运行分析方程式，显然无法像计算机那样快速。更适合人类大脑的解决方案是算法性解决方案，我们将用它来探索什么是算法以及它相较于其他问题解决方案的优势。此外，算法性解决方案将向我们展示算法是符合人类思维过程的，并不需要让人感到畏惧。外野手问题旨在介绍一种新的问题解决方式：算法方法。
- en: The Analytic Approach
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析方法
- en: To solve this problem analytically, we have to go back a few centuries to an
    early model of motion.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要从分析的角度解决这个问题，我们需要回溯几个世纪，了解早期的运动模型。
- en: The Galilean Model
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伽利略模型
- en: The equations most commonly used to model a ball’s movement date back to Galileo,
    who centuries ago formulated polynomials that capture acceleration, speed, and
    distance. If we ignore wind and air resistance and assume the ball starts at ground
    level, Galileo’s model says that the horizontal position of a thrown ball at time
    *t* will be given by the formula
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用来模拟球的运动的方程式最早可以追溯到伽利略，几百年前他制定了捕捉加速度、速度和距离的多项式。如果我们忽略风和空气阻力，并假设球从地面开始，伽利略的模型表示，在时间*t*时，投掷的球的水平位置将由以下公式给出：
- en: '![c01eq001](Images/c01eq001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq001](Images/c01eq001.png)'
- en: where *v*[1] represents the starting speed of the ball in the *x* (horizontal)
    direction. Moreover, the height of a thrown ball (*y*), according to Galileo,
    can be calculated at time *t* as
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*v*[1]代表球在*x*（水平）方向上的起始速度。此外，根据伽利略的理论，投掷的球的高度（*y*）可以通过以下公式在时间*t*时计算：'
- en: '![c01eq002](Images/c01eq002.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq002](Images/c01eq002.png)'
- en: 'where *v*[2] represents the starting speed of the ball in the *y* (vertical)
    direction, and *a* represents the constant downward acceleration due to gravity
    (which will be about –9.81 if we are working in metric units). When we substitute
    the first equation into the second equation, we find that the height of a thrown
    ball (*y*) relates to the horizontal position of the ball (*x*) as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*v*[2]代表球在*y*（垂直）方向上的起始速度，*a*代表由于重力引起的恒定向下加速度（如果我们使用公制单位，这个值大约是-9.81）。当我们将第一个方程代入第二个方程时，我们发现投掷的球的高度（*y*）与球的水平位置（*x*）的关系如下：'
- en: '![c01eq003](Images/c01eq003.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq003](Images/c01eq003.png)'
- en: We can use Galileo’s equations to model a hypothetical ball’s trajectory in
    Python using the function in [Listing 1-1](#listing1-1). The specific polynomial
    in [Listing 1-1](#listing1-1) is appropriate for a ball whose initial horizontal
    speed is about 0.99 meters per second, and whose initial vertical speed is about
    9.9 meters per second. You can feel free to try other values for *v*[1] and *v*[2]
    to model any type of throw that interests you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用伽利略的方程在Python中建模一个假设的球的轨迹，使用[列表 1-1:](#listing1-1)中的函数。列表 1-1中的具体多项式适用于初始水平速度约为0.99米/秒，初始垂直速度约为9.9米/秒的球。您可以随意尝试其他*
    v*[1]和*v*[2]的值，以模拟任何您感兴趣的投掷方式。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Listing 1-1:](#listinganchor1-1) A function for calculating the trajectory
    of a ball'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 1-1:](#listinganchor1-1) 一个计算球轨迹的函数'
- en: We can plot the function in [Listing 1-1](#listing1-1) in Python to see what,
    approximately, a ball’s trajectory should look like (ignoring air resistance and
    other negligible factors). We’ll import some plotting capabilities from a module
    called `matplotlib` in the first line. The `matplotlib` module is one of many
    third-party modules we’ll import in code throughout this book. Before you use
    a third-party module, you’ll have to install it. You can install `matplotlib`
    and any other third-party modules by following the instructions at [http://automatetheboringstuff.com/2e/appendixa/](http://automatetheboringstuff.com/2e/appendixa/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Python中绘制[列表 1-1:](#listing1-1)中的函数，看看球的轨迹大致是什么样子（忽略空气阻力和其他微不足道的因素）。在第一行，我们将从一个名为`matplotlib`的模块中导入一些绘图功能。`matplotlib`模块是我们在本书中将导入的许多第三方模块之一。在使用第三方模块之前，您需要先安装它。您可以按照[http://automatetheboringstuff.com/2e/appendixa/](http://automatetheboringstuff.com/2e/appendixa/)中的说明来安装`matplotlib`和其他任何第三方模块。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Listing 1-2:](#listinganchor1-2) Plotting a hypothetical ball trajectory between
    the moment it is thrown (at *x* = 0) and when it hits the ground again (at *x*
    = 2)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 1-2:](#listinganchor1-2) 绘制一个假设的球的轨迹，从它被投掷的那一刻（*x* = 0）到它再次落地的时刻（*x* =
    2）'
- en: The output ([Figure 1-1](#figure1-1)) is a nice plot that shows the path our
    hypothetical ball is expected to follow through space. This pretty curved path
    is similar for every moving projectile that’s influenced by gravity and has been
    poetically called *Gravity’s Rainbow* by the novelist Thomas Pynchon.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出（[图 1-1:](#figure1-1)）是一个漂亮的图，展示了我们假设的球预计将穿越空间的路径。这条美丽的弯曲路径对每个受重力影响的运动物体都是相似的，并且被小说家托马斯·品钦（Thomas
    Pynchon）诗意地称为*重力的彩虹*。
- en: Not all balls will follow this exact path, but this is one possible path that
    a ball could follow. The ball starts at 0, and it goes up and then down exactly
    like we are used to seeing balls go up and down, from the left of our field of
    view to the right.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的球都会遵循这条完全相同的路径，但这是一条球可能遵循的路径。球从0开始，先向上再向下，正如我们习惯看到的球从我们视野的左侧飞到右侧一样。
- en: '![figure_1-1](Images/figure_1-1.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![figure_1-1](Images/figure_1-1.png)'
- en: '[Figure 1-1:](#figureanchor1-1) The trajectory of a hypothetical thrown ball'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1:](#figureanchor1-1) 一个假设的投掷球的轨迹'
- en: The Solve-for-x Strategy
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求解x的策略
- en: 'Now that we have an equation for the ball’s position, we can solve that equation
    for anything that interests us: where the ball will reach its highest point, for
    example, or where it will get to ground level again, which is the one thing that
    an outfielder needs to know in order to catch it. Students in physics classes
    all over the world are taught how to find these solutions, and if we wanted to
    teach a robot to play outfield, it would be very natural to teach the robot these
    equations as well. The method for solving for the ball’s final location is as
    simple as taking the `ball_trajectory()`function we started with and setting it
    equal to 0:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了描述球位置的方程，我们就可以求解出任何我们感兴趣的内容：例如，球会达到的最高点，或者它再次回到地面的位置——这是外场手需要知道的唯一信息，才能接到球。全世界的物理课堂上，学生们都在学习如何找到这些解，如果我们想教机器人打外场，教它这些方程也是非常自然的。求解球最终位置的方法就像我们最初使用的
    `ball_trajectory()` 函数一样简单，只需要将其设为 0：
- en: '![c01eq004](Images/c01eq004.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq004](Images/c01eq004.png)'
- en: 'Then, we can solve this for *x*, using the quadratic formula taught to teenagers
    everywhere:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用青少年们学过的二次方程公式来解这个 *x*：
- en: '![c01eq005](Images/c01eq005.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq005](Images/c01eq005.png)'
- en: In this case, we find that *x* = 0 and *x* = 2 are the solutions. The first
    solution, *x* = 0, is where the ball started, where it was thrown by the pitcher
    or hit by the batter. The second solution, *x* = 2, is where the ball returns
    to the ground again after its flight.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们发现 *x* = 0 和 *x* = 2 是解答。第一个解 *x* = 0 是球开始的地方，就是投手投出或击球员击出的地方。第二个解
    *x* = 2 是球飞行后再次落地的地方。
- en: 'The strategy we just used is a relatively simple one. Let’s call it the *solve-for-*x
    *strategy*. We write down an equation that describes a situation, and then solve
    that equation for the variable we’re interested in. The solve-for-*x* strategy
    is extremely common in the hard sciences, at both the high school and college
    levels. Students are asked to solve for: a ball’s expected destination, the ideal
    level of economic production, the proportion of a chemical that should be used
    in an experiment, or any number of other things.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才使用的策略是相对简单的。我们可以称它为 *解 *x* 策略*。我们写下一个描述情境的方程，然后解这个方程，找出我们感兴趣的变量的值。解 *x*
    的策略在硬科学中非常常见，无论是在高中还是大学水平。学生们常常被要求解答：球的预期着陆点、经济生产的理想水平、实验中应使用的化学物质比例，或者其他许多问题。
- en: The solve-for-*x* strategy is extremely powerful. If, for example, an army observed
    an enemy force fire a projectile weapon (say, a missile), they could quickly plug
    Galileo’s equation into their calculators and nearly instantaneously find where
    the missile was expected to land, and evade it or intercept it accordingly. It
    could be done for free on a consumer-level laptop running Python. If a robot were
    playing outfield in a baseball game, it could do the same to catch a ball without
    breaking a sweat.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 解 *x* 的策略极其强大。例如，如果一支军队观察到敌方发射了一个投射武器（比如导弹），他们可以迅速将伽利略的方程输入到计算器中，几乎瞬间就能找出导弹预计着陆的位置，从而躲避或拦截它。这项操作可以在一台运行
    Python 的消费者级笔记本电脑上免费完成。如果一个机器人在棒球比赛中担任外场，它也可以通过这种方法接到球，轻松应对。
- en: The solve-for-*x* strategy is easy in this case because we already know the
    equation that needs to be solved and the method to solve it. We owe the equation
    for a thrown ball to Galileo, as mentioned. We owe the quadratic formula to the
    great Muhammad ibn Musa al-Khwarizmi, who was the first to specify a fully general
    solution of the quadratic equation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，解 *x* 的策略很简单，因为我们已经知道需要解的方程和解法。我们所说的投掷球的方程来自于伽利略，正如之前所提到的。而求解二次方程的公式则归功于伟大的穆罕默德·伊本·穆萨·阿尔-花拉兹米，他是第一个给出完全一般的二次方程解法的人。
- en: Al-Khwarizmi was a ninth-century polymath who contributed to astronomy, cartography,
    and trigonometry, besides giving us the word *algebra* and the method it refers
    to. He’s one of the important figures who has enabled us to take the journey of
    this book. Since we live after giants like Galileo and al-Khwarizmi, we don’t
    need to suffer through the difficult part of deriving their equations—we just
    have to memorize them and use them appropriately.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 阿尔-花拉兹米是九世纪的博学者，他在天文学、制图学和三角学方面做出了贡献，还给我们带来了“代数”一词及其相关方法。他是使我们能够走到这本书这一步的重要人物之一。由于我们生活在像伽利略和阿尔-花拉兹米这样巨人的后代，我们不需要经历推导他们方程的艰难过程——我们只需要记住它们并恰当地使用。
- en: The Inner Physicist
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内在物理学家
- en: Using Galileo’s and al-Khwarizmi’s equations and a solve-for-*x* strategy, a
    sophisticated machine can catch a ball or intercept a missile. But it seems reasonable
    to assume that most baseball players don’t start writing out equations as soon
    as they see a ball go into the air. Reliable observers have reported that professional
    baseball spring training programs consist of a great deal of time running around
    and playing, and considerably less time gathered around a whiteboard deriving
    the Navier-Stokes equations. Solving the mystery of where a ball will land doesn’t
    provide a clear-cut answer to the outfielder problem—that is, how a *human* can
    instinctively know where a ball will land without plugging it into a computer
    program.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用伽利略和阿尔·花拉子米的方程式以及解 *x* 的策略，一台复杂的机器可以接住一个球或拦截一枚导弹。但合理的假设是，大多数棒球运动员看到球飞向空中时并不会马上开始写出方程式。可靠的观察者报告称，职业棒球春季训练项目包含了大量的跑动和比赛时间，而围绕白板推导纳维-斯托克斯方程的时间则相对较少。解开球落地点的谜团并不能直接解决外野手问题——即，*人类*如何凭直觉知道球会落在哪，而不是将其输入计算机程序中。
- en: Or maybe it does. The glibbest possible solution to the outfielder problem is
    to assert that if computers are solving Galilean quadratics to determine where
    balls will land, then so are humans. We’ll call this solution the *inner physicist
    theory*. According to this theory, the “wetware” of our brains is able to set
    up and solve quadratic equations, or else draw plots and extrapolate their lines,
    all far beneath the level of our consciousness. Each of us, in other words, has
    an “inner physicist” deep in our brains who can calculate exact solutions to difficult
    math problems in seconds and deliver the solutions to our muscles, which can then
    find their way to the ball, bringing our bodies and mitts along. Our subconscious
    might be able to do this even if we’ve never taken a physics class or solved for
    *x*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或许它能解决。最简单的外野手问题解决方案就是断言，如果计算机通过解伽利略二次方程来确定球的落点，那么人类也是如此。我们将这一解决方案称为*内在物理学家理论*。根据这一理论，我们大脑中的“湿件”能够设立并解出二次方程，或者画出图形并推断出它们的线条，这一切都远在我们意识的层面之下。换句话说，我们每个人的大脑深处都有一个“内在物理学家”，能够在几秒钟内计算出复杂数学问题的精确解，并将解传递给我们的肌肉，进而引导我们的身体和手套去接球。即使我们从未上过物理课或解过
    *x*，我们的潜意识也许能做到这一点。
- en: 'The inner physicist theory is not without its proponents. Notably, the well-known
    mathematician Keith Devlin published a book in 2006 called *The Math Instinct:
    Why You’re a Mathematical Genius (Along with Lobsters, Birds, Cats, and Dogs)*.
    The book’s cover shows a dog jumping to catch a Frisbee, with arrows tracing the
    respective trajectory vectors of the Frisbee and the dog, implying that the dog
    is able to perform the intricate calculations that would be required to make those
    vectors meet.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 内在物理学家理论并非没有支持者。著名数学家基思·德夫林在2006年出版了一本书，名为*数学本能：为什么你是数学天才（与龙虾、鸟类、猫和狗一起）*。书的封面展示了一只狗跳起来接飞盘，箭头描绘了飞盘和狗各自的轨迹向量，暗示着狗能够进行复杂的计算，从而让这些向量交汇。
- en: 'The manifest ability of dogs to catch Frisbees and humans to catch baseballs
    seems to be a point in favor of the inner physicist theory. The subconscious is
    a mysterious and powerful thing, whose depths we have yet to fully plumb. So why
    couldn’t it solve some high school–level equations now and then? More pressingly,
    the inner physicist theory is difficult to refute because it’s hard to think of
    alternatives to it: if dogs can’t solve partial differential equations to catch
    Frisbees, then how do they catch them anyway? They take great leaps into the air
    and catch erratically moving Frisbees in their jaws like it’s nothing. If they
    aren’t solving some physics problem in their brains, then how else could they
    (and we) possibly know how to precisely intercept a ball?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 狗能够接飞盘和人类能够接棒球的显著能力似乎支持了内在物理学家理论。潜意识是一个神秘而强大的存在，我们还未完全探索它的深度。那么，为什么它不能偶尔解解一些高中水平的方程呢？更紧迫的是，内在物理学家理论难以反驳，因为很难想到其他替代方案：如果狗不能通过解偏微分方程来接飞盘，那么它们究竟是怎么接到的呢？它们大力跃起，用嘴巴像毫不费力般接住不规则飞行的飞盘。如果它们的大脑里没有解决物理问题的过程，那么我们（以及它们）又是如何精确拦截一个球的呢？
- en: As recently as 1967, no one had a good answer. That year, the engineer Vannevar
    Bush wrote a book in which he described the scientific features of baseball as
    he understood them, and he was unable to provide any explanation for how outfielders
    know where to run to catch fly balls. Luckily for us, the physicist Seville Chapman
    read Bush’s book and was inspired to propose a theory of his own the very next
    year.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 直到1967年，没人能给出一个好的答案。那一年，工程师范尼瓦尔·布什写了一本书，在书中他描述了自己理解的棒球的科学特征，但他无法解释外场手是如何知道该往哪里跑以接飞球的。幸运的是，物理学家塞维尔·查普曼读了布什的书，并受到了启发，次年他提出了自己的理论。
- en: The Algorithmic Approach
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算法方法
- en: Chapman, true scientist that he was, was not satisfied with a mystical and unverified
    trust in the human subconscious, and he wanted a more concrete explanation for
    outfielders’ powers. This is what he discovered.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 查普曼，作为一位真正的科学家，并不满足于对人类潜意识的神秘且未经验证的信任，他想要为外场手的能力提供一个更为具体的解释。这就是他发现的内容。
- en: Thinking with Your Neck
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颈部思考法
- en: 'Chapman began to tackle the outfielder problem by noting the information available
    to someone catching a ball. Though it’s difficult for humans to estimate an exact
    velocity or the trajectory of a parabolic arc, he thought we would have an easier
    time observing angles. If someone throws or hits a ball from the ground and the
    ground is flat and even, then the outfielder will see the ball start at close
    to eye level. Imagine an angle formed by two lines: the ground, and the line between
    the outfielder’s eyes and the ball. The moment the ball is hit by the batter,
    this angle will be (roughly) 0 degrees. After the ball has been in flight for
    a brief moment, it will be higher than the ground, so the angle between the ground
    and the outfielder’s line of sight with the ball will have increased. Even if
    the outfielder has not studied geometry, they will have a “feel” for this angle—for
    example, by feeling how far back they have to tilt their neck to see the ball.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查普曼开始解决外场手问题时，注意到捕球者可用的信息。尽管人类很难准确估计一个物体的速度或抛物线轨迹，但他认为我们更容易观察角度。如果某人从地面投掷或击打球，并且地面是平坦的，那么外场手会看到球几乎是从眼平线开始的。想象由两条线构成的角度：地面和外场手眼睛与球之间的线。当球被击打的那一刻，这个角度大约是0度。在球飞行了一小段时间后，它会高于地面，因此地面与外场手视线之间的角度会增大。即使外场手没有学过几何学，他们也会对这个角度有一种“感觉”——比如，通过感觉自己需要将脖子向后仰多远才能看到球。
- en: If we suppose that the outfielder is standing where the ball will eventually
    land, at *x* = 2, we can get a sense of the way the angle of the outfielder’s
    line of sight with the ball increases by plotting a line of sight from early in
    the ball’s trajectory. The following line of code creates a line segment for the
    plot we drew in [Listing 1-2](#listing1-2), and it is meant to be run in the same
    Python session. This line segment represents the line between the outfielder’s
    eyes and the ball after the ball has traveled 0.1 meters horizontally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设外场手站在球最终会落地的位置，假设 *x* = 2，我们可以通过绘制从球的轨迹初期开始的视线来感受外场手与球之间视角的变化。以下代码行在[Listing
    1-2](#listing1-2)中绘制了我们所画的视线的线段，并且应该在同一个Python会话中运行。这一线段表示的是外场手眼睛与球之间的线段，当球水平移动了0.1米之后。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can plot this line of sight along with other lines of sight to see how the
    angle continues to increase over the course of the ball’s trajectory. The following
    lines of code add more line segments to the same plot we drew in [Listing 1-2](#listing1-2).
    These line segments represent the line between the outfielder’s eyes and the ball
    at two more points in the ball’s journey: the points when the ball has traveled
    0.1, 0.2, and 0.3 meters horizontally. After creating all of these line segments,
    we will plot them all together.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以绘制这条视线以及其他的视线，看看球的轨迹中，视角是如何不断增加的。以下几行代码向我们在[Listing 1-2](#listing1-2)中绘制的图表中添加了更多线段。这些线段表示的是外场手眼睛与球之间的线段，分别对应球在轨迹中水平移动了0.1、0.2和0.3米时的位置。创建了所有这些线段后，我们将它们全部绘制在一起。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The resulting plot shows several lines of sight that form continuously increasing
    angles with the ground ([Figure 1-2](#figure1-2)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图表显示了几条视线，这些视线与地面形成了持续增大的角度（见[Figure 1-2](#figure1-2)）。
- en: '![figure_1-2](Images/figure_1-2.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![figure_1-2](Images/figure_1-2.png)'
- en: '[Figure 1-2:](#figureanchor1-2) The trajectory of a hypothetical thrown ball,
    with line segments representing the outfielder looking at the ball as it travels'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-2：](#figureanchor1-2) 假设投掷球的轨迹，线段表示外野手在球飞行过程中注视球的状态'
- en: 'As the ball progresses through its flight, the angle of the outfielder’s line
    of sight continues to increase, and the outfielder has to keep tipping their head
    back until they make the catch. Let’s call the angle between the ground and the
    outfielder’s line of sight with the ball *theta*. We assume that the outfielder
    is standing at the ball’s eventual destination (*x* = 2). Recall from high school
    geometry class that the tangent of an angle in a right triangle is the ratio of
    the length of the side that’s opposite the angle and the length of the side that’s
    adjacent to the angle (and is not the hypotenuse). In this case, the tangent of
    theta is the ratio of the height of the ball to its horizontal distance from the
    outfielder. We can plot the sides whose ratio constitutes the tangent with the
    following Python code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着球的飞行，外野手的视线角度不断增大，外野手需要不停地仰头，直到完成接球。我们将地面和外野手视线与球之间的角度称为*theta*。我们假设外野手站在球最终落点的位置（*x*
    = 2）。回想一下高中几何课，直角三角形中角度的正切值是与该角相对的边长与邻边长的比例（邻边不包括斜边）。在这个例子中，theta的正切值是球的高度与球到外野手水平距离的比例。我们可以使用以下Python代码绘制这些比例对应的边：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The resulting plot is shown in [Figure 1-3](#figure1-3).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图像见 [图 1-3](#figure1-3)。
- en: '![figure_1-3](Images/figure_1-3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![figure_1-3](Images/figure_1-3.png)'
- en: '[Figure 1-3:](#figureanchor1-3) The trajectory of a hypothetical thrown ball,
    with a line segment representing the outfielder looking at the ball as it travels,
    and line segments A and B showing the lengths whose ratio constitutes the tangent
    we are interested in'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-3：](#figureanchor1-3) 假设投掷球的轨迹，线段表示外野手在球飞行过程中注视球的状态，线段A和B显示了长度比例构成我们关心的正切值'
- en: 'We calculate the tangent by taking the ratio of the length of the side labeled
    A and the length of the side labeled B. The equation for the height A will be
    10*x* – 5*x*², while the equation for the length of B will be 2 – *x*. So the
    following equation implicitly describes the ball’s angle *theta* at each moment
    of its flight:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过取A边的长度与B边的长度之比来计算正切值。A边的高度方程为 10*x* – 5*x*²，B边的长度方程为 2 – *x*。所以以下方程隐式地描述了球飞行过程中每一刻的角度*theta*：
- en: '![c01eq006](Images/c01eq006.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![c01eq006](Images/c01eq006.png)'
- en: 'The overall situation is complex: a ball is hit far away and quickly shoots
    through a parabolic curve whose end is hard to immediately estimate. But in this
    complex situation, Chapman has found this simple relationship: that *when the
    outfielder is standing in the right location*, the tangent of theta grows at a
    simple, constant rate. The kernel of Chapman’s breakthrough is that the tangent
    of theta, the ball’s angle with the ground, grows linearly over time. Since Chapman
    found that simple relationship in the weeds of the outfielder problem, he was
    able to develop an elegant algorithmic solution to it.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 整体情况较为复杂：球被打得很远，迅速通过一个抛物线曲线，且其结束位置很难立即估计。但在这个复杂的情况下，查普曼找到了一个简单的关系：*当外野手站在正确的位置时*，角度的正切值以简单且恒定的速率增长。查普曼突破的核心在于，角度的正切值，即球与地面的角度，随着时间线性增长。由于查普曼在外野手问题的复杂情境中发现了这一简单关系，他得以开发出一个优雅的算法解决方案。
- en: His solution depends on the fact that if something—in this case, the tangent
    of theta—grows at a constant rate, it has zero acceleration. So if you are standing
    exactly where a ball is headed, you’ll observe an angle whose tangent experiences
    zero acceleration. By contrast, if you are standing too close to the ball’s initial
    position, you’ll observe positive acceleration. If you are standing too far from
    the ball’s initial position, you’ll observe negative acceleration. (You are encouraged
    to verify the messy calculus behind these truths if you so desire.) This means
    that an outfielder can know where they need to go by feeling how steadily they
    have to tilt back their head as they look at the ball rising—thinking, so to speak,
    with their neck.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 他的解决方案依赖于这样的事实：如果某物——在这个案例中是θ的切线——以恒定速率增长，则其加速度为零。因此，如果你站在球即将到达的位置，你会观察到一个切线加速度为零的角度。相比之下，如果你站得离球的初始位置太近，你会观察到正加速度。如果你站得离球的初始位置太远，你会观察到负加速度。（如果你愿意，可以验证这些真理背后的复杂微积分。）这意味着外野手可以通过感觉自己在看球上升时需要多稳当地后仰头部，来知道该去哪儿——可以说是用脖子思考。
- en: Applying Chapman’s Algorithm
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用查普曼算法
- en: 'Robots don’t necessarily have necks, and so a method for “thinking with one’s
    neck” may not be helpful for a robot outfielder. Remember that they can solve
    quadratic equations directly and instantaneously to find where to go to catch
    a ball, without worrying about the acceleration of the tangent of theta. But for
    humans, Chapman’s neck-thinking method could be extremely useful. In order to
    get to the ball’s eventual destination, a human outfielder could follow this relatively
    simple process:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人不一定有脖子，因此“用脖子思考”的方法可能对机器人外野手并不有用。记住，它们可以直接且瞬间解出二次方程来找出该去哪里接球，而无需担心θ的切线的加速度。但对人类来说，查普曼的脖子思维法可能极为有用。为了到达球的最终位置，人类外野手可以遵循这个相对简单的过程：
- en: Observe the acceleration of the tangent of the angle between the ground and
    your line of sight with the ball.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察你与球之间的视线与地面之间角度的切线的加速度。
- en: If the acceleration is positive, step backward.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果加速度为正，向后迈步。
- en: If the acceleration is negative, step forward.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果加速度为负，向前迈步。
- en: Repeat steps 1–3 until the ball is directly in front of your face.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤1–3，直到球正好在你面前。
- en: Catch it.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接住球。
- en: One serious objection to Chapman’s five-step method is that outfielders following
    this process seem to have to calculate the tangents of angles on the fly, meaning
    we’re replacing an inner physicist theory with an “inner geometer theory” in which
    baseball players can instantaneously, and subconsciously, take tangents.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 查普曼的五步法有一个严重的异议，那就是按照这个过程的外野手似乎必须在飞行过程中计算角度的切线，这意味着我们正在用一种“内在几何学理论”来替代“内在物理学理论”，即棒球运动员能够瞬间并潜意识地求出切线。
- en: One potential resolution to this objection is that for many angles, tan(theta)
    is approximately equal to theta, so rather than observing the acceleration of
    a tangent, outfielders can merely observe the acceleration of an angle. If the
    acceleration of an angle can be estimated by the felt acceleration of the neck
    joints that crick as the neck moves back to observe the ball, and if an angle
    is a reasonable approximation for its tangent, then we don’t need to assume any
    great subconscious mathematical or geometrical powers on the part of outfielders—only
    the physical skill of being accurately attuned to subtle sensory inputs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个异议的一种潜在方法是，对于许多角度，tan(θ)大致等于θ，因此外野手不需要观察切线的加速度，而只需观察角度的加速度。如果角度的加速度可以通过脖关节在脖子回转以观察球时的感觉加速度来估算，并且如果角度是其切线的合理近似，那么我们就不需要假设外野手具有任何强大的潜意识数学或几何能力——只需要具备准确感知微妙感觉输入的身体技能。
- en: By making an acceleration estimate the only difficult part of the process, we
    have obtained a potential solution to the outfielder problem that has much more
    psychological plausibility than the inner physicist’s theory of subconsciously
    extrapolated parabolas. Of course, the psychological appeal of the solution doesn’t
    mean that it can be used only by humans. A robot outfielder could also be programmed
    to follow Chapman’s five-step process, and it might even perform better at catching
    the ball if it did so, because, for example, Chapman’s process enables those who
    use it to dynamically respond to changes due to wind or bounces.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将加速度估算作为过程中的唯一难点，我们已经获得了一个比内心物理学家关于潜意识推演抛物线的理论更具心理合理性的外场员问题潜在解决方案。当然，解决方案的心理吸引力并不意味着它只能被人类使用。机器人外场员也可以被编程来遵循查普曼的五步过程，甚至可能表现得更好，因为例如，查普曼的过程使得使用者能够动态应对风速或弹跳的变化。
- en: 'Besides psychological plausibility, there’s one more crucial feature that the
    five-step process implied by Chapman’s insight possesses: it doesn’t rely on a
    solve-for-*x* strategy or any explicit equation at all. Instead, it proposes successive
    iterations of easy observations and small, gradual steps to reach a well-defined
    goal. In other words, the process that we have inferred from Chapman’s theory
    is an algorithm.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除了心理上的合理性之外，查普曼洞察力所暗示的五步过程还具备一个至关重要的特性：它不依赖于解算 *x* 的策略，也不依赖任何显式的方程式。相反，它提出了通过简单的观察和小而渐进的步骤，逐步达成一个明确目标的方式。换句话说，我们从查普曼理论中推导出的过程是一个算法。
- en: Solving Problems with Algorithms
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用算法解决问题
- en: The word *algorithm* came from the name of the great al-Khwarizmi, mentioned
    earlier. It’s not an easy word to define, not least because its accepted definition
    has changed over time. Stated simply, an algorithm is just a set of instructions
    that produce a well-defined outcome. This is a broad definition; as we saw in
    the Introduction, tax forms and recipes for parfaits could rightly be considered
    algorithms.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*算法* 这个词来源于伟大的阿尔·花拉子米的名字，前面已经提到过。这个词并不容易定义，尤其是因为它的公认定义随着时间的推移发生了变化。简单来说，算法只是一个产生明确结果的指令集合。这是一个广泛的定义；正如我们在导言中所看到的，税表和帕菲的食谱都可以被认为是算法。'
- en: Chapman’s ball-catching process, or Chapman’s algorithm as we may want to call
    it, is arguably even more algorithm-like than a recipe for a parfait, because
    it contains a looping structure in which small steps are taken repeatedly until
    a definite condition is reached. This is a common algorithmic structure you’ll
    see throughout this book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 查普曼的接球过程，或者我们可以称之为查普曼的算法，甚至比帕菲食谱更具算法特征，因为它包含了一个循环结构，其中小步骤会被反复执行，直到达到一个明确的条件。这是你在本书中会看到的常见算法结构。
- en: Chapman proposed an algorithmic solution to the outfielder problem because a
    solve-for-*x* solution was not plausible (outfielders often don’t know the relevant
    equations). In general, algorithms are most useful when the solve-for-*x* strategy
    fails. Sometimes we don’t know the right equations to use, but more often there
    is no equation that could fully describe a situation, the equation is impossible
    to solve, or we face time or space constraints. Algorithms exist at the edge of
    what is possible, and every time an algorithm is created or improved, we push
    the frontier of efficiency and knowledge out a little further.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 查普曼提出了一个算法解决方案来应对外场员问题，因为解算 *x* 的方案并不可信（外场员通常不知道相关的方程式）。一般来说，当解算 *x* 的策略失败时，算法最为有效。有时我们不知道应该使用什么方程式，但更多时候是因为没有任何方程式能完全描述一个情境，方程式无法求解，或者我们面临时间或空间上的限制。算法存在于可能性边缘，每当一个算法被创建或改进时，我们都会把效率和知识的前沿推得更远。
- en: Today, there is a common perception that algorithms are difficult, esoteric,
    mysterious, and strictly mathematical and that they require years of study to
    understand. The way our education system is structured today, we begin teaching
    children the solve-for-*x* strategy as early as possible, and we explicitly teach
    algorithms only at the college or graduate school levels, if at all. For many
    students, it takes years to master the solve-for-*x* strategy, and it always feels
    unnatural to them. People who have had this experience may assume that algorithms
    will feel just as unnatural, and will also be more difficult to understand because
    they are more “advanced.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，普遍的看法是算法难懂、深奥、神秘，并且严格是数学性的，需要多年学习才能理解。根据我们现在的教育体系，我们尽早开始教孩子们解 *x* 的方法，而只有在大学或研究生阶段才会明确教授算法（如果教授的话）。对于许多学生来说，掌握解
    *x* 的方法需要多年时间，而且总是让他们觉得不自然。曾有过这种经历的人可能会假设算法同样会感到不自然，而且由于它们“更高级”，理解起来也会更加困难。
- en: 'However, the lesson I take from Chapman’s algorithm is that we have gotten
    it all exactly backward. During recess, students learn and perfect their performance
    of dozens of algorithms, for catching, throwing, kicking, running, and moving.
    There are probably also much more complex algorithms, which have not been fully
    delineated, that govern the operation of the social world of recess: the talking,
    status seeking, gossiping, alliance formation, and friendship cultivation. When
    we end recess time and start math class, we take students out of a world of algorithm
    exploration and push them to learn an unnatural and mechanistic process of solving
    for *x*, a process that is not a natural part of human development and is not
    even the most powerful method for solving analytical problems. Only if students
    progress to advanced math and computer science do they return to the natural world
    of algorithms and the powerful processes that they were unconsciously and joyfully
    mastering at recess.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我从查普曼算法中得到的教训是，我们完全搞错了。在课间休息时，学生们学习并完善他们在抓球、投掷、踢球、奔跑和移动等方面的数十种算法。可能还有许多更复杂的算法，虽然尚未完全明确，但它们支配着课间休息的社交世界：谈话、寻求地位、八卦、结盟和友谊的培养。当我们结束休息时间并开始数学课时，我们把学生从一个算法探索的世界中带走，逼迫他们去学习一个不自然且机械化的解
    *x* 的过程，这个过程既不是人类发展的自然部分，也不是解决分析问题的最有效方法。只有当学生进入高级数学和计算机科学的学习时，他们才会重新回到自然的算法世界，并掌握他们在课间休息时无意识且愉快地掌握的强大过程。
- en: 'This book is meant to be an intellectual recess for the curious—a recess in
    the sense that a young student means it: the beginning of all important activity,
    the end of all drudgery, and the continuation of cheerful exploration with friends.
    If you have any feeling of trepidation about algorithms, remind yourself that
    we humans are naturally algorithmic, and if you can catch a ball or bake a cake,
    you can master an algorithm.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在为好奇的人提供一个智力上的课间休息——在这里，课间休息意味着一个年轻学生所说的：所有重要活动的开始，所有繁重工作的结束，以及与朋友们一起继续愉快探索的时光。如果你对算法感到一丝恐惧，提醒自己，我们人类天生就是算法型的，如果你能接住一个球或烤一个蛋糕，你就能掌握一个算法。
- en: In the remainder of this book, we explore many different algorithms. Some will
    sort lists or calculate numbers. Others will enable natural language processing
    and artificial intelligence. I encourage you to bear in mind that algorithms don’t
    grow on trees. Each algorithm, before it became mainstream and was packaged for
    general consumption in this book, was discovered or created by someone like Chapman,
    who woke up one day in a world in which his algorithm didn’t exist and went to
    sleep at the end of that day in a world in which it did. I encourage you to try
    to get in the mindset of these heroic discoverers. That is, I encourage you to
    approach an algorithm not only as a tool to be used but also as a formidable problem
    that was solved. The world of algorithms is not yet close to being fully mapped—many
    remain to be discovered and perfected, and I earnestly hope that you can be a
    part of that discovery process.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的剩余部分，我们将探索许多不同的算法。有些会排序列表或计算数字，其他的则支持自然语言处理和人工智能。我鼓励你记住，算法不是从天而降的。在这些算法成为主流并在本书中被广泛介绍之前，它们是由像查普曼（Chapman）这样的人发现或创造的，他在某一天醒来时，发现自己身处一个没有他发明的算法的世界，而在这一天结束时，他又进入了一个算法已经存在的世界。我鼓励你尽量进入这些英雄发现者的思维方式。也就是说，我鼓励你不仅把算法当作一个工具使用，还要把它看作一个已经解决的复杂问题。算法的世界还远未被完全描绘出来——许多算法仍然有待发现和完善，我真心希望你能参与到这个发现过程当中。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you saw two approaches to solving a problem: the analytic
    one and the algorithmic one. By solving the outfield problem two ways, we explored
    the differences between these approaches, ultimately arriving at Chapman’s algorithm.
    Chapman found a simple pattern in a complex situation (the constant acceleration
    of the tangent of theta) and used it to develop the idea of an iterative, looping
    process that requires only one simple input (the feeling of acceleration in a
    craning neck) and leads to a definite goal (catching a ball). When you seek to
    develop and use algorithms in your own work, you can try to emulate Chapman’s
    example.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你看到了两种解决问题的方法：分析性方法和算法性方法。通过用两种方式解决外场问题，我们探索了这些方法之间的差异，最终得出了查普曼的算法。查普曼在一个复杂的情境中发现了一个简单的模式（θ切线的恒定加速度），并利用它发展出了一个迭代循环的过程，这个过程只需要一个简单的输入（脖子伸长时的加速度感觉），就能达到一个明确的目标（接住一个球）。当你在自己的工作中寻求开发和使用算法时，可以尝试模仿查普曼的例子。
- en: In the next chapter, we look at some examples of algorithms in history. These
    examples should deepen your appreciation of algorithms, including what they are
    and how they work. We’ll talk about algorithms from ancient Egypt, ancient Greece,
    and Imperial Japan. Every new algorithm you learn can be an addition to the “toolbox”
    of algorithms that you can rely on when you eventually advance to the point at
    which you can design and perfect your own.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将查看一些历史上的算法实例。这些实例将加深你对算法的理解，包括它们是什么以及如何工作。我们将讨论来自古埃及、古希腊和帝国日本的算法。你学到的每一个新算法，都会成为你“工具箱”中的一部分，帮助你在最终能够设计和完善自己的算法时有所依靠。
