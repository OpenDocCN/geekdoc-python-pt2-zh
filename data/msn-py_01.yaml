- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: YOUR FIRST SPACEWALK**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的第一次太空行走**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Welcome to the space corps. Your mission is to build the first human outpost
    on Mars. For years, the world’s greatest scientists have been sending robots to
    study it up close. Soon you too will set foot on its dusty surface.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎加入太空军团。你的任务是建立人类在火星的第一个前哨基地。多年来，世界上最伟大的科学家们一直派遣机器人进行近距离研究。很快，你也将踏上这颗尘土飞扬的星球表面。
- en: Travel to Mars takes between six and eight months, depending on how Earth and
    Mars are aligned. During the journey, the spaceship risks hitting meteoroids and
    other space debris. If any damage occurs, you’ll need to put on your spacesuit,
    go to the airlock, and then step into the void of space to make repairs, similar
    to the astronaut in [Figure 1-1](ch01.xhtml#ch01fig1).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 前往火星的旅程需要六到八个月，具体取决于地球和火星的对齐情况。在旅程中，飞船面临撞击陨石和其他太空碎片的风险。如果发生任何损坏，你需要穿上宇航服，前往气闸，然后走入太空的虚空进行修理，类似于[图
    1-1](ch01.xhtml#ch01fig1)中的宇航员。
- en: In this chapter, you’ll go on a spacewalk by using Python to move a character
    around the screen. You’ll launch your first Python program and learn some of the
    essential Python instructions you’ll need to build the space station later in
    the book. You’ll also learn how to create a sense of depth by overlapping images,
    which will prove essential when we create the *Escape* game in 3D later (starting
    with our first room mock-up in [Chapter 3](ch03.xhtml#ch03)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过使用 Python 来进行一次太空行走，控制一个角色在屏幕上移动。你将启动你的第一个 Python 程序，并学习一些构建太空站所需的基本
    Python 指令，后续章节中会用到。你还将学习如何通过重叠图像来创造深度感，这对我们稍后在 [第 3 章](ch03.xhtml#ch03) 创建 *Escape*
    游戏的 3D 效果至关重要。
- en: '![image](../images/fig1-1.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-1.jpg)'
- en: '*Figure 1-1: NASA astronaut Rick Mastracchio on a 26-minute spacewalk in 2010,
    as photographed by astronaut Clayton Anderson. The spacewalk outside the International
    Space Station was one of a series to replace coolant tanks.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1: 美国宇航局宇航员 Rick Mastracchio 于 2010 年进行的 26 分钟太空行走，照片由宇航员 Clayton Anderson
    拍摄。此次太空行走是在国际空间站外进行的，是一系列更换冷却罐任务的一部分。*'
- en: If you haven’t already installed Python and Pygame Zero (Windows users), see
    “[Installing the Software](intro.xhtml#lev3)” on [page 3](intro.xhtml#page_3).
    You’ll also need the *Escape* game files in this chapter. “[Downloading the Game
    Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7) tells you how to download
    and unzip those files.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 Python 和 Pygame Zero（Windows 用户），请参阅 “[安装软件](intro.xhtml#lev3)” 在 [第
    3 页](intro.xhtml#page_3)。你还需要本章中的*Escape*游戏文件。 “[下载游戏文件](intro.xhtml#lev8)” 在
    [第 7 页](intro.xhtml#page_7) 告诉你如何下载和解压这些文件。
- en: '**STARTING THE PYTHON EDITOR**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**启动 Python 编辑器**'
- en: As I mentioned in the Introduction, in this book we’ll use the Python programming
    language. A programming language provides a way to write instructions for a computer.
    Our instructions will tell the computer how to do things like react to a keypress
    or display an image. We’ll also be using Pygame Zero, which gives Python some
    additional instructions for handling sound and images.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在简介中提到的，本书将使用 Python 编程语言。编程语言为计算机编写指令提供了一种方式。我们的指令将告诉计算机如何做一些事情，比如响应按键或显示图像。我们还将使用
    Pygame Zero，它为 Python 提供了一些处理声音和图像的附加指令。
- en: Python comes with the IDLE editor, and we’ll use the editor to create our Python
    programs. Because you’ve already installed Python, IDLE should now be on your
    computer as well. The following sections explain how to start IDLE, depending
    on the type of computer you’re using.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 附带了 IDLE 编辑器，我们将使用该编辑器来创建我们的 Python 程序。由于你已经安装了 Python，IDLE 应该也已经安装在你的计算机上。接下来的部分将根据你使用的计算机类型，解释如何启动
    IDLE。
- en: '**STARTING IDLE IN WINDOWS 10**'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 Windows 10 中启动 IDLE**'
- en: 'To start IDLE in Windows 10, follow these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 中启动 IDLE，按照以下步骤操作：
- en: Click the Cortana search box at the bottom of the screen, and enter Python in
    the box.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕底部的 Cortana 搜索框，在框中输入 Python。
- en: Click **IDLE** to open it.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**IDLE**以打开它。
- en: With IDLE running, right-click its icon in the taskbar at the bottom of the
    screen and pin it. Then you can run it from there in the future using a single
    click.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 运行时，右键点击屏幕底部任务栏中的图标并将其固定。以后你可以通过单击它来运行 IDLE。
- en: '**STARTING IDLE IN WINDOWS 8**'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 Windows 8 中启动 IDLE**'
- en: 'To start IDLE in Windows 8, follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 8 中启动 IDLE，按照以下步骤操作：
- en: Move your mouse to the top right of the screen to show the Charms bar.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标移动到屏幕的右上角以显示 Charms 栏。
- en: Click the Search icon, and enter Python in the box.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击搜索图标，在框中输入 Python。
- en: Click **IDLE** to open it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**IDLE**以打开它。
- en: With IDLE running, right-click its icon in the taskbar at the bottom of the
    screen and pin it. Then you can run it from there in the future using a single
    click.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 运行时，右键单击任务栏底部的图标并将其固定。这样，以后您可以通过单击图标快速运行它。
- en: '**STARTING IDLE ON THE RASPBERRY PI**'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 Raspberry Pi 上启动 IDLE**'
- en: 'To start IDLE on the Raspberry Pi, follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Raspberry Pi 上启动 IDLE，请按照以下步骤操作：
- en: Click the Programs menu at the top left of the screen.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕左上角的“程序”菜单。
- en: Find the Programming category.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到“编程”类别。
- en: Click the Python 3 (IDLE) icon. The Raspberry Pi has both Python 2 and Python
    3 installed, but most of the programs in this book will work only in Python 3.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Python 3 (IDLE) 图标。Raspberry Pi 上安装了 Python 2 和 Python 3，但本书中的大多数程序只能在 Python
    3 中运行。
- en: '**INTRODUCING THE PYTHON SHELL**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 Python Shell**'
- en: When you start IDLE, you should see the Python *shell*, as shown in [Figure
    1-2](ch01.xhtml#ch01fig2). This window is where you can give Python instructions
    and immediately see the computer respond. The three arrows (>>>) are called a
    *prompt*. They tell you that Python is ready for you to enter an instruction.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动 IDLE 时，您应该会看到 Python 的*shell*，如[图 1-2](ch01.xhtml#ch01fig2)所示。这个窗口是您可以输入
    Python 指令并立即看到计算机响应的地方。三个箭头 (>>>) 被称为*提示符*。它们表示 Python 已经准备好接受您的指令。
- en: '![image](../images/fig1-2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-2.jpg)'
- en: '*Figure 1-2: The Python shell*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：Python shell*'
- en: So let’s give Python something to do!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们给 Python 安排点事情吧！
- en: '**DISPLAYING TEXT**'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**显示文本**'
- en: 'For our first instruction, let’s tell Python to display text on the screen.
    Type the following line and press ENTER:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个指令，让我们告诉 Python 在屏幕上显示文本。输入以下行并按下 ENTER 键：
- en: '>>> print("Prepare for launch!")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print("准备启动！")'
- en: As you type, the color of your text will change. It starts off black, but as
    soon as Python recognizes a command, like print, the text changes color.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入时，文本的颜色会发生变化。它开始是黑色的，但一旦 Python 识别出命令（如 print），文本的颜色会发生变化。
- en: '[Figure 1-3](ch01.xhtml#ch01fig3) shows the names of the different parts of
    the instruction you just entered. The purple word print is the name of a *built-in
    function*, which is one of many instructions that are always available in Python.
    The print() function displays onscreen the information you place between the *parentheses*
    (curved brackets). The information between a function’s parentheses is the function’s
    *argument*.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-3](ch01.xhtml#ch01fig3) 显示了您刚才输入的指令的不同部分的名称。紫色的单词 print 是一个*内置函数*的名称，它是
    Python 中总是可用的众多指令之一。print() 函数会显示您放置在*括号*（圆括号）中的信息。函数括号中的信息是该函数的*参数*。'
- en: '![image](../images/fig1-3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-3.jpg)'
- en: '*Figure 1-3: The different parts of your first instruction*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：您首次指令的不同部分*'
- en: In our first instruction, the print() function’s argument is a *string*, which
    is what programmers call a piece of text. (A string can include numbers, but they’re
    treated as letters, so you can’t do calculations with numbers in a string.) The
    double quotation marks (" ") show the start and end of the string. Anything you
    type between double quotation marks will be green, and so will the quotation marks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个指令中，print() 函数的参数是一个*字符串*，这是程序员用来表示一段文本的术语。（字符串可以包含数字，但它们被当作字母处理，因此不能在字符串中进行计算。）双引号（"
    "）标识字符串的开始和结束。您在双引号之间输入的任何内容都会变为绿色，双引号本身也会变成绿色。
- en: 'The colors do more than brighten up the screen: they highlight the different
    parts of the instruction to help you find mistakes. For example, if your final
    parenthesis is green, it means you forgot the closing double quote on the string.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色不仅仅是为了点亮屏幕：它们还突出显示指令的不同部分，帮助您查找错误。例如，如果您的最终括号是绿色的，那意味着您忘记了字符串的闭合双引号。
- en: 'If you entered the instruction correctly, your computer will display this text:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正确输入指令，计算机将显示以下文本：
- en: Prepare for launch!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 准备启动！
- en: 'The string that was shown in green is now displayed onscreen in blue. All *output*
    (information the computer gives to you) appears in blue. If your command didn’t
    work, check that you did the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 显示为绿色的字符串现在以蓝色显示在屏幕上。所有的*输出*（计算机给您的信息）都以蓝色显示。如果您的命令没有生效，请检查您是否做了以下操作：
- en: Spelled print correctly. If you did, it will be purple (see [Figure 1-3](ch01.xhtml#ch01fig3)).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确拼写了 print。如果您做到了，它将变为紫色（参见[图 1-3](ch01.xhtml#ch01fig3)）。
- en: Used two parentheses. Other bracket shapes won’t work.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用了两个括号。其他形状的括号将无法使用。
- en: Used two double quotes. Don’t use two apostrophes ('') instead of a double quote
    ("). Although the double quote includes two marks, it’s just one symbol on the
    keyboard. On a US keyboard, the double quote is in the middle row of letters,
    on the right, and must be used with the SHIFT key. On a UK keyboard, the double
    quote is on the 2 key.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用了两个双引号。不要使用两个撇号（''）代替双引号（"）。虽然双引号包括两个符号，但它只是键盘上的一个符号。在美国键盘上，双引号位于字母中间行的右侧，必须与
    SHIFT 键一起使用。在英国键盘上，双引号位于数字 2 键上。
- en: 'If you make a mistake typing the text between the double quotes, the instruction
    will still work, but the computer will display exactly what you typed. For example,
    try this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在双引号之间输入的文本有错误，指令仍然会执行，但计算机会显示你输入的内容。例如，试试这个：
- en: '>>> print("Prepare for lunch!")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print("Prepare for lunch!")'
- en: It doesn’t matter if you mistype the string now, but be careful when you type
    a string or an instruction later in the book. Mistakes often prevent a program
    from working correctly, and it can be hard to track down a mistake in a longer
    program, even with the color coding.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你输入字符串错误也没关系，但在后续章节中输入字符串或指令时要小心。错误通常会导致程序无法正常工作，而且在较长的程序中跟踪错误可能会很困难，即使有颜色编码的帮助。
- en: '**TRAINING MISSION #1**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Can you enter a new instruction to output your name? (You’ll find the answers
    to the Training Missions in the “Mission Debrief” section at the end of each chapter.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你能输入一个新指令来输出你的名字吗？（你将在每章末尾的“任务总结”部分找到训练任务的答案。）
- en: '**OUTPUTTING AND USING NUMBERS**'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输出和使用数字**'
- en: 'So far you’ve used the print() function to output a string, but it can also
    do calculations and output a number. Enter the following line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经使用 print() 函数输出了一个字符串，但它也可以进行计算并输出数字。输入以下代码：
- en: '>>> print(4 + 1)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(4 + 1)'
- en: The computer should output the number 5, the solution to 4 + 1. Unlike with
    a string, you don’t use quotes around numbers and calculations. But you still
    use the parentheses to mark the start and end of the information you want to give
    the print() function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机应该输出数字 5，这是 4 + 1 的结果。与字符串不同，数字和计算式不需要用引号括起来。但你仍然需要使用括号来标记你希望传递给 print()
    函数的信息的开始和结束。
- en: What happens if you do put quotes around 4 + 1? Try it! The result is that the
    computer outputs "4 + 1" because it doesn’t treat 4 and 1 as numbers. Instead,
    it treats the argument as a string. You ask it to output "4 + 1", and it does
    exactly that!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把引号放在 4 + 1 周围会发生什么？试试看！结果是计算机会输出 "4 + 1"，因为它不会将 4 和 1 当作数字。相反，它将该参数当作一个字符串。你要求它输出
    "4 + 1"，它就会完全按照你的要求输出！
- en: '>>> print(4 + 1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(4 + 1)'
- en: '5'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '>>> print("4 + 1")'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print("4 + 1")'
- en: 4 + 1
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 4 + 1
- en: Python does the calculation only when you don’t include the quotes. You’ll use
    the print() function a lot in your programs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Python 只有在你不加引号时才会进行计算。在你的程序中，你会经常使用 print() 函数。
- en: '**INTRODUCING SCRIPT MODE**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍脚本模式**'
- en: The shell is great for quick calculations and for short instructions. But for
    longer sets of instructions, like games, it’s much easier to create programs instead.
    *Programs* are repeatable sets of instructions that we save so we can run them
    whenever we want and change them whenever we need to without retyping them. We’ll
    build programs using IDLE’s *script mode*. When you enter instructions in script
    mode, they don’t run immediately as they do in the shell.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 非常适合快速计算和执行简短的指令。但对于较长的指令集，比如游戏，创建程序要容易得多。*程序*是可重复执行的一组指令，我们保存它们，以便在需要时随时运行并进行修改，而不必重新输入它们。我们将使用
    IDLE 的 *脚本模式* 来编写程序。当你在脚本模式下输入指令时，它们不会像在 Shell 中那样立即运行。
- en: Using the menu at the top of the shell window, select **File** and then select
    **New File** to open a blank new window, as shown in [Figure 1-4](ch01.xhtml#ch01fig4).
    The title bar at the top of the window displays *Untitled* until you save your
    file and name it. Once you’ve saved your file, the title bar will display the
    file’s name. From now on, we’ll use script mode nearly all the time when we’re
    creating Python code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Shell 窗口顶部的菜单，选择 **文件**，然后选择 **新建文件** 来打开一个空白的新窗口，如 [图 1-4](ch01.xhtml#ch01fig4)
    所示。窗口顶部的标题栏会显示 *未命名*，直到你保存文件并为其命名。一旦保存文件，标题栏会显示文件名。从现在起，在创建 Python 代码时，我们几乎总是会使用脚本模式。
- en: '![image](../images/fig1-4.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-4.jpg)'
- en: '*Figure 1-4: Python script mode*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：Python 脚本模式*'
- en: When you enter instructions in script mode, you can change, add, and delete
    instructions using the mouse or the arrow keys, so it’s much easier to fix mistakes
    and build your programs. Starting from [Chapter 4](ch04.xhtml#ch04), we’ll build
    the *Escape* game by adding to it piece-by-piece in script mode and testing each
    new section as we go.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在脚本模式中输入指令时，可以使用鼠标或箭头键更改、添加和删除指令，这样修正错误和构建程序会更加容易。从[第4章](ch04.xhtml#ch04)开始，我们将通过逐步添加内容并测试每个新部分，来构建*Escape*游戏。
- en: '**TIP**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you’re not sure whether you’re in the shell or the script mode window, look
    at the title bar at the top. The shell displays *Python Shell*. The script mode
    window displays either *Untitled* or the name of your program.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定自己是处于外壳模式还是脚本模式窗口，可以查看顶部的标题栏。外壳显示的是*Python Shell*，而脚本模式窗口则显示*Untitled*或你的程序名称。
- en: '**CREATING THE STARFIELD**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建星空背景**'
- en: The first program we’ll write will display the starfield image that we’ll use
    as the space background for our *Spacewalk* program. This image is in the *images*
    folder within the *escape* folder. Start by entering [Listing 1-1](ch01.xhtml#ch01list1)
    into the new blank window in IDLE.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的第一个程序将显示我们将用作*太空行走*程序背景的星空图像。该图像位于*escape*文件夹中的*images*文件夹内。从在IDLE中新建空白窗口中输入[Listing
    1-1](ch01.xhtml#ch01list1)开始。
- en: '**NOTE**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In this book, I’ll use numbers in circles (like this:* ➊*) to refer to different
    bits of code in the explanations so it’s easier for you to follow along. Don’t
    type these numbers in your program. When you see a number in a circle in the text,
    refer back to the program listing to see which part of the program I’m talking
    about.*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本书中，我将使用圆圈中的数字（像这样：➊）来引用解释中不同的代码部分，以便你更容易跟随。不要在程序中输入这些数字。当你在文本中看到圆圈中的数字时，回到程序清单中查看我提到的程序部分。*'
- en: '[Listing 1-1](ch01.xhtml#ch01list1) is a short program, but there are a couple
    of details that you should pay attention to while you’re typing: the def statement
    ➍ needs a colon at the end of its line, and the next line ➎ needs to start with
    four spaces. When you add the colon to the end of the def line and press ENTER,
    IDLE automatically adds the four spaces at the beginning of the next line for
    you.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 1-1](ch01.xhtml#ch01list1)是一个简短的程序，但在你输入时，有几个细节需要注意：def语句 ➍ 末尾需要加上冒号，下一行
    ➎ 需要以四个空格开头。当你在def行末尾添加冒号并按下ENTER键时，IDLE会自动在下一行的开头为你添加四个空格。'
- en: '*listing1-1.py*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-1.py*'
- en: '➊ # Spacewalk'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ # 太空行走'
- en: '# by Sean McManus'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '# 作者：Sean McManus'
- en: '# www.sean.co.uk / www.nostarch.com'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '# www.sean.co.uk / www.nostarch.com'
- en: ➋ WIDTH = 800
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ WIDTH = 800
- en: HEIGHT = 600
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: HEIGHT = 600
- en: ➌ player_x = 600
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ player_x = 600
- en: player_y = 350
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: player_y = 350
- en: '➍ def draw():'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '➍ def draw():'
- en: ➎     screen.blit(images.backdrop, (0, 0))
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ➎     screen.blit(images.backdrop, (0, 0))
- en: '*Listing 1-1: See the starfield in Pygame Zero.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-1: 在Pygame Zero中查看星空。*'
- en: 'Select the **File** menu at the top of the screen and then select **Save**
    (from now on, we’ll use a shorthand for menu selections that looks like this:
    **File** ▸ **Save**). In the Save dialog, name your program *listing1-1.py*. You
    need to save your file in the *escape* folder you set up in the Introduction.
    This way, it’s in the same folder as the book’s *images* folder, and Pygame Zero
    can find the images when you run the program. After you save the file, your *escape*
    folder should now contain your *listing1-1.py* file and the *images* folder, as
    shown in [Figure 1-5](ch01.xhtml#ch01fig5) (along with the *listings* and *sounds*
    folders).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 选择屏幕顶部的**文件**菜单，然后选择**保存**（从现在起，我们将使用这种简化的方式表示菜单选择：**文件** ▸ **保存**）。在保存对话框中，将程序命名为*listing1-1.py*。你需要将文件保存在引言中设置的*escape*文件夹内。这样，它就与书中的*images*文件夹位于同一文件夹中，当你运行程序时，Pygame
    Zero可以找到图像文件。保存文件后，你的*escape*文件夹应包含*listing1-1.py*文件和*images*文件夹，如[图1-5](ch01.xhtml#ch01fig5)所示（以及*listings*和*sounds*文件夹）。
- en: '![image](../images/fig1-5.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-5.jpg)'
- en: '*Figure 1-5: Your new Python program and the* images *folder should be stored
    in the same place.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-5：你的新Python程序和*images*文件夹应保存在同一位置。*'
- en: I’ll explain how the *listing1-1.py* program works shortly, but first let’s
    run the program so we can admire the starfield. The program needs some instructions
    from Pygame Zero to manage the images, so to use those instructions, we need to
    run the program using a pgzrun instruction. Whenever we use any instructions from
    Pygame Zero in a Python program, we need to run it using pgzrun.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我将很快解释*listing1-1.py*程序是如何工作的，但首先让我们运行程序，以便欣赏星空背景。该程序需要一些来自Pygame Zero的指令来管理图像，因此为了使用这些指令，我们需要使用pgzrun指令来运行程序。每当我们在Python程序中使用Pygame
    Zero的任何指令时，都需要通过pgzrun来运行程序。
- en: 'We’ll type this on the computer’s command line, just like we did in the Introduction
    to run the *Escape* game. First, look back at “[Running the Game](intro.xhtml#lev12)”
    on [page 9](intro.xhtml#page_9), and follow the directions there to open your
    computer’s command line terminal from your *escape* folder. Then run the following
    instruction from the command line:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像在引言中运行*Escape*游戏时那样，在计算机的命令行中输入这些内容。首先，回到“[运行游戏](intro.xhtml#lev12)”一节，查看[第9页](intro.xhtml#page_9)的指示，按照那里提供的步骤，从*escape*文件夹打开你计算机的命令行终端。然后从命令行运行以下指令：
- en: pgzrun listing1-1.py
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: pgzrun listing1-1.py
- en: '**RED ALERT**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Don’t type this instruction in IDLE: be sure to type it in your Windows or
    Raspberry Pi command line. The Introduction shows you how.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要在IDLE中输入此指令：确保在Windows或树莓派命令行中输入。引言部分已经告诉你如何操作。*'
- en: If all went according to plan, you should be looking at the majesty of space,
    as shown in [Figure 1-6](ch01.xhtml#ch01fig6).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，你应该看到壮丽的太空，如[图1-6](ch01.xhtml#ch01fig6)所示。
- en: '![image](../images/fig1-6.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-6.jpg)'
- en: '*Figure 1-6: The starfield. The starfield image is courtesy of NASA/JPL-Caltech/UCLA
    and shows star cluster NGC 2259.*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-6：星空背景。该星空图像由NASA/JPL-Caltech/UCLA提供，显示了星团NGC 2259。*'
- en: '**USING MY EXAMPLE LISTINGS**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用我的示例清单**'
- en: If you can’t get a program in this book to work, you can use my example program
    instead. For instance, you can use my *listing1-1.py* example and modify it to
    make your own *listing1-2.py* shortly so you can continue following along.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法让书中的某个程序正常工作，你可以使用我的示例程序。比如，你可以使用我的*listing1-1.py*示例，并对其进行修改，快速制作出属于自己的*listing1-2.py*，这样你就可以继续跟着书中的内容进行学习。
- en: You’ll find my programs in the *listings* folder, which is in the *escape* folder.
    Simply open the *listings* folder in Windows or the Raspberry Pi desktop, find
    the listing you need, copy it, and then paste it into the *escape* folder. Then
    open the copied listing in IDLE and follow along with the next step in the book.
    When you look at the folder, you should be able to see your Python file and the
    *images* folder are in the same place (see [Figure 1-5](ch01.xhtml#ch01fig5)).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我的程序可以在*listings*文件夹中找到，该文件夹位于*escape*文件夹内。只需在Windows或树莓派桌面中打开*listings*文件夹，找到你需要的示例，复制它，然后粘贴到*escape*文件夹中。然后在IDLE中打开复制的示例，并按照书中的下一步操作进行操作。查看文件夹时，你应该能看到Python文件和*images*文件夹位于同一位置（见[图1-5](ch01.xhtml#ch01fig5)）。
- en: '**UNDERSTANDING THE PROGRAM SO FAR**'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**到目前为止理解程序**'
- en: Most of the instructions you’ll see in this book will work in any Python program.
    The print() function, for example, is always available. To make the programs in
    this book, we’re also using Pygame Zero. This adds some new functions and capabilities
    to Python for creating games, especially for the screen display and sound. [Listing
    1-1](ch01.xhtml#ch01list1) introduces our first instructions from Pygame Zero,
    used to set up the game window and draw the starfield.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中你将看到的大多数指令都可以在任何Python程序中使用。例如，print()函数始终可用。为了编写本书中的程序，我们还使用了Pygame Zero。它为Python增添了一些新的功能和能力，特别是在屏幕显示和声音方面，以便创建游戏。[清单1-1](ch01.xhtml#ch01list1)介绍了我们首次使用Pygame
    Zero的指令，用于设置游戏窗口和绘制星空。
- en: Let’s take a closer look at how the *listing1-1.py* program works.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看*listing1-1.py*程序是如何工作的。
- en: 'The first few program lines are *comments* ➊. When you use a # symbol, Python
    ignores everything after it on the same line, and the line appears in red. The
    comments help you and other people reading the program understand what a program
    does and how it works.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行程序是*注释* ➊。当你使用#符号时，Python会忽略该行#符号后面的所有内容，并且这一行会显示为红色。这些注释帮助你和其他阅读程序的人理解程序的功能及其工作原理。
- en: Next, the program needs to store some information. Programs almost always need
    to store information that the program uses or needs to refer back to at a later
    time. For example, in many games, the computer needs to keep track of the score
    and the player’s position on the screen. Because these details can change (or
    *vary*) as the program runs, they’re stored in something called a *variable*.
    A variable is a name you give to a piece of information, either a number or some
    text.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，程序需要存储一些信息。程序几乎总是需要存储程序使用或需要稍后引用的信息。例如，在许多游戏中，计算机需要跟踪分数和玩家在屏幕上的位置。由于这些细节在程序运行过程中可能会发生变化（或*不同*），它们会被存储在被称为*变量*的东西中。变量是你赋予某个信息（无论是数字还是文本）的一种名称。
- en: 'To create a variable, you use an instruction like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个变量，你可以使用类似这样的指令：
- en: variable_name = value
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: variable_name = value
- en: '**NOTE**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Code terms shown in italics are placeholders that would be filled in. Instead
    of* variable_name*, you would enter your own variable name.*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体显示的代码术语是占位符，需要被填写。比如，*variable_name* 你应该输入你自己的变量名。*'
- en: 'For example, the following instruction puts the number 500 into the variable
    score:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下指令将数字 500 存入变量 score 中：
- en: score = 500
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: score = 500
- en: You can name your variables almost anything you want. However, to make your
    program easy to write and understand, you should choose variable names that describe
    the information inside each variable. Note that you can’t use names for your variables
    that Python uses for its language, such as print.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以几乎随意命名你的变量。然而，为了让你的程序易于编写和理解，你应该选择能够描述每个变量内部信息的变量名。注意，你不能使用 Python 用于其语言的名字作为变量名，比如
    print。
- en: '**RED ALERT**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Python is case-sensitive, which means it is strict about whether variables
    use uppercase or lowercase letters. In fact, it treats* score*,* SCORE*, and*
    Score *as three completely different variables. Make sure you copy my example
    programs exactly, or they might not work properly.*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python 是区分大小写的，这意味着它严格区分变量名的大小写。事实上，它将* score*、* SCORE* 和* Score* 视为三个完全不同的变量。确保你准确复制我的示例程序，否则它们可能无法正常工作。*'
- en: '[Listing 1-1](ch01.xhtml#ch01list1) begins by creating some variables. Pygame
    Zero uses the WIDTH and HEIGHT variables ➋ to set the size of the game window
    on the screen. Our window is wider than it is tall because the WIDTH value (800)
    is bigger than the HEIGHT value (600).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 1-1](ch01.xhtml#ch01list1) 从创建一些变量开始。Pygame Zero 使用 WIDTH 和 HEIGHT 变量 ➋
    来设置游戏窗口的大小。我们的窗口比它的高度要宽，因为 WIDTH 值（800）大于 HEIGHT 值（600）。'
- en: Notice that we’ve spelled these variables with capital letters. The capital
    letters in variable names tell us that they’re *constants*. A constant is a particular
    kind of variable with values that aren’t supposed to change after they’ve been
    set up. The capital letters help other programmers who are looking at the program
    understand that they shouldn’t let anything else in the program change these variables.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将这些变量用大写字母拼写。变量名中的大写字母告诉我们这些是*常量*。常量是一种特殊类型的变量，其值在设置之后不应该再改变。大写字母帮助其他程序员理解，这些变量不应该在程序的其他地方被修改。
- en: The player_x and player_y variables ➌ will store your position on the screen
    as you carry out your spacewalk. Later in the chapter, we’ll use these variables
    to draw you on the screen.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: player_x 和 player_y 变量 ➌ 将在你执行太空行走时存储你在屏幕上的位置。在本章稍后，我们将使用这些变量来在屏幕上绘制你的图像。
- en: We then define a function using the def() statement ➍. A *function* is a group
    of instructions you can run whenever you need them in your program. You’ve already
    seen one built-in function called print(). We’ll make our own function in this
    program called draw(). Pygame Zero will use it to draw the screen display whenever
    the screen changes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 def() 语句 ➍ 来定义一个函数。*函数* 是一组指令，你可以在程序中任何需要时运行它们。你已经见过一个内置函数叫做 print()。我们将在这个程序中创建自己的函数叫做
    draw()。Pygame Zero 将用它在每次屏幕变化时绘制屏幕显示。
- en: We define a function using the keyword def ➍, followed by the function name
    we choose, empty parentheses, and a colon. Sometimes you’ll use a function’s parentheses
    to contain information for that function, as you’ll see later in this book.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用关键字 def ➍ 来定义一个函数，后面跟上我们选择的函数名、空括号和冒号。稍后你会看到，你有时会在函数的括号中传递信息。
- en: 'We then need to give the function instructions for what it should do. To tell
    Python which instructions belong to the function, we indent them by four spaces.
    The screen.blit() instruction ➎ from Pygame Zero draws an image on the screen.
    In the parentheses, we tell it which image to draw and where to draw it, like
    this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要给函数指令，告诉它应该做什么。为了告诉 Python 哪些指令属于函数，我们通过缩进四个空格来区分它们。来自 Pygame Zero 的
    `screen.blit()` 指令 ➎ 用于在屏幕上绘制图像。在括号中，我们告诉它绘制哪张图像以及在哪里绘制，像这样：
- en: screen.blit(images.image_name, (x, y) )
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`screen.blit(images.image_name, (x, y))`'
- en: From the *images* folder, we’ll use the *backdrop.jpg* file, which is the starfield.
    In our *listing1-1.py* program, we refer to it as images.backdrop. We don’t have
    to use the file’s *.jpg* extension, because we’re using Pygame Zero to handle
    the images, and Pygame Zero doesn’t require the extension*.* Also, the program
    knows where the image is because all the images must be in the *images* folder
    so Pygame Zero can find them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *images* 文件夹中，我们将使用 *backdrop.jpg* 文件，它是星空背景。在我们的 *listing1-1.py* 程序中，我们将其引用为
    `images.backdrop`。我们不需要使用文件的 *.jpg* 扩展名，因为我们正在使用 Pygame Zero 来处理图像，而 Pygame Zero
    不需要扩展名。程序知道图像的位置，因为所有图像必须放在 *images* 文件夹中，Pygame Zero 才能找到它们。
- en: We put the image on the screen at position (0, 0) ➌, which is the top-left corner
    of the screen. The first number, known as the *x position*, tells the screen.blit()
    instruction how far from the left edge we want our image to be; the second number,
    known as the *y position*, describes how far down we want it to be. The *x* positions
    go from 0 on the left edge of the window to 799 on the right edge because our
    window is 800 pixels wide. Similarly, the *y* positions run from 0 at the top
    of the window to 599 at the bottom (see [Figure 1-6](ch01.xhtml#ch01fig6)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将图像放在屏幕上的位置 (0, 0) ➌，这是屏幕的左上角。第一个数字，称为 *x 位置*，告诉 `screen.blit()` 指令我们希望图像距离左边缘多远；第二个数字，称为
    *y 位置*，描述我们希望图像距离顶部多远。*x* 位置从窗口左边缘的 0 到右边缘的 799，因为我们的窗口宽度为 800 像素。同样，*y* 位置从窗口顶部的
    0 到底部的 599（参见 [图 1-6](ch01.xhtml#ch01fig6)）。
- en: For positions onscreen, we use a *tuple*, which is just a group of numbers or
    strings in parentheses, such as (0, 0). In a tuple, the numbers are separated
    with a comma, plus an optional space for readability.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于屏幕上的位置，我们使用一个*元组*，它只是一个括号内的数字或字符串的组合，例如 (0, 0)。在元组中，数字之间用逗号分隔，也可以加上可选的空格以提高可读性。
- en: The most important thing you need to know about tuples is that you have to take
    care with the punctuation. Because the tuple uses parentheses, and we put this
    tuple inside the parentheses for screen.blit(), there are two sets of parentheses
    here. So you need parentheses around the tuple values, but you also need to close
    the parentheses for screen.blit() after the tuple.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解关于元组的最重要的一点是，要小心标点符号。因为元组使用括号，并且我们把这个元组放入 `screen.blit()` 的括号中，所以这里有两组括号。因此，你需要在元组值周围加上括号，但也需要在元组后关闭
    `screen.blit()` 的括号。
- en: '**STOPPING YOUR PYGAME ZERO PROGRAM**'
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**停止你的 Pygame Zero 程序**'
- en: Similar to space, your Pygame Zero program will go on forever. To stop it, click
    the game window’s close button at the top right (see [Figure 1-6](ch01.xhtml#ch01fig6)).
    You can also close the program from the command line window where you entered
    the pgzrun instruction by pressing CTRL-C.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于太空，你的 Pygame Zero 程序将永远运行下去。要停止它，可以点击游戏窗口右上角的关闭按钮（参见 [图 1-6](ch01.xhtml#ch01fig6)）。你也可以通过按
    CTRL-C 关闭命令行窗口中的程序，那里你输入了 `pgzrun` 指令。
- en: '**RED ALERT**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**紧急警报**'
- en: '*Don’t close the command line window itself. Otherwise, you’ll have to open
    it again to run another Pygame Zero program. If you do close it by mistake, refer
    back to “[Running the Game](intro.xhtml#lev12)” on [page 9](intro.xhtml#page_9)
    to open it again.*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要关闭命令行窗口本身。否则，你需要重新打开它才能运行另一个 Pygame Zero 程序。如果你不小心关闭了它，可以参阅 “[运行游戏](intro.xhtml#lev12)”
    在 [第 9 页](intro.xhtml#page_9) 重新打开它。*'
- en: '**ADDING THE PLANET AND SPACESHIP**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加行星和宇宙飞船**'
- en: Let’s bring Mars and the spaceship into view. In IDLE, add the last two lines
    in [Listing 1-2](ch01.xhtml#ch01list2) to your existing *listing 1-1.py* program.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把火星和宇宙飞船显示出来。在 IDLE 中，添加 [Listing 1-2](ch01.xhtml#ch01list2) 中的最后两行到你现有的
    *listing 1-1.py* 程序中。
- en: '**NOTE**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*I’ll use* --snip-- *in code listings to show you where I’ve left out some
    code, usually because the code is repeated from before. I’ll also show any repeated
    code in gray so you can see the new code you need to add more clearly. Don’t add
    in the repeated code again!*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*我将使用* --snip-- *在代码清单中显示我省略的代码部分，通常是因为这些代码在之前已经出现过。我还会将任何重复的代码以灰色显示，以便你能更清楚地看到需要添加的新代码。不要再添加重复的代码！*'
- en: In the following code, I’ve excluded the comments and variable setup to save
    space and make it easier for you to see the new code. But make sure you keep those
    instructions in your program. Just add the two new lines at the end.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我省略了注释和变量设置部分，以节省空间并使你更容易看到新增的代码。但请确保你在程序中保留这些指令。只需在末尾添加这两行新代码。
- en: '*listing1-2.py*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-2.py*'
- en: --snip--
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'def draw():'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'def draw():'
- en: screen.blit(images.backdrop, (0, 0))
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.backdrop, (0, 0))
- en: screen.blit(images.mars, (50, 50))
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.mars, (50, 50))
- en: screen.blit(images.ship, (130, 150))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.ship, (130, 150))
- en: '*Listing 1-2: Adding Mars and the ship*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-2：添加火星和飞船*'
- en: Save your updated program as *listing1-2.py* by selecting **File** ▸ **Save
    As**. Run your program by switching back to the command line window and entering
    the command pgzrun listing1-2.py. [Figure 1-7](ch01.xhtml#ch01fig7) shows how
    the screen should now look, with the red planet and the spaceship above it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新后的程序保存为 *listing1-2.py*，方法是选择 **文件** ▸ **另存为**。通过切换回命令行窗口并输入命令 pgzrun listing1-2.py
    来运行程序。[图 1-7](ch01.xhtml#ch01fig7) 显示了现在屏幕的样子，红色的行星和飞船位于其上方。
- en: '![image](../images/fig1-7.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-7.jpg)'
- en: '*Figure 1-7: Mars and the spaceship. The Mars image was taken by the Hubble
    Space Telescope in 1991.*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：火星和飞船。火星图像由哈勃太空望远镜于1991年拍摄。*'
- en: '**NOTE**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If your program doesn’t work as expected, check that all your* screen.blit()
    *instructions have exactly four spaces before them and are lined up with each
    other.*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果程序没有按预期工作，请检查所有的* screen.blit() *指令前面是否有准确的四个空格，并且它们是否对齐。*'
- en: The first of the new instructions places the image *mars.jpg* at the position
    (50, 50), which is near the top-left corner of the screen. The second new instruction
    positions the ship at (130, 150). In each case, the coordinates used are for the
    top-left corner of the image.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 新指令中的第一条将图像 *mars.jpg* 放置在屏幕的（50, 50）位置，即靠近左上角的位置。第二条新指令将飞船放置在（130, 150）位置。在这两种情况下，使用的坐标是图像的左上角。
- en: '**CHANGING PERSPECTIVE: FLYING BEHIND THE PLANET**'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**改变视角：飞船飞过行星后方**'
- en: Now let’s look at how we can make the ship fly behind the planet. Swap the order
    of the last two instructions in IDLE, as shown in [Listing 1-3](ch01.xhtml#ch01list3).
    To do this, highlight one of the lines, press CTRL-X to cut it, click on a new
    line, and press CTRL-V to paste it in place. You can also use the cut and paste
    options in the Edit menu at the top of the screen.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何让飞船飞到火星的后面。按照 [清单 1-3](ch01.xhtml#ch01list3) 中所示，交换最后两条指令的顺序。在 IDLE
    中进行此操作时，选中其中一行，按 CTRL-X 剪切它，点击新的一行，然后按 CTRL-V 粘贴到该位置。你也可以使用屏幕顶部编辑菜单中的剪切和粘贴选项。
- en: '*listing1-3.py*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-3.py*'
- en: --snip--
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'def draw():'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'def draw():'
- en: screen.blit(images.backdrop, (0, 0))
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.backdrop, (0, 0))
- en: screen.blit(images.ship, (130, 150))
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.ship, (130, 150))
- en: screen.blit(images.mars, (50, 50))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.mars, (50, 50))
- en: '*Listing 1-3: Swapping the order of the planet and ship instructions*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-3：交换行星和飞船指令的顺序*'
- en: If the previous version of your program is still running, close it now. Save
    your new program as *listing1-3.py* and run it from the command line by entering
    pgzrun listing1-3.py. You should see that the spaceship is now behind the planet,
    as shown in [Figure 1-8](ch01.xhtml#ch01fig8). If not, make sure you ran the right
    file (*listing1-3.py*), and then check that the instructions in the program are
    correct.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序的先前版本仍在运行，请现在关闭它。将新的程序保存为 *listing1-3.py*，并通过命令行输入 pgzrun listing1-3.py
    来运行它。你应该能看到飞船现在位于火星的后面，如 [图 1-8](ch01.xhtml#ch01fig8) 所示。如果没有，确保你运行了正确的文件 (*listing1-3.py*)，然后检查程序中的指令是否正确。
- en: The ship goes behind the planet because the images are added to the screen in
    the order they are drawn in the program. In our updated program, we draw the starfield,
    draw the ship, and then draw Mars. Each new image appears on top of the previous
    one. If two images overlap, the image that was drawn last appears in front of
    the one drawn earlier.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 飞船会被火星遮挡，因为图像是按程序绘制顺序添加到屏幕上的。在我们更新的程序中，我们先绘制星空，再绘制飞船，最后绘制火星。每个新图像都会出现在前一个图像的上方。如果两个图像重叠，最后绘制的图像会出现在前一个图像前面。
- en: '![image](../images/fig1-8.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-8.jpg)'
- en: '*Figure 1-8: The spaceship is now behind the planet.*'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-8：飞船现在在行星后面。*'
- en: '**TRAINING MISSION #2**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: Can you move just one drawing instruction in your program to make the planet
    and the spaceship disappear? If you’re not sure what to do, experiment by moving
    the drawing instructions to see what effect it has when you save the program and
    run it again.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你能否通过仅移动程序中的一个绘图指令，使行星和飞船消失？如果你不确定该怎么做，可以尝试移动绘图指令，看看每次保存程序并重新运行时会有什么效果。
- en: Make sure you keep the drawing instructions aligned and indented with four spaces
    inside the draw() function. When you’re done experimenting, match the instructions
    in [Listing 1-3](ch01.xhtml#ch01list3) again to bring the ship and Mars back into
    view.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在 draw() 函数内将绘图指令保持对齐，并使用四个空格缩进。当你完成实验后，再次对照[Listing 1-3](ch01.xhtml#ch01list3)来恢复飞船和火星的显示。
- en: '**SPACEWALKING!**'
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**太空行走！**'
- en: It’s time to climb out of the underside of the spaceship and begin your spacewalk.
    Edit your program so it matches [Listing 1-4](ch01.xhtml#ch01list4). But be sure
    to keep the variable instructions that aren’t shown here the same as they were
    before. Save the updated program as *listing1-4.py*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是从飞船底部爬出来，开始太空行走的时候了。编辑你的程序，使其与[Listing 1-4](ch01.xhtml#ch01list4)一致。但一定要保持这里没有显示的变量指令与之前相同。将更新后的程序保存为
    *listing1-4.py*。
- en: '*listing1-4.py*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-4.py*'
- en: --snip--
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 'def draw():'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'def draw():'
- en: screen.blit(images.backdrop, (0, 0))
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.backdrop, (0, 0))
- en: screen.blit(images.mars, (50, 50))
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: screen.blit(images.mars, (50, 50))
- en: ➊     screen.blit(images.astronaut, (player_x, player_y))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ➊     screen.blit(images.astronaut, (player_x, player_y))
- en: ➋     screen.blit(images.ship, (550, 300))
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ➋     screen.blit(images.ship, (550, 300))
- en: '➌ def game_loop():'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '➌ def game_loop():'
- en: ➍     global player_x, player_y
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ➍     global player_x, player_y
- en: '➎     if keyboard.right:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '➎     if keyboard.right:'
- en: ➏         player_x += 5
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ➏         player_x += 5
- en: '➐     elif keyboard.left:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '➐     elif keyboard.left:'
- en: player_x -= 5
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: player_x -= 5
- en: '➑     elif keyboard.up:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '➑     elif keyboard.up:'
- en: player_y -= 5
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: player_y -= 5
- en: 'elif keyboard.down:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif keyboard.down:'
- en: player_y += 5
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: player_y += 5
- en: ➒ clock.schedule_interval(game_loop, 0.03)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: ➒ clock.schedule_interval(game_loop, 0.03)
- en: '*Listing 1-4: Adding the spacewalk instructions*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-4: 添加太空行走指令*'
- en: In this listing, we add a new instruction ➊ to draw the astronaut image at the
    position in the player_x and player_y variables, which were set up at the start
    of the program in [Listing 1-1](ch01.xhtml#ch01list1). As you can see, we can
    use these variable names in place of numbers for the astronaut’s position. The
    program will use the current numbers stored in these variables to figure out where
    to put the astronaut every time it is drawn.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中，我们添加了一个新的指令➊，在程序开始时（在[Listing 1-1](ch01.xhtml#ch01list1)中设置的）player_x
    和 player_y 变量所指定的位置绘制宇航员的图像。如你所见，我们可以用这些变量名代替数字来表示宇航员的位置。程序会使用这些变量中存储的当前数字来确定每次绘制时宇航员的位置。
- en: Note that the order of drawing the images has changed in the program and is
    now backdrop, Mars, astronaut, and ship. Make sure you change the order of your
    screen.blit() instructions to match this listing.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，程序中图像绘制的顺序已经改变，现在是背景、火星、宇航员和飞船。确保你改变 screen.blit() 指令的顺序，以匹配这个列表。
- en: The astronaut starts off overlapping the ship. Because the astronaut is drawn
    before the ship, the astronaut will appear to emerge from underneath (behind)
    the spaceship. We also changed the position of the ship ➋ to the bottom-right
    area of the screen. This gives the astronaut space to fly toward the planet.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 宇航员一开始会和飞船重叠。因为宇航员在飞船之前绘制，所以宇航员看起来像是从飞船下面（后面）冒出来的。我们还将飞船的位置➋更改到屏幕的右下方。这为宇航员提供了飞向行星的空间。
- en: Run the program by entering pgzrun listing1-4.py. You should now be able to
    use the arrow keys to move freely through space, protected by your spacesuit,
    as shown in [Figure 1-9](ch01.xhtml#ch01fig9). You’ll see that you fly behind
    the spaceship but in front of Mars and the starfield. The order in which we draw
    the images creates a simple illusion of depth. When we draw the space station
    beginning in [Chapter 3](ch03.xhtml#ch03), we’ll use this drawing technique to
    create a 3D perspective of each room. We’ll draw the rooms from back to front
    to create a sense of depth.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，输入 pgzrun listing1-4.py。你现在应该能够使用箭头键在太空中自由移动，穿着太空服，正如在[图1-9](ch01.xhtml#ch01fig9)中所示。你会看到你飞行在飞船后面，但在火星和星空之前。我们绘制图像的顺序创造了一个简单的深度错觉。当我们在[第3章](ch03.xhtml#ch03)开始绘制空间站时，我们将使用这种绘图技巧来创建每个房间的3D透视。我们将从后到前绘制房间，以营造深度感。
- en: '![image](../images/fig1-9.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-9.jpg)'
- en: '*Figure 1-9: You emerge from the ship for your spacewalk.*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-9：你从飞船中出来，开始太空行走。*'
- en: '**TRAINING MISSION #3**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #3**'
- en: Can you edit the code to move the spaceship and the astronaut to the top-right
    corner of the screen? You’ll need to change the starting values for player_x and
    player_y, as well as where the spaceship is drawn. Make sure the player is “inside”
    (actually underneath) the ship at the start of the program. Experiment with other
    positions, too. This is a great way to get familiar with screen positions. Refer
    back to [Figure 1-6](ch01.xhtml#ch01fig6) if you need to.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你能修改代码让宇宙飞船和宇航员移动到屏幕的右上角吗？你需要更改`player_x`和`player_y`的初始值，以及飞船的绘制位置。确保在程序开始时，玩家“在”飞船里面（实际上是在飞船下方）。也可以尝试其他位置。这是熟悉屏幕位置的好方法。如果需要，参考[图
    1-6](ch01.xhtml#ch01fig6)。
- en: '**UNDERSTANDING THE SPACEWALK LISTING**'
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**理解太空行走列表**'
- en: The spacewalk listing, [Listing 1-4](ch01.xhtml#ch01list4), is interesting because
    it lets you control part of the program from the keyboard, which will be crucial
    in the *Escape* game. Let’s look at how our final spacewalk program works.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 太空行走列表，[列表 1-4](ch01.xhtml#ch01list4)很有趣，因为它允许你通过键盘控制程序的一部分，这对于*逃脱*游戏来说至关重要。让我们看看我们的最终太空行走程序是如何工作的。
- en: We build on our earlier listings and add a new function called game_loop() ➌.
    This function’s job is to change the values of the player_x and player_y variables
    when you press the arrow keys. Changing the variables enables you to move the
    astronaut character because those variables position the astronaut when it’s drawn.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的列表基础上添加了一个新的函数，叫做`game_loop()` ➌。这个函数的作用是，当你按下箭头键时，改变`player_x`和`player_y`变量的值。改变这些变量使得你可以移动宇航员角色，因为这些变量决定了宇航员在绘制时的位置。
- en: Before we go on, we need to look at two different types of variables. Variables
    that are changed inside a function usually belong to that function and can’t be
    used by other functions. They’re called *local variables*, and they make it harder
    for bits of the program to interfere with other bits accidentally and cause errors.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要了解两种不同类型的变量。在函数内部修改的变量通常属于该函数，不能被其他函数使用。它们被称为*局部变量*，并且它们减少了程序的各个部分之间互相干扰的可能性，从而避免错误的发生。
- en: But in the spacewalk listing, we need both the draw() and game_loop() functions
    to use the same player_x and player_y variables, so they need to be *global variables*,
    which any part of the program can use. We set up global variables at the start
    of the program, outside of any functions.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在太空行走列表中，我们需要让`draw()`和`game_loop()`这两个函数使用相同的`player_x`和`player_y`变量，因此它们需要是*全局变量*，任何程序部分都可以使用这些变量。我们在程序开始时设置全局变量，放在任何函数之外。
- en: To tell Python that the game_loop() function needs to use and change the global
    variables we set up outside of this function, we use the global command ➍. We
    put it at the beginning of the function and list the variables we want to use
    as global variables. Doing this is like overriding the safety feature that stops
    you from changing variables that weren’t created inside the function. We don’t
    need to use global in the draw() function, because the draw() function doesn’t
    need to change those variables. It only needs to look at what those variables
    contain.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了告诉Python `game_loop()`函数需要使用并修改我们在函数外部设置的全局变量，我们使用`global`命令 ➍。我们把它放在函数的开头，并列出我们希望作为全局变量使用的变量。这样做就像是覆盖了防止你修改函数外部创建的变量的安全功能。我们在`draw()`函数中不需要使用`global`，因为`draw()`函数不需要修改这些变量，它只需要查看这些变量的值。
- en: We tell the program to use keyboard controls using the if command. With this
    instruction, we tell Python to do something only *if* certain conditions are met.
    We use four spaces to indent the instructions that belong to the if command. That
    means these instructions are indented by eight spaces in total in [Listing 1-4](ch01.xhtml#ch01list4)
    because they are also inside the game_loop() function. These instructions run
    only if the statement after the if command is true. If not, the instructions that
    belong to the if command are skipped over.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`if`命令告诉程序使用键盘控制。通过这个指令，我们告诉Python只在特定条件满足时才执行某些操作。我们使用四个空格来缩进属于`if`命令的指令。这意味着这些指令在[列表
    1-4](ch01.xhtml#ch01list4)中总共缩进了八个空格，因为它们也在`game_loop()`函数内。只有在`if`命令后的条件为真时，这些指令才会执行。如果条件不成立，属于`if`命令的指令将被跳过。
- en: It might seem odd to use spaces like this to show which instructions belong
    together, especially if you’ve used other programming languages, but it makes
    the programs easy to read. Other languages often need brackets around sets of
    instructions like this. Python keeps it simple.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用空格来显示哪些指令属于一组，可能看起来很奇怪，尤其是如果你使用过其他编程语言，但它使得程序易于阅读。其他语言通常需要在这样的指令组周围加上括号，而Python则保持简单。
- en: 'We use the if command to check whether the right arrow key is pressed ➎. If
    it is, we change the value of player_x by adding 5 ➏, moving the astronaut image
    to the right. The symbols += mean *increase by*, so the following line increases
    the number in the player_x variable by 5:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用if命令来检查是否按下了右箭头键➎。如果按下了，我们通过加5来改变player_x的值➏，将宇航员的图像向右移动。符号+=表示*增加*，因此以下代码行将player_x变量中的数字增加5：
- en: player_x += 5
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: player_x += 5
- en: 'Similarly, -= means *decrease by*, so the following instruction reduces the
    number in player_x by 5:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，-=表示*减少*，因此以下指令将player_x中的数字减去5：
- en: player_x -= 5
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: player_x -= 5
- en: If the right arrow key is not pressed, we check whether the left key is pressed.
    If it is, the program subtracts 5 from the player_x value, moving the astronaut’s
    position left. To do that, we use an elif command ➐, which is short for “else
    if.” You can think of *else* as meaning *otherwise* here. In plain English, this
    part of our program means, “If the right arrow key is pressed, add 5 to the *x*
    position. Otherwise, if the left key is pressed, subtract 5 from the *x* position.”
    We then use elif to check for up and down keypresses in the same way, and change
    the *y* position to move the astronaut up or down. The draw() function uses the
    player_x and player_y variables for the astronaut’s position, so changing the
    numbers in these variables makes the astronaut move on the screen.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果右箭头键没有被按下，我们检查是否按下了左箭头键。如果按下了，程序将从player_x的值中减去5，将宇航员的位置向左移动。为此，我们使用elif命令➐，它是“else
    if”的缩写。你可以将*else*理解为*否则*。用简单的话来说，这部分程序的意思是：“如果按下了右箭头键，就在*x*位置上加5。否则，如果按下了左箭头键，就从*x*位置中减去5。”我们接着使用elif来检查上和下方向键的按下情况，并以相同的方式改变*y*位置，使宇航员向上或向下移动。draw()函数使用player_x和player_y变量来表示宇航员的位置，因此改变这些变量中的数字会使宇航员在屏幕上移动。
- en: '**TIP**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you change the elif command at ➑ to an if command, the program allows you
    to move up or down at the same time as moving left or right, letting you walk
    diagonally. That’s fun in the spacewalk program, but we’ll use code similar to
    this to move around the space station later, and it doesn’t look natural there.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把➑处的elif命令改为if命令，程序允许你同时上下和左右移动，让你走斜线。这在太空漫步程序中很有趣，但我们稍后将使用类似的代码在空间站中移动，在那里看起来就不自然了。
- en: The final instruction ➒ sets the game_loop() function to run every 0.03 seconds
    using the clock in Pygame Zero, so the program keeps checking for your keypresses
    and changing your position variables frequently. Note that you don’t put any parentheses
    after game_loop here. This instruction isn’t indented, because it doesn’t belong
    to any function. When the program starts, it runs the instructions that aren’t
    in any function in the order they are in the listing, from top to bottom. Therefore,
    the last line of the program is one of the first to run after the variables are
    set up. This last line starts the game_loop() function running.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的指令➒设置game_loop()函数每0.03秒运行一次，使用Pygame Zero中的时钟，这样程序就会频繁地检查你的按键并更新位置变量。注意，这里在game_loop后面没有加括号。这个指令没有缩进，因为它不属于任何函数。当程序启动时，它会按顺序运行不属于任何函数的指令，从上到下。因此，程序的最后一行是变量设置完后最先运行的一行。这一行启动了game_loop()函数。
- en: The draw() function runs automatically whenever the screen needs updating. This
    is a feature of Pygame Zero.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: draw()函数会在每次需要更新屏幕时自动运行。这是Pygame Zero的一个特点。
- en: '**TRAINING MISSION #4**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务#4**'
- en: Let’s fit some new thrusters to the spacesuit. Can you work out how to make
    the astronaut move faster in the up and down directions than it does in the left
    and right directions? Each keypress in the up or down direction should make the
    space suit move more than a keypress in the left or right direction.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为宇航服装配一些新的推进器。你能算出如何使宇航员在上下方向上移动得比在左右方向上更快吗？每次按下上或下方向键时，宇航服应该比按下左或右方向键时移动得更多。
- en: Enjoy the breathtaking views as you take your spacewalk and conduct any essential
    repairs to your ship. We’ll reconvene in [Chapter 2](ch02.xhtml#ch02), where you’ll
    learn some procedures that will help you stay safe in space.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在你进行太空行走并修复你的飞船时，享受令人叹为观止的景色。我们将在 [第二章](ch02.xhtml#ch02) 再次汇合，届时你将学习一些有助于你在太空中保持安全的程序。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞行了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter. If you’re not sure about something, flip back through the chapter
    and give the topic another look.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请勾选以下框以确认你已掌握本章的关键知识点。如果你对某些内容不确定，请翻回章节并重新查看相关主题。
- en: '![Images](../images/box.jpg)  You use IDLE’s script mode to create a program
    that you can save, edit, and run again. Enter script mode by selecting **File**
    ▸ **New File** or edit an existing file by selecting **File** ▸ **Open**.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  使用 IDLE 的脚本模式来创建一个你可以保存、编辑并再次运行的程序。通过选择 **文件**
    ▸ **新建文件** 进入脚本模式，或通过选择 **文件** ▸ **打开** 来编辑现有文件。'
- en: '![Images](../images/box.jpg)  Strings are pieces of text in code. Double quotes
    mark the start and end of a string. A string can include numbers, but they’re
    treated as letters.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  字符串是代码中的一段文本。双引号标记字符串的开始和结束。字符串可以包含数字，但它们被当作字母处理。'
- en: '![Images](../images/box.jpg)  Variables store information, either numbers or
    strings.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  变量用于存储信息，可以是数字或字符串。'
- en: '![Images](../images/box.jpg)  The print() function outputs information on the
    screen. You can use it for strings, numbers, calculations, or the values of variables.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  print() 函数将信息输出到屏幕。你可以用它输出字符串、数字、计算结果或变量的值。'
- en: '![Images](../images/box.jpg)  The # symbol in a program marks a comment. Python
    ignores anything on the same line after a #, and comments can be a handy reminder
    for you and anyone you share your code with.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  程序中的 # 符号用于标记注释。Python 会忽略 # 后面的内容，注释对于你和与他人共享代码时是一个方便的提醒。'
- en: '![Images](../images/box.jpg)  Use the WIDTH and HEIGHT variables to set the
    size of your game window.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  使用 WIDTH 和 HEIGHT 变量来设置游戏窗口的大小。'
- en: '![Images](../images/box.jpg)  To run a Pygame Zero program, open the command
    line from the folder your Python program is in, and then enter pgzrun filename.py
    in the command line to run it.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  要运行 Pygame Zero 程序，请打开你 Python 程序所在文件夹中的命令行窗口，然后在命令行中输入
    pgzrun filename.py 来运行它。'
- en: '![Images](../images/box.jpg)  A function is a group of instructions you can
    run whenever you want your program to use the instructions. Pygame Zero uses the
    draw() function to draw or update the game screen.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  函数是一组指令，你可以在任何需要这些指令时执行它们。Pygame Zero 使用 draw()
    函数来绘制或更新游戏屏幕。'
- en: '![Images](../images/box.jpg)  Use screen.blit(images.image_name, (x, y)) to
    draw an image at position (*x*, *y*) on the screen. The x- and y-axes are numbered
    starting at 0 in the top-left corner.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  使用 screen.blit(images.image_name, (x, y)) 在屏幕上绘制图像，位置为
    (*x*, *y*)。x轴和y轴从左上角的 0 开始编号。'
- en: '![Images](../images/box.jpg)  A *tuple* is a group of numbers or strings in
    parentheses, separated by a comma. The contents of a tuple can’t be changed by
    the program after they’ve been set up.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  *元组* 是一组括号中的数字或字符串，用逗号分隔。元组的内容一旦设置，就不能被程序更改。'
- en: '![Images](../images/box.jpg)  To end your Pygame Zero program, click the window’s
    close button or press CTRL-C in the command line window.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  要结束你的 Pygame Zero 程序，可以点击窗口的关闭按钮或在命令行窗口按 CTRL-C。'
- en: '![Images](../images/box.jpg)  If images overlap, the image you drew last in
    the program appears at the front.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  如果图像重叠，程序中最后绘制的图像会出现在最前面。'
- en: '![Images](../images/box.jpg)  The elif command is short for “else if.” Use
    it to combine if conditions so that only one set of instructions can run. In our
    program, we use it to stop the player from moving in two directions at the same
    time.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  elif 命令是“else if”的简写。使用它可以将 if 条件组合在一起，从而保证只有一组指令能运行。在我们的程序中，我们使用它来防止玩家同时向两个方向移动。'
- en: '![Images](../images/box.jpg)  If we want to change a variable inside a function
    and use it in a different function, we need to use a *global variable*. We set
    it up outside of the functions and use the global keyword inside a function when
    we plan to change the variable there.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  如果我们想在一个函数内部修改变量并在另一个函数中使用它，我们需要使用 *全局变量*。我们在函数外部设置它，并在函数内部使用
    global 关键字来表示计划修改该变量。'
- en: '![Images](../images/box.jpg)  We can set a function to run at regular intervals
    using the clock feature in Pygame Zero.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 我们可以利用 Pygame Zero 中的时钟功能设置一个定期运行的函数。'
- en: '![image](../images/f0031-01.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0031-01.jpg)'
