- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: YOUR FIRST SPACEWALK**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的第一次太空行走**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Welcome to the space corps. Your mission is to build the first human outpost
    on Mars. For years, the world’s greatest scientists have been sending robots to
    study it up close. Soon you too will set foot on its dusty surface.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎加入太空军团。你的任务是建立人类在火星上的第一个前哨站。多年来，世界上最伟大的科学家们一直在派遣机器人进行近距离研究。很快，你也将踏上这片尘土飞扬的表面。
- en: Travel to Mars takes between six and eight months, depending on how Earth and
    Mars are aligned. During the journey, the spaceship risks hitting meteoroids and
    other space debris. If any damage occurs, you’ll need to put on your spacesuit,
    go to the airlock, and then step into the void of space to make repairs, similar
    to the astronaut in [Figure 1-1](ch01.xhtml#ch01fig1).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 前往火星的旅行通常需要六到八个月，具体取决于地球和火星的对齐方式。在旅途中，飞船有可能会撞上流星体和其他太空垃圾。如果发生任何损坏，你需要穿上宇航服，走到气闸处，然后进入太空修复，类似于[图1-1](ch01.xhtml#ch01fig1)中的宇航员。
- en: In this chapter, you’ll go on a spacewalk by using Python to move a character
    around the screen. You’ll launch your first Python program and learn some of the
    essential Python instructions you’ll need to build the space station later in
    the book. You’ll also learn how to create a sense of depth by overlapping images,
    which will prove essential when we create the *Escape* game in 3D later (starting
    with our first room mock-up in [Chapter 3](ch03.xhtml#ch03)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过使用Python让角色在屏幕上移动，来进行一次太空行走。你将启动第一个Python程序，并学习一些你在本书后面创建太空站时所需要的基础Python指令。你还将学习如何通过重叠图像来创造深度感，这在我们稍后创建3D版本的*Escape*游戏时（从[第3章](ch03.xhtml#ch03)开始的第一个房间模型）将非常有用。
- en: '![image](../images/fig1-1.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-1.jpg)'
- en: '*Figure 1-1: NASA astronaut Rick Mastracchio on a 26-minute spacewalk in 2010,
    as photographed by astronaut Clayton Anderson. The spacewalk outside the International
    Space Station was one of a series to replace coolant tanks.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：2010年，NASA宇航员Rick Mastracchio进行26分钟的太空行走，由宇航员Clayton Anderson拍摄。这次太空行走是在国际空间站外进行的，目的是更换冷却液罐。*'
- en: If you haven’t already installed Python and Pygame Zero (Windows users), see
    “[Installing the Software](intro.xhtml#lev3)” on [page 3](intro.xhtml#page_3).
    You’ll also need the *Escape* game files in this chapter. “[Downloading the Game
    Files](intro.xhtml#lev8)” on [page 7](intro.xhtml#page_7) tells you how to download
    and unzip those files.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Python和Pygame Zero（Windows用户），请参阅“[安装软件](intro.xhtml#lev3)”第3页的内容。你还需要本章的*Escape*游戏文件。“[下载游戏文件](intro.xhtml#lev8)”在第7页说明了如何下载和解压这些文件。
- en: '**STARTING THE PYTHON EDITOR**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**启动Python编辑器**'
- en: As I mentioned in the Introduction, in this book we’ll use the Python programming
    language. A programming language provides a way to write instructions for a computer.
    Our instructions will tell the computer how to do things like react to a keypress
    or display an image. We’ll also be using Pygame Zero, which gives Python some
    additional instructions for handling sound and images.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在引言中提到的，在本书中我们将使用Python编程语言。编程语言提供了一种为计算机编写指令的方法。我们的指令将告诉计算机如何执行某些操作，例如响应按键或显示图像。我们还将使用Pygame
    Zero，它为Python提供了一些处理声音和图像的额外指令。
- en: Python comes with the IDLE editor, and we’ll use the editor to create our Python
    programs. Because you’ve already installed Python, IDLE should now be on your
    computer as well. The following sections explain how to start IDLE, depending
    on the type of computer you’re using.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python附带了IDLE编辑器，我们将使用该编辑器来创建Python程序。由于你已经安装了Python，IDLE现在应该也已安装在你的计算机上。接下来的部分将根据你使用的计算机类型解释如何启动IDLE。
- en: '**STARTING IDLE IN WINDOWS 10**'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在Windows 10中启动IDLE**'
- en: 'To start IDLE in Windows 10, follow these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10中启动IDLE，请按照以下步骤操作：
- en: Click the Cortana search box at the bottom of the screen, and enter Python in
    the box.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕底部的Cortana搜索框，并在框中输入Python。
- en: Click **IDLE** to open it.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**IDLE**以打开它。
- en: With IDLE running, right-click its icon in the taskbar at the bottom of the
    screen and pin it. Then you can run it from there in the future using a single
    click.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当IDLE运行时，右键点击屏幕底部任务栏中的图标并固定它。以后你可以通过单击从任务栏直接运行它。
- en: '**STARTING IDLE IN WINDOWS 8**'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在Windows 8中启动IDLE**'
- en: 'To start IDLE in Windows 8, follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 8中启动IDLE，请按照以下步骤操作：
- en: Move your mouse to the top right of the screen to show the Charms bar.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标移到屏幕右上角，显示出魅力条。
- en: Click the Search icon, and enter Python in the box.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击搜索图标，在框中输入Python。
- en: Click **IDLE** to open it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**IDLE**以打开它。
- en: With IDLE running, right-click its icon in the taskbar at the bottom of the
    screen and pin it. Then you can run it from there in the future using a single
    click.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 IDLE 后，右击屏幕底部任务栏中的其图标并将其固定。以后你可以通过单击它来运行 IDLE。
- en: '**STARTING IDLE ON THE RASPBERRY PI**'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 Raspberry Pi 上启动 IDLE**'
- en: 'To start IDLE on the Raspberry Pi, follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上启动 IDLE，请按照以下步骤操作：
- en: Click the Programs menu at the top left of the screen.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕左上角的“程序”菜单。
- en: Find the Programming category.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到“编程”类别。
- en: Click the Python 3 (IDLE) icon. The Raspberry Pi has both Python 2 and Python
    3 installed, but most of the programs in this book will work only in Python 3.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Python 3（IDLE）图标。Raspberry Pi 上安装了 Python 2 和 Python 3，但本书中的大多数程序只在 Python
    3 上运行。
- en: '**INTRODUCING THE PYTHON SHELL**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 Python Shell**'
- en: When you start IDLE, you should see the Python *shell*, as shown in [Figure
    1-2](ch01.xhtml#ch01fig2). This window is where you can give Python instructions
    and immediately see the computer respond. The three arrows (`>>>`) are called
    a *prompt*. They tell you that Python is ready for you to enter an instruction.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 IDLE 时，你应该看到 Python 的*Shell*，如[图 1-2](ch01.xhtml#ch01fig2)所示。这个窗口是你可以给 Python
    输入指令并立即看到计算机回应的地方。三个箭头（`>>>`）被称为*提示符*，它们告诉你 Python 已经准备好接受指令了。
- en: '![image](../images/fig1-2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-2.jpg)'
- en: '*Figure 1-2: The Python shell*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：Python Shell*'
- en: So let’s give Python something to do!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们给 Python 一些任务吧！
- en: '**DISPLAYING TEXT**'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**显示文本**'
- en: 'For our first instruction, let’s tell Python to display text on the screen.
    Type the following line and press ENTER:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个指令，让我们告诉 Python 在屏幕上显示文本。输入以下内容并按回车：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you type, the color of your text will change. It starts off black, but as
    soon as Python recognizes a command, like `print`, the text changes color.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入时，文本的颜色会发生变化。一开始是黑色的，但一旦 Python 识别出一个命令，比如 `print`，文本就会变色。
- en: '[Figure 1-3](ch01.xhtml#ch01fig3) shows the names of the different parts of
    the instruction you just entered. The purple word `print` is the name of a *built-in
    function*, which is one of many instructions that are always available in Python.
    The `print()` function displays onscreen the information you place between the
    *parentheses* (curved brackets). The information between a function’s parentheses
    is the function’s *argument*.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-3](ch01.xhtml#ch01fig3)显示了你刚刚输入的指令的不同部分。紫色的单词 `print` 是一个*内建函数*，它是 Python
    中始终可用的众多指令之一。`print()` 函数会在屏幕上显示你放在*括号*（圆括号）之间的信息。函数括号之间的信息就是该函数的*参数*。'
- en: '![image](../images/fig1-3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-3.jpg)'
- en: '*Figure 1-3: The different parts of your first instruction*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：你第一个指令的不同部分*'
- en: In our first instruction, the `print()` function’s argument is a *string*, which
    is what programmers call a piece of text. (A string can include numbers, but they’re
    treated as letters, so you can’t do calculations with numbers in a string.) The
    double quotation marks (`" "`) show the start and end of the string. Anything
    you type between double quotation marks will be green, and so will the quotation
    marks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个指令中，`print()` 函数的参数是一个*字符串*，程序员通常称之为一段文本。（字符串可以包含数字，但它们被当作字母处理，所以你不能用字符串中的数字做运算。）双引号（`"
    "`）表示字符串的开始和结束。你在双引号之间输入的任何内容都会是绿色，双引号本身也会是绿色的。
- en: 'The colors do more than brighten up the screen: they highlight the different
    parts of the instruction to help you find mistakes. For example, if your final
    parenthesis is green, it means you forgot the closing double quote on the string.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色不仅仅是让屏幕更加亮眼：它们还突出显示了指令的不同部分，帮助你找出错误。例如，如果你的最后一个括号是绿色的，这意味着你忘记了字符串的闭合双引号。
- en: 'If you entered the instruction correctly, your computer will display this text:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确输入了指令，计算机将显示以下文本：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The string that was shown in green is now displayed onscreen in blue. All *output*
    (information the computer gives to you) appears in blue. If your command didn’t
    work, check that you did the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 显示为绿色的字符串现在在屏幕上显示为蓝色。所有的*输出*（计算机提供给你的信息）都以蓝色显示。如果你的命令没有成功，检查你是否做了以下操作：
- en: Spelled `print` correctly. If you did, it will be purple (see [Figure 1-3](ch01.xhtml#ch01fig3)).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确拼写了 `print`。如果拼写正确，它将显示为紫色（见[图 1-3](ch01.xhtml#ch01fig3)）。
- en: Used two parentheses. Other bracket shapes won’t work.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用了两个括号。其他类型的括号将无法工作。
- en: Used two double quotes. Don’t use two apostrophes (`''`) instead of a double
    quote (`"`). Although the double quote includes two marks, it’s just one symbol
    on the keyboard. On a US keyboard, the double quote is in the middle row of letters,
    on the right, and must be used with the SHIFT key. On a UK keyboard, the double
    quote is on the 2 key.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用了两个双引号。不要使用两个撇号（`''`）代替双引号（`"`）。尽管双引号包含两个符号，它在键盘上其实是一个符号。在美国键盘上，双引号位于字母中间行的右侧，必须与SHIFT键一起使用。在英国键盘上，双引号位于2键上。
- en: 'If you make a mistake typing the text between the double quotes, the instruction
    will still work, but the computer will display exactly what you typed. For example,
    try this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在双引号之间输入的文本有错误，指令仍然会运行，但计算机会显示你输入的内容。例如，试试这个：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It doesn’t matter if you mistype the string now, but be careful when you type
    a string or an instruction later in the book. Mistakes often prevent a program
    from working correctly, and it can be hard to track down a mistake in a longer
    program, even with the color coding.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在你打错了字符串也没关系，但以后在书中输入字符串或指令时要小心。错误往往会导致程序无法正常工作，而且在更长的程序中，即使有颜色编码，也很难追踪到错误。
- en: '**TRAINING MISSION #1**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Can you enter a new instruction to output your name? (You’ll find the answers
    to the Training Missions in the “Mission Debrief” section at the end of each chapter.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你能输入一个新的指令来输出你的名字吗？（你可以在每章结尾的“任务总结”部分找到训练任务的答案。）
- en: '**OUTPUTTING AND USING NUMBERS**'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输出和使用数字**'
- en: 'So far you’ve used the `print()` function to output a string, but it can also
    do calculations and output a number. Enter the following line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经使用`print()`函数输出了一个字符串，但它也可以进行计算并输出一个数字。输入以下代码：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The computer should output the number `5`, the solution to `4 + 1`. Unlike with
    a string, you don’t use quotes around numbers and calculations. But you still
    use the parentheses to mark the start and end of the information you want to give
    the `print()` function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机应输出数字`5`，即`4 + 1`的结果。与字符串不同，数字和计算不需要加引号。但是，你仍然需要使用括号来标记你想要提供给`print()`函数的信息的开始和结束。
- en: What happens if you do put quotes around `4 + 1`? Try it! The result is that
    the computer outputs `"4 + 1"` because it doesn’t treat 4 and 1 as numbers. Instead,
    it treats the argument as a string. You ask it to output `"4 + 1"`, and it does
    exactly that!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`4 + 1`周围加上引号会发生什么？试试看！结果是计算机输出`"4 + 1"`，因为它不会把4和1当作数字来处理。相反，它把参数当作字符串处理。你要求它输出`"4
    + 1"`，它就会准确地做出这个输出！
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Python does the calculation only when you don’t include the quotes. You’ll use
    the `print()` function a lot in your programs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在你不加引号时，Python才会进行计算。在你的程序中，你将经常使用`print()`函数。
- en: '**INTRODUCING SCRIPT MODE**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍脚本模式**'
- en: The shell is great for quick calculations and for short instructions. But for
    longer sets of instructions, like games, it’s much easier to create programs instead.
    *Programs* are repeatable sets of instructions that we save so we can run them
    whenever we want and change them whenever we need to without retyping them. We’ll
    build programs using IDLE’s *script mode*. When you enter instructions in script
    mode, they don’t run immediately as they do in the shell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Shell非常适合快速计算和简短的指令。但对于更长的指令集，比如游戏，创建程序要容易得多。*程序*是可重复执行的一组指令，我们保存它们，以便随时运行并在需要时修改，而无需重新输入。我们将使用IDLE的*脚本模式*来编写程序。当你在脚本模式下输入指令时，它们不会像在shell中那样立即运行。
- en: Using the menu at the top of the shell window, select **File** and then select
    **New File** to open a blank new window, as shown in [Figure 1-4](ch01.xhtml#ch01fig4).
    The title bar at the top of the window displays *Untitled* until you save your
    file and name it. Once you’ve saved your file, the title bar will display the
    file’s name. From now on, we’ll use script mode nearly all the time when we’re
    creating Python code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用顶部菜单中的菜单，选择**文件**，然后选择**新建文件**，以打开一个空白的新窗口，如[图 1-4](ch01.xhtml#ch01fig4)所示。窗口顶部的标题栏会显示*未命名*，直到你保存并命名文件。保存文件后，标题栏将显示文件的名称。从现在开始，我们在编写Python代码时几乎总是使用脚本模式。
- en: '![image](../images/fig1-4.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-4.jpg)'
- en: '*Figure 1-4: Python script mode*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：Python脚本模式*'
- en: When you enter instructions in script mode, you can change, add, and delete
    instructions using the mouse or the arrow keys, so it’s much easier to fix mistakes
    and build your programs. Starting from [Chapter 4](ch04.xhtml#ch04), we’ll build
    the *Escape* game by adding to it piece-by-piece in script mode and testing each
    new section as we go.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在脚本模式中输入指令时，可以使用鼠标或箭头键来更改、添加和删除指令，这样更容易修正错误并构建程序。从 [第 4 章](ch04.xhtml#ch04)
    开始，我们将通过逐步添加并测试每个新部分来构建 *Escape* 游戏。
- en: '**TIP**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you’re not sure whether you’re in the shell or the script mode window, look
    at the title bar at the top. The shell displays *Python Shell*. The script mode
    window displays either *Untitled* or the name of your program.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定自己是在 shell 模式还是脚本模式窗口中，看看顶部的标题栏。Shell 显示的是 *Python Shell*。脚本模式窗口显示的是 *Untitled*
    或你程序的名称。
- en: '**CREATING THE STARFIELD**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建星空背景**'
- en: The first program we’ll write will display the starfield image that we’ll use
    as the space background for our *Spacewalk* program. This image is in the *images*
    folder within the *escape* folder. Start by entering [Listing 1-1](ch01.xhtml#ch01list1)
    into the new blank window in IDLE.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的第一个程序将显示星空背景图像，这是我们将用作 *太空行走* 程序的太空背景。该图像位于 *escape* 文件夹中的 *images* 文件夹中。首先在
    IDLE 中的新空白窗口中输入 [Listing 1-1](ch01.xhtml#ch01list1)。
- en: '**NOTE**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In this book, I’ll use numbers in circles (like this:* ➊*) to refer to different
    bits of code in the explanations so it’s easier for you to follow along. Don’t
    type these numbers in your program. When you see a number in a circle in the text,
    refer back to the program listing to see which part of the program I’m talking
    about.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本书中，我将使用圆圈中的数字（例如：* ➊*）来引用解释中的不同代码部分，这样你可以更容易地跟随。在程序中不要输入这些数字。当你在文本中看到圆圈中的数字时，回到程序列表中查看我所提到的程序部分。*'
- en: '[Listing 1-1](ch01.xhtml#ch01list1) is a short program, but there are a couple
    of details that you should pay attention to while you’re typing: the `def` statement
    ➍ needs a colon at the end of its line, and the next line ➎ needs to start with
    four spaces. When you add the colon to the end of the `def` line and press ENTER,
    IDLE automatically adds the four spaces at the beginning of the next line for
    you.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 1-1](ch01.xhtml#ch01list1) 是一个简短的程序，但在你输入时有几个细节需要注意：`def`语句 ➍ 需要在其行末加上冒号，接下来的行
    ➎ 需要以四个空格开始。当你在 `def` 行末添加冒号并按下 ENTER 时，IDLE 会自动在下一行的开头添加四个空格。'
- en: '*listing1-1.py*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-1.py*'
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 1-1: See the starfield in Pygame Zero.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-1：在 Pygame Zero 中查看星空背景。*'
- en: 'Select the **File** menu at the top of the screen and then select **Save**
    (from now on, we’ll use a shorthand for menu selections that looks like this:
    **File** ▸ **Save**). In the Save dialog, name your program *listing1-1.py*. You
    need to save your file in the *escape* folder you set up in the Introduction.
    This way, it’s in the same folder as the book’s *images* folder, and Pygame Zero
    can find the images when you run the program. After you save the file, your *escape*
    folder should now contain your *listing1-1.py* file and the *images* folder, as
    shown in [Figure 1-5](ch01.xhtml#ch01fig5) (along with the *listings* and *sounds*
    folders).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 选择屏幕顶部的 **文件** 菜单，然后选择 **保存**（从现在开始，我们将使用类似于 **文件** ▸ **保存** 的菜单选择简写）。在保存对话框中，将你的程序命名为
    *listing1-1.py*。你需要将文件保存在你在介绍部分设置的 *escape* 文件夹中。这样，它就与本书的 *images* 文件夹位于同一文件夹，Pygame
    Zero 在运行程序时就能找到图像。保存文件后，你的 *escape* 文件夹现在应该包含 *listing1-1.py* 文件和 *images* 文件夹，如
    [图 1-5](ch01.xhtml#ch01fig5) 所示（以及 *listings* 和 *sounds* 文件夹）。
- en: '![image](../images/fig1-5.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-5.jpg)'
- en: '*Figure 1-5: Your new Python program and the* images *folder should be stored
    in the same place.*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-5：你的新 Python 程序和* images *文件夹应该存储在同一位置。*'
- en: I’ll explain how the *listing1-1.py* program works shortly, but first let’s
    run the program so we can admire the starfield. The program needs some instructions
    from Pygame Zero to manage the images, so to use those instructions, we need to
    run the program using a `pgzrun` instruction. Whenever we use any instructions
    from Pygame Zero in a Python program, we need to run it using `pgzrun`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我将简要解释*listing1-1.py*程序是如何工作的，但首先让我们运行程序，以便我们可以欣赏星空背景。程序需要一些来自 Pygame Zero 的指令来管理图像，因此为了使用这些指令，我们需要使用`pgzrun`指令运行程序。每当我们在
    Python 程序中使用 Pygame Zero 的指令时，都需要使用`pgzrun`来运行。
- en: 'We’ll type this on the computer’s command line, just like we did in the Introduction
    to run the *Escape* game. First, look back at “[Running the Game](intro.xhtml#lev12)”
    on [page 9](intro.xhtml#page_9), and follow the directions there to open your
    computer’s command line terminal from your *escape* folder. Then run the following
    instruction from the command line:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在计算机的命令行中输入这些内容，就像我们在介绍中运行*Escape*游戏时所做的那样。首先，回顾一下[“运行游戏”](intro.xhtml#lev12)，并按照[第9页](intro.xhtml#page_9)上的说明，从你的*escape*文件夹中打开计算机的命令行终端。然后在命令行中运行以下指令：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**RED ALERT**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**紧急警报**'
- en: '*Don’t type this instruction in IDLE: be sure to type it in your Windows or
    Raspberry Pi command line. The Introduction shows you how.*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要在IDLE中输入这个指令：一定要在你的Windows或Raspberry Pi命令行中输入。介绍中展示了如何操作。*'
- en: If all went according to plan, you should be looking at the majesty of space,
    as shown in [Figure 1-6](ch01.xhtml#ch01fig6).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，你应该能看到太空的壮丽景象，如[图 1-6](ch01.xhtml#ch01fig6)所示。
- en: '![image](../images/fig1-6.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-6.jpg)'
- en: '*Figure 1-6: The starfield. The starfield image is courtesy of NASA/JPL-Caltech/UCLA
    and shows star cluster NGC 2259.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-6：星空。星空图像由NASA/JPL-Caltech/UCLA提供，显示的是星团NGC 2259。*'
- en: '**USING MY EXAMPLE LISTINGS**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用我的示例列表**'
- en: If you can’t get a program in this book to work, you can use my example program
    instead. For instance, you can use my *listing1-1.py* example and modify it to
    make your own *listing1-2.py* shortly so you can continue following along.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法使本书中的程序工作，你可以使用我的示例程序。例如，你可以使用我的*listing1-1.py*示例，并修改它以便快速制作自己的*listing1-2.py*，以便继续跟随下去。
- en: You’ll find my programs in the *listings* folder, which is in the *escape* folder.
    Simply open the *listings* folder in Windows or the Raspberry Pi desktop, find
    the listing you need, copy it, and then paste it into the *escape* folder. Then
    open the copied listing in IDLE and follow along with the next step in the book.
    When you look at the folder, you should be able to see your Python file and the
    *images* folder are in the same place (see [Figure 1-5](ch01.xhtml#ch01fig5)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*escape*文件夹中的*listings*文件夹找到我的程序。只需在Windows或Raspberry Pi桌面上打开*listings*文件夹，找到你需要的列表，复制它，然后将其粘贴到*escape*文件夹中。然后在IDLE中打开复制的列表，并按照书中的下一步继续操作。当你查看文件夹时，你应该能够看到Python文件和*images*文件夹在同一个位置（参见[图
    1-5](ch01.xhtml#ch01fig5)）。
- en: '**UNDERSTANDING THE PROGRAM SO FAR**'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**到目前为止理解程序**'
- en: Most of the instructions you’ll see in this book will work in any Python program.
    The `print()` function, for example, is always available. To make the programs
    in this book, we’re also using Pygame Zero. This adds some new functions and capabilities
    to Python for creating games, especially for the screen display and sound. [Listing
    1-1](ch01.xhtml#ch01list1) introduces our first instructions from Pygame Zero,
    used to set up the game window and draw the starfield.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中你将看到的大部分指令在任何Python程序中都能使用。例如，`print()`函数始终可用。为了制作本书中的程序，我们还使用了Pygame Zero。它为Python添加了一些新函数和功能，用于创建游戏，特别是在屏幕显示和声音方面。[列表1-1](ch01.xhtml#ch01list1)介绍了我们从Pygame
    Zero中获得的第一组指令，用于设置游戏窗口并绘制星空。
- en: Let’s take a closer look at how the *listing1-1.py* program works.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下*listing1-1.py*程序是如何工作的。
- en: The first few program lines are *comments* ➊. When you use a `#` symbol, Python
    ignores everything after it on the same line, and the line appears in red. The
    comments help you and other people reading the program understand what a program
    does and how it works.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行程序是*注释* ➊。当你使用`#`符号时，Python会忽略该行中`#`符号后的所有内容，该行会显示为红色。注释帮助你和其他阅读程序的人理解程序的功能及其工作原理。
- en: Next, the program needs to store some information. Programs almost always need
    to store information that the program uses or needs to refer back to at a later
    time. For example, in many games, the computer needs to keep track of the score
    and the player’s position on the screen. Because these details can change (or
    *vary*) as the program runs, they’re stored in something called a *variable*.
    A variable is a name you give to a piece of information, either a number or some
    text.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，程序需要存储一些信息。程序几乎总是需要存储程序使用的信息或稍后需要引用的信息。例如，在许多游戏中，计算机需要跟踪分数和玩家在屏幕上的位置。由于这些细节会随着程序的运行而变化（或*波动*），它们存储在一个叫做*变量*的东西中。变量是你给某个信息（无论是数字还是文本）起的名字。
- en: 'To create a variable, you use an instruction like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个变量，你可以使用如下指令：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**NOTE**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Code terms shown in italics are placeholders that would be filled in. Instead
    of* variable_name*, you would enter your own variable name.*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*以斜体显示的代码术语是占位符，将被填充。你应该用你自己的变量名代替* variable_name*。*'
- en: 'For example, the following instruction puts the number 500 into the variable
    `score`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下指令将数字 500 存入变量 `score` 中：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can name your variables almost anything you want. However, to make your
    program easy to write and understand, you should choose variable names that describe
    the information inside each variable. Note that you can’t use names for your variables
    that Python uses for its language, such as `print`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以几乎随意为你的变量命名。然而，为了让你的程序更容易编写和理解，你应该选择能够描述每个变量内部信息的变量名。请注意，你不能使用 Python 本身用于语言的名称作为变量名，例如
    `print`。
- en: '**RED ALERT**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**紧急警告**'
- en: '*Python is case-sensitive, which means it is strict about whether variables
    use uppercase or lowercase letters. In fact, it treats* score*,* SCORE*, and*
    Score *as three completely different variables. Make sure you copy my example
    programs exactly, or they might not work properly.*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python 区分大小写，这意味着它对变量是否使用大写或小写字母非常严格。事实上，它将* score*、* SCORE* 和 *Score* 视为三个完全不同的变量。确保你完全照搬我的示例程序，否则它们可能无法正常工作。*'
- en: '[Listing 1-1](ch01.xhtml#ch01list1) begins by creating some variables. Pygame
    Zero uses the `WIDTH` and `HEIGHT` variables ➋ to set the size of the game window
    on the screen. Our window is wider than it is tall because the `WIDTH` value (`800`)
    is bigger than the `HEIGHT` value (`600`).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-1](ch01.xhtml#ch01list1) 开始时创建了一些变量。Pygame Zero 使用 `WIDTH` 和 `HEIGHT`
    变量 ➋ 来设置游戏窗口在屏幕上的大小。我们的窗口比它高，因此 `WIDTH` 的值（`800`）比 `HEIGHT` 的值（`600`）大。'
- en: Notice that we’ve spelled these variables with capital letters. The capital
    letters in variable names tell us that they’re *constants*. A constant is a particular
    kind of variable with values that aren’t supposed to change after they’ve been
    set up. The capital letters help other programmers who are looking at the program
    understand that they shouldn’t let anything else in the program change these variables.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将这些变量拼写为大写字母。变量名中的大写字母告诉我们它们是 *常量*。常量是一种特殊类型的变量，其值在设定后不应该改变。大写字母有助于其他查看程序的程序员理解，不应该让程序中的其他部分修改这些变量。
- en: The `player_x` and `player_y` variables ➌ will store your position on the screen
    as you carry out your spacewalk. Later in the chapter, we’ll use these variables
    to draw you on the screen.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`player_x` 和 `player_y` 变量 ➌ 会存储你在执行太空行走时在屏幕上的位置。在本章后面，我们将使用这些变量来绘制你的屏幕位置。'
- en: We then define a function using the `def()` statement ➍. A *function* is a group
    of instructions you can run whenever you need them in your program. You’ve already
    seen one built-in function called `print()`. We’ll make our own function in this
    program called `draw()`. Pygame Zero will use it to draw the screen display whenever
    the screen changes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `def()` 语句 ➍ 来定义一个函数。一个 *函数* 是一组指令，你可以在程序中需要它们时运行它们。你已经见过一个内置函数 `print()`。我们将在这个程序中创建一个名为
    `draw()` 的函数，Pygame Zero 会在屏幕变化时使用它来绘制屏幕显示。
- en: We define a function using the keyword `def` ➍, followed by the function name
    we choose, empty parentheses, and a colon. Sometimes you’ll use a function’s parentheses
    to contain information for that function, as you’ll see later in this book.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用关键字 `def` ➍ 来定义一个函数，后跟我们选择的函数名称、空括号和冒号。有时，你会使用函数的括号来传递该函数所需的信息，正如你将在本书后面看到的那样。
- en: 'We then need to give the function instructions for what it should do. To tell
    Python which instructions belong to the function, we indent them by four spaces.
    The `screen.blit()` instruction ➎ from Pygame Zero draws an image on the screen.
    In the parentheses, we tell it which image to draw and where to draw it, like
    this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要为函数提供指令，告诉它应该做什么。为了告诉 Python 哪些指令属于这个函数，我们通过缩进四个空格来标明它们。Pygame Zero 中的
    `screen.blit()` 指令 ➎ 会在屏幕上绘制一张图片。在括号中，我们告诉它绘制哪张图片以及绘制的位置，像这样：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: From the *images* folder, we’ll use the *backdrop.jpg* file, which is the starfield.
    In our *listing1-1.py* program, we refer to it as `images.backdrop`. We don’t
    have to use the file’s *.jpg* extension, because we’re using Pygame Zero to handle
    the images, and Pygame Zero doesn’t require the extension*.* Also, the program
    knows where the image is because all the images must be in the *images* folder
    so Pygame Zero can find them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *images* 文件夹中，我们将使用 *backdrop.jpg* 文件，它是星空背景。在我们的 *listing1-1.py* 程序中，我们将它称为
    `images.backdrop`。我们不需要使用文件的 *.jpg* 扩展名，因为我们使用 Pygame Zero 来处理图像，而 Pygame Zero
    不要求使用扩展名。此外，程序知道图像所在的位置，因为所有图像必须保存在 *images* 文件夹中，以便 Pygame Zero 可以找到它们。
- en: We put the image on the screen at position `(0, 0)` ➌, which is the top-left
    corner of the screen. The first number, known as the *x position*, tells the `screen.blit()`
    instruction how far from the left edge we want our image to be; the second number,
    known as the *y position*, describes how far down we want it to be. The *x* positions
    go from 0 on the left edge of the window to 799 on the right edge because our
    window is 800 pixels wide. Similarly, the *y* positions run from 0 at the top
    of the window to 599 at the bottom (see [Figure 1-6](ch01.xhtml#ch01fig6)).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将图像放置在屏幕的 `(0, 0)` 位置➌，这里是屏幕的左上角。第一个数字，称为 *x 位置*，告诉 `screen.blit()` 指令我们希望图像距离左边缘多远；第二个数字，称为
    *y 位置*，描述我们希望图像离上边缘多远。*x* 位置从窗口的左边缘 0 开始，到右边缘的 799（因为我们的窗口宽度是 800 像素）。类似地，*y*
    位置从窗口的顶部 0 开始，到底部的 599（参见[图 1-6](ch01.xhtml#ch01fig6)）。
- en: For positions onscreen, we use a *tuple*, which is just a group of numbers or
    strings in parentheses, such as `(0, 0)`. In a tuple, the numbers are separated
    with a comma, plus an optional space for readability.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于屏幕上的位置，我们使用 *元组*，它只是一些数字或字符串放在括号内，例如 `(0, 0)`。在元组中，数字之间用逗号分隔，另外为了可读性，还可以加上空格。
- en: The most important thing you need to know about tuples is that you have to take
    care with the punctuation. Because the tuple uses parentheses, and we put this
    tuple inside the parentheses for `screen.blit()`, there are two sets of parentheses
    here. So you need parentheses around the tuple values, but you also need to close
    the parentheses for `screen.blit()` after the tuple.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 关于元组，你需要知道的最重要的事情是要小心标点符号。因为元组使用括号，而我们将这个元组放在 `screen.blit()` 的括号内，所以这里有两组括号。因此，你需要在元组的值周围加上括号，但也需要在元组之后关闭
    `screen.blit()` 的括号。
- en: '**STOPPING YOUR PYGAME ZERO PROGRAM**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**停止你的 Pygame Zero 程序**'
- en: Similar to space, your Pygame Zero program will go on forever. To stop it, click
    the game window’s close button at the top right (see [Figure 1-6](ch01.xhtml#ch01fig6)).
    You can also close the program from the command line window where you entered
    the `pgzrun` instruction by pressing CTRL-C.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于太空，你的 Pygame Zero 程序将一直运行下去。要停止它，可以点击游戏窗口右上角的关闭按钮（参见[图 1-6](ch01.xhtml#ch01fig6)）。你也可以通过按
    CTRL-C 在输入 `pgzrun` 指令的命令行窗口中关闭程序。
- en: '**RED ALERT**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*Don’t close the command line window itself. Otherwise, you’ll have to open
    it again to run another Pygame Zero program. If you do close it by mistake, refer
    back to “[Running the Game](intro.xhtml#lev12)” on [page 9](intro.xhtml#page_9)
    to open it again.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要关闭命令行窗口。否则，你将不得不重新打开它才能运行另一个 Pygame Zero 程序。如果不小心关闭了它，请参考 “[运行游戏](intro.xhtml#lev12)”
    章节，在 [第 9 页](intro.xhtml#page_9) 中重新打开它。*'
- en: '**ADDING THE PLANET AND SPACESHIP**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加行星和宇宙飞船**'
- en: Let’s bring Mars and the spaceship into view. In IDLE, add the last two lines
    in [Listing 1-2](ch01.xhtml#ch01list2) to your existing *listing 1-1.py* program.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把火星和宇宙飞船显示出来。在 IDLE 中，将[清单 1-2](ch01.xhtml#ch01list2)中的最后两行添加到现有的 *listing
    1-1.py* 程序中。
- en: '**NOTE**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*I’ll use* --snip-- *in code listings to show you where I’ve left out some
    code, usually because the code is repeated from before. I’ll also show any repeated
    code in gray so you can see the new code you need to add more clearly. Don’t add
    in the repeated code again!*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*我会在代码清单中使用* --snip-- *来表示我省略了一些代码，通常是因为这些代码在之前已经重复出现过。我还会将重复的代码以灰色显示，这样你就能更清楚地看到你需要添加的新代码。不要再次添加重复的代码！*'
- en: In the following code, I’ve excluded the comments and variable setup to save
    space and make it easier for you to see the new code. But make sure you keep those
    instructions in your program. Just add the two new lines at the end.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我省略了注释和变量设置，以节省空间并使你更容易看到新增的代码。但确保你将这些指令保留在程序中。只需在最后添加两行新代码。
- en: '*listing1-2.py*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-2.py*'
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 1-2: Adding Mars and the ship*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-2：添加火星和飞船*'
- en: Save your updated program as *listing1-2.py* by selecting **File** ▸ **Save
    As**. Run your program by switching back to the command line window and entering
    the command pgzrun listing1-2.py. [Figure 1-7](ch01.xhtml#ch01fig7) shows how
    the screen should now look, with the red planet and the spaceship above it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的更新程序保存为*listing1-2.py*，方法是选择**文件** ▸ **另存为**。通过切换回命令行窗口并输入命令`pgzrun listing1-2.py`来运行程序。[图
    1-7](ch01.xhtml#ch01fig7)展示了现在屏幕应该呈现的效果，红色的行星和位于其上方的宇宙飞船。
- en: '![image](../images/fig1-7.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-7.jpg)'
- en: '*Figure 1-7: Mars and the spaceship. The Mars image was taken by the Hubble
    Space Telescope in 1991.*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：火星和宇宙飞船。火星的图像是1991年由哈勃太空望远镜拍摄的。*'
- en: '**NOTE**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If your program doesn’t work as expected, check that all your* screen.blit()
    *instructions have exactly four spaces before them and are lined up with each
    other.*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你的程序没有按预期运行，请检查所有的* screen.blit() *指令前是否有四个空格，并且它们是否对齐。*'
- en: The first of the new instructions places the image *mars.jpg* at the position
    (50, 50), which is near the top-left corner of the screen. The second new instruction
    positions the ship at (130, 150). In each case, the coordinates used are for the
    top-left corner of the image.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 新的第一条指令将图片*mars.jpg*放置在位置(50, 50)，也就是屏幕的左上角附近。第二条新指令将宇宙飞船放置在(130, 150)位置。在这两种情况下，使用的坐标都是图像的左上角位置。
- en: '**CHANGING PERSPECTIVE: FLYING BEHIND THE PLANET**'
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**改变视角：飞到行星后面**'
- en: Now let’s look at how we can make the ship fly behind the planet. Swap the order
    of the last two instructions in IDLE, as shown in [Listing 1-3](ch01.xhtml#ch01list3).
    To do this, highlight one of the lines, press CTRL-X to cut it, click on a new
    line, and press CTRL-V to paste it in place. You can also use the cut and paste
    options in the Edit menu at the top of the screen.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何让宇宙飞船飞到行星后面。按[示例 1-3](ch01.xhtml#ch01list3)中所示的方式，在IDLE中交换最后两条指令的顺序。为此，选中其中一行，按CTRL-X剪切它，点击新的一行，按CTRL-V粘贴到那里。你也可以使用屏幕顶部“编辑”菜单中的剪切和粘贴选项。
- en: '*listing1-3.py*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-3.py*'
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 1-3: Swapping the order of the planet and ship instructions*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 1-3：交换行星和宇宙飞船指令的顺序*'
- en: If the previous version of your program is still running, close it now. Save
    your new program as *listing1-3.py* and run it from the command line by entering
    pgzrun listing1-3.py. You should see that the spaceship is now behind the planet,
    as shown in [Figure 1-8](ch01.xhtml#ch01fig8). If not, make sure you ran the right
    file (*listing1-3.py*), and then check that the instructions in the program are
    correct.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前的程序仍在运行，请现在关闭它。将你的新程序保存为*listing1-3.py*，并通过命令行输入`pgzrun listing1-3.py`来运行它。你应该看到宇宙飞船现在位于行星后面，如[图
    1-8](ch01.xhtml#ch01fig8)所示。如果没有，确保你运行了正确的文件（*listing1-3.py*），然后检查程序中的指令是否正确。
- en: The ship goes behind the planet because the images are added to the screen in
    the order they are drawn in the program. In our updated program, we draw the starfield,
    draw the ship, and then draw Mars. Each new image appears on top of the previous
    one. If two images overlap, the image that was drawn last appears in front of
    the one drawn earlier.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 宇宙飞船之所以会在行星后面，是因为图像是按程序中的绘制顺序添加到屏幕上的。在我们更新后的程序中，我们先绘制星空，再绘制宇宙飞船，最后绘制火星。每一张新图像都会显示在前一张图像的上方。如果两张图像重叠，最后绘制的图像会出现在先前绘制的图像前面。
- en: '![image](../images/fig1-8.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-8.jpg)'
- en: '*Figure 1-8: The spaceship is now behind the planet.*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-8：宇宙飞船现在位于行星后面。*'
- en: '**TRAINING MISSION #2**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #2**'
- en: Can you move just one drawing instruction in your program to make the planet
    and the spaceship disappear? If you’re not sure what to do, experiment by moving
    the drawing instructions to see what effect it has when you save the program and
    run it again.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你能将程序中的一条绘图指令移到其他位置，使行星和宇宙飞船消失吗？如果不确定该做什么，可以通过移动绘图指令来进行实验，看看保存程序并重新运行后会产生什么效果。
- en: Make sure you keep the drawing instructions aligned and indented with four spaces
    inside the `draw()` function. When you’re done experimenting, match the instructions
    in [Listing 1-3](ch01.xhtml#ch01list3) again to bring the ship and Mars back into
    view.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在`draw()`函数内保持绘图指令的对齐，并且每条指令前有四个空格。当你完成实验后，再次将[示例 1-3](ch01.xhtml#ch01list3)中的指令恢复，使宇宙飞船和火星重新出现在屏幕上。
- en: '**SPACEWALKING!**'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**太空漫步！**'
- en: It’s time to climb out of the underside of the spaceship and begin your spacewalk.
    Edit your program so it matches [Listing 1-4](ch01.xhtml#ch01list4). But be sure
    to keep the variable instructions that aren’t shown here the same as they were
    before. Save the updated program as *listing1-4.py*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候从飞船底部爬出来，开始你的太空行走了。编辑你的程序，使其与[Listing 1-4](ch01.xhtml#ch01list4)匹配。但一定要保持之前没有显示在这里的变量指令与之前相同。将更新后的程序保存为*listing1-4.py*。
- en: '*listing1-4.py*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing1-4.py*'
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 1-4: Adding the spacewalk instructions*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-4: 添加太空行走指令*'
- en: In this listing, we add a new instruction ➊ to draw the astronaut image at the
    position in the `player_x` and `player_y` variables, which were set up at the
    start of the program in [Listing 1-1](ch01.xhtml#ch01list1). As you can see, we
    can use these variable names in place of numbers for the astronaut’s position.
    The program will use the current numbers stored in these variables to figure out
    where to put the astronaut every time it is drawn.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码段中，我们添加了一个新的指令➊，用于在`player_x`和`player_y`变量指定的位置绘制宇航员图像，这些变量在[Listing 1-1](ch01.xhtml#ch01list1)中已经设置。正如你所看到的，我们可以用这些变量名代替数字来表示宇航员的位置。程序将在每次绘制宇航员时，使用这些变量中存储的当前数字来确定宇航员的位置。
- en: Note that the order of drawing the images has changed in the program and is
    now backdrop, Mars, astronaut, and ship. Make sure you change the order of your
    `screen.blit()` instructions to match this listing.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，程序中图像的绘制顺序已经改变，现在是背景、火星、宇航员和飞船。确保你修改`screen.blit()`指令的顺序，以与此列表匹配。
- en: The astronaut starts off overlapping the ship. Because the astronaut is drawn
    before the ship, the astronaut will appear to emerge from underneath (behind)
    the spaceship. We also changed the position of the ship ➋ to the bottom-right
    area of the screen. This gives the astronaut space to fly toward the planet.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 宇航员开始时与飞船重叠。由于宇航员在飞船之前绘制，因此宇航员看起来是从飞船下方（后面）出现的。我们还将飞船的位置➋更改到了屏幕的右下角。这为宇航员飞向行星提供了空间。
- en: Run the program by entering pgzrun listing1-4.py. You should now be able to
    use the arrow keys to move freely through space, protected by your spacesuit,
    as shown in [Figure 1-9](ch01.xhtml#ch01fig9). You’ll see that you fly behind
    the spaceship but in front of Mars and the starfield. The order in which we draw
    the images creates a simple illusion of depth. When we draw the space station
    beginning in [Chapter 3](ch03.xhtml#ch03), we’ll use this drawing technique to
    create a 3D perspective of each room. We’ll draw the rooms from back to front
    to create a sense of depth.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入`pgzrun listing1-4.py`运行程序。现在你应该能够使用方向键自由移动，身穿航天服，穿越太空，如[图 1-9](ch01.xhtml#ch01fig9)所示。你会发现自己飞在宇宙飞船后面，但在火星和星空之前。我们绘制图像的顺序创造了一个简单的深度错觉。当我们在[第3章](ch03.xhtml#ch03)开始绘制空间站时，我们将使用这种绘制技巧来创建每个房间的3D视角。我们将从后到前绘制房间，以创造深度感。
- en: '![image](../images/fig1-9.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig1-9.jpg)'
- en: '*Figure 1-9: You emerge from the ship for your spacewalk.*'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-9：你从飞船中走出来，开始太空行走。*'
- en: '**TRAINING MISSION #3**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #3**'
- en: Can you edit the code to move the spaceship and the astronaut to the top-right
    corner of the screen? You’ll need to change the starting values for `player_x`
    and `player_y`, as well as where the spaceship is drawn. Make sure the player
    is “inside” (actually underneath) the ship at the start of the program. Experiment
    with other positions, too. This is a great way to get familiar with screen positions.
    Refer back to [Figure 1-6](ch01.xhtml#ch01fig6) if you need to.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你能编辑代码，将飞船和宇航员移动到屏幕的右上角吗？你需要更改`player_x`和`player_y`的起始值，以及飞船绘制的位置。确保在程序开始时，玩家是“在”（实际上是在）飞船内部的。你也可以尝试其他位置。这是熟悉屏幕位置的好方法。如果需要，可以参考[图
    1-6](ch01.xhtml#ch01fig6)。
- en: '**UNDERSTANDING THE SPACEWALK LISTING**'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**理解太空行走代码**'
- en: The spacewalk listing, [Listing 1-4](ch01.xhtml#ch01list4), is interesting because
    it lets you control part of the program from the keyboard, which will be crucial
    in the *Escape* game. Let’s look at how our final spacewalk program works.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 太空行走的代码[Listing 1-4](ch01.xhtml#ch01list4)很有趣，因为它允许你通过键盘控制程序的部分内容，这在*逃脱*游戏中至关重要。让我们看看最终的太空行走程序是如何工作的。
- en: We build on our earlier listings and add a new function called `game_loop()`
    ➌. This function’s job is to change the values of the `player_x` and `player_y`
    variables when you press the arrow keys. Changing the variables enables you to
    move the astronaut character because those variables position the astronaut when
    it’s drawn.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的列表基础上进行扩展，添加了一个名为 `game_loop()` 的新函数 ➌。这个函数的任务是当你按下箭头键时，改变 `player_x`
    和 `player_y` 变量的值。改变这些变量的值可以移动宇航员角色，因为这些变量决定了宇航员在屏幕上的位置。
- en: Before we go on, we need to look at two different types of variables. Variables
    that are changed inside a function usually belong to that function and can’t be
    used by other functions. They’re called *local variables*, and they make it harder
    for bits of the program to interfere with other bits accidentally and cause errors.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要了解两种不同类型的变量。在函数内部改变的变量通常属于该函数，无法被其他函数使用。它们被称为*局部变量*，它们能够有效地防止程序的不同部分意外干扰，从而避免错误的发生。
- en: But in the spacewalk listing, we need both the `draw()` and `game_loop()` functions
    to use the same `player_x` and `player_y` variables, so they need to be *global
    variables*, which any part of the program can use. We set up global variables
    at the start of the program, outside of any functions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在太空漫步的列表中，我们需要 `draw()` 和 `game_loop()` 函数都使用相同的 `player_x` 和 `player_y` 变量，所以它们需要是*全局变量*，程序的任何部分都可以使用它们。我们在程序的开始部分设置全局变量，放在任何函数之外。
- en: To tell Python that the `game_loop()` function needs to use and change the global
    variables we set up outside of this function, we use the `global` command ➍. We
    put it at the beginning of the function and list the variables we want to use
    as global variables. Doing this is like overriding the safety feature that stops
    you from changing variables that weren’t created inside the function. We don’t
    need to use `global` in the `draw()` function, because the `draw()` function doesn’t
    need to change those variables. It only needs to look at what those variables
    contain.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了告诉 Python `game_loop()` 函数需要使用并修改我们在该函数外部设置的全局变量，我们使用 `global` 命令 ➍。我们把它放在函数的开头，并列出我们想要作为全局变量使用的变量。这样做就像是覆盖了一个安全功能，该功能阻止你修改那些在函数内部没有创建的变量。在
    `draw()` 函数中，我们不需要使用 `global`，因为 `draw()` 函数不需要修改那些变量，它只需要查看这些变量的内容。
- en: We tell the program to use keyboard controls using the `if` command. With this
    instruction, we tell Python to do something only *if* certain conditions are met.
    We use four spaces to indent the instructions that belong to the `if` command.
    That means these instructions are indented by eight spaces in total in [Listing
    1-4](ch01.xhtml#ch01list4) because they are also inside the `game_loop()` function.
    These instructions run only if the statement after the `if` command is true. If
    not, the instructions that belong to the `if` command are skipped over.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 `if` 命令告诉程序使用键盘控制。通过这一指令，我们告诉 Python 仅在某些条件满足时执行某些操作。我们使用四个空格来缩进属于 `if`
    命令的指令。这意味着这些指令在 [Listing 1-4](ch01.xhtml#ch01list4) 中总共缩进了八个空格，因为它们也在 `game_loop()`
    函数内部。只有在 `if` 命令后面的条件为真时，这些指令才会执行。如果条件不成立，那么属于 `if` 命令的指令将被跳过。
- en: It might seem odd to use spaces like this to show which instructions belong
    together, especially if you’ve used other programming languages, but it makes
    the programs easy to read. Other languages often need brackets around sets of
    instructions like this. Python keeps it simple.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这样使用空格来表示哪些指令属于同一组可能看起来有些奇怪，尤其是如果你曾经使用过其他编程语言的话，但这种方式使得程序更容易阅读。其他语言通常需要用括号来包围这类指令集合，而
    Python 则保持简单。
- en: 'We use the `if` command to check whether the right arrow key is pressed ➎.
    If it is, we change the value of `player_x` by adding 5 ➏, moving the astronaut
    image to the right. The symbols `+=` mean *increase by*, so the following line
    increases the number in the `player_x` variable by 5:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `if` 命令来检查是否按下了右箭头键 ➎。如果按下了，我们通过加 5 来改变 `player_x` 的值 ➏，将宇航员图像向右移动。符号 `+=`
    意味着*增加*，因此下面的这一行将 `player_x` 变量中的数字增加了 5：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Similarly, `-=` means *decrease by*, so the following instruction reduces the
    number in `player_x` by 5:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`-=` 意味着*减少*，因此下面的指令将 `player_x` 中的数字减少了 5：
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the right arrow key is not pressed, we check whether the left key is pressed.
    If it is, the program subtracts 5 from the `player_x` value, moving the astronaut’s
    position left. To do that, we use an `elif` command ➐, which is short for “else
    if.” You can think of *else* as meaning *otherwise* here. In plain English, this
    part of our program means, “If the right arrow key is pressed, add 5 to the *x*
    position. Otherwise, if the left key is pressed, subtract 5 from the *x* position.”
    We then use `elif` to check for up and down keypresses in the same way, and change
    the *y* position to move the astronaut up or down. The `draw()` function uses
    the `player_x` and `player_y` variables for the astronaut’s position, so changing
    the numbers in these variables makes the astronaut move on the screen.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果右箭头键没有被按下，我们检查左箭头键是否被按下。如果是，程序将从`player_x`值中减去5，向左移动宇航员的位置。为此，我们使用`elif`命令➐，它是“else
    if”的缩写。你可以把*else*理解为这里的*否则*。用通俗的语言来说，这部分程序意味着：“如果按下右箭头键，向*x*位置加5。否则，如果按下左箭头键，向*x*位置减5。”然后我们使用`elif`以同样的方式检查上下箭头键的按下，并改变*y*位置来上下移动宇航员。`draw()`函数使用`player_x`和`player_y`变量表示宇航员的位置，因此更改这些变量中的数字会使宇航员在屏幕上移动。
- en: '**TIP**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you change the `elif` command at ➑ to an `if` command, the program allows
    you to move up or down at the same time as moving left or right, letting you walk
    diagonally. That’s fun in the spacewalk program, but we’ll use code similar to
    this to move around the space station later, and it doesn’t look natural there.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将➑处的`elif`命令改为`if`命令，程序将允许你在移动左右的同时，也能上下移动，实现对角线行走。虽然在太空行走程序中这样做很有趣，但我们稍后会使用类似的代码来移动太空站，那样看起来不自然。
- en: The final instruction ➒ sets the `game_loop()` function to run every 0.03 seconds
    using the clock in Pygame Zero, so the program keeps checking for your keypresses
    and changing your position variables frequently. Note that you don’t put any parentheses
    after `game_loop` here. This instruction isn’t indented, because it doesn’t belong
    to any function. When the program starts, it runs the instructions that aren’t
    in any function in the order they are in the listing, from top to bottom. Therefore,
    the last line of the program is one of the first to run after the variables are
    set up. This last line starts the `game_loop()` function running.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条指令➒设置`game_loop()`函数每0.03秒运行一次，使用Pygame Zero中的时钟，这样程序就会不断检查你的按键并频繁更改你的位置变量。注意，在这里你不需要在`game_loop`后加上括号。这条指令没有缩进，因为它不属于任何函数。当程序启动时，它会按照列表中从上到下的顺序运行那些不在任何函数中的指令。因此，程序的最后一行是设置完变量后首先运行的指令之一。这一行启动了`game_loop()`函数的运行。
- en: The `draw()` function runs automatically whenever the screen needs updating.
    This is a feature of Pygame Zero.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数会在每次需要更新屏幕时自动运行。这是Pygame Zero的一个特点。'
- en: '**TRAINING MISSION #4**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #4**'
- en: Let’s fit some new thrusters to the spacesuit. Can you work out how to make
    the astronaut move faster in the up and down directions than it does in the left
    and right directions? Each keypress in the up or down direction should make the
    space suit move more than a keypress in the left or right direction.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为太空服安装一些新的推进器。你能想出如何让宇航员在上下方向上的移动比在左右方向上更快吗？每次按下上下方向键时，太空服应该移动得比按下左右方向键时更多。
- en: Enjoy the breathtaking views as you take your spacewalk and conduct any essential
    repairs to your ship. We’ll reconvene in [Chapter 2](ch02.xhtml#ch02), where you’ll
    learn some procedures that will help you stay safe in space.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行太空行走并完成任何必要的修理时，享受令人叹为观止的景色。我们将在[第2章](ch02.xhtml#ch02)重新集合，在那里你将学习一些帮助你在太空中保持安全的程序。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞行了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter. If you’re not sure about something, flip back through the chapter
    and give the topic another look.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框以确认你已经掌握了本章的关键知识。如果你对某个内容不确定，可以翻回本章再看一遍。
- en: '![Images](../images/box.jpg)  You use IDLE’s script mode to create a program
    that you can save, edit, and run again. Enter script mode by selecting **File**
    ▸ **New File** or edit an existing file by selecting **File** ▸ **Open**.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg) 你可以使用IDLE的脚本模式来创建一个可以保存、编辑并重新运行的程序。通过选择**文件** ▸ **新建文件**进入脚本模式，或者选择**文件**
    ▸ **打开**来编辑现有文件。'
- en: '![Images](../images/box.jpg)  Strings are pieces of text in code. Double quotes
    mark the start and end of a string. A string can include numbers, but they’re
    treated as letters.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  字符串是代码中的文本片段。双引号标记字符串的起始和结束。字符串可以包含数字，但它们被视为字母。'
- en: '![Images](../images/box.jpg)  Variables store information, either numbers or
    strings.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  变量存储信息，可以是数字或字符串。'
- en: '![Images](../images/box.jpg)  The `print()` function outputs information on
    the screen. You can use it for strings, numbers, calculations, or the values of
    variables.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  `print()` 函数在屏幕上输出信息。您可以用它来处理字符串、数字、计算结果或变量的值。'
- en: '![Images](../images/box.jpg)  The `#` symbol in a program marks a comment.
    Python ignores anything on the same line after a `#`, and comments can be a handy
    reminder for you and anyone you share your code with.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  程序中的 `#` 符号表示注释。Python 忽略 `#` 后同一行的任何内容，注释对您和与您分享代码的其他人都很有用。'
- en: '![Images](../images/box.jpg)  Use the `WIDTH` and `HEIGHT` variables to set
    the size of your game window.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  使用 `WIDTH` 和 `HEIGHT` 变量设置游戏窗口的大小。'
- en: '![Images](../images/box.jpg)  To run a Pygame Zero program, open the command
    line from the folder your Python program is in, and then enter `pgzrun` filename`.py`
    in the command line to run it.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  要运行 Pygame Zero 程序，请从包含 Python 程序的文件夹中打开命令行，然后在命令行中输入
    `pgzrun` 文件名`.py`。'
- en: '![Images](../images/box.jpg)  A function is a group of instructions you can
    run whenever you want your program to use the instructions. Pygame Zero uses the
    `draw()` function to draw or update the game screen.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  函数是一组指令，您可以在需要时运行它们。Pygame Zero 使用 `draw()` 函数来绘制或更新游戏屏幕。'
- en: '![Images](../images/box.jpg)  Use `screen.blit``(`images`.`image_name`, (`x`,`
    y`))` to draw an image at position (*x*, *y*) on the screen. The x- and y-axes
    are numbered starting at 0 in the top-left corner.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  使用 `screen.blit``(`images`.`image_name`, (`x`,` y`))`
    在屏幕上的位置 (*x*, *y*) 绘制一幅图像。x 和 y 轴从左上角的 0 开始编号。'
- en: '![Images](../images/box.jpg)  A *tuple* is a group of numbers or strings in
    parentheses, separated by a comma. The contents of a tuple can’t be changed by
    the program after they’ve been set up.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  *元组* 是一组用括号括起来的数字或字符串，用逗号分隔。元组的内容一经设置后程序无法更改。'
- en: '![Images](../images/box.jpg)  To end your Pygame Zero program, click the window’s
    close button or press CTRL-C in the command line window.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  要结束 Pygame Zero 程序，点击窗口的关闭按钮或在命令行窗口中按下 CTRL-C。'
- en: '![Images](../images/box.jpg)  If images overlap, the image you drew last in
    the program appears at the front.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  如果图像重叠，程序中最后绘制的图像将显示在最前面。'
- en: '![Images](../images/box.jpg)  The `elif` command is short for “else if.” Use
    it to combine `if` conditions so that only one set of instructions can run. In
    our program, we use it to stop the player from moving in two directions at the
    same time.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  `elif` 命令是“else if”的缩写。使用它来组合 `if` 条件，以便只能运行一个指令集。在我们的程序中，我们用它来阻止玩家同时在两个方向上移动。'
- en: '![Images](../images/box.jpg)  If we want to change a variable inside a function
    and use it in a different function, we need to use a *global variable*. We set
    it up outside of the functions and use the `global` keyword inside a function
    when we plan to change the variable there.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  如果我们想在一个函数中更改变量并在另一个函数中使用它，需要使用 *全局变量*。我们在函数外设置它，并在函数内使用
    `global` 关键字来更改该变量。'
- en: '![Images](../images/box.jpg)  We can set a function to run at regular intervals
    using the clock feature in Pygame Zero.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  我们可以使用 Pygame Zero 中的时钟功能定期运行函数。'
- en: '![image](../images/f0031-01.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0031-01.jpg)'
