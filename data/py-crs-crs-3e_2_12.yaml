- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Styling and Deploying an App
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 样式和部署应用程序
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Learning Log is fully functional now, but it has no styling and runs only on
    your local machine. In this chapter, you’ll style the project in a simple but
    professional manner and then deploy it to a live server so anyone in the world
    can make an account and use it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Learning Log 现在已经完全可用，但它没有样式，仅在本地计算机上运行。在这一章中，你将以简单但专业的方式为项目添加样式，然后将其部署到实时服务器，使世界上任何人都可以注册并使用它。
- en: For the styling, we’ll use the *Bootstrap* library, a collection of tools for
    styling web applications so they look professional on all modern devices, from
    a small phone to a large desktop monitor. To do this, we’ll use the django-bootstrap5
    app, which will also give you practice using apps made by other Django developers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于样式，我们将使用*Bootstrap*库，这是一组用于为 Web 应用程序添加样式的工具，使其在所有现代设备上看起来都很专业，从小型手机到大型桌面显示器。为此，我们将使用
    django-bootstrap5 应用程序，它还将帮助你练习使用其他 Django 开发者创建的应用程序。
- en: We’ll deploy Learning Log using *Platform.sh*, a site that lets you push your
    project to one of its servers, making it available to anyone with an internet
    connection. We’ll also start using a version control system called Git to track
    changes to the project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*Platform.sh*部署 Learning Log，这是一个允许你将项目推送到其服务器的站点，从而使其对任何有互联网连接的人可用。我们还将开始使用一种名为
    Git 的版本控制系统来跟踪项目的变更。
- en: When you’re finished with Learning Log, you’ll be able to develop simple web
    applications, give them a professional look and feel, and deploy them to a live
    server. You’ll also be able to use more advanced learning resources as you develop
    your skills.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成 Learning Log 后，你将能够开发简单的 Web 应用程序，赋予它们专业的外观与感觉，并将其部署到实时服务器上。你还将能够在提升技能的过程中使用更高级的学习资源。
- en: Styling Learning Log
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Learning Log 添加样式
- en: We’ve purposely ignored styling until now to focus on Learning Log’s functionality
    first. This is a good way to approach development, because an app is only useful
    if it works. Once an app is working, its appearance is critical so people will
    want to use it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意推迟了样式设置，直到现在才开始，以便首先关注 Learning Log 的功能。这是一种不错的开发方式，因为一个应用程序只有在其功能正常时才有用。一旦应用程序能够正常工作，它的外观就变得至关重要，这样用户才会想使用它。
- en: In this section, we’ll install the django-bootstrap5 app and add it to the project.
    We’ll then use it to style the individual pages in the project, so all the pages
    have a consistent look and feel.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将安装 django-bootstrap5 应用程序并将其添加到项目中。然后，我们将使用它为项目中的各个页面添加样式，以便所有页面具有一致的外观和感觉。
- en: The django-bootstrap5 App
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: django-bootstrap5 应用程序
- en: We’ll use django-bootstrap5 to integrate Bootstrap into our project. This app
    downloads the required Bootstrap files, places them in an appropriate location
    in your project, and makes the styling directives available in your project’s
    templates.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 django-bootstrap5 将 Bootstrap 集成到我们的项目中。这个应用程序会下载所需的 Bootstrap 文件，将其放置在项目中的适当位置，并在项目的模板中提供样式指令。
- en: 'To install django-bootstrap5, issue the following command in an active virtual
    environment:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 django-bootstrap5，请在活动的虚拟环境中执行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we need to add django-bootstrap5 to `INSTALLED_APPS` in *settings.py*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将 django-bootstrap5 添加到`INSTALLED_APPS`中的*settings.py*：
- en: '**settings.py**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Start a new section called `Third party apps`, for apps created by other developers,
    and add `'django_bootstrap5'` to this section. Make sure you place this section
    after `My apps` but before the section containing Django’s default apps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为由其他开发者创建的应用程序启动一个新的部分，命名为 `Third party apps`，并将 `'django_bootstrap5'` 添加到该部分。确保将此部分放在
    `My apps` 之后，但在包含 Django 默认应用程序的部分之前。
- en: Using Bootstrap to Style Learning Log
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 为 Learning Log 添加样式
- en: Bootstrap is a large collection of styling tools. It also has a number of templates
    you can apply to your project to create an overall style. It’s much easier to
    use these templates than to use individual styling tools. To see the templates
    Bootstrap offers, go to [https://getbootstrap.com](https://getbootstrap.com) and
    click **Examples**. We’ll use the *Navbar static* template, which provides a simple
    top navigation bar and a container for the page’s content.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是一个庞大的样式工具集。它还提供了若干模板，可以应用到你的项目中，从而创建整体样式。使用这些模板比单独使用个别样式工具要简单得多。要查看
    Bootstrap 提供的模板，请访问 [https://getbootstrap.com](https://getbootstrap.com) 并点击 **Examples**。我们将使用*Navbar
    static*模板，它提供了一个简单的顶部导航栏和一个页面内容的容器。
- en: '[Figure 20-1](#figure20-1) shows what the home page will look like after we
    apply Bootstrap’s template to *base.xhtml* and modify *index.xhtml* slightly.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-1](#figure20-1)展示了应用Bootstrap模板并稍微修改*index.xhtml*后，主页的样子。'
- en: '![](image_fi/502703c20/f20001.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502703c20/f20001.png)'
- en: 'Figure 20-1: The Learning Log home page using Bootstrap'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20-1：使用Bootstrap的学习日志主页
- en: Modifying base.xhtml
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改base.xhtml
- en: We need to rewrite *base.xhtml* using the Bootstrap template. We’ll develop
    the new *base.xhtml* in sections. This is a large file; you may want to copy this
    file from the online resources, available at [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e).
    If you do copy the file, you should still read through the following section to
    understand the changes that were made.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Bootstrap模板重写*base.xhtml*。我们将分段开发新的*base.xhtml*。这是一个较大的文件，你可以从[https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e)的在线资源中复制该文件。如果你复制了该文件，仍然应该阅读以下部分，以了解所做的更改。
- en: Defining the HTML Headers
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义HTML头部
- en: 'The first change we’ll make to *base.xhtml* defines the HTML headers in the
    file. We’ll also add some requirements for using Bootstrap in our templates, and
    give the page a title. Delete everything in *base.xhtml* and replace it with the
    following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对*base.xhtml*所做的第一个修改是定义文件中的HTML头部。我们还将为在模板中使用Bootstrap添加一些要求，并为页面设置标题。删除*base.xhtml*中的所有内容，并用以下代码替换它：
- en: '**base.xhtml**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**base.xhtml**'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We first declare this file as an HTML document ❶ written in English ❷. An HTML
    file is divided into two main parts: the *head* and the *body*. The head of the
    file begins with an opening `<head>` tag ❸. The head of an HTML file doesn’t hold
    any of the page’s content; it just tells the browser what it needs to know to
    display the page correctly. We include a `<title>` element for the page, which
    will display in the browser’s title bar whenever Learning Log is open ❹.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将此文件声明为一个用英语编写的HTML文档 ❶。HTML文件分为两个主要部分：*头部*和*主体*。文件的头部以一个`<head>`标签开始 ❸。HTML文件的头部不包含页面内容；它只是告诉浏览器如何正确显示页面所需的信息。我们为页面包含一个`<title>`元素，该元素将在浏览器的标题栏中显示每当“学习日志”页面被打开时
    ❹。
- en: Before closing the head section, we load the collection of template tags available
    in django-bootstrap5 ❺. The template tag `{% bootstrap_css %}` is a custom tag
    from django-bootstrap5; it loads all of the CSS files required to implement Bootstrap
    styles. The tag that follows enables all the interactive behavior you might use
    on a page, such as collapsible navigation bars. The closing `</head>` tag appears
    on the last line.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭头部部分之前，我们加载django-bootstrap5中可用的模板标签集 ❺。模板标签`{% bootstrap_css %}`是django-bootstrap5的一个自定义标签，它加载实现Bootstrap样式所需的所有CSS文件。接下来的标签启用页面上可能使用的所有交互行为，例如可折叠的导航栏。最后一行是关闭的`</head>`标签。
- en: All Bootstrap styling options are now available in any template that inherits
    from *base.xhtml*. If you want to use custom template tags from django-bootstrap5,
    each template will need to include the `{% load django_bootstrap5 %}` tag.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Bootstrap样式选项现在可以在任何继承自*base.xhtml*的模板中使用。如果你想在模板中使用django-bootstrap5的自定义模板标签，则每个模板都需要包含`{%
    load django_bootstrap5 %}`标签。
- en: Defining the Navigation Bar
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义导航栏
- en: The code that defines the navigation bar at the top of the page is fairly long,
    because it has to work equally well on narrow phone screens and wide desktop monitors.
    We’ll work through the navigation bar in sections.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 定义页面顶部导航栏的代码相当长，因为它必须在狭窄的手机屏幕和宽大的桌面显示器上都能很好地工作。我们将分段处理导航栏。
- en: 'Here’s the first part of the navigation bar:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是导航栏的第一部分：
- en: '**base.xhtml**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**base.xhtml**'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first new element is the opening `<body>` tag. The *body* of an HTML file
    contains the content users will see on a page. Next we have a `<nav>` element,
    which opens the code for the navigation bar at the top of the page ❶. Everything
    contained in this element is styled according to the Bootstrap style rules defined
    by the selectors `navbar`, `navbar-expand-md`, and the rest that you see here.
    A *selector* determines which elements on a page a certain style rule applies
    to. The `navbar-light` and `bg-light` selectors style the navigation bar with
    a light-themed background. The `mb` in `mb-4` is short for *margin-bottom*; this
    selector ensures that a little space appears between the navigation bar and the
    rest of the page. The `border` selector provides a thin border around the light
    background to set it off a little from the rest of the page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新元素是开启的 `<body>` 标签。HTML 文件的 *body* 部分包含用户将在页面上看到的内容。接下来是一个 `<nav>` 元素，它开启了页面顶部导航栏的代码❶。这个元素中包含的所有内容都按照由选择器
    `navbar`、`navbar-expand-md` 以及你在这里看到的其他选择器定义的 Bootstrap 样式规则进行样式设置。*选择器* 决定了哪些页面元素应用某个样式规则。`navbar-light`
    和 `bg-light` 选择器为导航栏设置了浅色主题背景。`mb` 在 `mb-4` 中是 *margin-bottom*（下外边距）的缩写；该选择器确保在导航栏与页面其他部分之间出现一点空间。`border`
    选择器为浅色背景提供了一条细边框，使其与页面其他部分略有区分。
- en: The `<div>` tag on the next line opens a resizable container that will hold
    the overall navigation bar. The term *div* is short for *division*; you build
    a web page by dividing it into sections and defining style and behavior rules
    that apply to that section. Any styling or behavior rules that are defined in
    an opening `<div>` tag affect everything you see until its corresponding closing
    tag, written as `</div>`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行的 `<div>` 标签打开了一个可调整大小的容器，用于容纳整个导航栏。*div* 是 *division* 的缩写；你通过将网页分为几个部分来构建页面，并定义适用于该部分的样式和行为规则。任何在
    `<div>` 开启标签中定义的样式或行为规则会影响从开启标签到其对应闭合标签 `</div>` 之间的所有内容。
- en: Next we set the project’s name, `Learning Log`, to appear as the first element
    on the navigation bar ❷. This will also serve as a link to the home page, just
    as it’s been doing in the minimally styled version of the project we built in
    the previous two chapters. The `navbar-brand` selector styles this link so it
    stands out from the rest of the links and helps add some branding to the site.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将项目名称 `Learning Log` 设置为导航栏中的第一个元素❷。它还将作为首页的链接，就像在我们之前两章构建的简洁版项目中那样。`navbar-brand`
    选择器为此链接设置样式，使其从其他链接中脱颖而出，并帮助为网站增加品牌元素。
- en: The Bootstrap template then defines a button that appears if the browser window
    is too narrow to display the whole navigation bar horizontally ❸. When the user
    clicks the button, the navigation elements appear in a drop-down list. The `collapse`
    reference causes the navigation bar to collapse when the user shrinks the browser
    window or when the site is displayed on devices with small screens.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 模板定义了一个按钮，当浏览器窗口太窄，无法水平显示整个导航栏时，按钮会显示出来❸。当用户点击该按钮时，导航元素会以下拉列表的形式显示。`collapse`
    参考标记会在用户缩小浏览器窗口或网站在小屏设备上显示时，使导航栏折叠。
- en: Next, we open a new section (`<div>`) of the navigation bar ❹. This is the part
    of the navigation bar that can collapse depending on the size of the browser window.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开启导航栏的新部分（`<div>`）❹。这是导航栏的可折叠部分，取决于浏览器窗口的大小。
- en: Bootstrap defines navigation elements as items in an unordered list ❺, with
    style rules that make it look nothing like a list. Every link or element you need
    on the bar can be included as an item in an unordered list ❻. Here, the only item
    in the list is our link to the topics page ❼. Notice the closing `</li>` tag at
    the end of the link; every opening tag needs a corresponding closing tag.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 将导航元素定义为无序列表中的项目❺，并设置样式规则使其看起来不像列表。你需要在导航栏中包含的每个链接或元素都可以作为无序列表中的一项❻。这里，列表中唯一的项目是指向主题页面的链接❼。注意链接末尾的闭合
    `</li>` 标签；每个开启标签都需要对应的闭合标签。
- en: 'The rest of the lines shown here close out all of the tags that have been opened.
    In HTML, a comment is written like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的其余行关闭了所有已打开的标签。在 HTML 中，注释的写法如下：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Closing tags don’t usually have comments, but if you’re new to HTML, it can
    be really helpful to label some of your closing tags. A single missing tag or
    an extra tag can throw off the layout of an entire page. We include the `content`
    block ❽ and the closing `</body>` and `</html>` tags as well.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭标签通常没有注释，但如果你是HTML新手，给一些关闭标签加上注释是非常有帮助的。一个遗漏的标签或一个多余的标签可能会影响整个页面的布局。我们也包括了`content`块❽以及关闭的`</body>`和`</html>`标签。
- en: We’re not finished with the navigation bar, but we now have a complete HTML
    document. If `runserver` is currently active, stop the current server and restart
    it. Go to the project’s home page, and you should see a navigation bar that has
    some of the elements shown in [Figure 20-1](#figure20-1). Now let’s add the rest
    of the elements to the navigation bar.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成导航栏，但现在我们已经有了一个完整的HTML文档。如果`runserver`当前正在运行，停止当前的服务器并重新启动它。访问项目的主页，你应该能看到一个导航栏，里面包含了[图20-1](#figure20-1)中显示的一些元素。现在，让我们将其余的元素添加到导航栏中。
- en: Adding User Account Links
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加用户账户链接
- en: We still need to add the links associated with user accounts. We’ll start by
    adding all of the account-related links except the logout form.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要添加与用户账户相关的链接。我们将首先添加所有与账户相关的链接，除了注销表单。
- en: 'Make the following changes to *base.xhtml*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对*base.xhtml*进行以下更改：
- en: '**base.xhtml**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**base.xhtml**'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We begin a new set of links by using another opening `<ul>` tag ❶. You can
    have as many groups of links as you need on a page. The selector `ms-auto` is
    short for *margin-start-automatic*: this selector examines the other elements
    in the navigation bar and works out a left (start) margin that pushes this group
    of links to the right side of the browser window.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用另一个开口的`<ul>`标签❶开始一组新的链接。你可以根据需要在页面上拥有多个链接组。选择器`ms-auto`是*margin-start-automatic*的缩写：这个选择器会检查导航栏中的其他元素，并计算出一个左（开始）边距，将这一组链接推到浏览器窗口的右侧。
- en: 'The `if` block is the same conditional block we used earlier to display appropriate
    messages to users, depending on whether they’re logged in ❷. The block is a little
    longer now because there are some styling rules inside the conditional tags. The
    greeting for authenticated users is wrapped in a `<span>` element ❸. A *span element*
    styles pieces of text or elements of a page that are part of a longer line. While
    div elements create their own divisions in a page, span elements are continuous
    within a larger section. This can be confusing at first, because many pages have
    deeply nested div elements. Here, we’re using the span element to style informational
    text on the navigation bar: in this case, the logged-in user’s name.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`块与我们之前用来根据用户是否登录显示适当信息的条件块相同❷。这个块现在稍微长了一些，因为在条件标签内部有一些样式规则。对已认证用户的问候被包裹在一个`<span>`元素中❸。*span元素*用于样式化长行文本或页面元素的部分，而`div`元素则在页面中创建自己的分区。虽然许多页面有深层嵌套的`div`元素，但在这里我们使用`span`元素来样式化导航栏中的信息文本：在这种情况下，是已登录用户的姓名。'
- en: In the `else` block, which runs for unauthenticated users, we include the links
    for registering a new account and logging in ❹. These should look just like the
    link to the topics page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`else`块中，针对未认证用户，我们包含了注册新账户和登录的链接❹。这些链接应该与指向主题页面的链接样式相同。
- en: If you wanted to add more links to the navigation bar, you’d add another `<li>`
    item to one of the `<ul>` groups that we’ve defined, using styling directives
    like the ones you’ve seen here.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在导航栏中添加更多的链接，你可以在我们已经定义的`<ul>`组中添加另一个`<li>`项，使用像你在这里看到的样式指令。
- en: Now let’s add the logout form to the navigation bar.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将注销表单添加到导航栏中。
- en: Adding the Logout Form to the Navigation Bar
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将注销表单添加到导航栏
- en: 'When we first wrote the logout form, we added it to the bottom of *base.xhtml*.
    Now let’s put it in a better place, in the navigation bar:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次编写注销表单时，我们将其添加到了*base.xhtml*的底部。现在，让我们把它放到一个更合适的位置——导航栏中：
- en: '**base.xhtml**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**base.xhtml**'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The logout form should be placed after the set of account-related links, but
    inside the collapsible section of the navigation bar. The only change in the form
    is the addition of a number of Bootstrap styling classes in the `<button>` element,
    which apply Bootstrap styling elements to the logout button ❶.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注销表单应放在与账户相关链接的后面，但要放在导航栏的可折叠部分中。表单中唯一的变化是`<button>`元素中加入了一些Bootstrap样式类，这些类将Bootstrap的样式应用到注销按钮上❶。
- en: Reload the home page, and you should be able to log in and out using any of
    the accounts you’ve created.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载主页，你应该能够使用你创建的任何账户进行登录和登出。
- en: There’s still a bit more we need to add to *base.xhtml*. We need to define two
    blocks that the individual pages can use to place the content specific to those
    pages.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要在 *base.xhtml* 中添加一些内容。我们需要定义两个区块，供各个页面使用，以便放置与这些页面特定内容相关的内容。
- en: Defining the Main Part of the Page
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义页面的主体部分
- en: 'The rest of *base.xhtml* contains the main part of the page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*base.xhtml* 的其余部分包含了页面的主体部分：'
- en: '**base.xhtml**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**base.xhtml**'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We first open a `<main>` tag ❶. The *main* element is used for the most significant
    part of the body of a page. Here we assign the bootstrap selector `container`,
    which is a simple way to group elements on a page. We’ll place two div elements
    in this container.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先打开一个 `<main>` 标签 ❶。*main* 元素用于页面主体中最重要的部分。在这里，我们为它分配了 Bootstrap 选择器 `container`，这是一个简单的方式来将页面元素进行分组。我们将在这个容器中放置两个
    div 元素。
- en: The first div element contains a `page_header` block ❷. We’ll use this block
    to title most pages. To make this section stand out from the rest of the page,
    we place some padding below the header. *Padding* refers to space between an element’s
    content and its border. The selector `pb-2` is a bootstrap directive that provides
    a moderate amount of padding at the bottom of the styled element. A *margin* is
    the space between an element’s border and other elements on the page. The selector
    `mb-2` provides a moderate amount of margin at the bottom of this div. We want
    a border on the bottom of this block, so we use the selector `border-bottom`,
    which provides a thin border at the bottom of the `page_header` block.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 div 元素包含一个 `page_header` 区块 ❷。我们将使用这个区块为大多数页面命名。为了让这个部分从页面的其他部分中突出，我们在标题下方添加了一些填充。*填充*是指元素内容与其边框之间的空间。选择器
    `pb-2` 是一个 Bootstrap 指令，它在被样式化元素的底部提供适量的填充。*边距*是指元素的边框与页面上其他元素之间的空间。选择器 `mb-2`
    在这个 div 的底部提供适量的边距。我们希望在这个区块的底部加上边框，因此我们使用选择器 `border-bottom`，它在 `page_header`
    区块的底部提供一个细边框。
- en: We then define one more div element that contains the block `content` ❸. We
    don’t apply any specific style to this block, so we can style the content of any
    page as we see fit for that page. The end of the *base.xhtml* file has closing
    tags for the `main`, `body`, and `html` elements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再定义一个 div 元素，包含 `content` 区块 ❸。我们没有为这个区块应用任何特定的样式，因此可以根据页面的需求来样式化任何页面的内容。*base.xhtml*
    文件的结尾部分包含了 `main`、`body` 和 `html` 元素的闭合标签。
- en: When you load Learning Log’s home page in a browser, you should see a professional-looking
    navigation bar that matches the one shown in [Figure 20-1](#figure20-1). Try resizing
    the window so it’s really narrow; a button should replace the navigation bar.
    Click the button, and all the links should appear in a drop-down list.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中加载 Learning Log 的主页时，你应该看到一个专业外观的导航栏，和 [图 20-1](#figure20-1) 中显示的相匹配。尝试调整窗口的宽度，使其变得非常窄；此时，导航栏应该会被一个按钮替代。点击这个按钮，所有链接应该会以下拉列表的形式出现。
- en: Styling the Home Page Using a Jumbotron
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Jumbotron 样式化主页
- en: To update the home page, we’ll use a Bootstrap element called a *jumbotron*,
    a large box that stands out from the rest of the page. Typically, it’s used on
    home pages to hold a brief description of the overall project and a call to action
    that invites the viewer to get involved.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新主页，我们将使用一个叫做 *jumbotron* 的 Bootstrap 元素，一个从页面其他部分突出的较大框。通常它用于主页，放置项目的简短描述以及一个呼吁行动的按钮，邀请观众参与进来。
- en: 'Here’s the revised *index.xhtml* file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改后的 *index.xhtml* 文件：
- en: '**index.xhtml**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**index.xhtml**'
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We first tell Django that we’re about to define what goes in the `page_header`
    block ❶. A jumbotron is implemented as a pair of div elements with a set of styling
    directives applied to them ❷. The outer div has padding and margin settings, a
    light background color, and rounded corners. The inner div is a container that
    changes along with the window size and has some padding as well. The `py-4` selector
    adds padding to the top and bottom of the div element. Feel free to adjust the
    numbers in these settings and see how the home page changes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先告诉 Django，我们即将定义 `page_header` 区块的内容 ❶。Jumbotron 是通过一对 div 元素实现的，并对它们应用了一些样式指令
    ❷。外部 div 具有填充和边距设置、浅色背景以及圆角。内部 div 是一个容器，它会随着窗口大小的变化而改变，并且也有一些填充。`py-4` 选择器为 div
    元素的上下添加了填充。你可以随意调整这些设置中的数字，看看主页的变化。
- en: Inside the jumbotron are three elements. The first is a short message, `Track
    your learning`, that gives new visitors a sense of what Learning Log does ❸. The
    `<h1>` element is a first-level header, and the `display-3` selector adds a thinner
    and taller look to this particular header. We also include a longer message that
    provides more information about what the user can do with their learning log ❹.
    This is formatted as a `lead` paragraph, which is meant to stand out from regular
    paragraphs.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: jumbotron 内部有三个元素。第一个是一个简短的信息，`Track your learning`，它让新访客了解 Learning Log 的功能
    ❸。`<h1>` 元素是一个一级标题，`display-3` 选择器为这个标题添加了更瘦更高的外观。我们还包括了一条更长的信息，提供有关用户可以如何使用学习日志的更多信息
    ❹。这段文字格式化为 `lead` 段落，旨在与普通段落区分开来。
- en: Rather than just using a text link, we create a button that invites users to
    register an account on Learning Log ❺. This is the same link as in the header,
    but the button stands out on the page and shows the viewer what they need to do
    in order to start using the project. The selectors you see here style this as
    a large button that represents a call to action. The code `&raquo;` is an *HTML
    entity* that looks like two right angle brackets combined (>>). Finally, we provide
    closing div tags and close the `page_header` block. With only two div elements
    in this file, it’s not particularly helpful to label the closing div tags. We
    aren’t adding anything else to this page, so we don’t need to define the `content`
    block in this template.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有仅仅使用文本链接，而是创建了一个按钮，邀请用户在 Learning Log 上注册帐户 ❺。这是与标题中相同的链接，但按钮在页面上更为突出，向查看者展示了他们需要做什么才能开始使用这个项目。这里看到的选择器将其样式化为一个大型按钮，表示一个行动号召。代码
    `&raquo;` 是一个 *HTML 实体*，看起来像两个右尖括号（>>）结合在一起。最后，我们提供了关闭的 div 标签并结束了 `page_header`
    块。由于该文件中只有两个 div 元素，标记关闭的 div 标签并没有太大帮助。我们不会再往这个页面添加内容，因此不需要在这个模板中定义 `content`
    块。
- en: The home page now looks like [Figure 20-1](#figure20-1). This is a significant
    improvement over the unstyled version of the project!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 主页现在看起来像 [图 20-1](#figure20-1)。这比项目的未样式化版本有了显著的改进！
- en: Styling the Login Page
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样式化登录页面
- en: 'We’ve refined the overall appearance of the login page, but the login form
    itself doesn’t have any styling yet. Let’s make the form look consistent with
    the rest of the page by modifying *login.xhtml*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经优化了登录页面的整体外观，但登录表单本身还没有任何样式。让我们通过修改 *login.xhtml*，让表单的样式与页面的其余部分保持一致：
- en: '**login.xhtml**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**login.xhtml**'
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We first load the `bootstrap5` template tags into this template ❶. We then define
    the `page_header` block, which tells the user what the page is for ❷. Notice that
    we’ve removed the `{% if form.errors %}` block from the template; django-bootstrap5
    manages form errors automatically.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将 `bootstrap5` 模板标签加载到这个模板中 ❶。然后我们定义了 `page_header` 块，告诉用户这个页面的用途 ❷。注意，我们已经从模板中移除了
    `{% if form.errors %}` 块；django-bootstrap5 会自动处理表单错误。
- en: To display the form, we use the template tag `{% bootstrap_form %}` ❸; this
    replaces the `{{ form.as_div }}` element we were using in Chapter 19. The `{%
    booststrap_form %}` template tag inserts Bootstrap style rules into the form’s
    individual elements as the form is rendered. To generate the submit button, we
    use the `{% bootstrap_button %}` tag with arguments that designate it as a submit
    button, and give it the label `Log in` ❹.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示表单，我们使用了模板标签 `{% bootstrap_form %}` ❸；这替代了我们在第 19 章中使用的 `{{ form.as_div
    }}` 元素。`{% bootstrap_form %}` 模板标签会在渲染表单时，将 Bootstrap 样式规则插入到表单的各个元素中。为了生成提交按钮，我们使用了
    `{% bootstrap_button %}` 标签，并通过参数指定它为提交按钮，标签为 `Log in` ❹。
- en: '[Figure 20-2](#figure20-2) shows the login form now. The page is much cleaner,
    with consistent styling and a clear purpose. Try logging in with an incorrect
    username or password; you’ll see that even the error messages are styled consistently
    and integrate well with the overall site.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-2](#figure20-2) 显示了现在的登录表单。页面变得更加简洁，样式一致且目的明确。尝试使用错误的用户名或密码登录；你会看到，即使是错误信息的样式也与整个网站的样式一致，并且能够很好地融入其中。'
- en: '![](image_fi/502703c20/f20002.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502703c20/f20002.png)'
- en: 'Figure 20-2: The login page styled with Bootstrap'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20-2：用 Bootstrap 样式化的登录页面
- en: Styling the Topics Page
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样式化话题页面
- en: 'Let’s make sure the pages for viewing information are styled appropriately
    as well, starting with the topics page:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保查看信息的页面也得到了适当的样式化，从话题页面开始：
- en: '**topics.xhtml**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**topics.xhtml**'
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We don’t need the `{% load bootstrap5 %}` tag, because we’re not using any custom
    bootstrap5 template tags in this file. We move the heading `Topics` into the `page_header`
    block and make it an `<h1>` element instead of a simple paragraph ❶.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要 `{% load bootstrap5 %}` 标签，因为在这个文件中我们没有使用任何自定义的 bootstrap5 模板标签。我们将标题
    `Topics` 移动到 `page_header` 块，并将其改为 `<h1>` 元素，而不是简单的段落 ❶。
- en: The main content on this page is a list of topics, so we use Bootstrap’s *list
    group* component to render the page. This applies a simple set of styling directives
    to the overall list and to each item in the list. When we open the `<ul>` tag,
    we first include the `list-group` class to apply the default style directives
    to the list ❷. We further customize the list by putting a border at the bottom
    of the list, a little padding below the list (`pb-2`), and a margin below the
    bottom border (`mb-4`).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面的主要内容是一个话题列表，因此我们使用 Bootstrap 的*列表组*组件来渲染页面。此组件为整体列表以及每个列表项应用了一组简单的样式指令。当我们打开
    `<ul>` 标签时，我们首先包含 `list-group` 类，以便将默认的样式指令应用到列表上 ❷。我们通过在列表的底部添加一个边框、在列表下方添加一点内边距（`pb-2`），并在底部边框下方添加一个边距（`mb-4`）来进一步定制列表。
- en: Each item in the list needs the `list-group-item` class, and we customize the
    default style by removing the border around individual items ❸. The message that’s
    displayed when the list is empty needs these same classes ❹.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的每个项都需要 `list-group-item` 类，我们通过去掉单独项的边框来定制默认样式 ❸。当列表为空时显示的消息也需要这些相同的类 ❹。
- en: When you visit the topics page now, you should see a page with styling that
    matches the home page.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在访问话题页面时，应该能看到一个与主页样式匹配的页面。
- en: Styling the Entries on the Topic Page
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为话题页面上的条目添加样式
- en: 'On the topic page, we’ll use Bootstrap’s card component to make each entry
    stand out. A *card* is a nestable set of divs with flexible, predefined styles
    that are perfect for displaying a topic’s entries:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在话题页面，我们将使用 Bootstrap 的卡片组件，使每个条目更加突出。一个*卡片*是一个可以嵌套的 div 集合，具有灵活的预定义样式，完美适用于展示话题的条目：
- en: '**topic.xhtml**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**topic.xhtml**'
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We first place the topic in the `page_header` block ❶. Then we delete the unordered
    list structure previously used in this template. Instead of making each entry
    a list item, we open a div element with the selector `card` ❷. This card has two
    nested elements: one to hold the timestamp and the link to edit the entry, and
    another to hold the body of the entry. The `card` selector takes care of most
    of the styling we need for this div; we customize the card by adding a small margin
    to the bottom of each card (`mb-3`).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将话题放置在 `page_header` 块中 ❶。然后我们删除了之前在此模板中使用的无序列表结构。我们不再将每个条目作为列表项，而是打开一个带有
    `card` 选择器的 div 元素 ❷。这个卡片有两个嵌套元素：一个用来显示时间戳和编辑条目的链接，另一个用来显示条目的正文。`card` 选择器负责为这个
    div 提供大部分样式；我们通过为每个卡片的底部添加一个小的边距（`mb-3`）来定制卡片。
- en: The first element in the card is a header, which is an `<h4>` element with the
    selector `card-header` ❸. This header contains the date the entry was made and
    a link to edit the entry. The `<small>` tag around the `edit_entry` link makes
    it appear a little smaller than the timestamp ❹. The second element is a div with
    the selector `card-body` ❺, which places the text of the entry in a simple box
    on the card. Notice that the Django code for including the information on the
    page hasn’t changed; only elements that affect the appearance of the page have.
    Since we no longer have an unordered list, we’ve replaced the list item tags around
    the empty list message with simple paragraph tags ❻.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片中的第一个元素是一个头部，它是一个带有 `card-header` 选择器的 `<h4>` 元素 ❸。这个头部包含了条目创建的日期和一个编辑条目的链接。围绕
    `edit_entry` 链接的 `<small>` 标签使其看起来比时间戳略小 ❹。第二个元素是一个带有 `card-body` 选择器的 div ❺，它将条目的文本放入卡片的一个简单框中。请注意，包含页面信息的
    Django 代码没有变化；只是影响页面外观的元素发生了变化。由于我们不再使用无序列表，因此我们用简单的段落标签替换了空列表消息周围的列表项标签 ❻。
- en: '[Figure 20-3](#figure20-3) shows the topic page with its new look. Learning
    Log’s functionality hasn’t changed, but it looks significantly more professional
    and inviting to users.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-3](#figure20-3) 显示了带有新外观的话题页面。学习日志的功能没有变化，但看起来明显更专业，且更能吸引用户。'
- en: If you want to use a different Bootstrap template for a project, follow a process
    that’s similar to what we’ve done so far in this chapter. Copy the template you
    want to use into *base.xhtml*, and modify the elements that contain actual content
    so the template displays your project’s information. Then use Bootstrap’s individual
    styling tools to style the content on each page.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为项目使用不同的 Bootstrap 模板，可以按照本章中到目前为止的过程进行操作。将你想使用的模板复制到*base.xhtml*中，并修改包含实际内容的元素，使模板显示你项目的信息。然后使用
    Bootstrap 的单独样式工具来为每个页面的内容进行样式设置。
- en: '![](image_fi/502703c20/f20003.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502703c20/f20003.png)'
- en: 'Figure 20-3: The topic page with Bootstrap styling'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20-3：具有 Bootstrap 样式的主题页面
- en: Deploying Learning Log
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署 Learning Log
- en: Now that we have a professional-looking project, let’s deploy it to a live server
    so anyone with an internet connection can use it. We’ll use Platform.sh, a web-based
    platform that allows you to manage the deployment of web applications. We’ll get
    Learning Log up and running on Platform.sh.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个专业外观的项目，让我们将其部署到实时服务器，这样任何有互联网连接的人都可以使用它。我们将使用 Platform.sh，这是一个基于网络的平台，可以让你管理
    Web 应用程序的部署。我们将把 Learning Log 部署到 Platform.sh 上并运行。
- en: Making a Platform.sh Account
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Platform.sh 账户
- en: To make an account, go to [https://platform.sh](https://platform.sh) and click
    the **Free Trial** button. Platform.sh has a free tier that, as of this writing,
    does not require a credit card. The trial period allows you to deploy an app with
    minimal resources, which lets you test your project in a live deployment before
    committing to a paid hosting plan.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个账户，请访问 [https://platform.sh](https://platform.sh) 并点击 **免费试用** 按钮。Platform.sh
    提供免费套餐，截至本文写作时，无需信用卡即可注册。试用期允许你以最小的资源部署应用程序，这使得你可以在正式使用付费托管计划前，先在实际部署环境中测试你的项目。
- en: Installing the Platform.sh CLI
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Platform.sh CLI
- en: To deploy and manage a project on Platform.sh, you’ll need the tools available
    in the Command Line Interface (CLI). To install the latest version of the CLI,
    visit [https://docs.platform.sh/development/cli.xhtml](https://docs.platform.sh/development/cli.xhtml)
    and follow the instructions for your operating system.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Platform.sh 上部署和管理项目，你需要使用命令行界面（CLI）中的工具。要安装最新版本的 CLI，请访问 [https://docs.platform.sh/development/cli.xhtml](https://docs.platform.sh/development/cli.xhtml)，并根据你的操作系统遵循相应的安装指南。
- en: 'On most systems, you can install the CLI by running the following command in
    a terminal:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数系统上，你可以通过在终端中运行以下命令来安装 CLI：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After this command has finished running, you will need to open a new terminal
    window before you can use the CLI.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令运行完成后，你需要打开一个新的终端窗口，才能使用 CLI。
- en: Installing platformshconfig
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 platformshconfig
- en: 'You’ll also need to install one additional package, `platformshconfig`. This
    package helps detect whether the project is running on your local system or on
    a Platform.sh server. In an active virtual environment, issue the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装一个额外的软件包，`platformshconfig`。这个软件包帮助检测项目是运行在本地系统还是 Platform.sh 服务器上。在一个激活的虚拟环境中，执行以下命令：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We’ll use this package to modify the project’s settings when it’s running on
    the live server.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个软件包来修改项目在实时服务器上运行时的设置。
- en: Creating a requirements.txt File
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 requirements.txt 文件
- en: 'The remote server needs to know which packages Learning Log depends on, so
    we’ll use pip to generate a file listing them. Again, from an active virtual environment,
    issue the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 远程服务器需要知道 Learning Log 依赖哪些软件包，因此我们将使用 pip 来生成一个列出这些软件包的文件。同样，在一个已激活的虚拟环境中，执行以下命令：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `freeze` command tells pip to write the names of all the packages currently
    installed in the project into the file *requirements.txt*. Open this file to see
    the packages and version numbers installed in your project:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`freeze` 命令告诉 pip 将当前项目中所有已安装软件包的名称写入 *requirements.txt* 文件。打开此文件以查看项目中已安装的软件包及其版本号：'
- en: '**requirements.txt**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**requirements.txt**'
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Learning Log already depends on specific versions of seven different packages,
    so it requires a matching environment to run properly on a remote server. (We
    installed three of these packages manually, and four of them were installed automatically
    as dependencies of these packages.)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Learning Log 已经依赖于七个不同软件包的特定版本，因此它需要一个匹配的环境才能在远程服务器上正常运行。（我们手动安装了其中三个软件包，剩下的四个软件包作为这些包的依赖项自动安装。）
- en: When we deploy Learning Log, Platform.sh will install all the packages listed
    in *requirements.txt*, creating an environment with the same packages we’re using
    locally. Because of this, we can be confident the deployed project will function
    just like it has on our local system. This approach to managing a project is critical
    as you start to build and maintain multiple projects on your system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们部署Learning Log时，Platform.sh将安装*requirements.txt*中列出的所有软件包，从而创建一个与我们本地使用的相同软件包环境。因此，我们可以确信，部署后的项目将像在本地系统中一样正常运行。采用这种管理项目的方式，在你开始构建和维护多个项目时至关重要。
- en: Additional Deployment Requirements
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加部署要求
- en: The live server requires two additional packages. These packages are used to
    serve the project in a production environment, where many users can be making
    requests at the same time.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 生产服务器需要两个额外的软件包。这些软件包用于在生产环境中服务项目，在这种环境中，许多用户可能同时发出请求。
- en: 'In the same directory where *requirements.txt* is saved, make a new file called
    *requirements_remote.txt*. Add the following two packages to it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存*requirements.txt*的相同目录下，创建一个新文件，命名为*requirements_remote.txt*。将以下两个软件包添加到该文件中：
- en: '**requirements_remote.txt**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**requirements_remote.txt**'
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `gunicorn` package responds to requests as they come in to the remote server;
    this takes the place of the development server we’ve been using locally. The `psycopg2`
    package is required to let Django manage the Postgres database that Platform.sh
    uses. *Postgres* is an open source database that’s extremely well suited to production
    apps.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`gunicorn`软件包会响应传入的请求，这取代了我们在本地使用的开发服务器。`psycopg2`软件包是必需的，它允许Django管理Platform.sh使用的Postgres数据库。*Postgres*是一种开源数据库，非常适合生产环境中的应用。'
- en: Adding Configuration Files
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加配置文件
- en: 'Every hosting platform requires some configuration for a project to run correctly
    on its servers. In this section, we’ll add three configuration files:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 每个托管平台都需要一些配置才能使项目在其服务器上正确运行。在这一节中，我们将添加三个配置文件：
- en: '*.platform.app.yaml* This is the main configuration file for the project. This
    tells Platform.sh what kind of project we’re trying to deploy and what kinds of
    resources our project needs, and it includes commands for building the project
    on the server.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*.platform.app.yaml* 这是项目的主要配置文件。它告诉Platform.sh我们正在尝试部署什么类型的项目以及我们项目需要什么类型的资源，同时包含了在服务器上构建项目的命令。'
- en: '*.platform/routes.yaml* This file defines the routes to our project. When a
    request is received by Platform.sh, this is the configuration that helps direct
    these requests to our specific project.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*.platform/routes.yaml* 该文件定义了我们项目的路由。当Platform.sh接收到请求时，正是这个配置帮助将这些请求导向我们的特定项目。'
- en: '*.platform/services.yaml* This file defines any additional services our project
    needs.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*.platform/services.yaml* 该文件定义了我们项目所需的任何额外服务。'
- en: These are all YAML (YAML Ain’t Markup Language) files. *YAML* is a language
    designed for writing configuration files; it’s made to be read easily by both
    humans and computers. You can write or modify a typical YAML file by hand, but
    a computer can also read and interpret the file unambiguously.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是YAML（YAML Ain’t Markup Language）文件。*YAML*是一种为编写配置文件而设计的语言，旨在让人类和计算机都能轻松读取。你可以手动编写或修改典型的YAML文件，计算机也能无歧义地读取和解释该文件。
- en: YAML files are great for deployment configuration, because they give you a good
    deal of control over what happens during the deployment process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: YAML文件非常适合部署配置，因为它们让你能够很好地控制部署过程中的行为。
- en: Making Hidden Files Visible
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示隐藏文件
- en: 'Most operating systems hide files and folders that begin with a dot, such as
    *.platform*. When you open a file browser, you won’t see these kinds of files
    and folders by default. But as a programmer, you’ll need to see them. Here’s how
    to view hidden files, depending on your operating system:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数操作系统都会隐藏以点（.）开头的文件和文件夹，例如*.platform*。当你打开文件浏览器时，默认情况下是看不到这些文件和文件夹的。但是，作为程序员，你需要查看它们。根据操作系统的不同，下面是查看隐藏文件的方法：
- en: On Windows, open Windows Explorer, and then open a folder such as *Desktop*.
    Click the **View** tab, and make sure **File name extensions** and **Hidden items**
    are checked.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，打开Windows资源管理器，然后打开一个文件夹，例如*桌面*。点击**查看**标签页，确保**文件扩展名**和**隐藏的项目**已勾选。
- en: On macOS, you can press ⌘-SHIFT-. (dot) in any Finder window to see hidden files
    and folders.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，你可以在任何Finder窗口按下⌘-SHIFT-.（点号）来查看隐藏的文件和文件夹。
- en: On Linux systems such as Ubuntu, you can press CTRL-H in any file browser to
    display hidden files and folders. To make this setting permanent, open a file
    browser such as Nautilus and click the options tab (indicated by three lines).
    Select the **Show Hidden Files** checkbox.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 系统（如 Ubuntu）上，您可以在任何文件浏览器中按 CTRL-H 来显示隐藏的文件和文件夹。要使此设置永久生效，请打开文件浏览器（如
    Nautilus），点击选项卡（三条线所示），然后勾选 **显示隐藏的文件** 复选框。
- en: The .platform.app.yaml Configuration File
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: .platform.app.yaml 配置文件
- en: The first configuration file is the longest, because it controls the overall
    deployment process. We’ll show it in parts; you can either enter it by hand in
    your text editor or download a copy from the online resources at [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个配置文件最长，因为它控制整个部署过程。我们将分部分展示，您可以通过手动输入到文本编辑器中，或者从在线资源 [https://ehmatthes.github.io/pcc_3e](https://ehmatthes.github.io/pcc_3e)
    下载副本。
- en: 'Here’s the first part of *.platform.app.yaml*, which should be saved in the
    same directory as *manage.py*:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *.platform.app.yaml* 的第一部分，应保存在与 *manage.py* 同一目录中：
- en: '**.platform.app.yaml**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**.platform.app.yaml**'
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When you save this file, make sure you include the dot at the beginning of the
    filename. If you omit the dot, Platform.sh won’t find the file and your project
    will not be deployed.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件时，请确保文件名开头包含点（`.`）。如果省略点，Platform.sh 将无法找到该文件，您的项目将无法部署。
- en: You don’t need to understand everything in *.platform.app.yaml* at this point;
    I’ll highlight the most important parts of the configuration. The file starts
    off by specifying the `name` of the project, which we’re calling `'ll_project'`
    to be consistent with the name we used when starting the project ❶. We also need
    to specify the version of Python we’re using (3.10 at the time of this writing).
    You can find a list of supported versions at [https://docs.platform.sh/languages/python.xhtml](https://docs.platform.sh/languages/python.xhtml).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您目前不需要理解 *.platform.app.yaml* 中的所有内容；我将重点讲解配置中最重要的部分。该文件首先指定了项目的 `name`，我们将其命名为
    `'ll_project'`，以保持与启动项目时使用的名称一致 ❶。我们还需要指定所使用的 Python 版本（本文编写时为 3.10）。您可以在 [https://docs.platform.sh/languages/python.xhtml](https://docs.platform.sh/languages/python.xhtml)
    查看支持的版本列表。
- en: Next is a section labeled `relationships` that defines other services the project
    needs ❷. Here the only relationship is to a Postgres database. After that is the
    `web` section ❸. The `commands:start` section tells Platform.sh what process to
    use to serve incoming requests. Here we’re specifying that `gunicorn` will handle
    requests ❹. This command takes the place of the `python manage.py runserver` command
    we’ve been using locally.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个标记为 `relationships` 的部分，定义了项目所需的其他服务 ❷。这里唯一的关系是与 Postgres 数据库的连接。接下来是
    `web` 部分 ❸。`commands:start` 部分告诉 Platform.sh 使用哪种进程来处理传入请求。我们在这里指定使用 `gunicorn`
    来处理请求 ❹。该命令替代了我们在本地使用的 `python manage.py runserver` 命令。
- en: The `locations` section tells Platform.sh where to send incoming requests ❺.
    Most requests should be passed through to `gunicorn`; our *urls.py* files will
    tell `gunicorn` exactly how to handle those requests. Requests for static files
    will be handled separately and will be refreshed once an hour. The last line shows
    that we’re requesting 512MB of disk space on one of Platform.sh’s servers ❻.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`locations` 部分告诉 Platform.sh 将传入请求发送到哪里 ❺。大部分请求应传递给 `gunicorn`；我们的 *urls.py*
    文件将告诉 `gunicorn` 如何处理这些请求。静态文件的请求将单独处理，并每小时刷新一次。最后一行显示我们请求在 Platform.sh 的服务器上分配
    512MB 的磁盘空间 ❻。'
- en: 'The rest of [.platform.app.yaml](http://.platform.app.yaml) is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[.platform.app.yaml](http://.platform.app.yaml)的其余部分如下所示：'
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `mounts` section ❶ lets us define directories where we can read and write
    data while the project is running. This section defines a *logs/* directory for
    the deployed project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`mounts` 部分 ❶ 让我们定义可以在项目运行时读写数据的目录。此部分为已部署的项目定义了一个 *logs/* 目录。'
- en: The `hooks` section ❷ defines actions that are taken at various points during
    the deployment process. In the `build` section, we install all the packages that
    are required to serve the project in the live environment ❸. We also run `collectstatic`
    ❹, which collects all the static files needed for the project into one place so
    they can be served efficiently.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`hooks`部分 ❷ 定义了在部署过程中不同阶段执行的操作。在 `build` 部分，我们安装了所有在实际环境中提供项目所需的包 ❸。我们还运行 `collectstatic`
    ❹，它将项目所需的所有静态文件收集到一个地方，以便高效地提供服务。'
- en: Finally, in the `deploy` section ❺, we specify that migrations should be run
    each time the project is deployed. In a simple project, this will have no effect
    when there have been no changes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `deploy` 部分 ❺，我们指定每次部署项目时都应运行迁移操作。在一个简单的项目中，如果没有变化，这个操作不会产生任何效果。
- en: The other two configuration files are much shorter; let’s write them now.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个配置文件要短得多；让我们现在写它们。
- en: The routes.yaml Configuration File
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: routes.yaml 配置文件
- en: A *route* is the path a request takes as it’s processed by the server. When
    a request is received by Platform.sh, it needs to know where to send the request.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*route* 是请求在服务器处理时所经过的路径。当 Platform.sh 接收到请求时，它需要知道将请求发送到哪里。'
- en: 'Make a new folder called *.platform*, in the same directory as *manage.py*.
    Make sure you include the dot at the beginning of the name. Inside that folder,
    make a file called *routes.yaml* and enter the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 *.platform* 的新文件夹，放在与 *manage.py* 相同的目录下。确保文件夹名称前有一个点。在该文件夹内，创建一个名为 *routes.yaml*
    的文件，并输入以下内容：
- en: '**.platform/routes.yaml**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**.platform/routes.yaml**'
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This file makes sure requests like *https://project_url.com* and *www.project_url.com*
    all get routed to the same place.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件确保像 *https://project_url.com* 和 *www.project_url.com* 这样的请求都会被路由到相同的位置。
- en: The services.yaml Configuration File
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: services.yaml 配置文件
- en: 'This last configuration file specifies services that our project needs in order
    to run. Save this file in the *.platform/* directory, alongside *routes.yaml*:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的这个配置文件指定了我们项目运行所需的服务。将此文件保存在 *.platform/* 目录中，和 *routes.yaml* 一起：
- en: '**.platform/routes.yaml**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**.platform/routes.yaml**'
- en: '[PRE20]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This file defines one service, a Postgres database.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件定义了一个服务，一个 Postgres 数据库。
- en: Modifying settings.py for Platform.sh
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 Platform.sh 修改 settings.py
- en: 'Now we need to add a section at the end of *settings.py* to modify some settings
    for the Platform.sh environment. Add this code to the very end of *settings.py*:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在 *settings.py* 的末尾添加一个部分，修改一些 Platform.sh 环境的设置。将以下代码添加到 *settings.py*
    的最后：
- en: '**settings.py**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE21]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We normally place `import` statements at the beginning of a module, but in this
    case, it’s helpful to keep all the remote-specific settings in one section. Here
    we import `Config` from `platformshconfig` ❶, which helps determine settings on
    the remote server. We only modify settings if the method `config.is_valid_platform()`
    returns `True` ❷, indicating the settings are being used on a Platform.sh server.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将 `import` 语句放在模块的开头，但在这种情况下，将所有远程特定的设置保存在一个部分中更为方便。在这里，我们从 `platformshconfig`
    导入 `Config` ❶，它有助于确定远程服务器上的设置。我们只有在方法 `config.is_valid_platform()` 返回 `True` ❷
    时才修改设置，这表明这些设置正在使用 Platform.sh 服务器。
- en: We modify `ALLOWED_HOSTS` to allow the project to be served by hosts ending
    in *.platformsh.site* ❸. All projects deployed to the free tier will be served
    using this host. If settings are being loaded in the deployed app’s directory
    ❹, we set `STATIC_ROOT` so that static files are served correctly. We also set
    a more secure `SECRET_KEY` on the remote server ❺.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改 `ALLOWED_HOSTS` 以允许项目通过以 *.platformsh.site* 结尾的主机提供服务 ❸。所有部署到免费层的项目将使用此主机。如果设置正在加载到已部署应用的目录中
    ❹，我们设置 `STATIC_ROOT` 以确保静态文件正确提供。我们还在远程服务器上设置了一个更安全的 `SECRET_KEY` ❺。
- en: Finally, we configure the production database ❻. This is only set if the build
    process has finished running and the project is being served. Everything you see
    here is necessary to let Django talk to the Postgres server that Platform.sh set
    up for the project.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们配置生产数据库 ❻。只有在构建过程完成并且项目开始提供服务时，这才会被设置。这里的所有内容都是必要的，以便让 Django 与 Platform.sh
    为项目设置的 Postgres 服务器进行通信。
- en: Using Git to Track the Project’s Files
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Git 跟踪项目的文件
- en: As discussed in Chapter 17, Git is a version control program that allows you
    to take a snapshot of the code in your project each time you implement a new feature
    successfully. If anything goes wrong, you can easily return to the last working
    snapshot of your project; for example, if you accidentally introduce a bug while
    working on a new feature. Each snapshot is called a *commit*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如第 17 章所讨论的，Git 是一个版本控制程序，它允许你在每次成功实现一个新功能时拍摄项目代码的快照。如果出现问题，你可以轻松回到上一个工作正常的快照；例如，如果你在开发新功能时不小心引入了一个
    bug。每个快照被称为一个 *commit*。
- en: Using Git, you can try implementing new features without worrying about breaking
    your project. When you’re deploying to a live server, you need to make sure you’re
    deploying a working version of your project. To read more about Git and version
    control, see Appendix D.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Git，你可以尝试实现新功能，而不用担心破坏项目。当你将项目部署到生产服务器时，需要确保部署的是一个可用的项目版本。想了解更多关于Git和版本控制的信息，请参阅附录D。
- en: Installing Git
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Git
- en: 'Git may already be installed on your system. To find out, open a new terminal
    window and issue the command `git --version`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Git可能已经安装在你的系统中。要检查这一点，打开一个新的终端窗口并执行`git --version`命令：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you get a message indicating that Git is not installed, see the installation
    instructions in Appendix D.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到提示信息表明Git没有安装，请参见附录D中的安装说明。
- en: Configuring Git
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置Git
- en: 'Git keeps track of who makes changes to a project, even when only one person
    is working on the project. To do this, Git needs to know your username and email.
    You must provide a username, but you can make up an email for your practice projects:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Git会跟踪谁对项目进行了更改，即使只有一个人正在进行项目开发。为了做到这一点，Git需要知道你的用户名和电子邮件。你必须提供用户名，但可以为你的练习项目随意设置一个电子邮件：
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you forget this step, Git will prompt you for this information when you make
    your first commit.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了这一步，Git会在你第一次提交时提示你输入这些信息。
- en: Ignoring Files
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 忽略文件
- en: 'We don’t need Git to track every file in the project, so we’ll tell it to ignore
    some files. Create a file called *.gitignore* in the folder that contains *manage.py*.
    Notice that this filename begins with a dot and has no file extension. Here’s
    the code that goes in *.gitignore*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要Git跟踪项目中的每个文件，因此我们会告诉它忽略一些文件。在包含*manage.py*的文件夹中创建一个名为*.gitignore*的文件。注意，这个文件名以点（.）开头，并且没有文件扩展名。下面是放入*.gitignore*中的代码：
- en: '**.gitignore**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**.gitignore**'
- en: '[PRE24]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We tell Git to ignore the entire *ll_env* directory, because we can re-create
    it automatically at any time. We also don’t track the *__pycache__* directory,
    which contains the *.pyc* files that are created automatically when the *.py*
    files are executed. We don’t track changes to the local database, because it’s
    a bad habit: if you’re ever using SQLite on a server, you might accidentally overwrite
    the live database with your local test database when you push the project to the
    server. The asterisk in `*.sqlite3` tells Git to ignore any file that ends with
    the extension *.sqlite3*.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉Git忽略整个*ll_env*目录，因为我们可以随时自动重新创建它。我们还不跟踪包含*.pyc*文件的*__pycache__*目录，*.pyc*文件是执行*.py*文件时自动生成的。我们不跟踪本地数据库的更改，因为这是一种不好的习惯：如果你在服务器上使用SQLite，可能会不小心将生产环境数据库覆盖为本地测试数据库，尤其是在将项目推送到服务器时。`*.sqlite3`中的星号告诉Git忽略所有以*.sqlite3*结尾的文件。
- en: Committing the Project
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提交项目
- en: 'We need to initialize a Git repository for Learning Log, add all the necessary
    files to the repository, and commit the initial state of the project. Here’s how
    to do that:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为Learning Log初始化一个Git仓库，将所有必要的文件添加到仓库中，并提交项目的初始状态。以下是操作步骤：
- en: '[PRE25]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We issue the `git init` command to initialize an empty repository in the directory
    containing Learning Log ❶. We then use the `git add .` command, which adds all
    the files that aren’t being ignored to the repository ❷. (Don’t forget the dot.)
    Next, we issue the command `git commit -am` `"``commit message``"`: the `-a` flag
    tells Git to include all changed files in this commit, and the `-m` flag tells
    Git to record a log message ❸.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行`git init`命令在包含Learning Log的目录中初始化一个空的Git仓库❶。接着，我们使用`git add .`命令，将所有未被忽略的文件添加到仓库中❷。（别忘了点。）接下来，我们执行`git
    commit -am` `"``commit message``"`命令：`-a`标志告诉Git将所有已更改的文件包含在此次提交中，`-m`标志则告诉Git记录一条日志信息❸。
- en: Issuing the `git status` command ❹ indicates that we’re on the *main* branch
    and that our working tree is *clean*. This is the status you’ll want to see anytime
    you push your project to a remote server.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`git status`命令❹表明我们当前位于*main*分支，并且工作树是*干净*的。这是每次将项目推送到远程服务器时希望看到的状态。
- en: Creating a Project on Platform.sh
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Platform.sh上创建项目
- en: At this point, the Learning Log project still runs on our local system and is
    also configured to run correctly on a remote server. We’ll use the Platform.sh
    CLI to create a new project on the server and then push our project to the remote
    server.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Learning Log项目仍然运行在我们的本地系统上，并且已经配置为在远程服务器上正确运行。我们将使用Platform.sh CLI在服务器上创建一个新项目，然后将我们的项目推送到远程服务器。
- en: 'Make sure you’re in a terminal, at the *learning_log/* directory, and issue
    the following command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你处于终端的*learning_log/*目录下，并执行以下命令：
- en: '[PRE26]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This command will open a browser tab where you can log in. Once you’re logged
    in, you can close the browser tab and return to the terminal. If you’re prompted
    about creating an SSH configuration file ❶, enter `Y` so you can connect to the
    remote server later.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会打开一个浏览器标签，供你登录。一旦登录，你可以关闭浏览器标签并返回终端。如果系统提示你创建一个SSH配置文件❶，请输入`Y`，这样你以后就可以连接到远程服务器了。
- en: 'Now we’ll create a project. There’s a lot of output, so we’ll look at the creation
    process in sections. Start by issuing the `create` command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个项目。由于输出信息较多，我们将分部分查看创建过程。首先输入`create`命令：
- en: '[PRE27]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The first prompt asks for a name for the project ❶, so we use the name `ll_project`.
    The next prompt asks which region we’d like the server to be in ❷. Choose the
    server closest to you; for me, that’s `us-3.platform.sh`. For the rest of the
    prompts, you can accept the defaults: a server on the lowest development plan
    ❸, three environments for the project ❹, and 5GB of storage for the overall project
    ❺.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个提示要求为项目命名❶，所以我们使用了名称`ll_project`。下一个提示询问我们希望服务器在哪个区域❷。选择离你最近的服务器；对我来说是`us-3.platform.sh`。对于其余的提示，你可以接受默认设置：最低开发计划的服务器❸，为项目设置三个环境❹，以及为整个项目提供5GB的存储空间❺。
- en: 'There are three more prompts to respond to:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 还有三个提示需要回应：
- en: '[PRE28]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A Git repository can have multiple branches; Platform.sh is asking us if the
    default branch for the project should be `main` ❶. It then asks if we want to
    connect the local project’s repository to the remote repository ❷. Finally, we’re
    informed that this project will cost about $10 per month if we keep it running
    beyond the free trial period ❸. If you haven’t entered a credit card yet, you
    shouldn’t have to worry about this cost. Platform.sh will simply suspend your
    project if you exceed the free trial’s limits without adding a credit card.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Git仓库可以有多个分支；Platform.sh在询问我们是否将`main`设置为项目的默认分支❶。接着它会询问是否将本地项目的仓库连接到远程仓库❷。最后，我们被告知，如果我们在免费试用期结束后继续运行该项目，每月大约需要支付10美元❸。如果你还没有输入信用卡信息，应该不必担心这笔费用。Platform.sh会在你超过免费试用的限制而没有添加信用卡时暂停你的项目。
- en: Pushing to Platform.sh
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送到Platform.sh
- en: 'The last step before seeing the live version of the project is to push our
    code to the remote server. To do that, issue the following command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看项目的在线版本之前，最后一步是将我们的代码推送到远程服务器。为此，输入以下命令：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When you issue the command `platform push`, you’ll be asked for one more confirmation
    that you want to push the project ❶. You may also see a message about the authenticity
    of Platform.sh, if this is your first time connecting to the site ❷. Enter `Y`
    for each of these prompts, and you’ll see a bunch of output scroll by. This output
    will probably look confusing at first, but if anything goes wrong, it’s really
    useful to have during troubleshooting. If you skim through the output, you can
    see where Platform.sh installs necessary packages, collects static files, applies
    migrations, and sets up URLs for the project.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入`platform push`命令时，会要求你再次确认是否推送项目❶。如果这是你第一次连接到该网站，你可能还会看到关于Platform.sh真实性的提示❷。对于这些提示，你可以输入`Y`，然后会看到一大段输出。刚开始可能会觉得这些输出很混乱，但如果出现任何问题，这些输出在排查问题时非常有用。如果你粗略浏览这些输出，你可以看到Platform.sh安装了必要的软件包、收集静态文件、应用迁移以及为项目设置了URL。
- en: Viewing the Live Project
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看在线项目
- en: 'Once the push is complete, you can open the project:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 推送完成后，你可以打开项目：
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `platform url` command lists the URLs associated with a deployed project;
    you’ll be given a choice of several URLs that are all valid for your project.
    Choose one, and your project should open in a new browser tab! This will look
    just like the project we’ve been running locally, but you can share this URL with
    anyone in the world, and they can access and use your project.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`platform url`命令列出了与已部署项目相关的URL；你将看到几个有效的URL供选择。选择其中一个，你的项目应该会在新浏览器标签中打开！这将看起来和我们之前本地运行的项目一样，但你可以将这个URL分享给世界上的任何人，他们也可以访问并使用你的项目。'
- en: Refining the Platform.sh Deployment
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完善Platform.sh部署
- en: Now we’ll refine the deployment by creating a superuser, just as we did locally.
    We’ll also make the project more secure by changing the setting `DEBUG` to `False`,
    so error messages won’t show users any extra information that they could use to
    attack the server.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过创建一个超级用户来完善部署，就像我们本地做的那样。我们还将通过将`DEBUG`设置为`False`来增强项目的安全性，这样错误信息就不会向用户展示任何他们可以用来攻击服务器的额外信息。
- en: Creating a Superuser on Platform.sh
  id: totrans-222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在Platform.sh上创建超级用户
- en: The database for the live project has been set up, but it’s completely empty.
    All the users we created earlier only exist in our local version of the project.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 实时项目的数据库已经设置好了，但它完全为空。我们之前创建的所有用户仅存在于本地项目版本中。
- en: 'To create a superuser on the live version of the project, we’ll start an SSH
    (secure socket shell) session where we can run management commands on the remote
    server:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要在实时版本的项目中创建超级用户，我们将启动一个SSH（安全套接字外壳）会话，在其中运行远程服务器上的管理命令：
- en: '[PRE31]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: When you first run the `platform environment:ssh` command, you may get another
    prompt about the authenticity of this host. If you see this message, enter `Y`
    and you should be logged in to a remote terminal session.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次运行`platform environment:ssh`命令时，可能会出现一个关于此主机真实性的提示。如果您看到此消息，请输入`Y`，您应该会登录到远程终端会话。
- en: After running the `ssh` command, your terminal acts just like a terminal on
    the remote server. Note that your prompt has changed to indicate that you’re in
    a `web` session associated with the project named `ll_project` ❶. If you issue
    the `ls` command, you’ll see the files that have been pushed to the Platform.sh
    server.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`ssh`命令后，您的终端行为就像是在远程服务器上的终端一样。注意，您的提示符已经改变，表明您正处于与名为`ll_project`的项目相关联的`web`会话中❶。如果您执行`ls`命令，您将看到已推送到Platform.sh服务器的文件。
- en: Issue the same `createsuperuser` command we used in Chapter 18 ❷. This time,
    I entered an admin username, `ll_admin_live`, that’s distinct from the one I used
    locally ❸. When you’re finished working in the remote terminal session, enter
    the `exit` command ❹. Your prompt will indicate that you’re working in your local
    system again ❺.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 执行我们在第18章❷中使用的相同`createsuperuser`命令。这一次，我输入了一个与本地使用的用户名不同的管理员用户名`ll_admin_live`❸。当您完成远程终端会话后，输入`exit`命令❹。您的提示符将显示您正在本地系统中工作❺。
- en: Now you can add */admin/* to the end of the URL for the live app and log in
    to the admin site. If others have already started using your project, be aware
    that you’ll have access to all their data! Take this responsibility seriously,
    and users will continue to trust you with their data.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在实时应用的URL末尾添加*/admin/*并登录到管理员站点。如果其他人已经开始使用您的项目，请注意，您将能够访问他们的所有数据！请认真对待这项责任，用户将继续信任您处理他们的数据。
- en: Securing the Live Project
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 保护实时项目
- en: 'There’s one glaring security issue in the way our project is currently deployed:
    the setting `DEBUG = True` in *settings.py*, which provides debug messages when
    errors occur. Django’s error pages give you vital debugging information when you’re
    developing a project; however, they give way too much information to attackers
    if you leave them enabled on a live server.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当前我们项目部署方式中存在一个显著的安全问题：在*settings.py*中设置了`DEBUG = True`，这会在发生错误时提供调试信息。Django的错误页面在开发项目时会为您提供重要的调试信息；然而，如果在实时服务器上启用它们，它们会向攻击者泄露过多的信息。
- en: To see how bad this is, go to the home page of your deployed project. Log in
    to a user’s account and add */topics/999/* to the end of the home page URL. Assuming
    you haven’t made thousands of topics, you should see a page with the message *DoesNotExist
    at /topics/999/*. If you scroll down, you should see a whole bunch of information
    about the project and the server. You won’t want your users to see this, and you
    certainly wouldn’t want this information available to anyone interested in attacking
    the site.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看问题的严重性，请访问您已部署项目的主页。登录到一个用户账户，并在主页URL末尾添加*/topics/999/*。假设您没有创建成千上万的主题，您应该会看到一个页面，显示信息*DoesNotExist
    at /topics/999/*。如果您向下滚动，您会看到关于项目和服务器的许多信息。您不希望用户看到这些信息，而且肯定不希望攻击者能看到这些信息。
- en: We can prevent this information from being shown on the live site by setting
    `DEBUG = False` in the part of *settings.py* that only applies to the deployed
    version of the project. This way you’ll continue to see debugging information
    locally, where that information is useful, but it won’t show up on the live site.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在只适用于已部署项目版本的*settings.py*文件中设置`DEBUG = False`，防止这些信息显示在实时网站上。这样，您仍然可以在本地查看调试信息，这些信息在本地有用，但它不会显示在实时网站上。
- en: 'Open *settings.py* in your text editor, and add one line of code to the part
    that modifies settings for Platform.sh:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开*settings.py*，并在修改Platform.sh设置的部分添加一行代码：
- en: '**settings.py**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE32]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: All the work to set up configuration for the deployed version of the project
    has paid off. When we want to adjust the live version of the project, we just
    change the relevant part of the configuration we set up earlier.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置部署版本项目的工作都得到了回报。当我们想要调整项目的在线版本时，只需修改之前设置的相关配置部分。
- en: Committing and Pushing Changes
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提交并推送更改
- en: 'Now we need to commit the changes made to *settings.py* and push the changes
    to Platform.sh. Here’s a terminal session showing the first part of this process:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要提交对*settings.py*所做的更改，并将这些更改推送到 Platform.sh。以下是显示此过程第一部分的终端会话：
- en: '[PRE33]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We issue the `git commit` command with a short but descriptive commit message
    ❶. Remember the `-am` flag makes sure Git commits all the files that have changed
    and records the log message. Git recognizes that one file has changed and commits
    this change to the repository.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发出`git commit`命令并附上简短而描述性的提交信息❶。记住，`-am`标志确保Git提交所有已更改的文件，并记录日志消息。Git识别到一个文件已被更改并将此更改提交到仓库。
- en: Running `git status` shows that we’re working on the `main` branch of the repository
    and that there are now no new changes to commit ❷. It’s important to check the
    status before pushing to a remote server. If you don’t see a clean status, then
    some changes haven’t been committed and those changes won’t be pushed to the server.
    You can try issuing the `commit` command again; if you’re not sure how to resolve
    the issue, read through Appendix D to better understand how to work with Git.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`git status`命令显示我们正在处理仓库的`main`分支，并且现在没有新的更改需要提交❷。在推送到远程服务器之前检查状态非常重要。如果你看到的状态不干净，那么某些更改尚未提交，这些更改将不会推送到服务器。你可以尝试重新发出`commit`命令；如果你不确定如何解决问题，可以阅读附录D以更好地了解如何使用Git。
- en: 'Now let’s push the updated repository to Platform.sh:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将更新后的仓库推送到 Platform.sh：
- en: '[PRE34]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Platform.sh recognizes that the repository has been updated, and it rebuilds
    the project to make sure all the changes have been taken into account. It doesn’t
    rebuild the database, so we haven’t lost any data.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Platform.sh 识别到仓库已更新，并重新构建项目以确保所有更改都已被考虑。它不会重新构建数据库，因此我们没有丢失任何数据。
- en: To make sure this change took effect, visit the */topics/999/* URL again. You
    should see just the message *Server Error (500)*, with no sensitive information
    about the project at all.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保此更改生效，请再次访问*/topics/999/* URL。你应该只看到*Server Error (500)*的消息，并且没有任何项目的敏感信息。
- en: Creating Custom Error Pages
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义错误页面
- en: In Chapter 19, we configured Learning Log to return a 404 error if the user
    requests a topic or entry that doesn’t belong to them. Now you’ve seen a 500 server
    error as well. A 404 error usually means your Django code is correct, but the
    object being requested doesn’t exist. A 500 error usually means there’s an error
    in the code you’ve written, such as an error in a function in *views.py*. Django
    currently returns the same generic error page in both situations, but we can write
    our own 404 and 500 error page templates that match Learning Log’s overall appearance.
    These templates belong in the root template directory.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在第19章中，我们配置了 Learning Log，以便当用户请求一个不属于他们的主题或条目时返回404错误。现在你也看到了500服务器错误。404错误通常意味着你的Django代码是正确的，但请求的对象不存在。500错误通常意味着你写的代码有问题，例如*views.py*中的某个函数错误。Django目前在这两种情况下都会返回相同的通用错误页面，但我们可以编写自己的404和500错误页面模板，使其与Learning
    Log的整体外观相匹配。这些模板应放在根模板目录中。
- en: Making Custom Templates
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建自定义模板
- en: 'In the *learning_log* folder, make a new folder called *templates*. Then make
    a new file called *404.xhtml*; the path to this file should be *learning_log/templates/404.xhtml*.
    Here’s the code for this file:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在*learning_log*文件夹中，创建一个名为*templates*的新文件夹。然后创建一个名为*404.xhtml*的新文件；该文件的路径应为*learning_log/templates/404.xhtml*。以下是该文件的代码：
- en: '**404.xhtml**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**404.xhtml**'
- en: '[PRE35]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This simple template provides the generic 404 error page information but is
    styled to match the rest of the site.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的模板提供了通用的404错误页面信息，但样式与网站的其余部分保持一致。
- en: 'Make another file called *500.xhtml* using the following code:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码再创建一个名为*500.xhtml*的文件：
- en: '**500.xhtml**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**500.xhtml**'
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: These new files require a slight change to *settings.py*.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新文件需要对*settings.py*做一些轻微的修改。
- en: '**settings.py**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE37]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This change tells Django to look in the root template directory for the error
    page templates and any other templates that aren’t associated with a particular
    app.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改告诉 Django 在根模板目录中查找错误页面模板和其他未关联到特定应用的模板。
- en: Pushing the Changes to Platform.sh
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将更改推送到 Platform.sh
- en: 'Now we need to commit the changes we just made and push them to Platform.sh:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要提交刚才做出的更改并将其推送到 Platform.sh：
- en: '[PRE38]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We issue the `git add .` command ❶ because we created some new files in the
    project. Then we commit the changes ❷ and push the updated project to Platform.sh
    ❸.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先执行 `git add .` 命令 ❶，因为我们在项目中创建了一些新文件。然后我们提交更改 ❷ 并将更新后的项目推送到 Platform.sh
    ❸。
- en: Now when an error page appears, it should have the same styling as the rest
    of the site, making for a smoother user experience when errors arise.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当错误页面出现时，它应该与网站的其他部分保持一致的样式，使得在出现错误时用户体验更加顺畅。
- en: Ongoing Development
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续开发
- en: You might want to further develop Learning Log after your initial push to a
    live server, or you might want to develop your own projects to deploy. When doing
    so, there’s a fairly consistent process for updating your projects.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将 Learning Log 初次推送到在线服务器后，可能还想进一步开发它，或者你可能想开发自己的项目进行部署。在此过程中，更新项目有一个相对一致的流程。
- en: First, you’ll make the necessary changes to your local project. If your changes
    result in any new files, add those files to the Git repository using the command
    `git add .` (making sure to include the dot at the end of the command). Any change
    that requires a database migration will need this command, because each migration
    generates a new migration file.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要对本地项目做出必要的更改。如果你的更改涉及到新的文件，使用命令 `git add .` 将这些文件添加到 Git 仓库中（确保命令末尾有点号）。任何需要数据库迁移的更改都需要使用这个命令，因为每次迁移都会生成一个新的迁移文件。
- en: Second, commit the changes to your repository using `git commit -am "``commit
    message``"`. Then push your changes to Platform.sh, using the command `platform
    push`. Visit your live project and make sure the changes you expect to see have
    taken effect.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，使用 `git commit -am "``commit message``"` 将更改提交到你的仓库。然后，使用命令 `platform push`
    将更改推送到 Platform.sh。访问你的在线项目，确保你期望看到的更改已经生效。
- en: 'It’s easy to make mistakes during this process, so don’t be surprised when
    something goes wrong. If the code doesn’t work, review what you’ve done and try
    to spot the mistake. If you can’t find the mistake or you can’t figure out how
    to undo it, refer to the suggestions for getting help in Appendix C. Don’t be
    shy about asking for help: everyone else learned to build projects by asking the
    same questions you’re likely to ask, so someone will be happy to help you. Solving
    each problem that arises helps you steadily develop your skills until you’re building
    meaningful, reliable projects and answering other people’s questions as well.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中很容易犯错，所以当出现问题时不要感到惊讶。如果代码不起作用，回顾一下你做过的操作，试着找出错误。如果你找不到错误，或者不知道如何撤销操作，可以参考附录
    C 中关于寻求帮助的建议。不要害怕寻求帮助：其他人也是通过问你现在可能会问的问题来学会构建项目的，因此有人一定会愿意帮助你。解决每个出现的问题有助于你稳步提升技能，直到你能构建有意义、可靠的项目，并解答他人的问题。
- en: Deleting a Project on Platform.sh
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除 Platform.sh 上的项目
- en: It’s great practice to run through the deployment process a number of times
    with the same project or with a series of small projects, to get the hang of deployment.
    But you’ll need to know how to delete a project that’s been deployed. Platform.sh
    also limits the number of projects you can host for free, and you don’t want to
    clutter your account with practice projects.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 多次使用同一个项目或一系列小项目来运行部署过程是很好的练习，这有助于你熟悉部署过程。但你需要知道如何删除已经部署的项目。Platform.sh 还限制了你可以免费托管的项目数量，别让练习项目占满了你的账户。
- en: 'You can delete a project using the CLI:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 CLI 删除项目：
- en: '[PRE39]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You’ll be asked to confirm that you want to take this destructive action. Respond
    to the prompts, and your project will be deleted.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会要求你确认是否要执行这个破坏性操作。根据提示回应，项目就会被删除。
- en: 'The command `platform create` also gave the local Git repository a reference
    to the remote repository on Platform.sh’s servers. You can remove this remote
    from the command line as well:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `platform create` 还为本地 Git 仓库提供了一个指向 Platform.sh 服务器上远程仓库的引用。你也可以通过命令行删除这个远程仓库：
- en: '[PRE40]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The command `git remote` lists the names of all remote URLs associated with
    the current repository. The command `git remote remove``remote_name` deletes these
    remote URLs from the local repository.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `git remote` 列出了当前仓库所有关联的远程 URL 名称。命令 `git remote remove``remote_name` 会将这些远程
    URL 从本地仓库中删除。
- en: You can also delete a project’s resources by logging in to the Platform.sh website
    and visiting your dashboard at [https://console.platform.sh](https://console.platform.sh).
    This page lists all your active projects. Click the three dots in a project’s
    box, and click **Edit Plan**. This is a pricing page for the project; click the
    **Delete Project** button at the bottom of the page, and you’ll be shown a confirmation
    page where you can follow through with the deletion. Even if you deleted your
    project using the CLI, it’s a good idea to familiarize yourself with the dashboard
    of any hosting provider you deploy to.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过登录 Platform.sh 网站并访问你的仪表盘 [https://console.platform.sh](https://console.platform.sh)
    来删除项目的资源。该页面列出了所有你的活跃项目。点击项目框中的三个点，然后点击 **Edit Plan**。这是项目的定价页面；点击页面底部的 **Delete
    Project** 按钮，你将看到一个确认页面，按照提示进行删除。即使你使用 CLI 删除了项目，熟悉任何托管服务提供商的仪表盘也是一个好主意。
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned to give your projects a simple but professional
    appearance using the Bootstrap library and the django-bootstrap5 app. With Bootstrap,
    the styles you choose will work consistently on almost any device people use to
    access your project.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Bootstrap 库和 django-bootstrap5 应用为你的项目赋予简单而专业的外观。借助 Bootstrap，你选择的样式将在几乎所有访问你项目的设备上保持一致。
- en: You learned about Bootstrap’s templates and used the *Navbar static* template
    to create a simple look and feel for Learning Log. You used a jumbotron to make
    a home page’s message stand out, and learned to style all the pages in a site
    consistently.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了 Bootstrap 的模板，并使用了 *Navbar static* 模板为学习日志（Learning Log）创建了一个简洁的外观。你使用了一个
    jumbotron 让主页的信息更加突出，并学会了如何为网站的所有页面保持一致的样式。
- en: In the final part of the project, you learned how to deploy a project to a remote
    server so anyone can access it. You made a Platform.sh account and installed some
    tools that help manage the deployment process. You used Git to commit the working
    project to a repository, and then pushed the repository to a remote server on
    Platform.sh. Finally, you learned to begin securing your app by setting `DEBUG
    = False` on the live server. You also made custom error pages, so the inevitable
    errors that come up will look well-handled.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的最后部分，你学习了如何将一个项目部署到远程服务器，这样任何人都可以访问它。你创建了一个 Platform.sh 账户并安装了一些帮助管理部署过程的工具。你使用
    Git 将工作中的项目提交到仓库，并将仓库推送到 Platform.sh 的远程服务器。最后，你学习了如何通过在生产服务器上设置 `DEBUG = False`
    来开始保护你的应用程序。你还创建了自定义的错误页面，这样不可避免的错误也能看起来处理得当。
- en: Now that you’ve finished Learning Log, you can start building your own projects.
    Start simple, and make sure the project works before adding complexity. Enjoy
    your continued learning, and good luck with your projects!
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了学习日志，你可以开始构建自己的项目。可以从简单的项目开始，并确保项目在添加复杂性之前正常工作。享受你持续的学习过程，并祝你的项目好运！
