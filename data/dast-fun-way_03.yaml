- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Dynamic Data Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动态数据结构
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter introduces *dynamic data structures*, which alter their structure
    as the data changes. These structural adaptations may include growing the size
    of the data structure on demand, creating dynamic, mutable linkings between different
    values, and more. Dynamic data structures lie at the heart of almost every computer
    program in the world and are the foundation of some of the most exciting, interesting,
    and powerful algorithms in computer science.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了*动态数据结构*，这些数据结构会随着数据的变化而改变其结构。这些结构的适应性可能包括根据需求扩展数据结构的大小、在不同值之间创建动态的可变链接等。动态数据结构是几乎所有计算机程序的核心，并且是计算机科学中一些最令人兴奋、有趣和强大的算法的基础。
- en: The basic data structures introduced in the previous chapters are like parking
    lots—they give us a place to store information, but don’t provide much in the
    way of adaptation. Sure, we can sort the values in an array (or cars in our parking
    lot) and use that structure to make binary search efficient. But we’re just changing
    the ordering of the data within the array. The data structure itself is neither
    changing nor responding to changes in the data. If we later change the data in
    a sorted array, say by modifying the value of an element, we need to re-sort the
    array. Worse yet, when we need to change the data structure itself—by growing
    or shrinking the array, for example—simple static data structures don’t provide
    any help.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之前章节中介绍的基本数据结构就像停车场——它们为我们提供了存储信息的地方，但没有太多适应变化的能力。的确，我们可以对数组中的值（或者说停车场中的车）进行排序，并使用这种结构使二分查找变得高效。但我们仅仅是改变了数组内数据的顺序。数据结构本身既没有变化，也没有响应数据的变化。如果我们稍后更改已排序数组中的数据，比如修改某个元素的值，我们需要重新排序数组。更糟糕的是，当我们需要改变数据结构本身——例如通过扩展或缩小数组——时，简单的静态数据结构无法提供任何帮助。
- en: 'This chapter compares the static data structure introduced in Chapter 1, the
    array, with a simple dynamic data structure, the linked list, to demonstrate the
    advantages of the latter. In some respects, these two data structures are similar:
    they both allow programmers to store and access multiple values through a single
    reference, either the array or the head of the linked list. However, arrays have
    a structure fixed at time of creation, like rows of parking spaces. In contrast,
    linked lists can grow throughout the program’s memory. They behave more like a
    lengthening or shrinking line of people, allowing for additions and removals.
    Understanding these differences provides a foundation for understanding the more
    advanced data structures that we will visit in the rest of this book.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过将第1章介绍的静态数据结构——数组，与一种简单的动态数据结构——链表进行比较，来展示后者的优势。在某些方面，这两种数据结构是相似的：它们都允许程序员通过单一的引用来存储和访问多个值，不论是数组还是链表的头部。然而，数组在创建时就固定了结构，就像是停放车辆的停车位。相比之下，链表可以在程序的内存中扩展。它们更像是一队长长短短的队伍，可以随时加入或移除元素。理解这些差异为理解本书接下来介绍的更高级数据结构打下了基础。
- en: The Limitations of Arrays
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组的局限性
- en: 'While arrays are excellent data structures for storing multiple values, they
    suffer from one important limitation: their size and layout in memory are fixed
    at the time of creation. If we want to store more values than can fit in our array,
    we need to create a new, larger array and copy over the data from the older array.
    This fixed-size memory is acceptable for when we have an unmoving upper bound
    on the number of items we need to store. If we have sufficient bins to fit our
    data, we can set individual entries all day long without worrying about the array’s
    static layout in memory. However, many applications require dynamic data structures
    that can grow and change with our program.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数组是存储多个值的优秀数据结构，但它们存在一个重要的局限性：它们的大小和内存中的布局在创建时是固定的。如果我们想存储比数组能够容纳更多的值，就需要创建一个新的、更大的数组，并将旧数组中的数据复制过来。这种固定大小的内存适用于我们需要存储的项目数量有明确上限的情况。如果我们有足够的空间来容纳数据，就可以不断地插入单独的元素，而不必担心数组在内存中的静态布局。然而，许多应用程序需要能够随着程序变化而增长和变化的动态数据结构。
- en: To meet this need for dynamic data structures, many modern programming languages
    offer dynamic “arrays” that grow and shrink as you add elements. However, these
    are actually wrappers around static arrays or other data structures that hide
    the complexities and costs associated with their dynamic nature. While this is
    convenient for the programmer, it can lead to hidden inefficiencies. When we add
    elements past the end of the array, the program still needs to increase the memory
    used. It just does so behind the scenes. To understand why dynamic data structures
    are so important, we need to discuss the limitations of static data structures.
    In this book, we’ll use the term *array* to refer to a simple static array.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足动态数据结构的需求，许多现代编程语言提供了动态“数组”，这些数组会随着元素的添加而增长或缩小。然而，这些数组实际上是静态数组或其他数据结构的封装，隐藏了与其动态特性相关的复杂性和成本。虽然这样对程序员很方便，但也可能导致隐藏的低效。当我们在数组末尾添加元素时，程序仍然需要增加使用的内存，只是这一过程发生在幕后。为了理解为什么动态数据结构如此重要，我们需要讨论静态数据结构的局限性。在本书中，我们将使用
    *数组* 一词来指代一个简单的静态数组。
- en: To illustrate the array’s restrictions, imagine that you spend an entire week
    mastering the latest retro video game phenomenon, Space Frogger 2000\. You smile
    with glee every time the main screen displays your five top scores. These monumental
    achievements represent hours of sweat, tears, shouting, and more tears. However,
    the very next day, your (soon to be former) best friend visits and goes on to
    beat your highest score five times in a row. Once you kick the traitorous ex-friend
    out of the house, you return to your game and gaze at the new top scores, shown
    in [Figure 3-1](#figure3-1), and cry out, “Why couldn’t the game store more scores?
    Would it really be so hard to keep a top ten list, or at least add one more to
    the very end?”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明数组的限制，假设你花费了一整周的时间，掌握了最新的复古视频游戏现象——《太空青蛙 2000》。每次主屏幕显示你的五个最高分时，你都会欣喜地笑出声。这些伟大的成就代表了数小时的汗水、泪水、喊叫，和更多的泪水。然而，第二天，你那（即将成为前）最好的朋友来访，并连续五次打破了你的最高分。把那个背叛的前朋友赶出家门后，你回到游戏中，盯着新显示的高分，见图
    [3-1](#figure3-1)，忍不住喊道：“为什么游戏不能存储更多的分数？保存一个前十名列表难道就那么难吗？或者至少在最末尾加一个？”
- en: '![Figure showing an index with five slots cataloging best scores in a video
    game. The highest score, 1025, is index zero, and the lowest score, 949, is index
    4.](image_fi/502604c03/f03001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![显示一个索引，包含五个插槽记录视频游戏的最佳分数。最高分 1025 排在索引 0，最低分 949 排在索引 4。](image_fi/502604c03/f03001.png)'
- en: 'Figure 3-1: A five-element array holding high scores for a video game. None,
    alas, are yours.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1：一个包含视频游戏高分的五个元素的数组。遗憾的是，里面没有你的分数。
- en: This is one of the fundamental limitations of any fixed-size data structure
    and its fixed layout in memory—it can’t grow with the data. As we see below, this
    restriction makes some common operations expensive. More practically, imagine
    the limitations of a word processor with space for only a fixed number of characters,
    a spreadsheet with a fixed number of rows, a photo storage program that can store
    a limited number of pictures, or a coffee journal limited to only a thousand entries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是任何固定大小的数据结构及其在内存中固定布局的基本限制之一——它无法随数据增长。如下面所示，这一限制使得某些常见操作变得昂贵。更实际地说，想象一下，如果文字处理软件只能容纳有限数量的字符，电子表格只能有固定行数，照片存储程序只能存储有限数量的图片，或者一个咖啡日志只能记录一千条条目，这些限制带来的影响。
- en: Since the size of an array is fixed at the time of creation, if we want to extend
    the array to store more data, we must create a new, larger block of memory. Consider
    the simplest case of adding a single element to the end of an array. Because an
    array is a single, fixed-size block of memory, we can’t just shove another value
    into the end. There might be another variable already occupying that space in
    the memory. Rather than risk overwriting that variable’s value, we have to allocate
    a new (bigger) block of memory, copy all the values of the original array into
    the new block, and write the new value at the end. That’s a lot of overhead for
    a single addition, as illustrated in [Figure 3-2](#figure3-2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组的大小在创建时是固定的，如果我们想扩展数组以存储更多数据，就必须创建一个新的、更大的内存块。考虑向数组末尾添加一个元素的最简单情况。由于数组是一个单一的固定大小的内存块，我们不能直接把另一个值插入到末尾。因为内存中可能已经有其他变量占据了那个位置。为了避免覆盖那个变量的值，我们必须分配一个新的（更大的）内存块，将原数组的所有值复制到新块中，并把新值写入末尾。对于一个单一的添加操作来说，这会带来很大的开销，如
    [图 3-2](#figure3-2) 所示。
- en: '![Figure showing an array of six data elements that is copied, and then a seventh
    data element is added to the end of the copy.](image_fi/502604c03/f03002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图示：显示一个包含六个数据元素的数组被复制，然后第七个数据元素被添加到复制的数组末尾。](image_fi/502604c03/f03002.png)'
- en: 'Figure 3-2: Adding an element to the end of a full array.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-2：将元素添加到满的数组末尾。
- en: Think of an array as one of those heated hotel buffet counters with a fixed
    number of slots. It’s easy to pop out the empty tray of scrambled eggs and add
    a new one in its place. But you can’t just stick a new tray onto the end. There’s
    no room for it. If the chef decides to add pancakes to the menu, something else
    has to go.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以把数组想象成酒店自助餐台上那些有固定位置的热菜盘。很容易把空的炒蛋盘拿出来，换上一个新的。但你不能随便把一个新盘子放到末尾，因为没有位置。如果厨师决定添加煎饼到菜单中，那么必须移走其他的菜肴。
- en: If you know you’ll need to insert a lot of new values, you might spread the
    cost out over multiple updates, *amortizing* the cost. You might adopt a strategy
    like *array doubling*, in which the size of an array doubles whenever it is expanded.
    For example, if we try to add a 129th element to our array of size 128, we first
    allocate a new array of size 256 and copy over the original 128 elements. This
    allows us to continue growing the array for a while before we next need to worry
    about allocating new space. However, the cost is potentially wasted space. If
    we only need 129 elements total, we have overallocated by 127.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道需要插入很多新值，你可能会将成本分摊到多个更新中，*摊销*这些成本。你可能会采取类似于*数组倍增*的策略，在数组扩展时，其大小会翻倍。例如，如果我们尝试向一个大小为
    128 的数组添加第 129 个元素，我们首先会分配一个新的大小为 256 的数组，并将原来的 128 个元素复制过去。这使得我们在下一次需要分配新空间之前，可以继续扩展数组。然而，代价是可能会浪费空间。如果我们只需要
    129 个元素，我们就会多分配了 127 个空间。
- en: Array doubling provides a reasonable balance between expensive array copies
    and wasted memory. As the array grows, the doublings become less and less frequent.
    At the same time, by doubling the array when it is full, we are guaranteed to
    waste less than half the space. However, even with this balanced approach, we
    can clearly see the cost of using a fixed-size array in terms of both copying
    cost and memory usage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数组倍增提供了一种合理的平衡，既避免了昂贵的数组复制，又避免了浪费内存。随着数组的增长，倍增的频率会越来越低。同时，通过在数组满时倍增，我们可以保证浪费的空间少于一半。然而，即使采用这种平衡的方式，我们也能明显看到使用固定大小数组的成本，无论是复制成本还是内存使用。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code for array doubling starts by allocating a new array twice the size
    of the current array. A single `WHILE` loop iterates over the elements in the
    current array, copying their values into the new array. The new array is returned.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数组倍增的代码首先分配一个新数组，大小是当前数组的两倍。一个 `WHILE` 循环遍历当前数组的元素，将它们的值复制到新数组中。然后返回新数组。
- en: 'Imagine applying this strategy to shelf space. We establish a bookstore, Data
    Structures and More*,* in a location and install a humble five shelves. Opening
    day sees surprising demand and requests for more variety: we need to expand our
    inventory. Panicked, we move to a new location with 10 shelves and migrate the
    books. The demand has temporarily been met. Since the lack of a comprehensive
    data structure store is a clear gap in the retail books market, our store is a
    runaway success, and demand continues to grow and grow. We might upgrade the store
    a few more times to locations with 20, 40, then 80 shelves. Each time we pay a
    cost to secure a new location and migrate the books.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下将这一策略应用到货架空间上。我们在一个地方开设了一家书店《数据结构与更多》，并安装了五个简陋的书架。开业当天，需求出乎意料地大，人们要求更多种类的书籍：我们需要扩充库存。慌乱之下，我们搬到了一个有
    10 个书架的新地点，并将书籍迁移过去。需求暂时得到了满足。由于缺乏一个综合的数据结构书店，零售图书市场存在这一明显的空缺，我们的书店大获成功，需求持续增长。我们可能会多次升级店铺，搬到有
    20、40、甚至 80 个书架的地方。每次我们都需要支付费用，来确保新位置并迁移书籍。
- en: The fixed location of the array’s values in memory provides another limitation.
    We cannot easily insert additional items in the middle of an array. Even if there
    are enough empty spaces at the end of our original array to accommodate a new
    element, and therefore we don’t need to move the whole array to a new memory block,
    we still need to shift each existing element over one by one to make a space for
    the new value in the middle. Unlike a shelf of books, we can’t just shove all
    the elements over at once with a single good push. If we had 10,000 elements and
    wanted to add something in the second position, we’d need to move 9,999 elements
    over. That’s a lot of effort to insert a single element.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数组值在内存中的固定位置带来了另一个限制。我们无法轻松地将新元素插入数组的中间部分。即使在原数组的末尾有足够的空位来容纳新元素，因此我们不需要将整个数组移动到新的内存块中，我们仍然需要将每个现有元素依次移动，以为新值腾出空间。不同于书架上的书籍，我们不能仅凭一次推力将所有元素推开。如果我们有
    10,000 个元素，想在第二个位置添加一个元素，那么我们就得移动 9,999 个元素。这是插入一个元素所需要付出的巨大努力。
- en: The problems compound when we try to insert new values into the middle of an
    array that is already full. Not only do we have to allocate a new block and copy
    the old values, but we need to shift the values after the new value down one position
    to clear a space for our new value. For example, suppose we wanted to insert the
    value 23 as the fourth element of an existing array of six elements, as illustrated
    in [Figure 3-3](#figure3-3).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试将新值插入到一个已经满的数组的中间时，问题会变得更加复杂。我们不仅需要分配一个新的内存块并复制旧值，还需要将新值后面的元素依次向下移动一个位置，为新值腾出空间。例如，假设我们想将值
    23 插入到一个已有六个元素的数组中的第四个位置，如[图 3-3](#figure3-3)所示。
- en: '![One array with six boxes is split in two. The values in each half are copied
    and moved into a new seven‐box array with a new value in the middle.](image_fi/502604c03/f03003.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![一个包含六个盒子的数组被分成两部分。每一部分的值被复制并移动到一个新的包含七个盒子的数组中，中间插入了一个新值。](image_fi/502604c03/f03003.png)'
- en: 'Figure 3-3: Adding an element to the middle of a full array'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-3：向满数组中间添加一个元素
- en: 'To address the shortfalls of arrays, we need to move to more flexible data
    structures that can grow as new data is added: dynamic data structures. Before
    we jump into the details, let’s introduce pointers, the variable type that’s key
    to reconfiguring and growing data structures.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决数组的不足，我们需要转向更灵活的数据结构，这些结构可以在添加新数据时扩展：动态数据结构。在深入细节之前，让我们先介绍一下指针，这是一种关键的变量类型，用于重新配置和扩展数据结构。
- en: Pointers and References
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指针与引用
- en: 'One variable type stands above its peers in terms of both its sheer power and
    its ability to confuse new programmers: *pointers*. A pointer is a variable that
    stores only the addresses in the computer’s memory. The pointer therefore points
    to a second location in memory where the actual data is stored, as shown in [Figure
    3-4](#figure3-4).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种变量类型，在其强大功能和可能使新程序员感到困惑的能力方面，超越了其他所有类型：*指针*。指针是一个只存储计算机内存中地址的变量。因此，指针指向内存中的另一个位置，该位置存储着实际数据，如[图
    3-4](#figure3-4)所示。
- en: '![Eight memory addresses, each with corresponding boxes. The fourth box down
    has address 2103 and value 109, and it is labeled “address where the pointer points.”
    the seventh box down has address 2106 and value 2103, and it is labeled “pointer.”](image_fi/502604c03/f03004.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![八个内存地址，每个都有对应的盒子。第四个盒子有地址 2103 和值 109，并标记为“指针所指向的地址”。第七个盒子有地址 2106 和值 2103，并标记为“指针”。](image_fi/502604c03/f03004.png)'
- en: 'Figure 3-4: A pointer indicating an address in the computer’s memory'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-4：指针指向计算机内存中的一个地址
- en: The astute reader may ask, “What is the purpose of a variable that simply points
    to another location in memory? I thought the variable’s name already served this
    function. Why not store your data in the variable like a normal person? Why do
    you always have to make things so complicated?” Don’t listen to the skeptics.
    Pointers are the essential ingredient in dynamic data structures, as we’ll see
    shortly.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 聪明的读者可能会问：“一个变量只是指向内存中的另一个位置，那它有什么意义？我以为变量的名字已经完成了这个功能。为什么不把数据直接存储在变量中，像普通人一样？为什么总是要把事情弄得这么复杂？”不要听那些怀疑者的声音。指针是动态数据结构的核心组成部分，稍后我们会看到这一点。
- en: 'Suppose we are working on a major architectural project at the office and have
    assembled a folder of example drawings to share with our team. Soon the project
    folder contains numerous floorplans, cost estimates, and artistic renderings.
    Rather than make a copy of the hefty file and leave it out in the open, we leave
    a note telling our collaborators to find the file in the third-floor records room,
    filing cabinet #3, the second drawer down, fifth folder. This note plays the role
    of a pointer. It doesn’t detail all the information that’s in the file, but rather
    allows our colleagues to find and retrieve the information. More importantly,
    we can share this single “address” with each of our coworkers without making a
    full copy of the file for them. They can each use this information to look up
    and modify the folder when needed. We could even leave an individual sticky note
    on each team member’s desk, providing 10 variables pointing to the same information.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在办公室做一个大型的建筑项目，并且已经整理了一些示例图纸，准备与团队共享。很快，项目文件夹中包含了大量的平面图、成本估算和艺术效果图。为了避免复制这个庞大的文件并随意放置，我们留下了一张便条，告诉同事们去三楼的档案室，文件柜#3，第二个抽屉，下方第五个文件夹里查找文件。这个便条充当了指针的角色。它没有详细列出文件中的所有信息，而是让我们的同事能够找到并提取这些信息。更重要的是，我们可以将这个“地址”分享给每位同事，而无需为他们复制整个文件。他们每个人都可以利用这些信息查找并在需要时修改文件夹。我们甚至可以在每位团队成员的桌上留下一个单独的便签，提供10个指向相同信息的变量。
- en: In addition to storing the location of a block of memory, pointers can take
    on a null value (denoted as None, Nil, or 0 in some programming languages). The
    null value simply denotes that the pointer isn’t currently pointing to a valid
    memory location. In other words, it indicates that the pointer doesn’t actually
    point to anything yet.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了存储一块内存的位置外，指针还可以为空值（在某些编程语言中表示为None、Nil或0）。空值仅表示指针当前没有指向一个有效的内存位置。换句话说，它表示指针实际上还没有指向任何东西。
- en: 'Different programming languages provide different mechanisms to accomplish
    the task of pointers, and not all of them provide the raw memory address to the
    programmer. Lower-level languages like C and C++ give you raw pointers and allow
    you to directly access the memory location they store. Other programming languages,
    such as Python, use references, which use syntax like that of a normal variable
    while still allowing you to reference another variable. These different variations
    come with different behaviors and usages (dereferencing, pointer math, the form
    of null values, and so forth). For the sake of simplicity, throughout this book
    we will use the term *pointer* to cover all variables implemented by pointers,
    references, or indices into preallocated blocks of memory. We won’t worry about
    the complicated syntax needed to access the blocks of memory (which has caused
    more than a few programming enthusiasts to break down in tears). We will also
    use the final data’s type (instead of the more generic type pointer) when defining
    a pointer variable in pseudocode. The key concept for our purposes is that pointers
    provide a mechanism for linking to a block of memory as featured in our first
    dynamic data structure: the linked list.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的编程语言提供不同的机制来实现指针任务，并非所有语言都会向程序员提供原始内存地址。像C和C++这样的低级语言提供原始指针，并允许你直接访问它们存储的内存位置。其他编程语言，如Python，使用引用，它们的语法与普通变量相似，但仍然允许你引用另一个变量。这些不同的变体有不同的行为和使用方式（解除引用、指针运算、空值的形式等）。为了简单起见，在本书中我们将使用*指针*一词来涵盖所有由指针、引用或索引实现的变量，这些变量指向预分配的内存块。我们不会担心访问内存块所需的复杂语法（这让不少编程爱好者哭泣过）。我们还将在伪代码中定义指针变量时使用最终数据的类型（而不是更通用的类型指针）。对我们来说，关键概念是指针提供了一种机制，用于链接到内存块，就像我们第一个动态数据结构：链表中的实现一样。
- en: Linked Lists
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链表
- en: '*Linked lists* are the simplest example of a dynamic data structure and are
    a close cousin to arrays. Like arrays, they are a data structure for storing multiple
    values. Unlike arrays, linked lists are composed of a chain of nodes linked together
    by pointers. A basic *node* in a linked list is a composite data structure containing
    two parts: a value (of any type) and a pointer to the next node in the list:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*链表*是最简单的动态数据结构示例，且与数组有着密切的关系。像数组一样，链表也是用来存储多个值的数据结构。与数组不同的是，链表由一系列由指针连接的节点组成。链表中的基本*节点*是一个复合数据结构，包含两个部分：一个值（可以是任何类型）和指向链表中下一个节点的指针：'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can picture a linked list as a series of linked bins, as in [Figure 3-5](#figure3-5).
    Each bin stores a single value and contains a pointer to the next bin in the series.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将链表想象为一系列相互链接的箱子，如[图3-5](#figure3-5)所示。每个箱子存储一个单一的值，并包含指向下一个箱子的指针。
- en: '![Six nodes, each containing a numeric value. Right‐pointing arrows connect
    the nodes. The last arrow at the far right points to a slash indicating the end
    of the list.](image_fi/502604c03/f03005.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![六个节点，每个节点包含一个数字值。右指向的箭头连接这些节点。最右边的箭头指向一个斜杠，表示链表的结束。](image_fi/502604c03/f03005.png)'
- en: 'Figure 3-5: A linked list shown as a series of nodes linked by pointers'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-5：通过指针链接的一系列节点表示的链表
- en: The slash at the end of the list represents a null value and indicates the end
    of the list. Effectively we are saying that the last node’s `next` pointer does
    not point to a valid node.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 链表末尾的斜杠表示一个空值，指示链表的结束。实际上我们是在说，最后一个节点的`next`指针并不指向有效的节点。
- en: A linked list is like a long line of people waiting at our favorite coffee shop.
    People rarely know their absolute position in the line—“I’m on the fifty-third
    floor tile back from the counter.” They pay attention to their relative order,
    namely the single person before them, which we store in a pointer. Even if the
    line winds throughout the store (and its parking lot) in complex loops, we can
    still reconstruct the order by asking each person who is immediately in front
    of them. We can traverse the line toward the counter by asking each person who
    is before them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 链表就像是我们最喜欢的咖啡店门口排队的长队伍。人们通常不知道自己在队伍中的绝对位置——“我在距离柜台五十三级砖的位置。”他们关注的是自己在队伍中的相对位置，也就是他们前面那一个人，而这个位置我们存储在指针中。即使队伍在店内（甚至停车场）绕来绕去，形成复杂的循环，我们仍然可以通过询问每个人面前是谁，来重新构建队伍的顺序。我们可以通过询问每个人前面的人，沿着队伍向柜台走去。
- en: Because they include pointers as well as values, linked lists require more memory
    than arrays to store the same items. If we have an array of size *K*, storing
    values of *N* bytes each, we only need *K* × *N* bytes. In contrast, if each pointer
    requires another *M* bytes, our data structure now has a cost of *K* × (*M* +
    *N*) bytes. Unless the size of the pointers is much smaller than the size of our
    values, the overhead is significant. However, the increased memory usage is often
    worth it for the increased flexibility the pointers provide.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因为链表包含指针和数值，链表需要比数组更多的内存来存储相同的元素。如果我们有一个大小为*K*的数组，每个元素为*N*字节，我们只需要*K* × *N*字节。而如果每个指针需要额外的*M*字节，那么我们的数据结构的内存开销就变为*K*
    × (*M* + *N*)字节。除非指针的大小远小于值的大小，否则这个开销是显著的。然而，增加的内存使用通常是值得的，因为指针提供的灵活性。
- en: While textbooks often represent linked lists as neat, orderly structures (as
    shown in [Figure 3-5](#figure3-5) or implied in our line-of-humans example), our
    list can actually be scattered throughout the program’s memory. As illustrated
    in [Figure 3-6](#figure3-6), the list’s nodes are linked only via their pointers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然教科书中通常将链表表示为整齐、有序的结构（如[图3-5](#figure3-5)所示，或在我们的人物排队示例中所暗示），但我们的链表实际上可能分散在程序的内存中。如[图3-6](#figure3-6)所示，链表的节点仅通过它们的指针连接。
- en: This is the real power of pointers and dynamic data structures. We aren’t constrained
    to keep the entire list in a single contiguous block of memory. We’re free to
    grab space for new nodes wherever space happens to exist.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是指针和动态数据结构的真正强大之处。我们不需要将整个链表保存在单一的连续内存块中。我们可以自由地在任何有空间的地方为新节点分配内存。
- en: '![The same six nodes and slash indicating the end of the list as in Figure
    3‐5, but in a different order and with various empty bins between nodes. Arrows
    indicate the order in which the nodes link.](image_fi/502604c03/f03006.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![与图3-5中的六个节点和表示链表结束的斜杠类似，但顺序不同，且节点之间有多个空箱子。箭头指示节点链接的顺序。](image_fi/502604c03/f03006.png)'
- en: 'Figure 3-6: A linked list in the computer’s memory. Nodes are not necessarily
    adjacent to each other.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-6：计算机内存中的链表。节点不一定是相邻的。
- en: 'Programs typically store linked lists by keeping a single pointer to the front,
    or *head*, of the linked list. The program can then access any element in the
    list by starting at the head and iterating through the nodes via the pointers:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通常通过保持一个指向链表头部的单一指针来存储链表。程序可以通过从头开始，并通过指针迭代节点，来访问链表中的任何元素：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code starts at the head of the list ❶. We maintain a second variable `count`
    to track the index of the current node. The `WHILE` loop then iterates through
    each node in the list until it has found the correct number, `count == element_number`,
    or run off the end of the list, `current == null` ❷. In either case, the code
    can return `current`. If the loop terminates due to running off the edge of the
    list, then the index is not in the list and the code returns `null`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从列表的头节点 ❶ 开始。我们维护一个第二个变量 `count` 来跟踪当前节点的索引。然后 `WHILE` 循环遍历链表中的每个节点，直到找到正确的数字，`count
    == element_number`，或遍历到链表的末尾，`current == null` ❷。在任何一种情况下，代码都会返回 `current`。如果循环因遍历到链表末尾而终止，那么索引不在列表中，代码返回
    `null`。
- en: For example, if we wanted to access the fourth element of a linked list, the
    program would access first the head, then the second, third, and fourth elements
    in order to find the correct memory location. [Figure 3-7](#figure3-7) shows this
    process, where the node with value 3 is the head of the list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想访问链表中的第四个元素，程序将首先访问头节点，然后依次访问第二、第三和第四个元素，以找到正确的内存位置。[图 3-7](#figure3-7)
    展示了这个过程，其中值为 3 的节点是链表的头节点。
- en: '![A linked list of six nodes, with the program accessing first the head of
    the list, then the node directly next to it, to which its pointer points, and
    so on.](image_fi/502604c03/f03007.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![六个节点的链表，程序首先访问链表的头节点，然后访问直接指向它的下一个节点，依此类推。](image_fi/502604c03/f03007.png)'
- en: 'Figure 3-7: Traversing a linked list requires moving from one node to the next
    along the chain of pointers.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-7：遍历链表需要沿着指针链逐个访问节点。
- en: 'It’s worth noting, however, that there’s a tradeoff: linked lists have a higher
    computing overhead than arrays. When accessing an element in an array, we just
    compute a single offset and look up the correct address of memory. The array access
    only takes one mathematical computation and one memory lookup regardless of which
    index we choose. Linked lists require us to iterate from the beginning of the
    list until we get to the element of interest. For longer lists, the lack of direct
    access can add significant overhead.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，这里有一个权衡：链表的计算开销比数组大。访问数组中的元素时，我们只需要计算一个偏移量并查找正确的内存地址。无论选择哪个索引，数组访问只需要进行一次数学计算和一次内存查找。而链表则需要我们从列表的开头开始迭代，直到找到感兴趣的元素。对于较长的链表，缺乏直接访问会增加显著的开销。
- en: At first glance, this restricted access pattern is a strike against the linked
    list. We’ve dramatically increased the cost of looking up an arbitrary element!
    Consider what this means for binary search. A single lookup requires iterating
    over many of the elements, removing the advantage of a sorted list.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，这种受限的访问模式似乎是链表的一个缺点。我们大大增加了查找任意元素的成本！想想这对二分查找意味着什么。一次查找需要遍历许多元素，失去了排序列表的优势。
- en: Yet despite these costs, linked lists can become real assets in practical programs.
    Data structures almost always involve tradeoffs among complexity, efficiency,
    and usage patterns. The very behaviors that disqualify a data structure for one
    use might make it the perfect choice to support other algorithms. Understanding
    these tradeoffs is the key to effectively combining algorithms and data structures.
    In the case of linked lists, the tradeoff for increased overhead in accessing
    elements is a significant increase in the flexibility of the overall data structure,
    as we will see in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管有这些成本，链表在实际程序中仍然可以成为真正的资产。数据结构几乎总是涉及到复杂性、效率和使用模式之间的权衡。那些使数据结构无法用于某种应用的行为，可能会让它成为支持其他算法的完美选择。理解这些权衡是有效结合算法和数据结构的关键。在链表的例子中，增加元素访问开销的权衡是显著增加了整个数据结构的灵活性，正如我们在下一节中将看到的那样。
- en: Operations on Linked Lists
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链表操作
- en: While some lament the chaotic sprawl of the linked list compared to the aesthetic
    beauty of the compact array, it is exactly this ability to link across different
    blocks of memory that makes the data structure so powerful, allowing us to *dynamically*
    rearrange the data structure. Let’s compare inserting a new value to an array
    with adding a value to a linked list.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有人 lament 认为链表比起紧凑的数组来说显得杂乱无章，正是这种能够在不同内存块之间建立链接的能力，使得链表这一数据结构如此强大，从而让我们能够*动态*地重新排列数据结构。让我们比较一下向数组插入新值与向链表中添加值的区别。
- en: Inserting into a Linked List
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向链表插入元素
- en: As we’ve seen, inserting a new element into an array may require us to allocate
    a new (bigger) block of memory and copy all the values of the original array into
    the new block. Further, the insertion itself may require us to traverse the array
    and shift elements over.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，将新元素插入数组中可能需要我们分配一个新的（更大的）内存块，并将原数组的所有值复制到新的内存块中。此外，插入操作本身可能还需要我们遍历数组并移动元素。
- en: The linked list, on the other hand, doesn’t need to stay in a single contiguous
    block—it probably isn’t in a single block to begin with. We only need to know
    the location of the new node, update the previous node’s `next` pointer to point
    to our new node, and point the new node’s `next` pointer at the correct node.
    If we want to add a node with value 23 to the front of the linked list in [Figure
    3-5](#figure3-5), we simply set the new node’s `next` pointer to the previous
    start of the list (value = 3). This procedure is shown in [Figure 3-8](#figure3-8).
    Any variables previously pointing to the start of the list (the first node) also
    need to be updated to point to the new first node.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，链表不需要保持在一个连续的内存块中——它可能一开始就不在一个单独的内存块里。我们只需要知道新节点的位置，更新前一个节点的 `next` 指针指向新节点，并让新节点的
    `next` 指针指向正确的节点。如果我们想在[图 3-5](#figure3-5)中将值为 23 的节点添加到链表的前端，我们只需要将新节点的 `next`
    指针指向原来链表的起始节点（值 = 3）。这个过程在[图 3-8](#figure3-8)中展示了。任何之前指向链表起始节点（第一个节点）的变量也需要更新，指向新的第一个节点。
- en: '![The linked list from Figure 3‐5 with a new node added to the front. A right‐pointing
    arrow links the new first node to what is now the second node. ](image_fi/502604c03/f03008.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![来自图 3-5 的链表，添加了一个新节点到前端。一个指向右的箭头连接了新的第一个节点与现在成为第二个节点的节点。](image_fi/502604c03/f03008.png)'
- en: 'Figure 3-8: Extending a linked list by adding a new node to the front'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-8：通过在前端添加新节点来扩展链表
- en: Similarly, we can add a node to the end of the list, as shown in [Figure 3-9](#figure3-9),
    by traversing the list to the end, updating the `next` pointer from the final
    node (value = 8) to point to the new node, and setting the new node’s `next` pointer
    to `null`. Done naively, this approach requires traversing the entire array to
    reach the end, but, as we will see in the next chapter, there are ways to avoid
    this additional cost.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以将一个节点添加到链表的末尾，正如在[图 3-9](#figure3-9)中所示，方法是遍历链表直到末尾，更新最后一个节点（值 = 8）的
    `next` 指针，使其指向新节点，并将新节点的 `next` 指针设置为 `null`。这种做法直接的话需要遍历整个链表才能到达末尾，但正如我们将在下一章看到的那样，有一些方法可以避免这种额外的开销。
- en: '![The linked list from Figure 3‐5 with a new node added to the end. A right‐pointing
    arrow links the formerly last node to the new last node, and a right‐pointing
    arrow links the new last node to the slash indicating the end of the list. ](image_fi/502604c03/f03009.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![来自图 3-5 的链表，添加了一个新节点到末尾。一个指向右的箭头连接了原本的最后一个节点与新加入的最后一个节点，而一个指向右的箭头连接了新最后节点与表示链表末尾的斜杠。](image_fi/502604c03/f03009.png)'
- en: 'Figure 3-9: Extending a linked list by appending an additional node to the
    end'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-9：通过在末尾添加一个新节点来扩展链表
- en: 'If we want to insert a value in the middle, we update two pointers: the previous
    node and the inserted node. For example, to add node *N* between nodes *X* and
    *Y*, we have two steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在中间插入一个值，我们需要更新两个指针：前一个节点和插入的节点。例如，要将节点 *N* 插入到 *X* 和 *Y* 之间，我们需要进行两个步骤：
- en: Set *N*’s `next` pointer to point at *Y* (the same place *X*’s `next` pointer
    currently points).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 *N* 的 `next` 指针设置为指向 *Y*（即 *X* 的 `next` 指针当前指向的地方）。
- en: Set *X*’s `next` pointer to point at *N*.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 *X* 的 `next` 指针设置为指向 *N*。
- en: The order of these two steps is important. Pointers, like all other variables,
    can hold only a single value—in this case a single address in memory. If we set
    *X*’s `next` pointer first, we would lose the data on where *Y* resides.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个步骤的顺序很重要。指针和其他变量一样，只能存储单一的值——在此情况下是内存中的一个地址。如果我们先设置 *X* 的 `next` 指针，那么就会丢失
    *Y* 的地址信息。
- en: Once we’ve finished, *X* points to *N* and *N* points to *Y*. [Figure 3-10](#figure3-10)
    illustrates this process.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，*X* 指向 *N*，而 *N* 指向 *Y*。[图 3-10](#figure3-10)展示了这个过程。
- en: '![Diagram of the process of inserting a new node N into a linked list between
    nodes X and Y. Before the insertion, X points to Y. During the insertion, both
    N and X point to Y. After the insertion, X points to N and N points to Y. ](image_fi/502604c03/f03010.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![插入新节点 N 到链表中，位于节点 X 和 Y 之间的过程图。在插入之前，X 指向 Y。在插入过程中，N 和 X 都指向 Y。插入后，X 指向 N，N
    指向 Y。](image_fi/502604c03/f03010.png)'
- en: 'Figure 3-10: The process of inserting a new node *N* into a linked list between
    nodes *X* and *Y*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-10：将新节点 *N* 插入到链表中，位于节点 *X* 和 *Y* 之间的过程
- en: 'Despite the shuffling of pointers, the code for this kind of operation is relatively
    simple:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管指针的顺序发生了变化，但这种操作的代码相对简单：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Say we instead wanted to insert a node with value 23 between the nodes 9 and
    37 in our current linked list. The resulting chain of pointers would appear as
    shown in [Figure 3-11](#figure3-11).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想在当前链表中的节点 9 和 37 之间插入一个值为 23 的节点。结果指针链将如[图 3-11](#figure3-11)所示。
- en: '![The linked list from Figure 3‐5 in which node 9 previously pointed at node
    37\. Now a right arrow points from node 9 to newly inserted node 23, and a right
    arrow points from node 23 to node 37\. ](image_fi/502604c03/f03011.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 3-5 中的链表，节点 9 之前指向节点 37。现在，节点 9 指向新插入的节点 23，节点 23 指向节点 37。](image_fi/502604c03/f03011.png)'
- en: 'Figure 3-11: Inserting the node 23 into a linked list requires updating pointers
    from the previous node (9) and to the following node (37).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-11：将节点 23 插入到链表中，需要更新前一个节点（9）和下一个节点（37）的指针。
- en: Likewise, when a customer lets their friend step in front of them to join the
    middle of the line, two pointers change. Recall that in this analogy, each person
    “points” to, or keeps track of, the person in front of them. The overly generous
    customer now points to their line-jumping friend who stands right in front of
    them. Meanwhile the happy line jumper points to the person who was previously
    in front of their enabling friend. Everyone behind them in line gives dirty looks
    and mumbles unkind things.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当顾客让他们的朋友站在自己前面加入队伍时，两个指针发生了变化。回想一下，在这个类比中，每个人都“指向”或追踪自己前面的人。过于慷慨的顾客现在指向站在自己前面的跳队朋友。与此同时，开心的跳队者指向原本在他们的朋友前面的人。队伍中其他人都投来了不满的目光，并低声抱怨。
- en: Again, the diagrams and the café line analogy hide the insertion process’s true
    messiness. While we aren’t inserting the new node in a memory location adjacent
    to the last node, we are logically inserting it next in line. The node itself
    could be on the other end of the computer’s memory next to the variable counting
    our spelling errors or daily cups of coffee. As long as we keep the list’s pointers
    up-to-date, we can treat them and the nodes to which they point as a single list.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，图示和咖啡馆排队的类比掩盖了插入过程的真正复杂性。虽然我们没有在最后一个节点旁边的内存位置插入新节点，但从逻辑上讲，我们是将其插入到队伍的下一个位置。节点本身可能位于计算机内存的另一端，靠近记录我们拼写错误或日常咖啡杯数的变量。只要我们保持列表中的指针是最新的，我们就可以把它们以及它们指向的节点当作一个整体列表来处理。
- en: 'Of course, we must take extra care when inserting a node in front of the head
    node (`index == 0`) or at an index *past* the end of the list. If we are inserting
    a node before the head node, we need to update the head pointer itself; otherwise,
    it will continue to point to the old front of the list, and we will lose the ability
    to access the new first element. If we are trying to insert a node into an index
    past the end of the list, there is no valid previous node at `index - 1`. In this
    case, we could fail the insertion, return an error, or append the element to the
    end of the list (at a smaller index). Whichever approach you choose, it is critical
    that you clearly document your code. We can bundle this extra logic into a helper
    function that combines our linear lookup code to insert a new node at a given
    position:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在插入节点到头节点前（`index == 0`）或插入到超出列表末尾的索引时，我们必须格外小心。如果我们要在头节点前插入节点，我们需要更新头指针本身；否则，头指针将继续指向旧的列表开头，我们将失去访问新第一个元素的能力。如果我们尝试插入节点到超出列表末尾的索引，则在`index
    - 1`处没有有效的前一个节点。在这种情况下，我们可以使插入失败，返回错误，或将元素附加到列表的末尾（使用较小的索引）。无论选择哪种方法，都必须清楚地记录代码。我们可以将这些额外的逻辑打包成一个辅助函数，将我们的线性查找代码与在给定位置插入新节点的逻辑结合起来：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code for insertion starts with the special case of inserting a new node
    at `index = 0`, the beginning of the list ❶. It creates a new head node, sets
    the new head node’s `next` pointer to the previous head of the list, and returns
    the new head of the list. Since there isn’t a node before the new head node, we
    do not need to update a previous node’s `next` pointer in this case.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 插入的代码从插入新节点到`index = 0`，即列表的开头❶开始。它创建一个新的头节点，将新头节点的`next`指针指向列表的原头节点，并返回新的头节点。由于新头节点前面没有节点，我们在这种情况下无需更新前一个节点的`next`指针。
- en: 'For elements in the middle of the list, the code needs to traverse the list
    to find the correct location ❷. This is similar to the `LinkedListLookUp` search:
    the code follows each node’s `next` pointer, while tracking the `current` node
    and the `count` seen, until it hits the end of the list or the correct location.
    The code also tracks an additional piece of information, `previous`, a pointer
    to the node *before* the current node. Tracking `previous` allows us to update
    the pointer into the inserted node.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于位于链表中间的元素，代码需要遍历链表，找到正确的位置❷。这类似于`LinkedListLookUp`的查找：代码跟随每个节点的`next`指针，同时跟踪`current`节点和已查看的`count`，直到到达链表末尾或找到正确的位置。代码还会跟踪一个额外的信息，即`previous`，它是指向当前节点*之前*的节点的指针。跟踪`previous`使我们能够更新指向插入节点的指针。
- en: The code then checks whether it has arrived at the desired index of insertion
    ❸. By making the check `count < index`, we still allow insertion at the very end
    of the list. We only fail with an error in cases where we try to insert at least
    one additional spot *past* the end of the list.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码检查是否已到达期望的插入索引❸。通过将检查条件设置为`count < index`，我们仍然允许在链表的末尾插入。只有在尝试插入超过链表末尾的位置时，我们才会发生错误。
- en: If the code has found the correct location to insert the node, it splices it
    in between `previous` and `current`. The code performs the insertion by creating
    a new node, setting that node’s `next` pointer to the address indicated by `previous.next`,
    and then setting `previous.next` to point to the new node ❹. This logic also works
    for the case where we are appending the new node immediately after the last node
    in the list. Since `previous.next == null` in that case, the new node’s `next`
    pointer is assigned to `null` and correctly indicates the new end of the list.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码已经找到了插入节点的正确位置，它会将新节点插入到`previous`和`current`之间。代码通过创建一个新节点来执行插入，将该节点的`next`指针设置为`previous.next`指向的地址，然后将`previous.next`设置为指向新节点❹。这种逻辑同样适用于将新节点立即追加到链表末尾的情况。由于在这种情况下`previous.next
    == null`，新节点的`next`指针将被赋值为`null`，正确地指示链表的新末尾。
- en: By returning the head of the list ❺, we can account for insertions before the
    head node. Alternatively, we could wrap the head node in a `LinkedList` composite
    data structure and operate on that directly. We will use this alternate approach
    later in the book to handle binary search trees.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过返回链表的头节点❺，我们可以处理在头节点之前插入的情况。或者，我们可以将头节点包装在一个`LinkedList`复合数据结构中，直接操作它。我们将在本书后面使用这种替代方法来处理二叉搜索树。
- en: Deleting from a Linked List
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从链表中删除
- en: To delete an element anywhere in a linked list, all we need to do is delete
    that node and adjust the previous node’s pointer, as shown in [Figure 3-12](#figure3-12).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要在链表中的任意位置删除一个元素，我们只需要删除该节点并调整前一个节点的指针，如[图 3-12](#figure3-12)所示。
- en: '![The seven‐node linked list from Figure 3‐9\. Node 37 is in the middle, with
    node 9 preceding it and node 7 following. Node 37 is crossed out, and node 9 now
    points to node 7\.  ](image_fi/502604c03/f03012.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 3-9 中的七节点链表。节点 37 在中间，前面是节点 9，后面是节点 7。节点 37 被划掉，节点 9 现在指向节点 7。](image_fi/502604c03/f03012.png)'
- en: 'Figure 3-12: Removing a node (37) from a linked list requires updating the
    pointer in the previous node (9) to skip ahead to the following node (7).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-12：从链表中移除一个节点（37）需要更新前一个节点（9）中的指针，使其跳过当前节点，指向下一个节点（7）。
- en: This corresponds to someone making the questionable decision that coffee isn’t
    worth the wait in line. They look at their watch, mutter something about having
    instant at home, and leave. As long as the person behind the newly departed customer
    knows who they are now behind, the line’s integrity is maintained.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于某人做出一个值得怀疑的决定，认为排队等咖啡不值得。他们看看手表，嘟囔着自己家里有速溶咖啡，然后离开。只要离开顾客后面的人知道自己现在排在谁后面，队伍的完整性就得以保持。
- en: In the case of an array, we would have to pay a significantly higher cost to
    delete an element, shifting everything following the node containing 37 by one
    bin toward the front of the array in order to close up the gap. This could require
    us to walk the entire array.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组的情况下，删除一个元素的成本要高得多，因为我们需要将包含37的节点后面的所有元素向前移动一个位置，以便填补空隙。这可能需要遍历整个数组。
- en: 'Again, we must take special care when deleting the first element in a linked
    list or deleting past the end of the list. When deleting the first node, we update
    the list’s head pointer to the address of the new head node, effectively making
    that node the new head of the list. When deleting past the end of the list, we
    have options similar to those for insertion: we can skip the deletion or return
    an error. The following code does the latter:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，在删除链表的第一个元素或删除超过链表末尾的元素时，必须特别小心。当删除第一个节点时，我们将更新列表的头指针，指向新头节点的地址，从而使该节点成为链表的新头。删除超出链表末尾的节点时，我们可以采取类似于插入时的处理方式：我们可以跳过删除操作或返回错误。以下代码执行了后者：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code follows the same approach as insertion. This time we start with an
    additional check ❶. If the list is empty, there is nothing to delete, and we can
    return the value `null` to indicate the list is still empty. Otherwise, we check
    whether we are deleting the first node ❷ and, if so, remove the previous first
    node from the list and return the address of the new head node.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与插入方法遵循相同的思路。这次我们增加了一个额外的检查 ❶。如果列表为空，无法删除任何元素，我们可以返回值`null`来表示列表仍然为空。否则，我们检查是否正在删除第一个节点
    ❷，如果是，移除列表中的第一个节点，并返回新头节点的地址。
- en: To remove any later nodes (`index > 0`), the code must travel to the correct
    location in the list. Using the same logic as for insertion, the code tracks `current`,
    `count`, and `previous` while iterating through the nodes until it either finds
    the correct location or hits the end of the list ❸. If the code finds a node at
    the correct index ❹, it splices out the node to be removed by setting `previous.next`
    to point at one node past the current node ❺. However, if the `WHILE` loop ran
    off the end of the list and `current` is `null`, there is nothing to delete, so
    the code throws an error. The function also sets the removed node’s `next` pointer
    to `null` both to ensure consistency (it no longer has a `next` node in the list)
    and to allow programming languages with memory management to correctly free memory
    that is no longer used ❻. The function completes by returning the address of the
    list’s head node ❼.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了删除任何后续节点（`index > 0`），代码必须遍历到列表中的正确位置。使用与插入时相同的逻辑，代码在遍历节点时跟踪`current`、`count`和`previous`，直到找到正确的位置或遇到链表末尾
    ❸。如果代码找到了正确索引的节点 ❹，它通过将`previous.next`指向当前节点之后的一个节点 ❺ 来将该节点从链表中移除。然而，如果`WHILE`循环越过了链表末尾且`current`为`null`，则没有节点可删除，因此代码会抛出错误。该函数还将已删除节点的`next`指针设置为`null`，既为了确保一致性（因为该节点在链表中不再有`next`节点），又为了允许具有内存管理功能的编程语言正确释放不再使用的内存
    ❻。最后，函数返回链表头节点的地址 ❼。
- en: 'We can adapt this code to use information other than the node’s index for deletion.
    If we have the value of the node to delete, we could update the loop conditions
    ❸ to remove the first node with that value:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调整这段代码，使用节点的其他信息进行删除。如果我们有待删除节点的值，可以更新循环条件 ❸，以删除第一个具有该值的节点：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, we need to reverse the order of comparison and check if `current`
    is `null` `before accessing its value. Similarly, if we need to delete a node
    given a pointer to it, we could compare the address stored in that pointer to
    the address of the current node.`
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要颠倒比较的顺序，首先检查`current`是否为`null`，然后再访问它的值。类似地，如果我们需要通过指针删除某个节点，可以将该指针存储的地址与当前节点的地址进行比较。
- en: '[PRE7] DoublyLinkedListNode {     Type: Value     DoublyLinkedListNode: next     DoublyLinkedListNode:
    previous } [PRE8]`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7] 双向链表节点 {     类型: 值     双向链表节点: 下一个     双向链表节点: 上一个 } [PRE8]'
