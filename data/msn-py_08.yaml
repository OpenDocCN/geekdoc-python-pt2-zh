- en: '**8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8'
- en: REPAIRING THE SPACE STATION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**修复空间站**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'While wandering around the space station, you must have noticed that some things
    don’t look quite right. To get the program up and running quickly, we used the
    `EXPLORER` section to display the rooms. However, it has a few drawbacks:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在空间站内四处漫游时，你一定注意到有些地方看起来不太对。为了快速启动程序，我们使用`EXPLORER`部分来显示房间。然而，它也有一些缺点：
- en: Sometimes a blank space is shown beneath the scenery because there’s no floor
    there.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，场景下方会显示一片空白，因为那里没有地板。
- en: When you walk to the front of the room, the front wall hides the astronaut.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你走到房间前方时，前墙会遮挡住宇航员。
- en: The astronaut’s legs disappear when walking to the back of the screen.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宇航员的腿在走到屏幕后方时消失。
- en: The rooms are all drawn in the top left of the game window. This makes it look
    uneven and inconsistent, because there’s much more space on the right of the rooms
    than on the left, and wider rooms leave less space on the right than narrow rooms
    do.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有房间都绘制在游戏窗口的左上角。这让它看起来不均匀且不一致，因为房间右边的空间远比左边的多，宽的房间在右侧的空间比窄房间少。
- en: There are no shadows, making it harder to understand the position of objects
    in the room.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有阴影，导致更难理解房间中物体的位置。
- en: In this chapter, we’ll fix these glitches and also add a function for displaying
    messages at the top of the window. These messages will give players information
    about the space station and their progress in the game.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将修复这些故障，并添加一个在窗口顶部显示信息的函数。这些信息将向玩家提供有关空间站以及他们在游戏中进展的情况。
- en: As you read through the chapter, you’ll learn how to send information to a Python
    function and discover how to draw rectangles using Pygame Zero. By the end of
    the chapter, the space station will look great!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在你阅读本章时，你将学会如何将信息传递给Python函数，并发现如何使用Pygame Zero绘制矩形。到本章结束时，空间站将变得很棒！
- en: '**SENDING INFORMATION TO A FUNCTION**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将信息传递给一个函数**'
- en: 'For the first time, we’ll need to send information to a function. You’ve already
    seen how to send information to the `print()` function by putting it between the
    parentheses. For example, you can output a message like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次，我们需要将信息传递给函数。你已经看过如何通过将信息放入括号中传递给`print()`函数。例如，你可以像这样输出一条信息：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When that instruction runs, the `print()` function receives information you
    put in the brackets, and displays it in the command line window or the Python
    shell.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当该指令运行时，`print()`函数接收你放入括号中的信息，并在命令行窗口或Python Shell中显示出来。
- en: We can also send information to functions we’ve made.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将信息传递给我们自己创建的函数。
- en: '**CREATING A FUNCTION THAT RECEIVES INFORMATION**'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个接收信息的函数**'
- en: To experiment with functions, we’ll build a function that adds two numbers that
    we send it. Click **File** ▸ **New** to open a new window, and enter the program
    in [Listing 8-1](ch08.xhtml#ch08list1).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实验函数，我们将构建一个可以将两个数字相加的函数。点击**文件** ▸ **新建**打开一个新窗口，并在[清单8-1](ch08.xhtml#ch08list1)中输入程序。
- en: '*listing8-1.py*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-1.py*'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 8-1: Sending information to a function*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单8-1：将信息传递给一个函数*'
- en: Save the program as *listing8-1.py*. Because it doesn’t use any Pygame Zero
    features, you can run it by clicking **Run** ▸ **Run Module** or by pressing F5\.
    (If you do run it using Pygame Zero, the results will appear in the command line
    window, and the game window will be empty.)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing8-1.py*。因为它没有使用任何Pygame Zero功能，你可以通过点击**运行** ▸ **运行模块**或按F5来运行它。（如果使用Pygame
    Zero运行，结果会显示在命令行窗口，游戏窗口将为空。）
- en: 'When you run the program, you should see the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，你应该能看到以下输出：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We create a new function called `add()` ➊. After we’ve defined `add()`, we can
    run it by using its name ➍ and send it numbers by putting them in the parentheses,
    using commas between them ➍. The function will then add those two numbers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`add()`的新函数➊。在定义了`add()`之后，我们可以通过使用其名称➍来运行它，并通过将数字放入括号中，使用逗号分隔它们➍，向它发送数字。然后，函数会将这两个数字相加。
- en: '**HOW IT WORKS**'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: 'To enable the function to receive the numbers, we give it two variables to
    store the numbers in when we define it. I’ve called them `first_number` and `second_number`
    ➊ to make the program easier to understand, but the variable names could be anything.
    These are local variables: they only work inside this function.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使函数能够接收数字，我们在定义它时给它提供了两个变量来存储这些数字。我将它们命名为`first_number`和`second_number`➊，以便让程序更容易理解，但这些变量名可以是任何名字。这些是局部变量：它们只在这个函数内部有效。
- en: When you use the function, it takes the first item it receives and puts it into
    the variable `first_number`. The second item goes into `second_number`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用这个函数时，它会获取接收到的第一个项目，并将其放入变量`first_number`中。第二个项目会放入`second_number`中。
- en: Of course, it doesn’t matter which order you add two numbers in, so it doesn’t
    matter what order you send the numbers in. The instructions `add(5, 7)` and `add(7,
    5)` give the same result. But some functions will need you to send the information
    in the same order the function expects to receive it. For example, if the function
    were subtracting numbers, you’d get a different result if you sent the numbers
    in the wrong order. The only way to know what information a function expects to
    receive is to take a look at its code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，两个数字相加的顺序并不重要，所以传递数字的顺序也不重要。指令`add(5, 7)`和`add(7, 5)`会得到相同的结果。但有些函数需要你按照函数预期接收信息的顺序来传递参数。例如，如果函数是做减法运算的，那么如果你传递数字的顺序错误，你将得到不同的结果。知道函数期望接收什么信息的唯一方法是查看它的代码。
- en: The body of the function is quite simple. It creates a new variable called `total`,
    which stores the result of adding the two numbers ➋. The program then prints a
    line that contains the first number, a plus sign, the second number, an equal
    sign, and the total ➌.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 函数体非常简单。它创建了一个新变量`total`，用于存储两个数字相加的结果➋。然后程序打印一行，内容包括第一个数字、加号、第二个数字、等号和总和➌。
- en: In the last three instructions, we send the function three pairs of numbers
    to add ➍.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后三条指令中，我们将三个数字对传递给函数进行加法运算➍。
- en: This simple demonstration shows you how information (or *arguments*) can be
    sent to a function. You can make functions that take more arguments than just
    two, and even take lists, dictionaries, or images. Functions make it easy to reuse
    sets of instructions, and sending arguments means we can reuse those instructions
    with different information. For example, [Listing 8-1](ch08.xhtml#ch08list1) uses
    the same `print()` instruction three times, to display the sum of three different
    number pairs. In this case, we’ve avoided repeating the `print()` instruction
    and the one that sets up the `total` variable. More sophisticated functions can
    avoid repeating a lot of code, and this can make the program much easier to write
    and understand.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的演示向你展示了如何将信息（或*参数*）传递给函数。你可以创建接受比两个参数更多参数的函数，甚至可以接受列表、字典或图像。函数使得重复使用指令集变得简单，而传递参数意味着我们可以使用不同的信息重复使用这些指令。例如，[清单
    8-1](ch08.xhtml#ch08list1)使用了三次相同的`print()`指令，来显示三个不同数字对的和。在这种情况下，我们避免了重复使用`print()`指令和设置`total`变量的指令。更复杂的函数可以避免重复大量代码，这使得程序更容易编写和理解。
- en: '**TRAINING MISSION #1**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**训练任务 #1**'
- en: Try modifying the program to subtract one number from another rather than adding.
    What happens when you change the order of the numbers you send to the new function?
    You might want to change more than just the calculation to make sure the function
    is easy to use.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试修改程序，使其从一个数字中减去另一个数字，而不是加法运算。当你改变传递给新函数的数字顺序时，会发生什么呢？你可能需要修改的不仅仅是计算部分，确保函数易于使用。
- en: Now we’re ready to add some new functions to *Escape* to draw objects on the
    space station.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备向*Escape*游戏添加一些新函数，用来在空间站上绘制物体。
- en: '**ADDING VARIABLES FOR SHADOWS, WALL TRANSPARENCY, AND COLORS**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加阴影、墙壁透明度和颜色的变量**'
- en: To fix our space station, we’ll create new display functions for the *Escape*
    game, using our newfound knowledge of functions. Before we make these new functions,
    we need to set up new variables for the functions to use.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复我们的空间站，我们将使用新学到的函数知识，为*Escape*游戏创建新的显示函数。在创建这些新函数之前，我们需要为函数使用设置新的变量。
- en: Open *listing7-6.py*, the last listing you saved in [Chapter 7](ch07.xhtml#ch07).
    Find the `VARIABLES` section near the start of the program, and add the new lines
    shown in [Listing 8-2](ch08.xhtml#ch08list2). Save the program as *listing8-2.py*.
    As always, it’s a good idea to run the program (using pgzrun listing8-2.py) to
    check for any new errors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *listing7-6.py*，这是你在[第7章](ch07.xhtml#ch07)保存的最后一个列表。在程序的开头找到 `VARIABLES`
    部分，并添加[列表 8-2](ch08.xhtml#ch08list2)中显示的新行。将程序保存为 *listing8-2.py*。像往常一样，运行程序（使用
    pgzrun listing8-2.py）检查是否有新的错误。
- en: '*listing8-2.py*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-2.py*'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 8-2: Adding the variables needed for the new display functions*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-2：为新的显示函数添加所需的变量*'
- en: We add a `PLAYER_SHADOW` dictionary ➊ that’s similar to the `PLAYER` dictionary.
    It contains animation frames for the astronaut’s shadow on the floor. As the astronaut
    moves, the shadow also changes shape. The `player_image_shadow` ➋ stores the astronaut’s
    current shadow, like the `player_image` variable that stores the astronaut’s current
    animation frame (or the standing image).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个与 `PLAYER` 字典类似的 `PLAYER_SHADOW` 字典 ➊。它包含了宇航员阴影的动画帧。当宇航员移动时，阴影的形状也会发生变化。`player_image_shadow`
    ➋ 存储着当前的宇航员阴影，就像 `player_image` 变量存储当前的宇航员动画帧（或站立图像）。
- en: Later in this chapter, we’ll add animation that fades out the front wall when
    you walk behind it so you can still see the astronaut. Here, we set up a list
    of the animation frames ➌ and a `wall_transparency_frame` variable to remember
    the one that’s being shown now ➍. You’ll learn more about how these work later
    on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，我们将添加动画，使得当你走到前墙后面时，前墙会渐隐，这样你仍然可以看到宇航员。在这里，我们设置了一个包含动画帧的列表 ➌ 和一个 `wall_transparency_frame`
    变量，用来记住当前显示的动画帧 ➍。你稍后将学习更多关于这些是如何工作的。
- en: 'We’ve also set up some names that we can use to refer to color numbers ➎. Colors
    in Pygame Zero are stored as tuples. A tuple is like a list whose content you
    can’t change, and it uses parentheses instead of square brackets. You’ve seen
    tuples used for coordinates when drawing on the screen (see [Chapter 1](ch01.xhtml#ch01)).
    Colors are stored as three numbers that specify the amount of red, green, and
    blue in the color, in that order. The scale for each color ranges from 0 to 255\.
    This color is bright red:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了一些名称，可以用来引用颜色编号 ➎。Pygame Zero 中的颜色存储为元组。元组像一个列表，但其中的内容不可更改，并且使用圆括号而不是方括号。你已经在绘制屏幕坐标时看到过元组的使用（见[第1章](ch01.xhtml#ch01)）。颜色作为三个数字存储，分别指定了颜色中的红色、绿色和蓝色的量，顺序是这样的。每种颜色的范围从
    0 到 255。这个颜色是亮红色：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The red is at its maximum (255), and there’s no green (0) or blue (0) in the
    color.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 红色达到了最大值（255），而绿色（0）和蓝色（0）则没有出现在颜色中。
- en: Because we’ve set up these color variables, we can now use the name `BLACK`
    instead of using the tuple `(0, 0, 0)` to represent black. Using color names will
    make the program easier to read.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经设置了这些颜色变量，现在可以使用名称`BLACK`来代替使用元组`(0, 0, 0)`来表示黑色。使用颜色名称会让程序更易于阅读。
- en: '[Table 8-1](ch08.xhtml#ch08tab1) shows you some of the color combinations that
    you might want to use in your programs. You can also try different numbers to
    invent your own colors.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 8-1](ch08.xhtml#ch08tab1)展示了一些你可能在程序中使用的颜色组合。你也可以尝试不同的数字，发明你自己的颜色。'
- en: '**Table 8-1:** Some Example RGB Color Numbers'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 8-1：** 一些示例 RGB 颜色值'
- en: '| **Red** | **Green** | **Blue** | **Description** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **红色** | **绿色** | **蓝色** | **描述** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 255 | 0 | 0 | Bright red |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 255 | 0 | 0 | 亮红色 |'
- en: '| 0 | 255 | 0 | Bright green |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 255 | 0 | 亮绿色 |'
- en: '| 0 | 0 | 255 | Bright blue |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 255 | 亮蓝色 |'
- en: '| 0 | 0 | 50 | Very dark blue (nearly black!) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 50 | 极暗蓝色（几乎是黑色！） |'
- en: '| 255 | 255 | 255 | White (all the colors at maximum strength) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 255 | 255 | 255 | 白色（所有颜色的最大强度） |'
- en: '| 255 | 255 | 150 | Creamy yellow (slightly less blue than white) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 255 | 255 | 150 | 奶油黄色（比白色少一点蓝色） |'
- en: '| 230 | 230 | 230 | Silver (a slightly toned-down white) |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 230 | 230 | 230 | 银色（稍微调暗的白色） |'
- en: '| 200 | 150 | 200 | Lilac |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 200 | 150 | 200 | 淡紫色 |'
- en: '| 255 | 100 | 0 | Orange (maximum red with a dash of green) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 255 | 100 | 0 | 橙色（最大红色，略带绿色） |'
- en: '| 255 | 105 | 180 | Pink |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 255 | 105 | 180 | 粉色 |'
- en: '**DELETING THE EXPLORER SECTION**'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**删除资源管理器部分**'
- en: We need to add a new `DISPLAY` section with some new functions that will improve
    the game’s appearance onscreen. The `EXPLORER` section has enabled us to get up
    and running quickly, but we’re going to build a new and better `draw()` function
    in this chapter that replaces the one we’ve used so far. To avoid any problems
    caused by `EXPLORER` code still being in the program, we’re going to remove it.
    Your `EXPLORER` section might have more or fewer lines than mine does in [Figure
    8-1](ch08.xhtml#ch08fig1), depending on whether you deleted some of it in earlier
    chapters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个新的 `DISPLAY` 部分，其中包含一些新的函数，将改善游戏在屏幕上的显示效果。`EXPLORER` 部分帮助我们快速启动了程序，但我们将在本章中构建一个新的、更好的
    `draw()` 函数，替代我们目前使用的那个。为了避免程序中仍然残留 `EXPLORER` 代码带来的问题，我们将删除它。你的 `EXPLORER` 部分可能比我的
    [图 8-1](ch08.xhtml#ch08fig1) 中的多一些或少一些，具体取决于你是否在前几章删除了一些内容。
- en: 'To delete the entire `EXPLORER` section, follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除整个 `EXPLORER` 部分，请按照以下步骤操作：
- en: Find the `EXPLORER` part of the program near the end of the code.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到代码接近结尾处的 `EXPLORER` 部分。
- en: Click the start of the `EXPLORER` comment box, hold down the mouse button, and
    drag the mouse to the bottom of the section (see [Figure 8-1](ch08.xhtml#ch08fig1)).
    The section ends just above where the `START` section begins.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `EXPLORER` 注释框的起始位置，按住鼠标按钮，并拖动鼠标至该部分的底部（见 [图 8-1](ch08.xhtml#ch08fig1)）。该部分结束的位置在
    `START` 部分开始之前。
- en: Press DELETE or BACKSPACE on the keyboard.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下键盘上的 DELETE 或 BACKSPACE 键。
- en: 'There’s one instruction in the `EXPLORER` section that we still need: it runs
    the `generate_map()` function to set up the room map for the first room. You’ll
    need to add that instruction to the end of the program as a single line, as shown
    in [Listing 8-3](ch08.xhtml#ch08list3).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `EXPLORER` 部分中有一个我们仍然需要的指令：它运行 `generate_map()` 函数来设置第一个房间的地图。你需要将该指令作为单独的一行添加到程序的末尾，如
    [清单 8-3](ch08.xhtml#ch08list3) 所示。
- en: '*listing8-3.py*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-3.py*'
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 8-3: Generating the map for the first room*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-3：为第一个房间生成地图*'
- en: The `generate_map()` line will run after the variables have been set up and
    will make the map for the current room.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`generate_map()` 这一行将在变量设置好后运行，并为当前房间生成地图。'
- en: '![image](../images/fig8-1.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-1.jpg)'
- en: '*Figure 8-1: Deleting the* EXPLORER *section*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：删除 EXPLORER 部分*'
- en: Save your new listing as *listing8-3.py* and run it using pgzrun listing8-3.py.
    If all is going to plan, you should see no error messages in the command line
    window. The game window shows the inky blackness of space because we haven’t added
    the new code to draw anything yet.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将新清单保存为 *listing8-3.py*，并使用 `pgzrun listing8-3.py` 运行它。如果一切顺利，命令行窗口应该不会显示任何错误信息。游戏窗口显示的是漆黑的太空，因为我们还没有添加绘制任何内容的新代码。
- en: '**ADDING THE DISPLAY SECTION**'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加 DISPLAY 部分**'
- en: Now we’ll add the new `DISPLAY` section to replace the deleted `EXPLORER` section.
    This section contains most of the code for updating the screen display. It includes
    code for drawing the room, showing messages, and changing the transparency of
    the front wall.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加新的 `DISPLAY` 部分，来替代已删除的 `EXPLORER` 部分。这个部分包含了更新屏幕显示的大部分代码。它包括绘制房间、显示信息和改变前墙透明度的代码。
- en: '**ADDING THE FUNCTIONS FOR DRAWING OBJECTS**'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加绘制对象的函数**'
- en: First, we’ll make some functions to draw an object, a shadow, or the player
    at a particular tile position. Between the `GAME LOOP` and `START` sections, add
    the new `DISPLAY` section shown in [Listing 8-4](ch08.xhtml#ch08list4) to your
    program. Save this program as *listing8-4.py* and run it using pgzrun listing8-4.py.
    Again, you won’t see anything in the game window yet.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一些函数，用于在特定的瓦片位置绘制对象、阴影或玩家。在 `GAME LOOP` 和 `START` 部分之间，添加新的 `DISPLAY`
    部分，如 [清单 8-4](ch08.xhtml#ch08list4) 所示。将该程序保存为 *listing8-4.py* 并使用 `pgzrun listing8-4.py`
    运行。再次提醒，游戏窗口中还不会显示任何内容。
- en: If there are any errors in the command line window, you can use them to help
    you fix the program. It’s better to test as you add code to the program than to
    add a lot of code and not know where the mistakes might be.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令行窗口中有任何错误，你可以利用它们来帮助修复程序。最好在添加代码时进行测试，而不是一次性添加大量代码后再去找错误。
- en: '*listing8-4.py*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-4.py*'
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 8-4: Adding the first functions in the* DISPLAY *section*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-4：在 DISPLAY 部分添加第一个函数*'
- en: 'The first new function, `draw_image()` ➊, draws a given image on the screen.
    When we use it, we give it the image we want to draw and the *y* and *x* tile
    positions of the object in the room. The function will work out where on the screen
    to draw the image (the pixel position), based on the tile position in the room.
    For example, we might use the function like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新的函数 `draw_image()` ➊ 用于在屏幕上绘制指定的图像。当我们使用它时，我们会传入要绘制的图像和物体在房间中的 *y* 和 *x*
    瓷砖位置。该函数会根据房间中的瓷砖位置计算出在屏幕上绘制图像的位置（像素位置）。例如，我们可以这样使用这个函数：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This line draws the player image at position *y* = 5 and *x* = 2 in the room.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将玩家的图像绘制在房间中位置 *y* = 5 和 *x* = 2 处。
- en: When we define the `draw_image()` function, we set it up to give the image the
    name `image`, put the *y* position into the `y` variable, and put the *x* position
    into the `x` variable ➊. Although the `draw_image()` function is several lines
    long, its only instruction is `screen.blit()`, which draws the image at the position
    we specify ➋. This instruction is virtually the same as the one we used in the
    old `EXPLORER` section, so take a look at [Chapter 3](ch03.xhtml#ch03) for a refresher
    on how it works.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义 `draw_image()` 函数时，我们设置它来接收图像名称 `image`，将 *y* 位置赋值给 `y` 变量，将 *x* 位置赋值给
    `x` 变量 ➊。虽然 `draw_image()` 函数有几行代码，但它的唯一指令是 `screen.blit()`，该指令根据我们指定的位置绘制图像 ➋。这个指令几乎与我们在旧版
    `EXPLORER` 部分中使用的相同，所以请查看 [第 3 章](ch03.xhtml#ch03) 以复习它的工作原理。
- en: '**TIP**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Make sure all the parentheses are in the correct places. You need a pair around
    all the `screen.blit()` arguments and another pair around the *y* and *x* positions
    because they make up a single tuple. You also need a pair around the multiplication
    parts of the position calculations. If the program doesn’t work, start checking
    for errors by counting the opening and closing parentheses to make sure you have
    the same number of each of them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有括号的位置正确。你需要在所有 `screen.blit()` 参数周围加上一对括号，并且在 *y* 和 *x* 位置的括号周围也要加上一对，因为它们组成一个元组。你还需要在位置计算的乘法部分加上一对括号。如果程序无法运行，首先检查错误时，要数一数开括号和闭括号的数量，确保它们的数量相同。
- en: We then add a new `draw_shadow()` function ➌. This is similar to the function
    for drawing an image, except that the image’s height is not subtracted when calculating
    its onscreen position. This is what places the shadow *below* the main image.
    [Figure 8-2](ch08.xhtml#ch08fig2) shows the astronaut and their shadow based on
    the same tile position. Remember that the *y* position given to `screen.blit()`
    is for the top edge of the image.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加了一个新的 `draw_shadow()` 函数 ➌。这个函数与绘制图像的函数类似，不同之处在于计算图像在屏幕上的位置时，并不会减去图像的高度。这就是将阴影绘制在主图像
    *下方* 的原因。[图 8-2](ch08.xhtml#ch08fig2) 显示了基于相同瓷砖位置的宇航员和他们的阴影。请记住，传递给 `screen.blit()`
    的 *y* 位置是图像的顶部边缘。
- en: '![image](../images/fig8-2.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-2.jpg)'
- en: '*Figure 8-2: Working out the position of the image and the shadow*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：计算图像和阴影的位置*'
- en: 'The third new function, `draw_player()`, draws the astronaut. First, it puts
    the correct astronaut animation frame into `player_image` ➍. It then uses the
    new `draw_image()` function to draw it ➎. The `draw_image()` function requires
    the following arguments:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个新的函数 `draw_player()` 用于绘制宇航员。首先，它将正确的宇航员动画帧放入 `player_image` ➍。然后使用新的 `draw_image()`
    函数来绘制 ➎。`draw_image()` 函数需要以下参数：
- en: The variable `player_image`, which contains the image to draw.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量 `player_image` 包含需要绘制的图像。
- en: The result after adding the global variables for `player_y` and `player_offset_y`.
    This is the *y* position in tiles, which might include a decimal part (such as
    5.25).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `player_y` 和 `player_offset_y` 变量相加后的结果。这是 *y* 位置的瓷砖数，可能包括小数部分（例如 5.25）。
- en: The result after adding `player_x` and `player_offset_x` for the *x* position
    in tiles. (See “[Understanding the Movement Code](ch07.xhtml#lev96)” on [page
    119](ch07.xhtml#page_119) for more information on how the offset variables are
    used for animation.)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `player_x` 和 `player_offset_x` 相加后的结果，用于计算 *x* 位置的瓷砖数。（有关如何使用偏移变量进行动画的更多信息，请参见“[理解移动代码](ch07.xhtml#lev96)”第
    [119 页](ch07.xhtml#page_119)）
- en: 'We use similar code to draw the player’s shadow: the correct animation frame
    from the `PLAYER_SHADOW` dictionary is put into `player_image_shadow` ➏. Then
    the `draw_shadow()` function is used to draw it ➐. The `draw_shadow()` function
    uses the same tile positions as the `draw_image()` function.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用类似的代码来绘制玩家的阴影：将正确的动画帧从 `PLAYER_SHADOW` 字典中取出并放入 `player_image_shadow` ➏。然后使用
    `draw_shadow()` 函数将其绘制出来 ➐。`draw_shadow()` 函数使用与 `draw_image()` 函数相同的瓷砖位置。
- en: '**DRAWING THE ROOM**'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**绘制房间**'
- en: Now that we’ve created the functions for drawing objects and the player, we
    can add the code to draw the room. The new `draw()` function in [Listing 8-5](ch08.xhtml#ch08list5)
    adds shadows for scenery and the player, and fixes the visual glitches we saw
    previously.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了绘制对象和玩家的函数，可以添加绘制房间的代码了。[列表8-5](ch08.xhtml#ch08list5)中的新`draw()`函数为场景和玩家添加了阴影，并修复了之前看到的视觉故障。
- en: Add the new code at the end of the `DISPLAY` section, save your program as *listing8-5.py*,
    and run it using pgzrun listing8-5.py. As if you’ve flicked the lights on, the
    shadows appear in front of the objects. The game won’t look quite right yet because
    all the rooms will be drawn in the top left of the window, and sometimes a room
    won’t be cleared properly when you leave it. We’ll fix this in a moment. At this
    point, you shouldn’t see any error messages.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的代码添加到`DISPLAY`部分的末尾，将程序保存为*listing8-5.py*，并使用`pgzrun listing8-5.py`运行它。就像你打开了灯光，阴影出现在物体前面。游戏看起来还不完全正确，因为所有房间都会绘制在窗口的左上角，有时当你离开房间时，房间不会被正确清除。我们稍后会解决这个问题。在这一点上，你不应该看到任何错误信息。
- en: '*listing8-5.py*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-5.py*'
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 8-5: The new* draw() *function*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表8-5：新的* draw() *函数*'
- en: As with the movement code in [Chapter 7](ch07.xhtml#ch07), you don’t need to
    know how the `draw()` function works, even if you want to customize the program.
    I will explain the `draw()` function in the next section, so if you don’t want
    to know how it works just yet, skip to “[Positioning the Room on Your Screen](ch08.xhtml#lev112)”
    on [page 141](ch08.xhtml#page_141).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与[第7章](ch07.xhtml#ch07)中的移动代码一样，即使你想自定义程序，你也不需要知道`draw()`函数是如何工作的。我将在下一部分解释`draw()`函数，所以如果你暂时不想知道它是如何工作的，可以跳到[“在屏幕上定位房间”](ch08.xhtml#lev112)，第141页([page
    141](ch08.xhtml#page_141))。
- en: '**UNDERSTANDING THE NEW DRAW() FUNCTION**'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**理解新的 DRAW() 函数**'
- en: You can think of the new `draw()` function as a more elaborate version of the
    code used for the `EXPLORER` section previously. I’ll give you an overview of
    how each bit works.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将新的`draw()`函数看作是之前`EXPLORER`部分代码的一个更复杂版本。我将为你概述每一部分的工作原理。
- en: '**Clearing the Game Arena**'
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**清理游戏场地**'
- en: The program starts by clearing the game arena ➊ where the space station will
    be drawn. It does this by drawing a big red rectangle, wiping out the previous
    screen display. The areas at the top and the bottom that give the player information
    are separate, so they’re not changed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通过清理游戏场地 ➊ 来开始绘制太空站的位置。它通过绘制一个大红色矩形来清除之前的屏幕显示。顶部和底部的区域提供玩家信息是独立的，因此它们不会被更改。
- en: 'There are two steps for putting a rectangle on the screen. First, you create
    the shape using a Pygame object called a *Rect*, which works like this (don’t
    type this in):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将矩形显示在屏幕上有两个步骤。首先，你使用一个名为*Rect*的Pygame对象来创建这个形状，它的工作方式如下（不要键入此内容）：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The name can be almost anything you like, but I use the name `box` in my programs.
    The position and size are tuples, so they have parentheses around them.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 名称几乎可以是任何你喜欢的名字，但在我的程序中，我使用`box`这个名字。位置和大小是元组，因此它们用括号括起来。
- en: 'Second, you draw the Rect you created on the screen by using an instruction
    like this (again, don’t type this in):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你通过使用类似于以下指令的代码在屏幕上绘制你创建的矩形（再次提醒，不要键入此内容）：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first item in parentheses is the `box` Rect you previously created. The
    second item is the color of the rectangle you want to draw. This can be a tuple
    of the red, green, and blue numbers that make up the number. In [Listing 8-5](ch08.xhtml#ch08list5),
    I’ve used the name `RED`, which we set up in the `VARIABLES` section earlier.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的第一个项目是你之前创建的 `box` 矩形。第二个项目是你想要绘制的矩形的颜色。这可以是由红色、绿色和蓝色构成的数字元组。在[列表8-5](ch08.xhtml#ch08list5)中，我使用了我们在`VARIABLES`部分之前设置的`RED`名称。
- en: You can also use a Rect shape to create a *clipping area* ➋. This is like an
    invisible window through which you view the screen. If the program draws something
    outside the window, it can’t be seen. I’ve set up a clipping area that’s the height
    of the room to stop the player’s shadow from spilling out of the bottom of the
    game when they’re in the front doorway.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用矩形形状创建一个*裁剪区域* ➋。这就像一个不可见的窗口，你通过它查看屏幕。如果程序绘制的东西超出了这个窗口，它就无法被看到。我设置了一个裁剪区域，区域的高度与房间一致，以防止玩家的阴影在站在前门口时从游戏底部溢出。
- en: '**Drawing the Room**'
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**绘制房间**'
- en: The room is drawn in two stages. First, the program draws the floor tiles and
    anything that the player can walk on ➌. Drawing them first enables scenery, the
    player, and shadows to be drawn on top of them. This solves the problem of black
    holes appearing under scenery, because there will be floor tiles in those spaces
    before the scenery is drawn on top.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 房间分为两个阶段绘制。首先，程序绘制地板瓷砖和玩家可以走动的区域 ➌。先绘制它们能使景物、玩家和阴影绘制在其上面。这解决了景物下出现黑洞的问题，因为在景物绘制之前，地板瓷砖已经存在于这些空间中。
- en: Second, the program adds the scenery in the room, including its shadows ➎, using
    new loops. Because this is drawn after the floor for the whole room has been drawn,
    the shadows will be drawn on top of floor tiles and items on the floor. The shadows
    are transparent, so you can still see the object underneath the shadow. The scenery
    drawing loops also add transparent walls ➏ and draw the player on top of the floor
    ➒.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，程序使用新的循环添加房间中的景物，包括它的阴影 ➎。由于这些是在整个房间的地板绘制完之后绘制的，阴影会覆盖在地板瓷砖和地面上的物品之上。阴影是透明的，因此你仍然可以看到阴影下方的物体。景物绘制的循环还会添加透明墙
    ➏，并将玩家绘制在地面之上 ➒。
- en: As always, the room is drawn from back to front to ensure that objects near
    the front of the room appear to be in front of objects near the back.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，房间是从后到前绘制的，以确保房间前方的物体看起来位于房间后方物体之前。
- en: We’ve also added a small chunk of code for a special object that’s only used
    in one place in the game. Room 26 has a pressure pad on the floor that you might
    want to drop things on when you’re playing the game (maybe heavy things or things
    you can make heavy . . .). The special code here ensures that both the floor pad
    and the object on it are visible.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一小段代码，用于一个在游戏中只会在一个地方使用的特殊物体。26号房间的地板上有一个压力垫，你在游戏中可能想要将物品放在上面（也许是重物，或者是你可以让它变重的物品...）。这里的特殊代码确保了地板垫和它上面的物体都能被显示出来。
- en: 'After the floor tiles have been drawn, the `draw()` function checks whether
    the current room is room 26: if it is, it draws the floor pad and then any object
    that is on top of it ➍.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在地板瓷砖绘制完后，`draw()`函数会检查当前房间是否是26号房间：如果是，它会先绘制地板垫，然后绘制任何在其上的物体 ➍。
- en: '**RED ALERT**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色警报**'
- en: '*If you’re customizing the game with your own map, delete this piece of code
    to remove the floor pad from the game. Start with the comment line* ➍*, and remove
    the instructions down to (and including) the* draw_image(objects[image_on_pad][0],
    8, 2) *instruction.*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你正在用自己的地图自定义游戏，请删除这段代码以移除游戏中的地板垫。从注释行* ➍*开始，并删除直到（包括）*draw_image(objects[image_on_pad][0],
    8, 2) *指令。*'
- en: '**Making the Front Wall Transparent**'
  id: totrans-123
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使前墙透明**'
- en: When the program is drawing the front row of the room (when the `y` loop equals
    `room_height - 1)`, it checks whether it needs to draw a semitransparent wall
    instead of the solid wall object taken from the room map ➏. The semitransparent
    wall is used if the player is standing behind it (see [Figure 8-3](ch08.xhtml#ch08fig3)).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序绘制房间的前排（当`y`循环等于`room_height - 1`时），它会检查是否需要绘制半透明墙壁，而不是从房间地图中获取的实体墙物体 ➏。如果玩家站在墙后面，则使用半透明墙壁（见[图
    8-3](ch08.xhtml#ch08fig3)）。
- en: On the planet surface, the program makes the whole wall transparent. Inside
    the space station, a transparent wall panel is used only if it’s *not* in one
    of the bottom corner positions (see [Figure 8-3](ch08.xhtml#ch08fig3)). The corners
    always use a solid wall panel. The reason is that it looks odd if you see the
    solid edge wall start in the second row from the bottom.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在行星表面，程序使整个墙体透明。在太空站内部，只有当透明墙面板不位于底部角落位置时才使用透明墙面板（见[图 8-3](ch08.xhtml#ch08fig3)）。角落位置总是使用实体墙面板。原因是，如果你看到实体墙面板从倒数第二行开始，效果看起来会很奇怪。
- en: Later on, we’ll add the code to animate the transparency on the wall, by changing
    the number in `wall_transparency_frame`. You won’t see the semitransparent wall
    yet in the game.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后我们将添加代码，通过改变`wall_transparency_frame`中的数值来为墙壁添加透明度动画。此时在游戏中你还看不到半透明的墙壁。
- en: '![image](../images/fig8-3.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-3.jpg)'
- en: '*Figure 8-3: The transparent wall at the front of the room, as seen in the
    final game*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-3：如最终游戏中所见，房间前面的透明墙*'
- en: '**Adding Shadows**'
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加阴影**'
- en: If an object has a shadow, the shadow is taken from the `objects` dictionary
    and put into `shadow_image` ➐. Then the program checks whether it should use `half_shadow`
    or `full_shadow`, which fill half a tile or a whole tile respectively. These two
    standard shadows are used with blocky items (such as electrical units and walls)
    that don’t need a distinctive shadow outline. The program checks whether the `shadow_image`
    is in a list that contains those two standard images ➑.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个物体有阴影，那么阴影会从`objects`字典中取出并放入`shadow_image` ➐。然后程序检查是否应该使用`half_shadow`或`full_shadow`，分别填充半块或整块瓷砖。这两种标准阴影适用于不需要特殊阴影轮廓的方块状物品（如电气单元和墙壁）。程序会检查`shadow_image`是否位于一个包含这两种标准图像的列表中
    ➑。
- en: That’s a simple, and easy-to-read, way to check whether `shadow_image` is one
    of two things. If you’re checking for three or more things, this technique can
    make the program much easier to read than having lots of `if` comparisons using
    `==` and combining them with `or`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简单且易于阅读的方式，用来检查`shadow_image`是否是两种情况之一。如果你检查的是三种或更多的情况，使用这种技巧可以让程序比使用大量`if`比较和结合`==`与`or`更加易读。
- en: If the shadow is one of the standard images, the program then works out how
    wide the shadow should be in tiles. That is calculated by taking the width of
    the object casting the shadow and dividing it by the width of a tile (30 pixels).
    For example, an image that is 90 pixels wide will be 3 tiles wide.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果阴影是标准图像之一，程序将计算阴影应该有多宽，以瓷砖为单位。这是通过获取投射阴影的物体的宽度，并将其除以瓷砖的宽度（30像素）来计算的。例如，一个宽度为90像素的图像，将是3个瓷砖宽。
- en: 'The program then creates a loop to draw the standard shadow images, using the
    variable `z`. It starts at 0 and runs until the width of the shadow minus 1\.
    That’s because a `range` leaves out the last item: `range(0, 3)` would give us
    the numbers 0, 1, and 2\. The `z` values are added to the *x* position from the
    main loop and are used to draw the shadow tiles. [Figure 8-4](ch08.xhtml#ch08fig4)
    shows an object with a width of 3 tiles. The `z` loop takes the values 0, 1, and
    2 to add the shadow in the correct place.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接着创建一个循环，用变量`z`来绘制标准阴影图像。`z`从0开始，一直到阴影宽度减去1。因为`range`不包括最后一项：`range(0, 3)`会返回0、1和2这三个数值。`z`值会加到主循环中的*x*位置，并用于绘制阴影瓷砖。[图
    8-4](ch08.xhtml#ch08fig4)展示了一个宽度为3个瓷砖的物体。`z`循环取值0、1和2，用来把阴影绘制在正确的位置。
- en: By drawing the player in position after the floor has been laid, we make sure
    the astronaut’s legs don’t disappear when walking up the screen ➒.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在铺设地板后绘制玩家角色，确保了宇航员的腿部在屏幕上移动时不会消失 ➒。
- en: '![image](../images/fig8-4.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-4.jpg)'
- en: '*Figure 8-4: An object that is 3 tiles wide could have a standard shadow below
    it that is used three times.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-4：宽度为3个瓷砖的物体下方可以有一个标准阴影，这个阴影会被使用三次。*'
- en: The `draw()` function ends by turning off the clipping area that stopped shadows
    from spilling out of the bottom of the game area ➓.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数的最后，关闭了限制区域，避免阴影溢出游戏区域的底部 ➓。'
- en: '**POSITIONING THE ROOM ON YOUR SCREEN**'
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将房间定位到屏幕上的位置**'
- en: 'Now let’s fix the problem of the room appearing in the top left of your screen.
    The program uses two variables to position the room: `top_left_x` and `top_left_y`.
    At the moment, these are set to 100 and 150, which means the room is always drawn
    in the top left of the window. We’ll add some code that will change these variables
    depending on the size of the room so the room is drawn in the middle of the window
    (see [Figure 8-5](ch08.xhtml#ch08fig5)). The screen layout will look better, and
    it will make the game easier to play too.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们解决房间出现在屏幕左上角的问题。程序使用两个变量来定位房间：`top_left_x` 和 `top_left_y`。目前，这两个变量的值分别为100和150，这意味着房间总是绘制在窗口的左上角。我们将添加一些代码，根据房间的大小改变这些变量的值，使房间居中显示在窗口中（见[图
    8-5](ch08.xhtml#ch08fig5)）。这样屏幕布局看起来会更好，也会让游戏更容易操作。
- en: '![image](../images/fig8-5.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-5.jpg)'
- en: '*Figure 8-5: A room centered in the window*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-5：房间居中显示在窗口中*'
- en: Add the new lines shown in [Listing 8-6](ch08.xhtml#ch08list6) to the end of
    the `generate_map()` function, which is in the `MAKE MAP` section of the program.
    Because they’re inside a function, you need to indent each line by four spaces.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将[清单 8-6](ch08.xhtml#ch08list6)中所示的新行添加到`generate_map()`函数的末尾，该函数位于程序的`MAKE
    MAP`部分。由于它们位于一个函数内，你需要将每行缩进四个空格。
- en: Save the program as *listing8-6.py* and run it using pgzrun listing8-6.py. As
    [Figure 8-5](ch08.xhtml#ch08fig5) shows, each room should be centered on the screen
    now.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序保存为*listing8-6.py*并使用pgzrun listing8-6.py运行。如[图8-5](ch08.xhtml#ch08fig5)所示，现在每个房间应该已经居中显示在屏幕上。
- en: '*listing8-6.py*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-6.py*'
- en: '[PRE11]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 8-6: Creating variables to put the room in the middle of the game
    window*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 8-6：创建变量将房间放置在游戏窗口的中央*'
- en: These instructions are inside the `generate_map()` function, which sets up the
    `room_map` list for each room when the player enters it. The `generate_map()`
    function now also sets up the `top_left_x` and `top_left_y` variables that remember
    where the room should be drawn in the window.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令位于`generate_map()`函数内，该函数在玩家进入每个房间时设置`room_map`列表。`generate_map()`函数现在还会设置`top_left_x`和`top_left_y`变量，记住房间应当在窗口中的绘制位置。
- en: The new code in [Listing 8-6](ch08.xhtml#ch08list6) starts by working out where
    the middle of the window is. The `HEIGHT` and `WIDTH` variables store the window’s
    size in pixels. Dividing them by 2 gives us the coordinates of the center of the
    window. We store these in the `center_y` ➊ and `center_x` ➋ variables.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 8-6](ch08.xhtml#ch08list6)中的新代码首先计算出窗口的中心位置。`HEIGHT`和`WIDTH`变量存储窗口的尺寸（像素）。将它们除以2可以得到窗口中心的坐标。我们将这些坐标存储在`center_y`
    ➊和`center_x` ➋变量中。'
- en: The program then works out how wide the image of the room is in pixels ➌. That
    will be the width of the room in tiles multiplied by the size of a tile. The result
    is stored in `room_pixel_width`. A similar calculation is done for the room height
    ➍.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接着计算房间图像的宽度（像素）➌。它将是房间的瓷砖数乘以单个瓷砖的大小。计算结果存储在`room_pixel_width`中。对于房间高度，程序进行类似的计算➍。
- en: To put the room image in the middle of the room, we want half the room to be
    to the left of the center line and half to the right. So we subtract half the
    room width in pixels from the center line ➎ and start drawing the room there.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将房间图像放置在房间的中央，我们希望房间的左半部分在中心线的左侧，右半部分在右侧。因此，我们从中心线➎开始，减去房间宽度的一半像素，然后在那里开始绘制房间。
- en: A similar calculation is used for `top_left_y` except we add 110 to the result
    ➏. We need to add 110 because our final screen layout will use an area at the
    top of the screen as an information panel. We nudge the room image down a bit
    to make room for the panel.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`top_left_y`，我们使用类似的计算方法，只是我们在结果上加上了110➏。我们需要加上110，因为最终的屏幕布局会在屏幕的顶部使用一个信息面板区域。我们稍微将房间图像向下移动一些，为面板腾出空间。
- en: '**MAKING THE FRONT WALL FADE IN AND OUT**'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使前墙逐渐显现与消失**'
- en: At this point, there are some dead spots in the game where the player can’t
    be seen. In the middle of the room, we can avoid that by making sure objects are
    not so tall that they obstruct the player. We need a tall wall at the front of
    the room, though.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，游戏中有一些死角，玩家在这些地方无法被看到。在房间中央，我们可以通过确保物体不太高以免遮挡玩家来避免这种情况。然而，我们仍然需要在房间前面放置一面高墙。
- en: 'Blocking the player with a wall at the front of the room can cause all sorts
    of problems: if you drop something, you won’t be able to find it, or if something
    is hurting you, you won’t be able to see it! The solution is to make the wall
    fade away when the player approaches it.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 用墙壁将玩家挡在房间前面可能会引发各种问题：如果你掉了什么东西，你将无法找到它；或者如果有什么东西在伤害你，你将看不见它！解决方法是让墙壁在玩家接近时逐渐消失。
- en: The `draw()` function already draws the front wall pillars using animation frames.
    The wall animation has five frames (numbered from 0 to 4) in the `PILLARS` list.
    The first frame is the solid wall, and the last frame shows the wall at its most
    translucent (see [Table 8-2](ch08.xhtml#ch08tab2)). As the animation frame number
    increases, the wall becomes more transparent. The current frame is stored in the
    variable `wall_transparency_frame`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数已经使用动画帧绘制了前墙的柱子。墙壁动画共有五帧（编号从0到4），存储在`PILLARS`列表中。第一帧是实心墙，而最后一帧显示的是墙壁最透明的状态（见[表8-2](ch08.xhtml#ch08tab2)）。随着动画帧数的增加，墙壁变得越来越透明。当前帧存储在变量`wall_transparency_frame`中。'
- en: Because of the way the transparency works in the images, when the transparent
    wall is drawn on top of the player, the player can be seen through it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于透明度在图像中的表现方式，当透明墙被绘制在玩家上方时，玩家将透过墙壁可见。
- en: '**Table 8-2:** The Animation Frames for the Front Wall'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**表8-2：前墙的动画帧**'
- en: '| **Frame number** | **0** | **1** | **2** | **3** | **4** |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **帧编号** | **0** | **1** | **2** | **3** | **4** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Image | ![image](../images/f0143-01.jpg) | ![image](../images/f0143-02.jpg)
    | ![image](../images/f0143-03.jpg) | ![image](../images/f0143-04.jpg) | ![image](../images/f0143-05.jpg)
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 图像 | ![image](../images/f0143-01.jpg) | ![image](../images/f0143-02.jpg)
    | ![image](../images/f0143-03.jpg) | ![image](../images/f0143-04.jpg) | ![image](../images/f0143-05.jpg)
    |'
- en: '[Listing 8-7](ch08.xhtml#ch08list7) shows the new function called `adjust_wall_transparency()`,
    which will fade the wall in and out. Add it at the end of the `DISPLAY` section,
    after the `draw()` function you just completed, and before the `START` section.
    You also need to add a line at the end of the program, outside the function, which
    will schedule it to run regularly. This line is also in [Listing 8-7](ch08.xhtml#ch08list7).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 8-7](ch08.xhtml#ch08list7) 展示了一个新函数 `adjust_wall_transparency()`，它会使墙壁渐显或渐隐。将它添加到
    `DISPLAY` 部分的末尾，紧接着你刚完成的 `draw()` 函数，并放在 `START` 部分之前。你还需要在程序的末尾、函数外部添加一行代码，安排它定期运行。这一行也在
    [Listing 8-7](ch08.xhtml#ch08list7) 中。'
- en: Save your updated program as *listing8-7.py* and run it using pgzrun listing8-7.py.
    If you walk behind the front wall, it now fades to transparent so you can be seen
    through it (see [Figure 8-3](ch08.xhtml#ch08fig3) earlier in this chapter). When
    you walk away again, the wall changes back to being solid again.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新后的程序保存为 *listing8-7.py* 并使用 pgzrun listing8-7.py 运行它。如果你走到前面的墙后面，它现在会渐变成透明，这样你就可以被看到（请参见本章前面的
    [Figure 8-3](ch08.xhtml#ch08fig3)）。当你再次走开时，墙壁会恢复为不透明。
- en: '*listing8-7.py*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-7.py*'
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 8-7: Making the front wall see-through when you approach it*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 8-7: 当你靠近前墙时让它变得透明*'
- en: The final line we added in [Listing 8-7](ch08.xhtml#ch08list7) makes the function
    `adjust_wall_``transparency()` run once every 0.05 seconds ➒. This makes the wall
    fade in or out as necessary as the player walks around the room.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [Listing 8-7](ch08.xhtml#ch08list7) 中添加的最后一行让 `adjust_wall_``transparency()`
    函数每 0.05 秒运行一次 ➒。这使得墙壁在玩家在房间里走动时根据需要渐显或渐隐。
- en: 'Let’s see how this new function works. If the player is standing behind the
    wall, the following two statements are true:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个新函数是如何工作的。如果玩家站在墙后面，以下两个语句成立：
- en: Their *y* position will be equal to `room_height - 2` ➊. As [Figure 8-6](ch08.xhtml#ch08fig6)
    shows, the bottom row of the map is `room_height - 1`. So we check whether the
    player is in the row above that.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的 *y* 位置将等于 `room_height - 2` ➊。正如 [Figure 8-6](ch08.xhtml#ch08fig6) 所示，地图的底行是
    `room_height - 1`。所以我们检查玩家是否在这一行之上。
- en: There is a piece of wall in the bottom row of the room that is in line with
    the player’s *x* position ➋. In [Figure 8-6](ch08.xhtml#ch08fig6), the red square
    marks a position where we can’t see the player. The bottom row in front of them
    contains a 1 for the wall. The green square shows where we can see the player,
    because they’re in the doorway. Here, the bottom row of the room map contains
    a 0.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在房间底行中，有一块墙与玩家的 *x* 位置对齐 ➋。 在 [Figure 8-6](ch08.xhtml#ch08fig6) 中，红色方块标记了一个我们无法看到玩家的位置。它们前方的底行包含一个表示墙壁的
    1。绿色方块显示了我们能看到玩家的位置，因为他们在门口。这里，房间底行地图包含 0。
- en: '![image](../images/fig8-6.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-6.jpg)'
- en: '*Figure 8-6: Working out whether the player is behind the wall*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 8-6: 判断玩家是否在墙后面*'
- en: If the player is behind the wall ➊ ➋ and the wall transparency is not set to
    maximum ➌, the wall transparency is increased by 1 ➍.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家在墙后面 ➊ ➋ 且墙壁的透明度没有设置为最大值 ➌，则墙壁的透明度增加 1 ➍。
- en: 'If either of the following is true, it means the player *isn’t* hidden by the
    wall:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下任一条件成立，则意味着玩家 *没有* 被墙壁遮挡：
- en: Their *y* position is less than `room_height - 2` ➎. The player can be seen,
    at least in part, if they’re farther back in the room.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的 *y* 位置小于 `room_height - 2` ➎。如果玩家离房间后面远一些，至少部分是可以被看到的。
- en: There is not a piece of wall in the bottom row of the room in line with their
    *x* position ➏.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与它们的 *x* 位置对齐的房间底行没有墙体 ➏。
- en: In these cases, if the wall transparency is set to more than the minimum ➐,
    it’s reduced by one ➑.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，如果墙壁的透明度设置超过最低值 ➐，它会减少 ➑。
- en: The `draw()` function uses the value of `wall_transparency_frame` to work out
    which image from the animation frames in the `PILLARS` list to use in the front
    row.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()` 函数使用 `wall_transparency_frame` 的值来计算从 `PILLARS` 列表中的动画帧中选择哪个图像用于前排。'
- en: The effect is that the wall gradually fades in and out, depending on whether
    the player is behind it or not. This fading happens fast enough that players won’t
    be delayed by it but not so fast that it vanishes instantly, which would be distracting.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 效果是墙壁会逐渐淡入淡出，取决于玩家是否站在墙后。这种淡入淡出的速度足够快，玩家不会被延迟，但也不会太快到让它瞬间消失，这样就不会分散注意力。
- en: '**DISPLAYING HINTS, TIPS, AND WARNINGS**'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**显示提示、技巧和警告**'
- en: There are times when the *Escape* game uses text to tell you what’s going on.
    For example, it might use text to tell you what happens when you do something
    with an object, or provide a description of it.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，*Escape*游戏会使用文本告诉你发生了什么。例如，它可能会使用文本告诉你当你对某个物体做了什么时发生了什么，或者为你提供该物体的描述。
- en: 'The final function in the `DISPLAY` section of the program writes messages
    at the top of the game window. There are two lines of text:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中`DISPLAY`部分的最终函数将消息写在游戏窗口的顶部。这里有两行文本：
- en: The first line, positioned at 15 pixels from the top of the window, tells players
    about what they’re doing. For example, it displays object descriptions and tells
    them what happens when they use the objects.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行，位于窗口顶部15像素的位置，告诉玩家他们正在做什么。例如，它显示物体描述，并告诉玩家当他们使用物体时会发生什么。
- en: The second line, positioned at 50 pixels from the top of the window, is for
    important messages.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行，位于窗口顶部50像素的位置，用于显示重要消息。
- en: The lines of text are separated like this so important messages don’t get covered
    up by less important messages. If the game needs to tell you about a life-threatening
    situation, you don’t want that message to be replaced with one that tells you
    about the new room you’ve entered!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文本行被这样分隔，以免重要消息被不那么重要的消息覆盖。如果游戏需要告诉你一个生死攸关的情况，你肯定不希望那个消息被告知你进入的新房间的消息所取代！
- en: Add the new code in [Listing 8-8](ch08.xhtml#ch08list8) to the end of the `DISPLAY`
    section, after where you added the wall transparency code in [Listing 8-7](ch08.xhtml#ch08list7).
    Save the listing as *listing8-8.py*. You can test it by running it with pgzrun
    listing8-8.py, but you won’t see any difference yet. In a moment, we’ll add some
    instructions to use this new `show_text()` function.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 将[列出8-8](ch08.xhtml#ch08list8)中的新代码添加到`DISPLAY`部分的末尾，在你添加墙壁透明代码之后（在[列出8-7](ch08.xhtml#ch08list7)中）。将该列表保存为*listing8-8.py*。你可以通过运行pgzrun
    listing8-8.py来测试它，但目前你还看不出任何区别。稍后，我们将添加一些指令，使用这个新的`show_text()`函数。
- en: '*listing8-8.py*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-8.py*'
- en: '[PRE13]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 8-8: Adding the text display function*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出8-8：添加文本显示功能*'
- en: 'We’ll use the `show_text()` ➊ function like this (don’t type this in):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像这样使用`show_text()` ➊函数（不要直接输入此内容）：
- en: '[PRE14]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The line number will be either 0 for the top row or 1 for the second row, which
    is reserved for important messages. At the start of the function, the message
    is put into the variable `text_to_show` and the row number goes into `line_number`
    ➊.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 行号将是0，表示第一行，或者是1，表示第二行，该行保留给重要消息。在函数开始时，消息被放入变量`text_to_show`中，行号放入`line_number`中➊。
- en: We use a list called `text_lines` to remember the vertical positions (in pixels)
    of the two lines of text ➋. We also define a box ➌ and fill it with black ➍, to
    clear the row of text before the new message is drawn.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为`text_lines`的列表来记录两行文本的垂直位置（以像素为单位）➋。我们还定义了一个框➌，并用黑色填充它➍，以便在绘制新消息之前清除文本行。
- en: Finally, we use the `screen.draw.text()` function in Pygame Zero to put the
    text on the screen ➎. This function takes the text, the text’s *x* and *y* position,
    and the text color. The position numbers go inside parentheses (they make up a
    tuple).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用Pygame Zero中的`screen.draw.text()`函数将文本显示在屏幕上➎。此函数需要文本、文本的* x *和* y *位置，以及文本颜色。位置数字放在括号内（它们组成一个元组）。
- en: In [Listing 8-8](ch08.xhtml#ch08list8) ➎, the *x* position is 20 pixels from
    the left, and the vertical position is taken from the `text_lines` list, using
    the number in `line_number` as the list index.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列出8-8](ch08.xhtml#ch08list8)中➎，* x *位置从左边起20像素，垂直位置取自`text_lines`列表，使用`line_number`中的数字作为列表索引。
- en: '**SHOWING THE ROOM NAME WHEN YOU ENTER THE ROOM**'
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进入房间时显示房间名称**'
- en: To test the `show_text()` function, let’s add the `start_room()` function, which
    displays the name of the room when you walk into it. Put this function in the
    `GAME LOOP` section before the `game_loop()` function, as shown in [Listing 8-9](ch08.xhtml#ch08list9).
    Save your program as *listing8-9.py*. When you run it, you won’t see anything
    new yet.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 `show_text()` 函数，让我们添加 `start_room()` 函数，它会在你走进房间时显示房间名称。将此函数放在 `GAME LOOP`
    部分，位于 `game_loop()` 函数之前，如 [列表 8-9](ch08.xhtml#ch08list9) 所示。保存你的程序为 *listing8-9.py*。当你运行它时，暂时不会看到任何新内容。
- en: '*listing8-9.py*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-9.py*'
- en: '[PRE15]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 8-9: Adding the* start_room() *function*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-9：添加* start_room() *函数*'
- en: 'This function uses the `room_name` variable, which we set up in the `generate_map``()`
    function. It contains the name of the current room, taken from the `GAME_MAP`
    list. The room name is combined with the text `"You are here: "` and is sent to
    the `show_text()` function.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数使用 `room_name` 变量，这是我们在 `generate_map()` 函数中设置的。它包含当前房间的名称，该名称来自 `GAME_MAP`
    列表。房间名称与文本 `"You are here: "` 结合，并发送到 `show_text()` 函数。'
- en: Now we need to set our new `start_room()` function to run whenever the player
    enters a new room. We included the code to do this in [Listing 7-6](ch07.xhtml#ch07list6)
    in [Chapter 7](ch07.xhtml#ch07), but we commented it out. Now we’re ready for
    it! Anywhere we have the code `#start_room()` we want to replace it with `start_room()`.
    That `#` is working as an “off switch,” telling Python to ignore the instruction.
    To turn the instruction on, we remove the `#` sign.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要设置新的 `start_room()` 函数，以便每当玩家进入新房间时运行。在 [第 7 章](ch07.xhtml#ch07) 的 [列表
    7-6](ch07.xhtml#ch07list6) 中，我们已经包含了这段代码，但将其注释掉了。现在，我们准备好了！在我们有 `#start_room()`
    代码的地方，我们希望将其替换为 `start_room()`。那个 `#` 充当了“关闭开关”，告诉 Python 忽略该指令。为了启用该指令，我们需要移除
    `#` 符号。
- en: 'Rather than manually finding all the lines that need to change, we’ll get IDLE
    to do it for us. Follow these steps, and refer to [Figure 8-7](ch08.xhtml#ch08fig7):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会手动查找所有需要更改的行，而是让 IDLE 为我们完成这项工作。请按照以下步骤操作，并参考 [图 8-7](ch08.xhtml#ch08fig7)：
- en: Click **Edit** ▸ **Replace** (or press CTRL-H) in IDLE to show the replace text
    dialog box.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 中点击 **编辑** ▸ **替换**（或按 CTRL-H）以显示替换文本对话框。
- en: 'Enter #start_room() into the Find box.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在“查找”框中输入 #start_room()。'
- en: Enter start_room() into the Replace With box.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“替换为”框中输入 start_room()。
- en: Click **Replace All**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **全部替换**。
- en: '![image](../images/fig8-7.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fig8-7.jpg)'
- en: '*Figure 8-7: Enabling the* start_room() *function when the player enters a
    new room*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-7：当玩家进入新房间时启用* start_room() *函数*'
- en: IDLE should replace the instruction in four places and will jump to the last
    one in the listing, as shown in [Listing 8-10](ch08.xhtml#ch08list10) (there’s
    no need to type this listing in).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE 应该在四个地方替换指令，并跳转到列表中的最后一处，如 [列表 8-10](ch08.xhtml#ch08list10) 所示（无需输入此列表）。
- en: Save the listing as *listing8-10.py* and run the program using pgzrun listing8-10.py.
    A message should appear announcing each new room as you enter it. It’s triggered
    by walking through the door, so it doesn’t work in the first room.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将列表保存为 *listing8-10.py*，并使用 `pgzrun listing8-10.py` 运行程序。当你进入每个新房间时，应该会显示一条消息。这是通过走过门触发的，所以在第一个房间时不会生效。
- en: '*listing8-10.py*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*listing8-10.py*'
- en: '[PRE16]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 8-10: Enabling the* start_room() *function when the player leaves
    the room*'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-10：当玩家离开房间时启用* start_room() *函数*'
- en: This completes the `DISPLAY` section of the *Escape* game! We’ll make a few
    small changes later to show enemies, but otherwise we’ve laid the foundation for
    the rest of the game.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 *Escape* 游戏的 `DISPLAY` 部分！稍后我们将做一些小改动来显示敌人，但除此之外，我们已经为游戏的其余部分打下了基础。
- en: In the next chapter, we’ll start unpacking your personal effects as we add props
    to the game.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始拆解你的个人物品，并为游戏添加道具。
- en: '**ARE YOU FIT TO FLY?**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你准备好飞行了吗？**'
- en: Check the following boxes to confirm that you’ve learned the key lessons in
    this chapter.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选以下框来确认你已经学会了本章的关键课程。
- en: '![Images](../images/box.jpg)  A piece of information sent to a function is
    called an *argument*.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  发送给函数的信息称为 *参数*。'
- en: '![Images](../images/box.jpg)  To send information to a function, you put it
    between the parentheses after the function name. You can send several arguments
    if you separate them with commas. For example: `add(5, 7)`.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](../images/box.jpg)  要将信息发送到函数，你需要将其放在函数名后的括号中。如果需要传递多个参数，可以用逗号分隔它们。例如：`add(5,
    7)`。'
- en: '![Images](../images/box.jpg)  To enable a function to accept information, you
    set up local variables to receive the arguments when you define the function.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  为了使一个函数能够接收信息，在定义函数时，你需要设置局部变量来接收参数。'
- en: '![Images](../images/box.jpg)  The `DISPLAY` section of the program draws the
    room, animates the transparent wall, and displays text messages.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  程序的`DISPLAY`部分绘制房间，动画化透明墙，并显示文本信息。'
- en: '![Images](../images/box.jpg)  The `show_text()` function takes two arguments:
    the string you want to display and the row number (0 or 1). Row 1 is reserved
    for important messages.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  `show_text()`函数需要两个参数：你想显示的字符串和行号（0或1）。第1行保留给重要信息。'
- en: '![Images](../images/box.jpg)  You define a Rect by giving Python tuples for
    its position and size.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  你通过为矩形的位置和大小提供Python元组来定义一个Rect。'
- en: '![Images](../images/box.jpg)  The `screen.draw.filled_rect()` function draws
    a filled rectangle.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  `screen.draw.filled_rect()`函数绘制一个填充的矩形。'
- en: '![Images](../images/box.jpg)  The colors in Pygame Zero use the RGB (red, green,
    blue) format. For example `(255, 100, 0)` is orange: maximum red, a dash of green,
    and no blue.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  Pygame Zero中的颜色使用RGB（红、绿、蓝）格式。例如`(255, 100, 0)`是橙色：最大红色，一点绿色，没有蓝色。'
- en: '![Images](../images/box.jpg)  If you want to replace some code throughout the
    whole program, you can use the Replace All option in IDLE.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](../images/box.jpg)  如果你想在整个程序中替换某些代码，可以使用IDLE中的“全部替换”选项。'
- en: '![image](../images/f0149-01.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0149-01.jpg)'
