- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3'
- en: Strings, Lists, Tuples, and Dictionaries
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串、列表、元组和字典
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: 'In [Chapter 2](ch02.xhtml#ch02), we did some basic calculations with Python
    and learned about variables. In this chapter, we’ll work with other items in Python
    programs: strings, lists, tuples, and dictionaries. You’ll use strings to display
    messages in your programs (such as “Get Ready” and “Game Over” messages in a game).
    You’ll also discover how lists, tuples, and dictionaries are used to store collections
    of things.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.xhtml#ch02)中，我们用Python做了一些基本的计算，并学习了变量。在本章中，我们将处理Python程序中的其他元素：字符串、列表、元组和字典。你将使用字符串在程序中显示消息（例如游戏中的“准备好”和“游戏结束”消息）。你还将发现如何使用列表、元组和字典来存储事物的集合。
- en: Strings
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: 'When programming, we usually call text a *string*. Think of a string as a collection
    of letters. All the letters, numbers, and symbols in this book could be a string,
    and so could your name and address. In fact, the first Python program we created
    in [Chapter 1](ch01.xhtml#ch01) used a string: “Hello World.”'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，我们通常将文本称为*字符串*。把字符串想象成字母的集合。书中的所有字母、数字和符号都可以是一个字符串，你的名字和地址也是如此。事实上，我们在[第1章](ch01.xhtml#ch01)中创建的第一个Python程序就使用了一个字符串：“Hello
    World”。
- en: Creating Strings
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建字符串
- en: 'In Python, we create a string by putting quotes around text because programming
    languages need to distinguish between different types of values. (We need to tell
    the computer whether a value is a number, a string, or something else.) For example,
    we could take our fred variable from [Chapter 2](ch02.xhtml#ch02) and use it to
    label a string:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们通过将引号放在文本周围来创建字符串，因为编程语言需要区分不同类型的值。（我们需要告诉计算机一个值是数字、字符串还是其他类型。）例如，我们可以从[第2章](ch02.xhtml#ch02)中取出fred变量，并用它来标记一个字符串：
- en: '![Image](Images/f0026-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0026-01.jpg)'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to see what’s “inside” fred, we could enter print(fred):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了查看“fred”里面的内容，我们可以输入print(fred)：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also use single quotes to create a string, like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用单引号来创建一个字符串，像这样：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, if you try to enter more than one line of text for your string using
    only a single (′) or double quote (") or if you start with one type of quote and
    finish with another, you’ll get an error message in the Python Shell. For example,
    enter the following line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你试图使用单引号（′）或双引号（"）输入超过一行的文本，或者如果你以一种类型的引号开始，以另一种类型的引号结束，你将会在Python Shell中看到一个错误消息。例如，输入以下内容：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You’ll see this result:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这个结果：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is an error message complaining about syntax because you did not follow
    the rules for ending a string with a single or double quote.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于语法错误的错误信息，因为你没有遵循用单引号或双引号结束字符串的规则。
- en: '*Syntax* means the arrangement and order of words in a sentence or, in this
    case, the arrangement and order of words and symbols in a program. So *SyntaxError*
    means that you did something in an order Python was not expecting, or Python was
    expecting something that you missed. *EOL* means *end-of-line*, so the rest of
    the error message is telling you that Python hit the end of the line and did not
    find a double quote to close (or finish) the string.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法*意味着句子中单词的排列和顺序，或者在这种情况下，程序中单词和符号的排列和顺序。所以*语法错误*意味着你做了一些Python没有预料到的事情，或者Python期待你做的事情你却漏掉了。*EOL*表示*行尾*，因此错误消息的其余部分告诉你Python到达了行尾，但没有找到一个双引号来关闭（或结束）字符串。'
- en: 'To use more than one line of text in your string (called a *multiline string*),
    use three single quotes (’’’), and then hit ENTER between lines, like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在字符串中使用多行文本（称为*多行字符串*），请使用三个单引号（’’’），然后在行与行之间按ENTER键，像这样：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s print the contents of fred to see if this worked:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打印出fred的内容，看看是否成功：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Handling Problems with Strings
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理字符串问题
- en: 'Now consider this silly example of a string, which causes Python to display
    an error message:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑这个傻乎乎的字符串示例，它会导致Python显示错误消息：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the first line, we try to create a string (defined as the variable silly_string)
    enclosed by single quotes, but also containing a mixture of single quotes in the
    words can’t, shouldn’t, and wouldn’t, as well as double quotes. What a mess!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们试图创建一个由单引号包围的字符串（定义为变量silly_string），但它也包含了单引号（在单词can't、shouldn't和wouldn't中）和双引号。真是一团糟！
- en: Remember that Python is not as smart as a human being, so all it sees is a string
    containing He said, "Aren, followed by a bunch of other characters that it doesn’t
    expect. When Python sees a quotation mark (either a single or double quote), it
    expects a string to start following the first quotation mark and the string to
    end after the next matching quotation mark (either single or double) on that line.
    In this case, the start of the string is the single quotation mark before He,
    and the end of the string, as far as Python is concerned, is the single quote
    after the n in Aren.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Python 没有人类那样的智慧，它看到的只是一个字符串，其中包含了 He said, "Aren，然后是一些它无法预期的字符。当 Python
    看到一个引号（无论是单引号还是双引号）时，它期望在第一个引号之后跟随一个字符串，并且该字符串会在下一个匹配的引号（无论是单引号还是双引号）出现时结束。在这种情况下，字符串的开始是
    He 前的单引号，而对于 Python 来说，字符串的结束是 Aren 后的单引号。
- en: In the last line, Python tells us what sort of error occurred—in this example,
    a syntax error.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行中，Python 告诉我们发生了什么类型的错误——在这个例子中，是一个语法错误。
- en: 'Using double instead of single quotes still produces an error:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双引号代替单引号仍然会产生错误：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, Python sees a string bound by double quotes, containing the letters He
    said, (and a space). Everything following that string (from Aren’t on) causes
    the error.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Python 看到的是一个由双引号括起来的字符串，包含字母 He said,（和一个空格）。接下来跟着的内容（从 Aren’t 开始）会导致错误。
- en: This is because, from Python’s perspective, all that extra stuff isn’t supposed
    to be there. Python looks for the next matching quote and doesn’t know what you
    want it to do with anything that follows that quote on the same line.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为从 Python 的角度来看，所有多余的内容本不应该存在。Python 会寻找下一个匹配的引号，并且不知道你希望它如何处理紧跟在该引号后面的内容。
- en: 'The solution to this problem is a multiline string, which we learned about
    earlier, using *three* single quotes (''''''). This allows us to combine double
    and single quotes in our string without causing errors. In fact, if we use three
    single quotes, we can put any combination of single and double quotes inside the
    string (as long as we don’t try to put three single quotes there). The error-free
    version of our string looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是使用多行字符串，我们之前学过的，采用*三个*单引号（'''）。这使得我们可以在字符串中同时使用单引号和双引号而不会导致错误。事实上，如果我们使用三个单引号，我们可以在字符串内放置任何组合的单引号和双引号（只要我们不尝试在其中放入三个单引号）。我们字符串的无错版本如下所示：
- en: '![Image](Images/f0028-01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0028-01.jpg)'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: But wait, there’s more. If you really want to use single or double quotes to
    surround a string in Python, instead of three single quotes, you can add a backslash
    (∖) before each quotation mark within the string. This is called *escaping*. It’s
    a way of telling Python, “Yes, I know I have quotes inside my string, and I want
    you to ignore them until you see the end quote.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等，还有更多。如果你真的想使用单引号或双引号来包围 Python 中的字符串，那么可以在每个引号前面添加一个反斜杠（∖）。这被称为*转义*。这是一种告诉
    Python，“是的，我知道我的字符串中有引号，我希望你忽略它们，直到你看到结束引号。”
- en: Escaping strings can make them harder to read, so it’s considered better practice
    to use multiline strings. Still, you might come across code that uses escaping,
    so it’s helpful to know why the backslashes are there.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 转义字符串可能会使它们更难以阅读，因此通常建议使用多行字符串。不过，你仍然可能会遇到使用转义的代码，因此了解为什么反斜杠存在是有帮助的。
- en: 'Here are a few examples of how escaping works:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些转义如何工作的示例：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First, at ➊, we create a string with single quotes, using the backslash in front
    of the single quotes inside that string. At ➋, we create a string with double
    quotes, and use the backslash in front of those quotes in the string. In the lines
    that follow, we print the variables we’ve just created. Notice that the backslash
    character doesn’t appear in the strings when we print them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 ➊ 处，我们创建了一个包含单引号的字符串，并在该字符串中的单引号前使用了反斜杠。接着，在 ➋ 处，我们创建了一个包含双引号的字符串，并在这些引号前使用了反斜杠。在接下来的几行中，我们打印了刚刚创建的变量。注意，当我们打印它们时，反斜杠字符并不会出现在字符串中。
- en: Embedding Values in Strings
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将值嵌入字符串
- en: If you want to display a message using the contents of a variable, you can embed
    it in a special string, called an *f-string* (also known as a *formatted string
    literal*). You put braces around the variable name, which will then be replaced
    by the actual value. (*Embedding values*, also referred to as *string substitution*,
    is programmer-speak for “inserting values.”)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用变量的内容显示消息，你可以将其嵌入到一个特殊的字符串中，称为*f-string*（也叫*格式化字符串字面量*）。你将变量名放在大括号中，这样它就会被实际的值替代。（*嵌入值*，也叫做*字符串替换*，是程序员用语，意思是“插入值”。）
- en: 'For example, to have Python calculate or store the number of points you scored
    in a game, and then add it to a sentence like “I scored 10 points,” add an f before
    the first quote and then replace the number 10 with the variable surrounded by
    braces {}, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了让 Python 计算或存储你在游戏中得分的点数，然后将其添加到类似 “I scored 10 points” 的句子中，你只需在第一个引号前加上
    f，然后将数字 10 替换为用大括号 {} 包围的变量，像这样：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we create the variable myscore with the value 1000 and the variable message
    that contains the f-string ''I scored {myscore} points''. On the next line, we
    call print(message) to see the result of our string substitution. The result of
    printing this message is I scored 1000 points. We don’t need to use a variable
    for the message. We could do the same example and just use this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了变量 myscore，值为 1000，并创建了包含 f-string 'I scored {myscore} points' 的变量
    message。在下一行中，我们调用 print(message) 来查看字符串替换的结果。打印此消息的结果是 "I scored 1000 points"。我们不需要为消息使用变量。我们可以做同样的示例，只使用这个：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also use more than one variable in a string:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在字符串中使用多个变量：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can even put expressions in an f-string, like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以在 f-string 中放入表达式，像这样：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, Python evaluates the simple equation between the braces, so
    the printed string contains the result.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，Python 会计算大括号中的简单方程式，所以打印出来的字符串包含了结果。
- en: Multiplying Strings
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 乘法字符串
- en: 'What is 10 multiplied by 5? The answer is 50, of course. But what’s 10 multiplied
    by *a*? Here’s Python’s answer:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 10 乘以 5 是多少？答案当然是 50。那么 10 乘以*a*呢？这是 Python 的回答：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Python programmers might multiply strings for a number of reasons, such as
    to line up text with a specific number of spaces when displaying messages in the
    Python Shell. Try printing the following letter in the Python Shell (select **File**
    ▸ **New** **File**, and enter the following code):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序员可能出于多种原因乘以字符串，例如在 Python Shell 中显示消息时，按照特定的空格数量来对齐文本。试着在 Python Shell
    中打印以下字母（选择**文件** ▸ **新建文件**，然后输入以下代码）：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once you’ve typed the code into the Python Shell window, select **File** ▸ **Save
    As**. Name your file *myletter.py*. You can then run the code (as we’ve done previously)
    by selecting **Run** ▸ **Run Module**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在 Python Shell 窗口中输入了代码，选择**文件** ▸ **另存为**。将文件命名为*myletter.py*。然后你可以通过选择**运行**
    ▸ **运行模块**来运行代码（就像我们之前做的那样）。
- en: 'In the first line of this example, we create the variable spaces by multiplying
    a space character by 25\. We then use that variable in the next three lines to
    align the text to the right of the Python Shell. You can see the result of these
    print statements below:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例的第一行，我们通过将一个空格字符乘以 25 来创建变量空间。然后，我们在接下来的三行中使用这个变量，将文本对齐到 Python Shell 的右侧。你可以在下面看到这些打印语句的结果：
- en: '![Image](Images/03fig01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/03fig01.jpg)'
- en: '*Figure 3-1: Running the letter code in the Python Shell*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：在 Python Shell 中运行字母代码*'
- en: WHAT ARE FILES AND FOLDERS?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是文件和文件夹？
- en: A *file* is data (or information) of some kind that can be stored on your computer.
    Files might include photos, videos, ebooks, and even the school report that you
    wrote in Microsoft Word.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*文件*是某种类型的数据（或信息），可以存储在你的计算机上。文件可能包括照片、视频、电子书，甚至是你在 Microsoft Word 中写的学校报告。
- en: A *folder* (also called a *directory*) is a collection of other folders and
    files. When you clicked **Save As** to save your *myletter.py* file, it was stored
    in a folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*文件夹*（也叫做*目录*）是其他文件夹和文件的集合。当你点击**另存为**来保存你的*myletter.py*文件时，它被保存在一个文件夹里。
- en: As we’ll see, files and folders are very important in programming.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，文件和文件夹在编程中非常重要。
- en: 'In addition to using multiplication for alignment, we can also use it to fill
    the screen with annoying messages. Try the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用乘法进行对齐，我们还可以用它来填充屏幕上烦人的消息。试试以下示例：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Lists Are More Powerful than Strings
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表比字符串更强大
- en: '“Spider legs, toe of frog, bat wing, slug butter, and snake dandruff” is not
    a very normal shopping list (unless you happen to be a wizard), but we’ll use
    it as our first example of the differences between strings and lists. We could
    store this list of items in the wizard_list variable by using a string like so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “蜘蛛腿、青蛙脚趾、蝙蝠翅膀、蛞蝓黄油和蛇的头皮屑”不是一个非常正常的购物清单（除非你恰好是个巫师），但我们将它作为字符串和列表之间差异的第一个例子。我们可以通过使用如下的字符串将这个物品清单存储在
    wizard_list 变量中：
- en: '![Image](Images/f0032-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0032-01.jpg)'
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'But we could also create a *list*, a somewhat magical Python object that we
    can manipulate. Here’s what these items would look like written as a list:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以创建一个*列表*，这是一个可以操作的有些神奇的 Python 对象。以下是将这些物品写成列表后的样子：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Creating a list takes a bit more typing than creating a string, but a list
    is more useful than a string because items in the list can be easily manipulated.
    We can print an item in the list by entering a number (called the *index position*)
    inside square brackets, like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个列表需要比创建字符串更多的输入，但列表比字符串更有用，因为列表中的项可以轻松地进行操作。我们可以通过在方括号内输入一个数字（称为*索引位置*）来打印列表中的某个项，如下所示：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you were expecting the second item to be ‘toe of frog’, you might be wondering
    why ‘bat wing’ was printed. This is because lists start at index position 0, so
    the first item in a list is 0, the second is 1, and the **third** is 2\. That
    may not make a lot of sense to humans, but it does to computers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你本来期待第二项是“青蛙脚趾”，你可能会想知道为什么打印的是“蝙蝠翅膀”。这是因为列表从索引位置 0 开始，所以列表中的第一个项是 0，第二个是 1，第三个是
    2。对人类来说可能没有什么意义，但对计算机来说是可以理解的。
- en: 'We can also change an item in a list. Perhaps our wizard friend just let us
    know that we need to grab snail tongue for them instead of bat wing. Here’s how
    we would change the item in our list:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以改变列表中的项。也许我们的巫师朋友刚刚告诉我们，我们需要为他们拿蜗牛舌头，而不是蝙蝠翅膀。以下是我们如何改变列表中的项：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This sets the item in index position 2, previously bat wing, to snail tongue.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把索引位置 2（之前是蝙蝠翅膀）的项设置为蜗牛舌头。
- en: 'We can also show a sublist of the items in the list. We do this by using a
    colon (:) inside square brackets. For example, enter the following to see the
    third to fifth items in our list (a brilliant set of ingredients for a lovely
    sandwich):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以显示列表中的子列表。我们通过在方括号内使用冒号（:）来做到这一点。例如，输入以下内容来查看我们列表中的第三到第五项（这是制作美味三明治的绝佳配料）：
- en: '![Image](Images/f0033-01.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0033-01.jpg)'
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Writing [2:5] is the same as saying, “Show the items from index position 2 up
    to (but not including) index position 5”—in other words, items 3, 4, and 5.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 写 [2:5] 就等同于说，“显示从索引位置 2 到（但不包括）索引位置 5 的项”——换句话说，是项 3、4 和 5。
- en: 'Lists can be used to store all sorts of items, like numbers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以用来存储各种各样的项，比如数字：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'They can also hold strings:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也可以保存字符串：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'They might have mixtures of numbers and strings:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可能包含数字和字符串的混合：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And lists might even store other lists:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 并且列表甚至可以存储其他列表：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This list-within-list example creates three variables: numbers with four numbers,
    strings with eight strings, and mylist using numbers and strings. The third list
    (mylist) has only two elements because it’s a list of variable names, not the
    contents of the variables.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表中的列表示例创建了三个变量：包含四个数字的 numbers，包含八个字符串的 strings，以及使用数字和字符串的 mylist。第三个列表（mylist）只有两个元素，因为它是变量名的列表，而不是变量的内容。
- en: 'We can try printing the two elements of mylist separately:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试分别打印 mylist 的两个元素：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here we can see mylist[0] contains the list of numbers, and mylist[1] is the
    list of strings.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 mylist[0] 包含了数字列表，而 mylist[1] 是字符串列表。
- en: Adding Items to a List
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向列表中添加项
- en: 'To add items to the end of a list, we use the append function. For example,
    to add a bear burp (I’m sure there is such a thing) to the wizard’s shopping list,
    enter the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要向列表的末尾添加项，我们使用 append 函数。例如，要将一声熊打嗝（我敢肯定确实有这么一回事）添加到巫师的购物清单中，可以输入以下内容：
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can keep adding more magical items to the wizard’s list in the same way,
    like so:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样继续添加更多的魔法物品到巫师的清单中：
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now the wizard’s list looks like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在巫师的清单看起来是这样的：
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The wizard is clearly ready to work some serious magic!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 巫师显然准备施展一些真正的魔法了！
- en: Removing Items from a List
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从列表中删除项
- en: 'To remove items from a list, use the del command (short for *delete*). For
    example, to remove the fifth item in the wizard’s list, snake dandruff, do this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要从列表中删除项，可以使用 del 命令（简写为*delete*）。例如，要删除巫师清单中的第五项蛇的头皮屑，可以这样做：
- en: '[PRE31]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**NOTE**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Remember that positions start at zero, so wizard_list[4] actually refers to
    the fifth item in the list.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，位置从零开始，所以 wizard_list[4] 实际上指的是列表中的第五个项目。*'
- en: 'Try removing the items we just added (mandrake, hemlock, and swamp gas) by
    entering the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过输入以下内容来移除我们刚刚添加的项目（曼德拉草、毒芹和沼气）：
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: List Arithmetic
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表算术
- en: 'We can join lists by adding them, just like adding numbers, using a plus (+)
    sign. For example, suppose we have two lists: list1, containing the numbers 1
    through 4, and list2, containing some words. We can add them using the + sign,
    like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将列表相加来连接它们，就像加法一样，使用加号 (+) 符号。例如，假设我们有两个列表：list1，包含数字1到4，以及 list2，包含一些单词。我们可以使用
    + 符号将它们加在一起，如下所示：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can also add the two lists and set the result to another variable:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将两个列表相加，并将结果赋值给另一个变量：
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And we can multiply a list by a number. For example, to multiply list1 by 5,
    we write list1 * 5:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过数字来乘以一个列表。例如，要将 list1 乘以 5，我们写 list1 * 5：
- en: '[PRE35]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This tells Python to repeat list1 five times, resulting in 1, 2, 1, 2, 1, 2,
    1, 2, 1, 2. On the other hand, division (/) and subtraction (-) give only errors,
    as in these examples:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 Python 将 list1 重复五次，结果是 1, 2, 1, 2, 1, 2, 1, 2, 1, 2。另一方面，除法（/）和减法（-）会导致错误，如以下示例所示：
- en: '[PRE36]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: But why? Well, joining lists with + and repeating lists with * are straightforward
    enough operations. These concepts also make sense in the real world. For example,
    if I were to hand you two paper shopping lists and say, “Add these two lists,”
    you might write out all the items on another sheet of paper in order, end to end.
    The same might be true if I said, “Multiply this list by 3.” You could imagine
    writing a list of all of the list’s items three times on another sheet of paper.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 那为什么呢？嗯，使用 + 连接列表和用 * 重复列表是足够直接的操作。这些概念在现实世界中也很有意义。例如，如果我递给你两张纸质购物清单并说：“把这两个清单加在一起，”你可能会把所有项目按顺序写在另一张纸上，从头到尾。如果我说：“将这个清单乘以3，”你也可以想象把列表中的所有项目写三遍在另一张纸上。
- en: 'But how would you divide a list? For example, consider how you would divide
    a list of six numbers (1 through 6) in two. Here are just three different ways:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 但你如何将一个列表划分呢？例如，考虑一下如何将六个数字（1到6）的列表分成两部分。这里有三种不同的方式：
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Would we divide the list in the middle, split it after the first item, or just
    pick some random place and divide it there? There’s no simple answer, and when
    you ask Python to divide a list, it doesn’t know what to do, either. That’s why
    it responds with an error.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是将列表从中间分开，分开第一个项目后再分，还是随便挑个地方分开呢？没有简单的答案，当你请求 Python 对列表进行除法操作时，它也不知道该怎么做。这就是为什么它会返回错误的原因。
- en: '![Image](Images/f0037-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0037-01.jpg)'
- en: 'For the same reason, you can’t add anything other than a list to a list. For
    example, here’s what happens when we try to add the number 50 to list1:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于同样的原因，你不能将除列表之外的任何东西添加到列表中。例如，下面是我们试图将数字 50 加入 list1 时发生的情况：
- en: '[PRE38]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Why do we get an error here? Well, what does it mean to add 50 to a list? Does
    it mean add 50 to each item? But what if the items aren’t numbers? Does it mean
    add the number 50 to the end or beginning of the list?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这里会出现错误呢？嗯，将 50 加入一个列表是什么意思？是将 50 加到每个项目吗？但如果项目不是数字呢？是将数字 50 加到列表的末尾还是开头呢？
- en: In computer programming, commands should work exactly the same way every time
    you enter them. Your computer sees things only in black and white. Ask it to make
    a complicated decision, and it throws up its hands with errors.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机编程中，命令每次输入时应该表现得完全相同。你的计算机只能看到黑白的东西。让它做一个复杂的决策时，它就会抛出错误。
- en: Tuples
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组
- en: 'A *tuple* is like a list that uses parentheses, as in this example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*元组*就像一个使用括号的列表，如这个例子所示：'
- en: '[PRE39]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here we define the variable fibs as the numbers 0, 1, 1, 2, and 3\. Then, as
    with a list, we print the item in index position 3 in the tuple by using print(fibs[3]).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们将变量 fibs 定义为数字 0、1、1、2 和 3。然后，就像操作列表一样，我们使用 print(fibs[3]) 来打印元组中索引位置 3
    的项目。
- en: 'The main difference between a tuple and a list is that a tuple cannot change
    once you’ve created it. For example, if we try to replace the first value in the
    tuple fibs with the number 4 (just as we replaced values in our wizard_list),
    we get an error message:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 元组和列表的主要区别在于，一旦你创建了一个元组，它就不能改变。例如，如果我们试图将元组 fibs 中的第一个值替换为数字 4（就像我们在 wizard_list
    中替换值一样），我们会收到错误消息：
- en: '[PRE40]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Why would you use a tuple instead of a list? Well, sometimes it’s useful to
    use something that you know can never change. If you create a tuple with two elements
    inside, it will always have those two elements.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你会选择使用元组而不是列表呢？有时候，使用一个你知道永远不会改变的东西是有用的。如果你创建一个包含两个元素的元组，它将始终包含这两个元素。
- en: Python Dictionaries
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python字典
- en: In Python, a *dict* (short for *dictionary*) is a collection of things, like
    lists and tuples. The difference between dicts and lists or tuples is that each
    item in a dict has a *key* and a corresponding *value*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，*dict*（字典的缩写）是一个集合，类似于列表和元组。字典和列表或元组的区别在于，字典中的每个项都有一个*键*和相应的*值*。
- en: 'For example, say we have a list of people and their favorite sports. We could
    put this information into a Python list, with the person’s name followed by their
    sport, like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个人及其最爱运动的列表。我们可以将这些信息放入Python列表中，每个人的名字后面跟着他们的运动，像这样：
- en: '[PRE41]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If I asked you what Rebecca Clarke’s favorite sport is, you could skim through
    that list and find the answer is netball. But what if the list included 100 (or
    many more) people?
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我问你丽贝卡·克拉克最喜欢的运动是什么，你可以浏览这个列表并找到答案是网球。但是如果这个列表包括100个（或者更多）人呢？
- en: '![Image](Images/f0039-01.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0039-01.jpg)'
- en: 'If we store this same information in a dictionary, with the person’s name as
    the key and their favorite sport as the value, the code would look like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将相同的信息存储在字典中，以人的名字为键，最爱运动为值，那么代码将是这样：
- en: '[PRE42]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We use colons to separate each key from its value, and each key and value is
    surrounded by single quotes. Notice, too, that the items in a dictionary are enclosed
    in braces ({}), not parentheses or square brackets. The result is a dict (where
    each key points to a particular value), as shown in [Table 3-1](ch03.xhtml#ch03tab01).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用冒号将每个键与其值分开，每个键和值都被单引号括起来。还要注意，字典中的项被大括号（{}）括起来，而不是圆括号或方括号。结果是一个字典（每个键指向一个特定的值），如[表3-1](ch03.xhtml#ch03tab01)所示。
- en: '**Table 3-1:** Keys Pointing to Values in a Dictionary of Favorite Sports'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**表3-1：** 字典中指向值的键：最爱运动'
- en: '| **Key** | **Value** |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Ralph Williams | Football |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 拉尔夫·威廉姆斯 | 足球 |'
- en: '| Michael Tippett | Basketball |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 迈克尔·蒂佩特 | 篮球 |'
- en: '| Edward Elgar | Baseball |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 爱德华·埃尔加 | 棒球 |'
- en: '| Rebecca Clarke | Netball |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 丽贝卡·克拉克 | 网球 |'
- en: '| Ethel Smyth | Badminton |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 埃塞尔·史密斯 | 羽毛球 |'
- en: '| Frank Bridge | Rugby |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 弗兰克·布里奇 | 橄榄球 |'
- en: 'Now, to get Rebecca Clarke’s favorite sport, we access our dictionary favorite_sports
    by using her name as the key, like so:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要获取丽贝卡·克拉克最喜欢的运动，我们通过使用她的名字作为键，访问我们的字典favorite_sports，如下所示：
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: And the answer is Netball.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是网球。
- en: 'To delete a value in a dict, use its key. For example, let’s remove Ethel Smyth:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要在字典中删除一个值，使用它的键。例如，让我们移除埃塞尔·史密斯：
- en: '[PRE44]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To replace a value in a dict, we also use its key. Say we need to change Ralph
    Williams’s favorite sport from Football to Ice Hockey. We can do so like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要在字典中替换一个值，我们也需要使用它的键。假设我们需要将拉尔夫·威廉姆斯的最爱运动从足球改为冰球，我们可以像这样操作：
- en: '[PRE45]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We replace the favorite sport of Football with Ice Hockey by using the key Ralph
    Williams.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用拉尔夫·威廉姆斯这个键，将最爱运动从足球替换为冰球。
- en: 'As you can see, working with dictionaries is kind of like working with lists
    and tuples, except that you can’t join dicts with the plus operator (+). If you
    try to do that, you’ll get an error message, as in the following example:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，处理字典有点像处理列表和元组，唯一的不同是，你不能使用加号运算符（+）连接字典。如果你尝试这样做，你会收到一个错误消息，正如下面的例子所示：
- en: '[PRE46]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Joining dictionaries doesn’t make sense to Python, so it throws up its hands.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Python无法理解连接字典，所以它放弃了。
- en: What You Learned
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: In this chapter, you learned how Python uses strings to store text, and how
    it uses lists and tuples to handle multiple items. You saw that the items in lists
    can be changed, and that you can join one list to another list, but that the values
    in a tuple cannot change. You also learned how to use dictionaries to store values
    with keys that identify them.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学到了Python如何使用字符串存储文本，以及如何使用列表和元组处理多个项。你看到列表中的项是可以修改的，并且你可以将一个列表与另一个列表连接，但元组中的值不能改变。你还学到了如何使用字典来存储带有键的值，以便识别它们。
- en: Programming Puzzles
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程难题
- en: The following are a few experiments you can try yourself. The answers can be
    found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你可以自己尝试的一些实验。答案可以在*[http://python-for-kids.com](http://python-for-kids.com)*找到。
- en: '#1: Favorites'
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1: 收藏夹'
- en: Make a list of your favorite hobbies and give the list the variable name games.
    Now make a list of your favorite foods and name the variable foods. Join the two
    lists and name the result favorites. Lastly, print the variable favorites.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 列出你最喜欢的爱好，并将这个列表命名为 games。现在列出你最喜欢的食物，并将该列表命名为 foods。将这两个列表合并，命名合并后的结果为 favorites。最后，打印变量
    favorites。
- en: '#2: Counting Combatants'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2: 计算战斗者'
- en: If there are three buildings with 25 ninjas hiding on each roof and two tunnels
    with 40 samurai hiding inside each tunnel, how many ninjas and samurai are about
    to do battle? (You can do this with one equation in the Python Shell.)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有三座楼，每座楼的屋顶上藏着25个忍者，而有两个隧道，每个隧道里藏着40个武士，那么忍者和武士即将展开战斗的数量是多少？（你可以在 Python Shell
    中通过一个方程式来解决这个问题。）
- en: '#3: Greetings!'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3: 问候！'
- en: 'Create two variables: one that points to your first name and one that points
    to your last name. Now create a string and use placeholders to print your name
    with a message using those two variables, such as “Hi there, Brando Ickett!”'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个变量：一个指向你的名字，一个指向你的姓氏。现在创建一个字符串，使用占位符来打印你的名字并附带一条消息，类似于“你好，Brando Ickett！”
- en: '#4: Multiline Letter'
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4: 多行信件'
- en: Take the letter we created earlier in the chapter and try to print the exact
    same text by using a single print call (and a multiline string).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在本章前面创建的信件，尝试通过一次打印调用（并使用多行字符串）打印出完全相同的文本。
