- en: '**4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: SERIOUS SCRIPTING WITH SPYDER**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用 Spyder 进行**严肃编程**
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: The *Scientific Python Development IDE (Spyder)* is an open source interactive
    development environment designed *by* scientists *for* scientists. It integrates
    numerous specialized tools, such as a text editor, debugger, profiler, linter,
    and console, into a comprehensive tool for software development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*科学 Python 开发 IDE（Spyder）* 是一个开源的交互式开发环境，旨在由科学家为科学家设计。它将多个专业化工具，如文本编辑器、调试器、分析器、代码检查器和控制台，集成到一个全面的软件开发工具中。'
- en: Spyder is built for heavy-duty work and consequently has a larger system footprint
    and more complicated interface ([Figure 4-1](ch04.xhtml#ch04fig1)) than the Jupyter
    Qt console covered in the previous chapter. But that doesn’t mean you can’t use
    Spyder for small tasks. It includes both a console, for executing ad hoc code,
    and a text editor for writing persistent, easily editable scripts of any size.
    We use Spyder in [Part II](part02.xhtml#part02) of this book, which provides a
    primer to Python programming in the event you need to learn Python or refresh
    certain concepts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 是为重度工作设计的，因此它比上一章中提到的 Jupyter Qt 控制台有更大的系统占用和更复杂的界面（[图 4-1](ch04.xhtml#ch04fig1)）。但这并不意味着你不能用
    Spyder 来做小任务。它包含一个控制台，用于执行临时代码，还有一个文本编辑器，用于编写持久且易于编辑的各种大小的脚本。本书的[第二部分](part02.xhtml#part02)使用了
    Spyder，作为 Python 编程的入门教程，帮助你在需要学习 Python 或刷新某些概念时提供支持。
- en: '![Image](../images/04fig01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig01.jpg)'
- en: '*Figure 4-1: The Scientific Python Development IDE (Spyder)*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-1：科学 Python 开发 IDE（Spyder）*'
- en: In general, if you plan on writing elaborate programs or developing applications,
    you’ll want to use Spyder or a similar IDE.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果你打算编写复杂的程序或开发应用程序，你会选择使用 Spyder 或类似的 IDE。
- en: '**Installing and Launching Spyder with Anaconda Navigator**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 Anaconda Navigator 安装和启动 Spyder**'
- en: Spyder comes preinstalled in your *base* environment. To install it in a different
    environment using Anaconda Navigator, first activate the environment by selecting
    its name in the **Applications on** pull-down menu near the top of the Home tab
    ([Figure 4-2](ch04.xhtml#ch04fig2)). In this example, we are using *my_first_env*
    that we created in [Chapter 2](ch02.xhtml). Next, click the **Install** button
    on the Spyder app tile to install it. You might need to scroll down the Home tab
    to find the tile.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 已经预安装在你的 *base* 环境中。要在不同的环境中使用 Anaconda Navigator 安装 Spyder，首先通过选择首页标签顶部附近的
    **Applications on** 下拉菜单中的环境名称来激活该环境（[图 4-2](ch04.xhtml#ch04fig2)）。在此示例中，我们使用的是在[第二章](ch02.xhtml)中创建的
    *my_first_env*。接下来，点击 Spyder 应用图标上的 **Install** 按钮来安装它。你可能需要向下滚动首页标签以找到该图标。
- en: After a few minutes, the Install button should change to a Launch button. Click
    it to start Spyder. Remember, if you want to install a specific version of Spyder,
    click the gear icon at the upper right of the tile to see a listing of available
    version numbers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，安装按钮应该会变成启动按钮。点击它来启动 Spyder。记住，如果你想安装 Spyder 的特定版本，可以点击右上角的齿轮图标，查看可用的版本号列表。
- en: For more information on installing Spyder, see the Installation Guide at *[https://docs.spyder-ide.org/current/installation.html](https://docs.spyder-ide.org/current/installation.html)*
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安装 Spyder 的更多信息，请参见安装指南 *[https://docs.spyder-ide.org/current/installation.html](https://docs.spyder-ide.org/current/installation.html)*
- en: '![Image](../images/04fig02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig02.jpg)'
- en: '*Figure 4-2: The Anaconda Navigator Home tab showing the active environment
    (my_first_env) and the Spyder tile*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-2：Anaconda Navigator 首页标签，显示活动环境（my_first_env）和 Spyder 瓷砖*'
- en: '**Installing and Launching Spyder Using the CLI**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 CLI 安装和启动 Spyder**'
- en: 'Spyder comes preinstalled in your *base* environment. To install it in a new
    environment using conda, first open Anaconda Prompt (in Windows) or a terminal
    (in macOS and Linux) and activate the conda environment. Let’s do this for *my_first_env*
    by entering the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 已经预安装在你的 *base* 环境中。要在新环境中使用 conda 安装它，首先打开 Anaconda 提示符（在 Windows 中）或终端（在
    macOS 和 Linux 中），然后激活 conda 环境。我们通过输入以下命令为 *my_first_env* 环境执行此操作：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, use conda to install spyder:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 conda 安装 Spyder：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install specific versions, such as 5.0.3, enter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装特定版本，如 5.0.3，输入：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To launch Spyder from the command line, enter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过命令行启动 Spyder，输入：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more information on installing Spyder, see the installation guide at *[https://docs.spyder-ide.org/current/installation.html](https://docs.spyder-ide.org/current/installation.html)*
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安装 Spyder 的更多信息，请参见安装指南 *[https://docs.spyder-ide.org/current/installation.html](https://docs.spyder-ide.org/current/installation.html)*
- en: '**Launching Spyder from the Start Menu**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通过开始菜单启动Spyder**'
- en: On most platforms, the official documentation recommends launching Spyder from
    Anaconda Navigator. In Windows, however, the recommended method is to launch Spyder
    from the Start menu ([Figure 4-3](ch04.xhtml#ch04fig3)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上，官方文档建议通过Anaconda Navigator启动Spyder。然而，在Windows中，推荐的启动方法是通过开始菜单启动Spyder（见[图
    4-3](ch04.xhtml#ch04fig3)）。
- en: '![Image](../images/04fig03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig03.jpg)'
- en: '*Figure 4-3: Spyder installations in the Windows Start menu under Anaconda3*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-3：Spyder安装在Windows的开始菜单中的Anaconda3文件夹下*'
- en: There, you should see a listing of all your Spyder installations and the environments
    in which they’re loaded, under the *Anaconda3* folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，你应该能看到列出所有Spyder安装和它们所加载的环境，这些都在*Anaconda3*文件夹下。
- en: '**Configuring the Spyder Interface**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**配置Spyder界面**'
- en: '[Figure 4-4](ch04.xhtml#ch04fig4) shows the Spyder interface with the major
    panes and toolbars labeled. Note that I’ve changed its appearance from the “factory
    settings” view to facilitate this walkthrough and make it easier to see in a black-and-white
    book. Don’t be intimidated by all the controls and panes. Spyder can be as easy
    or as difficult as you want to make it.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-4](ch04.xhtml#ch04fig4)显示了带有标记的Spyder界面，展示了主要的面板和工具栏。请注意，我已将其外观从“出厂设置”视图更改，以便于本次讲解并使其在黑白书籍中更易于查看。不要被所有控制项和面板吓到。Spyder可以根据你需要的复杂度来调整，既可以很简单，也可以很复杂。'
- en: So that you can more easily follow along, let’s configure your screen to look
    closer to that shown in [Figure 4-4](ch04.xhtml#ch04fig4). First, set the syntax
    highlighting theme in the Preferences window by either clicking **Tools** ▸ **Preferences**
    from the top toolbar in Windows and Linux; **Python/Spyder** ▸ **Preferences**
    on macOS; or the wrench icon on the main toolbar near the top of the screen ([Figure
    4-4](ch04.xhtml#ch04fig4)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你更容易跟随操作，让我们将你的屏幕配置为更接近[图 4-4](ch04.xhtml#ch04fig4)中所示的样子。首先，在偏好设置窗口中设置语法高亮主题，Windows和Linux系统上通过点击顶部工具栏的**工具**
    ▸ **偏好设置**；macOS系统上通过点击**Python/Spyder** ▸ **偏好设置**；或者点击屏幕顶部主工具栏的扳手图标（见[图 4-4](ch04.xhtml#ch04fig4)）。
- en: Find the Syntax highlighting theme menu, choose the **Spyder** option, and then
    click **Ok**. This sets the background to white (use **Spyder Dark** if you have
    sensitive eyes). Note that you have many color choices for highlighting code,
    just as you did with the Jupyter Qt console in the previous chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 找到语法高亮主题菜单，选择**Spyder**选项，然后点击**确定**。这会将背景设置为白色（如果你眼睛敏感，可以使用**Spyder Dark**）。请注意，你有许多代码高亮颜色的选择，就像在上一章中使用Jupyter
    Qt控制台时一样。
- en: '![Image](../images/04fig04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig04.jpg)'
- en: '*Figure 4-4: The Spyder interface with key components labeled*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-4：标记关键组件的Spyder界面*'
- en: Now, let’s move the File Explorer pane to the left side of the screen. From
    the toolbar at the top of the interface, click **View** ▸ **Unlock panes and toolbars**.
    This lets you drag them around just like moving windows on your desktop. In the
    upper-right pane, find the gray tab labeled **Files** and click it. The upper-right
    pane should now show a File Explorer window. Grab the top of it and drag it to
    the left side of the interface, as shown in [Figure 4-4](ch04.xhtml#ch04fig4).
    You can grab the sides of the panes to resize them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将文件资源管理器面板移到屏幕的左侧。在界面顶部的工具栏中，点击**视图** ▸ **解锁面板和工具栏**。这使你可以像移动桌面窗口一样拖动它们。在右上角的面板中，找到灰色标签的**文件**，点击它。右上角的面板现在应该显示文件资源管理器窗口。抓住它的顶部，将其拖动到界面的左侧，如[图
    4-4](ch04.xhtml#ch04fig4)所示。你可以抓住面板的边缘来调整其大小。
- en: From the top toolbar, click **Run** ▸ **Run profiler**, followed by **Source**
    ▸ **Run code analysis**. These should automatically appear as tabs in the upper-right
    pane, as in [Figure 4-4](ch04.xhtml#ch04fig4). Using the profiler, you can measure
    your code’s runtime, whereas code analysis checks for style violations and potential
    bugs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部工具栏中，点击**运行** ▸ **运行分析器**，然后点击**源** ▸ **运行代码分析**。这些选项会自动作为标签显示在右上角的面板中，如[图
    4-4](ch04.xhtml#ch04fig4)所示。使用分析器，你可以测量代码的运行时间，而代码分析会检查样式违规和潜在的错误。
- en: To save this or any layout, on the top toolbar choose **View** ▸ **Window layouts**
    ▸ **Save current layout** and give the layout a unique name. This becomes the
    default layout when you start Spyder. To choose another layout, look for it under
    **View** ▸ **Window layouts**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存这个或任何布局，在顶部工具栏中选择**视图** ▸ **窗口布局** ▸ **保存当前布局**，并为布局起一个唯一的名字。这样，当你启动Spyder时，这个布局就会成为默认布局。要选择另一个布局，请在**视图**
    ▸ **窗口布局**中查找。
- en: As you can see, Spyder is highly configurable. You can undock panes by dragging
    them outside of Spyder. You can turn panes and toolbars on and off using **View**
    ▸ **Panes** and **View** ▸ **Toolbars**, respectively. With time, your interface
    will evolve and become uniquely yours. Just remember to save that window layout!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Spyder 是高度可配置的。你可以通过拖动面板将其从 Spyder 中弹出。你可以分别使用 **视图** ▸ **面板** 和 **视图**
    ▸ **工具栏** 来开启或关闭面板和工具栏。随着时间的推移，你的界面将逐步发展，变得独一无二。只要记得保存你的窗口布局！
- en: In the sections that follow, we’ll look at how to use Spyder with different
    environments, set up Spyder projects, and use Spyder’s panes and toolbars. Other
    good references are the Spyder home page (*[https://www.spyder-ide.org/](https://www.spyder-ide.org/)*),
    documentation (*[http://docs.spyder-ide.org/current/index.html](http://docs.spyder-ide.org/current/index.html)*),
    and frequently asked questions (*[https://docs.spyder-ide.org/5/faq.html](https://docs.spyder-ide.org/5/faq.html)*).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨如何在不同环境中使用 Spyder，如何设置 Spyder 项目，以及如何使用 Spyder 的面板和工具栏。其他有用的参考资料包括
    Spyder 的主页 (*[https://www.spyder-ide.org/](https://www.spyder-ide.org/)*)、文档 (*[http://docs.spyder-ide.org/current/index.html](http://docs.spyder-ide.org/current/index.html)*)、以及常见问题
    (*[https://docs.spyder-ide.org/5/faq.html](https://docs.spyder-ide.org/5/faq.html)*).
- en: '**Using Spyder with Environments and Packages**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在环境和包中使用 Spyder**'
- en: Spyder is a package like any other and must be installed in *some* conda environment.
    This means that you’ll get an error if you try to import and use a package that’s
    not in the same environment as Spyder. To manage this issue, let’s look at the
    easy but resource-heavy *naive approach* and the lighter but more involved *modular
    approach*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 是一个像其他包一样的工具，必须安装在 *某个* conda 环境中。这意味着，如果你尝试导入并使用不在与 Spyder 相同环境中的包，就会遇到错误。为了处理这个问题，我们将看看简单但资源消耗大的
    *天真方法* 和轻量但更复杂的 *模块化方法*。
- en: '***The Naive Approach***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***天真方法***'
- en: The simplest solution to using Spyder with environments is to install Spyder
    directly into each conda environment and run it from there, as we did in the previous
    installation examples. This works with all Spyder versions and should require
    no extra configuration after the IDE is installed. Unfortunately, it results in
    multiple installations to manage and isn’t as flexible or configurable as other
    alternatives.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spyder 与环境结合的最简单方法是将 Spyder 直接安装到每个 conda 环境中并从那里运行，就像我们在之前的安装示例中所做的那样。这种方法适用于所有版本的
    Spyder，并且在 IDE 安装后应该无需额外配置。不幸的是，这种方法会导致需要管理多个安装，并且不像其他替代方案那样灵活或可配置。
- en: For example, suppose that you start a new project with a new environment in
    January and install the current version of Spyder into that environment. Six months
    later, in July, you start an additional project and load Spyder into that project’s
    new environment. This version of Spyder might possibly be newer than the one you
    installed in January. At this point, your *pkgs* folder has two separate Spyder
    installations taking up space. If you don’t need to keep older versions, one option
    is to run `conda update spyder` in your environments, to bring them all up to
    the current version, and then run `conda clean -all` to remove any versions not
    linked to an environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你在一月份启动了一个新项目并在该环境中安装了当前版本的 Spyder。六个月后的七月，你开始了另一个项目并将 Spyder 加载到该项目的新环境中。这个版本的
    Spyder 可能比你在一月份安装的版本更新。此时，你的 *pkgs* 文件夹中有两个单独的 Spyder 安装，占用了空间。如果你不需要保留旧版本，一个选择是运行
    `conda update spyder` 来更新你所有环境中的 Spyder 版本，然后运行 `conda clean -all` 来删除未链接到任何环境的版本。
- en: You may find the naive approach a suitable solution if you don’t plan to use
    Spyder a lot, if you won’t be working on a lot of projects at the same time, or
    if your system isn’t severely resource constrained. It certainly fits the *science
    first, programming second* mindset. Otherwise, check out the modular approach
    in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不打算频繁使用 Spyder，或者你不会同时处理大量项目，或者你的系统资源并不严重受限，那么你可能会发现天真方法是一个合适的解决方案。它确实符合
    *科学优先，编程其次* 的思维方式。否则，请查看下一节中的模块化方法。
- en: '***The Modular Approach***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***模块化方法***'
- en: Another way to work with existing environments is to install Spyder in one location
    and then change its default Python interpreter. The interpreter is the *python.exe*
    file that resides in each conda environment folder. Depending on your system,
    you might see it called *python.exe*, *pythonw.exe*, *python*, or *pythonw*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使用现有环境的方法是将 Spyder 安装在一个位置，然后更改其默认的 Python 解释器。解释器是每个 conda 环境文件夹中存在的*python.exe*文件。根据你的系统，你可能会看到它被称为*python.exe*、*pythonw.exe*、*python*
    或 *pythonw*。
- en: With the modular approach, you install Spyder only once and put it in a dedicated
    environment (let’s call it *spyder_env*). This way, you can update it separately
    from other packages and avoid conflicts. You can perform either a minimal install
    of Spyder or a full install that includes all of Spyder’s optional dependencies
    for full functionality.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 采用模块化的方法，你只需安装一次 Spyder 并将其放入一个专用环境（我们称之为*spyder_env*）。这样，你可以单独更新 Spyder，避免与其他包产生冲突。你可以执行
    Spyder 的最小安装，或者执行完整安装，后者包含所有 Spyder 的可选依赖项以确保其完全功能。
- en: 'Let’s use the command line to create the dedicated environment and perform
    a full install, adding packages like NumPy, pandas, and so on:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用命令行创建专用环境并执行完整安装，添加像 NumPy、pandas 等包：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From now on, you will start Spyder from this dedicated environment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，你将从这个专用环境启动 Spyder。
- en: 'To allow the Spyder package in *spyder_env* to import and use packages in another
    environment, you must install the lightweight *spyder_kernels* package into the
    other environment, using either Navigator or conda. For example, we have not installed
    Spyder in *my_second_env*, created in [Chapter 2](ch02.xhtml). To use Spyder there,
    activate that environment and run the install like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许*spyder_env*中的 Spyder 包导入并使用另一个环境中的包，你必须将轻量级的*spyder_kernels*包安装到另一个环境中，可以使用
    Navigator 或 conda。举个例子，我们并没有在[第 2 章](ch02.xhtml)中创建的*my_second_env*中安装 Spyder。要在该环境中使用
    Spyder，请激活该环境并像这样执行安装：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you can point your Spyder application, running in *spyder_env*, to the
    interpreter in *my_second_env* so that it can find and use the packages installed
    in *my_second_env*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将运行在*spyder_env*中的 Spyder 应用程序指向*my_second_env*中的解释器，这样它就可以找到并使用安装在*my_second_env*中的包。
- en: To change the Python interpreter in Spyder, click the name of the current environment
    in the **Status** bar (see [Figure 4-4](ch04.xhtml#ch04fig4)) and then select
    **Change default environment in Preferences** (you can also use the “wrench” icon
    in the main toolbar). From the Preferences dialog, select **Python interpreter**
    and then click the radio button next to **Use the following Python interpreter**
    ([Figure 4-5](ch04.xhtml#ch04fig5)). Choose the environment from the drop-down
    list or use the text box (or the Select file icon to the right of the text box)
    to provide the path to the Python interpreter that you want to use.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Spyder 中更改 Python 解释器，请点击**状态**栏中当前环境的名称（见[图 4-4](ch04.xhtml#ch04fig4)），然后选择**在首选项中更改默认环境**（你也可以使用主工具栏中的“扳手”图标）。在首选项对话框中，选择**Python
    解释器**，然后点击**使用以下 Python 解释器**旁边的单选按钮（见[图 4-5](ch04.xhtml#ch04fig5)）。从下拉列表中选择环境，或者使用文本框（或文本框右侧的选择文件图标）提供你希望使用的
    Python 解释器路径。
- en: '![Image](../images/04fig05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig05.jpg)'
- en: '*Figure 4-5: Changing the Python interpreter using the Preferences dialog*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-5：使用首选项对话框更改 Python 解释器*'
- en: Click **OK** to change the interpreter and then click **Consoles** ▸ **Restart
    kernel** on the top toolbar for the changes to take effect. The environment name
    on the Status bar should change from *spyder_env* to *my_second_env* ([Figure
    4-6](ch04.xhtml#ch04fig6)). Now, Spyder can find and import packages from the
    selected environment, no matter the location of the Spyder package.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**更改解释器，然后点击顶部工具栏中的**控制台** ▸ **重启内核**，使更改生效。状态栏上的环境名称应从*spyder_env*更改为*my_second_env*（见[图
    4-6](ch04.xhtml#ch04fig6)）。现在，Spyder 可以从选定的环境中找到并导入包，无论 Spyder 包的位置在哪里。
- en: '![Image](../images/04fig06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig06.jpg)'
- en: '*Figure 4-6: The Spyder Status bar showing the name of the source environment
    for the Python interpreter*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-6：Spyder 状态栏显示 Python 解释器的源环境名称*'
- en: Note that if you change the interpreter to an environment that does not have
    either the Spyder or spyder-kernels package installed, you’ll get an error message
    in the console when you try to restart it. Likewise, if you try to start a new
    console, you’ll get the informative message shown in [Figure 4-7](ch04.xhtml#ch04fig7).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你将解释器更改为没有安装Spyder或spyder-kernels包的环境，当你尝试重新启动控制台时，将会在控制台中看到错误信息。同样，如果你尝试启动新控制台，你将看到[图
    4-7](ch04.xhtml#ch04fig7)中显示的提示信息。
- en: '![Image](../images/04fig07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig07.jpg)'
- en: '*Figure 4-7: Starting a new console in an environment without the spyder-kernels
    package produces a useful error message.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-7：在没有spyder-kernels包的环境中启动新控制台会产生一个有用的错误信息。*'
- en: As you can imagine, using the modular approach with multiple environments can
    become tedious, and you can lose track of which environment you’re working in.
    Some of Spyder’s functionality, like the Variable Explorer, might not work correctly
    for specific data types. And if you need to lock down a specific version of Spyder
    in a particular project, you could end up having to run multiple Spyder installations
    anyway so that other projects use the most current version.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，使用多个环境的模块化方法可能会变得繁琐，你可能会失去对正在使用哪个环境的跟踪。Spyder的一些功能，如变量资源管理器，可能不会正确处理某些数据类型。如果你需要在特定项目中锁定Spyder的某个版本，你最终可能不得不运行多个Spyder安装，这样其他项目才能使用最新版本。
- en: For more details on the modular approach, see the Spyder development team’s
    guide for working with environments and packages at *[https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder/](https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder/)*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有关模块化方法的更多详细信息，请参阅Spyder开发团队关于在Spyder中处理环境和包的指南，网址为*[https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder/](https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder/)*。
- en: '**Using Project Files and Folders**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用项目文件和文件夹**'
- en: Spyder lets you create special *project files* to store everything you do. These
    help you to stay organized and let you reload projects later to seamlessly continue
    your work. Projects are managed (opened, closed, created, and so on) using the
    **Projects** menu on Spyder’s top toolbar.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder允许你创建特殊的*项目文件*来存储你的所有工作。这些文件帮助你保持组织性，并且可以稍后重新加载项目，顺畅地继续工作。项目通过Spyder顶部工具栏中的**项目**菜单进行管理（打开、关闭、创建等）。
- en: '***Creating a Project in a New Directory***'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在新目录中创建项目***'
- en: To create a new project file as a new directory, on the top toolbar, click **Projects**
    ▸ **New Project**. This opens the Create New Project dialog shown in [Figure 4-8](ch04.xhtml#ch04fig8).
    Name the new project *my_spyder_proj*, choose a disk location, and then click
    **Create**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的项目文件作为新目录，请在顶部工具栏中点击**项目** ▸ **新建项目**。这将打开[图 4-8](ch04.xhtml#ch04fig8)中所示的创建新项目对话框。为新项目命名为*my_spyder_proj*，选择一个磁盘位置，然后点击**创建**。
- en: '![Image](../images/04fig08.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig08.jpg)'
- en: '*Figure 4-8: The Create New Project dialog*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-8：创建新项目对话框*'
- en: This creates the directory structure shown in [Figure 4-9](ch04.xhtml#ch04fig9).
    In addition to the folders shown, Spyder will create eight files to help it manage
    your project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建如[图 4-9](ch04.xhtml#ch04fig9)所示的目录结构。除了显示的文件夹，Spyder还将创建八个文件，以帮助管理你的项目。
- en: '![Image](../images/04fig09.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig09.jpg)'
- en: '*Figure 4-9: The initial directory structure after creating a new project with
    Spyder*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-9：创建新项目后Spyder的初始目录结构*'
- en: To keep your project organized, you can add additional folders to *my_spyder_proj*.
    Ideally, these will use standardized names that are clear and concise so that
    you can easily work among projects and share them with others. Let’s do this now
    as an example. If you already have your own system, feel free to use that.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持项目的有序性，你可以向*my_spyder_proj*中添加其他文件夹。理想情况下，这些文件夹应该使用标准化的名称，简洁明了，这样你就可以轻松地在项目之间工作，并与他人共享它们。让我们现在以此为例。如果你已经有自己的系统，随时可以使用它。
- en: In Spyder’s File Explorer pane, right-click *my_spyder_proj* and then select
    **New** ▸ **Folder** from the pop-up menu. Add the folders shown below the existing
    *.spyproject* folder, as shown in [Figure 4-10](ch04.xhtml#ch04fig10).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spyder的文件资源管理器窗格中，右键点击*my_spyder_proj*，然后从弹出菜单中选择**新建** ▸ **文件夹**。在现有的*.spyproject*文件夹下添加如下所示的文件夹，如[图
    4-10](ch04.xhtml#ch04fig10)所示。
- en: '![Image](../images/04fig10.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig10.jpg)'
- en: '*Figure 4-10: The new project folders displayed in the File Explorer pane*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-10：文件资源管理器窗格中显示的新项目文件夹*'
- en: In the naming format shown, *code* is for your Python code; *data* is for data
    files such as Excel spreadsheets, *.csv* files, images, and so on; *documents*
    is for text documents, such as reports; *output* is for things like figures and
    tables that your code produces; and *misc* is for everything else.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示的命名格式中，*code* 用于存放你的 Python 代码；*data* 用于存放数据文件，如 Excel 表格、*.csv* 文件、图片等；*documents*
    用于存放文本文件，如报告；*output* 用于存放你的代码生成的图表和表格；*misc* 用于存放其他所有内容。
- en: To make your project truly self-contained, I recommend including your conda
    environment, with its list of Python packages, in the project folder. To do this,
    create the Spyder project in an existing directory, as described in the next section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的项目真正独立，我建议将你的 conda 环境和 Python 包列表包含在项目文件夹中。为此，如下一节所述，在现有目录中创建 Spyder 项目。
- en: '***Creating a Project in an Existing Directory***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在现有目录中创建项目***'
- en: There are times when you’ll want to create your Spyder project in an *existing*
    directory. A good example of this is when you want to include your conda environment
    in the project so that this important folder is bundled together with your other
    project files, allowing you to easily share or archive the project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能希望在一个 *现有的* 目录中创建你的 Spyder 项目。例如，当你想将 conda 环境包括在项目中时，这样这个重要的文件夹就可以与其他项目文件一起打包，方便你轻松地共享或归档项目。
- en: When stored in a Spyder project, the environment folder should be named something
    like *env* or *conda_env*. If you’re working multiple projects, you’ll want to
    append a project name—abbreviated if long—such as *env_PROJ_NAME*. This way, you
    can identify the correct Spyder installation when launching from the Windows **Start**
    menu. Recall that creating an environment outside of the default *pkgs* folder
    has some minor drawbacks, so you’ll want to review “Specifying an Environment’s
    Location” on [page 37](ch02.xhtml#ch00lev2sec20) before committing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当存储在 Spyder 项目中时，环境文件夹应该命名为类似 *env* 或 *conda_env* 的名称。如果你有多个项目，想要为环境文件夹添加一个项目名称——如果项目名较长，可以缩写——例如
    *env_PROJ_NAME*。这样，你在从 Windows **开始** 菜单启动时，就可以识别正确的 Spyder 安装。请记住，在默认的 *pkgs*
    文件夹之外创建环境有一些小的缺点，因此在提交之前，建议你查看 [第37页](ch02.xhtml#ch00lev2sec20)的“指定环境位置”。
- en: To include the conda environment folder in your Spyder project, we’ll create
    both the project and environment folder using the command line. Let’s name the
    project folder *spyder_proj_w_env* and use conda to simultaneously create both
    folders. In this example, I’m placing it under my *C:\Users\hanna\* folder in
    Windows, but you can put it anywhere you want.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 conda 环境文件夹包含在你的 Spyder 项目中，我们将通过命令行同时创建项目和环境文件夹。我们将项目文件夹命名为 *spyder_proj_w_env*，并使用
    conda 同时创建这两个文件夹。在这个示例中，我将其放置在 Windows 中的 *C:\Users\hanna\* 文件夹下，但你可以将其放在任何位置。
- en: '**NOTE**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The subsequent instructions follow the naive approach*,* described in “Using
    Spyder with Environments and Packages,” earlier in this chapter. If you’re using
    the *modular approach*, you need only to install the spyder-kernels package in
    your project’s conda environment. After that, start Spyder from its own dedicated
    environment and then change its Python interpreter to your project’s conda environment.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*后续的说明遵循了“使用 Spyder 与环境和包”的简单方法，正如本章前面所述。如果你使用的是 *模块化方法*，你只需在项目的 conda 环境中安装
    spyder-kernels 包。之后，从 Spyder 的专用环境启动它，再将其 Python 解释器切换到你的项目 conda 环境。*'
- en: 'To begin, if Spyder is currently running, use **File** ▸ **Quit** on the top
    toolbar to exit it. Next, open Anaconda Prompt (in Windows) or a terminal (in
    macOS and Linux) and enter the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果 Spyder 当前正在运行，请使用 **文件** ▸ **退出** 在顶部工具栏退出它。接下来，打开 Anaconda 提示符（在 Windows
    中）或终端（在 macOS 和 Linux 中），并输入以下内容：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Remember, `-p` is short for `--prefix`, which lets you include a directory
    path. We’ve also installed Python and Spyder at the same time, specifying the
    version number as recommended. This represents a minimal installation of Spyder.
    To install all of Spyder’s optional dependencies for full functionality, you can
    append these package names *after* Spyder in the previous command (I’ve omitted
    version numbers for brevity):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`-p` 是 `--prefix` 的简写，它允许你指定目录路径。我们还同时安装了 Python 和 Spyder，指定了推荐的版本号。这代表了
    Spyder 的最小安装。若要安装 Spyder 所有可选的依赖包以实现完全功能，你可以在前面的命令中将这些包名添加到 Spyder 后面（为简洁起见，我省略了版本号）：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, activate the new environment and start Spyder by entering the following
    two lines, substituting the path to your environment:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，激活新的环境并通过输入以下两行启动 Spyder，替换为你的环境路径：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point, you can create a new project by selecting **Projects** ▸ **New
    Project** from Spyder’s top toolbar. Only this time, select **Existing directory**,
    leave the project name blank, and set the location to the path to the new project
    folder, *spyder_proj_w_env*, as shown in [Figure 4-11](ch04.xhtml#ch04fig11).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以通过选择 Spyder 顶部工具栏中的**项目** ▸ **新建项目**来创建一个新项目。这一次，选择**现有目录**，将项目名称留空，并将位置设置为新项目文件夹的路径，*spyder_proj_w_env*，如[图
    4-11](ch04.xhtml#ch04fig11)所示。
- en: '![Image](../images/04fig11.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig11.jpg)'
- en: '*Figure 4-11: Creating a new Spyder project using an existing directory*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-11：使用现有目录创建新的 Spyder 项目*'
- en: You can now add the additional folders for code, data, and so on, as we did
    in the previous section. At this point, you’ll have a self-contained project ([Figure
    4-12](ch04.xhtml#ch04fig12)).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像我们在上一节中所做的那样，添加代码、数据等额外的文件夹。在这一点上，你将拥有一个独立的项目（[图 4-12](ch04.xhtml#ch04fig12)）。
- en: '![Image](../images/04fig12.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig12.jpg)'
- en: '*Figure 4-12: The new Spyder project with embedded conda environment (conda_env
    folder)*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-12：带有嵌入式 conda 环境（conda_env 文件夹）的新 Spyder 项目*'
- en: Again, you can use any file organization system you prefer, but I would strongly
    advise against dumping everything straight into the project folder. This will
    create a confusing mess, especially with large projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以使用任何你喜欢的文件组织系统，但我强烈建议不要把所有东西直接丢进项目文件夹。这样会造成混乱，尤其是在处理大型项目时。
- en: '***Using the Project Pane***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用项目面板***'
- en: When it comes to working with your project folders, you have several choices.
    [Figure 4-10](ch04.xhtml#ch04fig10) was taken from Spyder’s File Explorer pane.
    If you’d rather see just your project folders when using Spyder, open the Project
    pane by clicking **View** ▸ **Panes** ▸ **Project** from the top toolbar. To close
    the File Explorer pane, use the “hamburger” icon in the upper-right corner of
    the pane or use **View** ▸ **Panes** from the top toolbar and then deselect the
    pane.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理项目文件夹时，你有几个选择。[图 4-10](ch04.xhtml#ch04fig10)是从 Spyder 的文件资源管理器面板中截取的。如果你希望在使用
    Spyder 时只看到你的项目文件夹，可以通过点击顶部工具栏的**视图** ▸ **面板** ▸ **项目**来打开项目面板。要关闭文件资源管理器面板，可以使用面板右上角的“汉堡”图标，或者通过顶部工具栏的**视图**
    ▸ **面板**并取消选择该面板。
- en: '**NOTE**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can also view your project folder from your operating system’s file explorer
    while in Spyder. From either the Project or File Explorer pane, right-click the
    project folder and then select ***Show in folder***.*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以在 Spyder 中通过操作系统的文件资源管理器查看你的项目文件夹。在项目面板或文件资源管理器面板中，右键点击项目文件夹，然后选择 ***在文件夹中显示***。*'
- en: '**The Help Pane**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**帮助面板**'
- en: Spyder’s Help pane is useful whether you’re a beginner or an experienced programmer.
    To activate it, click the **Help** tab along the bottom of the upper-right pane
    in [Figure 4-4](ch04.xhtml#ch04fig4).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder 的帮助面板无论是对初学者还是经验丰富的程序员都非常有用。要激活它，请点击[图 4-4](ch04.xhtml#ch04fig4)中右上角面板底部的**帮助**标签。
- en: When you start Spyder for the first time, you’ll see a message in the Help pane
    asking you to read a short introductory tutorial ([Figure 4-13](ch04.xhtml#ch04fig13)).
    I highly recommend it, but if you want to wait, you’ll be able to read it later
    using the Help menu on the top toolbar.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次启动 Spyder 时，你会在帮助面板中看到一条消息，提示你阅读一篇简短的介绍性教程（[图 4-13](ch04.xhtml#ch04fig13)）。我强烈推荐你阅读，但如果你想等一下，也可以稍后通过顶部工具栏的帮助菜单来查看它。
- en: '![Image](../images/04fig13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig13.jpg)'
- en: '*Figure 4-13: The Help pane at initial startup*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-13：初始启动时的帮助面板*'
- en: In addition to the Introduction tour, the toolbar Help menu provides access
    to the longer Spyder tutorial that displays in the Help pane ([Figure 4-14](ch04.xhtml#ch04fig14)).
    You can also watch videos, access both the Spyder and IPython documentation, see
    a summary of keyboard shortcuts, and more.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除了介绍性教程外，工具栏的帮助菜单还提供了更长的 Spyder 教程，它会显示在帮助面板中（[图 4-14](ch04.xhtml#ch04fig14)）。你还可以观看视频，访问
    Spyder 和 IPython 文档，查看键盘快捷键摘要等等。
- en: '![Image](../images/04fig14.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig14.jpg)'
- en: '*Figure 4-14: The Help menu and the Spyder tutorial displayed in the Help pane*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-14：帮助菜单和在帮助面板中显示的 Spyder 教程*'
- en: If you have the Help pane open while you code, it can find, render, and display
    documentation for any object with a *docstring* (descriptive text summary), including
    modules, classes, functions, and methods. This lets you access documentation directly
    from Spyder, without having to interrupt your workflow and look elsewhere.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在编码时打开了帮助窗格，它可以查找、呈现并显示任何带有*文档字符串*（描述性文本摘要）的对象的文档，包括模块、类、函数和方法。这让你可以直接在Spyder中访问文档，而无需中断工作流去查看其他地方。
- en: The Source menu at the top of the Help pane lets you select between the Editor
    and the IPython console ([Figure 4-15](ch04.xhtml#ch04fig15)). Manually clicking
    an object, such as the `print()` function in [Figure 4-15](ch04.xhtml#ch04fig15),
    and then pressing CTRL-I (CMD-I in macOS) will display information on that item.
    You can get help by manually entering an object’s name (such as “print”) in the
    **Object** textbox at the top of the pane.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助窗格顶部的源菜单让你可以在编辑器和 IPython 控制台之间进行选择（见[图 4-15](ch04.xhtml#ch04fig15)）。手动点击一个对象，比如[图
    4-15](ch04.xhtml#ch04fig15)中的`print()`函数，然后按 CTRL-I（在 macOS 上是 CMD-I）会显示该项的信息。你也可以通过在窗格顶部的**对象**文本框中手动输入对象名称（比如“print”）来获取帮助。
- en: '![Image](../images/04fig15.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig15.jpg)'
- en: '*Figure 4-15: Help output for the print() function used in the Editor, invoked
    using CTRL-I in Windows*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-15：在编辑器中使用 CTRL-I（Windows）调用的 print() 函数的帮助输出*'
- en: To enable automatic help for both the Editor and Console, first click the wrench
    icon on the main toolbar (see [Figure 4-4](ch04.xhtml#ch04fig4)), and then select
    **Help** and click the radio buttons for Editor and IPython console under Automatic
    connections. It then can be turned on and off using the “lock” icon at the top
    of the Help pane. When on, simply typing a left parenthesis character (`(`) after
    a function or method name will show its associated help document.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用编辑器和控制台的自动帮助，首先点击主工具栏上的扳手图标（见[图 4-4](ch04.xhtml#ch04fig4)），然后选择**帮助**，并在自动连接下点击编辑器和
    IPython 控制台的单选按钮。之后，可以通过帮助窗格顶部的“锁”图标打开和关闭它。当启用时，只需在函数或方法名称后输入左括号字符（`(`），即可显示其关联的帮助文档。
- en: You can also access summary help for objects by hovering over them in the Editor.
    Clicking the hover pop-up will open the full documentation in the Help pane. Just
    be sure that the Source menu is set to “Editor.”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将鼠标悬停在编辑器中的对象上来访问对象的摘要帮助。点击悬停弹窗将会在帮助窗格中打开完整的文档。确保“源”菜单设置为“编辑器”。
- en: Finally, the “hamburger” icon at the upper right of the Help pane lets you toggle
    features in the display mode, such as rich or plain text, dock and undock the
    pane, close the window, and so on.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，帮助窗格右上角的“汉堡”图标可以切换显示模式下的功能，比如富文本或纯文本、停靠和取消停靠窗格、关闭窗口等等。
- en: '**The IPython Console**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**IPython 控制台**'
- en: The IPython console, located in the lower-right pane in [Figure 4-4](ch04.xhtml#ch04fig4),
    represents a direct connection to Python that lets you run code interactively.
    We reviewed most of its functionality in [Chapter 3](ch03.xhtml), so I won’t repeat
    that here.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 控制台位于[图 4-4](ch04.xhtml#ch04fig4)中的右下窗格，代表与 Python 的直接连接，允许你交互式地运行代码。我们在[第
    3 章](ch03.xhtml)中已经回顾了大部分功能，因此这里不再赘述。
- en: With Spyder, you can open multiple consoles, restart the kernel, clear the namespace,
    view a history log, undock the window, and perform similar tasks. You can select
    some or all these options by clicking the named tab at the top of the IPython
    console pane, by using the “hamburger” icon in the upper-right corner of the pane,
    or by clicking **Consoles** on the top toolbar. You also get full GUI integration
    with the enhanced Spyder Debugger and the Variable Explorer, which we’ll look
    at in later sections.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spyder，你可以打开多个控制台、重启内核、清除命名空间、查看历史日志、取消停靠窗口以及执行类似的任务。你可以通过点击 IPython 控制台窗格顶部的命名标签、使用窗格右上角的“汉堡”图标，或者点击顶部工具栏中的**控制台**来选择这些选项。你还可以与增强版
    Spyder 调试器和变量资源管理器进行完整的图形用户界面集成，我们将在后续章节中探讨。
- en: '***Using the Console for Output and Plotting***'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用控制台进行输出和绘图***'
- en: When you use Spyder’s text editor, any text-based output will appear in the
    console. Likewise, any Matplotlib-based graphics will display either in the console,
    as you saw in [Chapter 3](ch03.xhtml), or in Spyder’s Plots pane. The Plots pane
    is the default location, but you can force graphics to display *within* the console
    by opening the **Plots** pane, clicking the “hamburger” icon in the upper-right
    corner, and then deselecting **Mute inline plotting**. You can also control the
    graphics display from the top toolbar by choosing **Tools** ▸ **Preferences**
    ▸ **IPython console** ▸ **Graphics** and then selecting from the Graphics backend
    menu ([Figure 4-16](ch04.xhtml#ch04fig16)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Spyder 的文本编辑器时，任何基于文本的输出都会显示在控制台中。同样，任何基于 Matplotlib 的图形将会显示在控制台中，如你在[第
    3 章](ch03.xhtml)中看到的，或者显示在 Spyder 的 Plots 窗格中。Pltots 窗格是默认位置，但你也可以通过打开**Plts**窗格，点击右上角的“汉堡”图标，然后取消选择**静默内联绘图**，强制图形显示*在*控制台内。你也可以通过选择顶部工具栏中的**工具**
    ▸ **首选项** ▸ **IPython 控制台** ▸ **图形**，然后从图形后端菜单中选择来控制图形的显示方式（[图 4-16](ch04.xhtml#ch04fig16)）。
- en: '![Image](../images/04fig16.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig16.jpg)'
- en: '*Figure 4-16: The IPython console Graphics dialog*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-16：IPython 控制台图形对话框*'
- en: Displaying graphics in the console is a good choice if you want to save a record
    of an interactive session. If you need to interact with the plot, however, such
    as zooming, configuring subplots, manipulating files, and saving them using different
    formats, you’ll want to open it in a new window. You can do this by adding the
    magic command `%matplotlib qt` after the imports at the top of your program.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台显示图形是一个不错的选择，如果你想保存交互式会话的记录。然而，如果你需要与图形进行交互，例如缩放、配置子图、操作文件并使用不同的格式保存图形，你就需要在新窗口中打开图形。你可以通过在程序顶部导入模块后添加魔法命令`%matplotlib
    qt`来实现这一点。
- en: '**NOTE**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Some types of graphics can’t be displayed within Spyder but will instead open
    in a browser or an external native window. These include web-based graphics and
    Turtle and TKinter windows.*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*某些类型的图形无法在 Spyder 中显示，而是会在浏览器或外部本地窗口中打开。这些图形包括基于 Web 的图形和 Turtle 和 TKinter
    窗口。*'
- en: '***Using Kernels with the Console***'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在控制台中使用内核***'
- en: The Python kernel is a computational engine that executes the code. You have
    several options for working with kernels in the console, including starting new
    kernels and interrupting running kernels. These are accessible from either Consoles
    on the top toolbar, the named console tab, or the “hamburger” icon on the IPython
    console pane.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内核是执行代码的计算引擎。你可以在控制台中使用几种操作内核的方式，包括启动新的内核和中断正在运行的内核。这些功能可以通过顶部工具栏中的控制台菜单、命名的控制台标签，或
    IPython 控制台窗格中的“汉堡”图标访问。
- en: You can also connect to external local and remote kernels (including those managed
    by Jupyter Notebook or Qt console) through the Consoles menu. To learn more, see
    *[https://docs.spyder-ide.org/5/panes/ipythonconsole.html](https://docs.spyder-ide.org/5/panes/ipythonconsole.html)*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过控制台菜单连接到外部本地和远程内核（包括由 Jupyter Notebook 或 Qt 控制台管理的内核）。要了解更多信息，请访问 *[https://docs.spyder-ide.org/5/panes/ipythonconsole.html](https://docs.spyder-ide.org/5/panes/ipythonconsole.html)*。
- en: '***Clearing the Namespace***'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***清除命名空间***'
- en: The Python kernel keeps track of objects such as variables and functions that
    you use when coding. This collection of objects, defined in the console at any
    given time, is called the *namespace*. To keep the namespace from becoming cluttered,
    Spyder allows you to clear it whenever you want.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内核会跟踪你在编写代码时使用的对象，例如变量和函数。这个在控制台中定义的对象集合被称为*命名空间*。为了防止命名空间变得凌乱，Spyder
    允许你在任何时候清除命名空间。
- en: Let’s look at an example. The left pane in [Figure 4-17](ch04.xhtml#ch04fig17)
    is the text editor, and the right pane is the console. You can use both to write
    code. In the editor, I set `x = 5` and then pressed F5 to run the program. Because
    I didn’t include a `print()` function, nothing seems to happen, but internally,
    Python has assigned the `x` variable a value of 5.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个示例。[图 4-17](ch04.xhtml#ch04fig17) 中的左窗格是文本编辑器，右窗格是控制台。你可以在两者中编写代码。在编辑器中，我设置了
    `x = 5`，然后按 F5 运行程序。因为我没有包括 `print()` 函数，所以看似没有任何反应，但实际上，Python 已经将值 5 分配给了变量
    `x`。
- en: '![Image](../images/04fig17.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig17.jpg)'
- en: '*Figure 4-17: Both the text editor (left) and console (right) share the same
    x value*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-17：文本编辑器（左）和控制台（右）共享相同的 x 值*'
- en: Now I decide to stop and test a coding idea in the console. I want to use an
    `x` value of 10, but I forget to type that in. Instead, I immediately multiply
    `x` by 10 and get an output of 50 ([Figure 4-17](ch04.xhtml#ch04fig17)). Normally,
    this would raise an error, as I haven’t named `x` yet, but because I did this
    earlier in the editor (in what I think is a separate program), `x` is already
    in the namespace. From my perspective, this result is unexpected.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我决定停下来在控制台中测试一个编程想法。我想使用 `x` 的值为 10，但我忘记输入这个值。相反，我直接将 `x` 乘以 10，得到了 50 的输出
    ([图 4-17](ch04.xhtml#ch04fig17))。通常来说，这会引发错误，因为我还没有命名 `x`，但是由于我之前在编辑器中做了这件事（我认为那是一个独立的程序），`x`
    已经在命名空间中了。从我的角度来看，这个结果是出乎意料的。
- en: Debugging this in a tiny snippet is easy, but imagine that you’re working with
    longer, more complicated programs. A single occurrence of the `x` variable might
    be buried in 200 lines of code. Even with small programs, a common error is to
    run the program, delete something important, and then not notice the mistake as
    the program runs correctly, because the deleted object is resident in memory.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个小片段中调试很简单，但想象一下你正在处理更长、更复杂的程序。`x` 变量的一次出现可能会隐藏在 200 行代码中。即便是小程序，一个常见的错误是运行程序、删除了某个重要的部分，然后在程序正确运行时没有注意到这个错误，因为被删除的对象已经驻留在内存中。
- en: 'These persistent objects are easily forgotten and can come from numerous sources
    including previously executed code, interactive work in the console, or convenience
    imports of libraries (Spyder may do some of those convenience imports automatically).
    To remove these objects and clear the namespace without restarting the kernel,
    you can click **Remove all variables** under the Consoles menu on the top toolbar,
    or under the Console tab in the Console pane. You can also remove all the variables
    by entering the following in the console:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些持久对象很容易被忘记，它们可能来自多个来源，包括先前执行的代码、控制台中的交互式工作或便捷的库导入（Spyder 可能会自动进行一些便捷导入）。要在不重新启动内核的情况下删除这些对象并清空命名空间，你可以点击顶部工具栏中的**删除所有变量**，或在控制台面板中的控制台标签下进行操作。你也可以通过在控制台中输入以下命令删除所有变量：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to view the objects defined in the global namespace of a session,
    use:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看会话中全局命名空间中定义的对象，可以使用：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that even after removing all variables, a dozen or so built-in objects
    will remain. The namespace will never be completely empty.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使删除了所有变量，仍会有十几个内建对象存在。命名空间永远不会完全为空。
- en: As a rule, whenever you finish coding a program, you should check that it runs
    independently by first removing all variables or starting a new kernel.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，每当你完成编写一个程序时，应该首先通过删除所有变量或启动一个新内核来检查程序是否能够独立运行。
- en: '***The History Pane***'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***历史面板***'
- en: The History pane ([Figure 4-4](ch04.xhtml#ch04fig4)) contains a timestamped
    record of all the commands and code that you’ve run in a console. You can use
    this log to retrace your steps and reproduce your work. It won’t show output or
    messages, however, and if you run a program in the Editor pane, it will show only
    that the file was *run*, not what commands were executed. And no matter how many
    consoles you have open, there’ll be only one History pane. All the commands from
    the various consoles will be listed in the order in which they were executed,
    with no indication as to the source console.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 历史面板 ([图 4-4](ch04.xhtml#ch04fig4)) 包含了你在控制台中运行的所有命令和代码的时间戳记录。你可以使用这个日志回顾你的操作步骤并重现你的工作。然而，它不会显示输出或消息，如果你在编辑器面板中运行程序，它只会显示文件被*运行*，而不会显示执行了哪些命令。不管你打开了多少个控制台，历史面板只有一个。所有来自不同控制台的命令将按执行顺序列出，而不会标明是来自哪个控制台。
- en: You can copy commands from the History pane and paste them in both the console
    and the editor. Currently, only 1,000 lines of history can be shown in the pane
    and there’s no way to clear the history. The list of commands are stored in *history.py*
    in the .*spyder-py3* directory in your user home folder (such as *C:/Users/<username*>
    on Windows, */Users/<username>* for macOS, and */home/<username>* on GNU/Linux).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从历史面板中复制命令，并将它们粘贴到控制台和编辑器中。目前，历史面板最多只能显示 1,000 行历史记录，并且没有办法清除历史。命令列表存储在用户主文件夹中的
    *history.py* 文件中，位置在 .*spyder-py3* 目录下（例如，Windows 系统中为 *C:/Users/<username*>，macOS
    系统中为 */Users/<username>*，在 GNU/Linux 系统中为 */home/<username>*）。
- en: '***Special Consoles***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***特殊控制台***'
- en: In addition to the IPython console, Spyder supports several *special consoles*
    that you can launch from either Consoles on the top toolbar or by using the “hamburger”
    icon on the IPython console pane. For example, the Cython console lets you use
    Cython (a superset of the Python language) to speed up your code and call C functions
    directly from Python. The SymPy console enables the creation and display of symbolic
    math expressions. You can also activate symbolic math usage through **Preferences**
    ▸ **IPython console** ▸ **Advanced Settings** ▸ **Use symbolic math**, assuming
    you have the SymPy package installed. For more on this, click **Help** ▸ **Spyder
    tutorial** on the top toolbar.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 IPython 控制台，Spyder 还支持几种*特殊控制台*，你可以从顶部工具栏的“控制台”或通过使用 IPython 控制台面板上的“汉堡”图标启动。例如，Cython
    控制台让你使用 Cython（Python 语言的超集）来加速代码，并能直接从 Python 调用 C 函数。SymPy 控制台则支持创建和显示符号数学表达式。你还可以通过
    **首选项** ▸ **IPython 控制台** ▸ **高级设置** ▸ **使用符号数学** 来激活符号数学功能，前提是你已安装 SymPy 包。更多内容，请点击顶部工具栏上的
    **帮助** ▸ **Spyder 教程**。
- en: '**The Editor Pane**'
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编辑器面板**'
- en: The text editor ([Figure 4-4](ch04.xhtml#ch04fig4)) is the heart and soul of
    Spyder. Whereas a console is basically a “scratch pad” designed for throw-away,
    interactive scripting with little to no persistence, Spyder’s Editor pane lets
    you create programs that you can save and run (or edit) later. You can think of
    it as a word processor with coding-friendly features like syntax highlighting,
    real-time code and style analysis, on-demand completion, common keyboard shortcuts,
    horizontal and vertical splitting, and more.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器（[图 4-4](ch04.xhtml#ch04fig4)）是 Spyder 的核心。与控制台基本上是为一次性、交互式脚本编写而设计的“草稿本”，几乎没有持久化功能不同，Spyder
    的编辑器面板让你能够创建可以保存和稍后运行（或编辑）的程序。你可以将它看作是一个带有代码友好功能的文字处理器，如语法高亮、实时代码和风格分析、按需补全、常用键盘快捷键、水平和垂直拆分等。
- en: '***Writing a Program Using the Editor***'
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用编辑器编写程序***'
- en: 'To take the editor for a test drive, use either the command line or Navigator
    to activate the *spyder_proj_w_env* environment that you made in “Creating a Project
    in an Existing Directory” earlier in the chapter To try out plotting in the IDE,
    install the NumPy and Matplotlib packages in the active environment using either
    Navigator or the command line. In the command line, this looks like the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试编辑器，可以使用命令行或导航器激活你在本章“在现有目录中创建项目”部分中创建的*spyder_proj_w_env*环境。要在 IDE 中尝试绘图，请使用导航器或命令行在活动环境中安装
    NumPy 和 Matplotlib 包。在命令行中，这看起来像以下内容：
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-y` (short for `--yes`) just confirms the installation command at execution
    so that you don’t have do it manually during the process. I show this for your
    convenience, but it’s always safer to manually confirm installations and removals.
    This gives you another opportunity to confirm that the correct environment is
    activated and that conda isn’t having to downgrade an existing package, due to
    some dependency.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`-y`（`--yes` 的简写）只是确认在执行时的安装命令，这样你就不需要在过程中手动确认。为了方便起见，我这样展示，但手动确认安装和删除总是更安全。这也给你提供了另一个机会，确认正确的环境已被激活，并且
    conda 不需要降级现有包，避免由于某些依赖问题。'
- en: Next, launch Spyder from the same environment, using either the Windows Start
    menu (be sure to pick the icon with the proper environment name), Anaconda Navigator,
    or the command line. You’re now ready to write your first program with the editor.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从相同的环境启动 Spyder，可以通过 Windows 开始菜单（确保选择带有正确环境名称的图标）、Anaconda Navigator 或命令行启动。现在你可以使用编辑器编写你的第一个程序了。
- en: To evaluate Spyder’s plotting capability, let’s use the “Stem Plot” example
    from the Matplotlib gallery (*[https://matplotlib.org/stable/gallery/index.html](https://matplotlib.org/stable/gallery/index.html)*).
    Start a new file by clicking **File** ▸ **New file** on the top toolbar or by
    using CTRL-N. You’ll see a new “untitled” tab appear in the Editor pane.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估 Spyder 的绘图功能，让我们使用 Matplotlib 画廊中的“Stem Plot”示例（*[https://matplotlib.org/stable/gallery/index.html](https://matplotlib.org/stable/gallery/index.html)*）。通过点击顶部工具栏中的
    **文件** ▸ **新建文件** 或使用 CTRL-N 来启动一个新文件。你将看到一个新的“未命名”标签出现在编辑器面板中。
- en: 'Delete the boilerplate text in the editor pane and type in the code that follows.
    Unlike the console, it’s okay to press ENTER to add new lines. In script mode,
    your code is executed later using special commands. If you’re a complete beginner,
    don’t worry about the code details; for now, focus on how the Editor pane works:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 删除编辑器窗格中的模板文本，并输入以下代码。与控制台不同，按 ENTER 键添加新行是可以的。在脚本模式下，您的代码稍后会通过特殊命令执行。如果您是初学者，不必担心代码的细节；目前，专注于编辑器窗格的操作方式：
- en: '[PRE12]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Although it’s possible to run this code now, let’s save it first using **File**
    ▸ **Save as** on the top toolbar. Name the file *stem_plot.py* and save it in
    the *code* folder of your Spyder project.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现在已经可以运行这段代码，但首先让我们使用顶部工具栏中的 **文件** ▸ **另存为** 来保存它。将文件命名为 *stem_plot.py*，并将其保存在
    Spyder 项目的 *code* 文件夹中。
- en: '**NOTE**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The text editor supports many keyboard shortcuts. To see a list, on the top
    toolbar, click ***Help*** ▸ ***Shortcuts summary***. To search for a specific
    shortcut, click ***Tools*** ▸ ***Preferences*** ▸ ***Keyboard shortcuts***, also
    on the top toolbar.*'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*文本编辑器支持许多键盘快捷键。要查看快捷键列表，请点击顶部工具栏中的 ***帮助*** ▸ ***快捷键概述***。要查找特定快捷键，请点击 ***工具***
    ▸ ***首选项*** ▸ ***键盘快捷键***，同样在顶部工具栏中。*'
- en: To execute the code, you have several choices. You can use the “play” arrow
    on the left side of the Run toolbar ([Figure 4-4](ch04.xhtml#ch04fig4)), click
    inside the Editor pane and press CTRL-ENTER, or press F5 (or FN-F5, depending
    on your keyboard) from within the Editor pane.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行代码，您有几个选择。您可以使用运行工具栏左侧的“播放”箭头（参见[图 4-4](ch04.xhtml#ch04fig4)），点击编辑器窗格内并按
    CTRL-ENTER，或在编辑器窗格内按 F5（或 FN-F5，具体取决于您的键盘）。
- en: If this is the first time you’ve run a program in Spyder, you’ll be asked to
    choose a run configuration ([Figure 4-18](ch04.xhtml#ch04fig18)). Choose the default
    selection, **Execute in current console**. We’ll talk about what this means in
    “Setting the Run Configuration” later in the chapter.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次在 Spyder 中运行程序，系统会要求您选择一个运行配置（参见[图 4-18](ch04.xhtml#ch04fig18)）。选择默认选项
    **在当前控制台中执行**。我们将在本章后面的小节中讨论这意味着什么，具体是“设置运行配置”部分。
- en: '![Image](../images/04fig18.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig18.jpg)'
- en: '*Figure 4-18: The Run settings dialog*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-18：运行设置对话框*'
- en: You should now see the results shown in [Figure 4-19](ch04.xhtml#ch04fig19).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能看到[图 4-19](ch04.xhtml#ch04fig19)中显示的结果。
- en: '![Image](../images/04fig19.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig19.jpg)'
- en: '*Figure 4-19: The Spyder interface after executing the stem_plot.py program*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-19：执行 stem_plot.py 程序后的 Spyder 界面*'
- en: One thing to note in [Figure 4-19](ch04.xhtml#ch04fig19) is that the text output,
    “This is a stem plot,” appears in the console window. This is a cleaner outcome
    compared to programming in the console, where your code, along with any output—including
    error messages—are displayed together in the same window.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 4-19](ch04.xhtml#ch04fig19)中需要注意的一点是，文本输出“这是一个茎图”出现在控制台窗口中。这比在控制台中编程要干净得多，因为在控制台中，代码及其输出（包括错误信息）会一起显示在同一个窗口中。
- en: 'After you run a program in the editor, it’s “known” to the console. This means
    that it remembers things like named variables and defined functions. To see an
    example, in the IPython console, enter the following and then press ENTER:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中运行程序后，程序就会被“识别”到控制台。这意味着它会记住像命名变量和定义的函数等内容。要查看示例，请在 IPython 控制台中输入以下内容，然后按
    ENTER 键：
- en: '[PRE13]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This should regenerate the stem plot in [Figure 4-19](ch04.xhtml#ch04fig19).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会重新生成[图 4-19](ch04.xhtml#ch04fig19)中的茎图。
- en: Behavior such as this is useful when developing and debugging complex programs
    and when exploring large datasets that you don’t want to load more than once.
    It can also lead to unexpected results, as discussed earlier in “Clearing the
    Namespace” earlier in the chapter.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为在开发和调试复杂程序时非常有用，尤其是在探索大型数据集时，您不希望加载超过一次。它也可能导致意外结果，正如我们在本章“清空命名空间”部分所讨论的那样。
- en: 'Now, let’s look at another way to display a plot. In the Editor pane, add the
    `%matplotlib qt` magic command below the imports, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看另一种显示图形的方式。在编辑器窗格中，在导入语句下方添加 `%matplotlib qt` 魔法命令，如下所示：
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save the file as *stem_plot.py* and then use CTRL-ENTER to run the program.
    In this case, the plot displays in an external window (check your task bar for
    an icon if nothing pops up). This Qt window has a toolbar with more options than
    are available inline ([Figure 4-20](ch04.xhtml#ch04fig20)).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为*stem_plot.py*，然后使用 CTRL-ENTER 运行程序。在这种情况下，图形会显示在外部窗口中（如果没有弹出窗口，请检查任务栏是否有图标）。这个
    Qt 窗口有一个工具栏，比内联模式下提供的选项更多（参见[图 4-20](ch04.xhtml#ch04fig20)）。
- en: '![Image](../images/04fig20.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig20.jpg)'
- en: '*Figure 4-20: The stem plot displayed in an external Qt window*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-20：在外部 Qt 窗口中显示的 Stem 图*'
- en: This is a good time to revisit the global namespace. Close the Qt window. Now,
    delete the `%matplotlib qt` magic command from the file and save it by pressing
    CTRL-S. Whether you rerun the file from the editor or use `plt.stem(x, y)` in
    the console as we did earlier, the Qt window pops up again. Even though you removed
    it from the file, the old command is still persistent in memory.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是重新访问全局命名空间的好时机。关闭 Qt 窗口。现在，从文件中删除 `%matplotlib qt` 魔法命令，并按 CTRL-S 保存。无论你是从编辑器重新运行文件，还是像之前一样在控制台使用
    `plt.stem(x, y)`，Qt 窗口都会再次弹出。即使你将其从文件中删除，旧的命令仍然会在内存中持续存在。
- en: To restore the inline plotting, restart the kernel or run the magic command
    `%matplotlib inline`, either in the console or through the editor.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复内联绘图，请重启内核或运行魔法命令 `%matplotlib inline`，无论是在控制台还是通过编辑器。
- en: '***Defining Code Cells***'
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***定义代码单元格***'
- en: In the previous example, you typed a complete program into the Editor pane and
    then ran it. You can also run it one line at a time, or run a block of connected
    lines, referred to as a “code cell.”
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，你将完整的程序输入到编辑器窗格中然后运行。你也可以一次运行一行，或运行一个连贯的代码块，称为“代码单元格”。
- en: To look at an example, create a new file, only this time, use the rectangular
    “New file” icon on the left side of the Files toolbar ([Figure 4-4](ch04.xhtml#ch04fig4)).
    Name the file *temperature_converter.py* and save it in the *code* folder.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 查看示例时，创建一个新文件，不过这次使用文件工具栏左侧的矩形“新建文件”图标（[图 4-4](ch04.xhtml#ch04fig4)）。将文件命名为
    *temperature_converter.py* 并保存在 *code* 文件夹中。
- en: In this example, assume that you’re always having to convert temperature measurements
    from one scale to another and you want to put several conversion equations in
    one file, for convenience. You don’t want to run the whole program every time,
    because you’re normally performing just one conversion, such as Fahrenheit to
    Celsius, or Celsius to Kelvin. In this case, code cells are a handy solution.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，假设你总是需要将温度测量值从一个刻度转换到另一个刻度，并且你希望将几个转换公式放在一个文件中以方便使用。你不想每次都运行整个程序，因为你通常只执行一次转换，比如从华氏度到摄氏度，或从摄氏度到开尔文度。在这种情况下，代码单元格是一个便捷的解决方案。
- en: 'Enter the following code into the new file and save it. Use `#%%` to separate
    the code into discrete cells:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码输入到新文件中并保存。使用 `#%%` 将代码分割成独立的单元格：
- en: '[PRE15]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding a description to the right of the separator not only documents what the
    cell does, it names that cell in the Outline pane. To activate this pane, go to
    the top toolbar and click **View** ▸ **Panes** ▸ **Outline**. [Figure 4-21](ch04.xhtml#ch04fig21)
    shows the Editor and Outline panes together.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在分隔符右侧添加描述不仅记录了该单元格的功能，还在大纲窗格中为该单元格命名。要激活此窗格，请前往顶部工具栏，点击 **查看** ▸ **窗格** ▸ **大纲**。[图
    4-21](ch04.xhtml#ch04fig21) 显示了编辑器和大纲窗格的组合。
- en: '![Image](../images/04fig21.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig21.jpg)'
- en: '*Figure 4-21: The Editor pane (left) and Outline pane (right) for the temperature_converter.py
    program*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-21：温度转换器程序（temperature_converter.py）的编辑器窗格（左）和大纲窗格（右）*'
- en: In the Editor pane in [Figure 4-21](ch04.xhtml#ch04fig21), notice how the horizontal
    lines divide the script into cells starting with the `#%%` separators. In the
    Outline pane, the descriptions of the cells appear in order, from top to bottom.
    If you click a description, the corresponding cell in the Editor pane is highlighted
    and activated. You can also highlight a cell by clicking in it in the text editor.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 4-21](ch04.xhtml#ch04fig21)中的编辑器窗格中，注意到水平线如何将脚本划分为以 `#%%` 分隔的单元格。在大纲窗格中，单元格的描述按顺序从上到下出现。如果点击某个描述，编辑器窗格中对应的单元格将被高亮并激活。你也可以通过在文本编辑器中点击单元格来高亮显示该单元格。
- en: To see the options for running cells, hover your cursor over the icons on the
    Run toolbar ([Figure 4-4](ch04.xhtml#ch04fig4)). This will also reveal the keyboard
    shortcuts. To run just the middle cell that converts Celsius to Fahrenheit, click
    in the cell, and then press CTRL-ENTER or click the **Run current cell** icon
    from the toolbar. You can also run a selection of code or a single line using
    an icon or the F9 key.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看运行单元格的选项，将鼠标光标悬停在运行工具栏上的图标上（[图 4-4](ch04.xhtml#ch04fig4)）。这还会显示快捷键。要运行仅将摄氏度转换为华氏度的中间单元格，请点击该单元格，然后按
    CTRL-ENTER 或点击工具栏上的 **运行当前单元格** 图标。你也可以使用图标或 F9 键运行选定的代码或单行代码。
- en: The ability to run selected cells or single lines is useful when designing and
    debugging programs. It’s also handy for, say, changing a plot’s parameters and
    evaluating the results without reloading all the input data. You can also use
    this to update part of a program without rerunning all the code, but keep in mind
    that the console will “remember” only the last thing that was run. If this becomes
    confusing, you’ll want to refresh the console by restarting the kernel or removing
    all variables from the namespace.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 能够运行选定的单元或单行代码在设计和调试程序时非常有用。它还很方便，比如说，改变绘图参数并评估结果，而不需要重新加载所有输入数据。你也可以用它更新程序的一部分，而不重新运行所有代码，但请记住，控制台只会“记住”最后一次执行的内容。如果这变得令人困惑，你可能需要通过重启内核或清除所有变量来刷新控制台。
- en: '***Setting the Run Configuration***'
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***设置运行配置***'
- en: 'When you run a program in the editor for the first time, either using **Run**
    ▸ **Run** from the toolbar or by pressing F5, a dialog will open and ask you to
    choose the method for executing the file (see [Figure 4-18](ch04.xhtml#ch04fig18)).
    You’ll have three choices:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次在编辑器中运行程序时，无论是通过工具栏的 **Run** ▸ **Run** 还是按 F5 键，都会弹出一个对话框，询问你选择执行文件的方法（参见[图
    4-18](ch04.xhtml#ch04fig18)）。你会有三个选择：
- en: Execute in current console (the default)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在当前控制台中执行（默认）
- en: Execute in dedicated console
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在专用控制台中执行
- en: Execute in an external system console
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在外部系统控制台中执行
- en: We’ll look at the first two in more detail next, but the recommendation for
    beginners is to use the default option, **Execute in current console**, and then
    verify that completed code executes independently. This requires clearing the
    namespace by removing all variables or restarting the kernel prior to checking
    the program.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将详细介绍前两种，但对于初学者的建议是使用默认选项**在当前控制台中执行**，然后验证已完成的代码是否可以独立执行。这需要通过删除所有变量或在检查程序之前重启内核来清理命名空间。
- en: Don’t worry about getting locked into a decision. You can change the run configuration
    at any time by selecting **Run** ▸ **Configuration per file** from the top toolbar.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心被锁定在某个决定中。你可以随时通过从顶部工具栏选择 **Run** ▸ **Configuration per file** 来更改运行配置。
- en: '**Executing in the Current Console**'
  id: totrans-201
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在当前控制台中执行**'
- en: When a file is executed in the current console, you can continue to interact
    with the console after the file runs. This lets you inspect and interact with
    any objects created during execution. This is a useful feature for incremental
    coding, testing, and debugging. As you saw in “Writing a Program Using the Editor,”
    it lets you call commands and functions from the console without executing the
    file again.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当在当前控制台中执行文件时，文件运行完毕后，你可以继续与控制台交互。这使得你可以检查并与执行过程中创建的任何对象进行交互。这是增量编码、测试和调试时非常有用的功能。如同在“使用编辑器编写程序”中所示，它让你可以从控制台调用命令和函数，而无需再次执行文件。
- en: This comes at a price, however. Objects can persist in the global namespace
    from before execution of the code (see “Clearing the Namespace” on [page 76](ch04.xhtml#ch00lev2sec38)).
    One way to ensure that your code does not depend on existing but transitory objects
    in the namespace is to execute the file in a new console, as described next.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这也有代价。对象可能在执行代码之前就已经在全局命名空间中持久存在（参见[第76页](ch04.xhtml#ch00lev2sec38)的“清理命名空间”）。确保代码不依赖于命名空间中现有但临时存在的对象的一种方法是，如下所述，在新控制台中执行文件。
- en: '**Executing in a Dedicated Console**'
  id: totrans-204
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在专用控制台中执行**'
- en: Choosing the **Execute in a dedicated console** option means that a new IPython
    console is opened every time you execute code in the editor. With this option,
    you can be sure that there are no persistent global objects polluting the namespace,
    such as undefined functions, unnamed variables, or unimported packages. It’s a
    safe option, but it provides a bit less flexibility for interacting with your
    code. It can also generate a lot of console tabs to manage. So, if you’re aware
    of namespace issues, the **Executing in the current console** option is preferred.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**在专用控制台中执行**选项意味着每次在编辑器中执行代码时，都会打开一个新的 IPython 控制台。选择此选项，可以确保没有持久化的全局对象污染命名空间，例如未定义的函数、无名变量或未导入的包。这是一个安全的选项，但在与代码交互时提供的灵活性稍差。它还可能生成很多控制台标签需要管理。因此，如果你已经意识到命名空间问题，**在当前控制台中执行**选项是更优选。
- en: '***Autocompleting Text***'
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自动完成文本***'
- en: 'To save you keystrokes, both the text editor and console support the use of
    *autocompletion* using the TAB key. For example, enter the following long variable
    name in the editor:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省你的敲击次数，文本编辑器和控制台都支持使用 TAB 键进行 *自动完成*。例如，在编辑器中输入以下长变量名：
- en: '[PRE16]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, slowly start typing it again and watch what happens.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，慢慢开始再次输入它，看看会发生什么。
- en: When you start typing the name of an object such as a command, function, variable,
    class, and so on, the editor will present you with a list of objects that start
    with those letters ([Figure 4-22](ch04.xhtml#ch04fig22)). In the console, you
    must press TAB to display the list.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始输入一个对象的名称时，比如命令、函数、变量、类等，编辑器会显示以这些字母开头的对象列表（[图 4-22](ch04.xhtml#ch04fig22)）。在控制台中，你必须按
    TAB 键来显示列表。
- en: '![Image](../images/04fig22.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig22.jpg)'
- en: '*Figure 4-22: Using the Autocomplete functionality*'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-22：使用自动完成功能*'
- en: If the name is unique, or at the top of the list, you can press the TAB or ENTER
    key immediately and Spyder will fill out the rest of the name. If there are multiple
    choices, you can either keep typing until only the name you want remains and then
    press TAB or ENTER; use the arrow keys to select the correct name and press TAB
    or ENTER; or double-click the correct name with the mouse. You can change the
    number of characters that you need to type to see the list of suggested completions
    by going to **Tools** ▸ **Preferences** ▸ **Completion and Linting** on the top
    toolbar.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果名称是唯一的，或者位于列表的顶部，你可以直接按 TAB 或 ENTER 键，Spyder 会自动填充剩余的部分。如果有多个选择，你可以继续输入，直到只剩下你想要的名称，然后按
    TAB 或 ENTER；也可以使用箭头键选择正确的名称并按 TAB 或 ENTER；或者用鼠标双击正确的名称。你可以通过进入 **工具** ▸ **首选项**
    ▸ **自动完成与 Linting** 来改变看到建议完成列表所需的字符数。
- en: Autocompletion is a great feature because it supports writing “Pythonic” code
    that’s easy to read. With autocompletion, you can use highly descriptive variable
    and function names, like `photoshpere_temperature_in_celsius` or `step_2_apply_Gaussian_blur()`
    without incurring repetitive strain injuries.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 自动完成是一个很棒的功能，因为它支持编写易于阅读的“Pythonic”代码。通过自动完成，你可以使用高度描述性的变量和函数名，例如 `photoshpere_temperature_in_celsius`
    或 `step_2_apply_Gaussian_blur()`，而不会产生重复性劳损。
- en: '**The Code Analysis Pane**'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码分析窗格**'
- en: Python has certain guidelines for writing code that the community is expected
    to follow. The goal is to produce Pythonic code that others can easily pickup
    and understand. We examine these guidelines later in [Part II](part02.xhtml#part02).
    For now, know that *linters* are tools that review your code and provide feedback
    on where you might have violated a guideline. Spyder uses the best-in-class *Pylint*
    linter in its Code Analysis pane.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有一些写代码的准则，社区成员应遵循这些准则。目标是编写 Pythonic 代码，其他人可以轻松理解和使用。我们将在[第二部分](part02.xhtml#part02)中进一步讨论这些准则。现在，只需要知道，*linter*
    是一种工具，可以审查你的代码并提供反馈，指出可能违反准则的地方。Spyder 在其代码分析窗格中使用了业内最好的 *Pylint* linter。
- en: Code analysis will help you to improve your code by detecting style issues,
    bad practices, and potential bugs. You should not consider a program complete—or
    ready to post on an online help site—until you’ve run it through a linter.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析将帮助你通过检测风格问题、不良实践和潜在的 bug 来改进代码。在你通过 linter 运行程序之前，你不应该认为程序已经完成——或者准备好发布到在线帮助网站上。
- en: Let’s look at how this works. Use **Projects** ▸ **Open Project** from the top
    toolbar to open the *spyder_proj_w_env* project that you made earlier in “Creating
    a Project in an Existing Directory.” Then, open the *stem_plot.py* file in the
    editor using **File** ▸ **Open** from the top toolbar. We made this file previously
    in “Writing a Program Using the Editor.” Next, open the Code Analysis pane by
    clicking in the Editor pane and pressing F8, or by using **Source** ▸ **Run Code
    Analysis** on the top toolbar. You should get the results shown in [Figure 4-23](ch04.xhtml#ch04fig23).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个功能是如何工作的。从顶部工具栏选择 **项目** ▸ **打开项目**，打开你之前在“在现有目录中创建项目”一节中创建的 *spyder_proj_w_env*
    项目。然后，使用顶部工具栏的 **文件** ▸ **打开** 打开 *stem_plot.py* 文件。我们之前在“使用编辑器编写程序”一节中创建了这个文件。接下来，通过点击编辑器窗格并按
    F8，或通过使用顶部工具栏的 **源** ▸ **运行代码分析** 来打开代码分析窗格。你应该看到[图 4-23](ch04.xhtml#ch04fig23)中显示的结果。
- en: '![Image](../images/04fig23.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig23.jpg)'
- en: '*Figure 4-23: The Editor pane (left) and Code Analysis pane (right) for the
    stem_plot.py program*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-23：编辑器窗格（左）和代码分析窗格（右）用于 stem_plot.py 程序*'
- en: At the top of the Code Analysis pane on the right, you can see that the code
    was given a high evaluation score of 8.33 out of 10\. The only violation was for
    having trailing newlines (blank lines) at the end of the program.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧代码分析窗格的顶部，你可以看到代码获得了 8.33 分（满分 10 分）的高评价。唯一的违规之处是程序末尾存在多余的换行符（空行）。
- en: You can customize the code analysis by clicking **Tools** ▸ **Preferences**
    and then selecting from the **General**, **Linting**, **Code style and formatting**,
    and **Docstring style** tabs. There’s lots to choose from, including ignoring
    certain errors and warnings, changing the tool used to format code, picking the
    convention used to lint docstrings, underlining errors and warnings, and more.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击 **工具** ▸ **首选项**，然后从 **常规**、**Linting**、**代码风格和格式**、**文档字符串风格**标签中进行选择，来定制代码分析。这里有很多选项，包括忽略某些错误和警告、改变格式化代码所用的工具、选择用于检查文档字符串的约定、下划线标记错误和警告等。
- en: 'You can also suppress messages by adding specific comments to your code. For
    example, an expectation is that most variables in the global space represent *constants*
    and should be named using all caps. In short programs, you might choose to ignore
    this by inserting the following comment at the top of your file:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过向代码中添加特定的注释来抑制消息。例如，一个期望是大多数全局空间中的变量应表示*常量*并应使用全大写字母命名。在短小的程序中，你可能选择通过在文件顶部插入以下注释来忽略这一点：
- en: '[PRE17]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To find the proper message name, such as “trailing-newlines,” check the results
    in the Code Analysis pane (see [Figure 4-23](ch04.xhtml#ch04fig23)).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到正确的消息名称，如“trailing-newlines”，请检查代码分析窗格中的结果（见[图 4-23](ch04.xhtml#ch04fig23)）。
- en: For more on code analysis, see the “Panes in Depth” section of the Spyder documentation
    (*[https://docs.spyder-ide.org/](https://docs.spyder-ide.org/)*). For more on
    the Python style guide, see *[https://pep8.org/](https://pep8.org/)*.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多代码分析的内容，请参阅 Spyder 文档中的“深入窗格”部分（*[https://docs.spyder-ide.org/](https://docs.spyder-ide.org/)*）。要了解更多
    Python 风格指南，请参阅 *[https://pep8.org/](https://pep8.org/)*。
- en: '**The Variable Explorer Pane**'
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**变量资源管理器窗格**'
- en: The Variable Explorer pane lets you view and edit variables generated during
    the execution of a program in the text editor, or those entered directly in the
    IPython console. These are the namespace contents of the current IPython console
    session, and you can use the Variable Explorer to inspect, add, remove, and edit
    their values through a variety of GUI-based editors.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 变量资源管理器窗格允许你查看并编辑在文本编辑器中执行程序时生成的变量，或在 IPython 控制台中直接输入的变量。这些是当前 IPython 控制台会话的命名空间内容，你可以通过各种基于
    GUI 的编辑器来使用变量资源管理器检查、添加、删除和编辑它们的值。
- en: Let’s try it out. First, on the top toolbar, click **Consoles** ▸ **Restart
    kernel** to start a new IPython console session. This will delete any old variables
    that might be persistent in memory. Now, in the upper-right pane, click the **Variable
    Explorer** tab or, on the top toolbar, click **View** ▸ **Panes** ▸ **Variable
    Explorer**.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来试试。首先，在顶部工具栏中点击 **控制台** ▸ **重启内核**，以启动一个新的 IPython 控制台会话。这将删除任何可能存在于内存中的旧变量。现在，在右上角窗格中，点击
    **变量资源管理器** 标签，或者在顶部工具栏中点击 **查看** ▸ **窗格** ▸ **变量资源管理器**。
- en: 'In the IPython console, enter the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPython 控制台中，输入以下内容：
- en: '[PRE18]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Each time you press ENTER, the Variable Explorer pane should update until it
    looks like [Figure 4-24](ch04.xhtml#ch04fig24).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 每次按下 ENTER 键时，变量资源管理器窗格应该会更新，直到它显示像[图 4-24](ch04.xhtml#ch04fig24)那样。
- en: '![Image](../images/04fig24.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig24.jpg)'
- en: '*Figure 4-24: The Variable Explorer pane*'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-24：变量资源管理器窗格*'
- en: The pane shows you the name of the variable; its type, such as an integer, string,
    dictionary, and so on; its size; and its value. Right-clicking objects in the
    Variable Explorer displays options to plot and analyze these further. The pane
    supports editing lists, strings, dictionaries, NumPy arrays, pandas DataFrames,
    pandas Series, Pillow images, and more, letting you plot and visualize them with
    one click. For example, although the 10-row-by-5-column NumPy array is too large
    to show in the Value column, if you double-click it, an Object Viewer window appears
    that lets you view the array and manipulate its contents ([Figure 4-25](ch04.xhtml#ch04fig25)).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 窗格显示变量的名称；它的类型，例如整数、字符串、字典等；它的大小；以及它的值。在变量资源管理器中右键单击对象时，会显示出进一步绘图和分析这些对象的选项。该窗格支持编辑列表、字符串、字典、NumPy
    数组、pandas DataFrame、pandas Series、Pillow 图像等，允许你通过单击绘制和可视化它们。例如，虽然 10 行 5 列的 NumPy
    数组太大，无法在值列中显示，但如果你双击它，会出现一个对象查看器窗口，允许你查看数组并操作其内容（见[图 4-25](ch04.xhtml#ch04fig25)）。
- en: '![Image](../images/04fig25.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig25.jpg)'
- en: '*Figure 4-25: Object Viewer display of the an_array object*'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-25：an_array 对象的对象查看器显示*'
- en: Likewise, double-clicking anywhere within the list object’s row in the Variable
    Explorer pane will launch an Object Viewer ([Figure 4-26](ch04.xhtml#ch04fig26)).
    By right-clicking in a row in the Object Viewer, you can perform operations such
    as inserting a row and adding a new item, like “fluorite.”
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在变量浏览器面板中双击列表对象所在的行，会启动对象查看器（[图 4-26](ch04.xhtml#ch04fig26)）。你可以通过右键点击对象查看器中的一行来执行一些操作，比如插入一行或添加新项，如“fluorite”。
- en: If you use the `a_list` variable again in the current session, it will contain
    the new item, “fluorite.” You can also use the Variable Explorer’s toolbar to
    save the current session’s data as a *.spydata* file, which you can load later
    to recover all the variables stored. However, be aware that changing the value
    of an object in an Object Viewer doesn’t alter your code. If you rerun the code
    that generated the `a_list` variable, whether from a file or the console, it won’t
    contain “fluorite.”
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在当前会话中再次使用 `a_list` 变量，它将包含新项“fluorite”。你还可以使用变量浏览器的工具栏将当前会话的数据保存为 *.spydata*
    文件，稍后可以加载该文件来恢复所有存储的变量。但是，请注意，在对象查看器中更改对象的值并不会改变你的代码。如果你重新运行生成 `a_list` 变量的代码，无论是从文件还是控制台，它都不会包含“fluorite”。
- en: '![Image](../images/04fig26.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig26.jpg)'
- en: '*Figure 4-26: Object Viewer displaying a list object*'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-26：对象查看器显示一个列表对象*'
- en: You can filter the items in the Variable Explorer by clicking the “hamburger”
    icon at the upper right of the pane. If an item can be plotted, you can generate
    a plot of its values, appropriate to its data type, by right-clicking the object.
    For example, right-click the `an_array` object and then choose **Show image**.
    This will produce a color heatmap of the array ([Figure 4-27](ch04.xhtml#ch04fig27)).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击面板右上角的“汉堡”图标来筛选变量浏览器中的项目。如果某个项目可以绘图，你可以通过右键点击该对象生成一个符合其数据类型的图表。例如，右键点击
    `an_array` 对象，然后选择 **显示图像**。这将生成该数组的热力图（[图 4-27](ch04.xhtml#ch04fig27)）。
- en: '![Image](../images/04fig27.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig27.jpg)'
- en: '*Figure 4-27: A heatmap of the an_array object*'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-27：an_array 对象的热力图*'
- en: One thing that Variable Explorer won’t do is let you see “local” variables defined
    within functions (we look at functions in [Chapter 11](ch11.xhtml)). If you define
    a function using the following code, you won’t be able to see the `var1` and `var2`
    variables in the pane.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Variable Explorer（变量浏览器）有一个限制，它无法显示在函数内定义的“局部”变量（我们将在[第11章](ch11.xhtml)中讨论函数）。如果你使用以下代码定义了一个函数，你将无法在面板中看到
    `var1` 和 `var2` 变量。
- en: '[PRE19]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The Variable Explorer lets you keep track of your program’s global variables.
    It helps you to develop and test programs by permitting the inspection and editing
    of variables in a friendly GUI format. To read more about the options available,
    see the Spyder documentation at *[https://docs.spyder-ide.org/5/panes/variableexplorer.html](https://docs.spyder-ide.org/5/panes/variableexplorer.html)*.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 变量浏览器让你跟踪程序的全局变量。它通过允许在友好的 GUI 格式中检查和编辑变量，帮助你开发和调试程序。欲了解更多可用选项，请参见 Spyder 文档中的
    *[https://docs.spyder-ide.org/5/panes/variableexplorer.html](https://docs.spyder-ide.org/5/panes/variableexplorer.html)*。
- en: '**The Profiler Pane**'
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**性能分析器面板**'
- en: The Profiler helps you to optimize your code by measuring the runtime and number
    of calls for every function or method called in a file. You can use it to identify
    bottlenecks and quantitatively measure performance improvements after you make
    changes.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Profiler（性能分析器）通过测量文件中每个函数或方法的运行时间和调用次数，帮助你优化代码。你可以利用它识别瓶颈，并在进行更改后定量地衡量性能的提升。
- en: 'Let’s look at an example of how this works. On the top toolbar, open a new
    file in the editor by clicking **File** ▸ **New file**. Save this file in the
    *code* folder of your *spyder_proj_w_env* project (or anywhere else you want)
    as *hoot.py*. Now, enter the following code:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，了解它是如何工作的。在顶部工具栏中，点击**文件** ▸ **新建文件**，打开编辑器中的新文件。将该文件保存在 *code* 文件夹中，位于你的
    *spyder_proj_w_env* 项目中（或者你想保存的其他地方），文件名为 *hoot.py*。现在，输入以下代码：
- en: '[PRE20]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, we defined two functions, `search_list` and `search_set`, that
    are identical in all but name. We’re going to use the Profiler to prove that it’s
    a lot faster to search for an item in a Python *set* versus a Python *list*, so
    we need to distinguish between the functions (we look at sets and lists in more
    detail in [Chapter 9](ch09.xhtml)).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了两个函数，`search_list`和`search_set`，它们除了名称之外是完全相同的。我们将使用分析器来证明，在Python的*集合*中搜索一个项目比在Python的*列表*中搜索要快得多，因此我们需要区分这两个函数（我们将在[第9章](ch09.xhtml)中更详细地讨论集合和列表）。
- en: We next created a list with the numbers 0 to 999 (Python starts counting at
    0, not 1) and replaced the next-to-last item (index 998) with “hoot.” We then
    made a set from this list, named `my_set`. Now we call each function and pass
    them either the list or set, as appropriate (*pass* means that we enter the name
    of our list or set in the function’s parentheses). When each function reaches
    the “hoot” item in the list or set, it immediately prints “Hooty hoot!” in the
    console.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一个包含0到999的数字的列表（Python从0开始计数，而不是从1开始），并将倒数第二个项（索引998）替换为“hoot”。然后我们从这个列表中创建了一个集合，命名为`my_set`。现在，我们调用每个函数，并根据需要传递列表或集合（*传递*意味着我们在函数的括号中输入列表或集合的名称）。当每个函数到达列表或集合中的“hoot”项时，它会立即在控制台中打印“Hooty
    hoot!”。
- en: Run the file by clicking in the Editor pane and pressing F5\. You should see
    `Hooty hoot!` display twice in the IPython console.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击编辑器面板中的文件并按下F5键来运行文件。你应该能在IPython控制台中看到`Hooty hoot!`显示两次。
- en: To see how long each function took to run, click **Run** ▸ **Run profiler**
    from the top toolbar. This launches the Profiler pane and displays the run statistics
    ([Figure 4-28](ch04.xhtml#ch04fig28)).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每个函数运行所需的时间，点击顶部工具栏中的**运行** ▸ **运行分析器**。这将启动分析器面板并显示运行统计信息（见[图4-28](ch04.xhtml#ch04fig28)）。
- en: '![Image](../images/04fig28.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig28.jpg)'
- en: '*Figure 4-28: The Profiler pane*'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-28：分析器面板*'
- en: The Total Time column shows the time taken by the specified item and every function
    called by it (indented underneath it). The Local Time column counts only the time
    spent in a particular callable object’s own scope. Based on the Local Time, the
    list object took 14.8 microseconds to run versus only 400 nanoseconds for the
    set. Because the two functions were identical except for their inputs, we can
    surmise that a hashable set is a better data type than a list for doing membership
    searches.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 总时间列显示指定项目及其调用的每个函数所花费的时间（缩进显示在其下）。本地时间列仅计算在特定可调用对象的作用域内所花费的时间。根据本地时间，列表对象的运行时间为14.8微秒，而集合则只有400纳秒。由于这两个函数除了输入不同之外是相同的，我们可以推测，哈希集合比列表在进行成员查找时是更好的数据类型。
- en: Note that you can select files by using the text box at the top of the Profiler
    pane and run them with the green “play” arrow to the right of the box ([Figure
    4-28](ch04.xhtml#ch04fig28)). Other options include showing the program’s output,
    saving the profiling data, loading profiling data for comparison, and clearing
    comparisons.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可以使用分析器面板顶部的文本框选择文件，并通过文本框右侧的绿色“播放”箭头来运行它们（见[图4-28](ch04.xhtml#ch04fig28)）。其他选项包括显示程序输出、保存分析数据、加载分析数据以进行比较和清除比较。
- en: To learn more about the Profiler, including the option to measure the memory
    usage of your code, see *[https://docs.spyder-ide.org/5/panes/profiler.html](https://docs.spyder-ide.org/5/panes/profiler.html)*.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于分析器的内容，包括衡量代码内存使用情况的选项，请参见*[https://docs.spyder-ide.org/5/panes/profiler.html](https://docs.spyder-ide.org/5/panes/profiler.html)*。
- en: '**The Debugger Pane**'
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**调试器面板**'
- en: Debugging is the process of detecting and removing errors (“bugs”) in code that
    can cause it to crash, return incorrect results, or otherwise behave unexpectedly.
    Python automatically produces error messages that can help you determine what
    part of your code is failing.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是检测和消除代码中的错误（“bug”）的过程，这些错误可能导致程序崩溃、返回错误结果或表现出其他意外行为。Python会自动生成错误信息，帮助你确定代码中的哪个部分出现了问题。
- en: For a more sophisticated approach, Spyder integrates the enhanced `ipdb` debugger
    that’s part of the Python standard library. With the debugger tool, you can walk
    through your code line by line checking for problems.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的方法，Spyder集成了Python标准库中的增强版`ipdb`调试器。通过调试工具，你可以逐行查看代码，检查问题。
- en: Going into the details of the debugger is beyond the scope of this book, and
    you’ll probably write a lot of code without needing it. If you’re curious, however,
    you can get a good overview at *[https://docs.spyder-ide.org/5/panes/debugging.html](https://docs.spyder-ide.org/5/panes/debugging.html)*,
    and there are many online tutorials and videos for the debugger that use real-life
    coding examples.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 深入探讨调试器的细节超出了本书的范围，你可能会写很多代码而不需要用到它。不过，如果你感兴趣，你可以在*[https://docs.spyder-ide.org/5/panes/debugging.html](https://docs.spyder-ide.org/5/panes/debugging.html)*上获得一个很好的概述，还有许多使用真实编码示例的在线教程和视频。
- en: '**Summary**'
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Spyder is powerful enough for full-time developers, so there’s a lot here we
    haven’t covered. But despite its sophistication, it’s easy for a beginner to pick
    up and use, and its editor and IPython console are great if you’re looking only
    to knock off short scripts. Although much of your scientific programming will
    probably be performed in Jupyter Notebook, covered next, there are many coding
    tasks for which Spyder is more appropriate, and you’ll be glad to have it in your
    repertoire.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Spyder足够强大，适合全职开发者，因此这里有很多内容我们没有涵盖。但尽管它功能强大，对于初学者来说也很容易上手使用，如果你只是想快速编写短小的脚本，它的编辑器和IPython控制台非常适合。虽然你大部分的科学编程可能会在接下来讲解的Jupyter
    Notebook中进行，但有许多编码任务Spyder更为适用，而你一定会很高兴将其加入到你的工具库中。
- en: If you’re new to Python and want to start learning the language right now, you
    can skip ahead to [Part II](part02.xhtml#part02), “A Python Primer.” When you
    finish, don’t forget to circle back to [Part I](part01.xhtml#part01) and check
    out the chapters on Jupyter Notebook and JupyterLab ([Chapters 5](ch05.xhtml)
    and [6](ch06.xhtml)).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Python新手，并且想立即开始学习这门语言，你可以跳到[第二部分](part02.xhtml#part02)，即《Python入门》。完成后，别忘了回到[第一部分](part01.xhtml#part01)，查看关于Jupyter
    Notebook和JupyterLab的章节（[第5章](ch05.xhtml)和[第6章](ch06.xhtml)）。
