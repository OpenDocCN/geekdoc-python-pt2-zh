- en: '[2](nsp-venkitachalam503045-0008.xhtml#rch02)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[2](nsp-venkitachalam503045-0008.xhtml#rch02)'
- en: Spirographs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 螺旋图
- en: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
- en: You can use a Spirograph toy (shown in [Figure 2-1](nsp-venkitachalam503045-0013.xhtml#fig2-1))
    to draw mathematical curves. The toy consists of two different-sized rings with
    plastic gear teeth, one large and one small. The small one has several holes.
    You put a pen or pencil through one of the holes and then rotate the smaller wheel
    inside the larger one (which has gear teeth on its inside), keeping the wheels
    in contact with each other, to draw an endless number of complex and wonderfully
    symmetric patterns.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个螺旋图玩具（如[图2-1](nsp-venkitachalam503045-0013.xhtml#fig2-1)所示）来绘制数学曲线。这个玩具由两个不同大小的带有塑料齿轮的圆环组成，一个大环和一个小环。小环上有几个孔。你将一支钢笔或铅笔穿过其中一个孔，然后在大环内旋转小环（大环的内侧有齿轮），保持两个轮子相互接触，从而绘制出无数复杂且对称的图案。
- en: In this project, you’ll use Python to create an animation of Spirograph-like
    curves. The program will use parametric equations to describe the motion of a
    Spirograph’s rings and draw the curves (which I call *spiros*). You’ll save the
    completed drawings as PNG image files. Either the program will draw random spiros
    or you can use command line options to draw a spiro with specific parameters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用Python创建一个类似螺旋图的曲线动画。程序将使用参数方程来描述螺旋图的环的运动，并绘制这些曲线（我称之为*螺旋*）。你将把完成的绘图保存为PNG格式的图片文件。程序会随机绘制螺旋图，或者你可以使用命令行选项来绘制具有特定参数的螺旋图。
- en: '![](images/nsp-venkitachalam503045-f02001.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02001.jpg)'
- en: 'Figure 2-1: A Spirograph toy'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-1：螺旋图玩具
- en: 'In this project, you’ll learn how to draw spiros on your computer. You’ll also
    learn how to do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习如何在计算机上绘制螺旋图案。你还将学习如何完成以下任务：
- en: • Use parametric equations to generate curves.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用参数方程生成曲线。
- en: • Draw a curve as a series of straight lines using the `turtle` module.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用`turtle`模块将曲线绘制成一系列直线。
- en: • Use a timer to animate graphics.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用定时器来动画化图形。
- en: • Save graphics to image files.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 将图形保存为图片文件。
- en: 'A word of caution: I’ve chosen to use the `turtle` module to draw spiros mainly
    for illustrative purposes and because it’s fun, but `turtle` is slow and not ideal
    for creating graphics when performance is critical. (What do you expect from turtles?)
    If you want to draw something quickly, there are better ways to do so, and you’ll
    explore some of these options in upcoming projects.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 提个小心：我选择使用`turtle`模块来绘制螺旋图，主要是出于说明的目的，并且因为它很有趣，但`turtle`比较慢，在需要高性能的图形创建时并不理想。（你对乌龟期望什么呢？）如果你想快速绘制图形，有更好的方法可以做到，接下来的项目中你将探索这些选择。
- en: '[How It Works](nsp-venkitachalam503045-0008.xhtml#rah0401)'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[它是如何工作的](nsp-venkitachalam503045-0008.xhtml#rah0401)'
- en: This project hinges around using *parametric equations*, equations that express
    the coordinates of the points on a curve as functions of one or more variables,
    called *parameters*. You’ll plug values for the parameters into equations to calculate
    points that form a spiro pattern. Then you’ll feed those points to the `turtle`
    module to draw the curves.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的核心是使用*参数方程*，这些方程将曲线上的点的坐标表示为一个或多个变量的函数，这些变量叫做*参数*。你将把参数的值代入方程，计算出形成螺旋图案的点。然后你会把这些点传递给`turtle`模块来绘制曲线。
- en: '[Understanding Parametric Equations](nsp-venkitachalam503045-0008.xhtml#rbh0401)'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[理解参数方程](nsp-venkitachalam503045-0008.xhtml#rbh0401)'
- en: 'To understand how parametric equations work, we’ll begin with a simple example:
    a circle. Consider a circle with radius *r*, centered at the origin of a two-dimensional
    plane. That circle consists of all the points whose x- and y-coordinates satisfy
    the equation *x*² + *y*² = *r*². This isn’t a parametric equation, however. A
    parametric equation would give us all possible values of *x* and *y*, based on
    changes in some other variable (the parameter).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解参数方程是如何工作的，我们将从一个简单的例子开始：一个圆。考虑一个半径为*r*，并且以二维平面原点为中心的圆。这个圆由所有满足方程*x*² +
    *y*² = *r*²的点组成。然而，这不是一个参数方程。一个参数方程会根据某个变量（即参数）的变化，给出所有可能的*x*和*y*值。
- en: 'Now, consider the following equations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下方程：
- en: '*x* = *r* cos(θ)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*x* = *r* cos(θ)'
- en: '*y* = *r* sin(θ)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = *r* sin(θ)'
- en: Together, these equations are a *parametric* representation of our circle, where
    the parameter is θ, the angle of point (*x*, *y*) relative to the positive x-axis.
    Any value of (*x*, *y*) in these equations will satisfy the original *x*² + *y*²
    = *r*² equation. As you vary θ from 0 to 2π, the x- and y-coordinates generated
    by these equations will form the circle. [Figure 2-2](nsp-venkitachalam503045-0013.xhtml#fig2-2)
    shows this scheme.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方程一起构成了我们圆的*参数*表示，其中参数是 θ，即点 (*x*, *y*) 相对于正 x 轴的角度。任何在这些方程中得到的 (*x*, *y*)
    值都将满足原始方程 *x*² + *y*² = *r*²。当 θ 从 0 变化到 2π 时，这些方程生成的 x 和 y 坐标将形成圆。[图 2-2](nsp-venkitachalam503045-0013.xhtml#fig2-2)
    展示了这一方案。
- en: '![](images/nsp-venkitachalam503045-f02002.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02002.jpg)'
- en: 'Figure 2-2: Describing a circle with a parametric equation'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：用参数方程描述圆
- en: Remember, these two equations apply to a circle centered at the origin of the
    coordinate system. You can put a circle at any point in the XY plane by translating
    the center of the circle from the point (0, 0) to the point (*a*, *b*). The more
    general parametric equations then become *x* = *a* + *r* cos(θ) and *y* = *b*
    + *r* sin(θ).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这两个方程适用于以坐标系原点为中心的圆。你可以通过将圆心从点 (0, 0) 平移到点 (*a*, *b*)，将圆放置在 XY 平面中的任何位置。然后，参数方程变为
    *x* = *a* + *r* cos(θ) 和 *y* = *b* + *r* sin(θ)。
- en: Developing parametric equations that model a Spirograph toy isn’t that much
    different from developing parametric equations for a circle, since at heart a
    Spirograph simply draws two interlocking circles. [Figure 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3)
    shows a mathematical model of Spirograph-like motion. The model has no gear teeth;
    they’re used in Spirograph toys only to prevent slippage, and in the ideal world
    of mathematical modeling, you don’t have to worry about anything slipping.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 开发表示 Spirograph 玩具的参数方程与开发圆的参数方程没有太大区别，因为从本质上讲，Spirograph 只是绘制两个交错的圆。[图 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3)
    展示了类似 Spirograph 运动的数学模型。该模型没有齿轮齿；齿轮齿仅用于 Spirograph 玩具中防止打滑，在理想的数学模型世界中，你不需要担心任何打滑的问题。
- en: '![](images/nsp-venkitachalam503045-f02003.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02003.jpg)'
- en: 'Figure 2-3: A mathematical model of a Spirograph toy'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3：Spirograph 玩具的数学模型
- en: 'In [Figure 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3), *C* is the center
    of the smaller circle, *P* is the pen’s tip, and *q* is the angle of *C* relative
    to the positive x-axis. The radius of the bigger circle is *R* and that of the
    smaller circle is *r*. You express the ratio of the radii as variable *k*, as
    follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 2-3](nsp-venkitachalam503045-0013.xhtml#fig2-3)中，*C* 是小圆的中心，*P* 是笔尖，*q*
    是相对于正 x 轴的 *C* 角度。大圆的半径是 *R*，小圆的半径是 *r*。你可以通过以下方式表示半径的比率，设为变量 *k*：
- en: '![](images/nsp-venkitachalam503045-m02001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02001.jpg)'
- en: 'Line segment ![](images/nsp-venkitachalam503045-m02002.jpg) tells you how far
    the pen tip is from the center of the smaller circle. You express the ratio of
    ![](images/nsp-venkitachalam503045-m02002.jpg) to the smaller circle’s radius
    *r* as the variable *l*, like so:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 线段 ![](images/nsp-venkitachalam503045-m02002.jpg) 告诉你笔尖离小圆心的距离。你可以通过将 ![](images/nsp-venkitachalam503045-m02002.jpg)
    与小圆半径 *r* 的比率表示为变量 *l*，如下所示：
- en: '![](images/nsp-venkitachalam503045-m02003.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02003.jpg)'
- en: 'You can now combine these variables into the following parametric equations
    that represent the x- and y-coordinates of point *P* (the pen) as the smaller
    circle rotates inside the larger one:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将这些变量组合成以下参数方程，表示点 *P*（笔尖）在小圆旋转进入大圆时的 x 和 y 坐标：
- en: '![](images/nsp-venkitachalam503045-m02004.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02004.jpg)'
- en: '![](images/nsp-venkitachalam503045-m02005.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02005.jpg)'
- en: 'NOTE These curves are called *hypotrochoids*. Although the equations may look
    a bit scary, the derivation is pretty straightforward. See the Wikipedia page
    on Spirographs if you’d like to explore the math: [http://en.wikipedia.org/wiki/Spirograph](http://en.wikipedia.org/wiki/Spirograph).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这些曲线被称为 *内接摆线*。尽管方程看起来可能有些复杂，但推导过程相当直接。如果你想深入了解数学，可以查看维基百科上的 Spirograph 页面：[http://en.wikipedia.org/wiki/Spirograph](http://en.wikipedia.org/wiki/Spirograph)。
- en: '[Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4) shows an example curve
    drawn with these equations. For this curve, I set *R* to 220, *r* to 65, and *l*
    to 0.8\. By choosing different values for these three parameters and then incrementing
    angle θ, you can produce an endless variety of fascinating curves.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)展示了用这些方程绘制的示例曲线。对于这条曲线，我设置*R*为220，*r*为65，*l*为0.8。通过选择这三个参数的不同值，然后逐步增加角度θ，你可以绘制出各种各样迷人的曲线。'
- en: '![](images/nsp-venkitachalam503045-f02004.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02004.jpg)'
- en: 'Figure 2-4: A sample curve'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-4：一个示例曲线
- en: 'The only task left is to determine when to stop drawing, since Spirographs
    can require many revolutions of the smaller circle around the larger circle to
    form a complete pattern. You can calculate the *periodicity* of the Spirograph
    (how long before the Spirograph starts repeating itself) by looking at the ratio
    of the radii of the inner and outer circles:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的任务是确定何时停止绘制，因为螺旋图形可能需要小圆绕大圆旋转许多圈才能完成一个完整的图案。你可以通过查看内外圆的半径比来计算螺旋图形的*周期性*（螺旋图形开始重复的时间）：
- en: '![](images/nsp-venkitachalam503045-m02006.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02006.jpg)'
- en: 'Reduce this fraction by dividing the numerator and denominator by the *greatest
    common divisor (**GCD)*. Then the numerator tells you how many periods the curve
    needs to complete itself. For example, in [Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4),
    the GCD of (*r*, *R*) is 5:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将分子和分母除以*最大公约数（**GCD）*，简化这个分数。然后，分子告诉你曲线完成自身所需的周期数。例如，在[图2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)中，(*r*,
    *R*)的GCD是5：
- en: '![](images/nsp-venkitachalam503045-m02007.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-m02007.jpg)'
- en: This tells you that the curve will start repeating itself after 13 revolutions
    of the smaller circle around the larger circle. The 44 in the denominator tells
    you the number of times the smaller circle revolves around its own center, which
    gives you a hint as to the shape of the curve. If you count the petals (or lobes)
    in the drawing in [Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4), you’ll
    see there are exactly 44!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉你，曲线将在小圆绕大圆旋转13圈后开始重复。分母中的44告诉你小圆围绕其自身中心旋转的次数，这也为你提供了曲线形状的线索。如果你数一数[图2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)中的花瓣（或叶片），你会发现正好有44个！
- en: Once you express the radii ratio in the reduced form *r*/*R*, the range for
    the parameter θ to draw the spiro is [0, 2π*r*]. This tells you when to stop drawing
    a particular spiro. In the case of [Figure 2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4),
    you’d stop when θ reaches 26π (that is, 2π × 13). Without knowing the ending range
    of the angle, you’d end up looping around, repeating the curve unnecessarily.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将半径比表达为简化形式*r*/*R*，绘制螺旋线的参数θ的范围就是[0, 2π*r*]。这告诉你何时停止绘制特定的螺旋线。在[图2-4](nsp-venkitachalam503045-0013.xhtml#fig2-4)中，当θ达到26π（即2π
    × 13）时，你应该停止。如果不知道角度的结束范围，你将会不停地循环，重复绘制相同的曲线。
- en: '[Drawing Curves with turtle Graphics](nsp-venkitachalam503045-0008.xhtml#rbh0402)'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[使用turtle图形绘制曲线](nsp-venkitachalam503045-0008.xhtml#rbh0402)'
- en: Python’s `turtle` module doesn’t have a method for drawing curved lines. Instead,
    you’ll draw a spiro as a collection of straight lines between different points
    calculated with the parametric equations discussed in the previous section. As
    long as the change in angle θ from one point to the next is relatively small,
    the result will appear curved.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`turtle`模块没有绘制曲线的功能。相反，你将通过使用上一节讨论的参数方程，计算出不同点之间的直线，从而绘制一个螺旋线。只要从一个点到下一个点的角度变化θ足够小，结果就会呈现曲线效果。
- en: 'To demonstrate, the following program draws a circle with `turtle`. It uses
    our basic parametric equations for a circle, *x* = *a* + *r* cos(θ) and *y* = *b* +
    *r* sin(θ), to calculate points along the circle, and it connects those points
    with straight lines. Technically, the program actually produces an *N*-sided polygon,
    but because the angle parameter will change in small increments, *N* will be very
    large, and the polygon will look like a circle. Enter the following code, save
    it as *drawcircle.py*, and run it in Python:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，下面的程序使用`turtle`绘制一个圆。它使用我们基本的圆形参数方程，*x* = *a* + *r* cos(θ) 和 *y* = *b*
    + *r* sin(θ)，来计算圆上的点，并将这些点用直线连接起来。从技术上讲，程序实际上是绘制一个*N*边形，但由于角度参数的变化非常小，*N*将非常大，因此该多边形看起来就像一个圆。输入以下代码，将其保存为*drawcircle.py*，并在Python中运行：
- en: import math
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: import math
- en: import turtle
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: import turtle
- en: draw the circle using turtle
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用turtle绘制圆形
- en: 'def drawCircleTurtle(x, y, r):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'def drawCircleTurtle(x, y, r):'
- en: '# move to the start of circle'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '# 移动到圆的起始点'
- en: turtle.up()
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.up()
- en: ❶ turtle.setpos(x + r, y)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ turtle.setpos(x + r, y)
- en: turtle.down()
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.down()
- en: '# draw the circle'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制圆形'
- en: '❷ for i in range(0, 365, 5):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '❷ for i in range(0, 365, 5):'
- en: ❸ a = math.radians(i)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ a = math.radians(i)
- en: ❹ turtle.setpos(x + r*math.cos(a), y + r*math.sin(a))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ turtle.setpos(x + r*math.cos(a), y + r*math.sin(a))
- en: ❺ drawCircleTurtle(100, 100, 50)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ drawCircleTurtle(100, 100, 50)
- en: turtle.mainloop()
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.mainloop()
- en: 'Here you define the `drawCircleTurtle()` function, whose parameters are the
    center of the circle to be drawn, (*x*, *y*), and the circle’s radius, *r*. The
    function starts by moving the turtle into position at the first point on the circle’s
    horizontal axis: (*x* + *r*, *y*) ❶. The calls to `up()` and `down()` prevent
    the turtle from drawing while it’s getting into position. Next, you start a loop
    using `range(0, 365, 5)`, which increments the variable `i` in steps of 5 from
    0 to 360 ❷. The `i` variable is the angle parameter you’ll pass into the parametric
    circle equations, but first you convert it from degrees to radians ❸. (Most computer
    programs require radians for angle-based calculations.)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你定义了`drawCircleTurtle()`函数，参数是要绘制的圆的中心坐标（*x*，*y*）和圆的半径（*r*）。函数开始时将海龟移动到圆的水平轴上的第一个点：(*x*
    + *r*, *y*)❶。调用`up()`和`down()`可以防止海龟在进入位置时画出线条。接下来，你开始使用`range(0, 365, 5)`的循环，每次将变量`i`递增
    5，从 0 到 360❷。`i`变量是你将传递给参数方程的角度参数，但首先你需要将它从度数转换为弧度❸。（大多数计算机程序在角度计算中都要求使用弧度。）
- en: Compute the next set of circle coordinates using the two parametric equations,
    and you set the turtle’s position accordingly ❹. This draws a straight line from
    the last turtle position to the newly calculated one. Since you’re changing the
    angle parameter by just 5 degrees at a time, the straight lines will create the
    appearance of a round circle.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个参数方程计算下一个圆的坐标，然后根据计算结果设置海龟的位置❹。这将从上一个海龟位置画一条直线到新计算出来的位置。由于每次仅改变 5 度角参数，直线将呈现出圆形的效果。
- en: Now that you have your function, you call it to draw a circle ❺. Calling `turtle.mainloop()`
    keeps the `tkinter` window open so that you can admire your work. (`tkinter` is
    the default GUI library used by Python.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了函数，可以调用它来绘制一个圆❺。调用`turtle.mainloop()`将保持`tkinter`窗口打开，这样你就可以欣赏你的作品了。（`tkinter`是
    Python 默认的 GUI 库。）
- en: You’re now ready to draw some spiros! You’ll use the same `turtle` approach
    illustrated earlier. All that has to change are the details of the parametric
    equations used to calculate the points.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备好绘制一些旋画了！你将使用之前介绍的相同`turtle`方法。唯一需要改变的是用来计算点的参数方程的细节。
- en: '[Requirements](nsp-venkitachalam503045-0008.xhtml#rah0402)'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[需求](nsp-venkitachalam503045-0008.xhtml#rah0402)'
- en: 'You’ll use the following to create your spiros:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用以下方法来创建你的旋画：
- en: • The `turtle` module for drawing
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • `turtle`模块用于绘图
- en: • `Pillow`, a fork of the *Python Imaging Library (**PIL)*, to save the spiro
    images
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • `Pillow`，*Python Imaging Library（**PIL**）*的一个分支，用于保存旋画图像
- en: '[The Code](nsp-venkitachalam503045-0008.xhtml#rah0403)'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[代码](nsp-venkitachalam503045-0008.xhtml#rah0403)'
- en: First you’ll define a class `Spiro` to draw the curves. You can use this class
    either to draw a single curve with customizable parameters or as part of an animation
    that draws several random spiros concurrently. To coordinate the animation, you’ll
    define another class called `SpiroAnimator`. At the top level of the program,
    you’ll write a function to save your drawings as image files, and you’ll use the
    `main()` function to take in user input and set the drawing in motion.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先你将定义一个类`Spiro`来绘制曲线。你可以使用这个类来绘制单个曲线并自定义参数，或者作为一个动画的一部分，绘制多个随机的旋画。为了协调动画，你将定义另一个名为`SpiroAnimator`的类。在程序的顶层，你将编写一个函数来将绘图保存为图像文件，并使用`main()`函数来获取用户输入并启动绘制。
- en: To see the full project code, skip ahead to [“The Complete Code”](nsp-venkitachalam503045-0013.xhtml#ah0407)
    on [page 36](nsp-venkitachalam503045-0013.xhtml#p36). You can also download the
    code for this project from [https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py](https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的项目代码，请跳转到[“完整代码”](nsp-venkitachalam503045-0013.xhtml#ah0407)部分，位于[第 36
    页](nsp-venkitachalam503045-0013.xhtml#p36)。你也可以从[https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py](https://github.com/mkvenkit/pp2e/blob/main/spirograph/spiro.py)下载该项目的代码。
- en: '[Drawing the Spiros](nsp-venkitachalam503045-0008.xhtml#rbh0403)'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[绘制旋画](nsp-venkitachalam503045-0008.xhtml#rbh0403)'
- en: 'The `Spiro` class features methods for drawing an individual spiro pattern.
    Here’s the `Spiro` class’s constructor:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spiro` 类提供了用于绘制单个螺旋图案的方法。以下是 `Spiro` 类的构造函数：'
- en: 'class Spiro:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Spiro:'
- en: '# constructor'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '# 构造函数'
- en: 'def __init__(self, xc, yc, col, R, r, l):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, xc, yc, col, R, r, l):'
- en: '# create the turtle object'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建海龟对象'
- en: ❶ self.t = turtle.Turtle()
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ self.t = turtle.Turtle()
- en: '# set the cursor shape'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置光标形状'
- en: ❷ self.t.shape('turtle')
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ self.t.shape('turtle')
- en: '# set the step in degrees'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置步长（以度为单位）'
- en: ❸ self.step = 5
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ self.step = 5
- en: '# set the drawing complete flag'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置绘图完成标志'
- en: ❹ self.drawingComplete = False
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ self.drawingComplete = False
- en: '# set the parameters'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置参数'
- en: self.setparams(xc, yc, col, R, r, l)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: self.setparams(xc, yc, col, R, r, l)
- en: '# initialize the drawing'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '# 初始化绘图'
- en: self.restart()
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: self.restart()
- en: The `Spiro` constructor creates a new `turtle` object ❶. This way, each individual
    `Spiro` object will have its own `turtle` object associated with it, meaning you
    can create multiple `Spiro` objects to draw a bunch of spiros simultaneously.
    You set the shape of the turtle cursor to a turtle ❷. (You’ll find other choices
    in the `turtle` documentation at [https://docs.python.org/3/library/turtle.xhtml](https://docs.python.org/3/library/turtle.xhtml).)
    You set the angle increment for the parametric drawing to 5 degrees ❸ and create
    a Boolean `drawingComplete` flag for indicating when the spiro is done ❹. This
    flag will be useful when multiple `Spiro` objects are drawing in tandem; it allows
    you to keep track of whether a particular spiro is complete. You finish the constructor
    by calling two setup methods, as discussed next.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spiro` 构造函数创建了一个新的 `turtle` 对象 ❶。这样，每个单独的 `Spiro` 对象将拥有自己的 `turtle` 对象，也就是说，你可以创建多个
    `Spiro` 对象同时绘制多个螺旋图案。你将海龟光标的形状设置为海龟 ❷。（你可以在 `turtle` 文档中找到其他选择，访问 [https://docs.python.org/3/library/turtle.xhtml](https://docs.python.org/3/library/turtle.xhtml)）。你将参数化绘图的角度增量设置为
    5 度 ❸，并创建一个布尔类型的 `drawingComplete` 标志，用于指示螺旋图案是否完成 ❹。当多个 `Spiro` 对象同时绘图时，这个标志将非常有用，它帮助你追踪某个特定的螺旋图案是否已完成。构造函数最后通过调用两个设置方法完成初始化，接下来将讨论这两个方法。'
- en: The Setup Methods
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置方法
- en: 'The `Spiro` class’s `setparams()` and `restart()` methods both help with some
    setup that needs to be done before a spiro pattern can be drawn. Let’s look at
    the `setparams()` method first:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spiro` 类的 `setparams()` 和 `restart()` 方法都帮助完成在绘制螺旋图案之前需要做的一些设置。我们先来看 `setparams()`
    方法：'
- en: 'def setparams(self, xc, yc, col, R, r, l):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'def setparams(self, xc, yc, col, R, r, l):'
- en: '# the Spirograph parameters'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '# 螺旋图案的参数'
- en: self.xc = xc
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: self.xc = xc
- en: self.yc = yc
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: self.yc = yc
- en: self.R = int(R)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: self.R = int(R)
- en: self.r = int(r)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: self.r = int(r)
- en: self.l = l
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: self.l = l
- en: self.col = col
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: self.col = col
- en: '# reduce r/R to its smallest form by dividing with the GCD'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '# 通过与最大公约数（GCD）相除来将 r/R 简化为最小形式'
- en: ❶ gcdVal = math.gcd(self.r, self.R)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ gcdVal = math.gcd(self.r, self.R)
- en: ❷ self.nRot = self.r//gcdVal
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ self.nRot = self.r//gcdVal
- en: '# get ratio of radii'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取半径比例'
- en: self.k = r/float(R)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: self.k = r/float(R)
- en: '# set the color'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置颜色'
- en: self.t.color(*col)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.color(*col)
- en: '# store the current angle'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '# 存储当前角度'
- en: ❸ self.a = 0
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ self.a = 0
- en: First you store the coordinates of the center of the spiro (`xc` and `yc`).
    Then you convert the radius of each circle (`R` and `r`) to an integer and store
    the values. You also store `l`, which defines the position of the pen, and `col`,
    which determines the spiro’s color. Next, you use the `gcd()` method from Python’s
    built-in `math` module to compute the GCD of the radii ❶. You use this information
    to determine the periodicity of the curve, which you save as `self.nRot` ❷. Finally,
    you set the starting value of the angle parameter, `a`, to `0` ❸.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你存储螺旋中心的坐标（`xc` 和 `yc`）。然后，你将每个圆的半径（`R` 和 `r`）转换为整数并存储这些值。你还存储了 `l`，它定义了笔的位置，以及
    `col`，它决定了螺旋的颜色。接下来，你使用 Python 内置的 `math` 模块中的 `gcd()` 方法计算半径的最大公约数（GCD） ❶。你用这个信息来确定曲线的周期性，并将其保存为
    `self.nRot` ❷。最后，你将角度参数 `a` 的初始值设置为 `0` ❸。
- en: 'The `restart()` method continues with the setup by resetting the drawing parameters
    for the `Spiro` object and getting it into position to draw a spiro. This method
    makes it possible to reuse the same `Spiro` object to draw multiple spiros, one
    after the other, as part of the program’s animation. The program will call `restart()`
    each time the object is ready to draw a new spiro. Here’s the method:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`restart()` 方法通过重置 `Spiro` 对象的绘图参数，继续进行设置，并将其定位以绘制螺旋图案。这个方法使得可以重复使用同一个 `Spiro`
    对象，依次绘制多个螺旋图案，作为程序动画的一部分。每当对象准备好绘制新的螺旋图案时，程序会调用 `restart()`。以下是该方法：'
- en: 'def restart(self):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'def restart(self):'
- en: '# set the flag'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置标志'
- en: self.drawingComplete = False
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: self.drawingComplete = False
- en: '# show the turtle'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示海龟'
- en: self.t.showturtle()
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.showturtle()
- en: '# go to the first point'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '# 转到第一个点'
- en: ❶ self.t.up()
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ self.t.up()
- en: ❷ R, k, l = self.R, self.k, self.l
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ R, k, l = self.R, self.k, self.l
- en: a = 0.0
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: a = 0.0
- en: ❸ x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
- en: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
- en: ❹ self.t.setpos(self.xc + x, self.yc + y)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ self.t.setpos(self.xc + x, self.yc + y)
- en: ❺ self.t.down()
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ self.t.down()
- en: You reset the `drawingComplete` flag to `False`, indicating the object is ready
    to draw a new spiro. Then you show the turtle cursor, in case it was hidden. Next
    lift up the pen ❶ so you can move to the first position at ❹ without drawing a
    line. At ❷, you’re just using some local variables to keep the code compact. Then
    you feed those variables to the spiro parametric equations to compute the x- and
    y-coordinates of the curve’s starting point, using `0` as an initial value for
    angle `a` ❸. Finally, once the turtle is in place, you set the pen down so the
    turtle can start drawing the spiro ❺.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `drawingComplete` 标志重置为 `False`，表示对象已准备好绘制新的螺旋线。然后，你显示海龟光标（如果它被隐藏了）。接着，抬起画笔
    ❶，这样你就可以在 ❹ 处移动到第一个位置而不绘制线条。到 ❷ 时，你只是使用一些局部变量来保持代码简洁。然后，你将这些变量传递给螺旋线的参数方程，计算曲线起点的
    x 和 y 坐标，使用 `0` 作为角度 `a` 的初始值 ❸。最后，一旦海龟到达位置，你将画笔放下，让海龟开始绘制螺旋线 ❺。
- en: The draw() Method
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: draw() 方法
- en: 'If you use command line options to set the parameters of a spiro, the program
    will draw just that one spiro, using the `Spiro` class’s `draw()` method. This
    method draws the entire spiro all in one go, as a continuous sequence of straight-line
    segments:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用命令行选项来设置螺旋线的参数，程序将只绘制这一个螺旋线，使用 `Spiro` 类的 `draw()` 方法。这个方法会一次性绘制整个螺旋线，作为一系列连续的直线段：
- en: 'def draw(self):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'def draw(self):'
- en: '# draw the rest of the points'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制其余的点'
- en: R, k, l = self.R, self.k, self.l
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: R, k, l = self.R, self.k, self.l
- en: '❶ for i in range(0, 360*self.nRot + 1, self.step):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '❶ for i in range(0, 360*self.nRot + 1, self.step):'
- en: a = math.radians(i)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: a = math.radians(i)
- en: ❷ x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
- en: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
- en: 'try:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: ❸ self.t.setpos(self.xc + x, self.yc + y)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ self.t.setpos(self.xc + x, self.yc + y)
- en: 'except:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: print("异常，程序退出。")
- en: exit(0)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: '# drawing is now done so hide the turtle cursor'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘图已完成，因此隐藏海龟光标'
- en: ❹ self.t.hideturtle()
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ self.t.hideturtle()
- en: Here you iterate through the complete range of the parameter `i`, which is expressed
    in degrees as 360 times `nRot` ❶. You use the parametric equations to compute
    the x- and y-coordinates for each value of the `i` parameter ❷, calling the turtle’s
    `setpos()` method ❸ to draw the line from one point to the next. This method is
    enclosed in a `try` block so that if an exception arises—such as the user closing
    the window in the middle of the drawing process—you can catch it and exit gracefully.
    Finally, you hide the cursor because you’ve finished drawing ❹.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你遍历参数 `i` 的完整范围，`i` 以度数表示，为 360 倍的 `nRot` ❶。你使用参数方程来计算每个 `i` 值对应的 x 和 y
    坐标 ❷，并调用海龟的 `setpos()` 方法 ❸，从一个点绘制到下一个点。这个方法被包含在一个 `try` 块中，这样如果出现异常（例如用户在绘制过程中关闭了窗口），你可以捕获它并优雅地退出。最后，由于绘图已完成，你将隐藏光标
    ❹。
- en: The update() Method
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: update() 方法
- en: 'If you don’t use any command line options, the program will draw multiple random
    spiros as an animation. This approach requires some restructuring of the drawing
    code we just looked at. Instead of drawing an entire spiro in one go, you need
    a method that draws just a single-line segment of the spiro. Then you’ll call
    that method at every time step in the animation. This `update()` method of the
    `Spiro` class fits the bill:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用任何命令行选项，程序将绘制多个随机的螺旋线动画。这种方法需要对我们刚才看到的绘图代码进行一些重构。你需要一个方法来绘制螺旋线的单一线段，而不是一次性绘制整个螺旋线。然后，你将在每个时间步调用这个方法来绘制动画。这段
    `update()` 方法适用于 `Spiro` 类：
- en: 'def update(self):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'def update(self):'
- en: '# skip the rest of the steps if done'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果完成，跳过其余步骤'
- en: '❶ if self.drawingComplete:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '❶ if self.drawingComplete:'
- en: return
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '# increment the angle'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '# 增加角度'
- en: ❷ self.a += self.step
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ self.a += self.step
- en: '# draw a step'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制一步'
- en: R, k, l = self.R, self.k, self.l
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: R, k, l = self.R, self.k, self.l
- en: '# set the angle'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置角度'
- en: ❸ a = math.radians(self.a)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ a = math.radians(self.a)
- en: x = self.R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: x = self.R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
- en: y = self.R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: y = self.R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
- en: 'try:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: ❹ self.t.setpos(self.xc + x, self.yc + y)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ self.t.setpos(self.xc + x, self.yc + y)
- en: 'except:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: print("异常，程序退出。")
- en: exit(0)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: '# if drawing is complete, set the flag'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果绘制完成，设置标志'
- en: '❺ if self.a >= 360*self.nRot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '❺ if self.a >= 360*self.nRot:'
- en: self.drawingComplete = True
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: self.drawingComplete = True
- en: '# drawing is now done so hide the turtle cursor'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制完成后，隐藏海龟光标'
- en: self.t.hideturtle()
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.hideturtle()
- en: You first check to see whether the `drawingComplete` flag is set ❶; if not,
    you continue through the rest of the code. You increment the current angle ❷,
    calculate the (*x*, *y*) position corresponding to the current angle ❸, and move
    the turtle there, drawing the line segment in the process ❹. This is just like
    the code inside the `for()` loop in the `draw()` method, except it happens only
    once.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先检查`drawingComplete`标志是否已经设置❶；如果没有，你就继续执行剩下的代码。你会增加当前角度❷，计算对应当前角度的(*x*, *y*)位置❸，并将海龟移到那里，同时绘制出线段❹。这就像是在`draw()`方法中的`for()`循环里的代码，只不过它只执行一次。
- en: When I discussed the Spirograph parametric equations, I talked about the periodicity
    of the curve. A Spirograph starts repeating itself after a certain angle. You
    finish the `update()` function by checking whether the angle has reached the full
    range computed for this particular curve ❺. If so, you set the `drawingComplete`
    flag because the spiro is finished. Finally, you hide the turtle cursor so you
    can see your beautiful creation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当我讨论Spirograph的参数方程时，我提到了曲线的周期性。Spirograph在某个角度之后开始重复自己。你通过检查角度是否已经达到为该特定曲线计算的完整范围❺来结束`update()`函数。如果是这样，你将设置`drawingComplete`标志，因为spiro已经完成。最后，你会隐藏海龟光标，这样你就可以看到你美丽的创作。
- en: '[Coordinating the Animation](nsp-venkitachalam503045-0008.xhtml#rbh0404)'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[协调动画](nsp-venkitachalam503045-0008.xhtml#rbh0404)'
- en: The `SpiroAnimator` class will let you draw several random spiros simultaneously
    as an animation. This class coordinates the activity of multiple `Spiro` objects
    with randomly assigned parameters, using a timer to regularly call each `Spiro`
    object’s `update()` method. This technique updates the graphics periodically and
    lets the program process events such as button presses, mouse clicks, and so on.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpiroAnimator`类允许你同时绘制多个随机spiro作为动画。这个类通过定时器定期调用每个`Spiro`对象的`update()`方法，协调多个`Spiro`对象的活动，这些对象的参数是随机分配的。这个技术周期性地更新图形，并允许程序处理按钮按下、鼠标点击等事件。'
- en: 'Let’s look at the `SpiroAnimator` class’s constructor first:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看`SpiroAnimator`类的构造函数：
- en: 'class SpiroAnimator:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'class SpiroAnimator:'
- en: '# constructor'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '# 构造函数'
- en: 'def __init__(self, N):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, N):'
- en: '# set the timer value in milliseconds'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置计时器的时间值（毫秒）'
- en: ❶ self.deltaT = 10
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ self.deltaT = 10
- en: '# get the window dimensions'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取窗口尺寸'
- en: ❷ self.width = turtle.window_width()
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ self.width = turtle.window_width()
- en: self.height = turtle.window_height()
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: self.height = turtle.window_height()
- en: '# restarting'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启中'
- en: ❸ self.restarting = False
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ self.restarting = False
- en: '# create the Spiro objects'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建Spiro对象'
- en: self.spiros = []
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: self.spiros = []
- en: 'for i in range(N):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: '# generate random parameters'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成随机参数'
- en: ❹ rparams = self.genRandomParams()
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ rparams = self.genRandomParams()
- en: '# set the spiro parameters'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置spiro参数'
- en: ❺ spiro = Spiro(*rparams)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ spiro = Spiro(*rparams)
- en: self.spiros.append(spiro)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: self.spiros.append(spiro)
- en: '# call timer'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '# 调用计时器'
- en: ❻ turtle.ontimer(self.update, self.deltaT)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: ❻ turtle.ontimer(self.update, self.deltaT)
- en: The `SpiroAnimator` constructor sets `deltaT` to `10`, which is the time interval
    in milliseconds you’ll use for the timer ❶. You then store the dimensions of the
    turtle window ❷ and initialize a flag that will be used to indicate that a restart
    is in progress ❸. In a loop that repeats *N* times (`N` is passed into `SpiroAnimator`
    in the constructor), you create new `Spiro` objects ❺ and add them to a `spiros`
    list. Before creating each `Spiro` object, you call the `genRandomParams()` helper
    method ❹ to randomly assign the spiro’s parameters (we’ll look at this method
    next). The `rparams` here is a tuple that you need to pass into the `Spiro` constructor.
    However, the constructor expects multiple arguments, so you use the Python `*`
    operator to unpack the tuple into a series of arguments. Finally, you set the
    `turtle.ontimer()` method to call `update()` after `deltaT` milliseconds ❻, which
    sets the animation in motion.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpiroAnimator`构造函数将`deltaT`设置为`10`，这是你在计时器中使用的时间间隔，单位为毫秒❶。接着，你会存储海龟窗口的尺寸❷，并初始化一个标志，表示重启正在进行中❸。在一个重复*N*次的循环中（`N`通过构造函数传递给`SpiroAnimator`），你会创建新的`Spiro`对象❺并将它们添加到`spiros`列表中。在创建每个`Spiro`对象之前，你调用`genRandomParams()`辅助方法❹，随机分配spiro的参数（我们接下来会看这个方法）。这里的`rparams`是一个元组，你需要将其传递给`Spiro`构造函数。然而，构造函数期望多个参数，因此你使用Python的`*`运算符将元组解包为多个参数。最后，你设置`turtle.ontimer()`方法，在`deltaT`毫秒后调用`update()`❻，从而启动动画。'
- en: Generating Random Parameters
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成随机参数
- en: 'You’ll use the `genRandomParams()` method to generate random parameters to
    send to each `Spiro` object as it’s created to produce a wide variety of curves.
    You’ll also call this method each time a `Spiro` object finishes drawing a spiro
    and is ready to start drawing a new one:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 `genRandomParams()` 方法生成随机参数，并将其传递给每个 `Spiro` 对象，在其创建时生成各种不同的曲线。每次一个 `Spiro`
    对象完成绘制一个螺旋图并准备开始绘制一个新的螺旋图时，你也会调用此方法：
- en: 'def genRandomParams(self):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 'def genRandomParams(self):'
- en: width, height = self.width, self.height
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: width, height = self.width, self.height
- en: R = random.randint(50, min(width, height)//2)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: R = random.randint(50, min(width, height)//2)
- en: r = random.randint(10, 9*R//10)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: r = random.randint(10, 9*R//10)
- en: l = random.uniform(0.1, 0.9)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: l = random.uniform(0.1, 0.9)
- en: xc = random.randint(-width//2, width//2)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: xc = random.randint(-width//2, width//2)
- en: yc = random.randint(-height//2, height//2)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: yc = random.randint(-height//2, height//2)
- en: col = (random.random(),
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: col = (random.random(),
- en: random.random(),
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: random.random(),
- en: random.random())
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: random.random())
- en: ❶ return (xc, yc, col, R, r, l)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 返回 (xc, yc, col, R, r, l)
- en: 'To generate random numbers, you use three methods from Python’s `random` module:
    `randint()`, which returns random integers in the specified range; `uniform()`,
    which does the same for floating-point numbers; and `random()`, which returns
    a float between 0 and 1\. You set `R` to a random integer between 50 and the value
    of half the smallest dimension of your window, and you set `r` to between 10 percent
    and 90 percent of `R`. Then you set `l` to a random fraction between 0.1 and 0.9.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成随机数，你使用 Python `random` 模块中的三种方法：`randint()`，它返回指定范围内的随机整数；`uniform()`，它对浮点数做同样的操作；`random()`，它返回一个
    0 到 1 之间的浮点数。你将 `R` 设置为一个介于 50 和窗口最小尺寸的一半之间的随机整数，并将 `r` 设置为 `R` 的 10% 到 90% 之间。然后，你将
    `l` 设置为介于 0.1 和 0.9 之间的一个随机小数。
- en: You next select a random point on the screen to place the center of the spiro
    by selecting random x- and y-coordinates (`xc` and `yc`) from within the screen
    boundaries. You assign a random color `col` to the curve by setting random values
    for the red, green, and blue color components (these are defined on a scale from
    0 to 1). Finally, all of your calculated parameters are returned as a tuple ❶.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你会从屏幕内随机选择一个点来放置 spiro 的中心，随机选择 x 和 y 坐标（`xc` 和 `yc`）。你通过为红色、绿色和蓝色的颜色分量设置随机值（这些值在
    0 到 1 的范围内）来为曲线分配一个随机颜色 `col`。最后，所有计算出的参数都会作为一个元组 ❶ 返回。
- en: Restarting the Animation
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重启动画
- en: 'The `SpiroAnimator` class has its own `restart()` method for restarting the
    animation to draw a new set of spiros:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpiroAnimator` 类有它自己的 `restart()` 方法，用于重启动画，绘制一组新的 spiros：'
- en: 'def restart(self):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'def restart(self):'
- en: '# ignore restart if already in the middle of restarting'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果已经在重启过程中，则忽略重启'
- en: '❶ if self.restarting:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '❶ 如果 self.restarting:'
- en: return
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'else:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 否则：
- en: self.restarting = True
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: self.restarting = True
- en: 'for spiro in self.spiros:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 spiro 在 self.spiros 中：
- en: '# clear'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '# 清除'
- en: spiro.clear()
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.clear()
- en: '# generate random parameters'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成随机参数'
- en: rparams = self.genRandomParams()
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: rparams = self.genRandomParams()
- en: '# set the spiro parameters'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置 spiro 参数'
- en: spiro.setparams(*rparams)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.setparams(*rparams)
- en: '# restart drawing'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启绘制'
- en: spiro.restart()
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.restart()
- en: '# done restarting'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启完成'
- en: ❷ self.restarting = False
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ self.restarting = False
- en: This method loops through all the `Spiro` objects. For each one, you clear the
    previous drawing and randomly generate a new set of spiro parameters. Then you
    use the `Spiro` object’s setup methods, `setparams()` and `restart()`, to assign
    the new parameters and get the object ready to draw the next spiro. The `self.restarting`
    flag ❶ prevents this method from being called before it’s had a chance to complete,
    which could happen if the user repeatedly hits the spacebar. The flag is reset
    at the end of the method so that the next restart won’t be ignored ❷.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法会遍历所有的 `Spiro` 对象。对于每一个对象，清除之前的绘制，并随机生成一组新的 spiro 参数。然后你会使用 `Spiro` 对象的设置方法
    `setparams()` 和 `restart()` 来分配新参数，并让对象准备好绘制下一个 spiro。`self.restarting` 标志 ❶ 防止在完成之前调用此方法，如果用户反复按空格键，这可能会发生。标志会在方法末尾重置，这样下一个重启就不会被忽略
    ❷。
- en: Updating the Animation
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新动画
- en: 'The following code shows the `update()` method in `SpiroAnimator`, which is
    called by the timer every 10 milliseconds to update all the `Spiro` objects used
    in the animation:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了 `SpiroAnimator` 中的 `update()` 方法，该方法每 10 毫秒由定时器调用，用于更新动画中所有的 `Spiro`
    对象：
- en: 'def update(self):'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'def update(self):'
- en: '# update all spiros'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '# 更新所有的 spiros'
- en: ❶ nComplete = 0
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ nComplete = 0
- en: 'for spiro in self.spiros:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 spiro 在 self.spiros 中：
- en: '# update'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '# 更新'
- en: ❷ spiro.update()
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ spiro.update()
- en: '# count completed spiros'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '# 计算已完成的 spiros'
- en: '❸ if spiro.drawingComplete:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '❸ 如果 spiro.drawingComplete:'
- en: nComplete += 1
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: nComplete += 1
- en: '# restart if all spiros are complete'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果所有涡旋图形完成，则重新启动'
- en: '❹ if nComplete == len(self.spiros):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '❹ if nComplete == len(self.spiros):'
- en: self.restart()
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: self.restart()
- en: '# call the timer'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '# 调用定时器'
- en: 'try:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: ❺ turtle.ontimer(self.update, self.deltaT)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ turtle.ontimer(self.update, self.deltaT)
- en: 'except:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: print("发生异常，退出程序。")
- en: exit(0)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: The `update()` method uses a counter `nComplete` to track the number of `Spiro`
    objects that have finished drawing ❶. The method loops through the list of `Spiro`
    objects and updates them ❷, which draws one more line segment in each spiro. You
    increment the counter if a `Spiro` is done ❸.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()`方法使用一个计数器`nComplete`来跟踪已经完成绘制的`Spiro`对象数量 ❶。该方法遍历`Spiro`对象的列表并更新它们
    ❷，每个涡旋图形会绘制一段新的线段。如果某个`Spiro`已完成，你会增加计数器 ❸。'
- en: Outside the loop, you check the counter to determine whether all the objects
    have finished drawing ❹. If so, you restart the animation with fresh spiros by
    calling the `restart()` method. The `update()` method ends with a call to the
    `turtle` module’s `ontimer()` method ❺, which calls `update()` again after `deltaT`
    milliseconds. This is what keeps the animation going.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环外，你检查计数器以确定所有对象是否已完成绘制 ❹。如果是这样，你通过调用`restart()`方法重新启动动画，使用新的涡旋图形。`update()`方法以调用`turtle`模块的`ontimer()`方法结束
    ❺，该方法在`deltaT`毫秒后再次调用`update()`。这就是保持动画继续进行的方式。
- en: Showing or Hiding the Cursor
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示或隐藏光标
- en: You use the following method of the `SpiroAnimator` class to toggle the turtle
    cursors on and off. Turning them off makes the drawing go more quickly.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`SpiroAnimator`类的以下方法来切换海龟光标的显示与隐藏。关闭光标会使绘图速度更快。
- en: 'def toggleTurtles(self):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'def toggleTurtles(self):'
- en: 'for spiro in self.spiros:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'for spiro in self.spiros:'
- en: 'if spiro.t.isvisible():'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'if spiro.t.isvisible():'
- en: spiro.t.hideturtle()
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.t.hideturtle()
- en: 'else:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: spiro.t.showturtle()
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.t.showturtle()
- en: This method uses built-in `turtle` methods to hide the cursor if it’s visible
    or to show the cursor if it isn’t. Later, you’ll see how this `toggleTurtles()`
    method is triggered by keypresses while the animation is running.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法使用内置的`turtle`方法，如果光标可见则隐藏它，或者如果不可见则显示光标。稍后你将看到如何通过在动画运行时按键触发`toggleTurtles()`方法。
- en: '[Saving the Curves](nsp-venkitachalam503045-0008.xhtml#rbh0405)'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[保存曲线](nsp-venkitachalam503045-0008.xhtml#rbh0405)'
- en: 'After all your hard work generating spiros, it would be nice to have a way
    to save the results. The stand-alone `saveDrawing()` function saves the contents
    of the drawing window as a PNG image file:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在你辛苦生成涡旋图形后，最好有一种方式来保存结果。独立的`saveDrawing()`函数将绘图窗口的内容保存为PNG图像文件：
- en: 'def saveDrawing():'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 'def saveDrawing():'
- en: '# hide the turtle cursor'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '# 隐藏海龟光标'
- en: ❶ turtle.hideturtle()
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ turtle.hideturtle()
- en: '# generate unique filenames'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成唯一的文件名'
- en: ❷ dateStr = (datetime.now()).strftime("%d%b%Y-%H%M%S")
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ dateStr = (datetime.now()).strftime("%d%b%Y-%H%M%S")
- en: fileName = 'spiro-' + dateStr
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: fileName = 'spiro-' + dateStr
- en: print('saving drawing to {}.eps/png'.format(fileName))
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: print('保存绘图到{} .eps/png'.format(fileName))
- en: '# get the tkinter canvas'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取 tkinter 画布'
- en: canvas = turtle.getcanvas()
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: canvas = turtle.getcanvas()
- en: '# save the drawing as a postscript image'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将绘图保存为 PostScript 图像'
- en: ❸ canvas.postscript(file = fileName + '.eps')
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ canvas.postscript(file = fileName + '.eps')
- en: '# use the Pillow module to convert the postscript image file to PNG'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用Pillow模块将PostScript图像文件转换为PNG'
- en: ❹ img = Image.open(fileName + '.eps')
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ img = Image.open(fileName + '.eps')
- en: ❺ img.save(fileName + '.png', 'png')
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ img.save(fileName + '.png', 'png')
- en: '# show the turtle cursor'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示海龟光标'
- en: turtle.showturtle()
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.showturtle()
- en: You hide the turtle cursors so that you won’t see them in the final drawing
    ❶. Then you use `datetime()` to generate unique, timestamp-based names for the
    image files (in the *day-month-year-hour-minute-second* format) ❷. You append
    this string to *spiro-* to generate the filename.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你隐藏了海龟光标，这样它们就不会出现在最终的绘图中 ❶。然后，你使用`datetime()`生成基于时间戳的唯一文件名（格式为*日-月-年-时-分-秒*）❷。你将这个字符串附加到*spiro-*，生成文件名。
- en: The `turtle` program uses user interface (UI) windows created by `tkinter`,
    and you use the `canvas` object of `tkinter` to save the window in the Embedded
    PostScript (EPS) file format ❸. Because EPS is vector based, you can use it to
    print your images at high resolution, but the PNG format is more versatile, so
    you use `Pillow` to open the EPS file ❹ and save it as a PNG file ❺. Finally,
    you unhide the turtle cursors.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`turtle`程序使用由`tkinter`创建的用户界面（UI）窗口，你使用`tkinter`的`canvas`对象将窗口保存为嵌入式 PostScript（EPS）文件格式
    ❸。由于EPS是基于矢量的，你可以用它打印高分辨率的图像，但PNG格式更为通用，所以你使用`Pillow`打开EPS文件 ❹并将其保存为PNG文件 ❺。最后，你重新显示海龟光标。'
- en: '[Parsing Command Line Arguments and Initialization](nsp-venkitachalam503045-0008.xhtml#rbh0406)'
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[解析命令行参数和初始化](nsp-venkitachalam503045-0008.xhtml#rbh0406)'
- en: 'Most projects in this book have command line arguments for customizing the
    code. Rather than trying to parse them by hand and creating a mess, delegate this
    mundane task to Python’s `argparse` module. That’s what you do in the first part
    of the spiro program’s `main()` function:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数项目都有命令行参数，用于定制代码。与其尝试手动解析这些参数并弄得一团糟，不如将这一繁琐任务交给Python的`argparse`模块。你在spiro程序的`main()`函数的第一部分中就是这么做的：
- en: 'def main():'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 'def main():'
- en: ❶ parser = argparse.ArgumentParser(description=descStr)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ parser = argparse.ArgumentParser(description=descStr)
- en: '# add expected arguments'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加预期的参数'
- en: ❷ parser.add_argument('--sparams', nargs=3, dest='sparams', required=False,
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ parser.add_argument('--sparams', nargs=3, dest='sparams', required=False,
- en: 'help="The three arguments in sparams: R, r, l.")'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: help="sparams中的三个参数：R，r，l。"
- en: '# parse args'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '# 解析参数'
- en: ❸ args = parser.parse_args()
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ args = parser.parse_args()
- en: You create an `ArgumentParser` object to manage the command line arguments ❶.
    Then you add the `--sparams` argument to the parser ❷. It consists of three components,
    for the *R*, *r*, and *l* parameters of a spiro. You use the `dest` option to
    specify the variable name the values should be stored under once the arguments
    are parsed, and `required=False` means this argument is optional. You call the
    `parse_args()` method ❸ to actually parse the arguments. This makes the arguments
    available as properties of the `args` object. In this case, the values of the
    `--sparams` argument will be available through `args.sparams`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个`ArgumentParser`对象来管理命令行参数 ❶。然后将`--sparams`参数添加到解析器中 ❷。它由三个组成部分构成，分别是*R*、*r*和*l*参数。你使用`dest`选项来指定在解析完参数后，值应存储在哪个变量中，`required=False`表示该参数是可选的。你调用`parse_args()`方法
    ❸ 来实际解析参数。这使得参数作为`args`对象的属性可用。在本例中，`--sparams`参数的值将通过`args.sparams`访问。
- en: NOTE You’ll follow the same basic pattern described here throughout the book
    to create and parse each project’s command line arguments.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你将在本书中遵循这里描述的相同基本模式来创建并解析每个项目的命令行参数。
- en: 'The `main()` function continues by setting up some `turtle` parameters:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数继续通过设置一些`turtle`参数：'
- en: '# set the width of the drawing window to 80 percent of the screen width'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将绘图窗口的宽度设置为屏幕宽度的80%'
- en: ❶ turtle.setup(width=0.8)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ turtle.setup(width=0.8)
- en: '# set the cursor shape to turtle'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置光标形状为海龟'
- en: turtle.shape('turtle')
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.shape('turtle')
- en: '# set the title to Spirographs!'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将标题设置为Spirographs!'
- en: turtle.title("Spirographs!")
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.title("Spirographs!")
- en: '# add the key handler to save our drawings'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加键盘处理程序以保存我们的绘图'
- en: ❷ turtle.onkey(saveDrawing, "s")
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ turtle.onkey(saveDrawing, "s")
- en: '# start listening'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '# 开始监听'
- en: ❸ turtle.listen()
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ turtle.listen()
- en: '# hide the main turtle cursor'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '# 隐藏主海龟光标'
- en: ❹ turtle.hideturtle()
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ turtle.hideturtle()
- en: You use `setup()` to set the width of the drawing window to 80 percent of the
    screen width ❶. (You could also give `setup()` specific height and origin parameters.)
    Then you set the cursor shape to a turtle and set the title of the program window
    to *Spirographs!* Next, you use `onkey()` with your `saveDrawing()` function to
    instruct the program to save the drawing when you press the S key on your keyboard
    ❷. Calling `listen()` makes the drawing window listen for user events (like keypresses)
    ❸. Finally, you hide the turtle cursor ❹.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`setup()`将绘图窗口的宽度设置为屏幕宽度的80%。(你也可以给`setup()`指定特定的高度和原点参数。)然后将光标形状设置为海龟形状，并将程序窗口的标题设置为*Spirographs!*接下来，使用`onkey()`与`saveDrawing()`函数指示程序在按下键盘上的S键时保存绘图
    ❷。调用`listen()`使绘图窗口监听用户事件（如按键） ❸。最后，隐藏海龟光标 ❹。
- en: 'The rest of the `main()` function proceeds as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数的其余部分如下：'
- en: '# check for any arguments sent to --sparams and draw the Spirograph'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '# 检查是否有任何传递给`--sparams`的参数，并绘制Spirograph'
- en: '❶ if args.sparams:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 如果有`args.sparams`：
- en: ❷ params = [float(x) for x in args.sparams]
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ params = [float(x) for x in args.sparams]
- en: '# draw the Spirograph with the given parameters'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用给定参数绘制Spirograph'
- en: col = (0.0, 0.0, 0.0)
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: col = (0.0, 0.0, 0.0)
- en: ❸ spiro = Spiro(0, 0, col, *params)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ spiro = Spiro(0, 0, col, *params)
- en: ❹ spiro.draw()
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ spiro.draw()
- en: 'else:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: '# create the animator object'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建动画器对象'
- en: ❺ spiroAnim = SpiroAnimator(4)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ spiroAnim = SpiroAnimator(4)
- en: '# add a key handler to toggle the turtle cursor'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加键盘处理程序以切换海龟光标'
- en: turtle.onkey(spiroAnim.toggleTurtles, "t")
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.onkey(spiroAnim.toggleTurtles, "t")
- en: '# add a key handler to restart the animation'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加键盘处理程序以重新启动动画'
- en: turtle.onkey(spiroAnim.restart, "space")
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.onkey(spiroAnim.restart, "space")
- en: '# start the turtle main loop'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '# 启动海龟主循环'
- en: ❻ turtle.mainloop()
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ❻ turtle.mainloop()
- en: You first check whether any arguments were given to `--sparams` ❶; if so, the
    program will just draw the one spiro defined by those arguments. The arguments
    currently exist as strings, but you need them to be interpreted as numbers. You
    use a list comprehension to convert them into a list of floats ❷. (A *list comprehension*
    is a Python construct that lets you create a list in a compact and powerful way.
    For example, `a = [2*x for x in range(1, 5)]` creates a list of the first four
    even numbers.) Then you use the parameters to construct a `Spiro` object ❸ (with
    the help of the Python `*` operator, which unpacks the list into a series of arguments)
    and call `draw()` to draw the spiro ❹.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先检查是否给`--sparams`传入了任何参数 ❶；如果有，程序将只绘制由这些参数定义的单个螺旋图。参数目前是以字符串形式存在的，但你需要将它们解释为数字。你使用列表推导式将它们转换为浮动列表
    ❷。（*列表推导式*是Python的一种构造，可以用简洁且强大的方式创建列表。例如，`a = [2*x for x in range(1, 5)]`会创建一个包含前四个偶数的列表。）然后，你使用这些参数构造一个`Spiro`对象
    ❸（借助Python的`*`操作符，它可以将列表展开为一系列参数），并调用`draw()`来绘制螺旋图 ❹。
- en: If no arguments were specified at the command line, you enter random animation
    mode. For this, you create a `SpiroAnimator` object ❺, passing it the argument
    `4`, which tells it to draw four spiros at once. Then you use two `onkey` calls
    to capture additional keypresses. Pressing the T key will show or hide the turtle
    cursors with the `toggleTurtles()` method, while pressing the spacebar (`space`)
    will call `restart()` to interrupt the animation at any point and start drawing
    four different random spiros. Finally, you call `mainloop()` to tell the `tkinter`
    window to stay open, listening for events ❻.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在命令行没有指定任何参数，程序将进入随机动画模式。在这种模式下，你创建一个`SpiroAnimator`对象 ❺，并传入参数`4`，这会让它一次绘制四个螺旋图。然后，你使用两个`onkey`调用来捕捉额外的按键事件。按下T键会通过`toggleTurtles()`方法显示或隐藏乌龟光标，而按下空格键（`space`）则会调用`restart()`，在任何时刻中断动画并开始绘制四个不同的随机螺旋图。最后，你调用`mainloop()`，让`tkinter`窗口保持打开，等待事件
    ❻。
- en: '[Running the Spirograph Animation](nsp-venkitachalam503045-0008.xhtml#rah0404)'
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[运行螺旋图动画](nsp-venkitachalam503045-0008.xhtml#rah0404)'
- en: 'Now it’s time to run your program:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候运行你的程序了：
- en: $ `python spiro.py`
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: $ `python spiro.py`
- en: By default, the *spiro.py* program draws four random spiros simultaneously,
    as shown in [Figure 2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5). Pressing
    S saves the drawing, pressing T toggles the cursors, and pressing the spacebar
    restarts the animation.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，*spiro.py*程序同时绘制四个随机螺旋图，如[图2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5)所示。按下S键保存绘图，按下T键切换光标，按下空格键重新启动动画。
- en: '![](images/nsp-venkitachalam503045-f02005.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02005.jpg)'
- en: 'Figure 2-5: A sample run of *spiro.py*'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-5：*spiro.py*的示例运行
- en: 'Now run the program again, this time passing in parameters at the command line
    to draw a particular spiro:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行程序，这次在命令行传入参数来绘制特定的螺旋图：
- en: $ `python spiro.py --sparams 300 100 0.9`
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: $ `python spiro.py --sparams 300 100 0.9`
- en: '[Figure 2-6](nsp-venkitachalam503045-0013.xhtml#fig2-6) shows the output. As
    you can see, this code draws a single spiro with the parameters specified by the
    user, in contrast to [Figure 2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5),
    which displays an animation of several random spiros.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2-6](nsp-venkitachalam503045-0013.xhtml#fig2-6)展示了输出结果。如你所见，这段代码绘制了一个由用户指定参数定义的单一螺旋图，区别于[图2-5](nsp-venkitachalam503045-0013.xhtml#fig2-5)，后者展示了多个随机螺旋图的动画。'
- en: '![](images/nsp-venkitachalam503045-f02006.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f02006.jpg)'
- en: 'Figure 2-6: A sample run of *spiro.py* with specific parameters'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-6：使用特定参数的*spiro.py*示例运行
- en: Have fun experimenting with different parameters to see how they influence the
    resulting curves.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不同的参数，看它们如何影响结果曲线，玩得开心。
- en: '[Summary](nsp-venkitachalam503045-0008.xhtml#rah0405)'
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[总结](nsp-venkitachalam503045-0008.xhtml#rah0405)'
- en: In this project, you learned how to create Spirograph-like curves. You also
    learned how to adjust the input parameters to generate a variety of different
    curves and to animate them on the screen. I hope you enjoy creating these spiros.
    (You’ll find a surprise in [Chapter 13](nsp-venkitachalam503045-0028.xhtml#ch13),
    where you’ll learn how to project spiros onto a wall!)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你学会了如何创建类似Spirograph的曲线。你还学会了如何调整输入参数，生成各种不同的曲线，并在屏幕上进行动画。我希望你喜欢创作这些螺旋图。（你会在[第13章](nsp-venkitachalam503045-0028.xhtml#ch13)中发现一个惊喜，届时你将学会如何将螺旋图投影到墙上！）
- en: '[Experiments!](nsp-venkitachalam503045-0008.xhtml#rah0406)'
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[实验！](nsp-venkitachalam503045-0008.xhtml#rah0406)'
- en: 'Here are some ways to experiment further with spiros:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些进一步实验螺旋图的方法：
- en: 1\. Now that you know how to draw circles, write a program to draw random *spirals*.
    Find the equation for a *logarithmic spiral* in parametric form and then use it
    to draw the spirals.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 现在你知道如何绘制圆形了，写一个程序绘制随机的*螺旋线*。找到*对数螺旋*的参数方程，并用它来绘制螺旋线。
- en: '2\. You might have noticed that the turtle cursor is always oriented to the right
    as the curves are drawn, but that’s not how turtles move! Orient the turtle so
    that, as the curve is being drawn, it faces in the direction of drawing. (Hint:
    calculate the direction vector between successive points for every step and reorient
    the turtle using the `turtle`.`setheading()` method.)'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 你可能已经注意到，当曲线被绘制时，海龟光标总是面朝右侧，但这并不是海龟的移动方式！将海龟朝向改为在绘制曲线时始终朝着绘制的方向。(提示：计算每一步的两个点之间的方向向量，并使用`turtle`.`setheading()`方法重新调整海龟的方向。)
- en: '[The Complete Code](nsp-venkitachalam503045-0008.xhtml#rah0407)'
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[完整代码](nsp-venkitachalam503045-0008.xhtml#rah0407)'
- en: 'Here’s the complete Spirograph program:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的涡轮图程序：
- en: '"""'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: spiro.py
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.py
- en: A Python program that simulates a Spirograph.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模拟绘制涡轮图的Python程序。
- en: 'Author: Mahesh Venkitachalam'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：Mahesh Venkitachalam
- en: '"""'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: import random, argparse
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: import random, argparse
- en: import numpy as np
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import math
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: import math
- en: import turtle
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: import turtle
- en: import random
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: import random
- en: from PIL import Image
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: from PIL import Image
- en: from datetime import datetime
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: from datetime import datetime
- en: a class that draws a spiro
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个绘制涡轮图的类
- en: 'class Spiro:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Spiro:'
- en: '# constructor'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '# 构造函数'
- en: 'def __init__(self, xc, yc, col, R, r, l):'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, xc, yc, col, R, r, l):'
- en: '# create own turtle'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建自己的海龟'
- en: self.t = turtle.Turtle()
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: self.t = turtle.Turtle()
- en: '# set cursor shape'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置光标形状'
- en: self.t.shape('turtle')
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.shape('turtle')
- en: '# set step in degrees'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置角度步长'
- en: self.step = 5
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: self.step = 5
- en: '# set drawing complete flag'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置绘图完成标志'
- en: self.drawingComplete = False
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: self.drawingComplete = False
- en: '# set parameters'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置参数'
- en: self.setparams(xc, yc, col, R, r, l)
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: self.setparams(xc, yc, col, R, r, l)
- en: '# initialize drawing'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '# 初始化绘图'
- en: self.restart()
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: self.restart()
- en: '# set parameters'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置参数'
- en: 'def setparams(self, xc, yc, col, R, r, l):'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 'def setparams(self, xc, yc, col, R, r, l):'
- en: '# spirograph parameters'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '# 涡轮图参数'
- en: self.xc = xc
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: self.xc = xc
- en: self.yc = yc
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: self.yc = yc
- en: self.R = int(R)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: self.R = int(R)
- en: self.r = int(r)
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: self.r = int(r)
- en: self.l = l
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: self.l = l
- en: self.col = col
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: self.col = col
- en: '# reduce r/R to smallest form by dividing with GCD'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将 r/R 除以最大公约数以得到最简形式'
- en: gcdVal = math.gcd(self.r, self.R)
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: gcdVal = math.gcd(self.r, self.R)
- en: self.nRot = self.r//gcdVal
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: self.nRot = self.r//gcdVal
- en: '# get ratio of radii'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取半径比'
- en: self.k = r/float(R)
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: self.k = r/float(R)
- en: '# set color'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置颜色'
- en: self.t.color(*col)
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.color(*col)
- en: '# current angle'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '# 当前角度'
- en: self.a = 0
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: self.a = 0
- en: '# restart drawing'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重新开始绘图'
- en: 'def restart(self):'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 'def restart(self):'
- en: '# set flag'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置标志'
- en: self.drawingComplete = False
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: self.drawingComplete = False
- en: '# show turtle'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示海龟'
- en: self.t.showturtle()
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.showturtle()
- en: '# go to first point'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '# 移动到第一个点'
- en: self.t.up()
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.up()
- en: R, k, l = self.R, self.k, self.l
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: R, k, l = self.R, self.k, self.l
- en: a = 0.0
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: a = 0.0
- en: x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
- en: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
- en: 'try:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: self.t.setpos(self.xc + x, self.yc + y)
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.setpos(self.xc + x, self.yc + y)
- en: 'except:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: print("异常，退出。")
- en: exit(0)
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: self.t.down()
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.down()
- en: '# draw the whole thing'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制整个图形'
- en: 'def draw(self):'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'def draw(self):'
- en: '# draw rest of points'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制其余的点'
- en: R, k, l = self.R, self.k, self.l
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: R, k, l = self.R, self.k, self.l
- en: 'for i in range(0, 360*self.nRot + 1, self.step):'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(0, 360*self.nRot + 1, self.step):'
- en: a = math.radians(i)
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: a = math.radians(i)
- en: x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: x = R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
- en: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: y = R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
- en: 'try:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: self.t.setpos(self.xc + x, self.yc + y)
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.setpos(self.xc + x, self.yc + y)
- en: 'except:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: print("异常，退出。")
- en: exit(0)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: '# done - hide turtle'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '# 完成 - 隐藏海龟'
- en: self.t.hideturtle()
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.hideturtle()
- en: '# update by one step'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '# 更新一步'
- en: 'def update(self):'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 'def update(self):'
- en: '# skip if done'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '# 完成则跳过'
- en: 'if self.drawingComplete:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 'if self.drawingComplete:'
- en: return
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '# increment angle'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '# 增加角度'
- en: self.a += self.step
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: self.a += self.step
- en: '# draw step'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '# 绘制步骤'
- en: R, k, l = self.R, self.k, self.l
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: R, k, l = self.R, self.k, self.l
- en: '# set angle'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置角度'
- en: a = math.radians(self.a)
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: a = math.radians(self.a)
- en: x = self.R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: x = self.R*((1-k)*math.cos(a) + l*k*math.cos((1-k)*a/k))
- en: y = self.R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: y = self.R*((1-k)*math.sin(a) - l*k*math.sin((1-k)*a/k))
- en: 'try:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: self.t.setpos(self.xc + x, self.yc + y)
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.setpos(self.xc + x, self.yc + y)
- en: 'except:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: print("异常，退出。")
- en: exit(0)
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: '# check if drawing is complete and set flag'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '# 检查绘图是否完成并设置标志'
- en: 'if self.a >= 360*self.nRot:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 'if self.a >= 360*self.nRot:'
- en: self.drawingComplete = True
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: self.drawingComplete = True
- en: '# done - hide turtle'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '# 完成 - 隐藏海龟'
- en: self.t.hideturtle()
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.hideturtle()
- en: '# clear everything'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '# 清空所有内容'
- en: 'def clear(self):'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 'def clear(self):'
- en: '# pen up'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '# 提笔'
- en: self.t.up()
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.up()
- en: '# clear turtle'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '# 清除 turtle'
- en: self.t.clear()
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: self.t.clear()
- en: a class for animating spiros
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个用于动画化 spiros 的类
- en: 'class SpiroAnimator:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 'class SpiroAnimator:'
- en: '# constructor'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '# 构造函数'
- en: 'def __init__(self, N):'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, N):'
- en: '# timer value in milliseconds'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '# 定时器值（毫秒）'
- en: self.deltaT = 10
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: self.deltaT = 10
- en: '# get window dimensions'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取窗口尺寸'
- en: self.width = turtle.window_width()
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: self.width = turtle.window_width()
- en: self.height = turtle.window_height()
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: self.height = turtle.window_height()
- en: '# restarting'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启中'
- en: self.restarting = False
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: self.restarting = False
- en: '# create spiro objects'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建 spiro 对象'
- en: self.spiros = []
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: self.spiros = []
- en: 'for i in range(N):'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: '# generate random parameters'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成随机参数'
- en: rparams = self.genRandomParams()
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: rparams = self.genRandomParams()
- en: '# set spiro params'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置 spiro 参数'
- en: spiro = Spiro(*rparams)
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: spiro = Spiro(*rparams)
- en: self.spiros.append(spiro)
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: self.spiros.append(spiro)
- en: '# call timer'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '# 调用定时器'
- en: turtle.ontimer(self.update, self.deltaT)
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.ontimer(self.update, self.deltaT)
- en: '# restart spiro drawing'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启 spiro 绘图'
- en: 'def restart(self):'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 'def restart(self):'
- en: '# ignore restart if already in the middle of restarting'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果正在重启中，则忽略重启'
- en: 'if self.restarting:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 'if self.restarting:'
- en: return
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'else:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: self.restarting = True
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: self.restarting = True
- en: '# restart'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启'
- en: 'for spiro in self.spiros:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 'for spiro in self.spiros:'
- en: '# clear'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '# 清除'
- en: spiro.clear()
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.clear()
- en: '# generate random parameters'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成随机参数'
- en: rparams = self.genRandomParams()
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: rparams = self.genRandomParams()
- en: '# set spiro params'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置 spiro 参数'
- en: spiro.setparams(*rparams)
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.setparams(*rparams)
- en: '# restart drawing'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重启绘图'
- en: spiro.restart()
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.restart()
- en: '# done restarting'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '# 完成重启'
- en: self.restarting = False
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: self.restarting = False
- en: '# generate random parameters'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成随机参数'
- en: 'def genRandomParams(self):'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 'def genRandomParams(self):'
- en: width, height = self.width, self.height
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: width, height = self.width, self.height
- en: R = random.randint(50, min(width, height)//2)
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: R = random.randint(50, min(width, height)//2)
- en: r = random.randint(10, 9*R//10)
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: r = random.randint(10, 9*R//10)
- en: l = random.uniform(0.1, 0.9)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: l = random.uniform(0.1, 0.9)
- en: xc = random.randint(-width//2, width//2)
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: xc = random.randint(-width//2, width//2)
- en: yc = random.randint(-height//2, height//2)
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: yc = random.randint(-height//2, height//2)
- en: col = (random.random(),
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: col = (random.random(),
- en: random.random(),
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: random.random(),
- en: random.random())
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: random.random())
- en: return (xc, yc, col, R, r, l)
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: return (xc, yc, col, R, r, l)
- en: 'def update(self):'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 'def update(self):'
- en: '# update all spiros'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '# 更新所有 spiros'
- en: nComplete = 0
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: nComplete = 0
- en: 'for spiro in self.spiros:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 'for spiro in self.spiros:'
- en: '# update'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '# 更新'
- en: spiro.update()
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.update()
- en: '# count completed ones'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '# 计数已完成的数量'
- en: 'if spiro.drawingComplete:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: if spiro.drawingComplete
- en: nComplete+= 1
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: nComplete+= 1
- en: '# if all spiros are complete, restart'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果所有 spiros 完成，则重启'
- en: 'if nComplete == len(self.spiros):'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 'if nComplete == len(self.spiros):'
- en: self.restart()
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: self.restart()
- en: '# call timer'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '# 调用定时器'
- en: 'try:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: turtle.ontimer(self.update, self.deltaT)
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.ontimer(self.update, self.deltaT)
- en: 'except:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 'except:'
- en: print("Exception, exiting.")
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: print("异常，退出。")
- en: exit(0)
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: exit(0)
- en: '# toggle turtle on/off'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '# 切换 turtle 开/关'
- en: 'def toggleTurtles(self):'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 'def toggleTurtles(self):'
- en: 'for spiro in self.spiros:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 'for spiro in self.spiros:'
- en: 'if spiro.t.isvisible():'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 'if spiro.t.isvisible():'
- en: spiro.t.hideturtle()
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.t.hideturtle()
- en: 'else:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: spiro.t.showturtle()
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.t.showturtle()
- en: save spiros to image
  id: totrans-527
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 spiros 保存为图像
- en: 'def saveDrawing():'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 'def saveDrawing():'
- en: '# hide turtle'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '# 隐藏 turtle'
- en: turtle.hideturtle()
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.hideturtle()
- en: '# generate unique filename'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '# 生成唯一的文件名'
- en: dateStr = (datetime.now()).strftime("%d%b%Y-%H%M%S")
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: dateStr = (datetime.now()).strftime("%d%b%Y-%H%M%S")
- en: fileName = 'spiro-' + dateStr
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: fileName = 'spiro-' + dateStr
- en: print('saving drawing to {}.eps/png'.format(fileName))
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: print('正在保存绘图到 {}.eps/png'.format(fileName))
- en: '# get tkinter canvas'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取 tkinter 画布'
- en: canvas = turtle.getcanvas()
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: canvas = turtle.getcanvas()
- en: '# save postscript image'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '# 保存 PostScript 图像'
- en: canvas.postscript(file = fileName + '.eps')
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: canvas.postscript(file = fileName + '.eps')
- en: '# use PIL to convert to PNG'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用 PIL 转换为 PNG'
- en: img = Image.open(fileName + '.eps')
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: img = Image.open(fileName + '.eps')
- en: img.save(fileName + '.png', 'png')
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: img.save(fileName + '.png', 'png')
- en: '# show turtle'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示 turtle'
- en: turtle.showturtle()
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.showturtle()
- en: main() function
  id: totrans-544
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: main() 函数
- en: 'def main():'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 'def main():'
- en: '# use sys.argv if needed'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如有需要，使用 sys.argv'
- en: print('generating spirograph...')
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: print('正在生成 spirograph...')
- en: '# create parser'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建解析器'
- en: descStr = """This program draws spirographs using the Turtle module.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: descStr = """这个程序使用 Turtle 模块绘制 spirographs。
- en: When run with no arguments, this program draws random spirographs.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有参数运行时，程序会绘制随机的 spirographs。
- en: 'Terminology:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 术语：
- en: 'R: radius of outer circle.'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 'R: 外圆的半径。'
- en: 'r: radius of inner circle.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 'r: 内圆的半径。'
- en: 'l: ratio of hole distance to r.'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 'l: 孔距与 r 的比例。'
- en: '"""'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: parser = argparse.ArgumentParser(description=descStr)
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: parser = argparse.ArgumentParser(description=descStr)
- en: '# add expected arguments'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加期望的参数'
- en: parser.add_argument('--sparams', nargs=3, dest='sparams', required=False,
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: parser.add_argument('--sparams', nargs=3, dest='sparams', required=False,
- en: 'help="The three arguments in sparams: R, r, l.")'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: help="sparams 中的三个参数：R，r，l。")
- en: '# parse args'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '# 解析参数'
- en: args = parser.parse_args()
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: args = parser.parse_args()
- en: '# set to 80% screen width'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置为 80% 屏幕宽度'
- en: turtle.setup(width=0.8)
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.setup(width=0.8)
- en: '# set cursor shape'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置光标形状'
- en: turtle.shape('turtle')
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.shape('turtle')
- en: '# set title'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '# 设置标题'
- en: turtle.title("Spirographs!")
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.title("旋转图形！")
- en: '# add key handler for saving images'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加键盘处理器以保存图像'
- en: turtle.onkey(saveDrawing, "s")
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.onkey(saveDrawing, "s")
- en: '# start listening'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '# 开始监听'
- en: turtle.listen()
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.listen()
- en: '# hide main turtle cursor'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '# 隐藏主海龟光标'
- en: turtle.hideturtle()
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.hideturtle()
- en: '# check args and draw'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '# 检查参数并绘制'
- en: 'if args.sparams:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 'if args.sparams:'
- en: params = [float(x) for x in args.sparams]
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: params = [float(x) for x in args.sparams]
- en: '# draw spirograph with given parameters'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用给定参数绘制旋转图形'
- en: '# black by default'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '# 默认黑色'
- en: col = (0.0, 0.0, 0.0)
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: col = (0.0, 0.0, 0.0)
- en: spiro = Spiro(0, 0, col, *params)
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: spiro = Spiro(0, 0, col, *params)
- en: spiro.draw()
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: spiro.draw()
- en: 'else:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: '# create animator object'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建动画对象'
- en: spiroAnim = SpiroAnimator(4)
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: spiroAnim = SpiroAnimator(4)
- en: '# add key handler to toggle turtle cursor'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加键盘处理器以切换海龟光标'
- en: turtle.onkey(spiroAnim.toggleTurtles, "t")
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.onkey(spiroAnim.toggleTurtles, "t")
- en: '# add key handler to restart animation'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '# 添加键盘处理器以重新启动动画'
- en: turtle.onkey(spiroAnim.restart, "space")
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.onkey(spiroAnim.restart, "space")
- en: '# start turtle main loop'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '# 启动海龟主循环'
- en: turtle.mainloop()
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: turtle.mainloop()
- en: call main
  id: totrans-591
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用 main
- en: 'if __name__ == ''__main__'':'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: main()
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: main()
