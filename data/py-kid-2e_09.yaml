- en: '8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '8'
- en: How to Use Classes and Objects
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用类和对象
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: Why is a giraffe like a sidewalk? Because a giraffe and a sidewalk are both
    *things*, which are known in the English language as nouns and in Python as *objects*.
    In programming, objects are a way to organize code and break things down to more
    easily work with complex ideas. (We used an object in [Chapter 4](ch04.xhtml#ch04)
    when we worked with the turtle module’s Turtle object.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么长颈鹿像人行道一样？因为长颈鹿和人行道都是*事物*，在英语中被称为名词，在 Python 中被称为*对象*。在编程中，对象是组织代码的一种方式，并且将事物拆解成更易于操作复杂想法的模块。（我们在[第
    4 章](ch04.xhtml#ch04)中使用过对象，当时我们使用了乌龟模块的 Turtle 对象。）
- en: To fully understand how objects work in Python, we need to think about types
    of objects. Let’s start with giraffes and sidewalks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要全面理解 Python 中对象的工作方式，我们需要思考对象的类型。我们从长颈鹿和人行道开始。
- en: A giraffe is a type of mammal, which is a type of animal. A giraffe is also
    an animate object—it’s alive.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 长颈鹿是一种哺乳动物，哺乳动物又是动物的一种。长颈鹿也是一种有生命的物体——它是活的。
- en: There’s not much to say about a sidewalk other than it’s not a living thing.
    Let’s call it an inanimate object (in other words, it’s not alive). The terms
    *mammal*, *animal*, *animate*, and *inanimate* are all ways of classifying things.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于人行道，没有什么好说的，它只是一个非生物体。我们可以称它为无生命体（换句话说，它是死的）。*哺乳动物*、*动物*、*有生命*和*无生命*这些术语都是分类事物的方式。
- en: '![Image](Images/f0096-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0096-01.jpg)'
- en: Breaking Things into Classes
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将事物拆分成类别
- en: In Python, objects are defined by *classes*, which classify objects into groups.
    For example, the tree diagram in [Figure 8-1](ch08.xhtml#ch08fig01) shows the
    classes that giraffes and sidewalks fit into based on our preceding definitions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，对象由*类*定义，类将对象分为不同的组。例如，[图 8-1](ch08.xhtml#ch08fig01)中的树状图显示了长颈鹿和人行道根据我们之前的定义所属于的类。
- en: '![Image](Images/08fig01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/08fig01.jpg)'
- en: '*Figure 8-1: Tree diagram of some classes*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：一些类的树状图*'
- en: The main class is Thing. Below the Thing class, we have Inanimate and Animate.
    These classes are further broken down into Sidewalk for Inanimate, and Animal,
    Mammal, and Giraffe for Animate.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 主要类是 Thing。在 Thing 类下，我们有 Inanimate 和 Animate。这些类进一步细分为 Inanimate 的 Sidewalk
    和 Animate 的 Animal、Mammal 和 Giraffe。
- en: We can use classes to organize bits of code. For example, consider the turtle
    module. All the things Python’s turtle module can do—such as moving forward, moving
    backward, turning left, and turning right—are functions in the Turtle class. An
    object is a member of a class, and we can create any number of objects for a class,
    which we’ll get to shortly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类来组织代码片段。例如，考虑乌龟模块。Python 的乌龟模块能做的所有事情——例如前进、后退、左转和右转——都是 Turtle 类中的函数。一个对象是某个类的成员，我们可以为一个类创建任意数量的对象，这一点我们很快就会讲到。
- en: 'Now let’s create the same set of classes shown in our tree diagram, starting
    from the top. We define classes using the class keyword followed by a name. Thing
    is the broadest class, so we’ll create it first:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从顶部开始创建与树状图中相同的类集合。我们使用 class 关键字来定义类，后面跟着一个名称。Thing 是最广泛的类，因此我们首先创建它：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We name the class Thing and use the pass statement to let Python know we’re
    not going to give any more information. The pass keyword is used when we want
    to provide a class or function but don’t want to fill in the details at the moment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们命名类为 Thing，并使用 pass 语句告诉 Python 我们不会提供更多信息。pass 关键字用于当我们想提供一个类或函数，但暂时不想填充具体细节时。
- en: Next, we’ll add the other classes and build some relationships between them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加其他类并建立它们之间的关系。
- en: Children and Parents
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子类与父类
- en: If a class is a part of another class, it’s considered a *child* of that class,
    and the other class is its *parent*. Classes can be both *children of* and *parents
    to* other classes. In our tree diagram, the class above another class is its parent
    and the class below it is its child. For example, Inanimate and Animate are both
    children of the class Thing, meaning that Thing is their parent.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个类是另一个类的组成部分，它被认为是该类的*子类*，而另一个类则是它的*父类*。类可以既是其他类的*子类*，也可以是其他类的*父类*。在我们的树状图中，一个类位于另一个类上方时，它是父类，位于下方的类则是子类。例如，Inanimate
    和 Animate 都是 Thing 类的子类，这意味着 Thing 是它们的父类。
- en: 'To tell Python that a class is a child of another class, we add the name of
    the parent class in parentheses after the name of our new class, like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉 Python 一个类是另一个类的子类，我们在新类的名称后加上父类的名称，像这样：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we create a class called Inanimate and tell Python that its parent class
    is Thing. Next, we create a class called Animate and tell Python that its parent
    class is also Thing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个名为 Inanimate 的类，并告诉 Python 它的父类是 Thing。接下来，我们创建了一个名为 Animate 的类，并告诉
    Python 它的父类也是 Thing。
- en: 'Let’s create the Sidewalk class with the parent class Inanimate:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 Sidewalk 的类，父类为 Inanimate：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can organize the Animal, Mammal, and Giraffe classes using their parent
    classes as well:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用它们的父类来组织 Animal、Mammal 和 Giraffe 类：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding Objects to Classes
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向类中添加对象
- en: We now have a bunch of classes, but what about putting some more information
    into those classes? Say we have a giraffe named Reginald. We know he belongs in
    the Giraffe class, but what do we use—in programming terms—to describe the single
    giraffe called Reginald?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一堆类，但我们如何将更多信息添加到这些类中呢？假设我们有一只名叫 Reginald 的长颈鹿。我们知道他属于 Giraffe 类，但我们在编程术语中用什么来描述这只名叫
    Reginald 的单独的长颈鹿呢？
- en: 'We call Reginald an *object* (also known as an *instance*) of the Giraffe class.
    To “introduce” Reginald to Python, we use this little snippet of code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称 Reginald 为 Giraffe 类的*对象*（也称为*实例*）。为了将 Reginald “引入” Python，我们使用这段小代码：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code tells Python to create an object of the Giraffe class and assign it
    to the reginald variable. Like when we call a function, the class name is followed
    by parentheses. Later in this chapter, we’ll see how to create objects and use
    parameters in the parentheses.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Python 创建一个 Giraffe 类的对象，并将其赋值给 reginald 变量。就像调用函数时一样，类名后面跟着括号。在本章后面，我们将看到如何创建对象并使用括号中的参数。
- en: But what does the reginald object do? Well, nothing at the moment. To make our
    objects useful, when we create our classes, we also need to define functions that
    can be used with the objects in that class. Rather than just using the pass keyword
    immediately after defining the class, we can add function definitions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，reginald 对象做什么呢？目前，什么也不做。为了使我们的对象更有用，当我们创建类时，我们还需要定义可以与该类中的对象一起使用的函数。与其在定义类后立即使用
    pass 关键字，我们可以添加函数定义。
- en: Defining Functions of Classes
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义类的函数
- en: '[Chapter 7](ch07.xhtml#ch07) introduced functions as a way to reuse code. When
    we define a function that’s associated with a class, we do so in the same way
    that we define any other function, except we indent it beneath the class definition.
    For example, here’s a normal function that isn’t associated with a class:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.xhtml#ch07)介绍了函数作为重用代码的一种方式。当我们定义与类相关联的函数时，我们的做法与定义其他函数相同，只不过我们将其缩进到类定义之下。例如，这是一个与类无关的普通函数：'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And here are a couple of functions that are defined for a class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个为类定义的函数：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding Class Characteristics
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加类特征
- en: Consider the child classes of the Animate class we defined in section Children
    and Parents. We can add characteristics to each class that describe what it is
    and what it can do. A *characteristic* is a trait all members of the class (and
    its children) share.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们在“子类和父类”一节中定义的 Animate 类的子类。我们可以为每个类添加描述它是什么以及它能做什么的特征。*特征*是所有该类（及其子类）成员所共有的属性。
- en: For example, what do all animals have in common? To start with, they breathe,
    move, and eat. What about mammals? Mammals feed their young with milk, and they
    also breathe, move, and eat. We know giraffes eat leaves from high up in trees.
    And like all mammals, they feed their young with milk, breathe, move, and eat.
    When we add these characteristics to our tree diagram, we get something like [Figure
    8-2](ch08.xhtml#ch08fig02).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，所有动物有什么共同点？首先，它们都会呼吸、移动和进食。那么哺乳动物呢？哺乳动物用乳汁喂养后代，它们也会呼吸、移动和进食。我们知道长颈鹿吃树上的高处叶子。像所有哺乳动物一样，它们也用乳汁喂养后代，呼吸、移动和进食。当我们将这些特征添加到我们的树形图时，得到的结果类似于[图
    8-2](ch08.xhtml#ch08fig02)。
- en: '![Image](Images/08fig02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/08fig02.jpg)'
- en: '*Figure 8-2: Classes with characteristics*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：具有特征的类*'
- en: These characteristics can be thought of as actions, or functions—things that
    an object of that class can do.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特征可以被视为动作或函数——即该类的对象可以做的事情。
- en: 'To add a function to a class, we use the def keyword. So the Animal class will
    look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要向类中添加函数，我们使用 def 关键字。所以 Animal 类看起来会像这样：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the first line of this listing, we define the class as we did before, but
    instead of using pass on the next line, we define a function called breathe and
    give it the self parameter. The self parameter is a way for one function in the
    class to call another function in the class (and in the parent class). We’ll see
    this parameter in use later.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码的第一行，我们像之前一样定义了类，但在下一行我们不再使用pass，而是定义了一个名为breathe的函数，并给它提供了self参数。self参数是类中一个函数调用另一个函数（包括父类中的函数）的一种方式。稍后我们会看到这个参数的使用。
- en: '![Image](Images/f0100-01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0100-01.jpg)'
- en: On the next line, pass tells Python we’re not going to provide any more information
    about the breathe function because it’s going to do nothing for now. Then we add
    the move and eat_food functions and use the pass keyword for both. We’ll recreate
    our classes shortly and put some proper code in the functions. This is a common
    way to develop programs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，pass告诉Python我们不会提供更多关于breathe函数的信息，因为它现在什么也不做。然后我们添加了move和eat_food函数，并且对这两个函数都使用了pass关键字。稍后我们会重新创建类，并在函数中加入适当的代码。这是开发程序的一种常见方式。
- en: '**NOTE**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Often, programmers will create classes with functions that do nothing as a
    way to figure out what the class should do before getting into the details of
    the individual functions.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常，程序员会创建没有任何功能的类，作为在深入细节之前确定类应执行什么的方式。*'
- en: We can also add functions to the Mammal and Giraffe classes. Each class will
    be able to use the characteristics (or functions) of its parent, meaning you don’t
    need to make one really complicated class. Instead, you can put your functions
    in the highest parent class where the characteristic applies. (This makes your
    classes simpler and easier to understand.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向Mammal和Giraffe类添加函数。每个类都能够使用其父类的特征（或函数），这意味着你不需要创建一个非常复杂的类。相反，你可以将函数放在最高的父类中，只要该特征适用即可。（这使得你的类更加简洁且易于理解。）
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the above code, the Mammal class provides a function feed _young_with_milk.
    The Giraffe class is a child class (or *subclass*) of Mammal and provides another
    function: eat_leaves_from_trees.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，Mammal类提供了一个名为feed _young_with_milk的函数。Giraffe类是Mammal类的子类（或*子类*），并提供了另一个函数：eat_leaves_from_trees。
- en: Why Use Classes and Objects?
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用类和对象？
- en: We’ve now added functions to our classes, but why use classes and objects at
    all when you could just write normal functions called breathe, move, eat_food,
    and so on?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经给类添加了函数，但如果可以仅仅写出像breathe、move、eat_food这样的普通函数，为什么还要使用类和对象呢？
- en: 'To answer that question, we’ll use our giraffe called Reginald, which we created
    earlier as an object of the Giraffe class, like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，我们将使用我们之前创建的名为Reginald的长颈鹿对象，它是Giraffe类的一个实例，像这样：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Because reginald is an object, we can call (or run) functions provided by the
    Giraffe class and its parent classes. We call functions on an object by using
    the dot (.) operator and the name of the function. To tell Reginald to move or
    eat, we can call the functions like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Reginald是一个对象，我们可以调用（或运行）Giraffe类及其父类提供的函数。我们通过使用点号（.）操作符和函数名称来对对象调用函数。要告诉Reginald移动或吃东西，我们可以像这样调用这些函数：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Suppose Reginald has a giraffe friend named Harriet. Let’s create another Giraffe
    object called harriet:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Reginald有一个长颈鹿朋友叫Harriet。让我们再创建一个名为harriet的Giraffe对象：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Because we’re using objects and classes, we can tell Python which giraffe we’re
    talking about when we want to run the move function. For example, if we want to
    make Harriet move but leave Reginald in place, we could call the move function
    by using our harriet object, like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在使用对象和类，所以当我们想要运行move函数时，可以告诉Python我们在谈论哪个长颈鹿。例如，如果我们想让Harriet移动，但让Reginald保持原地，我们可以通过使用我们的harriet对象来调用move函数，像这样：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, only Harriet would be moving.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，只有Harriet会移动。
- en: 'Let’s change our classes a little to make this more obvious. Add a print statement
    to each function instead of using pass:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微修改一下我们的类，让这一点更加明显。给每个函数添加一个print语句，而不是使用pass：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now when we create our reginald and harriet objects and call functions on them,
    we can see something actually happen:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们创建我们的Reginald和Harriet对象并对它们调用函数时，我们可以看到一些实际的效果发生：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On the first two lines, we create the variables reginald and harriet, which
    are objects of the Giraffe class. Next, we call the move function on reginald,
    and Python prints moving on the following line. In the same way, we call the eat_leaves_from_trees
    function on harriet, and Python prints eating leaves. If these were real giraffes,
    rather than objects in a computer, one giraffe would be walking and the other
    would be eating.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两行中，我们创建了变量reginald和harriet，它们是Giraffe类的对象。接下来，我们调用reginald的move函数，Python在下一行输出“moving”。同样，我们调用harriet的eat_leaves_from_trees函数，Python输出“eating
    leaves”。如果这些是现实中的长颈鹿，而不是计算机中的对象，那么一只长颈鹿会走路，另一只则在吃叶子。
- en: '![Image](Images/f0103-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0103-01.jpg)'
- en: '**NOTE**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Functions defined for classes are actually called methods. The terms are almost
    interchangeable except that methods can only be called on objects of a class.
    Another way of saying this is that a method is associated with a class, but a
    function is not. Given they are almost the same, we’ll use the term function in
    this book.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*为类定义的函数实际上称为方法。两者几乎可以互换使用，唯一的区别是方法只能在类的对象上调用。另一种说法是，方法与类关联，而函数则不与类关联。由于它们几乎相同，因此在本书中我们将使用函数这个术语。*'
- en: Objects and Classes in Pictures
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图片中的对象和类
- en: 'Let’s try taking a more graphical approach to objects and classes and return
    to the turtle module we toyed with in [Chapter 4](ch04.xhtml#ch04). When we use
    turtle.Turtle(), Python creates an object of the Turtle class that is provided
    by the turtle module (similar to our reginald and harriet objects). We can create
    two Turtle objects (named Avery and Kate) just as we created two giraffes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试采用更具图形化的方法来理解对象和类，并回到我们在[第4章](ch04.xhtml#ch04)中玩过的海龟模块。当我们使用turtle.Turtle()时，Python会创建一个由海龟模块提供的Turtle类对象（类似于我们的reginald和harriet对象）。我们可以像创建两只长颈鹿一样，创建两个Turtle对象（分别命名为Avery和Kate）：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Each turtle object (avery and kate) is a member of the Turtle class.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每个海龟对象（avery和kate）都是Turtle类的成员。
- en: 'Now here’s where objects start to become powerful. Having created our Turtle
    objects, we can call functions on each, and they will draw independently. Try
    this code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，物体开始展现它们的强大之处。创建了我们的Turtle对象后，我们可以在每个对象上调用函数，它们将独立绘制。试试下面这段代码：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this series of instructions, we tell Avery to move forward 50 pixels, turn
    right 90 degrees, and move forward 20 pixels so she finishes facing downward.
    Remember that turtles always start off facing to the right.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一系列指令，我们告诉Avery向前移动50个像素，向右转90度，然后向前移动20个像素，最终面朝下。记住，海龟总是从面朝右方开始。
- en: Now it’s time to move Kate.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候移动Kate了。
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We tell Kate to turn left 90 degrees and then move forward 100 pixels so she
    ends facing up. So far, we have a line with arrowheads moving in two different
    directions, with the head of each arrow representing a different turtle object:
    Avery is pointing down, and Kate is facing up (see [Figure 8-3](ch08.xhtml#ch08fig03)).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让Kate向左转90度，然后向前移动100个像素，这样她最终面朝上。到目前为止，我们已经有了一条带箭头的线，箭头朝向两个不同的方向，每个箭头的头部表示一个不同的海龟对象：Avery指向下方，Kate面朝上（参见[图8-3](ch08.xhtml#ch08fig03)）。
- en: '![Image](Images/08fig03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/08fig03.jpg)'
- en: '*Figure 8-3: Kate and Avery*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-3：Kate和Avery*'
- en: 'Now let’s add another turtle, Jacob, and move him without bugging Kate or Avery:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再添加一只海龟Jacob，并在不干扰Kate或Avery的情况下移动它：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Image](Images/f0105-01.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0105-01.jpg)'
- en: First, we create a new Turtle object called jacob; then we turn him left 180
    degrees and move him forward 80 pixels. Our drawing with three turtles should
    look like [Figure 8-4](ch08.xhtml#ch08fig04).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个新的海龟对象，名为jacob；然后将它向左转180度并向前移动80个像素。我们使用三只海龟的绘图应当像[图8-4](ch08.xhtml#ch08fig04)那样。
- en: '![Image](Images/08fig04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/08fig04.jpg)'
- en: '*Figure 8-4: Kate and Avery and Jacob*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-4：Kate、Avery和Jacob*'
- en: Every time we call turtle.Turtle() to create a turtle, we add a new, independent
    object. Each object is still an instance of the Turtle class, and we can use the
    same functions on each object. But because we’re using objects, we can move each
    turtle independently. Like our independent Giraffe objects (Reginald and Harriet),
    Avery, Kate, and Jacob are independent Turtle objects. If we create a new object
    with the same variable name as an object we’ve already created, the old object
    won’t necessarily vanish.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们调用turtle.Turtle()来创建一只海龟时，我们都会添加一个新的独立对象。每个对象仍然是Turtle类的实例，我们可以在每个对象上使用相同的函数。但由于我们使用的是对象，我们可以独立地移动每只海龟。就像我们独立的长颈鹿对象（Reginald和Harriet）一样，Avery、Kate和Jacob是独立的Turtle对象。如果我们使用与已创建对象相同的变量名来创建新对象，旧的对象不会一定消失。
- en: Other Useful Features of Objects and Classes
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象和类的其他有用功能
- en: Classes and objects make it easy to group functions. They’re also really useful
    when we want to think about a program in smaller chunks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 类和对象使得组织函数变得更加简单。当我们想将一个程序分成更小的块来思考时，它们也非常有用。
- en: For example, consider a huge software application like a word processor or a
    3D computer game. It’s nearly impossible for most people to fully understand large
    programs like these because there’s so much code. But break these monster programs
    into smaller pieces, and each piece starts to make sense—as long as you know its
    programming language, of course!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个庞大的软件应用程序，比如文字处理器或3D电脑游戏。对于大多数人来说，完全理解像这样的庞大程序几乎是不可能的，因为代码量非常大。但是，如果将这些巨大的程序拆分成较小的部分，每一部分都会变得容易理解——当然，前提是你了解它的编程语言！
- en: When writing a large program, breaking it up also allows you to divide the work
    among other programmers. The most complicated programs (like your web browser)
    were written by many people, or teams of people, working on different parts at
    the same time around the world.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写大型程序时，将程序拆分开还允许你将工作分配给其他程序员。最复杂的程序（如你的网页浏览器）是由许多人或不同团队的人在全球范围内同时在不同部分工作时写成的。
- en: Imagine we want to expand some of the classes we’ve created in this chapter
    (Animal, Mammal, and Giraffe), but we have too much work to do, and our friends
    offer to help. We could divide the work of writing the code so that one person
    works on the Animal class, another on the Mammal class, and still another on the
    Giraffe class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想扩展本章中创建的一些类（**动物**、**哺乳动物**和**长颈鹿**），但是我们有太多工作要做，而我们的朋友们愿意提供帮助。我们可以将写代码的工作分配给不同的人，一个人负责**动物**类，另一个人负责**哺乳动物**类，另一个人负责**长颈鹿**类。
- en: '![Image](Images/f0106-01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0106-01.jpg)'
- en: Inherited Functions
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继承的函数
- en: You may realize that whoever ends up working on the Giraffe class is lucky,
    because any functions created by the people working on the Animal and Mammal classes
    can also be used by the Giraffe class. The Giraffe class *inherits* functions
    from the Mammal class, which, in turn, inherits functions from the Animal class.
    In other words, when we create a Giraffe object, we can use functions defined
    in the Giraffe class, as well as functions defined in the Mammal and Animal classes.
    And, by the same token, if we create a Mammal object, we can use functions defined
    in the Mammal class as well as its parent class, Animal.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会意识到，最终负责**长颈鹿**类的人很幸运，因为由负责**动物**类和**哺乳动物**类的人创建的任何函数，也可以被**长颈鹿**类使用。**长颈鹿**类*继承*了**哺乳动物**类的函数，而**哺乳动物**类又继承了**动物**类的函数。换句话说，当我们创建一个**长颈鹿**对象时，我们可以使用定义在**长颈鹿**类中的函数，也可以使用定义在**哺乳动物**和**动物**类中的函数。同样，如果我们创建一个**哺乳动物**对象，我们可以使用**哺乳动物**类以及它的父类**动物**类中定义的函数。
- en: Look at the relationships between the Animal, Mammal, and Giraffe classes again.
    The Animal class is the parent of the Mammal class, and Mammal is the parent of
    the Giraffe class ([Figure 8-5](ch08.xhtml#ch08fig05)).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看**动物**（Animal）、**哺乳动物**（Mammal）和**长颈鹿**（Giraffe）类之间的关系。**动物**类是**哺乳动物**类的父类，**哺乳动物**类是**长颈鹿**类的父类（[图
    8-5](ch08.xhtml#ch08fig05)）。
- en: '![Image](Images/08fig05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/08fig05.jpg)'
- en: '*Figure 8-5: Classes and inherited functions*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-5：类和继承的函数*'
- en: 'Even though reginald is an object of the Giraffe class, we can still call the
    move function we defined in the Animal class because functions defined in any
    parent class are available to its child classes:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 即使**Reginald**是**长颈鹿**类的对象，我们仍然可以调用在**动物**类中定义的**move**函数，因为在任何父类中定义的函数都可以在其子类中使用：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In fact, all the functions we defined in both the Animal and Mammal classes
    can be called from our reginald object because the functions are inherited:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们在**动物**类和**哺乳动物**类中定义的所有函数都可以从我们的**Reginald**对象中调用，因为这些函数是继承过来的：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this code, we create an object of the Giraffe class called reginald. When
    we call each function, it prints a message regardless of whether the function
    is defined in Giraffe or in a parent class.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们创建了一个名为**Reginald**的**长颈鹿**类对象。当我们调用每个函数时，无论该函数是定义在**长颈鹿**类中，还是在父类中，都将打印一条信息。
- en: Functions Calling Other Functions
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数调用其他函数
- en: 'When we call functions on an object, we use the object’s variable name. For
    example, we can call the move function on Reginald the giraffe like so:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在对象上调用函数时，我们使用对象的变量名。例如，我们可以像这样在长颈鹿**Reginald**上调用**move**函数：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To have a function in the Giraffe class call the move function, we’d use the
    self parameter. The self parameter is a way for one function in the class to call
    another function. For example, suppose we add a function called find_food to the
    Giraffe class:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要让长颈鹿类中的某个函数调用 `move` 函数，我们需要使用 `self` 参数。`self` 参数是类中一个函数调用另一个函数的一种方式。例如，假设我们向长颈鹿类中添加一个名为
    `find_food` 的函数：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We’ve created a function that combines two other functions, which is quite common
    in programming. Often, you’ll write a function that does something useful, which
    you can then use inside another function. (We’ll do this in [Chapter 11](ch11.xhtml#ch11),
    where we’ll write more complex functions to create a game.)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个将两个其他函数结合的函数，这在编程中是很常见的。通常，你会编写一个有用的函数，然后可以在另一个函数中使用它。（我们将在[第 11 章](ch11.xhtml#ch11)中做这件事，那时我们将编写更复杂的函数来创建一个游戏。）
- en: 'Let’s use self to add some functions to the Giraffe class:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `self` 向长颈鹿类添加一些函数：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We use the eat_food and move functions from the parent Animal class to define
    eat _leaves_from_trees and dance_a_jig for the Giraffe class, because these are
    inherited functions. By adding functions that call other functions, when we create
    objects of these classes, we can call a single function that does more than just
    one thing. See what happens when we call the dance_a_jig function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用来自父类 Animal 的 `eat_food` 和 `move` 函数来定义长颈鹿类的 `eat_leaves_from_trees` 和 `dance_a_jig`，因为这些是继承来的函数。通过添加调用其他函数的函数，当我们创建这些类的对象时，我们可以调用一个同时完成多项任务的函数。看看当我们调用
    `dance_a_jig` 函数时会发生什么：
- en: '![Image](Images/f0109-01.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0109-01.jpg)'
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this code, our giraffe moves four times (that is, the text moving is printed
    four times).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们的长颈鹿移动了四次（也就是说，移动的文字被打印了四次）。
- en: 'If we call the find_food function, we get three lines printed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调用 `find_food` 函数，打印出来的会有三行：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Initializing an Object
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化对象
- en: Sometimes when creating an object, we want to set some values (also called *properties*)
    for later use. When we *initialize* an object, we’re getting it ready to be used.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在创建对象时，我们希望为以后使用设置一些值（也叫做 *属性*）。当我们 *初始化* 一个对象时，我们就是在为它的后续使用做准备。
- en: For example, suppose we want to set the number of spots on our giraffe objects
    when they’re created (or initialized). To do this, we create an __init__ function
    (note the two underscore characters on each side, for a total of four). The init
    function sets the properties for an object when the object is first created. Python
    will automatically call this function when we create a new object. Here’s how
    to use it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们希望在创建（或初始化）长颈鹿对象时设置它们的斑点数。为此，我们创建一个 `__init__` 函数（注意每边有两个下划线字符，总共四个）。`__init__`
    函数在对象首次创建时设置对象的属性。Python 会在我们创建新对象时自动调用这个函数。以下是如何使用它。
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: First, we define the __init__ function with the self and spots parameters. Just
    like the other functions we’ve defined in the class, the __init__ function also
    needs to have self as the first parameter. Next, we set the spots parameter to
    an object variable (its property) called giraffe_spots by using the self parameter.
    You might think of this line of code as saying, “Take the value of the spots parameter
    and save it for later (using the giraffe_spots object variable).” Just as one
    function in a class can call another function using the self parameter, variables
    in the class are also accessed using self.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `self` 和 `spots` 参数定义 `__init__` 函数。与我们在类中定义的其他函数一样，`__init__` 函数也需要将
    `self` 作为第一个参数。接下来，我们通过 `self` 参数将 `spots` 参数设置为一个名为 `giraffe_spots` 的对象变量（即它的属性）。你可以把这一行代码理解为：“将
    `spots` 参数的值保存起来供以后使用（使用 `giraffe_spots` 对象变量）。”就像类中的一个函数可以使用 `self` 参数调用另一个函数一样，类中的变量也通过
    `self` 来访问。
- en: 'Next, if we create a couple of new giraffe objects (called ozwald and gertrude)
    and display their number of spots, you can see the initialization function in
    action:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果我们创建几个新的长颈鹿对象（分别命名为 ozwald 和 gertrude），并显示它们的斑点数，你可以看到初始化函数的作用：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: First, we create an instance of the Giraffe class using the parameter value
    100\. This has the effect of calling the __init__ function and using 100 for the
    value of the spots parameter. Next, we create another instance of the Giraffe
    class with a value of 150\. Lastly, we print the object variable giraffe_spots
    for each of our giraffe objects, and we see that the results are 100 and 150\.
    It worked!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用参数值 100 创建了一个长颈鹿类的实例。这样会调用 `__init__` 函数，并将 100 作为斑点参数的值。接着，我们创建了另一个斑点数为
    150 的长颈鹿类实例。最后，我们打印每个长颈鹿对象的 `giraffe_spots` 变量，结果是 100 和 150。它成功了！
- en: Remember, when we create an object of a class, such as ozwald in this example,
    we can refer to its variables or functions using the dot operator and the name
    of the variable or function we want to use (for example, ozwald.giraffe_spots).
    But when we’re creating functions inside a class, we refer to those same variables
    (and other functions) by using the self parameter (self.giraffe_spots).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当我们创建一个类的对象时，比如在这个例子中的ozwald，我们可以使用点操作符和我们想要使用的变量或函数的名称来引用它们（例如，ozwald.giraffe_spots）。但是当我们在类内创建函数时，我们通过使用self参数来引用这些相同的变量（以及其他函数）（例如self.giraffe_spots）。
- en: What You Learned
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, we used classes to create categories of things and made objects
    (or instances) of those classes. You learned how the child of a class inherits
    the functions of its parent, and that even though two objects are of the same
    class, they’re not necessarily clones. For example, two giraffe objects can have
    their own distinct number of spots.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们使用类来创建事物的类别，并创建了这些类的对象（或实例）。你学到了类的子类如何继承父类的函数，而且即使两个对象属于同一个类，它们也不一定是克隆。例如，两个长颈鹿对象可以有自己独特的斑点数。
- en: You learned how to call (or run) functions on an object and how object variables
    are a way of saving values in those objects. Lastly, we used the self parameter
    in functions to refer to other functions and variables. These concepts are fundamental
    to Python, and you’ll see them multiple times throughout the rest of this book.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何在对象上调用（或运行）函数，以及对象变量如何用来保存这些对象中的值。最后，我们在函数中使用了self参数来引用其他函数和变量。这些概念是Python的基础，你将在本书的其余部分多次看到它们。
- en: Programming Puzzles
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程难题
- en: Give the following examples a try to experiment with creating your own functions.
    The solutions can be found at *[http://python-for-kids.com](http://python-for-kids.com)*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下例子，实验一下创建你自己的函数。解决方案可以在*[http://python-for-kids.com](http://python-for-kids.com)*找到。
- en: '#1: The Giraffe Shuffle'
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#1：长颈鹿舞蹈'
- en: 'Add functions to the Giraffe class to move the giraffe’s left and right feet
    forward and backward. A function for moving the left foot forward might look like
    this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为长颈鹿类添加函数来移动长颈鹿的左右脚向前和向后。一个让左脚向前移动的函数可能如下所示：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then create a function called dance to teach our giraffes to dance (the function
    will call the four foot functions you’ve just created). The result of calling
    this new function will be a simple dance:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个名为dance的函数来教我们的长颈鹿跳舞（该函数将调用你刚才创建的四个脚步函数）。调用这个新函数的结果将是一个简单的舞蹈：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '#2: Turtle Pitchfork'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#2：乌龟叉形图'
- en: Create the following picture of a sideways pitchfork using four Turtle objects
    (the exact length of the lines isn’t important). Remember to import the turtle
    module first!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用四个Turtle对象创建以下侧向叉形图（线条的确切长度不重要）。记得首先导入turtle模块！
- en: '![Image](Images/f0112-01.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0112-01.jpg)'
- en: '#3: Two Small Spirals'
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#3：两个小螺旋'
- en: Create the following picture of two small spirals using two Turtle objects (again,
    the exact size of the spirals isn’t important).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个Turtle对象创建以下两个小螺旋图形（同样，螺旋的大小不重要）。
- en: '![Image](Images/f0112-02.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0112-02.jpg)'
- en: '#4: Four Small Spirals'
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#4：四个小螺旋'
- en: Let’s take the two spirals we created in the previous code and make a mirror
    image to create four spirals, which should look like the following image.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拿来在前面代码中创建的两个螺旋图形，并制作它们的镜像，创造出四个螺旋图形，应该看起来像以下的图像。
- en: '![Image](Images/f0113-01.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f0113-01.jpg)'
