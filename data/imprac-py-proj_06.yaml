- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: WRITING IN INVISIBLE INK**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**用隐形墨水书写**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'In the fall of 2012, the crime drama *Elementary* debuted on the CBS television
    network. A reimagining of the Sherlock Holmes mythos set in 21st-century New York,
    it starred Jonny Lee Miller as Holmes and Lucy Liu as his sidekick, Dr. Joan Watson.
    In a 2016 episode (“You’ve Got Me, Who’s Got You?”), Morland Holmes, Sherlock’s
    estranged father, hires Joan to find a mole in his organization. She quickly solves
    the case by discovering a Vigenère cipher in an email. But some fans of the show
    were dissatisfied: the Vigenère cipher is hardly subtle, so how could a man as
    intelligent as Morland Holmes miss finding it on his own?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2012 年秋季，犯罪剧情剧 *Elementary* 在 CBS 电视网首播。这部剧重新构思了 21 世纪纽约的 Sherlock Holmes 神话，主演
    Jonny Lee Miller 饰演 Holmes，Lucy Liu 饰演他的搭档 Joan Watson 博士。在 2016 年的一集（“你抓住了我，那谁抓住了你？”）中，Sherlock
    的疏远父亲 Morland Holmes 雇佣 Joan 查找他组织中的间谍。她迅速通过在一封电子邮件中发现 Vigenère 密码来破案。但一些剧迷对此不满：Vigenère
    密码并不隐蔽，像 Morland Holmes 这样聪明的人怎么可能自己没发现？
- en: In this project, you’ll reconcile this dilemma using steganography, but not
    with a null cipher as in [Chapter 5](ch05.xhtml#ch05). To hide this message, you’ll
    use a third-party module called `python-docx` that will allow you to conceal text
    by directly manipulating Microsoft Word documents using Python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用隐写术解决这个难题，但不会像在 [第 5 章](ch05.xhtml#ch05) 中那样使用空密码。为了隐藏这个消息，你将使用一个名为
    `python-docx` 的第三方模块，它允许你通过 Python 直接操作 Microsoft Word 文档来隐藏文本。
- en: '**Project #12: Hiding a Vigenère Cipher**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 #12：隐藏 Vigenère 密码**'
- en: In the *Elementary* episode, Chinese investors hire Morland Holmes’s consulting
    company to negotiate with the Colombian government for petroleum licenses and
    drilling rights. A year has passed, and at the last moment a competitor swoops
    in and clinches the deal, leaving the Chinese investors high and dry. Morland
    suspects betrayal by a member of his staff and asks Joan Watson to investigate
    alone. Joan identifies the mole by finding a Vigenère cipher in one of his emails.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Elementary* 的这一集里，中国投资者雇佣 Morland Holmes 的咨询公司与哥伦比亚政府谈判石油许可证和钻探权。一年过去了，最后一刻，一位竞争对手抢先达成了交易，留下中国投资者空手而归。Morland
    怀疑自己团队中的某个成员背叛了他，便让 Joan Watson 独自进行调查。Joan 通过在一封电子邮件中发现 Vigenère 密码找到了间谍。
- en: '**SPOILER ALERT**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**剧透警告**'
- en: '*The decrypted contents of the cipher are never mentioned, and the mole is
    murdered in a subsequent episode.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*解密后的内容从未提及，间谍在随后的剧集中被谋杀。*'
- en: The *Vigenère cipher*, also known as the unbreakable cipher, is arguably the
    most famous cipher of all time. Invented in the 16th century by the French scholar
    Blaise de Vigenère, it is a polyalphabetic substitution cipher that, in the most
    commonly used version, employs a single keyword. This keyword, such as *BAGGINS*,
    is printed repeatedly over the plaintext, as in the message shown in [Figure 6-1](ch06.xhtml#ch06fig1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*Vigenère 加密*，也被称为不可破译的密码，毫无疑问是有史以来最著名的加密方法。它由法国学者 Blaise de Vigenère 于 16
    世纪发明，是一种多表替换加密方法，在最常用的版本中，采用了一个单一的关键字。这个关键字，比如 *BAGGINS*，会反复打印在明文上，就像在 [图 6-1](ch06.xhtml#ch06fig1)
    中所示的消息一样。'
- en: '![image](../images/f0106-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-01.jpg)'
- en: '*Figure 6-1: A plaintext message with the Vigenère cipher keyword* BAGGINS
    *printed above*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：使用 Vigenère 加密关键字* BAGGINS *打印在上方的明文消息*'
- en: A table, or *tableau*, of the alphabet is then used to encrypt the message.
    [Figure 6-2](ch06.xhtml#ch06fig2) is an example of the first five rows of a Vigenère
    tableau. Notice how the alphabet shifts to the left by one letter with each row.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用字母表的表格，或称 *表格*，来加密消息。[图 6-2](ch06.xhtml#ch06fig2) 是 Vigenère 表格前五行的示例。请注意，每一行中的字母都会向左移动一个字母。
- en: '![image](../images/f0106-02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-02.jpg)'
- en: '*Figure 6-2: Portion of a Vigenère tableau*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2：Vigenère 表格的一部分*'
- en: The keyword letter above the plaintext letter determines which row to use for
    the encryption. For example, to encrypt the *s* in *speak*, note that the keyword
    letter above it is *B*. Go down to the B row and read across to where the plaintext
    *s* is at the top of the column. Use the *T* at the intersection for the ciphertext
    letter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 明文字母上方的关键字字母决定了用于加密的行。例如，要加密 *s* 在 *speak* 中，注意它上方的关键字字母是 *B*。往下找到 B 行，并横向阅读到明文
    *s* 位于列顶部的位置。使用交点处的 *T* 作为密文字母。
- en: '[Figure 6-3](ch06.xhtml#ch06fig3) shows an example of the full message encrypted
    with the Vigenère cipher. This kind of text would surely draw attention and become
    an object of scrutiny if it were visible in a document!'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-3](ch06.xhtml#ch06fig3) 显示了使用维吉尼亚密码加密的完整信息示例。如果这样的文本出现在文档中，肯定会引起注意，并成为审查的对象！'
- en: '![image](../images/f0107-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0107-01.jpg)'
- en: '*Figure 6-3: A message encrypted with the Vigenère cipher*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：使用维吉尼亚密码加密的信息*'
- en: The Vigenère cipher remained unbroken until the mid-19th century, when Charles
    Babbage, inventor of the precursor to the computer, realized that a short keyword
    used with a long message would result in repeating patterns that could reveal
    the length of the keyword and, ultimately, the key itself. The breaking of the
    cipher was a tremendous blow to professional cryptography, and no significant
    advancements were made in the field during the Victorian era of the original Holmes
    and Watson.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 维吉尼亚密码一直未被破解，直到 19 世纪中期，计算机前身的发明者查尔斯·巴贝奇意识到，使用一个短的关键字与长消息配合时，会导致重复的模式，这些模式可以揭示关键字的长度，并最终破解出密钥。维吉尼亚密码的破译对专业密码学是一次重创，维多利亚时代的原版《福尔摩斯与华生》时期，密码学领域没有取得显著进展。
- en: The presence of this cipher is what causes “suspension of disbelief” issues
    with the *Elementary* episode. Why would an outside consultant be needed to find
    such a clearly suspicious email? Let’s see if we can come up with a plausible
    explanation using Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种密码的存在也导致了 *Elementary* 这一集中的“难以置信”问题。为什么需要外部顾问来查找这么明显可疑的电子邮件？让我们看看是否能用 Python
    提供一个合理的解释。
- en: '**THE OBJECTIVE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: Assume you are the corporate mole in the episode and use Python to hide a secret
    message summarizing bid details within an official-looking text document. Start
    with an unencrypted message and finish with an encrypted version.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是这一集中的公司间谍，并使用 Python 将一个总结竞标细节的秘密信息隐藏在一个正式文本文件中。从未加密的信息开始，到加密版本为止。
- en: '**The Platform**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**平台**'
- en: Your program should work with ubiquitous word-processing software, as the output
    needs to be sharable between different corporations. This implies use of the Microsoft
    Office Suite for Windows or compatible versions for macOS or Linux. And restricting
    the output to a standard Word document makes hardware issues Microsoft’s responsibility!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序应当能够与广泛使用的文字处理软件兼容，因为输出文件需要在不同的公司之间共享。这意味着需要使用适用于 Windows 的 Microsoft Office
    套件，或兼容的 macOS 或 Linux 版本。将输出限制为标准的 Word 文档也意味着硬件问题由 Microsoft 承担！
- en: Accordingly, this project was developed with Word 2016 for Windows, and the
    results checked with Word for Mac v16.16.2\. If you don’t have a license for Word,
    you can use the free Microsoft Office Online app, available at *[https://products.office.com/en-us/office-online](https://products.office.com/en-us/office-online)*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本项目是在 Windows 版 Word 2016 上开发的，结果通过 Word for Mac v16.16.2 进行了检查。如果你没有 Word
    的许可证，可以使用免费的 Microsoft Office Online 应用，访问 *[https://products.office.com/en-us/office-online](https://products.office.com/en-us/office-online)*。
- en: If you currently use alternatives to Word, like LibreOffice Writer or OpenOffice
    Writer, you can open and view the Word (*.docx*) files used and produced in this
    project; however, the hidden message will most likely be compromised, as discussed
    in “[Detecting the Hidden Message](ch06.xhtml#lev143)” on [page 119](ch06.xhtml#page_119).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你目前使用 Word 的替代软件，如 LibreOffice Writer 或 OpenOffice Writer，你仍然可以打开并查看本项目中使用和生成的
    Word (*.docx*) 文件；然而，正如在 “[检测隐藏信息](ch06.xhtml#lev143)” 中所讨论的，隐藏的信息很可能会被破坏，详见 [第119页](ch06.xhtml#page_119)。
- en: '**The Strategy**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**策略**'
- en: You’re an accountant with a beginner’s knowledge of Python, and you work for
    a very intelligent and suspicious man. The project you work on is highly proprietary,
    with controls—such as email filters—to maintain confidentiality. And if you manage
    to sneak out a message, a thorough investigation will surely follow. So, you need
    to hide a clearly suspicious message in an email, either directly or as an attachment,
    yet evade initial detection and later internal audits.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一名具有初级 Python 知识的会计师，工作在一个非常聪明且多疑的人手下。你从事的项目具有高度保密性，采用了诸如电子邮件过滤器等控制措施来保持机密性。如果你成功地将信息泄露出去，必定会进行彻底的调查。因此，你需要在电子邮件中隐藏一条明显可疑的信息，无论是直接包含在邮件中还是作为附件，且要避免初步检测和后续的内部审计。
- en: 'Here are some constraints:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些约束条件：
- en: You can’t send the message directly to the competing corporation, only to an
    intermediary.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能直接将信息发送到竞争公司，只能通过中介发送。
- en: You need to scramble the message to evade the email filters that will search
    for keywords.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将消息打乱，以避开搜索关键词的电子邮件过滤器。
- en: You need to hide the encrypted message from sight so as not to arouse suspicion.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将加密信息隐藏起来，以免引起怀疑。
- en: The intermediary would be easy to set up, and free encryption sites are easy
    to find on the internet—but the last item is more problematic.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 中介设置起来很容易，而且互联网上有很多免费的加密网站——但最后一项就更有问题了。
- en: Steganography is the answer, but as you saw in the previous chapter, hiding
    even a short message in a null cipher is no easy task. Alternative techniques
    involve shifting lines of text vertically or words horizontally by small amounts,
    changing the length of letters, or using the file’s metadata—but you’re an accountant
    with limited knowledge of Python and even less time. If only there were an easy
    way, like invisible ink in the old days.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 隐写术是答案，但正如你在上一章中看到的，将一条简短的信息隐藏在空白密码中并不是一项简单的任务。替代技术包括将文本行垂直或单词水平地微调，改变字母的长度，或使用文件的元数据——但你是一个会计师，Python知识有限，时间更少。如果能像过去的隐形墨水那样有一种简单的方法该多好。
- en: '***Creating Invisible Ink***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建隐形墨水***'
- en: Invisible ink, in this age of electronic ink, might be just crazy enough to
    work! An invisible font would easily foil a visual perusal of online documents
    and won’t even exist in paper printouts. Since the contents would be encrypted,
    digital filters looking for keywords like *bid* or the Spanish names of the producing
    oil basins would find nothing. And best of all, invisible ink is easy to use—just
    set the foreground text to the background color.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电子墨水的时代，隐形墨水或许正好够疯狂，足以奏效！一种隐形字体可以轻松地阻止在线文档的视觉浏览，并且在纸质打印件中也根本不存在。由于内容被加密，数字过滤器在寻找类似*竞标*或生产油田的西班牙名字时将什么也找不到。最棒的是，隐形墨水使用起来非常简单——只需将前景文本设置为背景颜色。
- en: Formatting text and changing its color requires a word processor like Microsoft
    Word. To make invisible electronic ink in Word, you just need to select a character,
    word, or line and set the font color to white. The recipient of the message would
    then need to select the whole document and use the Highlighter tool (see [Figure
    6-4](ch06.xhtml#ch06fig4)) to paint the selected text black, thus concealing the
    standard black letters and bringing the hidden white letters into view.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化文本和改变颜色需要使用像Microsoft Word这样的文字处理器。要在Word中制作隐形电子墨水，你只需要选择一个字符、单词或行，并将字体颜色设置为白色。接收者然后需要选择整个文档，并使用高亮工具（参见[图6-4](ch06.xhtml#ch06fig4)）将选定文本涂成黑色，从而隐藏标准的黑色字母并将隐藏的白色字母显现出来。
- en: '![image](../images/f0108-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0108-01.jpg)'
- en: '*Figure 6-4: The Text Highlight Color tool in Word 2016*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-4：Word 2016中的文本高亮颜色工具*'
- en: Just selecting the document in Word won’t reveal the white text ([Figure 6-5](ch06.xhtml#ch06fig5)),
    so someone would have to be very suspicious indeed to find these hidden messages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在Word中选择文档并不会显示白色文本（[图6-5](ch06.xhtml#ch06fig5)），因此，除非某人非常怀疑，否则很难发现这些隐藏的消息。
- en: '![image](../images/f0109-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0109-01.jpg)'
- en: '*Figure 6-5: Top: a portion of a Word document with the fake message visible;
    middle: the document selected with CTRL-A; bottom: the real message revealed using
    the Highlighter tool with the highlight color set to black*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-5：上图：Word文档中可见的假消息的一部分；中图：使用CTRL-A选中的文档；下图：使用高亮工具将高亮颜色设置为黑色，揭示真实消息*'
- en: 'Of course, you can accomplish all this in a word processor alone, but there
    are two cases where a Pythonic approach is preferable: 1) when you have to encrypt
    a long message and don’t want to manually insert and hide all the lines and 2)
    when you need to send more than a few messages. As you’ll see, a short Python
    program will greatly simplify the process!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以仅通过文字处理器来完成所有这些工作，但有两种情况采用Python方法更为合适：1）当你需要加密一条长消息，不想手动插入并隐藏所有行时，2）当你需要发送多条消息时。正如你将看到的，简短的Python程序将大大简化这个过程！
- en: '**Considering Font Types, Kerning, and Tracking**'
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**考虑字体类型、字距和字形调整**'
- en: Placing the invisible text is a key design decision. One option is to use the
    spaces between the visible words of the fake message, but this could trigger spacing-related
    issues that would make the final product look suspicious.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 放置隐形文本是一个关键的设计决策。一个选择是使用假消息中可见单词之间的空格，但这可能会触发与间距相关的问题，使得最终产品看起来可疑。
- en: '*Proportional fonts* use variable character widths to improve readability.
    Example fonts are Arial and Times New Roman. *Monospace fonts* use a constant
    character width to support the alignment of text and the recognition of individual
    characters, especially thin ones such as the ( or { characters. As a result, monospace
    fonts are popular in programming interfaces. Example fonts are Consolas and Courier
    New.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*比例字体*使用可变的字符宽度来提高可读性。示例字体有Arial和Times New Roman。*等宽字体*则使用固定的字符宽度，以便支持文本对齐和识别单独的字符，特别是像（或{这样的细小字符。因此，等宽字体在编程界面中非常受欢迎。示例字体有Consolas和Courier
    New。'
- en: '*Kerning* is a typographical process for adjusting the spacing and overlap
    between individual character glyphs in order to improve their visual appeal. A
    process called *tracking* is used to adjust the character spacing across entire
    lines or blocks of text for the same purpose. These adjustments aid legibility
    and readability, ensuring that letters aren’t so close together that they’re indistinguishable
    or so far apart that words aren’t recognizable. Note that we read words, not letters.
    If you doubt it, read this: peopl raed wrds nt lttrs. Of corase, contxt hlps.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*字距调整*是一个排版过程，用来调整单个字符字形之间的间距和重叠，以提高它们的视觉效果。*字间距调整*（tracking）用于调整整行或整块文本的字符间距，目的相同。这些调整有助于可读性，确保字母之间既不会过于紧密以至于无法区分，也不会过于分散以至于单词无法识别。请注意，我们是读单词，而不是字母。如果你有疑问，试试这样读：peopl
    raed wrds nt lttrs. 当然，语境也有帮助。'
- en: 'Kerning between pairs of letters is performed first, followed by tracking,
    during which the relative kerning of the letter pairs is preserved. As mentioned
    earlier, these variable widths and automatic corrections can cause problems when
    you’re trying to hide characters between words that use proportional fonts:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 字母对之间的字距调整首先进行，然后是字间距调整（tracking），在此过程中，字母对的相对字距得以保持。如前所述，这些可变宽度和自动修正可能会导致问题，尤其是在你试图隐藏使用比例字体的单词之间的字符时：
- en: '| To a great mind nothing is little. | *Proportional font with no hidden letters*
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 伟大的思想没有什么是微不足道的。 | *比例字体，没有隐藏字母* |'
- en: '| To a great mind nothing is little. | *Proportional font with hidden letters
    between words* |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 伟大的思想没有什么是微不足道的。 | *比例字体，单词之间隐藏了字母* |'
- en: '| To$a3great.mind2nothingKis little. | *Hidden letters revealed ($3.2K)* |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| To$a3great.mind2nothingKis little. | *隐藏字母揭示（$3.2K）* |'
- en: '|  |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: '| `To a great mind nothing is little.` | *Monospace font with no hidden letters*
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `伟大的思想没有什么是微不足道的。` | *等宽字体，没有隐藏字母* |'
- en: '| `To a great mind nothing is little.` | *Monospace font with hidden letters
    between words.* |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `伟大的思想没有什么是微不足道的。` | *等宽字体，单词之间隐藏了字母。* |'
- en: '| `To``$``a``3``great``.``mind``2``nothing``K``is little.` | *Hidden letters
    revealed ($3.2K)* |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `To``$``a``3``great``.``mind``2``nothing``K``is little.` | *隐藏字母揭示（$3.2K）*
    |'
- en: If you use a monospace font, the consistent spacing provides a convenient hiding
    place. But since professional correspondence is more likely to use proportional
    fonts, the invisible ink technique should focus on the more easily controlled
    spaces between lines.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用等宽字体，一致的间距提供了一个方便的隐藏位置。但是，由于专业信件更可能使用比例字体，因此隐形墨水技术应该集中在更易控制的行间空隙上。
- en: Using empty lines between paragraphs is the easiest method to program and to
    read, and it shouldn’t require a long fake message because you can summarize the
    salient points of a bid succinctly. This is important since you don’t want empty
    pages appended to your visible fake message. Consequently, the footprint for your
    hidden message should be smaller than for your fake one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在段落之间使用空行是最简单的编程和阅读方式，而且它不需要很长的虚假消息，因为你可以简明扼要地总结一个提案的要点。这一点非常重要，因为你不希望在可见的虚假消息后附加空白页。因此，你的隐藏消息的占用空间应小于虚假消息的占用空间。
- en: '**Avoiding Issues**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**避免问题**'
- en: When you’re developing software, a good question to ask repeatedly is “How can
    the user screw this up?” One thing that can go wrong here is that the encryption
    process will change the letters in your hidden message so that kerning and tracking
    adjustments may push a word past the line break, causing an automatic line wrap.
    This will result in uneven and suspicious-looking spaces between paragraphs in
    the fake message. One way to avoid this is to press ENTER a little early as you’re
    typing in each line of the real message. This will leave some space at the end
    of the line to accommodate changes due to encryption. Of course, you’ll still
    need to verify the results. Assuming code works is as risky as assuming James
    Bond is dead!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发软件时，反复问自己一个好问题是：“用户怎么会把这个搞砸？”这里可能出现的问题之一是加密过程会改变隐藏信息中的字母，导致字距和字形调整可能会使某个单词越过换行符，从而导致自动换行。这会导致伪造信息中的段落之间出现不均匀和可疑的空隙。避免这种情况的一种方法是在输入真实信息的每一行时稍微提前按下
    ENTER 键，这样可以在行尾留出一些空白空间，以便适应加密过程中可能发生的变化。当然，你仍然需要验证结果。假设代码能正常工作就像假设詹姆斯·邦德已经死了一样危险！
- en: '***Manipulating Word Documents with python-docx***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 python-docx 操控 Word 文档***'
- en: A free third-party module called `python-docx` allows Python to manipulate Microsoft
    Word (.*docx*) files. To download and install the third-party modules mentioned
    in this book, you’ll use the Preferred Installer Program (pip), a package management
    system that makes it easy to install Python-based software. For Python 3 on Windows
    and macOS, versions 3.4 and later come with pip preinstalled; for Python 2, pip
    preinstallation starts with version 2.7.9\. Linux users may have to install pip
    separately. If you find you need to install or upgrade pip, see the instructions
    at *[https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/)*
    or do an online search on installing pip on your particular operating system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 `python-docx` 的免费第三方模块允许 Python 操作 Microsoft Word（.*docx*）文件。要下载和安装本书中提到的第三方模块，你将使用首选安装程序（pip），这是一种包管理系统，可以轻松地安装基于
    Python 的软件。对于 Windows 和 macOS 上的 Python 3，版本 3.4 及更高版本自带 pip；对于 Python 2，pip 的预安装从版本
    2.7.9 开始。Linux 用户可能需要单独安装 pip。如果你发现需要安装或升级 pip，可以参照 *[https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/)*
    上的说明，或者在网上搜索如何在特定操作系统上安装 pip。
- en: With the pip tool, you can install `python-docx` by simply running pip install
    python-docx in a command, PowerShell, or terminal window, depending on your operating
    system. Online instructions for `python-docx` are available at *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip 工具，你可以通过在命令行、PowerShell 或终端窗口中运行 `pip install python-docx` 来安装 `python-docx`，具体取决于你的操作系统。关于
    `python-docx` 的在线说明可以在 *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    上找到。
- en: 'For this project, you need to understand the `paragraph` and `run` objects.
    The `python-docx` module organizes data types using three objects in the following
    hierarchy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要理解 `paragraph` 和 `run` 对象。`python-docx` 模块通过以下层次结构组织数据类型：
- en: '`document`: The whole document with a list of `paragraph` objects'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document`：包含多个 `paragraph` 对象的整个文档'
- en: '`paragraph`: A block of text separated by the use of the ENTER key in Word;
    contains a list of `run` object(s)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paragraph`：通过在 Word 中按 ENTER 键分隔的文本块；包含一个或多个 `run` 对象'
- en: '`run`: A connected string of text with the same *style*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：具有相同 *样式* 的一串连接的文本'
- en: 'A `paragraph` is considered a *block-level* object, which `python-docx` defines
    as follows: “a block-level item flows the text it contains between its left and
    right edges, adding an additional line each time the text extends beyond its right
    boundary. For a `paragraph` object, the boundaries are generally the page margins,
    but they can also be column boundaries if the page is laid out in columns, or
    cell boundaries if the `paragraph` occurs inside a table cell. A table is also
    a block-level object.”'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`paragraph` 被认为是一个 *块级* 对象，`python-docx` 对其的定义如下：“一个块级项目将其包含的文本流动到其左右边缘之间，每当文本超出右边界时，都会增加一行。对于
    `paragraph` 对象，边界通常是页面边距，但如果页面布局为列格式，边界也可以是列边界；如果 `paragraph` 位于表格单元格内，边界则是单元格边界。表格也是一个块级对象。”'
- en: A `paragraph` object has a variety of attributes that specify its placement
    within a container—typically a page—and the way it divides its contents into separate
    lines. You can access the formatting attributes of a `paragraph` with the `ParagraphFormat`
    object available through the `ParagraphFormat` attribute of the `paragraph`, and
    you can set all the `paragraph` attributes using a *paragraph style grouping*
    or apply them directly to a `paragraph`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`paragraph` 对象具有多种属性，用于指定其在容器中的位置——通常是页面——以及它如何将内容分割成单独的行。你可以通过 `paragraph`
    的 `ParagraphFormat` 属性访问 `paragraph` 的格式属性，并且可以使用 *段落样式分组* 来设置所有 `paragraph` 属性，或者直接应用它们到
    `paragraph`。'
- en: A `run` is an *inline-level* object that occurs within paragraphs or other block-level
    objects. A `run` object has a read-only `font` attribute providing access to a
    `font` object. A `font` object provides attributes for getting and setting the
    character formatting for that `run`. You’ll need this feature for setting your
    hidden message’s text color to white.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`run` 是一种*内联级别*的对象，出现在段落或其他块级对象中。`run` 对象具有只读的 `font` 属性，可以访问一个 `font` 对象。`font`
    对象提供了用于获取和设置该 `run` 字符格式的属性。你需要这个功能来将隐藏消息的文本颜色设置为白色。'
- en: '*Style* refers to a collection of attributes in Word for paragraphs and characters
    (`run` objects) or a combination of both. Style includes familiar attributes such
    as font, color, indention, line spacing, and so on. You may have noticed groupings
    of these displayed in the Styles pane on Word’s Home ribbon (see [Figure 6-6](ch06.xhtml#ch06fig6)).
    Any change in style—to even a single letter—requires the creation of a new `run`
    object. Currently, only styles that are in the opened *.docx* file are available.
    This may change in future versions of `python-docx`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*样式*是指 Word 中段落和字符（`run` 对象）或两者组合的属性集合。样式包括常见的属性，如字体、颜色、缩进、行距等。你可能注意到这些属性在
    Word 的“开始”功能区的样式窗格中有分组显示（见 [图 6-6](ch06.xhtml#ch06fig6)）。任何样式的变化——甚至是一个字母——都需要创建一个新的
    `run` 对象。目前，只有在打开的 *.docx* 文件中存在的样式才可用。这一情况可能会在未来的 `python-docx` 版本中有所变化。'
- en: '![image](../images/f0111-01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0111-01.jpg)'
- en: '*Figure 6-6: The Styles pane in Microsoft Word 2016*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-6：Microsoft Word 2016 中的样式窗格*'
- en: You can find full documentation on the use of styles in `python-docx` at *[http://python-docx.readthedocs.io/en/latest/user/styles-using.html](http://python-docx.readthedocs.io/en/latest/user/styles-using.html)*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `python-docx` 中找到完整的样式使用文档，地址是 *[http://python-docx.readthedocs.io/en/latest/user/styles-using.html](http://python-docx.readthedocs.io/en/latest/user/styles-using.html)*。
- en: 'Here’s an example of paragraphs and runs as `python-docx` sees them:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 `python-docx` 看到的段落和 `run` 的示例：
- en: '*I am a single paragraph of one run because all my text is the same style.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是一个包含单个 `run` 的段落，因为我的所有文本都是相同的样式。*'
- en: '*I am a single paragraph with two runs. **I am the second run because my style
    changed to bold.***'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是一个包含两个 `run` 的段落。**我是第二个 `run`，因为我的样式变成了粗体。***'
- en: '*I am a single paragraph with three runs. **I am the second run because my
    style changed to bold. The third run is my last** word.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是一个包含三个 `run` 的段落。**我是第二个 `run`，因为我的样式变成了粗体。第三个 `run` 是我最后一个**单词。*'
- en: If any of this seems unclear, don’t fret. You don’t need to know `python-docx`
    in any detail. As with any piece of code, you mainly need to know *what you want
    to do*. An online search should yield plenty of useful suggestions and complete
    samples of code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些内容有任何不清楚的地方，别担心。你不需要详细了解 `python-docx`。就像任何一段代码，你主要需要知道*你想做什么*。在线搜索应该能找到大量有用的建议和完整的代码示例。
- en: '**NOTE**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For this to work smoothly, don’t change styles within the real (hidden) message
    and make sure you end every line in a hard return by manually pressing the ENTER
    key. Unfortunately, Word doesn’t have a special character for soft returns caused
    by automatic word wrapping. So, you can’t go into an existing Word document with
    automatic line breaks and use Find and Replace to change them all to hard returns.
    Such is the life of a mole.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了使这一切顺利进行，不要更改真实（隐藏）消息中的样式，并确保每行的结尾都通过手动按下 ENTER 键来强制换行。不幸的是，Word 没有自动换行所产生的软回车的特殊字符。因此，你无法进入一个已有自动换行的
    Word 文档，并使用查找和替换将它们全部转换为强制回车。生活就是这样。*'
- en: '***Downloading the Assets***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***下载资源***'
- en: 'The external files you’ll need are downloadable from *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    and should be saved in the same folder as the code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的外部文件可以从 *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    下载，并应保存在与代码相同的文件夹中：
- en: '***template.docx*** An empty Word doc formatted with official Holmes Corporation
    styles, fonts, and margins'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '***template.docx*** 一份格式化为正式Holmes Corporation样式、字体和边距的空白Word文档'
- en: '***fakeMessage.docx*** The fake message, without letterhead and date, in a
    Word document'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '***fakeMessage.docx*** 没有信头和日期的假消息，格式为Word文档'
- en: '***realMessage.docx*** The real message in plaintext, without letterhead and
    date, in a Word document'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '***realMessage.docx*** 真实消息的明文，未加信头和日期，格式为Word文档'
- en: '***realMessage_Vig.docx*** The real message encrypted with the Vigenère cipher'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '***realMessage_Vig.docx*** 使用维吉尼亚密码加密的真实消息'
- en: '***example_template_prep.docx*** An example of the fake message used to create
    the template document (the program doesn’t require this file to run)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '***example_template_prep.docx*** 用于创建模板文档的假消息示例（程序运行时不需要此文件）'
- en: '**NOTE**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re using Word 2016, an easy way to make a blank template file is to
    write the fake message (including letterhead) and save the file. Then delete all
    the text and save the file again with a different name. When you assign this blank
    file to a variable with* python-docx*, all the existing styles will be retained.
    Of course, you could use a template file with the letterhead already included,
    but for the purpose of learning more about* python-docx*, we’ll build the letterhead
    here using Python.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的是Word 2016，制作空白模板文件的简单方法是编写假消息（包括信头）并保存文件。然后删除所有文本，再次保存文件并更改文件名。当你使用*
    python-docx *将这个空白文件分配给一个变量时，所有现有样式将被保留。当然，你也可以使用已经包含信头的模板文件，但为了更好地学习* python-docx*，我们将在这里使用Python构建信头。*'
- en: Take a moment to view these first four documents in Word. These files comprise
    the inputs to the *elementary_ink.py* program. The fake and real messages—the
    second and third items listed—are also shown in [Figures 6-7](ch06.xhtml#ch06fig7)
    and [6-8](ch06.xhtml#ch06fig8).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间查看这前四个文档在Word中的样子。这些文件构成了*elementary_ink.py*程序的输入。假消息和真实消息——第二和第三项——也展示在[图6-7](ch06.xhtml#ch06fig7)和[6-8](ch06.xhtml#ch06fig8)中。
- en: '![image](../images/f0113-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0113-01.jpg)'
- en: '*Figure 6-7: The “fake” text in the* fakeMessage.docx *file*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-7：* fakeMessage.docx *文件中的“假”文本*'
- en: '![image](../images/f0113-02.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0113-02.jpg)'
- en: '*Figure 6-8: The real message in the* realMessage.docx *file*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-8：* realMessage.docx *文件中的真实消息*'
- en: Note that the real message contains some numbers and special characters. These
    won’t be encrypted with the Vigenère tableau we’ll use, and I’ve included them
    to make that point. Ideally, they would be spelled out (for example, “three” for
    “3” and “percent” for “%”) for maximum secrecy when we add the Vigenère cipher
    later.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，真实消息包含一些数字和特殊字符。这些字符不会被我们将使用的维吉尼亚表格加密，我特意加入它们以强调这一点。理想情况下，当我们稍后添加维吉尼亚密码时，这些数字和字符应该被拼写出来（例如，将“3”拼写为“三”，将“%”拼写为“百分比”），以确保最大程度的保密。
- en: '**The Pseudocode**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**伪代码**'
- en: The following pseudocode describes how to load the two messages and the template
    document, interleave and hide the real message in blank lines using a white font,
    and then save the hybrid message.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下伪代码描述了如何加载两个消息和模板文档，将它们交织在一起并使用白色字体将真实消息隐藏在空行中，然后保存合成的消息。
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**The Code**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码**'
- en: The *elementary_ink.py* program in [Listing 6-1](ch06.xhtml#ch06list1) loads
    the real message, the fake message, and the empty template document. It hides
    the real message in the blank lines of the fake message using a white font, and
    then saves the hybrid message as an innocuous and professional-looking piece of
    correspondence that can be attached to an email. You can download the code from
    *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 6-1](ch06.xhtml#ch06list1)中的*elementary_ink.py*程序加载了真实消息、假消息和空白模板文档。它使用白色字体将真实消息隐藏在假消息的空行中，然后将合成的消息保存为一份无害且专业的信函，可以附加到电子邮件中。你可以从*
    [https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*下载代码。'
- en: '***Importing python-docx, Creating Lists, and Adding a Letterhead***'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***导入python-docx，创建列表并添加信头***'
- en: '[Listing 6-1](ch06.xhtml#ch06list1) imports `python-docx`, turns the lines
    of text in the fake and real messages into list items, loads the template document
    that sets the styles, and adds a letterhead.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 6-1](ch06.xhtml#ch06list1)导入`python-docx`，将假消息和真实消息中的文本行转换为列表项，加载设置样式的模板文档，并添加信头。'
- en: '*elementary_ink.py,* part 1'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*elementary_ink.py，* 第一部分'
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 6-1: Imports* python-docx*, loads important* .docx *files, and adds
    a letterhead*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-1：导入* python-docx*，加载重要的* .docx *文件，并添加信头*'
- en: After importing the `docx` module—not as “python-docx”—use `docx.shared` to
    gain access to the color (`RGBColor`) and length (`Pt`) objects in the `docx`
    module ➊. These will allow you to change the font color and set the spacing between
    lines. The next two code blocks load the fake ➋ and real ➌ message Word documents
    as lists. Where the ENTER key was pressed in each Word document determines what
    items will be in these lists. For the real message to be hidden, remove any blank
    lines so that your message will be as short as possible ➍. Now you can use list
    indexes to merge the two messages and keep track of which is which.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `docx` 模块后——而不是“python-docx”——使用 `docx.shared` 来访问 `docx` 模块中的颜色（`RGBColor`）和长度（`Pt`）对象
    ➊。这些将允许你更改字体颜色并设置行间距。接下来的两个代码块将假消息 ➋ 和真实消息 ➌ 的 Word 文档加载为列表。在每个 Word 文档中按下 ENTER
    键的位置决定了这些列表中的项。为了隐藏真实消息，删除任何空白行，使得消息尽可能短 ➍。现在，你可以使用列表索引来合并这两条消息，并跟踪它们各自的来源。
- en: Next, load the template document that contains the preestablished styles, fonts,
    and margins ➎. The `docx` module will write to this variable and ultimately save
    it as the final document.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，加载包含预先设置样式、字体和页边距的模板文档 ➎。`docx` 模块将写入这个变量，并最终将其保存为最终文档。
- en: With the inputs loaded and prepped, format the letterhead of the final document
    to match that of the Holmes Corporation ➏. The `add_heading()` function adds a
    heading style paragraph with text and integer arguments. Integer `0` designates
    the highest-level heading, or Title style, inherited from the template document.
    The subtitle is formatted with `1`, the next heading style available, and is center
    aligned, again with the integer `1` (`0` = left justified, `2` = right justified).
    Note that, when you add the date, you don’t need to supply an integer ➐. When
    you don’t provide an argument, the default is to inherit from the existing style
    hierarchy, which in the template is left justified. The other statements in this
    block just add blank lines.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 输入准备好之后，格式化最终文档的信头，使其与 Holmes Corporation 的信头一致 ➏。`add_heading()` 函数添加一个带有文本和整数参数的标题样式段落。整数
    `0` 表示最高级别的标题，或从模板文档继承的标题样式。副标题使用 `1` 格式化，这是下一个可用的标题样式，并且居中对齐，再次使用整数 `1`（`0` =
    左对齐，`2` = 右对齐）。请注意，当你添加日期时，不需要提供整数 ➐。当没有提供参数时，默认情况下继承现有样式层级，在模板中是左对齐的。此代码块中的其他语句只是添加空行。
- en: '***Formatting and Interleaving the Messages***'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***格式化与交错消息***'
- en: '[Listing 6-2](ch06.xhtml#ch06list2) does the real work, formatting the spacing
    between lines and interleaving the messages.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-2](ch06.xhtml#ch06list2) 进行实际的工作，格式化行间距并交错消息。'
- en: '*elementary_ink.py,* part 2'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*elementary_ink.py,* 第二部分'
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 6-2: Formats paragraphs and interleaves lines of fake and real messages*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-2：格式化段落并交错假消息与真实消息的行*'
- en: Define a function that formats the spacing between paragraphs using `python-docx`’s
    `paragraph_format` attribute ➊. Line spacing before and after the hidden line
    is set to `0` points to ensure that the output doesn’t have suspiciously large
    gaps between paragraphs, like the ones on the left-hand side of [Figure 6-9](ch06.xhtml#ch06fig9).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个函数，使用 `python-docx` 的 `paragraph_format` 属性格式化段落之间的间距 ➊。隐藏行之前和之后的行间距设置为
    `0` 点，以确保输出中段落之间没有可疑的大间隙，如 [图6-9](ch06.xhtml#ch06fig9) 左侧的间隙。
- en: '![image](../images/f0116-01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0116-01.jpg)'
- en: '*Figure 6-9: Fake message line spacing without* python-docx *paragraph formatting
    (left) vs. with formatting (right)*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-9：没有* python-docx *段落格式化的假消息行间距（左）与有格式化的行间距（右）*'
- en: Next, define the working space by getting the length of the list that holds
    the real message ➋. Remember that the hidden real message needs to be shorter
    than the visible fake message so that there are sufficient blank lines to hold
    it. Follow this by initiating a counter. The program will use it to keep track
    of which line (list item) it’s currently processing in the real message.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过获取存储真实消息的列表的长度来定义工作空间 ➋。记住，隐藏的真实消息需要比可见的假消息短，以便有足够的空白行容纳它。然后启动一个计数器，程序将用它来跟踪当前正在处理的真实消息中的行（列表项）。
- en: 'Since the list made from the fake message is the longest and sets the dimensional
    space for the real message, loop through the fake message using two conditionals:
    1) whether you’ve reached the end of the real message and 2) whether a line in
    the fake list is blank ➌. If there are still real message lines and the fake message
    line is blank, use `count_real` as an index for `real_list` and use `python-docx`
    to add it to the document ➍.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于从伪造信息创建的列表最长，并为真实信息设置了维度空间，因此通过两个条件循环遍历伪造信息：1）是否已达到真实信息的结尾，2）伪造列表中的一行是否为空
    ➌。如果仍有真实信息行，而伪造信息行为空，则使用`count_real`作为`real_list`的索引，并使用`python-docx`将其添加到文档中
    ➍。
- en: Get the index of the line you just added by taking the length of `doc.paragraphs`
    and subtracting 1 ➎. Then use this index to set the real message line to a `run`
    object (it will be the first `run` item `[0]` in the list, as the real message
    uses a single style) and set its font color to white ➏. Since the program has
    now added a line from the real list in this block, the `count_real` counter advances
    by 1 ➐.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过获取`doc.paragraphs`的长度并减去1 ➎，获取你刚刚添加的行的索引。然后使用此索引将真实信息行设置为一个`run`对象（它将是列表中的第一个`run`项`[0]`，因为真实信息使用单一的样式），并将其字体颜色设置为白色
    ➏。由于程序现在已经在此块中从真实列表中添加了一行，`count_real`计数器将增加1 ➐。
- en: The subsequent `else` block addresses the case where the line chosen from the
    fake list in the `for` loop isn’t empty. In this case, the fake message line is
    added directly to the paragraph ➑. Finish the `for` loop by calling the line spacing
    function, `set_spacing()` ➒.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的`else`块处理从伪造列表中选择的行不是空的情况。在这种情况下，伪造信息行将直接添加到段落中 ➑。通过调用行间距函数`set_spacing()`
    ➒，完成`for`循环。
- en: Once the length of the real message has been exceeded, the `for` loop will continue
    to add the remainder of the fake message—in this case, Mr. Kurtz’s signature info—and
    save the document as a Word *.docx* file in the final line ➓. Of course, in real
    life, you’d want to use a less suspicious filename than *ciphertext_message_letterhead.docx*!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦超过了真实信息的长度，`for`循环将继续添加伪造信息的剩余部分——在此案例中是Kurtz先生的签名信息——并将文档作为Word *.docx* 文件保存到最后一行
    ➓。当然，在实际生活中，你应该使用一个不那么可疑的文件名，比如*ciphertext_message_letterhead.docx*！
- en: Note that, because you’re using a `for` loop based on the fake message, appending
    any more hidden lines after the `for` loop ends—that is, after you reach the end
    of the items in the fake list—is impossible. If you want more space, you must
    enter hard returns at the bottom of the fake message, but be careful not to add
    so many that you force a page break and create a mysterious empty page!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，因为你正在使用基于伪造信息的`for`循环，循环结束后，即在你达到伪造列表中项的末尾后，无法再添加任何更多的隐藏行。如果你想要更多空间，你必须在伪造信息的底部输入硬回车，但要小心不要添加太多，以免强制分页并产生一个神秘的空白页！
- en: Run the program, open the saved Word document, use CTRL-A to select all the
    text, and then set the Highlight color (see [Figure 6-4](ch06.xhtml#ch06fig4))
    to dark gray to see both messages. The secret message should be revealed ([Figure
    6-10](ch06.xhtml#ch06fig10)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，打开保存的Word文档，使用CTRL-A选择所有文本，然后将高亮颜色（见[图6-4](ch06.xhtml#ch06fig4)）设置为深灰色，以查看两条信息。秘密信息应已被揭示（见[图6-10](ch06.xhtml#ch06fig10)）。
- en: '![image](../images/f0117-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0117-01.jpg)'
- en: '*Figure 6-10: Word document highlighted in dark gray to show both the fake
    message and the unencrypted real message*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-10：使用深灰色高亮显示的Word文档，展示了伪造的信息和未加密的真实信息*'
- en: '***Adding the Vigenère Cipher***'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加维吉尼亚密码***'
- en: 'The code so far uses the plaintext version of the real message, so anyone who
    changes the document’s highlight color will be able to read and understand the
    sensitive information in it. Since you know Mr. Kurtz encrypted this using the
    Vigenère cipher, go back and alter the code to replace the plaintext with the
    encrypted text. To do this, find the following line:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的代码使用了真实信息的纯文本版本，因此任何更改文档高亮颜色的人都能读取并理解其中的敏感信息。既然你知道Kurtz先生是使用维吉尼亚密码加密的，那么返回并修改代码，将纯文本替换为加密文本。为此，找到以下行：
- en: '[PRE3]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This line loads the real message as plaintext, so change the filename to the
    one shown here in bold:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行加载了真实信息的纯文本，所以将文件名更改为此处加粗显示的文件名：
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Rerun the program and again reveal the hidden text by selecting the whole document
    and setting the Highlight color to dark gray ([Figure 6-11](ch06.xhtml#ch06fig11)).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行程序，通过选择整个文档并将高亮颜色设置为深灰色（见[图6-11](ch06.xhtml#ch06fig11)）再次显示隐藏的文本。
- en: '![image](../images/f0118-01.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0118-01.jpg)'
- en: '*Figure 6-11: Word document highlighted in dark gray to show both the fake
    message and the encrypted real message*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-11：用深灰色突出显示的Word文档，展示了假信息和加密后的真实信息*'
- en: The secret message should be visible but unreadable to anyone who cannot interpret
    the cipher. Compare the encrypted message in [Figure 6-11](ch06.xhtml#ch06fig11)
    to the unencrypted version in [Figure 6-10](ch06.xhtml#ch06fig10). Note that numbers
    and the % sign occur in both versions. These were retained to demonstrate the
    potential pitfalls related to the encryption choice. You would want to augment
    the Vigenère cipher to include these characters—or just spell them out. That way,
    even if your message is discovered, you leave as few clues as possible as to the
    subject matter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密信息应该是可见的，但对任何无法解读密码的人来说是无法阅读的。比较[图 6-11](ch06.xhtml#ch06fig11)中的加密信息与[图 6-10](ch06.xhtml#ch06fig10)中的未加密版本。请注意，数字和百分号在两个版本中都有出现。保留这些内容是为了展示与加密选择相关的潜在陷阱。你可能需要增强维吉尼亚密码，以包括这些字符——或者直接拼写出来。这样，即使你的信息被发现，你也会尽量避免留下关于主题的线索。
- en: If you want to encode your own message with the Vigenère cipher, do an internet
    search for “online Vigenère encoder.” You’ll find multiple sites, such as *[http://www.cs.du.edu/~snarayan/crypt/vigenere.html](http://www.cs.du.edu/~snarayan/crypt/vigenere.html)*,
    that let you type or paste in plaintext. And if you want to write your own Python
    program for encrypting with the Vigenère cipher, see *Cracking Codes with Python*
    (No Starch Press, 2018) by Al Sweigart.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用维吉尼亚密码来编码自己的信息，可以通过互联网搜索“在线维吉尼亚编码器”。你会找到多个网站，例如*[http://www.cs.du.edu/~snarayan/crypt/vigenere.html](http://www.cs.du.edu/~snarayan/crypt/vigenere.html)*，可以在其中输入或粘贴明文。如果你想编写自己的Python程序来加密维吉尼亚密码，请参阅Al
    Sweigart的《Python破解密码》（No Starch Press，2018）。
- en: If you play around with your own real messages, encrypted or not, make sure
    you’re using the same font as in the fake message. A font is both a typeface,
    like Helvetica Italic, and a size, such as 12\. Remember from “[Considering Font
    Types, Kerning, and Tracking](ch06.xhtml#lev134)” on [page 109](ch06.xhtml#page_109)
    that if you try to mix fonts, especially proportional and monospace fonts, the
    hidden message lines may wrap, resulting in uneven spacing between paragraphs
    of the real message.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你自己尝试处理真实信息，无论是加密还是未加密的，确保使用与假信息中相同的字体。字体不仅指的是字体类型，比如Helvetica斜体，还包括字体大小，如12号。记住在“[考虑字体类型、字距和行距](ch06.xhtml#lev134)”中提到的，在[第109页](ch06.xhtml#page_109)，如果你尝试混合字体，尤其是比例字体和等宽字体，隐藏信息的行可能会换行，导致真实信息的段落之间出现不均匀的间距。
- en: '**Detecting the Hidden Message**'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检测隐藏信息**'
- en: Could Joan Watson, or any other detective, have found your hidden message quickly?
    The truth is, probably not. In fact, as I write these words, I am watching an
    episode of *Elementary* where Joan is busy investigating a company by reading
    through a box of email printouts! The use of the Vigenère cipher may have been
    just a bit of lazy writing in an overall intelligently crafted series. Still,
    we can speculate on what might give you away.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 琼·沃森或其他任何侦探，能快速找到你隐藏的信息吗？事实上，可能不会。事实上，在我写这些话的时候，我正在看《Elementary》的一集，琼正在通过阅读一箱电子邮件打印件调查一家公司！维吉尼亚密码的使用可能只是整个精心构思的系列剧中的一点懒散写作。尽管如此，我们还是可以推测出哪些因素可能会暴露你的秘密信息。
- en: Since the final bid was probably not sent until close to the bid date, the search
    could be limited to correspondence sent *after* the bid was finalized, thereby
    eliminating a lot of noise. Of course, a detective won’t know exactly what they’re
    looking for—or even if there *is* a mole—which leaves a large search space. And
    there’s always the possibility that the information was passed in a phone conversation
    or clandestine meeting.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于最终的投标很可能直到接近投标日期才被发送，因此搜索可以限制为投标确定后*发送的*通信，从而消除很多噪音。当然，侦探不会确切知道他们在寻找什么——甚至不知道是否*有*内奸——这使得搜索范围很大。而且，信息也有可能通过电话交谈或秘密会议传递。
- en: Assuming there was a manageable volume of email and a hidden-message hypothesis
    was being pursued, an investigator might detect your invisible ink in several
    ways. For example, the Word spellchecker will not flag the white, nonsensical
    encrypted words as long as they haven’t been made visible. If, as a check, you
    swiped and reset the font color on some of the hidden words, they will be permanently
    compromised, even after their color has been restored to white. The spellchecker
    will underline them with an incriminating red squiggly line (see [Figure 6-12](ch06.xhtml#ch06fig12)).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 假设邮件的数量是可控的，并且正在追寻隐藏信息的假设，调查员可能会通过多种方式检测到你的隐形墨水。例如，只要这些白色的无意义加密词没有显示出来，Word
    拼写检查器是不会标记它们的。如果你进行检查，选中并重设了某些隐藏词的字体颜色，即便它们的颜色恢复为白色，它们也会被永久暴露，拼写检查器会用一条指责性的红色波浪线标出这些词（参见[图
    6-12](ch06.xhtml#ch06fig12)）。
- en: '![image](../images/f0119-01.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0119-01.jpg)'
- en: '*Figure 6-12: Previously revealed invisible encrypted words underlined by the
    Word Spelling and Grammar tool*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-12：之前暴露的隐形加密词被 Word 拼写和语法工具下划线标记*'
- en: If the investigating detective uses an alternative to Word to open the document,
    the product’s spellchecker will most likely reveal the hidden words (see [Figure
    6-13](ch06.xhtml#ch06fig13)). This risk is mitigated somewhat by the dominance
    of Microsoft Word in the marketplace.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调查员使用与 Word 不同的软件打开文档，该软件的拼写检查器很可能会揭示隐藏的词汇（参见[图 6-13](ch06.xhtml#ch06fig13)）。这种风险在
    Microsoft Word 占据市场主导地位的情况下有所减轻。
- en: '![image](../images/f0120-01.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0120-01.jpg)'
- en: '*Figure 6-13: The spellchecker in LibreOffice Writer will highlight the invisible
    words.*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-13：LibreOffice Writer 中的拼写检查器将突出显示隐形词汇。*'
- en: Second, using CTRL-A to highlight all the text within Word won’t reveal the
    hidden text, but it would indicate that some blank lines are longer than others
    (see [Figure 6-14](ch06.xhtml#ch06fig14)), suggesting to the very observant that
    something is amiss.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，使用 CTRL-A 来高亮显示 Word 文档中的所有文本并不会显示隐藏的文本，但它会表明一些空白行比其他行要长（参见[图 6-14](ch06.xhtml#ch06fig14)），这会让非常细心的人察觉到有问题。
- en: '![image](../images/f0120-02.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0120-02.jpg)'
- en: '*Figure 6-14: Selecting the whole Word document reveals differences in the
    length of blank lines.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-14：选择整个 Word 文档会揭示空白行长度的差异。*'
- en: Third, opening the Word document using the preview functionality in some email
    software may reveal the hidden text when the contents are selected through swiping
    or using CTRL-A ([Figure 6-15](ch06.xhtml#ch06fig15)).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，使用某些电子邮件软件中的预览功能打开 Word 文档时，选中内容时（通过滑动或使用 CTRL-A）可能会揭示隐藏的文本（参见[图 6-15](ch06.xhtml#ch06fig15)）。
- en: '![image](../images/f0121-01.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0121-01.jpg)'
- en: '*Figure 6-15: Selecting the whole document in the Yahoo! Mail Preview panel
    reveals the hidden text.*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-15：在 Yahoo! Mail 预览面板中选择整个文档会显示隐藏的文本。*'
- en: But while selecting hidden text in the Yahoo! Mail Preview panel reveals the
    text, the same is not true in the Microsoft Outlook Preview panel in [Figure 6-16](ch06.xhtml#ch06fig16).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 但在 Yahoo! Mail 预览面板中选择隐藏文本会显示文本，而在 Microsoft Outlook 预览面板中则不会显示（参见[图 6-16](ch06.xhtml#ch06fig16)）。
- en: '![image](../images/f0121-02.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0121-02.jpg)'
- en: '*Figure 6-16: Selecting the whole document in the Microsoft Outlook Preview
    panel does not reveal the hidden text.*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-16：在 Microsoft Outlook 预览面板中选择整个文档并不会显示隐藏的文本。*'
- en: Finally, saving the Word document as a plain text (**.txt*) file would remove
    all formatting and leave the hidden text exposed ([Figure 6-17](ch06.xhtml#ch06fig17)).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 Word 文档保存为纯文本（**.txt**）文件将移除所有格式，并将隐藏的文本暴露出来（[图 6-17](ch06.xhtml#ch06fig17)）。
- en: '![image](../images/f0122-01.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0122-01.jpg)'
- en: '*Figure 6-17: Saving the Word document as a plain text (**.txt*) file reveals
    the hidden text.*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-17：将 Word 文档保存为纯文本（**.txt**）文件会显示隐藏的文本。*'
- en: To conceal a secret message with steganography, you have to conceal not only
    the *contents* of the message but also the fact that a message even *exists*.
    Our electronic invisible ink can’t always guarantee this, but from a mole’s point
    of view, the weaknesses just listed involve either them making a mistake, which
    could theoretically be controlled, or an investigator taking a dedicated and unlikely
    action, such as swiping text, saving files in a different format, or using a less-common
    word processor. Assuming the mole in *Elementary* considered these acceptable
    risks, electronic invisible ink provides a plausible explanation for why the internal
    company investigation failed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用隐写术隐藏秘密信息，你不仅需要隐藏信息的*内容*，还要隐藏信息的*存在*。我们的电子隐形墨水并不能总是保证这一点，但从间谍的角度来看，上述提到的弱点要么是他们犯了错误（理论上可以控制），要么是调查员采取了非常规且不太可能的行动，比如拷贝文本、以不同格式保存文件，或使用不常见的文字处理软件。假设《Elementary》中的间谍认为这些是可以接受的风险，那么电子隐形墨水提供了一个合理的解释，为什么公司内部调查会失败。
- en: '**Summary**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you used steganography to hide an encrypted message within
    a Microsoft Word document. You used a third-party module, called `python-docx`,
    to directly access and manipulate the document using Python. Similar third-party
    modules are available for working with other popular document types, like Excel
    spreadsheets.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你使用隐写术将加密信息隐藏在 Microsoft Word 文档中。你使用了一个名为`python-docx`的第三方模块，通过 Python
    直接访问和操作文档。其他流行文档类型（如 Excel 表格）也有类似的第三方模块可供使用。
- en: '**Further Reading**'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: You can find online documentation for `python-docx` at *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    and *[https://pypi.python.org/pypi/python-docx](https://pypi.python.org/pypi/python-docx)*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://python-docx.readthedocs.io/en/latest/](https://python-docx.readthedocs.io/en/latest/)*
    和 *[https://pypi.python.org/pypi/python-docx](https://pypi.python.org/pypi/python-docx)*
    上找到 `python-docx` 的在线文档。
- en: '*Automate the Boring Stuff with Python* (No Starch Press, 2015) by Al Sweigart,
    covers modules that allow Python to manipulate PDFs, Word files, Excel spreadsheets,
    and more. [Chapter 13](ch13.xhtml#ch13) contains a useful tutorial on `python-docx`,
    and the appendix covers installing third-party modules with pip.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*用 Python 自动化无聊的事情*（No Starch Press，2015）由阿尔·斯威加特（Al Sweigart）编写，涵盖了允许 Python
    操作 PDF、Word 文件、Excel 表格等模块。[第13章](ch13.xhtml#ch13)包含了关于`python-docx`的有用教程，附录部分则介绍了如何使用
    pip 安装第三方模块。'
- en: You can find beginner-level Python programs for working with ciphers in *Cracking
    Codes with Python* (No Starch Press, 2018) by Al Sweigart.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在阿尔·斯威加特（Al Sweigart）的《破解 Python 密码学》（No Starch Press，2018）一书中找到适合初学者的密码学
    Python 程序。
- en: '*Mysterious Messages* (The Penguin Group, 2009) by Gary Blackwood is an interesting
    and well-illustrated history of steganography and cryptography.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*神秘信息*（企鹅出版集团，2009）由加里·布莱克伍德（Gary Blackwood）编写，是一本有趣且图文并茂的关于隐写术和密码学的历史书籍。'
- en: '**Practice Project: Checking the Number of Blank Lines**'
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**练习项目：检查空白行数**'
- en: Improve the hidden message program by writing a function that compares the number
    of blank lines in the fake message to the number of lines in the real message.
    If there is insufficient space to hide the real message, have the function warn
    the user and tell them how many blank lines to add to the fake message. Insert
    and call the function in a copy of the *elementary_ink.py* code, just before loading
    the template document. You can find a solution in the appendix and online at *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    in *elementary_ink_practice.py*. For testing, download *realMessageChallenge.docx*
    from the same site and use it for the real message.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写一个函数来改进隐藏信息的程序，该函数将比较虚假信息中的空白行数与真实信息中的行数。如果没有足够的空间来隐藏真实信息，函数应该警告用户并告诉他们需要在虚假信息中添加多少空白行。在`elementary_ink.py`代码的副本中插入并调用该函数，调用位置在加载模板文档之前。你可以在附录中找到解决方案，也可以在
    *[https://www.nostarch.com/impracticalpython/](https://www.nostarch.com/impracticalpython/)*
    上找到 *elementary_ink_practice.py* 的代码。进行测试时，从同一网站下载 *realMessageChallenge.docx*
    文件，并使用它作为真实信息。
- en: '**Challenge Project: Using Monospace Font**'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**挑战项目：使用等宽字体**'
- en: Rewrite the *elementary_ink.py* code for monospace fonts and hide your own short
    message in the spaces between words. See “[Considering Font Types, Kerning, and
    Tracking](ch06.xhtml#lev134)” on [page 109](ch06.xhtml#page_109) for a description
    of monospace fonts. As always with challenge projects, no solution is provided.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 *elementary_ink.py* 代码以使用等宽字体，并在单词之间的空隙中隐藏你自己的短信息。有关等宽字体的描述，请参见 “[考虑字体类型、字距和字间距](ch06.xhtml#lev134)”
    以及 [第109页](ch06.xhtml#page_109)。像往常一样，挑战项目没有提供解决方案。
