- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**Solving Calculus Problems**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**解答微积分问题**'
- en: '![image](images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/common-01.jpg)'
- en: In this final chapter, we’ll learn to solve calculus problems. We’ll first learn
    about mathematical functions, followed by a quick overview of the common mathematical
    functions available in Python’s standard library and SymPy. Then, we’ll learn
    how we can find the limits of functions and calculate derivatives and integrals—
    that is, the kinds of things you’d be doing in any calculus class. Let’s get started!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将学习如何解答微积分问题。我们首先了解数学函数，然后快速回顾 Python 标准库和 SymPy 中常见的数学函数。接着，我们将学习如何求解函数的极限，计算导数和积分——也就是你在任何微积分课堂上会做的事情。让我们开始吧！
- en: '**What Is a Function?**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是函数？**'
- en: Let’s start out with some basic definitions. A function is a *mapping* between
    an input set and an output set. The special condition of a function is that an
    element of the input set is related to *exactly one* element of the output set.
    For example, [Figure 7-1](ch07.html#ch7fig1) shows two sets such that an element
    of the output set is the square of an element that belongs to the input set.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些基本定义开始。函数是输入集合和输出集合之间的*映射*。函数的特殊条件是输入集合中的每个元素都与*恰好一个*输出集合中的元素相关联。例如，[图
    7-1](ch07.html#ch7fig1) 显示了两个集合，其中输出集合中的一个元素是属于输入集合的某个元素的平方。
- en: '![image](images/f07-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-01.jpg)'
- en: '*Figure 7-1: A function describes a mapping between an input set and an output
    set. Here, an element of the output set is the square of an element from the input
    set.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：一个函数描述了输入集合和输出集合之间的映射关系。在这里，输出集合中的一个元素是输入集合中一个元素的平方。*'
- en: Using the familiar function notation, we’d write this function as *f*(*x*) =
    *x*², where *x* is the independent variable quantity. So *f*(2) = 4, *f*(100)
    = 10000, and so on. We refer to *x* as the independent variable quantity because
    we’re free to assume a value for it as long as that value is within its domain
    (see the next section).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用常见的函数表示法，我们可以将这个函数写为 *f*(*x*) = *x*²，其中 *x* 是自变量。所以 *f*(2) = 4, *f*(100) =
    10000，依此类推。我们称 *x* 为自变量，因为我们可以自由地为其假设一个值，只要该值在其定义域内（参见下一部分）。
- en: Functions can also be defined in terms of multiple variables. For example, *f*(*x*,
    *y*) = *x*² + *y*² defines a function of two variables, *x* and *y*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 函数也可以根据多个变量来定义。例如，*f*(*x*, *y*) = *x*² + *y*² 定义了一个关于两个变量 *x* 和 *y* 的函数。
- en: '***Domain and Range of a Function***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***函数的定义域与值域***'
- en: The *domain* of a function is the set of input values that the independent variable
    can validly assume. The output set of a function is called the *range*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的*定义域*是自变量可以合法取值的输入值集合。函数的输出集合叫做*值域*。
- en: For example, the domain of the function *f*(*x*) = 1/*x* is all nonzero real
    and complex numbers because 1/0 isn’t defined. The range is formed by the set
    of values obtained by substituting each number in the domain into 1/*x*, so in
    this case it is also all nonzero real and complex numbers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，函数 *f*(*x*) = 1/*x* 的定义域是所有非零的实数和复数，因为 1/0 是未定义的。值域是通过将定义域中的每个数代入 1/*x* 得到的值集合，因此在这个例子中，值域也是所有非零的实数和复数。
- en: '**NOTE**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The domain and range of a function can certainly be different. For example,
    for the function* x*², the domain is all positive and negative numbers, but the
    range is only the positive numbers.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数的定义域和值域可以是不同的。例如，对于函数* x*²，定义域是所有正负数，但值域只有正数。*'
- en: '***An Overview of Common Mathematical Functions***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***常见数学函数概述***'
- en: We’ve already used a number of common mathematical functions from the Python
    standard library’s `math` module. A couple of familiar examples are the `sin()`
    and `cos()` functions, which correspond to the trigonometric functions sine and
    cosine. Other trigonometric functions—`tan()` and the inverse equivalents of these
    functions, `asin()`, `acos()`, and `atan()`—are also defined.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了 Python 标准库 `math` 模块中的许多常见数学函数。几个熟悉的例子是 `sin()` 和 `cos()` 函数，它们对应于三角函数正弦和余弦。其他三角函数——`tan()`
    以及这些函数的反函数 `asin()`、`acos()` 和 `atan()` 也都有定义。
- en: The `math` module also includes functions that find the logarithm of a number—the
    natural logarithm function `log()`, the base-2 logarithm `log2()`, and the base-10
    logarithm `log10()`—as well as the function `exp()`, which finds the value of
    *e^x*, where *e* is Euler’s number (approximately 2.71828).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`math`模块还包含一些函数，用于计算一个数字的对数——自然对数函数`log()`，以2为底的对数`log2()`，以及以10为底的对数`log10()`——还有`exp()`函数，用于计算*e^x*的值，其中*e*是欧拉数（约等于2.71828）。'
- en: One drawback of all these functions is that they’re not suitable for working
    with symbolic expressions. If we want to manipulate a mathematical expression
    involving symbols, we have to start using the equivalent functions defined by
    SymPy.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些函数的一个缺点是，它们不适合处理符号表达式。如果我们想要操作包含符号的数学表达式，就必须开始使用SymPy定义的等效函数。
- en: 'Let’s see a quick example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we find the sine of the angle *π*/2 using the `sin()` function defined
    by the standard library’s `math` module. Then, we can do the same using SymPy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用标准库`math`模块定义的`sin()`函数来计算角度*π*/2的正弦值。然后，我们可以使用SymPy做同样的事情。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similar to the standard library’s `sin()` function, SymPy’s `sin()` function
    expects the angle to be expressed in radians. Both functions return 1.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准库的`sin()`函数类似，SymPy的`sin()`函数期望角度以弧度表示。两个函数都返回1。
- en: 'Now, let’s try to call each function with a symbol instead and see what happens:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用符号来调用每个函数，看看会发生什么：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The standard library’s `sin()` function doesn’t know what to do when we call
    it with `theta` at ➊, so it raises an exception to indicate that it’s expecting
    a numerical value as an argument to the `sin()` function. On the other hand, SymPy
    is able to perform the same operation at ➋, and it returns the expression `2*sin(theta)`
    as the result. This is hardly surprising to us now, but it illustrates the kinds
    of tasks where the standard library’s mathematical functions can fall short.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库的`sin()`函数不知道当我们以`theta`为➊调用它时该怎么办，因此它会引发异常，表示它期望一个数值作为`sin()`函数的参数。另一方面，SymPy能够在➋执行相同的操作，并返回`2*sin(theta)`作为结果。现在我们已经不觉得这有什么意外，但它说明了标准库的数学函数在某些任务中可能会有所不足。
- en: Let’s consider another example. Say we want to derive the expression for the
    time it takes for a body in projectile motion to reach the highest point if it’s
    thrown with initial velocity `u` at an angle `theta` (see “[Projectile Motion](ch02.html#ch02lev2sec08)”
    on [page 48](ch02.html#page_48)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个例子。假设我们想推导出一个物体在投射运动中达到最高点所需的时间表达式，如果它以初速度`u`和角度`theta`被投掷（参见[“抛体运动”](ch02.html#ch02lev2sec08)在[第48页](ch02.html#page_48)）。
- en: 'At the highest point, `u*sin(theta)-g*t = 0`, so to find `t`, we’ll use the
    `solve()` function we learned about in [Chapter 4](ch04.html#ch04):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高点，`u*sin(theta)-g*t = 0`，因此为了求解`t`，我们将使用在[第4章](ch04.html#ch04)中学到的`solve()`函数：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The expression for `t`, as we learned earlier, turns out to be `u*sin(theta)/g`,
    and it illustrates how the `solve()` function can be used to find solutions to
    equations containing mathematical functions as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前学到的，`t`的表达式是`u*sin(theta)/g`，这也展示了如何使用`solve()`函数来求解包含数学函数的方程。
- en: '**Assumptions in SymPy**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**SymPy中的假设**'
- en: 'In all our programs, we’ve created a `Symbol` object in SymPy, defining the
    variable like so: `x = Symbol(''x'')`. Assume that as a result of an operation
    you asked SymPy to perform, SymPy needs to check whether the expression *x* +
    5 is greater than 0\. Let’s see what would happen:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们所有的程序中，我们都在SymPy中创建了一个`Symbol`对象，像这样定义变量：`x = Symbol('x')`。假设作为你要求SymPy执行的操作的结果，SymPy需要检查表达式*x*
    + 5是否大于0。我们来看一下会发生什么：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Because SymPy doesn’t know anything about the sign of *x*, it can’t deduce whether
    *x* + 5 is greater than 0, so it displays an error. But basic math tells us that
    if *x* is positive, *x* + 5 will always be positive, and if *x* is negative, it
    will be positive only in certain cases.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SymPy不知道*x*的符号，它无法推断*x* + 5是否大于0，因此会显示错误。但是基础数学告诉我们，如果*x*是正数，*x* + 5永远大于0，如果*x*是负数，只有在某些情况下它才会大于0。
- en: 'So if we create a `Symbol` object specifying `positive=True`, we tell SymPy
    to assume only positive values. Now it knows for sure that *x* + 5 is definitely
    greater than 0:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们创建一个指定`positive=True`的`Symbol`对象，我们告诉SymPy只考虑正值。现在，它确定了*x* + 5一定大于0：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that if we’d instead specified `negative=True`, we could get the same error
    as in the first case. Just as we can declare a symbol as `positive` and `negative`,
    it’s also possible to specify it as `real`, `integer`, `complex`, `imaginary`,
    and so on. These declarations are referred to as *assumptions* in SymPy.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我们指定`negative=True`，我们可能会得到与第一个情况相同的错误。就像我们可以将符号声明为`positive`和`negative`一样，也可以将其指定为`real`、`integer`、`complex`、`imaginary`等。这些声明在SymPy中被称为*假设*。
- en: '**Finding the Limit of Functions**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**求函数的极限**'
- en: A common task in calculus is finding the *limiting value* (or simply the *limit*)
    of the function, when the variable’s value is assumed to approach a certain value.
    Consider a function *f*(*x*) = 1/*x*, whose graph is shown in [Figure 7-2](ch07.html#ch7fig2).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 微积分中的常见任务是求函数的*极限值*（或简称*极限*），当变量的值趋近于某个特定值时。考虑一个函数*f*(*x*) = 1/*x*，其图像如[图 7-2](ch07.html#ch7fig2)所示。
- en: As the value of *x* increases, the value of *f*(*x*) approaches 0\. Using the
    limit notation, we’d write this as
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当*x*的值增加时，*f*(*x*)的值趋近于0。使用极限符号，我们可以将其写为
- en: '![image](images/e0181-01.jpg)![image](images/f07-02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0181-01.jpg)![image](images/f07-02.jpg)'
- en: '*Figure 7-2: A graph showing the function 1/*x *as the value of* x *increases*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：显示函数1/*x*的图像，随着*x*值的增加*'
- en: 'We can find limits of functions in SymPy by creating objects of the `Limit`
    class as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建`Limit`类的对象来在SymPy中找到函数的极限，方法如下：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At ➊, we import the `Limit` and `Symbol` classes, as well as `S`, which is
    a special SymPy class that contains the definition of infinity (positive and negative)
    and other special values. Then at ➋ we create a symbol object, `x`, to represent
    *x*. We create the `Limit` object at ➌, passing it three arguments: `1/x`, the
    variable `x`, and finally the value at which we want to calculate the function’s
    limit (infinity, given by `S.Infinity`).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，我们导入`Limit`和`Symbol`类，以及`S`，这是一个特殊的SymPy类，包含了无穷大（正无穷和负无穷）以及其他特殊值的定义。然后在➋，我们创建一个符号对象`x`，表示*x*。在➌，我们创建`Limit`对象，传入三个参数：`1/x`，变量`x`，以及最后我们希望计算函数极限的值（无穷大，由`S.Infinity`表示）。
- en: The result is returned as an *unevaluated* object with the `oo` symbol denoting
    positive infinity and the `dir='-'` symbol specifying that we are approaching
    the limit from the negative side.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果作为一个*未求值*对象返回，`oo`符号表示正无穷，`dir='-'`符号表示我们从负侧逼近极限。
- en: 'To find the value of the limit, we use the `doit()` method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要求得极限值，我们使用`doit()`方法：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By default, the limit is found from a positive direction, unless the value
    at which the limit is to be calculated is positive or negative infinity. In the
    case of positive infinity, the direction is negative, and vice versa. You can
    change the default direction as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，极限是从正方向计算的，除非要计算极限的值是正无穷或负无穷。在正无穷的情况下，方向为负，反之亦然。你可以通过以下方式更改默认方向：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we calculate
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们计算
- en: '![image](images/e0182-01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0182-01.jpg)'
- en: 'and as we approach 0 for *x* from the negative side, the value of the limit
    approaches negative infinity. On the other hand, if we approach 0 from the positive
    side, the value approaches positive infinity:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从负侧逼近0时，*x*的极限值趋近于负无穷。另一方面，如果我们从正侧逼近0，极限值趋近于正无穷：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Limit` class also handles functions with limits of indeterminate forms,
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Limit`类还处理具有不定形极限的函数，'
- en: '![image](images/e0182-02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0182-02.jpg)'
- en: 'automatically:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自动地：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You have very likely used l’Hôpital’s rule to find such limits, but as we see
    here, the `Limit` class takes care of this for us.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能使用了l'Hôpital法则来找到这种极限，但正如我们在这里看到的，`Limit`类为我们处理了这个问题。
- en: '***Continuous Compound Interest***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***连续复利***'
- en: Say you’ve deposited $1 in a bank. This deposit is the *principal*, which pays
    you *interest*—in this case, interest of 100 percent that compounds `n` times
    yearly for 1 year. The amount you’ll get at the end of 1 year is given by
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在银行存入了1美元。这笔存款是*本金*，它会支付你*利息*——在这种情况下，利息是每年复利`n`次，年利率为100%。你在1年后的最终金额为：
- en: '![image](images/e0183-01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0183-01.jpg)'
- en: 'The prominent mathematician James Bernoulli discovered that as the value of
    *n* increases, the term (1 + 1/*n*)*^n* approaches the value of *e*—the constant
    that we can verify by finding the limit of the function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 杰出的数学家詹姆斯·伯努利发现，当*n*的值增加时，项(1 + 1/*n*)*^n*趋近于*e*的值——这个常数我们可以通过求函数的极限来验证：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For any principal amount *p*, any rate *r*, and any number of years *t*, the
    compound interest is calculated using the formula
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何本金 *p*、任何利率 *r* 和任何年份 *t*，复利的计算公式为：
- en: '![image](images/e0183-02.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0183-02.jpg)'
- en: 'Assuming continuous compounding interest, we can find the expression for *A*
    as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设连续复利，我们可以通过以下公式求出 *A* 的表达式：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We create three symbol objects, representing the principal amount, `p`, the
    rate of interest, `r`, and the number of years, `t`. We also tell SymPy that these
    symbols will assume positive values by passing the `positive=True` keyword argument
    while creating the `Symbol` objects. If we don’t specify, SymPy doesn’t know anything
    about the numerical values the symbol can assume and may not be able to evaluate
    the limit correctly. We then feed in the expression for the compound interest
    to create the `Limit` object and evaluate it using the `doit()` method. The limit
    turns out to be `p*exp(r*t)`, which tells us that the compound interest grows
    exponentially with time for the fixed rate of interest.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了三个符号对象，分别表示本金 `p`、利率 `r` 和年份 `t`。我们还告诉 SymPy 这些符号将假定为正值，在创建 `Symbol` 对象时传入
    `positive=True` 关键字参数。如果我们不指定，SymPy 不知道符号可以假定哪些数值，可能无法正确计算极限。然后，我们将复利表达式输入，创建
    `Limit` 对象，并使用 `doit()` 方法求值。结果是 `p*exp(r*t)`，这告诉我们复利随着时间的推移呈指数增长，假设利率是固定的。
- en: '***Instantaneous Rate of Change***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***瞬时变化率***'
- en: Consider a car moving along a road. It accelerates uniformly such that the distance
    traveled, *S*, is given by the function
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一辆汽车沿着道路行驶。它均匀加速，使得行驶的距离 *S* 由函数给出：
- en: '*S*(*t*) = 5*t*² + 2*t* + 8.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*S*(*t*) = 5*t*² + 2*t* + 8。'
- en: In this function, the independent variable is *t*, which represents the time
    elapsed since the car started moving.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，自变量是 *t*，它表示汽车开始移动以来经过的时间。
- en: If we measure the distance traveled in time *t*[1] and time *t*[2] such that
    *t*[2] > *t*[1], then we can calculate the distance moved by the car in 1 unit
    of time using the expression
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测量在时间 *t*[1] 和 *t*[2] 之间的行驶距离，其中 *t*[2] > *t*[1]，那么我们可以使用以下表达式计算汽车在1单位时间内的行驶距离：
- en: '![image](images/e0184-01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0184-01.jpg)'
- en: This is also referred to as the average rate of change of the function *S*(*t*)
    with respect to the variable *t*, or in other words, the average speed. If we
    write *t*[2] as *t*[1] + *δ[t]*—where *δ[t]* is the difference between *t*[2]
    and *t*[1] in units of time—we can rewrite the expression for the average speed
    as
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为函数 *S*(*t*) 相对于变量 *t* 的平均变化率，或者换句话说，平均速度。如果我们将 *t*[2] 写作 *t*[1] + *δ[t]*——其中
    *δ[t]* 是 *t*[2] 和 *t*[1] 之间的时间差——我们可以将平均速度的表达式重写为：
- en: '![image](images/e0184-02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0184-02.jpg)'
- en: This expression is also a function with *t*[1] as the variable. Now, if we further
    assume *δ[t]* to be really small, such that it approaches 0, we can use limit
    notation to write this as
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式也是一个以 *t*[1] 为变量的函数。现在，如果我们进一步假设 *δ[t]* 非常小，以至于它接近于 0，我们可以使用极限符号将其写作：
- en: '![image](images/e0184-03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0184-03.jpg)'
- en: 'We will now evaluate the above limit. First, let’s create the various expression
    objects:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将计算上述极限。首先，让我们创建各种表达式对象：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We first define the function *S*(*t*) at ➊. Then, we define two symbols, `t1`
    and `delta_t`, which correspond to *t*[1] and *δ[t]*. Using the `subs()` method,
    we then find *S*(*t*[1]) and *S*(*t*[1] + *δ[t]*) by substituting in the value
    of `t` for `t1` and `t1_delta_t` at ➋ and ➌, respectively.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在 ➊ 处定义函数 *S*(*t*)。然后，我们定义两个符号，`t1` 和 `delta_t`，分别对应 *t*[1] 和 *δ[t]*。通过使用
    `subs()` 方法，我们然后通过在 ➋ 和 ➌ 处分别将 `t` 的值替换为 `t1` 和 `t1_delta_t`，来找到 *S*(*t*[1]) 和
    *S*(*t*[1] + *δ[t]*)。
- en: 'Now, let’s evaluate the limit:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们计算这个极限：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The limit turns out to be `10*t1 + 2`, and it’s the rate of change of *S*(*t*)
    at time `t1`, or the instantaneous rate of change. This change is more commonly
    referred to as the *instantaneous speed* of the car at the time instant `t1`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 极限结果是 `10*t1 + 2`，它是 *S*(*t*) 在时间 `t1` 的变化率，或者说是瞬时变化率。这个变化通常被称为汽车在瞬时时间 `t1`
    的*瞬时速度*。
- en: The limit we calculated here is referred to as the *derivative* of a function,
    and we can calculate it directly using SymPy’s `Derivative` class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里计算的极限被称为函数的*导数*，并且我们可以直接使用 SymPy 的 `Derivative` 类来计算它。
- en: '**Finding the Derivative of Functions**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**求函数的导数**'
- en: 'The derivative of a function *y* = *f*(*x*) expresses the rate of change in
    the dependent variable, *y*, with respect to the independent variable, *x*. It’s
    denoted as either *f*′(*x*) or *dy*/*dx*. We can find the derivative of a function
    by creating an object of the `Derivative` class. Let’s use the previous function
    representing the motion of a car as an example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的导数*y* = *f*(*x*)表示因变量*y*相对于自变量*x*的变化率。它通常表示为*f*′(*x*)或*dy*/*dx*。我们可以通过创建`Derivative`类的对象来求得一个函数的导数。让我们使用之前的函数——表示汽车运动的函数——作为示例：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We import the `Derivative` class at ➊. At ➋, we create an object of the `Derivative`
    class. The two arguments passed while creating the object are the function `St`
    and the symbol `t`, which corresponds to the variable *t*. As with the `Limit`
    class, an object of the `Derivative` class is returned, and the derivative is
    not actually calculated. We call the `doit()` method on the unevaluated `Derivative`
    object to find the derivative:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在➊导入了`Derivative`类。在➋，我们创建了一个`Derivative`类的对象。创建对象时传入的两个参数是函数`St`和符号`t`，它对应变量*t*。和`Limit`类一样，`Derivative`类的对象被返回，但导数并没有实际计算。我们在未求值的`Derivative`对象上调用`doit()`方法来求导：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The expression for the derivative turns out to be `10*t + 2`. Now, if we want
    to calculate the value of the derivative at a particular value of *t*—say, *t*
    = *t*[1] or *t* = 1—we can use the `subs()` method:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 导数的表达式为`10*t + 2`。现在，如果我们想计算导数在某个特定值的值——例如，*t* = *t*[1]或*t* = 1——我们可以使用`subs()`方法：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s try a complicated arbitrary function with *x* as the only variable: (*x*³
    + *x*² + *x*) × (*x*² + *x*).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个复杂的任意函数，以*x*为唯一变量：(*x*³ + *x*² + *x*) × (*x*² + *x*)。
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You may consider this function the product of two independent functions, which
    means that, by hand, we’d need to make use of the *product rule* of differentiation
    to find the derivative. But we don’t need to worry about that here because we
    can just create an object of the `Derivative` class to do that for us.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个函数视为两个独立函数的乘积，这意味着，如果手动求导，我们需要使用*乘积法则*来求导。但是在这里我们不需要担心这些，因为我们只需创建一个`Derivative`类的对象，它会为我们处理这些。
- en: Try out some other complicated expressions, such as expressions involving trigonometric
    functions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一些其他复杂的表达式，比如涉及三角函数的表达式。
- en: '***A Derivative Calculator***'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***一个导数计算器***'
- en: 'Now let’s write a derivative calculator program, which will take a function
    as input and then print the result of differentiating it with respect to the variable
    specified:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一个导数计算器程序，它将接受一个函数作为输入，然后输出对指定变量求导后的结果：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: At ➊, we ask the user to input a function for which the derivative is to be
    found, and then we ask for the variable with respect to which the function is
    to be differentiated. At ➋, we convert the input function into a SymPy object
    using the `sympify()` function. We call this function in a `try...except` block
    so that we can display an error message in case the user enters an invalid input.
    If the input expression is a valid expression, we call the derivative function
    at ➌, passing the converted expression and the variable with respect to which
    the function is to be differentiated as arguments.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，我们要求用户输入一个待求导的函数，然后询问对哪个变量进行求导。在➋，我们使用`sympify()`函数将输入的函数转换为SymPy对象。我们将这个函数放在`try...except`块中，这样如果用户输入了无效的内容，我们可以显示错误信息。如果输入表达式是有效的，我们会在➌调用导数函数，传入转换后的表达式和待求导的变量作为参数。
- en: 'In the `derivative()` function, we first create a `Symbol` object that corresponds
    to the variable with respect to which the function is to be differentiated. We
    use the label `var` to refer to this variable. Next, we create a `Derivative`
    object that passes both the function to differentiate and the symbol object `var`.
    We immediately call the `doit()` method to evaluate the derivative, and we then
    use the `pprint()` function to print the result so that it appears close to its
    mathematical counterpart. A sample execution of the program follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`derivative()`函数中，我们首先创建一个`Symbol`对象，表示要对其求导的变量。我们使用标签`var`来表示这个变量。接下来，我们创建一个`Derivative`对象，传入待求导的函数和符号对象`var`。我们立即调用`doit()`方法来计算导数，然后使用`pprint()`函数打印结果，以便它与数学表达式的形式接近。以下是程序的示例执行：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here’s a sample run when used with a function of two variables:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用两个变量函数时的一个示例运行：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '***Calculating Partial Derivatives***'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***计算偏导数***'
- en: In the previous program, we saw that it’s possible to calculate the derivative
    of a multivariable function with respect to any variable using the `Derivative`
    class. This calculation is usually referred to as *partial differentiation*, with
    *partial* indicating that we assume only one variable varies while the others
    are fixed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的程序中，我们看到使用 `Derivative` 类可以计算多变量函数相对于任何变量的导数。这种计算通常称为*偏导数*，其中*偏*意味着我们假设只有一个变量发生变化，而其他变量保持不变。
- en: Let’s consider the function *f*(*x*, *y*) = 2*xy* + *xy*². The partial differentiation
    of *f*(*x*, *y*) with respect to *x* is
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑函数 *f*(*x*, *y*) = 2*xy* + *xy*²。关于 *x* 的偏导数是
- en: '![image](images/e0187-01.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0187-01.jpg)'
- en: 'The preceding program is capable of finding the partial derivative because
    it’s just a matter of specifying the right variable:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序能够找到偏导数，因为这仅仅是指定正确的变量的问题：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**NOTE**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*A key assumption I’ve made in this chapter is that all the functions we’re
    calculating the derivative of are differentiable in their respective domains.*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我做出的一个关键假设是，我们计算导数的所有函数在其各自的定义域内都是可导的。*'
- en: '**Higher-Order Derivatives and Finding the Maxima and Minima**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**高阶导数及寻找极值**'
- en: By default, creating the derivative object using the `Derivative` class finds
    the first-order derivative. To find higher-order derivatives, simply specify the
    order of the derivative to calculate as the third argument when you create the
    `Derivative` object. In this section I will show you how to use the first- and
    second-order derivative of the function to find its maxima and minima on an interval.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，通过 `Derivative` 类创建导数对象时，会计算一阶导数。要计算高阶导数，只需在创建 `Derivative` 对象时，将导数的阶数作为第三个参数指定即可。在本节中，我将向你展示如何使用一阶和二阶导数来找出函数在某个区间内的最大值和最小值。
- en: Consider the function *x*⁵ – 30*x*³ + 50*x*, defined on the domain [–5, 5].
    Note that I have used square brackets to indicate a closed domain, indicating
    that the variable *x* can assume any real value greater than or equal to –5 and
    less than or equal to 5 (see [Figure 7-3](ch07.html#ch7fig3)).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑函数 *x*⁵ – 30*x*³ + 50*x*，其定义域为 [–5, 5]。请注意，我使用方括号表示一个闭区间，意味着变量 *x* 可以取任何大于或等于
    –5 且小于或等于 5 的实数值（见 [图 7-3](ch07.html#ch7fig3)）。
- en: '![image](images/f07-03.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-03.jpg)'
- en: '*Figure 7-3: Plot of the function* x*⁵ – 30*x*³* + *50*x*, where –5* ≤ x ≤
    *5*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：函数* x*⁵ – 30*x*³* + *50*x* 的图像，其中 –5* ≤ x ≤ *5*'
- en: From the graph, we can see that the function attains its minimum value on the
    interval –2 ≤ *x* ≤ 0 at the point *B*. Similarly, it attains its maximum value
    on the interval 0 ≤ *x* ≤ 2 at the point *C*. On the other hand, the function
    attains its maximum and minimum values on the entire domain of *x* that we’ve
    considered here at the points *A* and *D*, respectively. Thus, when we consider
    the function on the whole interval [–5, 5], the points *B* and *C* are referred
    to as a *local minimum* and a *local maximum*, respectively, while the points
    *A* and *D* are the *global maximum* and the *global minimum*, respectively.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中可以看出，函数在区间 –2 ≤ *x* ≤ 0 上的点 *B* 达到了最小值。同样，在区间 0 ≤ *x* ≤ 2 上，函数在点 *C* 达到了最大值。另一方面，函数在我们考虑的整个
    *x* 定义域上分别在点 *A* 和 *D* 达到了最大值和最小值。因此，当我们考虑整个区间 [–5, 5] 时，点 *B* 和 *C* 分别被称为*局部最小值*和*局部最大值*，而点
    *A* 和 *D* 则分别是*全局最大值*和*全局最小值*。
- en: 'The term *extremum* (plural *extrema*) refers to the points where the function
    attains a local or global maximum or minimum. If *x* is an extremum of the function
    *f*(*x*), then the first-order derivative of *f* at *x*, denoted *f*′(*x*), must
    vanish. This property shows that a good way to find possible extrema is to try
    to solve the equation *f*′(*x*) = 0\. Such solutions are called *critical points*
    of the function. Let’s try this out:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*极值*（复数形式为 *极值点*）指的是函数达到局部最大值或最小值的点。如果 *x* 是函数 *f*(*x*) 的一个极值点，那么 *f* 在 *x*
    处的一阶导数 *f*′(*x*) 必须为零。这个性质表明，寻找可能的极值点的一个有效方法是尝试解方程 *f*′(*x*) = 0。这样的解称为函数的*临界点*。让我们来试试：'
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now that we have calculated the first-order derivative, *f*′(*x*), we’ll solve
    *f*′(*x*) = 0 to find the critical points:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经计算了一级导数 *f*′(*x*)，接下来我们将解 *f*′(*x*) = 0 来找到临界点：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The numbers in the list `critical_points` shown here correspond to the points
    *B*, *C*, *A*, and *D*, respectively. We will create labels to refer to these
    points, and then we can use the labels in our commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的`critical_points`中的数字分别对应点*B*、*C*、*A*和*D*。我们将创建标签来引用这些点，然后可以在命令中使用这些标签：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Because all the critical points for this function lie within the considered
    interval, they are all relevant for our search for the global maximum and minimum
    of *f*(*x*). We may now apply the so-called *second derivative test* to narrow
    down which critical points could be global maxima or minima.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因为该函数的所有关键点都位于考虑的区间内，所以它们对于我们寻找*f*(*x*)的全局最大值和最小值都是相关的。现在，我们可以应用所谓的*二阶导数测试*来缩小哪些关键点可能是全局最大值或最小值。
- en: 'First, we calculate the second-order derivative for the function *f*(*x*).
    Note that to do so, we enter `2` as the third argument:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们计算函数*f*(*x*)的二阶导数。请注意，为此，我们输入`2`作为第三个参数：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, we find the value of the second derivative by substituting the value of
    each of the critical points one by one in place of *x*. If the resulting value
    is less than 0, the point is a local maximum; if the value is greater than 0,
    it’s a local minimum. If the resulting value is 0, then the test is inconclusive
    and we cannot deduce anything about whether the critical point *x* is a local
    minimum, maximum, or neither.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过将每个关键点的值依次代入*x*来求得二阶导数的值。如果结果小于0，则该点是局部最大值；如果结果大于0，则该点是局部最小值。如果结果为0，则测试结果不确定，我们无法推断出关键点*x*是局部最小值、最大值，还是两者都不是。
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Evaluating the second derivative test at the critical points tells us that the
    points *A* and *C* are local maxima and the points *B* and *D* are local minima.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在关键点处评估二阶导数测试告诉我们，点*A*和*C*是局部最大值，点*B*和*D*是局部最小值。
- en: The global maximum and minimum of *f*(*x*) on the interval [–5, 5] is attained
    either at a critical point *x* or at one of the endpoints of the domain (*x* =
    –5 and *x* = 5). We have already found all of the critical points, which are the
    points *A*, *B*, *C*, and *D*. The function cannot attain its global minimum at
    either of the critical points *A* or *C* because they are local maximums. By similar
    logic, the function cannot attain its global maximum at *B* or *D*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在区间[–5, 5]上，*f*(*x*)的全局最大值和最小值要么出现在关键点*x*处，要么出现在域的端点（*x* = –5 和 *x* = 5）。我们已经找到了所有关键点，分别是点*A*、*B*、*C*和*D*。由于点*A*和*C*是局部最大值，因此函数不能在这两个点处达到全局最小值。通过类似的逻辑，函数也不能在点*B*或*D*处达到全局最大值。
- en: Thus, to find the global maximum, we must compute the value of *f*(*x*) at the
    points *A*, *C*, –5, and 5\. Among these points, the place where *f*(*x*) has
    the largest value must be the global maximum.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了找到全局最大值，我们必须计算*f*(*x*)在点*A*、*C*、–5 和 5处的值。在这些点中，*f*(*x*)值最大的地方必须是全局最大值。
- en: 'We will create two labels, `x_min` and `x_max`, to refer to the domain boundaries
    and evaluate the function at the points `A`, `C`, `x_min`, and `x_max`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个标签，`x_min`和`x_max`，用来引用域边界，并在点`A`、`C`、`x_min`和`x_max`处评估函数：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By these calculations, as well as by examining the function value at all the
    critical points and the domain boundaries ([Figure 7-3](ch07.html#ch7fig3)), we
    see that the point *A* turns out be the global maximum.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些计算，以及通过检查所有关键点和区间边界的函数值（见[图 7-3](ch07.html#ch7fig3)），我们发现点*A*是全局最大值。
- en: 'Similarly, to determine the global minimum, we must compute the values of *f*(*x*)
    at the points *B*, *D*, –5, and 5:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，为了确定全局最小值，我们必须计算*f*(*x*)在点*B*、*D*、–5 和 5处的值：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The point where *f*(*x*) has the smallest value must be the global minimum for
    the function; this turns out to be point *D*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*f*(*x*)取最小值的点必须是该函数的全局最小值；这就是点*D*。'
- en: This method for finding the extrema of a function—by considering the function’s
    value at all of the critical points (after potentially discarding some via the
    second derivative test) and boundary values—will always work as long as the function
    is twice differentiable. That is, both the first and second derivative must exist
    everywhere in the domain.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这种寻找函数极值的方法——通过考虑所有关键点（在可能通过二阶导数测试排除某些点后）和边界值的函数值——只要函数是二次可导的，就总是有效的。也就是说，函数的第一导数和第二导数在域内必须处处存在。
- en: 'For a function such as *e^x*, there might not be any critical points in the
    domain, but in this case the method works fine: it simply tells us that the extrema
    occur at the domain boundary.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像*e^x*这样的函数，可能在定义域内没有任何临界点，但在这种情况下，该方法仍然有效：它只告诉我们极值出现在定义域的边界上。
- en: '**Finding the Global Maximum Using Gradient Ascent**'
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用梯度上升法寻找全局最大值**'
- en: Sometimes we’re just interested in finding the global maximum for a function
    instead of all the local and global maxima and minima. For example, we might want
    to discover the angle of projection for which a ball will cover the maximum horizontal
    distance. We’re going to learn a new, more practical approach to solve such a
    problem. This approach makes use of the first derivative only, so it’s applicable
    only to functions for which the first derivative can be calculated.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们仅仅关注找到一个函数的全局最大值，而不是所有局部和全局的最大值和最小值。例如，我们可能想要发现一个投球的投射角度，使得球能覆盖最大水平距离。我们将学习一种新的、更实用的方法来解决这种问题。这个方法仅使用一阶导数，因此仅适用于那些可以计算一阶导数的函数。
- en: This method is called the *gradient ascent method*, which is an iterative approach
    to finding the global maximum. Because the gradient ascent method involves lots
    of computation, it’s the perfect kind of thing to solve programmatically rather
    than by hand. Let’s try it out using the example problem of finding the angle
    of projection. In [Chapter 2](ch02.html#ch02), we derived the expression
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法被称为*梯度上升法*，它是一种寻找全局最大值的迭代方法。由于梯度上升法涉及大量的计算，因此它是通过编程而非手工解决的理想方法。让我们通过寻找投射角度的例子来尝试一下。在[第2章](ch02.html#ch02)中，我们推导出了以下表达式：
- en: '![image](images/e0191-01.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0191-01.jpg)'
- en: to calculate the time of flight for a body in projectile motion that’s thrown
    with a velocity *u* at an angle *θ*. The *range* of a projectile, *R*, is the
    total horizontal distance traveled by the projectile and is given by the product
    of *u[x] × t*[flight]. Here, *u[x]* is the horizontal component of the initial
    velocity and is equal to *u* cos*θ*. Substituting the formulas for *u[x]* and
    *t*[flight], we get the expression
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 计算一个物体在投射运动中的飞行时间，该物体以速度*u*在角度*θ*下投射。投射的*射程*，*R*，是物体所走的总水平距离，由*u[x] × t*[flight]给出。这里，*u[x]*是初速度的水平分量，等于*u*
    cos*θ*。代入*u[x]*和*t*[flight]的公式，我们得到以下表达式：
- en: '![image](images/e0191-02.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0191-02.jpg)'
- en: The plot in [Figure 7-4](ch07.html#ch7fig4) shows values of *θ* between 0 and
    90 degrees and the corresponding range (distance traveled) for each angle. From
    the graph, we can see that the maximum range is obtained when the angle of projection
    is around 45 degrees. We’ll now learn to use the gradient ascent method to find
    this value of *θ* numerically.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-4](ch07.html#ch7fig4)中的图表显示了*θ*在0到90度之间的取值，以及每个角度对应的射程（飞行距离）。从图中我们可以看到，当投射角度约为45度时，射程最大。接下来我们将学习如何使用梯度上升法来数值求解这个*θ*值。'
- en: '![image](images/f07-04.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-04.jpg)'
- en: '*Figure 7-4: The range of a projectile thrown with an initial velocity of 25
    m/s with varying angles of projection*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-4：初速度为25 m/s的投射物在不同投射角度下的射程*'
- en: 'The gradient ascent method is an iterative method: we start with an initial
    value of *θ*—say, 0.001, or *θ*[old] = 0.001—and gradually get closer to the value
    of *θ* that corresponds to the maximum range ([Figure 7-5](ch07.html#ch7fig5)).
    The step that gets us closer is the equation'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度上升法是一种迭代方法：我们从一个初始值*θ*开始——假设为0.001，或者*θ*[old] = 0.001——然后逐渐接近与最大射程对应的*θ*值（见[图
    7-5](ch07.html#ch7fig5)）。使我们逐渐接近的步骤是以下方程：
- en: '![image](images/e0192-01.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0192-01.jpg)'
- en: where *λ* is the *step size* and
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，*λ*是*步长*，并且
- en: '![image](images/e0192-02.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0192-02.jpg)'
- en: 'is the derivative of *R* with respect to *θ*. Once we set *θ*[old] = 0.001,
    we do the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 是*R*对*θ*的导数。我们将*θ*[old] = 0.001后，执行如下步骤：
- en: 1\. Calculate *θ*[new] using the preceding equation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 使用上述方程计算*θ*[new]。
- en: 2\. If the absolute difference *θ*[new] – *θ*[old] is greater than a value,
    *ε*, we set *θ*[old] = *θ*[new] and return to step 1\. Otherwise, we go to step
    3.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 如果*θ*[new] – *θ*[old]的绝对差值大于某个值*ε*，我们将*θ*[old]设置为*θ*[new]并返回第1步。否则，进入第3步。
- en: 3\. *θ*[new] is an approximate value of *θ* for which *R* has the maximum value.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 3. *θ*[new]是一个近似值，它是使*R*取得最大值的*θ*。
- en: The value of *epsilon* (*ε*) determines when we decide to stop the iteration
    of the algorithm. It is discussed in “[The Role of the Step Size and Epsilon](ch07.html#ch07lev2sec09)”
    on [page 197](ch07.html#page_197).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*epsilon*（*ε*）的值决定了我们何时决定停止算法的迭代。在[《步长和Epsilon的作用》](ch07.html#ch07lev2sec09)中有详细讨论，见[第197页](ch07.html#page_197)。'
- en: '![image](images/f07-05.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-05.jpg)'
- en: '*Figure 7-5: The gradient ascent method takes us iteratively toward the maximum
    point of the function.*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-5：梯度上升法通过迭代不断接近函数的最大值。*'
- en: The following `grad_ascent()` function implements the gradient ascent algorithm.
    The parameter `x0` is the initial value of the variable at which to start the
    iteration, `f1x` is the derivative of the function whose maximum we want to find,
    and `x` is the `Symbol` object corresponding to the variable for the function.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`grad_ascent()`函数实现了梯度上升算法。参数`x0`是开始迭代时变量的初始值，`f1x`是我们想要找到最大值的函数的导数，`x`是与该函数变量对应的`Symbol`对象。
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We set the epsilon value to `1e-6` and the step size to `1e-4` at ➊ and ➋, respectively.
    The epsilon value must always be a very small positive value close to 0, and the
    step size should be chosen such that the variable is incremented in small amounts
    at every iteration of the algorithm. The choice of the value of epsilon and step
    size is discussed in a bit more detail in “[The Role of the Step Size and Epsilon](ch07.html#ch07lev2sec09)”
    on [page 197](ch07.html#page_197).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在➊和➋处分别将epsilon值设置为`1e-6`，步长设置为`1e-4`。epsilon值必须始终是一个非常小的正值，接近0，步长应该选择得足够小，以便在每次算法迭代时变量的增量较小。epsilon值和步长的选择在[《步长和Epsilon的作用》](ch07.html#ch07lev2sec09)中有更详细的讨论，见[第197页](ch07.html#page_197)。
- en: We set `x_old` to `x0` at ➌ and calculate `x_new` for the first time at ➍. We
    use the `subs()` method to substitute the value of `x_old` in place of the variable
    and then use `evalf()` to calculate the numerical value. If the absolute difference
    `abs(x_old – x_new)` is greater than `epsilon`, the `while` loop at ➎ keeps executing,
    and we keep updating the value of `x_old` and `x_new` as per steps 1 and 2 of
    the gradient ascent algorithm. Once we’re out of the loop—that is, `abs(x_old
    – x_new) > epsilon`—we return `x_new`, the variable value corresponding to the
    maximum function value.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在➌处将`x_old`设置为`x0`，并在➍处首次计算`x_new`。我们使用`subs()`方法将`x_old`的值代入变量，然后使用`evalf()`计算数值。如果绝对差`abs(x_old
    – x_new)`大于`epsilon`，则在➎处的`while`循环将继续执行，我们将根据梯度上升算法的第1步和第2步不断更新`x_old`和`x_new`的值。一旦退出循环——即`abs(x_old
    – x_new) > epsilon`——我们返回`x_new`，即对应最大函数值的变量值。
- en: We begin to define the `find_max_theta()` function at ➏. In this function, we
    calculate the first-order derivative of `R`; create a label, `theta0`, and set
    it to `1e-3`; and call the `grad_ascent()` function with these two values as arguments,
    as well as a third argument, the symbol object `theta`. Once we get the value
    of *θ* corresponding to the maximum function value (`theta_max`), we return it
    at ➐.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在➏处开始定义`find_max_theta()`函数。在这个函数中，我们计算`R`的一阶导数；创建一个标签`theta0`，并将其设置为`1e-3`；然后调用`grad_ascent()`函数，传入这两个值作为参数，以及第三个参数，即符号对象`theta`。当我们得到对应最大函数值的*θ*（即`theta_max`）后，我们在➐处返回该值。
- en: Finally, we create the expression representing the horizontal range at ➑, having
    set the initial velocity, `u = 25`, and the `theta` Symbol object corresponding
    to the angle *θ*. Then we call the `find_max_theta()` function with `R` and `theta`
    at ➒.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在➑处创建表示水平射程的表达式，设置初速度为`u = 25`，并使用与角度*θ*对应的`theta`符号对象。然后，我们在➒处调用`find_max_theta()`函数，传入`R`和`theta`。
- en: 'When you run this program, you should see the following output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，你应该看到如下输出：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The value of *θ* is printed in degrees and turns out to be close to 45 degrees,
    as expected. If you change the initial velocity to other values, you’ll see that
    the angle of projection at which the maximum range is reached is always close
    to 45 degrees.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*θ*的值以度为单位打印，结果接近45度，正如预期的那样。如果你将初速度改为其他值，你会发现达到最大射程的投射角始终接近45度。'
- en: '***A Generic Program for Gradient Ascent***'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***一个通用的梯度上升程序***'
- en: 'We can modify the preceding program slightly to make a generic program for
    gradient ascent:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以稍微修改前面的程序，制作一个通用的梯度上升程序：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The function `grad_ascent()` remains the same here. Now, however, the program
    asks the user to input the function, the variable in the function, and the initial
    value of the variable, where gradient ascent will begin. Once we’re sure that
    SymPy can recognize the user’s input, we create a Symbol object corresponding
    to the variable at ➊, find the first derivative with respect to it at ➋, and call
    the `grad_ascent()` function with these three arguments. The maximum value is
    returned at ➌.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`grad_ascent()`在这里保持不变。不过，现在程序要求用户输入函数、函数中的变量以及变量的初始值，从哪里开始进行梯度上升。一旦我们确定SymPy能够识别用户输入，我们会在➊处创建一个与变量对应的Symbol对象，在➋处找到关于它的第一阶导数，并使用这三个参数调用`grad_ascent()`函数。在➌处返回最大值。
- en: 'Here’s a sample run:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一次示例运行：
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The function input here is the same as in our first implementation of gradient
    ascent, and the value of *θ* is printed in radians.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的函数输入与我们第一次实现梯度上升时相同，*θ*的值以弧度显示。
- en: 'Here’s another run of the program, which will find the maximum value for cos*y*:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序的另一次运行，它将找到cos*y*的最大值：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The program also works correctly for a function such as `cos(y) + k`, where
    `k` is a constant:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序对于像`cos(y) + k`这样的函数也能正确工作，其中`k`是常数：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: However, a function such as `cos(ky)` won’t work because its first-order derivative,
    `kcos(ky)`, still contains `k`, and SymPy doesn’t know anything about its value.
    Therefore, SymPy can’t perform a key step in the gradient ascent algorithm—namely,
    the comparison `abs(x_old - x_new) > epsilon`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像`cos(ky)`这样的函数无法正常工作，因为它的一级导数`kcos(ky)`仍然包含`k`，而SymPy对`k`的值一无所知。因此，SymPy无法执行梯度上升算法中的一个关键步骤——即比较`abs(x_old
    - x_new) > epsilon`。
- en: '***A Word of Warning About the Initial Value***'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关于初始值的警告***'
- en: 'The initial value of the variable from which we start the iteration of the
    gradient ascent method plays a very important role in the algorithm. Consider
    the function *x*⁵ – 30*x*³ + 50*x*, which we used as an example in [Figure 7-3](ch07.html#ch7fig3).
    Let’s find the maximum using our generic gradient ascent program:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 从哪个初始值开始迭代梯度上升法在算法中起着非常重要的作用。考虑函数 *x*⁵ – 30*x*³ + 50*x*，我们在[图7-3](ch07.html#ch7fig3)中作为例子使用过它。我们用我们通用的梯度上升程序来寻找最大值：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The gradient ascent algorithm stops when it finds the *closest peak*, which
    is not always the global maximum. In this example, when you start from the initial
    value of –2, it stops at the peak that also corresponds to the global maximum
    (approximately 706) in the considered domain. To verify this further, let’s try
    a different initial value:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度上升算法在找到*最接近的峰值*时停止，这不一定是全局最大值。在这个例子中，当你从初始值-2开始时，它停在了一个峰值，这个峰值也对应于考虑区间中的全局最大值（大约是706）。为了进一步验证这一点，让我们尝试不同的初始值：
- en: '[PRE37]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this case, the closest peak at which the gradient ascent algorithm stops
    is not the true global maximum of the function. [Figure 7-6](ch07.html#ch7fig6)
    depicts the result of the gradient ascent algorithm for both of these scenarios.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，梯度上升算法停止的最接近的峰值不是函数的真实全局最大值。[图7-6](ch07.html#ch7fig6)展示了这两种情况的梯度上升算法结果。
- en: '![image](images/f07-06.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-06.jpg)'
- en: '*Figure 7-6: Results of the gradient ascent algorithm with different initial
    values. Gradient ascent always takes us to the closest peak.*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-6：不同初始值下梯度上升算法的结果。梯度上升始终将我们带到最接近的峰值。*'
- en: Thus, when using this method, the initial value must be chosen carefully. Some
    variations of the algorithm try to address this limitation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在使用该方法时，必须小心选择初始值。算法的一些变体试图解决这个局限性。
- en: '***The Role of the Step Size and Epsilon***'
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步长和ε的作用***'
- en: In the gradient ascent algorithm, the next value for the variable is calculated
    using the equation
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在梯度上升算法中，变量的下一个值是通过以下公式计算的：
- en: '![image](images/e0197-01.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0197-01.jpg)'
- en: where *λ* is the *step size*. The step size determines the distance of the next
    step. It should be small to avoid going *over* a peak. That is, if the current
    value of *x* is close to the value that corresponds to the maximum value of the
    function, the next step shouldn’t be beyond the peak. The algorithm will then
    be unsuccessful. On the other hand, very small values will take longer to calculate.
    We’ve used a fixed step size of 10^(–3), but this may *not* be the most appropriate
    value for all functions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*λ*是*步长*。步长决定了下一步的距离。它应该足够小，以避免越过峰值。也就是说，如果当前的*x*值接近函数最大值所对应的值，那么下一步就不应该超越这个峰值，否则算法将失败。另一方面，步长太小会导致计算时间过长。我们使用了一个固定的步长10^(–3)，但这可能*不是*对所有函数最合适的值。
- en: The value of epsilon (*ε*) that determines when we decide to stop the iteration
    of the algorithm should be a value that’s sufficiently small that we’re convinced
    the value of *x* is not changing. We expect the first derivative, *f*′(*x*), to
    be 0 at the maximum point, and ideally the absolute difference |*θ*[new] – *θ*[old]|
    is 0 (see step 2 of the gradient ascent algorithm on [page 192](ch07.html#page_192)).
    Due to numerical inaccuracies, however, we may not exactly get a difference of
    0; hence, the value of epsilon is chosen to be a value close to 0, which, for
    all practical purposes, would tell us that the value of *x* isn’t changing anymore.
    I have used 10^(–6) as the epsilon for all the functions. This value, although
    sufficiently small and suitable for the functions that have a solution for *f*′(*x*)
    = 0, such as `sin(x)`, may not be the right value for other functions. Thus, it’s
    a good idea to verify the maximum value at the end to ensure its correctness and,
    if needed, to adjust the value for `epsilon` accordingly.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 确定何时停止算法迭代的ε（*ε*）值应该足够小，以至于我们可以确认*x*的值不再发生变化。我们期望在最大值点，第一导数*f*′(*x*)为0，并且理想情况下，绝对差值|*θ*[new]
    – *θ*[old]|为0（参见[第192页](ch07.html#page_192)的梯度上升算法第2步）。然而，由于数值不准确，我们可能无法精确得到0的差值；因此，ε的值被选为接近0的一个值，实际上它可以告诉我们*x*的值已经不再变化。我使用了10^(–6)作为所有函数的ε值。这个值尽管足够小，并且适用于那些具有*f*′(*x*)
    = 0解的函数，例如`sin(x)`，但对于其他函数，这个值可能并不合适。因此，最好在最后验证最大值以确保其正确性，并在需要时相应地调整`epsilon`值。
- en: 'Step 2 of the gradient ascent algorithm also implies that for the algorithm
    to terminate, the equation *f*′(*x*) = 0 must have a solution, which isn’t the
    case for a function such as *e^x* or log(*x*). If you provide one of these functions
    as input to the preceding program, therefore, the program won’t give you a solution,
    and it will continue running. We can make the gradient ascent program more useful
    for such cases by incorporating a check for whether *f*′(*x*) = 0 has a solution.
    Here’s the modified program:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度上升算法的第2步还意味着，为了让算法终止，方程*f*′(*x*) = 0必须有解，但对于像*e^x*或log(*x*)这样的函数，这并不成立。因此，如果你将这些函数作为输入提供给前面的程序，程序将不会给出解，并且将继续运行。我们可以通过增加一个检查是否*f*′(*x*)
    = 0有解的步骤，使梯度上升程序在这种情况下变得更有用。以下是修改后的程序：
- en: '[PRE38]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this modification of the `grad_ascent()` function, we call SymPy’s `solve()`
    function at ➊ to determine whether the equation *f*′(*x*) = 0, here `f1x`, has
    a solution. If not, we print a message and return. Another modification appears
    in the `__main__` block at ➋. We check whether the `grad_ascent()` function successfully
    returned a result; if it did, then we proceed to print the maximum value of the
    function and the corresponding value of the variable.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在`grad_ascent()`函数的这个修改中，我们在➊处调用了SymPy的`solve()`函数来判断方程*f*′(*x*) = 0（这里是`f1x`）是否有解。如果没有解，我们将打印一条信息并返回。另一个修改出现在➋处的`__main__`块中。我们检查`grad_ascent()`函数是否成功返回了结果；如果返回了结果，我们接着打印函数的最大值以及相应的变量值。
- en: 'These changes let the program handle functions such as log(*x*) and *e^x*:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化使得程序可以处理像log(*x*)和*e^x*这样的函数：
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You will see the same for *e^x*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*e^x*你也会看到类似的情况。
- en: '**GRADIENT DESCENT ALGORITHM**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**梯度下降算法**'
- en: 'The reverse algorithm of the gradient ascent algorithm is the gradient *descent*
    algorithm, which is a method to find the minimum value of a function. It is similar
    to the gradient ascent algorithm, but instead of “climbing up” along the function,
    we “climb down.” Challenge #2 on [page 205](ch07.html#page_205) discusses the
    difference between these two algorithms and gives you an opportunity to implement
    the reverse one.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度上升算法的反向算法是梯度*下降*算法，它是一种寻找函数最小值的方法。它与梯度上升算法类似，但我们不是“向上爬”沿着函数，而是“向下爬”。[第205页](ch07.html#page_205)的挑战#2讨论了这两种算法之间的区别，并给出了实现反向算法的机会。
- en: '**Finding the Integrals of Functions**'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**寻找函数的积分**'
- en: The *indefinite integral*, or the *antiderivative*, of a function *f*(*x*) is
    another function *F*(*x*), such that *F*′(*x*) = *f*(*x*). That is, the integral
    of a function is another function whose derivative is the original function. Mathematically,
    it’s written as *F*(*x*) = ∫ *f*(*x*)*dx*. The *definite integral*, on the other
    hand, is the integral
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数*f*（*x*）的*不定积分*或*反导数*是另一个函数*F*（*x*），使得*F*′（*x*） = *f*（*x*）。也就是说，一个函数的积分是另一个函数，其导数为原函数。在数学上，它写作*F*（*x*）
    = ∫ *f*（*x*）*dx*。而*定积分*则是
- en: '![image](images/e0200-01.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0200-01.jpg)'
- en: which is really *F*(*b*) – *F*(*a*), where *F*(*b*) and *F*(*a*) are the values
    of the anti-derivative of the function at *x* = *b* and at *x* = *a*, respectively.
    We can find both the integrals by creating an `Integral` object.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上是*F*（*b*）– *F*（*a*），其中*F*（*b*）和*F*（*a*）分别是函数的反导数在*x* = *b*和*x* = *a*时的值。我们可以通过创建`Integral`对象来找到这两个积分。
- en: 'Here’s how we can find the integral ∫ *kxdx*, where *k* is a constant term:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何找到积分∫ *kxdx*，其中*k*是常数项：
- en: '[PRE40]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We import the `Integral` and `Symbol` classes and create two `Symbol` objects
    corresponding to `k` and `x`. Then, we create an `Integral` object with the function
    `kx`, specifying the variable to integrate with respect to `x`. Similar to `Limit`
    and `Derivative` classes, we can now evaluate the integral using the `doit()`
    method:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`Integral`和`Symbol`类，并创建两个对应于`k`和`x`的`Symbol`对象。然后，我们创建一个`Integral`对象，使用函数`kx`，并指定要积分的变量是`x`。类似于`Limit`和`Derivative`类，我们现在可以使用`doit()`方法来求解积分：
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The integral turns out to be *kx*²/2\. If you calculate the derivative of *kx*²/2,
    you’ll get back the original function, *kx*.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 该积分的结果为*kx*²/2。如果你计算*kx*²/2的导数，你会得到原始函数*kx*。
- en: 'To find the *definite* integral, we simply specify the variable, the lower
    limit, and the upper limit as a tuple when we create the `Integral` object:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到*定积分*，我们只需在创建`Integral`对象时，指定变量、下限和上限作为一个元组：
- en: '[PRE42]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The result returned is the definite integral
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的结果是定积分
- en: '![image](images/e0200-02.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0200-02.jpg)'
- en: It can be useful to visualize definite integrals by discussing them in a geometric
    context. Consider [Figure 7-7](ch07.html#ch7fig7), which shows the graph of the
    function *f*(*x*) = *x* between *x* = 0 and *x* = 5.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在几何上下文中讨论定积分，可能对我们有帮助。考虑[图7-7](ch07.html#ch7fig7)，该图显示了函数*f*（*x*） = *x*在*x*
    = 0和*x* = 5之间的图形。
- en: Now consider the region under the graph *ABDE*, which is bounded by the *x*-axis,
    between the points *x* = 2 and *x* = 4—points *A* and *B*, respectively. The area
    of the region can be found by adding the area of the square *ABCE* and the right-angled
    triangle *ECD*, which is 2 × 2 + (1/2) × 2 × 2 = 6.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑图形*ABDE*下方的区域，该区域由*x*轴和点*x* = 2与*x* = 4（分别为点*A*和*B*）之间的区域所界定。该区域的面积可以通过加上正方形*ABCE*的面积和直角三角形*ECD*的面积来计算，面积为
    2 × 2 + (1/2) × 2 × 2 = 6。
- en: '![image](images/f07-07.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-07.jpg)'
- en: '*Figure 7-7: The definite integral of a function between two points is the
    area enclosed by the graph of the function bounded by the* x-*axis.*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-7：一个函数在两点之间的定积分是由函数图形与*x*轴所围成的面积。*'
- en: 'Let’s now calculate the integral ![image](images/e0201-01.jpg):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算积分！![image](images/e0201-01.jpg)：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The value of the integral turns out to be the same as the area of the region
    *ABDE*. This isn’t a coincidence; you’ll find this is true for any function of
    *x* for which the integral can be determined.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 积分的值恰好等于区域*ABDE*的面积。这并不是巧合；你会发现，对于任何可以确定积分的*x*函数，情况都是如此。
- en: Understanding that the definite integral is the area enclosed by the function
    between specified points on the *x*-axis is key for understanding probability
    calculations in random events that involve continuous random variables.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 理解定积分是由函数在指定的 *x* 轴点之间包围的面积，这是理解涉及连续随机变量的随机事件概率计算的关键。
- en: '**Probability Density Functions**'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**概率密度函数**'
- en: Let’s consider a fictional class of students and their grades on a math quiz.
    Each student can earn a grade between 0 and 20, including fractional grades. If
    we treat the grade as a random event, the grade itself is a *continuous random
    variable* because it can have *any* value between 0 and 20\. If we want to calculate
    the probability of a student getting a grade between 11 and 12, we can’t apply
    the strategy we learned in [Chapter 5](ch05.html#ch05). To see why, let’s consider
    the formula, assuming uniform probability,
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个虚构班级的学生及其在数学小测验中的成绩。每个学生的成绩可以在 0 到 20 之间，包括小数成绩。如果我们把成绩看作一个随机事件，那么成绩本身是一个*连续随机变量*，因为它可以在
    0 到 20 之间取*任何*值。如果我们想计算一个学生在 11 和 12 之间得到成绩的概率，我们不能应用我们在[第 5 章](ch05.html#ch05)中学到的策略。为了说明为什么，假设均匀概率，我们来看一下公式，
- en: '![image](images/e0202-01.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0202-01.jpg)'
- en: where *E* is the set of all grades possible between 11 and 12 and *S* is the
    set of all possible grades—that is, all real numbers between 1 and 20\. By our
    definition of the preceding problem, *n*(*E*) is infinite because it’s impossible
    to count all possible real numbers between 11 and 12; the same is true for *n*(*S*).
    Thus, we need a different approach to calculate the probability.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *E* 是 11 到 12 之间所有可能成绩的集合，*S* 是所有可能成绩的集合——即 1 到 20 之间的所有实数。根据我们对前述问题的定义，*n*(*E*)
    是无限的，因为不可能计算出 11 和 12 之间所有可能的实数；*n*(*S*) 同样也是如此。因此，我们需要一种不同的方法来计算概率。
- en: A *probability density function*, *P*(*x*), expresses the probability of the
    value of a random variable being *close* to *x*, an arbitrary value.[¹](footnote.html#fn05)
    It can also tell us the probability of *x* falling within an interval. That is,
    if we knew the probability density function representing the probability of grades
    in our fictional class, calculating *P*(11 < *x* < 12) would give us the probability
    that we’re looking for. But how do we calculate this? It turns out that this probability
    is the area enclosed by the graph of the probability density function and the
    *x*-axis between the points *x* = 11 and *x* = 12\. Assuming an arbitrary probability
    density function, [Figure 7-8](ch07.html#ch7fig8) demonstrates this.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*概率密度函数*，*P*(*x*), 表示随机变量取值*接近* *x* 的概率，一个任意的值。[¹](footnote.html#fn05) 它也可以告诉我们
    *x* 落在某个区间内的概率。也就是说，如果我们知道表示我们虚构班级成绩概率的概率密度函数，计算 *P*(11 < *x* < 12) 就能给我们我们需要的概率。但我们该如何计算呢？原来，这个概率就是由概率密度函数的图形与
    *x* 轴之间、*x* = 11 和 *x* = 12 之间的区域面积。假设一个任意的概率密度函数，[图 7-8](ch07.html#ch7fig8) 展示了这一点。'
- en: '![image](images/f07-08.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-08.jpg)'
- en: '*Figure 7-8: A probability density function for grades on a math quiz*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-8：数学小测验成绩的概率密度函数*'
- en: We already know that this area is equal to the value of the integral,
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道这个区域的面积等于积分的值，
- en: '![image](images/e0203-01.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0203-01.jpg)'
- en: thus, we have an easy way to find the probability of the grade lying between
    11 and 12\. With the math out of the way, we can now find out what the probability
    is. The probability density function we assumed earlier is the function
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有了一种简单的方法来找到成绩在 11 和 12 之间的概率。数学问题解决之后，我们现在可以找出概率是多少了。我们先前假设的概率密度函数是
- en: '![image](images/e0203-02.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0203-02.jpg)'
- en: where *x* is the grade obtained. This function has been chosen so that the probability
    of the grade being close to 10 (either greater or less than) is high but then
    decreases sharply.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *x* 是所获得的成绩。这个函数的选择使得成绩接近 10（不论是大于还是小于 10）的概率较高，但随后会急剧下降。
- en: Now, let’s calculate the integral
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们计算积分
- en: '![image](images/e0203-03.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0203-03.jpg)'
- en: 'with *p*(*x*) being the preceding function:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *p*(*x*) 是前面提到的函数：
- en: '[PRE44]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We create the `Integral` object for the function, with `p` representing the
    probability density function that specifies that we want to calculate the definite
    integral between 11 and 12 on the *x*-axis. We evaluate the function using `doit()`
    and find the numerical value using `evalf()`. Thus, the probability that a grade
    lies between 11 and 12 is close to 0.14.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个函数创建了 `Integral` 对象，`p` 代表概率密度函数，指定我们想要计算 *x* 轴上11和12之间的定积分。我们使用 `doit()`
    评估函数，并通过 `evalf()` 找到数值结果。因此，成绩在11和12之间的概率接近0.14。
- en: '**THE PROBABILITY DENSITY FUNCTION: A CAVEAT**'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**概率密度函数：一个警告**'
- en: Strictly speaking, this density function assigns a nonzero probability to grades
    less than 0 or greater than 20\. However, as you can check using the ideas from
    this section, the probability of such an event is so small that it is negligible
    for our purposes.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，这个密度函数为低于0或高于20的成绩分配了一个非零概率。然而，正如您可以通过本节中的思想检查到的那样，这样的事件的概率非常小，以至于对于我们的目的来说可以忽略不计。
- en: 'A probability density function has two special properties: (1) the function
    value for any *x* is always greater than 0, as probability can’t be less than
    0, and (2) the value of the definite integral'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 概率密度函数有两个特殊性质：（1）对于任何 *x*，函数值总是大于0，因为概率不能小于0；（2）定积分的值
- en: '![image](images/e0204-01.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0204-01.jpg)'
- en: is equal to 1\. The second property merits some discussion. Because *p*(*x*)
    is a probability density function, the area enclosed by it, which is also the
    integral
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 等于1。第二个性质值得讨论。因为 *p*(*x*) 是一个概率密度函数，它所围成的面积，也就是积分的值
- en: '![image](images/e0204-02.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0204-02.jpg)'
- en: 'between any two points, *x* = *a* and *x* = *b*, gives us the probability of
    *x* lying between *x* = *a* and *x* = *b*. This also means that no matter what
    the values of *a* and *b* are, the value of the integral must not exceed 1 because
    the probability can’t be greater than 1 by definition. Hence, even if *a* and
    *b* are very large values such that they tend to –∞ and ∞, respectively, the value
    of the integral will still be 1, as we can verify ourselves:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何两个点 *x* = *a* 和 *x* = *b* 之间，给出了 *x* 位于 *x* = *a* 和 *x* = *b* 之间的概率。这也意味着无论
    *a* 和 *b* 的值是多少，积分的值都不能超过1，因为根据定义，概率不能大于1。因此，即使 *a* 和 *b* 是非常大的值，趋近于–∞ 和 ∞，积分的值仍然是1，正如我们可以自己验证的那样：
- en: '[PRE45]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`S.NegativeInfinity` and `S.Infinity` denote the negative and positive infinity
    that we then specify as the lower and upper limits, respectively, while creating
    the `Integral` object.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`S.NegativeInfinity` 和 `S.Infinity` 分别表示负无穷和正无穷，我们在创建 `Integral` 对象时将它们指定为下限和上限。'
- en: When we’re dealing with continuous random variables, a tricky situation can
    arise. In discrete probability, the probability of an event such as a fair six-sided
    die rolling a 7 is 0\. We call an event for which the probability is 0 an *impossible*
    event. In the case of continuous random variables, the probability of the variable
    assuming any exact value is 0, even though it may be a *possible* event. For example,
    the grade of a student being exactly 11.5 is possible, but due to the nature of
    continuous random variables, the probability is 0\. To see why, consider that
    the probability will be the value of the integral
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理连续随机变量时，可能会出现一个棘手的情况。在离散概率中，像公平六面骰子掷出7点这样的事件的概率是0。我们称概率为0的事件为*不可能*事件。在连续随机变量的情况下，变量取某个确切值的概率是0，即使这个事件是*可能的*。例如，学生的成绩恰好是11.5是可能的，但由于连续随机变量的特性，概率为0。要了解为什么这样，考虑到概率将是积分的值
- en: '![image](images/e0204-03.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0204-03.jpg)'
- en: Because this integral has the same lower and upper limits, its value is 0\.
    This is rather unintuitive and paradoxical, so let’s try to understand it.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个积分的下限和上限相同，所以它的值为0。这有点违反直觉且显得矛盾，因此我们来尝试理解它。
- en: Consider the range of grades we addressed earlier—0 to 20\. The grade a student
    can obtain can be any number in this interval, which means there is an infinite
    number of numbers. If each number were to have an equal probability of being selected,
    what would that probability be? According to the formula for discrete probability,
    this should be 1/∞, which means a very small number. In fact, this number is so
    small that for all practical purposes, it’s considered 0\. Hence, the probability
    of the grade being 11.5 is 0.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们之前讨论的成绩范围——0到20。学生可以获得的成绩可以是这个区间内的任何数字，这意味着有无限多个数字。如果每个数字被选中的概率相等，那么这个概率是多少呢？根据离散概率公式，这应该是1/∞，也就是一个非常小的数字。事实上，这个数字小到在所有实际应用中，我们通常认为它是0。因此，成绩为11.5的概率是0。
- en: '**What You Learned**'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to find the limits, derivatives, and integrals
    of functions. You learned about the gradient ascent method for finding the maximum
    value of a function and saw how you can apply integration principles to calculate
    the probability of continuous random variables. Next, you have a few tasks to
    attempt.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何求解函数的极限、导数和积分。你学习了使用梯度上升法寻找函数最大值，并且看到如何应用积分原理来计算连续随机变量的概率。接下来，你有一些任务需要尝试。
- en: '**Programming Challenges**'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: The following challenges build on what you’ve learned in this chapter. You can
    find sample solutions at *[http://www.nostarch.com/doingmathwithpython/](http://www.nostarch.com/doingmathwithpython/)*.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下挑战建立在你在本章所学的基础上。你可以在*[http://www.nostarch.com/doingmathwithpython/](http://www.nostarch.com/doingmathwithpython/)*找到示例解答。
- en: '***#1: Verify the Continuity of a Function at a Point***'
  id: totrans-260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***#1：验证函数在某一点的连续性***'
- en: A necessary, but not sufficient, condition for a function to be differentiable
    at a point is that it must be continuous at that point. That is, the function
    must be defined at that point and its left-hand limit and right-hand limit must
    exist and be equal to the value of the function at that point. If *f*(*x*) is
    the function and *x* = *a* is the point we are interested in evaluating, this
    is mathematically stated as
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 函数在某一点可导的必要但不充分条件是该函数在该点必须是连续的。也就是说，函数必须在该点有定义，并且其左极限和右极限必须存在并等于该点的函数值。如果*f*（*x*）是函数，*x*
    = *a*是我们感兴趣的评估点，那么这在数学上可以表示为
- en: '![image](images/e0205-01.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0205-01.jpg)'
- en: Your challenge here is to write a program that will (1) accept a single-variable
    function and a value of that variable as inputs and (2) check whether the input
    function is continuous at the point where the variable assumes the value input.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你的挑战是编写一个程序，要求（1）接受一个单变量函数及该变量的值作为输入，且（2）检查输入函数在该点处是否连续，其中该点为变量的输入值。
- en: 'Here is a sample working of the completed solution:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完成解决方案的示例：
- en: '[PRE46]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The function 1/*x* is discontinuous at 0, so let’s check that:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 函数1/*x*在0处是不连续的，我们来验证一下：
- en: '[PRE47]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '***#2: Implement the Gradient Descent***'
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***#2：实现梯度下降法***'
- en: 'The gradient descent method is used to find the minimum value of a function.
    Similar to the gradient ascent method, the gradient descent method is an iterative
    method: we start with an initial value of the variable and gradually get closer
    to the variable value that corresponds to the minimum value of the function. The
    step that gets us closer is the equation'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度下降法用于寻找函数的最小值。与梯度上升法类似，梯度下降法是一种迭代方法：我们从变量的初始值开始，逐渐接近对应于函数最小值的变量值。使我们接近的步骤是
- en: '![image](images/e0206-01.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0206-01.jpg)'
- en: where *λ* is the step size and
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*λ*是步长，且
- en: '![image](images/e0206-02.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0206-02.jpg)'
- en: is the result of differentiating the function. Thus, the only difference from
    the gradient ascent method is how we obtain the value of `x_new` from `x_old`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对函数进行求导的结果。因此，和梯度上升法的唯一区别在于我们如何从`x_old`获取`x_new`的值。
- en: Your challenge is to implement a generic program using the gradient descent
    algorithm to find the minimum value of a single-variable function specified as
    input by the user. The program should also create a graph of the function and
    show all the intermediate values it found before finding the minimum. (You may
    want to refer to [Figure 7-5](ch07.html#ch7fig5) on [page 193](ch07.html#page_193).)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你的挑战是使用梯度下降算法实现一个通用程序，用于找到用户指定的单变量函数的最小值。该程序还应该创建函数的图形，并展示在找到最小值之前找到的所有中间值。（你可能需要参考[图
    7-5](ch07.html#ch7fig5)中的内容，见[第 193 页](ch07.html#page_193)）。
- en: '***#3: Area Between Two Curves***'
  id: totrans-275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***#3: 两条曲线之间的面积***'
- en: We learned that the integral
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学到，积分
- en: '![image](images/e0206-03.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0206-03.jpg)'
- en: expresses the area enclosed by the function *f*(*x*), with the *x*-axis between
    *x* = *a* and *x* = *b*. The area between two curves is thus expressed as the
    integral
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 表示由函数 *f*(*x*) 和 *x* 轴之间的 *x* = *a* 和 *x* = *b* 所围成的面积。两条曲线之间的面积可以表示为积分
- en: '![image](images/e0206-04.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0206-04.jpg)'
- en: where *a* and *b* are the points of intersection of the two curves with *a*
    < *b*. The function *f*(*x*) is referred to as the *upper function* and *g*(*x*)
    as the *lower function*. [Figure 7-9](ch07.html#ch7fig9) illustrates this, assuming
    *f*(*x*) = *x* and *g*(*x*) = *x*², with *a* = 0 and *b* = 1.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '*a* 和 *b* 是两条曲线交点的坐标，且 *a* < *b*。函数 *f*(*x*) 被称为 *上函数*，而 *g*(*x*) 被称为 *下函数*。[图
    7-9](ch07.html#ch7fig9) 展示了这一点，假设 *f*(*x*) = *x*，*g*(*x*) = *x*²，且 *a* = 0，*b*
    = 1。'
- en: Your challenge here is to write a program that will allow the user to input
    any two single-variable functions of *x* and print the enclosed area between the
    two. The program should make it clear that the first function entered should be
    the upper function, and it should also ask for the values of *x* between which
    to find the area.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 你这里的挑战是编写一个程序，允许用户输入任意两个单变量函数 *x*，并打印这两个函数之间围成的面积。程序应明确要求第一个输入的函数为上函数，并询问计算面积的
    *x* 值范围。
- en: '![image](images/f07-09.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-09.jpg)'
- en: '*Figure 7-9: The functions* f*(*x*) =* x *and* g*(*x*) =* x*² enclose an area
    between* x = *0 and* x = *1.0.*'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-9：函数* f*(*x*) =* x * 和 *g*(*x*) =* x*² 在 *x = *0 到 *x = *1* 之间围成的面积。*'
- en: '***#4: Finding the Length of a Curve***'
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***#4: 求曲线长度***'
- en: Let’s say you just completed cycling along a road that looks roughly like [Figure
    7-10](ch07.html#ch7fig10). Because you didn’t have an odometer, you want to know
    whether there’s a mathematical way to determine the distance you cycled. First,
    we’ll need to find an equation—even an approximation will do— that describes this
    path.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你刚刚骑行完一条大致像[图 7-10](ch07.html#ch7fig10)那样的道路。因为你没有里程表，所以你想知道是否有数学方法来确定你骑行的距离。首先，我们需要找到一个方程——即使是近似方程——来描述这条路径。
- en: '![image](images/f07-10.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/f07-10.jpg)'
- en: '*Figure 7-10: An approximation of the cycling path*'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-10：骑行路径的近似图*'
- en: Notice how it looks very similar to the quadratic functions we’ve discussed
    in the earlier chapters? In fact, for this challenge, let’s assume that the equation
    is *y* = *f*(*x*) = 2*x*² + 3*x* + 1 and that you cycled from point *A* (–5, 36)
    to point *B* (10, 231). To find the length of this arc—that is, the distance you
    cycled—we’ll need to calculate the integral
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它看起来和我们在前几章讨论过的二次函数非常相似？事实上，在这个挑战中，假设方程为 *y* = *f*(*x*) = 2*x*² + 3*x* + 1，且你从点
    *A* (–5, 36) 循环到点 *B* (10, 231)。要找到这段弧线的长度——即你骑行的距离——我们需要计算积分
- en: '![image](images/e0208-01.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![image](images/e0208-01.jpg)'
- en: where *y* describes the preceding function. Your challenge here is to write
    a program that will calculate the length of the arc, *AB*.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *y* 描述了前述函数。你这里的挑战是编写一个程序来计算弧线 *AB* 的长度。
- en: You may also want to generalize your solution so that it allows you to find
    the length of the arc between any two points for any arbitrary function, *f*(*x*).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可能想要将你的解决方案泛化，使其能够找到任何两个点之间的弧线长度，适用于任何任意的函数 *f*(*x*)。
