- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: Calculations and Variables
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算与变量
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: Now that you’ve installed Python and know how to start the Python Shell, you’re
    ready to do something with it. We’ll begin with some simple calculations and then
    learn how to use variables. Variables are a way of storing things in a computer
    program, and they can help you write useful programs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 Python，并且知道如何启动 Python Shell，你准备开始使用它了。我们将从一些简单的计算开始，然后学习如何使用变量。变量是用来在计算机程序中存储数据的，它们能帮助你编写有用的程序。
- en: Calculating with Python
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 进行计算
- en: Normally, when asked to find the product of two numbers like 8 × 3.57, you would
    use a calculator or a pencil and paper. Well, how about using the Python Shell
    to perform your calculation? Let’s try it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当要求找出两个数字的积，例如 8 × 3.57，你会使用计算器或铅笔和纸。那么，如何使用 Python Shell 来进行这个计算呢？我们试试看。
- en: 'Start the Python Shell by double-clicking the IDLE icon on your desktop, or
    if you’re using Ubuntu, click the IDLE icon in the Applications menu. At the prompt,
    enter this calculation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 双击桌面上的 IDLE 图标启动 Python Shell，或者如果你使用的是 Ubuntu，可以在应用程序菜单中点击 IDLE 图标。在提示符下，输入这个计算：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When entering a multiplication calculation in Python, you use the asterisk symbol
    (*) instead of a multiplication sign (×).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中输入乘法计算时，你需要使用星号符号（*）而不是乘号（×）。
- en: How about we try an equation that’s a bit more useful?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来试试一个更有用的方程怎么样？
- en: Suppose you are digging in your backyard and uncover a bag of 20 gold coins.
    The next day, you sneak down to the basement and stick the coins inside your grandfather’s
    steam-powered replicating invention (luckily, you can *just* fit the 20 coins
    inside). You hear a whiz and a pop and, a few hours later, out shoot another 10
    gleaming coins.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在后院挖掘，发现了一个装有 20 枚金币的袋子。第二天，你偷偷跑到地下室，把金币放进了你祖父的蒸汽驱动复制机器里（幸运的是，你可以*刚好*把 20
    枚金币塞进去）。你听到了一阵嗖嗖声和一声爆响，几个小时后，又飞出另外 10 枚闪闪发光的金币。
- en: 'How many coins would you have in your treasure chest if you did this every
    day for a year? On paper, the equations might look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你每天都这样做一年，你的宝箱里会有多少枚金币？在纸面上，这些方程可能长得像这样：
- en: 10 × 365 = 3650
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 10 × 365 = 3650
- en: 3650 + 20 = 3670
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 3650 + 20 = 3670
- en: Sure, it’s easy enough to do these calculations using a calculator or on paper,
    but we can do all of these calculations with the Python Shell as well. First,
    we multiply 10 coins by 365 days in a year to get 3650\. Next, we add the original
    20 coins to get 3670.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，用计算器或者纸笔做这些计算很简单，但我们同样可以用 Python Shell 来做这些计算。首先，我们将 10 枚金币乘以一年 365 天，得到
    3650。接着，我们再加上原来的 20 枚金币，得到 3670。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, what if a raven spots the shiny gold sitting in your bedroom, and every
    week flies in and manages to steal three coins? How many coins would you have
    left at the end of the year? Here’s how this calculation looks in the Python Shell:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果一只乌鸦看到你房间里闪亮的金币，每周飞进来偷走三枚金币，那你一年后还剩多少金币呢？这个计算在 Python Shell 中长得像这样：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First, we multiply 3 coins by 52 weeks in the year. The result is 156\. We subtract
    that number from our total number of coins (3670), which tells us that we would
    have 3514 coins remaining at the end of the year.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将 3 枚金币乘以一年 52 周。结果是 156。然后我们从总金币数（3670）中减去这个数字，得出一年结束时我们剩下的金币数是 3514。
- en: Although you could easily do this calculation with a calculator, working through
    it in the Python Shell is beneficial in learning to write simple computer programs.
    In this book, you’ll learn how to expand on these ideas to write programs that
    are even more useful.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以轻松地用计算器完成这个计算，但通过 Python Shell 来处理它，有助于学习编写简单的计算机程序。在本书中，你将学习如何扩展这些思路，编写更有用的程序。
- en: Python Operators
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 运算符
- en: You can do addition, subtraction, multiplication, and division in the Python
    Shell, among other mathematical operations that we’ll explore later on. The basic
    symbols Python uses to perform mathematical operations, called *operators*, are
    listed in [Table 2-1](ch02.xhtml#ch02tab01).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Python Shell 中进行加法、减法、乘法和除法等数学运算，我们稍后会探索更多其他运算。Python 用来进行数学运算的基本符号，被称为*运算符*，它们列在
    [表 2-1](ch02.xhtml#ch02tab01) 中。
- en: '**Table 2-1:** Basic Python Operators'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2-1：** 基本 Python 运算符'
- en: '| **Symbol** | **Operation** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **运算** |'
- en: '| --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| + | Addition |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| + | 加法 |'
- en: '| - | Subtraction |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| - | 减法 |'
- en: '| * | Multiplication |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| * | 乘法 |'
- en: '| / | Division |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| / | 除法 |'
- en: The *forward slash* (/) is used for division because it’s similar to the division
    line that you would use when writing a fraction. For example, if you had 100 pirates
    and 20 large barrels and you wanted to calculate how many pirates you could hide
    in each barrel, you could divide 100 pirates by 20 barrels (100 ÷ 20) by entering
    100 / 20 in the Python Shell. Just remember that the forward slash is the one
    whose top falls to the right.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜杠*（/）用于除法，因为它类似于你在写分数时使用的除法线。例如，如果你有100个海盗和20个大桶，你想计算每个桶可以藏多少个海盗，你可以通过在Python
    Shell中输入100 / 20来计算100个海盗除以20个桶（100 ÷ 20）。只需要记住，斜杠的上半部分是向右倾斜的。'
- en: The Order of Operations
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运算顺序
- en: We use parentheses in programming languages to control the order of operations.
    An *operation* is anything that uses an operator. Multiplication and division
    have a higher order than addition and subtraction, so they’re performed first.
    In other words, if you enter an equation in Python, multiplication or division
    is performed before addition or subtraction.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在编程语言中使用括号来控制运算顺序。*运算*是任何使用运算符的操作。乘法和除法的优先级高于加法和减法，因此它们会先执行。换句话说，如果你在Python中输入一个方程式，乘法或除法会先于加法或减法执行。
- en: 'For example, in the following equation, the numbers 30 and 20 are multiplied
    first, and the number 5 is added to their product:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的方程中，首先将数字30和20相乘，然后将数字5加到它们的积上：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This equation is another way of saying, “Multiply 30 by 20, and then add 5
    to the result.” The result is 605\. We can change the order of operations by adding
    parentheses around the first two numbers, like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程是另一种表达方式：“将30乘以20，然后将结果加上5。” 结果是605。我们可以通过在前两个数字周围加上括号来改变运算顺序，像这样：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The result of this equation is 700 (not 605) because the parentheses tell Python
    to do the operation in the parentheses first, and then do the operation outside
    the parentheses. This example is saying, “Add 5 to 30, and then multiply the result
    by 20.”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程的结果是700（而不是605），因为括号告诉Python先做括号内的运算，然后再做括号外的运算。这个例子表示：“将5加到30，然后将结果乘以20。”
- en: 'Parentheses can be *nested*, which means that there can be parentheses inside
    parentheses, like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 括号可以*嵌套*，这意味着括号可以嵌套在括号内，像这样：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this case, Python evaluates the innermost parentheses first, then the outer
    ones, and then the final division operator. In other words, this equation is saying,
    “Add 5 to 30, then multiply the result by 20, and divide that result by 10.” Here’s
    what happens:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Python首先计算最内层的括号，然后是外层的括号，最后是除法运算符。换句话说，这个方程表示：“将5加到30，然后将结果乘以20，再将结果除以10。”
    发生了以下情况：
- en: Adding 5 to 30 gives 35.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将5加到30得到35。
- en: Multiplying 35 by 20 gives 700.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将35乘以20得到700。
- en: Dividing 700 by 10 gives the final answer of 70.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将700除以10得到最终答案70。
- en: 'If we had not used parentheses, the result would be slightly different:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有使用括号，结果会稍有不同：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, 30 is first multiplied by 20 (giving 600), and then 600 is divided
    by 10 (giving 60). Finally, 5 is added to get the result of 65.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，30首先乘以20（得到600），然后600除以10（得到60）。最后，加上5得到结果65。
- en: '**NOTE**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Remember that multiplication and division always go before addition and subtraction,
    unless parentheses are used to control the order of operations.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，除非使用括号来控制运算顺序，否则乘法和除法总是先于加法和减法。*'
- en: Variables Are Like Labels
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量就像标签一样
- en: The word *variable* in programming describes a place to store information such
    as numbers, text, lists of numbers and text, and so on. A variable is essentially
    a label for something.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，*变量*一词描述了一个存储信息的地方，如数字、文本、数字和文本的列表等等。变量本质上是某物的标签。
- en: 'For example, to create a variable named fred, we use an equal sign ( = ) and
    then tell Python what information the variable should be the label for. Here,
    we create the variable fred and tell Python that it’s a label for the number 100
    (note that this doesn’t mean that another variable can’t have the same value):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个名为fred的变量，我们使用等号（ = ）然后告诉Python这个变量应该为哪个信息贴上标签。这里，我们创建了变量fred，并告诉Python它是数字100的标签（请注意，这并不意味着另一个变量不能具有相同的值）：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To find the value of a variable, enter print in the Python Shell, followed
    by the variable name in parentheses, like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到一个变量的值，在Python Shell中输入print，然后是变量名并加上括号，像这样：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also tell Python to change the variable fred so that it labels something
    else. For example, here’s how to change fred to the number 200:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以告诉 Python 改变变量 fred 使其标记其他内容。例如，下面是如何将 fred 改为数字 200：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On the first line, we say that fred labels a number 200. In the second line,
    we print the value of fred, just to confirm the change. Python prints the result
    on the last line.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们说 fred 给数字 200 贴上了标签。在第二行，我们打印出 fred 的值，只是为了确认变化。Python 在最后一行打印结果。
- en: 'We can also use more than one label (or variable) for the same item:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为同一项使用多个标签（或变量）：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, we’re telling Python that we want the name (or variable) john
    to label the same thing as fred by using the equal sign between john and fred.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们告诉 Python，我们希望变量 john 和 fred 标签相同的内容，通过在 john 和 fred 之间使用等号。
- en: 'Of course, fred probably isn’t a very useful name for a variable because it
    most likely doesn’t tell us anything about what the variable is used for. Let’s
    call our variable number_of_coins instead of fred, like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，fred 可能不是一个很有用的变量名，因为它很可能并没有告诉我们变量的用途。让我们把变量叫做 number_of_coins，而不是 fred，如下所示：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This makes it clear that we’re talking about 200 coins. Variable names can be
    made up of letters, numbers, and the underscore character ( _ ), but they can’t
    start with a number. You can use anything from single letters (such as a) to long
    sentences for variable names. (A variable can’t contain a space, so use an underscore
    to separate words.) Sometimes, if you’re doing something quick, a short variable
    name is best. The name you choose should depend on how meaningful you need the
    variable name to be.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这清楚地表明我们在讨论 200 枚硬币。变量名可以由字母、数字和下划线（_）组成，但不能以数字开头。你可以使用从单个字母（如 a）到长句子的变量名。（变量名不能包含空格，所以使用下划线分隔单词。）有时，如果你只是做些快速操作，一个简短的变量名会比较好。你选择的变量名应该根据你对变量名的意义要求来定。
- en: Now that you know how to create variables, let’s look at how to use them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了如何创建变量，接下来让我们看看如何使用它们。
- en: Using Variables
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用变量
- en: 'Remember our equation for figuring out how many coins you would have at the
    end of the year if you could magically create new coins with your grandfather’s
    mysterious invention in the basement? We had this equation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们用来计算如果你能用祖父在地下室的神秘发明魔法地创造新硬币，到年底你会有多少硬币的方程吗？我们有这个方程：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can turn that into a single line of code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其转化为一行代码：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That’s not very easy to read, but what if we turn the numbers into variables?
    Try entering the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这不太容易阅读，但如果我们把数字转成变量呢？试试输入以下内容：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These entries create the variables found_coins, magic_coins, and stolen_coins.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些条目创建了变量 found_coins、magic_coins 和 stolen_coins。
- en: 'Now, we can reenter the equation like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以像这样重新输入方程：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can see that this gives us the same answer. So who cares, right? Ah, but
    here’s the magic of variables. What if you stick a scarecrow in your window, and
    the raven steals only two coins instead of three? When we use a variable, we can
    simply change the variable to hold that new number, and it will change everywhere
    it is used in the equation. We can change the stolen_coins variable to 2 by entering
    this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这样我们得到了相同的结果。那么，谁在乎呢，对吧？啊，但这就是变量的魔力。如果你在窗户上放了一个稻草人，而乌鸦只偷了两枚硬币而不是三枚呢？当我们使用变量时，我们只需将变量更改为新的数字，它会在方程式中的所有使用位置自动更新。我们可以通过输入以下内容将
    stolen_coins 变量改为 2：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can then copy and paste the equation to calculate the answer again, like
    so:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以复制并粘贴方程来重新计算结果，如下所示：
- en: Select the text to copy by clicking with the mouse and dragging from the beginning
    to the end of the line, as shown in [Figure 2-1](ch02.xhtml#ch02fig01).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击鼠标并从行首拖动到行尾来选择要复制的文本，如[图 2-1](ch02.xhtml#ch02fig01)所示。
- en: '![Image](Images/02fig01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/02fig01.jpg)'
- en: '*Figure 2-1: Selecting in the Python Shell*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：在 Python Shell 中选择内容*'
- en: Hold down the CTRL key (or, if you’re using a Mac, the COMMAND key ⌘) and press
    C to copy the selected text. (You’ll see this as CTRL-C from now on.)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 CTRL 键（如果你使用的是 Mac，则是 COMMAND 键 ⌘）并按 C 键复制选中的文本。（从现在起你会看到 CTRL-C）。
- en: Click the last prompt line (after stolen_coins = 2).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最后一行提示（在 stolen_coins = 2 后）。
- en: Hold down the CTRL (or COMMAND) key and press V to paste the selected text.
    (You’ll see this as CTRL-V from now on.)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 CTRL（或 COMMAND）键，然后按 V 键粘贴选中的文本。（从现在起你会看到 CTRL-V）。
- en: Press ENTER to see the new result.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 ENTER 键查看新结果。
- en: '![Image](Images/02fig02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/02fig02.jpg)'
- en: '*Figure 2-2: Pasting in the Python Shell*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-2：在 Python Shell 中粘贴内容*'
- en: That’s much easier than retyping the whole equation!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这比重新输入整个方程要简单得多！
- en: 'You can try changing the other variables, and then copy (CTRL-C) and paste
    (CTRL-V) the calculation to see the effect of your changes. For example, if you
    bang the sides of your grandfather’s invention at the right moment, and it spits
    out three extra coins each time, you’ll find that you end up with 4661 coins at
    the end of the year:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试改变其他变量，然后复制（CTRL-C）并粘贴（CTRL-V）计算结果，看看你改变的效果。例如，如果你在正确的时刻敲打你祖父的发明，它每次会吐出三个额外的硬币，你会发现到年底你将得到4661个硬币：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Of course, using variables for a simple equation like this one is still only
    *slightly* useful. We haven’t gotten to *really* useful yet. For now, just remember
    that variables are a way of labeling things so that you can use them later.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于像这样的简单方程使用变量仍然只是*稍微*有用。我们还没有进入*真正*有用的部分。现在，记住变量是标记事物的一种方式，方便你稍后使用它们。
- en: What You Learned
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: In this chapter, you learned how to do simple equations using Python operators
    and how to use parentheses to control the order of operations (the order in which
    Python evaluates the parts of the equations). We then created variables to label
    values and used those variables in our calculations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Python 运算符进行简单的方程计算，以及如何使用括号来控制运算顺序（即 Python 评估方程各部分的顺序）。接着，我们创建了变量来标记值，并在计算中使用了这些变量。
