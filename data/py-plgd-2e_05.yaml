- en: '[3](nsp-venkitachalam503045-0008.xhtml#rch03)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[3](nsp-venkitachalam503045-0008.xhtml#rch03)'
- en: Conway’s Game of Life
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 康威生命游戏
- en: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-circle-image.jpg)'
- en: You can use a computer to study a system by creating a mathematical model for
    that system, writing a program to represent the model, and then letting the model
    evolve over time. There are many kinds of computer simulations, but I’ll focus
    on a famous one called Conway’s Game of Life, the work of the British mathematician
    John Conway. The Game of Life is an example of a *cellular automaton*, a collection
    of colored cells on a grid that evolve through a number of time steps according
    to a set of rules defining the states of neighboring cells.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过创建该系统的数学模型，编写程序来表示模型，然后让模型随时间演化来用计算机研究一个系统。计算机仿真有很多种，但我将专注于一个著名的仿真——康威的生命游戏，这是英国数学家约翰·康威的工作。生命游戏是一个*细胞自动机*的例子，细胞自动机是网格上由一组彩色细胞组成的集合，通过一系列时间步长根据规则定义相邻细胞的状态而演化。
- en: In this project, you’ll create an *N*×*N* grid of cells and simulate the evolution
    of the system over time by applying the rules of Conway’s Game of Life. You’ll
    display the state of the game at each time step and provide ways to save the output
    to a file. You’ll set the initial condition of the system to either a random distribution
    or a predesigned pattern.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个 *N*×*N* 的细胞网格，并通过应用康威生命游戏的规则来模拟系统随时间的演变。你将显示每个时间步长的游戏状态，并提供将输出保存到文件的方法。你将把系统的初始状态设置为随机分布或预先设计的模式。
- en: 'This simulation consists of the following components:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仿真由以下几个组件组成：
- en: • A property defined in one- or two-dimensional space
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 在一维或二维空间中定义的属性
- en: • A mathematical rule to change this property for each step in the simulation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个数学规则，用于在仿真中的每一步改变这一属性
- en: • A way to display or capture the state of the system as it evolves
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 显示或捕捉系统随时间演变状态的方法
- en: The cells in Conway’s Game of Life can be either ON or OFF. The game starts
    with an initial condition, in which each cell is assigned one of these states.
    Then, mathematical rules determine how each cell’s state will change over time.
    The amazing thing about Conway’s Game of Life is that with just four simple rules
    the system evolves to produce patterns that behave in incredibly complex ways,
    almost as if they were alive. Patterns include “gliders” that slide across the
    grid, “blinkers” that flash on and off, and even replicating patterns.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 康威生命游戏中的细胞可以是开（ON）或关（OFF）。游戏从一个初始状态开始，在这个状态下，每个细胞都被分配到这两种状态之一。然后，数学规则决定每个细胞状态如何随时间变化。康威生命游戏的神奇之处在于，仅凭四个简单的规则，系统就能演变出极其复杂的模式，几乎仿佛它们是活的。这些模式包括“滑翔者”在网格中滑动，“闪烁器”开关闪烁，甚至是自复制的模式。
- en: Of course, the philosophical implications of this game are also significant
    because they suggest that complex structures can evolve from simple rules without
    following any sort of preset pattern.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个游戏的哲学意义也非常重大，因为它表明复杂的结构可以从简单的规则中演化出来，而不必遵循任何预设模式。
- en: 'Here are some of the main concepts covered in this project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本项目中涵盖的一些主要概念：
- en: • Using `matplotlib imshow` to represent a 2D grid of data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用`matplotlib imshow`来表示二维数据网格
- en: • Using `matplotlib` for animation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用`matplotlib`进行动画处理
- en: • Using the `numpy` array
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用`numpy`数组
- en: • Using the `%` operator for boundary conditions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用 `%` 运算符处理边界条件
- en: • Setting up a random distribution of values
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 设置随机值分布
- en: '[How It Works](nsp-venkitachalam503045-0008.xhtml#rah0501)'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[它是如何工作的](nsp-venkitachalam503045-0008.xhtml#rah0501)'
- en: Because the Game of Life is built on a grid of nine squares, every cell has
    eight neighboring cells, as shown in [Figure 3-1](nsp-venkitachalam503045-0015.xhtml#fig3-1).
    A given cell (*i*, *j*) in the simulation is accessed on a grid [*i*][*j*], where
    *i* and *j* are the row and column indices, respectively. The value of a given
    cell at a given instant of time depends on the state of its neighbors at the previous
    time step.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因为生命游戏是基于九个方格的网格构建的，所以每个细胞都有八个相邻的细胞，如[图 3-1](nsp-venkitachalam503045-0015.xhtml#fig3-1)所示。仿真中给定的细胞
    (*i*, *j*) 在网格 [*i*][*j*] 上访问，其中 *i* 和 *j* 分别是行和列的索引。给定时刻某个细胞的值依赖于前一个时间步长中其相邻细胞的状态。
- en: '![](images/nsp-venkitachalam503045-f03001.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03001.jpg)'
- en: 'Figure 3-1: A central cell (*i*, *j*) with eight neighboring cells'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1：一个中心细胞 (*i*, *j*) 和其八个相邻的细胞
- en: 'Conway’s Game of Life has four rules:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 康威的生命游戏有四个规则：
- en: 1\. If a cell is ON and has fewer than two neighbors that are ON, it turns OFF.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 如果一个单元格为开启状态且有少于两个相邻单元格为开启状态，则该单元格会变为关闭状态。
- en: 2\. If a cell is ON and has either two or three neighbors that are ON, it remains
    ON.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 如果一个单元格为开启状态且有两个或三个相邻单元格为开启状态，则该单元格保持开启状态。
- en: 3\. If a cell is ON and has more than three neighbors that are ON, it turns OFF.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3\. 如果一个单元格为开启状态且有超过三个相邻单元格为开启状态，则该单元格会变为关闭状态。
- en: 4\. If a cell is OFF and has exactly three neighbors that are ON, it turns ON.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4\. 如果一个单元格为关闭状态且有恰好三个相邻单元格为开启状态，则该单元格会变为开启状态。
- en: 'These rules are meant to mirror some basic ways that a group of organisms might
    fare over time: underpopulation and overpopulation kill cells by turning a cell
    OFF when it has fewer than two neighbors or more than three, but when the population
    is balanced, cells stay ON and reproduce by turning another cell from OFF to ON.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则旨在模拟群体生物随时间变化的基本方式：人口过少和过多会通过在单元格相邻单元格少于两个或多于三个时将单元格关闭来杀死细胞；但当人口平衡时，细胞保持开启状态并通过将另一个单元格从关闭状态变为开启状态来繁殖。
- en: I said that each cell has eight neighboring cells, but what about cells at the
    edge of the grid? Which cells are their neighbors? To answer this question, you
    need to think about *boundary conditions*, the rules that govern what happens
    to cells at the edges or boundaries of the grid. I’ll address this question by
    using *toroidal boundary conditions*, meaning that the square grid wraps around
    as if its shape were a torus. As shown in [Figure 3-2](nsp-venkitachalam503045-0015.xhtml#fig3-2),
    the grid is first warped so that its horizontal edges (A and B) join to form a
    cylinder, and then the cylinder’s vertical edges (C and D) are joined to form
    a torus. Once the torus has been formed, all cells have neighbors because the
    whole space has no edge.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过每个单元格有八个邻居单元格，但对于网格边缘的单元格呢？它们的邻居是谁？为了解答这个问题，你需要考虑*边界条件*，即支配网格边缘或边界上单元格行为的规则。我将通过使用*环形边界条件*来回答这个问题，这意味着方形网格会像圆环一样环绕。正如[图3-2](nsp-venkitachalam503045-0015.xhtml#fig3-2)所示，网格首先被弯曲，使其水平边缘（A
    和 B）连接形成一个圆柱，然后圆柱的垂直边缘（C 和 D）连接形成一个环面。一旦环面形成，所有单元格都有邻居，因为整个空间没有边界。
- en: '![](images/nsp-venkitachalam503045-f03002.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03002.jpg)'
- en: 'Figure 3-2: A conceptual visualization of toroidal boundary conditions'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-2：环形边界条件的概念可视化
- en: 'Toroidal boundary conditions are common in 2D simulations and games. For example,
    the game *Pac-Man* uses them. If you go off the top of the screen, you reappear
    on the bottom. If you go off the left side of the screen, you reappear on the
    right side. You’ll follow the same logic for the Game of Life simulation: for
    the cell in the top-left corner of the grid, for example, the neighbor directly
    above it will be the cell in the bottom-left corner, and the neighbor directly
    to the left of it will be in the cell in the top-right corner.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 环形边界条件在二维模拟和游戏中很常见。例如，游戏*吃豆人*就使用了这种边界条件。如果你从屏幕顶部走出，你会从底部重新出现。如果你从屏幕的左侧走出，你会从右侧重新出现。对于“生命游戏”的模拟，你也会遵循相同的逻辑：例如，对于网格的左上角单元格，其上方的邻居将是左下角的单元格，其左侧的邻居将是右上角的单元格。
- en: 'Here’s a description of the algorithm you’ll use to apply the four rules and
    run the simulation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将用于应用这四个规则并运行模拟的算法描述：
- en: 1\. Initialize the cells in the grid.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 初始化网格中的单元格。
- en: '2\. At each time step in the simulation, for each cell (*i*, *j*) in the grid,
    do the following:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 在每次模拟的时间步长中，对于网格中的每个单元格（*i*, *j*），执行以下操作：
- en: a. Update the value of cell (*i*, *j*) based on its neighbors, taking into account
    the boundary conditions.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: a. 根据邻居的状态更新单元格（*i*, *j*）的值，同时考虑边界条件。
- en: b. Update the display of grid values.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: b. 更新网格值的显示。
- en: '[Requirements](nsp-venkitachalam503045-0008.xhtml#rah0502)'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[需求](nsp-venkitachalam503045-0008.xhtml#rah0502)'
- en: You’ll use `numpy` arrays and the `matplotlib` library to display the simulation
    output, and you’ll use the `matplotlib` `animation` module to update the simulation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用`numpy`数组和`matplotlib`库来显示模拟输出，并使用`matplotlib`的`animation`模块来更新模拟。
- en: '[The Code](nsp-venkitachalam503045-0008.xhtml#rah0503)'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[代码](nsp-venkitachalam503045-0008.xhtml#rah0503)'
- en: We’ll examine key aspects of the program piece by piece, including how to represent
    the simulation grid using `numpy` and `matplotlib`, how to set the initial conditions
    for the simulation, how to account for toroidal boundary conditions, and how to
    implement the Game of Life rules. We’ll also look at the program’s `main()` function,
    which sends command line arguments to the program and sets the simulation into
    motion. To see the full project code, skip ahead to [“The Complete Code”](nsp-venkitachalam503045-0015.xhtml#ah0507)
    on [page 56](nsp-venkitachalam503045-0015.xhtml#p56). You can also download the
    code from [https://github.com/mkvenkit/pp2e/tree/main/conway](https://github.com/mkvenkit/pp2e/tree/main/conway).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步分析程序的关键部分，包括如何使用`numpy`和`matplotlib`表示仿真网格，如何设置仿真的初始条件，如何处理环形边界条件，以及如何实现《生命游戏》规则。我们还将看看程序的`main()`函数，该函数将命令行参数传递给程序并启动仿真。要查看完整的项目代码，请跳转到[“完整代码”](nsp-venkitachalam503045-0015.xhtml#ah0507)部分，位于[第56页](nsp-venkitachalam503045-0015.xhtml#p56)。你也可以从[https://github.com/mkvenkit/pp2e/tree/main/conway](https://github.com/mkvenkit/pp2e/tree/main/conway)下载代码。
- en: '[Representing the Grid](nsp-venkitachalam503045-0008.xhtml#rbh0501)'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[表示网格](nsp-venkitachalam503045-0008.xhtml#rbh0501)'
- en: 'To represent whether a cell is alive (ON) or dead (OFF) on the grid, you’ll
    use the values `255` and `0` for ON and OFF, respectively. You’ll display the
    current state of the grid using the `imshow()` method in `matplotlib`, which represents
    a matrix of numbers as an image. To get a feel for how it works, let’s try a simple
    example inside the Python interpreter. Enter the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示网格上一个单元格是生存（ON）还是死亡（OFF），你将分别使用`255`和`0`来表示ON和OFF。你将使用`matplotlib`中的`imshow()`方法显示网格的当前状态，该方法将一个数字矩阵表示为图像。为了了解它是如何工作的，我们在Python解释器中尝试一个简单的例子。输入以下内容：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You define a 2D `numpy` array of shape (3, 3) ❶, meaning the array has three
    rows and three columns. Each element of the array is an integer value. You then
    use the `plt.imshow()` method to display this matrix of values as an image ❷,
    passing in the interpolation option as `'nearest'` to get sharp edges for the
    cells (otherwise, they’d be fuzzy). [Figure 3-3](nsp-venkitachalam503045-0015.xhtml#fig3-3)
    shows the output of this code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你定义了一个形状为(3, 3)的二维`numpy`数组❶，这意味着该数组有三行三列。数组的每个元素是一个整数值。然后，你使用`plt.imshow()`方法将这个数值矩阵显示为图像❷，并传递插值选项`'nearest'`以获得单元格的锐利边缘（否则它们会模糊）。[图3-3](nsp-venkitachalam503045-0015.xhtml#fig3-3)显示了此代码的输出。
- en: '![](images/nsp-venkitachalam503045-f03003.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03003.jpg)'
- en: 'Figure 3-3: Displaying a grid of values'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-3：显示值的网格
- en: Notice that squares with a value of `0` (OFF) are given a darker color, while
    squares with a value of `255` (ON) are given a lighter color.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，值为`0`（OFF）的方格会显示较暗的颜色，而值为`255`（ON）的方格会显示较亮的颜色。
- en: '[Setting the Initial Conditions](nsp-venkitachalam503045-0008.xhtml#rbh0502)'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[设置初始条件](nsp-venkitachalam503045-0008.xhtml#rbh0502)'
- en: To begin the simulation, set an initial state for each cell in the 2D grid.
    You can use a random distribution of ON and OFF cells and see what kinds of patterns
    emerge, or you can add some specific patterns and see how they evolve. We’ll look
    at both approaches.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始仿真，首先为二维网格中的每个单元格设置初始状态。你可以使用随机分布的ON和OFF单元格，观察出现的各种模式，或者你可以添加一些特定的模式，看看它们如何演化。我们将讨论这两种方法。
- en: 'For a random initial state, use the `choice()` method from the `random` module
    in `numpy`. Enter the following in the Python interpreter to see how it works:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置随机的初始状态，可以使用`numpy`中的`random`模块的`choice()`方法。在Python解释器中输入以下内容以查看其工作原理：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be something like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于这样：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`np.random.choice()` chooses a value from the given list `[0, 255]`, with the
    probability of the appearance of each value given in the parameter `p=[0.1, 0.9]`.
    Here you ask for 0 to appear with a probability of 0.1 (or 10 percent) and for
    255 to appear with a probability of 90 percent. (The two values in `p` must add
    up to 1.) The `choice()` method creates a one-dimensional array, in this case
    with 16 values (specified with `4*4`). You use `reshape()` to make it a two-dimensional
    array with four rows and four columns.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.random.choice()`从给定的列表`[0, 255]`中选择一个值，选择每个值的概率由参数`p=[0.1, 0.9]`给定。在这里，你要求0出现的概率为0.1（或10%），要求255出现的概率为90%。(`p`中的两个值之和必须为1。)
    `choice()`方法创建一个一维数组，在此例中包含16个值（由`4*4`指定）。你使用`reshape()`将其转换为一个具有四行四列的二维数组。'
- en: 'To set up the initial condition to match a particular pattern instead of just
    filling in a random set of values, first use `np.zeros()` to initialize the grid
    with all zeros:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置初始条件以匹配特定的模式，而不是仅仅填充一组随机值，首先使用 `np.zeros()` 初始化网格，将所有单元格设置为零：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This creates an *N*×*N* array of zeros. Now define a function to add a pattern
    at a particular row and column in the grid:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个 *N*×*N* 的零值数组。现在，定义一个函数，在网格的特定行和列添加一个模式：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You define the glider pattern (an observed pattern that moves steadily across
    the grid) using a `numpy` array of shape (3, 3) ❶. Then you use the `numpy` slice
    operation to copy the `glider` array into the simulation’s two-dimensional grid
    ❷, with the pattern’s top-left corner placed at the coordinates you specify as
    `i` and `j`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你定义了一个滑翔机模式（一个在网格中稳定移动的观察模式），使用形状为 (3, 3) 的 `numpy` 数组 ❶。然后你使用 `numpy` 切片操作，将
    `glider` 数组复制到模拟的二维网格中 ❷，并将模式的左上角放置在你指定的坐标（`i` 和 `j`）位置。
- en: 'Now you can add a glider pattern to the grid of zeros with a call to the `addGlider()`
    function you just defined:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过调用你刚才定义的 `addGlider()` 函数，将滑翔机模式添加到零值网格中：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You specify coordinates of (1, 1) to add the glider near the top-left corner
    of the grid, which is (0, 0). Note that for `grid[i, j]`, `i` starts at `0` and
    runs from top to bottom, and `j` starts at `0` and runs from left to right.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你指定坐标（1, 1）将滑翔机添加到网格的左上角附近（即坐标为 (0, 0)）。注意，对于 `grid[i, j]`，`i` 从 `0` 开始并向下运行，而
    `j` 从 `0` 开始并向右运行。
- en: '[Enforcing the Boundary Conditions](nsp-venkitachalam503045-0008.xhtml#rbh0503)'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[强制边界条件](nsp-venkitachalam503045-0008.xhtml#rbh0503)'
- en: 'Now we can think about how to implement the toroidal boundary conditions. First,
    let’s see what happens at the right edge of a grid of size *N*×*N*. The cell at
    the end of row *i* is accessed as `grid[i, N-1]`. Its neighbor to the right is
    `grid[i, N]`, but according to the toroidal boundary conditions, the value accessed
    as `grid[i, N]` should be replaced by `grid[i, 0]`. Here’s one way to do that:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以考虑如何实现环形边界条件。首先，让我们看看在一个 *N*×*N* 大小的网格的右边缘发生了什么。第 *i* 行的最后一个单元格可以通过 `grid[i,
    N-1]` 访问。它右侧的邻居是 `grid[i, N]`，但根据环形边界条件，访问 `grid[i, N]` 时应该用 `grid[i, 0]` 替代。下面是一种实现方式：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Of course, you’d need to apply similar boundary conditions to the left, top,
    and bottom sides of the grid, but doing so would require adding a lot more code
    because each of the four edges of the grid would need to be tested. A much more
    compact way to implement the boundary conditions is with Python’s modulus (`%`)
    operator, demonstrated here in the Python interpreter:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你还需要在网格的左侧、上侧和下侧应用类似的边界条件，但这样做需要添加更多的代码，因为网格的四个边都需要进行测试。一个更简洁的实现边界条件的方式是使用
    Python 的取模（`%`）操作符，这里在 Python 解释器中演示了这一点：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see, the `%` operator gives the remainder for the integer division
    by `N`. In this example, `15%16` yields `15`, but `16%16` yields `0`. You can
    use the `%` operator to make the values wrap around at the right edge by rewriting
    the grid access code like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`%` 操作符给出了整数除法的余数，除数为 `N`。在这个例子中，`15%16` 结果是 `15`，而 `16%16` 结果是 `0`。你可以通过重写网格访问代码来使用
    `%` 操作符，让值在右边界处回绕，像这样：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now when a cell is on the edge of the grid (in other words, when `j = N-1`),
    asking for the cell to the right with this method will give you `(j+1)%N`, which
    sets `j` back to `0`, making the right side of the grid wrap to the left side.
    When you do the same for the bottom of the grid, it wraps around to the top:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当一个单元格位于网格的边缘时（也就是说，当 `j = N-1` 时），使用这种方法请求右侧的单元格将得到 `(j+1)%N`，这会将 `j` 重置为
    `0`，使网格的右侧回绕到左侧。当你对网格的底部做同样的处理时，它会回绕到顶部：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Implementing the Rules](nsp-venkitachalam503045-0008.xhtml#rbh0504)'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[实现规则](nsp-venkitachalam503045-0008.xhtml#rbh0504)'
- en: 'The rules of the Game of Life are based on the number of neighboring cells
    that are ON or OFF. To simplify the application of these rules, you can just calculate
    the total number of neighboring cells in the ON state. Because ON corresponds
    to a value of 255, simply sum the values of all the neighbors and divide by 255
    to get the number of ON cells. Here’s the relevant code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 生命游戏的规则基于邻居单元格的开（ON）或关（OFF）状态。为了简化这些规则的应用，你只需要计算邻居单元格中开（ON）状态的数量。因为开（ON）对应的值为
    255，只需将所有邻居单元格的值相加，然后除以 255，就能得到开（ON）单元格的数量。以下是相关代码：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For any given cell (*i*, *j*), you sum the value of its eight neighbors, using
    the `%` operator to account for toroidal boundary conditions. Dividing the result
    by 255 gives you the number of neighbors that are ON, which you store in the variable
    `total`. Now you can use `total` to apply the Game of Life rules:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的单元格(*i*, *j*)，你通过使用`%`运算符来考虑环形边界条件，求出其八个相邻单元格的值之和。将结果除以255即可得到开启状态的相邻单元格数量，这个值存储在变量`total`中。现在你可以使用`total`来应用生命游戏的规则：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Any cell that is ON is turned OFF if it has fewer than two neighbors that are
    ON or if it has more than three neighbors that are ON ❶. The code in the `else`
    branch applies only to OFF cells: a cell is turned ON if exactly three neighbors
    are ON ❷. The changes are applied to the corresponding cells in `newGrid`, which
    starts as a copy of `grid`. Once every cell has been evaluated and updated, `newGrid`
    contains the data for displaying the next time step in the simulation. You can’t
    make changes directly to `grid`, or the states of the cells would keep changing
    as you try to evaluate them.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 任何处于开启状态的单元格，如果其相邻单元格中开启的数量少于两个，或者多于三个，则会被关闭❶。`else`分支中的代码仅应用于关闭状态的单元格：如果恰好有三个相邻单元格处于开启状态，则该单元格会被开启❷。这些变化会被应用到`newGrid`中的对应单元格，`newGrid`最初是`grid`的副本。一旦每个单元格都被评估和更新，`newGrid`就包含了展示仿真下一时间步的数据。你不能直接修改`grid`，否则在评估单元格时它们的状态会不断变化。
- en: '[Sending Command Line Arguments to the Program](nsp-venkitachalam503045-0008.xhtml#rbh0505)'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[向程序传递命令行参数](nsp-venkitachalam503045-0008.xhtml#rbh0505)'
- en: 'Now you can begin writing the `main()` function of the simulation, which starts
    by sending command line arguments to the program:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始编写仿真程序的`main()`函数，它首先将命令行参数传递给程序：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You create an `argparse.ArgumentParser` object to add command line options to
    the code ❶, and then you add various options to it in the following lines. The
    option at ❷ specifies the simulation grid size *N*, and the option at ❸ sets the
    animation update interval in milliseconds. You also create an option to start
    the simulation with a glider pattern ❹. If this option isn’t set, the simulation
    will start with random ON and OFF values.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个`argparse.ArgumentParser`对象来为代码添加命令行选项❶，然后在接下来的行中为它添加了各种选项。❷处的选项指定了仿真网格大小*N*，❸处的选项设置了动画更新间隔（毫秒）。你还创建了一个选项，用于以滑行器模式启动仿真❹。如果没有设置此选项，仿真将以随机的开启和关闭状态开始。
- en: '[Initializing the Simulation](nsp-venkitachalam503045-0008.xhtml#rbh0506)'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[初始化仿真](nsp-venkitachalam503045-0008.xhtml#rbh0506)'
- en: 'Continuing through the `main()` function, you come to the following section,
    which initializes the simulation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 继续编写`main()`函数，你会看到以下部分，它初始化了仿真：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This portion of the code applies any parameters called at the command line,
    once the command line options have been parsed. First, a default grid size of
    100×100 cells ❶ and an update interval of 50 milliseconds ❷ are set, in case these
    options aren’t set at the command line. Then you set up the initial conditions,
    either a random pattern by default ❹ or a glider pattern ❸.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分代码应用在命令行传入的任何参数，一旦命令行选项被解析。首先，设置默认的网格大小为100×100单元格❶和50毫秒的更新时间间隔❷，以防这些选项没有在命令行中设置。然后，你设置初始条件，默认情况下是一个随机模式❹，或者是一个滑行器模式❸。
- en: 'Finally, you set up the animation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你设置动画：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Still within the `main()` function, you configure the `matplotlib` plot and
    animation parameters ❶. Then you set `animation.FuncAnimation()` to regularly
    call the function `update()`, defined earlier in the program, which updates the
    grid according to the rules of Conway’s Game of Life using toroidal boundary conditions
    ❷.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`main()`函数中，你配置`matplotlib`绘图和动画参数❶。然后，你设置`animation.FuncAnimation()`，定期调用程序前面定义的`update()`函数，该函数根据康威的“生命游戏”规则，使用环形边界条件更新网格❷。
- en: '[Running the Game of Life Simulation](nsp-venkitachalam503045-0008.xhtml#rah0504)'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[运行生命游戏仿真](nsp-venkitachalam503045-0008.xhtml#rah0504)'
- en: 'Now run the code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行代码：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This uses the default parameters for the simulation: a grid of 100×100 cells
    and an update interval of 50 milliseconds. As you watch the simulation, you’ll
    see how it progresses to create and sustain various patterns over time, as in
    [Figure 3-4 (a) and (b)](nsp-venkitachalam503045-0015.xhtml#fig3-4).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了仿真的默认参数：一个100×100的单元格网格和50毫秒的更新时间间隔。当你观看仿真时，你将看到它如何发展，随着时间的推移创造并维持各种模式，如[图3-4
    (a)和(b)](nsp-venkitachalam503045-0015.xhtml#fig3-4)所示。
- en: '![](images/nsp-venkitachalam503045-f03004a.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03004a.jpg)'
- en: (a)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: (a)
- en: '![](images/nsp-venkitachalam503045-f03004b.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03004b.jpg)'
- en: (b)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: (b)
- en: 'Figure 3-4: The Game of Life in progress'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-4：生命游戏的进行状态
- en: '[Figure 3-5](nsp-venkitachalam503045-0015.xhtml#fig3-5) shows some of the patterns
    to look for in the simulation. Besides the glider, look for a three-cell blinker
    and static patterns such as a block or loaf shape.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-5](nsp-venkitachalam503045-0015.xhtml#fig3-5)展示了模拟中需要注意的几种模式。除了滑翔机外，还可以观察到三格闪烁器和一些静态模式，如块状或面包形状。'
- en: '![](images/nsp-venkitachalam503045-f03005.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03005.jpg)'
- en: 'Figure 3-5: Some patterns in the Game of Life'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-5：生命游戏中的一些模式
- en: 'Now change things up a bit by running the simulation with these parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在稍微改变一下，通过以下参数运行模拟：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This creates a simulation grid of 32×32, updates the animation every 500 milliseconds,
    and uses the initial glider pattern shown in the bottom right of [Figure 3-5](nsp-venkitachalam503045-0015.xhtml#fig3-5).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建一个32×32的模拟网格，每500毫秒更新一次动画，并使用右下角[图 3-5](nsp-venkitachalam503045-0015.xhtml#fig3-5)中显示的初始滑翔机模式。
- en: '[Summary](nsp-venkitachalam503045-0008.xhtml#rah0505)'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[总结](nsp-venkitachalam503045-0008.xhtml#rah0505)'
- en: In this project, you explored Conway’s Game of Life. You learned how to set up
    a basic computer simulation based on some rules and how to use `matplotlib` to
    visualize the state of the system as it evolves.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你探索了康威的生命游戏。你学习了如何基于一些规则设置基本的计算机模拟，并且如何使用`matplotlib`来可视化系统在演变过程中的状态。
- en: My implementation of Conway’s Game of Life emphasizes simplicity over performance.
    You can speed up the computations in the Game of Life in many different ways,
    and a tremendous amount of research has been done on how to do this. You’ll find
    a lot of this research through a quick internet search.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我对康威生命游戏的实现强调简洁性而非性能。你可以通过多种方式加速生命游戏中的计算，关于如何做到这一点已经有大量的研究。你可以通过快速的互联网搜索找到许多相关的研究。
- en: '[Experiments!](nsp-venkitachalam503045-0008.xhtml#rah0506)'
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[实验！](nsp-venkitachalam503045-0008.xhtml#rah0506)'
- en: 'Here are some ways to experiment further with Conway’s Game of Life:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些进一步实验康威生命游戏的方法：
- en: 1\. Write an `addGosperGun()` method to add the pattern shown in [Figure 3-6](nsp-venkitachalam503045-0015.xhtml#fig3-6)
    to the grid. This pattern is called the *Gosper Glider Gun*. Run the simulation
    and observe what the gun does.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 编写一个`addGosperGun()`方法，将[图 3-6](nsp-venkitachalam503045-0015.xhtml#fig3-6)中显示的模式添加到网格中。这个模式被称为*Gosper
    滑翔机枪*。运行模拟并观察枪的行为。
- en: '![](images/nsp-venkitachalam503045-f03006.jpg)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](images/nsp-venkitachalam503045-f03006.jpg)'
- en: 'Figure 3-6: The Gosper Glider Gun'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3-6：Gosper 滑翔机枪
- en: '2\. Write a `readPattern()` method that reads in an initial pattern from a
    text file and uses it to set the initial conditions for the simulation. You can
    use Python methods such as `open` and `file.read` to do this. Here’s a suggested
    format for the input file:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 编写一个`readPattern()`方法，从文本文件中读取初始模式，并用它设置模拟的初始条件。你可以使用 Python 方法，如`open`和`file.read`来实现这一点。以下是输入文件的建议格式：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first line of the file defines *N*, and the rest of the file is just *N*×*N*
    integers (0 or 255) separated by whitespace. This exploration will help you study
    how any given pattern evolves with the rules of the Game of Life. Add a `--pattern-file`
    command line option to use this file while running the program.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件的第一行定义了*N*，其余部分是*N*×*N*的整数（0或255），并用空格分隔。这个探索将帮助你研究任何给定模式在生命游戏规则下是如何演变的。添加一个`--pattern-file`命令行选项，在运行程序时使用这个文件。
- en: '[The Complete Code](nsp-venkitachalam503045-0008.xhtml#rah0507)'
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[完整代码](nsp-venkitachalam503045-0008.xhtml#rah0507)'
- en: 'Here’s the complete code for the Game of Life project:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是生命游戏项目的完整代码：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
