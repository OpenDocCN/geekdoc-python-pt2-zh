- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: MAKING TEDIOUS ARITHMETIC FUN WITH LISTS AND LOOPS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用列表和循环让枯燥的算术变得有趣
- en: '*“You mean I have to go again tomorrow?” —Aidan Farrell after the first day
    of school*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*“你是说我明天还得再去一遍？”—艾丹·法雷尔在第一天上学后*'
- en: '![image](../images/fintro-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/fintro-01.jpg)'
- en: 'Most people think of doing arithmetic when they think of math: adding, subtracting,
    multiplying, and dividing. Although doing arithmetic is pretty easy using calculators
    and computers, it can still involve a lot of repetitive tasks. For example, to
    add 20 different numbers using a calculator, you have to enter the + operator
    19 times!'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在想到数学时，首先会想到算术：加法、减法、乘法和除法。尽管使用计算器和计算机做算术非常简单，但它仍然可能涉及许多重复性的任务。例如，使用计算器加20个不同的数字时，你必须输入+运算符19次！
- en: In this chapter you learn how to automate some of the tedious parts of arithmetic
    using Python. First, you learn about math operators and the different data types
    you can use in Python. Then you learn how to store and calculate values using
    variables. You also learn to use lists and loops to repeat code. Finally, you
    combine these programming concepts to write functions that automatically perform
    complicated calculations for you. You’ll see that Python can be a much more powerful
    calculator than any calculator you can buy—and best of all, it’s free!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你将学习如何使用Python自动化一些繁琐的算术部分。首先，你将了解数学运算符和Python中可以使用的不同数据类型。接着，你将学习如何使用变量存储和计算值。你还将学习如何使用列表和循环来重复代码。最后，你将结合这些编程概念，编写函数，自动执行复杂的计算。你将发现，Python比任何你可以买到的计算器都更强大——最棒的是，它是免费的！
- en: BASIC OPERATORS
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本运算符
- en: 'Doing arithmetic in the interactive Python shell is easy: you just enter the
    expression and press ENTER when you want to do the calculation. Table 2-1 shows
    some of the most common mathematical operators.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式Python shell中做算术很简单：你只需输入表达式，按回车键即可进行计算。表2-1展示了一些最常见的数学运算符。
- en: '**Table 2-1:** Common Mathematical Operators in Python'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**表2-1：** Python中的常见数学运算符'
- en: '| **Operator** | **Syntax** |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **语法** |'
- en: '| Addition | + |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 加法 | + |'
- en: '| Subtraction | – |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 减法 | – |'
- en: '| Multiplication | * |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 乘法 | * |'
- en: '| Division | / |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 除法 | / |'
- en: '| Exponent | ** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | ** |'
- en: Open your Python shell and try out some basic arithmetic with the example in
    [Listing 2-1](ch02.xhtml#ch02list1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的Python shell，并试着运行[清单2-1](ch02.xhtml#ch02list1)中的一些基本算术。
- en: '>>> 23 + 56  #Addition'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 23 + 56  #加法'
- en: '79'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '79'
- en: '>>> 45 * 89  #Multiplication is with an asterisk'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 45 * 89  #乘法使用星号'
- en: '4005'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '4005'
- en: '>>> 46 / 13  #Division is with a forward slash'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 46 / 13  #除法使用正斜杠'
- en: '3.5384615384615383'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '3.5384615384615383'
- en: '>>> 2 ** 4   #2 to the 4th power'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 2 ** 4   #2的四次方'
- en: '16'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '*Listing 2-1: Trying out some basic math operators*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单2-1：尝试一些基本的数学运算符*'
- en: The answer should appear as the output. You can use spaces to make the code
    more readable (6 + 5) or not (6+5), but it won’t make any difference to Python
    when you’re doing arithmetic.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该显示为输出。你可以使用空格使代码更具可读性（6 + 5），也可以不使用空格（6+5），但在进行算术时，Python不会因此有所不同。
- en: Keep in mind that division in Python 2 is a little tricky. For example, Python 2
    will take 46/13 and think you’re interested only in integers, thus giving you
    a whole number (3) for the answer instead of returning a decimal value, like in
    [Listing 2-1](ch02.xhtml#ch02list1). Because you downloaded Python 3, you shouldn’t
    have that problem. But the graphics package we’ll see later uses Python 2, so
    we’ll have to make sure we ask for decimals when we divide.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Python 2中的除法有点复杂。例如，Python 2会将46/13当作整数运算，结果给你一个整数（3），而不是像[清单2-1](ch02.xhtml#ch02list1)中那样返回小数值。由于你下载的是Python
    3，因此不会遇到这个问题。但我们稍后看到的图形包使用的是Python 2，所以在进行除法时，我们必须确保要求返回小数。
- en: OPERATING ON VARIABLES
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变量操作
- en: You can also use operators on variables. In [Chapter 1](ch01.xhtml#ch01) you
    learned to use variables when defining a function. Like variables in algebra,
    variables in programming allow long, complicated calculations to be broken into
    several stages by storing results that can be used again later. [Listing 2-2](ch02.xhtml#ch02list2)
    shows how you can use variables to store numbers and operate on them, no matter
    what their value is.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以对变量使用运算符。在[第1章](ch01.xhtml#ch01)中，你学习了如何在定义函数时使用变量。就像代数中的变量一样，编程中的变量允许通过存储中间结果，将复杂的计算分解成多个阶段，这些结果可以在后续阶段再次使用。[清单2-2](ch02.xhtml#ch02list2)展示了如何使用变量来存储数字并对其进行运算，无论它们的值是什么。
- en: '>>> x = 5'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = 5'
- en: '>>> x = x + 2'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = x + 2'
- en: '>>> length = 12'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> length = 12'
- en: '>>> x + length'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x + length'
- en: '19'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '*Listing 2-2: Storing results in variables*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-2：将结果存储在变量中*'
- en: Here, we assign the value 5 to the x variable, then increment it by 2, so x
    becomes 7\. We then assign the value 12 to the variable length. When we add x
    and length, we’re adding 7 + 12, so the result is 19.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将值 5 赋给 x 变量，然后将其增加 2，因此 x 变成 7。接着，我们将值 12 赋给变量 length。当我们将 x 和 length
    相加时，实际上是在加 7 + 12，因此结果是 19。
- en: USING OPERATORS TO WRITE THE AVERAGE() FUNCTION
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用运算符编写 average() 函数
- en: 'Let’s practice using operators to find the mean of a series of numbers. As
    you may know from math class, to find the mean you add all the numbers together
    and divide them by how many numbers there are in the series. For example, if your
    numbers are 10 and 20, you add 10 and 20 and divide the sum by 2, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习使用运算符来求一系列数字的平均值。正如你在数学课上学到的，求平均值的方法是将所有数字相加，然后除以数字的个数。例如，如果你的数字是 10 和
    20，你就将 10 和 20 相加，然后将和除以 2，如下所示：
- en: (10 + 20) / 2 = 15
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: (10 + 20) / 2 = 15
- en: 'If your numbers are 9, 15, and 23, you add them together and divide the sum
    by 3:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数字是 9、15 和 23，你将它们加起来，然后将和除以 3：
- en: (9 + 15 + 23) / 3 = 47 / 3 = 15.67
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: (9 + 15 + 23) / 3 = 47 / 3 = 15.67
- en: 'This can be tedious to do by hand but simple to do with code. Let’s start a
    Python file called *arithmetic.py* and write a function to find the average of
    two numbers. You should be able to run the function and give it two numbers as
    arguments, without any operators, and have it print the average, like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 手动做这个可能会很麻烦，但用代码做就简单了。让我们开始编写一个名为 *arithmetic.py* 的 Python 文件，并编写一个函数来求两个数字的平均值。你应该能够运行该函数，并将两个数字作为参数传入，且不需要使用运算符，直接输出平均值，像这样：
- en: '>>> average(10,20)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> average(10,20)'
- en: '15.0'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '15.0'
- en: Let’s give it a try.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下。
- en: MIND THE ORDER OF OPERATIONS!
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意运算顺序！
- en: 'Our average() function transforms two numbers, a and b, into half their sum
    and then returns that value using the return keyword. Here’s the code for our
    function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 average() 函数将两个数字 a 和 b 转换为它们和的一半，然后通过 return 关键字返回该值。以下是我们函数的代码：
- en: '*arithmetic.py*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*arithmetic.py*'
- en: 'def average(a,b):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'def average(a,b):'
- en: return a + b / 2
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: return a + b / 2
- en: 'We define a function called average(), which requires two numbers, a and b,
    as inputs. We write that the function should return the sum of the two numbers
    divided by 2\. However, when we test the function in the shell, we get the wrong
    output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个叫做 average() 的函数，要求输入两个数字 a 和 b。我们写下函数应返回这两个数字之和除以 2。然而，当我们在 shell 中测试函数时，得到了错误的输出：
- en: '>>> average(10,20)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> average(10,20)'
- en: '20.0'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '20.0'
- en: That’s because we didn’t take the *order of operations* into account when writing
    our function. As you probably remember from math class, multiplication and division
    take precedence over addition and subtraction, so in this case division is performed
    first. This function is dividing b by 2 and *then* adding a. So how do we fix
    this?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们在编写函数时没有考虑到*运算顺序*。正如你从数学课上可能记得的，乘法和除法优先于加法和减法，因此在这种情况下，除法会先进行。所以，这个函数先将
    b 除以 2，然后*再*加上 a。那么我们该如何修复这个问题呢？
- en: USING PARENTHESES WITH OPERATORS
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用运算符时的括号
- en: 'We need to use parentheses to tell Python to add the two numbers first, before
    dividing:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用括号告诉 Python 先加这两个数字，然后再除：
- en: '*arithmetic.py*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*arithmetic.py*'
- en: 'def average(a,b):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'def average(a,b):'
- en: return (a + b) / 2
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: return (a + b) / 2
- en: 'Now the function should add a and b before dividing by 2\. Here’s what happens
    when we run the function in the shell:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，函数应该先将 a 和 b 相加，再除以 2。下面是在 shell 中运行该函数时发生的情况：
- en: '>>> average(10,20)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> average(10,20)'
- en: '15.0'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '15.0'
- en: If you perform this same calculation by hand, you can see the output is correct!
    Try the average() function using different numbers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你手动进行这个计算，可以看到输出是正确的！试试使用不同的数字来调用 average() 函数。
- en: DATA TYPES IN PYTHON
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 中的数据类型
- en: Before we continue doing arithmetic on numbers, let’s explore some basic Python
    data types. Different data types have different capabilities, and you can’t always
    perform the same operations on all of them, so it’s important to know how each
    data type works.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续进行数字运算之前，让我们先了解一下 Python 中的一些基本数据类型。不同的数据类型具有不同的功能，你不能对所有数据类型执行相同的操作，因此了解每种数据类型的工作方式是非常重要的。
- en: INTEGERS AND FLOATS
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 整数和浮点数
- en: 'Two Python data types you commonly perform operations on are integers and floats.
    *Integers* are whole numbers. *Floats* are numbers containing decimals. You can
    change integers to floats, and vice versa, by using the float() and int() functions,
    respectively, like so:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你常见的 Python 数据类型有整数和浮点数。*整数*是没有小数部分的数字，*浮点数*是包含小数的数字。你可以使用 `float()` 和 `int()`
    函数，分别将整数转换为浮点数，反之亦然，像这样：
- en: '>>> x = 3'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = 3'
- en: '>>> x'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '3'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '>>> y = float(x)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> y = float(x)'
- en: '>>> y'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> y'
- en: '3.0'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '3.0'
- en: '>>> z = int(y)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> z = int(y)'
- en: '>>> z'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> z'
- en: '3'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: In this example we use x = 3 to assign the value 3 to the variable x. We then
    convert x into a float using float(x) and assign the result (3.0) to the variable
    y. Finally, we convert y into an integer and assign the result (3) to the variable
    z. This shows how you can easily switch between floats and ints.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 x = 3 将值 3 赋给变量 x。然后我们使用 float(x) 将 x 转换为浮点数，并将结果（3.0）赋给变量 y。最后，我们将
    y 转换为整数，并将结果（3）赋给变量 z。这展示了你如何在浮点数和整数之间轻松转换。
- en: STRINGS
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串
- en: '*Strings* are ordered alphanumeric characters, which can be a series of letters,
    like words, or numbers. You define a string by enclosing the characters in single
    ('''') or double quotes (""), like so:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串* 是有序的字母数字字符，可以是由字母组成的词，或者是数字。你可以通过将字符用单引号（''''）或双引号（""）括起来来定义字符串，如下所示：'
- en: '>>> a = "hello"'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a = "hello"'
- en: '>>> a + a'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a + a'
- en: '''hellohello'''
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '''hellohello'''
- en: '>>> 4*a'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 4*a'
- en: '''hellohellohellohello'''
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '''hellohellohellohello'''
- en: 'Here, we store the string "hello" in variable a. When we add variable a to
    itself, we get a new string, ''hellohello'', which is a combination of two hellos.
    Keep in mind that you can’t add strings and number data types (integers and floats)
    together, though. If you try adding the integer 2 and the string "hello", you’ll
    get this error message:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们将字符串 "hello" 存储在变量 a 中。当我们将变量 a 与自身相加时，我们得到一个新的字符串，'hellohello'，它是两个 hello
    的组合。请记住，你不能将字符串与数字数据类型（整数和浮点数）相加。如果你尝试将整数 2 和字符串 "hello" 相加，你会收到如下错误信息：
- en: '>>> b = 2'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b = 2'
- en: '>>> b'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '2'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '>>> d = "hello"'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d = "hello"'
- en: '>>> b + d'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b + d'
- en: 'Traceback (most recent call last):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '追溯（最近一次调用）：  '
- en: File "<pyshell#34>", line 1, in <module>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 "<pyshell#34>"，第 1 行，在 <module> 中
- en: b + d
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: b + d
- en: 'TypeError: unsupported operand type(s) for +: ''int'' and ''str'''
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeError: 对 ''+'' 运算符的操作数类型不支持：''int'' 和 ''str'''
- en: 'However, if a number is a string (or enclosed in quotes), you can add it to
    another string, like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果一个数字是字符串（或者被引号括起来），你可以将它与另一个字符串相加，如下所示：
- en: '>>> b = ''123'''
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b = ''123'''
- en: '>>> c = ''4'''
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c = ''4'''
- en: '>>> b + c'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b + c'
- en: '''1234'''
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '''1234'''
- en: '>>> ''hello'' + '' 123'''
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> ''hello'' + '' 123'''
- en: '''hello 123'''
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '''hello 123'''
- en: In this example both '123' and '4' are strings made up of numbers, not number
    data types. So when you add the two together you get a longer string ('1234')
    that is a combination of the two strings. You can do the same with the strings
    'hello' and ' 123', even though one is made of letters and the other is made of
    numbers. Joining strings to create a new string is called *concatenation*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，'123' 和 '4' 都是由数字组成的字符串，而不是数字数据类型。因此，当你将这两个字符串相加时，得到的是一个更长的字符串（'1234'），它是这两个字符串的组合。你也可以对字符串
    'hello' 和 '123' 做同样的操作，尽管一个是字母组成，另一个是数字组成。将字符串连接起来形成一个新的字符串叫做 *连接*。
- en: 'You can also multiply a string by an integer to repeat the string, like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过将字符串乘以一个整数来重复该字符串，如下所示：
- en: '>>> name = "Marcia"'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> name = "Marcia"'
- en: '>>> 3 * name'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 3 * name'
- en: '''MarciaMarciaMarcia'''
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '''MarciaMarciaMarcia'''
- en: 'But you can’t subtract, multiply, or divide a string by another string. Enter
    the following in the shell to see what happens:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你不能将字符串与另一个字符串进行减法、乘法或除法。输入以下内容到命令行中，看看会发生什么：
- en: '>>> noun = ''dog'''
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> noun = ''dog'''
- en: '>>> verb = ''bark'''
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> verb = ''bark'''
- en: '>>> noun * verb'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> noun * verb'
- en: 'Traceback (most recent call last):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '追溯（最近一次调用）：  '
- en: File "<pyshell#6>", line 1, in <module>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 "<pyshell#6>"，第 1 行，在 <module> 中
- en: noun * verb
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: noun * verb
- en: 'TypeError: can''t multiply sequence by non-int of type ''str'''
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeError: 无法将字符串类型与非整数类型相乘'
- en: As you can see, when you try to multiply 'dog' and 'bark', you get an error
    telling you that you can’t multiply two string data types.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，当你尝试将 'dog' 和 'bark' 相乘时，出现了一个错误，提示你不能将两个字符串数据类型相乘。
- en: BOOLEANS
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布尔值
- en: '*Booleans* are true/false values, which means they can be only one or the other
    and nothing in between. Boolean values have to be capitalized in Python and are
    often used to compare the values of two things. To compare values you can use
    the greater-than (>) and less-than (<) symbols, like so:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*布尔值* 是表示真/假的值，意味着它们只能是“真”或“假”，没有中间状态。在 Python 中，布尔值必须大写，并且通常用于比较两个值。要比较值，你可以使用大于（>）和小于（<）符号，像这样：'
- en: '>>> 3 > 2'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 3 > 2'
- en: 'True'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: 'Because 3 is greater than 2, this expression returns True. But checking whether
    two values are equal requires two equal signs (==), because one equal sign simply
    assigns a value to a variable. Here’s an example of how this works:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 3 大于 2，这个表达式返回 True。但检查两个值是否相等需要两个等号（==），因为一个等号只是将一个值赋给变量。以下是一个示例：
- en: '>>> b = 5'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '>>> b == 5'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b == 5'
- en: 'True'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: '>>> b == 6'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b == 6'
- en: 'False'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'False'
- en: First we assign the value 5 to variable b using one equal sign. Then we use
    two equal signs to check whether b is equal to 5, which returns True.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用一个等号将值5赋给变量b。然后我们使用两个等号来检查b是否等于5，这将返回True。
- en: CHECKING DATA TYPES
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查数据类型
- en: 'You can always check which data type you’re dealing with by using the type()
    function with a variable. Python conveniently tells you what data type the value
    in the variable is. For example, let’s assign a Boolean value to a variable, like
    this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 type() 函数和变量来始终检查您正在处理的数据类型。Python方便地告诉您变量中的值是什么数据类型。例如，让我们将一个布尔值赋给一个变量，就像这样：
- en: '>>> a = True'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a = True'
- en: '>>> type(a)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> type(a)'
- en: <class 'bool'>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <class 'bool'>
- en: When you pass variable a into the type() function, Python tells you that the
    value in a is a Boolean.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将变量a传递给type()函数时，Python告诉您a中的值是布尔值。
- en: 'Try checking the data type of an integer:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试检查整数的数据类型：
- en: '>>> b = 2'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b = 2'
- en: '>>> type(b)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> type(b)'
- en: <class 'int'>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <class 'int'>
- en: 'The following checks whether 0.5 is a float:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下检查0.5是否为浮点数：
- en: '>>> c = 0.5'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c = 0.5'
- en: '>>> type(c)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> type(c)'
- en: <class 'float'>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <class 'float'>
- en: 'This example confirms that alphanumeric symbols inside quotes are a string:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例确认引号内的字母数字符号是一个字符串：
- en: '>>> name = "Steve"'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> name = "Steve"'
- en: '>>> type(name)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> type(name)'
- en: <class 'str'>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <class 'str'>
- en: Now that you know the different data types in Python and how to check the data
    type of a value you’re working with, let’s start automating simple arithmetic
    tasks.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道了Python中的不同数据类型以及如何检查您正在处理的值的数据类型，让我们开始自动化简单的算术任务。
- en: USING LISTS TO STORE VALUES
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用列表存储值
- en: 'So far we’ve used variables to hold a single value. A *list* is a type of variable
    that can hold multiple values, which is useful for automating repetitive tasks.
    To declare a list in Python, you simply create a name for the list, use the =
    command like you do with variables, and then enclose the items you want to place
    in the list in square brackets, [], separating each item using a comma, like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用变量来保存单个值。*列表*是一种可以保存多个值的变量类型，对于自动化重复任务非常有用。要在Python中声明列表，您只需创建列表的名称，像变量一样使用=命令，然后使用方括号[]将要放入列表中的项目括起来，用逗号分隔每个项目，像这样：
- en: '>>> a = [1,2,3]'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a = [1,2,3]'
- en: '>>> a'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a'
- en: '[1, 2, 3]'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, 3]'
- en: 'Often it’s useful to create an empty list so you can add values, such as numbers,
    coordinates, and objects, to it later. To do this, just create the list as you
    would normally but without any values, as shown here:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，创建一个空列表是很有用的，这样你就可以稍后添加值，比如数字、坐标和对象。要做到这一点，只需像通常那样创建列表，但不要添加任何值，如下所示：
- en: '>>> b = []'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b = []'
- en: '>>> b'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '[]'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: This creates an empty list called b, which you can fill with different values.
    Let’s see how to add things to a list.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为b的空列表，您可以在其中填充不同的值。让我们看看如何向列表添加内容。
- en: ADDING ITEMS TO A LIST
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向列表添加项目
- en: 'To add an item to a list, use the append() function, as shown here:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要向列表添加项目，请使用append()函数，如下所示：
- en: '>>> b.append(4)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b.append(4)'
- en: '>>> b'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '[4]'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[4]'
- en: First, type the name of the list (b) you want to add to, followed by a period,
    and then use append() to name the item you want to add inside parentheses. You
    can see the list now contains just the number 4.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，键入要添加到的列表（b）的名称，然后是一个句点，然后在括号内使用append()来命名要添加的项目。您可以看到列表现在仅包含数字4。
- en: 'You can also add items to lists that aren’t empty, like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以像这样向不为空的列表添加项目：
- en: '>>> b.append(5)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b.append(5)'
- en: '>>> b'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '[4, 5]'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, 5]'
- en: '>>> b.append(True)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b.append(True)'
- en: '>>> b'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '[4, 5, True]'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, 5, True]'
- en: Items appended to an existing list appear at the end of the list. As you can
    see, your list doesn’t have to be just numbers. Here, we append the Boolean value
    True to a list containing the numbers 4 and 5.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到现有列表中的项目将显示在列表末尾。如您所见，列表不仅限于数字。在这里，我们将布尔值True添加到包含数字4和5的列表中。
- en: 'A single list can hold more than one data type, too. For example, you can add
    text as strings, as shown here:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 单个列表也可以包含多种数据类型。例如，您可以像这样将文本添加为字符串：
- en: '>>> b.append("hello")'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b.append("hello")'
- en: '>>> b'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '[4, 5, True, ''hello'']'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, 5, True, ''hello'']'
- en: 'To add a string, you need to include either double or single quotes around
    the text. Otherwise, Python looks for a variable named hello, which may or may
    not exist, thus causing an error or unexpected behavior. Now you have four items
    in list b: two numbers, a Boolean value, and a string.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加字符串，您需要在文本周围包含双引号或单引号。否则，Python将寻找一个名为hello的变量，这可能存在也可能不存在，从而导致错误或意外行为。现在列表b中有四个项目：两个数字、一个布尔值和一个字符串。
- en: OPERATING ON LISTS
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 操作列表
- en: Like on strings, you can use addition and multiplication operators on lists,
    but you can’t simply add a number and a list. Instead, you have to append it using
    concatenation.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 像字符串一样，你可以对列表使用加法和乘法运算符，但不能直接将数字与列表相加。相反，你需要通过连接来追加它。
- en: 'For example, you can add two lists together using the + operator, like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以像这样使用 + 操作符将两个列表相加：
- en: '>>> c = [7,True]'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c = [7,True]'
- en: '>>> d = [8,''Python'']'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d = [8,''Python'']'
- en: '>>> c + d #adding two lists'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c + d  #将两个列表相加'
- en: '[7, True, 8, ''Python'']'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[7, True, 8, ''Python'']'
- en: 'We can also multiply a list by a number, like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以像这样将列表与数字相乘：
- en: '>>> 2 * d #multiplying a list by a number'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 2 * d  #将列表与数字相乘'
- en: '[8, ''Python'', 8, ''Python'']'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[8, ''Python'', 8, ''Python'']'
- en: As you can see, multiplying the number 2 by list d doubles the number of items
    in the original list.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，将数字 2 乘以列表 d 会将原始列表中的项数量加倍。
- en: 'But when we try to add a number and a list using the + operator, we get an
    error called a TypeError:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我们尝试使用 + 操作符将一个数字和一个列表相加时，会出现一个叫做 TypeError 的错误：
- en: '>>> d + 2 #you can''t add a list and an integer'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d + 2  #你不能将列表和整数相加'
- en: 'Traceback (most recent call last):'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'Traceback (most recent call last):'
- en: File "<pyshell#22>", line 1, in <module>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: File "<pyshell#22>", line 1, in <module>
- en: d + 2
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: d + 2
- en: 'TypeError: can only concatenate list (not "int") to list'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeError: 只能将列表（而不是 "int"）与列表连接'
- en: This is because you can’t add a number and a list using the addition symbol.
    Although you can add two lists together, append an item to a list, and even multiply
    a list by a number, you can concatenate a list only to another list.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你不能使用加号将数字与列表相加。虽然你可以将两个列表相加，向列表中追加项，甚至将列表乘以一个数字，但你只能将一个列表与另一个列表连接。
- en: REMOVING ITEMS FROM A LIST
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从列表中移除项
- en: 'Removing an item from a list is just as easy: you can use the remove() function
    with the item you want to remove as the argument, as shown next. Make sure to
    refer to the item you’re removing exactly as it appears in the code; otherwise,
    Python won’t understand what to delete.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中移除项非常简单：你可以使用 remove() 函数，并将你想移除的项作为参数，如下所示。确保准确地引用你要删除的项，否则 Python 将无法理解要删除什么。
- en: '>>> b = [4,5,True,''hello'']'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b = [4,5,True,''hello'']'
- en: '>>> b.remove(5)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b.remove(5)'
- en: '>>> b'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b'
- en: '[4, True, ''hello'']'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, True, ''hello'']'
- en: In this example, b.remove(5) removes 5 from the list, but notice that the rest
    of the items stay in the same order. The fact that the order is maintained like
    this will become important later.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，b.remove(5) 从列表中移除了 5，但注意其余的项保持原有顺序。保持顺序这一点在后续会变得非常重要。
- en: USING LISTS IN LOOPS
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在循环中使用列表
- en: 'Often in math you need to apply the same action to multiple numbers. For example,
    an algebra book might define a function and ask you to plug a bunch of different
    numbers into the function. You can do this in Python by storing the numbers in
    a list and then using the for loop you learned about in [Chapter 1](ch01.xhtml#ch01)
    to perform the same action on each item in the list. Remember, when you perform
    an action repeatedly, it’s known as *iterating*. The iterator is the variable
    i in for i in range(10), which we’ve used in previous programs, but it doesn’t
    always have to be called i; it can be called anything you want, as in this example:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，通常需要对多个数字执行相同的操作。例如，一本代数书可能会定义一个函数，并要求你将多个不同的数字代入该函数。你可以通过将这些数字存储在列表中，然后使用你在[第一章](ch01.xhtml#ch01)中学到的
    for 循环，在列表的每一项上执行相同的操作来实现。记住，当你重复执行某个操作时，这叫做 *迭代*。迭代器是 for i in range(10) 中的变量
    i，我们在之前的程序中用过，但它不一定非要叫做 i；它可以被称为你想要的任何名字，正如这个例子中所示：
- en: '>>> a = [12,"apple",True,0.25]'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a = [12,"apple",True,0.25]'
- en: '>>> for thing in a:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> for thing in a:'
- en: print(thing)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: print(thing)
- en: '12'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: apple
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: apple
- en: 'True'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: '0.25'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '0.25'
- en: 'Here, the iterator is called thing and it’s applying the print() function to
    each item in the list a. Notice that the items are printed in order, with each
    item on a new line. To print everything on the same line, you need to add an end
    argument and an empty string to your print() function, like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，迭代器被称为 thing，它将 print() 函数应用到列表 a 中的每一项。注意，项是按顺序打印的，每一项都在新的一行。要在同一行打印所有内容，你需要在
    print() 函数中添加一个 end 参数，并传入一个空字符串，像这样：
- en: '>>> for thing in a:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> for thing in a:'
- en: print(thing, end='')
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: print(thing, end='')
- en: 12appleTrue0.25
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 12appleTrue0.25
- en: 'This prints all the items on the same line, but all the values run together,
    making it hard to distinguish between them. The default value for the end argument
    is the line break, as you saw in the preceding example, but you can insert any
    character or punctuation you want by putting it in the quotes. Here I’ve added
    a comma instead:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将所有项目打印在同一行，但所有值会连在一起，导致很难区分它们。end 参数的默认值是换行符，正如你在前面的例子中看到的那样，但你可以通过在引号中插入任何字符或标点符号来插入自己想要的分隔符。这里我添加了逗号：
- en: '>>> a = [12,"apple",True,0.25]'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> a = [12,"apple",True,0.25]'
- en: '>>> for thing in a:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> for thing in a:'
- en: print(thing, end=',')
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: print(thing, end=',')
- en: 12,apple,True,0.25,
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 12,apple,True,0.25,
- en: Now each item is separated by a comma, which is much easier to read.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每个项目都由逗号分隔，这样更容易阅读。
- en: ACCESSING INDIVIDUAL ITEMS WITH LIST INDICES
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过列表索引访问单个项目
- en: 'You can refer to any element in a list by specifying the name of the list and
    then entering its index in square brackets. The *index* is an item’s place or
    position number in the list. The first index of a list is 0\. An index enables
    us to use a meaningful name to store a series of values and access them easily
    within our program. Try this code out in IDLE to see indices in action:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定列表的名称并在方括号中输入索引来引用列表中的任何元素。*索引*是项目在列表中的位置或编号。列表的第一个索引是 0。索引使我们能够使用有意义的名称存储一系列值，并在程序中轻松访问它们。试试这段代码，看看索引的实际效果：
- en: '>>> name_list = [''Abe'',''Bob'',''Chloe'',''Daphne'']'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> name_list = [''Abe'',''Bob'',''Chloe'',''Daphne'']'
- en: '>>> score_list = [55,63,72,54]'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> score_list = [55,63,72,54]'
- en: '>>> print(name_list[0], score_list[0])'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(name_list[0], score_list[0])'
- en: Abe 55
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Abe 55
- en: 'The index can also be a variable or an iterator, as shown here:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 索引也可以是变量或迭代器，如下所示：
- en: '>>> n = 2'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> n = 2'
- en: '>>> print(name_list[n], score_list[n+1])'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> print(name_list[n], score_list[n+1])'
- en: Chloe 54
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Chloe 54
- en: '>>> for i in range(4):'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> for i in range(4):'
- en: print(name_list[i], score_list[i])
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: print(name_list[i], score_list[i])
- en: Abe 55
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Abe 55
- en: Bob 63
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 63
- en: Chloe 72
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Chloe 72
- en: Daphne 54
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Daphne 54
- en: ACCESSING INDEX AND VALUE WITH ENUMERATE()
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 enumerate() 访问索引和值
- en: 'To get both the index and the value of an item in a list, you can use a handy
    function called enumerate(). Here’s how it works:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时获取列表中项目的索引和值，你可以使用一个方便的函数叫做 enumerate()。它是这样工作的：
- en: '>>> name_list = [''Abe'',''Bob'',''Chloe'',''Daphne'']'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> name_list = [''Abe'',''Bob'',''Chloe'',''Daphne'']'
- en: '>>> for i, name in enumerate(name_list):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> for i, name in enumerate(name_list):'
- en: print(name,"has index",i)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: print(name,"has index",i)
- en: Abe has index 0
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Abe 的索引是 0
- en: Bob has index 1
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 的索引是 1
- en: Chloe has index 2
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Chloe 的索引是 2
- en: Daphne has index 3
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Daphne 的索引是 3
- en: Here, name is the value of the item in the list and i is the index. The important
    thing to remember with enumerate() is that the index comes first, then the value.
    You’ll see this later on when we put objects into a list and then access both
    an object and its exact place in the list.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，name 是列表中项目的值，而 i 是索引。使用 enumerate() 时需要记住的重要一点是，索引在前，值在后。稍后我们会看到，当我们将对象放入列表中并访问每个对象及其精确位置时，这一点非常重要。
- en: INDICES START AT ZERO
  id: totrans-244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 索引从零开始
- en: 'In [Chapter 1](ch01.xhtml#ch01) you learned that the range(n) function generates
    a sequence of numbers starting with 0 and up to, but excluding, n. Similarly,
    list indices start at 0, not 1, so the index of the first element is 0. Try the
    following to see how this works:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第一章](ch01.xhtml#ch01)中，你学到过 range(n) 函数会生成一个从 0 开始并一直到（但不包含）n的数字序列。同样，列表的索引也从
    0 开始，而不是 1，所以第一个元素的索引是 0。试试下面的代码，看看它是如何工作的：
- en: '>>> b = [4,True,''hello'']'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b = [4,True,''hello'']'
- en: '>>> b[0]'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b[0]'
- en: '4'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '>>> b[2]'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b[2]'
- en: '''hello'''
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '''hello'''
- en: Here, we create a list called b and then ask Python to show us the item at index
    0 in list b, which is the first position. We therefore get 4. When we ask for
    the item in list b at position 2, we get 'hello'.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们创建了一个名为 b 的列表，然后让 Python 显示列表 b 中索引为 0 的项目，也就是第一个位置。因此我们得到 4。当我们请求列表 b
    中索引为 2 的项目时，我们得到 'hello'。
- en: ACCESSING A RANGE OF LIST ITEMS
  id: totrans-252
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 访问列表项目的范围
- en: 'You can use the range (:) syntax inside the brackets to access a range of elements
    in a list. For example, to return everything from the second item of a list to
    the sixth, for example, use the following syntax:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在括号内使用 range (:) 语法来访问列表中一系列的元素。例如，要返回从列表的第二个项目到第六个项目，可以使用以下语法：
- en: '>>> myList = [1,2,3,4,5,6,7]'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> myList = [1,2,3,4,5,6,7]'
- en: '>>> myList[1:6]'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> myList[1:6]'
- en: '[2, 3, 4, 5, 6]'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[2, 3, 4, 5, 6]'
- en: It’s important to know that the 1:6 range syntax includes the *first* index
    in that range, 1, but *excludes* the last index, 6. That means the range 1:6 actually
    gives us the items with indexes 1 to 5.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，1:6 的范围语法包含该范围内的*第一个*索引 1，但*不包含*最后一个索引 6。这意味着范围 1:6 实际上会给我们返回索引为 1 到
    5 的项目。
- en: 'If you don’t specify the ending index of the range, Python defaults to the
    length of the list. It returns all elements, from the first index to the end of
    the list, by default. For example, you can access everything from the second element
    of list b (index 1) to the end of the list using the following syntax:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定范围的结束索引，Python 默认使用列表的长度。它默认返回从第一个索引到列表末尾的所有元素。例如，你可以使用以下语法访问列表 b 从第二个元素（索引
    1）到列表末尾的所有元素：
- en: '>>> b[1:]'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b[1:]'
- en: '[True, ''hello'']'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[True, ''hello'']'
- en: 'If you don’t specify the beginning, Python defaults to the first item in the
    list, and it won’t include the ending index, as shown here:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定起始位置，Python 默认从列表中的第一个项目开始，并且不会包括结束索引，如下所示：
- en: '>>> b[:1]'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b[:1]'
- en: '[4]'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[4]'
- en: 'In this example, b[:1] includes the first item (index 0) but not the item with
    index 1. One very useful thing to know is that you can access the last terms in
    a list even if you don’t know how long it is by using negative numbers. To access
    the last item, you’d use -1, and to access the second-to-last item, you’d use
    -2, like this:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，b[:1] 包含了第一个项目（索引 0），但不包括索引为 1 的项目。一个非常有用的知识是，即使你不知道列表有多长，也可以使用负数来访问列表中的最后几个项目。要访问最后一个项目，你可以使用
    -1，要访问倒数第二个项目，你可以使用 -2，像这样：
- en: '>>> b[-1]'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b[-1]'
- en: '''hello'''
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '''hello'''
- en: '>>> b[-2]'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> b[-2]'
- en: 'True'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: This can be really useful when you are using lists made by other people or using
    really long lists where it’s hard to keep track of all the index positions.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用别人创建的列表或处理非常长的列表时，知道如何访问最后几个元素会非常有用，这样你就不需要记住所有的索引位置。
- en: FINDING OUT THE INDEX OF AN ITEM
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找项目的索引
- en: 'If you know that a certain value is in the list but don’t know its index, you
    can find its location by giving the list name, followed by the index function,
    and placing the value you’re searching for as its argument inside parentheses.
    In the shell, create list c, as shown here, and try the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道某个值在列表中，但不知道它的索引，你可以通过给出列表名，接着使用 `index` 函数，并将你要查找的值作为参数放在括号内，来查找它的位置。在命令行中创建列表
    c，如下所示，并尝试以下操作：
- en: '>>> c = [1,2,3,''hello'']'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c = [1,2,3,''hello'']'
- en: '>>> c.index(1)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c.index(1)'
- en: '0'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: '>>> c.index(''hello'')'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c.index(''hello'')'
- en: '3'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '>>> c.index(4)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c.index(4)'
- en: 'Traceback (most recent call last):'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'Traceback (most recent call last):'
- en: File "<pyshell#85>", line 1, in <module>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 "<pyshell#85>"，第 1 行，在 <module> 中
- en: b.index(4)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: b.index(4)
- en: 'ValueError: 4 is not in list'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'ValueError: 4 不在列表中'
- en: You can see that asking for the value 1 returns the index 0, because it’s the
    first item in the list. When you ask for the index of 'hello', you’re told it’s
    3. That last attempt, however, results in an error message. As you can see from
    the last line in the error message, the cause of the error is that 4, the value
    we are looking for, is not in the list, so Python can’t give us its index.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，查询值 1 返回了索引 0，因为它是列表中的第一个项目。当你查询 'hello' 的索引时，返回的是 3。然而，最后一次尝试会导致错误信息。从错误信息的最后一行可以看出，错误的原因是我们要找的值
    4 不在列表中，所以 Python 无法返回它的索引。
- en: 'To check whether an item exists in a list, use the in keyword, like this:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个项目是否存在于列表中，使用 `in` 关键字，如下所示：
- en: '>>> c = [1,2,3,''hello'']'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> c = [1,2,3,''hello'']'
- en: '>>> 4 in c'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 4 in c'
- en: 'False'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 'False'
- en: '>>> 3 in c'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 3 in c'
- en: 'True'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: Here, Python returns True if an item is in the list and False if the item is
    not in the list.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，如果项目在列表中，Python 会返回 True，如果项目不在列表中，则返回 False。
- en: STRINGS USE INDICES, TOO
  id: totrans-290
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串也使用索引
- en: 'Everything you’ve learned about list indices applies to strings, too. A string
    has a length, and all the characters in the string are indexed. Enter the following
    in the shell to see how this works:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 你在学习列表索引时学到的所有内容同样适用于字符串。一个字符串有一个长度，字符串中的所有字符都有索引。请输入以下内容到命令行，看看它是如何工作的：
- en: '>>> d = ''Python'''
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d = ''Python'''
- en: '>>> len(d) #How many characters are in ''Python''?'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> len(d) # ''Python'' 中有多少个字符？'
- en: '6'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '>>> d[0]'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d[0]'
- en: '''P'''
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '''P'''
- en: '>>> d[1]'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d[1]'
- en: '''y'''
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '''y'''
- en: '>>> d[-1]'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d[-1]'
- en: '''n'''
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '''n'''
- en: '>>> d[2:]'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d[2:]'
- en: '''thon'''
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '''thon'''
- en: '>>> d[:5]'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d[:5]'
- en: '''Pytho'''
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '''Pytho'''
- en: '>>> d[1:4]'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> d[1:4]'
- en: '''yth'''
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '''yth'''
- en: Here, you can see that the string 'Python' is made of six characters. Each character
    has an index, which you can access using the same syntax you used for lists.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，你可以看到字符串 'Python' 由六个字符组成。每个字符都有一个索引，你可以使用与列表相同的语法来访问它们。
- en: SUMMATION
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求和
- en: When you’re adding a bunch of numbers inside a loop, it’s useful to keep track
    of the running total of those numbers. Keeping a running total like this is an
    important math concept called *summation*.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个循环中添加多个数字时，跟踪这些数字的运行总和是很有用的。保持这样的运行总和是一个重要的数学概念，叫做 *求和*。
- en: 'In math class you often see summation associated with a capital sigma, which
    is the Greek letter *S* (for sum). The notation looks like this:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，你经常看到求和符号与大写希腊字母 *S*（表示和）关联。符号如下所示：
- en: '![Image](../images/e032-01.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/e032-01.jpg)'
- en: The summation notation means that you replace *n* with *i* starting at the minimum
    value (listed below the sigma) and going up to the maximum value (listed above
    the sigma). Unlike in Python’s range(n), the summation notation includes the maximum
    value.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 求和符号表示你从最小值（在 sigma 下方列出）开始，直到最大值（在 sigma 上方列出），将 *n* 替换为 *i*。与 Python 的 range(n)
    不同，求和符号包括最大值。
- en: CREATING THE RUNNING_SUM VARIABLE
  id: totrans-313
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 RUNNING_SUM 变量
- en: 'To write a summation program in Python, we can create a variable called running_sum
    (sum is taken already as a built-in Python function). We set it to a value of
    zero to begin with and then increment the running_sum variable each time a value
    is added. For this we use the += notation again. Enter the following in the shell
    to see an example:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 中编写求和程序，我们可以创建一个名为 running_sum 的变量（sum 已经是 Python 内置的函数）。我们将其初始值设置为零，然后每次添加一个值时递增
    running_sum 变量。为此，我们再次使用 += 符号。在命令行中输入以下内容以查看示例：
- en: '>>> running_sum = 0'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> running_sum = 0'
- en: '>>> running_sum += 3'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> running_sum += 3'
- en: '>>> running_sum'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> running_sum'
- en: '3'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '>>> running_sum += 5'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> running_sum += 5'
- en: '>>> running_sum'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> running_sum'
- en: '8'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: 'You learned how to use the += command as a shortcut: using running_sum += 3
    is the same as running_sum = running_sum + 3. Let’s increment the running sum
    by 3 a bunch of times to test it out. To do this, add the following code to the
    *arithmetic.py* program:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何使用 += 命令作为快捷方式：使用 running_sum += 3 与 running_sum = running_sum + 3 是等效的。让我们通过多次递增
    running_sum 来测试一下。为此，请在 *arithmetic.py* 程序中添加以下代码：
- en: '*arithmetic.py*'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '*arithmetic.py*'
- en: running_sum = 0
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: running_sum = 0
- en: '➊ for i in range(10):'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '➊ for i in range(10):'
- en: ➋    running_sum += 3
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ➋    running_sum += 3
- en: print(running_sum)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: print(running_sum)
- en: We first create a running_sum variable with the value 0 and then run the for
    loop 10 times using range(10) ➊. The indented content of the loop adds 3 to the
    value of running_sum on each run of the loop ➋. After the loop runs 10 times,
    Python jumps to the final line of code, which in this case is the print statement
    that displays the value of running_sum at the end of 10 loops.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个初始值为 0 的 running_sum 变量，然后使用 range(10) 运行 10 次 for 循环 ➊。循环的缩进部分在每次运行循环时将
    3 加到 running_sum 的值上 ➋。当循环执行 10 次后，Python 会跳转到代码的最后一行，这一行是打印语句，用于显示 10 次循环结束时
    running_sum 的值。
- en: 'From this, you might be able to figure out what the final sum is, and here’s
    the output:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 从中，你可能能够推算出最终的总和，以下是输出：
- en: '30'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '30'
- en: In other words, 10 multiplied by 3 is 30, so the output makes sense!
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，10 乘以 3 等于 30，所以输出是合理的！
- en: WRITING THE MYSUM() FUNCTION
  id: totrans-332
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写 MYSUM() 函数
- en: 'Let’s expand our running sum program into a function called mySum(), which
    takes an integer as a parameter and returns the sum of all the numbers from 1
    up to the number specified, like this:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将求和程序扩展为一个名为 mySum() 的函数，它接受一个整数作为参数，并返回从 1 到指定数字的所有数字之和，如下所示：
- en: '>>> mySum(10)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> mySum(10)'
- en: '55'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '55'
- en: 'First, we declare the value of the running sum and then increment it in the
    loop:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明 running_sum 的值，然后在循环中递增它：
- en: '*arithmetic.py*'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '*arithmetic.py*'
- en: 'def mySum(num):'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 'def mySum(num):'
- en: running_sum = 0
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: running_sum = 0
- en: 'for i in range(1,num+1):'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1,num+1):'
- en: running_sum += i
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: running_sum += i
- en: return running_sum
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: return running_sum
- en: To define the mySum() function, we start the running sum off at 0\. Then we
    set up a range of values for i, from 1 to num. Keep in mind that range(1,num)
    won’t include num itself! Then we add i to the running sum after every loop. When
    the loop is finished, it should return the value of the running sum.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义 mySum() 函数，我们从 0 开始运行总和。然后我们为 i 设置一个值范围，从 1 到 num。请注意，range(1,num) 不包括
    num 本身！接着我们在每次循环后将 i 加到 running_sum 中。当循环完成时，应该返回 running_sum 的值。
- en: 'Run the function with a much larger number in the shell. It should be able
    to return the sum of all the numbers, from 1 to that number, in a flash:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中用更大的数字运行该函数。它应该能够快速返回从 1 到该数字的所有数字之和：
- en: '>>> mySum(100)'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> mySum(100)'
- en: '5050'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '5050'
- en: 'Pretty convenient! To solve for the sum of our more difficult sigma problem
    from earlier, simply change your loop to go from 0 to 20 (including 20) and add
    the square of i plus 1 every loop:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 非常方便！要解决我们之前提到的更复杂的 sigma 问题，只需将循环从 0 改为 20（包括 20），并在每次循环中加上 i 的平方加 1：
- en: '*arithmetic.py*'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '*arithmetic.py*'
- en: 'def mySum2(num):'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 'def mySum2(num):'
- en: running_sum = 0
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: running_sum = 0
- en: 'for i in range(num+1):'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(num+1):'
- en: running_sum += i**2 + 1
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: running_sum += i**2 + 1
- en: return running_sum
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: return running_sum
- en: 'I changed the loop so it would start at 0, as the sigma notation indicates:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我修改了循环，使其从0开始，就像西格玛表示法所指示的那样：
- en: '![Image](../images/e033-01.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/e033-01.jpg)'
- en: 'When we run this, we get the following:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个时，我们得到如下结果：
- en: '>>> mySum2(20)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> mySum2(20)'
- en: '2891'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '2891'
- en: 'EXERCISE 2-1: FINDING THE SUM'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 2-1：求和
- en: Find the sum of all the numbers from 1 to 100\. How about from 1 to 1,000? See
    a pattern?
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 找出从1到100的所有数字的和。那从1到1,000呢？你看到了什么规律吗？
- en: FINDING THE AVERAGE OF A LIST OF NUMBERS
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求一组数字的平均值
- en: Now that you have a few new skills under your belt, let’s improve our average
    function. We can write a function that uses lists to find the average of any list
    of numbers, without us having to specify how many there are.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你掌握了一些新技能，让我们改进我们的平均函数。我们可以编写一个函数，利用列表来计算任何数字列表的平均值，而无需我们指定数字的数量。
- en: 'In math class you learn that to find the average of a bunch of numbers, you
    divide the sum of those numbers by how many numbers there are. In Python you can
    use a function called sum() to add up all the numbers in a list, like this:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，你学到要找出一组数字的平均值，你需要将这些数字的总和除以数字的数量。在Python中，你可以使用一个名为sum()的函数来将列表中的所有数字加起来，像这样：
- en: '>>> sum([8,11,15])'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> sum([8,11,15])'
- en: '34'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: 'Now we just have to find out the number of items in the list. In the average()
    function we wrote earlier in this chapter, we knew there were only two numbers.
    But what if there are more? Fortunately, we can use the len() function to count
    the number of items in a list. Here’s an example:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要找出列表中元素的个数。在本章前面编写的average()函数中，我们知道只有两个数字。但如果有更多呢？幸运的是，我们可以使用len()函数来计算列表中元素的数量。以下是一个示例：
- en: '>>> len([8,11,15])'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> len([8,11,15])'
- en: '3'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: 'As you can see, you simply enter the function and pass the list as the argument.
    This means that we can use both the sum() and len() functions to find the average
    of the items in the list by dividing the sum of the list by the length of the
    list. Using these built-in keywords, we can create a concise version of the average
    function, which would look something like this:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你只需输入函数并将列表作为参数传入。这意味着我们可以同时使用sum()和len()函数，通过将列表的总和除以列表的长度来找到列表中项的平均值。使用这些内置关键字，我们可以创建一个简洁的平均函数版本，代码如下：
- en: '*arithmetic.py*'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '*arithmetic.py*'
- en: 'def average3(numList):'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 'def average3(numList):'
- en: return sum(numList)/len(numList)
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: return sum(numList)/len(numList)
- en: 'When you call the function in the shell, you should get the following output:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在命令行中调用该函数时，你应该会得到以下输出：
- en: '>>> average3([8,11,15])'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> average3([8,11,15])'
- en: '11.333333333333334'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '11.333333333333334'
- en: The good thing about this version of the average function is that it works for
    a short list of numbers as well as for a long one!
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的平均函数的好处是，它既适用于短列表，也适用于长列表的数字！
- en: 'EXERCISE 2-2: FINDING THE AVERAGE'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 2-2：求平均值
- en: 'Find the average of the numbers in the list below:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 找出以下列表中数字的平均值：
- en: d = [53, 28, 54, 84, 65, 60, 22, 93, 62, 27, 16, 25, 74, 42, 4, 42,
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: d = [53, 28, 54, 84, 65, 60, 22, 93, 62, 27, 16, 25, 74, 42, 4, 42,
- en: 15, 96, 11, 70, 83, 97, 75]
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 15, 96, 11, 70, 83, 97, 75]
- en: SUMMARY
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you learned about data types like integers, floats, and Booleans.
    You learned to create a list, add and remove elements from a list, and find specific
    items in a list using indices. Then you learned how to use loops, lists, and variables
    to solve arithmetic problems, such as finding the average of a bunch of numbers
    and keeping a running sum.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了整数、浮点数和布尔值等数据类型。你学会了创建列表，添加和删除列表中的元素，并使用索引找到列表中的特定项。然后，你学会了如何使用循环、列表和变量来解决算术问题，比如计算一组数字的平均值和保持累积和。
- en: In the next chapter you’ll learn about conditionals, another important programming
    concept you’ll need to learn to tackle the rest of this book.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习条件语句，这是你学习本书其余部分时需要掌握的另一个重要编程概念。
